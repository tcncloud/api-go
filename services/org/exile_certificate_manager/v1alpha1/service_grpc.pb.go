// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: services/org/exile_certificate_manager/v1alpha1/service.proto

package exile_certificate_managerv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ExileCertificateManagerService_CreateExileCertificate_FullMethodName     = "/services.org.exile_certificate_manager.v1alpha1.ExileCertificateManagerService/CreateExileCertificate"
	ExileCertificateManagerService_RevokeExileCertificate_FullMethodName     = "/services.org.exile_certificate_manager.v1alpha1.ExileCertificateManagerService/RevokeExileCertificate"
	ExileCertificateManagerService_AssignExileConfiguration_FullMethodName   = "/services.org.exile_certificate_manager.v1alpha1.ExileCertificateManagerService/AssignExileConfiguration"
	ExileCertificateManagerService_UnassignExileConfiguration_FullMethodName = "/services.org.exile_certificate_manager.v1alpha1.ExileCertificateManagerService/UnassignExileConfiguration"
	ExileCertificateManagerService_ListExileCertificates_FullMethodName      = "/services.org.exile_certificate_manager.v1alpha1.ExileCertificateManagerService/ListExileCertificates"
	ExileCertificateManagerService_CreateExileConfiguration_FullMethodName   = "/services.org.exile_certificate_manager.v1alpha1.ExileCertificateManagerService/CreateExileConfiguration"
	ExileCertificateManagerService_UpdateExileConfiguration_FullMethodName   = "/services.org.exile_certificate_manager.v1alpha1.ExileCertificateManagerService/UpdateExileConfiguration"
	ExileCertificateManagerService_DeleteExileConfiguration_FullMethodName   = "/services.org.exile_certificate_manager.v1alpha1.ExileCertificateManagerService/DeleteExileConfiguration"
	ExileCertificateManagerService_ListExileConfigurations_FullMethodName    = "/services.org.exile_certificate_manager.v1alpha1.ExileCertificateManagerService/ListExileConfigurations"
)

// ExileCertificateManagerServiceClient is the client API for ExileCertificateManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ExileCertificateManagerService is the service for managing organization's exile ceritificate.
type ExileCertificateManagerServiceClient interface {
	// CreateExileCertificate creates a new TLS certificate and
	// returns the exile ceritificate for the current organization.
	CreateExileCertificate(ctx context.Context, in *CreateExileCertificateRequest, opts ...grpc.CallOption) (*CreateExileCertificateResponse, error)
	// RevokeExileCertificate deletes a exile ceritificate for the current organization.
	RevokeExileCertificate(ctx context.Context, in *RevokeExileCertificateRequest, opts ...grpc.CallOption) (*RevokeExileCertificateResponse, error)
	// AssignExileConfiguration assigns a configuration to a certificate.
	AssignExileConfiguration(ctx context.Context, in *AssignExileConfigurationRequest, opts ...grpc.CallOption) (*AssignExileConfigurationResponse, error)
	// UnassignExileConfiguration unassigns a configuration from a certificate.
	UnassignExileConfiguration(ctx context.Context, in *UnassignExileConfigurationRequest, opts ...grpc.CallOption) (*UnassignExileConfigurationResponse, error)
	// ListExileCertificates returns a list of exile ceritificate for the current organization.
	ListExileCertificates(ctx context.Context, in *ListExileCertificatesRequest, opts ...grpc.CallOption) (*ListExileCertificatesResponse, error)
	// CreateExileConfiguration creates a new exile configuration for the current organization.
	CreateExileConfiguration(ctx context.Context, in *CreateExileConfigurationRequest, opts ...grpc.CallOption) (*CreateExileConfigurationResponse, error)
	// UpdateExileConfiguration updates a exile configuration for the current organization.
	UpdateExileConfiguration(ctx context.Context, in *UpdateExileConfigurationRequest, opts ...grpc.CallOption) (*UpdateExileConfigurationResponse, error)
	// DeleteExileConfiguration deletes a exile configuration for the current organization.
	// The configuration can only be deleted if it is not assigned to any certificates.
	DeleteExileConfiguration(ctx context.Context, in *DeleteExileConfigurationRequest, opts ...grpc.CallOption) (*DeleteExileConfigurationResponse, error)
	// ListExileConfigurations returns a list of exile configurations for the current organization.
	ListExileConfigurations(ctx context.Context, in *ListExileConfigurationsRequest, opts ...grpc.CallOption) (*ListExileConfigurationsResponse, error)
}

type exileCertificateManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExileCertificateManagerServiceClient(cc grpc.ClientConnInterface) ExileCertificateManagerServiceClient {
	return &exileCertificateManagerServiceClient{cc}
}

func (c *exileCertificateManagerServiceClient) CreateExileCertificate(ctx context.Context, in *CreateExileCertificateRequest, opts ...grpc.CallOption) (*CreateExileCertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateExileCertificateResponse)
	err := c.cc.Invoke(ctx, ExileCertificateManagerService_CreateExileCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exileCertificateManagerServiceClient) RevokeExileCertificate(ctx context.Context, in *RevokeExileCertificateRequest, opts ...grpc.CallOption) (*RevokeExileCertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeExileCertificateResponse)
	err := c.cc.Invoke(ctx, ExileCertificateManagerService_RevokeExileCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exileCertificateManagerServiceClient) AssignExileConfiguration(ctx context.Context, in *AssignExileConfigurationRequest, opts ...grpc.CallOption) (*AssignExileConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignExileConfigurationResponse)
	err := c.cc.Invoke(ctx, ExileCertificateManagerService_AssignExileConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exileCertificateManagerServiceClient) UnassignExileConfiguration(ctx context.Context, in *UnassignExileConfigurationRequest, opts ...grpc.CallOption) (*UnassignExileConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnassignExileConfigurationResponse)
	err := c.cc.Invoke(ctx, ExileCertificateManagerService_UnassignExileConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exileCertificateManagerServiceClient) ListExileCertificates(ctx context.Context, in *ListExileCertificatesRequest, opts ...grpc.CallOption) (*ListExileCertificatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListExileCertificatesResponse)
	err := c.cc.Invoke(ctx, ExileCertificateManagerService_ListExileCertificates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exileCertificateManagerServiceClient) CreateExileConfiguration(ctx context.Context, in *CreateExileConfigurationRequest, opts ...grpc.CallOption) (*CreateExileConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateExileConfigurationResponse)
	err := c.cc.Invoke(ctx, ExileCertificateManagerService_CreateExileConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exileCertificateManagerServiceClient) UpdateExileConfiguration(ctx context.Context, in *UpdateExileConfigurationRequest, opts ...grpc.CallOption) (*UpdateExileConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateExileConfigurationResponse)
	err := c.cc.Invoke(ctx, ExileCertificateManagerService_UpdateExileConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exileCertificateManagerServiceClient) DeleteExileConfiguration(ctx context.Context, in *DeleteExileConfigurationRequest, opts ...grpc.CallOption) (*DeleteExileConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteExileConfigurationResponse)
	err := c.cc.Invoke(ctx, ExileCertificateManagerService_DeleteExileConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exileCertificateManagerServiceClient) ListExileConfigurations(ctx context.Context, in *ListExileConfigurationsRequest, opts ...grpc.CallOption) (*ListExileConfigurationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListExileConfigurationsResponse)
	err := c.cc.Invoke(ctx, ExileCertificateManagerService_ListExileConfigurations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExileCertificateManagerServiceServer is the server API for ExileCertificateManagerService service.
// All implementations must embed UnimplementedExileCertificateManagerServiceServer
// for forward compatibility
//
// ExileCertificateManagerService is the service for managing organization's exile ceritificate.
type ExileCertificateManagerServiceServer interface {
	// CreateExileCertificate creates a new TLS certificate and
	// returns the exile ceritificate for the current organization.
	CreateExileCertificate(context.Context, *CreateExileCertificateRequest) (*CreateExileCertificateResponse, error)
	// RevokeExileCertificate deletes a exile ceritificate for the current organization.
	RevokeExileCertificate(context.Context, *RevokeExileCertificateRequest) (*RevokeExileCertificateResponse, error)
	// AssignExileConfiguration assigns a configuration to a certificate.
	AssignExileConfiguration(context.Context, *AssignExileConfigurationRequest) (*AssignExileConfigurationResponse, error)
	// UnassignExileConfiguration unassigns a configuration from a certificate.
	UnassignExileConfiguration(context.Context, *UnassignExileConfigurationRequest) (*UnassignExileConfigurationResponse, error)
	// ListExileCertificates returns a list of exile ceritificate for the current organization.
	ListExileCertificates(context.Context, *ListExileCertificatesRequest) (*ListExileCertificatesResponse, error)
	// CreateExileConfiguration creates a new exile configuration for the current organization.
	CreateExileConfiguration(context.Context, *CreateExileConfigurationRequest) (*CreateExileConfigurationResponse, error)
	// UpdateExileConfiguration updates a exile configuration for the current organization.
	UpdateExileConfiguration(context.Context, *UpdateExileConfigurationRequest) (*UpdateExileConfigurationResponse, error)
	// DeleteExileConfiguration deletes a exile configuration for the current organization.
	// The configuration can only be deleted if it is not assigned to any certificates.
	DeleteExileConfiguration(context.Context, *DeleteExileConfigurationRequest) (*DeleteExileConfigurationResponse, error)
	// ListExileConfigurations returns a list of exile configurations for the current organization.
	ListExileConfigurations(context.Context, *ListExileConfigurationsRequest) (*ListExileConfigurationsResponse, error)
	mustEmbedUnimplementedExileCertificateManagerServiceServer()
}

// UnimplementedExileCertificateManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExileCertificateManagerServiceServer struct {
}

func (UnimplementedExileCertificateManagerServiceServer) CreateExileCertificate(context.Context, *CreateExileCertificateRequest) (*CreateExileCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExileCertificate not implemented")
}
func (UnimplementedExileCertificateManagerServiceServer) RevokeExileCertificate(context.Context, *RevokeExileCertificateRequest) (*RevokeExileCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeExileCertificate not implemented")
}
func (UnimplementedExileCertificateManagerServiceServer) AssignExileConfiguration(context.Context, *AssignExileConfigurationRequest) (*AssignExileConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignExileConfiguration not implemented")
}
func (UnimplementedExileCertificateManagerServiceServer) UnassignExileConfiguration(context.Context, *UnassignExileConfigurationRequest) (*UnassignExileConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignExileConfiguration not implemented")
}
func (UnimplementedExileCertificateManagerServiceServer) ListExileCertificates(context.Context, *ListExileCertificatesRequest) (*ListExileCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExileCertificates not implemented")
}
func (UnimplementedExileCertificateManagerServiceServer) CreateExileConfiguration(context.Context, *CreateExileConfigurationRequest) (*CreateExileConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExileConfiguration not implemented")
}
func (UnimplementedExileCertificateManagerServiceServer) UpdateExileConfiguration(context.Context, *UpdateExileConfigurationRequest) (*UpdateExileConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExileConfiguration not implemented")
}
func (UnimplementedExileCertificateManagerServiceServer) DeleteExileConfiguration(context.Context, *DeleteExileConfigurationRequest) (*DeleteExileConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExileConfiguration not implemented")
}
func (UnimplementedExileCertificateManagerServiceServer) ListExileConfigurations(context.Context, *ListExileConfigurationsRequest) (*ListExileConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExileConfigurations not implemented")
}
func (UnimplementedExileCertificateManagerServiceServer) mustEmbedUnimplementedExileCertificateManagerServiceServer() {
}

// UnsafeExileCertificateManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExileCertificateManagerServiceServer will
// result in compilation errors.
type UnsafeExileCertificateManagerServiceServer interface {
	mustEmbedUnimplementedExileCertificateManagerServiceServer()
}

func RegisterExileCertificateManagerServiceServer(s grpc.ServiceRegistrar, srv ExileCertificateManagerServiceServer) {
	s.RegisterService(&ExileCertificateManagerService_ServiceDesc, srv)
}

func _ExileCertificateManagerService_CreateExileCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExileCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExileCertificateManagerServiceServer).CreateExileCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExileCertificateManagerService_CreateExileCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExileCertificateManagerServiceServer).CreateExileCertificate(ctx, req.(*CreateExileCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExileCertificateManagerService_RevokeExileCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeExileCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExileCertificateManagerServiceServer).RevokeExileCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExileCertificateManagerService_RevokeExileCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExileCertificateManagerServiceServer).RevokeExileCertificate(ctx, req.(*RevokeExileCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExileCertificateManagerService_AssignExileConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignExileConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExileCertificateManagerServiceServer).AssignExileConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExileCertificateManagerService_AssignExileConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExileCertificateManagerServiceServer).AssignExileConfiguration(ctx, req.(*AssignExileConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExileCertificateManagerService_UnassignExileConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignExileConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExileCertificateManagerServiceServer).UnassignExileConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExileCertificateManagerService_UnassignExileConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExileCertificateManagerServiceServer).UnassignExileConfiguration(ctx, req.(*UnassignExileConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExileCertificateManagerService_ListExileCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExileCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExileCertificateManagerServiceServer).ListExileCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExileCertificateManagerService_ListExileCertificates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExileCertificateManagerServiceServer).ListExileCertificates(ctx, req.(*ListExileCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExileCertificateManagerService_CreateExileConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExileConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExileCertificateManagerServiceServer).CreateExileConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExileCertificateManagerService_CreateExileConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExileCertificateManagerServiceServer).CreateExileConfiguration(ctx, req.(*CreateExileConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExileCertificateManagerService_UpdateExileConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExileConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExileCertificateManagerServiceServer).UpdateExileConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExileCertificateManagerService_UpdateExileConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExileCertificateManagerServiceServer).UpdateExileConfiguration(ctx, req.(*UpdateExileConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExileCertificateManagerService_DeleteExileConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExileConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExileCertificateManagerServiceServer).DeleteExileConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExileCertificateManagerService_DeleteExileConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExileCertificateManagerServiceServer).DeleteExileConfiguration(ctx, req.(*DeleteExileConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExileCertificateManagerService_ListExileConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExileConfigurationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExileCertificateManagerServiceServer).ListExileConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExileCertificateManagerService_ListExileConfigurations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExileCertificateManagerServiceServer).ListExileConfigurations(ctx, req.(*ListExileConfigurationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExileCertificateManagerService_ServiceDesc is the grpc.ServiceDesc for ExileCertificateManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExileCertificateManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.org.exile_certificate_manager.v1alpha1.ExileCertificateManagerService",
	HandlerType: (*ExileCertificateManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExileCertificate",
			Handler:    _ExileCertificateManagerService_CreateExileCertificate_Handler,
		},
		{
			MethodName: "RevokeExileCertificate",
			Handler:    _ExileCertificateManagerService_RevokeExileCertificate_Handler,
		},
		{
			MethodName: "AssignExileConfiguration",
			Handler:    _ExileCertificateManagerService_AssignExileConfiguration_Handler,
		},
		{
			MethodName: "UnassignExileConfiguration",
			Handler:    _ExileCertificateManagerService_UnassignExileConfiguration_Handler,
		},
		{
			MethodName: "ListExileCertificates",
			Handler:    _ExileCertificateManagerService_ListExileCertificates_Handler,
		},
		{
			MethodName: "CreateExileConfiguration",
			Handler:    _ExileCertificateManagerService_CreateExileConfiguration_Handler,
		},
		{
			MethodName: "UpdateExileConfiguration",
			Handler:    _ExileCertificateManagerService_UpdateExileConfiguration_Handler,
		},
		{
			MethodName: "DeleteExileConfiguration",
			Handler:    _ExileCertificateManagerService_DeleteExileConfiguration_Handler,
		},
		{
			MethodName: "ListExileConfigurations",
			Handler:    _ExileCertificateManagerService_ListExileConfigurations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/org/exile_certificate_manager/v1alpha1/service.proto",
}
