// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: services/org/exile_certificate_manager/v1alpha1/entities.proto

package exile_certificate_managerv1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ExileConfigurationType defines the types of exile configuration
type ExileConfigurationType int32

const (
	// Type Unspecified means the configuration type is not set.
	ExileConfigurationType_EXILE_CONFIGURATION_TYPE_UNSPECIFIED ExileConfigurationType = 0
	// Type None specifies that the configuration will not have any parameters.
	ExileConfigurationType_EXILE_CONFIGURATION_TYPE_NONE ExileConfigurationType = 1
	// Type Artiva HCX specifies the configuration for Artiva HCX (parameters required).
	ExileConfigurationType_EXILE_CONFIGURATION_TYPE_ARTIVA_HCX ExileConfigurationType = 2
	// Type Artiva RM specifies the configuration for Artiva RM (parameters required).
	ExileConfigurationType_EXILE_CONFIGURATION_TYPE_ARTIVA_RM ExileConfigurationType = 3
	// Type FACS specifies the configuration for FACS (parameters required).
	ExileConfigurationType_EXILE_CONFIGURATION_TYPE_FACS ExileConfigurationType = 4
)

// Enum value maps for ExileConfigurationType.
var (
	ExileConfigurationType_name = map[int32]string{
		0: "EXILE_CONFIGURATION_TYPE_UNSPECIFIED",
		1: "EXILE_CONFIGURATION_TYPE_NONE",
		2: "EXILE_CONFIGURATION_TYPE_ARTIVA_HCX",
		3: "EXILE_CONFIGURATION_TYPE_ARTIVA_RM",
		4: "EXILE_CONFIGURATION_TYPE_FACS",
	}
	ExileConfigurationType_value = map[string]int32{
		"EXILE_CONFIGURATION_TYPE_UNSPECIFIED": 0,
		"EXILE_CONFIGURATION_TYPE_NONE":        1,
		"EXILE_CONFIGURATION_TYPE_ARTIVA_HCX":  2,
		"EXILE_CONFIGURATION_TYPE_ARTIVA_RM":   3,
		"EXILE_CONFIGURATION_TYPE_FACS":        4,
	}
)

func (x ExileConfigurationType) Enum() *ExileConfigurationType {
	p := new(ExileConfigurationType)
	*p = x
	return p
}

func (x ExileConfigurationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExileConfigurationType) Descriptor() protoreflect.EnumDescriptor {
	return file_services_org_exile_certificate_manager_v1alpha1_entities_proto_enumTypes[0].Descriptor()
}

func (ExileConfigurationType) Type() protoreflect.EnumType {
	return &file_services_org_exile_certificate_manager_v1alpha1_entities_proto_enumTypes[0]
}

func (x ExileConfigurationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExileConfigurationType.Descriptor instead.
func (ExileConfigurationType) EnumDescriptor() ([]byte, []int) {
	return file_services_org_exile_certificate_manager_v1alpha1_entities_proto_rawDescGZIP(), []int{0}
}

// ExileCertificate contains the organization's exile certificate.
type ExileCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the exile certificate.
	ExileCertificateId string `protobuf:"bytes,1,opt,name=exile_certificate_id,json=exileCertificateId,proto3" json:"exile_certificate_id,omitempty"`
	// The id of the organization.
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// The certificate name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The certificate description.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The certificate hash/fingerprint.
	Hash string `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
	// The certificate expiration date.
	ExpirationDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	// The certificate creation date.
	CreationDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	// The requestor of the certificate (user ID or automated system)
	RequestBy string `protobuf:"bytes,8,opt,name=request_by,json=requestBy,proto3" json:"request_by,omitempty"`
	// Whether or not the certifcate has been revoked
	Revoked bool `protobuf:"varint,9,opt,name=revoked,proto3" json:"revoked,omitempty"`
	// The id of the exile configuration associated with the certificate.
	ExileConfigurationId string `protobuf:"bytes,10,opt,name=exile_configuration_id,json=exileConfigurationId,proto3" json:"exile_configuration_id,omitempty"`
	// The number of times the certificate has been renewed.
	RenewalInstance int64 `protobuf:"varint,11,opt,name=renewal_instance,json=renewalInstance,proto3" json:"renewal_instance,omitempty"`
}

func (x *ExileCertificate) Reset() {
	*x = ExileCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_org_exile_certificate_manager_v1alpha1_entities_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExileCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExileCertificate) ProtoMessage() {}

func (x *ExileCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_exile_certificate_manager_v1alpha1_entities_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExileCertificate.ProtoReflect.Descriptor instead.
func (*ExileCertificate) Descriptor() ([]byte, []int) {
	return file_services_org_exile_certificate_manager_v1alpha1_entities_proto_rawDescGZIP(), []int{0}
}

func (x *ExileCertificate) GetExileCertificateId() string {
	if x != nil {
		return x.ExileCertificateId
	}
	return ""
}

func (x *ExileCertificate) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ExileCertificate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExileCertificate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ExileCertificate) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ExileCertificate) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *ExileCertificate) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *ExileCertificate) GetRequestBy() string {
	if x != nil {
		return x.RequestBy
	}
	return ""
}

func (x *ExileCertificate) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *ExileCertificate) GetExileConfigurationId() string {
	if x != nil {
		return x.ExileConfigurationId
	}
	return ""
}

func (x *ExileCertificate) GetRenewalInstance() int64 {
	if x != nil {
		return x.RenewalInstance
	}
	return 0
}

// ExileConfiguration contains the organization's exile configuration for its certificates.
type ExileConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the exile configuration
	ExileConfigurationId string `protobuf:"bytes,1,opt,name=exile_configuration_id,json=exileConfigurationId,proto3" json:"exile_configuration_id,omitempty"`
	// The id of the organization.
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// The configuration name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The configuration description.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The type of exile configuration
	Type ExileConfigurationType `protobuf:"varint,5,opt,name=type,proto3,enum=services.org.exile_certificate_manager.v1alpha1.ExileConfigurationType" json:"type,omitempty"`
	// The parameters of the exile configuration
	// This is a JSON string with the following information:
	//  1. Database Host
	//  2. Database URL
	//  3. Database Port
	//  4. Database Username
	//  5. Database Password
	//  6. Max Number Connections
	//  7. Max Number Exile Jobs
	Parameters string `protobuf:"bytes,6,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *ExileConfiguration) Reset() {
	*x = ExileConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_org_exile_certificate_manager_v1alpha1_entities_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExileConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExileConfiguration) ProtoMessage() {}

func (x *ExileConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_exile_certificate_manager_v1alpha1_entities_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExileConfiguration.ProtoReflect.Descriptor instead.
func (*ExileConfiguration) Descriptor() ([]byte, []int) {
	return file_services_org_exile_certificate_manager_v1alpha1_entities_proto_rawDescGZIP(), []int{1}
}

func (x *ExileConfiguration) GetExileConfigurationId() string {
	if x != nil {
		return x.ExileConfigurationId
	}
	return ""
}

func (x *ExileConfiguration) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ExileConfiguration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExileConfiguration) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ExileConfiguration) GetType() ExileConfigurationType {
	if x != nil {
		return x.Type
	}
	return ExileConfigurationType_EXILE_CONFIGURATION_TYPE_UNSPECIFIED
}

func (x *ExileConfiguration) GetParameters() string {
	if x != nil {
		return x.Parameters
	}
	return ""
}

var File_services_org_exile_certificate_manager_v1alpha1_entities_proto protoreflect.FileDescriptor

var file_services_org_exile_certificate_manager_v1alpha1_entities_proto_rawDesc = []byte{
	0x0a, 0x3e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x65,
	0x78, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x65,
	0x78, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xc5, 0x03, 0x0a, 0x10, 0x45, 0x78, 0x69, 0x6c, 0x65, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x69, 0x6c, 0x65,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x69, 0x6c, 0x65, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x3f, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x69,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x69, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x6e, 0x65, 0x77,
	0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x94, 0x02, 0x0a, 0x12, 0x45,
	0x78, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x65, 0x78, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x47, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x65, 0x78, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x2a, 0xd9, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x24,
	0x45, 0x58, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x58, 0x49, 0x4c, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x58, 0x49,
	0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x56, 0x41, 0x5f, 0x48, 0x43, 0x58,
	0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x58, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x52, 0x54, 0x49, 0x56, 0x41, 0x5f, 0x52, 0x4d, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x58,
	0x49, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x43, 0x53, 0x10, 0x04, 0x42, 0x89, 0x03,
	0x0a, 0x33, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x65, 0x78, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x6c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d,
	0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x2f,
	0x65, 0x78, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x3b, 0x65, 0x78, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x4f, 0x45, 0xaa, 0x02, 0x2d, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x2e, 0x45, 0x78, 0x69, 0x6c, 0x65, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x2d, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x5c, 0x4f, 0x72, 0x67, 0x5c, 0x45, 0x78, 0x69, 0x6c, 0x65, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x39, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x5c, 0x4f, 0x72, 0x67, 0x5c, 0x45, 0x78, 0x69, 0x6c, 0x65, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x30, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x3a, 0x3a, 0x4f, 0x72, 0x67, 0x3a, 0x3a, 0x45, 0x78, 0x69, 0x6c, 0x65, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x3a,
	0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_services_org_exile_certificate_manager_v1alpha1_entities_proto_rawDescOnce sync.Once
	file_services_org_exile_certificate_manager_v1alpha1_entities_proto_rawDescData = file_services_org_exile_certificate_manager_v1alpha1_entities_proto_rawDesc
)

func file_services_org_exile_certificate_manager_v1alpha1_entities_proto_rawDescGZIP() []byte {
	file_services_org_exile_certificate_manager_v1alpha1_entities_proto_rawDescOnce.Do(func() {
		file_services_org_exile_certificate_manager_v1alpha1_entities_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_org_exile_certificate_manager_v1alpha1_entities_proto_rawDescData)
	})
	return file_services_org_exile_certificate_manager_v1alpha1_entities_proto_rawDescData
}

var file_services_org_exile_certificate_manager_v1alpha1_entities_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_services_org_exile_certificate_manager_v1alpha1_entities_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_services_org_exile_certificate_manager_v1alpha1_entities_proto_goTypes = []any{
	(ExileConfigurationType)(0),   // 0: services.org.exile_certificate_manager.v1alpha1.ExileConfigurationType
	(*ExileCertificate)(nil),      // 1: services.org.exile_certificate_manager.v1alpha1.ExileCertificate
	(*ExileConfiguration)(nil),    // 2: services.org.exile_certificate_manager.v1alpha1.ExileConfiguration
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
}
var file_services_org_exile_certificate_manager_v1alpha1_entities_proto_depIdxs = []int32{
	3, // 0: services.org.exile_certificate_manager.v1alpha1.ExileCertificate.expiration_date:type_name -> google.protobuf.Timestamp
	3, // 1: services.org.exile_certificate_manager.v1alpha1.ExileCertificate.creation_date:type_name -> google.protobuf.Timestamp
	0, // 2: services.org.exile_certificate_manager.v1alpha1.ExileConfiguration.type:type_name -> services.org.exile_certificate_manager.v1alpha1.ExileConfigurationType
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_services_org_exile_certificate_manager_v1alpha1_entities_proto_init() }
func file_services_org_exile_certificate_manager_v1alpha1_entities_proto_init() {
	if File_services_org_exile_certificate_manager_v1alpha1_entities_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_org_exile_certificate_manager_v1alpha1_entities_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ExileCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_org_exile_certificate_manager_v1alpha1_entities_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ExileConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_org_exile_certificate_manager_v1alpha1_entities_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_services_org_exile_certificate_manager_v1alpha1_entities_proto_goTypes,
		DependencyIndexes: file_services_org_exile_certificate_manager_v1alpha1_entities_proto_depIdxs,
		EnumInfos:         file_services_org_exile_certificate_manager_v1alpha1_entities_proto_enumTypes,
		MessageInfos:      file_services_org_exile_certificate_manager_v1alpha1_entities_proto_msgTypes,
	}.Build()
	File_services_org_exile_certificate_manager_v1alpha1_entities_proto = out.File
	file_services_org_exile_certificate_manager_v1alpha1_entities_proto_rawDesc = nil
	file_services_org_exile_certificate_manager_v1alpha1_entities_proto_goTypes = nil
	file_services_org_exile_certificate_manager_v1alpha1_entities_proto_depIdxs = nil
}
