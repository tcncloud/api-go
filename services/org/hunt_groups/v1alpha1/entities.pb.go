// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: services/org/hunt_groups/v1alpha1/entities.proto

package hunt_groupsv1alpha1

import (
	org "github.com/tcncloud/api-go/api/commons/org"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AgentStatus is the status of the agent on which the trigger is based
type AgentStatus int32

const (
	// 0 explicitly means unspecified or invalid.
	AgentStatus_AGENT_STATUS_UNSPECIFIED AgentStatus = 0
	// The status for when the agent is logged in
	AgentStatus_AGENT_STATUS_LOGGED_IN AgentStatus = 1
	// The status for when the agent is waiting
	AgentStatus_AGENT_STATUS_WAITING AgentStatus = 2
	// The status for when the agent is paused
	AgentStatus_AGENT_STATUS_PAUSED AgentStatus = 3
	// The status for when the agent is on call
	AgentStatus_AGENT_STATUS_ON_CALL AgentStatus = 4
	// The status for when the agent is on a transfer call
	AgentStatus_AGENT_STATUS_TRANSFER_CALL AgentStatus = 5
	// The status for when the agent is on a transfer call and the transfer is lost
	AgentStatus_AGENT_STATUS_TRANSFER_LOST AgentStatus = 6
	// The status for when the agent is on a transfer call and the transfer target is lost
	AgentStatus_AGENT_STATUS_TRANSFER_TARGET_LOST AgentStatus = 7
	// The status for when the agent is on a preview call
	AgentStatus_AGENT_STATUS_PREVIEW_CALL AgentStatus = 8
	// The status for when the agent is on a manual dial call
	AgentStatus_AGENT_STATUS_MANUAL_DIAL_CALL AgentStatus = 9
	// The status for when the agent is wrapping up the call
	AgentStatus_AGENT_STATUS_WRAP_UP AgentStatus = 10
)

// Enum value maps for AgentStatus.
var (
	AgentStatus_name = map[int32]string{
		0:  "AGENT_STATUS_UNSPECIFIED",
		1:  "AGENT_STATUS_LOGGED_IN",
		2:  "AGENT_STATUS_WAITING",
		3:  "AGENT_STATUS_PAUSED",
		4:  "AGENT_STATUS_ON_CALL",
		5:  "AGENT_STATUS_TRANSFER_CALL",
		6:  "AGENT_STATUS_TRANSFER_LOST",
		7:  "AGENT_STATUS_TRANSFER_TARGET_LOST",
		8:  "AGENT_STATUS_PREVIEW_CALL",
		9:  "AGENT_STATUS_MANUAL_DIAL_CALL",
		10: "AGENT_STATUS_WRAP_UP",
	}
	AgentStatus_value = map[string]int32{
		"AGENT_STATUS_UNSPECIFIED":          0,
		"AGENT_STATUS_LOGGED_IN":            1,
		"AGENT_STATUS_WAITING":              2,
		"AGENT_STATUS_PAUSED":               3,
		"AGENT_STATUS_ON_CALL":              4,
		"AGENT_STATUS_TRANSFER_CALL":        5,
		"AGENT_STATUS_TRANSFER_LOST":        6,
		"AGENT_STATUS_TRANSFER_TARGET_LOST": 7,
		"AGENT_STATUS_PREVIEW_CALL":         8,
		"AGENT_STATUS_MANUAL_DIAL_CALL":     9,
		"AGENT_STATUS_WRAP_UP":              10,
	}
)

func (x AgentStatus) Enum() *AgentStatus {
	p := new(AgentStatus)
	*p = x
	return p
}

func (x AgentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_enumTypes[0].Descriptor()
}

func (AgentStatus) Type() protoreflect.EnumType {
	return &file_services_org_hunt_groups_v1alpha1_entities_proto_enumTypes[0]
}

func (x AgentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentStatus.Descriptor instead.
func (AgentStatus) EnumDescriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{0}
}

// SystemPauseCode controls if a system Pause code is being used
type SystemPauseCode int32

const (
	// 0 explicitly means unspecified or invalid.
	SystemPauseCode_SYSTEM_PAUSE_CODE_UNSPECIFIED SystemPauseCode = 0
	// The code for when the agent triggers the advance to paused action
	SystemPauseCode_SYSTEM_PAUSE_CODE_AGENT_TRIGGER_ADVANCE_TO_PAUSED SystemPauseCode = 1
	// The code for when the agent triggers the change password action
	SystemPauseCode_SYSTEM_PAUSE_CODE_CHANGE_PASSWORD SystemPauseCode = 2
	// The code for when the agent triggers the check voice mail action
	SystemPauseCode_SYSTEM_PAUSE_CODE_CHECK_VOICE_MAIL SystemPauseCode = 3
	// The code for when the agent triggers manually approve calls action
	SystemPauseCode_SYSTEM_PAUSE_CODE_MANUALLY_APPROVE_CALLS SystemPauseCode = 4
)

// Enum value maps for SystemPauseCode.
var (
	SystemPauseCode_name = map[int32]string{
		0: "SYSTEM_PAUSE_CODE_UNSPECIFIED",
		1: "SYSTEM_PAUSE_CODE_AGENT_TRIGGER_ADVANCE_TO_PAUSED",
		2: "SYSTEM_PAUSE_CODE_CHANGE_PASSWORD",
		3: "SYSTEM_PAUSE_CODE_CHECK_VOICE_MAIL",
		4: "SYSTEM_PAUSE_CODE_MANUALLY_APPROVE_CALLS",
	}
	SystemPauseCode_value = map[string]int32{
		"SYSTEM_PAUSE_CODE_UNSPECIFIED":                     0,
		"SYSTEM_PAUSE_CODE_AGENT_TRIGGER_ADVANCE_TO_PAUSED": 1,
		"SYSTEM_PAUSE_CODE_CHANGE_PASSWORD":                 2,
		"SYSTEM_PAUSE_CODE_CHECK_VOICE_MAIL":                3,
		"SYSTEM_PAUSE_CODE_MANUALLY_APPROVE_CALLS":          4,
	}
)

func (x SystemPauseCode) Enum() *SystemPauseCode {
	p := new(SystemPauseCode)
	*p = x
	return p
}

func (x SystemPauseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SystemPauseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_enumTypes[1].Descriptor()
}

func (SystemPauseCode) Type() protoreflect.EnumType {
	return &file_services_org_hunt_groups_v1alpha1_entities_proto_enumTypes[1]
}

func (x SystemPauseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SystemPauseCode.Descriptor instead.
func (SystemPauseCode) EnumDescriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{1}
}

// TriggerAction is the action to take when the trigger is activated
type TriggerAction int32

const (
	// 0 explicitly means unspecified or invalid.
	TriggerAction_TRIGGER_ACTION_UNSPECIFIED TriggerAction = 0
	// The action to advance the agent to a status
	// Used for agent status: all but Logged In and all Transfer statuses
	TriggerAction_TRIGGER_ACTION_ADVANCE_TO_STATUS TriggerAction = 1
	// The action to display a message
	TriggerAction_TRIGGER_ACTION_DISPLAY_MESSAGE TriggerAction = 2
	// The action to eject the agent
	TriggerAction_TRIGGER_ACTION_EJECT_AGENT TriggerAction = 3
	// The action to execute a web link
	TriggerAction_TRIGGER_ACTION_EXECUTE_WEB_LINK TriggerAction = 4
	// The action to execute an integration link
	TriggerAction_TRIGGER_ACTION_EXECUTE_INTEGRATION_LINK TriggerAction = 5
	// The action to execute an exile link
	TriggerAction_TRIGGER_ACTION_EXECUTE_EXILE_LINK TriggerAction = 6
)

// Enum value maps for TriggerAction.
var (
	TriggerAction_name = map[int32]string{
		0: "TRIGGER_ACTION_UNSPECIFIED",
		1: "TRIGGER_ACTION_ADVANCE_TO_STATUS",
		2: "TRIGGER_ACTION_DISPLAY_MESSAGE",
		3: "TRIGGER_ACTION_EJECT_AGENT",
		4: "TRIGGER_ACTION_EXECUTE_WEB_LINK",
		5: "TRIGGER_ACTION_EXECUTE_INTEGRATION_LINK",
		6: "TRIGGER_ACTION_EXECUTE_EXILE_LINK",
	}
	TriggerAction_value = map[string]int32{
		"TRIGGER_ACTION_UNSPECIFIED":              0,
		"TRIGGER_ACTION_ADVANCE_TO_STATUS":        1,
		"TRIGGER_ACTION_DISPLAY_MESSAGE":          2,
		"TRIGGER_ACTION_EJECT_AGENT":              3,
		"TRIGGER_ACTION_EXECUTE_WEB_LINK":         4,
		"TRIGGER_ACTION_EXECUTE_INTEGRATION_LINK": 5,
		"TRIGGER_ACTION_EXECUTE_EXILE_LINK":       6,
	}
)

func (x TriggerAction) Enum() *TriggerAction {
	p := new(TriggerAction)
	*p = x
	return p
}

func (x TriggerAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerAction) Descriptor() protoreflect.EnumDescriptor {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_enumTypes[2].Descriptor()
}

func (TriggerAction) Type() protoreflect.EnumType {
	return &file_services_org_hunt_groups_v1alpha1_entities_proto_enumTypes[2]
}

func (x TriggerAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerAction.Descriptor instead.
func (TriggerAction) EnumDescriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{2}
}

// ExileLink defines a link between a hunt group and the exile service.
type ExileLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sid or the unique ID of the exile link stored in the database.
	ParameterSid int64 `protobuf:"varint,1,opt,name=parameter_sid,json=parameterSid,proto3" json:"parameter_sid,omitempty"`
	// The sid of the hunt group which the exile link is associated with.
	HuntGroupSid int64 `protobuf:"varint,2,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	// The display name of the exile link.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the exile link.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The order of the exile link, used when displaying.
	Order int64 `protobuf:"varint,5,opt,name=order,proto3" json:"order,omitempty"`
	// The parameter data for inbound calls.
	InboundData *ExileLinkData `protobuf:"bytes,6,opt,name=inbound_data,json=inboundData,proto3" json:"inbound_data,omitempty"`
	// The parameter data for outbound calls.
	OutboundData *ExileLinkData `protobuf:"bytes,7,opt,name=outbound_data,json=outboundData,proto3" json:"outbound_data,omitempty"`
}

func (x *ExileLink) Reset() {
	*x = ExileLink{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExileLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExileLink) ProtoMessage() {}

func (x *ExileLink) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExileLink.ProtoReflect.Descriptor instead.
func (*ExileLink) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{0}
}

func (x *ExileLink) GetParameterSid() int64 {
	if x != nil {
		return x.ParameterSid
	}
	return 0
}

func (x *ExileLink) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *ExileLink) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExileLink) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ExileLink) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *ExileLink) GetInboundData() *ExileLinkData {
	if x != nil {
		return x.InboundData
	}
	return nil
}

func (x *ExileLink) GetOutboundData() *ExileLinkData {
	if x != nil {
		return x.OutboundData
	}
	return nil
}

// ExileLinkData to be passed to exile.
type ExileLinkData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The record ID of the data.
	RecordId *ExileLinkParameter `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	// The alternate ID of the data.
	AlternateId *ExileLinkParameter `protobuf:"bytes,2,opt,name=alternate_id,json=alternateId,proto3" json:"alternate_id,omitempty"`
}

func (x *ExileLinkData) Reset() {
	*x = ExileLinkData{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExileLinkData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExileLinkData) ProtoMessage() {}

func (x *ExileLinkData) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExileLinkData.ProtoReflect.Descriptor instead.
func (*ExileLinkData) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{1}
}

func (x *ExileLinkData) GetRecordId() *ExileLinkParameter {
	if x != nil {
		return x.RecordId
	}
	return nil
}

func (x *ExileLinkData) GetAlternateId() *ExileLinkParameter {
	if x != nil {
		return x.AlternateId
	}
	return nil
}

// ExileLinkParameter describes the data or data source.
type ExileLinkParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID for the contact field.
	ContactFieldSid int64 `protobuf:"varint,1,opt,name=contact_field_sid,json=contactFieldSid,proto3" json:"contact_field_sid,omitempty"`
	// The helper value of the parameter.
	HelperValue string `protobuf:"bytes,2,opt,name=helper_value,json=helperValue,proto3" json:"helper_value,omitempty"`
	// The source type of the parameter.
	ParameterSourceType org.ParameterSourceType `protobuf:"varint,3,opt,name=parameter_source_type,json=parameterSourceType,proto3,enum=api.commons.org.ParameterSourceType" json:"parameter_source_type,omitempty"`
}

func (x *ExileLinkParameter) Reset() {
	*x = ExileLinkParameter{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExileLinkParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExileLinkParameter) ProtoMessage() {}

func (x *ExileLinkParameter) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExileLinkParameter.ProtoReflect.Descriptor instead.
func (*ExileLinkParameter) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{2}
}

func (x *ExileLinkParameter) GetContactFieldSid() int64 {
	if x != nil {
		return x.ContactFieldSid
	}
	return 0
}

func (x *ExileLinkParameter) GetHelperValue() string {
	if x != nil {
		return x.HelperValue
	}
	return ""
}

func (x *ExileLinkParameter) GetParameterSourceType() org.ParameterSourceType {
	if x != nil {
		return x.ParameterSourceType
	}
	return org.ParameterSourceType(0)
}

// ListHuntGroupExileLinksRequest is the request for ListHuntGroupExileLinks rpc.
type ListHuntGroupExileLinksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hunt group sid of the desired exile links
	HuntGroupSid int64 `protobuf:"varint,1,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
}

func (x *ListHuntGroupExileLinksRequest) Reset() {
	*x = ListHuntGroupExileLinksRequest{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHuntGroupExileLinksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHuntGroupExileLinksRequest) ProtoMessage() {}

func (x *ListHuntGroupExileLinksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHuntGroupExileLinksRequest.ProtoReflect.Descriptor instead.
func (*ListHuntGroupExileLinksRequest) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{3}
}

func (x *ListHuntGroupExileLinksRequest) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

// ListHuntGroupExileLinksResponse is the response for ListHuntGroupExileLinks rpc.
type ListHuntGroupExileLinksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The links for exile
	ExileLinks []*ExileLink `protobuf:"bytes,1,rep,name=exile_links,json=exileLinks,proto3" json:"exile_links,omitempty"`
}

func (x *ListHuntGroupExileLinksResponse) Reset() {
	*x = ListHuntGroupExileLinksResponse{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHuntGroupExileLinksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHuntGroupExileLinksResponse) ProtoMessage() {}

func (x *ListHuntGroupExileLinksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHuntGroupExileLinksResponse.ProtoReflect.Descriptor instead.
func (*ListHuntGroupExileLinksResponse) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{4}
}

func (x *ListHuntGroupExileLinksResponse) GetExileLinks() []*ExileLink {
	if x != nil {
		return x.ExileLinks
	}
	return nil
}

// CopyHuntGroupExileLinkRequest is the request message for the CopyHuntGroupExileLink rpc.
type CopyHuntGroupExileLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sid of the hunt group to copy the exile link to.
	ToHuntGroupSid int64 `protobuf:"varint,1,opt,name=to_hunt_group_sid,json=toHuntGroupSid,proto3" json:"to_hunt_group_sid,omitempty"`
	// The exile link to copy from the source hunt group.
	ExileLink *ExileLink `protobuf:"bytes,2,opt,name=exile_link,json=exileLink,proto3" json:"exile_link,omitempty"`
}

func (x *CopyHuntGroupExileLinkRequest) Reset() {
	*x = CopyHuntGroupExileLinkRequest{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyHuntGroupExileLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyHuntGroupExileLinkRequest) ProtoMessage() {}

func (x *CopyHuntGroupExileLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyHuntGroupExileLinkRequest.ProtoReflect.Descriptor instead.
func (*CopyHuntGroupExileLinkRequest) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{5}
}

func (x *CopyHuntGroupExileLinkRequest) GetToHuntGroupSid() int64 {
	if x != nil {
		return x.ToHuntGroupSid
	}
	return 0
}

func (x *CopyHuntGroupExileLinkRequest) GetExileLink() *ExileLink {
	if x != nil {
		return x.ExileLink
	}
	return nil
}

// CopyHuntGroupExileLinkResponse is the response message for the CopyHuntGroupExileLink rpc.
type CopyHuntGroupExileLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CopyHuntGroupExileLinkResponse) Reset() {
	*x = CopyHuntGroupExileLinkResponse{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyHuntGroupExileLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyHuntGroupExileLinkResponse) ProtoMessage() {}

func (x *CopyHuntGroupExileLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyHuntGroupExileLinkResponse.ProtoReflect.Descriptor instead.
func (*CopyHuntGroupExileLinkResponse) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{6}
}

// UpdateHuntGroupExileLinksRequest is the request message for the UpdateHuntGroupExileLinks rpc.
type UpdateHuntGroupExileLinksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sid of the hunt group to update the exile links for.
	HuntGroupSid int64 `protobuf:"varint,1,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	// The list of exile links to update.
	ExileLinks []*ExileLink `protobuf:"bytes,2,rep,name=exile_links,json=exileLinks,proto3" json:"exile_links,omitempty"`
}

func (x *UpdateHuntGroupExileLinksRequest) Reset() {
	*x = UpdateHuntGroupExileLinksRequest{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateHuntGroupExileLinksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHuntGroupExileLinksRequest) ProtoMessage() {}

func (x *UpdateHuntGroupExileLinksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHuntGroupExileLinksRequest.ProtoReflect.Descriptor instead.
func (*UpdateHuntGroupExileLinksRequest) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateHuntGroupExileLinksRequest) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *UpdateHuntGroupExileLinksRequest) GetExileLinks() []*ExileLink {
	if x != nil {
		return x.ExileLinks
	}
	return nil
}

// UpdateHuntGroupExileLinksResponse is the response message for the UpdateHuntGroupExileLinks RPC method.
type UpdateHuntGroupExileLinksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateHuntGroupExileLinksResponse) Reset() {
	*x = UpdateHuntGroupExileLinksResponse{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateHuntGroupExileLinksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHuntGroupExileLinksResponse) ProtoMessage() {}

func (x *UpdateHuntGroupExileLinksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHuntGroupExileLinksResponse.ProtoReflect.Descriptor instead.
func (*UpdateHuntGroupExileLinksResponse) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{8}
}

// AgentTrigger is the entity for a hunt group agent trigger.
type AgentTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sid of the agent trigger
	AgentTriggerSid int64 `protobuf:"varint,1,opt,name=agent_trigger_sid,json=agentTriggerSid,proto3" json:"agent_trigger_sid,omitempty"`
	// The description of the agent trigger
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The agent status option to use for the trigger
	AgentStatusOption *AgentStatusOption `protobuf:"bytes,3,opt,name=agent_status_option,json=agentStatusOption,proto3" json:"agent_status_option,omitempty"`
	// The action option to use for the trigger
	TriggerActionOption *TriggerActionOption `protobuf:"bytes,4,opt,name=trigger_action_option,json=triggerActionOption,proto3" json:"trigger_action_option,omitempty"`
}

func (x *AgentTrigger) Reset() {
	*x = AgentTrigger{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentTrigger) ProtoMessage() {}

func (x *AgentTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentTrigger.ProtoReflect.Descriptor instead.
func (*AgentTrigger) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{9}
}

func (x *AgentTrigger) GetAgentTriggerSid() int64 {
	if x != nil {
		return x.AgentTriggerSid
	}
	return 0
}

func (x *AgentTrigger) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AgentTrigger) GetAgentStatusOption() *AgentStatusOption {
	if x != nil {
		return x.AgentStatusOption
	}
	return nil
}

func (x *AgentTrigger) GetTriggerActionOption() *TriggerActionOption {
	if x != nil {
		return x.TriggerActionOption
	}
	return nil
}

// AgentStatusOption is the status option to use for the trigger
type AgentStatusOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the agent on which the trigger is based
	AgentStatus AgentStatus `protobuf:"varint,1,opt,name=agent_status,json=agentStatus,proto3,enum=services.org.hunt_groups.v1alpha1.AgentStatus" json:"agent_status,omitempty"`
	// The duration of the trigger (in seconds)
	// Used for agent status: all but Logged In
	Duration int64 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	// The pause code to use for the trigger
	// Use pause code only if either system_pause_code or custom_pause_code is set
	// Used for agent status: Paused
	PauseCode *TriggerPauseCode `protobuf:"bytes,3,opt,name=pause_code,json=pauseCode,proto3" json:"pause_code,omitempty"`
	// The call types to use for the trigger
	// Used for agent status: On Call, Wrap Up
	CallTypes *TriggerCallTypes `protobuf:"bytes,4,opt,name=call_types,json=callTypes,proto3" json:"call_types,omitempty"`
	// Whether to use the scheduled callback for the trigger
	// Used for agent status: Manual Dial Call
	ScheduledCallbackPresent bool `protobuf:"varint,5,opt,name=scheduled_callback_present,json=scheduledCallbackPresent,proto3" json:"scheduled_callback_present,omitempty"`
}

func (x *AgentStatusOption) Reset() {
	*x = AgentStatusOption{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentStatusOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentStatusOption) ProtoMessage() {}

func (x *AgentStatusOption) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentStatusOption.ProtoReflect.Descriptor instead.
func (*AgentStatusOption) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{10}
}

func (x *AgentStatusOption) GetAgentStatus() AgentStatus {
	if x != nil {
		return x.AgentStatus
	}
	return AgentStatus_AGENT_STATUS_UNSPECIFIED
}

func (x *AgentStatusOption) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *AgentStatusOption) GetPauseCode() *TriggerPauseCode {
	if x != nil {
		return x.PauseCode
	}
	return nil
}

func (x *AgentStatusOption) GetCallTypes() *TriggerCallTypes {
	if x != nil {
		return x.CallTypes
	}
	return nil
}

func (x *AgentStatusOption) GetScheduledCallbackPresent() bool {
	if x != nil {
		return x.ScheduledCallbackPresent
	}
	return false
}

// TriggerPauseCode is the pause code to use for the trigger
type TriggerPauseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PauseCode:
	//
	//	*TriggerPauseCode_SystemPauseCode
	//	*TriggerPauseCode_CustomPauseCode
	PauseCode isTriggerPauseCode_PauseCode `protobuf_oneof:"pause_code"`
}

func (x *TriggerPauseCode) Reset() {
	*x = TriggerPauseCode{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerPauseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerPauseCode) ProtoMessage() {}

func (x *TriggerPauseCode) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerPauseCode.ProtoReflect.Descriptor instead.
func (*TriggerPauseCode) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{11}
}

func (m *TriggerPauseCode) GetPauseCode() isTriggerPauseCode_PauseCode {
	if m != nil {
		return m.PauseCode
	}
	return nil
}

func (x *TriggerPauseCode) GetSystemPauseCode() SystemPauseCode {
	if x, ok := x.GetPauseCode().(*TriggerPauseCode_SystemPauseCode); ok {
		return x.SystemPauseCode
	}
	return SystemPauseCode_SYSTEM_PAUSE_CODE_UNSPECIFIED
}

func (x *TriggerPauseCode) GetCustomPauseCode() string {
	if x, ok := x.GetPauseCode().(*TriggerPauseCode_CustomPauseCode); ok {
		return x.CustomPauseCode
	}
	return ""
}

type isTriggerPauseCode_PauseCode interface {
	isTriggerPauseCode_PauseCode()
}

type TriggerPauseCode_SystemPauseCode struct {
	// The system pause code to use for the trigger
	SystemPauseCode SystemPauseCode `protobuf:"varint,1,opt,name=system_pause_code,json=systemPauseCode,proto3,enum=services.org.hunt_groups.v1alpha1.SystemPauseCode,oneof"`
}

type TriggerPauseCode_CustomPauseCode struct {
	// The custom pause code to use for the trigger
	// It is name of a pause code from a pause code set
	CustomPauseCode string `protobuf:"bytes,2,opt,name=custom_pause_code,json=customPauseCode,proto3,oneof"`
}

func (*TriggerPauseCode_SystemPauseCode) isTriggerPauseCode_PauseCode() {}

func (*TriggerPauseCode_CustomPauseCode) isTriggerPauseCode_PauseCode() {}

// TriggerCallTypes is the call types to use for the trigger
type TriggerCallTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The call type for outbound calls
	Outbound bool `protobuf:"varint,1,opt,name=outbound,proto3" json:"outbound,omitempty"`
	// The call type for inbound calls
	Inbound bool `protobuf:"varint,2,opt,name=inbound,proto3" json:"inbound,omitempty"`
	// The call type for internal calls
	Manual bool `protobuf:"varint,3,opt,name=manual,proto3" json:"manual,omitempty"`
	// The call type for preview calls
	Preview bool `protobuf:"varint,4,opt,name=preview,proto3" json:"preview,omitempty"`
}

func (x *TriggerCallTypes) Reset() {
	*x = TriggerCallTypes{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerCallTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerCallTypes) ProtoMessage() {}

func (x *TriggerCallTypes) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerCallTypes.ProtoReflect.Descriptor instead.
func (*TriggerCallTypes) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{12}
}

func (x *TriggerCallTypes) GetOutbound() bool {
	if x != nil {
		return x.Outbound
	}
	return false
}

func (x *TriggerCallTypes) GetInbound() bool {
	if x != nil {
		return x.Inbound
	}
	return false
}

func (x *TriggerCallTypes) GetManual() bool {
	if x != nil {
		return x.Manual
	}
	return false
}

func (x *TriggerCallTypes) GetPreview() bool {
	if x != nil {
		return x.Preview
	}
	return false
}

type TriggerActionOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The action to take when the trigger is activated
	Action TriggerAction `protobuf:"varint,1,opt,name=action,proto3,enum=services.org.hunt_groups.v1alpha1.TriggerAction" json:"action,omitempty"`
	// The message to be displayed when the trigger is activated
	// Used for action: Display Message
	DisplayMessage string `protobuf:"bytes,2,opt,name=display_message,json=displayMessage,proto3" json:"display_message,omitempty"`
	// The status to advance to when the trigger is activated
	// Used for action: Advance Status
	// Following are the valid status transitions:
	// Waiting -> Paused, Manual Dial Call
	// Paused -> Waiting
	// On Call -> Wrap Up
	// Preview Call -> On Call, Waiting
	// Manual Dial Call -> Waiting
	// Wrap Up -> Waiting, Paused
	AdvanceToStatus AgentStatus `protobuf:"varint,3,opt,name=advance_to_status,json=advanceToStatus,proto3,enum=services.org.hunt_groups.v1alpha1.AgentStatus" json:"advance_to_status,omitempty"`
	// The sid of the web link to execute when the trigger is activated
	// Used for action: Execute Web Link
	WebLinkSid int64 `protobuf:"varint,4,opt,name=web_link_sid,json=webLinkSid,proto3" json:"web_link_sid,omitempty"`
	// The sid of the integration link to execute when the trigger is activated
	// Used for action: Execute Integration Link
	IntegrationLinkSid int64 `protobuf:"varint,5,opt,name=integration_link_sid,json=integrationLinkSid,proto3" json:"integration_link_sid,omitempty"`
	// The sid of the exile link to execute when the trigger is activated
	// Used for action: Execute Exile Link
	ExileLinkSid int64 `protobuf:"varint,6,opt,name=exile_link_sid,json=exileLinkSid,proto3" json:"exile_link_sid,omitempty"`
	// The pause code to apply for the trigger
	// Use pause code only if either system_pause_code or custom_pause_code is set
	// Applied when agent is in status: Paused
	PauseCode *TriggerPauseCode `protobuf:"bytes,7,opt,name=pause_code,json=pauseCode,proto3" json:"pause_code,omitempty"`
}

func (x *TriggerActionOption) Reset() {
	*x = TriggerActionOption{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerActionOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerActionOption) ProtoMessage() {}

func (x *TriggerActionOption) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerActionOption.ProtoReflect.Descriptor instead.
func (*TriggerActionOption) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{13}
}

func (x *TriggerActionOption) GetAction() TriggerAction {
	if x != nil {
		return x.Action
	}
	return TriggerAction_TRIGGER_ACTION_UNSPECIFIED
}

func (x *TriggerActionOption) GetDisplayMessage() string {
	if x != nil {
		return x.DisplayMessage
	}
	return ""
}

func (x *TriggerActionOption) GetAdvanceToStatus() AgentStatus {
	if x != nil {
		return x.AdvanceToStatus
	}
	return AgentStatus_AGENT_STATUS_UNSPECIFIED
}

func (x *TriggerActionOption) GetWebLinkSid() int64 {
	if x != nil {
		return x.WebLinkSid
	}
	return 0
}

func (x *TriggerActionOption) GetIntegrationLinkSid() int64 {
	if x != nil {
		return x.IntegrationLinkSid
	}
	return 0
}

func (x *TriggerActionOption) GetExileLinkSid() int64 {
	if x != nil {
		return x.ExileLinkSid
	}
	return 0
}

func (x *TriggerActionOption) GetPauseCode() *TriggerPauseCode {
	if x != nil {
		return x.PauseCode
	}
	return nil
}

// ListHuntGroupAgentTriggersRequest is the request message for the ListHuntGroupAgentTriggers rpc.
type ListHuntGroupAgentTriggersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sid of the hunt group to list the triggers for
	HuntGroupSid int64 `protobuf:"varint,1,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
}

func (x *ListHuntGroupAgentTriggersRequest) Reset() {
	*x = ListHuntGroupAgentTriggersRequest{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHuntGroupAgentTriggersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHuntGroupAgentTriggersRequest) ProtoMessage() {}

func (x *ListHuntGroupAgentTriggersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHuntGroupAgentTriggersRequest.ProtoReflect.Descriptor instead.
func (*ListHuntGroupAgentTriggersRequest) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{14}
}

func (x *ListHuntGroupAgentTriggersRequest) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

// ListHuntGroupAgentTriggersResponse is the response message for the ListHuntGroupAgentTriggers rpc.
type ListHuntGroupAgentTriggersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of agent triggers for the hunt group
	AgentTriggers []*AgentTrigger `protobuf:"bytes,1,rep,name=agent_triggers,json=agentTriggers,proto3" json:"agent_triggers,omitempty"`
}

func (x *ListHuntGroupAgentTriggersResponse) Reset() {
	*x = ListHuntGroupAgentTriggersResponse{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHuntGroupAgentTriggersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHuntGroupAgentTriggersResponse) ProtoMessage() {}

func (x *ListHuntGroupAgentTriggersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHuntGroupAgentTriggersResponse.ProtoReflect.Descriptor instead.
func (*ListHuntGroupAgentTriggersResponse) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{15}
}

func (x *ListHuntGroupAgentTriggersResponse) GetAgentTriggers() []*AgentTrigger {
	if x != nil {
		return x.AgentTriggers
	}
	return nil
}

// CopyHuntGroupAgentTriggerRequest is the request message for the CopyHuntGroupAgentTrigger rpc.
type CopyHuntGroupAgentTriggerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sid of the hunt group from which the trigger is copied
	FromHuntGroupSid int64 `protobuf:"varint,1,opt,name=from_hunt_group_sid,json=fromHuntGroupSid,proto3" json:"from_hunt_group_sid,omitempty"`
	// The sid of the hunt group to which the trigger is copied
	ToHuntGroupSid int64 `protobuf:"varint,2,opt,name=to_hunt_group_sid,json=toHuntGroupSid,proto3" json:"to_hunt_group_sid,omitempty"`
	// The agent trigger to copy
	AgentTrigger *AgentTrigger `protobuf:"bytes,3,opt,name=agent_trigger,json=agentTrigger,proto3" json:"agent_trigger,omitempty"`
}

func (x *CopyHuntGroupAgentTriggerRequest) Reset() {
	*x = CopyHuntGroupAgentTriggerRequest{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyHuntGroupAgentTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyHuntGroupAgentTriggerRequest) ProtoMessage() {}

func (x *CopyHuntGroupAgentTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyHuntGroupAgentTriggerRequest.ProtoReflect.Descriptor instead.
func (*CopyHuntGroupAgentTriggerRequest) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{16}
}

func (x *CopyHuntGroupAgentTriggerRequest) GetFromHuntGroupSid() int64 {
	if x != nil {
		return x.FromHuntGroupSid
	}
	return 0
}

func (x *CopyHuntGroupAgentTriggerRequest) GetToHuntGroupSid() int64 {
	if x != nil {
		return x.ToHuntGroupSid
	}
	return 0
}

func (x *CopyHuntGroupAgentTriggerRequest) GetAgentTrigger() *AgentTrigger {
	if x != nil {
		return x.AgentTrigger
	}
	return nil
}

// CopyHuntGroupAgentTriggerResponse is the response message for the CopyHuntGroupAgentTrigger rpc.
type CopyHuntGroupAgentTriggerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CopyHuntGroupAgentTriggerResponse) Reset() {
	*x = CopyHuntGroupAgentTriggerResponse{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyHuntGroupAgentTriggerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyHuntGroupAgentTriggerResponse) ProtoMessage() {}

func (x *CopyHuntGroupAgentTriggerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyHuntGroupAgentTriggerResponse.ProtoReflect.Descriptor instead.
func (*CopyHuntGroupAgentTriggerResponse) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{17}
}

// UpdateHuntGroupAgentTriggersRequest is the request message for the UpdateHuntGroupAgentTriggers rpc.
type UpdateHuntGroupAgentTriggersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sid of the hunt group to update the trigger for
	HuntGroupSid int64 `protobuf:"varint,1,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	// The list of agent triggers to update
	AgentTriggers []*AgentTrigger `protobuf:"bytes,2,rep,name=agent_triggers,json=agentTriggers,proto3" json:"agent_triggers,omitempty"`
}

func (x *UpdateHuntGroupAgentTriggersRequest) Reset() {
	*x = UpdateHuntGroupAgentTriggersRequest{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateHuntGroupAgentTriggersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHuntGroupAgentTriggersRequest) ProtoMessage() {}

func (x *UpdateHuntGroupAgentTriggersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHuntGroupAgentTriggersRequest.ProtoReflect.Descriptor instead.
func (*UpdateHuntGroupAgentTriggersRequest) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateHuntGroupAgentTriggersRequest) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *UpdateHuntGroupAgentTriggersRequest) GetAgentTriggers() []*AgentTrigger {
	if x != nil {
		return x.AgentTriggers
	}
	return nil
}

// UpdateHuntGroupAgentTriggersResponse is the response message for the UpdateHuntGroupAgentTriggers rpc.
type UpdateHuntGroupAgentTriggersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateHuntGroupAgentTriggersResponse) Reset() {
	*x = UpdateHuntGroupAgentTriggersResponse{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateHuntGroupAgentTriggersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHuntGroupAgentTriggersResponse) ProtoMessage() {}

func (x *UpdateHuntGroupAgentTriggersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHuntGroupAgentTriggersResponse.ProtoReflect.Descriptor instead.
func (*UpdateHuntGroupAgentTriggersResponse) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{19}
}

// CopyHuntGroupToOrganizationRequest is the request message for the CopyHuntGroupToOrganization rpc.
type CopyHuntGroupToOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the destination organization where the hunt group is copied to.
	ToOrganizationId string `protobuf:"bytes,1,opt,name=to_organization_id,json=toOrganizationId,proto3" json:"to_organization_id,omitempty"`
	// The sid of the hunt group to copy.
	HuntGroupSid int64 `protobuf:"varint,2,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	// The name of the new hunt group.
	NewHuntGroupName string `protobuf:"bytes,3,opt,name=new_hunt_group_name,json=newHuntGroupName,proto3" json:"new_hunt_group_name,omitempty"`
}

func (x *CopyHuntGroupToOrganizationRequest) Reset() {
	*x = CopyHuntGroupToOrganizationRequest{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyHuntGroupToOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyHuntGroupToOrganizationRequest) ProtoMessage() {}

func (x *CopyHuntGroupToOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyHuntGroupToOrganizationRequest.ProtoReflect.Descriptor instead.
func (*CopyHuntGroupToOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{20}
}

func (x *CopyHuntGroupToOrganizationRequest) GetToOrganizationId() string {
	if x != nil {
		return x.ToOrganizationId
	}
	return ""
}

func (x *CopyHuntGroupToOrganizationRequest) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *CopyHuntGroupToOrganizationRequest) GetNewHuntGroupName() string {
	if x != nil {
		return x.NewHuntGroupName
	}
	return ""
}

// CopyHuntGroupToOrganizationResponse is the response message for the CopyHuntGroupToOrganization rpc.
type CopyHuntGroupToOrganizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CopyHuntGroupToOrganizationResponse) Reset() {
	*x = CopyHuntGroupToOrganizationResponse{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyHuntGroupToOrganizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyHuntGroupToOrganizationResponse) ProtoMessage() {}

func (x *CopyHuntGroupToOrganizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyHuntGroupToOrganizationResponse.ProtoReflect.Descriptor instead.
func (*CopyHuntGroupToOrganizationResponse) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{21}
}

// AdminCopyHuntGroupToOrganizationRequest is the request message for the AdminCopyHuntGroupToOrganization rpc.
type AdminCopyHuntGroupToOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the source organization where the hunt group is copied from.
	FromOrganizationId string `protobuf:"bytes,1,opt,name=from_organization_id,json=fromOrganizationId,proto3" json:"from_organization_id,omitempty"`
	// The id of the destination organization where the hunt group is copied to.
	ToOrganizationId string `protobuf:"bytes,2,opt,name=to_organization_id,json=toOrganizationId,proto3" json:"to_organization_id,omitempty"`
	// The sid of the hunt group to copy.
	HuntGroupSid int64 `protobuf:"varint,3,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	// The name of the new hunt group.
	NewHuntGroupName string `protobuf:"bytes,4,opt,name=new_hunt_group_name,json=newHuntGroupName,proto3" json:"new_hunt_group_name,omitempty"`
}

func (x *AdminCopyHuntGroupToOrganizationRequest) Reset() {
	*x = AdminCopyHuntGroupToOrganizationRequest{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminCopyHuntGroupToOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCopyHuntGroupToOrganizationRequest) ProtoMessage() {}

func (x *AdminCopyHuntGroupToOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCopyHuntGroupToOrganizationRequest.ProtoReflect.Descriptor instead.
func (*AdminCopyHuntGroupToOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{22}
}

func (x *AdminCopyHuntGroupToOrganizationRequest) GetFromOrganizationId() string {
	if x != nil {
		return x.FromOrganizationId
	}
	return ""
}

func (x *AdminCopyHuntGroupToOrganizationRequest) GetToOrganizationId() string {
	if x != nil {
		return x.ToOrganizationId
	}
	return ""
}

func (x *AdminCopyHuntGroupToOrganizationRequest) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *AdminCopyHuntGroupToOrganizationRequest) GetNewHuntGroupName() string {
	if x != nil {
		return x.NewHuntGroupName
	}
	return ""
}

// AdminCopyHuntGroupToOrganizationResponse is the response message for the AdminCopyHuntGroupToOrganization rpc.
type AdminCopyHuntGroupToOrganizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AdminCopyHuntGroupToOrganizationResponse) Reset() {
	*x = AdminCopyHuntGroupToOrganizationResponse{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminCopyHuntGroupToOrganizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCopyHuntGroupToOrganizationResponse) ProtoMessage() {}

func (x *AdminCopyHuntGroupToOrganizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCopyHuntGroupToOrganizationResponse.ProtoReflect.Descriptor instead.
func (*AdminCopyHuntGroupToOrganizationResponse) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{23}
}

// AdminListHuntGroupsRequest is the request message for the AdminListHuntGroups rpc.
type AdminListHuntGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the organization to list the hunt groups for.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *AdminListHuntGroupsRequest) Reset() {
	*x = AdminListHuntGroupsRequest{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminListHuntGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminListHuntGroupsRequest) ProtoMessage() {}

func (x *AdminListHuntGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminListHuntGroupsRequest.ProtoReflect.Descriptor instead.
func (*AdminListHuntGroupsRequest) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{24}
}

func (x *AdminListHuntGroupsRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

// AdminListHuntGroupsResponse is the response message for the AdminListHuntGroups rpc.
type AdminListHuntGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of hunt groups.
	HuntGroups []*AdminListHuntGroupsResponse_HuntGroup `protobuf:"bytes,1,rep,name=hunt_groups,json=huntGroups,proto3" json:"hunt_groups,omitempty"`
}

func (x *AdminListHuntGroupsResponse) Reset() {
	*x = AdminListHuntGroupsResponse{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminListHuntGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminListHuntGroupsResponse) ProtoMessage() {}

func (x *AdminListHuntGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminListHuntGroupsResponse.ProtoReflect.Descriptor instead.
func (*AdminListHuntGroupsResponse) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{25}
}

func (x *AdminListHuntGroupsResponse) GetHuntGroups() []*AdminListHuntGroupsResponse_HuntGroup {
	if x != nil {
		return x.HuntGroups
	}
	return nil
}

// HuntGroup is the entity for a simplified hunt group details.
type AdminListHuntGroupsResponse_HuntGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hunt group sid.
	HuntGroupSid int64 `protobuf:"varint,2,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	// The name of the hunt group.
	HuntGroupName string `protobuf:"bytes,3,opt,name=hunt_group_name,json=huntGroupName,proto3" json:"hunt_group_name,omitempty"`
}

func (x *AdminListHuntGroupsResponse_HuntGroup) Reset() {
	*x = AdminListHuntGroupsResponse_HuntGroup{}
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminListHuntGroupsResponse_HuntGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminListHuntGroupsResponse_HuntGroup) ProtoMessage() {}

func (x *AdminListHuntGroupsResponse_HuntGroup) ProtoReflect() protoreflect.Message {
	mi := &file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminListHuntGroupsResponse_HuntGroup.ProtoReflect.Descriptor instead.
func (*AdminListHuntGroupsResponse_HuntGroup) Descriptor() ([]byte, []int) {
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP(), []int{25, 0}
}

func (x *AdminListHuntGroupsResponse_HuntGroup) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *AdminListHuntGroupsResponse_HuntGroup) GetHuntGroupName() string {
	if x != nil {
		return x.HuntGroupName
	}
	return ""
}

var File_services_org_hunt_groups_v1alpha1_entities_proto protoreflect.FileDescriptor

var file_services_org_hunt_groups_v1alpha1_entities_proto_rawDesc = []byte{
	0x0a, 0x30, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x68,
	0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x21, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x68, 0x75, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xce, 0x02, 0x0a, 0x09, 0x45, 0x78, 0x69, 0x6c, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0c, 0x69,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0b, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x55, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0xbd, 0x01, 0x0a, 0x0d, 0x45, 0x78, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x68, 0x75, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x45, 0x78, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x58, 0x0a,
	0x0c, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x61, 0x6c, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65,
	0x6c, 0x70, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x58, 0x0a,
	0x15, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x13, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x46, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x22,
	0x70, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x45, 0x78, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x65, 0x78, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x65, 0x78, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x73, 0x22, 0x97, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x70, 0x79, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x45, 0x78, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x74, 0x6f, 0x5f, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x74, 0x6f, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x4b,
	0x0a, 0x0a, 0x65, 0x78, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x09, 0x65, 0x78, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x20, 0x0a, 0x1e, 0x43,
	0x6f, 0x70, 0x79, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x01,
	0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x45, 0x78, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x0b, 0x65, 0x78, 0x69, 0x6c,
	0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x68, 0x75, 0x6e,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x45, 0x78, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x65, 0x78, 0x69,
	0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x23, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x69, 0x6c, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xae, 0x02, 0x0a,
	0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x2a, 0x0a,
	0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x13, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x6a, 0x0a, 0x15, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe8, 0x02,
	0x0a, 0x11, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0a, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x70, 0x61, 0x75,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x09, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x60, 0x0a,
	0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x7a, 0x0a, 0x10, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22, 0xb2, 0x03, 0x0a, 0x13, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x48, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x30, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x68,
	0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x68, 0x75, 0x6e,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x61,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20,
	0x0a, 0x0c, 0x77, 0x65, 0x62, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x53,
	0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x78, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x0a, 0x70, 0x61, 0x75, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x68, 0x75, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x70, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x49, 0x0a, 0x21,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x22, 0x7c, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a,
	0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x20, 0x43, 0x6f, 0x70, 0x79, 0x48, 0x75,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x48, 0x75, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x74, 0x6f, 0x5f,
	0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x69, 0x64, 0x12, 0x54, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x68, 0x75, 0x6e, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0c, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0x23, 0x0a, 0x21, 0x43, 0x6f,
	0x70, 0x79, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xa3, 0x01, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x56, 0x0a,
	0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x73, 0x22, 0x26, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa7, 0x01,
	0x0a, 0x22, 0x43, 0x6f, 0x70, 0x79, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x65, 0x77, 0x5f,
	0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x25, 0x0a, 0x23, 0x43, 0x6f, 0x70, 0x79, 0x48,
	0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xde,
	0x01, 0x0a, 0x27, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x70, 0x79, 0x48, 0x75, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x74, 0x6f, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64,
	0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x65, 0x77, 0x5f, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e,
	0x65, 0x77, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x2a, 0x0a, 0x28, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x70, 0x79, 0x48, 0x75, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x0a, 0x1a, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x22, 0xe3, 0x01, 0x0a, 0x1b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x75,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x69, 0x0a, 0x0b, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x0a, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0x59, 0x0a, 0x09, 0x48,
	0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x2a, 0xd7, 0x02, 0x0a, 0x0b, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x47,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x04, 0x12, 0x1e, 0x0a,
	0x1a, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x1e, 0x0a,
	0x1a, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10, 0x06, 0x12, 0x25, 0x0a,
	0x21, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4c, 0x4f,
	0x53, 0x54, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x5f, 0x55, 0x50, 0x10, 0x0a,
	0x2a, 0xe8, 0x01, 0x0a, 0x0f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x50,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x35, 0x0a, 0x31, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x47, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x25,
	0x0a, 0x21, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57,
	0x4f, 0x52, 0x44, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b,
	0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x2c, 0x0a,
	0x28, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x41, 0x50, 0x50, 0x52,
	0x4f, 0x56, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x53, 0x10, 0x04, 0x2a, 0x92, 0x02, 0x0a, 0x0d,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x1a, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a,
	0x20, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x44, 0x56, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x49, 0x47, 0x47,
	0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x52, 0x49, 0x47, 0x47,
	0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54,
	0x45, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x27,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x52, 0x49,
	0x47, 0x47, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43,
	0x55, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x06,
	0x42, 0xab, 0x02, 0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0d, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x50, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03,
	0x53, 0x4f, 0x48, 0xaa, 0x02, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4f,
	0x72, 0x67, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x5c, 0x4f, 0x72, 0x67, 0x5c, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x2c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x5c, 0x4f, 0x72, 0x67, 0x5c, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x23, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x3a, 0x3a, 0x4f, 0x72, 0x67, 0x3a, 0x3a, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescOnce sync.Once
	file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescData = file_services_org_hunt_groups_v1alpha1_entities_proto_rawDesc
)

func file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescGZIP() []byte {
	file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescOnce.Do(func() {
		file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescData)
	})
	return file_services_org_hunt_groups_v1alpha1_entities_proto_rawDescData
}

var file_services_org_hunt_groups_v1alpha1_entities_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_services_org_hunt_groups_v1alpha1_entities_proto_goTypes = []any{
	(AgentStatus)(0),                                 // 0: services.org.hunt_groups.v1alpha1.AgentStatus
	(SystemPauseCode)(0),                             // 1: services.org.hunt_groups.v1alpha1.SystemPauseCode
	(TriggerAction)(0),                               // 2: services.org.hunt_groups.v1alpha1.TriggerAction
	(*ExileLink)(nil),                                // 3: services.org.hunt_groups.v1alpha1.ExileLink
	(*ExileLinkData)(nil),                            // 4: services.org.hunt_groups.v1alpha1.ExileLinkData
	(*ExileLinkParameter)(nil),                       // 5: services.org.hunt_groups.v1alpha1.ExileLinkParameter
	(*ListHuntGroupExileLinksRequest)(nil),           // 6: services.org.hunt_groups.v1alpha1.ListHuntGroupExileLinksRequest
	(*ListHuntGroupExileLinksResponse)(nil),          // 7: services.org.hunt_groups.v1alpha1.ListHuntGroupExileLinksResponse
	(*CopyHuntGroupExileLinkRequest)(nil),            // 8: services.org.hunt_groups.v1alpha1.CopyHuntGroupExileLinkRequest
	(*CopyHuntGroupExileLinkResponse)(nil),           // 9: services.org.hunt_groups.v1alpha1.CopyHuntGroupExileLinkResponse
	(*UpdateHuntGroupExileLinksRequest)(nil),         // 10: services.org.hunt_groups.v1alpha1.UpdateHuntGroupExileLinksRequest
	(*UpdateHuntGroupExileLinksResponse)(nil),        // 11: services.org.hunt_groups.v1alpha1.UpdateHuntGroupExileLinksResponse
	(*AgentTrigger)(nil),                             // 12: services.org.hunt_groups.v1alpha1.AgentTrigger
	(*AgentStatusOption)(nil),                        // 13: services.org.hunt_groups.v1alpha1.AgentStatusOption
	(*TriggerPauseCode)(nil),                         // 14: services.org.hunt_groups.v1alpha1.TriggerPauseCode
	(*TriggerCallTypes)(nil),                         // 15: services.org.hunt_groups.v1alpha1.TriggerCallTypes
	(*TriggerActionOption)(nil),                      // 16: services.org.hunt_groups.v1alpha1.TriggerActionOption
	(*ListHuntGroupAgentTriggersRequest)(nil),        // 17: services.org.hunt_groups.v1alpha1.ListHuntGroupAgentTriggersRequest
	(*ListHuntGroupAgentTriggersResponse)(nil),       // 18: services.org.hunt_groups.v1alpha1.ListHuntGroupAgentTriggersResponse
	(*CopyHuntGroupAgentTriggerRequest)(nil),         // 19: services.org.hunt_groups.v1alpha1.CopyHuntGroupAgentTriggerRequest
	(*CopyHuntGroupAgentTriggerResponse)(nil),        // 20: services.org.hunt_groups.v1alpha1.CopyHuntGroupAgentTriggerResponse
	(*UpdateHuntGroupAgentTriggersRequest)(nil),      // 21: services.org.hunt_groups.v1alpha1.UpdateHuntGroupAgentTriggersRequest
	(*UpdateHuntGroupAgentTriggersResponse)(nil),     // 22: services.org.hunt_groups.v1alpha1.UpdateHuntGroupAgentTriggersResponse
	(*CopyHuntGroupToOrganizationRequest)(nil),       // 23: services.org.hunt_groups.v1alpha1.CopyHuntGroupToOrganizationRequest
	(*CopyHuntGroupToOrganizationResponse)(nil),      // 24: services.org.hunt_groups.v1alpha1.CopyHuntGroupToOrganizationResponse
	(*AdminCopyHuntGroupToOrganizationRequest)(nil),  // 25: services.org.hunt_groups.v1alpha1.AdminCopyHuntGroupToOrganizationRequest
	(*AdminCopyHuntGroupToOrganizationResponse)(nil), // 26: services.org.hunt_groups.v1alpha1.AdminCopyHuntGroupToOrganizationResponse
	(*AdminListHuntGroupsRequest)(nil),               // 27: services.org.hunt_groups.v1alpha1.AdminListHuntGroupsRequest
	(*AdminListHuntGroupsResponse)(nil),              // 28: services.org.hunt_groups.v1alpha1.AdminListHuntGroupsResponse
	(*AdminListHuntGroupsResponse_HuntGroup)(nil),    // 29: services.org.hunt_groups.v1alpha1.AdminListHuntGroupsResponse.HuntGroup
	(org.ParameterSourceType)(0),                     // 30: api.commons.org.ParameterSourceType
}
var file_services_org_hunt_groups_v1alpha1_entities_proto_depIdxs = []int32{
	4,  // 0: services.org.hunt_groups.v1alpha1.ExileLink.inbound_data:type_name -> services.org.hunt_groups.v1alpha1.ExileLinkData
	4,  // 1: services.org.hunt_groups.v1alpha1.ExileLink.outbound_data:type_name -> services.org.hunt_groups.v1alpha1.ExileLinkData
	5,  // 2: services.org.hunt_groups.v1alpha1.ExileLinkData.record_id:type_name -> services.org.hunt_groups.v1alpha1.ExileLinkParameter
	5,  // 3: services.org.hunt_groups.v1alpha1.ExileLinkData.alternate_id:type_name -> services.org.hunt_groups.v1alpha1.ExileLinkParameter
	30, // 4: services.org.hunt_groups.v1alpha1.ExileLinkParameter.parameter_source_type:type_name -> api.commons.org.ParameterSourceType
	3,  // 5: services.org.hunt_groups.v1alpha1.ListHuntGroupExileLinksResponse.exile_links:type_name -> services.org.hunt_groups.v1alpha1.ExileLink
	3,  // 6: services.org.hunt_groups.v1alpha1.CopyHuntGroupExileLinkRequest.exile_link:type_name -> services.org.hunt_groups.v1alpha1.ExileLink
	3,  // 7: services.org.hunt_groups.v1alpha1.UpdateHuntGroupExileLinksRequest.exile_links:type_name -> services.org.hunt_groups.v1alpha1.ExileLink
	13, // 8: services.org.hunt_groups.v1alpha1.AgentTrigger.agent_status_option:type_name -> services.org.hunt_groups.v1alpha1.AgentStatusOption
	16, // 9: services.org.hunt_groups.v1alpha1.AgentTrigger.trigger_action_option:type_name -> services.org.hunt_groups.v1alpha1.TriggerActionOption
	0,  // 10: services.org.hunt_groups.v1alpha1.AgentStatusOption.agent_status:type_name -> services.org.hunt_groups.v1alpha1.AgentStatus
	14, // 11: services.org.hunt_groups.v1alpha1.AgentStatusOption.pause_code:type_name -> services.org.hunt_groups.v1alpha1.TriggerPauseCode
	15, // 12: services.org.hunt_groups.v1alpha1.AgentStatusOption.call_types:type_name -> services.org.hunt_groups.v1alpha1.TriggerCallTypes
	1,  // 13: services.org.hunt_groups.v1alpha1.TriggerPauseCode.system_pause_code:type_name -> services.org.hunt_groups.v1alpha1.SystemPauseCode
	2,  // 14: services.org.hunt_groups.v1alpha1.TriggerActionOption.action:type_name -> services.org.hunt_groups.v1alpha1.TriggerAction
	0,  // 15: services.org.hunt_groups.v1alpha1.TriggerActionOption.advance_to_status:type_name -> services.org.hunt_groups.v1alpha1.AgentStatus
	14, // 16: services.org.hunt_groups.v1alpha1.TriggerActionOption.pause_code:type_name -> services.org.hunt_groups.v1alpha1.TriggerPauseCode
	12, // 17: services.org.hunt_groups.v1alpha1.ListHuntGroupAgentTriggersResponse.agent_triggers:type_name -> services.org.hunt_groups.v1alpha1.AgentTrigger
	12, // 18: services.org.hunt_groups.v1alpha1.CopyHuntGroupAgentTriggerRequest.agent_trigger:type_name -> services.org.hunt_groups.v1alpha1.AgentTrigger
	12, // 19: services.org.hunt_groups.v1alpha1.UpdateHuntGroupAgentTriggersRequest.agent_triggers:type_name -> services.org.hunt_groups.v1alpha1.AgentTrigger
	29, // 20: services.org.hunt_groups.v1alpha1.AdminListHuntGroupsResponse.hunt_groups:type_name -> services.org.hunt_groups.v1alpha1.AdminListHuntGroupsResponse.HuntGroup
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_services_org_hunt_groups_v1alpha1_entities_proto_init() }
func file_services_org_hunt_groups_v1alpha1_entities_proto_init() {
	if File_services_org_hunt_groups_v1alpha1_entities_proto != nil {
		return
	}
	file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes[11].OneofWrappers = []any{
		(*TriggerPauseCode_SystemPauseCode)(nil),
		(*TriggerPauseCode_CustomPauseCode)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_org_hunt_groups_v1alpha1_entities_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_services_org_hunt_groups_v1alpha1_entities_proto_goTypes,
		DependencyIndexes: file_services_org_hunt_groups_v1alpha1_entities_proto_depIdxs,
		EnumInfos:         file_services_org_hunt_groups_v1alpha1_entities_proto_enumTypes,
		MessageInfos:      file_services_org_hunt_groups_v1alpha1_entities_proto_msgTypes,
	}.Build()
	File_services_org_hunt_groups_v1alpha1_entities_proto = out.File
	file_services_org_hunt_groups_v1alpha1_entities_proto_rawDesc = nil
	file_services_org_hunt_groups_v1alpha1_entities_proto_goTypes = nil
	file_services_org_hunt_groups_v1alpha1_entities_proto_depIdxs = nil
}
