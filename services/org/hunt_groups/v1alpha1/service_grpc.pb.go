// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: services/org/hunt_groups/v1alpha1/service.proto

package hunt_groupsv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	HuntGroupsService_ListHuntGroupExileLinks_FullMethodName = "/services.org.hunt_groups.v1alpha1.HuntGroupsService/ListHuntGroupExileLinks"
)

// HuntGroupsServiceClient is the client API for HuntGroupsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// HuntGroupsService
type HuntGroupsServiceClient interface {
	ListHuntGroupExileLinks(ctx context.Context, in *ListHuntGroupExileLinksRequest, opts ...grpc.CallOption) (*ListHuntGroupExileLinksResponse, error)
}

type huntGroupsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHuntGroupsServiceClient(cc grpc.ClientConnInterface) HuntGroupsServiceClient {
	return &huntGroupsServiceClient{cc}
}

func (c *huntGroupsServiceClient) ListHuntGroupExileLinks(ctx context.Context, in *ListHuntGroupExileLinksRequest, opts ...grpc.CallOption) (*ListHuntGroupExileLinksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHuntGroupExileLinksResponse)
	err := c.cc.Invoke(ctx, HuntGroupsService_ListHuntGroupExileLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HuntGroupsServiceServer is the server API for HuntGroupsService service.
// All implementations must embed UnimplementedHuntGroupsServiceServer
// for forward compatibility
//
// HuntGroupsService
type HuntGroupsServiceServer interface {
	ListHuntGroupExileLinks(context.Context, *ListHuntGroupExileLinksRequest) (*ListHuntGroupExileLinksResponse, error)
	mustEmbedUnimplementedHuntGroupsServiceServer()
}

// UnimplementedHuntGroupsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHuntGroupsServiceServer struct {
}

func (UnimplementedHuntGroupsServiceServer) ListHuntGroupExileLinks(context.Context, *ListHuntGroupExileLinksRequest) (*ListHuntGroupExileLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHuntGroupExileLinks not implemented")
}
func (UnimplementedHuntGroupsServiceServer) mustEmbedUnimplementedHuntGroupsServiceServer() {}

// UnsafeHuntGroupsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HuntGroupsServiceServer will
// result in compilation errors.
type UnsafeHuntGroupsServiceServer interface {
	mustEmbedUnimplementedHuntGroupsServiceServer()
}

func RegisterHuntGroupsServiceServer(s grpc.ServiceRegistrar, srv HuntGroupsServiceServer) {
	s.RegisterService(&HuntGroupsService_ServiceDesc, srv)
}

func _HuntGroupsService_ListHuntGroupExileLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHuntGroupExileLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HuntGroupsServiceServer).ListHuntGroupExileLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HuntGroupsService_ListHuntGroupExileLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HuntGroupsServiceServer).ListHuntGroupExileLinks(ctx, req.(*ListHuntGroupExileLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HuntGroupsService_ServiceDesc is the grpc.ServiceDesc for HuntGroupsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HuntGroupsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.org.hunt_groups.v1alpha1.HuntGroupsService",
	HandlerType: (*HuntGroupsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListHuntGroupExileLinks",
			Handler:    _HuntGroupsService_ListHuntGroupExileLinks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/org/hunt_groups/v1alpha1/service.proto",
}
