// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/org/hunt_groups/v1alpha1/service.proto

package hunt_groupsv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/tcncloud/api-go/services/org/hunt_groups/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// HuntGroupsServiceName is the fully-qualified name of the HuntGroupsService service.
	HuntGroupsServiceName = "services.org.hunt_groups.v1alpha1.HuntGroupsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HuntGroupsServiceListHuntGroupExileLinksProcedure is the fully-qualified name of the
	// HuntGroupsService's ListHuntGroupExileLinks RPC.
	HuntGroupsServiceListHuntGroupExileLinksProcedure = "/services.org.hunt_groups.v1alpha1.HuntGroupsService/ListHuntGroupExileLinks"
	// HuntGroupsServiceCopyHuntGroupExileLinkProcedure is the fully-qualified name of the
	// HuntGroupsService's CopyHuntGroupExileLink RPC.
	HuntGroupsServiceCopyHuntGroupExileLinkProcedure = "/services.org.hunt_groups.v1alpha1.HuntGroupsService/CopyHuntGroupExileLink"
	// HuntGroupsServiceUpdateHuntGroupExileLinksProcedure is the fully-qualified name of the
	// HuntGroupsService's UpdateHuntGroupExileLinks RPC.
	HuntGroupsServiceUpdateHuntGroupExileLinksProcedure = "/services.org.hunt_groups.v1alpha1.HuntGroupsService/UpdateHuntGroupExileLinks"
)

// HuntGroupsServiceClient is a client for the services.org.hunt_groups.v1alpha1.HuntGroupsService
// service.
type HuntGroupsServiceClient interface {
	// ListHuntGroupExileLinks returns a list of Exile links for a given hunt group.
	ListHuntGroupExileLinks(context.Context, *connect_go.Request[v1alpha1.ListHuntGroupExileLinksRequest]) (*connect_go.Response[v1alpha1.ListHuntGroupExileLinksResponse], error)
	// CopyHuntGroupExileLink copies an exile link from one hunt group to another.
	// It will create a new exile link in the destination hunt group with the same
	// settings/parameters as the source exile link.
	CopyHuntGroupExileLink(context.Context, *connect_go.Request[v1alpha1.CopyHuntGroupExileLinkRequest]) (*connect_go.Response[v1alpha1.CopyHuntGroupExileLinkResponse], error)
	// UpdateHuntGroupExileLinks updates the exile links for a hunt group.
	// It will create any new exile links that do not already exist in the hunt group,
	// update any existing exile links with the new settings/parameters, and
	// delete any exile links that are not in the request.
	UpdateHuntGroupExileLinks(context.Context, *connect_go.Request[v1alpha1.UpdateHuntGroupExileLinksRequest]) (*connect_go.Response[v1alpha1.UpdateHuntGroupExileLinksResponse], error)
}

// NewHuntGroupsServiceClient constructs a client for the
// services.org.hunt_groups.v1alpha1.HuntGroupsService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHuntGroupsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) HuntGroupsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &huntGroupsServiceClient{
		listHuntGroupExileLinks: connect_go.NewClient[v1alpha1.ListHuntGroupExileLinksRequest, v1alpha1.ListHuntGroupExileLinksResponse](
			httpClient,
			baseURL+HuntGroupsServiceListHuntGroupExileLinksProcedure,
			opts...,
		),
		copyHuntGroupExileLink: connect_go.NewClient[v1alpha1.CopyHuntGroupExileLinkRequest, v1alpha1.CopyHuntGroupExileLinkResponse](
			httpClient,
			baseURL+HuntGroupsServiceCopyHuntGroupExileLinkProcedure,
			opts...,
		),
		updateHuntGroupExileLinks: connect_go.NewClient[v1alpha1.UpdateHuntGroupExileLinksRequest, v1alpha1.UpdateHuntGroupExileLinksResponse](
			httpClient,
			baseURL+HuntGroupsServiceUpdateHuntGroupExileLinksProcedure,
			opts...,
		),
	}
}

// huntGroupsServiceClient implements HuntGroupsServiceClient.
type huntGroupsServiceClient struct {
	listHuntGroupExileLinks   *connect_go.Client[v1alpha1.ListHuntGroupExileLinksRequest, v1alpha1.ListHuntGroupExileLinksResponse]
	copyHuntGroupExileLink    *connect_go.Client[v1alpha1.CopyHuntGroupExileLinkRequest, v1alpha1.CopyHuntGroupExileLinkResponse]
	updateHuntGroupExileLinks *connect_go.Client[v1alpha1.UpdateHuntGroupExileLinksRequest, v1alpha1.UpdateHuntGroupExileLinksResponse]
}

// ListHuntGroupExileLinks calls
// services.org.hunt_groups.v1alpha1.HuntGroupsService.ListHuntGroupExileLinks.
func (c *huntGroupsServiceClient) ListHuntGroupExileLinks(ctx context.Context, req *connect_go.Request[v1alpha1.ListHuntGroupExileLinksRequest]) (*connect_go.Response[v1alpha1.ListHuntGroupExileLinksResponse], error) {
	return c.listHuntGroupExileLinks.CallUnary(ctx, req)
}

// CopyHuntGroupExileLink calls
// services.org.hunt_groups.v1alpha1.HuntGroupsService.CopyHuntGroupExileLink.
func (c *huntGroupsServiceClient) CopyHuntGroupExileLink(ctx context.Context, req *connect_go.Request[v1alpha1.CopyHuntGroupExileLinkRequest]) (*connect_go.Response[v1alpha1.CopyHuntGroupExileLinkResponse], error) {
	return c.copyHuntGroupExileLink.CallUnary(ctx, req)
}

// UpdateHuntGroupExileLinks calls
// services.org.hunt_groups.v1alpha1.HuntGroupsService.UpdateHuntGroupExileLinks.
func (c *huntGroupsServiceClient) UpdateHuntGroupExileLinks(ctx context.Context, req *connect_go.Request[v1alpha1.UpdateHuntGroupExileLinksRequest]) (*connect_go.Response[v1alpha1.UpdateHuntGroupExileLinksResponse], error) {
	return c.updateHuntGroupExileLinks.CallUnary(ctx, req)
}

// HuntGroupsServiceHandler is an implementation of the
// services.org.hunt_groups.v1alpha1.HuntGroupsService service.
type HuntGroupsServiceHandler interface {
	// ListHuntGroupExileLinks returns a list of Exile links for a given hunt group.
	ListHuntGroupExileLinks(context.Context, *connect_go.Request[v1alpha1.ListHuntGroupExileLinksRequest]) (*connect_go.Response[v1alpha1.ListHuntGroupExileLinksResponse], error)
	// CopyHuntGroupExileLink copies an exile link from one hunt group to another.
	// It will create a new exile link in the destination hunt group with the same
	// settings/parameters as the source exile link.
	CopyHuntGroupExileLink(context.Context, *connect_go.Request[v1alpha1.CopyHuntGroupExileLinkRequest]) (*connect_go.Response[v1alpha1.CopyHuntGroupExileLinkResponse], error)
	// UpdateHuntGroupExileLinks updates the exile links for a hunt group.
	// It will create any new exile links that do not already exist in the hunt group,
	// update any existing exile links with the new settings/parameters, and
	// delete any exile links that are not in the request.
	UpdateHuntGroupExileLinks(context.Context, *connect_go.Request[v1alpha1.UpdateHuntGroupExileLinksRequest]) (*connect_go.Response[v1alpha1.UpdateHuntGroupExileLinksResponse], error)
}

// NewHuntGroupsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHuntGroupsServiceHandler(svc HuntGroupsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	huntGroupsServiceListHuntGroupExileLinksHandler := connect_go.NewUnaryHandler(
		HuntGroupsServiceListHuntGroupExileLinksProcedure,
		svc.ListHuntGroupExileLinks,
		opts...,
	)
	huntGroupsServiceCopyHuntGroupExileLinkHandler := connect_go.NewUnaryHandler(
		HuntGroupsServiceCopyHuntGroupExileLinkProcedure,
		svc.CopyHuntGroupExileLink,
		opts...,
	)
	huntGroupsServiceUpdateHuntGroupExileLinksHandler := connect_go.NewUnaryHandler(
		HuntGroupsServiceUpdateHuntGroupExileLinksProcedure,
		svc.UpdateHuntGroupExileLinks,
		opts...,
	)
	return "/services.org.hunt_groups.v1alpha1.HuntGroupsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HuntGroupsServiceListHuntGroupExileLinksProcedure:
			huntGroupsServiceListHuntGroupExileLinksHandler.ServeHTTP(w, r)
		case HuntGroupsServiceCopyHuntGroupExileLinkProcedure:
			huntGroupsServiceCopyHuntGroupExileLinkHandler.ServeHTTP(w, r)
		case HuntGroupsServiceUpdateHuntGroupExileLinksProcedure:
			huntGroupsServiceUpdateHuntGroupExileLinksHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHuntGroupsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHuntGroupsServiceHandler struct{}

func (UnimplementedHuntGroupsServiceHandler) ListHuntGroupExileLinks(context.Context, *connect_go.Request[v1alpha1.ListHuntGroupExileLinksRequest]) (*connect_go.Response[v1alpha1.ListHuntGroupExileLinksResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.org.hunt_groups.v1alpha1.HuntGroupsService.ListHuntGroupExileLinks is not implemented"))
}

func (UnimplementedHuntGroupsServiceHandler) CopyHuntGroupExileLink(context.Context, *connect_go.Request[v1alpha1.CopyHuntGroupExileLinkRequest]) (*connect_go.Response[v1alpha1.CopyHuntGroupExileLinkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.org.hunt_groups.v1alpha1.HuntGroupsService.CopyHuntGroupExileLink is not implemented"))
}

func (UnimplementedHuntGroupsServiceHandler) UpdateHuntGroupExileLinks(context.Context, *connect_go.Request[v1alpha1.UpdateHuntGroupExileLinksRequest]) (*connect_go.Response[v1alpha1.UpdateHuntGroupExileLinksResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.org.hunt_groups.v1alpha1.HuntGroupsService.UpdateHuntGroupExileLinks is not implemented"))
}
