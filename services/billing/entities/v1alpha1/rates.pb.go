// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        (unknown)
// source: services/billing/entities/v1alpha1/rates.proto

package entitiesv1alpha1

import (
	audit "github.com/tcncloud/api-go/api/commons/audit"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RateDefinitionConfigType defines the type of configuration for a rate definition.
type RateDefinitionConfigType int32

const (
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_UNSPECIFIED RateDefinitionConfigType = 0
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_NOOP        RateDefinitionConfigType = 1
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_AGENT_SEATS RateDefinitionConfigType = 2
	// omni config types
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_AGENT_TEXT_MESSAGE_CHAT             RateDefinitionConfigType = 100
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_AGENT_TEXT_MESSAGE_EMAIL_MESSAGE    RateDefinitionConfigType = 101
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_AGENT_TEXT_MESSAGE_EMAIL_SIZE       RateDefinitionConfigType = 102
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_AGENT_TEXT_MESSAGE_SMS              RateDefinitionConfigType = 103
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_TASK_MESSAGE_SENT_EMAIL_MESSAGE     RateDefinitionConfigType = 104
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_TASK_MESSAGE_SENT_EMAIL_SIZE        RateDefinitionConfigType = 105
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_TASK_MESSAGE_SENT_SMS               RateDefinitionConfigType = 106
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_CONNECTED_INBOX_POLL                RateDefinitionConfigType = 107
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_CHAT           RateDefinitionConfigType = 108
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_EMAIL_MESSAGE  RateDefinitionConfigType = 109
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_EMAIL_SIZE     RateDefinitionConfigType = 110
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_SMS            RateDefinitionConfigType = 111
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_CHAT          RateDefinitionConfigType = 112
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_EMAIL_MESSAGE RateDefinitionConfigType = 113
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_EMAIL_SIZE    RateDefinitionConfigType = 114
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_SMS           RateDefinitionConfigType = 115
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_AGENT_TEXT_MESSAGE_CHAT_SIZE        RateDefinitionConfigType = 116
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_CHAT_SIZE      RateDefinitionConfigType = 117
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_CHAT_SIZE     RateDefinitionConfigType = 118
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_CONNECTED_INBOX_CREATED             RateDefinitionConfigType = 119
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_AGENT_TEXT_MESSAGE_SMS_SIZE         RateDefinitionConfigType = 120
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_SMS_SIZE       RateDefinitionConfigType = 121
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_SMS_SIZE      RateDefinitionConfigType = 122
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_TASK_MESSAGE_SENT_SMS_SIZE          RateDefinitionConfigType = 123
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_AGENT_CHAT_MESSAGE_UNITS            RateDefinitionConfigType = 124
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_AGENT_EMAIL_MESSAGE_UNITS           RateDefinitionConfigType = 125
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_AGENT_SMS_MESSAGE_UNITS             RateDefinitionConfigType = 126
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_MANAGER_CHAT_MESSAGE_UNITS          RateDefinitionConfigType = 127
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_MANAGER_EMAIL_MESSAGE_UNITS         RateDefinitionConfigType = 128
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_MANAGER_SMS_MESSAGE_UNITS           RateDefinitionConfigType = 129
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_CHAT_MESSAGE_UNITS         RateDefinitionConfigType = 130
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_EMAIL_MESSAGE_UNITS        RateDefinitionConfigType = 131
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_SMS_MESSAGE_UNITS          RateDefinitionConfigType = 132
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_SYSTEM_CHAT_MESSAGE_UNITS           RateDefinitionConfigType = 133
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_SYSTEM_EMAIL_MESSAGE_UNITS          RateDefinitionConfigType = 134
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_SYSTEM_SMS_MESSAGE_UNITS            RateDefinitionConfigType = 135
	// compliance config types
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_COMPLIANCE_RND_QUERY        RateDefinitionConfigType = 200
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_COMPLIANCE_RND_QUERY_CACHED RateDefinitionConfigType = 201
)

// Enum value maps for RateDefinitionConfigType.
var (
	RateDefinitionConfigType_name = map[int32]string{
		0:   "RATE_DEFINITION_CONFIG_TYPE_UNSPECIFIED",
		1:   "RATE_DEFINITION_CONFIG_TYPE_NOOP",
		2:   "RATE_DEFINITION_CONFIG_TYPE_AGENT_SEATS",
		100: "RATE_DEFINITION_CONFIG_TYPE_AGENT_TEXT_MESSAGE_CHAT",
		101: "RATE_DEFINITION_CONFIG_TYPE_AGENT_TEXT_MESSAGE_EMAIL_MESSAGE",
		102: "RATE_DEFINITION_CONFIG_TYPE_AGENT_TEXT_MESSAGE_EMAIL_SIZE",
		103: "RATE_DEFINITION_CONFIG_TYPE_AGENT_TEXT_MESSAGE_SMS",
		104: "RATE_DEFINITION_CONFIG_TYPE_TASK_MESSAGE_SENT_EMAIL_MESSAGE",
		105: "RATE_DEFINITION_CONFIG_TYPE_TASK_MESSAGE_SENT_EMAIL_SIZE",
		106: "RATE_DEFINITION_CONFIG_TYPE_TASK_MESSAGE_SENT_SMS",
		107: "RATE_DEFINITION_CONFIG_TYPE_CONNECTED_INBOX_POLL",
		108: "RATE_DEFINITION_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_CHAT",
		109: "RATE_DEFINITION_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_EMAIL_MESSAGE",
		110: "RATE_DEFINITION_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_EMAIL_SIZE",
		111: "RATE_DEFINITION_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_SMS",
		112: "RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_CHAT",
		113: "RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_EMAIL_MESSAGE",
		114: "RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_EMAIL_SIZE",
		115: "RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_SMS",
		116: "RATE_DEFINITION_CONFIG_TYPE_AGENT_TEXT_MESSAGE_CHAT_SIZE",
		117: "RATE_DEFINITION_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_CHAT_SIZE",
		118: "RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_CHAT_SIZE",
		119: "RATE_DEFINITION_CONFIG_TYPE_CONNECTED_INBOX_CREATED",
		120: "RATE_DEFINITION_CONFIG_TYPE_AGENT_TEXT_MESSAGE_SMS_SIZE",
		121: "RATE_DEFINITION_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_SMS_SIZE",
		122: "RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_SMS_SIZE",
		123: "RATE_DEFINITION_CONFIG_TYPE_TASK_MESSAGE_SENT_SMS_SIZE",
		124: "RATE_DEFINITION_CONFIG_TYPE_AGENT_CHAT_MESSAGE_UNITS",
		125: "RATE_DEFINITION_CONFIG_TYPE_AGENT_EMAIL_MESSAGE_UNITS",
		126: "RATE_DEFINITION_CONFIG_TYPE_AGENT_SMS_MESSAGE_UNITS",
		127: "RATE_DEFINITION_CONFIG_TYPE_MANAGER_CHAT_MESSAGE_UNITS",
		128: "RATE_DEFINITION_CONFIG_TYPE_MANAGER_EMAIL_MESSAGE_UNITS",
		129: "RATE_DEFINITION_CONFIG_TYPE_MANAGER_SMS_MESSAGE_UNITS",
		130: "RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_CHAT_MESSAGE_UNITS",
		131: "RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_EMAIL_MESSAGE_UNITS",
		132: "RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_SMS_MESSAGE_UNITS",
		133: "RATE_DEFINITION_CONFIG_TYPE_SYSTEM_CHAT_MESSAGE_UNITS",
		134: "RATE_DEFINITION_CONFIG_TYPE_SYSTEM_EMAIL_MESSAGE_UNITS",
		135: "RATE_DEFINITION_CONFIG_TYPE_SYSTEM_SMS_MESSAGE_UNITS",
		200: "RATE_DEFINITION_CONFIG_TYPE_COMPLIANCE_RND_QUERY",
		201: "RATE_DEFINITION_CONFIG_TYPE_COMPLIANCE_RND_QUERY_CACHED",
	}
	RateDefinitionConfigType_value = map[string]int32{
		"RATE_DEFINITION_CONFIG_TYPE_UNSPECIFIED":                         0,
		"RATE_DEFINITION_CONFIG_TYPE_NOOP":                                1,
		"RATE_DEFINITION_CONFIG_TYPE_AGENT_SEATS":                         2,
		"RATE_DEFINITION_CONFIG_TYPE_AGENT_TEXT_MESSAGE_CHAT":             100,
		"RATE_DEFINITION_CONFIG_TYPE_AGENT_TEXT_MESSAGE_EMAIL_MESSAGE":    101,
		"RATE_DEFINITION_CONFIG_TYPE_AGENT_TEXT_MESSAGE_EMAIL_SIZE":       102,
		"RATE_DEFINITION_CONFIG_TYPE_AGENT_TEXT_MESSAGE_SMS":              103,
		"RATE_DEFINITION_CONFIG_TYPE_TASK_MESSAGE_SENT_EMAIL_MESSAGE":     104,
		"RATE_DEFINITION_CONFIG_TYPE_TASK_MESSAGE_SENT_EMAIL_SIZE":        105,
		"RATE_DEFINITION_CONFIG_TYPE_TASK_MESSAGE_SENT_SMS":               106,
		"RATE_DEFINITION_CONFIG_TYPE_CONNECTED_INBOX_POLL":                107,
		"RATE_DEFINITION_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_CHAT":           108,
		"RATE_DEFINITION_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_EMAIL_MESSAGE":  109,
		"RATE_DEFINITION_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_EMAIL_SIZE":     110,
		"RATE_DEFINITION_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_SMS":            111,
		"RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_CHAT":          112,
		"RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_EMAIL_MESSAGE": 113,
		"RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_EMAIL_SIZE":    114,
		"RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_SMS":           115,
		"RATE_DEFINITION_CONFIG_TYPE_AGENT_TEXT_MESSAGE_CHAT_SIZE":        116,
		"RATE_DEFINITION_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_CHAT_SIZE":      117,
		"RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_CHAT_SIZE":     118,
		"RATE_DEFINITION_CONFIG_TYPE_CONNECTED_INBOX_CREATED":             119,
		"RATE_DEFINITION_CONFIG_TYPE_AGENT_TEXT_MESSAGE_SMS_SIZE":         120,
		"RATE_DEFINITION_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_SMS_SIZE":       121,
		"RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_SMS_SIZE":      122,
		"RATE_DEFINITION_CONFIG_TYPE_TASK_MESSAGE_SENT_SMS_SIZE":          123,
		"RATE_DEFINITION_CONFIG_TYPE_AGENT_CHAT_MESSAGE_UNITS":            124,
		"RATE_DEFINITION_CONFIG_TYPE_AGENT_EMAIL_MESSAGE_UNITS":           125,
		"RATE_DEFINITION_CONFIG_TYPE_AGENT_SMS_MESSAGE_UNITS":             126,
		"RATE_DEFINITION_CONFIG_TYPE_MANAGER_CHAT_MESSAGE_UNITS":          127,
		"RATE_DEFINITION_CONFIG_TYPE_MANAGER_EMAIL_MESSAGE_UNITS":         128,
		"RATE_DEFINITION_CONFIG_TYPE_MANAGER_SMS_MESSAGE_UNITS":           129,
		"RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_CHAT_MESSAGE_UNITS":         130,
		"RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_EMAIL_MESSAGE_UNITS":        131,
		"RATE_DEFINITION_CONFIG_TYPE_CUSTOMER_SMS_MESSAGE_UNITS":          132,
		"RATE_DEFINITION_CONFIG_TYPE_SYSTEM_CHAT_MESSAGE_UNITS":           133,
		"RATE_DEFINITION_CONFIG_TYPE_SYSTEM_EMAIL_MESSAGE_UNITS":          134,
		"RATE_DEFINITION_CONFIG_TYPE_SYSTEM_SMS_MESSAGE_UNITS":            135,
		"RATE_DEFINITION_CONFIG_TYPE_COMPLIANCE_RND_QUERY":                200,
		"RATE_DEFINITION_CONFIG_TYPE_COMPLIANCE_RND_QUERY_CACHED":         201,
	}
)

func (x RateDefinitionConfigType) Enum() *RateDefinitionConfigType {
	p := new(RateDefinitionConfigType)
	*p = x
	return p
}

func (x RateDefinitionConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RateDefinitionConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_services_billing_entities_v1alpha1_rates_proto_enumTypes[0].Descriptor()
}

func (RateDefinitionConfigType) Type() protoreflect.EnumType {
	return &file_services_billing_entities_v1alpha1_rates_proto_enumTypes[0]
}

func (x RateDefinitionConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RateDefinitionConfigType.Descriptor instead.
func (RateDefinitionConfigType) EnumDescriptor() ([]byte, []int) {
	return file_services_billing_entities_v1alpha1_rates_proto_rawDescGZIP(), []int{0}
}

// RateDefinition defines a rating configuration.
type RateDefinition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the resource identifier
	RateDefinitionId string `protobuf:"bytes,1,opt,name=rate_definition_id,json=rateDefinitionId,proto3" json:"rate_definition_id,omitempty"`
	// unused
	//
	// Deprecated: Marked as deprecated in services/billing/entities/v1alpha1/rates.proto.
	RateDefinitionFeatureId string `protobuf:"bytes,2,opt,name=rate_definition_feature_id,json=rateDefinitionFeatureId,proto3" json:"rate_definition_feature_id,omitempty"`
	// a group identifier for this rate definition; optional
	RateDefinitionGroupId string `protobuf:"bytes,3,opt,name=rate_definition_group_id,json=rateDefinitionGroupId,proto3" json:"rate_definition_group_id,omitempty"`
	// the event type this definition rates
	EventType audit.EventType `protobuf:"varint,4,opt,name=event_type,json=eventType,proto3,enum=api.commons.audit.EventType" json:"event_type,omitempty"`
	// the config type of this definitioin
	ConfigType RateDefinitionConfigType `protobuf:"varint,5,opt,name=config_type,json=configType,proto3,enum=services.billing.entities.v1alpha1.RateDefinitionConfigType" json:"config_type,omitempty"`
	// the matching rule for this definition
	MatchingRule MatchingRule `protobuf:"varint,6,opt,name=matching_rule,json=matchingRule,proto3,enum=services.billing.entities.v1alpha1.MatchingRule" json:"matching_rule,omitempty"`
	// the matching config for this definition
	MatchingConfig *MatchingConfig `protobuf:"bytes,7,opt,name=matching_config,json=matchingConfig,proto3" json:"matching_config,omitempty"`
	// the configuration for this definition
	Config *RateDefinitionConfig `protobuf:"bytes,8,opt,name=config,proto3" json:"config,omitempty"`
	// the time the rate definition was created
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// the time the rate definition was last updated
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// the time this rate definition was deleted (if applicable)
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// the matching sha for this definition
	MatchingSha   string `protobuf:"bytes,12,opt,name=matching_sha,json=matchingSha,proto3" json:"matching_sha,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RateDefinition) Reset() {
	*x = RateDefinition{}
	mi := &file_services_billing_entities_v1alpha1_rates_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateDefinition) ProtoMessage() {}

func (x *RateDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_services_billing_entities_v1alpha1_rates_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateDefinition.ProtoReflect.Descriptor instead.
func (*RateDefinition) Descriptor() ([]byte, []int) {
	return file_services_billing_entities_v1alpha1_rates_proto_rawDescGZIP(), []int{0}
}

func (x *RateDefinition) GetRateDefinitionId() string {
	if x != nil {
		return x.RateDefinitionId
	}
	return ""
}

// Deprecated: Marked as deprecated in services/billing/entities/v1alpha1/rates.proto.
func (x *RateDefinition) GetRateDefinitionFeatureId() string {
	if x != nil {
		return x.RateDefinitionFeatureId
	}
	return ""
}

func (x *RateDefinition) GetRateDefinitionGroupId() string {
	if x != nil {
		return x.RateDefinitionGroupId
	}
	return ""
}

func (x *RateDefinition) GetEventType() audit.EventType {
	if x != nil {
		return x.EventType
	}
	return audit.EventType(0)
}

func (x *RateDefinition) GetConfigType() RateDefinitionConfigType {
	if x != nil {
		return x.ConfigType
	}
	return RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_UNSPECIFIED
}

func (x *RateDefinition) GetMatchingRule() MatchingRule {
	if x != nil {
		return x.MatchingRule
	}
	return MatchingRule_MATCHING_RULE_UNSPECIFIED
}

func (x *RateDefinition) GetMatchingConfig() *MatchingConfig {
	if x != nil {
		return x.MatchingConfig
	}
	return nil
}

func (x *RateDefinition) GetConfig() *RateDefinitionConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RateDefinition) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *RateDefinition) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *RateDefinition) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *RateDefinition) GetMatchingSha() string {
	if x != nil {
		return x.MatchingSha
	}
	return ""
}

// RateDefinitionConfig defines the configuration for a rate definition.
type RateDefinitionConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Config:
	//
	//	*RateDefinitionConfig_AgentSeatsConfig
	//	*RateDefinitionConfig_AgentTextMessageChatConfig
	//	*RateDefinitionConfig_AgentTextMessageEmailMessageConfig
	//	*RateDefinitionConfig_AgentTextMessageEmailSizeConfig
	//	*RateDefinitionConfig_AgentTextMessageSmsConfig
	//	*RateDefinitionConfig_TaskMessageSentEmailMessageConfig
	//	*RateDefinitionConfig_TaskMessageSentEmailSizeConfig
	//	*RateDefinitionConfig_TaskMessageSentSmsConfig
	//	*RateDefinitionConfig_ConnectedInboxPollConfig
	//	*RateDefinitionConfig_ManagerTextMessageChatConfig
	//	*RateDefinitionConfig_ManagerTextMessageEmailMessageConfig
	//	*RateDefinitionConfig_ManagerTextMessageEmailSizeConfig
	//	*RateDefinitionConfig_ManagerTextMessageSmsConfig
	//	*RateDefinitionConfig_CustomerTextMessageChatConfig
	//	*RateDefinitionConfig_CustomerTextMessageEmailMessageConfig
	//	*RateDefinitionConfig_CustomerTextMessageEmailSizeConfig
	//	*RateDefinitionConfig_CustomerTextMessageSmsConfig
	//	*RateDefinitionConfig_AgentTextMessageChatSizeConfig
	//	*RateDefinitionConfig_ManagerTextMessageChatSizeConfig
	//	*RateDefinitionConfig_CustomerTextMessageChatSizeConfig
	//	*RateDefinitionConfig_ConnectedInboxCreatedConfig
	//	*RateDefinitionConfig_AgentTextMessageSmsSizeConfig
	//	*RateDefinitionConfig_ManagerTextMessageSmsSizeConfig
	//	*RateDefinitionConfig_CustomerTextMessageSmsSizeConfig
	//	*RateDefinitionConfig_TaskMessageSentSmsSizeConfig
	//	*RateDefinitionConfig_AgentChatMessageUnitsConfig
	//	*RateDefinitionConfig_AgentEmailMessageUnitsConfig
	//	*RateDefinitionConfig_AgentSmsMessageUnitsConfig
	//	*RateDefinitionConfig_ManagerChatMessageUnitsConfig
	//	*RateDefinitionConfig_ManagerEmailMessageUnitsConfig
	//	*RateDefinitionConfig_ManagerSmsMessageUnitsConfig
	//	*RateDefinitionConfig_CustomerChatMessageUnitsConfig
	//	*RateDefinitionConfig_CustomerEmailMessageUnitsConfig
	//	*RateDefinitionConfig_CustomerSmsMessageUnitsConfig
	//	*RateDefinitionConfig_SystemChatMessageUnitsConfig
	//	*RateDefinitionConfig_SystemEmailMessageUnitsConfig
	//	*RateDefinitionConfig_SystemSmsMessageUnitsConfig
	//	*RateDefinitionConfig_ComplianceRndQueryConfig
	//	*RateDefinitionConfig_ComplianceRndQueryCachedConfig
	Config        isRateDefinitionConfig_Config `protobuf_oneof:"config"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RateDefinitionConfig) Reset() {
	*x = RateDefinitionConfig{}
	mi := &file_services_billing_entities_v1alpha1_rates_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateDefinitionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateDefinitionConfig) ProtoMessage() {}

func (x *RateDefinitionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_services_billing_entities_v1alpha1_rates_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateDefinitionConfig.ProtoReflect.Descriptor instead.
func (*RateDefinitionConfig) Descriptor() ([]byte, []int) {
	return file_services_billing_entities_v1alpha1_rates_proto_rawDescGZIP(), []int{1}
}

func (x *RateDefinitionConfig) GetConfig() isRateDefinitionConfig_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RateDefinitionConfig) GetAgentSeatsConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_AgentSeatsConfig); ok {
			return x.AgentSeatsConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetAgentTextMessageChatConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_AgentTextMessageChatConfig); ok {
			return x.AgentTextMessageChatConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetAgentTextMessageEmailMessageConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_AgentTextMessageEmailMessageConfig); ok {
			return x.AgentTextMessageEmailMessageConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetAgentTextMessageEmailSizeConfig() *BasicUnitConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_AgentTextMessageEmailSizeConfig); ok {
			return x.AgentTextMessageEmailSizeConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetAgentTextMessageSmsConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_AgentTextMessageSmsConfig); ok {
			return x.AgentTextMessageSmsConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetTaskMessageSentEmailMessageConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_TaskMessageSentEmailMessageConfig); ok {
			return x.TaskMessageSentEmailMessageConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetTaskMessageSentEmailSizeConfig() *BasicUnitConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_TaskMessageSentEmailSizeConfig); ok {
			return x.TaskMessageSentEmailSizeConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetTaskMessageSentSmsConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_TaskMessageSentSmsConfig); ok {
			return x.TaskMessageSentSmsConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetConnectedInboxPollConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_ConnectedInboxPollConfig); ok {
			return x.ConnectedInboxPollConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetManagerTextMessageChatConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_ManagerTextMessageChatConfig); ok {
			return x.ManagerTextMessageChatConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetManagerTextMessageEmailMessageConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_ManagerTextMessageEmailMessageConfig); ok {
			return x.ManagerTextMessageEmailMessageConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetManagerTextMessageEmailSizeConfig() *BasicUnitConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_ManagerTextMessageEmailSizeConfig); ok {
			return x.ManagerTextMessageEmailSizeConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetManagerTextMessageSmsConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_ManagerTextMessageSmsConfig); ok {
			return x.ManagerTextMessageSmsConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetCustomerTextMessageChatConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_CustomerTextMessageChatConfig); ok {
			return x.CustomerTextMessageChatConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetCustomerTextMessageEmailMessageConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_CustomerTextMessageEmailMessageConfig); ok {
			return x.CustomerTextMessageEmailMessageConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetCustomerTextMessageEmailSizeConfig() *BasicUnitConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_CustomerTextMessageEmailSizeConfig); ok {
			return x.CustomerTextMessageEmailSizeConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetCustomerTextMessageSmsConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_CustomerTextMessageSmsConfig); ok {
			return x.CustomerTextMessageSmsConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetAgentTextMessageChatSizeConfig() *BasicUnitConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_AgentTextMessageChatSizeConfig); ok {
			return x.AgentTextMessageChatSizeConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetManagerTextMessageChatSizeConfig() *BasicUnitConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_ManagerTextMessageChatSizeConfig); ok {
			return x.ManagerTextMessageChatSizeConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetCustomerTextMessageChatSizeConfig() *BasicUnitConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_CustomerTextMessageChatSizeConfig); ok {
			return x.CustomerTextMessageChatSizeConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetConnectedInboxCreatedConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_ConnectedInboxCreatedConfig); ok {
			return x.ConnectedInboxCreatedConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetAgentTextMessageSmsSizeConfig() *BasicUnitConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_AgentTextMessageSmsSizeConfig); ok {
			return x.AgentTextMessageSmsSizeConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetManagerTextMessageSmsSizeConfig() *BasicUnitConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_ManagerTextMessageSmsSizeConfig); ok {
			return x.ManagerTextMessageSmsSizeConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetCustomerTextMessageSmsSizeConfig() *BasicUnitConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_CustomerTextMessageSmsSizeConfig); ok {
			return x.CustomerTextMessageSmsSizeConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetTaskMessageSentSmsSizeConfig() *BasicUnitConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_TaskMessageSentSmsSizeConfig); ok {
			return x.TaskMessageSentSmsSizeConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetAgentChatMessageUnitsConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_AgentChatMessageUnitsConfig); ok {
			return x.AgentChatMessageUnitsConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetAgentEmailMessageUnitsConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_AgentEmailMessageUnitsConfig); ok {
			return x.AgentEmailMessageUnitsConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetAgentSmsMessageUnitsConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_AgentSmsMessageUnitsConfig); ok {
			return x.AgentSmsMessageUnitsConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetManagerChatMessageUnitsConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_ManagerChatMessageUnitsConfig); ok {
			return x.ManagerChatMessageUnitsConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetManagerEmailMessageUnitsConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_ManagerEmailMessageUnitsConfig); ok {
			return x.ManagerEmailMessageUnitsConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetManagerSmsMessageUnitsConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_ManagerSmsMessageUnitsConfig); ok {
			return x.ManagerSmsMessageUnitsConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetCustomerChatMessageUnitsConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_CustomerChatMessageUnitsConfig); ok {
			return x.CustomerChatMessageUnitsConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetCustomerEmailMessageUnitsConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_CustomerEmailMessageUnitsConfig); ok {
			return x.CustomerEmailMessageUnitsConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetCustomerSmsMessageUnitsConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_CustomerSmsMessageUnitsConfig); ok {
			return x.CustomerSmsMessageUnitsConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetSystemChatMessageUnitsConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_SystemChatMessageUnitsConfig); ok {
			return x.SystemChatMessageUnitsConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetSystemEmailMessageUnitsConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_SystemEmailMessageUnitsConfig); ok {
			return x.SystemEmailMessageUnitsConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetSystemSmsMessageUnitsConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_SystemSmsMessageUnitsConfig); ok {
			return x.SystemSmsMessageUnitsConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetComplianceRndQueryConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_ComplianceRndQueryConfig); ok {
			return x.ComplianceRndQueryConfig
		}
	}
	return nil
}

func (x *RateDefinitionConfig) GetComplianceRndQueryCachedConfig() *BasicConfig {
	if x != nil {
		if x, ok := x.Config.(*RateDefinitionConfig_ComplianceRndQueryCachedConfig); ok {
			return x.ComplianceRndQueryCachedConfig
		}
	}
	return nil
}

type isRateDefinitionConfig_Config interface {
	isRateDefinitionConfig_Config()
}

type RateDefinitionConfig_AgentSeatsConfig struct {
	AgentSeatsConfig *BasicConfig `protobuf:"bytes,2,opt,name=agent_seats_config,json=agentSeatsConfig,proto3,oneof"`
}

type RateDefinitionConfig_AgentTextMessageChatConfig struct {
	// omni configs
	AgentTextMessageChatConfig *BasicConfig `protobuf:"bytes,100,opt,name=agent_text_message_chat_config,json=agentTextMessageChatConfig,proto3,oneof"`
}

type RateDefinitionConfig_AgentTextMessageEmailMessageConfig struct {
	AgentTextMessageEmailMessageConfig *BasicConfig `protobuf:"bytes,101,opt,name=agent_text_message_email_message_config,json=agentTextMessageEmailMessageConfig,proto3,oneof"`
}

type RateDefinitionConfig_AgentTextMessageEmailSizeConfig struct {
	AgentTextMessageEmailSizeConfig *BasicUnitConfig `protobuf:"bytes,102,opt,name=agent_text_message_email_size_config,json=agentTextMessageEmailSizeConfig,proto3,oneof"`
}

type RateDefinitionConfig_AgentTextMessageSmsConfig struct {
	AgentTextMessageSmsConfig *BasicConfig `protobuf:"bytes,103,opt,name=agent_text_message_sms_config,json=agentTextMessageSmsConfig,proto3,oneof"`
}

type RateDefinitionConfig_TaskMessageSentEmailMessageConfig struct {
	TaskMessageSentEmailMessageConfig *BasicConfig `protobuf:"bytes,104,opt,name=task_message_sent_email_message_config,json=taskMessageSentEmailMessageConfig,proto3,oneof"`
}

type RateDefinitionConfig_TaskMessageSentEmailSizeConfig struct {
	TaskMessageSentEmailSizeConfig *BasicUnitConfig `protobuf:"bytes,105,opt,name=task_message_sent_email_size_config,json=taskMessageSentEmailSizeConfig,proto3,oneof"`
}

type RateDefinitionConfig_TaskMessageSentSmsConfig struct {
	TaskMessageSentSmsConfig *BasicConfig `protobuf:"bytes,106,opt,name=task_message_sent_sms_config,json=taskMessageSentSmsConfig,proto3,oneof"`
}

type RateDefinitionConfig_ConnectedInboxPollConfig struct {
	ConnectedInboxPollConfig *BasicConfig `protobuf:"bytes,107,opt,name=connected_inbox_poll_config,json=connectedInboxPollConfig,proto3,oneof"`
}

type RateDefinitionConfig_ManagerTextMessageChatConfig struct {
	ManagerTextMessageChatConfig *BasicConfig `protobuf:"bytes,108,opt,name=manager_text_message_chat_config,json=managerTextMessageChatConfig,proto3,oneof"`
}

type RateDefinitionConfig_ManagerTextMessageEmailMessageConfig struct {
	ManagerTextMessageEmailMessageConfig *BasicConfig `protobuf:"bytes,109,opt,name=manager_text_message_email_message_config,json=managerTextMessageEmailMessageConfig,proto3,oneof"`
}

type RateDefinitionConfig_ManagerTextMessageEmailSizeConfig struct {
	ManagerTextMessageEmailSizeConfig *BasicUnitConfig `protobuf:"bytes,110,opt,name=manager_text_message_email_size_config,json=managerTextMessageEmailSizeConfig,proto3,oneof"`
}

type RateDefinitionConfig_ManagerTextMessageSmsConfig struct {
	ManagerTextMessageSmsConfig *BasicConfig `protobuf:"bytes,111,opt,name=manager_text_message_sms_config,json=managerTextMessageSmsConfig,proto3,oneof"`
}

type RateDefinitionConfig_CustomerTextMessageChatConfig struct {
	CustomerTextMessageChatConfig *BasicConfig `protobuf:"bytes,112,opt,name=customer_text_message_chat_config,json=customerTextMessageChatConfig,proto3,oneof"`
}

type RateDefinitionConfig_CustomerTextMessageEmailMessageConfig struct {
	CustomerTextMessageEmailMessageConfig *BasicConfig `protobuf:"bytes,113,opt,name=customer_text_message_email_message_config,json=customerTextMessageEmailMessageConfig,proto3,oneof"`
}

type RateDefinitionConfig_CustomerTextMessageEmailSizeConfig struct {
	CustomerTextMessageEmailSizeConfig *BasicUnitConfig `protobuf:"bytes,114,opt,name=customer_text_message_email_size_config,json=customerTextMessageEmailSizeConfig,proto3,oneof"`
}

type RateDefinitionConfig_CustomerTextMessageSmsConfig struct {
	CustomerTextMessageSmsConfig *BasicConfig `protobuf:"bytes,115,opt,name=customer_text_message_sms_config,json=customerTextMessageSmsConfig,proto3,oneof"`
}

type RateDefinitionConfig_AgentTextMessageChatSizeConfig struct {
	AgentTextMessageChatSizeConfig *BasicUnitConfig `protobuf:"bytes,116,opt,name=agent_text_message_chat_size_config,json=agentTextMessageChatSizeConfig,proto3,oneof"`
}

type RateDefinitionConfig_ManagerTextMessageChatSizeConfig struct {
	ManagerTextMessageChatSizeConfig *BasicUnitConfig `protobuf:"bytes,117,opt,name=manager_text_message_chat_size_config,json=managerTextMessageChatSizeConfig,proto3,oneof"`
}

type RateDefinitionConfig_CustomerTextMessageChatSizeConfig struct {
	CustomerTextMessageChatSizeConfig *BasicUnitConfig `protobuf:"bytes,118,opt,name=customer_text_message_chat_size_config,json=customerTextMessageChatSizeConfig,proto3,oneof"`
}

type RateDefinitionConfig_ConnectedInboxCreatedConfig struct {
	ConnectedInboxCreatedConfig *BasicConfig `protobuf:"bytes,119,opt,name=connected_inbox_created_config,json=connectedInboxCreatedConfig,proto3,oneof"`
}

type RateDefinitionConfig_AgentTextMessageSmsSizeConfig struct {
	AgentTextMessageSmsSizeConfig *BasicUnitConfig `protobuf:"bytes,120,opt,name=agent_text_message_sms_size_config,json=agentTextMessageSmsSizeConfig,proto3,oneof"`
}

type RateDefinitionConfig_ManagerTextMessageSmsSizeConfig struct {
	ManagerTextMessageSmsSizeConfig *BasicUnitConfig `protobuf:"bytes,121,opt,name=manager_text_message_sms_size_config,json=managerTextMessageSmsSizeConfig,proto3,oneof"`
}

type RateDefinitionConfig_CustomerTextMessageSmsSizeConfig struct {
	CustomerTextMessageSmsSizeConfig *BasicUnitConfig `protobuf:"bytes,122,opt,name=customer_text_message_sms_size_config,json=customerTextMessageSmsSizeConfig,proto3,oneof"`
}

type RateDefinitionConfig_TaskMessageSentSmsSizeConfig struct {
	TaskMessageSentSmsSizeConfig *BasicUnitConfig `protobuf:"bytes,123,opt,name=task_message_sent_sms_size_config,json=taskMessageSentSmsSizeConfig,proto3,oneof"`
}

type RateDefinitionConfig_AgentChatMessageUnitsConfig struct {
	AgentChatMessageUnitsConfig *BasicConfig `protobuf:"bytes,124,opt,name=agent_chat_message_units_config,json=agentChatMessageUnitsConfig,proto3,oneof"`
}

type RateDefinitionConfig_AgentEmailMessageUnitsConfig struct {
	AgentEmailMessageUnitsConfig *BasicConfig `protobuf:"bytes,125,opt,name=agent_email_message_units_config,json=agentEmailMessageUnitsConfig,proto3,oneof"`
}

type RateDefinitionConfig_AgentSmsMessageUnitsConfig struct {
	AgentSmsMessageUnitsConfig *BasicConfig `protobuf:"bytes,126,opt,name=agent_sms_message_units_config,json=agentSmsMessageUnitsConfig,proto3,oneof"`
}

type RateDefinitionConfig_ManagerChatMessageUnitsConfig struct {
	ManagerChatMessageUnitsConfig *BasicConfig `protobuf:"bytes,127,opt,name=manager_chat_message_units_config,json=managerChatMessageUnitsConfig,proto3,oneof"`
}

type RateDefinitionConfig_ManagerEmailMessageUnitsConfig struct {
	ManagerEmailMessageUnitsConfig *BasicConfig `protobuf:"bytes,128,opt,name=manager_email_message_units_config,json=managerEmailMessageUnitsConfig,proto3,oneof"`
}

type RateDefinitionConfig_ManagerSmsMessageUnitsConfig struct {
	ManagerSmsMessageUnitsConfig *BasicConfig `protobuf:"bytes,129,opt,name=manager_sms_message_units_config,json=managerSmsMessageUnitsConfig,proto3,oneof"`
}

type RateDefinitionConfig_CustomerChatMessageUnitsConfig struct {
	CustomerChatMessageUnitsConfig *BasicConfig `protobuf:"bytes,130,opt,name=customer_chat_message_units_config,json=customerChatMessageUnitsConfig,proto3,oneof"`
}

type RateDefinitionConfig_CustomerEmailMessageUnitsConfig struct {
	CustomerEmailMessageUnitsConfig *BasicConfig `protobuf:"bytes,131,opt,name=customer_email_message_units_config,json=customerEmailMessageUnitsConfig,proto3,oneof"`
}

type RateDefinitionConfig_CustomerSmsMessageUnitsConfig struct {
	CustomerSmsMessageUnitsConfig *BasicConfig `protobuf:"bytes,132,opt,name=customer_sms_message_units_config,json=customerSmsMessageUnitsConfig,proto3,oneof"`
}

type RateDefinitionConfig_SystemChatMessageUnitsConfig struct {
	SystemChatMessageUnitsConfig *BasicConfig `protobuf:"bytes,133,opt,name=system_chat_message_units_config,json=systemChatMessageUnitsConfig,proto3,oneof"`
}

type RateDefinitionConfig_SystemEmailMessageUnitsConfig struct {
	SystemEmailMessageUnitsConfig *BasicConfig `protobuf:"bytes,134,opt,name=system_email_message_units_config,json=systemEmailMessageUnitsConfig,proto3,oneof"`
}

type RateDefinitionConfig_SystemSmsMessageUnitsConfig struct {
	SystemSmsMessageUnitsConfig *BasicConfig `protobuf:"bytes,135,opt,name=system_sms_message_units_config,json=systemSmsMessageUnitsConfig,proto3,oneof"`
}

type RateDefinitionConfig_ComplianceRndQueryConfig struct {
	// compliance configs
	ComplianceRndQueryConfig *BasicConfig `protobuf:"bytes,200,opt,name=compliance_rnd_query_config,json=complianceRndQueryConfig,proto3,oneof"`
}

type RateDefinitionConfig_ComplianceRndQueryCachedConfig struct {
	ComplianceRndQueryCachedConfig *BasicConfig `protobuf:"bytes,201,opt,name=compliance_rnd_query_cached_config,json=complianceRndQueryCachedConfig,proto3,oneof"`
}

func (*RateDefinitionConfig_AgentSeatsConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_AgentTextMessageChatConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_AgentTextMessageEmailMessageConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_AgentTextMessageEmailSizeConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_AgentTextMessageSmsConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_TaskMessageSentEmailMessageConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_TaskMessageSentEmailSizeConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_TaskMessageSentSmsConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ConnectedInboxPollConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ManagerTextMessageChatConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ManagerTextMessageEmailMessageConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ManagerTextMessageEmailSizeConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ManagerTextMessageSmsConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_CustomerTextMessageChatConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_CustomerTextMessageEmailMessageConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_CustomerTextMessageEmailSizeConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_CustomerTextMessageSmsConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_AgentTextMessageChatSizeConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ManagerTextMessageChatSizeConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_CustomerTextMessageChatSizeConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ConnectedInboxCreatedConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_AgentTextMessageSmsSizeConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ManagerTextMessageSmsSizeConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_CustomerTextMessageSmsSizeConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_TaskMessageSentSmsSizeConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_AgentChatMessageUnitsConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_AgentEmailMessageUnitsConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_AgentSmsMessageUnitsConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ManagerChatMessageUnitsConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ManagerEmailMessageUnitsConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ManagerSmsMessageUnitsConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_CustomerChatMessageUnitsConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_CustomerEmailMessageUnitsConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_CustomerSmsMessageUnitsConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_SystemChatMessageUnitsConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_SystemEmailMessageUnitsConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_SystemSmsMessageUnitsConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ComplianceRndQueryConfig) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ComplianceRndQueryCachedConfig) isRateDefinitionConfig_Config() {}

var File_services_billing_entities_v1alpha1_rates_proto protoreflect.FileDescriptor

var file_services_billing_entities_v1alpha1_rates_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x22, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x1a, 0x23, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb4, 0x06, 0x0a, 0x0e, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x72, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x3f, 0x0a, 0x1a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x17, 0x72, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x5b, 0x0a,
	0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x50, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x68, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x53, 0x68, 0x61, 0x22, 0xfe, 0x26, 0x0a, 0x14, 0x52, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x5f, 0x0a, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x10,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x75, 0x0a, 0x1e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1a, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x27, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x22, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x84, 0x01, 0x0a, 0x24, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x73, 0x0a, 0x1d, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6d,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x19, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x84, 0x01, 0x0a,
	0x26, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x21, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e,
	0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x82, 0x01, 0x0a, 0x23, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x69, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1e, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x69,
	0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x71, 0x0a, 0x1c, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6d,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x18, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x6e, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x70, 0x0a, 0x1b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x70,
	0x6f, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x62, 0x6f, 0x78, 0x50, 0x6f, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x79, 0x0a,
	0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1c, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8a, 0x01, 0x0a, 0x29, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x24, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x88, 0x01, 0x0a, 0x26, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x21, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x77, 0x0a, 0x1f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1b, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7b, 0x0a, 0x21, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x70,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8c, 0x01, 0x0a, 0x2a, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x25,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8a, 0x01, 0x0a, 0x27, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x22,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x79, 0x0a, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6d, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x1c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x82, 0x01,
	0x0a, 0x23, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x1e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x25, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x75, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x88, 0x01, 0x0a, 0x26,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x21, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x65, 0x78,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x76, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x62, 0x6f,
	0x78, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x80,
	0x01, 0x0a, 0x22, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x1d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x6d, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x84, 0x01, 0x0a, 0x24, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6d, 0x73, 0x53, 0x69,
	0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x25, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x6d, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x7e, 0x0a, 0x21, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x1c, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x6e, 0x74, 0x53, 0x6d, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x77, 0x0a, 0x1f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1b, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x79, 0x0a, 0x20, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x7d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x75, 0x0a, 0x1e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x6d, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x1a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6d, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7b, 0x0a, 0x21,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7e, 0x0a, 0x22, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7a, 0x0a, 0x20, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x81, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x6d, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7e, 0x0a, 0x22, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x82, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x80, 0x01, 0x0a, 0x23, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x83, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7c, 0x0a, 0x21, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x84, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x53, 0x6d, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7a, 0x0a, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x7c, 0x0a, 0x21, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x1d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x78, 0x0a, 0x1f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1b, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x6d, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x71, 0x0a, 0x1b, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7e, 0x0a,
	0x22, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x6e, 0x64, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1e, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2a, 0xa7, 0x13, 0x0a, 0x18, 0x52, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4f, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x41,
	0x54, 0x53, 0x10, 0x02, 0x12, 0x37, 0x0a, 0x33, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x64, 0x12, 0x40, 0x0a,
	0x3c, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x65, 0x12,
	0x3d, 0x0a, 0x39, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x66, 0x12, 0x36,
	0x0a, 0x32, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x53, 0x4d, 0x53, 0x10, 0x67, 0x12, 0x3f, 0x0a, 0x3b, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x68, 0x12, 0x3c, 0x0a, 0x38, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x53,
	0x49, 0x5a, 0x45, 0x10, 0x69, 0x12, 0x35, 0x0a, 0x31, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x6a, 0x12, 0x34, 0x0a, 0x30,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x58, 0x5f, 0x50, 0x4f, 0x4c, 0x4c,
	0x10, 0x6b, 0x12, 0x39, 0x0a, 0x35, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x6c, 0x12, 0x42, 0x0a,
	0x3e, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10,
	0x6d, 0x12, 0x3f, 0x0a, 0x3b, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x49, 0x5a, 0x45,
	0x10, 0x6e, 0x12, 0x38, 0x0a, 0x34, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x6f, 0x12, 0x3a, 0x0a, 0x36,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x70, 0x12, 0x43, 0x0a, 0x3f, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52,
	0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x71, 0x12, 0x40, 0x0a,
	0x3c, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x72, 0x12,
	0x39, 0x0a, 0x35, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x73, 0x12, 0x3c, 0x0a, 0x38, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x74, 0x12, 0x3e, 0x0a, 0x3a, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f,
	0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x75, 0x12, 0x3f, 0x0a, 0x3b, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52,
	0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x76, 0x12, 0x37, 0x0a, 0x33, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x58, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x77, 0x12, 0x3b, 0x0a, 0x37, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x78, 0x12,
	0x3d, 0x0a, 0x39, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x79, 0x12, 0x3e,
	0x0a, 0x3a, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x7a, 0x12, 0x3a,
	0x0a, 0x36, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x4d, 0x53, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x7b, 0x12, 0x38, 0x0a, 0x34, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x53, 0x10, 0x7c, 0x12, 0x39, 0x0a, 0x35, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0x7d, 0x12,
	0x37, 0x0a, 0x33, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0x7e, 0x12, 0x3a, 0x0a, 0x36, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f,
	0x43, 0x48, 0x41, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x53, 0x10, 0x7f, 0x12, 0x3c, 0x0a, 0x37, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10,
	0x80, 0x01, 0x12, 0x3a, 0x0a, 0x35, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0x81, 0x01, 0x12, 0x3c,
	0x0a, 0x37, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0x82, 0x01, 0x12, 0x3d, 0x0a, 0x38,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0x83, 0x01, 0x12, 0x3b, 0x0a, 0x36, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x45, 0x52, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0x84, 0x01, 0x12, 0x3a, 0x0a, 0x35, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43,
	0x48, 0x41, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x53, 0x10, 0x85, 0x01, 0x12, 0x3b, 0x0a, 0x36, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0x86,
	0x01, 0x12, 0x39, 0x0a, 0x34, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0x87, 0x01, 0x12, 0x35, 0x0a, 0x30,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x4e, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x10, 0xc8, 0x01, 0x12, 0x3c, 0x0a, 0x37, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x4e,
	0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0xc9,
	0x01, 0x42, 0xaf, 0x02, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0a, 0x52, 0x61,
	0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x42, 0x45,
	0xaa, 0x02, 0x22, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x22, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x5c, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x5c, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5c, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x25, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3a, 0x3a, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x3a,
	0x3a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_billing_entities_v1alpha1_rates_proto_rawDescOnce sync.Once
	file_services_billing_entities_v1alpha1_rates_proto_rawDescData = file_services_billing_entities_v1alpha1_rates_proto_rawDesc
)

func file_services_billing_entities_v1alpha1_rates_proto_rawDescGZIP() []byte {
	file_services_billing_entities_v1alpha1_rates_proto_rawDescOnce.Do(func() {
		file_services_billing_entities_v1alpha1_rates_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_billing_entities_v1alpha1_rates_proto_rawDescData)
	})
	return file_services_billing_entities_v1alpha1_rates_proto_rawDescData
}

var file_services_billing_entities_v1alpha1_rates_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_services_billing_entities_v1alpha1_rates_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_services_billing_entities_v1alpha1_rates_proto_goTypes = []any{
	(RateDefinitionConfigType)(0), // 0: services.billing.entities.v1alpha1.RateDefinitionConfigType
	(*RateDefinition)(nil),        // 1: services.billing.entities.v1alpha1.RateDefinition
	(*RateDefinitionConfig)(nil),  // 2: services.billing.entities.v1alpha1.RateDefinitionConfig
	(audit.EventType)(0),          // 3: api.commons.audit.EventType
	(MatchingRule)(0),             // 4: services.billing.entities.v1alpha1.MatchingRule
	(*MatchingConfig)(nil),        // 5: services.billing.entities.v1alpha1.MatchingConfig
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
	(*BasicConfig)(nil),           // 7: services.billing.entities.v1alpha1.BasicConfig
	(*BasicUnitConfig)(nil),       // 8: services.billing.entities.v1alpha1.BasicUnitConfig
}
var file_services_billing_entities_v1alpha1_rates_proto_depIdxs = []int32{
	3,  // 0: services.billing.entities.v1alpha1.RateDefinition.event_type:type_name -> api.commons.audit.EventType
	0,  // 1: services.billing.entities.v1alpha1.RateDefinition.config_type:type_name -> services.billing.entities.v1alpha1.RateDefinitionConfigType
	4,  // 2: services.billing.entities.v1alpha1.RateDefinition.matching_rule:type_name -> services.billing.entities.v1alpha1.MatchingRule
	5,  // 3: services.billing.entities.v1alpha1.RateDefinition.matching_config:type_name -> services.billing.entities.v1alpha1.MatchingConfig
	2,  // 4: services.billing.entities.v1alpha1.RateDefinition.config:type_name -> services.billing.entities.v1alpha1.RateDefinitionConfig
	6,  // 5: services.billing.entities.v1alpha1.RateDefinition.create_time:type_name -> google.protobuf.Timestamp
	6,  // 6: services.billing.entities.v1alpha1.RateDefinition.update_time:type_name -> google.protobuf.Timestamp
	6,  // 7: services.billing.entities.v1alpha1.RateDefinition.delete_time:type_name -> google.protobuf.Timestamp
	7,  // 8: services.billing.entities.v1alpha1.RateDefinitionConfig.agent_seats_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	7,  // 9: services.billing.entities.v1alpha1.RateDefinitionConfig.agent_text_message_chat_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	7,  // 10: services.billing.entities.v1alpha1.RateDefinitionConfig.agent_text_message_email_message_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	8,  // 11: services.billing.entities.v1alpha1.RateDefinitionConfig.agent_text_message_email_size_config:type_name -> services.billing.entities.v1alpha1.BasicUnitConfig
	7,  // 12: services.billing.entities.v1alpha1.RateDefinitionConfig.agent_text_message_sms_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	7,  // 13: services.billing.entities.v1alpha1.RateDefinitionConfig.task_message_sent_email_message_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	8,  // 14: services.billing.entities.v1alpha1.RateDefinitionConfig.task_message_sent_email_size_config:type_name -> services.billing.entities.v1alpha1.BasicUnitConfig
	7,  // 15: services.billing.entities.v1alpha1.RateDefinitionConfig.task_message_sent_sms_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	7,  // 16: services.billing.entities.v1alpha1.RateDefinitionConfig.connected_inbox_poll_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	7,  // 17: services.billing.entities.v1alpha1.RateDefinitionConfig.manager_text_message_chat_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	7,  // 18: services.billing.entities.v1alpha1.RateDefinitionConfig.manager_text_message_email_message_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	8,  // 19: services.billing.entities.v1alpha1.RateDefinitionConfig.manager_text_message_email_size_config:type_name -> services.billing.entities.v1alpha1.BasicUnitConfig
	7,  // 20: services.billing.entities.v1alpha1.RateDefinitionConfig.manager_text_message_sms_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	7,  // 21: services.billing.entities.v1alpha1.RateDefinitionConfig.customer_text_message_chat_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	7,  // 22: services.billing.entities.v1alpha1.RateDefinitionConfig.customer_text_message_email_message_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	8,  // 23: services.billing.entities.v1alpha1.RateDefinitionConfig.customer_text_message_email_size_config:type_name -> services.billing.entities.v1alpha1.BasicUnitConfig
	7,  // 24: services.billing.entities.v1alpha1.RateDefinitionConfig.customer_text_message_sms_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	8,  // 25: services.billing.entities.v1alpha1.RateDefinitionConfig.agent_text_message_chat_size_config:type_name -> services.billing.entities.v1alpha1.BasicUnitConfig
	8,  // 26: services.billing.entities.v1alpha1.RateDefinitionConfig.manager_text_message_chat_size_config:type_name -> services.billing.entities.v1alpha1.BasicUnitConfig
	8,  // 27: services.billing.entities.v1alpha1.RateDefinitionConfig.customer_text_message_chat_size_config:type_name -> services.billing.entities.v1alpha1.BasicUnitConfig
	7,  // 28: services.billing.entities.v1alpha1.RateDefinitionConfig.connected_inbox_created_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	8,  // 29: services.billing.entities.v1alpha1.RateDefinitionConfig.agent_text_message_sms_size_config:type_name -> services.billing.entities.v1alpha1.BasicUnitConfig
	8,  // 30: services.billing.entities.v1alpha1.RateDefinitionConfig.manager_text_message_sms_size_config:type_name -> services.billing.entities.v1alpha1.BasicUnitConfig
	8,  // 31: services.billing.entities.v1alpha1.RateDefinitionConfig.customer_text_message_sms_size_config:type_name -> services.billing.entities.v1alpha1.BasicUnitConfig
	8,  // 32: services.billing.entities.v1alpha1.RateDefinitionConfig.task_message_sent_sms_size_config:type_name -> services.billing.entities.v1alpha1.BasicUnitConfig
	7,  // 33: services.billing.entities.v1alpha1.RateDefinitionConfig.agent_chat_message_units_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	7,  // 34: services.billing.entities.v1alpha1.RateDefinitionConfig.agent_email_message_units_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	7,  // 35: services.billing.entities.v1alpha1.RateDefinitionConfig.agent_sms_message_units_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	7,  // 36: services.billing.entities.v1alpha1.RateDefinitionConfig.manager_chat_message_units_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	7,  // 37: services.billing.entities.v1alpha1.RateDefinitionConfig.manager_email_message_units_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	7,  // 38: services.billing.entities.v1alpha1.RateDefinitionConfig.manager_sms_message_units_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	7,  // 39: services.billing.entities.v1alpha1.RateDefinitionConfig.customer_chat_message_units_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	7,  // 40: services.billing.entities.v1alpha1.RateDefinitionConfig.customer_email_message_units_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	7,  // 41: services.billing.entities.v1alpha1.RateDefinitionConfig.customer_sms_message_units_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	7,  // 42: services.billing.entities.v1alpha1.RateDefinitionConfig.system_chat_message_units_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	7,  // 43: services.billing.entities.v1alpha1.RateDefinitionConfig.system_email_message_units_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	7,  // 44: services.billing.entities.v1alpha1.RateDefinitionConfig.system_sms_message_units_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	7,  // 45: services.billing.entities.v1alpha1.RateDefinitionConfig.compliance_rnd_query_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	7,  // 46: services.billing.entities.v1alpha1.RateDefinitionConfig.compliance_rnd_query_cached_config:type_name -> services.billing.entities.v1alpha1.BasicConfig
	47, // [47:47] is the sub-list for method output_type
	47, // [47:47] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_services_billing_entities_v1alpha1_rates_proto_init() }
func file_services_billing_entities_v1alpha1_rates_proto_init() {
	if File_services_billing_entities_v1alpha1_rates_proto != nil {
		return
	}
	file_services_billing_entities_v1alpha1_matching_proto_init()
	file_services_billing_entities_v1alpha1_modules_proto_init()
	file_services_billing_entities_v1alpha1_rates_proto_msgTypes[1].OneofWrappers = []any{
		(*RateDefinitionConfig_AgentSeatsConfig)(nil),
		(*RateDefinitionConfig_AgentTextMessageChatConfig)(nil),
		(*RateDefinitionConfig_AgentTextMessageEmailMessageConfig)(nil),
		(*RateDefinitionConfig_AgentTextMessageEmailSizeConfig)(nil),
		(*RateDefinitionConfig_AgentTextMessageSmsConfig)(nil),
		(*RateDefinitionConfig_TaskMessageSentEmailMessageConfig)(nil),
		(*RateDefinitionConfig_TaskMessageSentEmailSizeConfig)(nil),
		(*RateDefinitionConfig_TaskMessageSentSmsConfig)(nil),
		(*RateDefinitionConfig_ConnectedInboxPollConfig)(nil),
		(*RateDefinitionConfig_ManagerTextMessageChatConfig)(nil),
		(*RateDefinitionConfig_ManagerTextMessageEmailMessageConfig)(nil),
		(*RateDefinitionConfig_ManagerTextMessageEmailSizeConfig)(nil),
		(*RateDefinitionConfig_ManagerTextMessageSmsConfig)(nil),
		(*RateDefinitionConfig_CustomerTextMessageChatConfig)(nil),
		(*RateDefinitionConfig_CustomerTextMessageEmailMessageConfig)(nil),
		(*RateDefinitionConfig_CustomerTextMessageEmailSizeConfig)(nil),
		(*RateDefinitionConfig_CustomerTextMessageSmsConfig)(nil),
		(*RateDefinitionConfig_AgentTextMessageChatSizeConfig)(nil),
		(*RateDefinitionConfig_ManagerTextMessageChatSizeConfig)(nil),
		(*RateDefinitionConfig_CustomerTextMessageChatSizeConfig)(nil),
		(*RateDefinitionConfig_ConnectedInboxCreatedConfig)(nil),
		(*RateDefinitionConfig_AgentTextMessageSmsSizeConfig)(nil),
		(*RateDefinitionConfig_ManagerTextMessageSmsSizeConfig)(nil),
		(*RateDefinitionConfig_CustomerTextMessageSmsSizeConfig)(nil),
		(*RateDefinitionConfig_TaskMessageSentSmsSizeConfig)(nil),
		(*RateDefinitionConfig_AgentChatMessageUnitsConfig)(nil),
		(*RateDefinitionConfig_AgentEmailMessageUnitsConfig)(nil),
		(*RateDefinitionConfig_AgentSmsMessageUnitsConfig)(nil),
		(*RateDefinitionConfig_ManagerChatMessageUnitsConfig)(nil),
		(*RateDefinitionConfig_ManagerEmailMessageUnitsConfig)(nil),
		(*RateDefinitionConfig_ManagerSmsMessageUnitsConfig)(nil),
		(*RateDefinitionConfig_CustomerChatMessageUnitsConfig)(nil),
		(*RateDefinitionConfig_CustomerEmailMessageUnitsConfig)(nil),
		(*RateDefinitionConfig_CustomerSmsMessageUnitsConfig)(nil),
		(*RateDefinitionConfig_SystemChatMessageUnitsConfig)(nil),
		(*RateDefinitionConfig_SystemEmailMessageUnitsConfig)(nil),
		(*RateDefinitionConfig_SystemSmsMessageUnitsConfig)(nil),
		(*RateDefinitionConfig_ComplianceRndQueryConfig)(nil),
		(*RateDefinitionConfig_ComplianceRndQueryCachedConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_billing_entities_v1alpha1_rates_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_services_billing_entities_v1alpha1_rates_proto_goTypes,
		DependencyIndexes: file_services_billing_entities_v1alpha1_rates_proto_depIdxs,
		EnumInfos:         file_services_billing_entities_v1alpha1_rates_proto_enumTypes,
		MessageInfos:      file_services_billing_entities_v1alpha1_rates_proto_msgTypes,
	}.Build()
	File_services_billing_entities_v1alpha1_rates_proto = out.File
	file_services_billing_entities_v1alpha1_rates_proto_rawDesc = nil
	file_services_billing_entities_v1alpha1_rates_proto_goTypes = nil
	file_services_billing_entities_v1alpha1_rates_proto_depIdxs = nil
}
