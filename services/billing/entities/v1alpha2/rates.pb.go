// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: services/billing/entities/v1alpha2/rates.proto

package entitiesv1alpha2

import (
	audit "github.com/tcncloud/api-go/api/commons/audit"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RateDefinitionConfigType defines the type of configuration for a rate definition.
type RateDefinitionConfigType int32

const (
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_UNSPECIFIED RateDefinitionConfigType = 0
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_NOOP        RateDefinitionConfigType = 1
	// omni config types (1000-1999)
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_SEATS                       RateDefinitionConfigType = 1000
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_CONNECTED_INBOX_POLL              RateDefinitionConfigType = 1500
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_CONNECTED_INBOX_CREATED           RateDefinitionConfigType = 1501
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_CHAT                RateDefinitionConfigType = 1600
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_CHAT_SIZE           RateDefinitionConfigType = 1601
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_CHAT_UNITS          RateDefinitionConfigType = 1602
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_CHAT_SIZE_TOTAL     RateDefinitionConfigType = 1603
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_EMAIL               RateDefinitionConfigType = 1610
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_EMAIL_SIZE          RateDefinitionConfigType = 1611
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_EMAIL_UNITS         RateDefinitionConfigType = 1612
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_EMAIL_SIZE_TOTAL    RateDefinitionConfigType = 1613
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_SMS                 RateDefinitionConfigType = 1620
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_SMS_SIZE            RateDefinitionConfigType = 1621
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_SMS_UNITS           RateDefinitionConfigType = 1622
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_SMS_SIZE_TOTAL      RateDefinitionConfigType = 1623
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_CHAT              RateDefinitionConfigType = 1700
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_CHAT_SIZE         RateDefinitionConfigType = 1701
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_CHAT_UNITS        RateDefinitionConfigType = 1702
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_CHAT_SIZE_TOTAL   RateDefinitionConfigType = 1703
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_EMAIL             RateDefinitionConfigType = 1710
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_EMAIL_SIZE        RateDefinitionConfigType = 1711
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_EMAIL_UNITS       RateDefinitionConfigType = 1712
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_EMAIL_SIZE_TOTAL  RateDefinitionConfigType = 1713
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_SMS               RateDefinitionConfigType = 1720
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_SMS_SIZE          RateDefinitionConfigType = 1721
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_SMS_UNITS         RateDefinitionConfigType = 1722
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_SMS_SIZE_TOTAL    RateDefinitionConfigType = 1723
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_CHAT               RateDefinitionConfigType = 1800
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_CHAT_SIZE          RateDefinitionConfigType = 1801
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_CHAT_UNITS         RateDefinitionConfigType = 1802
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_CHAT_SIZE_TOTAL    RateDefinitionConfigType = 1803
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_EMAIL              RateDefinitionConfigType = 1810
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_EMAIL_SIZE         RateDefinitionConfigType = 1811
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_EMAIL_UNITS        RateDefinitionConfigType = 1812
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_EMAIL_SIZE_TOTAL   RateDefinitionConfigType = 1813
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_SMS                RateDefinitionConfigType = 1820
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_SMS_SIZE           RateDefinitionConfigType = 1821
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_SMS_UNITS          RateDefinitionConfigType = 1822
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_SMS_SIZE_TOTAL     RateDefinitionConfigType = 1823
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_CHAT             RateDefinitionConfigType = 1900
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_CHAT_SIZE        RateDefinitionConfigType = 1901
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_CHAT_UNITS       RateDefinitionConfigType = 1902
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_CHAT_SIZE_TOTAL  RateDefinitionConfigType = 1903
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_EMAIL            RateDefinitionConfigType = 1910
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_EMAIL_SIZE       RateDefinitionConfigType = 1911
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_EMAIL_UNITS      RateDefinitionConfigType = 1912
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_EMAIL_SIZE_TOTAL RateDefinitionConfigType = 1913
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_SMS              RateDefinitionConfigType = 1920
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_SMS_SIZE         RateDefinitionConfigType = 1921
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_SMS_UNITS        RateDefinitionConfigType = 1922
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_SMS_SIZE_TOTAL   RateDefinitionConfigType = 1923
	// compliance config types (2000-2999)
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_COMPLIANCE_RND_QUERY        RateDefinitionConfigType = 2000
	RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_COMPLIANCE_RND_QUERY_CACHED RateDefinitionConfigType = 2001
)

// Enum value maps for RateDefinitionConfigType.
var (
	RateDefinitionConfigType_name = map[int32]string{
		0:    "RATE_DEFINITION_CONFIG_TYPE_UNSPECIFIED",
		1:    "RATE_DEFINITION_CONFIG_TYPE_NOOP",
		1000: "RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_SEATS",
		1500: "RATE_DEFINITION_CONFIG_TYPE_OMNI_CONNECTED_INBOX_POLL",
		1501: "RATE_DEFINITION_CONFIG_TYPE_OMNI_CONNECTED_INBOX_CREATED",
		1600: "RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_CHAT",
		1601: "RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_CHAT_SIZE",
		1602: "RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_CHAT_UNITS",
		1603: "RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_CHAT_SIZE_TOTAL",
		1610: "RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_EMAIL",
		1611: "RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_EMAIL_SIZE",
		1612: "RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_EMAIL_UNITS",
		1613: "RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_EMAIL_SIZE_TOTAL",
		1620: "RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_SMS",
		1621: "RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_SMS_SIZE",
		1622: "RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_SMS_UNITS",
		1623: "RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_SMS_SIZE_TOTAL",
		1700: "RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_CHAT",
		1701: "RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_CHAT_SIZE",
		1702: "RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_CHAT_UNITS",
		1703: "RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_CHAT_SIZE_TOTAL",
		1710: "RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_EMAIL",
		1711: "RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_EMAIL_SIZE",
		1712: "RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_EMAIL_UNITS",
		1713: "RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_EMAIL_SIZE_TOTAL",
		1720: "RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_SMS",
		1721: "RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_SMS_SIZE",
		1722: "RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_SMS_UNITS",
		1723: "RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_SMS_SIZE_TOTAL",
		1800: "RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_CHAT",
		1801: "RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_CHAT_SIZE",
		1802: "RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_CHAT_UNITS",
		1803: "RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_CHAT_SIZE_TOTAL",
		1810: "RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_EMAIL",
		1811: "RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_EMAIL_SIZE",
		1812: "RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_EMAIL_UNITS",
		1813: "RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_EMAIL_SIZE_TOTAL",
		1820: "RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_SMS",
		1821: "RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_SMS_SIZE",
		1822: "RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_SMS_UNITS",
		1823: "RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_SMS_SIZE_TOTAL",
		1900: "RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_CHAT",
		1901: "RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_CHAT_SIZE",
		1902: "RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_CHAT_UNITS",
		1903: "RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_CHAT_SIZE_TOTAL",
		1910: "RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_EMAIL",
		1911: "RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_EMAIL_SIZE",
		1912: "RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_EMAIL_UNITS",
		1913: "RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_EMAIL_SIZE_TOTAL",
		1920: "RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_SMS",
		1921: "RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_SMS_SIZE",
		1922: "RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_SMS_UNITS",
		1923: "RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_SMS_SIZE_TOTAL",
		2000: "RATE_DEFINITION_CONFIG_TYPE_COMPLIANCE_RND_QUERY",
		2001: "RATE_DEFINITION_CONFIG_TYPE_COMPLIANCE_RND_QUERY_CACHED",
	}
	RateDefinitionConfigType_value = map[string]int32{
		"RATE_DEFINITION_CONFIG_TYPE_UNSPECIFIED":                            0,
		"RATE_DEFINITION_CONFIG_TYPE_NOOP":                                   1,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_SEATS":                       1000,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_CONNECTED_INBOX_POLL":              1500,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_CONNECTED_INBOX_CREATED":           1501,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_CHAT":                1600,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_CHAT_SIZE":           1601,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_CHAT_UNITS":          1602,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_CHAT_SIZE_TOTAL":     1603,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_EMAIL":               1610,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_EMAIL_SIZE":          1611,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_EMAIL_UNITS":         1612,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_EMAIL_SIZE_TOTAL":    1613,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_SMS":                 1620,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_SMS_SIZE":            1621,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_SMS_UNITS":           1622,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_AGENT_MESSAGE_SMS_SIZE_TOTAL":      1623,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_CHAT":              1700,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_CHAT_SIZE":         1701,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_CHAT_UNITS":        1702,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_CHAT_SIZE_TOTAL":   1703,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_EMAIL":             1710,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_EMAIL_SIZE":        1711,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_EMAIL_UNITS":       1712,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_EMAIL_SIZE_TOTAL":  1713,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_SMS":               1720,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_SMS_SIZE":          1721,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_SMS_UNITS":         1722,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_MANAGER_MESSAGE_SMS_SIZE_TOTAL":    1723,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_CHAT":               1800,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_CHAT_SIZE":          1801,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_CHAT_UNITS":         1802,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_CHAT_SIZE_TOTAL":    1803,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_EMAIL":              1810,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_EMAIL_SIZE":         1811,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_EMAIL_UNITS":        1812,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_EMAIL_SIZE_TOTAL":   1813,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_SMS":                1820,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_SMS_SIZE":           1821,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_SMS_UNITS":          1822,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_SYSTEM_MESSAGE_SMS_SIZE_TOTAL":     1823,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_CHAT":             1900,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_CHAT_SIZE":        1901,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_CHAT_UNITS":       1902,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_CHAT_SIZE_TOTAL":  1903,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_EMAIL":            1910,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_EMAIL_SIZE":       1911,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_EMAIL_UNITS":      1912,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_EMAIL_SIZE_TOTAL": 1913,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_SMS":              1920,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_SMS_SIZE":         1921,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_SMS_UNITS":        1922,
		"RATE_DEFINITION_CONFIG_TYPE_OMNI_CUSTOMER_MESSAGE_SMS_SIZE_TOTAL":   1923,
		"RATE_DEFINITION_CONFIG_TYPE_COMPLIANCE_RND_QUERY":                   2000,
		"RATE_DEFINITION_CONFIG_TYPE_COMPLIANCE_RND_QUERY_CACHED":            2001,
	}
)

func (x RateDefinitionConfigType) Enum() *RateDefinitionConfigType {
	p := new(RateDefinitionConfigType)
	*p = x
	return p
}

func (x RateDefinitionConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RateDefinitionConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_services_billing_entities_v1alpha2_rates_proto_enumTypes[0].Descriptor()
}

func (RateDefinitionConfigType) Type() protoreflect.EnumType {
	return &file_services_billing_entities_v1alpha2_rates_proto_enumTypes[0]
}

func (x RateDefinitionConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RateDefinitionConfigType.Descriptor instead.
func (RateDefinitionConfigType) EnumDescriptor() ([]byte, []int) {
	return file_services_billing_entities_v1alpha2_rates_proto_rawDescGZIP(), []int{0}
}

// RateSnapshot represents a snapshot of rates for a given time period.
type RateSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Rates     []*RateDefinition      `protobuf:"bytes,3,rep,name=rates,proto3" json:"rates,omitempty"`
}

func (x *RateSnapshot) Reset() {
	*x = RateSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_billing_entities_v1alpha2_rates_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateSnapshot) ProtoMessage() {}

func (x *RateSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_services_billing_entities_v1alpha2_rates_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateSnapshot.ProtoReflect.Descriptor instead.
func (*RateSnapshot) Descriptor() ([]byte, []int) {
	return file_services_billing_entities_v1alpha2_rates_proto_rawDescGZIP(), []int{0}
}

func (x *RateSnapshot) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *RateSnapshot) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *RateSnapshot) GetRates() []*RateDefinition {
	if x != nil {
		return x.Rates
	}
	return nil
}

type RateDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateDefinitionId string                   `protobuf:"bytes,1,opt,name=rate_definition_id,json=rateDefinitionId,proto3" json:"rate_definition_id,omitempty"`
	EventType        audit.EventType          `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=api.commons.audit.EventType" json:"event_type,omitempty"`
	ConfigType       RateDefinitionConfigType `protobuf:"varint,3,opt,name=config_type,json=configType,proto3,enum=services.billing.entities.v1alpha2.RateDefinitionConfigType" json:"config_type,omitempty"`
	MatchingRule     MatchingRule             `protobuf:"varint,4,opt,name=matching_rule,json=matchingRule,proto3,enum=services.billing.entities.v1alpha2.MatchingRule" json:"matching_rule,omitempty"`
	MatchingConfig   *MatchingConfig          `protobuf:"bytes,5,opt,name=matching_config,json=matchingConfig,proto3" json:"matching_config,omitempty"`
	// a hash of the matching rule and config
	MatchingSha string                 `protobuf:"bytes,6,opt,name=matching_sha,json=matchingSha,proto3" json:"matching_sha,omitempty"`
	CreateTime  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	DeleteTime  *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// the time this rate definition becomes effective (or now if not set)
	EffectiveTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"`
	// the configuration for this definition
	Config *RateDefinitionConfig `protobuf:"bytes,11,opt,name=config,proto3" json:"config,omitempty"`
	// a group identifier for this rate definition; optional
	GroupId string `protobuf:"bytes,12,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// a hash of the config
	ConfigSha string `protobuf:"bytes,13,opt,name=config_sha,json=configSha,proto3" json:"config_sha,omitempty"`
	// the thread id for this rate definition; generated by the system
	// on creation of a default rate definition, otherwise needs to be
	// set on create requests.
	ThreadId string `protobuf:"bytes,14,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
}

func (x *RateDefinition) Reset() {
	*x = RateDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_billing_entities_v1alpha2_rates_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateDefinition) ProtoMessage() {}

func (x *RateDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_services_billing_entities_v1alpha2_rates_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateDefinition.ProtoReflect.Descriptor instead.
func (*RateDefinition) Descriptor() ([]byte, []int) {
	return file_services_billing_entities_v1alpha2_rates_proto_rawDescGZIP(), []int{1}
}

func (x *RateDefinition) GetRateDefinitionId() string {
	if x != nil {
		return x.RateDefinitionId
	}
	return ""
}

func (x *RateDefinition) GetEventType() audit.EventType {
	if x != nil {
		return x.EventType
	}
	return audit.EventType(0)
}

func (x *RateDefinition) GetConfigType() RateDefinitionConfigType {
	if x != nil {
		return x.ConfigType
	}
	return RateDefinitionConfigType_RATE_DEFINITION_CONFIG_TYPE_UNSPECIFIED
}

func (x *RateDefinition) GetMatchingRule() MatchingRule {
	if x != nil {
		return x.MatchingRule
	}
	return MatchingRule_MATCHING_RULE_UNSPECIFIED
}

func (x *RateDefinition) GetMatchingConfig() *MatchingConfig {
	if x != nil {
		return x.MatchingConfig
	}
	return nil
}

func (x *RateDefinition) GetMatchingSha() string {
	if x != nil {
		return x.MatchingSha
	}
	return ""
}

func (x *RateDefinition) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *RateDefinition) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *RateDefinition) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *RateDefinition) GetEffectiveTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectiveTime
	}
	return nil
}

func (x *RateDefinition) GetConfig() *RateDefinitionConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RateDefinition) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *RateDefinition) GetConfigSha() string {
	if x != nil {
		return x.ConfigSha
	}
	return ""
}

func (x *RateDefinition) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

type RateDefinitionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//
	//	*RateDefinitionConfig_AgentSeats
	//	*RateDefinitionConfig_ConnectedInboxPoll
	//	*RateDefinitionConfig_ConnectedInboxCreated
	//	*RateDefinitionConfig_AgentMessageChat
	//	*RateDefinitionConfig_AgentMessageChatSize
	//	*RateDefinitionConfig_AgentMessageChatUnits
	//	*RateDefinitionConfig_AgentMessageChatSizeTotal
	//	*RateDefinitionConfig_AgentMessageEmail
	//	*RateDefinitionConfig_AgentMessageEmailSize
	//	*RateDefinitionConfig_AgentMessageEmailUnits
	//	*RateDefinitionConfig_AgentMessageEmailSizeTotal
	//	*RateDefinitionConfig_AgentMessageSms
	//	*RateDefinitionConfig_AgentMessageSmsSize
	//	*RateDefinitionConfig_AgentMessageSmsUnits
	//	*RateDefinitionConfig_AgentMessageSmsSizeTotal
	//	*RateDefinitionConfig_ManagerMessageChat
	//	*RateDefinitionConfig_ManagerMessageChatSize
	//	*RateDefinitionConfig_ManagerMessageChatUnits
	//	*RateDefinitionConfig_ManagerMessageChatSizeTotal
	//	*RateDefinitionConfig_ManagerMessageEmail
	//	*RateDefinitionConfig_ManagerMessageEmailSize
	//	*RateDefinitionConfig_ManagerMessageEmailUnits
	//	*RateDefinitionConfig_ManagerMessageEmailSizeTotal
	//	*RateDefinitionConfig_ManagerMessageSms
	//	*RateDefinitionConfig_ManagerMessageSmsSize
	//	*RateDefinitionConfig_ManagerMessageSmsUnits
	//	*RateDefinitionConfig_ManagerMessageSmsSizeTotal
	//	*RateDefinitionConfig_SystemMessageChat
	//	*RateDefinitionConfig_SystemMessageChatSize
	//	*RateDefinitionConfig_SystemMessageChatUnits
	//	*RateDefinitionConfig_SystemMessageChatSizeTotal
	//	*RateDefinitionConfig_SystemMessageEmail
	//	*RateDefinitionConfig_SystemMessageEmailSize
	//	*RateDefinitionConfig_SystemMessageEmailUnits
	//	*RateDefinitionConfig_SystemMessageEmailSizeTotal
	//	*RateDefinitionConfig_SystemMessageSms
	//	*RateDefinitionConfig_SystemMessageSmsSize
	//	*RateDefinitionConfig_SystemMessageSmsUnits
	//	*RateDefinitionConfig_SystemMessageSmsSizeTotal
	//	*RateDefinitionConfig_CustomerMessageChat
	//	*RateDefinitionConfig_CustomerMessageChatSize
	//	*RateDefinitionConfig_CustomerMessageChatUnits
	//	*RateDefinitionConfig_CustomerMessageChatSizeTotal
	//	*RateDefinitionConfig_CustomerMessageEmail
	//	*RateDefinitionConfig_CustomerMessageEmailSize
	//	*RateDefinitionConfig_CustomerMessageEmailUnits
	//	*RateDefinitionConfig_CustomerMessageEmailSizeTotal
	//	*RateDefinitionConfig_CustomerMessageSms
	//	*RateDefinitionConfig_CustomerMessageSmsSize
	//	*RateDefinitionConfig_CustomerMessageSmsUnits
	//	*RateDefinitionConfig_CustomerMessageSmsSizeTotal
	//	*RateDefinitionConfig_ComplianceRndQuery
	//	*RateDefinitionConfig_ComplianceRndQueryCached
	Config isRateDefinitionConfig_Config `protobuf_oneof:"config"`
}

func (x *RateDefinitionConfig) Reset() {
	*x = RateDefinitionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_billing_entities_v1alpha2_rates_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateDefinitionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateDefinitionConfig) ProtoMessage() {}

func (x *RateDefinitionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_services_billing_entities_v1alpha2_rates_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateDefinitionConfig.ProtoReflect.Descriptor instead.
func (*RateDefinitionConfig) Descriptor() ([]byte, []int) {
	return file_services_billing_entities_v1alpha2_rates_proto_rawDescGZIP(), []int{2}
}

func (m *RateDefinitionConfig) GetConfig() isRateDefinitionConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *RateDefinitionConfig) GetAgentSeats() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_AgentSeats); ok {
		return x.AgentSeats
	}
	return nil
}

func (x *RateDefinitionConfig) GetConnectedInboxPoll() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_ConnectedInboxPoll); ok {
		return x.ConnectedInboxPoll
	}
	return nil
}

func (x *RateDefinitionConfig) GetConnectedInboxCreated() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_ConnectedInboxCreated); ok {
		return x.ConnectedInboxCreated
	}
	return nil
}

func (x *RateDefinitionConfig) GetAgentMessageChat() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_AgentMessageChat); ok {
		return x.AgentMessageChat
	}
	return nil
}

func (x *RateDefinitionConfig) GetAgentMessageChatSize() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_AgentMessageChatSize); ok {
		return x.AgentMessageChatSize
	}
	return nil
}

func (x *RateDefinitionConfig) GetAgentMessageChatUnits() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_AgentMessageChatUnits); ok {
		return x.AgentMessageChatUnits
	}
	return nil
}

func (x *RateDefinitionConfig) GetAgentMessageChatSizeTotal() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_AgentMessageChatSizeTotal); ok {
		return x.AgentMessageChatSizeTotal
	}
	return nil
}

func (x *RateDefinitionConfig) GetAgentMessageEmail() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_AgentMessageEmail); ok {
		return x.AgentMessageEmail
	}
	return nil
}

func (x *RateDefinitionConfig) GetAgentMessageEmailSize() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_AgentMessageEmailSize); ok {
		return x.AgentMessageEmailSize
	}
	return nil
}

func (x *RateDefinitionConfig) GetAgentMessageEmailUnits() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_AgentMessageEmailUnits); ok {
		return x.AgentMessageEmailUnits
	}
	return nil
}

func (x *RateDefinitionConfig) GetAgentMessageEmailSizeTotal() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_AgentMessageEmailSizeTotal); ok {
		return x.AgentMessageEmailSizeTotal
	}
	return nil
}

func (x *RateDefinitionConfig) GetAgentMessageSms() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_AgentMessageSms); ok {
		return x.AgentMessageSms
	}
	return nil
}

func (x *RateDefinitionConfig) GetAgentMessageSmsSize() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_AgentMessageSmsSize); ok {
		return x.AgentMessageSmsSize
	}
	return nil
}

func (x *RateDefinitionConfig) GetAgentMessageSmsUnits() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_AgentMessageSmsUnits); ok {
		return x.AgentMessageSmsUnits
	}
	return nil
}

func (x *RateDefinitionConfig) GetAgentMessageSmsSizeTotal() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_AgentMessageSmsSizeTotal); ok {
		return x.AgentMessageSmsSizeTotal
	}
	return nil
}

func (x *RateDefinitionConfig) GetManagerMessageChat() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_ManagerMessageChat); ok {
		return x.ManagerMessageChat
	}
	return nil
}

func (x *RateDefinitionConfig) GetManagerMessageChatSize() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_ManagerMessageChatSize); ok {
		return x.ManagerMessageChatSize
	}
	return nil
}

func (x *RateDefinitionConfig) GetManagerMessageChatUnits() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_ManagerMessageChatUnits); ok {
		return x.ManagerMessageChatUnits
	}
	return nil
}

func (x *RateDefinitionConfig) GetManagerMessageChatSizeTotal() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_ManagerMessageChatSizeTotal); ok {
		return x.ManagerMessageChatSizeTotal
	}
	return nil
}

func (x *RateDefinitionConfig) GetManagerMessageEmail() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_ManagerMessageEmail); ok {
		return x.ManagerMessageEmail
	}
	return nil
}

func (x *RateDefinitionConfig) GetManagerMessageEmailSize() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_ManagerMessageEmailSize); ok {
		return x.ManagerMessageEmailSize
	}
	return nil
}

func (x *RateDefinitionConfig) GetManagerMessageEmailUnits() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_ManagerMessageEmailUnits); ok {
		return x.ManagerMessageEmailUnits
	}
	return nil
}

func (x *RateDefinitionConfig) GetManagerMessageEmailSizeTotal() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_ManagerMessageEmailSizeTotal); ok {
		return x.ManagerMessageEmailSizeTotal
	}
	return nil
}

func (x *RateDefinitionConfig) GetManagerMessageSms() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_ManagerMessageSms); ok {
		return x.ManagerMessageSms
	}
	return nil
}

func (x *RateDefinitionConfig) GetManagerMessageSmsSize() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_ManagerMessageSmsSize); ok {
		return x.ManagerMessageSmsSize
	}
	return nil
}

func (x *RateDefinitionConfig) GetManagerMessageSmsUnits() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_ManagerMessageSmsUnits); ok {
		return x.ManagerMessageSmsUnits
	}
	return nil
}

func (x *RateDefinitionConfig) GetManagerMessageSmsSizeTotal() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_ManagerMessageSmsSizeTotal); ok {
		return x.ManagerMessageSmsSizeTotal
	}
	return nil
}

func (x *RateDefinitionConfig) GetSystemMessageChat() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_SystemMessageChat); ok {
		return x.SystemMessageChat
	}
	return nil
}

func (x *RateDefinitionConfig) GetSystemMessageChatSize() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_SystemMessageChatSize); ok {
		return x.SystemMessageChatSize
	}
	return nil
}

func (x *RateDefinitionConfig) GetSystemMessageChatUnits() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_SystemMessageChatUnits); ok {
		return x.SystemMessageChatUnits
	}
	return nil
}

func (x *RateDefinitionConfig) GetSystemMessageChatSizeTotal() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_SystemMessageChatSizeTotal); ok {
		return x.SystemMessageChatSizeTotal
	}
	return nil
}

func (x *RateDefinitionConfig) GetSystemMessageEmail() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_SystemMessageEmail); ok {
		return x.SystemMessageEmail
	}
	return nil
}

func (x *RateDefinitionConfig) GetSystemMessageEmailSize() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_SystemMessageEmailSize); ok {
		return x.SystemMessageEmailSize
	}
	return nil
}

func (x *RateDefinitionConfig) GetSystemMessageEmailUnits() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_SystemMessageEmailUnits); ok {
		return x.SystemMessageEmailUnits
	}
	return nil
}

func (x *RateDefinitionConfig) GetSystemMessageEmailSizeTotal() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_SystemMessageEmailSizeTotal); ok {
		return x.SystemMessageEmailSizeTotal
	}
	return nil
}

func (x *RateDefinitionConfig) GetSystemMessageSms() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_SystemMessageSms); ok {
		return x.SystemMessageSms
	}
	return nil
}

func (x *RateDefinitionConfig) GetSystemMessageSmsSize() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_SystemMessageSmsSize); ok {
		return x.SystemMessageSmsSize
	}
	return nil
}

func (x *RateDefinitionConfig) GetSystemMessageSmsUnits() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_SystemMessageSmsUnits); ok {
		return x.SystemMessageSmsUnits
	}
	return nil
}

func (x *RateDefinitionConfig) GetSystemMessageSmsSizeTotal() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_SystemMessageSmsSizeTotal); ok {
		return x.SystemMessageSmsSizeTotal
	}
	return nil
}

func (x *RateDefinitionConfig) GetCustomerMessageChat() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_CustomerMessageChat); ok {
		return x.CustomerMessageChat
	}
	return nil
}

func (x *RateDefinitionConfig) GetCustomerMessageChatSize() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_CustomerMessageChatSize); ok {
		return x.CustomerMessageChatSize
	}
	return nil
}

func (x *RateDefinitionConfig) GetCustomerMessageChatUnits() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_CustomerMessageChatUnits); ok {
		return x.CustomerMessageChatUnits
	}
	return nil
}

func (x *RateDefinitionConfig) GetCustomerMessageChatSizeTotal() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_CustomerMessageChatSizeTotal); ok {
		return x.CustomerMessageChatSizeTotal
	}
	return nil
}

func (x *RateDefinitionConfig) GetCustomerMessageEmail() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_CustomerMessageEmail); ok {
		return x.CustomerMessageEmail
	}
	return nil
}

func (x *RateDefinitionConfig) GetCustomerMessageEmailSize() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_CustomerMessageEmailSize); ok {
		return x.CustomerMessageEmailSize
	}
	return nil
}

func (x *RateDefinitionConfig) GetCustomerMessageEmailUnits() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_CustomerMessageEmailUnits); ok {
		return x.CustomerMessageEmailUnits
	}
	return nil
}

func (x *RateDefinitionConfig) GetCustomerMessageEmailSizeTotal() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_CustomerMessageEmailSizeTotal); ok {
		return x.CustomerMessageEmailSizeTotal
	}
	return nil
}

func (x *RateDefinitionConfig) GetCustomerMessageSms() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_CustomerMessageSms); ok {
		return x.CustomerMessageSms
	}
	return nil
}

func (x *RateDefinitionConfig) GetCustomerMessageSmsSize() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_CustomerMessageSmsSize); ok {
		return x.CustomerMessageSmsSize
	}
	return nil
}

func (x *RateDefinitionConfig) GetCustomerMessageSmsUnits() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_CustomerMessageSmsUnits); ok {
		return x.CustomerMessageSmsUnits
	}
	return nil
}

func (x *RateDefinitionConfig) GetCustomerMessageSmsSizeTotal() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_CustomerMessageSmsSizeTotal); ok {
		return x.CustomerMessageSmsSizeTotal
	}
	return nil
}

func (x *RateDefinitionConfig) GetComplianceRndQuery() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_ComplianceRndQuery); ok {
		return x.ComplianceRndQuery
	}
	return nil
}

func (x *RateDefinitionConfig) GetComplianceRndQueryCached() *BasicConfig {
	if x, ok := x.GetConfig().(*RateDefinitionConfig_ComplianceRndQueryCached); ok {
		return x.ComplianceRndQueryCached
	}
	return nil
}

type isRateDefinitionConfig_Config interface {
	isRateDefinitionConfig_Config()
}

type RateDefinitionConfig_AgentSeats struct {
	// omni (1000 - 1999)
	AgentSeats *BasicConfig `protobuf:"bytes,1000,opt,name=agent_seats,json=agentSeats,proto3,oneof"`
}

type RateDefinitionConfig_ConnectedInboxPoll struct {
	ConnectedInboxPoll *BasicConfig `protobuf:"bytes,1500,opt,name=connected_inbox_poll,json=connectedInboxPoll,proto3,oneof"`
}

type RateDefinitionConfig_ConnectedInboxCreated struct {
	ConnectedInboxCreated *BasicConfig `protobuf:"bytes,1501,opt,name=connected_inbox_created,json=connectedInboxCreated,proto3,oneof"`
}

type RateDefinitionConfig_AgentMessageChat struct {
	AgentMessageChat *BasicConfig `protobuf:"bytes,1600,opt,name=agent_message_chat,json=agentMessageChat,proto3,oneof"`
}

type RateDefinitionConfig_AgentMessageChatSize struct {
	AgentMessageChatSize *BasicUnitConfig `protobuf:"bytes,1601,opt,name=agent_message_chat_size,json=agentMessageChatSize,proto3,oneof"`
}

type RateDefinitionConfig_AgentMessageChatUnits struct {
	AgentMessageChatUnits *BasicConfig `protobuf:"bytes,1602,opt,name=agent_message_chat_units,json=agentMessageChatUnits,proto3,oneof"`
}

type RateDefinitionConfig_AgentMessageChatSizeTotal struct {
	AgentMessageChatSizeTotal *BasicUnitConfig `protobuf:"bytes,1603,opt,name=agent_message_chat_size_total,json=agentMessageChatSizeTotal,proto3,oneof"`
}

type RateDefinitionConfig_AgentMessageEmail struct {
	AgentMessageEmail *BasicConfig `protobuf:"bytes,1610,opt,name=agent_message_email,json=agentMessageEmail,proto3,oneof"`
}

type RateDefinitionConfig_AgentMessageEmailSize struct {
	AgentMessageEmailSize *BasicUnitConfig `protobuf:"bytes,1611,opt,name=agent_message_email_size,json=agentMessageEmailSize,proto3,oneof"`
}

type RateDefinitionConfig_AgentMessageEmailUnits struct {
	AgentMessageEmailUnits *BasicConfig `protobuf:"bytes,1612,opt,name=agent_message_email_units,json=agentMessageEmailUnits,proto3,oneof"`
}

type RateDefinitionConfig_AgentMessageEmailSizeTotal struct {
	AgentMessageEmailSizeTotal *BasicUnitConfig `protobuf:"bytes,1613,opt,name=agent_message_email_size_total,json=agentMessageEmailSizeTotal,proto3,oneof"`
}

type RateDefinitionConfig_AgentMessageSms struct {
	AgentMessageSms *BasicConfig `protobuf:"bytes,1620,opt,name=agent_message_sms,json=agentMessageSms,proto3,oneof"`
}

type RateDefinitionConfig_AgentMessageSmsSize struct {
	AgentMessageSmsSize *BasicUnitConfig `protobuf:"bytes,1621,opt,name=agent_message_sms_size,json=agentMessageSmsSize,proto3,oneof"`
}

type RateDefinitionConfig_AgentMessageSmsUnits struct {
	AgentMessageSmsUnits *BasicConfig `protobuf:"bytes,1622,opt,name=agent_message_sms_units,json=agentMessageSmsUnits,proto3,oneof"`
}

type RateDefinitionConfig_AgentMessageSmsSizeTotal struct {
	AgentMessageSmsSizeTotal *BasicUnitConfig `protobuf:"bytes,1623,opt,name=agent_message_sms_size_total,json=agentMessageSmsSizeTotal,proto3,oneof"`
}

type RateDefinitionConfig_ManagerMessageChat struct {
	ManagerMessageChat *BasicConfig `protobuf:"bytes,1700,opt,name=manager_message_chat,json=managerMessageChat,proto3,oneof"`
}

type RateDefinitionConfig_ManagerMessageChatSize struct {
	ManagerMessageChatSize *BasicUnitConfig `protobuf:"bytes,1701,opt,name=manager_message_chat_size,json=managerMessageChatSize,proto3,oneof"`
}

type RateDefinitionConfig_ManagerMessageChatUnits struct {
	ManagerMessageChatUnits *BasicConfig `protobuf:"bytes,1702,opt,name=manager_message_chat_units,json=managerMessageChatUnits,proto3,oneof"`
}

type RateDefinitionConfig_ManagerMessageChatSizeTotal struct {
	ManagerMessageChatSizeTotal *BasicUnitConfig `protobuf:"bytes,1703,opt,name=manager_message_chat_size_total,json=managerMessageChatSizeTotal,proto3,oneof"`
}

type RateDefinitionConfig_ManagerMessageEmail struct {
	ManagerMessageEmail *BasicConfig `protobuf:"bytes,1710,opt,name=manager_message_email,json=managerMessageEmail,proto3,oneof"`
}

type RateDefinitionConfig_ManagerMessageEmailSize struct {
	ManagerMessageEmailSize *BasicUnitConfig `protobuf:"bytes,1711,opt,name=manager_message_email_size,json=managerMessageEmailSize,proto3,oneof"`
}

type RateDefinitionConfig_ManagerMessageEmailUnits struct {
	ManagerMessageEmailUnits *BasicConfig `protobuf:"bytes,1712,opt,name=manager_message_email_units,json=managerMessageEmailUnits,proto3,oneof"`
}

type RateDefinitionConfig_ManagerMessageEmailSizeTotal struct {
	ManagerMessageEmailSizeTotal *BasicUnitConfig `protobuf:"bytes,1713,opt,name=manager_message_email_size_total,json=managerMessageEmailSizeTotal,proto3,oneof"`
}

type RateDefinitionConfig_ManagerMessageSms struct {
	ManagerMessageSms *BasicConfig `protobuf:"bytes,1720,opt,name=manager_message_sms,json=managerMessageSms,proto3,oneof"`
}

type RateDefinitionConfig_ManagerMessageSmsSize struct {
	ManagerMessageSmsSize *BasicUnitConfig `protobuf:"bytes,1721,opt,name=manager_message_sms_size,json=managerMessageSmsSize,proto3,oneof"`
}

type RateDefinitionConfig_ManagerMessageSmsUnits struct {
	ManagerMessageSmsUnits *BasicConfig `protobuf:"bytes,1722,opt,name=manager_message_sms_units,json=managerMessageSmsUnits,proto3,oneof"`
}

type RateDefinitionConfig_ManagerMessageSmsSizeTotal struct {
	ManagerMessageSmsSizeTotal *BasicUnitConfig `protobuf:"bytes,1723,opt,name=manager_message_sms_size_total,json=managerMessageSmsSizeTotal,proto3,oneof"`
}

type RateDefinitionConfig_SystemMessageChat struct {
	SystemMessageChat *BasicConfig `protobuf:"bytes,1800,opt,name=system_message_chat,json=systemMessageChat,proto3,oneof"`
}

type RateDefinitionConfig_SystemMessageChatSize struct {
	SystemMessageChatSize *BasicUnitConfig `protobuf:"bytes,1801,opt,name=system_message_chat_size,json=systemMessageChatSize,proto3,oneof"`
}

type RateDefinitionConfig_SystemMessageChatUnits struct {
	SystemMessageChatUnits *BasicConfig `protobuf:"bytes,1802,opt,name=system_message_chat_units,json=systemMessageChatUnits,proto3,oneof"`
}

type RateDefinitionConfig_SystemMessageChatSizeTotal struct {
	SystemMessageChatSizeTotal *BasicUnitConfig `protobuf:"bytes,1803,opt,name=system_message_chat_size_total,json=systemMessageChatSizeTotal,proto3,oneof"`
}

type RateDefinitionConfig_SystemMessageEmail struct {
	SystemMessageEmail *BasicConfig `protobuf:"bytes,1810,opt,name=system_message_email,json=systemMessageEmail,proto3,oneof"`
}

type RateDefinitionConfig_SystemMessageEmailSize struct {
	SystemMessageEmailSize *BasicUnitConfig `protobuf:"bytes,1811,opt,name=system_message_email_size,json=systemMessageEmailSize,proto3,oneof"`
}

type RateDefinitionConfig_SystemMessageEmailUnits struct {
	SystemMessageEmailUnits *BasicConfig `protobuf:"bytes,1812,opt,name=system_message_email_units,json=systemMessageEmailUnits,proto3,oneof"`
}

type RateDefinitionConfig_SystemMessageEmailSizeTotal struct {
	SystemMessageEmailSizeTotal *BasicUnitConfig `protobuf:"bytes,1813,opt,name=system_message_email_size_total,json=systemMessageEmailSizeTotal,proto3,oneof"`
}

type RateDefinitionConfig_SystemMessageSms struct {
	SystemMessageSms *BasicConfig `protobuf:"bytes,1820,opt,name=system_message_sms,json=systemMessageSms,proto3,oneof"`
}

type RateDefinitionConfig_SystemMessageSmsSize struct {
	SystemMessageSmsSize *BasicUnitConfig `protobuf:"bytes,1821,opt,name=system_message_sms_size,json=systemMessageSmsSize,proto3,oneof"`
}

type RateDefinitionConfig_SystemMessageSmsUnits struct {
	SystemMessageSmsUnits *BasicConfig `protobuf:"bytes,1822,opt,name=system_message_sms_units,json=systemMessageSmsUnits,proto3,oneof"`
}

type RateDefinitionConfig_SystemMessageSmsSizeTotal struct {
	SystemMessageSmsSizeTotal *BasicUnitConfig `protobuf:"bytes,1823,opt,name=system_message_sms_size_total,json=systemMessageSmsSizeTotal,proto3,oneof"`
}

type RateDefinitionConfig_CustomerMessageChat struct {
	CustomerMessageChat *BasicConfig `protobuf:"bytes,1900,opt,name=customer_message_chat,json=customerMessageChat,proto3,oneof"`
}

type RateDefinitionConfig_CustomerMessageChatSize struct {
	CustomerMessageChatSize *BasicUnitConfig `protobuf:"bytes,1901,opt,name=customer_message_chat_size,json=customerMessageChatSize,proto3,oneof"`
}

type RateDefinitionConfig_CustomerMessageChatUnits struct {
	CustomerMessageChatUnits *BasicConfig `protobuf:"bytes,1902,opt,name=customer_message_chat_units,json=customerMessageChatUnits,proto3,oneof"`
}

type RateDefinitionConfig_CustomerMessageChatSizeTotal struct {
	CustomerMessageChatSizeTotal *BasicUnitConfig `protobuf:"bytes,1903,opt,name=customer_message_chat_size_total,json=customerMessageChatSizeTotal,proto3,oneof"`
}

type RateDefinitionConfig_CustomerMessageEmail struct {
	CustomerMessageEmail *BasicConfig `protobuf:"bytes,1910,opt,name=customer_message_email,json=customerMessageEmail,proto3,oneof"`
}

type RateDefinitionConfig_CustomerMessageEmailSize struct {
	CustomerMessageEmailSize *BasicUnitConfig `protobuf:"bytes,1911,opt,name=customer_message_email_size,json=customerMessageEmailSize,proto3,oneof"`
}

type RateDefinitionConfig_CustomerMessageEmailUnits struct {
	CustomerMessageEmailUnits *BasicConfig `protobuf:"bytes,1912,opt,name=customer_message_email_units,json=customerMessageEmailUnits,proto3,oneof"`
}

type RateDefinitionConfig_CustomerMessageEmailSizeTotal struct {
	CustomerMessageEmailSizeTotal *BasicUnitConfig `protobuf:"bytes,1913,opt,name=customer_message_email_size_total,json=customerMessageEmailSizeTotal,proto3,oneof"`
}

type RateDefinitionConfig_CustomerMessageSms struct {
	CustomerMessageSms *BasicConfig `protobuf:"bytes,1920,opt,name=customer_message_sms,json=customerMessageSms,proto3,oneof"`
}

type RateDefinitionConfig_CustomerMessageSmsSize struct {
	CustomerMessageSmsSize *BasicUnitConfig `protobuf:"bytes,1921,opt,name=customer_message_sms_size,json=customerMessageSmsSize,proto3,oneof"`
}

type RateDefinitionConfig_CustomerMessageSmsUnits struct {
	CustomerMessageSmsUnits *BasicConfig `protobuf:"bytes,1922,opt,name=customer_message_sms_units,json=customerMessageSmsUnits,proto3,oneof"`
}

type RateDefinitionConfig_CustomerMessageSmsSizeTotal struct {
	CustomerMessageSmsSizeTotal *BasicUnitConfig `protobuf:"bytes,1923,opt,name=customer_message_sms_size_total,json=customerMessageSmsSizeTotal,proto3,oneof"`
}

type RateDefinitionConfig_ComplianceRndQuery struct {
	// compliance configs (2000 - 2999)
	ComplianceRndQuery *BasicConfig `protobuf:"bytes,2000,opt,name=compliance_rnd_query,json=complianceRndQuery,proto3,oneof"`
}

type RateDefinitionConfig_ComplianceRndQueryCached struct {
	ComplianceRndQueryCached *BasicConfig `protobuf:"bytes,2001,opt,name=compliance_rnd_query_cached,json=complianceRndQueryCached,proto3,oneof"`
}

func (*RateDefinitionConfig_AgentSeats) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ConnectedInboxPoll) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ConnectedInboxCreated) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_AgentMessageChat) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_AgentMessageChatSize) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_AgentMessageChatUnits) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_AgentMessageChatSizeTotal) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_AgentMessageEmail) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_AgentMessageEmailSize) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_AgentMessageEmailUnits) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_AgentMessageEmailSizeTotal) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_AgentMessageSms) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_AgentMessageSmsSize) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_AgentMessageSmsUnits) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_AgentMessageSmsSizeTotal) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ManagerMessageChat) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ManagerMessageChatSize) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ManagerMessageChatUnits) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ManagerMessageChatSizeTotal) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ManagerMessageEmail) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ManagerMessageEmailSize) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ManagerMessageEmailUnits) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ManagerMessageEmailSizeTotal) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ManagerMessageSms) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ManagerMessageSmsSize) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ManagerMessageSmsUnits) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ManagerMessageSmsSizeTotal) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_SystemMessageChat) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_SystemMessageChatSize) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_SystemMessageChatUnits) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_SystemMessageChatSizeTotal) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_SystemMessageEmail) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_SystemMessageEmailSize) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_SystemMessageEmailUnits) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_SystemMessageEmailSizeTotal) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_SystemMessageSms) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_SystemMessageSmsSize) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_SystemMessageSmsUnits) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_SystemMessageSmsSizeTotal) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_CustomerMessageChat) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_CustomerMessageChatSize) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_CustomerMessageChatUnits) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_CustomerMessageChatSizeTotal) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_CustomerMessageEmail) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_CustomerMessageEmailSize) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_CustomerMessageEmailUnits) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_CustomerMessageEmailSizeTotal) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_CustomerMessageSms) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_CustomerMessageSmsSize) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_CustomerMessageSmsUnits) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_CustomerMessageSmsSizeTotal) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ComplianceRndQuery) isRateDefinitionConfig_Config() {}

func (*RateDefinitionConfig_ComplianceRndQueryCached) isRateDefinitionConfig_Config() {}

var File_services_billing_entities_v1alpha2_rates_proto protoreflect.FileDescriptor

var file_services_billing_entities_v1alpha2_rates_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x22, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x1a, 0x23, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xca, 0x01, 0x0a, 0x0c, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x22, 0xd4, 0x06, 0x0a,
	0x0e, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x0a, 0x12, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a,
	0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a, 0x0d, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x30, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x5b, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x68, 0x61,
	0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x68, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x49, 0x64, 0x22, 0xd1, 0x2e, 0x0a, 0x14, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x53, 0x0a, 0x0b,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x74,
	0x73, 0x12, 0x64, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x18, 0xdc, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x62, 0x6f, 0x78, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x6a, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0xdd, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x15, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0xc0, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x10, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x6d, 0x0a, 0x17, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0xc1, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x14,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x6b, 0x0a, 0x18, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x18, 0xc2, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x15, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x12, 0x78, 0x0a, 0x1d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0xc3, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x19, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x62, 0x0a, 0x13, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0xca, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x11, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x6f, 0x0a, 0x18, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0xcb, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x15, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x6d, 0x0a, 0x19, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0xcc, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x16, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12,
	0x7a, 0x0a, 0x1e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0xcd, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x1a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x5e, 0x0a, 0x11, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6d, 0x73,
	0x18, 0xd4, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6d, 0x73, 0x12, 0x6b, 0x0a, 0x16, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6d, 0x73,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0xd5, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x13, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x6d, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x69, 0x0a, 0x17, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x18, 0xd6, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x14, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6d, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x12, 0x76, 0x0a, 0x1c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0xd7, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x18, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x6d, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x64, 0x0a, 0x14, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x18, 0xa4, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x12, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x12, 0x71, 0x0a, 0x19, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0xa5,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x16, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x6f, 0x0a, 0x1a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x18, 0xa6, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x17, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x7c, 0x0a, 0x1f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0xa7, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x66, 0x0a, 0x15, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0xae, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x13, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x73, 0x0a, 0x1a, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0xaf, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x17, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x71, 0x0a, 0x1b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18,
	0xb0, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x18, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x12, 0x7e, 0x0a, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0xb1, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x62, 0x0a, 0x13, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6d, 0x73, 0x18, 0xb8, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x6d, 0x73, 0x12, 0x6f, 0x0a, 0x18, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0xb9, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x15, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x6d, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x6d, 0x0a, 0x19, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6d, 0x73, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0xba, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x16, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x6d, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x7a, 0x0a, 0x1e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0xbb, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6d, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x62, 0x0a, 0x13, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x88, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x6f, 0x0a, 0x18, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x89, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x15, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x6d, 0x0a, 0x19, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x8a, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x16, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x7a, 0x0a, 0x1e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x8b, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x64, 0x0a, 0x14, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x92, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x71, 0x0a, 0x19, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x93, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x16, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x6f, 0x0a, 0x1a,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x94, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x17, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x7c, 0x0a,
	0x1f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x95, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1b,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x60, 0x0a, 0x12, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6d,
	0x73, 0x18, 0x9c, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x10, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6d, 0x73, 0x12, 0x6d, 0x0a,
	0x17, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x6d, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x9d, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x14, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6d, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x6b, 0x0a, 0x18,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x6d, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x9e, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x15, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x6d, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x78, 0x0a, 0x1d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6d, 0x73, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x9f, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x19, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6d, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x66, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0xec, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x73, 0x0a, 0x1a, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0xed, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x71, 0x0a, 0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18,
	0xee, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x18, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x12, 0x7e, 0x0a, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0xef, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x68, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0xf6, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x75, 0x0a,
	0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0xf7, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x18, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x73, 0x0a, 0x1c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x18, 0xf8, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x19,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x21, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0xf9, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1d, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x64, 0x0a, 0x14,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x6d, 0x73, 0x18, 0x80, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x12,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x6d, 0x73, 0x12, 0x71, 0x0a, 0x19, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x81, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x16, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6d,
	0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x6f, 0x0a, 0x1a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x18, 0x82, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x17, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6d,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x7c, 0x0a, 0x1f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x83, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6d, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x64, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x72, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0xd0, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x71, 0x0a, 0x1b, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0xd1, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x42, 0x08, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2a, 0xc0, 0x1b, 0x0a, 0x18, 0x52, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4f, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x31, 0x0a, 0x2c, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x53, 0x10, 0xe8, 0x07, 0x12, 0x3a, 0x0a, 0x35, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x58, 0x5f, 0x50,
	0x4f, 0x4c, 0x4c, 0x10, 0xdc, 0x0b, 0x12, 0x3d, 0x0a, 0x38, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x58, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x44, 0x10, 0xdd, 0x0b, 0x12, 0x38, 0x0a, 0x33, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0xc0, 0x0c, 0x12,
	0x3d, 0x0a, 0x38, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x4d, 0x4e, 0x49, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0xc1, 0x0c, 0x12, 0x3e,
	0x0a, 0x39, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d,
	0x4e, 0x49, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0xc2, 0x0c, 0x12, 0x43,
	0x0a, 0x3e, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d,
	0x4e, 0x49, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c,
	0x10, 0xc3, 0x0c, 0x12, 0x39, 0x0a, 0x34, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0xca, 0x0c, 0x12, 0x3e,
	0x0a, 0x39, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d,
	0x4e, 0x49, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0xcb, 0x0c, 0x12, 0x3f,
	0x0a, 0x3a, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d,
	0x4e, 0x49, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0xcc, 0x0c, 0x12,
	0x44, 0x0a, 0x3f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x4d, 0x4e, 0x49, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x54, 0x4f, 0x54,
	0x41, 0x4c, 0x10, 0xcd, 0x0c, 0x12, 0x37, 0x0a, 0x32, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0xd4, 0x0c, 0x12, 0x3c,
	0x0a, 0x37, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d,
	0x4e, 0x49, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0xd5, 0x0c, 0x12, 0x3d, 0x0a, 0x38,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49,
	0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53,
	0x4d, 0x53, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0xd6, 0x0c, 0x12, 0x42, 0x0a, 0x3d, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f,
	0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x4d,
	0x53, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0xd7, 0x0c, 0x12,
	0x3a, 0x0a, 0x35, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x4d, 0x4e, 0x49, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0xa4, 0x0d, 0x12, 0x3f, 0x0a, 0x3a, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x43, 0x48, 0x41, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0xa5, 0x0d, 0x12, 0x40, 0x0a, 0x3b,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0xa6, 0x0d, 0x12, 0x45,
	0x0a, 0x40, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d,
	0x4e, 0x49, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x54, 0x4f, 0x54,
	0x41, 0x4c, 0x10, 0xa7, 0x0d, 0x12, 0x3b, 0x0a, 0x36, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10,
	0xae, 0x0d, 0x12, 0x40, 0x0a, 0x3b, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x49, 0x5a,
	0x45, 0x10, 0xaf, 0x0d, 0x12, 0x41, 0x0a, 0x3c, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x53, 0x10, 0xb0, 0x0d, 0x12, 0x46, 0x0a, 0x41, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0xb1, 0x0d, 0x12,
	0x39, 0x0a, 0x34, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x4d, 0x4e, 0x49, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0xb8, 0x0d, 0x12, 0x3e, 0x0a, 0x39, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53,
	0x4d, 0x53, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0xb9, 0x0d, 0x12, 0x3f, 0x0a, 0x3a, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53,
	0x4d, 0x53, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0xba, 0x0d, 0x12, 0x44, 0x0a, 0x3f, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x53, 0x4d, 0x53, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0xbb,
	0x0d, 0x12, 0x39, 0x0a, 0x34, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x88, 0x0e, 0x12, 0x3e, 0x0a, 0x39,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49,
	0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x43, 0x48, 0x41, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x89, 0x0e, 0x12, 0x3f, 0x0a, 0x3a,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49,
	0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x43, 0x48, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0x8a, 0x0e, 0x12, 0x44, 0x0a,
	0x3f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e,
	0x49, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c,
	0x10, 0x8b, 0x0e, 0x12, 0x3a, 0x0a, 0x35, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x92, 0x0e, 0x12,
	0x3f, 0x0a, 0x3a, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x4d, 0x4e, 0x49, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x93, 0x0e,
	0x12, 0x40, 0x0a, 0x3b, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10,
	0x94, 0x0e, 0x12, 0x45, 0x0a, 0x40, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x49, 0x5a, 0x45,
	0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x95, 0x0e, 0x12, 0x38, 0x0a, 0x33, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x4d, 0x53,
	0x10, 0x9c, 0x0e, 0x12, 0x3d, 0x0a, 0x38, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10,
	0x9d, 0x0e, 0x12, 0x3e, 0x0a, 0x39, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10,
	0x9e, 0x0e, 0x12, 0x43, 0x0a, 0x3e, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x54,
	0x4f, 0x54, 0x41, 0x4c, 0x10, 0x9f, 0x0e, 0x12, 0x3b, 0x0a, 0x36, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x54, 0x10, 0xec, 0x0e, 0x12, 0x40, 0x0a, 0x3b, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45,
	0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x53,
	0x49, 0x5a, 0x45, 0x10, 0xed, 0x0e, 0x12, 0x41, 0x0a, 0x3c, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0xee, 0x0e, 0x12, 0x46, 0x0a, 0x41, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0xef,
	0x0e, 0x12, 0x3c, 0x0a, 0x37, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0xf6, 0x0e, 0x12,
	0x41, 0x0a, 0x3c, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x4d, 0x4e, 0x49, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10,
	0xf7, 0x0e, 0x12, 0x42, 0x0a, 0x3d, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x4e,
	0x49, 0x54, 0x53, 0x10, 0xf8, 0x0e, 0x12, 0x47, 0x0a, 0x42, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0xf9, 0x0e, 0x12,
	0x3a, 0x0a, 0x35, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x4d, 0x4e, 0x49, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x80, 0x0f, 0x12, 0x3f, 0x0a, 0x3a, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x81, 0x0f, 0x12, 0x40, 0x0a, 0x3b,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0x82, 0x0f, 0x12, 0x45,
	0x0a, 0x40, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d,
	0x4e, 0x49, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x54, 0x4f, 0x54,
	0x41, 0x4c, 0x10, 0x83, 0x0f, 0x12, 0x35, 0x0a, 0x30, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x52, 0x4e, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0xd0, 0x0f, 0x12, 0x3c, 0x0a, 0x37,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x4e, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0xd1, 0x0f, 0x42, 0xaf, 0x02, 0x0a, 0x26, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x42, 0x0a, 0x52, 0x61, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x3b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0xa2, 0x02, 0x03, 0x53, 0x42, 0x45, 0xaa, 0x02, 0x22, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0xca, 0x02,
	0x22, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5c, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0xe2, 0x02, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5c, 0x42,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5c,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x25, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3a,
	0x3a, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_billing_entities_v1alpha2_rates_proto_rawDescOnce sync.Once
	file_services_billing_entities_v1alpha2_rates_proto_rawDescData = file_services_billing_entities_v1alpha2_rates_proto_rawDesc
)

func file_services_billing_entities_v1alpha2_rates_proto_rawDescGZIP() []byte {
	file_services_billing_entities_v1alpha2_rates_proto_rawDescOnce.Do(func() {
		file_services_billing_entities_v1alpha2_rates_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_billing_entities_v1alpha2_rates_proto_rawDescData)
	})
	return file_services_billing_entities_v1alpha2_rates_proto_rawDescData
}

var file_services_billing_entities_v1alpha2_rates_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_services_billing_entities_v1alpha2_rates_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_services_billing_entities_v1alpha2_rates_proto_goTypes = []interface{}{
	(RateDefinitionConfigType)(0), // 0: services.billing.entities.v1alpha2.RateDefinitionConfigType
	(*RateSnapshot)(nil),          // 1: services.billing.entities.v1alpha2.RateSnapshot
	(*RateDefinition)(nil),        // 2: services.billing.entities.v1alpha2.RateDefinition
	(*RateDefinitionConfig)(nil),  // 3: services.billing.entities.v1alpha2.RateDefinitionConfig
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
	(audit.EventType)(0),          // 5: api.commons.audit.EventType
	(MatchingRule)(0),             // 6: services.billing.entities.v1alpha2.MatchingRule
	(*MatchingConfig)(nil),        // 7: services.billing.entities.v1alpha2.MatchingConfig
	(*BasicConfig)(nil),           // 8: services.billing.entities.v1alpha2.BasicConfig
	(*BasicUnitConfig)(nil),       // 9: services.billing.entities.v1alpha2.BasicUnitConfig
}
var file_services_billing_entities_v1alpha2_rates_proto_depIdxs = []int32{
	4,  // 0: services.billing.entities.v1alpha2.RateSnapshot.start_date:type_name -> google.protobuf.Timestamp
	4,  // 1: services.billing.entities.v1alpha2.RateSnapshot.end_date:type_name -> google.protobuf.Timestamp
	2,  // 2: services.billing.entities.v1alpha2.RateSnapshot.rates:type_name -> services.billing.entities.v1alpha2.RateDefinition
	5,  // 3: services.billing.entities.v1alpha2.RateDefinition.event_type:type_name -> api.commons.audit.EventType
	0,  // 4: services.billing.entities.v1alpha2.RateDefinition.config_type:type_name -> services.billing.entities.v1alpha2.RateDefinitionConfigType
	6,  // 5: services.billing.entities.v1alpha2.RateDefinition.matching_rule:type_name -> services.billing.entities.v1alpha2.MatchingRule
	7,  // 6: services.billing.entities.v1alpha2.RateDefinition.matching_config:type_name -> services.billing.entities.v1alpha2.MatchingConfig
	4,  // 7: services.billing.entities.v1alpha2.RateDefinition.create_time:type_name -> google.protobuf.Timestamp
	4,  // 8: services.billing.entities.v1alpha2.RateDefinition.update_time:type_name -> google.protobuf.Timestamp
	4,  // 9: services.billing.entities.v1alpha2.RateDefinition.delete_time:type_name -> google.protobuf.Timestamp
	4,  // 10: services.billing.entities.v1alpha2.RateDefinition.effective_time:type_name -> google.protobuf.Timestamp
	3,  // 11: services.billing.entities.v1alpha2.RateDefinition.config:type_name -> services.billing.entities.v1alpha2.RateDefinitionConfig
	8,  // 12: services.billing.entities.v1alpha2.RateDefinitionConfig.agent_seats:type_name -> services.billing.entities.v1alpha2.BasicConfig
	8,  // 13: services.billing.entities.v1alpha2.RateDefinitionConfig.connected_inbox_poll:type_name -> services.billing.entities.v1alpha2.BasicConfig
	8,  // 14: services.billing.entities.v1alpha2.RateDefinitionConfig.connected_inbox_created:type_name -> services.billing.entities.v1alpha2.BasicConfig
	8,  // 15: services.billing.entities.v1alpha2.RateDefinitionConfig.agent_message_chat:type_name -> services.billing.entities.v1alpha2.BasicConfig
	9,  // 16: services.billing.entities.v1alpha2.RateDefinitionConfig.agent_message_chat_size:type_name -> services.billing.entities.v1alpha2.BasicUnitConfig
	8,  // 17: services.billing.entities.v1alpha2.RateDefinitionConfig.agent_message_chat_units:type_name -> services.billing.entities.v1alpha2.BasicConfig
	9,  // 18: services.billing.entities.v1alpha2.RateDefinitionConfig.agent_message_chat_size_total:type_name -> services.billing.entities.v1alpha2.BasicUnitConfig
	8,  // 19: services.billing.entities.v1alpha2.RateDefinitionConfig.agent_message_email:type_name -> services.billing.entities.v1alpha2.BasicConfig
	9,  // 20: services.billing.entities.v1alpha2.RateDefinitionConfig.agent_message_email_size:type_name -> services.billing.entities.v1alpha2.BasicUnitConfig
	8,  // 21: services.billing.entities.v1alpha2.RateDefinitionConfig.agent_message_email_units:type_name -> services.billing.entities.v1alpha2.BasicConfig
	9,  // 22: services.billing.entities.v1alpha2.RateDefinitionConfig.agent_message_email_size_total:type_name -> services.billing.entities.v1alpha2.BasicUnitConfig
	8,  // 23: services.billing.entities.v1alpha2.RateDefinitionConfig.agent_message_sms:type_name -> services.billing.entities.v1alpha2.BasicConfig
	9,  // 24: services.billing.entities.v1alpha2.RateDefinitionConfig.agent_message_sms_size:type_name -> services.billing.entities.v1alpha2.BasicUnitConfig
	8,  // 25: services.billing.entities.v1alpha2.RateDefinitionConfig.agent_message_sms_units:type_name -> services.billing.entities.v1alpha2.BasicConfig
	9,  // 26: services.billing.entities.v1alpha2.RateDefinitionConfig.agent_message_sms_size_total:type_name -> services.billing.entities.v1alpha2.BasicUnitConfig
	8,  // 27: services.billing.entities.v1alpha2.RateDefinitionConfig.manager_message_chat:type_name -> services.billing.entities.v1alpha2.BasicConfig
	9,  // 28: services.billing.entities.v1alpha2.RateDefinitionConfig.manager_message_chat_size:type_name -> services.billing.entities.v1alpha2.BasicUnitConfig
	8,  // 29: services.billing.entities.v1alpha2.RateDefinitionConfig.manager_message_chat_units:type_name -> services.billing.entities.v1alpha2.BasicConfig
	9,  // 30: services.billing.entities.v1alpha2.RateDefinitionConfig.manager_message_chat_size_total:type_name -> services.billing.entities.v1alpha2.BasicUnitConfig
	8,  // 31: services.billing.entities.v1alpha2.RateDefinitionConfig.manager_message_email:type_name -> services.billing.entities.v1alpha2.BasicConfig
	9,  // 32: services.billing.entities.v1alpha2.RateDefinitionConfig.manager_message_email_size:type_name -> services.billing.entities.v1alpha2.BasicUnitConfig
	8,  // 33: services.billing.entities.v1alpha2.RateDefinitionConfig.manager_message_email_units:type_name -> services.billing.entities.v1alpha2.BasicConfig
	9,  // 34: services.billing.entities.v1alpha2.RateDefinitionConfig.manager_message_email_size_total:type_name -> services.billing.entities.v1alpha2.BasicUnitConfig
	8,  // 35: services.billing.entities.v1alpha2.RateDefinitionConfig.manager_message_sms:type_name -> services.billing.entities.v1alpha2.BasicConfig
	9,  // 36: services.billing.entities.v1alpha2.RateDefinitionConfig.manager_message_sms_size:type_name -> services.billing.entities.v1alpha2.BasicUnitConfig
	8,  // 37: services.billing.entities.v1alpha2.RateDefinitionConfig.manager_message_sms_units:type_name -> services.billing.entities.v1alpha2.BasicConfig
	9,  // 38: services.billing.entities.v1alpha2.RateDefinitionConfig.manager_message_sms_size_total:type_name -> services.billing.entities.v1alpha2.BasicUnitConfig
	8,  // 39: services.billing.entities.v1alpha2.RateDefinitionConfig.system_message_chat:type_name -> services.billing.entities.v1alpha2.BasicConfig
	9,  // 40: services.billing.entities.v1alpha2.RateDefinitionConfig.system_message_chat_size:type_name -> services.billing.entities.v1alpha2.BasicUnitConfig
	8,  // 41: services.billing.entities.v1alpha2.RateDefinitionConfig.system_message_chat_units:type_name -> services.billing.entities.v1alpha2.BasicConfig
	9,  // 42: services.billing.entities.v1alpha2.RateDefinitionConfig.system_message_chat_size_total:type_name -> services.billing.entities.v1alpha2.BasicUnitConfig
	8,  // 43: services.billing.entities.v1alpha2.RateDefinitionConfig.system_message_email:type_name -> services.billing.entities.v1alpha2.BasicConfig
	9,  // 44: services.billing.entities.v1alpha2.RateDefinitionConfig.system_message_email_size:type_name -> services.billing.entities.v1alpha2.BasicUnitConfig
	8,  // 45: services.billing.entities.v1alpha2.RateDefinitionConfig.system_message_email_units:type_name -> services.billing.entities.v1alpha2.BasicConfig
	9,  // 46: services.billing.entities.v1alpha2.RateDefinitionConfig.system_message_email_size_total:type_name -> services.billing.entities.v1alpha2.BasicUnitConfig
	8,  // 47: services.billing.entities.v1alpha2.RateDefinitionConfig.system_message_sms:type_name -> services.billing.entities.v1alpha2.BasicConfig
	9,  // 48: services.billing.entities.v1alpha2.RateDefinitionConfig.system_message_sms_size:type_name -> services.billing.entities.v1alpha2.BasicUnitConfig
	8,  // 49: services.billing.entities.v1alpha2.RateDefinitionConfig.system_message_sms_units:type_name -> services.billing.entities.v1alpha2.BasicConfig
	9,  // 50: services.billing.entities.v1alpha2.RateDefinitionConfig.system_message_sms_size_total:type_name -> services.billing.entities.v1alpha2.BasicUnitConfig
	8,  // 51: services.billing.entities.v1alpha2.RateDefinitionConfig.customer_message_chat:type_name -> services.billing.entities.v1alpha2.BasicConfig
	9,  // 52: services.billing.entities.v1alpha2.RateDefinitionConfig.customer_message_chat_size:type_name -> services.billing.entities.v1alpha2.BasicUnitConfig
	8,  // 53: services.billing.entities.v1alpha2.RateDefinitionConfig.customer_message_chat_units:type_name -> services.billing.entities.v1alpha2.BasicConfig
	9,  // 54: services.billing.entities.v1alpha2.RateDefinitionConfig.customer_message_chat_size_total:type_name -> services.billing.entities.v1alpha2.BasicUnitConfig
	8,  // 55: services.billing.entities.v1alpha2.RateDefinitionConfig.customer_message_email:type_name -> services.billing.entities.v1alpha2.BasicConfig
	9,  // 56: services.billing.entities.v1alpha2.RateDefinitionConfig.customer_message_email_size:type_name -> services.billing.entities.v1alpha2.BasicUnitConfig
	8,  // 57: services.billing.entities.v1alpha2.RateDefinitionConfig.customer_message_email_units:type_name -> services.billing.entities.v1alpha2.BasicConfig
	9,  // 58: services.billing.entities.v1alpha2.RateDefinitionConfig.customer_message_email_size_total:type_name -> services.billing.entities.v1alpha2.BasicUnitConfig
	8,  // 59: services.billing.entities.v1alpha2.RateDefinitionConfig.customer_message_sms:type_name -> services.billing.entities.v1alpha2.BasicConfig
	9,  // 60: services.billing.entities.v1alpha2.RateDefinitionConfig.customer_message_sms_size:type_name -> services.billing.entities.v1alpha2.BasicUnitConfig
	8,  // 61: services.billing.entities.v1alpha2.RateDefinitionConfig.customer_message_sms_units:type_name -> services.billing.entities.v1alpha2.BasicConfig
	9,  // 62: services.billing.entities.v1alpha2.RateDefinitionConfig.customer_message_sms_size_total:type_name -> services.billing.entities.v1alpha2.BasicUnitConfig
	8,  // 63: services.billing.entities.v1alpha2.RateDefinitionConfig.compliance_rnd_query:type_name -> services.billing.entities.v1alpha2.BasicConfig
	8,  // 64: services.billing.entities.v1alpha2.RateDefinitionConfig.compliance_rnd_query_cached:type_name -> services.billing.entities.v1alpha2.BasicConfig
	65, // [65:65] is the sub-list for method output_type
	65, // [65:65] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_services_billing_entities_v1alpha2_rates_proto_init() }
func file_services_billing_entities_v1alpha2_rates_proto_init() {
	if File_services_billing_entities_v1alpha2_rates_proto != nil {
		return
	}
	file_services_billing_entities_v1alpha2_matching_proto_init()
	file_services_billing_entities_v1alpha2_modules_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_services_billing_entities_v1alpha2_rates_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_billing_entities_v1alpha2_rates_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_billing_entities_v1alpha2_rates_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateDefinitionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_services_billing_entities_v1alpha2_rates_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*RateDefinitionConfig_AgentSeats)(nil),
		(*RateDefinitionConfig_ConnectedInboxPoll)(nil),
		(*RateDefinitionConfig_ConnectedInboxCreated)(nil),
		(*RateDefinitionConfig_AgentMessageChat)(nil),
		(*RateDefinitionConfig_AgentMessageChatSize)(nil),
		(*RateDefinitionConfig_AgentMessageChatUnits)(nil),
		(*RateDefinitionConfig_AgentMessageChatSizeTotal)(nil),
		(*RateDefinitionConfig_AgentMessageEmail)(nil),
		(*RateDefinitionConfig_AgentMessageEmailSize)(nil),
		(*RateDefinitionConfig_AgentMessageEmailUnits)(nil),
		(*RateDefinitionConfig_AgentMessageEmailSizeTotal)(nil),
		(*RateDefinitionConfig_AgentMessageSms)(nil),
		(*RateDefinitionConfig_AgentMessageSmsSize)(nil),
		(*RateDefinitionConfig_AgentMessageSmsUnits)(nil),
		(*RateDefinitionConfig_AgentMessageSmsSizeTotal)(nil),
		(*RateDefinitionConfig_ManagerMessageChat)(nil),
		(*RateDefinitionConfig_ManagerMessageChatSize)(nil),
		(*RateDefinitionConfig_ManagerMessageChatUnits)(nil),
		(*RateDefinitionConfig_ManagerMessageChatSizeTotal)(nil),
		(*RateDefinitionConfig_ManagerMessageEmail)(nil),
		(*RateDefinitionConfig_ManagerMessageEmailSize)(nil),
		(*RateDefinitionConfig_ManagerMessageEmailUnits)(nil),
		(*RateDefinitionConfig_ManagerMessageEmailSizeTotal)(nil),
		(*RateDefinitionConfig_ManagerMessageSms)(nil),
		(*RateDefinitionConfig_ManagerMessageSmsSize)(nil),
		(*RateDefinitionConfig_ManagerMessageSmsUnits)(nil),
		(*RateDefinitionConfig_ManagerMessageSmsSizeTotal)(nil),
		(*RateDefinitionConfig_SystemMessageChat)(nil),
		(*RateDefinitionConfig_SystemMessageChatSize)(nil),
		(*RateDefinitionConfig_SystemMessageChatUnits)(nil),
		(*RateDefinitionConfig_SystemMessageChatSizeTotal)(nil),
		(*RateDefinitionConfig_SystemMessageEmail)(nil),
		(*RateDefinitionConfig_SystemMessageEmailSize)(nil),
		(*RateDefinitionConfig_SystemMessageEmailUnits)(nil),
		(*RateDefinitionConfig_SystemMessageEmailSizeTotal)(nil),
		(*RateDefinitionConfig_SystemMessageSms)(nil),
		(*RateDefinitionConfig_SystemMessageSmsSize)(nil),
		(*RateDefinitionConfig_SystemMessageSmsUnits)(nil),
		(*RateDefinitionConfig_SystemMessageSmsSizeTotal)(nil),
		(*RateDefinitionConfig_CustomerMessageChat)(nil),
		(*RateDefinitionConfig_CustomerMessageChatSize)(nil),
		(*RateDefinitionConfig_CustomerMessageChatUnits)(nil),
		(*RateDefinitionConfig_CustomerMessageChatSizeTotal)(nil),
		(*RateDefinitionConfig_CustomerMessageEmail)(nil),
		(*RateDefinitionConfig_CustomerMessageEmailSize)(nil),
		(*RateDefinitionConfig_CustomerMessageEmailUnits)(nil),
		(*RateDefinitionConfig_CustomerMessageEmailSizeTotal)(nil),
		(*RateDefinitionConfig_CustomerMessageSms)(nil),
		(*RateDefinitionConfig_CustomerMessageSmsSize)(nil),
		(*RateDefinitionConfig_CustomerMessageSmsUnits)(nil),
		(*RateDefinitionConfig_CustomerMessageSmsSizeTotal)(nil),
		(*RateDefinitionConfig_ComplianceRndQuery)(nil),
		(*RateDefinitionConfig_ComplianceRndQueryCached)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_billing_entities_v1alpha2_rates_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_services_billing_entities_v1alpha2_rates_proto_goTypes,
		DependencyIndexes: file_services_billing_entities_v1alpha2_rates_proto_depIdxs,
		EnumInfos:         file_services_billing_entities_v1alpha2_rates_proto_enumTypes,
		MessageInfos:      file_services_billing_entities_v1alpha2_rates_proto_msgTypes,
	}.Build()
	File_services_billing_entities_v1alpha2_rates_proto = out.File
	file_services_billing_entities_v1alpha2_rates_proto_rawDesc = nil
	file_services_billing_entities_v1alpha2_rates_proto_goTypes = nil
	file_services_billing_entities_v1alpha2_rates_proto_depIdxs = nil
}
