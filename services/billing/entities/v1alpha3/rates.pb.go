// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: services/billing/entities/v1alpha3/rates.proto

package entitiesv1alpha3

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RateDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateDefinitionId string                 `protobuf:"bytes,1,opt,name=rate_definition_id,json=rateDefinitionId,proto3" json:"rate_definition_id,omitempty"`
	SkuId            string                 `protobuf:"bytes,2,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`
	Product          *Product               `protobuf:"bytes,3,opt,name=product,proto3" json:"product,omitempty"`
	Config           *ProductConfig         `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	IsDraft          bool                   `protobuf:"varint,5,opt,name=is_draft,json=isDraft,proto3" json:"is_draft,omitempty"`
	CreateTime       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	DeleteTime       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
}

func (x *RateDefinition) Reset() {
	*x = RateDefinition{}
	mi := &file_services_billing_entities_v1alpha3_rates_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateDefinition) ProtoMessage() {}

func (x *RateDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_services_billing_entities_v1alpha3_rates_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateDefinition.ProtoReflect.Descriptor instead.
func (*RateDefinition) Descriptor() ([]byte, []int) {
	return file_services_billing_entities_v1alpha3_rates_proto_rawDescGZIP(), []int{0}
}

func (x *RateDefinition) GetRateDefinitionId() string {
	if x != nil {
		return x.RateDefinitionId
	}
	return ""
}

func (x *RateDefinition) GetSkuId() string {
	if x != nil {
		return x.SkuId
	}
	return ""
}

func (x *RateDefinition) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *RateDefinition) GetConfig() *ProductConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RateDefinition) GetIsDraft() bool {
	if x != nil {
		return x.IsDraft
	}
	return false
}

func (x *RateDefinition) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *RateDefinition) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *RateDefinition) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryOne   string `protobuf:"bytes,1,opt,name=category_one,json=categoryOne,proto3" json:"category_one,omitempty"`
	CategoryTwo   string `protobuf:"bytes,2,opt,name=category_two,json=categoryTwo,proto3" json:"category_two,omitempty"`
	CategoryThree string `protobuf:"bytes,3,opt,name=category_three,json=categoryThree,proto3" json:"category_three,omitempty"`
	ProductName   string `protobuf:"bytes,4,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
}

func (x *Product) Reset() {
	*x = Product{}
	mi := &file_services_billing_entities_v1alpha3_rates_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_services_billing_entities_v1alpha3_rates_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_services_billing_entities_v1alpha3_rates_proto_rawDescGZIP(), []int{1}
}

func (x *Product) GetCategoryOne() string {
	if x != nil {
		return x.CategoryOne
	}
	return ""
}

func (x *Product) GetCategoryTwo() string {
	if x != nil {
		return x.CategoryTwo
	}
	return ""
}

func (x *Product) GetCategoryThree() string {
	if x != nil {
		return x.CategoryThree
	}
	return ""
}

func (x *Product) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

type ProductConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//
	//	*ProductConfig_CommunicationsOmniChatAgentMessageUnit
	//	*ProductConfig_CommunicationsOmniChatAgentAttachment
	//	*ProductConfig_CommunicationsOmniChatAgentAccumulatedAttachments
	//	*ProductConfig_CommunicationsOmniChatCustomerMessageUnit
	//	*ProductConfig_CommunicationsOmniChatCustomerAttachment
	//	*ProductConfig_CommunicationsOmniChatCustomerAccumulatedAttachments
	//	*ProductConfig_CommunicationsOmniChatManagerMessageUnit
	//	*ProductConfig_CommunicationsOmniChatManagerAttachment
	//	*ProductConfig_CommunicationsOmniChatManagerAccumulatedAttachments
	//	*ProductConfig_CommunicationsOmniChatSystemMessageUnit
	//	*ProductConfig_CommunicationsOmniChatSystemAttachment
	//	*ProductConfig_CommunicationsOmniChatSystemAccumulatedAttachments
	//	*ProductConfig_CommunicationsOmniEmailAgentMessageUnit
	//	*ProductConfig_CommunicationsOmniEmailAgentSize
	//	*ProductConfig_CommunicationsOmniEmailAgentAccumulatedSize
	//	*ProductConfig_CommunicationsOmniEmailCustomerMessageUnit
	//	*ProductConfig_CommunicationsOmniEmailCustomerSize
	//	*ProductConfig_CommunicationsOmniEmailCustomerAccumulatedSize
	//	*ProductConfig_CommunicationsOmniEmailManagerMessageUnit
	//	*ProductConfig_CommunicationsOmniEmailManagerSize
	//	*ProductConfig_CommunicationsOmniEmailManagerAccumulatedSize
	//	*ProductConfig_CommunicationsOmniEmailSystemMessageUnit
	//	*ProductConfig_CommunicationsOmniEmailSystemSize
	//	*ProductConfig_CommunicationsOmniEmailSystemAccumulatedSize
	//	*ProductConfig_CommunicationsOmniSmsAgentMessageUnit
	//	*ProductConfig_CommunicationsOmniSmsAgentAttatchment
	//	*ProductConfig_CommunicationsOmniSmsAgentAccumulatedAttatchments
	//	*ProductConfig_CommunicationsOmniSmsCustomerMessageUnit
	//	*ProductConfig_CommunicationsOmniSmsCustomerAttatchment
	//	*ProductConfig_CommunicationsOmniSmsCustomerAccumulatedAttatchments
	//	*ProductConfig_CommunicationsOmniSmsManagerMessageUnit
	//	*ProductConfig_CommunicationsOmniSmsManagerAttatchment
	//	*ProductConfig_CommunicationsOmniSmsManagerAccumulatedAttatchments
	//	*ProductConfig_CommunicationsOmniSmsSystemMessageUnit
	//	*ProductConfig_CommunicationsOmniSmsSystemAttatchment
	//	*ProductConfig_CommunicationsOmniSmsSystemAccumulatedAttatchments
	//	*ProductConfig_CommunicationsOmniAgentSeats
	//	*ProductConfig_CommunicationsOmniResourcesConnectedInboxPoll
	//	*ProductConfig_CommunicationsOmniResourcesConnectedInboxCreated
	//	*ProductConfig_DataManagementComplianceComplianceRndQuery
	//	*ProductConfig_DataManagementComplianceComplianceRndQueryCached
	Config isProductConfig_Config `protobuf_oneof:"config"`
}

func (x *ProductConfig) Reset() {
	*x = ProductConfig{}
	mi := &file_services_billing_entities_v1alpha3_rates_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductConfig) ProtoMessage() {}

func (x *ProductConfig) ProtoReflect() protoreflect.Message {
	mi := &file_services_billing_entities_v1alpha3_rates_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductConfig.ProtoReflect.Descriptor instead.
func (*ProductConfig) Descriptor() ([]byte, []int) {
	return file_services_billing_entities_v1alpha3_rates_proto_rawDescGZIP(), []int{2}
}

func (m *ProductConfig) GetConfig() isProductConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniChatAgentMessageUnit() *BasicConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniChatAgentMessageUnit); ok {
		return x.CommunicationsOmniChatAgentMessageUnit
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniChatAgentAttachment() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniChatAgentAttachment); ok {
		return x.CommunicationsOmniChatAgentAttachment
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniChatAgentAccumulatedAttachments() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniChatAgentAccumulatedAttachments); ok {
		return x.CommunicationsOmniChatAgentAccumulatedAttachments
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniChatCustomerMessageUnit() *BasicConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniChatCustomerMessageUnit); ok {
		return x.CommunicationsOmniChatCustomerMessageUnit
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniChatCustomerAttachment() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniChatCustomerAttachment); ok {
		return x.CommunicationsOmniChatCustomerAttachment
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniChatCustomerAccumulatedAttachments() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniChatCustomerAccumulatedAttachments); ok {
		return x.CommunicationsOmniChatCustomerAccumulatedAttachments
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniChatManagerMessageUnit() *BasicConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniChatManagerMessageUnit); ok {
		return x.CommunicationsOmniChatManagerMessageUnit
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniChatManagerAttachment() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniChatManagerAttachment); ok {
		return x.CommunicationsOmniChatManagerAttachment
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniChatManagerAccumulatedAttachments() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniChatManagerAccumulatedAttachments); ok {
		return x.CommunicationsOmniChatManagerAccumulatedAttachments
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniChatSystemMessageUnit() *BasicConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniChatSystemMessageUnit); ok {
		return x.CommunicationsOmniChatSystemMessageUnit
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniChatSystemAttachment() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniChatSystemAttachment); ok {
		return x.CommunicationsOmniChatSystemAttachment
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniChatSystemAccumulatedAttachments() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniChatSystemAccumulatedAttachments); ok {
		return x.CommunicationsOmniChatSystemAccumulatedAttachments
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniEmailAgentMessageUnit() *BasicConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniEmailAgentMessageUnit); ok {
		return x.CommunicationsOmniEmailAgentMessageUnit
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniEmailAgentSize() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniEmailAgentSize); ok {
		return x.CommunicationsOmniEmailAgentSize
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniEmailAgentAccumulatedSize() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniEmailAgentAccumulatedSize); ok {
		return x.CommunicationsOmniEmailAgentAccumulatedSize
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniEmailCustomerMessageUnit() *BasicConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniEmailCustomerMessageUnit); ok {
		return x.CommunicationsOmniEmailCustomerMessageUnit
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniEmailCustomerSize() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniEmailCustomerSize); ok {
		return x.CommunicationsOmniEmailCustomerSize
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniEmailCustomerAccumulatedSize() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniEmailCustomerAccumulatedSize); ok {
		return x.CommunicationsOmniEmailCustomerAccumulatedSize
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniEmailManagerMessageUnit() *BasicConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniEmailManagerMessageUnit); ok {
		return x.CommunicationsOmniEmailManagerMessageUnit
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniEmailManagerSize() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniEmailManagerSize); ok {
		return x.CommunicationsOmniEmailManagerSize
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniEmailManagerAccumulatedSize() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniEmailManagerAccumulatedSize); ok {
		return x.CommunicationsOmniEmailManagerAccumulatedSize
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniEmailSystemMessageUnit() *BasicConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniEmailSystemMessageUnit); ok {
		return x.CommunicationsOmniEmailSystemMessageUnit
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniEmailSystemSize() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniEmailSystemSize); ok {
		return x.CommunicationsOmniEmailSystemSize
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniEmailSystemAccumulatedSize() *BasicUnitConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniEmailSystemAccumulatedSize); ok {
		return x.CommunicationsOmniEmailSystemAccumulatedSize
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniSmsAgentMessageUnit() *OmniSmsConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniSmsAgentMessageUnit); ok {
		return x.CommunicationsOmniSmsAgentMessageUnit
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniSmsAgentAttatchment() *OmniSmsUnitConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniSmsAgentAttatchment); ok {
		return x.CommunicationsOmniSmsAgentAttatchment
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniSmsAgentAccumulatedAttatchments() *OmniSmsUnitConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniSmsAgentAccumulatedAttatchments); ok {
		return x.CommunicationsOmniSmsAgentAccumulatedAttatchments
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniSmsCustomerMessageUnit() *OmniSmsConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniSmsCustomerMessageUnit); ok {
		return x.CommunicationsOmniSmsCustomerMessageUnit
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniSmsCustomerAttatchment() *OmniSmsUnitConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniSmsCustomerAttatchment); ok {
		return x.CommunicationsOmniSmsCustomerAttatchment
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniSmsCustomerAccumulatedAttatchments() *OmniSmsUnitConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniSmsCustomerAccumulatedAttatchments); ok {
		return x.CommunicationsOmniSmsCustomerAccumulatedAttatchments
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniSmsManagerMessageUnit() *OmniSmsConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniSmsManagerMessageUnit); ok {
		return x.CommunicationsOmniSmsManagerMessageUnit
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniSmsManagerAttatchment() *OmniSmsUnitConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniSmsManagerAttatchment); ok {
		return x.CommunicationsOmniSmsManagerAttatchment
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniSmsManagerAccumulatedAttatchments() *OmniSmsUnitConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniSmsManagerAccumulatedAttatchments); ok {
		return x.CommunicationsOmniSmsManagerAccumulatedAttatchments
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniSmsSystemMessageUnit() *OmniSmsConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniSmsSystemMessageUnit); ok {
		return x.CommunicationsOmniSmsSystemMessageUnit
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniSmsSystemAttatchment() *OmniSmsUnitConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniSmsSystemAttatchment); ok {
		return x.CommunicationsOmniSmsSystemAttatchment
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniSmsSystemAccumulatedAttatchments() *OmniSmsUnitConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniSmsSystemAccumulatedAttatchments); ok {
		return x.CommunicationsOmniSmsSystemAccumulatedAttatchments
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniAgentSeats() *BasicConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniAgentSeats); ok {
		return x.CommunicationsOmniAgentSeats
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniResourcesConnectedInboxPoll() *BasicConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniResourcesConnectedInboxPoll); ok {
		return x.CommunicationsOmniResourcesConnectedInboxPoll
	}
	return nil
}

func (x *ProductConfig) GetCommunicationsOmniResourcesConnectedInboxCreated() *BasicConfig {
	if x, ok := x.GetConfig().(*ProductConfig_CommunicationsOmniResourcesConnectedInboxCreated); ok {
		return x.CommunicationsOmniResourcesConnectedInboxCreated
	}
	return nil
}

func (x *ProductConfig) GetDataManagementComplianceComplianceRndQuery() *BasicConfig {
	if x, ok := x.GetConfig().(*ProductConfig_DataManagementComplianceComplianceRndQuery); ok {
		return x.DataManagementComplianceComplianceRndQuery
	}
	return nil
}

func (x *ProductConfig) GetDataManagementComplianceComplianceRndQueryCached() *BasicConfig {
	if x, ok := x.GetConfig().(*ProductConfig_DataManagementComplianceComplianceRndQueryCached); ok {
		return x.DataManagementComplianceComplianceRndQueryCached
	}
	return nil
}

type isProductConfig_Config interface {
	isProductConfig_Config()
}

type ProductConfig_CommunicationsOmniChatAgentMessageUnit struct {
	// communications (1000-9999)
	// omni (1000 - 1999)
	CommunicationsOmniChatAgentMessageUnit *BasicConfig `protobuf:"bytes,1000,opt,name=communications_omni_chat_agent_message_unit,json=communicationsOmniChatAgentMessageUnit,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniChatAgentAttachment struct {
	CommunicationsOmniChatAgentAttachment *BasicUnitConfig `protobuf:"bytes,1001,opt,name=communications_omni_chat_agent_attachment,json=communicationsOmniChatAgentAttachment,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniChatAgentAccumulatedAttachments struct {
	CommunicationsOmniChatAgentAccumulatedAttachments *BasicUnitConfig `protobuf:"bytes,1002,opt,name=communications_omni_chat_agent_accumulated_attachments,json=communicationsOmniChatAgentAccumulatedAttachments,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniChatCustomerMessageUnit struct {
	CommunicationsOmniChatCustomerMessageUnit *BasicConfig `protobuf:"bytes,1010,opt,name=communications_omni_chat_customer_message_unit,json=communicationsOmniChatCustomerMessageUnit,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniChatCustomerAttachment struct {
	CommunicationsOmniChatCustomerAttachment *BasicUnitConfig `protobuf:"bytes,1011,opt,name=communications_omni_chat_customer_attachment,json=communicationsOmniChatCustomerAttachment,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniChatCustomerAccumulatedAttachments struct {
	CommunicationsOmniChatCustomerAccumulatedAttachments *BasicUnitConfig `protobuf:"bytes,1012,opt,name=communications_omni_chat_customer_accumulated_attachments,json=communicationsOmniChatCustomerAccumulatedAttachments,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniChatManagerMessageUnit struct {
	CommunicationsOmniChatManagerMessageUnit *BasicConfig `protobuf:"bytes,1020,opt,name=communications_omni_chat_manager_message_unit,json=communicationsOmniChatManagerMessageUnit,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniChatManagerAttachment struct {
	CommunicationsOmniChatManagerAttachment *BasicUnitConfig `protobuf:"bytes,1021,opt,name=communications_omni_chat_manager_attachment,json=communicationsOmniChatManagerAttachment,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniChatManagerAccumulatedAttachments struct {
	CommunicationsOmniChatManagerAccumulatedAttachments *BasicUnitConfig `protobuf:"bytes,1022,opt,name=communications_omni_chat_manager_accumulated_attachments,json=communicationsOmniChatManagerAccumulatedAttachments,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniChatSystemMessageUnit struct {
	CommunicationsOmniChatSystemMessageUnit *BasicConfig `protobuf:"bytes,1030,opt,name=communications_omni_chat_system_message_unit,json=communicationsOmniChatSystemMessageUnit,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniChatSystemAttachment struct {
	CommunicationsOmniChatSystemAttachment *BasicUnitConfig `protobuf:"bytes,1031,opt,name=communications_omni_chat_system_attachment,json=communicationsOmniChatSystemAttachment,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniChatSystemAccumulatedAttachments struct {
	CommunicationsOmniChatSystemAccumulatedAttachments *BasicUnitConfig `protobuf:"bytes,1032,opt,name=communications_omni_chat_system_accumulated_attachments,json=communicationsOmniChatSystemAccumulatedAttachments,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniEmailAgentMessageUnit struct {
	CommunicationsOmniEmailAgentMessageUnit *BasicConfig `protobuf:"bytes,1100,opt,name=communications_omni_email_agent_message_unit,json=communicationsOmniEmailAgentMessageUnit,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniEmailAgentSize struct {
	CommunicationsOmniEmailAgentSize *BasicUnitConfig `protobuf:"bytes,1101,opt,name=communications_omni_email_agent_size,json=communicationsOmniEmailAgentSize,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniEmailAgentAccumulatedSize struct {
	CommunicationsOmniEmailAgentAccumulatedSize *BasicUnitConfig `protobuf:"bytes,1102,opt,name=communications_omni_email_agent_accumulated_size,json=communicationsOmniEmailAgentAccumulatedSize,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniEmailCustomerMessageUnit struct {
	CommunicationsOmniEmailCustomerMessageUnit *BasicConfig `protobuf:"bytes,1110,opt,name=communications_omni_email_customer_message_unit,json=communicationsOmniEmailCustomerMessageUnit,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniEmailCustomerSize struct {
	CommunicationsOmniEmailCustomerSize *BasicUnitConfig `protobuf:"bytes,1111,opt,name=communications_omni_email_customer_size,json=communicationsOmniEmailCustomerSize,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniEmailCustomerAccumulatedSize struct {
	CommunicationsOmniEmailCustomerAccumulatedSize *BasicUnitConfig `protobuf:"bytes,1112,opt,name=communications_omni_email_customer_accumulated_size,json=communicationsOmniEmailCustomerAccumulatedSize,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniEmailManagerMessageUnit struct {
	CommunicationsOmniEmailManagerMessageUnit *BasicConfig `protobuf:"bytes,1120,opt,name=communications_omni_email_manager_message_unit,json=communicationsOmniEmailManagerMessageUnit,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniEmailManagerSize struct {
	CommunicationsOmniEmailManagerSize *BasicUnitConfig `protobuf:"bytes,1121,opt,name=communications_omni_email_manager_size,json=communicationsOmniEmailManagerSize,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniEmailManagerAccumulatedSize struct {
	CommunicationsOmniEmailManagerAccumulatedSize *BasicUnitConfig `protobuf:"bytes,1122,opt,name=communications_omni_email_manager_accumulated_size,json=communicationsOmniEmailManagerAccumulatedSize,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniEmailSystemMessageUnit struct {
	CommunicationsOmniEmailSystemMessageUnit *BasicConfig `protobuf:"bytes,1130,opt,name=communications_omni_email_system_message_unit,json=communicationsOmniEmailSystemMessageUnit,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniEmailSystemSize struct {
	CommunicationsOmniEmailSystemSize *BasicUnitConfig `protobuf:"bytes,1131,opt,name=communications_omni_email_system_size,json=communicationsOmniEmailSystemSize,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniEmailSystemAccumulatedSize struct {
	CommunicationsOmniEmailSystemAccumulatedSize *BasicUnitConfig `protobuf:"bytes,1132,opt,name=communications_omni_email_system_accumulated_size,json=communicationsOmniEmailSystemAccumulatedSize,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniSmsAgentMessageUnit struct {
	CommunicationsOmniSmsAgentMessageUnit *OmniSmsConfig `protobuf:"bytes,1200,opt,name=communications_omni_sms_agent_message_unit,json=communicationsOmniSmsAgentMessageUnit,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniSmsAgentAttatchment struct {
	CommunicationsOmniSmsAgentAttatchment *OmniSmsUnitConfig `protobuf:"bytes,1201,opt,name=communications_omni_sms_agent_attatchment,json=communicationsOmniSmsAgentAttatchment,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniSmsAgentAccumulatedAttatchments struct {
	CommunicationsOmniSmsAgentAccumulatedAttatchments *OmniSmsUnitConfig `protobuf:"bytes,1202,opt,name=communications_omni_sms_agent_accumulated_attatchments,json=communicationsOmniSmsAgentAccumulatedAttatchments,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniSmsCustomerMessageUnit struct {
	CommunicationsOmniSmsCustomerMessageUnit *OmniSmsConfig `protobuf:"bytes,1210,opt,name=communications_omni_sms_customer_message_unit,json=communicationsOmniSmsCustomerMessageUnit,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniSmsCustomerAttatchment struct {
	CommunicationsOmniSmsCustomerAttatchment *OmniSmsUnitConfig `protobuf:"bytes,1211,opt,name=communications_omni_sms_customer_attatchment,json=communicationsOmniSmsCustomerAttatchment,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniSmsCustomerAccumulatedAttatchments struct {
	CommunicationsOmniSmsCustomerAccumulatedAttatchments *OmniSmsUnitConfig `protobuf:"bytes,1212,opt,name=communications_omni_sms_customer_accumulated_attatchments,json=communicationsOmniSmsCustomerAccumulatedAttatchments,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniSmsManagerMessageUnit struct {
	CommunicationsOmniSmsManagerMessageUnit *OmniSmsConfig `protobuf:"bytes,1220,opt,name=communications_omni_sms_manager_message_unit,json=communicationsOmniSmsManagerMessageUnit,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniSmsManagerAttatchment struct {
	CommunicationsOmniSmsManagerAttatchment *OmniSmsUnitConfig `protobuf:"bytes,1221,opt,name=communications_omni_sms_manager_attatchment,json=communicationsOmniSmsManagerAttatchment,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniSmsManagerAccumulatedAttatchments struct {
	CommunicationsOmniSmsManagerAccumulatedAttatchments *OmniSmsUnitConfig `protobuf:"bytes,1222,opt,name=communications_omni_sms_manager_accumulated_attatchments,json=communicationsOmniSmsManagerAccumulatedAttatchments,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniSmsSystemMessageUnit struct {
	CommunicationsOmniSmsSystemMessageUnit *OmniSmsConfig `protobuf:"bytes,1230,opt,name=communications_omni_sms_system_message_unit,json=communicationsOmniSmsSystemMessageUnit,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniSmsSystemAttatchment struct {
	CommunicationsOmniSmsSystemAttatchment *OmniSmsUnitConfig `protobuf:"bytes,1231,opt,name=communications_omni_sms_system_attatchment,json=communicationsOmniSmsSystemAttatchment,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniSmsSystemAccumulatedAttatchments struct {
	CommunicationsOmniSmsSystemAccumulatedAttatchments *OmniSmsUnitConfig `protobuf:"bytes,1232,opt,name=communications_omni_sms_system_accumulated_attatchments,json=communicationsOmniSmsSystemAccumulatedAttatchments,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniAgentSeats struct {
	CommunicationsOmniAgentSeats *BasicConfig `protobuf:"bytes,1300,opt,name=communications_omni_agent_seats,json=communicationsOmniAgentSeats,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniResourcesConnectedInboxPoll struct {
	CommunicationsOmniResourcesConnectedInboxPoll *BasicConfig `protobuf:"bytes,1400,opt,name=communications_omni_resources_connected_inbox_poll,json=communicationsOmniResourcesConnectedInboxPoll,proto3,oneof"`
}

type ProductConfig_CommunicationsOmniResourcesConnectedInboxCreated struct {
	CommunicationsOmniResourcesConnectedInboxCreated *BasicConfig `protobuf:"bytes,1401,opt,name=communications_omni_resources_connected_inbox_created,json=communicationsOmniResourcesConnectedInboxCreated,proto3,oneof"`
}

type ProductConfig_DataManagementComplianceComplianceRndQuery struct {
	// data management (10000 - 19999)
	// compliance (10000 - 10999)
	DataManagementComplianceComplianceRndQuery *BasicConfig `protobuf:"bytes,10000,opt,name=data_management_compliance_compliance_rnd_query,json=dataManagementComplianceComplianceRndQuery,proto3,oneof"`
}

type ProductConfig_DataManagementComplianceComplianceRndQueryCached struct {
	DataManagementComplianceComplianceRndQueryCached *BasicConfig `protobuf:"bytes,10001,opt,name=data_management_compliance_compliance_rnd_query_cached,json=dataManagementComplianceComplianceRndQueryCached,proto3,oneof"`
}

func (*ProductConfig_CommunicationsOmniChatAgentMessageUnit) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniChatAgentAttachment) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniChatAgentAccumulatedAttachments) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniChatCustomerMessageUnit) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniChatCustomerAttachment) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniChatCustomerAccumulatedAttachments) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniChatManagerMessageUnit) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniChatManagerAttachment) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniChatManagerAccumulatedAttachments) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniChatSystemMessageUnit) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniChatSystemAttachment) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniChatSystemAccumulatedAttachments) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniEmailAgentMessageUnit) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniEmailAgentSize) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniEmailAgentAccumulatedSize) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniEmailCustomerMessageUnit) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniEmailCustomerSize) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniEmailCustomerAccumulatedSize) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniEmailManagerMessageUnit) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniEmailManagerSize) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniEmailManagerAccumulatedSize) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniEmailSystemMessageUnit) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniEmailSystemSize) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniEmailSystemAccumulatedSize) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniSmsAgentMessageUnit) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniSmsAgentAttatchment) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniSmsAgentAccumulatedAttatchments) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniSmsCustomerMessageUnit) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniSmsCustomerAttatchment) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniSmsCustomerAccumulatedAttatchments) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniSmsManagerMessageUnit) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniSmsManagerAttatchment) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniSmsManagerAccumulatedAttatchments) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniSmsSystemMessageUnit) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniSmsSystemAttatchment) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniSmsSystemAccumulatedAttatchments) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniAgentSeats) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniResourcesConnectedInboxPoll) isProductConfig_Config() {}

func (*ProductConfig_CommunicationsOmniResourcesConnectedInboxCreated) isProductConfig_Config() {}

func (*ProductConfig_DataManagementComplianceComplianceRndQuery) isProductConfig_Config() {}

func (*ProductConfig_DataManagementComplianceComplianceRndQueryCached) isProductConfig_Config() {}

var File_services_billing_entities_v1alpha3_rates_proto protoreflect.FileDescriptor

var file_services_billing_entities_v1alpha3_rates_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x33, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x22, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x33, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2f, 0x6f, 0x6d, 0x6e, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x03, 0x0a, 0x0e, 0x52, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6b, 0x75, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x12, 0x45,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x33, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x49, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6f, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x6e,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x77,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x54, 0x77, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x68, 0x72, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x93,
	0x32, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x8f, 0x01, 0x0a, 0x2b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x26, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x68,
	0x61, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x90, 0x01, 0x0a, 0x29, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x25,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d,
	0x6e, 0x69, 0x43, 0x68, 0x61, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xa9, 0x01, 0x0a, 0x36, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x31,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d,
	0x6e, 0x69, 0x43, 0x68, 0x61, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x95, 0x01, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x29,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d,
	0x6e, 0x69, 0x43, 0x68, 0x61, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x2c, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e,
	0x69, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xf3, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x28, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x68, 0x61, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0xaf, 0x01, 0x0a, 0x39, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0xf4, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x34,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d,
	0x6e, 0x69, 0x43, 0x68, 0x61, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0xfc, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x28, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x94, 0x01, 0x0a, 0x2b, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d,
	0x6e, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xfd, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x27, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0xad, 0x01, 0x0a, 0x38, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xfe,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x33, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x63, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x91, 0x01, 0x0a, 0x2c, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x86, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x27, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69,
	0x43, 0x68, 0x61, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x92, 0x01, 0x0a, 0x2a, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x87, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x26, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x68, 0x61, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xab, 0x01, 0x0a, 0x37, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d,
	0x6e, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61,
	0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x88, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x32, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x68, 0x61, 0x74, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x2c, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0xcc, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x27, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x86, 0x01, 0x0a,
	0x24, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0xcd, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x30, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0xce, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x2b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0xd6, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x2a, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x8c, 0x01, 0x0a, 0x27, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0xd7, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x23, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0xa3,
	0x01, 0x0a, 0x33, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0xd8, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0xe0, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x29, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x8a, 0x01, 0x0a,
	0x26, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0xe1, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x22, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x32, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e,
	0x69, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0xe2, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x2d,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d,
	0x6e, 0x69, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x93, 0x01,
	0x0a, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0xea, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x28, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0xeb, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x21, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x9f,
	0x01, 0x0a, 0x31, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0xec, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x2c, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x8f, 0x01, 0x0a, 0x2a, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0xb0, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4f, 0x6d, 0x6e, 0x69,
	0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x25, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x53,
	0x6d, 0x73, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x92, 0x01, 0x0a, 0x29, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0xb1, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4f, 0x6d, 0x6e,
	0x69, 0x53, 0x6d, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x25, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x4f, 0x6d, 0x6e, 0x69, 0x53, 0x6d, 0x73, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xab, 0x01, 0x0a, 0x36, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f,
	0x73, 0x6d, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0xb2, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4f,
	0x6d, 0x6e, 0x69, 0x53, 0x6d, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x31, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x53, 0x6d, 0x73, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x74, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x73, 0x6d,
	0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0xba, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x33, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x28, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x53, 0x6d, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x98, 0x01,
	0x0a, 0x2c, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xbb,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x53,
	0x6d, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x28,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d,
	0x6e, 0x69, 0x53, 0x6d, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x74, 0x74,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xb1, 0x01, 0x0a, 0x39, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69,
	0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xbc, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x33, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x53, 0x6d, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x34, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x53, 0x6d, 0x73, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x74, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x93, 0x01, 0x0a,
	0x2c, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0xc4, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x53, 0x6d,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x27, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x53, 0x6d, 0x73,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x2b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0xc5, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4f,
	0x6d, 0x6e, 0x69, 0x53, 0x6d, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x27, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x53, 0x6d, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xaf, 0x01, 0x0a, 0x38,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f,
	0x6d, 0x6e, 0x69, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xc6, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x33, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x53, 0x6d, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x33, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x53, 0x6d, 0x73, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x74, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x91, 0x01,
	0x0a, 0x2b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0xce, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x53, 0x6d,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x26, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x53, 0x6d, 0x73,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x94, 0x01, 0x0a, 0x2a, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0xcf, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4f, 0x6d, 0x6e,
	0x69, 0x53, 0x6d, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x26, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x4f, 0x6d, 0x6e, 0x69, 0x53, 0x6d, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x74, 0x74,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xad, 0x01, 0x0a, 0x37, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69,
	0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0xd0, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33,
	0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x53, 0x6d, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x32, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x53, 0x6d, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x74, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x79, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x73, 0x18, 0x94, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1c, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x61, 0x74, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x32, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x18, 0xf8, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x50,
	0x6f, 0x6c, 0x6c, 0x12, 0xa3, 0x01, 0x0a, 0x35, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0xf9, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x30, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x62,
	0x6f, 0x78, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x97, 0x01, 0x0a, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x72, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x90, 0x4e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x2a, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x6e, 0x64, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0xa4, 0x01, 0x0a, 0x36, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x6e,
	0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x91,
	0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x30, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x6e, 0x64, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0xaf, 0x02, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x42,
	0x0a, 0x52, 0x61, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x3b, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0xa2, 0x02, 0x03,
	0x53, 0x42, 0x45, 0xaa, 0x02, 0x22, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0xca, 0x02, 0x22, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x5c, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5c, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0xe2, 0x02, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5c, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x5c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x33, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x25, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3a, 0x3a, 0x42, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x3a, 0x3a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x3a, 0x3a, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_billing_entities_v1alpha3_rates_proto_rawDescOnce sync.Once
	file_services_billing_entities_v1alpha3_rates_proto_rawDescData = file_services_billing_entities_v1alpha3_rates_proto_rawDesc
)

func file_services_billing_entities_v1alpha3_rates_proto_rawDescGZIP() []byte {
	file_services_billing_entities_v1alpha3_rates_proto_rawDescOnce.Do(func() {
		file_services_billing_entities_v1alpha3_rates_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_billing_entities_v1alpha3_rates_proto_rawDescData)
	})
	return file_services_billing_entities_v1alpha3_rates_proto_rawDescData
}

var file_services_billing_entities_v1alpha3_rates_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_services_billing_entities_v1alpha3_rates_proto_goTypes = []any{
	(*RateDefinition)(nil),        // 0: services.billing.entities.v1alpha3.RateDefinition
	(*Product)(nil),               // 1: services.billing.entities.v1alpha3.Product
	(*ProductConfig)(nil),         // 2: services.billing.entities.v1alpha3.ProductConfig
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
	(*BasicConfig)(nil),           // 4: services.billing.entities.v1alpha3.BasicConfig
	(*BasicUnitConfig)(nil),       // 5: services.billing.entities.v1alpha3.BasicUnitConfig
	(*OmniSmsConfig)(nil),         // 6: services.billing.entities.v1alpha3.OmniSmsConfig
	(*OmniSmsUnitConfig)(nil),     // 7: services.billing.entities.v1alpha3.OmniSmsUnitConfig
}
var file_services_billing_entities_v1alpha3_rates_proto_depIdxs = []int32{
	1,  // 0: services.billing.entities.v1alpha3.RateDefinition.product:type_name -> services.billing.entities.v1alpha3.Product
	2,  // 1: services.billing.entities.v1alpha3.RateDefinition.config:type_name -> services.billing.entities.v1alpha3.ProductConfig
	3,  // 2: services.billing.entities.v1alpha3.RateDefinition.create_time:type_name -> google.protobuf.Timestamp
	3,  // 3: services.billing.entities.v1alpha3.RateDefinition.update_time:type_name -> google.protobuf.Timestamp
	3,  // 4: services.billing.entities.v1alpha3.RateDefinition.delete_time:type_name -> google.protobuf.Timestamp
	4,  // 5: services.billing.entities.v1alpha3.ProductConfig.communications_omni_chat_agent_message_unit:type_name -> services.billing.entities.v1alpha3.BasicConfig
	5,  // 6: services.billing.entities.v1alpha3.ProductConfig.communications_omni_chat_agent_attachment:type_name -> services.billing.entities.v1alpha3.BasicUnitConfig
	5,  // 7: services.billing.entities.v1alpha3.ProductConfig.communications_omni_chat_agent_accumulated_attachments:type_name -> services.billing.entities.v1alpha3.BasicUnitConfig
	4,  // 8: services.billing.entities.v1alpha3.ProductConfig.communications_omni_chat_customer_message_unit:type_name -> services.billing.entities.v1alpha3.BasicConfig
	5,  // 9: services.billing.entities.v1alpha3.ProductConfig.communications_omni_chat_customer_attachment:type_name -> services.billing.entities.v1alpha3.BasicUnitConfig
	5,  // 10: services.billing.entities.v1alpha3.ProductConfig.communications_omni_chat_customer_accumulated_attachments:type_name -> services.billing.entities.v1alpha3.BasicUnitConfig
	4,  // 11: services.billing.entities.v1alpha3.ProductConfig.communications_omni_chat_manager_message_unit:type_name -> services.billing.entities.v1alpha3.BasicConfig
	5,  // 12: services.billing.entities.v1alpha3.ProductConfig.communications_omni_chat_manager_attachment:type_name -> services.billing.entities.v1alpha3.BasicUnitConfig
	5,  // 13: services.billing.entities.v1alpha3.ProductConfig.communications_omni_chat_manager_accumulated_attachments:type_name -> services.billing.entities.v1alpha3.BasicUnitConfig
	4,  // 14: services.billing.entities.v1alpha3.ProductConfig.communications_omni_chat_system_message_unit:type_name -> services.billing.entities.v1alpha3.BasicConfig
	5,  // 15: services.billing.entities.v1alpha3.ProductConfig.communications_omni_chat_system_attachment:type_name -> services.billing.entities.v1alpha3.BasicUnitConfig
	5,  // 16: services.billing.entities.v1alpha3.ProductConfig.communications_omni_chat_system_accumulated_attachments:type_name -> services.billing.entities.v1alpha3.BasicUnitConfig
	4,  // 17: services.billing.entities.v1alpha3.ProductConfig.communications_omni_email_agent_message_unit:type_name -> services.billing.entities.v1alpha3.BasicConfig
	5,  // 18: services.billing.entities.v1alpha3.ProductConfig.communications_omni_email_agent_size:type_name -> services.billing.entities.v1alpha3.BasicUnitConfig
	5,  // 19: services.billing.entities.v1alpha3.ProductConfig.communications_omni_email_agent_accumulated_size:type_name -> services.billing.entities.v1alpha3.BasicUnitConfig
	4,  // 20: services.billing.entities.v1alpha3.ProductConfig.communications_omni_email_customer_message_unit:type_name -> services.billing.entities.v1alpha3.BasicConfig
	5,  // 21: services.billing.entities.v1alpha3.ProductConfig.communications_omni_email_customer_size:type_name -> services.billing.entities.v1alpha3.BasicUnitConfig
	5,  // 22: services.billing.entities.v1alpha3.ProductConfig.communications_omni_email_customer_accumulated_size:type_name -> services.billing.entities.v1alpha3.BasicUnitConfig
	4,  // 23: services.billing.entities.v1alpha3.ProductConfig.communications_omni_email_manager_message_unit:type_name -> services.billing.entities.v1alpha3.BasicConfig
	5,  // 24: services.billing.entities.v1alpha3.ProductConfig.communications_omni_email_manager_size:type_name -> services.billing.entities.v1alpha3.BasicUnitConfig
	5,  // 25: services.billing.entities.v1alpha3.ProductConfig.communications_omni_email_manager_accumulated_size:type_name -> services.billing.entities.v1alpha3.BasicUnitConfig
	4,  // 26: services.billing.entities.v1alpha3.ProductConfig.communications_omni_email_system_message_unit:type_name -> services.billing.entities.v1alpha3.BasicConfig
	5,  // 27: services.billing.entities.v1alpha3.ProductConfig.communications_omni_email_system_size:type_name -> services.billing.entities.v1alpha3.BasicUnitConfig
	5,  // 28: services.billing.entities.v1alpha3.ProductConfig.communications_omni_email_system_accumulated_size:type_name -> services.billing.entities.v1alpha3.BasicUnitConfig
	6,  // 29: services.billing.entities.v1alpha3.ProductConfig.communications_omni_sms_agent_message_unit:type_name -> services.billing.entities.v1alpha3.OmniSmsConfig
	7,  // 30: services.billing.entities.v1alpha3.ProductConfig.communications_omni_sms_agent_attatchment:type_name -> services.billing.entities.v1alpha3.OmniSmsUnitConfig
	7,  // 31: services.billing.entities.v1alpha3.ProductConfig.communications_omni_sms_agent_accumulated_attatchments:type_name -> services.billing.entities.v1alpha3.OmniSmsUnitConfig
	6,  // 32: services.billing.entities.v1alpha3.ProductConfig.communications_omni_sms_customer_message_unit:type_name -> services.billing.entities.v1alpha3.OmniSmsConfig
	7,  // 33: services.billing.entities.v1alpha3.ProductConfig.communications_omni_sms_customer_attatchment:type_name -> services.billing.entities.v1alpha3.OmniSmsUnitConfig
	7,  // 34: services.billing.entities.v1alpha3.ProductConfig.communications_omni_sms_customer_accumulated_attatchments:type_name -> services.billing.entities.v1alpha3.OmniSmsUnitConfig
	6,  // 35: services.billing.entities.v1alpha3.ProductConfig.communications_omni_sms_manager_message_unit:type_name -> services.billing.entities.v1alpha3.OmniSmsConfig
	7,  // 36: services.billing.entities.v1alpha3.ProductConfig.communications_omni_sms_manager_attatchment:type_name -> services.billing.entities.v1alpha3.OmniSmsUnitConfig
	7,  // 37: services.billing.entities.v1alpha3.ProductConfig.communications_omni_sms_manager_accumulated_attatchments:type_name -> services.billing.entities.v1alpha3.OmniSmsUnitConfig
	6,  // 38: services.billing.entities.v1alpha3.ProductConfig.communications_omni_sms_system_message_unit:type_name -> services.billing.entities.v1alpha3.OmniSmsConfig
	7,  // 39: services.billing.entities.v1alpha3.ProductConfig.communications_omni_sms_system_attatchment:type_name -> services.billing.entities.v1alpha3.OmniSmsUnitConfig
	7,  // 40: services.billing.entities.v1alpha3.ProductConfig.communications_omni_sms_system_accumulated_attatchments:type_name -> services.billing.entities.v1alpha3.OmniSmsUnitConfig
	4,  // 41: services.billing.entities.v1alpha3.ProductConfig.communications_omni_agent_seats:type_name -> services.billing.entities.v1alpha3.BasicConfig
	4,  // 42: services.billing.entities.v1alpha3.ProductConfig.communications_omni_resources_connected_inbox_poll:type_name -> services.billing.entities.v1alpha3.BasicConfig
	4,  // 43: services.billing.entities.v1alpha3.ProductConfig.communications_omni_resources_connected_inbox_created:type_name -> services.billing.entities.v1alpha3.BasicConfig
	4,  // 44: services.billing.entities.v1alpha3.ProductConfig.data_management_compliance_compliance_rnd_query:type_name -> services.billing.entities.v1alpha3.BasicConfig
	4,  // 45: services.billing.entities.v1alpha3.ProductConfig.data_management_compliance_compliance_rnd_query_cached:type_name -> services.billing.entities.v1alpha3.BasicConfig
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_services_billing_entities_v1alpha3_rates_proto_init() }
func file_services_billing_entities_v1alpha3_rates_proto_init() {
	if File_services_billing_entities_v1alpha3_rates_proto != nil {
		return
	}
	file_services_billing_entities_v1alpha3_modules_proto_init()
	file_services_billing_entities_v1alpha3_omni_proto_init()
	file_services_billing_entities_v1alpha3_rates_proto_msgTypes[2].OneofWrappers = []any{
		(*ProductConfig_CommunicationsOmniChatAgentMessageUnit)(nil),
		(*ProductConfig_CommunicationsOmniChatAgentAttachment)(nil),
		(*ProductConfig_CommunicationsOmniChatAgentAccumulatedAttachments)(nil),
		(*ProductConfig_CommunicationsOmniChatCustomerMessageUnit)(nil),
		(*ProductConfig_CommunicationsOmniChatCustomerAttachment)(nil),
		(*ProductConfig_CommunicationsOmniChatCustomerAccumulatedAttachments)(nil),
		(*ProductConfig_CommunicationsOmniChatManagerMessageUnit)(nil),
		(*ProductConfig_CommunicationsOmniChatManagerAttachment)(nil),
		(*ProductConfig_CommunicationsOmniChatManagerAccumulatedAttachments)(nil),
		(*ProductConfig_CommunicationsOmniChatSystemMessageUnit)(nil),
		(*ProductConfig_CommunicationsOmniChatSystemAttachment)(nil),
		(*ProductConfig_CommunicationsOmniChatSystemAccumulatedAttachments)(nil),
		(*ProductConfig_CommunicationsOmniEmailAgentMessageUnit)(nil),
		(*ProductConfig_CommunicationsOmniEmailAgentSize)(nil),
		(*ProductConfig_CommunicationsOmniEmailAgentAccumulatedSize)(nil),
		(*ProductConfig_CommunicationsOmniEmailCustomerMessageUnit)(nil),
		(*ProductConfig_CommunicationsOmniEmailCustomerSize)(nil),
		(*ProductConfig_CommunicationsOmniEmailCustomerAccumulatedSize)(nil),
		(*ProductConfig_CommunicationsOmniEmailManagerMessageUnit)(nil),
		(*ProductConfig_CommunicationsOmniEmailManagerSize)(nil),
		(*ProductConfig_CommunicationsOmniEmailManagerAccumulatedSize)(nil),
		(*ProductConfig_CommunicationsOmniEmailSystemMessageUnit)(nil),
		(*ProductConfig_CommunicationsOmniEmailSystemSize)(nil),
		(*ProductConfig_CommunicationsOmniEmailSystemAccumulatedSize)(nil),
		(*ProductConfig_CommunicationsOmniSmsAgentMessageUnit)(nil),
		(*ProductConfig_CommunicationsOmniSmsAgentAttatchment)(nil),
		(*ProductConfig_CommunicationsOmniSmsAgentAccumulatedAttatchments)(nil),
		(*ProductConfig_CommunicationsOmniSmsCustomerMessageUnit)(nil),
		(*ProductConfig_CommunicationsOmniSmsCustomerAttatchment)(nil),
		(*ProductConfig_CommunicationsOmniSmsCustomerAccumulatedAttatchments)(nil),
		(*ProductConfig_CommunicationsOmniSmsManagerMessageUnit)(nil),
		(*ProductConfig_CommunicationsOmniSmsManagerAttatchment)(nil),
		(*ProductConfig_CommunicationsOmniSmsManagerAccumulatedAttatchments)(nil),
		(*ProductConfig_CommunicationsOmniSmsSystemMessageUnit)(nil),
		(*ProductConfig_CommunicationsOmniSmsSystemAttatchment)(nil),
		(*ProductConfig_CommunicationsOmniSmsSystemAccumulatedAttatchments)(nil),
		(*ProductConfig_CommunicationsOmniAgentSeats)(nil),
		(*ProductConfig_CommunicationsOmniResourcesConnectedInboxPoll)(nil),
		(*ProductConfig_CommunicationsOmniResourcesConnectedInboxCreated)(nil),
		(*ProductConfig_DataManagementComplianceComplianceRndQuery)(nil),
		(*ProductConfig_DataManagementComplianceComplianceRndQueryCached)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_billing_entities_v1alpha3_rates_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_services_billing_entities_v1alpha3_rates_proto_goTypes,
		DependencyIndexes: file_services_billing_entities_v1alpha3_rates_proto_depIdxs,
		MessageInfos:      file_services_billing_entities_v1alpha3_rates_proto_msgTypes,
	}.Build()
	File_services_billing_entities_v1alpha3_rates_proto = out.File
	file_services_billing_entities_v1alpha3_rates_proto_rawDesc = nil
	file_services_billing_entities_v1alpha3_rates_proto_goTypes = nil
	file_services_billing_entities_v1alpha3_rates_proto_depIdxs = nil
}
