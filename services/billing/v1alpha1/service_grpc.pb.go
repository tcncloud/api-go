// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: services/billing/v1alpha1/service.proto

package billingv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BillingService_CommitBillingPlan_FullMethodName           = "/services.billing.v1alpha1.BillingService/CommitBillingPlan"
	BillingService_CommitDefaultBillingPlan_FullMethodName    = "/services.billing.v1alpha1.BillingService/CommitDefaultBillingPlan"
	BillingService_CreateBillingPlan_FullMethodName           = "/services.billing.v1alpha1.BillingService/CreateBillingPlan"
	BillingService_CreateDefaultBillingPlan_FullMethodName    = "/services.billing.v1alpha1.BillingService/CreateDefaultBillingPlan"
	BillingService_CreateDefaultRateDefinition_FullMethodName = "/services.billing.v1alpha1.BillingService/CreateDefaultRateDefinition"
	BillingService_CreateInvoice_FullMethodName               = "/services.billing.v1alpha1.BillingService/CreateInvoice"
	BillingService_CreateRateDefinition_FullMethodName        = "/services.billing.v1alpha1.BillingService/CreateRateDefinition"
	BillingService_DeleteBillingPlan_FullMethodName           = "/services.billing.v1alpha1.BillingService/DeleteBillingPlan"
	BillingService_DeleteDefaultBillingPlan_FullMethodName    = "/services.billing.v1alpha1.BillingService/DeleteDefaultBillingPlan"
	BillingService_DeleteDefaultRateDefinition_FullMethodName = "/services.billing.v1alpha1.BillingService/DeleteDefaultRateDefinition"
	BillingService_DeleteInvoice_FullMethodName               = "/services.billing.v1alpha1.BillingService/DeleteInvoice"
	BillingService_DeleteRateDefinition_FullMethodName        = "/services.billing.v1alpha1.BillingService/DeleteRateDefinition"
	BillingService_DuplicateBillingPlan_FullMethodName        = "/services.billing.v1alpha1.BillingService/DuplicateBillingPlan"
	BillingService_DuplicateDefaultBillingPlan_FullMethodName = "/services.billing.v1alpha1.BillingService/DuplicateDefaultBillingPlan"
	BillingService_ExportInvoice_FullMethodName               = "/services.billing.v1alpha1.BillingService/ExportInvoice"
	BillingService_GetActiveBillingPlan_FullMethodName        = "/services.billing.v1alpha1.BillingService/GetActiveBillingPlan"
	BillingService_GetBillingPlan_FullMethodName              = "/services.billing.v1alpha1.BillingService/GetBillingPlan"
	BillingService_GetBillingPlanHistory_FullMethodName       = "/services.billing.v1alpha1.BillingService/GetBillingPlanHistory"
	BillingService_GetInvoice_FullMethodName                  = "/services.billing.v1alpha1.BillingService/GetInvoice"
	BillingService_GetRateDefinition_FullMethodName           = "/services.billing.v1alpha1.BillingService/GetRateDefinition"
	BillingService_ListBillingPlans_FullMethodName            = "/services.billing.v1alpha1.BillingService/ListBillingPlans"
	BillingService_ListInvoices_FullMethodName                = "/services.billing.v1alpha1.BillingService/ListInvoices"
	BillingService_ListRateDefinitions_FullMethodName         = "/services.billing.v1alpha1.BillingService/ListRateDefinitions"
	BillingService_UpdateBillingPlan_FullMethodName           = "/services.billing.v1alpha1.BillingService/UpdateBillingPlan"
	BillingService_UpdateDefaultBillingPlan_FullMethodName    = "/services.billing.v1alpha1.BillingService/UpdateDefaultBillingPlan"
	BillingService_UpdateDefaultRateDefinition_FullMethodName = "/services.billing.v1alpha1.BillingService/UpdateDefaultRateDefinition"
	BillingService_UpdateInvoice_FullMethodName               = "/services.billing.v1alpha1.BillingService/UpdateInvoice"
	BillingService_UpdateRateDefinition_FullMethodName        = "/services.billing.v1alpha1.BillingService/UpdateRateDefinition"
)

// BillingServiceClient is the client API for BillingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingServiceClient interface {
	// Commits a billing plan for the ORG, finalizing it's creation and allowing it
	// to become active.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.FailedPrecondition: The billing plan is already committed.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified billing plan doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	CommitBillingPlan(ctx context.Context, in *CommitBillingPlanRequest, opts ...grpc.CallOption) (*CommitBillingPlanResponse, error)
	// Commits a default billing plan for the REGION, finalizing it's creation and allowing it
	// to become active.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//	TCN_BILLING_ADMIN
	//
	// Errors:
	//   - grpc.FailedPrecondition: The default billing plan is already committed.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified default billing plan doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable.
	CommitDefaultBillingPlan(ctx context.Context, in *CommitDefaultBillingPlanRequest, opts ...grpc.CallOption) (*CommitDefaultBillingPlanResponse, error)
	// Creates a billing plan for the ORG.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	CreateBillingPlan(ctx context.Context, in *CreateBillingPlanRequest, opts ...grpc.CallOption) (*CreateBillingPlanResponse, error)
	// Creates the default billing plan for the REGION.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//	TCN_BILLING_ADMIN
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable.
	CreateDefaultBillingPlan(ctx context.Context, in *CreateDefaultBillingPlanRequest, opts ...grpc.CallOption) (*CreateDefaultBillingPlanResponse, error)
	// Creates a default rate definition for a default billing plan for the REGION.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//	TCN_BILLING_ADMIN
	//
	// Errors:
	//   - grpc.AlreadyExists: A rate definition with the same feature already exists.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The default billing plan doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable.
	CreateDefaultRateDefinition(ctx context.Context, in *CreateDefaultRateDefinitionRequest, opts ...grpc.CallOption) (*CreateDefaultRateDefinitionResponse, error)
	// Deprecated: Do not use.
	// Creates an invoice for the ORG for the specified billing cycle.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.AlreadyExists: An invoice already exists for the specified billing cycle.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error)
	// Creates a rate definition for a Billing Plan in an ORG.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.AlreadyExists: A rate definition with the same feature id already exists.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified billing plan or rate definition group doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	CreateRateDefinition(ctx context.Context, in *CreateRateDefinitionRequest, opts ...grpc.CallOption) (*CreateRateDefinitionResponse, error)
	// Deletes an inactive billing plan. A billing plan is inactive if it hasn't started.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.FailedPrecondition: The billing plan is active.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified billing plan doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	DeleteBillingPlan(ctx context.Context, in *DeleteBillingPlanRequest, opts ...grpc.CallOption) (*DeleteBillingPlanResponse, error)
	// Deletes an inactive default billing plan for the REGION. A billing plan is inactive
	// if it hasn't started.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//	TCN_BILLING_ADMIN
	//
	// Errors:
	//   - grpc.FailedPrecondition: The billing plan is active.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The default billing plan doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable.
	DeleteDefaultBillingPlan(ctx context.Context, in *DeleteDefaultBillingPlanRequest, opts ...grpc.CallOption) (*DeleteDefaultBillingPlanResponse, error)
	// Deletes a rate definition from the default billing plan for the REGION.
	//   - The default billing plan must be inactive.
	//
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//	TCN_BILLING_ADMIN
	//
	// Errors:
	//   - grpc.FailedPrecondition: The billing plan is active.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The rate definition doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable.
	DeleteDefaultRateDefinition(ctx context.Context, in *DeleteDefaultRateDefinitionRequest, opts ...grpc.CallOption) (*DeleteDefaultRateDefinitionResponse, error)
	// Deprecated: Do not use.
	// Deletes an invoice.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified invoice doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	DeleteInvoice(ctx context.Context, in *DeleteInvoiceRequest, opts ...grpc.CallOption) (*DeleteInvoiceResponse, error)
	// Deletes a rate definition from a Billing Plan in an ORG.
	//   - The billing plan must be inactive.
	//
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.FailedPrecondition: The billing plan is active.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified billing plan or rate definition group doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	DeleteRateDefinition(ctx context.Context, in *DeleteRateDefinitionRequest, opts ...grpc.CallOption) (*DeleteRateDefinitionResponse, error)
	// Duplicates a billing plan. This copies the billing plan and all of its rate definitions.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified billing plan doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	DuplicateBillingPlan(ctx context.Context, in *DuplicateBillingPlanRequest, opts ...grpc.CallOption) (*DuplicateBillingPlanResponse, error)
	// Duplicates a default billing plan. This copies the billing plan, all of its rate definitions,
	// and all of its rate definition groups and features.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//	TCN_BILLING_ADMIN
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified billing plan doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	DuplicateDefaultBillingPlan(ctx context.Context, in *DuplicateDefaultBillingPlanRequest, opts ...grpc.CallOption) (*DuplicateDefaultBillingPlanResponse, error)
	// Exports an invoice.
	// Required permissions:
	//
	//	TCN_BILLING_ADMIN
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	ExportInvoice(ctx context.Context, in *ExportInvoiceRequest, opts ...grpc.CallOption) (*ExportInvoiceResponse, error)
	// Returns the active billing plan for the ORG or REGION. The active billing plan is a billing plan
	// whose start_time has passed and end_time has not passed. If multiple satisfy that requirement, the
	// newest one is considered active. If no plan is active, it indicates the ORG is using REGION defaults,
	// or that the REGION has not been set up for billing yet.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: There isn't an active billing plan.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	GetActiveBillingPlan(ctx context.Context, in *GetActiveBillingPlanRequest, opts ...grpc.CallOption) (*GetActiveBillingPlanResponse, error)
	// Returns the specified billing plan.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified billing plan doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	GetBillingPlan(ctx context.Context, in *GetBillingPlanRequest, opts ...grpc.CallOption) (*GetBillingPlanResponse, error)
	// Returns the billing plan history for the ORG or REGION.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable.
	GetBillingPlanHistory(ctx context.Context, in *GetBillingPlanHistoryRequest, opts ...grpc.CallOption) (*GetBillingPlanHistoryResponse, error)
	// Deprecated: Do not use.
	// Returns the specified invoice.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified invoice doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	GetInvoice(ctx context.Context, in *GetInvoiceRequest, opts ...grpc.CallOption) (*GetInvoiceResponse, error)
	// Returns the specified rate definition.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified rate definition doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable.
	GetRateDefinition(ctx context.Context, in *GetRateDefinitionRequest, opts ...grpc.CallOption) (*GetRateDefinitionResponse, error)
	// Lists billing plans.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	ListBillingPlans(ctx context.Context, in *ListBillingPlansRequest, opts ...grpc.CallOption) (*ListBillingPlansResponse, error)
	// Deprecated: Do not use.
	// Lists invoices.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	ListInvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error)
	// Lists rate definitions.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable.
	ListRateDefinitions(ctx context.Context, in *ListRateDefinitionsRequest, opts ...grpc.CallOption) (*ListRateDefinitionsResponse, error)
	// Updates an inactive billing plan. A billing plan is inactive if it hasn't started.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.FailedPrecondition: The billing plan is active.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified billing plan doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	UpdateBillingPlan(ctx context.Context, in *UpdateBillingPlanRequest, opts ...grpc.CallOption) (*UpdateBillingPlanResponse, error)
	// Updates an inactive default billing plan for the REGION. A billing plan is inactive
	// if it hasn't started.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//	TCN_BILLING_ADMIN
	//
	// Errors:
	//   - grpc.FailedPrecondition: The billing plan is active.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	UpdateDefaultBillingPlan(ctx context.Context, in *UpdateDefaultBillingPlanRequest, opts ...grpc.CallOption) (*UpdateDefaultBillingPlanResponse, error)
	// Updates a default rate definition.
	//   - The billing plan must be inactive.
	//
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.FailedPrecondition: The billing plan is active.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified rate definition doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable.
	UpdateDefaultRateDefinition(ctx context.Context, in *UpdateDefaultRateDefinitionRequest, opts ...grpc.CallOption) (*UpdateDefaultRateDefinitionResponse, error)
	// Deprecated: Do not use.
	// Updates the specified invoice.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified invoice doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	UpdateInvoice(ctx context.Context, in *UpdateInvoiceRequest, opts ...grpc.CallOption) (*UpdateInvoiceResponse, error)
	// Updates a rate definition.
	//   - The billing plan must be inactive.
	//
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.FailedPrecondition: The billing plan is active.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified rate definition doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable.
	UpdateRateDefinition(ctx context.Context, in *UpdateRateDefinitionRequest, opts ...grpc.CallOption) (*UpdateRateDefinitionResponse, error)
}

type billingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingServiceClient(cc grpc.ClientConnInterface) BillingServiceClient {
	return &billingServiceClient{cc}
}

func (c *billingServiceClient) CommitBillingPlan(ctx context.Context, in *CommitBillingPlanRequest, opts ...grpc.CallOption) (*CommitBillingPlanResponse, error) {
	out := new(CommitBillingPlanResponse)
	err := c.cc.Invoke(ctx, BillingService_CommitBillingPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) CommitDefaultBillingPlan(ctx context.Context, in *CommitDefaultBillingPlanRequest, opts ...grpc.CallOption) (*CommitDefaultBillingPlanResponse, error) {
	out := new(CommitDefaultBillingPlanResponse)
	err := c.cc.Invoke(ctx, BillingService_CommitDefaultBillingPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) CreateBillingPlan(ctx context.Context, in *CreateBillingPlanRequest, opts ...grpc.CallOption) (*CreateBillingPlanResponse, error) {
	out := new(CreateBillingPlanResponse)
	err := c.cc.Invoke(ctx, BillingService_CreateBillingPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) CreateDefaultBillingPlan(ctx context.Context, in *CreateDefaultBillingPlanRequest, opts ...grpc.CallOption) (*CreateDefaultBillingPlanResponse, error) {
	out := new(CreateDefaultBillingPlanResponse)
	err := c.cc.Invoke(ctx, BillingService_CreateDefaultBillingPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) CreateDefaultRateDefinition(ctx context.Context, in *CreateDefaultRateDefinitionRequest, opts ...grpc.CallOption) (*CreateDefaultRateDefinitionResponse, error) {
	out := new(CreateDefaultRateDefinitionResponse)
	err := c.cc.Invoke(ctx, BillingService_CreateDefaultRateDefinition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *billingServiceClient) CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error) {
	out := new(CreateInvoiceResponse)
	err := c.cc.Invoke(ctx, BillingService_CreateInvoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) CreateRateDefinition(ctx context.Context, in *CreateRateDefinitionRequest, opts ...grpc.CallOption) (*CreateRateDefinitionResponse, error) {
	out := new(CreateRateDefinitionResponse)
	err := c.cc.Invoke(ctx, BillingService_CreateRateDefinition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) DeleteBillingPlan(ctx context.Context, in *DeleteBillingPlanRequest, opts ...grpc.CallOption) (*DeleteBillingPlanResponse, error) {
	out := new(DeleteBillingPlanResponse)
	err := c.cc.Invoke(ctx, BillingService_DeleteBillingPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) DeleteDefaultBillingPlan(ctx context.Context, in *DeleteDefaultBillingPlanRequest, opts ...grpc.CallOption) (*DeleteDefaultBillingPlanResponse, error) {
	out := new(DeleteDefaultBillingPlanResponse)
	err := c.cc.Invoke(ctx, BillingService_DeleteDefaultBillingPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) DeleteDefaultRateDefinition(ctx context.Context, in *DeleteDefaultRateDefinitionRequest, opts ...grpc.CallOption) (*DeleteDefaultRateDefinitionResponse, error) {
	out := new(DeleteDefaultRateDefinitionResponse)
	err := c.cc.Invoke(ctx, BillingService_DeleteDefaultRateDefinition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *billingServiceClient) DeleteInvoice(ctx context.Context, in *DeleteInvoiceRequest, opts ...grpc.CallOption) (*DeleteInvoiceResponse, error) {
	out := new(DeleteInvoiceResponse)
	err := c.cc.Invoke(ctx, BillingService_DeleteInvoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) DeleteRateDefinition(ctx context.Context, in *DeleteRateDefinitionRequest, opts ...grpc.CallOption) (*DeleteRateDefinitionResponse, error) {
	out := new(DeleteRateDefinitionResponse)
	err := c.cc.Invoke(ctx, BillingService_DeleteRateDefinition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) DuplicateBillingPlan(ctx context.Context, in *DuplicateBillingPlanRequest, opts ...grpc.CallOption) (*DuplicateBillingPlanResponse, error) {
	out := new(DuplicateBillingPlanResponse)
	err := c.cc.Invoke(ctx, BillingService_DuplicateBillingPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) DuplicateDefaultBillingPlan(ctx context.Context, in *DuplicateDefaultBillingPlanRequest, opts ...grpc.CallOption) (*DuplicateDefaultBillingPlanResponse, error) {
	out := new(DuplicateDefaultBillingPlanResponse)
	err := c.cc.Invoke(ctx, BillingService_DuplicateDefaultBillingPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) ExportInvoice(ctx context.Context, in *ExportInvoiceRequest, opts ...grpc.CallOption) (*ExportInvoiceResponse, error) {
	out := new(ExportInvoiceResponse)
	err := c.cc.Invoke(ctx, BillingService_ExportInvoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetActiveBillingPlan(ctx context.Context, in *GetActiveBillingPlanRequest, opts ...grpc.CallOption) (*GetActiveBillingPlanResponse, error) {
	out := new(GetActiveBillingPlanResponse)
	err := c.cc.Invoke(ctx, BillingService_GetActiveBillingPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetBillingPlan(ctx context.Context, in *GetBillingPlanRequest, opts ...grpc.CallOption) (*GetBillingPlanResponse, error) {
	out := new(GetBillingPlanResponse)
	err := c.cc.Invoke(ctx, BillingService_GetBillingPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetBillingPlanHistory(ctx context.Context, in *GetBillingPlanHistoryRequest, opts ...grpc.CallOption) (*GetBillingPlanHistoryResponse, error) {
	out := new(GetBillingPlanHistoryResponse)
	err := c.cc.Invoke(ctx, BillingService_GetBillingPlanHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *billingServiceClient) GetInvoice(ctx context.Context, in *GetInvoiceRequest, opts ...grpc.CallOption) (*GetInvoiceResponse, error) {
	out := new(GetInvoiceResponse)
	err := c.cc.Invoke(ctx, BillingService_GetInvoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetRateDefinition(ctx context.Context, in *GetRateDefinitionRequest, opts ...grpc.CallOption) (*GetRateDefinitionResponse, error) {
	out := new(GetRateDefinitionResponse)
	err := c.cc.Invoke(ctx, BillingService_GetRateDefinition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) ListBillingPlans(ctx context.Context, in *ListBillingPlansRequest, opts ...grpc.CallOption) (*ListBillingPlansResponse, error) {
	out := new(ListBillingPlansResponse)
	err := c.cc.Invoke(ctx, BillingService_ListBillingPlans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *billingServiceClient) ListInvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error) {
	out := new(ListInvoicesResponse)
	err := c.cc.Invoke(ctx, BillingService_ListInvoices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) ListRateDefinitions(ctx context.Context, in *ListRateDefinitionsRequest, opts ...grpc.CallOption) (*ListRateDefinitionsResponse, error) {
	out := new(ListRateDefinitionsResponse)
	err := c.cc.Invoke(ctx, BillingService_ListRateDefinitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) UpdateBillingPlan(ctx context.Context, in *UpdateBillingPlanRequest, opts ...grpc.CallOption) (*UpdateBillingPlanResponse, error) {
	out := new(UpdateBillingPlanResponse)
	err := c.cc.Invoke(ctx, BillingService_UpdateBillingPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) UpdateDefaultBillingPlan(ctx context.Context, in *UpdateDefaultBillingPlanRequest, opts ...grpc.CallOption) (*UpdateDefaultBillingPlanResponse, error) {
	out := new(UpdateDefaultBillingPlanResponse)
	err := c.cc.Invoke(ctx, BillingService_UpdateDefaultBillingPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) UpdateDefaultRateDefinition(ctx context.Context, in *UpdateDefaultRateDefinitionRequest, opts ...grpc.CallOption) (*UpdateDefaultRateDefinitionResponse, error) {
	out := new(UpdateDefaultRateDefinitionResponse)
	err := c.cc.Invoke(ctx, BillingService_UpdateDefaultRateDefinition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *billingServiceClient) UpdateInvoice(ctx context.Context, in *UpdateInvoiceRequest, opts ...grpc.CallOption) (*UpdateInvoiceResponse, error) {
	out := new(UpdateInvoiceResponse)
	err := c.cc.Invoke(ctx, BillingService_UpdateInvoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) UpdateRateDefinition(ctx context.Context, in *UpdateRateDefinitionRequest, opts ...grpc.CallOption) (*UpdateRateDefinitionResponse, error) {
	out := new(UpdateRateDefinitionResponse)
	err := c.cc.Invoke(ctx, BillingService_UpdateRateDefinition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingServiceServer is the server API for BillingService service.
// All implementations must embed UnimplementedBillingServiceServer
// for forward compatibility
type BillingServiceServer interface {
	// Commits a billing plan for the ORG, finalizing it's creation and allowing it
	// to become active.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.FailedPrecondition: The billing plan is already committed.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified billing plan doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	CommitBillingPlan(context.Context, *CommitBillingPlanRequest) (*CommitBillingPlanResponse, error)
	// Commits a default billing plan for the REGION, finalizing it's creation and allowing it
	// to become active.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//	TCN_BILLING_ADMIN
	//
	// Errors:
	//   - grpc.FailedPrecondition: The default billing plan is already committed.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified default billing plan doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable.
	CommitDefaultBillingPlan(context.Context, *CommitDefaultBillingPlanRequest) (*CommitDefaultBillingPlanResponse, error)
	// Creates a billing plan for the ORG.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	CreateBillingPlan(context.Context, *CreateBillingPlanRequest) (*CreateBillingPlanResponse, error)
	// Creates the default billing plan for the REGION.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//	TCN_BILLING_ADMIN
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable.
	CreateDefaultBillingPlan(context.Context, *CreateDefaultBillingPlanRequest) (*CreateDefaultBillingPlanResponse, error)
	// Creates a default rate definition for a default billing plan for the REGION.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//	TCN_BILLING_ADMIN
	//
	// Errors:
	//   - grpc.AlreadyExists: A rate definition with the same feature already exists.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The default billing plan doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable.
	CreateDefaultRateDefinition(context.Context, *CreateDefaultRateDefinitionRequest) (*CreateDefaultRateDefinitionResponse, error)
	// Deprecated: Do not use.
	// Creates an invoice for the ORG for the specified billing cycle.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.AlreadyExists: An invoice already exists for the specified billing cycle.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	CreateInvoice(context.Context, *CreateInvoiceRequest) (*CreateInvoiceResponse, error)
	// Creates a rate definition for a Billing Plan in an ORG.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.AlreadyExists: A rate definition with the same feature id already exists.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified billing plan or rate definition group doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	CreateRateDefinition(context.Context, *CreateRateDefinitionRequest) (*CreateRateDefinitionResponse, error)
	// Deletes an inactive billing plan. A billing plan is inactive if it hasn't started.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.FailedPrecondition: The billing plan is active.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified billing plan doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	DeleteBillingPlan(context.Context, *DeleteBillingPlanRequest) (*DeleteBillingPlanResponse, error)
	// Deletes an inactive default billing plan for the REGION. A billing plan is inactive
	// if it hasn't started.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//	TCN_BILLING_ADMIN
	//
	// Errors:
	//   - grpc.FailedPrecondition: The billing plan is active.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The default billing plan doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable.
	DeleteDefaultBillingPlan(context.Context, *DeleteDefaultBillingPlanRequest) (*DeleteDefaultBillingPlanResponse, error)
	// Deletes a rate definition from the default billing plan for the REGION.
	//   - The default billing plan must be inactive.
	//
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//	TCN_BILLING_ADMIN
	//
	// Errors:
	//   - grpc.FailedPrecondition: The billing plan is active.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The rate definition doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable.
	DeleteDefaultRateDefinition(context.Context, *DeleteDefaultRateDefinitionRequest) (*DeleteDefaultRateDefinitionResponse, error)
	// Deprecated: Do not use.
	// Deletes an invoice.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified invoice doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	DeleteInvoice(context.Context, *DeleteInvoiceRequest) (*DeleteInvoiceResponse, error)
	// Deletes a rate definition from a Billing Plan in an ORG.
	//   - The billing plan must be inactive.
	//
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.FailedPrecondition: The billing plan is active.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified billing plan or rate definition group doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	DeleteRateDefinition(context.Context, *DeleteRateDefinitionRequest) (*DeleteRateDefinitionResponse, error)
	// Duplicates a billing plan. This copies the billing plan and all of its rate definitions.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified billing plan doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	DuplicateBillingPlan(context.Context, *DuplicateBillingPlanRequest) (*DuplicateBillingPlanResponse, error)
	// Duplicates a default billing plan. This copies the billing plan, all of its rate definitions,
	// and all of its rate definition groups and features.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//	TCN_BILLING_ADMIN
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified billing plan doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	DuplicateDefaultBillingPlan(context.Context, *DuplicateDefaultBillingPlanRequest) (*DuplicateDefaultBillingPlanResponse, error)
	// Exports an invoice.
	// Required permissions:
	//
	//	TCN_BILLING_ADMIN
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	ExportInvoice(context.Context, *ExportInvoiceRequest) (*ExportInvoiceResponse, error)
	// Returns the active billing plan for the ORG or REGION. The active billing plan is a billing plan
	// whose start_time has passed and end_time has not passed. If multiple satisfy that requirement, the
	// newest one is considered active. If no plan is active, it indicates the ORG is using REGION defaults,
	// or that the REGION has not been set up for billing yet.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: There isn't an active billing plan.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	GetActiveBillingPlan(context.Context, *GetActiveBillingPlanRequest) (*GetActiveBillingPlanResponse, error)
	// Returns the specified billing plan.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified billing plan doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	GetBillingPlan(context.Context, *GetBillingPlanRequest) (*GetBillingPlanResponse, error)
	// Returns the billing plan history for the ORG or REGION.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable.
	GetBillingPlanHistory(context.Context, *GetBillingPlanHistoryRequest) (*GetBillingPlanHistoryResponse, error)
	// Deprecated: Do not use.
	// Returns the specified invoice.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified invoice doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	GetInvoice(context.Context, *GetInvoiceRequest) (*GetInvoiceResponse, error)
	// Returns the specified rate definition.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified rate definition doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable.
	GetRateDefinition(context.Context, *GetRateDefinitionRequest) (*GetRateDefinitionResponse, error)
	// Lists billing plans.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	ListBillingPlans(context.Context, *ListBillingPlansRequest) (*ListBillingPlansResponse, error)
	// Deprecated: Do not use.
	// Lists invoices.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	ListInvoices(context.Context, *ListInvoicesRequest) (*ListInvoicesResponse, error)
	// Lists rate definitions.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable.
	ListRateDefinitions(context.Context, *ListRateDefinitionsRequest) (*ListRateDefinitionsResponse, error)
	// Updates an inactive billing plan. A billing plan is inactive if it hasn't started.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.FailedPrecondition: The billing plan is active.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified billing plan doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	UpdateBillingPlan(context.Context, *UpdateBillingPlanRequest) (*UpdateBillingPlanResponse, error)
	// Updates an inactive default billing plan for the REGION. A billing plan is inactive
	// if it hasn't started.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//	TCN_BILLING_ADMIN
	//
	// Errors:
	//   - grpc.FailedPrecondition: The billing plan is active.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	UpdateDefaultBillingPlan(context.Context, *UpdateDefaultBillingPlanRequest) (*UpdateDefaultBillingPlanResponse, error)
	// Updates a default rate definition.
	//   - The billing plan must be inactive.
	//
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.FailedPrecondition: The billing plan is active.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified rate definition doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable.
	UpdateDefaultRateDefinition(context.Context, *UpdateDefaultRateDefinitionRequest) (*UpdateDefaultRateDefinitionResponse, error)
	// Deprecated: Do not use.
	// Updates the specified invoice.
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified invoice doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	UpdateInvoice(context.Context, *UpdateInvoiceRequest) (*UpdateInvoiceResponse, error)
	// Updates a rate definition.
	//   - The billing plan must be inactive.
	//
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.FailedPrecondition: The billing plan is active.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.NotFound: The specified rate definition doesn't exist.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Unavailable: The operation is currently unavailable.
	UpdateRateDefinition(context.Context, *UpdateRateDefinitionRequest) (*UpdateRateDefinitionResponse, error)
	mustEmbedUnimplementedBillingServiceServer()
}

// UnimplementedBillingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBillingServiceServer struct {
}

func (UnimplementedBillingServiceServer) CommitBillingPlan(context.Context, *CommitBillingPlanRequest) (*CommitBillingPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitBillingPlan not implemented")
}
func (UnimplementedBillingServiceServer) CommitDefaultBillingPlan(context.Context, *CommitDefaultBillingPlanRequest) (*CommitDefaultBillingPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitDefaultBillingPlan not implemented")
}
func (UnimplementedBillingServiceServer) CreateBillingPlan(context.Context, *CreateBillingPlanRequest) (*CreateBillingPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBillingPlan not implemented")
}
func (UnimplementedBillingServiceServer) CreateDefaultBillingPlan(context.Context, *CreateDefaultBillingPlanRequest) (*CreateDefaultBillingPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDefaultBillingPlan not implemented")
}
func (UnimplementedBillingServiceServer) CreateDefaultRateDefinition(context.Context, *CreateDefaultRateDefinitionRequest) (*CreateDefaultRateDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDefaultRateDefinition not implemented")
}
func (UnimplementedBillingServiceServer) CreateInvoice(context.Context, *CreateInvoiceRequest) (*CreateInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoice not implemented")
}
func (UnimplementedBillingServiceServer) CreateRateDefinition(context.Context, *CreateRateDefinitionRequest) (*CreateRateDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRateDefinition not implemented")
}
func (UnimplementedBillingServiceServer) DeleteBillingPlan(context.Context, *DeleteBillingPlanRequest) (*DeleteBillingPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBillingPlan not implemented")
}
func (UnimplementedBillingServiceServer) DeleteDefaultBillingPlan(context.Context, *DeleteDefaultBillingPlanRequest) (*DeleteDefaultBillingPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDefaultBillingPlan not implemented")
}
func (UnimplementedBillingServiceServer) DeleteDefaultRateDefinition(context.Context, *DeleteDefaultRateDefinitionRequest) (*DeleteDefaultRateDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDefaultRateDefinition not implemented")
}
func (UnimplementedBillingServiceServer) DeleteInvoice(context.Context, *DeleteInvoiceRequest) (*DeleteInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInvoice not implemented")
}
func (UnimplementedBillingServiceServer) DeleteRateDefinition(context.Context, *DeleteRateDefinitionRequest) (*DeleteRateDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRateDefinition not implemented")
}
func (UnimplementedBillingServiceServer) DuplicateBillingPlan(context.Context, *DuplicateBillingPlanRequest) (*DuplicateBillingPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DuplicateBillingPlan not implemented")
}
func (UnimplementedBillingServiceServer) DuplicateDefaultBillingPlan(context.Context, *DuplicateDefaultBillingPlanRequest) (*DuplicateDefaultBillingPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DuplicateDefaultBillingPlan not implemented")
}
func (UnimplementedBillingServiceServer) ExportInvoice(context.Context, *ExportInvoiceRequest) (*ExportInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportInvoice not implemented")
}
func (UnimplementedBillingServiceServer) GetActiveBillingPlan(context.Context, *GetActiveBillingPlanRequest) (*GetActiveBillingPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveBillingPlan not implemented")
}
func (UnimplementedBillingServiceServer) GetBillingPlan(context.Context, *GetBillingPlanRequest) (*GetBillingPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingPlan not implemented")
}
func (UnimplementedBillingServiceServer) GetBillingPlanHistory(context.Context, *GetBillingPlanHistoryRequest) (*GetBillingPlanHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingPlanHistory not implemented")
}
func (UnimplementedBillingServiceServer) GetInvoice(context.Context, *GetInvoiceRequest) (*GetInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoice not implemented")
}
func (UnimplementedBillingServiceServer) GetRateDefinition(context.Context, *GetRateDefinitionRequest) (*GetRateDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRateDefinition not implemented")
}
func (UnimplementedBillingServiceServer) ListBillingPlans(context.Context, *ListBillingPlansRequest) (*ListBillingPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBillingPlans not implemented")
}
func (UnimplementedBillingServiceServer) ListInvoices(context.Context, *ListInvoicesRequest) (*ListInvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvoices not implemented")
}
func (UnimplementedBillingServiceServer) ListRateDefinitions(context.Context, *ListRateDefinitionsRequest) (*ListRateDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRateDefinitions not implemented")
}
func (UnimplementedBillingServiceServer) UpdateBillingPlan(context.Context, *UpdateBillingPlanRequest) (*UpdateBillingPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBillingPlan not implemented")
}
func (UnimplementedBillingServiceServer) UpdateDefaultBillingPlan(context.Context, *UpdateDefaultBillingPlanRequest) (*UpdateDefaultBillingPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDefaultBillingPlan not implemented")
}
func (UnimplementedBillingServiceServer) UpdateDefaultRateDefinition(context.Context, *UpdateDefaultRateDefinitionRequest) (*UpdateDefaultRateDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDefaultRateDefinition not implemented")
}
func (UnimplementedBillingServiceServer) UpdateInvoice(context.Context, *UpdateInvoiceRequest) (*UpdateInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvoice not implemented")
}
func (UnimplementedBillingServiceServer) UpdateRateDefinition(context.Context, *UpdateRateDefinitionRequest) (*UpdateRateDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRateDefinition not implemented")
}
func (UnimplementedBillingServiceServer) mustEmbedUnimplementedBillingServiceServer() {}

// UnsafeBillingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingServiceServer will
// result in compilation errors.
type UnsafeBillingServiceServer interface {
	mustEmbedUnimplementedBillingServiceServer()
}

func RegisterBillingServiceServer(s grpc.ServiceRegistrar, srv BillingServiceServer) {
	s.RegisterService(&BillingService_ServiceDesc, srv)
}

func _BillingService_CommitBillingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitBillingPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).CommitBillingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_CommitBillingPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).CommitBillingPlan(ctx, req.(*CommitBillingPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_CommitDefaultBillingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitDefaultBillingPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).CommitDefaultBillingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_CommitDefaultBillingPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).CommitDefaultBillingPlan(ctx, req.(*CommitDefaultBillingPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_CreateBillingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBillingPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).CreateBillingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_CreateBillingPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).CreateBillingPlan(ctx, req.(*CreateBillingPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_CreateDefaultBillingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDefaultBillingPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).CreateDefaultBillingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_CreateDefaultBillingPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).CreateDefaultBillingPlan(ctx, req.(*CreateDefaultBillingPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_CreateDefaultRateDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDefaultRateDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).CreateDefaultRateDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_CreateDefaultRateDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).CreateDefaultRateDefinition(ctx, req.(*CreateDefaultRateDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_CreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).CreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_CreateInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).CreateInvoice(ctx, req.(*CreateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_CreateRateDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRateDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).CreateRateDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_CreateRateDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).CreateRateDefinition(ctx, req.(*CreateRateDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_DeleteBillingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBillingPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).DeleteBillingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_DeleteBillingPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).DeleteBillingPlan(ctx, req.(*DeleteBillingPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_DeleteDefaultBillingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDefaultBillingPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).DeleteDefaultBillingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_DeleteDefaultBillingPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).DeleteDefaultBillingPlan(ctx, req.(*DeleteDefaultBillingPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_DeleteDefaultRateDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDefaultRateDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).DeleteDefaultRateDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_DeleteDefaultRateDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).DeleteDefaultRateDefinition(ctx, req.(*DeleteDefaultRateDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_DeleteInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).DeleteInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_DeleteInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).DeleteInvoice(ctx, req.(*DeleteInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_DeleteRateDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRateDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).DeleteRateDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_DeleteRateDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).DeleteRateDefinition(ctx, req.(*DeleteRateDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_DuplicateBillingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DuplicateBillingPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).DuplicateBillingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_DuplicateBillingPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).DuplicateBillingPlan(ctx, req.(*DuplicateBillingPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_DuplicateDefaultBillingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DuplicateDefaultBillingPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).DuplicateDefaultBillingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_DuplicateDefaultBillingPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).DuplicateDefaultBillingPlan(ctx, req.(*DuplicateDefaultBillingPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_ExportInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).ExportInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_ExportInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).ExportInvoice(ctx, req.(*ExportInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetActiveBillingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveBillingPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetActiveBillingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetActiveBillingPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetActiveBillingPlan(ctx, req.(*GetActiveBillingPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetBillingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillingPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetBillingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetBillingPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetBillingPlan(ctx, req.(*GetBillingPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetBillingPlanHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillingPlanHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetBillingPlanHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetBillingPlanHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetBillingPlanHistory(ctx, req.(*GetBillingPlanHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetInvoice(ctx, req.(*GetInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetRateDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRateDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetRateDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetRateDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetRateDefinition(ctx, req.(*GetRateDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_ListBillingPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBillingPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).ListBillingPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_ListBillingPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).ListBillingPlans(ctx, req.(*ListBillingPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_ListInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).ListInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_ListInvoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).ListInvoices(ctx, req.(*ListInvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_ListRateDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRateDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).ListRateDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_ListRateDefinitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).ListRateDefinitions(ctx, req.(*ListRateDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_UpdateBillingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBillingPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).UpdateBillingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_UpdateBillingPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).UpdateBillingPlan(ctx, req.(*UpdateBillingPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_UpdateDefaultBillingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDefaultBillingPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).UpdateDefaultBillingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_UpdateDefaultBillingPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).UpdateDefaultBillingPlan(ctx, req.(*UpdateDefaultBillingPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_UpdateDefaultRateDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDefaultRateDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).UpdateDefaultRateDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_UpdateDefaultRateDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).UpdateDefaultRateDefinition(ctx, req.(*UpdateDefaultRateDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_UpdateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).UpdateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_UpdateInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).UpdateInvoice(ctx, req.(*UpdateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_UpdateRateDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRateDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).UpdateRateDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_UpdateRateDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).UpdateRateDefinition(ctx, req.(*UpdateRateDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingService_ServiceDesc is the grpc.ServiceDesc for BillingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.billing.v1alpha1.BillingService",
	HandlerType: (*BillingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommitBillingPlan",
			Handler:    _BillingService_CommitBillingPlan_Handler,
		},
		{
			MethodName: "CommitDefaultBillingPlan",
			Handler:    _BillingService_CommitDefaultBillingPlan_Handler,
		},
		{
			MethodName: "CreateBillingPlan",
			Handler:    _BillingService_CreateBillingPlan_Handler,
		},
		{
			MethodName: "CreateDefaultBillingPlan",
			Handler:    _BillingService_CreateDefaultBillingPlan_Handler,
		},
		{
			MethodName: "CreateDefaultRateDefinition",
			Handler:    _BillingService_CreateDefaultRateDefinition_Handler,
		},
		{
			MethodName: "CreateInvoice",
			Handler:    _BillingService_CreateInvoice_Handler,
		},
		{
			MethodName: "CreateRateDefinition",
			Handler:    _BillingService_CreateRateDefinition_Handler,
		},
		{
			MethodName: "DeleteBillingPlan",
			Handler:    _BillingService_DeleteBillingPlan_Handler,
		},
		{
			MethodName: "DeleteDefaultBillingPlan",
			Handler:    _BillingService_DeleteDefaultBillingPlan_Handler,
		},
		{
			MethodName: "DeleteDefaultRateDefinition",
			Handler:    _BillingService_DeleteDefaultRateDefinition_Handler,
		},
		{
			MethodName: "DeleteInvoice",
			Handler:    _BillingService_DeleteInvoice_Handler,
		},
		{
			MethodName: "DeleteRateDefinition",
			Handler:    _BillingService_DeleteRateDefinition_Handler,
		},
		{
			MethodName: "DuplicateBillingPlan",
			Handler:    _BillingService_DuplicateBillingPlan_Handler,
		},
		{
			MethodName: "DuplicateDefaultBillingPlan",
			Handler:    _BillingService_DuplicateDefaultBillingPlan_Handler,
		},
		{
			MethodName: "ExportInvoice",
			Handler:    _BillingService_ExportInvoice_Handler,
		},
		{
			MethodName: "GetActiveBillingPlan",
			Handler:    _BillingService_GetActiveBillingPlan_Handler,
		},
		{
			MethodName: "GetBillingPlan",
			Handler:    _BillingService_GetBillingPlan_Handler,
		},
		{
			MethodName: "GetBillingPlanHistory",
			Handler:    _BillingService_GetBillingPlanHistory_Handler,
		},
		{
			MethodName: "GetInvoice",
			Handler:    _BillingService_GetInvoice_Handler,
		},
		{
			MethodName: "GetRateDefinition",
			Handler:    _BillingService_GetRateDefinition_Handler,
		},
		{
			MethodName: "ListBillingPlans",
			Handler:    _BillingService_ListBillingPlans_Handler,
		},
		{
			MethodName: "ListInvoices",
			Handler:    _BillingService_ListInvoices_Handler,
		},
		{
			MethodName: "ListRateDefinitions",
			Handler:    _BillingService_ListRateDefinitions_Handler,
		},
		{
			MethodName: "UpdateBillingPlan",
			Handler:    _BillingService_UpdateBillingPlan_Handler,
		},
		{
			MethodName: "UpdateDefaultBillingPlan",
			Handler:    _BillingService_UpdateDefaultBillingPlan_Handler,
		},
		{
			MethodName: "UpdateDefaultRateDefinition",
			Handler:    _BillingService_UpdateDefaultRateDefinition_Handler,
		},
		{
			MethodName: "UpdateInvoice",
			Handler:    _BillingService_UpdateInvoice_Handler,
		},
		{
			MethodName: "UpdateRateDefinition",
			Handler:    _BillingService_UpdateRateDefinition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/billing/v1alpha1/service.proto",
}
