// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/omnichannel/asm/v1alpha1/service.proto

package asmv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/tcncloud/api-go/services/omnichannel/asm/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AsmServiceName is the fully-qualified name of the AsmService service.
	AsmServiceName = "services.omnichannel.asm.v1alpha1.AsmService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AsmServiceCreateSessionProcedure is the fully-qualified name of the AsmService's CreateSession
	// RPC.
	AsmServiceCreateSessionProcedure = "/services.omnichannel.asm.v1alpha1.AsmService/CreateSession"
	// AsmServiceEndSessionProcedure is the fully-qualified name of the AsmService's EndSession RPC.
	AsmServiceEndSessionProcedure = "/services.omnichannel.asm.v1alpha1.AsmService/EndSession"
	// AsmServiceGetCurrentSessionProcedure is the fully-qualified name of the AsmService's
	// GetCurrentSession RPC.
	AsmServiceGetCurrentSessionProcedure = "/services.omnichannel.asm.v1alpha1.AsmService/GetCurrentSession"
	// AsmServiceEnableVoiceProcedure is the fully-qualified name of the AsmService's EnableVoice RPC.
	AsmServiceEnableVoiceProcedure = "/services.omnichannel.asm.v1alpha1.AsmService/EnableVoice"
	// AsmServiceDisableVoiceProcedure is the fully-qualified name of the AsmService's DisableVoice RPC.
	AsmServiceDisableVoiceProcedure = "/services.omnichannel.asm.v1alpha1.AsmService/DisableVoice"
	// AsmServiceListAsmUserDetailsProcedure is the fully-qualified name of the AsmService's
	// ListAsmUserDetails RPC.
	AsmServiceListAsmUserDetailsProcedure = "/services.omnichannel.asm.v1alpha1.AsmService/ListAsmUserDetails"
	// AsmServicePushEventsProcedure is the fully-qualified name of the AsmService's PushEvents RPC.
	AsmServicePushEventsProcedure = "/services.omnichannel.asm.v1alpha1.AsmService/PushEvents"
)

// AsmServiceClient is a client for the services.omnichannel.asm.v1alpha1.AsmService service.
type AsmServiceClient interface {
	// Creates an agent session and enables the voice channel
	CreateSession(context.Context, *connect_go.Request[v1alpha1.CreateSessionRequest]) (*connect_go.Response[v1alpha1.CreateSessionResponse], error)
	// Closes an asm session and all sub sessions
	EndSession(context.Context, *connect_go.Request[v1alpha1.EndSessionRequest]) (*connect_go.Response[v1alpha1.EndSessionResponse], error)
	// Gets an agent's current asm session
	GetCurrentSession(context.Context, *connect_go.Request[v1alpha1.GetCurrentSessionRequest]) (*connect_go.Response[v1alpha1.GetCurrentSessionResponse], error)
	// Updates the currently active subsession
	EnableVoice(context.Context, *connect_go.Request[v1alpha1.EnableVoiceRequest]) (*connect_go.Response[v1alpha1.EnableVoiceResponse], error)
	DisableVoice(context.Context, *connect_go.Request[v1alpha1.DisableVoiceRequest]) (*connect_go.Response[v1alpha1.DisableVoiceResponse], error)
	// List all Sessions for the given user. Contains statistical enrichments for each agent and their conversations.
	ListAsmUserDetails(context.Context, *connect_go.Request[v1alpha1.ListAsmUserDetailsRequest]) (*connect_go.Response[v1alpha1.ListAsmUserDetailsResponse], error)
	// puah events push a list of events
	PushEvents(context.Context, *connect_go.Request[v1alpha1.PushEventsRequest]) (*connect_go.Response[v1alpha1.PushEventResponse], error)
}

// NewAsmServiceClient constructs a client for the services.omnichannel.asm.v1alpha1.AsmService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAsmServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AsmServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &asmServiceClient{
		createSession: connect_go.NewClient[v1alpha1.CreateSessionRequest, v1alpha1.CreateSessionResponse](
			httpClient,
			baseURL+AsmServiceCreateSessionProcedure,
			opts...,
		),
		endSession: connect_go.NewClient[v1alpha1.EndSessionRequest, v1alpha1.EndSessionResponse](
			httpClient,
			baseURL+AsmServiceEndSessionProcedure,
			opts...,
		),
		getCurrentSession: connect_go.NewClient[v1alpha1.GetCurrentSessionRequest, v1alpha1.GetCurrentSessionResponse](
			httpClient,
			baseURL+AsmServiceGetCurrentSessionProcedure,
			opts...,
		),
		enableVoice: connect_go.NewClient[v1alpha1.EnableVoiceRequest, v1alpha1.EnableVoiceResponse](
			httpClient,
			baseURL+AsmServiceEnableVoiceProcedure,
			opts...,
		),
		disableVoice: connect_go.NewClient[v1alpha1.DisableVoiceRequest, v1alpha1.DisableVoiceResponse](
			httpClient,
			baseURL+AsmServiceDisableVoiceProcedure,
			opts...,
		),
		listAsmUserDetails: connect_go.NewClient[v1alpha1.ListAsmUserDetailsRequest, v1alpha1.ListAsmUserDetailsResponse](
			httpClient,
			baseURL+AsmServiceListAsmUserDetailsProcedure,
			opts...,
		),
		pushEvents: connect_go.NewClient[v1alpha1.PushEventsRequest, v1alpha1.PushEventResponse](
			httpClient,
			baseURL+AsmServicePushEventsProcedure,
			opts...,
		),
	}
}

// asmServiceClient implements AsmServiceClient.
type asmServiceClient struct {
	createSession      *connect_go.Client[v1alpha1.CreateSessionRequest, v1alpha1.CreateSessionResponse]
	endSession         *connect_go.Client[v1alpha1.EndSessionRequest, v1alpha1.EndSessionResponse]
	getCurrentSession  *connect_go.Client[v1alpha1.GetCurrentSessionRequest, v1alpha1.GetCurrentSessionResponse]
	enableVoice        *connect_go.Client[v1alpha1.EnableVoiceRequest, v1alpha1.EnableVoiceResponse]
	disableVoice       *connect_go.Client[v1alpha1.DisableVoiceRequest, v1alpha1.DisableVoiceResponse]
	listAsmUserDetails *connect_go.Client[v1alpha1.ListAsmUserDetailsRequest, v1alpha1.ListAsmUserDetailsResponse]
	pushEvents         *connect_go.Client[v1alpha1.PushEventsRequest, v1alpha1.PushEventResponse]
}

// CreateSession calls services.omnichannel.asm.v1alpha1.AsmService.CreateSession.
func (c *asmServiceClient) CreateSession(ctx context.Context, req *connect_go.Request[v1alpha1.CreateSessionRequest]) (*connect_go.Response[v1alpha1.CreateSessionResponse], error) {
	return c.createSession.CallUnary(ctx, req)
}

// EndSession calls services.omnichannel.asm.v1alpha1.AsmService.EndSession.
func (c *asmServiceClient) EndSession(ctx context.Context, req *connect_go.Request[v1alpha1.EndSessionRequest]) (*connect_go.Response[v1alpha1.EndSessionResponse], error) {
	return c.endSession.CallUnary(ctx, req)
}

// GetCurrentSession calls services.omnichannel.asm.v1alpha1.AsmService.GetCurrentSession.
func (c *asmServiceClient) GetCurrentSession(ctx context.Context, req *connect_go.Request[v1alpha1.GetCurrentSessionRequest]) (*connect_go.Response[v1alpha1.GetCurrentSessionResponse], error) {
	return c.getCurrentSession.CallUnary(ctx, req)
}

// EnableVoice calls services.omnichannel.asm.v1alpha1.AsmService.EnableVoice.
func (c *asmServiceClient) EnableVoice(ctx context.Context, req *connect_go.Request[v1alpha1.EnableVoiceRequest]) (*connect_go.Response[v1alpha1.EnableVoiceResponse], error) {
	return c.enableVoice.CallUnary(ctx, req)
}

// DisableVoice calls services.omnichannel.asm.v1alpha1.AsmService.DisableVoice.
func (c *asmServiceClient) DisableVoice(ctx context.Context, req *connect_go.Request[v1alpha1.DisableVoiceRequest]) (*connect_go.Response[v1alpha1.DisableVoiceResponse], error) {
	return c.disableVoice.CallUnary(ctx, req)
}

// ListAsmUserDetails calls services.omnichannel.asm.v1alpha1.AsmService.ListAsmUserDetails.
func (c *asmServiceClient) ListAsmUserDetails(ctx context.Context, req *connect_go.Request[v1alpha1.ListAsmUserDetailsRequest]) (*connect_go.Response[v1alpha1.ListAsmUserDetailsResponse], error) {
	return c.listAsmUserDetails.CallUnary(ctx, req)
}

// PushEvents calls services.omnichannel.asm.v1alpha1.AsmService.PushEvents.
func (c *asmServiceClient) PushEvents(ctx context.Context, req *connect_go.Request[v1alpha1.PushEventsRequest]) (*connect_go.Response[v1alpha1.PushEventResponse], error) {
	return c.pushEvents.CallUnary(ctx, req)
}

// AsmServiceHandler is an implementation of the services.omnichannel.asm.v1alpha1.AsmService
// service.
type AsmServiceHandler interface {
	// Creates an agent session and enables the voice channel
	CreateSession(context.Context, *connect_go.Request[v1alpha1.CreateSessionRequest]) (*connect_go.Response[v1alpha1.CreateSessionResponse], error)
	// Closes an asm session and all sub sessions
	EndSession(context.Context, *connect_go.Request[v1alpha1.EndSessionRequest]) (*connect_go.Response[v1alpha1.EndSessionResponse], error)
	// Gets an agent's current asm session
	GetCurrentSession(context.Context, *connect_go.Request[v1alpha1.GetCurrentSessionRequest]) (*connect_go.Response[v1alpha1.GetCurrentSessionResponse], error)
	// Updates the currently active subsession
	EnableVoice(context.Context, *connect_go.Request[v1alpha1.EnableVoiceRequest]) (*connect_go.Response[v1alpha1.EnableVoiceResponse], error)
	DisableVoice(context.Context, *connect_go.Request[v1alpha1.DisableVoiceRequest]) (*connect_go.Response[v1alpha1.DisableVoiceResponse], error)
	// List all Sessions for the given user. Contains statistical enrichments for each agent and their conversations.
	ListAsmUserDetails(context.Context, *connect_go.Request[v1alpha1.ListAsmUserDetailsRequest]) (*connect_go.Response[v1alpha1.ListAsmUserDetailsResponse], error)
	// puah events push a list of events
	PushEvents(context.Context, *connect_go.Request[v1alpha1.PushEventsRequest]) (*connect_go.Response[v1alpha1.PushEventResponse], error)
}

// NewAsmServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAsmServiceHandler(svc AsmServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	asmServiceCreateSessionHandler := connect_go.NewUnaryHandler(
		AsmServiceCreateSessionProcedure,
		svc.CreateSession,
		opts...,
	)
	asmServiceEndSessionHandler := connect_go.NewUnaryHandler(
		AsmServiceEndSessionProcedure,
		svc.EndSession,
		opts...,
	)
	asmServiceGetCurrentSessionHandler := connect_go.NewUnaryHandler(
		AsmServiceGetCurrentSessionProcedure,
		svc.GetCurrentSession,
		opts...,
	)
	asmServiceEnableVoiceHandler := connect_go.NewUnaryHandler(
		AsmServiceEnableVoiceProcedure,
		svc.EnableVoice,
		opts...,
	)
	asmServiceDisableVoiceHandler := connect_go.NewUnaryHandler(
		AsmServiceDisableVoiceProcedure,
		svc.DisableVoice,
		opts...,
	)
	asmServiceListAsmUserDetailsHandler := connect_go.NewUnaryHandler(
		AsmServiceListAsmUserDetailsProcedure,
		svc.ListAsmUserDetails,
		opts...,
	)
	asmServicePushEventsHandler := connect_go.NewUnaryHandler(
		AsmServicePushEventsProcedure,
		svc.PushEvents,
		opts...,
	)
	return "/services.omnichannel.asm.v1alpha1.AsmService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AsmServiceCreateSessionProcedure:
			asmServiceCreateSessionHandler.ServeHTTP(w, r)
		case AsmServiceEndSessionProcedure:
			asmServiceEndSessionHandler.ServeHTTP(w, r)
		case AsmServiceGetCurrentSessionProcedure:
			asmServiceGetCurrentSessionHandler.ServeHTTP(w, r)
		case AsmServiceEnableVoiceProcedure:
			asmServiceEnableVoiceHandler.ServeHTTP(w, r)
		case AsmServiceDisableVoiceProcedure:
			asmServiceDisableVoiceHandler.ServeHTTP(w, r)
		case AsmServiceListAsmUserDetailsProcedure:
			asmServiceListAsmUserDetailsHandler.ServeHTTP(w, r)
		case AsmServicePushEventsProcedure:
			asmServicePushEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAsmServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAsmServiceHandler struct{}

func (UnimplementedAsmServiceHandler) CreateSession(context.Context, *connect_go.Request[v1alpha1.CreateSessionRequest]) (*connect_go.Response[v1alpha1.CreateSessionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.omnichannel.asm.v1alpha1.AsmService.CreateSession is not implemented"))
}

func (UnimplementedAsmServiceHandler) EndSession(context.Context, *connect_go.Request[v1alpha1.EndSessionRequest]) (*connect_go.Response[v1alpha1.EndSessionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.omnichannel.asm.v1alpha1.AsmService.EndSession is not implemented"))
}

func (UnimplementedAsmServiceHandler) GetCurrentSession(context.Context, *connect_go.Request[v1alpha1.GetCurrentSessionRequest]) (*connect_go.Response[v1alpha1.GetCurrentSessionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.omnichannel.asm.v1alpha1.AsmService.GetCurrentSession is not implemented"))
}

func (UnimplementedAsmServiceHandler) EnableVoice(context.Context, *connect_go.Request[v1alpha1.EnableVoiceRequest]) (*connect_go.Response[v1alpha1.EnableVoiceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.omnichannel.asm.v1alpha1.AsmService.EnableVoice is not implemented"))
}

func (UnimplementedAsmServiceHandler) DisableVoice(context.Context, *connect_go.Request[v1alpha1.DisableVoiceRequest]) (*connect_go.Response[v1alpha1.DisableVoiceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.omnichannel.asm.v1alpha1.AsmService.DisableVoice is not implemented"))
}

func (UnimplementedAsmServiceHandler) ListAsmUserDetails(context.Context, *connect_go.Request[v1alpha1.ListAsmUserDetailsRequest]) (*connect_go.Response[v1alpha1.ListAsmUserDetailsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.omnichannel.asm.v1alpha1.AsmService.ListAsmUserDetails is not implemented"))
}

func (UnimplementedAsmServiceHandler) PushEvents(context.Context, *connect_go.Request[v1alpha1.PushEventsRequest]) (*connect_go.Response[v1alpha1.PushEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.omnichannel.asm.v1alpha1.AsmService.PushEvents is not implemented"))
}
