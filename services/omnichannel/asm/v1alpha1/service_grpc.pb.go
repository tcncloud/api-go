// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: services/omnichannel/asm/v1alpha1/service.proto

package asmv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AsmService_CreateSession_FullMethodName      = "/services.omnichannel.asm.v1alpha1.AsmService/CreateSession"
	AsmService_EndSession_FullMethodName         = "/services.omnichannel.asm.v1alpha1.AsmService/EndSession"
	AsmService_GetCurrentSession_FullMethodName  = "/services.omnichannel.asm.v1alpha1.AsmService/GetCurrentSession"
	AsmService_EnableVoice_FullMethodName        = "/services.omnichannel.asm.v1alpha1.AsmService/EnableVoice"
	AsmService_DisableVoice_FullMethodName       = "/services.omnichannel.asm.v1alpha1.AsmService/DisableVoice"
	AsmService_ListAsmUserDetails_FullMethodName = "/services.omnichannel.asm.v1alpha1.AsmService/ListAsmUserDetails"
	AsmService_PushEvents_FullMethodName         = "/services.omnichannel.asm.v1alpha1.AsmService/PushEvents"
)

// AsmServiceClient is the client API for AsmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AsmServiceClient interface {
	// Creates an agent session and enables the voice channel
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	// Closes an asm session and all sub sessions
	EndSession(ctx context.Context, in *EndSessionRequest, opts ...grpc.CallOption) (*EndSessionResponse, error)
	// Gets an agent's current asm session
	GetCurrentSession(ctx context.Context, in *GetCurrentSessionRequest, opts ...grpc.CallOption) (*GetCurrentSessionResponse, error)
	// Updates the currently active subsession
	EnableVoice(ctx context.Context, in *EnableVoiceRequest, opts ...grpc.CallOption) (*EnableVoiceResponse, error)
	DisableVoice(ctx context.Context, in *DisableVoiceRequest, opts ...grpc.CallOption) (*DisableVoiceResponse, error)
	// List all Sessions for the given user. Contains statistical enrichments for each agent and their conversations.
	ListAsmUserDetails(ctx context.Context, in *ListAsmUserDetailsRequest, opts ...grpc.CallOption) (*ListAsmUserDetailsResponse, error)
	// puah events push a list of events
	PushEvents(ctx context.Context, in *PushEventsRequest, opts ...grpc.CallOption) (*PushEventResponse, error)
}

type asmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAsmServiceClient(cc grpc.ClientConnInterface) AsmServiceClient {
	return &asmServiceClient{cc}
}

func (c *asmServiceClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, AsmService_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmServiceClient) EndSession(ctx context.Context, in *EndSessionRequest, opts ...grpc.CallOption) (*EndSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndSessionResponse)
	err := c.cc.Invoke(ctx, AsmService_EndSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmServiceClient) GetCurrentSession(ctx context.Context, in *GetCurrentSessionRequest, opts ...grpc.CallOption) (*GetCurrentSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentSessionResponse)
	err := c.cc.Invoke(ctx, AsmService_GetCurrentSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmServiceClient) EnableVoice(ctx context.Context, in *EnableVoiceRequest, opts ...grpc.CallOption) (*EnableVoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableVoiceResponse)
	err := c.cc.Invoke(ctx, AsmService_EnableVoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmServiceClient) DisableVoice(ctx context.Context, in *DisableVoiceRequest, opts ...grpc.CallOption) (*DisableVoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableVoiceResponse)
	err := c.cc.Invoke(ctx, AsmService_DisableVoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmServiceClient) ListAsmUserDetails(ctx context.Context, in *ListAsmUserDetailsRequest, opts ...grpc.CallOption) (*ListAsmUserDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAsmUserDetailsResponse)
	err := c.cc.Invoke(ctx, AsmService_ListAsmUserDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmServiceClient) PushEvents(ctx context.Context, in *PushEventsRequest, opts ...grpc.CallOption) (*PushEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushEventResponse)
	err := c.cc.Invoke(ctx, AsmService_PushEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsmServiceServer is the server API for AsmService service.
// All implementations must embed UnimplementedAsmServiceServer
// for forward compatibility.
type AsmServiceServer interface {
	// Creates an agent session and enables the voice channel
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	// Closes an asm session and all sub sessions
	EndSession(context.Context, *EndSessionRequest) (*EndSessionResponse, error)
	// Gets an agent's current asm session
	GetCurrentSession(context.Context, *GetCurrentSessionRequest) (*GetCurrentSessionResponse, error)
	// Updates the currently active subsession
	EnableVoice(context.Context, *EnableVoiceRequest) (*EnableVoiceResponse, error)
	DisableVoice(context.Context, *DisableVoiceRequest) (*DisableVoiceResponse, error)
	// List all Sessions for the given user. Contains statistical enrichments for each agent and their conversations.
	ListAsmUserDetails(context.Context, *ListAsmUserDetailsRequest) (*ListAsmUserDetailsResponse, error)
	// puah events push a list of events
	PushEvents(context.Context, *PushEventsRequest) (*PushEventResponse, error)
	mustEmbedUnimplementedAsmServiceServer()
}

// UnimplementedAsmServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAsmServiceServer struct{}

func (UnimplementedAsmServiceServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedAsmServiceServer) EndSession(context.Context, *EndSessionRequest) (*EndSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndSession not implemented")
}
func (UnimplementedAsmServiceServer) GetCurrentSession(context.Context, *GetCurrentSessionRequest) (*GetCurrentSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentSession not implemented")
}
func (UnimplementedAsmServiceServer) EnableVoice(context.Context, *EnableVoiceRequest) (*EnableVoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableVoice not implemented")
}
func (UnimplementedAsmServiceServer) DisableVoice(context.Context, *DisableVoiceRequest) (*DisableVoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableVoice not implemented")
}
func (UnimplementedAsmServiceServer) ListAsmUserDetails(context.Context, *ListAsmUserDetailsRequest) (*ListAsmUserDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAsmUserDetails not implemented")
}
func (UnimplementedAsmServiceServer) PushEvents(context.Context, *PushEventsRequest) (*PushEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushEvents not implemented")
}
func (UnimplementedAsmServiceServer) mustEmbedUnimplementedAsmServiceServer() {}
func (UnimplementedAsmServiceServer) testEmbeddedByValue()                    {}

// UnsafeAsmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AsmServiceServer will
// result in compilation errors.
type UnsafeAsmServiceServer interface {
	mustEmbedUnimplementedAsmServiceServer()
}

func RegisterAsmServiceServer(s grpc.ServiceRegistrar, srv AsmServiceServer) {
	// If the following call pancis, it indicates UnimplementedAsmServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AsmService_ServiceDesc, srv)
}

func _AsmService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsmService_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmServiceServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsmService_EndSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmServiceServer).EndSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsmService_EndSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmServiceServer).EndSession(ctx, req.(*EndSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsmService_GetCurrentSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmServiceServer).GetCurrentSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsmService_GetCurrentSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmServiceServer).GetCurrentSession(ctx, req.(*GetCurrentSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsmService_EnableVoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableVoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmServiceServer).EnableVoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsmService_EnableVoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmServiceServer).EnableVoice(ctx, req.(*EnableVoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsmService_DisableVoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableVoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmServiceServer).DisableVoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsmService_DisableVoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmServiceServer).DisableVoice(ctx, req.(*DisableVoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsmService_ListAsmUserDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAsmUserDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmServiceServer).ListAsmUserDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsmService_ListAsmUserDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmServiceServer).ListAsmUserDetails(ctx, req.(*ListAsmUserDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsmService_PushEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmServiceServer).PushEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsmService_PushEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmServiceServer).PushEvents(ctx, req.(*PushEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AsmService_ServiceDesc is the grpc.ServiceDesc for AsmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AsmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.omnichannel.asm.v1alpha1.AsmService",
	HandlerType: (*AsmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _AsmService_CreateSession_Handler,
		},
		{
			MethodName: "EndSession",
			Handler:    _AsmService_EndSession_Handler,
		},
		{
			MethodName: "GetCurrentSession",
			Handler:    _AsmService_GetCurrentSession_Handler,
		},
		{
			MethodName: "EnableVoice",
			Handler:    _AsmService_EnableVoice_Handler,
		},
		{
			MethodName: "DisableVoice",
			Handler:    _AsmService_DisableVoice_Handler,
		},
		{
			MethodName: "ListAsmUserDetails",
			Handler:    _AsmService_ListAsmUserDetails_Handler,
		},
		{
			MethodName: "PushEvents",
			Handler:    _AsmService_PushEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/omnichannel/asm/v1alpha1/service.proto",
}
