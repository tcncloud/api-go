// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/omnichannel/tasks/v1alpha1/service.proto

package tasksv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/tcncloud/api-go/services/omnichannel/tasks/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TasksServiceName is the fully-qualified name of the TasksService service.
	TasksServiceName = "services.omnichannel.tasks.v1alpha1.TasksService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TasksServiceCancelTasksProcedure is the fully-qualified name of the TasksService's CancelTasks
	// RPC.
	TasksServiceCancelTasksProcedure = "/services.omnichannel.tasks.v1alpha1.TasksService/CancelTasks"
)

// TasksServiceClient is a client for the services.omnichannel.tasks.v1alpha1.TasksService service.
type TasksServiceClient interface {
	CancelTasks(context.Context, *connect_go.Request[v1alpha1.CancelTasksRequest]) (*connect_go.Response[v1alpha1.CancelTasksResponse], error)
}

// NewTasksServiceClient constructs a client for the
// services.omnichannel.tasks.v1alpha1.TasksService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTasksServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TasksServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tasksServiceClient{
		cancelTasks: connect_go.NewClient[v1alpha1.CancelTasksRequest, v1alpha1.CancelTasksResponse](
			httpClient,
			baseURL+TasksServiceCancelTasksProcedure,
			opts...,
		),
	}
}

// tasksServiceClient implements TasksServiceClient.
type tasksServiceClient struct {
	cancelTasks *connect_go.Client[v1alpha1.CancelTasksRequest, v1alpha1.CancelTasksResponse]
}

// CancelTasks calls services.omnichannel.tasks.v1alpha1.TasksService.CancelTasks.
func (c *tasksServiceClient) CancelTasks(ctx context.Context, req *connect_go.Request[v1alpha1.CancelTasksRequest]) (*connect_go.Response[v1alpha1.CancelTasksResponse], error) {
	return c.cancelTasks.CallUnary(ctx, req)
}

// TasksServiceHandler is an implementation of the services.omnichannel.tasks.v1alpha1.TasksService
// service.
type TasksServiceHandler interface {
	CancelTasks(context.Context, *connect_go.Request[v1alpha1.CancelTasksRequest]) (*connect_go.Response[v1alpha1.CancelTasksResponse], error)
}

// NewTasksServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTasksServiceHandler(svc TasksServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	tasksServiceCancelTasksHandler := connect_go.NewUnaryHandler(
		TasksServiceCancelTasksProcedure,
		svc.CancelTasks,
		opts...,
	)
	return "/services.omnichannel.tasks.v1alpha1.TasksService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TasksServiceCancelTasksProcedure:
			tasksServiceCancelTasksHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTasksServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTasksServiceHandler struct{}

func (UnimplementedTasksServiceHandler) CancelTasks(context.Context, *connect_go.Request[v1alpha1.CancelTasksRequest]) (*connect_go.Response[v1alpha1.CancelTasksResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.omnichannel.tasks.v1alpha1.TasksService.CancelTasks is not implemented"))
}
