// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/omnichannel/instant/v1alpha1/service.proto

package instantv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/tcncloud/api-go/services/omnichannel/instant/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// InstantDataServiceName is the fully-qualified name of the InstantDataService service.
	InstantDataServiceName = "services.omnichannel.instant.v1alpha1.InstantDataService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InstantDataServiceStreamAgentEventsProcedure is the fully-qualified name of the
	// InstantDataService's StreamAgentEvents RPC.
	InstantDataServiceStreamAgentEventsProcedure = "/services.omnichannel.instant.v1alpha1.InstantDataService/StreamAgentEvents"
	// InstantDataServiceStreamCallerEventsProcedure is the fully-qualified name of the
	// InstantDataService's StreamCallerEvents RPC.
	InstantDataServiceStreamCallerEventsProcedure = "/services.omnichannel.instant.v1alpha1.InstantDataService/StreamCallerEvents"
)

// InstantDataServiceClient is a client for the
// services.omnichannel.instant.v1alpha1.InstantDataService service.
type InstantDataServiceClient interface {
	StreamAgentEvents(context.Context, *connect_go.Request[v1alpha1.StreamAgentEventsRequest]) (*connect_go.ServerStreamForClient[v1alpha1.StreamAgentEventsResponse], error)
	StreamCallerEvents(context.Context, *connect_go.Request[v1alpha1.StreamCallerEventsRequest]) (*connect_go.ServerStreamForClient[v1alpha1.StreamCallerEventsResponse], error)
}

// NewInstantDataServiceClient constructs a client for the
// services.omnichannel.instant.v1alpha1.InstantDataService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInstantDataServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) InstantDataServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &instantDataServiceClient{
		streamAgentEvents: connect_go.NewClient[v1alpha1.StreamAgentEventsRequest, v1alpha1.StreamAgentEventsResponse](
			httpClient,
			baseURL+InstantDataServiceStreamAgentEventsProcedure,
			opts...,
		),
		streamCallerEvents: connect_go.NewClient[v1alpha1.StreamCallerEventsRequest, v1alpha1.StreamCallerEventsResponse](
			httpClient,
			baseURL+InstantDataServiceStreamCallerEventsProcedure,
			opts...,
		),
	}
}

// instantDataServiceClient implements InstantDataServiceClient.
type instantDataServiceClient struct {
	streamAgentEvents  *connect_go.Client[v1alpha1.StreamAgentEventsRequest, v1alpha1.StreamAgentEventsResponse]
	streamCallerEvents *connect_go.Client[v1alpha1.StreamCallerEventsRequest, v1alpha1.StreamCallerEventsResponse]
}

// StreamAgentEvents calls
// services.omnichannel.instant.v1alpha1.InstantDataService.StreamAgentEvents.
func (c *instantDataServiceClient) StreamAgentEvents(ctx context.Context, req *connect_go.Request[v1alpha1.StreamAgentEventsRequest]) (*connect_go.ServerStreamForClient[v1alpha1.StreamAgentEventsResponse], error) {
	return c.streamAgentEvents.CallServerStream(ctx, req)
}

// StreamCallerEvents calls
// services.omnichannel.instant.v1alpha1.InstantDataService.StreamCallerEvents.
func (c *instantDataServiceClient) StreamCallerEvents(ctx context.Context, req *connect_go.Request[v1alpha1.StreamCallerEventsRequest]) (*connect_go.ServerStreamForClient[v1alpha1.StreamCallerEventsResponse], error) {
	return c.streamCallerEvents.CallServerStream(ctx, req)
}

// InstantDataServiceHandler is an implementation of the
// services.omnichannel.instant.v1alpha1.InstantDataService service.
type InstantDataServiceHandler interface {
	StreamAgentEvents(context.Context, *connect_go.Request[v1alpha1.StreamAgentEventsRequest], *connect_go.ServerStream[v1alpha1.StreamAgentEventsResponse]) error
	StreamCallerEvents(context.Context, *connect_go.Request[v1alpha1.StreamCallerEventsRequest], *connect_go.ServerStream[v1alpha1.StreamCallerEventsResponse]) error
}

// NewInstantDataServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInstantDataServiceHandler(svc InstantDataServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	instantDataServiceStreamAgentEventsHandler := connect_go.NewServerStreamHandler(
		InstantDataServiceStreamAgentEventsProcedure,
		svc.StreamAgentEvents,
		opts...,
	)
	instantDataServiceStreamCallerEventsHandler := connect_go.NewServerStreamHandler(
		InstantDataServiceStreamCallerEventsProcedure,
		svc.StreamCallerEvents,
		opts...,
	)
	return "/services.omnichannel.instant.v1alpha1.InstantDataService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InstantDataServiceStreamAgentEventsProcedure:
			instantDataServiceStreamAgentEventsHandler.ServeHTTP(w, r)
		case InstantDataServiceStreamCallerEventsProcedure:
			instantDataServiceStreamCallerEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInstantDataServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInstantDataServiceHandler struct{}

func (UnimplementedInstantDataServiceHandler) StreamAgentEvents(context.Context, *connect_go.Request[v1alpha1.StreamAgentEventsRequest], *connect_go.ServerStream[v1alpha1.StreamAgentEventsResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.omnichannel.instant.v1alpha1.InstantDataService.StreamAgentEvents is not implemented"))
}

func (UnimplementedInstantDataServiceHandler) StreamCallerEvents(context.Context, *connect_go.Request[v1alpha1.StreamCallerEventsRequest], *connect_go.ServerStream[v1alpha1.StreamCallerEventsResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.omnichannel.instant.v1alpha1.InstantDataService.StreamCallerEvents is not implemented"))
}
