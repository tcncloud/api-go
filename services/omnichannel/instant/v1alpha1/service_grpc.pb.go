// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: services/omnichannel/instant/v1alpha1/service.proto

package instantv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	InstantDataService_StreamAgentEvents_FullMethodName  = "/services.omnichannel.instant.v1alpha1.InstantDataService/StreamAgentEvents"
	InstantDataService_StreamCallerEvents_FullMethodName = "/services.omnichannel.instant.v1alpha1.InstantDataService/StreamCallerEvents"
)

// InstantDataServiceClient is the client API for InstantDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstantDataServiceClient interface {
	StreamAgentEvents(ctx context.Context, in *StreamAgentEventsRequest, opts ...grpc.CallOption) (InstantDataService_StreamAgentEventsClient, error)
	StreamCallerEvents(ctx context.Context, in *StreamCallerEventsRequest, opts ...grpc.CallOption) (InstantDataService_StreamCallerEventsClient, error)
}

type instantDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInstantDataServiceClient(cc grpc.ClientConnInterface) InstantDataServiceClient {
	return &instantDataServiceClient{cc}
}

func (c *instantDataServiceClient) StreamAgentEvents(ctx context.Context, in *StreamAgentEventsRequest, opts ...grpc.CallOption) (InstantDataService_StreamAgentEventsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &InstantDataService_ServiceDesc.Streams[0], InstantDataService_StreamAgentEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &instantDataServiceStreamAgentEventsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InstantDataService_StreamAgentEventsClient interface {
	Recv() (*StreamAgentEventsResponse, error)
	grpc.ClientStream
}

type instantDataServiceStreamAgentEventsClient struct {
	grpc.ClientStream
}

func (x *instantDataServiceStreamAgentEventsClient) Recv() (*StreamAgentEventsResponse, error) {
	m := new(StreamAgentEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *instantDataServiceClient) StreamCallerEvents(ctx context.Context, in *StreamCallerEventsRequest, opts ...grpc.CallOption) (InstantDataService_StreamCallerEventsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &InstantDataService_ServiceDesc.Streams[1], InstantDataService_StreamCallerEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &instantDataServiceStreamCallerEventsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InstantDataService_StreamCallerEventsClient interface {
	Recv() (*StreamCallerEventsResponse, error)
	grpc.ClientStream
}

type instantDataServiceStreamCallerEventsClient struct {
	grpc.ClientStream
}

func (x *instantDataServiceStreamCallerEventsClient) Recv() (*StreamCallerEventsResponse, error) {
	m := new(StreamCallerEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InstantDataServiceServer is the server API for InstantDataService service.
// All implementations must embed UnimplementedInstantDataServiceServer
// for forward compatibility.
type InstantDataServiceServer interface {
	StreamAgentEvents(*StreamAgentEventsRequest, InstantDataService_StreamAgentEventsServer) error
	StreamCallerEvents(*StreamCallerEventsRequest, InstantDataService_StreamCallerEventsServer) error
	mustEmbedUnimplementedInstantDataServiceServer()
}

// UnimplementedInstantDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInstantDataServiceServer struct{}

func (UnimplementedInstantDataServiceServer) StreamAgentEvents(*StreamAgentEventsRequest, InstantDataService_StreamAgentEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAgentEvents not implemented")
}
func (UnimplementedInstantDataServiceServer) StreamCallerEvents(*StreamCallerEventsRequest, InstantDataService_StreamCallerEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamCallerEvents not implemented")
}
func (UnimplementedInstantDataServiceServer) mustEmbedUnimplementedInstantDataServiceServer() {}
func (UnimplementedInstantDataServiceServer) testEmbeddedByValue()                            {}

// UnsafeInstantDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstantDataServiceServer will
// result in compilation errors.
type UnsafeInstantDataServiceServer interface {
	mustEmbedUnimplementedInstantDataServiceServer()
}

func RegisterInstantDataServiceServer(s grpc.ServiceRegistrar, srv InstantDataServiceServer) {
	// If the following call pancis, it indicates UnimplementedInstantDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InstantDataService_ServiceDesc, srv)
}

func _InstantDataService_StreamAgentEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamAgentEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InstantDataServiceServer).StreamAgentEvents(m, &instantDataServiceStreamAgentEventsServer{ServerStream: stream})
}

type InstantDataService_StreamAgentEventsServer interface {
	Send(*StreamAgentEventsResponse) error
	grpc.ServerStream
}

type instantDataServiceStreamAgentEventsServer struct {
	grpc.ServerStream
}

func (x *instantDataServiceStreamAgentEventsServer) Send(m *StreamAgentEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InstantDataService_StreamCallerEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamCallerEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InstantDataServiceServer).StreamCallerEvents(m, &instantDataServiceStreamCallerEventsServer{ServerStream: stream})
}

type InstantDataService_StreamCallerEventsServer interface {
	Send(*StreamCallerEventsResponse) error
	grpc.ServerStream
}

type instantDataServiceStreamCallerEventsServer struct {
	grpc.ServerStream
}

func (x *instantDataServiceStreamCallerEventsServer) Send(m *StreamCallerEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// InstantDataService_ServiceDesc is the grpc.ServiceDesc for InstantDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstantDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.omnichannel.instant.v1alpha1.InstantDataService",
	HandlerType: (*InstantDataServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAgentEvents",
			Handler:       _InstantDataService_StreamAgentEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamCallerEvents",
			Handler:       _InstantDataService_StreamCallerEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/omnichannel/instant/v1alpha1/service.proto",
}
