// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: services/pbx/v2/service.proto

package pbxv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PBXService_ListPBXUsers_FullMethodName          = "/services.pbx.v2.PBXService/ListPBXUsers"
	PBXService_GetPBXUser_FullMethodName            = "/services.pbx.v2.PBXService/GetPBXUser"
	PBXService_ListRingGroups_FullMethodName        = "/services.pbx.v2.PBXService/ListRingGroups"
	PBXService_GetRingGroup_FullMethodName          = "/services.pbx.v2.PBXService/GetRingGroup"
	PBXService_GetSIPAccount_FullMethodName         = "/services.pbx.v2.PBXService/GetSIPAccount"
	PBXService_ListSIPAccounts_FullMethodName       = "/services.pbx.v2.PBXService/ListSIPAccounts"
	PBXService_UpdateSIPAccount_FullMethodName      = "/services.pbx.v2.PBXService/UpdateSIPAccount"
	PBXService_UpdateRingGroup_FullMethodName       = "/services.pbx.v2.PBXService/UpdateRingGroup"
	PBXService_CreateRingGroup_FullMethodName       = "/services.pbx.v2.PBXService/CreateRingGroup"
	PBXService_DeleteRingGroup_FullMethodName       = "/services.pbx.v2.PBXService/DeleteRingGroup"
	PBXService_AssignRandomExtension_FullMethodName = "/services.pbx.v2.PBXService/AssignRandomExtension"
)

// PBXServiceClient is the client API for PBXService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PBXServiceClient interface {
	// Returns details of all PBX Users associated with the authenticated callers ORG
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	ListPBXUsers(ctx context.Context, in *ListPBXUsersRequest, opts ...grpc.CallOption) (*ListPBXUsersResponse, error)
	// Returns details of the PBX User associated with the pbx_user_id
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.NotFound: The user does not exist or is not in the caller's ORG.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	GetPBXUser(ctx context.Context, in *GetPBXUserRequest, opts ...grpc.CallOption) (*GetPBXUserResponse, error)
	// Returns details of all Ring Groups associated with the authenticated callers ORG
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	ListRingGroups(ctx context.Context, in *ListRingGroupsRequest, opts ...grpc.CallOption) (*ListRingGroupsResponse, error)
	// Returns details of the Ring Group associated with the ring_group_id
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.NotFound: The group does not exist or is not in the caller's ORG.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	GetRingGroup(ctx context.Context, in *GetRingGroupRequest, opts ...grpc.CallOption) (*GetRingGroupResponse, error)
	// Returns details of the SIP Account associated with the sip_id
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.NotFound: The group does not exist or is not in the caller's ORG.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	GetSIPAccount(ctx context.Context, in *GetSIPAccountRequest, opts ...grpc.CallOption) (*GetSIPAccountResponse, error)
	// Returns details of all SIP Accounts associated with the authenticated callers ORG
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	ListSIPAccounts(ctx context.Context, in *ListSIPAccountsRequest, opts ...grpc.CallOption) (*ListSIPAccountsResponse, error)
	// Updates details of the SIP Account for the specific SIP Account within the authenticated callers ORG.
	// Allows for updating, activating, and deactivating a user.
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.AlreadyExists: The extension already exists
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	UpdateSIPAccount(ctx context.Context, in *UpdateSIPAccountRequest, opts ...grpc.CallOption) (*UpdateSIPAccountResponse, error)
	// Updates details of a Ring Group for the authenticated callers ORG. This operation acts as an "upsert".
	//   - If the groupID is in the update mask and the group exists, the group will be updated.
	//   - If the groupID is not in the update mask a group will be created.
	//
	// Allows for creating and updating a ring group.
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.AlreadyExists: The extension or name already exists.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	UpdateRingGroup(ctx context.Context, in *UpdateRingGroupRequest, opts ...grpc.CallOption) (*UpdateRingGroupResponse, error)
	// Creates a ring group for the authenticated caller's ORG.
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.OutOfRange: The request has fields that are out of range of constraints
	//   - grpc.AlreadyExists: The extension or name already exists.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	CreateRingGroup(ctx context.Context, in *CreateRingGroupRequest, opts ...grpc.CallOption) (*CreateRingGroupResponse, error)
	// Deletes a specific Ring Group for the authenticated caller's ORG.
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The groupID is an invalid format.
	//   - grpc.NotFound: The group does not exist or is not in the caller's ORG.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	DeleteRingGroup(ctx context.Context, in *DeleteRingGroupRequest, opts ...grpc.CallOption) (*DeleteRingGroupResponse, error)
	// Assigns a random extension either to a PBX user or a Ring Group
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.NotFound: No free extension found.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	AssignRandomExtension(ctx context.Context, in *AssignRandomExtensionRequest, opts ...grpc.CallOption) (*AssignRandomExtensionResponse, error)
}

type pBXServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPBXServiceClient(cc grpc.ClientConnInterface) PBXServiceClient {
	return &pBXServiceClient{cc}
}

func (c *pBXServiceClient) ListPBXUsers(ctx context.Context, in *ListPBXUsersRequest, opts ...grpc.CallOption) (*ListPBXUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPBXUsersResponse)
	err := c.cc.Invoke(ctx, PBXService_ListPBXUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBXServiceClient) GetPBXUser(ctx context.Context, in *GetPBXUserRequest, opts ...grpc.CallOption) (*GetPBXUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPBXUserResponse)
	err := c.cc.Invoke(ctx, PBXService_GetPBXUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBXServiceClient) ListRingGroups(ctx context.Context, in *ListRingGroupsRequest, opts ...grpc.CallOption) (*ListRingGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRingGroupsResponse)
	err := c.cc.Invoke(ctx, PBXService_ListRingGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBXServiceClient) GetRingGroup(ctx context.Context, in *GetRingGroupRequest, opts ...grpc.CallOption) (*GetRingGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRingGroupResponse)
	err := c.cc.Invoke(ctx, PBXService_GetRingGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBXServiceClient) GetSIPAccount(ctx context.Context, in *GetSIPAccountRequest, opts ...grpc.CallOption) (*GetSIPAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSIPAccountResponse)
	err := c.cc.Invoke(ctx, PBXService_GetSIPAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBXServiceClient) ListSIPAccounts(ctx context.Context, in *ListSIPAccountsRequest, opts ...grpc.CallOption) (*ListSIPAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSIPAccountsResponse)
	err := c.cc.Invoke(ctx, PBXService_ListSIPAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBXServiceClient) UpdateSIPAccount(ctx context.Context, in *UpdateSIPAccountRequest, opts ...grpc.CallOption) (*UpdateSIPAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSIPAccountResponse)
	err := c.cc.Invoke(ctx, PBXService_UpdateSIPAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBXServiceClient) UpdateRingGroup(ctx context.Context, in *UpdateRingGroupRequest, opts ...grpc.CallOption) (*UpdateRingGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRingGroupResponse)
	err := c.cc.Invoke(ctx, PBXService_UpdateRingGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBXServiceClient) CreateRingGroup(ctx context.Context, in *CreateRingGroupRequest, opts ...grpc.CallOption) (*CreateRingGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRingGroupResponse)
	err := c.cc.Invoke(ctx, PBXService_CreateRingGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBXServiceClient) DeleteRingGroup(ctx context.Context, in *DeleteRingGroupRequest, opts ...grpc.CallOption) (*DeleteRingGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRingGroupResponse)
	err := c.cc.Invoke(ctx, PBXService_DeleteRingGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBXServiceClient) AssignRandomExtension(ctx context.Context, in *AssignRandomExtensionRequest, opts ...grpc.CallOption) (*AssignRandomExtensionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignRandomExtensionResponse)
	err := c.cc.Invoke(ctx, PBXService_AssignRandomExtension_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PBXServiceServer is the server API for PBXService service.
// All implementations must embed UnimplementedPBXServiceServer
// for forward compatibility
type PBXServiceServer interface {
	// Returns details of all PBX Users associated with the authenticated callers ORG
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	ListPBXUsers(context.Context, *ListPBXUsersRequest) (*ListPBXUsersResponse, error)
	// Returns details of the PBX User associated with the pbx_user_id
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.NotFound: The user does not exist or is not in the caller's ORG.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	GetPBXUser(context.Context, *GetPBXUserRequest) (*GetPBXUserResponse, error)
	// Returns details of all Ring Groups associated with the authenticated callers ORG
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	ListRingGroups(context.Context, *ListRingGroupsRequest) (*ListRingGroupsResponse, error)
	// Returns details of the Ring Group associated with the ring_group_id
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.NotFound: The group does not exist or is not in the caller's ORG.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	GetRingGroup(context.Context, *GetRingGroupRequest) (*GetRingGroupResponse, error)
	// Returns details of the SIP Account associated with the sip_id
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.NotFound: The group does not exist or is not in the caller's ORG.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	GetSIPAccount(context.Context, *GetSIPAccountRequest) (*GetSIPAccountResponse, error)
	// Returns details of all SIP Accounts associated with the authenticated callers ORG
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	ListSIPAccounts(context.Context, *ListSIPAccountsRequest) (*ListSIPAccountsResponse, error)
	// Updates details of the SIP Account for the specific SIP Account within the authenticated callers ORG.
	// Allows for updating, activating, and deactivating a user.
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.AlreadyExists: The extension already exists
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	UpdateSIPAccount(context.Context, *UpdateSIPAccountRequest) (*UpdateSIPAccountResponse, error)
	// Updates details of a Ring Group for the authenticated callers ORG. This operation acts as an "upsert".
	//   - If the groupID is in the update mask and the group exists, the group will be updated.
	//   - If the groupID is not in the update mask a group will be created.
	//
	// Allows for creating and updating a ring group.
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.AlreadyExists: The extension or name already exists.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	UpdateRingGroup(context.Context, *UpdateRingGroupRequest) (*UpdateRingGroupResponse, error)
	// Creates a ring group for the authenticated caller's ORG.
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.OutOfRange: The request has fields that are out of range of constraints
	//   - grpc.AlreadyExists: The extension or name already exists.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	CreateRingGroup(context.Context, *CreateRingGroupRequest) (*CreateRingGroupResponse, error)
	// Deletes a specific Ring Group for the authenticated caller's ORG.
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The groupID is an invalid format.
	//   - grpc.NotFound: The group does not exist or is not in the caller's ORG.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	DeleteRingGroup(context.Context, *DeleteRingGroupRequest) (*DeleteRingGroupResponse, error)
	// Assigns a random extension either to a PBX user or a Ring Group
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.NotFound: No free extension found.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	AssignRandomExtension(context.Context, *AssignRandomExtensionRequest) (*AssignRandomExtensionResponse, error)
	mustEmbedUnimplementedPBXServiceServer()
}

// UnimplementedPBXServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPBXServiceServer struct {
}

func (UnimplementedPBXServiceServer) ListPBXUsers(context.Context, *ListPBXUsersRequest) (*ListPBXUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPBXUsers not implemented")
}
func (UnimplementedPBXServiceServer) GetPBXUser(context.Context, *GetPBXUserRequest) (*GetPBXUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPBXUser not implemented")
}
func (UnimplementedPBXServiceServer) ListRingGroups(context.Context, *ListRingGroupsRequest) (*ListRingGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRingGroups not implemented")
}
func (UnimplementedPBXServiceServer) GetRingGroup(context.Context, *GetRingGroupRequest) (*GetRingGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRingGroup not implemented")
}
func (UnimplementedPBXServiceServer) GetSIPAccount(context.Context, *GetSIPAccountRequest) (*GetSIPAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSIPAccount not implemented")
}
func (UnimplementedPBXServiceServer) ListSIPAccounts(context.Context, *ListSIPAccountsRequest) (*ListSIPAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSIPAccounts not implemented")
}
func (UnimplementedPBXServiceServer) UpdateSIPAccount(context.Context, *UpdateSIPAccountRequest) (*UpdateSIPAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSIPAccount not implemented")
}
func (UnimplementedPBXServiceServer) UpdateRingGroup(context.Context, *UpdateRingGroupRequest) (*UpdateRingGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRingGroup not implemented")
}
func (UnimplementedPBXServiceServer) CreateRingGroup(context.Context, *CreateRingGroupRequest) (*CreateRingGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRingGroup not implemented")
}
func (UnimplementedPBXServiceServer) DeleteRingGroup(context.Context, *DeleteRingGroupRequest) (*DeleteRingGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRingGroup not implemented")
}
func (UnimplementedPBXServiceServer) AssignRandomExtension(context.Context, *AssignRandomExtensionRequest) (*AssignRandomExtensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRandomExtension not implemented")
}
func (UnimplementedPBXServiceServer) mustEmbedUnimplementedPBXServiceServer() {}

// UnsafePBXServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PBXServiceServer will
// result in compilation errors.
type UnsafePBXServiceServer interface {
	mustEmbedUnimplementedPBXServiceServer()
}

func RegisterPBXServiceServer(s grpc.ServiceRegistrar, srv PBXServiceServer) {
	s.RegisterService(&PBXService_ServiceDesc, srv)
}

func _PBXService_ListPBXUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPBXUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBXServiceServer).ListPBXUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBXService_ListPBXUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBXServiceServer).ListPBXUsers(ctx, req.(*ListPBXUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBXService_GetPBXUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPBXUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBXServiceServer).GetPBXUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBXService_GetPBXUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBXServiceServer).GetPBXUser(ctx, req.(*GetPBXUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBXService_ListRingGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRingGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBXServiceServer).ListRingGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBXService_ListRingGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBXServiceServer).ListRingGroups(ctx, req.(*ListRingGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBXService_GetRingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBXServiceServer).GetRingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBXService_GetRingGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBXServiceServer).GetRingGroup(ctx, req.(*GetRingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBXService_GetSIPAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSIPAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBXServiceServer).GetSIPAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBXService_GetSIPAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBXServiceServer).GetSIPAccount(ctx, req.(*GetSIPAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBXService_ListSIPAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSIPAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBXServiceServer).ListSIPAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBXService_ListSIPAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBXServiceServer).ListSIPAccounts(ctx, req.(*ListSIPAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBXService_UpdateSIPAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSIPAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBXServiceServer).UpdateSIPAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBXService_UpdateSIPAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBXServiceServer).UpdateSIPAccount(ctx, req.(*UpdateSIPAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBXService_UpdateRingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBXServiceServer).UpdateRingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBXService_UpdateRingGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBXServiceServer).UpdateRingGroup(ctx, req.(*UpdateRingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBXService_CreateRingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBXServiceServer).CreateRingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBXService_CreateRingGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBXServiceServer).CreateRingGroup(ctx, req.(*CreateRingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBXService_DeleteRingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBXServiceServer).DeleteRingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBXService_DeleteRingGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBXServiceServer).DeleteRingGroup(ctx, req.(*DeleteRingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBXService_AssignRandomExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRandomExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBXServiceServer).AssignRandomExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBXService_AssignRandomExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBXServiceServer).AssignRandomExtension(ctx, req.(*AssignRandomExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PBXService_ServiceDesc is the grpc.ServiceDesc for PBXService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PBXService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.pbx.v2.PBXService",
	HandlerType: (*PBXServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPBXUsers",
			Handler:    _PBXService_ListPBXUsers_Handler,
		},
		{
			MethodName: "GetPBXUser",
			Handler:    _PBXService_GetPBXUser_Handler,
		},
		{
			MethodName: "ListRingGroups",
			Handler:    _PBXService_ListRingGroups_Handler,
		},
		{
			MethodName: "GetRingGroup",
			Handler:    _PBXService_GetRingGroup_Handler,
		},
		{
			MethodName: "GetSIPAccount",
			Handler:    _PBXService_GetSIPAccount_Handler,
		},
		{
			MethodName: "ListSIPAccounts",
			Handler:    _PBXService_ListSIPAccounts_Handler,
		},
		{
			MethodName: "UpdateSIPAccount",
			Handler:    _PBXService_UpdateSIPAccount_Handler,
		},
		{
			MethodName: "UpdateRingGroup",
			Handler:    _PBXService_UpdateRingGroup_Handler,
		},
		{
			MethodName: "CreateRingGroup",
			Handler:    _PBXService_CreateRingGroup_Handler,
		},
		{
			MethodName: "DeleteRingGroup",
			Handler:    _PBXService_DeleteRingGroup_Handler,
		},
		{
			MethodName: "AssignRandomExtension",
			Handler:    _PBXService_AssignRandomExtension_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/pbx/v2/service.proto",
}
