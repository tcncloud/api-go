// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: services/pbx/v2/service.proto

package pbxv2

import (
	_ "github.com/tcncloud/api-go/annotations"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// -------------------------
// Enums
// -------------------------
type RingStrategy int32

const (
	RingStrategy_RING_STRATEGY_UNSPECIFIED RingStrategy = 0
	RingStrategy_RING_STRATEGY_RING_ALL    RingStrategy = 1
	RingStrategy_RING_STRATEGY_ROUND_ROBIN RingStrategy = 2
	RingStrategy_RING_STRATEGY_RANDOM      RingStrategy = 3
	RingStrategy_RING_STRATEGY_ORDERED     RingStrategy = 4
)

// Enum value maps for RingStrategy.
var (
	RingStrategy_name = map[int32]string{
		0: "RING_STRATEGY_UNSPECIFIED",
		1: "RING_STRATEGY_RING_ALL",
		2: "RING_STRATEGY_ROUND_ROBIN",
		3: "RING_STRATEGY_RANDOM",
		4: "RING_STRATEGY_ORDERED",
	}
	RingStrategy_value = map[string]int32{
		"RING_STRATEGY_UNSPECIFIED": 0,
		"RING_STRATEGY_RING_ALL":    1,
		"RING_STRATEGY_ROUND_ROBIN": 2,
		"RING_STRATEGY_RANDOM":      3,
		"RING_STRATEGY_ORDERED":     4,
	}
)

func (x RingStrategy) Enum() *RingStrategy {
	p := new(RingStrategy)
	*p = x
	return p
}

func (x RingStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RingStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_services_pbx_v2_service_proto_enumTypes[0].Descriptor()
}

func (RingStrategy) Type() protoreflect.EnumType {
	return &file_services_pbx_v2_service_proto_enumTypes[0]
}

func (x RingStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RingStrategy.Descriptor instead.
func (RingStrategy) EnumDescriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{0}
}

// DEPRECATED: This message is deprecated and may be removed in future versions. (No longer need PBX Users)
type PBXUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PbxUserId     string                 `protobuf:"bytes,1,opt,name=pbx_user_id,json=pbxUserId,proto3" json:"pbx_user_id,omitempty"`
	OrgUserId     string                 `protobuf:"bytes,2,opt,name=org_user_id,json=orgUserId,proto3" json:"org_user_id,omitempty"`
	SipAccountIds []string               `protobuf:"bytes,3,rep,name=sip_account_ids,json=sipAccountIds,proto3" json:"sip_account_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PBXUser) Reset() {
	*x = PBXUser{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PBXUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBXUser) ProtoMessage() {}

func (x *PBXUser) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBXUser.ProtoReflect.Descriptor instead.
func (*PBXUser) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{0}
}

func (x *PBXUser) GetPbxUserId() string {
	if x != nil {
		return x.PbxUserId
	}
	return ""
}

func (x *PBXUser) GetOrgUserId() string {
	if x != nil {
		return x.OrgUserId
	}
	return ""
}

func (x *PBXUser) GetSipAccountIds() []string {
	if x != nil {
		return x.SipAccountIds
	}
	return nil
}

// For displaying ring groups associated with an SIPAccount
type SIPAccountRingGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RingGroupId   string                 `protobuf:"bytes,1,opt,name=ring_group_id,json=ringGroupId,proto3" json:"ring_group_id,omitempty"`
	RingGroupName string                 `protobuf:"bytes,2,opt,name=ring_group_name,json=ringGroupName,proto3" json:"ring_group_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SIPAccountRingGroup) Reset() {
	*x = SIPAccountRingGroup{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SIPAccountRingGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SIPAccountRingGroup) ProtoMessage() {}

func (x *SIPAccountRingGroup) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SIPAccountRingGroup.ProtoReflect.Descriptor instead.
func (*SIPAccountRingGroup) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{1}
}

func (x *SIPAccountRingGroup) GetRingGroupId() string {
	if x != nil {
		return x.RingGroupId
	}
	return ""
}

func (x *SIPAccountRingGroup) GetRingGroupName() string {
	if x != nil {
		return x.RingGroupName
	}
	return ""
}

type OrgSkill struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SkillSid      string                 `protobuf:"bytes,1,opt,name=skill_sid,json=skillSid,proto3" json:"skill_sid,omitempty"`
	SkillName     string                 `protobuf:"bytes,2,opt,name=skill_name,json=skillName,proto3" json:"skill_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrgSkill) Reset() {
	*x = OrgSkill{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrgSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgSkill) ProtoMessage() {}

func (x *OrgSkill) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgSkill.ProtoReflect.Descriptor instead.
func (*OrgSkill) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{2}
}

func (x *OrgSkill) GetSkillSid() string {
	if x != nil {
		return x.SkillSid
	}
	return ""
}

func (x *OrgSkill) GetSkillName() string {
	if x != nil {
		return x.SkillName
	}
	return ""
}

type OrgPermissionGroup struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	PermissionGroupId   string                 `protobuf:"bytes,1,opt,name=permission_group_id,json=permissionGroupId,proto3" json:"permission_group_id,omitempty"`
	PermissionGroupName string                 `protobuf:"bytes,2,opt,name=permission_group_name,json=permissionGroupName,proto3" json:"permission_group_name,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *OrgPermissionGroup) Reset() {
	*x = OrgPermissionGroup{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrgPermissionGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgPermissionGroup) ProtoMessage() {}

func (x *OrgPermissionGroup) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgPermissionGroup.ProtoReflect.Descriptor instead.
func (*OrgPermissionGroup) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{3}
}

func (x *OrgPermissionGroup) GetPermissionGroupId() string {
	if x != nil {
		return x.PermissionGroupId
	}
	return ""
}

func (x *OrgPermissionGroup) GetPermissionGroupName() string {
	if x != nil {
		return x.PermissionGroupName
	}
	return ""
}

type OrgHuntGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HuntGroupSid  string                 `protobuf:"bytes,1,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	HuntGroupName string                 `protobuf:"bytes,2,opt,name=hunt_group_name,json=huntGroupName,proto3" json:"hunt_group_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrgHuntGroup) Reset() {
	*x = OrgHuntGroup{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrgHuntGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgHuntGroup) ProtoMessage() {}

func (x *OrgHuntGroup) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgHuntGroup.ProtoReflect.Descriptor instead.
func (*OrgHuntGroup) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{4}
}

func (x *OrgHuntGroup) GetHuntGroupSid() string {
	if x != nil {
		return x.HuntGroupSid
	}
	return ""
}

func (x *OrgHuntGroup) GetHuntGroupName() string {
	if x != nil {
		return x.HuntGroupName
	}
	return ""
}

type SIPAccount struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	SipId     string                 `protobuf:"bytes,1,opt,name=sip_id,json=sipId,proto3" json:"sip_id,omitempty"`
	IsActive  bool                   `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	Extension string                 `protobuf:"bytes,3,opt,name=extension,proto3" json:"extension,omitempty"`
	// Deprecated: Marked as deprecated in services/pbx/v2/service.proto.
	RingGroupIds        []string               `protobuf:"bytes,4,rep,name=ring_group_ids,json=ringGroupIds,proto3" json:"ring_group_ids,omitempty"` // DEPRECATED: We need names as well
	OrgUserId           string                 `protobuf:"bytes,5,opt,name=org_user_id,json=orgUserId,proto3" json:"org_user_id,omitempty"`
	RingGroups          []*SIPAccountRingGroup `protobuf:"bytes,6,rep,name=ring_groups,json=ringGroups,proto3" json:"ring_groups,omitempty"`
	OrgUsername         string                 `protobuf:"bytes,7,opt,name=org_username,json=orgUsername,proto3" json:"org_username,omitempty"`
	OrgFullName         string                 `protobuf:"bytes,8,opt,name=org_full_name,json=orgFullName,proto3" json:"org_full_name,omitempty"`
	OrgHuntGroup        *OrgHuntGroup          `protobuf:"bytes,9,opt,name=org_hunt_group,json=orgHuntGroup,proto3" json:"org_hunt_group,omitempty"`
	OrgSkills           []*OrgSkill            `protobuf:"bytes,10,rep,name=org_skills,json=orgSkills,proto3" json:"org_skills,omitempty"`
	OrgPermissionGroups []*OrgPermissionGroup  `protobuf:"bytes,11,rep,name=org_permission_groups,json=orgPermissionGroups,proto3" json:"org_permission_groups,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SIPAccount) Reset() {
	*x = SIPAccount{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SIPAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SIPAccount) ProtoMessage() {}

func (x *SIPAccount) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SIPAccount.ProtoReflect.Descriptor instead.
func (*SIPAccount) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{5}
}

func (x *SIPAccount) GetSipId() string {
	if x != nil {
		return x.SipId
	}
	return ""
}

func (x *SIPAccount) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *SIPAccount) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

// Deprecated: Marked as deprecated in services/pbx/v2/service.proto.
func (x *SIPAccount) GetRingGroupIds() []string {
	if x != nil {
		return x.RingGroupIds
	}
	return nil
}

func (x *SIPAccount) GetOrgUserId() string {
	if x != nil {
		return x.OrgUserId
	}
	return ""
}

func (x *SIPAccount) GetRingGroups() []*SIPAccountRingGroup {
	if x != nil {
		return x.RingGroups
	}
	return nil
}

func (x *SIPAccount) GetOrgUsername() string {
	if x != nil {
		return x.OrgUsername
	}
	return ""
}

func (x *SIPAccount) GetOrgFullName() string {
	if x != nil {
		return x.OrgFullName
	}
	return ""
}

func (x *SIPAccount) GetOrgHuntGroup() *OrgHuntGroup {
	if x != nil {
		return x.OrgHuntGroup
	}
	return nil
}

func (x *SIPAccount) GetOrgSkills() []*OrgSkill {
	if x != nil {
		return x.OrgSkills
	}
	return nil
}

func (x *SIPAccount) GetOrgPermissionGroups() []*OrgPermissionGroup {
	if x != nil {
		return x.OrgPermissionGroups
	}
	return nil
}

type RingGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Extension     string                 `protobuf:"bytes,4,opt,name=extension,proto3" json:"extension,omitempty"`
	RingStrategy  RingStrategy           `protobuf:"varint,5,opt,name=ring_strategy,json=ringStrategy,proto3,enum=services.pbx.v2.RingStrategy" json:"ring_strategy,omitempty"`
	SipAccountIds []string               `protobuf:"bytes,6,rep,name=sip_account_ids,json=sipAccountIds,proto3" json:"sip_account_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RingGroup) Reset() {
	*x = RingGroup{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RingGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RingGroup) ProtoMessage() {}

func (x *RingGroup) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RingGroup.ProtoReflect.Descriptor instead.
func (*RingGroup) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{6}
}

func (x *RingGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RingGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RingGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RingGroup) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *RingGroup) GetRingStrategy() RingStrategy {
	if x != nil {
		return x.RingStrategy
	}
	return RingStrategy_RING_STRATEGY_UNSPECIFIED
}

func (x *RingGroup) GetSipAccountIds() []string {
	if x != nil {
		return x.SipAccountIds
	}
	return nil
}

// DEPRECATED: This message is deprecated and may be removed in future versions. (No longer need PBX Users)
type ListPBXUsersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPBXUsersRequest) Reset() {
	*x = ListPBXUsersRequest{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPBXUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPBXUsersRequest) ProtoMessage() {}

func (x *ListPBXUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPBXUsersRequest.ProtoReflect.Descriptor instead.
func (*ListPBXUsersRequest) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{7}
}

// DEPRECATED: This message is deprecated and may be removed in future versions. (No longer need PBX Users)
type ListPBXUsersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Users         []*PBXUser             `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPBXUsersResponse) Reset() {
	*x = ListPBXUsersResponse{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPBXUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPBXUsersResponse) ProtoMessage() {}

func (x *ListPBXUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPBXUsersResponse.ProtoReflect.Descriptor instead.
func (*ListPBXUsersResponse) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListPBXUsersResponse) GetUsers() []*PBXUser {
	if x != nil {
		return x.Users
	}
	return nil
}

type ListSIPAccountsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSIPAccountsRequest) Reset() {
	*x = ListSIPAccountsRequest{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSIPAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSIPAccountsRequest) ProtoMessage() {}

func (x *ListSIPAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSIPAccountsRequest.ProtoReflect.Descriptor instead.
func (*ListSIPAccountsRequest) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{9}
}

type ListSIPAccountsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SipAccounts   []*SIPAccount          `protobuf:"bytes,1,rep,name=sip_accounts,json=sipAccounts,proto3" json:"sip_accounts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSIPAccountsResponse) Reset() {
	*x = ListSIPAccountsResponse{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSIPAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSIPAccountsResponse) ProtoMessage() {}

func (x *ListSIPAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSIPAccountsResponse.ProtoReflect.Descriptor instead.
func (*ListSIPAccountsResponse) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{10}
}

func (x *ListSIPAccountsResponse) GetSipAccounts() []*SIPAccount {
	if x != nil {
		return x.SipAccounts
	}
	return nil
}

type ListSIPAccountsByRingGroupIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RingGroupId   string                 `protobuf:"bytes,1,opt,name=ring_group_id,json=ringGroupId,proto3" json:"ring_group_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSIPAccountsByRingGroupIdRequest) Reset() {
	*x = ListSIPAccountsByRingGroupIdRequest{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSIPAccountsByRingGroupIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSIPAccountsByRingGroupIdRequest) ProtoMessage() {}

func (x *ListSIPAccountsByRingGroupIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSIPAccountsByRingGroupIdRequest.ProtoReflect.Descriptor instead.
func (*ListSIPAccountsByRingGroupIdRequest) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{11}
}

func (x *ListSIPAccountsByRingGroupIdRequest) GetRingGroupId() string {
	if x != nil {
		return x.RingGroupId
	}
	return ""
}

type ListSIPAccountsByRingGroupIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SipAccounts   []*SIPAccount          `protobuf:"bytes,1,rep,name=sip_accounts,json=sipAccounts,proto3" json:"sip_accounts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSIPAccountsByRingGroupIdResponse) Reset() {
	*x = ListSIPAccountsByRingGroupIdResponse{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSIPAccountsByRingGroupIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSIPAccountsByRingGroupIdResponse) ProtoMessage() {}

func (x *ListSIPAccountsByRingGroupIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSIPAccountsByRingGroupIdResponse.ProtoReflect.Descriptor instead.
func (*ListSIPAccountsByRingGroupIdResponse) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{12}
}

func (x *ListSIPAccountsByRingGroupIdResponse) GetSipAccounts() []*SIPAccount {
	if x != nil {
		return x.SipAccounts
	}
	return nil
}

type GetSIPAccountByUserIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrgUserId     string                 `protobuf:"bytes,1,opt,name=org_user_id,json=orgUserId,proto3" json:"org_user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSIPAccountByUserIdRequest) Reset() {
	*x = GetSIPAccountByUserIdRequest{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSIPAccountByUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSIPAccountByUserIdRequest) ProtoMessage() {}

func (x *GetSIPAccountByUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSIPAccountByUserIdRequest.ProtoReflect.Descriptor instead.
func (*GetSIPAccountByUserIdRequest) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetSIPAccountByUserIdRequest) GetOrgUserId() string {
	if x != nil {
		return x.OrgUserId
	}
	return ""
}

type GetSIPAccountByUserIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SipAccount    *SIPAccount            `protobuf:"bytes,1,opt,name=sip_account,json=sipAccount,proto3" json:"sip_account,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSIPAccountByUserIdResponse) Reset() {
	*x = GetSIPAccountByUserIdResponse{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSIPAccountByUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSIPAccountByUserIdResponse) ProtoMessage() {}

func (x *GetSIPAccountByUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSIPAccountByUserIdResponse.ProtoReflect.Descriptor instead.
func (*GetSIPAccountByUserIdResponse) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetSIPAccountByUserIdResponse) GetSipAccount() *SIPAccount {
	if x != nil {
		return x.SipAccount
	}
	return nil
}

type GetSIPAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SipAccountId  string                 `protobuf:"bytes,1,opt,name=sip_account_id,json=sipAccountId,proto3" json:"sip_account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSIPAccountRequest) Reset() {
	*x = GetSIPAccountRequest{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSIPAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSIPAccountRequest) ProtoMessage() {}

func (x *GetSIPAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSIPAccountRequest.ProtoReflect.Descriptor instead.
func (*GetSIPAccountRequest) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetSIPAccountRequest) GetSipAccountId() string {
	if x != nil {
		return x.SipAccountId
	}
	return ""
}

type GetSIPAccountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SipAccount    []*SIPAccount          `protobuf:"bytes,1,rep,name=sip_account,json=sipAccount,proto3" json:"sip_account,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSIPAccountResponse) Reset() {
	*x = GetSIPAccountResponse{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSIPAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSIPAccountResponse) ProtoMessage() {}

func (x *GetSIPAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSIPAccountResponse.ProtoReflect.Descriptor instead.
func (*GetSIPAccountResponse) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{16}
}

func (x *GetSIPAccountResponse) GetSipAccount() []*SIPAccount {
	if x != nil {
		return x.SipAccount
	}
	return nil
}

// DEPRECATED: This message is deprecated and may be removed in future versions. (No longer need PBX Users)
type GetPBXUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PbxUserId     string                 `protobuf:"bytes,1,opt,name=pbx_user_id,json=pbxUserId,proto3" json:"pbx_user_id,omitempty"` // Required: To fetch a specific user by ID.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPBXUserRequest) Reset() {
	*x = GetPBXUserRequest{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPBXUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPBXUserRequest) ProtoMessage() {}

func (x *GetPBXUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPBXUserRequest.ProtoReflect.Descriptor instead.
func (*GetPBXUserRequest) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{17}
}

func (x *GetPBXUserRequest) GetPbxUserId() string {
	if x != nil {
		return x.PbxUserId
	}
	return ""
}

// DEPRECATED: This message is deprecated and may be removed in future versions. (No longer need PBX Users)
type GetPBXUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *PBXUser               `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPBXUserResponse) Reset() {
	*x = GetPBXUserResponse{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPBXUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPBXUserResponse) ProtoMessage() {}

func (x *GetPBXUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPBXUserResponse.ProtoReflect.Descriptor instead.
func (*GetPBXUserResponse) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{18}
}

func (x *GetPBXUserResponse) GetUser() *PBXUser {
	if x != nil {
		return x.User
	}
	return nil
}

type ListRingGroupsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRingGroupsRequest) Reset() {
	*x = ListRingGroupsRequest{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRingGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRingGroupsRequest) ProtoMessage() {}

func (x *ListRingGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRingGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListRingGroupsRequest) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{19}
}

type ListRingGroupsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Groups        []*RingGroup           `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRingGroupsResponse) Reset() {
	*x = ListRingGroupsResponse{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRingGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRingGroupsResponse) ProtoMessage() {}

func (x *ListRingGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRingGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListRingGroupsResponse) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{20}
}

func (x *ListRingGroupsResponse) GetGroups() []*RingGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

type ListRingGroupsBySipIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SipAccountId  string                 `protobuf:"bytes,1,opt,name=sip_account_id,json=sipAccountId,proto3" json:"sip_account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRingGroupsBySipIdRequest) Reset() {
	*x = ListRingGroupsBySipIdRequest{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRingGroupsBySipIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRingGroupsBySipIdRequest) ProtoMessage() {}

func (x *ListRingGroupsBySipIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRingGroupsBySipIdRequest.ProtoReflect.Descriptor instead.
func (*ListRingGroupsBySipIdRequest) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{21}
}

func (x *ListRingGroupsBySipIdRequest) GetSipAccountId() string {
	if x != nil {
		return x.SipAccountId
	}
	return ""
}

type ListRingGroupsBySipIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Groups        []*RingGroup           `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRingGroupsBySipIdResponse) Reset() {
	*x = ListRingGroupsBySipIdResponse{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRingGroupsBySipIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRingGroupsBySipIdResponse) ProtoMessage() {}

func (x *ListRingGroupsBySipIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRingGroupsBySipIdResponse.ProtoReflect.Descriptor instead.
func (*ListRingGroupsBySipIdResponse) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{22}
}

func (x *ListRingGroupsBySipIdResponse) GetGroups() []*RingGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

type GetRingGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RingGroupId   string                 `protobuf:"bytes,1,opt,name=ring_group_id,json=ringGroupId,proto3" json:"ring_group_id,omitempty"` // Required: To fetch a specific group by ID.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRingGroupRequest) Reset() {
	*x = GetRingGroupRequest{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRingGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRingGroupRequest) ProtoMessage() {}

func (x *GetRingGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRingGroupRequest.ProtoReflect.Descriptor instead.
func (*GetRingGroupRequest) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{23}
}

func (x *GetRingGroupRequest) GetRingGroupId() string {
	if x != nil {
		return x.RingGroupId
	}
	return ""
}

type GetRingGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         *RingGroup             `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRingGroupResponse) Reset() {
	*x = GetRingGroupResponse{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRingGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRingGroupResponse) ProtoMessage() {}

func (x *GetRingGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRingGroupResponse.ProtoReflect.Descriptor instead.
func (*GetRingGroupResponse) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{24}
}

func (x *GetRingGroupResponse) GetGroup() *RingGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

type UpdateSIPAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SipAccount    *SIPAccount            `protobuf:"bytes,1,opt,name=sip_account,json=sipAccount,proto3" json:"sip_account,omitempty"` // The sip account details to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"` // Fields to be updated.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSIPAccountRequest) Reset() {
	*x = UpdateSIPAccountRequest{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSIPAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSIPAccountRequest) ProtoMessage() {}

func (x *UpdateSIPAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSIPAccountRequest.ProtoReflect.Descriptor instead.
func (*UpdateSIPAccountRequest) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateSIPAccountRequest) GetSipAccount() *SIPAccount {
	if x != nil {
		return x.SipAccount
	}
	return nil
}

func (x *UpdateSIPAccountRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateSIPAccountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SipAccount    *SIPAccount            `protobuf:"bytes,1,opt,name=sip_account,json=sipAccount,proto3" json:"sip_account,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSIPAccountResponse) Reset() {
	*x = UpdateSIPAccountResponse{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSIPAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSIPAccountResponse) ProtoMessage() {}

func (x *UpdateSIPAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSIPAccountResponse.ProtoReflect.Descriptor instead.
func (*UpdateSIPAccountResponse) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateSIPAccountResponse) GetSipAccount() *SIPAccount {
	if x != nil {
		return x.SipAccount
	}
	return nil
}

type UpdateRingGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         *RingGroup             `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"` // Fields to be modified.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRingGroupRequest) Reset() {
	*x = UpdateRingGroupRequest{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRingGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRingGroupRequest) ProtoMessage() {}

func (x *UpdateRingGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRingGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateRingGroupRequest) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateRingGroupRequest) GetGroup() *RingGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *UpdateRingGroupRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateRingGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         *RingGroup             `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRingGroupResponse) Reset() {
	*x = UpdateRingGroupResponse{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRingGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRingGroupResponse) ProtoMessage() {}

func (x *UpdateRingGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRingGroupResponse.ProtoReflect.Descriptor instead.
func (*UpdateRingGroupResponse) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateRingGroupResponse) GetGroup() *RingGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

type AssignRandomExtensionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignRandomExtensionRequest) Reset() {
	*x = AssignRandomExtensionRequest{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignRandomExtensionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignRandomExtensionRequest) ProtoMessage() {}

func (x *AssignRandomExtensionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignRandomExtensionRequest.ProtoReflect.Descriptor instead.
func (*AssignRandomExtensionRequest) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{29}
}

type AssignRandomExtensionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Extension     string                 `protobuf:"bytes,1,opt,name=extension,proto3" json:"extension,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignRandomExtensionResponse) Reset() {
	*x = AssignRandomExtensionResponse{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignRandomExtensionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignRandomExtensionResponse) ProtoMessage() {}

func (x *AssignRandomExtensionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignRandomExtensionResponse.ProtoReflect.Descriptor instead.
func (*AssignRandomExtensionResponse) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{30}
}

func (x *AssignRandomExtensionResponse) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

type CreateRingGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         *RingGroup             `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"` // Fields to be added into new Ring Group
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRingGroupRequest) Reset() {
	*x = CreateRingGroupRequest{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRingGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRingGroupRequest) ProtoMessage() {}

func (x *CreateRingGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRingGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateRingGroupRequest) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{31}
}

func (x *CreateRingGroupRequest) GetGroup() *RingGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

type CreateRingGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         *RingGroup             `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRingGroupResponse) Reset() {
	*x = CreateRingGroupResponse{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRingGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRingGroupResponse) ProtoMessage() {}

func (x *CreateRingGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRingGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateRingGroupResponse) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{32}
}

func (x *CreateRingGroupResponse) GetGroup() *RingGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

type DeleteRingGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupId       string                 `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRingGroupRequest) Reset() {
	*x = DeleteRingGroupRequest{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRingGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRingGroupRequest) ProtoMessage() {}

func (x *DeleteRingGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRingGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteRingGroupRequest) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteRingGroupRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type DeleteRingGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRingGroupResponse) Reset() {
	*x = DeleteRingGroupResponse{}
	mi := &file_services_pbx_v2_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRingGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRingGroupResponse) ProtoMessage() {}

func (x *DeleteRingGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v2_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRingGroupResponse.ProtoReflect.Descriptor instead.
func (*DeleteRingGroupResponse) Descriptor() ([]byte, []int) {
	return file_services_pbx_v2_service_proto_rawDescGZIP(), []int{34}
}

var File_services_pbx_v2_service_proto protoreflect.FileDescriptor

var file_services_pbx_v2_service_proto_rawDesc = string([]byte{
	0x0a, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x78, 0x2f, 0x76,
	0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32,
	0x1a, 0x17, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x71, 0x0a, 0x07, 0x50, 0x42, 0x58,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x62, 0x78, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x62, 0x78, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x72, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x67, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x69, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x69, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x61, 0x0a, 0x13,
	0x53, 0x49, 0x50, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x69, 0x6e, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x46, 0x0a, 0x08, 0x4f, 0x72, 0x67, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x12, 0x4f, 0x72, 0x67, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x5c, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x75, 0x6e, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x8e, 0x04, 0x0a, 0x0a, 0x53, 0x49, 0x50, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x73, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x69, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x0e, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x72, 0x69,
	0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x72,
	0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x72, 0x67, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x49, 0x50, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x69, 0x6e, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x67, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x5f, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x67,
	0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x5f,
	0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e,
	0x76, 0x32, 0x2e, 0x4f, 0x72, 0x67, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x0c, 0x6f, 0x72, 0x67, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a,
	0x0a, 0x6f, 0x72, 0x67, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78,
	0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x72, 0x67, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x09, 0x6f, 0x72,
	0x67, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x57, 0x0a, 0x15, 0x6f, 0x72, 0x67, 0x5f, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x72, 0x67, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x13, 0x6f, 0x72, 0x67,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x22, 0xdb, 0x01, 0x0a, 0x09, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0c, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x69, 0x70, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x69, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x15,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x42, 0x58, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x42, 0x58,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x50,
	0x42, 0x58, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x18, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x49, 0x50, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x59, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x49, 0x50, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x69, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x49, 0x50, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x69, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x22, 0x49, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x49, 0x50, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x66, 0x0a,
	0x24, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x49, 0x50, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x42, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x69, 0x70, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x49,
	0x50, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x69, 0x70, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x3e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x49, 0x50, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x72, 0x67, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x67, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x49, 0x50, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x69, 0x70, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x49,
	0x50, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x73, 0x69, 0x70, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x49, 0x50, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x69, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x69, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x55, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x49, 0x50, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x73,
	0x69, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x49, 0x50, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x73,
	0x69, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x33, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x50, 0x42, 0x58, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0b, 0x70, 0x62, 0x78, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x62, 0x78, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x42,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x42, 0x58, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x78, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x42, 0x58, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x22, 0x17, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4c, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x44, 0x0a, 0x1c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x53, 0x69, 0x70,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x69, 0x70,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x69, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x53, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x42, 0x79, 0x53, 0x69, 0x70, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e,
	0x76, 0x32, 0x2e, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x22, 0x39, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x69, 0x6e, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0x48, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x94, 0x01, 0x0a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x49, 0x50, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x69, 0x70, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x49, 0x50,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x73, 0x69, 0x70, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x22, 0x58, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x49, 0x50, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b,
	0x73, 0x69, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x49, 0x50, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a,
	0x73, 0x69, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x16, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x22, 0x4b, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x69,
	0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32,
	0x2e, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x1e, 0x0a, 0x1c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x3d, 0x0a, 0x1d, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x4a, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x69, 0x6e, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x4b, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x33, 0x0a, 0x16, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x19,
	0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x9d, 0x01, 0x0a, 0x0c, 0x52, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x52, 0x49, 0x4e, 0x47, 0x5f,
	0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x4f, 0x42,
	0x49, 0x4e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x52,
	0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x03, 0x12, 0x19,
	0x0a, 0x15, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x10, 0x04, 0x32, 0x98, 0x13, 0x0a, 0x0a, 0x50, 0x42,
	0x58, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x42, 0x58, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x42, 0x58, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76,
	0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x42, 0x58, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0x84, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x78, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x62,
	0x78, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x70, 0x62, 0x78,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x88, 0x02, 0x01, 0x12, 0x95, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x50, 0x42, 0x58, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x42, 0x58,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x42, 0x58, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x20, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x70, 0x62, 0x78, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x62, 0x78, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x70, 0x62, 0x78, 0x75, 0x73, 0x65, 0x72, 0x88, 0x02, 0x01,
	0x12, 0xa2, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x20,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x78, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x62, 0x78, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0xbe, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69,
	0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x53, 0x69, 0x70, 0x49, 0x64, 0x12,
	0x2d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76,
	0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x42, 0x79, 0x53, 0x69, 0x70, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42,
	0x79, 0x53, 0x69, 0x70, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36,
	0x3a, 0x01, 0x2a, 0x22, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70,
	0x62, 0x78, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x62, 0x78, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x62,
	0x79, 0x73, 0x69, 0x70, 0x69, 0x64, 0x12, 0x9a, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x69,
	0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x69, 0x6e,
	0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x20,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x78, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x62, 0x78, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x9e, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x49, 0x50, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x49, 0x50, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x49, 0x50, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x20,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x78, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x62, 0x78, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x73, 0x69, 0x70, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0xbe, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x49, 0x50, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x49, 0x50, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x49, 0x50, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0xba,
	0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a,
	0x01, 0x2a, 0x22, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x62,
	0x78, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x62, 0x78, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x67, 0x65, 0x74, 0x73, 0x69, 0x70, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x62, 0x79, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0xa6, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x49,
	0x50, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x49, 0x50, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x78, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x49, 0x50, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0xba, 0xb8,
	0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01,
	0x2a, 0x22, 0x2b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x78,
	0x2f, 0x76, 0x32, 0x2f, 0x70, 0x62, 0x78, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x69, 0x70, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0xda,
	0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x49, 0x50, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x42, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x34, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76,
	0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x49, 0x50, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x42, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x49, 0x50, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0xba, 0xb8,
	0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x3a, 0x01,
	0x2a, 0x22, 0x38, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x78,
	0x2f, 0x76, 0x32, 0x2f, 0x70, 0x62, 0x78, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x69, 0x70, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x62, 0x79,
	0x72, 0x69, 0x6e, 0x67, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0xaa, 0x01, 0x0a, 0x10,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x49, 0x50, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e,
	0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x49, 0x50, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x49, 0x50, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x85,
	0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x78, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x62, 0x78,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x69,
	0x70, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xa6, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x69,
	0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x40, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x85, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x70, 0x62, 0x78, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x62, 0x78, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0xa6, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x69, 0x6e, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x69,
	0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0x85, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x78, 0x2f, 0x76, 0x32, 0x2f,
	0x70, 0x62, 0x78, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xa6, 0x01, 0x0a, 0x0f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x85, 0x20, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x70, 0x62, 0x78, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x62, 0x78, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0xbe, 0x01, 0x0a, 0x15, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0xba, 0xb8,
	0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x85, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01,
	0x2a, 0x22, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x78,
	0x2f, 0x76, 0x32, 0x2f, 0x70, 0x62, 0x78, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0xb3, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x32, 0x42, 0x0c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x70, 0x62, 0x78, 0x2f, 0x76, 0x32, 0x3b, 0x70, 0x62, 0x78, 0x76, 0x32, 0xa2, 0x02,
	0x03, 0x53, 0x50, 0x58, 0xaa, 0x02, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x50, 0x62, 0x78, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x5c, 0x50, 0x62, 0x78, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x1b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x5c, 0x50, 0x62, 0x78, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x3a, 0x3a, 0x50, 0x62, 0x78, 0x3a, 0x3a, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_services_pbx_v2_service_proto_rawDescOnce sync.Once
	file_services_pbx_v2_service_proto_rawDescData []byte
)

func file_services_pbx_v2_service_proto_rawDescGZIP() []byte {
	file_services_pbx_v2_service_proto_rawDescOnce.Do(func() {
		file_services_pbx_v2_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_services_pbx_v2_service_proto_rawDesc), len(file_services_pbx_v2_service_proto_rawDesc)))
	})
	return file_services_pbx_v2_service_proto_rawDescData
}

var file_services_pbx_v2_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_services_pbx_v2_service_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_services_pbx_v2_service_proto_goTypes = []any{
	(RingStrategy)(0),                            // 0: services.pbx.v2.RingStrategy
	(*PBXUser)(nil),                              // 1: services.pbx.v2.PBXUser
	(*SIPAccountRingGroup)(nil),                  // 2: services.pbx.v2.SIPAccountRingGroup
	(*OrgSkill)(nil),                             // 3: services.pbx.v2.OrgSkill
	(*OrgPermissionGroup)(nil),                   // 4: services.pbx.v2.OrgPermissionGroup
	(*OrgHuntGroup)(nil),                         // 5: services.pbx.v2.OrgHuntGroup
	(*SIPAccount)(nil),                           // 6: services.pbx.v2.SIPAccount
	(*RingGroup)(nil),                            // 7: services.pbx.v2.RingGroup
	(*ListPBXUsersRequest)(nil),                  // 8: services.pbx.v2.ListPBXUsersRequest
	(*ListPBXUsersResponse)(nil),                 // 9: services.pbx.v2.ListPBXUsersResponse
	(*ListSIPAccountsRequest)(nil),               // 10: services.pbx.v2.ListSIPAccountsRequest
	(*ListSIPAccountsResponse)(nil),              // 11: services.pbx.v2.ListSIPAccountsResponse
	(*ListSIPAccountsByRingGroupIdRequest)(nil),  // 12: services.pbx.v2.ListSIPAccountsByRingGroupIdRequest
	(*ListSIPAccountsByRingGroupIdResponse)(nil), // 13: services.pbx.v2.ListSIPAccountsByRingGroupIdResponse
	(*GetSIPAccountByUserIdRequest)(nil),         // 14: services.pbx.v2.GetSIPAccountByUserIdRequest
	(*GetSIPAccountByUserIdResponse)(nil),        // 15: services.pbx.v2.GetSIPAccountByUserIdResponse
	(*GetSIPAccountRequest)(nil),                 // 16: services.pbx.v2.GetSIPAccountRequest
	(*GetSIPAccountResponse)(nil),                // 17: services.pbx.v2.GetSIPAccountResponse
	(*GetPBXUserRequest)(nil),                    // 18: services.pbx.v2.GetPBXUserRequest
	(*GetPBXUserResponse)(nil),                   // 19: services.pbx.v2.GetPBXUserResponse
	(*ListRingGroupsRequest)(nil),                // 20: services.pbx.v2.ListRingGroupsRequest
	(*ListRingGroupsResponse)(nil),               // 21: services.pbx.v2.ListRingGroupsResponse
	(*ListRingGroupsBySipIdRequest)(nil),         // 22: services.pbx.v2.ListRingGroupsBySipIdRequest
	(*ListRingGroupsBySipIdResponse)(nil),        // 23: services.pbx.v2.ListRingGroupsBySipIdResponse
	(*GetRingGroupRequest)(nil),                  // 24: services.pbx.v2.GetRingGroupRequest
	(*GetRingGroupResponse)(nil),                 // 25: services.pbx.v2.GetRingGroupResponse
	(*UpdateSIPAccountRequest)(nil),              // 26: services.pbx.v2.UpdateSIPAccountRequest
	(*UpdateSIPAccountResponse)(nil),             // 27: services.pbx.v2.UpdateSIPAccountResponse
	(*UpdateRingGroupRequest)(nil),               // 28: services.pbx.v2.UpdateRingGroupRequest
	(*UpdateRingGroupResponse)(nil),              // 29: services.pbx.v2.UpdateRingGroupResponse
	(*AssignRandomExtensionRequest)(nil),         // 30: services.pbx.v2.AssignRandomExtensionRequest
	(*AssignRandomExtensionResponse)(nil),        // 31: services.pbx.v2.AssignRandomExtensionResponse
	(*CreateRingGroupRequest)(nil),               // 32: services.pbx.v2.CreateRingGroupRequest
	(*CreateRingGroupResponse)(nil),              // 33: services.pbx.v2.CreateRingGroupResponse
	(*DeleteRingGroupRequest)(nil),               // 34: services.pbx.v2.DeleteRingGroupRequest
	(*DeleteRingGroupResponse)(nil),              // 35: services.pbx.v2.DeleteRingGroupResponse
	(*fieldmaskpb.FieldMask)(nil),                // 36: google.protobuf.FieldMask
}
var file_services_pbx_v2_service_proto_depIdxs = []int32{
	2,  // 0: services.pbx.v2.SIPAccount.ring_groups:type_name -> services.pbx.v2.SIPAccountRingGroup
	5,  // 1: services.pbx.v2.SIPAccount.org_hunt_group:type_name -> services.pbx.v2.OrgHuntGroup
	3,  // 2: services.pbx.v2.SIPAccount.org_skills:type_name -> services.pbx.v2.OrgSkill
	4,  // 3: services.pbx.v2.SIPAccount.org_permission_groups:type_name -> services.pbx.v2.OrgPermissionGroup
	0,  // 4: services.pbx.v2.RingGroup.ring_strategy:type_name -> services.pbx.v2.RingStrategy
	1,  // 5: services.pbx.v2.ListPBXUsersResponse.users:type_name -> services.pbx.v2.PBXUser
	6,  // 6: services.pbx.v2.ListSIPAccountsResponse.sip_accounts:type_name -> services.pbx.v2.SIPAccount
	6,  // 7: services.pbx.v2.ListSIPAccountsByRingGroupIdResponse.sip_accounts:type_name -> services.pbx.v2.SIPAccount
	6,  // 8: services.pbx.v2.GetSIPAccountByUserIdResponse.sip_account:type_name -> services.pbx.v2.SIPAccount
	6,  // 9: services.pbx.v2.GetSIPAccountResponse.sip_account:type_name -> services.pbx.v2.SIPAccount
	1,  // 10: services.pbx.v2.GetPBXUserResponse.user:type_name -> services.pbx.v2.PBXUser
	7,  // 11: services.pbx.v2.ListRingGroupsResponse.groups:type_name -> services.pbx.v2.RingGroup
	7,  // 12: services.pbx.v2.ListRingGroupsBySipIdResponse.groups:type_name -> services.pbx.v2.RingGroup
	7,  // 13: services.pbx.v2.GetRingGroupResponse.group:type_name -> services.pbx.v2.RingGroup
	6,  // 14: services.pbx.v2.UpdateSIPAccountRequest.sip_account:type_name -> services.pbx.v2.SIPAccount
	36, // 15: services.pbx.v2.UpdateSIPAccountRequest.update_mask:type_name -> google.protobuf.FieldMask
	6,  // 16: services.pbx.v2.UpdateSIPAccountResponse.sip_account:type_name -> services.pbx.v2.SIPAccount
	7,  // 17: services.pbx.v2.UpdateRingGroupRequest.group:type_name -> services.pbx.v2.RingGroup
	36, // 18: services.pbx.v2.UpdateRingGroupRequest.update_mask:type_name -> google.protobuf.FieldMask
	7,  // 19: services.pbx.v2.UpdateRingGroupResponse.group:type_name -> services.pbx.v2.RingGroup
	7,  // 20: services.pbx.v2.CreateRingGroupRequest.group:type_name -> services.pbx.v2.RingGroup
	7,  // 21: services.pbx.v2.CreateRingGroupResponse.group:type_name -> services.pbx.v2.RingGroup
	8,  // 22: services.pbx.v2.PBXService.ListPBXUsers:input_type -> services.pbx.v2.ListPBXUsersRequest
	18, // 23: services.pbx.v2.PBXService.GetPBXUser:input_type -> services.pbx.v2.GetPBXUserRequest
	20, // 24: services.pbx.v2.PBXService.ListRingGroups:input_type -> services.pbx.v2.ListRingGroupsRequest
	22, // 25: services.pbx.v2.PBXService.ListRingGroupsBySipId:input_type -> services.pbx.v2.ListRingGroupsBySipIdRequest
	24, // 26: services.pbx.v2.PBXService.GetRingGroup:input_type -> services.pbx.v2.GetRingGroupRequest
	16, // 27: services.pbx.v2.PBXService.GetSIPAccount:input_type -> services.pbx.v2.GetSIPAccountRequest
	14, // 28: services.pbx.v2.PBXService.GetSIPAccountByUserId:input_type -> services.pbx.v2.GetSIPAccountByUserIdRequest
	10, // 29: services.pbx.v2.PBXService.ListSIPAccounts:input_type -> services.pbx.v2.ListSIPAccountsRequest
	12, // 30: services.pbx.v2.PBXService.ListSIPAccountsByRingGroupId:input_type -> services.pbx.v2.ListSIPAccountsByRingGroupIdRequest
	26, // 31: services.pbx.v2.PBXService.UpdateSIPAccount:input_type -> services.pbx.v2.UpdateSIPAccountRequest
	28, // 32: services.pbx.v2.PBXService.UpdateRingGroup:input_type -> services.pbx.v2.UpdateRingGroupRequest
	32, // 33: services.pbx.v2.PBXService.CreateRingGroup:input_type -> services.pbx.v2.CreateRingGroupRequest
	34, // 34: services.pbx.v2.PBXService.DeleteRingGroup:input_type -> services.pbx.v2.DeleteRingGroupRequest
	30, // 35: services.pbx.v2.PBXService.AssignRandomExtension:input_type -> services.pbx.v2.AssignRandomExtensionRequest
	9,  // 36: services.pbx.v2.PBXService.ListPBXUsers:output_type -> services.pbx.v2.ListPBXUsersResponse
	19, // 37: services.pbx.v2.PBXService.GetPBXUser:output_type -> services.pbx.v2.GetPBXUserResponse
	21, // 38: services.pbx.v2.PBXService.ListRingGroups:output_type -> services.pbx.v2.ListRingGroupsResponse
	23, // 39: services.pbx.v2.PBXService.ListRingGroupsBySipId:output_type -> services.pbx.v2.ListRingGroupsBySipIdResponse
	25, // 40: services.pbx.v2.PBXService.GetRingGroup:output_type -> services.pbx.v2.GetRingGroupResponse
	17, // 41: services.pbx.v2.PBXService.GetSIPAccount:output_type -> services.pbx.v2.GetSIPAccountResponse
	15, // 42: services.pbx.v2.PBXService.GetSIPAccountByUserId:output_type -> services.pbx.v2.GetSIPAccountByUserIdResponse
	11, // 43: services.pbx.v2.PBXService.ListSIPAccounts:output_type -> services.pbx.v2.ListSIPAccountsResponse
	13, // 44: services.pbx.v2.PBXService.ListSIPAccountsByRingGroupId:output_type -> services.pbx.v2.ListSIPAccountsByRingGroupIdResponse
	27, // 45: services.pbx.v2.PBXService.UpdateSIPAccount:output_type -> services.pbx.v2.UpdateSIPAccountResponse
	29, // 46: services.pbx.v2.PBXService.UpdateRingGroup:output_type -> services.pbx.v2.UpdateRingGroupResponse
	33, // 47: services.pbx.v2.PBXService.CreateRingGroup:output_type -> services.pbx.v2.CreateRingGroupResponse
	35, // 48: services.pbx.v2.PBXService.DeleteRingGroup:output_type -> services.pbx.v2.DeleteRingGroupResponse
	31, // 49: services.pbx.v2.PBXService.AssignRandomExtension:output_type -> services.pbx.v2.AssignRandomExtensionResponse
	36, // [36:50] is the sub-list for method output_type
	22, // [22:36] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_services_pbx_v2_service_proto_init() }
func file_services_pbx_v2_service_proto_init() {
	if File_services_pbx_v2_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_services_pbx_v2_service_proto_rawDesc), len(file_services_pbx_v2_service_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_pbx_v2_service_proto_goTypes,
		DependencyIndexes: file_services_pbx_v2_service_proto_depIdxs,
		EnumInfos:         file_services_pbx_v2_service_proto_enumTypes,
		MessageInfos:      file_services_pbx_v2_service_proto_msgTypes,
	}.Build()
	File_services_pbx_v2_service_proto = out.File
	file_services_pbx_v2_service_proto_goTypes = nil
	file_services_pbx_v2_service_proto_depIdxs = nil
}
