// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/pbx/v2/service.proto

package pbxv2connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v2 "github.com/tcncloud/api-go/services/pbx/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PBXServiceName is the fully-qualified name of the PBXService service.
	PBXServiceName = "services.pbx.v2.PBXService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PBXServiceListPBXUsersProcedure is the fully-qualified name of the PBXService's ListPBXUsers RPC.
	PBXServiceListPBXUsersProcedure = "/services.pbx.v2.PBXService/ListPBXUsers"
	// PBXServiceGetPBXUserProcedure is the fully-qualified name of the PBXService's GetPBXUser RPC.
	PBXServiceGetPBXUserProcedure = "/services.pbx.v2.PBXService/GetPBXUser"
	// PBXServiceListRingGroupsProcedure is the fully-qualified name of the PBXService's ListRingGroups
	// RPC.
	PBXServiceListRingGroupsProcedure = "/services.pbx.v2.PBXService/ListRingGroups"
	// PBXServiceGetRingGroupProcedure is the fully-qualified name of the PBXService's GetRingGroup RPC.
	PBXServiceGetRingGroupProcedure = "/services.pbx.v2.PBXService/GetRingGroup"
	// PBXServiceGetSIPAccountProcedure is the fully-qualified name of the PBXService's GetSIPAccount
	// RPC.
	PBXServiceGetSIPAccountProcedure = "/services.pbx.v2.PBXService/GetSIPAccount"
	// PBXServiceListSIPAccountsProcedure is the fully-qualified name of the PBXService's
	// ListSIPAccounts RPC.
	PBXServiceListSIPAccountsProcedure = "/services.pbx.v2.PBXService/ListSIPAccounts"
	// PBXServiceUpdateSIPAccountProcedure is the fully-qualified name of the PBXService's
	// UpdateSIPAccount RPC.
	PBXServiceUpdateSIPAccountProcedure = "/services.pbx.v2.PBXService/UpdateSIPAccount"
	// PBXServiceUpdateRingGroupProcedure is the fully-qualified name of the PBXService's
	// UpdateRingGroup RPC.
	PBXServiceUpdateRingGroupProcedure = "/services.pbx.v2.PBXService/UpdateRingGroup"
	// PBXServiceCreateRingGroupProcedure is the fully-qualified name of the PBXService's
	// CreateRingGroup RPC.
	PBXServiceCreateRingGroupProcedure = "/services.pbx.v2.PBXService/CreateRingGroup"
	// PBXServiceDeleteRingGroupProcedure is the fully-qualified name of the PBXService's
	// DeleteRingGroup RPC.
	PBXServiceDeleteRingGroupProcedure = "/services.pbx.v2.PBXService/DeleteRingGroup"
	// PBXServiceAssignRandomExtensionProcedure is the fully-qualified name of the PBXService's
	// AssignRandomExtension RPC.
	PBXServiceAssignRandomExtensionProcedure = "/services.pbx.v2.PBXService/AssignRandomExtension"
)

// PBXServiceClient is a client for the services.pbx.v2.PBXService service.
type PBXServiceClient interface {
	// Returns details of all PBX Users associated with the authenticated callers ORG
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	ListPBXUsers(context.Context, *connect_go.Request[v2.ListPBXUsersRequest]) (*connect_go.Response[v2.ListPBXUsersResponse], error)
	// Returns details of the PBX User associated with the pbx_user_id
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.NotFound: The user does not exist or is not in the caller's ORG.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	GetPBXUser(context.Context, *connect_go.Request[v2.GetPBXUserRequest]) (*connect_go.Response[v2.GetPBXUserResponse], error)
	// Returns details of all Ring Groups associated with the authenticated callers ORG
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	ListRingGroups(context.Context, *connect_go.Request[v2.ListRingGroupsRequest]) (*connect_go.Response[v2.ListRingGroupsResponse], error)
	// Returns details of the Ring Group associated with the ring_group_id
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.NotFound: The group does not exist or is not in the caller's ORG.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	GetRingGroup(context.Context, *connect_go.Request[v2.GetRingGroupRequest]) (*connect_go.Response[v2.GetRingGroupResponse], error)
	// Returns details of the SIP Account associated with the sip_id
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.NotFound: The group does not exist or is not in the caller's ORG.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	GetSIPAccount(context.Context, *connect_go.Request[v2.GetSIPAccountRequest]) (*connect_go.Response[v2.GetSIPAccountResponse], error)
	// Returns details of all SIP Accounts associated with the authenticated callers ORG
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	ListSIPAccounts(context.Context, *connect_go.Request[v2.ListSIPAccountsRequest]) (*connect_go.Response[v2.ListSIPAccountsResponse], error)
	// Updates details of the SIP Account for the specific SIP Account within the authenticated callers ORG.
	// Allows for updating, activating, and deactivating a user.
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.AlreadyExists: The extension already exists
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	UpdateSIPAccount(context.Context, *connect_go.Request[v2.UpdateSIPAccountRequest]) (*connect_go.Response[v2.UpdateSIPAccountResponse], error)
	// Updates details of a Ring Group for the authenticated callers ORG. This operation acts as an "upsert".
	//   - If the groupID is in the update mask and the group exists, the group will be updated.
	//   - If the groupID is not in the update mask a group will be created.
	//
	// Allows for creating and updating a ring group.
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.AlreadyExists: The extension or name already exists.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	UpdateRingGroup(context.Context, *connect_go.Request[v2.UpdateRingGroupRequest]) (*connect_go.Response[v2.UpdateRingGroupResponse], error)
	// Creates a ring group for the authenticated caller's ORG.
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.OutOfRange: The request has fields that are out of range of constraints
	//   - grpc.AlreadyExists: The extension or name already exists.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	CreateRingGroup(context.Context, *connect_go.Request[v2.CreateRingGroupRequest]) (*connect_go.Response[v2.CreateRingGroupResponse], error)
	// Deletes a specific Ring Group for the authenticated caller's ORG.
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The groupID is an invalid format.
	//   - grpc.NotFound: The group does not exist or is not in the caller's ORG.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	DeleteRingGroup(context.Context, *connect_go.Request[v2.DeleteRingGroupRequest]) (*connect_go.Response[v2.DeleteRingGroupResponse], error)
	// Assigns a random extension either to a PBX user or a Ring Group
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.NotFound: No free extension found.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	AssignRandomExtension(context.Context, *connect_go.Request[v2.AssignRandomExtensionRequest]) (*connect_go.Response[v2.AssignRandomExtensionResponse], error)
}

// NewPBXServiceClient constructs a client for the services.pbx.v2.PBXService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPBXServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PBXServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pBXServiceClient{
		listPBXUsers: connect_go.NewClient[v2.ListPBXUsersRequest, v2.ListPBXUsersResponse](
			httpClient,
			baseURL+PBXServiceListPBXUsersProcedure,
			opts...,
		),
		getPBXUser: connect_go.NewClient[v2.GetPBXUserRequest, v2.GetPBXUserResponse](
			httpClient,
			baseURL+PBXServiceGetPBXUserProcedure,
			opts...,
		),
		listRingGroups: connect_go.NewClient[v2.ListRingGroupsRequest, v2.ListRingGroupsResponse](
			httpClient,
			baseURL+PBXServiceListRingGroupsProcedure,
			opts...,
		),
		getRingGroup: connect_go.NewClient[v2.GetRingGroupRequest, v2.GetRingGroupResponse](
			httpClient,
			baseURL+PBXServiceGetRingGroupProcedure,
			opts...,
		),
		getSIPAccount: connect_go.NewClient[v2.GetSIPAccountRequest, v2.GetSIPAccountResponse](
			httpClient,
			baseURL+PBXServiceGetSIPAccountProcedure,
			opts...,
		),
		listSIPAccounts: connect_go.NewClient[v2.ListSIPAccountsRequest, v2.ListSIPAccountsResponse](
			httpClient,
			baseURL+PBXServiceListSIPAccountsProcedure,
			opts...,
		),
		updateSIPAccount: connect_go.NewClient[v2.UpdateSIPAccountRequest, v2.UpdateSIPAccountResponse](
			httpClient,
			baseURL+PBXServiceUpdateSIPAccountProcedure,
			opts...,
		),
		updateRingGroup: connect_go.NewClient[v2.UpdateRingGroupRequest, v2.UpdateRingGroupResponse](
			httpClient,
			baseURL+PBXServiceUpdateRingGroupProcedure,
			opts...,
		),
		createRingGroup: connect_go.NewClient[v2.CreateRingGroupRequest, v2.CreateRingGroupResponse](
			httpClient,
			baseURL+PBXServiceCreateRingGroupProcedure,
			opts...,
		),
		deleteRingGroup: connect_go.NewClient[v2.DeleteRingGroupRequest, v2.DeleteRingGroupResponse](
			httpClient,
			baseURL+PBXServiceDeleteRingGroupProcedure,
			opts...,
		),
		assignRandomExtension: connect_go.NewClient[v2.AssignRandomExtensionRequest, v2.AssignRandomExtensionResponse](
			httpClient,
			baseURL+PBXServiceAssignRandomExtensionProcedure,
			opts...,
		),
	}
}

// pBXServiceClient implements PBXServiceClient.
type pBXServiceClient struct {
	listPBXUsers          *connect_go.Client[v2.ListPBXUsersRequest, v2.ListPBXUsersResponse]
	getPBXUser            *connect_go.Client[v2.GetPBXUserRequest, v2.GetPBXUserResponse]
	listRingGroups        *connect_go.Client[v2.ListRingGroupsRequest, v2.ListRingGroupsResponse]
	getRingGroup          *connect_go.Client[v2.GetRingGroupRequest, v2.GetRingGroupResponse]
	getSIPAccount         *connect_go.Client[v2.GetSIPAccountRequest, v2.GetSIPAccountResponse]
	listSIPAccounts       *connect_go.Client[v2.ListSIPAccountsRequest, v2.ListSIPAccountsResponse]
	updateSIPAccount      *connect_go.Client[v2.UpdateSIPAccountRequest, v2.UpdateSIPAccountResponse]
	updateRingGroup       *connect_go.Client[v2.UpdateRingGroupRequest, v2.UpdateRingGroupResponse]
	createRingGroup       *connect_go.Client[v2.CreateRingGroupRequest, v2.CreateRingGroupResponse]
	deleteRingGroup       *connect_go.Client[v2.DeleteRingGroupRequest, v2.DeleteRingGroupResponse]
	assignRandomExtension *connect_go.Client[v2.AssignRandomExtensionRequest, v2.AssignRandomExtensionResponse]
}

// ListPBXUsers calls services.pbx.v2.PBXService.ListPBXUsers.
func (c *pBXServiceClient) ListPBXUsers(ctx context.Context, req *connect_go.Request[v2.ListPBXUsersRequest]) (*connect_go.Response[v2.ListPBXUsersResponse], error) {
	return c.listPBXUsers.CallUnary(ctx, req)
}

// GetPBXUser calls services.pbx.v2.PBXService.GetPBXUser.
func (c *pBXServiceClient) GetPBXUser(ctx context.Context, req *connect_go.Request[v2.GetPBXUserRequest]) (*connect_go.Response[v2.GetPBXUserResponse], error) {
	return c.getPBXUser.CallUnary(ctx, req)
}

// ListRingGroups calls services.pbx.v2.PBXService.ListRingGroups.
func (c *pBXServiceClient) ListRingGroups(ctx context.Context, req *connect_go.Request[v2.ListRingGroupsRequest]) (*connect_go.Response[v2.ListRingGroupsResponse], error) {
	return c.listRingGroups.CallUnary(ctx, req)
}

// GetRingGroup calls services.pbx.v2.PBXService.GetRingGroup.
func (c *pBXServiceClient) GetRingGroup(ctx context.Context, req *connect_go.Request[v2.GetRingGroupRequest]) (*connect_go.Response[v2.GetRingGroupResponse], error) {
	return c.getRingGroup.CallUnary(ctx, req)
}

// GetSIPAccount calls services.pbx.v2.PBXService.GetSIPAccount.
func (c *pBXServiceClient) GetSIPAccount(ctx context.Context, req *connect_go.Request[v2.GetSIPAccountRequest]) (*connect_go.Response[v2.GetSIPAccountResponse], error) {
	return c.getSIPAccount.CallUnary(ctx, req)
}

// ListSIPAccounts calls services.pbx.v2.PBXService.ListSIPAccounts.
func (c *pBXServiceClient) ListSIPAccounts(ctx context.Context, req *connect_go.Request[v2.ListSIPAccountsRequest]) (*connect_go.Response[v2.ListSIPAccountsResponse], error) {
	return c.listSIPAccounts.CallUnary(ctx, req)
}

// UpdateSIPAccount calls services.pbx.v2.PBXService.UpdateSIPAccount.
func (c *pBXServiceClient) UpdateSIPAccount(ctx context.Context, req *connect_go.Request[v2.UpdateSIPAccountRequest]) (*connect_go.Response[v2.UpdateSIPAccountResponse], error) {
	return c.updateSIPAccount.CallUnary(ctx, req)
}

// UpdateRingGroup calls services.pbx.v2.PBXService.UpdateRingGroup.
func (c *pBXServiceClient) UpdateRingGroup(ctx context.Context, req *connect_go.Request[v2.UpdateRingGroupRequest]) (*connect_go.Response[v2.UpdateRingGroupResponse], error) {
	return c.updateRingGroup.CallUnary(ctx, req)
}

// CreateRingGroup calls services.pbx.v2.PBXService.CreateRingGroup.
func (c *pBXServiceClient) CreateRingGroup(ctx context.Context, req *connect_go.Request[v2.CreateRingGroupRequest]) (*connect_go.Response[v2.CreateRingGroupResponse], error) {
	return c.createRingGroup.CallUnary(ctx, req)
}

// DeleteRingGroup calls services.pbx.v2.PBXService.DeleteRingGroup.
func (c *pBXServiceClient) DeleteRingGroup(ctx context.Context, req *connect_go.Request[v2.DeleteRingGroupRequest]) (*connect_go.Response[v2.DeleteRingGroupResponse], error) {
	return c.deleteRingGroup.CallUnary(ctx, req)
}

// AssignRandomExtension calls services.pbx.v2.PBXService.AssignRandomExtension.
func (c *pBXServiceClient) AssignRandomExtension(ctx context.Context, req *connect_go.Request[v2.AssignRandomExtensionRequest]) (*connect_go.Response[v2.AssignRandomExtensionResponse], error) {
	return c.assignRandomExtension.CallUnary(ctx, req)
}

// PBXServiceHandler is an implementation of the services.pbx.v2.PBXService service.
type PBXServiceHandler interface {
	// Returns details of all PBX Users associated with the authenticated callers ORG
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	ListPBXUsers(context.Context, *connect_go.Request[v2.ListPBXUsersRequest]) (*connect_go.Response[v2.ListPBXUsersResponse], error)
	// Returns details of the PBX User associated with the pbx_user_id
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.NotFound: The user does not exist or is not in the caller's ORG.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	GetPBXUser(context.Context, *connect_go.Request[v2.GetPBXUserRequest]) (*connect_go.Response[v2.GetPBXUserResponse], error)
	// Returns details of all Ring Groups associated with the authenticated callers ORG
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	ListRingGroups(context.Context, *connect_go.Request[v2.ListRingGroupsRequest]) (*connect_go.Response[v2.ListRingGroupsResponse], error)
	// Returns details of the Ring Group associated with the ring_group_id
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.NotFound: The group does not exist or is not in the caller's ORG.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	GetRingGroup(context.Context, *connect_go.Request[v2.GetRingGroupRequest]) (*connect_go.Response[v2.GetRingGroupResponse], error)
	// Returns details of the SIP Account associated with the sip_id
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.NotFound: The group does not exist or is not in the caller's ORG.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	GetSIPAccount(context.Context, *connect_go.Request[v2.GetSIPAccountRequest]) (*connect_go.Response[v2.GetSIPAccountResponse], error)
	// Returns details of all SIP Accounts associated with the authenticated callers ORG
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	ListSIPAccounts(context.Context, *connect_go.Request[v2.ListSIPAccountsRequest]) (*connect_go.Response[v2.ListSIPAccountsResponse], error)
	// Updates details of the SIP Account for the specific SIP Account within the authenticated callers ORG.
	// Allows for updating, activating, and deactivating a user.
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.AlreadyExists: The extension already exists
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	UpdateSIPAccount(context.Context, *connect_go.Request[v2.UpdateSIPAccountRequest]) (*connect_go.Response[v2.UpdateSIPAccountResponse], error)
	// Updates details of a Ring Group for the authenticated callers ORG. This operation acts as an "upsert".
	//   - If the groupID is in the update mask and the group exists, the group will be updated.
	//   - If the groupID is not in the update mask a group will be created.
	//
	// Allows for creating and updating a ring group.
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.AlreadyExists: The extension or name already exists.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	UpdateRingGroup(context.Context, *connect_go.Request[v2.UpdateRingGroupRequest]) (*connect_go.Response[v2.UpdateRingGroupResponse], error)
	// Creates a ring group for the authenticated caller's ORG.
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.OutOfRange: The request has fields that are out of range of constraints
	//   - grpc.AlreadyExists: The extension or name already exists.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	CreateRingGroup(context.Context, *connect_go.Request[v2.CreateRingGroupRequest]) (*connect_go.Response[v2.CreateRingGroupResponse], error)
	// Deletes a specific Ring Group for the authenticated caller's ORG.
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The groupID is an invalid format.
	//   - grpc.NotFound: The group does not exist or is not in the caller's ORG.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	DeleteRingGroup(context.Context, *connect_go.Request[v2.DeleteRingGroupRequest]) (*connect_go.Response[v2.DeleteRingGroupResponse], error)
	// Assigns a random extension either to a PBX user or a Ring Group
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.NotFound: No free extension found.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	AssignRandomExtension(context.Context, *connect_go.Request[v2.AssignRandomExtensionRequest]) (*connect_go.Response[v2.AssignRandomExtensionResponse], error)
}

// NewPBXServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPBXServiceHandler(svc PBXServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	pBXServiceListPBXUsersHandler := connect_go.NewUnaryHandler(
		PBXServiceListPBXUsersProcedure,
		svc.ListPBXUsers,
		opts...,
	)
	pBXServiceGetPBXUserHandler := connect_go.NewUnaryHandler(
		PBXServiceGetPBXUserProcedure,
		svc.GetPBXUser,
		opts...,
	)
	pBXServiceListRingGroupsHandler := connect_go.NewUnaryHandler(
		PBXServiceListRingGroupsProcedure,
		svc.ListRingGroups,
		opts...,
	)
	pBXServiceGetRingGroupHandler := connect_go.NewUnaryHandler(
		PBXServiceGetRingGroupProcedure,
		svc.GetRingGroup,
		opts...,
	)
	pBXServiceGetSIPAccountHandler := connect_go.NewUnaryHandler(
		PBXServiceGetSIPAccountProcedure,
		svc.GetSIPAccount,
		opts...,
	)
	pBXServiceListSIPAccountsHandler := connect_go.NewUnaryHandler(
		PBXServiceListSIPAccountsProcedure,
		svc.ListSIPAccounts,
		opts...,
	)
	pBXServiceUpdateSIPAccountHandler := connect_go.NewUnaryHandler(
		PBXServiceUpdateSIPAccountProcedure,
		svc.UpdateSIPAccount,
		opts...,
	)
	pBXServiceUpdateRingGroupHandler := connect_go.NewUnaryHandler(
		PBXServiceUpdateRingGroupProcedure,
		svc.UpdateRingGroup,
		opts...,
	)
	pBXServiceCreateRingGroupHandler := connect_go.NewUnaryHandler(
		PBXServiceCreateRingGroupProcedure,
		svc.CreateRingGroup,
		opts...,
	)
	pBXServiceDeleteRingGroupHandler := connect_go.NewUnaryHandler(
		PBXServiceDeleteRingGroupProcedure,
		svc.DeleteRingGroup,
		opts...,
	)
	pBXServiceAssignRandomExtensionHandler := connect_go.NewUnaryHandler(
		PBXServiceAssignRandomExtensionProcedure,
		svc.AssignRandomExtension,
		opts...,
	)
	return "/services.pbx.v2.PBXService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PBXServiceListPBXUsersProcedure:
			pBXServiceListPBXUsersHandler.ServeHTTP(w, r)
		case PBXServiceGetPBXUserProcedure:
			pBXServiceGetPBXUserHandler.ServeHTTP(w, r)
		case PBXServiceListRingGroupsProcedure:
			pBXServiceListRingGroupsHandler.ServeHTTP(w, r)
		case PBXServiceGetRingGroupProcedure:
			pBXServiceGetRingGroupHandler.ServeHTTP(w, r)
		case PBXServiceGetSIPAccountProcedure:
			pBXServiceGetSIPAccountHandler.ServeHTTP(w, r)
		case PBXServiceListSIPAccountsProcedure:
			pBXServiceListSIPAccountsHandler.ServeHTTP(w, r)
		case PBXServiceUpdateSIPAccountProcedure:
			pBXServiceUpdateSIPAccountHandler.ServeHTTP(w, r)
		case PBXServiceUpdateRingGroupProcedure:
			pBXServiceUpdateRingGroupHandler.ServeHTTP(w, r)
		case PBXServiceCreateRingGroupProcedure:
			pBXServiceCreateRingGroupHandler.ServeHTTP(w, r)
		case PBXServiceDeleteRingGroupProcedure:
			pBXServiceDeleteRingGroupHandler.ServeHTTP(w, r)
		case PBXServiceAssignRandomExtensionProcedure:
			pBXServiceAssignRandomExtensionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPBXServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPBXServiceHandler struct{}

func (UnimplementedPBXServiceHandler) ListPBXUsers(context.Context, *connect_go.Request[v2.ListPBXUsersRequest]) (*connect_go.Response[v2.ListPBXUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.pbx.v2.PBXService.ListPBXUsers is not implemented"))
}

func (UnimplementedPBXServiceHandler) GetPBXUser(context.Context, *connect_go.Request[v2.GetPBXUserRequest]) (*connect_go.Response[v2.GetPBXUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.pbx.v2.PBXService.GetPBXUser is not implemented"))
}

func (UnimplementedPBXServiceHandler) ListRingGroups(context.Context, *connect_go.Request[v2.ListRingGroupsRequest]) (*connect_go.Response[v2.ListRingGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.pbx.v2.PBXService.ListRingGroups is not implemented"))
}

func (UnimplementedPBXServiceHandler) GetRingGroup(context.Context, *connect_go.Request[v2.GetRingGroupRequest]) (*connect_go.Response[v2.GetRingGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.pbx.v2.PBXService.GetRingGroup is not implemented"))
}

func (UnimplementedPBXServiceHandler) GetSIPAccount(context.Context, *connect_go.Request[v2.GetSIPAccountRequest]) (*connect_go.Response[v2.GetSIPAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.pbx.v2.PBXService.GetSIPAccount is not implemented"))
}

func (UnimplementedPBXServiceHandler) ListSIPAccounts(context.Context, *connect_go.Request[v2.ListSIPAccountsRequest]) (*connect_go.Response[v2.ListSIPAccountsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.pbx.v2.PBXService.ListSIPAccounts is not implemented"))
}

func (UnimplementedPBXServiceHandler) UpdateSIPAccount(context.Context, *connect_go.Request[v2.UpdateSIPAccountRequest]) (*connect_go.Response[v2.UpdateSIPAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.pbx.v2.PBXService.UpdateSIPAccount is not implemented"))
}

func (UnimplementedPBXServiceHandler) UpdateRingGroup(context.Context, *connect_go.Request[v2.UpdateRingGroupRequest]) (*connect_go.Response[v2.UpdateRingGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.pbx.v2.PBXService.UpdateRingGroup is not implemented"))
}

func (UnimplementedPBXServiceHandler) CreateRingGroup(context.Context, *connect_go.Request[v2.CreateRingGroupRequest]) (*connect_go.Response[v2.CreateRingGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.pbx.v2.PBXService.CreateRingGroup is not implemented"))
}

func (UnimplementedPBXServiceHandler) DeleteRingGroup(context.Context, *connect_go.Request[v2.DeleteRingGroupRequest]) (*connect_go.Response[v2.DeleteRingGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.pbx.v2.PBXService.DeleteRingGroup is not implemented"))
}

func (UnimplementedPBXServiceHandler) AssignRandomExtension(context.Context, *connect_go.Request[v2.AssignRandomExtensionRequest]) (*connect_go.Response[v2.AssignRandomExtensionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.pbx.v2.PBXService.AssignRandomExtension is not implemented"))
}
