// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/pbx/v1/service.proto

package pbxv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/tcncloud/api-go/services/pbx/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PBXServiceName is the fully-qualified name of the PBXService service.
	PBXServiceName = "services.pbx.v1.PBXService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PBXServiceQueryPbxUsersProcedure is the fully-qualified name of the PBXService's QueryPbxUsers
	// RPC.
	PBXServiceQueryPbxUsersProcedure = "/services.pbx.v1.PBXService/QueryPbxUsers"
	// PBXServiceQueryRingGroupsProcedure is the fully-qualified name of the PBXService's
	// QueryRingGroups RPC.
	PBXServiceQueryRingGroupsProcedure = "/services.pbx.v1.PBXService/QueryRingGroups"
	// PBXServiceUpdatePbxUserProcedure is the fully-qualified name of the PBXService's UpdatePbxUser
	// RPC.
	PBXServiceUpdatePbxUserProcedure = "/services.pbx.v1.PBXService/UpdatePbxUser"
	// PBXServiceUpdateRingGroupProcedure is the fully-qualified name of the PBXService's
	// UpdateRingGroup RPC.
	PBXServiceUpdateRingGroupProcedure = "/services.pbx.v1.PBXService/UpdateRingGroup"
	// PBXServiceCreateRingGroupProcedure is the fully-qualified name of the PBXService's
	// CreateRingGroup RPC.
	PBXServiceCreateRingGroupProcedure = "/services.pbx.v1.PBXService/CreateRingGroup"
	// PBXServiceDeleteRingGroupProcedure is the fully-qualified name of the PBXService's
	// DeleteRingGroup RPC.
	PBXServiceDeleteRingGroupProcedure = "/services.pbx.v1.PBXService/DeleteRingGroup"
	// PBXServiceAssignRandomExtensionProcedure is the fully-qualified name of the PBXService's
	// AssignRandomExtension RPC.
	PBXServiceAssignRandomExtensionProcedure = "/services.pbx.v1.PBXService/AssignRandomExtension"
)

// PBXServiceClient is a client for the services.pbx.v1.PBXService service.
type PBXServiceClient interface {
	// Queries details of PBX Users based on specified criteria for the authenticated callers ORG
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	QueryPbxUsers(context.Context, *connect_go.Request[v1.QueryPbxUsersRequest]) (*connect_go.Response[v1.QueryPbxUsersResponse], error)
	// Queries details of Ring Groups based on specified criteria for the authenticated callers ORG
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	QueryRingGroups(context.Context, *connect_go.Request[v1.QueryRingGroupsRequest]) (*connect_go.Response[v1.QueryRingGroupsResponse], error)
	// Updates details of a PBX User for the authenticated callers ORG.
	// Allows for updating, activating, and deactivating a user.
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	UpdatePbxUser(context.Context, *connect_go.Request[v1.UpdatePbxUserRequest]) (*connect_go.Response[v1.UpdatePbxUserResponse], error)
	// Updates details of a Ring Group for the authenticated callers ORG. This operation acts as an "upsert".
	//   - If the groupID is in the update mask and the group exists, the group will be updated.
	//   - If the groupID is not in the update mask a group will be created.
	//
	// Allows for creating and updating a ring group.
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	UpdateRingGroup(context.Context, *connect_go.Request[v1.UpdateRingGroupRequest]) (*connect_go.Response[v1.UpdateRingGroupResponse], error)
	// Creates a ring group for the authenticated caller's ORG.
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	CreateRingGroup(context.Context, *connect_go.Request[v1.CreateRingGroupRequest]) (*connect_go.Response[v1.CreateRingGroupResponse], error)
	// Deletes a specific Ring Group for the authenticated caller's ORG.
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The groupID is an invalid format.
	//   - grpc.NotFound: The group does not exist or is not in the caller's ORG.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	DeleteRingGroup(context.Context, *connect_go.Request[v1.DeleteRingGroupRequest]) (*connect_go.Response[v1.DeleteRingGroupResponse], error)
	// Assigns a random extension either to a PBX user or a Ring Group
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	AssignRandomExtension(context.Context, *connect_go.Request[v1.AssignRandomExtensionRequest]) (*connect_go.Response[v1.AssignRandomExtensionResponse], error)
}

// NewPBXServiceClient constructs a client for the services.pbx.v1.PBXService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPBXServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PBXServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pBXServiceClient{
		queryPbxUsers: connect_go.NewClient[v1.QueryPbxUsersRequest, v1.QueryPbxUsersResponse](
			httpClient,
			baseURL+PBXServiceQueryPbxUsersProcedure,
			opts...,
		),
		queryRingGroups: connect_go.NewClient[v1.QueryRingGroupsRequest, v1.QueryRingGroupsResponse](
			httpClient,
			baseURL+PBXServiceQueryRingGroupsProcedure,
			opts...,
		),
		updatePbxUser: connect_go.NewClient[v1.UpdatePbxUserRequest, v1.UpdatePbxUserResponse](
			httpClient,
			baseURL+PBXServiceUpdatePbxUserProcedure,
			opts...,
		),
		updateRingGroup: connect_go.NewClient[v1.UpdateRingGroupRequest, v1.UpdateRingGroupResponse](
			httpClient,
			baseURL+PBXServiceUpdateRingGroupProcedure,
			opts...,
		),
		createRingGroup: connect_go.NewClient[v1.CreateRingGroupRequest, v1.CreateRingGroupResponse](
			httpClient,
			baseURL+PBXServiceCreateRingGroupProcedure,
			opts...,
		),
		deleteRingGroup: connect_go.NewClient[v1.DeleteRingGroupRequest, v1.DeleteRingGroupResponse](
			httpClient,
			baseURL+PBXServiceDeleteRingGroupProcedure,
			opts...,
		),
		assignRandomExtension: connect_go.NewClient[v1.AssignRandomExtensionRequest, v1.AssignRandomExtensionResponse](
			httpClient,
			baseURL+PBXServiceAssignRandomExtensionProcedure,
			opts...,
		),
	}
}

// pBXServiceClient implements PBXServiceClient.
type pBXServiceClient struct {
	queryPbxUsers         *connect_go.Client[v1.QueryPbxUsersRequest, v1.QueryPbxUsersResponse]
	queryRingGroups       *connect_go.Client[v1.QueryRingGroupsRequest, v1.QueryRingGroupsResponse]
	updatePbxUser         *connect_go.Client[v1.UpdatePbxUserRequest, v1.UpdatePbxUserResponse]
	updateRingGroup       *connect_go.Client[v1.UpdateRingGroupRequest, v1.UpdateRingGroupResponse]
	createRingGroup       *connect_go.Client[v1.CreateRingGroupRequest, v1.CreateRingGroupResponse]
	deleteRingGroup       *connect_go.Client[v1.DeleteRingGroupRequest, v1.DeleteRingGroupResponse]
	assignRandomExtension *connect_go.Client[v1.AssignRandomExtensionRequest, v1.AssignRandomExtensionResponse]
}

// QueryPbxUsers calls services.pbx.v1.PBXService.QueryPbxUsers.
func (c *pBXServiceClient) QueryPbxUsers(ctx context.Context, req *connect_go.Request[v1.QueryPbxUsersRequest]) (*connect_go.Response[v1.QueryPbxUsersResponse], error) {
	return c.queryPbxUsers.CallUnary(ctx, req)
}

// QueryRingGroups calls services.pbx.v1.PBXService.QueryRingGroups.
func (c *pBXServiceClient) QueryRingGroups(ctx context.Context, req *connect_go.Request[v1.QueryRingGroupsRequest]) (*connect_go.Response[v1.QueryRingGroupsResponse], error) {
	return c.queryRingGroups.CallUnary(ctx, req)
}

// UpdatePbxUser calls services.pbx.v1.PBXService.UpdatePbxUser.
func (c *pBXServiceClient) UpdatePbxUser(ctx context.Context, req *connect_go.Request[v1.UpdatePbxUserRequest]) (*connect_go.Response[v1.UpdatePbxUserResponse], error) {
	return c.updatePbxUser.CallUnary(ctx, req)
}

// UpdateRingGroup calls services.pbx.v1.PBXService.UpdateRingGroup.
func (c *pBXServiceClient) UpdateRingGroup(ctx context.Context, req *connect_go.Request[v1.UpdateRingGroupRequest]) (*connect_go.Response[v1.UpdateRingGroupResponse], error) {
	return c.updateRingGroup.CallUnary(ctx, req)
}

// CreateRingGroup calls services.pbx.v1.PBXService.CreateRingGroup.
func (c *pBXServiceClient) CreateRingGroup(ctx context.Context, req *connect_go.Request[v1.CreateRingGroupRequest]) (*connect_go.Response[v1.CreateRingGroupResponse], error) {
	return c.createRingGroup.CallUnary(ctx, req)
}

// DeleteRingGroup calls services.pbx.v1.PBXService.DeleteRingGroup.
func (c *pBXServiceClient) DeleteRingGroup(ctx context.Context, req *connect_go.Request[v1.DeleteRingGroupRequest]) (*connect_go.Response[v1.DeleteRingGroupResponse], error) {
	return c.deleteRingGroup.CallUnary(ctx, req)
}

// AssignRandomExtension calls services.pbx.v1.PBXService.AssignRandomExtension.
func (c *pBXServiceClient) AssignRandomExtension(ctx context.Context, req *connect_go.Request[v1.AssignRandomExtensionRequest]) (*connect_go.Response[v1.AssignRandomExtensionResponse], error) {
	return c.assignRandomExtension.CallUnary(ctx, req)
}

// PBXServiceHandler is an implementation of the services.pbx.v1.PBXService service.
type PBXServiceHandler interface {
	// Queries details of PBX Users based on specified criteria for the authenticated callers ORG
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	QueryPbxUsers(context.Context, *connect_go.Request[v1.QueryPbxUsersRequest]) (*connect_go.Response[v1.QueryPbxUsersResponse], error)
	// Queries details of Ring Groups based on specified criteria for the authenticated callers ORG
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	QueryRingGroups(context.Context, *connect_go.Request[v1.QueryRingGroupsRequest]) (*connect_go.Response[v1.QueryRingGroupsResponse], error)
	// Updates details of a PBX User for the authenticated callers ORG.
	// Allows for updating, activating, and deactivating a user.
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	UpdatePbxUser(context.Context, *connect_go.Request[v1.UpdatePbxUserRequest]) (*connect_go.Response[v1.UpdatePbxUserResponse], error)
	// Updates details of a Ring Group for the authenticated callers ORG. This operation acts as an "upsert".
	//   - If the groupID is in the update mask and the group exists, the group will be updated.
	//   - If the groupID is not in the update mask a group will be created.
	//
	// Allows for creating and updating a ring group.
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	UpdateRingGroup(context.Context, *connect_go.Request[v1.UpdateRingGroupRequest]) (*connect_go.Response[v1.UpdateRingGroupResponse], error)
	// Creates a ring group for the authenticated caller's ORG.
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request is invalid.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	CreateRingGroup(context.Context, *connect_go.Request[v1.CreateRingGroupRequest]) (*connect_go.Response[v1.CreateRingGroupResponse], error)
	// Deletes a specific Ring Group for the authenticated caller's ORG.
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The groupID is an invalid format.
	//   - grpc.NotFound: The group does not exist or is not in the caller's ORG.
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	DeleteRingGroup(context.Context, *connect_go.Request[v1.DeleteRingGroupRequest]) (*connect_go.Response[v1.DeleteRingGroupResponse], error)
	// Assigns a random extension either to a PBX user or a Ring Group
	// Required permissions:
	//
	//	PBX-MANAGER
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.Internal: An internal error occurred.
	//   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
	AssignRandomExtension(context.Context, *connect_go.Request[v1.AssignRandomExtensionRequest]) (*connect_go.Response[v1.AssignRandomExtensionResponse], error)
}

// NewPBXServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPBXServiceHandler(svc PBXServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	pBXServiceQueryPbxUsersHandler := connect_go.NewUnaryHandler(
		PBXServiceQueryPbxUsersProcedure,
		svc.QueryPbxUsers,
		opts...,
	)
	pBXServiceQueryRingGroupsHandler := connect_go.NewUnaryHandler(
		PBXServiceQueryRingGroupsProcedure,
		svc.QueryRingGroups,
		opts...,
	)
	pBXServiceUpdatePbxUserHandler := connect_go.NewUnaryHandler(
		PBXServiceUpdatePbxUserProcedure,
		svc.UpdatePbxUser,
		opts...,
	)
	pBXServiceUpdateRingGroupHandler := connect_go.NewUnaryHandler(
		PBXServiceUpdateRingGroupProcedure,
		svc.UpdateRingGroup,
		opts...,
	)
	pBXServiceCreateRingGroupHandler := connect_go.NewUnaryHandler(
		PBXServiceCreateRingGroupProcedure,
		svc.CreateRingGroup,
		opts...,
	)
	pBXServiceDeleteRingGroupHandler := connect_go.NewUnaryHandler(
		PBXServiceDeleteRingGroupProcedure,
		svc.DeleteRingGroup,
		opts...,
	)
	pBXServiceAssignRandomExtensionHandler := connect_go.NewUnaryHandler(
		PBXServiceAssignRandomExtensionProcedure,
		svc.AssignRandomExtension,
		opts...,
	)
	return "/services.pbx.v1.PBXService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PBXServiceQueryPbxUsersProcedure:
			pBXServiceQueryPbxUsersHandler.ServeHTTP(w, r)
		case PBXServiceQueryRingGroupsProcedure:
			pBXServiceQueryRingGroupsHandler.ServeHTTP(w, r)
		case PBXServiceUpdatePbxUserProcedure:
			pBXServiceUpdatePbxUserHandler.ServeHTTP(w, r)
		case PBXServiceUpdateRingGroupProcedure:
			pBXServiceUpdateRingGroupHandler.ServeHTTP(w, r)
		case PBXServiceCreateRingGroupProcedure:
			pBXServiceCreateRingGroupHandler.ServeHTTP(w, r)
		case PBXServiceDeleteRingGroupProcedure:
			pBXServiceDeleteRingGroupHandler.ServeHTTP(w, r)
		case PBXServiceAssignRandomExtensionProcedure:
			pBXServiceAssignRandomExtensionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPBXServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPBXServiceHandler struct{}

func (UnimplementedPBXServiceHandler) QueryPbxUsers(context.Context, *connect_go.Request[v1.QueryPbxUsersRequest]) (*connect_go.Response[v1.QueryPbxUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.pbx.v1.PBXService.QueryPbxUsers is not implemented"))
}

func (UnimplementedPBXServiceHandler) QueryRingGroups(context.Context, *connect_go.Request[v1.QueryRingGroupsRequest]) (*connect_go.Response[v1.QueryRingGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.pbx.v1.PBXService.QueryRingGroups is not implemented"))
}

func (UnimplementedPBXServiceHandler) UpdatePbxUser(context.Context, *connect_go.Request[v1.UpdatePbxUserRequest]) (*connect_go.Response[v1.UpdatePbxUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.pbx.v1.PBXService.UpdatePbxUser is not implemented"))
}

func (UnimplementedPBXServiceHandler) UpdateRingGroup(context.Context, *connect_go.Request[v1.UpdateRingGroupRequest]) (*connect_go.Response[v1.UpdateRingGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.pbx.v1.PBXService.UpdateRingGroup is not implemented"))
}

func (UnimplementedPBXServiceHandler) CreateRingGroup(context.Context, *connect_go.Request[v1.CreateRingGroupRequest]) (*connect_go.Response[v1.CreateRingGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.pbx.v1.PBXService.CreateRingGroup is not implemented"))
}

func (UnimplementedPBXServiceHandler) DeleteRingGroup(context.Context, *connect_go.Request[v1.DeleteRingGroupRequest]) (*connect_go.Response[v1.DeleteRingGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.pbx.v1.PBXService.DeleteRingGroup is not implemented"))
}

func (UnimplementedPBXServiceHandler) AssignRandomExtension(context.Context, *connect_go.Request[v1.AssignRandomExtensionRequest]) (*connect_go.Response[v1.AssignRandomExtensionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.pbx.v1.PBXService.AssignRandomExtension is not implemented"))
}
