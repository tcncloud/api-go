// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        (unknown)
// source: services/pbx/v1/service.proto

package pbxv1

import (
	_ "github.com/tcncloud/api-go/annotations"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// -------------------------
// Enums
// -------------------------
type RingStrategy int32

const (
	RingStrategy_RING_STRATEGY_UNSPECIFIED RingStrategy = 0
	RingStrategy_RING_STRATEGY_RING_ALL    RingStrategy = 1
	RingStrategy_RING_STRATEGY_ROUND_ROBIN RingStrategy = 2
	RingStrategy_RING_STRATEGY_RANDOM      RingStrategy = 3
)

// Enum value maps for RingStrategy.
var (
	RingStrategy_name = map[int32]string{
		0: "RING_STRATEGY_UNSPECIFIED",
		1: "RING_STRATEGY_RING_ALL",
		2: "RING_STRATEGY_ROUND_ROBIN",
		3: "RING_STRATEGY_RANDOM",
	}
	RingStrategy_value = map[string]int32{
		"RING_STRATEGY_UNSPECIFIED": 0,
		"RING_STRATEGY_RING_ALL":    1,
		"RING_STRATEGY_ROUND_ROBIN": 2,
		"RING_STRATEGY_RANDOM":      3,
	}
)

func (x RingStrategy) Enum() *RingStrategy {
	p := new(RingStrategy)
	*p = x
	return p
}

func (x RingStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RingStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_services_pbx_v1_service_proto_enumTypes[0].Descriptor()
}

func (RingStrategy) Type() protoreflect.EnumType {
	return &file_services_pbx_v1_service_proto_enumTypes[0]
}

func (x RingStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RingStrategy.Descriptor instead.
func (RingStrategy) EnumDescriptor() ([]byte, []int) {
	return file_services_pbx_v1_service_proto_rawDescGZIP(), []int{0}
}

// -------------------------
// Entity Definitions
// -------------------------
type PBXUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PbxUserId     string                 `protobuf:"bytes,1,opt,name=pbx_user_id,json=pbxUserId,proto3" json:"pbx_user_id,omitempty"`
	OrgUserId     string                 `protobuf:"bytes,2,opt,name=org_user_id,json=orgUserId,proto3" json:"org_user_id,omitempty"`
	SipAccounts   []*SIPAccount          `protobuf:"bytes,3,rep,name=sip_accounts,json=sipAccounts,proto3" json:"sip_accounts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PBXUser) Reset() {
	*x = PBXUser{}
	mi := &file_services_pbx_v1_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PBXUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBXUser) ProtoMessage() {}

func (x *PBXUser) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v1_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBXUser.ProtoReflect.Descriptor instead.
func (*PBXUser) Descriptor() ([]byte, []int) {
	return file_services_pbx_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *PBXUser) GetPbxUserId() string {
	if x != nil {
		return x.PbxUserId
	}
	return ""
}

func (x *PBXUser) GetOrgUserId() string {
	if x != nil {
		return x.OrgUserId
	}
	return ""
}

func (x *PBXUser) GetSipAccounts() []*SIPAccount {
	if x != nil {
		return x.SipAccounts
	}
	return nil
}

type SIPAccount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SipId         string                 `protobuf:"bytes,1,opt,name=sip_id,json=sipId,proto3" json:"sip_id,omitempty"`
	IsActive      bool                   `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	Extension     int32                  `protobuf:"varint,3,opt,name=extension,proto3" json:"extension,omitempty"`
	RingGroups    []*RingGroup           `protobuf:"bytes,4,rep,name=ring_groups,json=ringGroups,proto3" json:"ring_groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SIPAccount) Reset() {
	*x = SIPAccount{}
	mi := &file_services_pbx_v1_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SIPAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SIPAccount) ProtoMessage() {}

func (x *SIPAccount) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v1_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SIPAccount.ProtoReflect.Descriptor instead.
func (*SIPAccount) Descriptor() ([]byte, []int) {
	return file_services_pbx_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *SIPAccount) GetSipId() string {
	if x != nil {
		return x.SipId
	}
	return ""
}

func (x *SIPAccount) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *SIPAccount) GetExtension() int32 {
	if x != nil {
		return x.Extension
	}
	return 0
}

func (x *SIPAccount) GetRingGroups() []*RingGroup {
	if x != nil {
		return x.RingGroups
	}
	return nil
}

type RingGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Extension     int32                  `protobuf:"varint,4,opt,name=extension,proto3" json:"extension,omitempty"`
	RingStrategy  RingStrategy           `protobuf:"varint,5,opt,name=ring_strategy,json=ringStrategy,proto3,enum=services.pbx.v1.RingStrategy" json:"ring_strategy,omitempty"`
	PbxUsers      []*PBXUser             `protobuf:"bytes,6,rep,name=pbx_users,json=pbxUsers,proto3" json:"pbx_users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RingGroup) Reset() {
	*x = RingGroup{}
	mi := &file_services_pbx_v1_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RingGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RingGroup) ProtoMessage() {}

func (x *RingGroup) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v1_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RingGroup.ProtoReflect.Descriptor instead.
func (*RingGroup) Descriptor() ([]byte, []int) {
	return file_services_pbx_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *RingGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RingGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RingGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RingGroup) GetExtension() int32 {
	if x != nil {
		return x.Extension
	}
	return 0
}

func (x *RingGroup) GetRingStrategy() RingStrategy {
	if x != nil {
		return x.RingStrategy
	}
	return RingStrategy_RING_STRATEGY_UNSPECIFIED
}

func (x *RingGroup) GetPbxUsers() []*PBXUser {
	if x != nil {
		return x.PbxUsers
	}
	return nil
}

// -------------------------
//
//	RPC Messages
//
// -------------------------
type QueryPbxUsersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PbxUserId     string                 `protobuf:"bytes,1,opt,name=pbx_user_id,json=pbxUserId,proto3" json:"pbx_user_id,omitempty"`        // Optional: If you want to fetch a specific user by ID.
	ResponseMask  *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=response_mask,json=responseMask,proto3" json:"response_mask,omitempty"` // Fields to be returned in the response.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryPbxUsersRequest) Reset() {
	*x = QueryPbxUsersRequest{}
	mi := &file_services_pbx_v1_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryPbxUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPbxUsersRequest) ProtoMessage() {}

func (x *QueryPbxUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v1_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPbxUsersRequest.ProtoReflect.Descriptor instead.
func (*QueryPbxUsersRequest) Descriptor() ([]byte, []int) {
	return file_services_pbx_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *QueryPbxUsersRequest) GetPbxUserId() string {
	if x != nil {
		return x.PbxUserId
	}
	return ""
}

func (x *QueryPbxUsersRequest) GetResponseMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ResponseMask
	}
	return nil
}

type QueryPbxUsersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Users         []*PBXUser             `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryPbxUsersResponse) Reset() {
	*x = QueryPbxUsersResponse{}
	mi := &file_services_pbx_v1_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryPbxUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPbxUsersResponse) ProtoMessage() {}

func (x *QueryPbxUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v1_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPbxUsersResponse.ProtoReflect.Descriptor instead.
func (*QueryPbxUsersResponse) Descriptor() ([]byte, []int) {
	return file_services_pbx_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *QueryPbxUsersResponse) GetUsers() []*PBXUser {
	if x != nil {
		return x.Users
	}
	return nil
}

type QueryRingGroupsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupId       string                 `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                // Optional: If you want to fetch a specific group by ID.
	ResponseMask  *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=response_mask,json=responseMask,proto3" json:"response_mask,omitempty"` // Fields to be returned in the response.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRingGroupsRequest) Reset() {
	*x = QueryRingGroupsRequest{}
	mi := &file_services_pbx_v1_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRingGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRingGroupsRequest) ProtoMessage() {}

func (x *QueryRingGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v1_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRingGroupsRequest.ProtoReflect.Descriptor instead.
func (*QueryRingGroupsRequest) Descriptor() ([]byte, []int) {
	return file_services_pbx_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *QueryRingGroupsRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *QueryRingGroupsRequest) GetResponseMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ResponseMask
	}
	return nil
}

type QueryRingGroupsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Groups        []*RingGroup           `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRingGroupsResponse) Reset() {
	*x = QueryRingGroupsResponse{}
	mi := &file_services_pbx_v1_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRingGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRingGroupsResponse) ProtoMessage() {}

func (x *QueryRingGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v1_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRingGroupsResponse.ProtoReflect.Descriptor instead.
func (*QueryRingGroupsResponse) Descriptor() ([]byte, []int) {
	return file_services_pbx_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *QueryRingGroupsResponse) GetGroups() []*RingGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

type UpdatePbxUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *PBXUser               `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`                               // The user details to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"` // Fields to be updated.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePbxUserRequest) Reset() {
	*x = UpdatePbxUserRequest{}
	mi := &file_services_pbx_v1_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePbxUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePbxUserRequest) ProtoMessage() {}

func (x *UpdatePbxUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v1_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePbxUserRequest.ProtoReflect.Descriptor instead.
func (*UpdatePbxUserRequest) Descriptor() ([]byte, []int) {
	return file_services_pbx_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdatePbxUserRequest) GetUser() *PBXUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UpdatePbxUserRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdatePbxUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *PBXUser               `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePbxUserResponse) Reset() {
	*x = UpdatePbxUserResponse{}
	mi := &file_services_pbx_v1_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePbxUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePbxUserResponse) ProtoMessage() {}

func (x *UpdatePbxUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v1_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePbxUserResponse.ProtoReflect.Descriptor instead.
func (*UpdatePbxUserResponse) Descriptor() ([]byte, []int) {
	return file_services_pbx_v1_service_proto_rawDescGZIP(), []int{8}
}

func (x *UpdatePbxUserResponse) GetUser() *PBXUser {
	if x != nil {
		return x.User
	}
	return nil
}

type UpdateRingGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         *RingGroup             `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"` // Fields to be modified.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRingGroupRequest) Reset() {
	*x = UpdateRingGroupRequest{}
	mi := &file_services_pbx_v1_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRingGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRingGroupRequest) ProtoMessage() {}

func (x *UpdateRingGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v1_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRingGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateRingGroupRequest) Descriptor() ([]byte, []int) {
	return file_services_pbx_v1_service_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateRingGroupRequest) GetGroup() *RingGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *UpdateRingGroupRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateRingGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         *RingGroup             `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRingGroupResponse) Reset() {
	*x = UpdateRingGroupResponse{}
	mi := &file_services_pbx_v1_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRingGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRingGroupResponse) ProtoMessage() {}

func (x *UpdateRingGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v1_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRingGroupResponse.ProtoReflect.Descriptor instead.
func (*UpdateRingGroupResponse) Descriptor() ([]byte, []int) {
	return file_services_pbx_v1_service_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateRingGroupResponse) GetGroup() *RingGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

type AssignRandomExtensionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignRandomExtensionRequest) Reset() {
	*x = AssignRandomExtensionRequest{}
	mi := &file_services_pbx_v1_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignRandomExtensionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignRandomExtensionRequest) ProtoMessage() {}

func (x *AssignRandomExtensionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v1_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignRandomExtensionRequest.ProtoReflect.Descriptor instead.
func (*AssignRandomExtensionRequest) Descriptor() ([]byte, []int) {
	return file_services_pbx_v1_service_proto_rawDescGZIP(), []int{11}
}

type AssignRandomExtensionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Extension     int32                  `protobuf:"varint,1,opt,name=extension,proto3" json:"extension,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignRandomExtensionResponse) Reset() {
	*x = AssignRandomExtensionResponse{}
	mi := &file_services_pbx_v1_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignRandomExtensionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignRandomExtensionResponse) ProtoMessage() {}

func (x *AssignRandomExtensionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v1_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignRandomExtensionResponse.ProtoReflect.Descriptor instead.
func (*AssignRandomExtensionResponse) Descriptor() ([]byte, []int) {
	return file_services_pbx_v1_service_proto_rawDescGZIP(), []int{12}
}

func (x *AssignRandomExtensionResponse) GetExtension() int32 {
	if x != nil {
		return x.Extension
	}
	return 0
}

type CreateRingGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                        // Required: The name of the group.
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`                                                          // Optional: The description of the group.
	RingStrategy  RingStrategy           `protobuf:"varint,3,opt,name=ring_strategy,json=ringStrategy,proto3,enum=services.pbx.v1.RingStrategy" json:"ring_strategy,omitempty"` // Optional: The ring strategy of the group.
	PbxUserIds    []string               `protobuf:"bytes,4,rep,name=pbx_user_ids,json=pbxUserIds,proto3" json:"pbx_user_ids,omitempty"`                                        // Optional: The PBX user IDs to add to the group.
	Extension     int32                  `protobuf:"varint,5,opt,name=extension,proto3" json:"extension,omitempty"`                                                             // Optional: The extension for the ring group.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRingGroupRequest) Reset() {
	*x = CreateRingGroupRequest{}
	mi := &file_services_pbx_v1_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRingGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRingGroupRequest) ProtoMessage() {}

func (x *CreateRingGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v1_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRingGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateRingGroupRequest) Descriptor() ([]byte, []int) {
	return file_services_pbx_v1_service_proto_rawDescGZIP(), []int{13}
}

func (x *CreateRingGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateRingGroupRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateRingGroupRequest) GetRingStrategy() RingStrategy {
	if x != nil {
		return x.RingStrategy
	}
	return RingStrategy_RING_STRATEGY_UNSPECIFIED
}

func (x *CreateRingGroupRequest) GetPbxUserIds() []string {
	if x != nil {
		return x.PbxUserIds
	}
	return nil
}

func (x *CreateRingGroupRequest) GetExtension() int32 {
	if x != nil {
		return x.Extension
	}
	return 0
}

type CreateRingGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         *RingGroup             `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRingGroupResponse) Reset() {
	*x = CreateRingGroupResponse{}
	mi := &file_services_pbx_v1_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRingGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRingGroupResponse) ProtoMessage() {}

func (x *CreateRingGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v1_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRingGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateRingGroupResponse) Descriptor() ([]byte, []int) {
	return file_services_pbx_v1_service_proto_rawDescGZIP(), []int{14}
}

func (x *CreateRingGroupResponse) GetGroup() *RingGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

type DeleteRingGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupId       string                 `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRingGroupRequest) Reset() {
	*x = DeleteRingGroupRequest{}
	mi := &file_services_pbx_v1_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRingGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRingGroupRequest) ProtoMessage() {}

func (x *DeleteRingGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v1_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRingGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteRingGroupRequest) Descriptor() ([]byte, []int) {
	return file_services_pbx_v1_service_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteRingGroupRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type DeleteRingGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRingGroupResponse) Reset() {
	*x = DeleteRingGroupResponse{}
	mi := &file_services_pbx_v1_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRingGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRingGroupResponse) ProtoMessage() {}

func (x *DeleteRingGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_pbx_v1_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRingGroupResponse.ProtoReflect.Descriptor instead.
func (*DeleteRingGroupResponse) Descriptor() ([]byte, []int) {
	return file_services_pbx_v1_service_proto_rawDescGZIP(), []int{16}
}

var File_services_pbx_v1_service_proto protoreflect.FileDescriptor

var file_services_pbx_v1_service_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x78, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x31,
	0x1a, 0x17, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x07, 0x50, 0x42,
	0x58, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x62, 0x78, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x62, 0x78, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x72, 0x67, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x67, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x69, 0x70, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x49,
	0x50, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x69, 0x70, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x0a, 0x53, 0x49, 0x50, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x69, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69,
	0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x09, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0c, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x35, 0x0a, 0x09, 0x70, 0x62, 0x78,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x42, 0x58, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x70, 0x62, 0x78, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x22, 0x77, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x62, 0x78, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x62, 0x78, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x62, 0x78, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x47, 0x0a, 0x15, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x62, 0x78, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x42, 0x58, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x22, 0x74, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x4d, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x62, 0x78, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x42, 0x58, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x45, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x62, 0x78, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x78, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x42, 0x58, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x22, 0x87, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x69, 0x6e,
	0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x4b, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x1e, 0x0a, 0x1c, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x1d, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd2, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52,
	0x0c, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x20, 0x0a,
	0x0c, 0x70, 0x62, 0x78, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x62, 0x78, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x33, 0x0a, 0x16, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x82, 0x01, 0x0a, 0x0c, 0x52,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1d, 0x0a, 0x19, 0x52,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x4f,
	0x42, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x03, 0x32,
	0xb3, 0x09, 0x0a, 0x0a, 0x50, 0x42, 0x58, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9e,
	0x01, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x62, 0x78, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x62, 0x78, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x62, 0x78, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3e, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x70, 0x62, 0x78, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x62, 0x78, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x70, 0x62, 0x78, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12,
	0xa6, 0x01, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0x84, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x78, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x62,
	0x78, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x72, 0x69,
	0x6e, 0x67, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x62, 0x78, 0x55, 0x73, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x62, 0x78, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x62, 0x78, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0x85, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x78, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x62, 0x78, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x70, 0x62, 0x78, 0x75, 0x73, 0x65, 0x72, 0x12, 0xa6, 0x01, 0x0a, 0x0f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x85, 0x20, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x70, 0x62, 0x78, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x62, 0x78, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0xa6, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x69, 0x6e,
	0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0x85, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x78, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x62, 0x78, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xa6, 0x01, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x85, 0x20, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x70, 0x62, 0x78, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x62, 0x78, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0xbe, 0x01, 0x0a, 0x15, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0xba,
	0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x85, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a,
	0x01, 0x2a, 0x22, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x62,
	0x78, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x62, 0x78, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0xb3, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x78, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x30, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x70, 0x62, 0x78, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x62, 0x78, 0x76, 0x31, 0xa2,
	0x02, 0x03, 0x53, 0x50, 0x58, 0xaa, 0x02, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x50, 0x62, 0x78, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x5c, 0x50, 0x62, 0x78, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x5c, 0x50, 0x62, 0x78, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x3a, 0x3a, 0x50, 0x62, 0x78, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_services_pbx_v1_service_proto_rawDescOnce sync.Once
	file_services_pbx_v1_service_proto_rawDescData = file_services_pbx_v1_service_proto_rawDesc
)

func file_services_pbx_v1_service_proto_rawDescGZIP() []byte {
	file_services_pbx_v1_service_proto_rawDescOnce.Do(func() {
		file_services_pbx_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_pbx_v1_service_proto_rawDescData)
	})
	return file_services_pbx_v1_service_proto_rawDescData
}

var file_services_pbx_v1_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_services_pbx_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_services_pbx_v1_service_proto_goTypes = []any{
	(RingStrategy)(0),                     // 0: services.pbx.v1.RingStrategy
	(*PBXUser)(nil),                       // 1: services.pbx.v1.PBXUser
	(*SIPAccount)(nil),                    // 2: services.pbx.v1.SIPAccount
	(*RingGroup)(nil),                     // 3: services.pbx.v1.RingGroup
	(*QueryPbxUsersRequest)(nil),          // 4: services.pbx.v1.QueryPbxUsersRequest
	(*QueryPbxUsersResponse)(nil),         // 5: services.pbx.v1.QueryPbxUsersResponse
	(*QueryRingGroupsRequest)(nil),        // 6: services.pbx.v1.QueryRingGroupsRequest
	(*QueryRingGroupsResponse)(nil),       // 7: services.pbx.v1.QueryRingGroupsResponse
	(*UpdatePbxUserRequest)(nil),          // 8: services.pbx.v1.UpdatePbxUserRequest
	(*UpdatePbxUserResponse)(nil),         // 9: services.pbx.v1.UpdatePbxUserResponse
	(*UpdateRingGroupRequest)(nil),        // 10: services.pbx.v1.UpdateRingGroupRequest
	(*UpdateRingGroupResponse)(nil),       // 11: services.pbx.v1.UpdateRingGroupResponse
	(*AssignRandomExtensionRequest)(nil),  // 12: services.pbx.v1.AssignRandomExtensionRequest
	(*AssignRandomExtensionResponse)(nil), // 13: services.pbx.v1.AssignRandomExtensionResponse
	(*CreateRingGroupRequest)(nil),        // 14: services.pbx.v1.CreateRingGroupRequest
	(*CreateRingGroupResponse)(nil),       // 15: services.pbx.v1.CreateRingGroupResponse
	(*DeleteRingGroupRequest)(nil),        // 16: services.pbx.v1.DeleteRingGroupRequest
	(*DeleteRingGroupResponse)(nil),       // 17: services.pbx.v1.DeleteRingGroupResponse
	(*fieldmaskpb.FieldMask)(nil),         // 18: google.protobuf.FieldMask
}
var file_services_pbx_v1_service_proto_depIdxs = []int32{
	2,  // 0: services.pbx.v1.PBXUser.sip_accounts:type_name -> services.pbx.v1.SIPAccount
	3,  // 1: services.pbx.v1.SIPAccount.ring_groups:type_name -> services.pbx.v1.RingGroup
	0,  // 2: services.pbx.v1.RingGroup.ring_strategy:type_name -> services.pbx.v1.RingStrategy
	1,  // 3: services.pbx.v1.RingGroup.pbx_users:type_name -> services.pbx.v1.PBXUser
	18, // 4: services.pbx.v1.QueryPbxUsersRequest.response_mask:type_name -> google.protobuf.FieldMask
	1,  // 5: services.pbx.v1.QueryPbxUsersResponse.users:type_name -> services.pbx.v1.PBXUser
	18, // 6: services.pbx.v1.QueryRingGroupsRequest.response_mask:type_name -> google.protobuf.FieldMask
	3,  // 7: services.pbx.v1.QueryRingGroupsResponse.groups:type_name -> services.pbx.v1.RingGroup
	1,  // 8: services.pbx.v1.UpdatePbxUserRequest.user:type_name -> services.pbx.v1.PBXUser
	18, // 9: services.pbx.v1.UpdatePbxUserRequest.update_mask:type_name -> google.protobuf.FieldMask
	1,  // 10: services.pbx.v1.UpdatePbxUserResponse.user:type_name -> services.pbx.v1.PBXUser
	3,  // 11: services.pbx.v1.UpdateRingGroupRequest.group:type_name -> services.pbx.v1.RingGroup
	18, // 12: services.pbx.v1.UpdateRingGroupRequest.update_mask:type_name -> google.protobuf.FieldMask
	3,  // 13: services.pbx.v1.UpdateRingGroupResponse.group:type_name -> services.pbx.v1.RingGroup
	0,  // 14: services.pbx.v1.CreateRingGroupRequest.ring_strategy:type_name -> services.pbx.v1.RingStrategy
	3,  // 15: services.pbx.v1.CreateRingGroupResponse.group:type_name -> services.pbx.v1.RingGroup
	4,  // 16: services.pbx.v1.PBXService.QueryPbxUsers:input_type -> services.pbx.v1.QueryPbxUsersRequest
	6,  // 17: services.pbx.v1.PBXService.QueryRingGroups:input_type -> services.pbx.v1.QueryRingGroupsRequest
	8,  // 18: services.pbx.v1.PBXService.UpdatePbxUser:input_type -> services.pbx.v1.UpdatePbxUserRequest
	10, // 19: services.pbx.v1.PBXService.UpdateRingGroup:input_type -> services.pbx.v1.UpdateRingGroupRequest
	14, // 20: services.pbx.v1.PBXService.CreateRingGroup:input_type -> services.pbx.v1.CreateRingGroupRequest
	16, // 21: services.pbx.v1.PBXService.DeleteRingGroup:input_type -> services.pbx.v1.DeleteRingGroupRequest
	12, // 22: services.pbx.v1.PBXService.AssignRandomExtension:input_type -> services.pbx.v1.AssignRandomExtensionRequest
	5,  // 23: services.pbx.v1.PBXService.QueryPbxUsers:output_type -> services.pbx.v1.QueryPbxUsersResponse
	7,  // 24: services.pbx.v1.PBXService.QueryRingGroups:output_type -> services.pbx.v1.QueryRingGroupsResponse
	9,  // 25: services.pbx.v1.PBXService.UpdatePbxUser:output_type -> services.pbx.v1.UpdatePbxUserResponse
	11, // 26: services.pbx.v1.PBXService.UpdateRingGroup:output_type -> services.pbx.v1.UpdateRingGroupResponse
	15, // 27: services.pbx.v1.PBXService.CreateRingGroup:output_type -> services.pbx.v1.CreateRingGroupResponse
	17, // 28: services.pbx.v1.PBXService.DeleteRingGroup:output_type -> services.pbx.v1.DeleteRingGroupResponse
	13, // 29: services.pbx.v1.PBXService.AssignRandomExtension:output_type -> services.pbx.v1.AssignRandomExtensionResponse
	23, // [23:30] is the sub-list for method output_type
	16, // [16:23] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_services_pbx_v1_service_proto_init() }
func file_services_pbx_v1_service_proto_init() {
	if File_services_pbx_v1_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_pbx_v1_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_pbx_v1_service_proto_goTypes,
		DependencyIndexes: file_services_pbx_v1_service_proto_depIdxs,
		EnumInfos:         file_services_pbx_v1_service_proto_enumTypes,
		MessageInfos:      file_services_pbx_v1_service_proto_msgTypes,
	}.Build()
	File_services_pbx_v1_service_proto = out.File
	file_services_pbx_v1_service_proto_rawDesc = nil
	file_services_pbx_v1_service_proto_goTypes = nil
	file_services_pbx_v1_service_proto_depIdxs = nil
}
