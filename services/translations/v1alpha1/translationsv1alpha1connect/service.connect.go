// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/translations/v1alpha1/service.proto

package translationsv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/tcncloud/api-go/services/translations/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TranslationsServiceName is the fully-qualified name of the TranslationsService service.
	TranslationsServiceName = "services.translations.v1alpha1.TranslationsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TranslationsServiceTranslateTemplateProcedure is the fully-qualified name of the
	// TranslationsService's TranslateTemplate RPC.
	TranslationsServiceTranslateTemplateProcedure = "/services.translations.v1alpha1.TranslationsService/TranslateTemplate"
)

// TranslationsServiceClient is a client for the services.translations.v1alpha1.TranslationsService
// service.
type TranslationsServiceClient interface {
	// Required permissions:
	//
	//	Any Authenticated User (TODO: Validate this assumption)
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.AlreadyExists : This template is already translated for the given context and language.
	//   - grpc.InvalidArgument: The request is not valid.
	TranslateTemplate(context.Context, *connect_go.Request[v1alpha1.TranslateTemplateRequest]) (*connect_go.Response[v1alpha1.TranslateTemplateResponse], error)
}

// NewTranslationsServiceClient constructs a client for the
// services.translations.v1alpha1.TranslationsService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTranslationsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TranslationsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &translationsServiceClient{
		translateTemplate: connect_go.NewClient[v1alpha1.TranslateTemplateRequest, v1alpha1.TranslateTemplateResponse](
			httpClient,
			baseURL+TranslationsServiceTranslateTemplateProcedure,
			opts...,
		),
	}
}

// translationsServiceClient implements TranslationsServiceClient.
type translationsServiceClient struct {
	translateTemplate *connect_go.Client[v1alpha1.TranslateTemplateRequest, v1alpha1.TranslateTemplateResponse]
}

// TranslateTemplate calls services.translations.v1alpha1.TranslationsService.TranslateTemplate.
func (c *translationsServiceClient) TranslateTemplate(ctx context.Context, req *connect_go.Request[v1alpha1.TranslateTemplateRequest]) (*connect_go.Response[v1alpha1.TranslateTemplateResponse], error) {
	return c.translateTemplate.CallUnary(ctx, req)
}

// TranslationsServiceHandler is an implementation of the
// services.translations.v1alpha1.TranslationsService service.
type TranslationsServiceHandler interface {
	// Required permissions:
	//
	//	Any Authenticated User (TODO: Validate this assumption)
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.AlreadyExists : This template is already translated for the given context and language.
	//   - grpc.InvalidArgument: The request is not valid.
	TranslateTemplate(context.Context, *connect_go.Request[v1alpha1.TranslateTemplateRequest]) (*connect_go.Response[v1alpha1.TranslateTemplateResponse], error)
}

// NewTranslationsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTranslationsServiceHandler(svc TranslationsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	translationsServiceTranslateTemplateHandler := connect_go.NewUnaryHandler(
		TranslationsServiceTranslateTemplateProcedure,
		svc.TranslateTemplate,
		opts...,
	)
	return "/services.translations.v1alpha1.TranslationsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TranslationsServiceTranslateTemplateProcedure:
			translationsServiceTranslateTemplateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTranslationsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTranslationsServiceHandler struct{}

func (UnimplementedTranslationsServiceHandler) TranslateTemplate(context.Context, *connect_go.Request[v1alpha1.TranslateTemplateRequest]) (*connect_go.Response[v1alpha1.TranslateTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.translations.v1alpha1.TranslationsService.TranslateTemplate is not implemented"))
}
