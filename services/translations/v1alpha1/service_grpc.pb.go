// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: services/translations/v1alpha1/service.proto

package translationsv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TranslationsService_TranslateTemplate_FullMethodName = "/services.translations.v1alpha1.TranslationsService/TranslateTemplate"
)

// TranslationsServiceClient is the client API for TranslationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TranslationsServiceClient interface {
	// Required permissions:
	//
	//	Any Authenticated User (TODO: Validate this assumption)
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.AlreadyExists : This template is already translated for the given context and language.
	//   - grpc.InvalidArgument: The request is not valid.
	TranslateTemplate(ctx context.Context, in *TranslateTemplateRequest, opts ...grpc.CallOption) (*TranslateTemplateResponse, error)
}

type translationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTranslationsServiceClient(cc grpc.ClientConnInterface) TranslationsServiceClient {
	return &translationsServiceClient{cc}
}

func (c *translationsServiceClient) TranslateTemplate(ctx context.Context, in *TranslateTemplateRequest, opts ...grpc.CallOption) (*TranslateTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranslateTemplateResponse)
	err := c.cc.Invoke(ctx, TranslationsService_TranslateTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranslationsServiceServer is the server API for TranslationsService service.
// All implementations must embed UnimplementedTranslationsServiceServer
// for forward compatibility
type TranslationsServiceServer interface {
	// Required permissions:
	//
	//	Any Authenticated User (TODO: Validate this assumption)
	//
	// Errors:
	//   - grpc.PermissionDenied: Caller doesn't have the required permissions.
	//   - grpc.AlreadyExists : This template is already translated for the given context and language.
	//   - grpc.InvalidArgument: The request is not valid.
	TranslateTemplate(context.Context, *TranslateTemplateRequest) (*TranslateTemplateResponse, error)
	mustEmbedUnimplementedTranslationsServiceServer()
}

// UnimplementedTranslationsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTranslationsServiceServer struct {
}

func (UnimplementedTranslationsServiceServer) TranslateTemplate(context.Context, *TranslateTemplateRequest) (*TranslateTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranslateTemplate not implemented")
}
func (UnimplementedTranslationsServiceServer) mustEmbedUnimplementedTranslationsServiceServer() {}

// UnsafeTranslationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TranslationsServiceServer will
// result in compilation errors.
type UnsafeTranslationsServiceServer interface {
	mustEmbedUnimplementedTranslationsServiceServer()
}

func RegisterTranslationsServiceServer(s grpc.ServiceRegistrar, srv TranslationsServiceServer) {
	s.RegisterService(&TranslationsService_ServiceDesc, srv)
}

func _TranslationsService_TranslateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslateTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslationsServiceServer).TranslateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranslationsService_TranslateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslationsServiceServer).TranslateTemplate(ctx, req.(*TranslateTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TranslationsService_ServiceDesc is the grpc.ServiceDesc for TranslationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TranslationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.translations.v1alpha1.TranslationsService",
	HandlerType: (*TranslationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TranslateTemplate",
			Handler:    _TranslationsService_TranslateTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/translations/v1alpha1/service.proto",
}
