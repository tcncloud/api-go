// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: services/callmonitor/v1alpha1/service.proto

package callmonitorv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CallMonitorService_GetHoldQueueStats_FullMethodName = "/services.callmonitor.v1alpha1.CallMonitorService/GetHoldQueueStats"
)

// CallMonitorServiceClient is the client API for CallMonitorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallMonitorServiceClient interface {
	GetHoldQueueStats(ctx context.Context, in *GetHoldQueueStatsRequest, opts ...grpc.CallOption) (*GetHoldQueueStatsResponse, error)
}

type callMonitorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCallMonitorServiceClient(cc grpc.ClientConnInterface) CallMonitorServiceClient {
	return &callMonitorServiceClient{cc}
}

func (c *callMonitorServiceClient) GetHoldQueueStats(ctx context.Context, in *GetHoldQueueStatsRequest, opts ...grpc.CallOption) (*GetHoldQueueStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHoldQueueStatsResponse)
	err := c.cc.Invoke(ctx, CallMonitorService_GetHoldQueueStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallMonitorServiceServer is the server API for CallMonitorService service.
// All implementations must embed UnimplementedCallMonitorServiceServer
// for forward compatibility.
type CallMonitorServiceServer interface {
	GetHoldQueueStats(context.Context, *GetHoldQueueStatsRequest) (*GetHoldQueueStatsResponse, error)
	mustEmbedUnimplementedCallMonitorServiceServer()
}

// UnimplementedCallMonitorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCallMonitorServiceServer struct{}

func (UnimplementedCallMonitorServiceServer) GetHoldQueueStats(context.Context, *GetHoldQueueStatsRequest) (*GetHoldQueueStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHoldQueueStats not implemented")
}
func (UnimplementedCallMonitorServiceServer) mustEmbedUnimplementedCallMonitorServiceServer() {}
func (UnimplementedCallMonitorServiceServer) testEmbeddedByValue()                            {}

// UnsafeCallMonitorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallMonitorServiceServer will
// result in compilation errors.
type UnsafeCallMonitorServiceServer interface {
	mustEmbedUnimplementedCallMonitorServiceServer()
}

func RegisterCallMonitorServiceServer(s grpc.ServiceRegistrar, srv CallMonitorServiceServer) {
	// If the following call pancis, it indicates UnimplementedCallMonitorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CallMonitorService_ServiceDesc, srv)
}

func _CallMonitorService_GetHoldQueueStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHoldQueueStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallMonitorServiceServer).GetHoldQueueStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallMonitorService_GetHoldQueueStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallMonitorServiceServer).GetHoldQueueStats(ctx, req.(*GetHoldQueueStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CallMonitorService_ServiceDesc is the grpc.ServiceDesc for CallMonitorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CallMonitorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.callmonitor.v1alpha1.CallMonitorService",
	HandlerType: (*CallMonitorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHoldQueueStats",
			Handler:    _CallMonitorService_GetHoldQueueStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/callmonitor/v1alpha1/service.proto",
}
