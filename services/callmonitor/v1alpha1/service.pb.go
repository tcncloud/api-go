// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: services/callmonitor/v1alpha1/service.proto

package callmonitorv1alpha1

import (
	_ "github.com/tcncloud/api-go/annotations"
	commons "github.com/tcncloud/api-go/api/commons"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetHoldQueueStatsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Org for which to report call monitoring stats.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// The start time for reporting. Return only stats for calls initiated
	// after this time.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The end time for reporting. Return only stats for calls initiated
	// before this time.
	EndTime       *timestamppb.Timestamp           `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Filter        *GetHoldQueueStatsRequest_Filter `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHoldQueueStatsRequest) Reset() {
	*x = GetHoldQueueStatsRequest{}
	mi := &file_services_callmonitor_v1alpha1_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHoldQueueStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHoldQueueStatsRequest) ProtoMessage() {}

func (x *GetHoldQueueStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_callmonitor_v1alpha1_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHoldQueueStatsRequest.ProtoReflect.Descriptor instead.
func (*GetHoldQueueStatsRequest) Descriptor() ([]byte, []int) {
	return file_services_callmonitor_v1alpha1_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetHoldQueueStatsRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetHoldQueueStatsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetHoldQueueStatsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetHoldQueueStatsRequest) GetFilter() *GetHoldQueueStatsRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetHoldQueueStatsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Stats for individual calls in the hold queue.
	Stats []*commons.HoldQueueCallStats `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
	// The total number of calls that have been monitored.
	TotalNumCalls int32 `protobuf:"varint,2,opt,name=total_num_calls,json=totalNumCalls,proto3" json:"total_num_calls,omitempty"`
	// The total number of calls that have been successful.
	TotalNumSuccessful int32 `protobuf:"varint,3,opt,name=total_num_successful,json=totalNumSuccessful,proto3" json:"total_num_successful,omitempty"`
	// The total number of calls that have failed.
	TotalNumFailed int32 `protobuf:"varint,4,opt,name=total_num_failed,json=totalNumFailed,proto3" json:"total_num_failed,omitempty"`
	// The average duration of a monitor session.
	AvgMonitorDurationMs int64 `protobuf:"varint,5,opt,name=avg_monitor_duration_ms,json=avgMonitorDurationMs,proto3" json:"avg_monitor_duration_ms,omitempty"`
	// The total currently running monitor sessions.
	TotalNumMonitoring int32 `protobuf:"varint,6,opt,name=total_num_monitoring,json=totalNumMonitoring,proto3" json:"total_num_monitoring,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetHoldQueueStatsResponse) Reset() {
	*x = GetHoldQueueStatsResponse{}
	mi := &file_services_callmonitor_v1alpha1_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHoldQueueStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHoldQueueStatsResponse) ProtoMessage() {}

func (x *GetHoldQueueStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_callmonitor_v1alpha1_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHoldQueueStatsResponse.ProtoReflect.Descriptor instead.
func (*GetHoldQueueStatsResponse) Descriptor() ([]byte, []int) {
	return file_services_callmonitor_v1alpha1_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetHoldQueueStatsResponse) GetStats() []*commons.HoldQueueCallStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *GetHoldQueueStatsResponse) GetTotalNumCalls() int32 {
	if x != nil {
		return x.TotalNumCalls
	}
	return 0
}

func (x *GetHoldQueueStatsResponse) GetTotalNumSuccessful() int32 {
	if x != nil {
		return x.TotalNumSuccessful
	}
	return 0
}

func (x *GetHoldQueueStatsResponse) GetTotalNumFailed() int32 {
	if x != nil {
		return x.TotalNumFailed
	}
	return 0
}

func (x *GetHoldQueueStatsResponse) GetAvgMonitorDurationMs() int64 {
	if x != nil {
		return x.AvgMonitorDurationMs
	}
	return 0
}

func (x *GetHoldQueueStatsResponse) GetTotalNumMonitoring() int32 {
	if x != nil {
		return x.TotalNumMonitoring
	}
	return 0
}

// Filter to restrict the reported calls.
type GetHoldQueueStatsRequest_Filter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Report only calls that have this status.
	Status commons.HoldQueueMonitorStatus `protobuf:"varint,1,opt,name=status,proto3,enum=api.commons.HoldQueueMonitorStatus" json:"status,omitempty"`
	// Report only calls associated with this omni campaign.
	CampaignId    string `protobuf:"bytes,3,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHoldQueueStatsRequest_Filter) Reset() {
	*x = GetHoldQueueStatsRequest_Filter{}
	mi := &file_services_callmonitor_v1alpha1_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHoldQueueStatsRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHoldQueueStatsRequest_Filter) ProtoMessage() {}

func (x *GetHoldQueueStatsRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_services_callmonitor_v1alpha1_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHoldQueueStatsRequest_Filter.ProtoReflect.Descriptor instead.
func (*GetHoldQueueStatsRequest_Filter) Descriptor() ([]byte, []int) {
	return file_services_callmonitor_v1alpha1_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *GetHoldQueueStatsRequest_Filter) GetStatus() commons.HoldQueueMonitorStatus {
	if x != nil {
		return x.Status
	}
	return commons.HoldQueueMonitorStatus(0)
}

func (x *GetHoldQueueStatsRequest_Filter) GetCampaignId() string {
	if x != nil {
		return x.CampaignId
	}
	return ""
}

var File_services_callmonitor_v1alpha1_service_proto protoreflect.FileDescriptor

var file_services_callmonitor_v1alpha1_service_proto_rawDesc = string([]byte{
	0x0a, 0x2b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x6c, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x17, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x6c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c,
	0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x1a, 0x66, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x22, 0xbf, 0x02, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x48, 0x6f, 0x6c, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x76, 0x67, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x61, 0x76, 0x67, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x32, 0xe4, 0x01, 0x0a, 0x12,
	0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xcd, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x37, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x6c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x38, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c,
	0x6c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xb0, 0x09, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a,
	0x22, 0x30, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x61, 0x6c, 0x6c,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x67, 0x65, 0x74, 0x68, 0x6f, 0x6c, 0x64, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x42, 0x95, 0x02, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x6c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70,
	0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x61,
	0x6c, 0x6c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x3b, 0x63, 0x61, 0x6c, 0x6c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x43, 0x58, 0xaa, 0x02, 0x1d, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x1d, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5c, 0x43, 0x61, 0x6c, 0x6c, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x29, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5c, 0x43, 0x61, 0x6c, 0x6c, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x3a, 0x3a, 0x43, 0x61, 0x6c, 0x6c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_services_callmonitor_v1alpha1_service_proto_rawDescOnce sync.Once
	file_services_callmonitor_v1alpha1_service_proto_rawDescData []byte
)

func file_services_callmonitor_v1alpha1_service_proto_rawDescGZIP() []byte {
	file_services_callmonitor_v1alpha1_service_proto_rawDescOnce.Do(func() {
		file_services_callmonitor_v1alpha1_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_services_callmonitor_v1alpha1_service_proto_rawDesc), len(file_services_callmonitor_v1alpha1_service_proto_rawDesc)))
	})
	return file_services_callmonitor_v1alpha1_service_proto_rawDescData
}

var file_services_callmonitor_v1alpha1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_services_callmonitor_v1alpha1_service_proto_goTypes = []any{
	(*GetHoldQueueStatsRequest)(nil),        // 0: services.callmonitor.v1alpha1.GetHoldQueueStatsRequest
	(*GetHoldQueueStatsResponse)(nil),       // 1: services.callmonitor.v1alpha1.GetHoldQueueStatsResponse
	(*GetHoldQueueStatsRequest_Filter)(nil), // 2: services.callmonitor.v1alpha1.GetHoldQueueStatsRequest.Filter
	(*timestamppb.Timestamp)(nil),           // 3: google.protobuf.Timestamp
	(*commons.HoldQueueCallStats)(nil),      // 4: api.commons.HoldQueueCallStats
	(commons.HoldQueueMonitorStatus)(0),     // 5: api.commons.HoldQueueMonitorStatus
}
var file_services_callmonitor_v1alpha1_service_proto_depIdxs = []int32{
	3, // 0: services.callmonitor.v1alpha1.GetHoldQueueStatsRequest.start_time:type_name -> google.protobuf.Timestamp
	3, // 1: services.callmonitor.v1alpha1.GetHoldQueueStatsRequest.end_time:type_name -> google.protobuf.Timestamp
	2, // 2: services.callmonitor.v1alpha1.GetHoldQueueStatsRequest.filter:type_name -> services.callmonitor.v1alpha1.GetHoldQueueStatsRequest.Filter
	4, // 3: services.callmonitor.v1alpha1.GetHoldQueueStatsResponse.stats:type_name -> api.commons.HoldQueueCallStats
	5, // 4: services.callmonitor.v1alpha1.GetHoldQueueStatsRequest.Filter.status:type_name -> api.commons.HoldQueueMonitorStatus
	0, // 5: services.callmonitor.v1alpha1.CallMonitorService.GetHoldQueueStats:input_type -> services.callmonitor.v1alpha1.GetHoldQueueStatsRequest
	1, // 6: services.callmonitor.v1alpha1.CallMonitorService.GetHoldQueueStats:output_type -> services.callmonitor.v1alpha1.GetHoldQueueStatsResponse
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_services_callmonitor_v1alpha1_service_proto_init() }
func file_services_callmonitor_v1alpha1_service_proto_init() {
	if File_services_callmonitor_v1alpha1_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_services_callmonitor_v1alpha1_service_proto_rawDesc), len(file_services_callmonitor_v1alpha1_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_callmonitor_v1alpha1_service_proto_goTypes,
		DependencyIndexes: file_services_callmonitor_v1alpha1_service_proto_depIdxs,
		MessageInfos:      file_services_callmonitor_v1alpha1_service_proto_msgTypes,
	}.Build()
	File_services_callmonitor_v1alpha1_service_proto = out.File
	file_services_callmonitor_v1alpha1_service_proto_goTypes = nil
	file_services_callmonitor_v1alpha1_service_proto_depIdxs = nil
}
