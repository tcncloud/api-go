// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: wfo/vanalytics/v2/service.proto

package vanalyticsv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Vanalytics_SearchTranscripts_FullMethodName         = "/wfo.vanalytics.v2.Vanalytics/SearchTranscripts"
	Vanalytics_BulkDeleteTranscripts_FullMethodName     = "/wfo.vanalytics.v2.Vanalytics/BulkDeleteTranscripts"
	Vanalytics_CreateFilter_FullMethodName              = "/wfo.vanalytics.v2.Vanalytics/CreateFilter"
	Vanalytics_ListFilters_FullMethodName               = "/wfo.vanalytics.v2.Vanalytics/ListFilters"
	Vanalytics_UpdateFilter_FullMethodName              = "/wfo.vanalytics.v2.Vanalytics/UpdateFilter"
	Vanalytics_DeleteFilter_FullMethodName              = "/wfo.vanalytics.v2.Vanalytics/DeleteFilter"
	Vanalytics_GetFilter_FullMethodName                 = "/wfo.vanalytics.v2.Vanalytics/GetFilter"
	Vanalytics_ListFlagTranscriptFilters_FullMethodName = "/wfo.vanalytics.v2.Vanalytics/ListFlagTranscriptFilters"
	Vanalytics_ListFlagFilters_FullMethodName           = "/wfo.vanalytics.v2.Vanalytics/ListFlagFilters"
)

// VanalyticsClient is the client API for Vanalytics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VanalyticsClient interface {
	// SearchTranscripts searches transcripts by search criteria. The search response
	// contains one page of transcript hits. Traversing the paginated hits is
	// achieved by making use of the given page token.
	SearchTranscripts(ctx context.Context, in *SearchTranscriptsRequest, opts ...grpc.CallOption) (*SearchTranscriptsResponse, error)
	// BulkDeleteTranscripts bulk deletes transcripts matching the provided query.
	BulkDeleteTranscripts(ctx context.Context, in *BulkDeleteTranscriptsRequest, opts ...grpc.CallOption) (*BulkDeleteTranscriptsResponse, error)
	// CreateFilter creates a new filter. The filter contains a transcript query
	// to filter transcripts.
	CreateFilter(ctx context.Context, in *CreateFilterRequest, opts ...grpc.CallOption) (*Filter, error)
	// ListFilters lists filters.
	ListFilters(ctx context.Context, in *ListFiltersRequest, opts ...grpc.CallOption) (*ListFiltersResponse, error)
	// UpdateFilter updates a filter transcript query and/or name.
	UpdateFilter(ctx context.Context, in *UpdateFilterRequest, opts ...grpc.CallOption) (*Filter, error)
	// DeleteFilter deletes filter given a filter_sid.
	DeleteFilter(ctx context.Context, in *DeleteFilterRequest, opts ...grpc.CallOption) (*DeleteFilterResponse, error)
	// GetFilter gets filter given a filter_sid or name.
	GetFilter(ctx context.Context, in *GetFilterRequest, opts ...grpc.CallOption) (*Filter, error)
	// ListFlagTranscriptFilters lists flag transcript filters in an organization.
	ListFlagTranscriptFilters(ctx context.Context, in *ListFlagTranscriptFiltersRequest, opts ...grpc.CallOption) (*ListFlagTranscriptFiltersResponse, error)
	// ListFlagFilters lists flag filter associations.
	ListFlagFilters(ctx context.Context, in *ListFlagFiltersRequest, opts ...grpc.CallOption) (*ListFlagFiltersResponse, error)
}

type vanalyticsClient struct {
	cc grpc.ClientConnInterface
}

func NewVanalyticsClient(cc grpc.ClientConnInterface) VanalyticsClient {
	return &vanalyticsClient{cc}
}

func (c *vanalyticsClient) SearchTranscripts(ctx context.Context, in *SearchTranscriptsRequest, opts ...grpc.CallOption) (*SearchTranscriptsResponse, error) {
	out := new(SearchTranscriptsResponse)
	err := c.cc.Invoke(ctx, Vanalytics_SearchTranscripts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) BulkDeleteTranscripts(ctx context.Context, in *BulkDeleteTranscriptsRequest, opts ...grpc.CallOption) (*BulkDeleteTranscriptsResponse, error) {
	out := new(BulkDeleteTranscriptsResponse)
	err := c.cc.Invoke(ctx, Vanalytics_BulkDeleteTranscripts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) CreateFilter(ctx context.Context, in *CreateFilterRequest, opts ...grpc.CallOption) (*Filter, error) {
	out := new(Filter)
	err := c.cc.Invoke(ctx, Vanalytics_CreateFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) ListFilters(ctx context.Context, in *ListFiltersRequest, opts ...grpc.CallOption) (*ListFiltersResponse, error) {
	out := new(ListFiltersResponse)
	err := c.cc.Invoke(ctx, Vanalytics_ListFilters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) UpdateFilter(ctx context.Context, in *UpdateFilterRequest, opts ...grpc.CallOption) (*Filter, error) {
	out := new(Filter)
	err := c.cc.Invoke(ctx, Vanalytics_UpdateFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) DeleteFilter(ctx context.Context, in *DeleteFilterRequest, opts ...grpc.CallOption) (*DeleteFilterResponse, error) {
	out := new(DeleteFilterResponse)
	err := c.cc.Invoke(ctx, Vanalytics_DeleteFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) GetFilter(ctx context.Context, in *GetFilterRequest, opts ...grpc.CallOption) (*Filter, error) {
	out := new(Filter)
	err := c.cc.Invoke(ctx, Vanalytics_GetFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) ListFlagTranscriptFilters(ctx context.Context, in *ListFlagTranscriptFiltersRequest, opts ...grpc.CallOption) (*ListFlagTranscriptFiltersResponse, error) {
	out := new(ListFlagTranscriptFiltersResponse)
	err := c.cc.Invoke(ctx, Vanalytics_ListFlagTranscriptFilters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) ListFlagFilters(ctx context.Context, in *ListFlagFiltersRequest, opts ...grpc.CallOption) (*ListFlagFiltersResponse, error) {
	out := new(ListFlagFiltersResponse)
	err := c.cc.Invoke(ctx, Vanalytics_ListFlagFilters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VanalyticsServer is the server API for Vanalytics service.
// All implementations must embed UnimplementedVanalyticsServer
// for forward compatibility
type VanalyticsServer interface {
	// SearchTranscripts searches transcripts by search criteria. The search response
	// contains one page of transcript hits. Traversing the paginated hits is
	// achieved by making use of the given page token.
	SearchTranscripts(context.Context, *SearchTranscriptsRequest) (*SearchTranscriptsResponse, error)
	// BulkDeleteTranscripts bulk deletes transcripts matching the provided query.
	BulkDeleteTranscripts(context.Context, *BulkDeleteTranscriptsRequest) (*BulkDeleteTranscriptsResponse, error)
	// CreateFilter creates a new filter. The filter contains a transcript query
	// to filter transcripts.
	CreateFilter(context.Context, *CreateFilterRequest) (*Filter, error)
	// ListFilters lists filters.
	ListFilters(context.Context, *ListFiltersRequest) (*ListFiltersResponse, error)
	// UpdateFilter updates a filter transcript query and/or name.
	UpdateFilter(context.Context, *UpdateFilterRequest) (*Filter, error)
	// DeleteFilter deletes filter given a filter_sid.
	DeleteFilter(context.Context, *DeleteFilterRequest) (*DeleteFilterResponse, error)
	// GetFilter gets filter given a filter_sid or name.
	GetFilter(context.Context, *GetFilterRequest) (*Filter, error)
	// ListFlagTranscriptFilters lists flag transcript filters in an organization.
	ListFlagTranscriptFilters(context.Context, *ListFlagTranscriptFiltersRequest) (*ListFlagTranscriptFiltersResponse, error)
	// ListFlagFilters lists flag filter associations.
	ListFlagFilters(context.Context, *ListFlagFiltersRequest) (*ListFlagFiltersResponse, error)
	mustEmbedUnimplementedVanalyticsServer()
}

// UnimplementedVanalyticsServer must be embedded to have forward compatible implementations.
type UnimplementedVanalyticsServer struct {
}

func (UnimplementedVanalyticsServer) SearchTranscripts(context.Context, *SearchTranscriptsRequest) (*SearchTranscriptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTranscripts not implemented")
}
func (UnimplementedVanalyticsServer) BulkDeleteTranscripts(context.Context, *BulkDeleteTranscriptsRequest) (*BulkDeleteTranscriptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkDeleteTranscripts not implemented")
}
func (UnimplementedVanalyticsServer) CreateFilter(context.Context, *CreateFilterRequest) (*Filter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFilter not implemented")
}
func (UnimplementedVanalyticsServer) ListFilters(context.Context, *ListFiltersRequest) (*ListFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFilters not implemented")
}
func (UnimplementedVanalyticsServer) UpdateFilter(context.Context, *UpdateFilterRequest) (*Filter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFilter not implemented")
}
func (UnimplementedVanalyticsServer) DeleteFilter(context.Context, *DeleteFilterRequest) (*DeleteFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFilter not implemented")
}
func (UnimplementedVanalyticsServer) GetFilter(context.Context, *GetFilterRequest) (*Filter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilter not implemented")
}
func (UnimplementedVanalyticsServer) ListFlagTranscriptFilters(context.Context, *ListFlagTranscriptFiltersRequest) (*ListFlagTranscriptFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlagTranscriptFilters not implemented")
}
func (UnimplementedVanalyticsServer) ListFlagFilters(context.Context, *ListFlagFiltersRequest) (*ListFlagFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlagFilters not implemented")
}
func (UnimplementedVanalyticsServer) mustEmbedUnimplementedVanalyticsServer() {}

// UnsafeVanalyticsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VanalyticsServer will
// result in compilation errors.
type UnsafeVanalyticsServer interface {
	mustEmbedUnimplementedVanalyticsServer()
}

func RegisterVanalyticsServer(s grpc.ServiceRegistrar, srv VanalyticsServer) {
	s.RegisterService(&Vanalytics_ServiceDesc, srv)
}

func _Vanalytics_SearchTranscripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTranscriptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).SearchTranscripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_SearchTranscripts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).SearchTranscripts(ctx, req.(*SearchTranscriptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_BulkDeleteTranscripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkDeleteTranscriptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).BulkDeleteTranscripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_BulkDeleteTranscripts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).BulkDeleteTranscripts(ctx, req.(*BulkDeleteTranscriptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_CreateFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).CreateFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_CreateFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).CreateFilter(ctx, req.(*CreateFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_ListFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).ListFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_ListFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).ListFilters(ctx, req.(*ListFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_UpdateFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).UpdateFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_UpdateFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).UpdateFilter(ctx, req.(*UpdateFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_DeleteFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).DeleteFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_DeleteFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).DeleteFilter(ctx, req.(*DeleteFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_GetFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).GetFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_GetFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).GetFilter(ctx, req.(*GetFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_ListFlagTranscriptFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlagTranscriptFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).ListFlagTranscriptFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_ListFlagTranscriptFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).ListFlagTranscriptFilters(ctx, req.(*ListFlagTranscriptFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_ListFlagFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlagFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).ListFlagFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_ListFlagFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).ListFlagFilters(ctx, req.(*ListFlagFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Vanalytics_ServiceDesc is the grpc.ServiceDesc for Vanalytics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vanalytics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wfo.vanalytics.v2.Vanalytics",
	HandlerType: (*VanalyticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchTranscripts",
			Handler:    _Vanalytics_SearchTranscripts_Handler,
		},
		{
			MethodName: "BulkDeleteTranscripts",
			Handler:    _Vanalytics_BulkDeleteTranscripts_Handler,
		},
		{
			MethodName: "CreateFilter",
			Handler:    _Vanalytics_CreateFilter_Handler,
		},
		{
			MethodName: "ListFilters",
			Handler:    _Vanalytics_ListFilters_Handler,
		},
		{
			MethodName: "UpdateFilter",
			Handler:    _Vanalytics_UpdateFilter_Handler,
		},
		{
			MethodName: "DeleteFilter",
			Handler:    _Vanalytics_DeleteFilter_Handler,
		},
		{
			MethodName: "GetFilter",
			Handler:    _Vanalytics_GetFilter_Handler,
		},
		{
			MethodName: "ListFlagTranscriptFilters",
			Handler:    _Vanalytics_ListFlagTranscriptFilters_Handler,
		},
		{
			MethodName: "ListFlagFilters",
			Handler:    _Vanalytics_ListFlagFilters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wfo/vanalytics/v2/service.proto",
}
