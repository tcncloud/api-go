// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: wfo/vanalytics/v2/transcript.proto

package vanalyticsv2

import (
	commons "github.com/tcncloud/api-go/api/commons"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An enumeration of transcript communication channels.
type Channel int32

const (
	Channel_CHANNEL_CALL Channel = 0
	Channel_CHANNEL_SMS  Channel = 1
)

// Enum value maps for Channel.
var (
	Channel_name = map[int32]string{
		0: "CHANNEL_CALL",
		1: "CHANNEL_SMS",
	}
	Channel_value = map[string]int32{
		"CHANNEL_CALL": 0,
		"CHANNEL_SMS":  1,
	}
)

func (x Channel) Enum() *Channel {
	p := new(Channel)
	*p = x
	return p
}

func (x Channel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Channel) Descriptor() protoreflect.EnumDescriptor {
	return file_wfo_vanalytics_v2_transcript_proto_enumTypes[0].Descriptor()
}

func (Channel) Type() protoreflect.EnumType {
	return &file_wfo_vanalytics_v2_transcript_proto_enumTypes[0]
}

func (x Channel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Channel.Descriptor instead.
func (Channel) EnumDescriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{0}
}

// An enumeration of a flagged transcripts review statuses. Todo means there
// are flags that need review and have not been reviewed. Done means every flag
// that needs review has been reviewed. None means no flags require review.
type ReviewStatus int32

const (
	ReviewStatus_REVIEW_STATUS_TODO ReviewStatus = 0
	ReviewStatus_REVIEW_STATUS_DONE ReviewStatus = 1
	ReviewStatus_REVIEW_STATUS_NONE ReviewStatus = 2
)

// Enum value maps for ReviewStatus.
var (
	ReviewStatus_name = map[int32]string{
		0: "REVIEW_STATUS_TODO",
		1: "REVIEW_STATUS_DONE",
		2: "REVIEW_STATUS_NONE",
	}
	ReviewStatus_value = map[string]int32{
		"REVIEW_STATUS_TODO": 0,
		"REVIEW_STATUS_DONE": 1,
		"REVIEW_STATUS_NONE": 2,
	}
)

func (x ReviewStatus) Enum() *ReviewStatus {
	p := new(ReviewStatus)
	*p = x
	return p
}

func (x ReviewStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReviewStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_wfo_vanalytics_v2_transcript_proto_enumTypes[1].Descriptor()
}

func (ReviewStatus) Type() protoreflect.EnumType {
	return &file_wfo_vanalytics_v2_transcript_proto_enumTypes[1]
}

func (x ReviewStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReviewStatus.Descriptor instead.
func (ReviewStatus) EnumDescriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{1}
}

// A textualized interaction between two or more participants.
type Transcript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Channel specific transcript metadata.
	//
	// Types that are assignable to Metadata:
	//
	//	*Transcript_Call
	//	*Transcript_Sms
	Metadata isTranscript_Metadata `protobuf_oneof:"metadata"`
	// The communication channel of the transcript.
	Channel Channel `protobuf:"varint,12,opt,name=channel,proto3,enum=wfo.vanalytics.v2.Channel" json:"channel,omitempty"`
	// The time the transcript was started.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The time the transcript was marked as deleted.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// The flag summary of the transcript.
	FlagSummary *FlagSummary `protobuf:"bytes,16,opt,name=flag_summary,json=flagSummary,proto3" json:"flag_summary,omitempty"`
	// The unique identifier of the transcript.
	TranscriptSid int64 `protobuf:"varint,17,opt,name=transcript_sid,json=transcriptSid,proto3" json:"transcript_sid,omitempty"`
	// The summary for the transcript.
	Summary *TranscriptSummary `protobuf:"bytes,18,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *Transcript) Reset() {
	*x = Transcript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transcript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transcript) ProtoMessage() {}

func (x *Transcript) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transcript.ProtoReflect.Descriptor instead.
func (*Transcript) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{0}
}

func (m *Transcript) GetMetadata() isTranscript_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (x *Transcript) GetCall() *Call {
	if x, ok := x.GetMetadata().(*Transcript_Call); ok {
		return x.Call
	}
	return nil
}

func (x *Transcript) GetSms() *Sms {
	if x, ok := x.GetMetadata().(*Transcript_Sms); ok {
		return x.Sms
	}
	return nil
}

func (x *Transcript) GetChannel() Channel {
	if x != nil {
		return x.Channel
	}
	return Channel_CHANNEL_CALL
}

func (x *Transcript) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Transcript) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *Transcript) GetFlagSummary() *FlagSummary {
	if x != nil {
		return x.FlagSummary
	}
	return nil
}

func (x *Transcript) GetTranscriptSid() int64 {
	if x != nil {
		return x.TranscriptSid
	}
	return 0
}

func (x *Transcript) GetSummary() *TranscriptSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type isTranscript_Metadata interface {
	isTranscript_Metadata()
}

type Transcript_Call struct {
	// Call specific transcript metadata.
	Call *Call `protobuf:"bytes,1,opt,name=call,proto3,oneof"`
}

type Transcript_Sms struct {
	// Sms specific transcript metadata.
	Sms *Sms `protobuf:"bytes,2,opt,name=sms,proto3,oneof"`
}

func (*Transcript_Call) isTranscript_Metadata() {}

func (*Transcript_Sms) isTranscript_Metadata() {}

// FlagSummary defines a summary of flags which were applied to a transcript.
type FlagSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of flags associated with the transcript.
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// The sum of the priorities of the flags associated with the transcript.
	PrioritySum int32 `protobuf:"varint,2,opt,name=priority_sum,json=prioritySum,proto3" json:"priority_sum,omitempty"`
	// The highest priority of the flags associated with the transcript.
	PriorityMax int32 `protobuf:"varint,3,opt,name=priority_max,json=priorityMax,proto3" json:"priority_max,omitempty"`
	// Need Review provides info on the flags that need review.
	NeedReview *FlagSummary_NeedReview `protobuf:"bytes,4,opt,name=need_review,json=needReview,proto3" json:"need_review,omitempty"`
	// Flags contain the flags and filters that are associated with the transcript.
	Flags []*FlagSummary_Flag `protobuf:"bytes,5,rep,name=flags,proto3" json:"flags,omitempty"`
	// The review status of the flagged transcript.
	ReviewStatus ReviewStatus `protobuf:"varint,6,opt,name=review_status,json=reviewStatus,proto3,enum=wfo.vanalytics.v2.ReviewStatus" json:"review_status,omitempty"`
}

func (x *FlagSummary) Reset() {
	*x = FlagSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagSummary) ProtoMessage() {}

func (x *FlagSummary) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagSummary.ProtoReflect.Descriptor instead.
func (*FlagSummary) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{1}
}

func (x *FlagSummary) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FlagSummary) GetPrioritySum() int32 {
	if x != nil {
		return x.PrioritySum
	}
	return 0
}

func (x *FlagSummary) GetPriorityMax() int32 {
	if x != nil {
		return x.PriorityMax
	}
	return 0
}

func (x *FlagSummary) GetNeedReview() *FlagSummary_NeedReview {
	if x != nil {
		return x.NeedReview
	}
	return nil
}

func (x *FlagSummary) GetFlags() []*FlagSummary_Flag {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *FlagSummary) GetReviewStatus() ReviewStatus {
	if x != nil {
		return x.ReviewStatus
	}
	return ReviewStatus_REVIEW_STATUS_TODO
}

// Sms specific transcript metadata.
type Sms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the sms conversation.
	ConversationSid int64 `protobuf:"varint,1,opt,name=conversation_sid,json=conversationSid,proto3" json:"conversation_sid,omitempty"`
	// The text from the sms in threads.
	Threads []*Sms_Thread `protobuf:"bytes,2,rep,name=threads,proto3" json:"threads,omitempty"`
	// The phone data.
	Phone *Sms_Phone `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	// The phone number of the agent.
	CallerId string `protobuf:"bytes,4,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	// The omni campain this sms belongs to.
	CampaignSid int64 `protobuf:"varint,5,opt,name=campaign_sid,json=campaignSid,proto3" json:"campaign_sid,omitempty"`
}

func (x *Sms) Reset() {
	*x = Sms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sms) ProtoMessage() {}

func (x *Sms) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sms.ProtoReflect.Descriptor instead.
func (*Sms) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{2}
}

func (x *Sms) GetConversationSid() int64 {
	if x != nil {
		return x.ConversationSid
	}
	return 0
}

func (x *Sms) GetThreads() []*Sms_Thread {
	if x != nil {
		return x.Threads
	}
	return nil
}

func (x *Sms) GetPhone() *Sms_Phone {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *Sms) GetCallerId() string {
	if x != nil {
		return x.CallerId
	}
	return ""
}

func (x *Sms) GetCampaignSid() int64 {
	if x != nil {
		return x.CampaignSid
	}
	return 0
}

// Call specific transcript metadata.
type Call struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for the call.
	CallSid int64 `protobuf:"varint,1,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	// The type of call.
	CallType commons.CallType_Enum `protobuf:"varint,2,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
	// The total audio time of a call.
	AudioTime uint32 `protobuf:"varint,3,opt,name=audio_time,json=audioTime,proto3" json:"audio_time,omitempty"`
	// The text from the call in threads.
	Threads []*Call_Thread `protobuf:"bytes,4,rep,name=threads,proto3" json:"threads,omitempty"`
	// The silence stats for this call.
	Silence *Call_Silence `protobuf:"bytes,5,opt,name=silence,proto3" json:"silence,omitempty"`
	// The stats for when 2 participants are talking at the same time.
	TalkOver *Call_TalkOver `protobuf:"bytes,6,opt,name=talk_over,json=talkOver,proto3" json:"talk_over,omitempty"`
	// The total time duration of talk time in this call.
	TalkTime *durationpb.Duration `protobuf:"bytes,7,opt,name=talk_time,json=talkTime,proto3" json:"talk_time,omitempty"`
	// The phone number that initiated the call.
	CallerId string `protobuf:"bytes,8,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	// The hunt group name for the agent who made the call.
	GroupName string `protobuf:"bytes,9,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// The agent responses for this call.
	AgentResponse map[string]*Call_AgentResponse `protobuf:"bytes,10,rep,name=agent_response,json=agentResponse,proto3" json:"agent_response,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The hunt groups sids for this call.
	HuntGroupSids []int64 `protobuf:"varint,11,rep,packed,name=hunt_group_sids,json=huntGroupSids,proto3" json:"hunt_group_sids,omitempty"`
	// The number format for numbers in the agent response for this call.
	NumberFormat string `protobuf:"bytes,12,opt,name=number_format,json=numberFormat,proto3" json:"number_format,omitempty"`
	// Agent call log for this call.
	AgentCallLog *AgentCallLog `protobuf:"bytes,13,opt,name=agent_call_log,json=agentCallLog,proto3" json:"agent_call_log,omitempty"`
	// The phone data.
	Phone *Call_Phone `protobuf:"bytes,14,opt,name=phone,proto3" json:"phone,omitempty"`
	// The audio bytes for this call.
	AudioBytes int64 `protobuf:"varint,16,opt,name=audio_bytes,json=audioBytes,proto3" json:"audio_bytes,omitempty"`
}

func (x *Call) Reset() {
	*x = Call{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call) ProtoMessage() {}

func (x *Call) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call.ProtoReflect.Descriptor instead.
func (*Call) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{3}
}

func (x *Call) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *Call) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

func (x *Call) GetAudioTime() uint32 {
	if x != nil {
		return x.AudioTime
	}
	return 0
}

func (x *Call) GetThreads() []*Call_Thread {
	if x != nil {
		return x.Threads
	}
	return nil
}

func (x *Call) GetSilence() *Call_Silence {
	if x != nil {
		return x.Silence
	}
	return nil
}

func (x *Call) GetTalkOver() *Call_TalkOver {
	if x != nil {
		return x.TalkOver
	}
	return nil
}

func (x *Call) GetTalkTime() *durationpb.Duration {
	if x != nil {
		return x.TalkTime
	}
	return nil
}

func (x *Call) GetCallerId() string {
	if x != nil {
		return x.CallerId
	}
	return ""
}

func (x *Call) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *Call) GetAgentResponse() map[string]*Call_AgentResponse {
	if x != nil {
		return x.AgentResponse
	}
	return nil
}

func (x *Call) GetHuntGroupSids() []int64 {
	if x != nil {
		return x.HuntGroupSids
	}
	return nil
}

func (x *Call) GetNumberFormat() string {
	if x != nil {
		return x.NumberFormat
	}
	return ""
}

func (x *Call) GetAgentCallLog() *AgentCallLog {
	if x != nil {
		return x.AgentCallLog
	}
	return nil
}

func (x *Call) GetPhone() *Call_Phone {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *Call) GetAudioBytes() int64 {
	if x != nil {
		return x.AudioBytes
	}
	return 0
}

// The request for the search transcripts RPC.
type SearchTranscriptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of hits to include in response. Defaults to 10.
	PageSize uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The order by which transcripts will be listed. Follows SQL order by
	// syntax. When not provided the order defaults to transcript_sid asc.
	OrderBy string `protobuf:"bytes,3,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// A field mask which defines which transcript fields to return. When empty
	// all transcript fields will be returned.
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// Query by which to filter transcripts.
	BoolQuery *TranscriptBoolQuery `protobuf:"bytes,5,opt,name=bool_query,json=boolQuery,proto3" json:"bool_query,omitempty"`
	// The next page token from a previous response.
	PageToken string `protobuf:"bytes,6,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Configuration to enable and control text highlights.
	Highlight *Highlight `protobuf:"bytes,7,opt,name=highlight,proto3" json:"highlight,omitempty"`
}

func (x *SearchTranscriptsRequest) Reset() {
	*x = SearchTranscriptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTranscriptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTranscriptsRequest) ProtoMessage() {}

func (x *SearchTranscriptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTranscriptsRequest.ProtoReflect.Descriptor instead.
func (*SearchTranscriptsRequest) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{4}
}

func (x *SearchTranscriptsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchTranscriptsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *SearchTranscriptsRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *SearchTranscriptsRequest) GetBoolQuery() *TranscriptBoolQuery {
	if x != nil {
		return x.BoolQuery
	}
	return nil
}

func (x *SearchTranscriptsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *SearchTranscriptsRequest) GetHighlight() *Highlight {
	if x != nil {
		return x.Highlight
	}
	return nil
}

// Configuration to enable and control text highlights.
type Highlight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The prefix for highlighted text. Defaults to "{{" when empty.
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// The suffix for highlighted text. Defaults to "}}" when empty.
	Suffix string `protobuf:"bytes,2,opt,name=suffix,proto3" json:"suffix,omitempty"`
}

func (x *Highlight) Reset() {
	*x = Highlight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Highlight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Highlight) ProtoMessage() {}

func (x *Highlight) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Highlight.ProtoReflect.Descriptor instead.
func (*Highlight) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{5}
}

func (x *Highlight) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Highlight) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

// The response for the search transcripts RPC.
type SearchTranscriptsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One page of search response hits.
	Hits []*SearchTranscriptsResponse_Hit `protobuf:"bytes,1,rep,name=hits,proto3" json:"hits,omitempty"`
	// A page token which can be provided on a follow up request to retrieve the
	// next page of transcript hits.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *SearchTranscriptsResponse) Reset() {
	*x = SearchTranscriptsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTranscriptsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTranscriptsResponse) ProtoMessage() {}

func (x *SearchTranscriptsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTranscriptsResponse.ProtoReflect.Descriptor instead.
func (*SearchTranscriptsResponse) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{6}
}

func (x *SearchTranscriptsResponse) GetHits() []*SearchTranscriptsResponse_Hit {
	if x != nil {
		return x.Hits
	}
	return nil
}

func (x *SearchTranscriptsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Boolean query to filter transcripts.
type TranscriptBoolQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query constraints on transcript.
	Transcript *TranscriptQuery `protobuf:"bytes,1,opt,name=transcript,proto3" json:"transcript,omitempty"`
}

func (x *TranscriptBoolQuery) Reset() {
	*x = TranscriptBoolQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptBoolQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptBoolQuery) ProtoMessage() {}

func (x *TranscriptBoolQuery) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptBoolQuery.ProtoReflect.Descriptor instead.
func (*TranscriptBoolQuery) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{7}
}

func (x *TranscriptBoolQuery) GetTranscript() *TranscriptQuery {
	if x != nil {
		return x.Transcript
	}
	return nil
}

// Query to filter transcripts.
type TranscriptQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query constraints on transcript sid.
	TranscriptSid *TranscriptQuery_TranscriptSid `protobuf:"bytes,1,opt,name=transcript_sid,json=transcriptSid,proto3" json:"transcript_sid,omitempty"`
	// Query constraints on channel.
	Channel *TranscriptQuery_Channel `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	// Query constraints on metadata.
	Metadata *TranscriptQuery_Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Query constraints on threads.
	Threads *TranscriptQuery_Threads `protobuf:"bytes,4,opt,name=threads,proto3" json:"threads,omitempty"`
	// Query constraints on flag summary.
	FlagSummary *TranscriptQuery_FlagSummary `protobuf:"bytes,5,opt,name=flag_summary,json=flagSummary,proto3" json:"flag_summary,omitempty"`
	// Query constraints on start time.
	StartTime *TranscriptQuery_StartTime `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Query constraints on delete time.
	DeleteTime *TranscriptQuery_DeleteTime `protobuf:"bytes,7,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Query constraints on phone.
	Phone *TranscriptQuery_Phone `protobuf:"bytes,8,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *TranscriptQuery) Reset() {
	*x = TranscriptQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery) ProtoMessage() {}

func (x *TranscriptQuery) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery.ProtoReflect.Descriptor instead.
func (*TranscriptQuery) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8}
}

func (x *TranscriptQuery) GetTranscriptSid() *TranscriptQuery_TranscriptSid {
	if x != nil {
		return x.TranscriptSid
	}
	return nil
}

func (x *TranscriptQuery) GetChannel() *TranscriptQuery_Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TranscriptQuery) GetMetadata() *TranscriptQuery_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TranscriptQuery) GetThreads() *TranscriptQuery_Threads {
	if x != nil {
		return x.Threads
	}
	return nil
}

func (x *TranscriptQuery) GetFlagSummary() *TranscriptQuery_FlagSummary {
	if x != nil {
		return x.FlagSummary
	}
	return nil
}

func (x *TranscriptQuery) GetStartTime() *TranscriptQuery_StartTime {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TranscriptQuery) GetDeleteTime() *TranscriptQuery_DeleteTime {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *TranscriptQuery) GetPhone() *TranscriptQuery_Phone {
	if x != nil {
		return x.Phone
	}
	return nil
}

type Moment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Timezone of the client.
	TimeZone string `protobuf:"bytes,1,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	// Optional. Dynamic time period to match which
	// defaults to today.
	Interval commons.Interval `protobuf:"varint,2,opt,name=interval,proto3,enum=api.commons.Interval" json:"interval,omitempty"`
}

func (x *Moment) Reset() {
	*x = Moment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Moment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Moment) ProtoMessage() {}

func (x *Moment) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Moment.ProtoReflect.Descriptor instead.
func (*Moment) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{9}
}

func (x *Moment) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *Moment) GetInterval() commons.Interval {
	if x != nil {
		return x.Interval
	}
	return commons.Interval(0)
}

// Defines an automatic max allowable edit distance based on the length of the
// text to match.
//
// length  <  low -- Must match exactly.
// length  < high -- Must match with one edit allowed.
// length >= high -- Must match with two edits allowed.
type FuzzinessAuto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The low length threshold.
	Low uint32 `protobuf:"varint,1,opt,name=low,proto3" json:"low,omitempty"`
	// The high length threshold.
	High uint32 `protobuf:"varint,2,opt,name=high,proto3" json:"high,omitempty"`
}

func (x *FuzzinessAuto) Reset() {
	*x = FuzzinessAuto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzinessAuto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzinessAuto) ProtoMessage() {}

func (x *FuzzinessAuto) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzinessAuto.ProtoReflect.Descriptor instead.
func (*FuzzinessAuto) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{10}
}

func (x *FuzzinessAuto) GetLow() uint32 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *FuzzinessAuto) GetHigh() uint32 {
	if x != nil {
		return x.High
	}
	return 0
}

// Query text terms with optional fuzziness.
type Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The text to be matched. The field may contain multiple terms
	// to match when separated by spaces.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// Determines whether any or all of the terms must be matched. Operator must
	// be one of: (AND, OR). Defaults to OR when empty.
	Operator string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	// Fuzziness controls the maximum edit distance that a similar term can have
	// and be considered a match. For example, the edit distance between cat and
	// bat would be 1 since only one letter is different. The edit distance
	// between unity and united would be 2. Fuzziness auto is recommended.
	//
	// Types that are assignable to Fuzziness:
	//
	//	*Match_FuzzinessAuto
	//	*Match_FuzzinessValue
	Fuzziness isMatch_Fuzziness `protobuf_oneof:"fuzziness"`
}

func (x *Match) Reset() {
	*x = Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{11}
}

func (x *Match) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Match) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (m *Match) GetFuzziness() isMatch_Fuzziness {
	if m != nil {
		return m.Fuzziness
	}
	return nil
}

func (x *Match) GetFuzzinessAuto() *FuzzinessAuto {
	if x, ok := x.GetFuzziness().(*Match_FuzzinessAuto); ok {
		return x.FuzzinessAuto
	}
	return nil
}

func (x *Match) GetFuzzinessValue() uint32 {
	if x, ok := x.GetFuzziness().(*Match_FuzzinessValue); ok {
		return x.FuzzinessValue
	}
	return 0
}

type isMatch_Fuzziness interface {
	isMatch_Fuzziness()
}

type Match_FuzzinessAuto struct {
	// Variable fuzziness based on the match term length.
	FuzzinessAuto *FuzzinessAuto `protobuf:"bytes,15,opt,name=fuzziness_auto,json=fuzzinessAuto,proto3,oneof"`
}

type Match_FuzzinessValue struct {
	// Constant fuzziness with allowed range from 0, 1 and 2.
	FuzzinessValue uint32 `protobuf:"varint,16,opt,name=fuzziness_value,json=fuzzinessValue,proto3,oneof"`
}

func (*Match_FuzzinessAuto) isMatch_Fuzziness() {}

func (*Match_FuzzinessValue) isMatch_Fuzziness() {}

// Query which matches a list of clauses that are near to each other.
type SpanNear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of allowed non matching terms within the span. For example, a
	// slop of 2 when searching for "This is my dog" would allow a match on
	// "This is my quick brown dog".
	Slop int32 `protobuf:"varint,1,opt,name=slop,proto3" json:"slop,omitempty"`
	// Requires clauses to be matched in the order.
	InOrder bool `protobuf:"varint,2,opt,name=in_order,json=inOrder,proto3" json:"in_order,omitempty"`
	// Required. The clauses to be matched.
	Clauses []*SpanNear_Clause `protobuf:"bytes,3,rep,name=clauses,proto3" json:"clauses,omitempty"`
}

func (x *SpanNear) Reset() {
	*x = SpanNear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanNear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanNear) ProtoMessage() {}

func (x *SpanNear) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanNear.ProtoReflect.Descriptor instead.
func (*SpanNear) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{12}
}

func (x *SpanNear) GetSlop() int32 {
	if x != nil {
		return x.Slop
	}
	return 0
}

func (x *SpanNear) GetInOrder() bool {
	if x != nil {
		return x.InOrder
	}
	return false
}

func (x *SpanNear) GetClauses() []*SpanNear_Clause {
	if x != nil {
		return x.Clauses
	}
	return nil
}

// Query which matches a span term exactly.
type SpanTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The value to be matched.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SpanTerm) Reset() {
	*x = SpanTerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanTerm) ProtoMessage() {}

func (x *SpanTerm) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanTerm.ProtoReflect.Descriptor instead.
func (*SpanTerm) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{13}
}

func (x *SpanTerm) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Query which matches a span term with fuzziness.
type SpanFuzzy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The value to be fuzzy matched.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Fuzziness controls the maximum edit distance that a similar term can have
	// and be considered a match. For example, the edit distance between cat and
	// bat would be 1 since only one letter is different. The edit distance
	// between unity and united would be 2. Fuzziness auto is recommended.
	//
	// Types that are assignable to Fuzziness:
	//
	//	*SpanFuzzy_FuzzinessAuto
	//	*SpanFuzzy_FuzzinessValue
	Fuzziness isSpanFuzzy_Fuzziness `protobuf_oneof:"fuzziness"`
}

func (x *SpanFuzzy) Reset() {
	*x = SpanFuzzy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanFuzzy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanFuzzy) ProtoMessage() {}

func (x *SpanFuzzy) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanFuzzy.ProtoReflect.Descriptor instead.
func (*SpanFuzzy) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{14}
}

func (x *SpanFuzzy) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (m *SpanFuzzy) GetFuzziness() isSpanFuzzy_Fuzziness {
	if m != nil {
		return m.Fuzziness
	}
	return nil
}

func (x *SpanFuzzy) GetFuzzinessAuto() *FuzzinessAuto {
	if x, ok := x.GetFuzziness().(*SpanFuzzy_FuzzinessAuto); ok {
		return x.FuzzinessAuto
	}
	return nil
}

func (x *SpanFuzzy) GetFuzzinessValue() uint32 {
	if x, ok := x.GetFuzziness().(*SpanFuzzy_FuzzinessValue); ok {
		return x.FuzzinessValue
	}
	return 0
}

type isSpanFuzzy_Fuzziness interface {
	isSpanFuzzy_Fuzziness()
}

type SpanFuzzy_FuzzinessAuto struct {
	// Variable fuzziness based on the match term length.
	FuzzinessAuto *FuzzinessAuto `protobuf:"bytes,10,opt,name=fuzziness_auto,json=fuzzinessAuto,proto3,oneof"`
}

type SpanFuzzy_FuzzinessValue struct {
	// Constant fuzziness with allowed range from 0, 1 and 2.
	FuzzinessValue uint32 `protobuf:"varint,11,opt,name=fuzziness_value,json=fuzzinessValue,proto3,oneof"`
}

func (*SpanFuzzy_FuzzinessAuto) isSpanFuzzy_Fuzziness() {}

func (*SpanFuzzy_FuzzinessValue) isSpanFuzzy_Fuzziness() {}

// BulkDeleteTranscriptsRequest defines the bulk delete transcripts request.
type BulkDeleteTranscriptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. A query which determines which transcripts to delete.
	Query *TranscriptQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *BulkDeleteTranscriptsRequest) Reset() {
	*x = BulkDeleteTranscriptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkDeleteTranscriptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkDeleteTranscriptsRequest) ProtoMessage() {}

func (x *BulkDeleteTranscriptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkDeleteTranscriptsRequest.ProtoReflect.Descriptor instead.
func (*BulkDeleteTranscriptsRequest) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{15}
}

func (x *BulkDeleteTranscriptsRequest) GetQuery() *TranscriptQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

// BulkDeleteTranscriptsResponse defines the bulk delete transcripts response.
type BulkDeleteTranscriptsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of transcripts deleted.
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *BulkDeleteTranscriptsResponse) Reset() {
	*x = BulkDeleteTranscriptsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkDeleteTranscriptsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkDeleteTranscriptsResponse) ProtoMessage() {}

func (x *BulkDeleteTranscriptsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkDeleteTranscriptsResponse.ProtoReflect.Descriptor instead.
func (*BulkDeleteTranscriptsResponse) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{16}
}

func (x *BulkDeleteTranscriptsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// BulkRestoreTranscriptsRequest defines the bulk restore transcripts request.
type BulkRestoreTranscriptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. A query which determines which transcripts to restore.
	Query *TranscriptQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *BulkRestoreTranscriptsRequest) Reset() {
	*x = BulkRestoreTranscriptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkRestoreTranscriptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkRestoreTranscriptsRequest) ProtoMessage() {}

func (x *BulkRestoreTranscriptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkRestoreTranscriptsRequest.ProtoReflect.Descriptor instead.
func (*BulkRestoreTranscriptsRequest) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{17}
}

func (x *BulkRestoreTranscriptsRequest) GetQuery() *TranscriptQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

// BulkRestoreTranscriptsResponse defines the bulk restore transcripts response.
type BulkRestoreTranscriptsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of transcripts restored.
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *BulkRestoreTranscriptsResponse) Reset() {
	*x = BulkRestoreTranscriptsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkRestoreTranscriptsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkRestoreTranscriptsResponse) ProtoMessage() {}

func (x *BulkRestoreTranscriptsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkRestoreTranscriptsResponse.ProtoReflect.Descriptor instead.
func (*BulkRestoreTranscriptsResponse) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{18}
}

func (x *BulkRestoreTranscriptsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// ListTranscriptGroupNamesRequest is a request for listing group names.
type ListTranscriptGroupNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTranscriptGroupNamesRequest) Reset() {
	*x = ListTranscriptGroupNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTranscriptGroupNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTranscriptGroupNamesRequest) ProtoMessage() {}

func (x *ListTranscriptGroupNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTranscriptGroupNamesRequest.ProtoReflect.Descriptor instead.
func (*ListTranscriptGroupNamesRequest) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{19}
}

// ListTranscriptGroupNamesResponse is a response for listing group names.
type ListTranscriptGroupNamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Group names are the transcript group names.
	GroupNames []*TranscriptGroupName `protobuf:"bytes,1,rep,name=group_names,json=groupNames,proto3" json:"group_names,omitempty"`
}

func (x *ListTranscriptGroupNamesResponse) Reset() {
	*x = ListTranscriptGroupNamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTranscriptGroupNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTranscriptGroupNamesResponse) ProtoMessage() {}

func (x *ListTranscriptGroupNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTranscriptGroupNamesResponse.ProtoReflect.Descriptor instead.
func (*ListTranscriptGroupNamesResponse) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{20}
}

func (x *ListTranscriptGroupNamesResponse) GetGroupNames() []*TranscriptGroupName {
	if x != nil {
		return x.GroupNames
	}
	return nil
}

// TranscriptGroupName is the transcript group name.
type TranscriptGroupName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value is a group name value.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TranscriptGroupName) Reset() {
	*x = TranscriptGroupName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptGroupName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptGroupName) ProtoMessage() {}

func (x *TranscriptGroupName) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptGroupName.ProtoReflect.Descriptor instead.
func (*TranscriptGroupName) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{21}
}

func (x *TranscriptGroupName) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// ListAgentResponseValuesRequest is a request for listing agent reponse values.
type ListAgentResponseValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ListAgentResponseValuesRequest) Reset() {
	*x = ListAgentResponseValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAgentResponseValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentResponseValuesRequest) ProtoMessage() {}

func (x *ListAgentResponseValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentResponseValuesRequest.ProtoReflect.Descriptor instead.
func (*ListAgentResponseValuesRequest) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{22}
}

func (x *ListAgentResponseValuesRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// ListAgentResponseValuesResponse is a response for listing agent response values.
type ListAgentResponseValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values are the transcript agent response values.
	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ListAgentResponseValuesResponse) Reset() {
	*x = ListAgentResponseValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAgentResponseValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentResponseValuesResponse) ProtoMessage() {}

func (x *ListAgentResponseValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentResponseValuesResponse.ProtoReflect.Descriptor instead.
func (*ListAgentResponseValuesResponse) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{23}
}

func (x *ListAgentResponseValuesResponse) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// NeedReview defines flags which need to be reviewed.
type FlagSummary_NeedReview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sum of the priorities of the flags that need review.
	PrioritySum int32 `protobuf:"varint,1,opt,name=priority_sum,json=prioritySum,proto3" json:"priority_sum,omitempty"`
	// The highest priority of the flags that need review.
	PriorityMax int32 `protobuf:"varint,2,opt,name=priority_max,json=priorityMax,proto3" json:"priority_max,omitempty"`
	// The number of flags that need review.
	Count int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	// The Flag sids that need review.
	FlagSids []int64 `protobuf:"varint,4,rep,packed,name=flag_sids,json=flagSids,proto3" json:"flag_sids,omitempty"`
}

func (x *FlagSummary_NeedReview) Reset() {
	*x = FlagSummary_NeedReview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagSummary_NeedReview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagSummary_NeedReview) ProtoMessage() {}

func (x *FlagSummary_NeedReview) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagSummary_NeedReview.ProtoReflect.Descriptor instead.
func (*FlagSummary_NeedReview) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{1, 0}
}

func (x *FlagSummary_NeedReview) GetPrioritySum() int32 {
	if x != nil {
		return x.PrioritySum
	}
	return 0
}

func (x *FlagSummary_NeedReview) GetPriorityMax() int32 {
	if x != nil {
		return x.PriorityMax
	}
	return 0
}

func (x *FlagSummary_NeedReview) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FlagSummary_NeedReview) GetFlagSids() []int64 {
	if x != nil {
		return x.FlagSids
	}
	return nil
}

// Flag defines a flag that was applied to a transcript by one or more filters
// along with a user review when one exists.
type FlagSummary_Flag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique id of this flag.
	FlagSid int64 `protobuf:"varint,1,opt,name=flag_sid,json=flagSid,proto3" json:"flag_sid,omitempty"`
	// The name of this flag.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The priority of this flag.
	Priority int32 `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	// The version of this flag.
	Version int64 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	// Filters which applied this flag.
	Filters []*FlagSummary_Filter `protobuf:"bytes,5,rep,name=filters,proto3" json:"filters,omitempty"`
	// Determines whether this flag must be reviewed.
	MustReview bool `protobuf:"varint,6,opt,name=must_review,json=mustReview,proto3" json:"must_review,omitempty"`
	// Determines whether this flag must be notified.
	MustNotify bool `protobuf:"varint,7,opt,name=must_notify,json=mustNotify,proto3" json:"must_notify,omitempty"`
	// The reviews of this flag.
	Reviews []*FlagSummary_Review `protobuf:"bytes,8,rep,name=reviews,proto3" json:"reviews,omitempty"`
}

func (x *FlagSummary_Flag) Reset() {
	*x = FlagSummary_Flag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagSummary_Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagSummary_Flag) ProtoMessage() {}

func (x *FlagSummary_Flag) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagSummary_Flag.ProtoReflect.Descriptor instead.
func (*FlagSummary_Flag) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{1, 1}
}

func (x *FlagSummary_Flag) GetFlagSid() int64 {
	if x != nil {
		return x.FlagSid
	}
	return 0
}

func (x *FlagSummary_Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlagSummary_Flag) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *FlagSummary_Flag) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *FlagSummary_Flag) GetFilters() []*FlagSummary_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *FlagSummary_Flag) GetMustReview() bool {
	if x != nil {
		return x.MustReview
	}
	return false
}

func (x *FlagSummary_Flag) GetMustNotify() bool {
	if x != nil {
		return x.MustNotify
	}
	return false
}

func (x *FlagSummary_Flag) GetReviews() []*FlagSummary_Review {
	if x != nil {
		return x.Reviews
	}
	return nil
}

// Filter defines a filter which applied some flag to some transcript.
type FlagSummary_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The join key in form [flag_sid:filter_sid].
	JoinKey string `protobuf:"bytes,1,opt,name=join_key,json=joinKey,proto3" json:"join_key,omitempty"`
	// The flag sid this filter belongs to.
	FlagSid int64 `protobuf:"varint,2,opt,name=flag_sid,json=flagSid,proto3" json:"flag_sid,omitempty"`
	// The unique id of this filter.
	FilterSid int64 `protobuf:"varint,3,opt,name=filter_sid,json=filterSid,proto3" json:"filter_sid,omitempty"`
	// The version of this filter.
	Version int64 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	// The name of this filter.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FlagSummary_Filter) Reset() {
	*x = FlagSummary_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagSummary_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagSummary_Filter) ProtoMessage() {}

func (x *FlagSummary_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagSummary_Filter.ProtoReflect.Descriptor instead.
func (*FlagSummary_Filter) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{1, 2}
}

func (x *FlagSummary_Filter) GetJoinKey() string {
	if x != nil {
		return x.JoinKey
	}
	return ""
}

func (x *FlagSummary_Filter) GetFlagSid() int64 {
	if x != nil {
		return x.FlagSid
	}
	return 0
}

func (x *FlagSummary_Filter) GetFilterSid() int64 {
	if x != nil {
		return x.FilterSid
	}
	return 0
}

func (x *FlagSummary_Filter) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *FlagSummary_Filter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Review contains info on the flag review when one exists.
type FlagSummary_Review struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The join key in form [flag_sid:user_id].
	JoinKey string `protobuf:"bytes,1,opt,name=join_key,json=joinKey,proto3" json:"join_key,omitempty"`
	// The flag sid this review belongs to.
	FlagSid int64 `protobuf:"varint,2,opt,name=flag_sid,json=flagSid,proto3" json:"flag_sid,omitempty"`
	// The user id of the reviewer.
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *FlagSummary_Review) Reset() {
	*x = FlagSummary_Review{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagSummary_Review) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagSummary_Review) ProtoMessage() {}

func (x *FlagSummary_Review) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagSummary_Review.ProtoReflect.Descriptor instead.
func (*FlagSummary_Review) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{1, 3}
}

func (x *FlagSummary_Review) GetJoinKey() string {
	if x != nil {
		return x.JoinKey
	}
	return ""
}

func (x *FlagSummary_Review) GetFlagSid() int64 {
	if x != nil {
		return x.FlagSid
	}
	return 0
}

func (x *FlagSummary_Review) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// The phone data.
type Sms_Phone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The raw phone number.
	Raw string `protobuf:"bytes,12,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (x *Sms_Phone) Reset() {
	*x = Sms_Phone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sms_Phone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sms_Phone) ProtoMessage() {}

func (x *Sms_Phone) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sms_Phone.ProtoReflect.Descriptor instead.
func (*Sms_Phone) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Sms_Phone) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

// A thread is the text from one participant.
type Sms_Thread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the thread.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The text of the thread in segments.
	Segments []*Sms_Segment `protobuf:"bytes,2,rep,name=segments,proto3" json:"segments,omitempty"`
	// The user id of the participant on this thread.
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *Sms_Thread) Reset() {
	*x = Sms_Thread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sms_Thread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sms_Thread) ProtoMessage() {}

func (x *Sms_Thread) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sms_Thread.ProtoReflect.Descriptor instead.
func (*Sms_Thread) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Sms_Thread) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Sms_Thread) GetSegments() []*Sms_Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *Sms_Thread) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// A segment of text.
type Sms_Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The text in the segment.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// The offset time duration from the beginning of the conversation.
	Offset *durationpb.Duration `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *Sms_Segment) Reset() {
	*x = Sms_Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sms_Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sms_Segment) ProtoMessage() {}

func (x *Sms_Segment) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sms_Segment.ProtoReflect.Descriptor instead.
func (*Sms_Segment) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{2, 2}
}

func (x *Sms_Segment) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Sms_Segment) GetOffset() *durationpb.Duration {
	if x != nil {
		return x.Offset
	}
	return nil
}

// The phone data.
type Call_Phone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The raw phone number.
	Raw string `protobuf:"bytes,12,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (x *Call_Phone) Reset() {
	*x = Call_Phone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_Phone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_Phone) ProtoMessage() {}

func (x *Call_Phone) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_Phone.ProtoReflect.Descriptor instead.
func (*Call_Phone) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Call_Phone) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

// AgentResponse contains the agent responses aka dispositions.
type Call_AgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Call_AgentResponse) Reset() {
	*x = Call_AgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_AgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_AgentResponse) ProtoMessage() {}

func (x *Call_AgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_AgentResponse.ProtoReflect.Descriptor instead.
func (*Call_AgentResponse) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{3, 2}
}

func (x *Call_AgentResponse) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// A thread is the text from one participant.
type Call_Thread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the thread.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The text of the thread in segments.
	Segments []*Call_Segment `protobuf:"bytes,2,rep,name=segments,proto3" json:"segments,omitempty"`
	// The user id of the participant on this thread.
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *Call_Thread) Reset() {
	*x = Call_Thread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_Thread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_Thread) ProtoMessage() {}

func (x *Call_Thread) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_Thread.ProtoReflect.Descriptor instead.
func (*Call_Thread) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{3, 3}
}

func (x *Call_Thread) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Call_Thread) GetSegments() []*Call_Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *Call_Thread) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// A segment of text.
type Call_Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The text in the segment.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// The offset time duration from the beginning of the conversation.
	Offset *durationpb.Duration `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// The duration of the segment.
	Duration *durationpb.Duration `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *Call_Segment) Reset() {
	*x = Call_Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_Segment) ProtoMessage() {}

func (x *Call_Segment) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_Segment.ProtoReflect.Descriptor instead.
func (*Call_Segment) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{3, 4}
}

func (x *Call_Segment) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Call_Segment) GetOffset() *durationpb.Duration {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *Call_Segment) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

// The talk over stats for the call.
type Call_TalkOver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The talk over duration stats.
	Duration *Call_TalkOver_Duration `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	// The talk over occurence stats.
	Occurrence *Call_TalkOver_Occurrence `protobuf:"bytes,2,opt,name=occurrence,proto3" json:"occurrence,omitempty"`
	// The threshold in milliseconds of how much overlap is required
	// before it is considered talk over.
	Threshold uint32 `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *Call_TalkOver) Reset() {
	*x = Call_TalkOver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_TalkOver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_TalkOver) ProtoMessage() {}

func (x *Call_TalkOver) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_TalkOver.ProtoReflect.Descriptor instead.
func (*Call_TalkOver) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{3, 5}
}

func (x *Call_TalkOver) GetDuration() *Call_TalkOver_Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Call_TalkOver) GetOccurrence() *Call_TalkOver_Occurrence {
	if x != nil {
		return x.Occurrence
	}
	return nil
}

func (x *Call_TalkOver) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

// The silence stats for the call.
type Call_Silence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The silence duration stats.
	Duration *Call_Silence_Duration `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	// The silence occurence stats.
	Occurrence *Call_Silence_Occurrence `protobuf:"bytes,2,opt,name=occurrence,proto3" json:"occurrence,omitempty"`
	// The threshold in milliseconds of how much time without talking is
	// required before it is considered silence.
	Threshold uint32 `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *Call_Silence) Reset() {
	*x = Call_Silence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_Silence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_Silence) ProtoMessage() {}

func (x *Call_Silence) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_Silence.ProtoReflect.Descriptor instead.
func (*Call_Silence) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{3, 6}
}

func (x *Call_Silence) GetDuration() *Call_Silence_Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Call_Silence) GetOccurrence() *Call_Silence_Occurrence {
	if x != nil {
		return x.Occurrence
	}
	return nil
}

func (x *Call_Silence) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

// The talk over duration stats.
type Call_TalkOver_Duration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total talk over duration in the call.
	Total *durationpb.Duration `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	// The largest talk over duration in the call.
	Max *durationpb.Duration `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
	// The percentage of talk over in the call.
	Percentage uint32 `protobuf:"varint,3,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (x *Call_TalkOver_Duration) Reset() {
	*x = Call_TalkOver_Duration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_TalkOver_Duration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_TalkOver_Duration) ProtoMessage() {}

func (x *Call_TalkOver_Duration) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_TalkOver_Duration.ProtoReflect.Descriptor instead.
func (*Call_TalkOver_Duration) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{3, 5, 0}
}

func (x *Call_TalkOver_Duration) GetTotal() *durationpb.Duration {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *Call_TalkOver_Duration) GetMax() *durationpb.Duration {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Call_TalkOver_Duration) GetPercentage() uint32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

// The talk over occurence stats.
type Call_TalkOver_Occurrence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total number of talk over occurences in the call.
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *Call_TalkOver_Occurrence) Reset() {
	*x = Call_TalkOver_Occurrence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_TalkOver_Occurrence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_TalkOver_Occurrence) ProtoMessage() {}

func (x *Call_TalkOver_Occurrence) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_TalkOver_Occurrence.ProtoReflect.Descriptor instead.
func (*Call_TalkOver_Occurrence) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{3, 5, 1}
}

func (x *Call_TalkOver_Occurrence) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// The silence duration stats.
type Call_Silence_Duration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total silence duration in the call.
	Total *durationpb.Duration `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	// The largest silence duration in the call.
	Max *durationpb.Duration `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
	// The percentage of silence in the call.
	Percentage uint32 `protobuf:"varint,3,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (x *Call_Silence_Duration) Reset() {
	*x = Call_Silence_Duration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_Silence_Duration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_Silence_Duration) ProtoMessage() {}

func (x *Call_Silence_Duration) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_Silence_Duration.ProtoReflect.Descriptor instead.
func (*Call_Silence_Duration) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{3, 6, 0}
}

func (x *Call_Silence_Duration) GetTotal() *durationpb.Duration {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *Call_Silence_Duration) GetMax() *durationpb.Duration {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Call_Silence_Duration) GetPercentage() uint32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

// The silence occurence stats.
type Call_Silence_Occurrence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total number of silence occurences in the call.
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *Call_Silence_Occurrence) Reset() {
	*x = Call_Silence_Occurrence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_Silence_Occurrence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_Silence_Occurrence) ProtoMessage() {}

func (x *Call_Silence_Occurrence) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_Silence_Occurrence.ProtoReflect.Descriptor instead.
func (*Call_Silence_Occurrence) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{3, 6, 1}
}

func (x *Call_Silence_Occurrence) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// A search response hit.
type SearchTranscriptsResponse_Hit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A transcript which matched the transcript query.
	Transcript *Transcript `protobuf:"bytes,1,opt,name=transcript,proto3" json:"transcript,omitempty"`
}

func (x *SearchTranscriptsResponse_Hit) Reset() {
	*x = SearchTranscriptsResponse_Hit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTranscriptsResponse_Hit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTranscriptsResponse_Hit) ProtoMessage() {}

func (x *SearchTranscriptsResponse_Hit) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTranscriptsResponse_Hit.ProtoReflect.Descriptor instead.
func (*SearchTranscriptsResponse_Hit) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{6, 0}
}

func (x *SearchTranscriptsResponse_Hit) GetTranscript() *Transcript {
	if x != nil {
		return x.Transcript
	}
	return nil
}

// Query constraints on phone.
type TranscriptQuery_Phone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query constraints on phone country code.
	Cc *TranscriptQuery_Phone_Cc `protobuf:"bytes,1,opt,name=cc,proto3" json:"cc,omitempty"`
	// Query constraints on phone ndc (area code).
	Ndc *TranscriptQuery_Phone_Ndc `protobuf:"bytes,2,opt,name=ndc,proto3" json:"ndc,omitempty"`
	// Query constraints on phone subscriber number prefix.
	Prefix *TranscriptQuery_Phone_Prefix `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Query constraints on phone city.
	City *TranscriptQuery_Phone_City `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	// Query constraints on phone iso2 country code.
	Iso2 *TranscriptQuery_Phone_Iso2 `protobuf:"bytes,5,opt,name=iso2,proto3" json:"iso2,omitempty"`
	// Query constraints on phone region code.
	RegionCode *TranscriptQuery_Phone_RegionCode `protobuf:"bytes,6,opt,name=region_code,json=regionCode,proto3" json:"region_code,omitempty"`
	// Query constraints on phone region name.
	RegionName *TranscriptQuery_Phone_RegionName `protobuf:"bytes,7,opt,name=region_name,json=regionName,proto3" json:"region_name,omitempty"`
	// Query constraints on phone time zone.
	TimeZone *TranscriptQuery_Phone_TimeZone `protobuf:"bytes,8,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	// Query constraints on phone number type.
	Type *TranscriptQuery_Phone_Type `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	// Query constraints on phone number utc.
	Utc *TranscriptQuery_Phone_Utc `protobuf:"bytes,10,opt,name=utc,proto3" json:"utc,omitempty"`
	// Query constraints on phone number location.
	Location *TranscriptQuery_Phone_Location `protobuf:"bytes,11,opt,name=location,proto3" json:"location,omitempty"`
	// Query constraints on raw phone number.
	Raw *TranscriptQuery_Phone_Raw `protobuf:"bytes,12,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (x *TranscriptQuery_Phone) Reset() {
	*x = TranscriptQuery_Phone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Phone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Phone) ProtoMessage() {}

func (x *TranscriptQuery_Phone) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Phone.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Phone) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 0}
}

func (x *TranscriptQuery_Phone) GetCc() *TranscriptQuery_Phone_Cc {
	if x != nil {
		return x.Cc
	}
	return nil
}

func (x *TranscriptQuery_Phone) GetNdc() *TranscriptQuery_Phone_Ndc {
	if x != nil {
		return x.Ndc
	}
	return nil
}

func (x *TranscriptQuery_Phone) GetPrefix() *TranscriptQuery_Phone_Prefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *TranscriptQuery_Phone) GetCity() *TranscriptQuery_Phone_City {
	if x != nil {
		return x.City
	}
	return nil
}

func (x *TranscriptQuery_Phone) GetIso2() *TranscriptQuery_Phone_Iso2 {
	if x != nil {
		return x.Iso2
	}
	return nil
}

func (x *TranscriptQuery_Phone) GetRegionCode() *TranscriptQuery_Phone_RegionCode {
	if x != nil {
		return x.RegionCode
	}
	return nil
}

func (x *TranscriptQuery_Phone) GetRegionName() *TranscriptQuery_Phone_RegionName {
	if x != nil {
		return x.RegionName
	}
	return nil
}

func (x *TranscriptQuery_Phone) GetTimeZone() *TranscriptQuery_Phone_TimeZone {
	if x != nil {
		return x.TimeZone
	}
	return nil
}

func (x *TranscriptQuery_Phone) GetType() *TranscriptQuery_Phone_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *TranscriptQuery_Phone) GetUtc() *TranscriptQuery_Phone_Utc {
	if x != nil {
		return x.Utc
	}
	return nil
}

func (x *TranscriptQuery_Phone) GetLocation() *TranscriptQuery_Phone_Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *TranscriptQuery_Phone) GetRaw() *TranscriptQuery_Phone_Raw {
	if x != nil {
		return x.Raw
	}
	return nil
}

// Query constraints on transcript sid.
type TranscriptQuery_TranscriptSid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requires all transcript hits to have a transcript sid in the list.
	Any []int64 `protobuf:"varint,1,rep,packed,name=any,proto3" json:"any,omitempty"`
}

func (x *TranscriptQuery_TranscriptSid) Reset() {
	*x = TranscriptQuery_TranscriptSid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_TranscriptSid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_TranscriptSid) ProtoMessage() {}

func (x *TranscriptQuery_TranscriptSid) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_TranscriptSid.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_TranscriptSid) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 1}
}

func (x *TranscriptQuery_TranscriptSid) GetAny() []int64 {
	if x != nil {
		return x.Any
	}
	return nil
}

// Query constraints on channel.
type TranscriptQuery_Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requires all transcript hits to have a channel in the list.
	Any []Channel `protobuf:"varint,1,rep,packed,name=any,proto3,enum=wfo.vanalytics.v2.Channel" json:"any,omitempty"`
}

func (x *TranscriptQuery_Channel) Reset() {
	*x = TranscriptQuery_Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Channel) ProtoMessage() {}

func (x *TranscriptQuery_Channel) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Channel.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Channel) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 2}
}

func (x *TranscriptQuery_Channel) GetAny() []Channel {
	if x != nil {
		return x.Any
	}
	return nil
}

// Query constraints on metadata.
type TranscriptQuery_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query constraints on call metadata.
	Call *TranscriptQuery_Call `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"`
	// Query constraints on sms metadata.
	Sms *TranscriptQuery_Sms `protobuf:"bytes,2,opt,name=sms,proto3" json:"sms,omitempty"`
}

func (x *TranscriptQuery_Metadata) Reset() {
	*x = TranscriptQuery_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Metadata) ProtoMessage() {}

func (x *TranscriptQuery_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Metadata.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Metadata) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 3}
}

func (x *TranscriptQuery_Metadata) GetCall() *TranscriptQuery_Call {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *TranscriptQuery_Metadata) GetSms() *TranscriptQuery_Sms {
	if x != nil {
		return x.Sms
	}
	return nil
}

// Query constraints on call metadata.
type TranscriptQuery_Call struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query constraints on call sid.
	CallSid *TranscriptQuery_Call_CallSid `protobuf:"bytes,1,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	// Query constraints on audio time.
	AudioTime *TranscriptQuery_Call_AudioTime `protobuf:"bytes,2,opt,name=audio_time,json=audioTime,proto3" json:"audio_time,omitempty"`
	// Query constraints on call type.
	CallType *TranscriptQuery_Call_CallType `protobuf:"bytes,3,opt,name=call_type,json=callType,proto3" json:"call_type,omitempty"`
	// Query constraints on silence.
	Silence *TranscriptQuery_Call_Silence `protobuf:"bytes,4,opt,name=silence,proto3" json:"silence,omitempty"`
	// Query constraints on talk over.
	TalkOver *TranscriptQuery_Call_TalkOver `protobuf:"bytes,5,opt,name=talk_over,json=talkOver,proto3" json:"talk_over,omitempty"`
	// Query constraints on talk time.
	TalkTime *TranscriptQuery_Call_TalkTime `protobuf:"bytes,6,opt,name=talk_time,json=talkTime,proto3" json:"talk_time,omitempty"`
	// Query constraints on caller id.
	CallerId *TranscriptQuery_Call_CallerId `protobuf:"bytes,7,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	// Query constraints on group name.
	GroupName *TranscriptQuery_Call_GroupName `protobuf:"bytes,8,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// Query constraints on agent response.
	AgentResponse *TranscriptQuery_Call_AgentResponse `protobuf:"bytes,9,opt,name=agent_response,json=agentResponse,proto3" json:"agent_response,omitempty"`
	// Query constraints on hunt group sids.
	HuntGroupSids *TranscriptQuery_Call_HuntGroupSids `protobuf:"bytes,10,opt,name=hunt_group_sids,json=huntGroupSids,proto3" json:"hunt_group_sids,omitempty"`
	// Query constraints on agent call log.
	AgentCallLog *AgentCallLogQuery `protobuf:"bytes,12,opt,name=agent_call_log,json=agentCallLog,proto3" json:"agent_call_log,omitempty"`
}

func (x *TranscriptQuery_Call) Reset() {
	*x = TranscriptQuery_Call{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Call) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Call) ProtoMessage() {}

func (x *TranscriptQuery_Call) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Call.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Call) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 4}
}

func (x *TranscriptQuery_Call) GetCallSid() *TranscriptQuery_Call_CallSid {
	if x != nil {
		return x.CallSid
	}
	return nil
}

func (x *TranscriptQuery_Call) GetAudioTime() *TranscriptQuery_Call_AudioTime {
	if x != nil {
		return x.AudioTime
	}
	return nil
}

func (x *TranscriptQuery_Call) GetCallType() *TranscriptQuery_Call_CallType {
	if x != nil {
		return x.CallType
	}
	return nil
}

func (x *TranscriptQuery_Call) GetSilence() *TranscriptQuery_Call_Silence {
	if x != nil {
		return x.Silence
	}
	return nil
}

func (x *TranscriptQuery_Call) GetTalkOver() *TranscriptQuery_Call_TalkOver {
	if x != nil {
		return x.TalkOver
	}
	return nil
}

func (x *TranscriptQuery_Call) GetTalkTime() *TranscriptQuery_Call_TalkTime {
	if x != nil {
		return x.TalkTime
	}
	return nil
}

func (x *TranscriptQuery_Call) GetCallerId() *TranscriptQuery_Call_CallerId {
	if x != nil {
		return x.CallerId
	}
	return nil
}

func (x *TranscriptQuery_Call) GetGroupName() *TranscriptQuery_Call_GroupName {
	if x != nil {
		return x.GroupName
	}
	return nil
}

func (x *TranscriptQuery_Call) GetAgentResponse() *TranscriptQuery_Call_AgentResponse {
	if x != nil {
		return x.AgentResponse
	}
	return nil
}

func (x *TranscriptQuery_Call) GetHuntGroupSids() *TranscriptQuery_Call_HuntGroupSids {
	if x != nil {
		return x.HuntGroupSids
	}
	return nil
}

func (x *TranscriptQuery_Call) GetAgentCallLog() *AgentCallLogQuery {
	if x != nil {
		return x.AgentCallLog
	}
	return nil
}

// Query constraints on sms metadata.
type TranscriptQuery_Sms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query constraints on conversation sid.
	ConversationSid *TranscriptQuery_Sms_ConversationSid `protobuf:"bytes,1,opt,name=conversation_sid,json=conversationSid,proto3" json:"conversation_sid,omitempty"`
}

func (x *TranscriptQuery_Sms) Reset() {
	*x = TranscriptQuery_Sms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Sms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Sms) ProtoMessage() {}

func (x *TranscriptQuery_Sms) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Sms.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Sms) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 5}
}

func (x *TranscriptQuery_Sms) GetConversationSid() *TranscriptQuery_Sms_ConversationSid {
	if x != nil {
		return x.ConversationSid
	}
	return nil
}

// Query constraints on threads.
type TranscriptQuery_Threads struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query constraints on all threads in list.
	And []*TranscriptQuery_Threads `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty"`
	// Query constraints on any threads in list.
	Or []*TranscriptQuery_Threads `protobuf:"bytes,2,rep,name=or,proto3" json:"or,omitempty"`
	// Query constraints on thread id.
	Id *TranscriptQuery_Threads_Id `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// Query constraints on thread text.
	Text *TranscriptQuery_Threads_Text `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Query constraints on user id.
	UserId *TranscriptQuery_Threads_UserId `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TranscriptQuery_Threads) Reset() {
	*x = TranscriptQuery_Threads{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Threads) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Threads) ProtoMessage() {}

func (x *TranscriptQuery_Threads) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Threads.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Threads) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 6}
}

func (x *TranscriptQuery_Threads) GetAnd() []*TranscriptQuery_Threads {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *TranscriptQuery_Threads) GetOr() []*TranscriptQuery_Threads {
	if x != nil {
		return x.Or
	}
	return nil
}

func (x *TranscriptQuery_Threads) GetId() *TranscriptQuery_Threads_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TranscriptQuery_Threads) GetText() *TranscriptQuery_Threads_Text {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *TranscriptQuery_Threads) GetUserId() *TranscriptQuery_Threads_UserId {
	if x != nil {
		return x.UserId
	}
	return nil
}

// FlagSummary defines a query on flag summary fields.
type TranscriptQuery_FlagSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Queries need review.
	NeedReview *TranscriptQuery_FlagSummary_NeedReview `protobuf:"bytes,1,opt,name=need_review,json=needReview,proto3" json:"need_review,omitempty"`
	// Optional. Queries review status.
	ReviewStatus *TranscriptQuery_FlagSummary_ReviewStatus `protobuf:"bytes,2,opt,name=review_status,json=reviewStatus,proto3" json:"review_status,omitempty"`
	// Optional. Queries flags.
	Flags *TranscriptQuery_FlagSummary_Flags `protobuf:"bytes,3,opt,name=flags,proto3" json:"flags,omitempty"`
	// Optional. Queries count.
	Count *TranscriptQuery_FlagSummary_Count `protobuf:"bytes,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TranscriptQuery_FlagSummary) Reset() {
	*x = TranscriptQuery_FlagSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_FlagSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_FlagSummary) ProtoMessage() {}

func (x *TranscriptQuery_FlagSummary) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_FlagSummary.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_FlagSummary) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 7}
}

func (x *TranscriptQuery_FlagSummary) GetNeedReview() *TranscriptQuery_FlagSummary_NeedReview {
	if x != nil {
		return x.NeedReview
	}
	return nil
}

func (x *TranscriptQuery_FlagSummary) GetReviewStatus() *TranscriptQuery_FlagSummary_ReviewStatus {
	if x != nil {
		return x.ReviewStatus
	}
	return nil
}

func (x *TranscriptQuery_FlagSummary) GetFlags() *TranscriptQuery_FlagSummary_Flags {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *TranscriptQuery_FlagSummary) GetCount() *TranscriptQuery_FlagSummary_Count {
	if x != nil {
		return x.Count
	}
	return nil
}

// Query constraints on start time.
type TranscriptQuery_StartTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Queries where greater than or equal.
	Gte *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=gte,proto3" json:"gte,omitempty"`
	// Queries where less than or equal.
	Lte *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=lte,proto3" json:"lte,omitempty"`
	// Queries where greater than.
	Gt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=gt,proto3" json:"gt,omitempty"`
	// Queries where less than.
	Lt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=lt,proto3" json:"lt,omitempty"`
	// Optional. Dynamic time period to match.
	Moment *Moment `protobuf:"bytes,5,opt,name=moment,proto3" json:"moment,omitempty"`
}

func (x *TranscriptQuery_StartTime) Reset() {
	*x = TranscriptQuery_StartTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_StartTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_StartTime) ProtoMessage() {}

func (x *TranscriptQuery_StartTime) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_StartTime.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_StartTime) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 8}
}

func (x *TranscriptQuery_StartTime) GetGte() *timestamppb.Timestamp {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *TranscriptQuery_StartTime) GetLte() *timestamppb.Timestamp {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *TranscriptQuery_StartTime) GetGt() *timestamppb.Timestamp {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *TranscriptQuery_StartTime) GetLt() *timestamppb.Timestamp {
	if x != nil {
		return x.Lt
	}
	return nil
}

func (x *TranscriptQuery_StartTime) GetMoment() *Moment {
	if x != nil {
		return x.Moment
	}
	return nil
}

// Query constraints on delete time.
type TranscriptQuery_DeleteTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Queries where greater than or equal.
	Gte *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=gte,proto3" json:"gte,omitempty"`
	// Queries where less than or equal.
	Lte *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=lte,proto3" json:"lte,omitempty"`
	// Queries where greater than.
	Gt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=gt,proto3" json:"gt,omitempty"`
	// Queries where less than.
	Lt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=lt,proto3" json:"lt,omitempty"`
}

func (x *TranscriptQuery_DeleteTime) Reset() {
	*x = TranscriptQuery_DeleteTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_DeleteTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_DeleteTime) ProtoMessage() {}

func (x *TranscriptQuery_DeleteTime) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_DeleteTime.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_DeleteTime) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 9}
}

func (x *TranscriptQuery_DeleteTime) GetGte() *timestamppb.Timestamp {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *TranscriptQuery_DeleteTime) GetLte() *timestamppb.Timestamp {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *TranscriptQuery_DeleteTime) GetGt() *timestamppb.Timestamp {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *TranscriptQuery_DeleteTime) GetLt() *timestamppb.Timestamp {
	if x != nil {
		return x.Lt
	}
	return nil
}

// Cc defines a query on the phone country code.
type TranscriptQuery_Phone_Cc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Queries where cc in list provided.
	Any []string `protobuf:"bytes,1,rep,name=any,proto3" json:"any,omitempty"`
}

func (x *TranscriptQuery_Phone_Cc) Reset() {
	*x = TranscriptQuery_Phone_Cc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Phone_Cc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Phone_Cc) ProtoMessage() {}

func (x *TranscriptQuery_Phone_Cc) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Phone_Cc.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Phone_Cc) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 0, 0}
}

func (x *TranscriptQuery_Phone_Cc) GetAny() []string {
	if x != nil {
		return x.Any
	}
	return nil
}

// Ndc defines a query on the phone ndc.
type TranscriptQuery_Phone_Ndc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Queries where ndc in list provided.
	Any []string `protobuf:"bytes,1,rep,name=any,proto3" json:"any,omitempty"`
}

func (x *TranscriptQuery_Phone_Ndc) Reset() {
	*x = TranscriptQuery_Phone_Ndc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Phone_Ndc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Phone_Ndc) ProtoMessage() {}

func (x *TranscriptQuery_Phone_Ndc) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Phone_Ndc.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Phone_Ndc) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 0, 1}
}

func (x *TranscriptQuery_Phone_Ndc) GetAny() []string {
	if x != nil {
		return x.Any
	}
	return nil
}

// Prefix defines a query on the phone prefix.
type TranscriptQuery_Phone_Prefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Queries where prefix in list provided.
	Any []string `protobuf:"bytes,1,rep,name=any,proto3" json:"any,omitempty"`
}

func (x *TranscriptQuery_Phone_Prefix) Reset() {
	*x = TranscriptQuery_Phone_Prefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Phone_Prefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Phone_Prefix) ProtoMessage() {}

func (x *TranscriptQuery_Phone_Prefix) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Phone_Prefix.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Phone_Prefix) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 0, 2}
}

func (x *TranscriptQuery_Phone_Prefix) GetAny() []string {
	if x != nil {
		return x.Any
	}
	return nil
}

// City defines a query on the phone city.
type TranscriptQuery_Phone_City struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Queries where city in list provided.
	Any []string `protobuf:"bytes,1,rep,name=any,proto3" json:"any,omitempty"`
}

func (x *TranscriptQuery_Phone_City) Reset() {
	*x = TranscriptQuery_Phone_City{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Phone_City) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Phone_City) ProtoMessage() {}

func (x *TranscriptQuery_Phone_City) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Phone_City.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Phone_City) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 0, 3}
}

func (x *TranscriptQuery_Phone_City) GetAny() []string {
	if x != nil {
		return x.Any
	}
	return nil
}

// Iso2 defines a query on the phone Iso2.
type TranscriptQuery_Phone_Iso2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Queries where iso2 in list provided.
	Any []string `protobuf:"bytes,1,rep,name=any,proto3" json:"any,omitempty"`
}

func (x *TranscriptQuery_Phone_Iso2) Reset() {
	*x = TranscriptQuery_Phone_Iso2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Phone_Iso2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Phone_Iso2) ProtoMessage() {}

func (x *TranscriptQuery_Phone_Iso2) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Phone_Iso2.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Phone_Iso2) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 0, 4}
}

func (x *TranscriptQuery_Phone_Iso2) GetAny() []string {
	if x != nil {
		return x.Any
	}
	return nil
}

// RegionCode defines a query on the phone region code.
type TranscriptQuery_Phone_RegionCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Queries where region code in list provided.
	Any []string `protobuf:"bytes,1,rep,name=any,proto3" json:"any,omitempty"`
}

func (x *TranscriptQuery_Phone_RegionCode) Reset() {
	*x = TranscriptQuery_Phone_RegionCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Phone_RegionCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Phone_RegionCode) ProtoMessage() {}

func (x *TranscriptQuery_Phone_RegionCode) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Phone_RegionCode.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Phone_RegionCode) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 0, 5}
}

func (x *TranscriptQuery_Phone_RegionCode) GetAny() []string {
	if x != nil {
		return x.Any
	}
	return nil
}

// RegionName defines a query on the phone region name.
type TranscriptQuery_Phone_RegionName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Queries where region name in list provided.
	Any []string `protobuf:"bytes,1,rep,name=any,proto3" json:"any,omitempty"`
}

func (x *TranscriptQuery_Phone_RegionName) Reset() {
	*x = TranscriptQuery_Phone_RegionName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Phone_RegionName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Phone_RegionName) ProtoMessage() {}

func (x *TranscriptQuery_Phone_RegionName) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Phone_RegionName.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Phone_RegionName) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 0, 6}
}

func (x *TranscriptQuery_Phone_RegionName) GetAny() []string {
	if x != nil {
		return x.Any
	}
	return nil
}

// TimeZone defines a query on the phone time zone.
type TranscriptQuery_Phone_TimeZone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Queries where time zone in list provided.
	Any []string `protobuf:"bytes,1,rep,name=any,proto3" json:"any,omitempty"`
}

func (x *TranscriptQuery_Phone_TimeZone) Reset() {
	*x = TranscriptQuery_Phone_TimeZone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Phone_TimeZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Phone_TimeZone) ProtoMessage() {}

func (x *TranscriptQuery_Phone_TimeZone) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Phone_TimeZone.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Phone_TimeZone) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 0, 7}
}

func (x *TranscriptQuery_Phone_TimeZone) GetAny() []string {
	if x != nil {
		return x.Any
	}
	return nil
}

// Type defines a query on the phone type.
type TranscriptQuery_Phone_Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Queries where type in list provided.
	Any []string `protobuf:"bytes,1,rep,name=any,proto3" json:"any,omitempty"`
}

func (x *TranscriptQuery_Phone_Type) Reset() {
	*x = TranscriptQuery_Phone_Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Phone_Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Phone_Type) ProtoMessage() {}

func (x *TranscriptQuery_Phone_Type) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Phone_Type.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Phone_Type) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 0, 8}
}

func (x *TranscriptQuery_Phone_Type) GetAny() []string {
	if x != nil {
		return x.Any
	}
	return nil
}

// Utc defines a query on the phone utc.
type TranscriptQuery_Phone_Utc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Queries where utc in list provided.
	Any []float32 `protobuf:"fixed32,1,rep,packed,name=any,proto3" json:"any,omitempty"`
}

func (x *TranscriptQuery_Phone_Utc) Reset() {
	*x = TranscriptQuery_Phone_Utc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Phone_Utc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Phone_Utc) ProtoMessage() {}

func (x *TranscriptQuery_Phone_Utc) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Phone_Utc.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Phone_Utc) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 0, 9}
}

func (x *TranscriptQuery_Phone_Utc) GetAny() []float32 {
	if x != nil {
		return x.Any
	}
	return nil
}

// Location defines a query on the phone location.
type TranscriptQuery_Phone_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZipCodeProximity *TranscriptQuery_Phone_Location_ZipCodeProximity `protobuf:"bytes,1,opt,name=zip_code_proximity,json=zipCodeProximity,proto3" json:"zip_code_proximity,omitempty"`
}

func (x *TranscriptQuery_Phone_Location) Reset() {
	*x = TranscriptQuery_Phone_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Phone_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Phone_Location) ProtoMessage() {}

func (x *TranscriptQuery_Phone_Location) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Phone_Location.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Phone_Location) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 0, 10}
}

func (x *TranscriptQuery_Phone_Location) GetZipCodeProximity() *TranscriptQuery_Phone_Location_ZipCodeProximity {
	if x != nil {
		return x.ZipCodeProximity
	}
	return nil
}

// Query constraints on raw phone number.
type TranscriptQuery_Phone_Raw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Queries where phone number in list provided.
	Any []string `protobuf:"bytes,1,rep,name=any,proto3" json:"any,omitempty"`
}

func (x *TranscriptQuery_Phone_Raw) Reset() {
	*x = TranscriptQuery_Phone_Raw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Phone_Raw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Phone_Raw) ProtoMessage() {}

func (x *TranscriptQuery_Phone_Raw) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Phone_Raw.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Phone_Raw) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 0, 11}
}

func (x *TranscriptQuery_Phone_Raw) GetAny() []string {
	if x != nil {
		return x.Any
	}
	return nil
}

type TranscriptQuery_Phone_Location_ZipCodeProximity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Queries on phone number country code.
	CountryCode string `protobuf:"bytes,1,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// Required. Queries where phone location is within distance of zipcode.
	ZipCode string `protobuf:"bytes,2,opt,name=zip_code,json=zipCode,proto3" json:"zip_code,omitempty"`
	// Required. Queries where phone location is within distance (km or mi) of zipcode. For example: 100km.
	Distance string `protobuf:"bytes,3,opt,name=distance,proto3" json:"distance,omitempty"`
}

func (x *TranscriptQuery_Phone_Location_ZipCodeProximity) Reset() {
	*x = TranscriptQuery_Phone_Location_ZipCodeProximity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Phone_Location_ZipCodeProximity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Phone_Location_ZipCodeProximity) ProtoMessage() {}

func (x *TranscriptQuery_Phone_Location_ZipCodeProximity) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Phone_Location_ZipCodeProximity.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Phone_Location_ZipCodeProximity) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 0, 10, 0}
}

func (x *TranscriptQuery_Phone_Location_ZipCodeProximity) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *TranscriptQuery_Phone_Location_ZipCodeProximity) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *TranscriptQuery_Phone_Location_ZipCodeProximity) GetDistance() string {
	if x != nil {
		return x.Distance
	}
	return ""
}

// Query constraints on hunt group sids.
type TranscriptQuery_Call_HuntGroupSids struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requires all call specific transcript hits to have a hunt group sid
	// in the list.
	Any []int64 `protobuf:"varint,1,rep,packed,name=any,proto3" json:"any,omitempty"`
}

func (x *TranscriptQuery_Call_HuntGroupSids) Reset() {
	*x = TranscriptQuery_Call_HuntGroupSids{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Call_HuntGroupSids) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Call_HuntGroupSids) ProtoMessage() {}

func (x *TranscriptQuery_Call_HuntGroupSids) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Call_HuntGroupSids.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Call_HuntGroupSids) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 4, 0}
}

func (x *TranscriptQuery_Call_HuntGroupSids) GetAny() []int64 {
	if x != nil {
		return x.Any
	}
	return nil
}

// Query constraints on agent response.
type TranscriptQuery_Call_AgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Groups AgentResponse conditions with logical and.
	And []*TranscriptQuery_Call_AgentResponse `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty"`
	// Optional. Groups AgentResponse conditions with logical or.
	Or []*TranscriptQuery_Call_AgentResponse `protobuf:"bytes,2,rep,name=or,proto3" json:"or,omitempty"`
	// Optional. Queries for what does not match the agent response query.
	Not bool `protobuf:"varint,3,opt,name=not,proto3" json:"not,omitempty"`
	// Optional. Key to query on.
	Key *TranscriptQuery_Call_AgentResponse_Key `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	// Optional. Queries values for the given keys. If no keys are provided then
	// it will run the query on all values.
	Values *TranscriptQuery_Call_AgentResponse_Values `protobuf:"bytes,5,opt,name=values,proto3" json:"values,omitempty"`
	// Optional. Queries values as numbers for the given keys.
	Numbers *TranscriptQuery_Call_AgentResponse_Numbers `protobuf:"bytes,6,opt,name=numbers,proto3" json:"numbers,omitempty"`
}

func (x *TranscriptQuery_Call_AgentResponse) Reset() {
	*x = TranscriptQuery_Call_AgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Call_AgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Call_AgentResponse) ProtoMessage() {}

func (x *TranscriptQuery_Call_AgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Call_AgentResponse.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Call_AgentResponse) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 4, 1}
}

func (x *TranscriptQuery_Call_AgentResponse) GetAnd() []*TranscriptQuery_Call_AgentResponse {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *TranscriptQuery_Call_AgentResponse) GetOr() []*TranscriptQuery_Call_AgentResponse {
	if x != nil {
		return x.Or
	}
	return nil
}

func (x *TranscriptQuery_Call_AgentResponse) GetNot() bool {
	if x != nil {
		return x.Not
	}
	return false
}

func (x *TranscriptQuery_Call_AgentResponse) GetKey() *TranscriptQuery_Call_AgentResponse_Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TranscriptQuery_Call_AgentResponse) GetValues() *TranscriptQuery_Call_AgentResponse_Values {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *TranscriptQuery_Call_AgentResponse) GetNumbers() *TranscriptQuery_Call_AgentResponse_Numbers {
	if x != nil {
		return x.Numbers
	}
	return nil
}

// Query constraints on call type.
type TranscriptQuery_Call_CallType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requires all call specific transcript hits to have a call type in the
	// list.
	Any []commons.CallType_Enum `protobuf:"varint,1,rep,packed,name=any,proto3,enum=api.commons.CallType_Enum" json:"any,omitempty"`
}

func (x *TranscriptQuery_Call_CallType) Reset() {
	*x = TranscriptQuery_Call_CallType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Call_CallType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Call_CallType) ProtoMessage() {}

func (x *TranscriptQuery_Call_CallType) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Call_CallType.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Call_CallType) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 4, 2}
}

func (x *TranscriptQuery_Call_CallType) GetAny() []commons.CallType_Enum {
	if x != nil {
		return x.Any
	}
	return nil
}

// Query constraints on group name.
type TranscriptQuery_Call_GroupName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requires all call specific transcript hits to have a group name in the
	// list.
	Any []string `protobuf:"bytes,1,rep,name=any,proto3" json:"any,omitempty"`
}

func (x *TranscriptQuery_Call_GroupName) Reset() {
	*x = TranscriptQuery_Call_GroupName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Call_GroupName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Call_GroupName) ProtoMessage() {}

func (x *TranscriptQuery_Call_GroupName) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Call_GroupName.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Call_GroupName) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 4, 3}
}

func (x *TranscriptQuery_Call_GroupName) GetAny() []string {
	if x != nil {
		return x.Any
	}
	return nil
}

// Query constraints on call sid.
type TranscriptQuery_Call_CallSid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requires all call specific transcript hits to have a call sid in the
	// list.
	Any []int64 `protobuf:"varint,1,rep,packed,name=any,proto3" json:"any,omitempty"`
}

func (x *TranscriptQuery_Call_CallSid) Reset() {
	*x = TranscriptQuery_Call_CallSid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Call_CallSid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Call_CallSid) ProtoMessage() {}

func (x *TranscriptQuery_Call_CallSid) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Call_CallSid.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Call_CallSid) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 4, 4}
}

func (x *TranscriptQuery_Call_CallSid) GetAny() []int64 {
	if x != nil {
		return x.Any
	}
	return nil
}

// Query constraints on caller id.
type TranscriptQuery_Call_CallerId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requires all call specific transcript hits to have a caller id in the
	// list.
	Any []string `protobuf:"bytes,1,rep,name=any,proto3" json:"any,omitempty"`
}

func (x *TranscriptQuery_Call_CallerId) Reset() {
	*x = TranscriptQuery_Call_CallerId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Call_CallerId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Call_CallerId) ProtoMessage() {}

func (x *TranscriptQuery_Call_CallerId) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Call_CallerId.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Call_CallerId) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 4, 5}
}

func (x *TranscriptQuery_Call_CallerId) GetAny() []string {
	if x != nil {
		return x.Any
	}
	return nil
}

// Query constraints on audio time.
type TranscriptQuery_Call_AudioTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Queries where greater than or equal.
	Gte *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=gte,proto3" json:"gte,omitempty"`
	// Queries where less than or equal.
	Lte *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=lte,proto3" json:"lte,omitempty"`
	// Queries where greater than.
	Gt *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=gt,proto3" json:"gt,omitempty"`
	// Queries where less than.
	Lt *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=lt,proto3" json:"lt,omitempty"`
}

func (x *TranscriptQuery_Call_AudioTime) Reset() {
	*x = TranscriptQuery_Call_AudioTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Call_AudioTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Call_AudioTime) ProtoMessage() {}

func (x *TranscriptQuery_Call_AudioTime) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Call_AudioTime.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Call_AudioTime) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 4, 6}
}

func (x *TranscriptQuery_Call_AudioTime) GetGte() *wrapperspb.Int32Value {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *TranscriptQuery_Call_AudioTime) GetLte() *wrapperspb.Int32Value {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *TranscriptQuery_Call_AudioTime) GetGt() *wrapperspb.Int32Value {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *TranscriptQuery_Call_AudioTime) GetLt() *wrapperspb.Int32Value {
	if x != nil {
		return x.Lt
	}
	return nil
}

// Query constraints on talk time.
type TranscriptQuery_Call_TalkTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Queries where greater than or equal.
	Gte *durationpb.Duration `protobuf:"bytes,1,opt,name=gte,proto3" json:"gte,omitempty"`
	// Queries where less than or equal.
	Lte *durationpb.Duration `protobuf:"bytes,2,opt,name=lte,proto3" json:"lte,omitempty"`
	// Queries where greater than.
	Gt *durationpb.Duration `protobuf:"bytes,3,opt,name=gt,proto3" json:"gt,omitempty"`
	// Queries where less than.
	Lt *durationpb.Duration `protobuf:"bytes,4,opt,name=lt,proto3" json:"lt,omitempty"`
}

func (x *TranscriptQuery_Call_TalkTime) Reset() {
	*x = TranscriptQuery_Call_TalkTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Call_TalkTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Call_TalkTime) ProtoMessage() {}

func (x *TranscriptQuery_Call_TalkTime) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Call_TalkTime.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Call_TalkTime) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 4, 7}
}

func (x *TranscriptQuery_Call_TalkTime) GetGte() *durationpb.Duration {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *TranscriptQuery_Call_TalkTime) GetLte() *durationpb.Duration {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *TranscriptQuery_Call_TalkTime) GetGt() *durationpb.Duration {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *TranscriptQuery_Call_TalkTime) GetLt() *durationpb.Duration {
	if x != nil {
		return x.Lt
	}
	return nil
}

// Query constraints on talk over.
type TranscriptQuery_Call_TalkOver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query constraints on talk over duration total.
	DurationTotal *TranscriptQuery_Call_TalkOver_DurationTotal `protobuf:"bytes,1,opt,name=duration_total,json=durationTotal,proto3" json:"duration_total,omitempty"`
	// Query constraints on talk over duration max.
	DurationMax *TranscriptQuery_Call_TalkOver_DurationMax `protobuf:"bytes,2,opt,name=duration_max,json=durationMax,proto3" json:"duration_max,omitempty"`
	// Query constraints on talk over occurrence total.
	OccurrenceTotal *TranscriptQuery_Call_TalkOver_OccurrenceTotal `protobuf:"bytes,3,opt,name=occurrence_total,json=occurrenceTotal,proto3" json:"occurrence_total,omitempty"`
	// Query constraints on talk over duration percentage.
	DurationPercentage *TranscriptQuery_Call_TalkOver_DurationPercentage `protobuf:"bytes,4,opt,name=duration_percentage,json=durationPercentage,proto3" json:"duration_percentage,omitempty"`
}

func (x *TranscriptQuery_Call_TalkOver) Reset() {
	*x = TranscriptQuery_Call_TalkOver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Call_TalkOver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Call_TalkOver) ProtoMessage() {}

func (x *TranscriptQuery_Call_TalkOver) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Call_TalkOver.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Call_TalkOver) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 4, 8}
}

func (x *TranscriptQuery_Call_TalkOver) GetDurationTotal() *TranscriptQuery_Call_TalkOver_DurationTotal {
	if x != nil {
		return x.DurationTotal
	}
	return nil
}

func (x *TranscriptQuery_Call_TalkOver) GetDurationMax() *TranscriptQuery_Call_TalkOver_DurationMax {
	if x != nil {
		return x.DurationMax
	}
	return nil
}

func (x *TranscriptQuery_Call_TalkOver) GetOccurrenceTotal() *TranscriptQuery_Call_TalkOver_OccurrenceTotal {
	if x != nil {
		return x.OccurrenceTotal
	}
	return nil
}

func (x *TranscriptQuery_Call_TalkOver) GetDurationPercentage() *TranscriptQuery_Call_TalkOver_DurationPercentage {
	if x != nil {
		return x.DurationPercentage
	}
	return nil
}

// Query constraints on silence.
type TranscriptQuery_Call_Silence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query constraints on silence duration total.
	DurationTotal *TranscriptQuery_Call_Silence_DurationTotal `protobuf:"bytes,1,opt,name=duration_total,json=durationTotal,proto3" json:"duration_total,omitempty"`
	// Query constraints on silence duration max.
	DurationMax *TranscriptQuery_Call_Silence_DurationMax `protobuf:"bytes,2,opt,name=duration_max,json=durationMax,proto3" json:"duration_max,omitempty"`
	// Query constraints on silence occurrence total.
	OccurrenceTotal *TranscriptQuery_Call_Silence_OccurrenceTotal `protobuf:"bytes,3,opt,name=occurrence_total,json=occurrenceTotal,proto3" json:"occurrence_total,omitempty"`
	// Query constraints on silence duration percentage.
	DurationPercentage *TranscriptQuery_Call_Silence_DurationPercentage `protobuf:"bytes,4,opt,name=duration_percentage,json=durationPercentage,proto3" json:"duration_percentage,omitempty"`
}

func (x *TranscriptQuery_Call_Silence) Reset() {
	*x = TranscriptQuery_Call_Silence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Call_Silence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Call_Silence) ProtoMessage() {}

func (x *TranscriptQuery_Call_Silence) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Call_Silence.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Call_Silence) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 4, 9}
}

func (x *TranscriptQuery_Call_Silence) GetDurationTotal() *TranscriptQuery_Call_Silence_DurationTotal {
	if x != nil {
		return x.DurationTotal
	}
	return nil
}

func (x *TranscriptQuery_Call_Silence) GetDurationMax() *TranscriptQuery_Call_Silence_DurationMax {
	if x != nil {
		return x.DurationMax
	}
	return nil
}

func (x *TranscriptQuery_Call_Silence) GetOccurrenceTotal() *TranscriptQuery_Call_Silence_OccurrenceTotal {
	if x != nil {
		return x.OccurrenceTotal
	}
	return nil
}

func (x *TranscriptQuery_Call_Silence) GetDurationPercentage() *TranscriptQuery_Call_Silence_DurationPercentage {
	if x != nil {
		return x.DurationPercentage
	}
	return nil
}

// Values defines a query on values.
type TranscriptQuery_Call_AgentResponse_Values struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Queries where value in list provided.
	In []string `protobuf:"bytes,1,rep,name=in,proto3" json:"in,omitempty"`
	// Optional. Queries where value for key starts with given string.
	StartsWith string `protobuf:"bytes,2,opt,name=starts_with,json=startsWith,proto3" json:"starts_with,omitempty"`
	// Optional. Queries where value for key contains given string.
	Contains string `protobuf:"bytes,3,opt,name=contains,proto3" json:"contains,omitempty"`
}

func (x *TranscriptQuery_Call_AgentResponse_Values) Reset() {
	*x = TranscriptQuery_Call_AgentResponse_Values{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Call_AgentResponse_Values) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Call_AgentResponse_Values) ProtoMessage() {}

func (x *TranscriptQuery_Call_AgentResponse_Values) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Call_AgentResponse_Values.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Call_AgentResponse_Values) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 4, 1, 0}
}

func (x *TranscriptQuery_Call_AgentResponse_Values) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *TranscriptQuery_Call_AgentResponse_Values) GetStartsWith() string {
	if x != nil {
		return x.StartsWith
	}
	return ""
}

func (x *TranscriptQuery_Call_AgentResponse_Values) GetContains() string {
	if x != nil {
		return x.Contains
	}
	return ""
}

// Numbers defines a query on values as numbers.
type TranscriptQuery_Call_AgentResponse_Numbers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Queries where value in list provided.
	In []float64 `protobuf:"fixed64,1,rep,packed,name=in,proto3" json:"in,omitempty"`
	// Optional. Queries where greater than or equal.
	Gte *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=gte,proto3" json:"gte,omitempty"`
	// Optional. Queries where less than or equal.
	Lte *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Optional. Queries where greater than.
	Gt *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Optional. Queries where less than.
	Lt *wrapperspb.DoubleValue `protobuf:"bytes,5,opt,name=lt,proto3" json:"lt,omitempty"`
	// Optional. Queries where equal to.
	Eq *wrapperspb.DoubleValue `protobuf:"bytes,6,opt,name=eq,proto3" json:"eq,omitempty"`
}

func (x *TranscriptQuery_Call_AgentResponse_Numbers) Reset() {
	*x = TranscriptQuery_Call_AgentResponse_Numbers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Call_AgentResponse_Numbers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Call_AgentResponse_Numbers) ProtoMessage() {}

func (x *TranscriptQuery_Call_AgentResponse_Numbers) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Call_AgentResponse_Numbers.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Call_AgentResponse_Numbers) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 4, 1, 1}
}

func (x *TranscriptQuery_Call_AgentResponse_Numbers) GetIn() []float64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *TranscriptQuery_Call_AgentResponse_Numbers) GetGte() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *TranscriptQuery_Call_AgentResponse_Numbers) GetLte() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *TranscriptQuery_Call_AgentResponse_Numbers) GetGt() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *TranscriptQuery_Call_AgentResponse_Numbers) GetLt() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Lt
	}
	return nil
}

func (x *TranscriptQuery_Call_AgentResponse_Numbers) GetEq() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Eq
	}
	return nil
}

// Key defines a query on the key.
type TranscriptQuery_Call_AgentResponse_Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Queries where key in list provided.
	In []string `protobuf:"bytes,1,rep,name=in,proto3" json:"in,omitempty"`
	// Optional. Queries where key starts with given string.
	StartsWith string `protobuf:"bytes,2,opt,name=starts_with,json=startsWith,proto3" json:"starts_with,omitempty"`
	// Optional. Queries where key contains given string.
	Contains string `protobuf:"bytes,3,opt,name=contains,proto3" json:"contains,omitempty"`
}

func (x *TranscriptQuery_Call_AgentResponse_Key) Reset() {
	*x = TranscriptQuery_Call_AgentResponse_Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Call_AgentResponse_Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Call_AgentResponse_Key) ProtoMessage() {}

func (x *TranscriptQuery_Call_AgentResponse_Key) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Call_AgentResponse_Key.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Call_AgentResponse_Key) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 4, 1, 2}
}

func (x *TranscriptQuery_Call_AgentResponse_Key) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *TranscriptQuery_Call_AgentResponse_Key) GetStartsWith() string {
	if x != nil {
		return x.StartsWith
	}
	return ""
}

func (x *TranscriptQuery_Call_AgentResponse_Key) GetContains() string {
	if x != nil {
		return x.Contains
	}
	return ""
}

// Query constraints on total duration.
type TranscriptQuery_Call_TalkOver_DurationTotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Queries where greater than or equal.
	Gte *durationpb.Duration `protobuf:"bytes,1,opt,name=gte,proto3" json:"gte,omitempty"`
	// Queries where less than or equal.
	Lte *durationpb.Duration `protobuf:"bytes,2,opt,name=lte,proto3" json:"lte,omitempty"`
	// Queries where greater than.
	Gt *durationpb.Duration `protobuf:"bytes,3,opt,name=gt,proto3" json:"gt,omitempty"`
	// Queries where less than.
	Lt *durationpb.Duration `protobuf:"bytes,4,opt,name=lt,proto3" json:"lt,omitempty"`
}

func (x *TranscriptQuery_Call_TalkOver_DurationTotal) Reset() {
	*x = TranscriptQuery_Call_TalkOver_DurationTotal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Call_TalkOver_DurationTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Call_TalkOver_DurationTotal) ProtoMessage() {}

func (x *TranscriptQuery_Call_TalkOver_DurationTotal) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Call_TalkOver_DurationTotal.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Call_TalkOver_DurationTotal) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 4, 8, 0}
}

func (x *TranscriptQuery_Call_TalkOver_DurationTotal) GetGte() *durationpb.Duration {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *TranscriptQuery_Call_TalkOver_DurationTotal) GetLte() *durationpb.Duration {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *TranscriptQuery_Call_TalkOver_DurationTotal) GetGt() *durationpb.Duration {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *TranscriptQuery_Call_TalkOver_DurationTotal) GetLt() *durationpb.Duration {
	if x != nil {
		return x.Lt
	}
	return nil
}

// Query constraints on max duration.
type TranscriptQuery_Call_TalkOver_DurationMax struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Queries where greater than or equal.
	Gte *durationpb.Duration `protobuf:"bytes,1,opt,name=gte,proto3" json:"gte,omitempty"`
	// Queries where less than or equal.
	Lte *durationpb.Duration `protobuf:"bytes,2,opt,name=lte,proto3" json:"lte,omitempty"`
	// Queries where greater than.
	Gt *durationpb.Duration `protobuf:"bytes,3,opt,name=gt,proto3" json:"gt,omitempty"`
	// Queries where less than.
	Lt *durationpb.Duration `protobuf:"bytes,4,opt,name=lt,proto3" json:"lt,omitempty"`
}

func (x *TranscriptQuery_Call_TalkOver_DurationMax) Reset() {
	*x = TranscriptQuery_Call_TalkOver_DurationMax{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Call_TalkOver_DurationMax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Call_TalkOver_DurationMax) ProtoMessage() {}

func (x *TranscriptQuery_Call_TalkOver_DurationMax) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Call_TalkOver_DurationMax.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Call_TalkOver_DurationMax) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 4, 8, 1}
}

func (x *TranscriptQuery_Call_TalkOver_DurationMax) GetGte() *durationpb.Duration {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *TranscriptQuery_Call_TalkOver_DurationMax) GetLte() *durationpb.Duration {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *TranscriptQuery_Call_TalkOver_DurationMax) GetGt() *durationpb.Duration {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *TranscriptQuery_Call_TalkOver_DurationMax) GetLt() *durationpb.Duration {
	if x != nil {
		return x.Lt
	}
	return nil
}

// Query constraints on total occurences.
type TranscriptQuery_Call_TalkOver_OccurrenceTotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Queries where greater than or equal.
	Gte *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=gte,proto3" json:"gte,omitempty"`
	// Queries where less than or equal.
	Lte *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=lte,proto3" json:"lte,omitempty"`
	// Queries where greater than.
	Gt *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=gt,proto3" json:"gt,omitempty"`
	// Queries where less than.
	Lt *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=lt,proto3" json:"lt,omitempty"`
}

func (x *TranscriptQuery_Call_TalkOver_OccurrenceTotal) Reset() {
	*x = TranscriptQuery_Call_TalkOver_OccurrenceTotal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Call_TalkOver_OccurrenceTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Call_TalkOver_OccurrenceTotal) ProtoMessage() {}

func (x *TranscriptQuery_Call_TalkOver_OccurrenceTotal) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Call_TalkOver_OccurrenceTotal.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Call_TalkOver_OccurrenceTotal) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 4, 8, 2}
}

func (x *TranscriptQuery_Call_TalkOver_OccurrenceTotal) GetGte() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *TranscriptQuery_Call_TalkOver_OccurrenceTotal) GetLte() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *TranscriptQuery_Call_TalkOver_OccurrenceTotal) GetGt() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *TranscriptQuery_Call_TalkOver_OccurrenceTotal) GetLt() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Lt
	}
	return nil
}

// Query constraints on duration percentage.
type TranscriptQuery_Call_TalkOver_DurationPercentage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Queries where greater than or equal.
	Gte *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=gte,proto3" json:"gte,omitempty"`
	// Queries where less than or equal.
	Lte *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=lte,proto3" json:"lte,omitempty"`
	// Queries where greater than.
	Gt *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=gt,proto3" json:"gt,omitempty"`
	// Queries where less than.
	Lt *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=lt,proto3" json:"lt,omitempty"`
}

func (x *TranscriptQuery_Call_TalkOver_DurationPercentage) Reset() {
	*x = TranscriptQuery_Call_TalkOver_DurationPercentage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Call_TalkOver_DurationPercentage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Call_TalkOver_DurationPercentage) ProtoMessage() {}

func (x *TranscriptQuery_Call_TalkOver_DurationPercentage) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Call_TalkOver_DurationPercentage.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Call_TalkOver_DurationPercentage) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 4, 8, 3}
}

func (x *TranscriptQuery_Call_TalkOver_DurationPercentage) GetGte() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *TranscriptQuery_Call_TalkOver_DurationPercentage) GetLte() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *TranscriptQuery_Call_TalkOver_DurationPercentage) GetGt() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *TranscriptQuery_Call_TalkOver_DurationPercentage) GetLt() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Lt
	}
	return nil
}

// Query constraints on total duration.
type TranscriptQuery_Call_Silence_DurationTotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Queries where greater than or equal.
	Gte *durationpb.Duration `protobuf:"bytes,1,opt,name=gte,proto3" json:"gte,omitempty"`
	// Queries where less than or equal.
	Lte *durationpb.Duration `protobuf:"bytes,2,opt,name=lte,proto3" json:"lte,omitempty"`
	// Queries where greater than.
	Gt *durationpb.Duration `protobuf:"bytes,3,opt,name=gt,proto3" json:"gt,omitempty"`
	// Queries where less than.
	Lt *durationpb.Duration `protobuf:"bytes,4,opt,name=lt,proto3" json:"lt,omitempty"`
}

func (x *TranscriptQuery_Call_Silence_DurationTotal) Reset() {
	*x = TranscriptQuery_Call_Silence_DurationTotal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Call_Silence_DurationTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Call_Silence_DurationTotal) ProtoMessage() {}

func (x *TranscriptQuery_Call_Silence_DurationTotal) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Call_Silence_DurationTotal.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Call_Silence_DurationTotal) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 4, 9, 0}
}

func (x *TranscriptQuery_Call_Silence_DurationTotal) GetGte() *durationpb.Duration {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *TranscriptQuery_Call_Silence_DurationTotal) GetLte() *durationpb.Duration {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *TranscriptQuery_Call_Silence_DurationTotal) GetGt() *durationpb.Duration {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *TranscriptQuery_Call_Silence_DurationTotal) GetLt() *durationpb.Duration {
	if x != nil {
		return x.Lt
	}
	return nil
}

// Query constraints on max duration.
type TranscriptQuery_Call_Silence_DurationMax struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Queries where greater than or equal.
	Gte *durationpb.Duration `protobuf:"bytes,1,opt,name=gte,proto3" json:"gte,omitempty"`
	// Queries where less than or equal.
	Lte *durationpb.Duration `protobuf:"bytes,2,opt,name=lte,proto3" json:"lte,omitempty"`
	// Queries where greater than.
	Gt *durationpb.Duration `protobuf:"bytes,3,opt,name=gt,proto3" json:"gt,omitempty"`
	// Queries where less than.
	Lt *durationpb.Duration `protobuf:"bytes,4,opt,name=lt,proto3" json:"lt,omitempty"`
}

func (x *TranscriptQuery_Call_Silence_DurationMax) Reset() {
	*x = TranscriptQuery_Call_Silence_DurationMax{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Call_Silence_DurationMax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Call_Silence_DurationMax) ProtoMessage() {}

func (x *TranscriptQuery_Call_Silence_DurationMax) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Call_Silence_DurationMax.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Call_Silence_DurationMax) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 4, 9, 1}
}

func (x *TranscriptQuery_Call_Silence_DurationMax) GetGte() *durationpb.Duration {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *TranscriptQuery_Call_Silence_DurationMax) GetLte() *durationpb.Duration {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *TranscriptQuery_Call_Silence_DurationMax) GetGt() *durationpb.Duration {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *TranscriptQuery_Call_Silence_DurationMax) GetLt() *durationpb.Duration {
	if x != nil {
		return x.Lt
	}
	return nil
}

// Query constraints on total occurences.
type TranscriptQuery_Call_Silence_OccurrenceTotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Queries where greater than or equal.
	Gte *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=gte,proto3" json:"gte,omitempty"`
	// Queries where less than or equal.
	Lte *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=lte,proto3" json:"lte,omitempty"`
	// Queries where greater than.
	Gt *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=gt,proto3" json:"gt,omitempty"`
	// Queries where less than.
	Lt *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=lt,proto3" json:"lt,omitempty"`
}

func (x *TranscriptQuery_Call_Silence_OccurrenceTotal) Reset() {
	*x = TranscriptQuery_Call_Silence_OccurrenceTotal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Call_Silence_OccurrenceTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Call_Silence_OccurrenceTotal) ProtoMessage() {}

func (x *TranscriptQuery_Call_Silence_OccurrenceTotal) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Call_Silence_OccurrenceTotal.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Call_Silence_OccurrenceTotal) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 4, 9, 2}
}

func (x *TranscriptQuery_Call_Silence_OccurrenceTotal) GetGte() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *TranscriptQuery_Call_Silence_OccurrenceTotal) GetLte() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *TranscriptQuery_Call_Silence_OccurrenceTotal) GetGt() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *TranscriptQuery_Call_Silence_OccurrenceTotal) GetLt() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Lt
	}
	return nil
}

// Query constraints on duration percentage.
type TranscriptQuery_Call_Silence_DurationPercentage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Queries where greater than or equal.
	Gte *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=gte,proto3" json:"gte,omitempty"`
	// Queries where less than or equal.
	Lte *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=lte,proto3" json:"lte,omitempty"`
	// Queries where greater than.
	Gt *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=gt,proto3" json:"gt,omitempty"`
	// Queries where less than.
	Lt *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=lt,proto3" json:"lt,omitempty"`
}

func (x *TranscriptQuery_Call_Silence_DurationPercentage) Reset() {
	*x = TranscriptQuery_Call_Silence_DurationPercentage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Call_Silence_DurationPercentage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Call_Silence_DurationPercentage) ProtoMessage() {}

func (x *TranscriptQuery_Call_Silence_DurationPercentage) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Call_Silence_DurationPercentage.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Call_Silence_DurationPercentage) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 4, 9, 3}
}

func (x *TranscriptQuery_Call_Silence_DurationPercentage) GetGte() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *TranscriptQuery_Call_Silence_DurationPercentage) GetLte() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *TranscriptQuery_Call_Silence_DurationPercentage) GetGt() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *TranscriptQuery_Call_Silence_DurationPercentage) GetLt() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Lt
	}
	return nil
}

// Query constraints on conversation sid.
type TranscriptQuery_Sms_ConversationSid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requires all sms specific transcript hits to have a conversation sid
	// in the list.
	Any []int64 `protobuf:"varint,1,rep,packed,name=any,proto3" json:"any,omitempty"`
}

func (x *TranscriptQuery_Sms_ConversationSid) Reset() {
	*x = TranscriptQuery_Sms_ConversationSid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Sms_ConversationSid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Sms_ConversationSid) ProtoMessage() {}

func (x *TranscriptQuery_Sms_ConversationSid) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Sms_ConversationSid.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Sms_ConversationSid) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 5, 0}
}

func (x *TranscriptQuery_Sms_ConversationSid) GetAny() []int64 {
	if x != nil {
		return x.Any
	}
	return nil
}

// Query constraints on user id.
type TranscriptQuery_Threads_UserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requires all transcript hits to have a user id in the list.
	Any []string `protobuf:"bytes,1,rep,name=any,proto3" json:"any,omitempty"`
}

func (x *TranscriptQuery_Threads_UserId) Reset() {
	*x = TranscriptQuery_Threads_UserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Threads_UserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Threads_UserId) ProtoMessage() {}

func (x *TranscriptQuery_Threads_UserId) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Threads_UserId.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Threads_UserId) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 6, 0}
}

func (x *TranscriptQuery_Threads_UserId) GetAny() []string {
	if x != nil {
		return x.Any
	}
	return nil
}

// Query constraints on thread id.
type TranscriptQuery_Threads_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requires all transcript hits to have a thread id in the list.
	Any []int32 `protobuf:"varint,1,rep,packed,name=any,proto3" json:"any,omitempty"`
}

func (x *TranscriptQuery_Threads_Id) Reset() {
	*x = TranscriptQuery_Threads_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Threads_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Threads_Id) ProtoMessage() {}

func (x *TranscriptQuery_Threads_Id) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Threads_Id.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Threads_Id) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 6, 1}
}

func (x *TranscriptQuery_Threads_Id) GetAny() []int32 {
	if x != nil {
		return x.Any
	}
	return nil
}

// Query constraints on thread text.
type TranscriptQuery_Threads_Text struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query text terms with optional fuzziness.
	Match *Match `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	// Query text phrases.
	SpanNear *SpanNear `protobuf:"bytes,2,opt,name=span_near,json=spanNear,proto3" json:"span_near,omitempty"`
	// Timespan determines where text must be matched within a transcript.
	// +------+------+-------------------------------------------+
	// | head | tail |              description                  |
	// +------+------+-------------------------------------------+
	// |  +30 |  +60 | match between (head + 30) and (head + 60) |
	// |    0 |  +30 | match between (head +  0) and (head + 30) |
	// |    0 |  -30 | match between (head +  0) and (tail - 30) |
	// |  -60 |  -30 | match between (tail - 60) and (tail - 30) |
	// |  -30 |    0 | match between (tail - 30) and (tail -  0) |
	// +------+------+-------------------------------------------+
	Timespan *TranscriptQuery_Threads_Text_Timespan `protobuf:"bytes,3,opt,name=timespan,proto3" json:"timespan,omitempty"`
	// Query text that does not match.
	Not bool `protobuf:"varint,4,opt,name=not,proto3" json:"not,omitempty"`
}

func (x *TranscriptQuery_Threads_Text) Reset() {
	*x = TranscriptQuery_Threads_Text{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Threads_Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Threads_Text) ProtoMessage() {}

func (x *TranscriptQuery_Threads_Text) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Threads_Text.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Threads_Text) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 6, 2}
}

func (x *TranscriptQuery_Threads_Text) GetMatch() *Match {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *TranscriptQuery_Threads_Text) GetSpanNear() *SpanNear {
	if x != nil {
		return x.SpanNear
	}
	return nil
}

func (x *TranscriptQuery_Threads_Text) GetTimespan() *TranscriptQuery_Threads_Text_Timespan {
	if x != nil {
		return x.Timespan
	}
	return nil
}

func (x *TranscriptQuery_Threads_Text) GetNot() bool {
	if x != nil {
		return x.Not
	}
	return false
}

// Timespan determines where text must be matched within a transcript.
type TranscriptQuery_Threads_Text_Timespan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The start offset to query text from.
	Head *durationpb.Duration `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	// The end offset to query text from.
	Tail *durationpb.Duration `protobuf:"bytes,2,opt,name=tail,proto3" json:"tail,omitempty"`
}

func (x *TranscriptQuery_Threads_Text_Timespan) Reset() {
	*x = TranscriptQuery_Threads_Text_Timespan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Threads_Text_Timespan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Threads_Text_Timespan) ProtoMessage() {}

func (x *TranscriptQuery_Threads_Text_Timespan) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Threads_Text_Timespan.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Threads_Text_Timespan) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 6, 2, 0}
}

func (x *TranscriptQuery_Threads_Text_Timespan) GetHead() *durationpb.Duration {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *TranscriptQuery_Threads_Text_Timespan) GetTail() *durationpb.Duration {
	if x != nil {
		return x.Tail
	}
	return nil
}

// NeedReview defines a query on need review fields.
type TranscriptQuery_FlagSummary_NeedReview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Queries flag sids.
	FlagSids *TranscriptQuery_FlagSummary_NeedReview_FlagSids `protobuf:"bytes,1,opt,name=flag_sids,json=flagSids,proto3" json:"flag_sids,omitempty"`
}

func (x *TranscriptQuery_FlagSummary_NeedReview) Reset() {
	*x = TranscriptQuery_FlagSummary_NeedReview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_FlagSummary_NeedReview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_FlagSummary_NeedReview) ProtoMessage() {}

func (x *TranscriptQuery_FlagSummary_NeedReview) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_FlagSummary_NeedReview.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_FlagSummary_NeedReview) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 7, 0}
}

func (x *TranscriptQuery_FlagSummary_NeedReview) GetFlagSids() *TranscriptQuery_FlagSummary_NeedReview_FlagSids {
	if x != nil {
		return x.FlagSids
	}
	return nil
}

// ReviewStatus defines a query on review status.
type TranscriptQuery_FlagSummary_ReviewStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Must have any provided review status.
	Any []ReviewStatus `protobuf:"varint,1,rep,packed,name=any,proto3,enum=wfo.vanalytics.v2.ReviewStatus" json:"any,omitempty"`
}

func (x *TranscriptQuery_FlagSummary_ReviewStatus) Reset() {
	*x = TranscriptQuery_FlagSummary_ReviewStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_FlagSummary_ReviewStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_FlagSummary_ReviewStatus) ProtoMessage() {}

func (x *TranscriptQuery_FlagSummary_ReviewStatus) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_FlagSummary_ReviewStatus.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_FlagSummary_ReviewStatus) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 7, 1}
}

func (x *TranscriptQuery_FlagSummary_ReviewStatus) GetAny() []ReviewStatus {
	if x != nil {
		return x.Any
	}
	return nil
}

// Flags defines a query on flags.
type TranscriptQuery_FlagSummary_Flags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Queries flag sid.
	FlagSid *TranscriptQuery_FlagSummary_Flags_FlagSid `protobuf:"bytes,1,opt,name=flag_sid,json=flagSid,proto3" json:"flag_sid,omitempty"`
}

func (x *TranscriptQuery_FlagSummary_Flags) Reset() {
	*x = TranscriptQuery_FlagSummary_Flags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_FlagSummary_Flags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_FlagSummary_Flags) ProtoMessage() {}

func (x *TranscriptQuery_FlagSummary_Flags) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_FlagSummary_Flags.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_FlagSummary_Flags) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 7, 2}
}

func (x *TranscriptQuery_FlagSummary_Flags) GetFlagSid() *TranscriptQuery_FlagSummary_Flags_FlagSid {
	if x != nil {
		return x.FlagSid
	}
	return nil
}

// Count defines a query on count.
type TranscriptQuery_FlagSummary_Count struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Queries count greater than or equal.
	Gte *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=gte,proto3" json:"gte,omitempty"`
	// Optional. Queries count less than or equal.
	Lte *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=lte,proto3" json:"lte,omitempty"`
	// Optional. Queries count greater than.
	Gt *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=gt,proto3" json:"gt,omitempty"`
	// Optional. Queries count less than.
	Lt *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=lt,proto3" json:"lt,omitempty"`
	// Optional. Queries count equal to.
	Eq *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=eq,proto3" json:"eq,omitempty"`
}

func (x *TranscriptQuery_FlagSummary_Count) Reset() {
	*x = TranscriptQuery_FlagSummary_Count{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_FlagSummary_Count) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_FlagSummary_Count) ProtoMessage() {}

func (x *TranscriptQuery_FlagSummary_Count) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_FlagSummary_Count.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_FlagSummary_Count) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 7, 3}
}

func (x *TranscriptQuery_FlagSummary_Count) GetGte() *wrapperspb.Int32Value {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *TranscriptQuery_FlagSummary_Count) GetLte() *wrapperspb.Int32Value {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *TranscriptQuery_FlagSummary_Count) GetGt() *wrapperspb.Int32Value {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *TranscriptQuery_FlagSummary_Count) GetLt() *wrapperspb.Int32Value {
	if x != nil {
		return x.Lt
	}
	return nil
}

func (x *TranscriptQuery_FlagSummary_Count) GetEq() *wrapperspb.Int32Value {
	if x != nil {
		return x.Eq
	}
	return nil
}

// FlagSids defines a query on flag sids.
type TranscriptQuery_FlagSummary_NeedReview_FlagSids struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Must have any provided flag sids.
	Any []int64 `protobuf:"varint,1,rep,packed,name=any,proto3" json:"any,omitempty"`
}

func (x *TranscriptQuery_FlagSummary_NeedReview_FlagSids) Reset() {
	*x = TranscriptQuery_FlagSummary_NeedReview_FlagSids{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_FlagSummary_NeedReview_FlagSids) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_FlagSummary_NeedReview_FlagSids) ProtoMessage() {}

func (x *TranscriptQuery_FlagSummary_NeedReview_FlagSids) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_FlagSummary_NeedReview_FlagSids.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_FlagSummary_NeedReview_FlagSids) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 7, 0, 0}
}

func (x *TranscriptQuery_FlagSummary_NeedReview_FlagSids) GetAny() []int64 {
	if x != nil {
		return x.Any
	}
	return nil
}

// FlagSid defines a query on flag sid.
type TranscriptQuery_FlagSummary_Flags_FlagSid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Must have any of the provided flag sids.
	Any []int64 `protobuf:"varint,1,rep,packed,name=any,proto3" json:"any,omitempty"`
	// Optional. Must have all of the provided flag sids.
	All []int64 `protobuf:"varint,2,rep,packed,name=all,proto3" json:"all,omitempty"`
}

func (x *TranscriptQuery_FlagSummary_Flags_FlagSid) Reset() {
	*x = TranscriptQuery_FlagSummary_Flags_FlagSid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_FlagSummary_Flags_FlagSid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_FlagSummary_Flags_FlagSid) ProtoMessage() {}

func (x *TranscriptQuery_FlagSummary_Flags_FlagSid) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_FlagSummary_Flags_FlagSid.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_FlagSummary_Flags_FlagSid) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 7, 2, 0}
}

func (x *TranscriptQuery_FlagSummary_Flags_FlagSid) GetAny() []int64 {
	if x != nil {
		return x.Any
	}
	return nil
}

func (x *TranscriptQuery_FlagSummary_Flags_FlagSid) GetAll() []int64 {
	if x != nil {
		return x.All
	}
	return nil
}

// Generic clause for use in span near queries.
type SpanNear_Clause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Generic clause matcher.
	//
	// Types that are assignable to Match:
	//
	//	*SpanNear_Clause_SpanNear
	//	*SpanNear_Clause_SpanFuzzy
	//	*SpanNear_Clause_SpanTerm
	Match isSpanNear_Clause_Match `protobuf_oneof:"match"`
}

func (x *SpanNear_Clause) Reset() {
	*x = SpanNear_Clause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanNear_Clause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanNear_Clause) ProtoMessage() {}

func (x *SpanNear_Clause) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanNear_Clause.ProtoReflect.Descriptor instead.
func (*SpanNear_Clause) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{12, 0}
}

func (m *SpanNear_Clause) GetMatch() isSpanNear_Clause_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (x *SpanNear_Clause) GetSpanNear() *SpanNear {
	if x, ok := x.GetMatch().(*SpanNear_Clause_SpanNear); ok {
		return x.SpanNear
	}
	return nil
}

func (x *SpanNear_Clause) GetSpanFuzzy() *SpanFuzzy {
	if x, ok := x.GetMatch().(*SpanNear_Clause_SpanFuzzy); ok {
		return x.SpanFuzzy
	}
	return nil
}

func (x *SpanNear_Clause) GetSpanTerm() *SpanTerm {
	if x, ok := x.GetMatch().(*SpanNear_Clause_SpanTerm); ok {
		return x.SpanTerm
	}
	return nil
}

type isSpanNear_Clause_Match interface {
	isSpanNear_Clause_Match()
}

type SpanNear_Clause_SpanNear struct {
	// A span near clause to match a phrase.
	SpanNear *SpanNear `protobuf:"bytes,1,opt,name=span_near,json=spanNear,proto3,oneof"`
}

type SpanNear_Clause_SpanFuzzy struct {
	// A span near clause to match a fuzzy term.
	SpanFuzzy *SpanFuzzy `protobuf:"bytes,2,opt,name=span_fuzzy,json=spanFuzzy,proto3,oneof"`
}

type SpanNear_Clause_SpanTerm struct {
	// A span near clause to match a term.
	SpanTerm *SpanTerm `protobuf:"bytes,3,opt,name=span_term,json=spanTerm,proto3,oneof"`
}

func (*SpanNear_Clause_SpanNear) isSpanNear_Clause_Match() {}

func (*SpanNear_Clause_SpanFuzzy) isSpanNear_Clause_Match() {}

func (*SpanNear_Clause_SpanTerm) isSpanNear_Clause_Match() {}

var File_wfo_vanalytics_v2_transcript_proto protoreflect.FileDescriptor

var file_wfo_vanalytics_v2_transcript_proto_rawDesc = []byte{
	0x0a, 0x22, 0x77, 0x66, 0x6f, 0x2f, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2f, 0x76, 0x32, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x26, 0x77, 0x66, 0x6f, 0x2f, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f,
	0x76, 0x32, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x77, 0x66, 0x6f, 0x2f, 0x76, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xd1, 0x03, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x63, 0x61, 0x6c,
	0x6c, 0x12, 0x2a, 0x0a, 0x03, 0x73, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x03, 0x73, 0x6d, 0x73, 0x12, 0x34, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x66,
	0x6c, 0x61, 0x67, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x53, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x22, 0xd7, 0x07, 0x0a, 0x0b, 0x46, 0x6c, 0x61, 0x67,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x75, 0x6d,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x4d, 0x61, 0x78, 0x12, 0x4a, 0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x6c, 0x61,
	0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x39, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x46,
	0x6c, 0x61, 0x67, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x1a, 0x85, 0x01, 0x0a, 0x0a, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53,
	0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x4d, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x6c, 0x61, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08,
	0x66, 0x6c, 0x61, 0x67, 0x53, 0x69, 0x64, 0x73, 0x1a, 0xaf, 0x02, 0x0a, 0x04, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x75, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x75,
	0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x75, 0x73, 0x74,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d,
	0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x77, 0x66, 0x6f,
	0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x46,
	0x6c, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x07, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x1a, 0x8b, 0x01, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x4b, 0x65, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x57, 0x0a, 0x06, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xbd, 0x03, 0x0a, 0x03, 0x53, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x66, 0x6f, 0x2e,
	0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x6d,
	0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x73, 0x12, 0x32, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x6d, 0x73, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x53, 0x69, 0x64, 0x1a, 0x19, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77,
	0x1a, 0x6d, 0x0a, 0x06, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77,
	0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x6d, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a,
	0x50, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x31,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x22, 0xde, 0x0e, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x61,
	0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x07,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x69, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x2e, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x73, 0x69, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x54,
	0x61, 0x6c, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x08, 0x74, 0x61, 0x6c, 0x6b, 0x4f, 0x76, 0x65,
	0x72, 0x12, 0x36, 0x0a, 0x09, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x74, 0x61, 0x6c, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x75, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0d, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x52, 0x0c,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x12, 0x33, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x66,
	0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x1a, 0x67, 0x0a, 0x12, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x77, 0x66, 0x6f, 0x2e,
	0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x19, 0x0a, 0x05, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x1a, 0x27, 0x0a, 0x0d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a,
	0x6e, 0x0a, 0x06, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x66,
	0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a,
	0x87, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x31, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xeb, 0x02, 0x0a, 0x08, 0x54, 0x61,
	0x6c, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a,
	0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x4f,
	0x76, 0x65, 0x72, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a,
	0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0x88, 0x01, 0x0a, 0x08, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03,
	0x6d, 0x61, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x1a, 0x22, 0x0a, 0x0a, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0xe8, 0x02, 0x0a, 0x07, 0x53, 0x69, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x53,
	0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0a, 0x6f, 0x63, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4f,
	0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x1a, 0x88, 0x01, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2f, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x2b, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x1a, 0x22,
	0x0a, 0x0a, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0xb3, 0x02, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x45, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x09, 0x62, 0x6f,
	0x6f, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x66, 0x6f, 0x2e,
	0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x69,
	0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x3b, 0x0a, 0x09, 0x48, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x22, 0xdb, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x68, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x48, 0x69, 0x74, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x1a, 0x50, 0x0a, 0x03, 0x48, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77,
	0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x0a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08,
	0x03, 0x10, 0x04, 0x22, 0x59, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0xf7,
	0x48, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x57, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x66, 0x6f,
	0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x69, 0x64, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x77,
	0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x47, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x07, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x66,
	0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x12, 0x51, 0x0a, 0x0c, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x4b, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x4e, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3e, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x1a, 0xf9, 0x0a, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x3b, 0x0a, 0x02, 0x63, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x2e, 0x43, 0x63, 0x52, 0x02, 0x63, 0x63, 0x12, 0x3e, 0x0a, 0x03, 0x6e, 0x64, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x2e, 0x4e,
	0x64, 0x63, 0x52, 0x03, 0x6e, 0x64, 0x63, 0x12, 0x47, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x41, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x04, 0x69, 0x73, 0x6f, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x2e, 0x49, 0x73, 0x6f, 0x32,
	0x52, 0x04, 0x69, 0x73, 0x6f, 0x32, 0x12, 0x54, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x77, 0x66,
	0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x0b,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f,
	0x6e, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x03, 0x75, 0x74, 0x63, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x2e, 0x55, 0x74, 0x63,
	0x52, 0x03, 0x75, 0x74, 0x63, 0x12, 0x4d, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x61, 0x77, 0x52,
	0x03, 0x72, 0x61, 0x77, 0x1a, 0x16, 0x0a, 0x02, 0x43, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a, 0x17, 0x0a, 0x03,
	0x4e, 0x64, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a, 0x1a, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x61, 0x6e,
	0x79, 0x1a, 0x18, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a, 0x18, 0x0a, 0x04, 0x49,
	0x73, 0x6f, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a, 0x1c, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x61, 0x6e, 0x79, 0x1a, 0x18, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x6e, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a, 0x17, 0x0a,
	0x03, 0x55, 0x74, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a, 0xea, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x12, 0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x6d,
	0x69, 0x74, 0x79, 0x52, 0x10, 0x7a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x78,
	0x69, 0x6d, 0x69, 0x74, 0x79, 0x1a, 0x6c, 0x0a, 0x10, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x7a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x1a, 0x17, 0x0a, 0x03, 0x52, 0x61, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a, 0x21, 0x0a, 0x0d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a,
	0x37, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x6e,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a, 0x81, 0x01, 0x0a, 0x08, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x61,
	0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x03, 0x73, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x53, 0x6d, 0x73, 0x52, 0x03, 0x73, 0x6d, 0x73, 0x1a, 0xd6, 0x25, 0x0a,
	0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x4a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69,
	0x64, 0x12, 0x50, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x53, 0x69, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4d, 0x0a,
	0x09, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x4f, 0x76,
	0x65, 0x72, 0x52, 0x08, 0x74, 0x61, 0x6c, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x09,
	0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x08, 0x74, 0x61, 0x6c, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x63,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64,
	0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x0e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0f, 0x68, 0x75,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x48, 0x75, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x73, 0x52, 0x0d, 0x68, 0x75, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x73, 0x12, 0x4a, 0x0a, 0x0e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4c,
	0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x1a, 0x21, 0x0a, 0x0d, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x69, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a, 0xde, 0x06, 0x0a, 0x0d, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x03, 0x61, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x03,
	0x61, 0x6e, 0x64, 0x12, 0x45, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x02, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x6f,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6e, 0x6f, 0x74, 0x12, 0x4b, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x77, 0x66, 0x6f, 0x2e,
	0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x54, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x77, 0x66, 0x6f, 0x2e,
	0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x57, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52,
	0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x55, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x1a,
	0x83, 0x02, 0x0a, 0x07, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x67,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x6c,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x67,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x67, 0x74, 0x12, 0x2c, 0x0a, 0x02, 0x6c, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x02, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x02, 0x65, 0x71, 0x1a, 0x52, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x1a, 0x38, 0x0a, 0x08, 0x43, 0x61, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x03,
	0x61, 0x6e, 0x79, 0x1a, 0x1d, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x6e, 0x79, 0x1a, 0x1b, 0x0a, 0x07, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a,
	0x1c, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x6e, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a, 0xc3, 0x01,
	0x0a, 0x09, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x67,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x6c, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x67, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x02, 0x67, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x02, 0x6c, 0x74, 0x1a, 0xba, 0x01, 0x0a, 0x08, 0x54, 0x61, 0x6c, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x2b, 0x0a,
	0x03, 0x6c, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x02, 0x67, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x02, 0x67, 0x74, 0x12, 0x29, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x6c, 0x74,
	0x1a, 0xda, 0x09, 0x0a, 0x08, 0x54, 0x61, 0x6c, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x65, 0x0a,
	0x0e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x54,
	0x61, 0x6c, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x5f, 0x0a, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x77, 0x66, 0x6f,
	0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x52, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x12, 0x6b, 0x0a, 0x10, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x4f, 0x76, 0x65,
	0x72, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x0f, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x74, 0x0a, 0x13, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x4f, 0x76, 0x65,
	0x72, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x12, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x1a, 0xbf, 0x01, 0x0a, 0x0d, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x03, 0x67, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x03, 0x6c, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x67, 0x74, 0x12,
	0x29, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x6c, 0x74, 0x1a, 0xbd, 0x01, 0x0a, 0x0b, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x12, 0x2b, 0x0a, 0x03, 0x67, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x03, 0x6c, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x67, 0x74, 0x12,
	0x29, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x6c, 0x74, 0x1a, 0xcd, 0x01, 0x0a, 0x0f, 0x4f,
	0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e,
	0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x2e,
	0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x12, 0x2c,
	0x0a, 0x02, 0x67, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x67, 0x74, 0x12, 0x2c, 0x0a, 0x02,
	0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x6c, 0x74, 0x1a, 0xd0, 0x01, 0x0a, 0x12, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x2e, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x67, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6c, 0x74,
	0x65, 0x12, 0x2c, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x67, 0x74, 0x12,
	0x2c, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x6c, 0x74, 0x1a, 0xd5, 0x09,
	0x0a, 0x07, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x0e, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x53, 0x69, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x5e, 0x0a, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x53,
	0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x78, 0x52, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x12,
	0x6a, 0x0a, 0x10, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x77, 0x66, 0x6f, 0x2e,
	0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x2e, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x0f, 0x6f, 0x63, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x73, 0x0a, 0x13, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x2e, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x52, 0x12, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x1a, 0xbf, 0x01, 0x0a, 0x0d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12,
	0x2b, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x02,
	0x67, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x02, 0x67, 0x74, 0x12, 0x29, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02,
	0x6c, 0x74, 0x1a, 0xbd, 0x01, 0x0a, 0x0b, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x78, 0x12, 0x2b, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12,
	0x2b, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x02,
	0x67, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x02, 0x67, 0x74, 0x12, 0x29, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02,
	0x6c, 0x74, 0x1a, 0xcd, 0x01, 0x0a, 0x0f, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x02, 0x67, 0x74, 0x12, 0x2c, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02,
	0x6c, 0x74, 0x1a, 0xd0, 0x01, 0x0a, 0x12, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x67, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x6c, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x67, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x02, 0x67, 0x74, 0x12, 0x2c, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x02, 0x6c, 0x74, 0x1a, 0x91, 0x01, 0x0a, 0x03, 0x53, 0x6d, 0x73, 0x12, 0x61, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x6d, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64,
	0x1a, 0x27, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a, 0xcc, 0x05, 0x0a, 0x07, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x03, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x52, 0x03,
	0x61, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x52, 0x02, 0x6f, 0x72, 0x12,
	0x3d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x77, 0x66,
	0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77,
	0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x4a, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a,
	0x1a, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a, 0x16, 0x0a, 0x02, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03,
	0x61, 0x6e, 0x79, 0x1a, 0xc2, 0x02, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x05,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x66,
	0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x38, 0x0a, 0x09,
	0x73, 0x70, 0x61, 0x6e, 0x5f, 0x6e, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x4e, 0x65, 0x61, 0x72, 0x52, 0x08, 0x73, 0x70,
	0x61, 0x6e, 0x4e, 0x65, 0x61, 0x72, 0x12, 0x54, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x6e, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x6e, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6e, 0x6f, 0x74, 0x1a, 0x68,
	0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x68, 0x65,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0xb5, 0x07, 0x0a, 0x0b, 0x46, 0x6c, 0x61,
	0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x5a, 0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x4e, 0x65,
	0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x60, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x77, 0x66,
	0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x46, 0x6c, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x4a, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x8b,
	0x01, 0x0a, 0x0a, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x5f, 0x0a,
	0x09, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x2e, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x53, 0x69, 0x64, 0x73, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x69, 0x64, 0x73, 0x1a, 0x1c,
	0x0a, 0x08, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x69, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a, 0x41, 0x0a, 0x0c,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x03,
	0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x77, 0x66, 0x6f, 0x2e,
	0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a,
	0x8f, 0x01, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x57, 0x0a, 0x08, 0x66, 0x6c, 0x61,
	0x67, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x77, 0x66,
	0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x46, 0x6c, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x69, 0x64, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x53,
	0x69, 0x64, 0x1a, 0x2d, 0x0a, 0x07, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x61, 0x6c,
	0x6c, 0x1a, 0xec, 0x01, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x67,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x6c, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x67, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x02, 0x67, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x02, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x65, 0x71,
	0x1a, 0xf2, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x03,
	0x6c, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x67, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x02, 0x67, 0x74, 0x12, 0x2a, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02,
	0x6c, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x6d,
	0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xc0, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x67,
	0x74, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x6c, 0x74, 0x65,
	0x12, 0x2a, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x67, 0x74, 0x12, 0x2a, 0x0a, 0x02,
	0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x6c, 0x74, 0x22, 0x58, 0x0a, 0x06, 0x4d, 0x6f, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12,
	0x31, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x22, 0x35, 0x0a, 0x0d, 0x46, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41,
	0x75, 0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x22, 0xba, 0x01, 0x0a, 0x05, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x0e, 0x66, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x77, 0x66,
	0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x46, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x0d, 0x66, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x12, 0x29,
	0x0a, 0x0f, 0x66, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x75, 0x7a, 0x7a, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x66, 0x75, 0x7a,
	0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x22, 0xc2, 0x02, 0x0a, 0x08, 0x53, 0x70, 0x61, 0x6e, 0x4e,
	0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x4e, 0x65, 0x61, 0x72,
	0x2e, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73,
	0x1a, 0xc8, 0x01, 0x0a, 0x06, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x73,
	0x70, 0x61, 0x6e, 0x5f, 0x6e, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x4e, 0x65, 0x61, 0x72, 0x48, 0x00, 0x52, 0x08, 0x73,
	0x70, 0x61, 0x6e, 0x4e, 0x65, 0x61, 0x72, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x6e, 0x5f,
	0x66, 0x75, 0x7a, 0x7a, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x66,
	0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x70, 0x61, 0x6e, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x48, 0x00, 0x52, 0x09, 0x73, 0x70, 0x61,
	0x6e, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x66, 0x6f, 0x2e,
	0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70,
	0x61, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x48, 0x00, 0x52, 0x08, 0x73, 0x70, 0x61, 0x6e, 0x54, 0x65,
	0x72, 0x6d, 0x42, 0x07, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x20, 0x0a, 0x08, 0x53,
	0x70, 0x61, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa4, 0x01,
	0x0a, 0x09, 0x53, 0x70, 0x61, 0x6e, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x49, 0x0a, 0x0e, 0x66, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x77, 0x66, 0x6f, 0x2e,
	0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x75,
	0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x66,
	0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x12, 0x29, 0x0a, 0x0f,
	0x66, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x66, 0x75, 0x7a, 0x7a, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x22, 0x58, 0x0a, 0x1c, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x35,
	0x0a, 0x1d, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x59, 0x0a, 0x1d, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x22, 0x36, 0x0a, 0x1e, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x21, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6b, 0x0a, 0x20, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x2b, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x32, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x39, 0x0a, 0x1f, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x2a, 0x2c, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x4d, 0x53,
	0x10, 0x01, 0x2a, 0x56, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x54, 0x4f, 0x44, 0x4f, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45,
	0x56, 0x49, 0x45, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x4e, 0x45,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x42, 0xc9, 0x01, 0x0a, 0x15, 0x63,
	0x6f, 0x6d, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x32, 0x42, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69,
	0x2d, 0x67, 0x6f, 0x2f, 0x77, 0x66, 0x6f, 0x2f, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2f, 0x76, 0x32, 0x3b, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x76, 0x32, 0xa2, 0x02, 0x03, 0x57, 0x56, 0x58, 0xaa, 0x02, 0x11, 0x57, 0x66, 0x6f, 0x2e, 0x56,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x11, 0x57,
	0x66, 0x6f, 0x5c, 0x56, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5c, 0x56, 0x32,
	0xe2, 0x02, 0x1d, 0x57, 0x66, 0x6f, 0x5c, 0x56, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x13, 0x57, 0x66, 0x6f, 0x3a, 0x3a, 0x56, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x3a, 0x3a, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wfo_vanalytics_v2_transcript_proto_rawDescOnce sync.Once
	file_wfo_vanalytics_v2_transcript_proto_rawDescData = file_wfo_vanalytics_v2_transcript_proto_rawDesc
)

func file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP() []byte {
	file_wfo_vanalytics_v2_transcript_proto_rawDescOnce.Do(func() {
		file_wfo_vanalytics_v2_transcript_proto_rawDescData = protoimpl.X.CompressGZIP(file_wfo_vanalytics_v2_transcript_proto_rawDescData)
	})
	return file_wfo_vanalytics_v2_transcript_proto_rawDescData
}

var file_wfo_vanalytics_v2_transcript_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_wfo_vanalytics_v2_transcript_proto_msgTypes = make([]protoimpl.MessageInfo, 99)
var file_wfo_vanalytics_v2_transcript_proto_goTypes = []interface{}{
	(Channel)(0),                                             // 0: wfo.vanalytics.v2.Channel
	(ReviewStatus)(0),                                        // 1: wfo.vanalytics.v2.ReviewStatus
	(*Transcript)(nil),                                       // 2: wfo.vanalytics.v2.Transcript
	(*FlagSummary)(nil),                                      // 3: wfo.vanalytics.v2.FlagSummary
	(*Sms)(nil),                                              // 4: wfo.vanalytics.v2.Sms
	(*Call)(nil),                                             // 5: wfo.vanalytics.v2.Call
	(*SearchTranscriptsRequest)(nil),                         // 6: wfo.vanalytics.v2.SearchTranscriptsRequest
	(*Highlight)(nil),                                        // 7: wfo.vanalytics.v2.Highlight
	(*SearchTranscriptsResponse)(nil),                        // 8: wfo.vanalytics.v2.SearchTranscriptsResponse
	(*TranscriptBoolQuery)(nil),                              // 9: wfo.vanalytics.v2.TranscriptBoolQuery
	(*TranscriptQuery)(nil),                                  // 10: wfo.vanalytics.v2.TranscriptQuery
	(*Moment)(nil),                                           // 11: wfo.vanalytics.v2.Moment
	(*FuzzinessAuto)(nil),                                    // 12: wfo.vanalytics.v2.FuzzinessAuto
	(*Match)(nil),                                            // 13: wfo.vanalytics.v2.Match
	(*SpanNear)(nil),                                         // 14: wfo.vanalytics.v2.SpanNear
	(*SpanTerm)(nil),                                         // 15: wfo.vanalytics.v2.SpanTerm
	(*SpanFuzzy)(nil),                                        // 16: wfo.vanalytics.v2.SpanFuzzy
	(*BulkDeleteTranscriptsRequest)(nil),                     // 17: wfo.vanalytics.v2.BulkDeleteTranscriptsRequest
	(*BulkDeleteTranscriptsResponse)(nil),                    // 18: wfo.vanalytics.v2.BulkDeleteTranscriptsResponse
	(*BulkRestoreTranscriptsRequest)(nil),                    // 19: wfo.vanalytics.v2.BulkRestoreTranscriptsRequest
	(*BulkRestoreTranscriptsResponse)(nil),                   // 20: wfo.vanalytics.v2.BulkRestoreTranscriptsResponse
	(*ListTranscriptGroupNamesRequest)(nil),                  // 21: wfo.vanalytics.v2.ListTranscriptGroupNamesRequest
	(*ListTranscriptGroupNamesResponse)(nil),                 // 22: wfo.vanalytics.v2.ListTranscriptGroupNamesResponse
	(*TranscriptGroupName)(nil),                              // 23: wfo.vanalytics.v2.TranscriptGroupName
	(*ListAgentResponseValuesRequest)(nil),                   // 24: wfo.vanalytics.v2.ListAgentResponseValuesRequest
	(*ListAgentResponseValuesResponse)(nil),                  // 25: wfo.vanalytics.v2.ListAgentResponseValuesResponse
	(*FlagSummary_NeedReview)(nil),                           // 26: wfo.vanalytics.v2.FlagSummary.NeedReview
	(*FlagSummary_Flag)(nil),                                 // 27: wfo.vanalytics.v2.FlagSummary.Flag
	(*FlagSummary_Filter)(nil),                               // 28: wfo.vanalytics.v2.FlagSummary.Filter
	(*FlagSummary_Review)(nil),                               // 29: wfo.vanalytics.v2.FlagSummary.Review
	(*Sms_Phone)(nil),                                        // 30: wfo.vanalytics.v2.Sms.Phone
	(*Sms_Thread)(nil),                                       // 31: wfo.vanalytics.v2.Sms.Thread
	(*Sms_Segment)(nil),                                      // 32: wfo.vanalytics.v2.Sms.Segment
	nil,                                                      // 33: wfo.vanalytics.v2.Call.AgentResponseEntry
	(*Call_Phone)(nil),                                       // 34: wfo.vanalytics.v2.Call.Phone
	(*Call_AgentResponse)(nil),                               // 35: wfo.vanalytics.v2.Call.AgentResponse
	(*Call_Thread)(nil),                                      // 36: wfo.vanalytics.v2.Call.Thread
	(*Call_Segment)(nil),                                     // 37: wfo.vanalytics.v2.Call.Segment
	(*Call_TalkOver)(nil),                                    // 38: wfo.vanalytics.v2.Call.TalkOver
	(*Call_Silence)(nil),                                     // 39: wfo.vanalytics.v2.Call.Silence
	(*Call_TalkOver_Duration)(nil),                           // 40: wfo.vanalytics.v2.Call.TalkOver.Duration
	(*Call_TalkOver_Occurrence)(nil),                         // 41: wfo.vanalytics.v2.Call.TalkOver.Occurrence
	(*Call_Silence_Duration)(nil),                            // 42: wfo.vanalytics.v2.Call.Silence.Duration
	(*Call_Silence_Occurrence)(nil),                          // 43: wfo.vanalytics.v2.Call.Silence.Occurrence
	(*SearchTranscriptsResponse_Hit)(nil),                    // 44: wfo.vanalytics.v2.SearchTranscriptsResponse.Hit
	(*TranscriptQuery_Phone)(nil),                            // 45: wfo.vanalytics.v2.TranscriptQuery.Phone
	(*TranscriptQuery_TranscriptSid)(nil),                    // 46: wfo.vanalytics.v2.TranscriptQuery.TranscriptSid
	(*TranscriptQuery_Channel)(nil),                          // 47: wfo.vanalytics.v2.TranscriptQuery.Channel
	(*TranscriptQuery_Metadata)(nil),                         // 48: wfo.vanalytics.v2.TranscriptQuery.Metadata
	(*TranscriptQuery_Call)(nil),                             // 49: wfo.vanalytics.v2.TranscriptQuery.Call
	(*TranscriptQuery_Sms)(nil),                              // 50: wfo.vanalytics.v2.TranscriptQuery.Sms
	(*TranscriptQuery_Threads)(nil),                          // 51: wfo.vanalytics.v2.TranscriptQuery.Threads
	(*TranscriptQuery_FlagSummary)(nil),                      // 52: wfo.vanalytics.v2.TranscriptQuery.FlagSummary
	(*TranscriptQuery_StartTime)(nil),                        // 53: wfo.vanalytics.v2.TranscriptQuery.StartTime
	(*TranscriptQuery_DeleteTime)(nil),                       // 54: wfo.vanalytics.v2.TranscriptQuery.DeleteTime
	(*TranscriptQuery_Phone_Cc)(nil),                         // 55: wfo.vanalytics.v2.TranscriptQuery.Phone.Cc
	(*TranscriptQuery_Phone_Ndc)(nil),                        // 56: wfo.vanalytics.v2.TranscriptQuery.Phone.Ndc
	(*TranscriptQuery_Phone_Prefix)(nil),                     // 57: wfo.vanalytics.v2.TranscriptQuery.Phone.Prefix
	(*TranscriptQuery_Phone_City)(nil),                       // 58: wfo.vanalytics.v2.TranscriptQuery.Phone.City
	(*TranscriptQuery_Phone_Iso2)(nil),                       // 59: wfo.vanalytics.v2.TranscriptQuery.Phone.Iso2
	(*TranscriptQuery_Phone_RegionCode)(nil),                 // 60: wfo.vanalytics.v2.TranscriptQuery.Phone.RegionCode
	(*TranscriptQuery_Phone_RegionName)(nil),                 // 61: wfo.vanalytics.v2.TranscriptQuery.Phone.RegionName
	(*TranscriptQuery_Phone_TimeZone)(nil),                   // 62: wfo.vanalytics.v2.TranscriptQuery.Phone.TimeZone
	(*TranscriptQuery_Phone_Type)(nil),                       // 63: wfo.vanalytics.v2.TranscriptQuery.Phone.Type
	(*TranscriptQuery_Phone_Utc)(nil),                        // 64: wfo.vanalytics.v2.TranscriptQuery.Phone.Utc
	(*TranscriptQuery_Phone_Location)(nil),                   // 65: wfo.vanalytics.v2.TranscriptQuery.Phone.Location
	(*TranscriptQuery_Phone_Raw)(nil),                        // 66: wfo.vanalytics.v2.TranscriptQuery.Phone.Raw
	(*TranscriptQuery_Phone_Location_ZipCodeProximity)(nil),  // 67: wfo.vanalytics.v2.TranscriptQuery.Phone.Location.ZipCodeProximity
	(*TranscriptQuery_Call_HuntGroupSids)(nil),               // 68: wfo.vanalytics.v2.TranscriptQuery.Call.HuntGroupSids
	(*TranscriptQuery_Call_AgentResponse)(nil),               // 69: wfo.vanalytics.v2.TranscriptQuery.Call.AgentResponse
	(*TranscriptQuery_Call_CallType)(nil),                    // 70: wfo.vanalytics.v2.TranscriptQuery.Call.CallType
	(*TranscriptQuery_Call_GroupName)(nil),                   // 71: wfo.vanalytics.v2.TranscriptQuery.Call.GroupName
	(*TranscriptQuery_Call_CallSid)(nil),                     // 72: wfo.vanalytics.v2.TranscriptQuery.Call.CallSid
	(*TranscriptQuery_Call_CallerId)(nil),                    // 73: wfo.vanalytics.v2.TranscriptQuery.Call.CallerId
	(*TranscriptQuery_Call_AudioTime)(nil),                   // 74: wfo.vanalytics.v2.TranscriptQuery.Call.AudioTime
	(*TranscriptQuery_Call_TalkTime)(nil),                    // 75: wfo.vanalytics.v2.TranscriptQuery.Call.TalkTime
	(*TranscriptQuery_Call_TalkOver)(nil),                    // 76: wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver
	(*TranscriptQuery_Call_Silence)(nil),                     // 77: wfo.vanalytics.v2.TranscriptQuery.Call.Silence
	(*TranscriptQuery_Call_AgentResponse_Values)(nil),        // 78: wfo.vanalytics.v2.TranscriptQuery.Call.AgentResponse.Values
	(*TranscriptQuery_Call_AgentResponse_Numbers)(nil),       // 79: wfo.vanalytics.v2.TranscriptQuery.Call.AgentResponse.Numbers
	(*TranscriptQuery_Call_AgentResponse_Key)(nil),           // 80: wfo.vanalytics.v2.TranscriptQuery.Call.AgentResponse.Key
	(*TranscriptQuery_Call_TalkOver_DurationTotal)(nil),      // 81: wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.DurationTotal
	(*TranscriptQuery_Call_TalkOver_DurationMax)(nil),        // 82: wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.DurationMax
	(*TranscriptQuery_Call_TalkOver_OccurrenceTotal)(nil),    // 83: wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.OccurrenceTotal
	(*TranscriptQuery_Call_TalkOver_DurationPercentage)(nil), // 84: wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.DurationPercentage
	(*TranscriptQuery_Call_Silence_DurationTotal)(nil),       // 85: wfo.vanalytics.v2.TranscriptQuery.Call.Silence.DurationTotal
	(*TranscriptQuery_Call_Silence_DurationMax)(nil),         // 86: wfo.vanalytics.v2.TranscriptQuery.Call.Silence.DurationMax
	(*TranscriptQuery_Call_Silence_OccurrenceTotal)(nil),     // 87: wfo.vanalytics.v2.TranscriptQuery.Call.Silence.OccurrenceTotal
	(*TranscriptQuery_Call_Silence_DurationPercentage)(nil),  // 88: wfo.vanalytics.v2.TranscriptQuery.Call.Silence.DurationPercentage
	(*TranscriptQuery_Sms_ConversationSid)(nil),              // 89: wfo.vanalytics.v2.TranscriptQuery.Sms.ConversationSid
	(*TranscriptQuery_Threads_UserId)(nil),                   // 90: wfo.vanalytics.v2.TranscriptQuery.Threads.UserId
	(*TranscriptQuery_Threads_Id)(nil),                       // 91: wfo.vanalytics.v2.TranscriptQuery.Threads.Id
	(*TranscriptQuery_Threads_Text)(nil),                     // 92: wfo.vanalytics.v2.TranscriptQuery.Threads.Text
	(*TranscriptQuery_Threads_Text_Timespan)(nil),            // 93: wfo.vanalytics.v2.TranscriptQuery.Threads.Text.Timespan
	(*TranscriptQuery_FlagSummary_NeedReview)(nil),           // 94: wfo.vanalytics.v2.TranscriptQuery.FlagSummary.NeedReview
	(*TranscriptQuery_FlagSummary_ReviewStatus)(nil),         // 95: wfo.vanalytics.v2.TranscriptQuery.FlagSummary.ReviewStatus
	(*TranscriptQuery_FlagSummary_Flags)(nil),                // 96: wfo.vanalytics.v2.TranscriptQuery.FlagSummary.Flags
	(*TranscriptQuery_FlagSummary_Count)(nil),                // 97: wfo.vanalytics.v2.TranscriptQuery.FlagSummary.Count
	(*TranscriptQuery_FlagSummary_NeedReview_FlagSids)(nil),  // 98: wfo.vanalytics.v2.TranscriptQuery.FlagSummary.NeedReview.FlagSids
	(*TranscriptQuery_FlagSummary_Flags_FlagSid)(nil),        // 99: wfo.vanalytics.v2.TranscriptQuery.FlagSummary.Flags.FlagSid
	(*SpanNear_Clause)(nil),                                  // 100: wfo.vanalytics.v2.SpanNear.Clause
	(*timestamppb.Timestamp)(nil),                            // 101: google.protobuf.Timestamp
	(*TranscriptSummary)(nil),                                // 102: wfo.vanalytics.v2.TranscriptSummary
	(commons.CallType_Enum)(0),                               // 103: api.commons.CallType.Enum
	(*durationpb.Duration)(nil),                              // 104: google.protobuf.Duration
	(*AgentCallLog)(nil),                                     // 105: wfo.vanalytics.v2.AgentCallLog
	(*fieldmaskpb.FieldMask)(nil),                            // 106: google.protobuf.FieldMask
	(commons.Interval)(0),                                    // 107: api.commons.Interval
	(*AgentCallLogQuery)(nil),                                // 108: wfo.vanalytics.v2.AgentCallLogQuery
	(*wrapperspb.Int32Value)(nil),                            // 109: google.protobuf.Int32Value
	(*wrapperspb.DoubleValue)(nil),                           // 110: google.protobuf.DoubleValue
	(*wrapperspb.UInt32Value)(nil),                           // 111: google.protobuf.UInt32Value
}
var file_wfo_vanalytics_v2_transcript_proto_depIdxs = []int32{
	5,   // 0: wfo.vanalytics.v2.Transcript.call:type_name -> wfo.vanalytics.v2.Call
	4,   // 1: wfo.vanalytics.v2.Transcript.sms:type_name -> wfo.vanalytics.v2.Sms
	0,   // 2: wfo.vanalytics.v2.Transcript.channel:type_name -> wfo.vanalytics.v2.Channel
	101, // 3: wfo.vanalytics.v2.Transcript.start_time:type_name -> google.protobuf.Timestamp
	101, // 4: wfo.vanalytics.v2.Transcript.delete_time:type_name -> google.protobuf.Timestamp
	3,   // 5: wfo.vanalytics.v2.Transcript.flag_summary:type_name -> wfo.vanalytics.v2.FlagSummary
	102, // 6: wfo.vanalytics.v2.Transcript.summary:type_name -> wfo.vanalytics.v2.TranscriptSummary
	26,  // 7: wfo.vanalytics.v2.FlagSummary.need_review:type_name -> wfo.vanalytics.v2.FlagSummary.NeedReview
	27,  // 8: wfo.vanalytics.v2.FlagSummary.flags:type_name -> wfo.vanalytics.v2.FlagSummary.Flag
	1,   // 9: wfo.vanalytics.v2.FlagSummary.review_status:type_name -> wfo.vanalytics.v2.ReviewStatus
	31,  // 10: wfo.vanalytics.v2.Sms.threads:type_name -> wfo.vanalytics.v2.Sms.Thread
	30,  // 11: wfo.vanalytics.v2.Sms.phone:type_name -> wfo.vanalytics.v2.Sms.Phone
	103, // 12: wfo.vanalytics.v2.Call.call_type:type_name -> api.commons.CallType.Enum
	36,  // 13: wfo.vanalytics.v2.Call.threads:type_name -> wfo.vanalytics.v2.Call.Thread
	39,  // 14: wfo.vanalytics.v2.Call.silence:type_name -> wfo.vanalytics.v2.Call.Silence
	38,  // 15: wfo.vanalytics.v2.Call.talk_over:type_name -> wfo.vanalytics.v2.Call.TalkOver
	104, // 16: wfo.vanalytics.v2.Call.talk_time:type_name -> google.protobuf.Duration
	33,  // 17: wfo.vanalytics.v2.Call.agent_response:type_name -> wfo.vanalytics.v2.Call.AgentResponseEntry
	105, // 18: wfo.vanalytics.v2.Call.agent_call_log:type_name -> wfo.vanalytics.v2.AgentCallLog
	34,  // 19: wfo.vanalytics.v2.Call.phone:type_name -> wfo.vanalytics.v2.Call.Phone
	106, // 20: wfo.vanalytics.v2.SearchTranscriptsRequest.read_mask:type_name -> google.protobuf.FieldMask
	9,   // 21: wfo.vanalytics.v2.SearchTranscriptsRequest.bool_query:type_name -> wfo.vanalytics.v2.TranscriptBoolQuery
	7,   // 22: wfo.vanalytics.v2.SearchTranscriptsRequest.highlight:type_name -> wfo.vanalytics.v2.Highlight
	44,  // 23: wfo.vanalytics.v2.SearchTranscriptsResponse.hits:type_name -> wfo.vanalytics.v2.SearchTranscriptsResponse.Hit
	10,  // 24: wfo.vanalytics.v2.TranscriptBoolQuery.transcript:type_name -> wfo.vanalytics.v2.TranscriptQuery
	46,  // 25: wfo.vanalytics.v2.TranscriptQuery.transcript_sid:type_name -> wfo.vanalytics.v2.TranscriptQuery.TranscriptSid
	47,  // 26: wfo.vanalytics.v2.TranscriptQuery.channel:type_name -> wfo.vanalytics.v2.TranscriptQuery.Channel
	48,  // 27: wfo.vanalytics.v2.TranscriptQuery.metadata:type_name -> wfo.vanalytics.v2.TranscriptQuery.Metadata
	51,  // 28: wfo.vanalytics.v2.TranscriptQuery.threads:type_name -> wfo.vanalytics.v2.TranscriptQuery.Threads
	52,  // 29: wfo.vanalytics.v2.TranscriptQuery.flag_summary:type_name -> wfo.vanalytics.v2.TranscriptQuery.FlagSummary
	53,  // 30: wfo.vanalytics.v2.TranscriptQuery.start_time:type_name -> wfo.vanalytics.v2.TranscriptQuery.StartTime
	54,  // 31: wfo.vanalytics.v2.TranscriptQuery.delete_time:type_name -> wfo.vanalytics.v2.TranscriptQuery.DeleteTime
	45,  // 32: wfo.vanalytics.v2.TranscriptQuery.phone:type_name -> wfo.vanalytics.v2.TranscriptQuery.Phone
	107, // 33: wfo.vanalytics.v2.Moment.interval:type_name -> api.commons.Interval
	12,  // 34: wfo.vanalytics.v2.Match.fuzziness_auto:type_name -> wfo.vanalytics.v2.FuzzinessAuto
	100, // 35: wfo.vanalytics.v2.SpanNear.clauses:type_name -> wfo.vanalytics.v2.SpanNear.Clause
	12,  // 36: wfo.vanalytics.v2.SpanFuzzy.fuzziness_auto:type_name -> wfo.vanalytics.v2.FuzzinessAuto
	10,  // 37: wfo.vanalytics.v2.BulkDeleteTranscriptsRequest.query:type_name -> wfo.vanalytics.v2.TranscriptQuery
	10,  // 38: wfo.vanalytics.v2.BulkRestoreTranscriptsRequest.query:type_name -> wfo.vanalytics.v2.TranscriptQuery
	23,  // 39: wfo.vanalytics.v2.ListTranscriptGroupNamesResponse.group_names:type_name -> wfo.vanalytics.v2.TranscriptGroupName
	28,  // 40: wfo.vanalytics.v2.FlagSummary.Flag.filters:type_name -> wfo.vanalytics.v2.FlagSummary.Filter
	29,  // 41: wfo.vanalytics.v2.FlagSummary.Flag.reviews:type_name -> wfo.vanalytics.v2.FlagSummary.Review
	32,  // 42: wfo.vanalytics.v2.Sms.Thread.segments:type_name -> wfo.vanalytics.v2.Sms.Segment
	104, // 43: wfo.vanalytics.v2.Sms.Segment.offset:type_name -> google.protobuf.Duration
	35,  // 44: wfo.vanalytics.v2.Call.AgentResponseEntry.value:type_name -> wfo.vanalytics.v2.Call.AgentResponse
	37,  // 45: wfo.vanalytics.v2.Call.Thread.segments:type_name -> wfo.vanalytics.v2.Call.Segment
	104, // 46: wfo.vanalytics.v2.Call.Segment.offset:type_name -> google.protobuf.Duration
	104, // 47: wfo.vanalytics.v2.Call.Segment.duration:type_name -> google.protobuf.Duration
	40,  // 48: wfo.vanalytics.v2.Call.TalkOver.duration:type_name -> wfo.vanalytics.v2.Call.TalkOver.Duration
	41,  // 49: wfo.vanalytics.v2.Call.TalkOver.occurrence:type_name -> wfo.vanalytics.v2.Call.TalkOver.Occurrence
	42,  // 50: wfo.vanalytics.v2.Call.Silence.duration:type_name -> wfo.vanalytics.v2.Call.Silence.Duration
	43,  // 51: wfo.vanalytics.v2.Call.Silence.occurrence:type_name -> wfo.vanalytics.v2.Call.Silence.Occurrence
	104, // 52: wfo.vanalytics.v2.Call.TalkOver.Duration.total:type_name -> google.protobuf.Duration
	104, // 53: wfo.vanalytics.v2.Call.TalkOver.Duration.max:type_name -> google.protobuf.Duration
	104, // 54: wfo.vanalytics.v2.Call.Silence.Duration.total:type_name -> google.protobuf.Duration
	104, // 55: wfo.vanalytics.v2.Call.Silence.Duration.max:type_name -> google.protobuf.Duration
	2,   // 56: wfo.vanalytics.v2.SearchTranscriptsResponse.Hit.transcript:type_name -> wfo.vanalytics.v2.Transcript
	55,  // 57: wfo.vanalytics.v2.TranscriptQuery.Phone.cc:type_name -> wfo.vanalytics.v2.TranscriptQuery.Phone.Cc
	56,  // 58: wfo.vanalytics.v2.TranscriptQuery.Phone.ndc:type_name -> wfo.vanalytics.v2.TranscriptQuery.Phone.Ndc
	57,  // 59: wfo.vanalytics.v2.TranscriptQuery.Phone.prefix:type_name -> wfo.vanalytics.v2.TranscriptQuery.Phone.Prefix
	58,  // 60: wfo.vanalytics.v2.TranscriptQuery.Phone.city:type_name -> wfo.vanalytics.v2.TranscriptQuery.Phone.City
	59,  // 61: wfo.vanalytics.v2.TranscriptQuery.Phone.iso2:type_name -> wfo.vanalytics.v2.TranscriptQuery.Phone.Iso2
	60,  // 62: wfo.vanalytics.v2.TranscriptQuery.Phone.region_code:type_name -> wfo.vanalytics.v2.TranscriptQuery.Phone.RegionCode
	61,  // 63: wfo.vanalytics.v2.TranscriptQuery.Phone.region_name:type_name -> wfo.vanalytics.v2.TranscriptQuery.Phone.RegionName
	62,  // 64: wfo.vanalytics.v2.TranscriptQuery.Phone.time_zone:type_name -> wfo.vanalytics.v2.TranscriptQuery.Phone.TimeZone
	63,  // 65: wfo.vanalytics.v2.TranscriptQuery.Phone.type:type_name -> wfo.vanalytics.v2.TranscriptQuery.Phone.Type
	64,  // 66: wfo.vanalytics.v2.TranscriptQuery.Phone.utc:type_name -> wfo.vanalytics.v2.TranscriptQuery.Phone.Utc
	65,  // 67: wfo.vanalytics.v2.TranscriptQuery.Phone.location:type_name -> wfo.vanalytics.v2.TranscriptQuery.Phone.Location
	66,  // 68: wfo.vanalytics.v2.TranscriptQuery.Phone.raw:type_name -> wfo.vanalytics.v2.TranscriptQuery.Phone.Raw
	0,   // 69: wfo.vanalytics.v2.TranscriptQuery.Channel.any:type_name -> wfo.vanalytics.v2.Channel
	49,  // 70: wfo.vanalytics.v2.TranscriptQuery.Metadata.call:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call
	50,  // 71: wfo.vanalytics.v2.TranscriptQuery.Metadata.sms:type_name -> wfo.vanalytics.v2.TranscriptQuery.Sms
	72,  // 72: wfo.vanalytics.v2.TranscriptQuery.Call.call_sid:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call.CallSid
	74,  // 73: wfo.vanalytics.v2.TranscriptQuery.Call.audio_time:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call.AudioTime
	70,  // 74: wfo.vanalytics.v2.TranscriptQuery.Call.call_type:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call.CallType
	77,  // 75: wfo.vanalytics.v2.TranscriptQuery.Call.silence:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call.Silence
	76,  // 76: wfo.vanalytics.v2.TranscriptQuery.Call.talk_over:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver
	75,  // 77: wfo.vanalytics.v2.TranscriptQuery.Call.talk_time:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call.TalkTime
	73,  // 78: wfo.vanalytics.v2.TranscriptQuery.Call.caller_id:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call.CallerId
	71,  // 79: wfo.vanalytics.v2.TranscriptQuery.Call.group_name:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call.GroupName
	69,  // 80: wfo.vanalytics.v2.TranscriptQuery.Call.agent_response:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call.AgentResponse
	68,  // 81: wfo.vanalytics.v2.TranscriptQuery.Call.hunt_group_sids:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call.HuntGroupSids
	108, // 82: wfo.vanalytics.v2.TranscriptQuery.Call.agent_call_log:type_name -> wfo.vanalytics.v2.AgentCallLogQuery
	89,  // 83: wfo.vanalytics.v2.TranscriptQuery.Sms.conversation_sid:type_name -> wfo.vanalytics.v2.TranscriptQuery.Sms.ConversationSid
	51,  // 84: wfo.vanalytics.v2.TranscriptQuery.Threads.and:type_name -> wfo.vanalytics.v2.TranscriptQuery.Threads
	51,  // 85: wfo.vanalytics.v2.TranscriptQuery.Threads.or:type_name -> wfo.vanalytics.v2.TranscriptQuery.Threads
	91,  // 86: wfo.vanalytics.v2.TranscriptQuery.Threads.id:type_name -> wfo.vanalytics.v2.TranscriptQuery.Threads.Id
	92,  // 87: wfo.vanalytics.v2.TranscriptQuery.Threads.text:type_name -> wfo.vanalytics.v2.TranscriptQuery.Threads.Text
	90,  // 88: wfo.vanalytics.v2.TranscriptQuery.Threads.user_id:type_name -> wfo.vanalytics.v2.TranscriptQuery.Threads.UserId
	94,  // 89: wfo.vanalytics.v2.TranscriptQuery.FlagSummary.need_review:type_name -> wfo.vanalytics.v2.TranscriptQuery.FlagSummary.NeedReview
	95,  // 90: wfo.vanalytics.v2.TranscriptQuery.FlagSummary.review_status:type_name -> wfo.vanalytics.v2.TranscriptQuery.FlagSummary.ReviewStatus
	96,  // 91: wfo.vanalytics.v2.TranscriptQuery.FlagSummary.flags:type_name -> wfo.vanalytics.v2.TranscriptQuery.FlagSummary.Flags
	97,  // 92: wfo.vanalytics.v2.TranscriptQuery.FlagSummary.count:type_name -> wfo.vanalytics.v2.TranscriptQuery.FlagSummary.Count
	101, // 93: wfo.vanalytics.v2.TranscriptQuery.StartTime.gte:type_name -> google.protobuf.Timestamp
	101, // 94: wfo.vanalytics.v2.TranscriptQuery.StartTime.lte:type_name -> google.protobuf.Timestamp
	101, // 95: wfo.vanalytics.v2.TranscriptQuery.StartTime.gt:type_name -> google.protobuf.Timestamp
	101, // 96: wfo.vanalytics.v2.TranscriptQuery.StartTime.lt:type_name -> google.protobuf.Timestamp
	11,  // 97: wfo.vanalytics.v2.TranscriptQuery.StartTime.moment:type_name -> wfo.vanalytics.v2.Moment
	101, // 98: wfo.vanalytics.v2.TranscriptQuery.DeleteTime.gte:type_name -> google.protobuf.Timestamp
	101, // 99: wfo.vanalytics.v2.TranscriptQuery.DeleteTime.lte:type_name -> google.protobuf.Timestamp
	101, // 100: wfo.vanalytics.v2.TranscriptQuery.DeleteTime.gt:type_name -> google.protobuf.Timestamp
	101, // 101: wfo.vanalytics.v2.TranscriptQuery.DeleteTime.lt:type_name -> google.protobuf.Timestamp
	67,  // 102: wfo.vanalytics.v2.TranscriptQuery.Phone.Location.zip_code_proximity:type_name -> wfo.vanalytics.v2.TranscriptQuery.Phone.Location.ZipCodeProximity
	69,  // 103: wfo.vanalytics.v2.TranscriptQuery.Call.AgentResponse.and:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call.AgentResponse
	69,  // 104: wfo.vanalytics.v2.TranscriptQuery.Call.AgentResponse.or:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call.AgentResponse
	80,  // 105: wfo.vanalytics.v2.TranscriptQuery.Call.AgentResponse.key:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call.AgentResponse.Key
	78,  // 106: wfo.vanalytics.v2.TranscriptQuery.Call.AgentResponse.values:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call.AgentResponse.Values
	79,  // 107: wfo.vanalytics.v2.TranscriptQuery.Call.AgentResponse.numbers:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call.AgentResponse.Numbers
	103, // 108: wfo.vanalytics.v2.TranscriptQuery.Call.CallType.any:type_name -> api.commons.CallType.Enum
	109, // 109: wfo.vanalytics.v2.TranscriptQuery.Call.AudioTime.gte:type_name -> google.protobuf.Int32Value
	109, // 110: wfo.vanalytics.v2.TranscriptQuery.Call.AudioTime.lte:type_name -> google.protobuf.Int32Value
	109, // 111: wfo.vanalytics.v2.TranscriptQuery.Call.AudioTime.gt:type_name -> google.protobuf.Int32Value
	109, // 112: wfo.vanalytics.v2.TranscriptQuery.Call.AudioTime.lt:type_name -> google.protobuf.Int32Value
	104, // 113: wfo.vanalytics.v2.TranscriptQuery.Call.TalkTime.gte:type_name -> google.protobuf.Duration
	104, // 114: wfo.vanalytics.v2.TranscriptQuery.Call.TalkTime.lte:type_name -> google.protobuf.Duration
	104, // 115: wfo.vanalytics.v2.TranscriptQuery.Call.TalkTime.gt:type_name -> google.protobuf.Duration
	104, // 116: wfo.vanalytics.v2.TranscriptQuery.Call.TalkTime.lt:type_name -> google.protobuf.Duration
	81,  // 117: wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.duration_total:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.DurationTotal
	82,  // 118: wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.duration_max:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.DurationMax
	83,  // 119: wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.occurrence_total:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.OccurrenceTotal
	84,  // 120: wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.duration_percentage:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.DurationPercentage
	85,  // 121: wfo.vanalytics.v2.TranscriptQuery.Call.Silence.duration_total:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call.Silence.DurationTotal
	86,  // 122: wfo.vanalytics.v2.TranscriptQuery.Call.Silence.duration_max:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call.Silence.DurationMax
	87,  // 123: wfo.vanalytics.v2.TranscriptQuery.Call.Silence.occurrence_total:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call.Silence.OccurrenceTotal
	88,  // 124: wfo.vanalytics.v2.TranscriptQuery.Call.Silence.duration_percentage:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call.Silence.DurationPercentage
	110, // 125: wfo.vanalytics.v2.TranscriptQuery.Call.AgentResponse.Numbers.gte:type_name -> google.protobuf.DoubleValue
	110, // 126: wfo.vanalytics.v2.TranscriptQuery.Call.AgentResponse.Numbers.lte:type_name -> google.protobuf.DoubleValue
	110, // 127: wfo.vanalytics.v2.TranscriptQuery.Call.AgentResponse.Numbers.gt:type_name -> google.protobuf.DoubleValue
	110, // 128: wfo.vanalytics.v2.TranscriptQuery.Call.AgentResponse.Numbers.lt:type_name -> google.protobuf.DoubleValue
	110, // 129: wfo.vanalytics.v2.TranscriptQuery.Call.AgentResponse.Numbers.eq:type_name -> google.protobuf.DoubleValue
	104, // 130: wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.DurationTotal.gte:type_name -> google.protobuf.Duration
	104, // 131: wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.DurationTotal.lte:type_name -> google.protobuf.Duration
	104, // 132: wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.DurationTotal.gt:type_name -> google.protobuf.Duration
	104, // 133: wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.DurationTotal.lt:type_name -> google.protobuf.Duration
	104, // 134: wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.DurationMax.gte:type_name -> google.protobuf.Duration
	104, // 135: wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.DurationMax.lte:type_name -> google.protobuf.Duration
	104, // 136: wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.DurationMax.gt:type_name -> google.protobuf.Duration
	104, // 137: wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.DurationMax.lt:type_name -> google.protobuf.Duration
	111, // 138: wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.OccurrenceTotal.gte:type_name -> google.protobuf.UInt32Value
	111, // 139: wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.OccurrenceTotal.lte:type_name -> google.protobuf.UInt32Value
	111, // 140: wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.OccurrenceTotal.gt:type_name -> google.protobuf.UInt32Value
	111, // 141: wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.OccurrenceTotal.lt:type_name -> google.protobuf.UInt32Value
	111, // 142: wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.DurationPercentage.gte:type_name -> google.protobuf.UInt32Value
	111, // 143: wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.DurationPercentage.lte:type_name -> google.protobuf.UInt32Value
	111, // 144: wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.DurationPercentage.gt:type_name -> google.protobuf.UInt32Value
	111, // 145: wfo.vanalytics.v2.TranscriptQuery.Call.TalkOver.DurationPercentage.lt:type_name -> google.protobuf.UInt32Value
	104, // 146: wfo.vanalytics.v2.TranscriptQuery.Call.Silence.DurationTotal.gte:type_name -> google.protobuf.Duration
	104, // 147: wfo.vanalytics.v2.TranscriptQuery.Call.Silence.DurationTotal.lte:type_name -> google.protobuf.Duration
	104, // 148: wfo.vanalytics.v2.TranscriptQuery.Call.Silence.DurationTotal.gt:type_name -> google.protobuf.Duration
	104, // 149: wfo.vanalytics.v2.TranscriptQuery.Call.Silence.DurationTotal.lt:type_name -> google.protobuf.Duration
	104, // 150: wfo.vanalytics.v2.TranscriptQuery.Call.Silence.DurationMax.gte:type_name -> google.protobuf.Duration
	104, // 151: wfo.vanalytics.v2.TranscriptQuery.Call.Silence.DurationMax.lte:type_name -> google.protobuf.Duration
	104, // 152: wfo.vanalytics.v2.TranscriptQuery.Call.Silence.DurationMax.gt:type_name -> google.protobuf.Duration
	104, // 153: wfo.vanalytics.v2.TranscriptQuery.Call.Silence.DurationMax.lt:type_name -> google.protobuf.Duration
	111, // 154: wfo.vanalytics.v2.TranscriptQuery.Call.Silence.OccurrenceTotal.gte:type_name -> google.protobuf.UInt32Value
	111, // 155: wfo.vanalytics.v2.TranscriptQuery.Call.Silence.OccurrenceTotal.lte:type_name -> google.protobuf.UInt32Value
	111, // 156: wfo.vanalytics.v2.TranscriptQuery.Call.Silence.OccurrenceTotal.gt:type_name -> google.protobuf.UInt32Value
	111, // 157: wfo.vanalytics.v2.TranscriptQuery.Call.Silence.OccurrenceTotal.lt:type_name -> google.protobuf.UInt32Value
	111, // 158: wfo.vanalytics.v2.TranscriptQuery.Call.Silence.DurationPercentage.gte:type_name -> google.protobuf.UInt32Value
	111, // 159: wfo.vanalytics.v2.TranscriptQuery.Call.Silence.DurationPercentage.lte:type_name -> google.protobuf.UInt32Value
	111, // 160: wfo.vanalytics.v2.TranscriptQuery.Call.Silence.DurationPercentage.gt:type_name -> google.protobuf.UInt32Value
	111, // 161: wfo.vanalytics.v2.TranscriptQuery.Call.Silence.DurationPercentage.lt:type_name -> google.protobuf.UInt32Value
	13,  // 162: wfo.vanalytics.v2.TranscriptQuery.Threads.Text.match:type_name -> wfo.vanalytics.v2.Match
	14,  // 163: wfo.vanalytics.v2.TranscriptQuery.Threads.Text.span_near:type_name -> wfo.vanalytics.v2.SpanNear
	93,  // 164: wfo.vanalytics.v2.TranscriptQuery.Threads.Text.timespan:type_name -> wfo.vanalytics.v2.TranscriptQuery.Threads.Text.Timespan
	104, // 165: wfo.vanalytics.v2.TranscriptQuery.Threads.Text.Timespan.head:type_name -> google.protobuf.Duration
	104, // 166: wfo.vanalytics.v2.TranscriptQuery.Threads.Text.Timespan.tail:type_name -> google.protobuf.Duration
	98,  // 167: wfo.vanalytics.v2.TranscriptQuery.FlagSummary.NeedReview.flag_sids:type_name -> wfo.vanalytics.v2.TranscriptQuery.FlagSummary.NeedReview.FlagSids
	1,   // 168: wfo.vanalytics.v2.TranscriptQuery.FlagSummary.ReviewStatus.any:type_name -> wfo.vanalytics.v2.ReviewStatus
	99,  // 169: wfo.vanalytics.v2.TranscriptQuery.FlagSummary.Flags.flag_sid:type_name -> wfo.vanalytics.v2.TranscriptQuery.FlagSummary.Flags.FlagSid
	109, // 170: wfo.vanalytics.v2.TranscriptQuery.FlagSummary.Count.gte:type_name -> google.protobuf.Int32Value
	109, // 171: wfo.vanalytics.v2.TranscriptQuery.FlagSummary.Count.lte:type_name -> google.protobuf.Int32Value
	109, // 172: wfo.vanalytics.v2.TranscriptQuery.FlagSummary.Count.gt:type_name -> google.protobuf.Int32Value
	109, // 173: wfo.vanalytics.v2.TranscriptQuery.FlagSummary.Count.lt:type_name -> google.protobuf.Int32Value
	109, // 174: wfo.vanalytics.v2.TranscriptQuery.FlagSummary.Count.eq:type_name -> google.protobuf.Int32Value
	14,  // 175: wfo.vanalytics.v2.SpanNear.Clause.span_near:type_name -> wfo.vanalytics.v2.SpanNear
	16,  // 176: wfo.vanalytics.v2.SpanNear.Clause.span_fuzzy:type_name -> wfo.vanalytics.v2.SpanFuzzy
	15,  // 177: wfo.vanalytics.v2.SpanNear.Clause.span_term:type_name -> wfo.vanalytics.v2.SpanTerm
	178, // [178:178] is the sub-list for method output_type
	178, // [178:178] is the sub-list for method input_type
	178, // [178:178] is the sub-list for extension type_name
	178, // [178:178] is the sub-list for extension extendee
	0,   // [0:178] is the sub-list for field type_name
}

func init() { file_wfo_vanalytics_v2_transcript_proto_init() }
func file_wfo_vanalytics_v2_transcript_proto_init() {
	if File_wfo_vanalytics_v2_transcript_proto != nil {
		return
	}
	file_wfo_vanalytics_v2_agent_call_log_proto_init()
	file_wfo_vanalytics_v2_transcript_summary_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transcript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTranscriptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Highlight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTranscriptsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptBoolQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Moment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzinessAuto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanNear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanTerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanFuzzy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkDeleteTranscriptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkDeleteTranscriptsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkRestoreTranscriptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkRestoreTranscriptsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTranscriptGroupNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTranscriptGroupNamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptGroupName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAgentResponseValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAgentResponseValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagSummary_NeedReview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagSummary_Flag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagSummary_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagSummary_Review); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sms_Phone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sms_Thread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sms_Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_Phone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_AgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_Thread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_TalkOver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_Silence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_TalkOver_Duration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_TalkOver_Occurrence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_Silence_Duration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_Silence_Occurrence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTranscriptsResponse_Hit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Phone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_TranscriptSid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Call); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Sms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Threads); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_FlagSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_StartTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_DeleteTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Phone_Cc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Phone_Ndc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Phone_Prefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Phone_City); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Phone_Iso2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Phone_RegionCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Phone_RegionName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Phone_TimeZone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Phone_Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Phone_Utc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Phone_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Phone_Raw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Phone_Location_ZipCodeProximity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Call_HuntGroupSids); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Call_AgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Call_CallType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Call_GroupName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Call_CallSid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Call_CallerId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Call_AudioTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Call_TalkTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Call_TalkOver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Call_Silence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Call_AgentResponse_Values); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Call_AgentResponse_Numbers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Call_AgentResponse_Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Call_TalkOver_DurationTotal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Call_TalkOver_DurationMax); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Call_TalkOver_OccurrenceTotal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Call_TalkOver_DurationPercentage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Call_Silence_DurationTotal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Call_Silence_DurationMax); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Call_Silence_OccurrenceTotal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Call_Silence_DurationPercentage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Sms_ConversationSid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Threads_UserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Threads_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Threads_Text); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Threads_Text_Timespan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_FlagSummary_NeedReview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_FlagSummary_ReviewStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_FlagSummary_Flags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_FlagSummary_Count); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_FlagSummary_NeedReview_FlagSids); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_FlagSummary_Flags_FlagSid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanNear_Clause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_wfo_vanalytics_v2_transcript_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Transcript_Call)(nil),
		(*Transcript_Sms)(nil),
	}
	file_wfo_vanalytics_v2_transcript_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*Match_FuzzinessAuto)(nil),
		(*Match_FuzzinessValue)(nil),
	}
	file_wfo_vanalytics_v2_transcript_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*SpanFuzzy_FuzzinessAuto)(nil),
		(*SpanFuzzy_FuzzinessValue)(nil),
	}
	file_wfo_vanalytics_v2_transcript_proto_msgTypes[98].OneofWrappers = []interface{}{
		(*SpanNear_Clause_SpanNear)(nil),
		(*SpanNear_Clause_SpanFuzzy)(nil),
		(*SpanNear_Clause_SpanTerm)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wfo_vanalytics_v2_transcript_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   99,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wfo_vanalytics_v2_transcript_proto_goTypes,
		DependencyIndexes: file_wfo_vanalytics_v2_transcript_proto_depIdxs,
		EnumInfos:         file_wfo_vanalytics_v2_transcript_proto_enumTypes,
		MessageInfos:      file_wfo_vanalytics_v2_transcript_proto_msgTypes,
	}.Build()
	File_wfo_vanalytics_v2_transcript_proto = out.File
	file_wfo_vanalytics_v2_transcript_proto_rawDesc = nil
	file_wfo_vanalytics_v2_transcript_proto_goTypes = nil
	file_wfo_vanalytics_v2_transcript_proto_depIdxs = nil
}
