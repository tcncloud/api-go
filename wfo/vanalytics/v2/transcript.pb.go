// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: wfo/vanalytics/v2/transcript.proto

package vanalyticsv2

import (
	commons "github.com/tcncloud/api-go/api/commons"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An enumeration of transcript communication channels.
type Channel int32

const (
	Channel_CHANNEL_CALL Channel = 0
	Channel_CHANNEL_SMS  Channel = 1
)

// Enum value maps for Channel.
var (
	Channel_name = map[int32]string{
		0: "CHANNEL_CALL",
		1: "CHANNEL_SMS",
	}
	Channel_value = map[string]int32{
		"CHANNEL_CALL": 0,
		"CHANNEL_SMS":  1,
	}
)

func (x Channel) Enum() *Channel {
	p := new(Channel)
	*p = x
	return p
}

func (x Channel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Channel) Descriptor() protoreflect.EnumDescriptor {
	return file_wfo_vanalytics_v2_transcript_proto_enumTypes[0].Descriptor()
}

func (Channel) Type() protoreflect.EnumType {
	return &file_wfo_vanalytics_v2_transcript_proto_enumTypes[0]
}

func (x Channel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Channel.Descriptor instead.
func (Channel) EnumDescriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{0}
}

// An enumeration of a flagged transcripts review statuses. Todo means there
// are flags that need review and have not been reviewed. Done means every flag
// that needs review has been reviewed. None means no flags require review.
type ReviewStatus int32

const (
	ReviewStatus_REVIEW_STATUS_TODO ReviewStatus = 0
	ReviewStatus_REVIEW_STATUS_DONE ReviewStatus = 1
	ReviewStatus_REVIEW_STATUS_NONE ReviewStatus = 2
)

// Enum value maps for ReviewStatus.
var (
	ReviewStatus_name = map[int32]string{
		0: "REVIEW_STATUS_TODO",
		1: "REVIEW_STATUS_DONE",
		2: "REVIEW_STATUS_NONE",
	}
	ReviewStatus_value = map[string]int32{
		"REVIEW_STATUS_TODO": 0,
		"REVIEW_STATUS_DONE": 1,
		"REVIEW_STATUS_NONE": 2,
	}
)

func (x ReviewStatus) Enum() *ReviewStatus {
	p := new(ReviewStatus)
	*p = x
	return p
}

func (x ReviewStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReviewStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_wfo_vanalytics_v2_transcript_proto_enumTypes[1].Descriptor()
}

func (ReviewStatus) Type() protoreflect.EnumType {
	return &file_wfo_vanalytics_v2_transcript_proto_enumTypes[1]
}

func (x ReviewStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReviewStatus.Descriptor instead.
func (ReviewStatus) EnumDescriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{1}
}

// A textualized interaction between two or more participants.
type Transcript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Channel specific transcript metadata.
	//
	// Types that are assignable to Metadata:
	//
	//	*Transcript_Call
	//	*Transcript_Sms
	Metadata isTranscript_Metadata `protobuf_oneof:"metadata"`
	// The communication channel of the transcript.
	Channel Channel `protobuf:"varint,12,opt,name=channel,proto3,enum=wfo.vanalytics.v2.Channel" json:"channel,omitempty"`
	// The time the transcript was started.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The time the transcript was marked as deleted.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// The flag summary of the transcript.
	FlagSummary *FlagSummary `protobuf:"bytes,16,opt,name=flag_summary,json=flagSummary,proto3" json:"flag_summary,omitempty"`
	// The unique identifier of the transcript.
	TranscriptSid int64 `protobuf:"varint,17,opt,name=transcript_sid,json=transcriptSid,proto3" json:"transcript_sid,omitempty"`
}

func (x *Transcript) Reset() {
	*x = Transcript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transcript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transcript) ProtoMessage() {}

func (x *Transcript) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transcript.ProtoReflect.Descriptor instead.
func (*Transcript) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{0}
}

func (m *Transcript) GetMetadata() isTranscript_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (x *Transcript) GetCall() *Call {
	if x, ok := x.GetMetadata().(*Transcript_Call); ok {
		return x.Call
	}
	return nil
}

func (x *Transcript) GetSms() *Sms {
	if x, ok := x.GetMetadata().(*Transcript_Sms); ok {
		return x.Sms
	}
	return nil
}

func (x *Transcript) GetChannel() Channel {
	if x != nil {
		return x.Channel
	}
	return Channel_CHANNEL_CALL
}

func (x *Transcript) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Transcript) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *Transcript) GetFlagSummary() *FlagSummary {
	if x != nil {
		return x.FlagSummary
	}
	return nil
}

func (x *Transcript) GetTranscriptSid() int64 {
	if x != nil {
		return x.TranscriptSid
	}
	return 0
}

type isTranscript_Metadata interface {
	isTranscript_Metadata()
}

type Transcript_Call struct {
	// Call specific transcript metadata.
	Call *Call `protobuf:"bytes,1,opt,name=call,proto3,oneof"`
}

type Transcript_Sms struct {
	// Sms specific transcript metadata.
	Sms *Sms `protobuf:"bytes,2,opt,name=sms,proto3,oneof"`
}

func (*Transcript_Call) isTranscript_Metadata() {}

func (*Transcript_Sms) isTranscript_Metadata() {}

// FlagSummary defines a summary of flags which were applied to a transcript.
type FlagSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of flags associated with the transcript.
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// The sum of the priorities of the flags associated with the transcript.
	PrioritySum int32 `protobuf:"varint,2,opt,name=priority_sum,json=prioritySum,proto3" json:"priority_sum,omitempty"`
	// The highest priority of the flags associated with the transcript.
	PriorityMax int32 `protobuf:"varint,3,opt,name=priority_max,json=priorityMax,proto3" json:"priority_max,omitempty"`
	// Need Review provides info on the flags that need review.
	NeedReview *FlagSummary_NeedReview `protobuf:"bytes,4,opt,name=need_review,json=needReview,proto3" json:"need_review,omitempty"`
	// Flags contain the flags and filters that are associated with the transcript.
	Flags []*FlagSummary_Flag `protobuf:"bytes,5,rep,name=flags,proto3" json:"flags,omitempty"`
	// The review status of the flagged transcript.
	ReviewStatus ReviewStatus `protobuf:"varint,6,opt,name=review_status,json=reviewStatus,proto3,enum=wfo.vanalytics.v2.ReviewStatus" json:"review_status,omitempty"`
}

func (x *FlagSummary) Reset() {
	*x = FlagSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagSummary) ProtoMessage() {}

func (x *FlagSummary) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagSummary.ProtoReflect.Descriptor instead.
func (*FlagSummary) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{1}
}

func (x *FlagSummary) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FlagSummary) GetPrioritySum() int32 {
	if x != nil {
		return x.PrioritySum
	}
	return 0
}

func (x *FlagSummary) GetPriorityMax() int32 {
	if x != nil {
		return x.PriorityMax
	}
	return 0
}

func (x *FlagSummary) GetNeedReview() *FlagSummary_NeedReview {
	if x != nil {
		return x.NeedReview
	}
	return nil
}

func (x *FlagSummary) GetFlags() []*FlagSummary_Flag {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *FlagSummary) GetReviewStatus() ReviewStatus {
	if x != nil {
		return x.ReviewStatus
	}
	return ReviewStatus_REVIEW_STATUS_TODO
}

// Sms specific transcript metadata.
type Sms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the sms conversation.
	ConversationSid int64 `protobuf:"varint,1,opt,name=conversation_sid,json=conversationSid,proto3" json:"conversation_sid,omitempty"`
	// The text from the sms in threads.
	Threads []*Sms_Thread `protobuf:"bytes,2,rep,name=threads,proto3" json:"threads,omitempty"`
}

func (x *Sms) Reset() {
	*x = Sms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sms) ProtoMessage() {}

func (x *Sms) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sms.ProtoReflect.Descriptor instead.
func (*Sms) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{2}
}

func (x *Sms) GetConversationSid() int64 {
	if x != nil {
		return x.ConversationSid
	}
	return 0
}

func (x *Sms) GetThreads() []*Sms_Thread {
	if x != nil {
		return x.Threads
	}
	return nil
}

// Call specific transcript metadata.
type Call struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for the call.
	CallSid int64 `protobuf:"varint,1,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	// The type of call.
	CallType commons.CallType_Enum `protobuf:"varint,2,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
	// The total audio time of a call.
	AudioTime uint32 `protobuf:"varint,3,opt,name=audio_time,json=audioTime,proto3" json:"audio_time,omitempty"`
	// The text from the call in threads.
	Threads []*Call_Thread `protobuf:"bytes,4,rep,name=threads,proto3" json:"threads,omitempty"`
}

func (x *Call) Reset() {
	*x = Call{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call) ProtoMessage() {}

func (x *Call) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call.ProtoReflect.Descriptor instead.
func (*Call) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{3}
}

func (x *Call) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *Call) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

func (x *Call) GetAudioTime() uint32 {
	if x != nil {
		return x.AudioTime
	}
	return 0
}

func (x *Call) GetThreads() []*Call_Thread {
	if x != nil {
		return x.Threads
	}
	return nil
}

// The request for the search transcripts RPC.
type SearchTranscriptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of hits to include in response. Defaults to 10.
	PageSize uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The order by which transcripts will be listed. Follows SQL order by
	// syntax. When not provided the order defaults to transcript_sid asc.
	OrderBy string `protobuf:"bytes,3,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// A field mask which defines which transcript fields to return. When empty
	// all transcript fields will be returned.
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// Query by which to filter transcripts.
	BoolQuery *TranscriptBoolQuery `protobuf:"bytes,5,opt,name=bool_query,json=boolQuery,proto3" json:"bool_query,omitempty"`
	// The next page token from a previous response.
	PageToken string `protobuf:"bytes,6,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Configuration to enable and control text highlights.
	Highlight *Highlight `protobuf:"bytes,7,opt,name=highlight,proto3" json:"highlight,omitempty"`
}

func (x *SearchTranscriptsRequest) Reset() {
	*x = SearchTranscriptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTranscriptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTranscriptsRequest) ProtoMessage() {}

func (x *SearchTranscriptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTranscriptsRequest.ProtoReflect.Descriptor instead.
func (*SearchTranscriptsRequest) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{4}
}

func (x *SearchTranscriptsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchTranscriptsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *SearchTranscriptsRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *SearchTranscriptsRequest) GetBoolQuery() *TranscriptBoolQuery {
	if x != nil {
		return x.BoolQuery
	}
	return nil
}

func (x *SearchTranscriptsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *SearchTranscriptsRequest) GetHighlight() *Highlight {
	if x != nil {
		return x.Highlight
	}
	return nil
}

// Configuration to enable and control text highlights.
type Highlight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The prefix for highlighted text. Defaults to "{{" when empty.
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// The suffix for highlighted text. Defaults to "}}" when empty.
	Suffix string `protobuf:"bytes,2,opt,name=suffix,proto3" json:"suffix,omitempty"`
}

func (x *Highlight) Reset() {
	*x = Highlight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Highlight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Highlight) ProtoMessage() {}

func (x *Highlight) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Highlight.ProtoReflect.Descriptor instead.
func (*Highlight) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{5}
}

func (x *Highlight) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Highlight) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

// The response for the search transcripts RPC.
type SearchTranscriptsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One page of search response hits.
	Hits []*SearchTranscriptsResponse_Hit `protobuf:"bytes,1,rep,name=hits,proto3" json:"hits,omitempty"`
	// A page token which can be provided on a follow up request to retrieve the
	// next page of transcript hits.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *SearchTranscriptsResponse) Reset() {
	*x = SearchTranscriptsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTranscriptsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTranscriptsResponse) ProtoMessage() {}

func (x *SearchTranscriptsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTranscriptsResponse.ProtoReflect.Descriptor instead.
func (*SearchTranscriptsResponse) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{6}
}

func (x *SearchTranscriptsResponse) GetHits() []*SearchTranscriptsResponse_Hit {
	if x != nil {
		return x.Hits
	}
	return nil
}

func (x *SearchTranscriptsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Boolean query to filter transcripts.
type TranscriptBoolQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query constraints on transcript.
	Transcript *TranscriptQuery `protobuf:"bytes,1,opt,name=transcript,proto3" json:"transcript,omitempty"`
}

func (x *TranscriptBoolQuery) Reset() {
	*x = TranscriptBoolQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptBoolQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptBoolQuery) ProtoMessage() {}

func (x *TranscriptBoolQuery) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptBoolQuery.ProtoReflect.Descriptor instead.
func (*TranscriptBoolQuery) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{7}
}

func (x *TranscriptBoolQuery) GetTranscript() *TranscriptQuery {
	if x != nil {
		return x.Transcript
	}
	return nil
}

// Query to filter transcripts.
type TranscriptQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query constraints on transcript sid.
	TranscriptSid *TranscriptQuery_TranscriptSid `protobuf:"bytes,1,opt,name=transcript_sid,json=transcriptSid,proto3" json:"transcript_sid,omitempty"`
	// Query constraints on channel.
	Channel *TranscriptQuery_Channel `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	// Query constraints on metadata.
	Metadata *TranscriptQuery_Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Query constraints on threads.
	Threads *TranscriptQuery_Threads `protobuf:"bytes,4,opt,name=threads,proto3" json:"threads,omitempty"`
}

func (x *TranscriptQuery) Reset() {
	*x = TranscriptQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery) ProtoMessage() {}

func (x *TranscriptQuery) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery.ProtoReflect.Descriptor instead.
func (*TranscriptQuery) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8}
}

func (x *TranscriptQuery) GetTranscriptSid() *TranscriptQuery_TranscriptSid {
	if x != nil {
		return x.TranscriptSid
	}
	return nil
}

func (x *TranscriptQuery) GetChannel() *TranscriptQuery_Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TranscriptQuery) GetMetadata() *TranscriptQuery_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TranscriptQuery) GetThreads() *TranscriptQuery_Threads {
	if x != nil {
		return x.Threads
	}
	return nil
}

// Defines an automatic max allowable edit distance based on the length of the
// text to match.
//
// length  <  low -- Must match exactly.
// length  < high -- Must match with one edit allowed.
// length >= high -- Must match with two edits allowed.
type FuzzinessAuto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The low length threshold.
	Low uint32 `protobuf:"varint,1,opt,name=low,proto3" json:"low,omitempty"`
	// The high length threshold.
	High uint32 `protobuf:"varint,2,opt,name=high,proto3" json:"high,omitempty"`
}

func (x *FuzzinessAuto) Reset() {
	*x = FuzzinessAuto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzinessAuto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzinessAuto) ProtoMessage() {}

func (x *FuzzinessAuto) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzinessAuto.ProtoReflect.Descriptor instead.
func (*FuzzinessAuto) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{9}
}

func (x *FuzzinessAuto) GetLow() uint32 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *FuzzinessAuto) GetHigh() uint32 {
	if x != nil {
		return x.High
	}
	return 0
}

// Query text terms with optional fuzziness.
type Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The text to be matched. The field may contain multiple terms
	// to match when separated by spaces.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// Determines whether any or all of the terms must be matched. Operator must
	// be one of: (AND, OR). Defaults to OR when empty.
	Operator string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	// Fuzziness controls the maximum edit distance that a similar term can have
	// and be considered a match. For example, the edit distance between cat and
	// bat would be 1 since only one letter is different. The edit distance
	// between unity and united would be 2. Fuzziness auto is recommended.
	//
	// Types that are assignable to Fuzziness:
	//
	//	*Match_FuzzinessAuto
	//	*Match_FuzzinessValue
	Fuzziness isMatch_Fuzziness `protobuf_oneof:"fuzziness"`
}

func (x *Match) Reset() {
	*x = Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{10}
}

func (x *Match) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Match) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (m *Match) GetFuzziness() isMatch_Fuzziness {
	if m != nil {
		return m.Fuzziness
	}
	return nil
}

func (x *Match) GetFuzzinessAuto() *FuzzinessAuto {
	if x, ok := x.GetFuzziness().(*Match_FuzzinessAuto); ok {
		return x.FuzzinessAuto
	}
	return nil
}

func (x *Match) GetFuzzinessValue() uint32 {
	if x, ok := x.GetFuzziness().(*Match_FuzzinessValue); ok {
		return x.FuzzinessValue
	}
	return 0
}

type isMatch_Fuzziness interface {
	isMatch_Fuzziness()
}

type Match_FuzzinessAuto struct {
	// Variable fuzziness based on the match term length.
	FuzzinessAuto *FuzzinessAuto `protobuf:"bytes,15,opt,name=fuzziness_auto,json=fuzzinessAuto,proto3,oneof"`
}

type Match_FuzzinessValue struct {
	// Constant fuzziness with allowed range from 0, 1 and 2.
	FuzzinessValue uint32 `protobuf:"varint,16,opt,name=fuzziness_value,json=fuzzinessValue,proto3,oneof"`
}

func (*Match_FuzzinessAuto) isMatch_Fuzziness() {}

func (*Match_FuzzinessValue) isMatch_Fuzziness() {}

// Query which matches a list of clauses that are near to each other.
type SpanNear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of allowed non matching terms within the span. For example, a
	// slop of 2 when searching for "This is my dog" would allow a match on
	// "This is my quick brown dog".
	Slop int32 `protobuf:"varint,1,opt,name=slop,proto3" json:"slop,omitempty"`
	// Requires clauses to be matched in the order.
	InOrder bool `protobuf:"varint,2,opt,name=in_order,json=inOrder,proto3" json:"in_order,omitempty"`
	// Required. The clauses to be matched.
	Clauses []*SpanNear_Clause `protobuf:"bytes,3,rep,name=clauses,proto3" json:"clauses,omitempty"`
}

func (x *SpanNear) Reset() {
	*x = SpanNear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanNear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanNear) ProtoMessage() {}

func (x *SpanNear) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanNear.ProtoReflect.Descriptor instead.
func (*SpanNear) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{11}
}

func (x *SpanNear) GetSlop() int32 {
	if x != nil {
		return x.Slop
	}
	return 0
}

func (x *SpanNear) GetInOrder() bool {
	if x != nil {
		return x.InOrder
	}
	return false
}

func (x *SpanNear) GetClauses() []*SpanNear_Clause {
	if x != nil {
		return x.Clauses
	}
	return nil
}

// Query which matches a span term exactly.
type SpanTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The value to be matched.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SpanTerm) Reset() {
	*x = SpanTerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanTerm) ProtoMessage() {}

func (x *SpanTerm) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanTerm.ProtoReflect.Descriptor instead.
func (*SpanTerm) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{12}
}

func (x *SpanTerm) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Query which matches a span term with fuzziness.
type SpanFuzzy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The value to be fuzzy matched.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Fuzziness controls the maximum edit distance that a similar term can have
	// and be considered a match. For example, the edit distance between cat and
	// bat would be 1 since only one letter is different. The edit distance
	// between unity and united would be 2. Fuzziness auto is recommended.
	//
	// Types that are assignable to Fuzziness:
	//
	//	*SpanFuzzy_FuzzinessAuto
	//	*SpanFuzzy_FuzzinessValue
	Fuzziness isSpanFuzzy_Fuzziness `protobuf_oneof:"fuzziness"`
}

func (x *SpanFuzzy) Reset() {
	*x = SpanFuzzy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanFuzzy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanFuzzy) ProtoMessage() {}

func (x *SpanFuzzy) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanFuzzy.ProtoReflect.Descriptor instead.
func (*SpanFuzzy) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{13}
}

func (x *SpanFuzzy) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (m *SpanFuzzy) GetFuzziness() isSpanFuzzy_Fuzziness {
	if m != nil {
		return m.Fuzziness
	}
	return nil
}

func (x *SpanFuzzy) GetFuzzinessAuto() *FuzzinessAuto {
	if x, ok := x.GetFuzziness().(*SpanFuzzy_FuzzinessAuto); ok {
		return x.FuzzinessAuto
	}
	return nil
}

func (x *SpanFuzzy) GetFuzzinessValue() uint32 {
	if x, ok := x.GetFuzziness().(*SpanFuzzy_FuzzinessValue); ok {
		return x.FuzzinessValue
	}
	return 0
}

type isSpanFuzzy_Fuzziness interface {
	isSpanFuzzy_Fuzziness()
}

type SpanFuzzy_FuzzinessAuto struct {
	// Variable fuzziness based on the match term length.
	FuzzinessAuto *FuzzinessAuto `protobuf:"bytes,10,opt,name=fuzziness_auto,json=fuzzinessAuto,proto3,oneof"`
}

type SpanFuzzy_FuzzinessValue struct {
	// Constant fuzziness with allowed range from 0, 1 and 2.
	FuzzinessValue uint32 `protobuf:"varint,11,opt,name=fuzziness_value,json=fuzzinessValue,proto3,oneof"`
}

func (*SpanFuzzy_FuzzinessAuto) isSpanFuzzy_Fuzziness() {}

func (*SpanFuzzy_FuzzinessValue) isSpanFuzzy_Fuzziness() {}

// NeedReview defines flags which need to be reviewed.
type FlagSummary_NeedReview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sum of the priorities of the flags that need review.
	PrioritySum int32 `protobuf:"varint,1,opt,name=priority_sum,json=prioritySum,proto3" json:"priority_sum,omitempty"`
	// The highest priority of the flags that need review.
	PriorityMax int32 `protobuf:"varint,2,opt,name=priority_max,json=priorityMax,proto3" json:"priority_max,omitempty"`
	// The number of flags that need review.
	Count int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	// The Flag sids that need review.
	FlagSids []int64 `protobuf:"varint,4,rep,packed,name=flag_sids,json=flagSids,proto3" json:"flag_sids,omitempty"`
}

func (x *FlagSummary_NeedReview) Reset() {
	*x = FlagSummary_NeedReview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagSummary_NeedReview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagSummary_NeedReview) ProtoMessage() {}

func (x *FlagSummary_NeedReview) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagSummary_NeedReview.ProtoReflect.Descriptor instead.
func (*FlagSummary_NeedReview) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{1, 0}
}

func (x *FlagSummary_NeedReview) GetPrioritySum() int32 {
	if x != nil {
		return x.PrioritySum
	}
	return 0
}

func (x *FlagSummary_NeedReview) GetPriorityMax() int32 {
	if x != nil {
		return x.PriorityMax
	}
	return 0
}

func (x *FlagSummary_NeedReview) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FlagSummary_NeedReview) GetFlagSids() []int64 {
	if x != nil {
		return x.FlagSids
	}
	return nil
}

// Flag defines a flag that was applied to a transcript by one or more filters
// along with a user review when one exists.
type FlagSummary_Flag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique id of this flag.
	FlagSid int64 `protobuf:"varint,1,opt,name=flag_sid,json=flagSid,proto3" json:"flag_sid,omitempty"`
	// The name of this flag.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The priority of this flag.
	Priority int32 `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	// The version of this flag.
	Version int64 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	// Filters which applied this flag.
	Filters []*FlagSummary_Filter `protobuf:"bytes,5,rep,name=filters,proto3" json:"filters,omitempty"`
	// Determines whether this flag must be reviewed.
	MustReview bool `protobuf:"varint,6,opt,name=must_review,json=mustReview,proto3" json:"must_review,omitempty"`
	// Determines whether this flag must be notified.
	MustNotify bool `protobuf:"varint,7,opt,name=must_notify,json=mustNotify,proto3" json:"must_notify,omitempty"`
	// The reviews of this flag.
	Reviews []*FlagSummary_Review `protobuf:"bytes,8,rep,name=reviews,proto3" json:"reviews,omitempty"`
}

func (x *FlagSummary_Flag) Reset() {
	*x = FlagSummary_Flag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagSummary_Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagSummary_Flag) ProtoMessage() {}

func (x *FlagSummary_Flag) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagSummary_Flag.ProtoReflect.Descriptor instead.
func (*FlagSummary_Flag) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{1, 1}
}

func (x *FlagSummary_Flag) GetFlagSid() int64 {
	if x != nil {
		return x.FlagSid
	}
	return 0
}

func (x *FlagSummary_Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlagSummary_Flag) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *FlagSummary_Flag) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *FlagSummary_Flag) GetFilters() []*FlagSummary_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *FlagSummary_Flag) GetMustReview() bool {
	if x != nil {
		return x.MustReview
	}
	return false
}

func (x *FlagSummary_Flag) GetMustNotify() bool {
	if x != nil {
		return x.MustNotify
	}
	return false
}

func (x *FlagSummary_Flag) GetReviews() []*FlagSummary_Review {
	if x != nil {
		return x.Reviews
	}
	return nil
}

// Filter defines a filter which applied some flag to some transcript.
type FlagSummary_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The join key in form [flag_sid:filter_sid].
	JoinKey string `protobuf:"bytes,1,opt,name=join_key,json=joinKey,proto3" json:"join_key,omitempty"`
	// The flag sid this filter belongs to.
	FlagSid int64 `protobuf:"varint,2,opt,name=flag_sid,json=flagSid,proto3" json:"flag_sid,omitempty"`
	// The unique id of this filter.
	FilterSid int64 `protobuf:"varint,3,opt,name=filter_sid,json=filterSid,proto3" json:"filter_sid,omitempty"`
	// The version of this filter.
	Version int64 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	// The name of this filter.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FlagSummary_Filter) Reset() {
	*x = FlagSummary_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagSummary_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagSummary_Filter) ProtoMessage() {}

func (x *FlagSummary_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagSummary_Filter.ProtoReflect.Descriptor instead.
func (*FlagSummary_Filter) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{1, 2}
}

func (x *FlagSummary_Filter) GetJoinKey() string {
	if x != nil {
		return x.JoinKey
	}
	return ""
}

func (x *FlagSummary_Filter) GetFlagSid() int64 {
	if x != nil {
		return x.FlagSid
	}
	return 0
}

func (x *FlagSummary_Filter) GetFilterSid() int64 {
	if x != nil {
		return x.FilterSid
	}
	return 0
}

func (x *FlagSummary_Filter) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *FlagSummary_Filter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Review contains info on the flag review when one exists.
type FlagSummary_Review struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The join key in form [flag_sid:user_id].
	JoinKey string `protobuf:"bytes,1,opt,name=join_key,json=joinKey,proto3" json:"join_key,omitempty"`
	// The flag sid this review belongs to.
	FlagSid int64 `protobuf:"varint,2,opt,name=flag_sid,json=flagSid,proto3" json:"flag_sid,omitempty"`
	// The user id of the reviewer.
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *FlagSummary_Review) Reset() {
	*x = FlagSummary_Review{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagSummary_Review) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagSummary_Review) ProtoMessage() {}

func (x *FlagSummary_Review) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagSummary_Review.ProtoReflect.Descriptor instead.
func (*FlagSummary_Review) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{1, 3}
}

func (x *FlagSummary_Review) GetJoinKey() string {
	if x != nil {
		return x.JoinKey
	}
	return ""
}

func (x *FlagSummary_Review) GetFlagSid() int64 {
	if x != nil {
		return x.FlagSid
	}
	return 0
}

func (x *FlagSummary_Review) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// A thread is the text from one participant.
type Sms_Thread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the thread.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The text of the thread in segments.
	Segments []*Sms_Segment `protobuf:"bytes,2,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *Sms_Thread) Reset() {
	*x = Sms_Thread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sms_Thread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sms_Thread) ProtoMessage() {}

func (x *Sms_Thread) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sms_Thread.ProtoReflect.Descriptor instead.
func (*Sms_Thread) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Sms_Thread) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Sms_Thread) GetSegments() []*Sms_Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

// A segment of text.
type Sms_Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Sms_Segment) Reset() {
	*x = Sms_Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sms_Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sms_Segment) ProtoMessage() {}

func (x *Sms_Segment) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sms_Segment.ProtoReflect.Descriptor instead.
func (*Sms_Segment) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Sms_Segment) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// A thread is the text from one participant.
type Call_Thread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the thread.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The text of the thread in segments.
	Segments []*Call_Segment `protobuf:"bytes,2,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *Call_Thread) Reset() {
	*x = Call_Thread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_Thread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_Thread) ProtoMessage() {}

func (x *Call_Thread) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_Thread.ProtoReflect.Descriptor instead.
func (*Call_Thread) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Call_Thread) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Call_Thread) GetSegments() []*Call_Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

// A segment of text.
type Call_Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Call_Segment) Reset() {
	*x = Call_Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_Segment) ProtoMessage() {}

func (x *Call_Segment) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_Segment.ProtoReflect.Descriptor instead.
func (*Call_Segment) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Call_Segment) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// A search response hit.
type SearchTranscriptsResponse_Hit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A transcript which matched the transcript query.
	Transcript *Transcript `protobuf:"bytes,1,opt,name=transcript,proto3" json:"transcript,omitempty"`
}

func (x *SearchTranscriptsResponse_Hit) Reset() {
	*x = SearchTranscriptsResponse_Hit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTranscriptsResponse_Hit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTranscriptsResponse_Hit) ProtoMessage() {}

func (x *SearchTranscriptsResponse_Hit) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTranscriptsResponse_Hit.ProtoReflect.Descriptor instead.
func (*SearchTranscriptsResponse_Hit) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{6, 0}
}

func (x *SearchTranscriptsResponse_Hit) GetTranscript() *Transcript {
	if x != nil {
		return x.Transcript
	}
	return nil
}

// Query constraints on transcript sid.
type TranscriptQuery_TranscriptSid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requires all transcript hits to have a transcript sid in the list.
	Any []int64 `protobuf:"varint,1,rep,packed,name=any,proto3" json:"any,omitempty"`
}

func (x *TranscriptQuery_TranscriptSid) Reset() {
	*x = TranscriptQuery_TranscriptSid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_TranscriptSid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_TranscriptSid) ProtoMessage() {}

func (x *TranscriptQuery_TranscriptSid) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_TranscriptSid.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_TranscriptSid) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 0}
}

func (x *TranscriptQuery_TranscriptSid) GetAny() []int64 {
	if x != nil {
		return x.Any
	}
	return nil
}

// Query constraints on channel.
type TranscriptQuery_Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requires all transcript hits to have a channel in the list.
	Any []Channel `protobuf:"varint,1,rep,packed,name=any,proto3,enum=wfo.vanalytics.v2.Channel" json:"any,omitempty"`
}

func (x *TranscriptQuery_Channel) Reset() {
	*x = TranscriptQuery_Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Channel) ProtoMessage() {}

func (x *TranscriptQuery_Channel) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Channel.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Channel) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 1}
}

func (x *TranscriptQuery_Channel) GetAny() []Channel {
	if x != nil {
		return x.Any
	}
	return nil
}

// Query constraints on metadata.
type TranscriptQuery_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query constraints on call metadata.
	Call *TranscriptQuery_Call `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"`
	// Query constraints on sms metadata.
	Sms *TranscriptQuery_Sms `protobuf:"bytes,2,opt,name=sms,proto3" json:"sms,omitempty"`
}

func (x *TranscriptQuery_Metadata) Reset() {
	*x = TranscriptQuery_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Metadata) ProtoMessage() {}

func (x *TranscriptQuery_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Metadata.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Metadata) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 2}
}

func (x *TranscriptQuery_Metadata) GetCall() *TranscriptQuery_Call {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *TranscriptQuery_Metadata) GetSms() *TranscriptQuery_Sms {
	if x != nil {
		return x.Sms
	}
	return nil
}

// Query constraints on call metadata.
type TranscriptQuery_Call struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query constraints on call sid.
	CallSid *TranscriptQuery_Call_CallSid `protobuf:"bytes,1,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	// Query constraints on audio time.
	AudioTime *TranscriptQuery_Call_AudioTime `protobuf:"bytes,2,opt,name=audio_time,json=audioTime,proto3" json:"audio_time,omitempty"`
	// Query constraints on call type.
	CallType *TranscriptQuery_Call_CallType `protobuf:"bytes,3,opt,name=call_type,json=callType,proto3" json:"call_type,omitempty"`
}

func (x *TranscriptQuery_Call) Reset() {
	*x = TranscriptQuery_Call{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Call) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Call) ProtoMessage() {}

func (x *TranscriptQuery_Call) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Call.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Call) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 3}
}

func (x *TranscriptQuery_Call) GetCallSid() *TranscriptQuery_Call_CallSid {
	if x != nil {
		return x.CallSid
	}
	return nil
}

func (x *TranscriptQuery_Call) GetAudioTime() *TranscriptQuery_Call_AudioTime {
	if x != nil {
		return x.AudioTime
	}
	return nil
}

func (x *TranscriptQuery_Call) GetCallType() *TranscriptQuery_Call_CallType {
	if x != nil {
		return x.CallType
	}
	return nil
}

// Query constraints on sms metadata.
type TranscriptQuery_Sms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query constraints on conversation sid.
	ConversationSid *TranscriptQuery_Sms_ConversationSid `protobuf:"bytes,1,opt,name=conversation_sid,json=conversationSid,proto3" json:"conversation_sid,omitempty"`
}

func (x *TranscriptQuery_Sms) Reset() {
	*x = TranscriptQuery_Sms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Sms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Sms) ProtoMessage() {}

func (x *TranscriptQuery_Sms) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Sms.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Sms) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 4}
}

func (x *TranscriptQuery_Sms) GetConversationSid() *TranscriptQuery_Sms_ConversationSid {
	if x != nil {
		return x.ConversationSid
	}
	return nil
}

// Query constraints on threads.
type TranscriptQuery_Threads struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query constraints on thread id.
	Id *TranscriptQuery_Threads_Id `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// Query constraints on thread text.
	Text *TranscriptQuery_Threads_Text `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TranscriptQuery_Threads) Reset() {
	*x = TranscriptQuery_Threads{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Threads) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Threads) ProtoMessage() {}

func (x *TranscriptQuery_Threads) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Threads.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Threads) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 5}
}

func (x *TranscriptQuery_Threads) GetId() *TranscriptQuery_Threads_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TranscriptQuery_Threads) GetText() *TranscriptQuery_Threads_Text {
	if x != nil {
		return x.Text
	}
	return nil
}

// Query constraints on call type.
type TranscriptQuery_Call_CallType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requires all call specific transcript hits to have a call type in the
	// list.
	Any []commons.CallType_Enum `protobuf:"varint,1,rep,packed,name=any,proto3,enum=api.commons.CallType_Enum" json:"any,omitempty"`
}

func (x *TranscriptQuery_Call_CallType) Reset() {
	*x = TranscriptQuery_Call_CallType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Call_CallType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Call_CallType) ProtoMessage() {}

func (x *TranscriptQuery_Call_CallType) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Call_CallType.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Call_CallType) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 3, 0}
}

func (x *TranscriptQuery_Call_CallType) GetAny() []commons.CallType_Enum {
	if x != nil {
		return x.Any
	}
	return nil
}

// Query constraints on call sid.
type TranscriptQuery_Call_CallSid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requires all call specific transcript hits to have a call sid in the
	// list.
	Any []int64 `protobuf:"varint,1,rep,packed,name=any,proto3" json:"any,omitempty"`
}

func (x *TranscriptQuery_Call_CallSid) Reset() {
	*x = TranscriptQuery_Call_CallSid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Call_CallSid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Call_CallSid) ProtoMessage() {}

func (x *TranscriptQuery_Call_CallSid) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Call_CallSid.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Call_CallSid) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 3, 1}
}

func (x *TranscriptQuery_Call_CallSid) GetAny() []int64 {
	if x != nil {
		return x.Any
	}
	return nil
}

// Query constraints on audio time.
type TranscriptQuery_Call_AudioTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Queries where greater than or equal.
	Gte *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=gte,proto3" json:"gte,omitempty"`
	// Queries where less than or equal.
	Lte *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=lte,proto3" json:"lte,omitempty"`
	// Queries where greater than.
	Gt *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=gt,proto3" json:"gt,omitempty"`
	// Queries where less than.
	Lt *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=lt,proto3" json:"lt,omitempty"`
}

func (x *TranscriptQuery_Call_AudioTime) Reset() {
	*x = TranscriptQuery_Call_AudioTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Call_AudioTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Call_AudioTime) ProtoMessage() {}

func (x *TranscriptQuery_Call_AudioTime) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Call_AudioTime.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Call_AudioTime) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 3, 2}
}

func (x *TranscriptQuery_Call_AudioTime) GetGte() *wrapperspb.Int32Value {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *TranscriptQuery_Call_AudioTime) GetLte() *wrapperspb.Int32Value {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *TranscriptQuery_Call_AudioTime) GetGt() *wrapperspb.Int32Value {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *TranscriptQuery_Call_AudioTime) GetLt() *wrapperspb.Int32Value {
	if x != nil {
		return x.Lt
	}
	return nil
}

// Query constraints on conversation sid.
type TranscriptQuery_Sms_ConversationSid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requires all sms specific transcript hits to have a conversation sid
	// in the list.
	Any []int64 `protobuf:"varint,1,rep,packed,name=any,proto3" json:"any,omitempty"`
}

func (x *TranscriptQuery_Sms_ConversationSid) Reset() {
	*x = TranscriptQuery_Sms_ConversationSid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Sms_ConversationSid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Sms_ConversationSid) ProtoMessage() {}

func (x *TranscriptQuery_Sms_ConversationSid) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Sms_ConversationSid.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Sms_ConversationSid) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 4, 0}
}

func (x *TranscriptQuery_Sms_ConversationSid) GetAny() []int64 {
	if x != nil {
		return x.Any
	}
	return nil
}

// Query constraints on thread id.
type TranscriptQuery_Threads_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requires all transcript hits to have a thread id in the list.
	Any []int32 `protobuf:"varint,1,rep,packed,name=any,proto3" json:"any,omitempty"`
}

func (x *TranscriptQuery_Threads_Id) Reset() {
	*x = TranscriptQuery_Threads_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Threads_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Threads_Id) ProtoMessage() {}

func (x *TranscriptQuery_Threads_Id) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Threads_Id.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Threads_Id) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 5, 0}
}

func (x *TranscriptQuery_Threads_Id) GetAny() []int32 {
	if x != nil {
		return x.Any
	}
	return nil
}

// Query constraints on thread text.
type TranscriptQuery_Threads_Text struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query text terms with optional fuzziness.
	Match *Match `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	// Query text phrases.
	SpanNear *SpanNear `protobuf:"bytes,2,opt,name=span_near,json=spanNear,proto3" json:"span_near,omitempty"`
}

func (x *TranscriptQuery_Threads_Text) Reset() {
	*x = TranscriptQuery_Threads_Text{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptQuery_Threads_Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptQuery_Threads_Text) ProtoMessage() {}

func (x *TranscriptQuery_Threads_Text) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptQuery_Threads_Text.ProtoReflect.Descriptor instead.
func (*TranscriptQuery_Threads_Text) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{8, 5, 1}
}

func (x *TranscriptQuery_Threads_Text) GetMatch() *Match {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *TranscriptQuery_Threads_Text) GetSpanNear() *SpanNear {
	if x != nil {
		return x.SpanNear
	}
	return nil
}

// Generic clause for use in span near queries.
type SpanNear_Clause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Generic clause matcher.
	//
	// Types that are assignable to Match:
	//
	//	*SpanNear_Clause_SpanNear
	//	*SpanNear_Clause_SpanFuzzy
	//	*SpanNear_Clause_SpanTerm
	Match isSpanNear_Clause_Match `protobuf_oneof:"match"`
}

func (x *SpanNear_Clause) Reset() {
	*x = SpanNear_Clause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanNear_Clause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanNear_Clause) ProtoMessage() {}

func (x *SpanNear_Clause) ProtoReflect() protoreflect.Message {
	mi := &file_wfo_vanalytics_v2_transcript_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanNear_Clause.ProtoReflect.Descriptor instead.
func (*SpanNear_Clause) Descriptor() ([]byte, []int) {
	return file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP(), []int{11, 0}
}

func (m *SpanNear_Clause) GetMatch() isSpanNear_Clause_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (x *SpanNear_Clause) GetSpanNear() *SpanNear {
	if x, ok := x.GetMatch().(*SpanNear_Clause_SpanNear); ok {
		return x.SpanNear
	}
	return nil
}

func (x *SpanNear_Clause) GetSpanFuzzy() *SpanFuzzy {
	if x, ok := x.GetMatch().(*SpanNear_Clause_SpanFuzzy); ok {
		return x.SpanFuzzy
	}
	return nil
}

func (x *SpanNear_Clause) GetSpanTerm() *SpanTerm {
	if x, ok := x.GetMatch().(*SpanNear_Clause_SpanTerm); ok {
		return x.SpanTerm
	}
	return nil
}

type isSpanNear_Clause_Match interface {
	isSpanNear_Clause_Match()
}

type SpanNear_Clause_SpanNear struct {
	// A span near clause to match a phrase.
	SpanNear *SpanNear `protobuf:"bytes,1,opt,name=span_near,json=spanNear,proto3,oneof"`
}

type SpanNear_Clause_SpanFuzzy struct {
	// A span near clause to match a fuzzy term.
	SpanFuzzy *SpanFuzzy `protobuf:"bytes,2,opt,name=span_fuzzy,json=spanFuzzy,proto3,oneof"`
}

type SpanNear_Clause_SpanTerm struct {
	// A span near clause to match a term.
	SpanTerm *SpanTerm `protobuf:"bytes,3,opt,name=span_term,json=spanTerm,proto3,oneof"`
}

func (*SpanNear_Clause_SpanNear) isSpanNear_Clause_Match() {}

func (*SpanNear_Clause_SpanFuzzy) isSpanNear_Clause_Match() {}

func (*SpanNear_Clause_SpanTerm) isSpanNear_Clause_Match() {}

var File_wfo_vanalytics_v2_transcript_proto protoreflect.FileDescriptor

var file_wfo_vanalytics_v2_transcript_proto_rawDesc = []byte{
	0x0a, 0x22, 0x77, 0x66, 0x6f, 0x2f, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2f, 0x76, 0x32, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x91, 0x03, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x12, 0x2d, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12,
	0x2a, 0x0a, 0x03, 0x73, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77,
	0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x03, 0x73, 0x6d, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x77,
	0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x66, 0x6c, 0x61,
	0x67, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x0b, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x53, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4a,
	0x04, 0x08, 0x0b, 0x10, 0x0c, 0x22, 0xd7, 0x07, 0x0a, 0x0b, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x61,
	0x78, 0x12, 0x4a, 0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x39, 0x0a,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x77,
	0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6c, 0x61,
	0x67, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x85,
	0x01, 0x0a, 0x0a, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x75, 0x6d,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x4d, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x61,
	0x67, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x66, 0x6c,
	0x61, 0x67, 0x53, 0x69, 0x64, 0x73, 0x1a, 0xaf, 0x02, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x19, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x75, 0x73, 0x74,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x75, 0x73,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x6c, 0x61,
	0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52,
	0x07, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x1a, 0x8b, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x57, 0x0a, 0x06, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x66,
	0x6c, 0x61, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66,
	0x6c, 0x61, 0x67, 0x53, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xde, 0x01, 0x0a, 0x03, 0x53, 0x6d, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x6d, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x1a, 0x54, 0x0a, 0x06, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x6d, 0x73, 0x2e,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x1a, 0x1d, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x22, 0xa9, 0x02, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x61, 0x6c,
	0x6c, 0x53, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x07,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x07, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x1a, 0x55, 0x0a, 0x06, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3b, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x1d, 0x0a,
	0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xb3, 0x02, 0x0a,
	0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x45, 0x0a, 0x0a, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x6f, 0x6f,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x3a, 0x0a, 0x09, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x02, 0x22, 0x3b, 0x0a, 0x09, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x22,
	0xdb, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x04, 0x68, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x66,
	0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x69, 0x74, 0x52, 0x04, 0x68,
	0x69, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x50, 0x0a, 0x03, 0x48,
	0x69, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x59, 0x0a,
	0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0xdc, 0x0b, 0x0a, 0x0f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x57, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x53, 0x69, 0x64, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x53, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x47, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x73, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x1a, 0x21, 0x0a, 0x0d, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x6e, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a, 0x37, 0x0a,
	0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a, 0x81, 0x01, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c,
	0x12, 0x38, 0x0a, 0x03, 0x73, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x53, 0x6d, 0x73, 0x52, 0x03, 0x73, 0x6d, 0x73, 0x1a, 0x90, 0x04, 0x0a, 0x04, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x4a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12,
	0x50, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x4d, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x1a, 0x38, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x03,
	0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a, 0x1b, 0x0a, 0x07, 0x43, 0x61,
	0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a, 0xc3, 0x01, 0x0a, 0x09, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x03, 0x67, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03,
	0x6c, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x67, 0x74,
	0x12, 0x2b, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x6c, 0x74, 0x1a, 0x8d, 0x01,
	0x0a, 0x03, 0x53, 0x6d, 0x73, 0x12, 0x61, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x53, 0x6d, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x1a, 0x23, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x6e, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a, 0x97, 0x02,
	0x0a, 0x07, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x73, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x16, 0x0a,
	0x02, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a, 0x70, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a,
	0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77,
	0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x38, 0x0a,
	0x09, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x6e, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x4e, 0x65, 0x61, 0x72, 0x52, 0x08, 0x73,
	0x70, 0x61, 0x6e, 0x4e, 0x65, 0x61, 0x72, 0x22, 0x35, 0x0a, 0x0d, 0x46, 0x75, 0x7a, 0x7a, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69,
	0x67, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x22, 0xba,
	0x01, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x0e, 0x66, 0x75, 0x7a, 0x7a,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x75,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41,
	0x75, 0x74, 0x6f, 0x12, 0x29, 0x0a, 0x0f, 0x66, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0e,
	0x66, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x66, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x22, 0xc2, 0x02, 0x0a, 0x08,
	0x53, 0x70, 0x61, 0x6e, 0x4e, 0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x70, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x61,
	0x6e, 0x4e, 0x65, 0x61, 0x72, 0x2e, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x73, 0x1a, 0xc8, 0x01, 0x0a, 0x06, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x6e, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x4e, 0x65, 0x61, 0x72,
	0x48, 0x00, 0x52, 0x08, 0x73, 0x70, 0x61, 0x6e, 0x4e, 0x65, 0x61, 0x72, 0x12, 0x3d, 0x0a, 0x0a,
	0x73, 0x70, 0x61, 0x6e, 0x5f, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x48, 0x00,
	0x52, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x12, 0x3a, 0x0a, 0x09, 0x73,
	0x70, 0x61, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x48, 0x00, 0x52, 0x08, 0x73,
	0x70, 0x61, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x42, 0x07, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x22, 0x20, 0x0a, 0x08, 0x53, 0x70, 0x61, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x6e, 0x46, 0x75, 0x7a, 0x7a, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x66, 0x75, 0x7a, 0x7a, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x75, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x0d, 0x66, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x75, 0x74,
	0x6f, 0x12, 0x29, 0x0a, 0x0f, 0x66, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x75,
	0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x66, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2a, 0x2c, 0x0a, 0x07, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x01, 0x2a, 0x56, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x56, 0x49, 0x45,
	0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x4f, 0x44, 0x4f, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x56, 0x49, 0x45,
	0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x42,
	0xc9, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x66, 0x6f, 0x2e, 0x76, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x42, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x77, 0x66, 0x6f, 0x2f, 0x76, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x3b, 0x76, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x57, 0x56, 0x58, 0xaa, 0x02, 0x11,
	0x57, 0x66, 0x6f, 0x2e, 0x56, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x56,
	0x32, 0xca, 0x02, 0x11, 0x57, 0x66, 0x6f, 0x5c, 0x56, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x1d, 0x57, 0x66, 0x6f, 0x5c, 0x56, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x57, 0x66, 0x6f, 0x3a, 0x3a, 0x56, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x3a, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_wfo_vanalytics_v2_transcript_proto_rawDescOnce sync.Once
	file_wfo_vanalytics_v2_transcript_proto_rawDescData = file_wfo_vanalytics_v2_transcript_proto_rawDesc
)

func file_wfo_vanalytics_v2_transcript_proto_rawDescGZIP() []byte {
	file_wfo_vanalytics_v2_transcript_proto_rawDescOnce.Do(func() {
		file_wfo_vanalytics_v2_transcript_proto_rawDescData = protoimpl.X.CompressGZIP(file_wfo_vanalytics_v2_transcript_proto_rawDescData)
	})
	return file_wfo_vanalytics_v2_transcript_proto_rawDescData
}

var file_wfo_vanalytics_v2_transcript_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_wfo_vanalytics_v2_transcript_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_wfo_vanalytics_v2_transcript_proto_goTypes = []interface{}{
	(Channel)(0),                                // 0: wfo.vanalytics.v2.Channel
	(ReviewStatus)(0),                           // 1: wfo.vanalytics.v2.ReviewStatus
	(*Transcript)(nil),                          // 2: wfo.vanalytics.v2.Transcript
	(*FlagSummary)(nil),                         // 3: wfo.vanalytics.v2.FlagSummary
	(*Sms)(nil),                                 // 4: wfo.vanalytics.v2.Sms
	(*Call)(nil),                                // 5: wfo.vanalytics.v2.Call
	(*SearchTranscriptsRequest)(nil),            // 6: wfo.vanalytics.v2.SearchTranscriptsRequest
	(*Highlight)(nil),                           // 7: wfo.vanalytics.v2.Highlight
	(*SearchTranscriptsResponse)(nil),           // 8: wfo.vanalytics.v2.SearchTranscriptsResponse
	(*TranscriptBoolQuery)(nil),                 // 9: wfo.vanalytics.v2.TranscriptBoolQuery
	(*TranscriptQuery)(nil),                     // 10: wfo.vanalytics.v2.TranscriptQuery
	(*FuzzinessAuto)(nil),                       // 11: wfo.vanalytics.v2.FuzzinessAuto
	(*Match)(nil),                               // 12: wfo.vanalytics.v2.Match
	(*SpanNear)(nil),                            // 13: wfo.vanalytics.v2.SpanNear
	(*SpanTerm)(nil),                            // 14: wfo.vanalytics.v2.SpanTerm
	(*SpanFuzzy)(nil),                           // 15: wfo.vanalytics.v2.SpanFuzzy
	(*FlagSummary_NeedReview)(nil),              // 16: wfo.vanalytics.v2.FlagSummary.NeedReview
	(*FlagSummary_Flag)(nil),                    // 17: wfo.vanalytics.v2.FlagSummary.Flag
	(*FlagSummary_Filter)(nil),                  // 18: wfo.vanalytics.v2.FlagSummary.Filter
	(*FlagSummary_Review)(nil),                  // 19: wfo.vanalytics.v2.FlagSummary.Review
	(*Sms_Thread)(nil),                          // 20: wfo.vanalytics.v2.Sms.Thread
	(*Sms_Segment)(nil),                         // 21: wfo.vanalytics.v2.Sms.Segment
	(*Call_Thread)(nil),                         // 22: wfo.vanalytics.v2.Call.Thread
	(*Call_Segment)(nil),                        // 23: wfo.vanalytics.v2.Call.Segment
	(*SearchTranscriptsResponse_Hit)(nil),       // 24: wfo.vanalytics.v2.SearchTranscriptsResponse.Hit
	(*TranscriptQuery_TranscriptSid)(nil),       // 25: wfo.vanalytics.v2.TranscriptQuery.TranscriptSid
	(*TranscriptQuery_Channel)(nil),             // 26: wfo.vanalytics.v2.TranscriptQuery.Channel
	(*TranscriptQuery_Metadata)(nil),            // 27: wfo.vanalytics.v2.TranscriptQuery.Metadata
	(*TranscriptQuery_Call)(nil),                // 28: wfo.vanalytics.v2.TranscriptQuery.Call
	(*TranscriptQuery_Sms)(nil),                 // 29: wfo.vanalytics.v2.TranscriptQuery.Sms
	(*TranscriptQuery_Threads)(nil),             // 30: wfo.vanalytics.v2.TranscriptQuery.Threads
	(*TranscriptQuery_Call_CallType)(nil),       // 31: wfo.vanalytics.v2.TranscriptQuery.Call.CallType
	(*TranscriptQuery_Call_CallSid)(nil),        // 32: wfo.vanalytics.v2.TranscriptQuery.Call.CallSid
	(*TranscriptQuery_Call_AudioTime)(nil),      // 33: wfo.vanalytics.v2.TranscriptQuery.Call.AudioTime
	(*TranscriptQuery_Sms_ConversationSid)(nil), // 34: wfo.vanalytics.v2.TranscriptQuery.Sms.ConversationSid
	(*TranscriptQuery_Threads_Id)(nil),          // 35: wfo.vanalytics.v2.TranscriptQuery.Threads.Id
	(*TranscriptQuery_Threads_Text)(nil),        // 36: wfo.vanalytics.v2.TranscriptQuery.Threads.Text
	(*SpanNear_Clause)(nil),                     // 37: wfo.vanalytics.v2.SpanNear.Clause
	(*timestamppb.Timestamp)(nil),               // 38: google.protobuf.Timestamp
	(commons.CallType_Enum)(0),                  // 39: api.commons.CallType.Enum
	(*fieldmaskpb.FieldMask)(nil),               // 40: google.protobuf.FieldMask
	(*wrapperspb.Int32Value)(nil),               // 41: google.protobuf.Int32Value
}
var file_wfo_vanalytics_v2_transcript_proto_depIdxs = []int32{
	5,  // 0: wfo.vanalytics.v2.Transcript.call:type_name -> wfo.vanalytics.v2.Call
	4,  // 1: wfo.vanalytics.v2.Transcript.sms:type_name -> wfo.vanalytics.v2.Sms
	0,  // 2: wfo.vanalytics.v2.Transcript.channel:type_name -> wfo.vanalytics.v2.Channel
	38, // 3: wfo.vanalytics.v2.Transcript.start_time:type_name -> google.protobuf.Timestamp
	38, // 4: wfo.vanalytics.v2.Transcript.delete_time:type_name -> google.protobuf.Timestamp
	3,  // 5: wfo.vanalytics.v2.Transcript.flag_summary:type_name -> wfo.vanalytics.v2.FlagSummary
	16, // 6: wfo.vanalytics.v2.FlagSummary.need_review:type_name -> wfo.vanalytics.v2.FlagSummary.NeedReview
	17, // 7: wfo.vanalytics.v2.FlagSummary.flags:type_name -> wfo.vanalytics.v2.FlagSummary.Flag
	1,  // 8: wfo.vanalytics.v2.FlagSummary.review_status:type_name -> wfo.vanalytics.v2.ReviewStatus
	20, // 9: wfo.vanalytics.v2.Sms.threads:type_name -> wfo.vanalytics.v2.Sms.Thread
	39, // 10: wfo.vanalytics.v2.Call.call_type:type_name -> api.commons.CallType.Enum
	22, // 11: wfo.vanalytics.v2.Call.threads:type_name -> wfo.vanalytics.v2.Call.Thread
	40, // 12: wfo.vanalytics.v2.SearchTranscriptsRequest.read_mask:type_name -> google.protobuf.FieldMask
	9,  // 13: wfo.vanalytics.v2.SearchTranscriptsRequest.bool_query:type_name -> wfo.vanalytics.v2.TranscriptBoolQuery
	7,  // 14: wfo.vanalytics.v2.SearchTranscriptsRequest.highlight:type_name -> wfo.vanalytics.v2.Highlight
	24, // 15: wfo.vanalytics.v2.SearchTranscriptsResponse.hits:type_name -> wfo.vanalytics.v2.SearchTranscriptsResponse.Hit
	10, // 16: wfo.vanalytics.v2.TranscriptBoolQuery.transcript:type_name -> wfo.vanalytics.v2.TranscriptQuery
	25, // 17: wfo.vanalytics.v2.TranscriptQuery.transcript_sid:type_name -> wfo.vanalytics.v2.TranscriptQuery.TranscriptSid
	26, // 18: wfo.vanalytics.v2.TranscriptQuery.channel:type_name -> wfo.vanalytics.v2.TranscriptQuery.Channel
	27, // 19: wfo.vanalytics.v2.TranscriptQuery.metadata:type_name -> wfo.vanalytics.v2.TranscriptQuery.Metadata
	30, // 20: wfo.vanalytics.v2.TranscriptQuery.threads:type_name -> wfo.vanalytics.v2.TranscriptQuery.Threads
	11, // 21: wfo.vanalytics.v2.Match.fuzziness_auto:type_name -> wfo.vanalytics.v2.FuzzinessAuto
	37, // 22: wfo.vanalytics.v2.SpanNear.clauses:type_name -> wfo.vanalytics.v2.SpanNear.Clause
	11, // 23: wfo.vanalytics.v2.SpanFuzzy.fuzziness_auto:type_name -> wfo.vanalytics.v2.FuzzinessAuto
	18, // 24: wfo.vanalytics.v2.FlagSummary.Flag.filters:type_name -> wfo.vanalytics.v2.FlagSummary.Filter
	19, // 25: wfo.vanalytics.v2.FlagSummary.Flag.reviews:type_name -> wfo.vanalytics.v2.FlagSummary.Review
	21, // 26: wfo.vanalytics.v2.Sms.Thread.segments:type_name -> wfo.vanalytics.v2.Sms.Segment
	23, // 27: wfo.vanalytics.v2.Call.Thread.segments:type_name -> wfo.vanalytics.v2.Call.Segment
	2,  // 28: wfo.vanalytics.v2.SearchTranscriptsResponse.Hit.transcript:type_name -> wfo.vanalytics.v2.Transcript
	0,  // 29: wfo.vanalytics.v2.TranscriptQuery.Channel.any:type_name -> wfo.vanalytics.v2.Channel
	28, // 30: wfo.vanalytics.v2.TranscriptQuery.Metadata.call:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call
	29, // 31: wfo.vanalytics.v2.TranscriptQuery.Metadata.sms:type_name -> wfo.vanalytics.v2.TranscriptQuery.Sms
	32, // 32: wfo.vanalytics.v2.TranscriptQuery.Call.call_sid:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call.CallSid
	33, // 33: wfo.vanalytics.v2.TranscriptQuery.Call.audio_time:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call.AudioTime
	31, // 34: wfo.vanalytics.v2.TranscriptQuery.Call.call_type:type_name -> wfo.vanalytics.v2.TranscriptQuery.Call.CallType
	34, // 35: wfo.vanalytics.v2.TranscriptQuery.Sms.conversation_sid:type_name -> wfo.vanalytics.v2.TranscriptQuery.Sms.ConversationSid
	35, // 36: wfo.vanalytics.v2.TranscriptQuery.Threads.id:type_name -> wfo.vanalytics.v2.TranscriptQuery.Threads.Id
	36, // 37: wfo.vanalytics.v2.TranscriptQuery.Threads.text:type_name -> wfo.vanalytics.v2.TranscriptQuery.Threads.Text
	39, // 38: wfo.vanalytics.v2.TranscriptQuery.Call.CallType.any:type_name -> api.commons.CallType.Enum
	41, // 39: wfo.vanalytics.v2.TranscriptQuery.Call.AudioTime.gte:type_name -> google.protobuf.Int32Value
	41, // 40: wfo.vanalytics.v2.TranscriptQuery.Call.AudioTime.lte:type_name -> google.protobuf.Int32Value
	41, // 41: wfo.vanalytics.v2.TranscriptQuery.Call.AudioTime.gt:type_name -> google.protobuf.Int32Value
	41, // 42: wfo.vanalytics.v2.TranscriptQuery.Call.AudioTime.lt:type_name -> google.protobuf.Int32Value
	12, // 43: wfo.vanalytics.v2.TranscriptQuery.Threads.Text.match:type_name -> wfo.vanalytics.v2.Match
	13, // 44: wfo.vanalytics.v2.TranscriptQuery.Threads.Text.span_near:type_name -> wfo.vanalytics.v2.SpanNear
	13, // 45: wfo.vanalytics.v2.SpanNear.Clause.span_near:type_name -> wfo.vanalytics.v2.SpanNear
	15, // 46: wfo.vanalytics.v2.SpanNear.Clause.span_fuzzy:type_name -> wfo.vanalytics.v2.SpanFuzzy
	14, // 47: wfo.vanalytics.v2.SpanNear.Clause.span_term:type_name -> wfo.vanalytics.v2.SpanTerm
	48, // [48:48] is the sub-list for method output_type
	48, // [48:48] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_wfo_vanalytics_v2_transcript_proto_init() }
func file_wfo_vanalytics_v2_transcript_proto_init() {
	if File_wfo_vanalytics_v2_transcript_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transcript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTranscriptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Highlight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTranscriptsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptBoolQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzinessAuto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanNear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanTerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanFuzzy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagSummary_NeedReview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagSummary_Flag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagSummary_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagSummary_Review); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sms_Thread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sms_Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_Thread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTranscriptsResponse_Hit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_TranscriptSid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Call); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Sms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Threads); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Call_CallType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Call_CallSid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Call_AudioTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Sms_ConversationSid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Threads_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptQuery_Threads_Text); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfo_vanalytics_v2_transcript_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanNear_Clause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_wfo_vanalytics_v2_transcript_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Transcript_Call)(nil),
		(*Transcript_Sms)(nil),
	}
	file_wfo_vanalytics_v2_transcript_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Match_FuzzinessAuto)(nil),
		(*Match_FuzzinessValue)(nil),
	}
	file_wfo_vanalytics_v2_transcript_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*SpanFuzzy_FuzzinessAuto)(nil),
		(*SpanFuzzy_FuzzinessValue)(nil),
	}
	file_wfo_vanalytics_v2_transcript_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*SpanNear_Clause_SpanNear)(nil),
		(*SpanNear_Clause_SpanFuzzy)(nil),
		(*SpanNear_Clause_SpanTerm)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wfo_vanalytics_v2_transcript_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wfo_vanalytics_v2_transcript_proto_goTypes,
		DependencyIndexes: file_wfo_vanalytics_v2_transcript_proto_depIdxs,
		EnumInfos:         file_wfo_vanalytics_v2_transcript_proto_enumTypes,
		MessageInfos:      file_wfo_vanalytics_v2_transcript_proto_msgTypes,
	}.Build()
	File_wfo_vanalytics_v2_transcript_proto = out.File
	file_wfo_vanalytics_v2_transcript_proto_rawDesc = nil
	file_wfo_vanalytics_v2_transcript_proto_goTypes = nil
	file_wfo_vanalytics_v2_transcript_proto_depIdxs = nil
}
