// Copyright (c) 2019, TCN Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: api/v0alpha/acd.proto

package v0alpha

import (
	_ "github.com/tcncloud/api-go/annotations"
	commons "github.com/tcncloud/api-go/api/commons"
	integrations1 "github.com/tcncloud/api-go/api/commons/integrations"
	integrations "github.com/tcncloud/api-go/api/v1alpha1/integrations"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AgentGetStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionSid       int64 `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
	PerformKeepAlive bool  `protobuf:"varint,2,opt,name=perform_keep_alive,json=performKeepAlive,proto3" json:"perform_keep_alive,omitempty"`
}

func (x *AgentGetStatusRequest) Reset() {
	*x = AgentGetStatusRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentGetStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentGetStatusRequest) ProtoMessage() {}

func (x *AgentGetStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentGetStatusRequest.ProtoReflect.Descriptor instead.
func (*AgentGetStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{0}
}

func (x *AgentGetStatusRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

func (x *AgentGetStatusRequest) GetPerformKeepAlive() bool {
	if x != nil {
		return x.PerformKeepAlive
	}
	return false
}

type AgentGetStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status              int64                     `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	StatusDesc          commons.AgentStatus_Enum  `protobuf:"varint,3,opt,name=status_desc,json=statusDesc,proto3,enum=api.commons.AgentStatus_Enum" json:"status_desc,omitempty"`
	Paused              bool                      `protobuf:"varint,4,opt,name=paused,proto3" json:"paused,omitempty"`
	Queue               string                    `protobuf:"bytes,5,opt,name=queue,proto3" json:"queue,omitempty"`
	CurrentSessionId    int64                     `protobuf:"varint,6,opt,name=current_session_id,json=currentSessionId,proto3" json:"current_session_id,omitempty"`
	LastStatusChange    int64                     `protobuf:"varint,7,opt,name=last_status_change,json=lastStatusChange,proto3" json:"last_status_change,omitempty"`
	Monitoring          bool                      `protobuf:"varint,8,opt,name=monitoring,proto3" json:"monitoring,omitempty"`
	CallsCount          int64                     `protobuf:"varint,9,opt,name=calls_count,json=callsCount,proto3" json:"calls_count,omitempty"`
	LastSipCode         int64                     `protobuf:"varint,10,opt,name=last_sip_code,json=lastSipCode,proto3" json:"last_sip_code,omitempty"`
	AgentPeerIsLostCall bool                      `protobuf:"varint,11,opt,name=agent_peer_is_lost_call,json=agentPeerIsLostCall,proto3" json:"agent_peer_is_lost_call,omitempty"`
	Disabled            bool                      `protobuf:"varint,12,opt,name=disabled,proto3" json:"disabled,omitempty"`
	KeepAliveSucceeded  bool                      `protobuf:"varint,13,opt,name=keep_alive_succeeded,json=keepAliveSucceeded,proto3" json:"keep_alive_succeeded,omitempty"`
	TransferMembers     []*commons.TransferMember `protobuf:"bytes,14,rep,name=transfer_members,json=transferMembers,proto3" json:"transfer_members,omitempty"`
	AgentIsMuted        bool                      `protobuf:"varint,15,opt,name=agent_is_muted,json=agentIsMuted,proto3" json:"agent_is_muted,omitempty"`
}

func (x *AgentGetStatusReply) Reset() {
	*x = AgentGetStatusReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentGetStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentGetStatusReply) ProtoMessage() {}

func (x *AgentGetStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentGetStatusReply.ProtoReflect.Descriptor instead.
func (*AgentGetStatusReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{1}
}

func (x *AgentGetStatusReply) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AgentGetStatusReply) GetStatusDesc() commons.AgentStatus_Enum {
	if x != nil {
		return x.StatusDesc
	}
	return commons.AgentStatus_Enum(0)
}

func (x *AgentGetStatusReply) GetPaused() bool {
	if x != nil {
		return x.Paused
	}
	return false
}

func (x *AgentGetStatusReply) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *AgentGetStatusReply) GetCurrentSessionId() int64 {
	if x != nil {
		return x.CurrentSessionId
	}
	return 0
}

func (x *AgentGetStatusReply) GetLastStatusChange() int64 {
	if x != nil {
		return x.LastStatusChange
	}
	return 0
}

func (x *AgentGetStatusReply) GetMonitoring() bool {
	if x != nil {
		return x.Monitoring
	}
	return false
}

func (x *AgentGetStatusReply) GetCallsCount() int64 {
	if x != nil {
		return x.CallsCount
	}
	return 0
}

func (x *AgentGetStatusReply) GetLastSipCode() int64 {
	if x != nil {
		return x.LastSipCode
	}
	return 0
}

func (x *AgentGetStatusReply) GetAgentPeerIsLostCall() bool {
	if x != nil {
		return x.AgentPeerIsLostCall
	}
	return false
}

func (x *AgentGetStatusReply) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *AgentGetStatusReply) GetKeepAliveSucceeded() bool {
	if x != nil {
		return x.KeepAliveSucceeded
	}
	return false
}

func (x *AgentGetStatusReply) GetTransferMembers() []*commons.TransferMember {
	if x != nil {
		return x.TransferMembers
	}
	return nil
}

func (x *AgentGetStatusReply) GetAgentIsMuted() bool {
	if x != nil {
		return x.AgentIsMuted
	}
	return false
}

type AgentGetConnectedPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionSid int64  `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *AgentGetConnectedPartyRequest) Reset() {
	*x = AgentGetConnectedPartyRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentGetConnectedPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentGetConnectedPartyRequest) ProtoMessage() {}

func (x *AgentGetConnectedPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentGetConnectedPartyRequest.ProtoReflect.Descriptor instead.
func (*AgentGetConnectedPartyRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{2}
}

func (x *AgentGetConnectedPartyRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

func (x *AgentGetConnectedPartyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type AgentGetConnectedPartyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallId   int64                 `protobuf:"varint,2,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	CallType commons.CallType_Enum `protobuf:"varint,3,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
}

func (x *AgentGetConnectedPartyReply) Reset() {
	*x = AgentGetConnectedPartyReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentGetConnectedPartyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentGetConnectedPartyReply) ProtoMessage() {}

func (x *AgentGetConnectedPartyReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentGetConnectedPartyReply.ProtoReflect.Descriptor instead.
func (*AgentGetConnectedPartyReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{3}
}

func (x *AgentGetConnectedPartyReply) GetCallId() int64 {
	if x != nil {
		return x.CallId
	}
	return 0
}

func (x *AgentGetConnectedPartyReply) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

type ManagerAgentGetConnectedPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionSid int64  `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ManagerAgentGetConnectedPartyRequest) Reset() {
	*x = ManagerAgentGetConnectedPartyRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManagerAgentGetConnectedPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagerAgentGetConnectedPartyRequest) ProtoMessage() {}

func (x *ManagerAgentGetConnectedPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagerAgentGetConnectedPartyRequest.ProtoReflect.Descriptor instead.
func (*ManagerAgentGetConnectedPartyRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{4}
}

func (x *ManagerAgentGetConnectedPartyRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

func (x *ManagerAgentGetConnectedPartyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ManagerAgentGetConnectedPartyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallId   int64                 `protobuf:"varint,2,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	CallType commons.CallType_Enum `protobuf:"varint,3,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
}

func (x *ManagerAgentGetConnectedPartyReply) Reset() {
	*x = ManagerAgentGetConnectedPartyReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManagerAgentGetConnectedPartyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagerAgentGetConnectedPartyReply) ProtoMessage() {}

func (x *ManagerAgentGetConnectedPartyReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagerAgentGetConnectedPartyReply.ProtoReflect.Descriptor instead.
func (*ManagerAgentGetConnectedPartyReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{5}
}

func (x *ManagerAgentGetConnectedPartyReply) GetCallId() int64 {
	if x != nil {
		return x.CallId
	}
	return 0
}

func (x *ManagerAgentGetConnectedPartyReply) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

type AgentIntercomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAgentId int64 `protobuf:"varint,3,opt,name=target_agent_id,json=targetAgentId,proto3" json:"target_agent_id,omitempty"`
	SessionSid    int64 `protobuf:"varint,4,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *AgentIntercomRequest) Reset() {
	*x = AgentIntercomRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentIntercomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentIntercomRequest) ProtoMessage() {}

func (x *AgentIntercomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentIntercomRequest.ProtoReflect.Descriptor instead.
func (*AgentIntercomRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{6}
}

func (x *AgentIntercomRequest) GetTargetAgentId() int64 {
	if x != nil {
		return x.TargetAgentId
	}
	return 0
}

func (x *AgentIntercomRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type AgentIntercomReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentIntercomReply) Reset() {
	*x = AgentIntercomReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentIntercomReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentIntercomReply) ProtoMessage() {}

func (x *AgentIntercomReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentIntercomReply.ProtoReflect.Descriptor instead.
func (*AgentIntercomReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{7}
}

type AgentIntercomAcceptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionSid int64 `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *AgentIntercomAcceptRequest) Reset() {
	*x = AgentIntercomAcceptRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentIntercomAcceptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentIntercomAcceptRequest) ProtoMessage() {}

func (x *AgentIntercomAcceptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentIntercomAcceptRequest.ProtoReflect.Descriptor instead.
func (*AgentIntercomAcceptRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{8}
}

func (x *AgentIntercomAcceptRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type AgentIntercomAcceptReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentIntercomAcceptReply) Reset() {
	*x = AgentIntercomAcceptReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentIntercomAcceptReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentIntercomAcceptReply) ProtoMessage() {}

func (x *AgentIntercomAcceptReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentIntercomAcceptReply.ProtoReflect.Descriptor instead.
func (*AgentIntercomAcceptReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{9}
}

type AgentIntercomRejectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionSid int64 `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *AgentIntercomRejectRequest) Reset() {
	*x = AgentIntercomRejectRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentIntercomRejectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentIntercomRejectRequest) ProtoMessage() {}

func (x *AgentIntercomRejectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentIntercomRejectRequest.ProtoReflect.Descriptor instead.
func (*AgentIntercomRejectRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{10}
}

func (x *AgentIntercomRejectRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type AgentIntercomRejectReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentIntercomRejectReply) Reset() {
	*x = AgentIntercomRejectReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentIntercomRejectReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentIntercomRejectReply) ProtoMessage() {}

func (x *AgentIntercomRejectReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentIntercomRejectReply.ProtoReflect.Descriptor instead.
func (*AgentIntercomRejectReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{11}
}

type AgentIntercomCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionSid int64 `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *AgentIntercomCancelRequest) Reset() {
	*x = AgentIntercomCancelRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentIntercomCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentIntercomCancelRequest) ProtoMessage() {}

func (x *AgentIntercomCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentIntercomCancelRequest.ProtoReflect.Descriptor instead.
func (*AgentIntercomCancelRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{12}
}

func (x *AgentIntercomCancelRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type AgentIntercomCancelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentIntercomCancelReply) Reset() {
	*x = AgentIntercomCancelReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentIntercomCancelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentIntercomCancelReply) ProtoMessage() {}

func (x *AgentIntercomCancelReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentIntercomCancelReply.ProtoReflect.Descriptor instead.
func (*AgentIntercomCancelReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{13}
}

type DialManualPrepareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionSid int64 `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *DialManualPrepareRequest) Reset() {
	*x = DialManualPrepareRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DialManualPrepareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialManualPrepareRequest) ProtoMessage() {}

func (x *DialManualPrepareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialManualPrepareRequest.ProtoReflect.Descriptor instead.
func (*DialManualPrepareRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{14}
}

func (x *DialManualPrepareRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type DialManualPrepareReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DialManualPrepareReply) Reset() {
	*x = DialManualPrepareReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DialManualPrepareReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialManualPrepareReply) ProtoMessage() {}

func (x *DialManualPrepareReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialManualPrepareReply.ProtoReflect.Descriptor instead.
func (*DialManualPrepareReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{15}
}

type DialManualCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionSid int64 `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *DialManualCancelRequest) Reset() {
	*x = DialManualCancelRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DialManualCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialManualCancelRequest) ProtoMessage() {}

func (x *DialManualCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialManualCancelRequest.ProtoReflect.Descriptor instead.
func (*DialManualCancelRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{16}
}

func (x *DialManualCancelRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type DialManualCancelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DialManualCancelReply) Reset() {
	*x = DialManualCancelReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DialManualCancelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialManualCancelReply) ProtoMessage() {}

func (x *DialManualCancelReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialManualCancelReply.ProtoReflect.Descriptor instead.
func (*DialManualCancelReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{17}
}

type DialPreviewPrepareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionSid int64 `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *DialPreviewPrepareRequest) Reset() {
	*x = DialPreviewPrepareRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DialPreviewPrepareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialPreviewPrepareRequest) ProtoMessage() {}

func (x *DialPreviewPrepareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialPreviewPrepareRequest.ProtoReflect.Descriptor instead.
func (*DialPreviewPrepareRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{18}
}

func (x *DialPreviewPrepareRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type DialPreviewPrepareReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DialPreviewPrepareReply) Reset() {
	*x = DialPreviewPrepareReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DialPreviewPrepareReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialPreviewPrepareReply) ProtoMessage() {}

func (x *DialPreviewPrepareReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialPreviewPrepareReply.ProtoReflect.Descriptor instead.
func (*DialPreviewPrepareReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{19}
}

type AgentPauseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionSid int64  `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
	Reason     string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *AgentPauseRequest) Reset() {
	*x = AgentPauseRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentPauseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentPauseRequest) ProtoMessage() {}

func (x *AgentPauseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentPauseRequest.ProtoReflect.Descriptor instead.
func (*AgentPauseRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{20}
}

func (x *AgentPauseRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

func (x *AgentPauseRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type AgentPauseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentPauseReply) Reset() {
	*x = AgentPauseReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentPauseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentPauseReply) ProtoMessage() {}

func (x *AgentPauseReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentPauseReply.ProtoReflect.Descriptor instead.
func (*AgentPauseReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{21}
}

type AgentSetReadyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionSid int64 `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *AgentSetReadyRequest) Reset() {
	*x = AgentSetReadyRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentSetReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentSetReadyRequest) ProtoMessage() {}

func (x *AgentSetReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentSetReadyRequest.ProtoReflect.Descriptor instead.
func (*AgentSetReadyRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{22}
}

func (x *AgentSetReadyRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type AgentSetReadyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentSetReadyReply) Reset() {
	*x = AgentSetReadyReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentSetReadyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentSetReadyReply) ProtoMessage() {}

func (x *AgentSetReadyReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentSetReadyReply.ProtoReflect.Descriptor instead.
func (*AgentSetReadyReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{23}
}

type AgentGUIBusyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionSid int64 `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *AgentGUIBusyRequest) Reset() {
	*x = AgentGUIBusyRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentGUIBusyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentGUIBusyRequest) ProtoMessage() {}

func (x *AgentGUIBusyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentGUIBusyRequest.ProtoReflect.Descriptor instead.
func (*AgentGUIBusyRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{24}
}

func (x *AgentGUIBusyRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type AgentGUIBusyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentGUIBusyReply) Reset() {
	*x = AgentGUIBusyReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentGUIBusyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentGUIBusyReply) ProtoMessage() {}

func (x *AgentGUIBusyReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentGUIBusyReply.ProtoReflect.Descriptor instead.
func (*AgentGUIBusyReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{25}
}

type AgentDisconnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: reason - will need to be converted to use an ENUM.
	Reason     string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	SessionSid int64  `protobuf:"varint,2,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *AgentDisconnectRequest) Reset() {
	*x = AgentDisconnectRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentDisconnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentDisconnectRequest) ProtoMessage() {}

func (x *AgentDisconnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentDisconnectRequest.ProtoReflect.Descriptor instead.
func (*AgentDisconnectRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{26}
}

func (x *AgentDisconnectRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AgentDisconnectRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type AgentDisconnectReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentDisconnectReply) Reset() {
	*x = AgentDisconnectReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentDisconnectReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentDisconnectReply) ProtoMessage() {}

func (x *AgentDisconnectReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentDisconnectReply.ProtoReflect.Descriptor instead.
func (*AgentDisconnectReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{27}
}

type AgentSessionEventReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentSessionSid int64                                 `protobuf:"varint,3,opt,name=agent_session_sid,json=agentSessionSid,proto3" json:"agent_session_sid,omitempty"`
	ActionKey       commons.AgentSessionLogActionKey_Enum `protobuf:"varint,10,opt,name=action_key,json=actionKey,proto3,enum=api.commons.AgentSessionLogActionKey_Enum" json:"action_key,omitempty"`
	ActionValue     string                                `protobuf:"bytes,11,opt,name=action_value,json=actionValue,proto3" json:"action_value,omitempty"`
}

func (x *AgentSessionEventReq) Reset() {
	*x = AgentSessionEventReq{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentSessionEventReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentSessionEventReq) ProtoMessage() {}

func (x *AgentSessionEventReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentSessionEventReq.ProtoReflect.Descriptor instead.
func (*AgentSessionEventReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{28}
}

func (x *AgentSessionEventReq) GetAgentSessionSid() int64 {
	if x != nil {
		return x.AgentSessionSid
	}
	return 0
}

func (x *AgentSessionEventReq) GetActionKey() commons.AgentSessionLogActionKey_Enum {
	if x != nil {
		return x.ActionKey
	}
	return commons.AgentSessionLogActionKey_Enum(0)
}

func (x *AgentSessionEventReq) GetActionValue() string {
	if x != nil {
		return x.ActionValue
	}
	return ""
}

type AgentSessionEventRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentSessionEventRes) Reset() {
	*x = AgentSessionEventRes{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentSessionEventRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentSessionEventRes) ProtoMessage() {}

func (x *AgentSessionEventRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentSessionEventRes.ProtoReflect.Descriptor instead.
func (*AgentSessionEventRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{29}
}

type CallerRequeueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewConfigFolder string                     `protobuf:"bytes,3,opt,name=new_config_folder,json=newConfigFolder,proto3" json:"new_config_folder,omitempty"`
	Skills          map[string]bool            `protobuf:"bytes,4,rep,name=skills,proto3" json:"skills,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ReplaceSkills   bool                       `protobuf:"varint,5,opt,name=replace_skills,json=replaceSkills,proto3" json:"replace_skills,omitempty"`
	ReplaceConfig   commons.ReplaceConfig_Enum `protobuf:"varint,6,opt,name=replace_config,json=replaceConfig,proto3,enum=api.commons.ReplaceConfig_Enum" json:"replace_config,omitempty"`
	SessionSid      int64                      `protobuf:"varint,7,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
	// the voicemail extesion to use for the caller
	VoicemailBox string `protobuf:"bytes,8,opt,name=voicemail_box,json=voicemailBox,proto3" json:"voicemail_box,omitempty"`
}

func (x *CallerRequeueRequest) Reset() {
	*x = CallerRequeueRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallerRequeueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallerRequeueRequest) ProtoMessage() {}

func (x *CallerRequeueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallerRequeueRequest.ProtoReflect.Descriptor instead.
func (*CallerRequeueRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{30}
}

func (x *CallerRequeueRequest) GetNewConfigFolder() string {
	if x != nil {
		return x.NewConfigFolder
	}
	return ""
}

func (x *CallerRequeueRequest) GetSkills() map[string]bool {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *CallerRequeueRequest) GetReplaceSkills() bool {
	if x != nil {
		return x.ReplaceSkills
	}
	return false
}

func (x *CallerRequeueRequest) GetReplaceConfig() commons.ReplaceConfig_Enum {
	if x != nil {
		return x.ReplaceConfig
	}
	return commons.ReplaceConfig_Enum(0)
}

func (x *CallerRequeueRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

func (x *CallerRequeueRequest) GetVoicemailBox() string {
	if x != nil {
		return x.VoicemailBox
	}
	return ""
}

type CallerRequeueReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CallerRequeueReply) Reset() {
	*x = CallerRequeueReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallerRequeueReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallerRequeueReply) ProtoMessage() {}

func (x *CallerRequeueReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallerRequeueReply.ProtoReflect.Descriptor instead.
func (*CallerRequeueReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{31}
}

type TransferWarmToAgentCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionSid int64 `protobuf:"varint,4,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *TransferWarmToAgentCancelRequest) Reset() {
	*x = TransferWarmToAgentCancelRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferWarmToAgentCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferWarmToAgentCancelRequest) ProtoMessage() {}

func (x *TransferWarmToAgentCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferWarmToAgentCancelRequest.ProtoReflect.Descriptor instead.
func (*TransferWarmToAgentCancelRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{32}
}

func (x *TransferWarmToAgentCancelRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type TransferWarmToAgentCancelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransferWarmToAgentCancelReply) Reset() {
	*x = TransferWarmToAgentCancelReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferWarmToAgentCancelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferWarmToAgentCancelReply) ProtoMessage() {}

func (x *TransferWarmToAgentCancelReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferWarmToAgentCancelReply.ProtoReflect.Descriptor instead.
func (*TransferWarmToAgentCancelReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{33}
}

type TransferWarmToOutboundCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionSid int64 `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *TransferWarmToOutboundCancelRequest) Reset() {
	*x = TransferWarmToOutboundCancelRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferWarmToOutboundCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferWarmToOutboundCancelRequest) ProtoMessage() {}

func (x *TransferWarmToOutboundCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferWarmToOutboundCancelRequest.ProtoReflect.Descriptor instead.
func (*TransferWarmToOutboundCancelRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{34}
}

func (x *TransferWarmToOutboundCancelRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type TransferWarmToOutboundCancelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransferWarmToOutboundCancelReply) Reset() {
	*x = TransferWarmToOutboundCancelReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferWarmToOutboundCancelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferWarmToOutboundCancelReply) ProtoMessage() {}

func (x *TransferWarmToOutboundCancelReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferWarmToOutboundCancelReply.ProtoReflect.Descriptor instead.
func (*TransferWarmToOutboundCancelReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{35}
}

type TransferWarmToAgentApproveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionSid int64 `protobuf:"varint,4,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *TransferWarmToAgentApproveRequest) Reset() {
	*x = TransferWarmToAgentApproveRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferWarmToAgentApproveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferWarmToAgentApproveRequest) ProtoMessage() {}

func (x *TransferWarmToAgentApproveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferWarmToAgentApproveRequest.ProtoReflect.Descriptor instead.
func (*TransferWarmToAgentApproveRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{36}
}

func (x *TransferWarmToAgentApproveRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type TransferWarmToAgentApproveReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransferWarmToAgentApproveReply) Reset() {
	*x = TransferWarmToAgentApproveReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferWarmToAgentApproveReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferWarmToAgentApproveReply) ProtoMessage() {}

func (x *TransferWarmToAgentApproveReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferWarmToAgentApproveReply.ProtoReflect.Descriptor instead.
func (*TransferWarmToAgentApproveReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{37}
}

// the request used to approve a warm outbound transfer
type TransferWarmToOutboundApproveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the session sid of the current agent
	SessionSid int64 `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
	// the ids of the transfer member to want to be joined with the caller
	// it will hang up all others (you don't need need to include the caller)
	// If you leave this blank/empty it will include all members in the approval
	MemberIdentifiers []string `protobuf:"bytes,2,rep,name=member_identifiers,json=memberIdentifiers,proto3" json:"member_identifiers,omitempty"`
}

func (x *TransferWarmToOutboundApproveRequest) Reset() {
	*x = TransferWarmToOutboundApproveRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferWarmToOutboundApproveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferWarmToOutboundApproveRequest) ProtoMessage() {}

func (x *TransferWarmToOutboundApproveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferWarmToOutboundApproveRequest.ProtoReflect.Descriptor instead.
func (*TransferWarmToOutboundApproveRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{38}
}

func (x *TransferWarmToOutboundApproveRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

func (x *TransferWarmToOutboundApproveRequest) GetMemberIdentifiers() []string {
	if x != nil {
		return x.MemberIdentifiers
	}
	return nil
}

type TransferWarmToOutboundApproveReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransferWarmToOutboundApproveReply) Reset() {
	*x = TransferWarmToOutboundApproveReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferWarmToOutboundApproveReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferWarmToOutboundApproveReply) ProtoMessage() {}

func (x *TransferWarmToOutboundApproveReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferWarmToOutboundApproveReply.ProtoReflect.Descriptor instead.
func (*TransferWarmToOutboundApproveReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{39}
}

type CallerSendToVoicemailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mailbox    string `protobuf:"bytes,3,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
	SessionSid int64  `protobuf:"varint,4,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *CallerSendToVoicemailRequest) Reset() {
	*x = CallerSendToVoicemailRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallerSendToVoicemailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallerSendToVoicemailRequest) ProtoMessage() {}

func (x *CallerSendToVoicemailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallerSendToVoicemailRequest.ProtoReflect.Descriptor instead.
func (*CallerSendToVoicemailRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{40}
}

func (x *CallerSendToVoicemailRequest) GetMailbox() string {
	if x != nil {
		return x.Mailbox
	}
	return ""
}

func (x *CallerSendToVoicemailRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type CallerSendToVoicemailReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CallerSendToVoicemailReply) Reset() {
	*x = CallerSendToVoicemailReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallerSendToVoicemailReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallerSendToVoicemailReply) ProtoMessage() {}

func (x *CallerSendToVoicemailReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallerSendToVoicemailReply.ProtoReflect.Descriptor instead.
func (*CallerSendToVoicemailReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{41}
}

type AgentInviteTransferCallerToConferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionSid int64 `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *AgentInviteTransferCallerToConferenceRequest) Reset() {
	*x = AgentInviteTransferCallerToConferenceRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentInviteTransferCallerToConferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentInviteTransferCallerToConferenceRequest) ProtoMessage() {}

func (x *AgentInviteTransferCallerToConferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentInviteTransferCallerToConferenceRequest.ProtoReflect.Descriptor instead.
func (*AgentInviteTransferCallerToConferenceRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{42}
}

func (x *AgentInviteTransferCallerToConferenceRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type AgentInviteTransferCallerToConferenceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentInviteTransferCallerToConferenceReply) Reset() {
	*x = AgentInviteTransferCallerToConferenceReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentInviteTransferCallerToConferenceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentInviteTransferCallerToConferenceReply) ProtoMessage() {}

func (x *AgentInviteTransferCallerToConferenceReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentInviteTransferCallerToConferenceReply.ProtoReflect.Descriptor instead.
func (*AgentInviteTransferCallerToConferenceReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{43}
}

type AgentMonitorCallsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Monitor    bool  `protobuf:"varint,3,opt,name=monitor,proto3" json:"monitor,omitempty"`
	SessionSid int64 `protobuf:"varint,4,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *AgentMonitorCallsRequest) Reset() {
	*x = AgentMonitorCallsRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentMonitorCallsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentMonitorCallsRequest) ProtoMessage() {}

func (x *AgentMonitorCallsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentMonitorCallsRequest.ProtoReflect.Descriptor instead.
func (*AgentMonitorCallsRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{44}
}

func (x *AgentMonitorCallsRequest) GetMonitor() bool {
	if x != nil {
		return x.Monitor
	}
	return false
}

func (x *AgentMonitorCallsRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type AgentMonitorCallsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentMonitorCallsReply) Reset() {
	*x = AgentMonitorCallsReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentMonitorCallsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentMonitorCallsReply) ProtoMessage() {}

func (x *AgentMonitorCallsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentMonitorCallsReply.ProtoReflect.Descriptor instead.
func (*AgentMonitorCallsReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{45}
}

type TransferColdToOutboundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallerId         string   `protobuf:"bytes,3,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	Destination      string   `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"`
	ReservedCarriers []string `protobuf:"bytes,5,rep,name=reserved_carriers,json=reservedCarriers,proto3" json:"reserved_carriers,omitempty"`
	SessionSid       int64    `protobuf:"varint,6,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *TransferColdToOutboundRequest) Reset() {
	*x = TransferColdToOutboundRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferColdToOutboundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferColdToOutboundRequest) ProtoMessage() {}

func (x *TransferColdToOutboundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferColdToOutboundRequest.ProtoReflect.Descriptor instead.
func (*TransferColdToOutboundRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{46}
}

func (x *TransferColdToOutboundRequest) GetCallerId() string {
	if x != nil {
		return x.CallerId
	}
	return ""
}

func (x *TransferColdToOutboundRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *TransferColdToOutboundRequest) GetReservedCarriers() []string {
	if x != nil {
		return x.ReservedCarriers
	}
	return nil
}

func (x *TransferColdToOutboundRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type TransferColdToOutboundReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransferColdToOutboundReply) Reset() {
	*x = TransferColdToOutboundReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferColdToOutboundReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferColdToOutboundReply) ProtoMessage() {}

func (x *TransferColdToOutboundReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferColdToOutboundReply.ProtoReflect.Descriptor instead.
func (*TransferColdToOutboundReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{47}
}

type TransferColdToAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationAgentId int64 `protobuf:"varint,3,opt,name=destination_agent_id,json=destinationAgentId,proto3" json:"destination_agent_id,omitempty"`
	SessionSid         int64 `protobuf:"varint,4,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *TransferColdToAgentRequest) Reset() {
	*x = TransferColdToAgentRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferColdToAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferColdToAgentRequest) ProtoMessage() {}

func (x *TransferColdToAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferColdToAgentRequest.ProtoReflect.Descriptor instead.
func (*TransferColdToAgentRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{48}
}

func (x *TransferColdToAgentRequest) GetDestinationAgentId() int64 {
	if x != nil {
		return x.DestinationAgentId
	}
	return 0
}

func (x *TransferColdToAgentRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type TransferColdToAgentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransferColdToAgentReply) Reset() {
	*x = TransferColdToAgentReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferColdToAgentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferColdToAgentReply) ProtoMessage() {}

func (x *TransferColdToAgentReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferColdToAgentReply.ProtoReflect.Descriptor instead.
func (*TransferColdToAgentReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{49}
}

type TransferWarmToOutboundStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallerId         string   `protobuf:"bytes,3,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	Destination      string   `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"`
	ReservedCarriers []string `protobuf:"bytes,5,rep,name=reserved_carriers,json=reservedCarriers,proto3" json:"reserved_carriers,omitempty"`
	CallerHold       bool     `protobuf:"varint,6,opt,name=caller_hold,json=callerHold,proto3" json:"caller_hold,omitempty"`
	SessionSid       int64    `protobuf:"varint,7,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *TransferWarmToOutboundStartRequest) Reset() {
	*x = TransferWarmToOutboundStartRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferWarmToOutboundStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferWarmToOutboundStartRequest) ProtoMessage() {}

func (x *TransferWarmToOutboundStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferWarmToOutboundStartRequest.ProtoReflect.Descriptor instead.
func (*TransferWarmToOutboundStartRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{50}
}

func (x *TransferWarmToOutboundStartRequest) GetCallerId() string {
	if x != nil {
		return x.CallerId
	}
	return ""
}

func (x *TransferWarmToOutboundStartRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *TransferWarmToOutboundStartRequest) GetReservedCarriers() []string {
	if x != nil {
		return x.ReservedCarriers
	}
	return nil
}

func (x *TransferWarmToOutboundStartRequest) GetCallerHold() bool {
	if x != nil {
		return x.CallerHold
	}
	return false
}

func (x *TransferWarmToOutboundStartRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type TransferWarmToOutboundStartReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransferWarmToOutboundStartReply) Reset() {
	*x = TransferWarmToOutboundStartReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferWarmToOutboundStartReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferWarmToOutboundStartReply) ProtoMessage() {}

func (x *TransferWarmToOutboundStartReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferWarmToOutboundStartReply.ProtoReflect.Descriptor instead.
func (*TransferWarmToOutboundStartReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{51}
}

// request to add a new outbound transfer member
type CreateWarmOutboundTransferMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// where the call should look like it comming from
	CallerId string `protobuf:"bytes,3,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	// where the call should go to
	Destination string `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"`
	// specific carriers to use
	ReservedCarriers []string `protobuf:"bytes,5,rep,name=reserved_carriers,json=reservedCarriers,proto3" json:"reserved_carriers,omitempty"`
	// the session sid for the agent
	SessionSid int64 `protobuf:"varint,6,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *CreateWarmOutboundTransferMemberRequest) Reset() {
	*x = CreateWarmOutboundTransferMemberRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWarmOutboundTransferMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWarmOutboundTransferMemberRequest) ProtoMessage() {}

func (x *CreateWarmOutboundTransferMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWarmOutboundTransferMemberRequest.ProtoReflect.Descriptor instead.
func (*CreateWarmOutboundTransferMemberRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{52}
}

func (x *CreateWarmOutboundTransferMemberRequest) GetCallerId() string {
	if x != nil {
		return x.CallerId
	}
	return ""
}

func (x *CreateWarmOutboundTransferMemberRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *CreateWarmOutboundTransferMemberRequest) GetReservedCarriers() []string {
	if x != nil {
		return x.ReservedCarriers
	}
	return nil
}

func (x *CreateWarmOutboundTransferMemberRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

// request to add a new outbound transfer member
type CreateWarmOutboundTransferMemberReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateWarmOutboundTransferMemberReply) Reset() {
	*x = CreateWarmOutboundTransferMemberReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWarmOutboundTransferMemberReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWarmOutboundTransferMemberReply) ProtoMessage() {}

func (x *CreateWarmOutboundTransferMemberReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWarmOutboundTransferMemberReply.ProtoReflect.Descriptor instead.
func (*CreateWarmOutboundTransferMemberReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{53}
}

// request to add a new outbound transfer member
type RemoveTransferMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the member to be hungup
	MemberIdentifier string `protobuf:"bytes,1,opt,name=member_identifier,json=memberIdentifier,proto3" json:"member_identifier,omitempty"`
	// the session sid for the agent
	SessionSid int64 `protobuf:"varint,2,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *RemoveTransferMemberRequest) Reset() {
	*x = RemoveTransferMemberRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveTransferMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTransferMemberRequest) ProtoMessage() {}

func (x *RemoveTransferMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTransferMemberRequest.ProtoReflect.Descriptor instead.
func (*RemoveTransferMemberRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{54}
}

func (x *RemoveTransferMemberRequest) GetMemberIdentifier() string {
	if x != nil {
		return x.MemberIdentifier
	}
	return ""
}

func (x *RemoveTransferMemberRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

// request to hangup a transfer member
type RemoveTransferMemberReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveTransferMemberReply) Reset() {
	*x = RemoveTransferMemberReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveTransferMemberReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTransferMemberReply) ProtoMessage() {}

func (x *RemoveTransferMemberReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTransferMemberReply.ProtoReflect.Descriptor instead.
func (*RemoveTransferMemberReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{55}
}

type TransferWarmToAgentStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationAgentId int64           `protobuf:"varint,3,opt,name=destination_agent_id,json=destinationAgentId,proto3" json:"destination_agent_id,omitempty"`
	CallerHold         bool            `protobuf:"varint,4,opt,name=caller_hold,json=callerHold,proto3" json:"caller_hold,omitempty"`
	SessionSid         int64           `protobuf:"varint,5,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
	Skills             map[string]bool `protobuf:"bytes,6,rep,name=skills,proto3" json:"skills,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *TransferWarmToAgentStartRequest) Reset() {
	*x = TransferWarmToAgentStartRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferWarmToAgentStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferWarmToAgentStartRequest) ProtoMessage() {}

func (x *TransferWarmToAgentStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferWarmToAgentStartRequest.ProtoReflect.Descriptor instead.
func (*TransferWarmToAgentStartRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{56}
}

func (x *TransferWarmToAgentStartRequest) GetDestinationAgentId() int64 {
	if x != nil {
		return x.DestinationAgentId
	}
	return 0
}

func (x *TransferWarmToAgentStartRequest) GetCallerHold() bool {
	if x != nil {
		return x.CallerHold
	}
	return false
}

func (x *TransferWarmToAgentStartRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

func (x *TransferWarmToAgentStartRequest) GetSkills() map[string]bool {
	if x != nil {
		return x.Skills
	}
	return nil
}

type TransferWarmToAgentStartReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransferWarmToAgentStartReply) Reset() {
	*x = TransferWarmToAgentStartReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferWarmToAgentStartReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferWarmToAgentStartReply) ProtoMessage() {}

func (x *TransferWarmToAgentStartReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferWarmToAgentStartReply.ProtoReflect.Descriptor instead.
func (*TransferWarmToAgentStartReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{57}
}

type AgentGetCallFromHoldRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionSid int64 `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *AgentGetCallFromHoldRequest) Reset() {
	*x = AgentGetCallFromHoldRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentGetCallFromHoldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentGetCallFromHoldRequest) ProtoMessage() {}

func (x *AgentGetCallFromHoldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentGetCallFromHoldRequest.ProtoReflect.Descriptor instead.
func (*AgentGetCallFromHoldRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{58}
}

func (x *AgentGetCallFromHoldRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type AgentGetCallFromHoldReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentGetCallFromHoldReply) Reset() {
	*x = AgentGetCallFromHoldReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentGetCallFromHoldReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentGetCallFromHoldReply) ProtoMessage() {}

func (x *AgentGetCallFromHoldReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentGetCallFromHoldReply.ProtoReflect.Descriptor instead.
func (*AgentGetCallFromHoldReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{59}
}

type AgentGetSpecificCallFromHoldRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallId     int64                 `protobuf:"varint,3,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	CallType   commons.CallType_Enum `protobuf:"varint,4,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
	SessionSid int64                 `protobuf:"varint,5,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *AgentGetSpecificCallFromHoldRequest) Reset() {
	*x = AgentGetSpecificCallFromHoldRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentGetSpecificCallFromHoldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentGetSpecificCallFromHoldRequest) ProtoMessage() {}

func (x *AgentGetSpecificCallFromHoldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentGetSpecificCallFromHoldRequest.ProtoReflect.Descriptor instead.
func (*AgentGetSpecificCallFromHoldRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{60}
}

func (x *AgentGetSpecificCallFromHoldRequest) GetCallId() int64 {
	if x != nil {
		return x.CallId
	}
	return 0
}

func (x *AgentGetSpecificCallFromHoldRequest) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

func (x *AgentGetSpecificCallFromHoldRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type AgentGetSpecificCallFromHoldReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentGetSpecificCallFromHoldReply) Reset() {
	*x = AgentGetSpecificCallFromHoldReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentGetSpecificCallFromHoldReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentGetSpecificCallFromHoldReply) ProtoMessage() {}

func (x *AgentGetSpecificCallFromHoldReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentGetSpecificCallFromHoldReply.ProtoReflect.Descriptor instead.
func (*AgentGetSpecificCallFromHoldReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{61}
}

type AgentPutCallOnHoldRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HoldType   commons.HoldType `protobuf:"varint,1,opt,name=hold_type,json=holdType,proto3,enum=api.commons.HoldType" json:"hold_type,omitempty"`
	SessionSid int64            `protobuf:"varint,2,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *AgentPutCallOnHoldRequest) Reset() {
	*x = AgentPutCallOnHoldRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentPutCallOnHoldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentPutCallOnHoldRequest) ProtoMessage() {}

func (x *AgentPutCallOnHoldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentPutCallOnHoldRequest.ProtoReflect.Descriptor instead.
func (*AgentPutCallOnHoldRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{62}
}

func (x *AgentPutCallOnHoldRequest) GetHoldType() commons.HoldType {
	if x != nil {
		return x.HoldType
	}
	return commons.HoldType(0)
}

func (x *AgentPutCallOnHoldRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type AgentPutCallOnHoldReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentPutCallOnHoldReply) Reset() {
	*x = AgentPutCallOnHoldReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentPutCallOnHoldReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentPutCallOnHoldReply) ProtoMessage() {}

func (x *AgentPutCallOnHoldReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentPutCallOnHoldReply.ProtoReflect.Descriptor instead.
func (*AgentPutCallOnHoldReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{63}
}

type ACDGetAllAgentsStatusesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Skills            []string `protobuf:"bytes,2,rep,name=skills,proto3" json:"skills,omitempty"`
	AllSkillsRequired bool     `protobuf:"varint,3,opt,name=all_skills_required,json=allSkillsRequired,proto3" json:"all_skills_required,omitempty"`
}

func (x *ACDGetAllAgentsStatusesRequest) Reset() {
	*x = ACDGetAllAgentsStatusesRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ACDGetAllAgentsStatusesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACDGetAllAgentsStatusesRequest) ProtoMessage() {}

func (x *ACDGetAllAgentsStatusesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACDGetAllAgentsStatusesRequest.ProtoReflect.Descriptor instead.
func (*ACDGetAllAgentsStatusesRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{64}
}

func (x *ACDGetAllAgentsStatusesRequest) GetSkills() []string {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *ACDGetAllAgentsStatusesRequest) GetAllSkillsRequired() bool {
	if x != nil {
		return x.AllSkillsRequired
	}
	return false
}

type AgentStatusDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid              int64                    `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty"`
	CurrentSessionId int64                    `protobuf:"varint,2,opt,name=current_session_id,json=currentSessionId,proto3" json:"current_session_id,omitempty"`
	Status           int64                    `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	StatusDesc       commons.AgentStatus_Enum `protobuf:"varint,4,opt,name=status_desc,json=statusDesc,proto3,enum=api.commons.AgentStatus_Enum" json:"status_desc,omitempty"`
	// The users id
	UserId string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *AgentStatusDetails) Reset() {
	*x = AgentStatusDetails{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentStatusDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentStatusDetails) ProtoMessage() {}

func (x *AgentStatusDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentStatusDetails.ProtoReflect.Descriptor instead.
func (*AgentStatusDetails) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{65}
}

func (x *AgentStatusDetails) GetSid() int64 {
	if x != nil {
		return x.Sid
	}
	return 0
}

func (x *AgentStatusDetails) GetCurrentSessionId() int64 {
	if x != nil {
		return x.CurrentSessionId
	}
	return 0
}

func (x *AgentStatusDetails) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AgentStatusDetails) GetStatusDesc() commons.AgentStatus_Enum {
	if x != nil {
		return x.StatusDesc
	}
	return commons.AgentStatus_Enum(0)
}

func (x *AgentStatusDetails) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ACDGetAllAgentsStatusesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentStatusDetails []*AgentStatusDetails `protobuf:"bytes,1,rep,name=agent_status_details,json=agentStatusDetails,proto3" json:"agent_status_details,omitempty"`
}

func (x *ACDGetAllAgentsStatusesReply) Reset() {
	*x = ACDGetAllAgentsStatusesReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ACDGetAllAgentsStatusesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACDGetAllAgentsStatusesReply) ProtoMessage() {}

func (x *ACDGetAllAgentsStatusesReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACDGetAllAgentsStatusesReply.ProtoReflect.Descriptor instead.
func (*ACDGetAllAgentsStatusesReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{66}
}

func (x *ACDGetAllAgentsStatusesReply) GetAgentStatusDetails() []*AgentStatusDetails {
	if x != nil {
		return x.AgentStatusDetails
	}
	return nil
}

type AgentReceiveMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinimumTimestamp int64 `protobuf:"varint,3,opt,name=minimum_timestamp,json=minimumTimestamp,proto3" json:"minimum_timestamp,omitempty"`
	SessionSid       int64 `protobuf:"varint,4,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *AgentReceiveMessageRequest) Reset() {
	*x = AgentReceiveMessageRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentReceiveMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentReceiveMessageRequest) ProtoMessage() {}

func (x *AgentReceiveMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentReceiveMessageRequest.ProtoReflect.Descriptor instead.
func (*AgentReceiveMessageRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{67}
}

func (x *AgentReceiveMessageRequest) GetMinimumTimestamp() int64 {
	if x != nil {
		return x.MinimumTimestamp
	}
	return 0
}

func (x *AgentReceiveMessageRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type AgentReceiveMessageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *AgentReceiveMessageReply) Reset() {
	*x = AgentReceiveMessageReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentReceiveMessageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentReceiveMessageReply) ProtoMessage() {}

func (x *AgentReceiveMessageReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentReceiveMessageReply.ProtoReflect.Descriptor instead.
func (*AgentReceiveMessageReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{68}
}

func (x *AgentReceiveMessageReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AgentReceiveMessageReply) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type AgentPBXRejectCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionSid int64 `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *AgentPBXRejectCallRequest) Reset() {
	*x = AgentPBXRejectCallRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentPBXRejectCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentPBXRejectCallRequest) ProtoMessage() {}

func (x *AgentPBXRejectCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentPBXRejectCallRequest.ProtoReflect.Descriptor instead.
func (*AgentPBXRejectCallRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{69}
}

func (x *AgentPBXRejectCallRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type AgentPBXRejectCallReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentPBXRejectCallReply) Reset() {
	*x = AgentPBXRejectCallReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentPBXRejectCallReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentPBXRejectCallReply) ProtoMessage() {}

func (x *AgentPBXRejectCallReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentPBXRejectCallReply.ProtoReflect.Descriptor instead.
func (*AgentPBXRejectCallReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{70}
}

type AgentPBXApproveCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionSid int64 `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *AgentPBXApproveCallRequest) Reset() {
	*x = AgentPBXApproveCallRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentPBXApproveCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentPBXApproveCallRequest) ProtoMessage() {}

func (x *AgentPBXApproveCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentPBXApproveCallRequest.ProtoReflect.Descriptor instead.
func (*AgentPBXApproveCallRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{71}
}

func (x *AgentPBXApproveCallRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type AgentPBXApproveCallReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentPBXApproveCallReply) Reset() {
	*x = AgentPBXApproveCallReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentPBXApproveCallReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentPBXApproveCallReply) ProtoMessage() {}

func (x *AgentPBXApproveCallReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentPBXApproveCallReply.ProtoReflect.Descriptor instead.
func (*AgentPBXApproveCallReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{72}
}

type GetCallerLostPeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallSid  int64                 `protobuf:"varint,1,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	CallType commons.CallType_Enum `protobuf:"varint,2,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
}

func (x *GetCallerLostPeerRequest) Reset() {
	*x = GetCallerLostPeerRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCallerLostPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCallerLostPeerRequest) ProtoMessage() {}

func (x *GetCallerLostPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCallerLostPeerRequest.ProtoReflect.Descriptor instead.
func (*GetCallerLostPeerRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{73}
}

func (x *GetCallerLostPeerRequest) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *GetCallerLostPeerRequest) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

type GetCallerLostPeerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HuntGroupSid int64 `protobuf:"varint,2,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
}

func (x *GetCallerLostPeerReply) Reset() {
	*x = GetCallerLostPeerReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCallerLostPeerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCallerLostPeerReply) ProtoMessage() {}

func (x *GetCallerLostPeerReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCallerLostPeerReply.ProtoReflect.Descriptor instead.
func (*GetCallerLostPeerReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{74}
}

func (x *GetCallerLostPeerReply) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

type CallerGetRawEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallSid  int64                 `protobuf:"varint,1,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	CallType commons.CallType_Enum `protobuf:"varint,2,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
}

func (x *CallerGetRawEventRequest) Reset() {
	*x = CallerGetRawEventRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallerGetRawEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallerGetRawEventRequest) ProtoMessage() {}

func (x *CallerGetRawEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallerGetRawEventRequest.ProtoReflect.Descriptor instead.
func (*CallerGetRawEventRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{75}
}

func (x *CallerGetRawEventRequest) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *CallerGetRawEventRequest) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

type CallerGetRawEventReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *CallerEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *CallerGetRawEventReply) Reset() {
	*x = CallerGetRawEventReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallerGetRawEventReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallerGetRawEventReply) ProtoMessage() {}

func (x *CallerGetRawEventReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallerGetRawEventReply.ProtoReflect.Descriptor instead.
func (*CallerGetRawEventReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{76}
}

func (x *CallerGetRawEventReply) GetEvent() *CallerEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

// This is the front end version of the caller event. If more data is needed we can add.
type CallerEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Skills    map[string]bool `protobuf:"bytes,19,rep,name=skills,proto3" json:"skills,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AllSkills map[string]bool `protobuf:"bytes,20,rep,name=allSkills,proto3" json:"allSkills,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *CallerEvent) Reset() {
	*x = CallerEvent{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallerEvent) ProtoMessage() {}

func (x *CallerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallerEvent.ProtoReflect.Descriptor instead.
func (*CallerEvent) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{77}
}

func (x *CallerEvent) GetSkills() map[string]bool {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *CallerEvent) GetAllSkills() map[string]bool {
	if x != nil {
		return x.AllSkills
	}
	return nil
}

type PeerAgentWithCallerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallSid    int64                 `protobuf:"varint,1,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	CallType   commons.CallType_Enum `protobuf:"varint,2,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
	SessionSid int64                 `protobuf:"varint,3,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *PeerAgentWithCallerRequest) Reset() {
	*x = PeerAgentWithCallerRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerAgentWithCallerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerAgentWithCallerRequest) ProtoMessage() {}

func (x *PeerAgentWithCallerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerAgentWithCallerRequest.ProtoReflect.Descriptor instead.
func (*PeerAgentWithCallerRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{78}
}

func (x *PeerAgentWithCallerRequest) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *PeerAgentWithCallerRequest) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

func (x *PeerAgentWithCallerRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type PeerAgentWithCallerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PeerAgentWithCallerReply) Reset() {
	*x = PeerAgentWithCallerReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerAgentWithCallerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerAgentWithCallerReply) ProtoMessage() {}

func (x *PeerAgentWithCallerReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerAgentWithCallerReply.ProtoReflect.Descriptor instead.
func (*PeerAgentWithCallerReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{79}
}

type HoldTransferMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionSid       int64  `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
	MemberIdentifier string `protobuf:"bytes,2,opt,name=member_identifier,json=memberIdentifier,proto3" json:"member_identifier,omitempty"`
}

func (x *HoldTransferMemberReq) Reset() {
	*x = HoldTransferMemberReq{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HoldTransferMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldTransferMemberReq) ProtoMessage() {}

func (x *HoldTransferMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldTransferMemberReq.ProtoReflect.Descriptor instead.
func (*HoldTransferMemberReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{80}
}

func (x *HoldTransferMemberReq) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

func (x *HoldTransferMemberReq) GetMemberIdentifier() string {
	if x != nil {
		return x.MemberIdentifier
	}
	return ""
}

type HoldTransferMemberRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HoldTransferMemberRes) Reset() {
	*x = HoldTransferMemberRes{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HoldTransferMemberRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldTransferMemberRes) ProtoMessage() {}

func (x *HoldTransferMemberRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldTransferMemberRes.ProtoReflect.Descriptor instead.
func (*HoldTransferMemberRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{81}
}

type UnholdTransferMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionSid       int64  `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
	MemberIdentifier string `protobuf:"bytes,2,opt,name=member_identifier,json=memberIdentifier,proto3" json:"member_identifier,omitempty"`
}

func (x *UnholdTransferMemberReq) Reset() {
	*x = UnholdTransferMemberReq{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnholdTransferMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnholdTransferMemberReq) ProtoMessage() {}

func (x *UnholdTransferMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnholdTransferMemberReq.ProtoReflect.Descriptor instead.
func (*UnholdTransferMemberReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{82}
}

func (x *UnholdTransferMemberReq) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

func (x *UnholdTransferMemberReq) GetMemberIdentifier() string {
	if x != nil {
		return x.MemberIdentifier
	}
	return ""
}

type UnholdTransferMemberRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnholdTransferMemberRes) Reset() {
	*x = UnholdTransferMemberRes{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnholdTransferMemberRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnholdTransferMemberRes) ProtoMessage() {}

func (x *UnholdTransferMemberRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnholdTransferMemberRes.ProtoReflect.Descriptor instead.
func (*UnholdTransferMemberRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{83}
}

type GetAgentCallCountsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentSkills        []string `protobuf:"bytes,1,rep,name=agent_skills,json=agentSkills,proto3" json:"agent_skills,omitempty"`
	AgentPbxExtensions []string `protobuf:"bytes,2,rep,name=agent_pbx_extensions,json=agentPbxExtensions,proto3" json:"agent_pbx_extensions,omitempty"`
}

func (x *GetAgentCallCountsReq) Reset() {
	*x = GetAgentCallCountsReq{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAgentCallCountsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentCallCountsReq) ProtoMessage() {}

func (x *GetAgentCallCountsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentCallCountsReq.ProtoReflect.Descriptor instead.
func (*GetAgentCallCountsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{84}
}

func (x *GetAgentCallCountsReq) GetAgentSkills() []string {
	if x != nil {
		return x.AgentSkills
	}
	return nil
}

func (x *GetAgentCallCountsReq) GetAgentPbxExtensions() []string {
	if x != nil {
		return x.AgentPbxExtensions
	}
	return nil
}

type GetAgentCallCountsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentCalls  int64 `protobuf:"varint,1,opt,name=agent_calls,json=agentCalls,proto3" json:"agent_calls,omitempty"`
	SkillCalls  int64 `protobuf:"varint,2,opt,name=skill_calls,json=skillCalls,proto3" json:"skill_calls,omitempty"`
	OnHoldCalls int64 `protobuf:"varint,3,opt,name=on_hold_calls,json=onHoldCalls,proto3" json:"on_hold_calls,omitempty"`
}

func (x *GetAgentCallCountsRes) Reset() {
	*x = GetAgentCallCountsRes{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAgentCallCountsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentCallCountsRes) ProtoMessage() {}

func (x *GetAgentCallCountsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentCallCountsRes.ProtoReflect.Descriptor instead.
func (*GetAgentCallCountsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{85}
}

func (x *GetAgentCallCountsRes) GetAgentCalls() int64 {
	if x != nil {
		return x.AgentCalls
	}
	return 0
}

func (x *GetAgentCallCountsRes) GetSkillCalls() int64 {
	if x != nil {
		return x.SkillCalls
	}
	return 0
}

func (x *GetAgentCallCountsRes) GetOnHoldCalls() int64 {
	if x != nil {
		return x.OnHoldCalls
	}
	return 0
}

// message used to start a warm caller transfer
type WarmCallerTransferStartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the session sid for the agent
	SessionSid int64 `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
	// the sid for the destination caller
	CallSid int64 `protobuf:"varint,2,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	// the type for the destination caller
	CallType commons.CallType_Enum `protobuf:"varint,3,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
	// whether or not we should mute current caller ro not
	CallerHold bool `protobuf:"varint,4,opt,name=caller_hold,json=callerHold,proto3" json:"caller_hold,omitempty"`
}

func (x *WarmCallerTransferStartReq) Reset() {
	*x = WarmCallerTransferStartReq{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WarmCallerTransferStartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarmCallerTransferStartReq) ProtoMessage() {}

func (x *WarmCallerTransferStartReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarmCallerTransferStartReq.ProtoReflect.Descriptor instead.
func (*WarmCallerTransferStartReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{86}
}

func (x *WarmCallerTransferStartReq) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

func (x *WarmCallerTransferStartReq) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *WarmCallerTransferStartReq) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

func (x *WarmCallerTransferStartReq) GetCallerHold() bool {
	if x != nil {
		return x.CallerHold
	}
	return false
}

// message used in response to start a warm caller transfer
type WarmCallerTransferStartRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WarmCallerTransferStartRes) Reset() {
	*x = WarmCallerTransferStartRes{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WarmCallerTransferStartRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarmCallerTransferStartRes) ProtoMessage() {}

func (x *WarmCallerTransferStartRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarmCallerTransferStartRes.ProtoReflect.Descriptor instead.
func (*WarmCallerTransferStartRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{87}
}

// message used to cancel a warm caller transfer
type WarmCallerTransferCancelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the session sid for the agent
	SessionSid int64 `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
	// the reason for the cancel
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *WarmCallerTransferCancelReq) Reset() {
	*x = WarmCallerTransferCancelReq{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WarmCallerTransferCancelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarmCallerTransferCancelReq) ProtoMessage() {}

func (x *WarmCallerTransferCancelReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarmCallerTransferCancelReq.ProtoReflect.Descriptor instead.
func (*WarmCallerTransferCancelReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{88}
}

func (x *WarmCallerTransferCancelReq) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

func (x *WarmCallerTransferCancelReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// message used in response to canceling a wamr caller transfer
type WarmCallerTransferCancelRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WarmCallerTransferCancelRes) Reset() {
	*x = WarmCallerTransferCancelRes{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WarmCallerTransferCancelRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarmCallerTransferCancelRes) ProtoMessage() {}

func (x *WarmCallerTransferCancelRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarmCallerTransferCancelRes.ProtoReflect.Descriptor instead.
func (*WarmCallerTransferCancelRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{89}
}

// message used to approve a warm caller transfer
type WarmCallerTransferApproveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the session sid for the agent
	SessionSid int64 `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
	// the reason for the approve
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *WarmCallerTransferApproveReq) Reset() {
	*x = WarmCallerTransferApproveReq{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WarmCallerTransferApproveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarmCallerTransferApproveReq) ProtoMessage() {}

func (x *WarmCallerTransferApproveReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarmCallerTransferApproveReq.ProtoReflect.Descriptor instead.
func (*WarmCallerTransferApproveReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{90}
}

func (x *WarmCallerTransferApproveReq) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

func (x *WarmCallerTransferApproveReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// message used in response to approving a wamr caller transfer
type WarmCallerTransferApproveRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WarmCallerTransferApproveRes) Reset() {
	*x = WarmCallerTransferApproveRes{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WarmCallerTransferApproveRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarmCallerTransferApproveRes) ProtoMessage() {}

func (x *WarmCallerTransferApproveRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarmCallerTransferApproveRes.ProtoReflect.Descriptor instead.
func (*WarmCallerTransferApproveRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{91}
}

// message used in a request for playing audio from the soundboard
type PlaySoundboardEntityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the session sid for the agent
	SessionSid int64 `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
	// the id of the requested soundboard entity to play
	SoundboardEntityId int64 `protobuf:"varint,2,opt,name=soundboard_entity_id,json=soundboardEntityId,proto3" json:"soundboard_entity_id,omitempty"`
}

func (x *PlaySoundboardEntityReq) Reset() {
	*x = PlaySoundboardEntityReq{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlaySoundboardEntityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaySoundboardEntityReq) ProtoMessage() {}

func (x *PlaySoundboardEntityReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaySoundboardEntityReq.ProtoReflect.Descriptor instead.
func (*PlaySoundboardEntityReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{92}
}

func (x *PlaySoundboardEntityReq) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

func (x *PlaySoundboardEntityReq) GetSoundboardEntityId() int64 {
	if x != nil {
		return x.SoundboardEntityId
	}
	return 0
}

// message used in a response for playing audio from the soundboard
type PlaySoundboardEntityRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the instance of sound being played
	SoundInstanceId string `protobuf:"bytes,1,opt,name=sound_instance_id,json=soundInstanceId,proto3" json:"sound_instance_id,omitempty"`
}

func (x *PlaySoundboardEntityRes) Reset() {
	*x = PlaySoundboardEntityRes{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlaySoundboardEntityRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaySoundboardEntityRes) ProtoMessage() {}

func (x *PlaySoundboardEntityRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaySoundboardEntityRes.ProtoReflect.Descriptor instead.
func (*PlaySoundboardEntityRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{93}
}

func (x *PlaySoundboardEntityRes) GetSoundInstanceId() string {
	if x != nil {
		return x.SoundInstanceId
	}
	return ""
}

// message used in a request for stopping audio from the soundbooard
type StopSoundboardEntityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the session sid for the agent
	SessionSid int64 `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
	// the id of the instance of sound being played
	SoundInstanceId string `protobuf:"bytes,2,opt,name=sound_instance_id,json=soundInstanceId,proto3" json:"sound_instance_id,omitempty"`
}

func (x *StopSoundboardEntityReq) Reset() {
	*x = StopSoundboardEntityReq{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopSoundboardEntityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopSoundboardEntityReq) ProtoMessage() {}

func (x *StopSoundboardEntityReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopSoundboardEntityReq.ProtoReflect.Descriptor instead.
func (*StopSoundboardEntityReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{94}
}

func (x *StopSoundboardEntityReq) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

func (x *StopSoundboardEntityReq) GetSoundInstanceId() string {
	if x != nil {
		return x.SoundInstanceId
	}
	return ""
}

// message used in a response for stopping audio from the soundbooard
type StopSoundboardEntityRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopSoundboardEntityRes) Reset() {
	*x = StopSoundboardEntityRes{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopSoundboardEntityRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopSoundboardEntityRes) ProtoMessage() {}

func (x *StopSoundboardEntityRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopSoundboardEntityRes.ProtoReflect.Descriptor instead.
func (*StopSoundboardEntityRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{95}
}

// message used to update an agent's skills
type UpdateAgentSkillsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the session sid for the agent
	SessionSid int64 `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
	// the skills to update
	Skills map[string]int64 `protobuf:"bytes,2,rep,name=skills,proto3" json:"skills,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// true to replace the skills or false to add them
	ReplaceSkills bool `protobuf:"varint,4,opt,name=replace_skills,json=replaceSkills,proto3" json:"replace_skills,omitempty"`
}

func (x *UpdateAgentSkillsRequest) Reset() {
	*x = UpdateAgentSkillsRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAgentSkillsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentSkillsRequest) ProtoMessage() {}

func (x *UpdateAgentSkillsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentSkillsRequest.ProtoReflect.Descriptor instead.
func (*UpdateAgentSkillsRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{96}
}

func (x *UpdateAgentSkillsRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

func (x *UpdateAgentSkillsRequest) GetSkills() map[string]int64 {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *UpdateAgentSkillsRequest) GetReplaceSkills() bool {
	if x != nil {
		return x.ReplaceSkills
	}
	return false
}

// message used in response to updating an agent's skills
type UpdateAgentSkillsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAgentSkillsReply) Reset() {
	*x = UpdateAgentSkillsReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAgentSkillsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentSkillsReply) ProtoMessage() {}

func (x *UpdateAgentSkillsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentSkillsReply.ProtoReflect.Descriptor instead.
func (*UpdateAgentSkillsReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{97}
}

// message used to play a dtmf tone in an agent's conference
type PlayDTMFRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the session sid for the agent
	SessionSid int64 `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
	// the dtmf tone to play
	DtmfDigits []commons.DTMFDigit `protobuf:"varint,2,rep,packed,name=dtmf_digits,json=dtmfDigits,proto3,enum=api.commons.DTMFDigit" json:"dtmf_digits,omitempty"`
}

func (x *PlayDTMFRequest) Reset() {
	*x = PlayDTMFRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayDTMFRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayDTMFRequest) ProtoMessage() {}

func (x *PlayDTMFRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayDTMFRequest.ProtoReflect.Descriptor instead.
func (*PlayDTMFRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{98}
}

func (x *PlayDTMFRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

func (x *PlayDTMFRequest) GetDtmfDigits() []commons.DTMFDigit {
	if x != nil {
		return x.DtmfDigits
	}
	return nil
}

// message used in response to playing a dtmf tone in an agent's conference
type PlayDTMFReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlayDTMFReply) Reset() {
	*x = PlayDTMFReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayDTMFReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayDTMFReply) ProtoMessage() {}

func (x *PlayDTMFReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayDTMFReply.ProtoReflect.Descriptor instead.
func (*PlayDTMFReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{99}
}

type AgentMuteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the session sid for the agent
	SessionSid int64 `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *AgentMuteRequest) Reset() {
	*x = AgentMuteRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentMuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentMuteRequest) ProtoMessage() {}

func (x *AgentMuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentMuteRequest.ProtoReflect.Descriptor instead.
func (*AgentMuteRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{100}
}

func (x *AgentMuteRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type AgentMuteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentMuteReply) Reset() {
	*x = AgentMuteReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentMuteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentMuteReply) ProtoMessage() {}

func (x *AgentMuteReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentMuteReply.ProtoReflect.Descriptor instead.
func (*AgentMuteReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{101}
}

type AgentUnmuteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the session sid for the agent
	SessionSid int64 `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *AgentUnmuteRequest) Reset() {
	*x = AgentUnmuteRequest{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentUnmuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentUnmuteRequest) ProtoMessage() {}

func (x *AgentUnmuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentUnmuteRequest.ProtoReflect.Descriptor instead.
func (*AgentUnmuteRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{102}
}

func (x *AgentUnmuteRequest) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type AgentUnmuteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentUnmuteReply) Reset() {
	*x = AgentUnmuteReply{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentUnmuteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentUnmuteReply) ProtoMessage() {}

func (x *AgentUnmuteReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentUnmuteReply.ProtoReflect.Descriptor instead.
func (*AgentUnmuteReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{103}
}

type StartSecureFormReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortalId        string `protobuf:"bytes,1,opt,name=portal_id,json=portalId,proto3" json:"portal_id,omitempty"`
	VoiceSessionSid int64  `protobuf:"varint,2,opt,name=voice_session_sid,json=voiceSessionSid,proto3" json:"voice_session_sid,omitempty"`
}

func (x *StartSecureFormReq) Reset() {
	*x = StartSecureFormReq{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartSecureFormReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSecureFormReq) ProtoMessage() {}

func (x *StartSecureFormReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSecureFormReq.ProtoReflect.Descriptor instead.
func (*StartSecureFormReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{104}
}

func (x *StartSecureFormReq) GetPortalId() string {
	if x != nil {
		return x.PortalId
	}
	return ""
}

func (x *StartSecureFormReq) GetVoiceSessionSid() int64 {
	if x != nil {
		return x.VoiceSessionSid
	}
	return 0
}

type StartSecureFormRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartSecureFormRes) Reset() {
	*x = StartSecureFormRes{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartSecureFormRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSecureFormRes) ProtoMessage() {}

func (x *StartSecureFormRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSecureFormRes.ProtoReflect.Descriptor instead.
func (*StartSecureFormRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{105}
}

type CollectSecureFormFieldReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName       string `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	VoiceSessionSid int64  `protobuf:"varint,2,opt,name=voice_session_sid,json=voiceSessionSid,proto3" json:"voice_session_sid,omitempty"`
}

func (x *CollectSecureFormFieldReq) Reset() {
	*x = CollectSecureFormFieldReq{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectSecureFormFieldReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectSecureFormFieldReq) ProtoMessage() {}

func (x *CollectSecureFormFieldReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectSecureFormFieldReq.ProtoReflect.Descriptor instead.
func (*CollectSecureFormFieldReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{106}
}

func (x *CollectSecureFormFieldReq) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *CollectSecureFormFieldReq) GetVoiceSessionSid() int64 {
	if x != nil {
		return x.VoiceSessionSid
	}
	return 0
}

type CollectSecureFormFieldRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CollectSecureFormFieldRes) Reset() {
	*x = CollectSecureFormFieldRes{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectSecureFormFieldRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectSecureFormFieldRes) ProtoMessage() {}

func (x *CollectSecureFormFieldRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectSecureFormFieldRes.ProtoReflect.Descriptor instead.
func (*CollectSecureFormFieldRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{107}
}

type ResetSecureFormFieldReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceSessionSid int64 `protobuf:"varint,1,opt,name=voice_session_sid,json=voiceSessionSid,proto3" json:"voice_session_sid,omitempty"`
}

func (x *ResetSecureFormFieldReq) Reset() {
	*x = ResetSecureFormFieldReq{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetSecureFormFieldReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetSecureFormFieldReq) ProtoMessage() {}

func (x *ResetSecureFormFieldReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetSecureFormFieldReq.ProtoReflect.Descriptor instead.
func (*ResetSecureFormFieldReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{108}
}

func (x *ResetSecureFormFieldReq) GetVoiceSessionSid() int64 {
	if x != nil {
		return x.VoiceSessionSid
	}
	return 0
}

type ResetSecureFormFieldRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetSecureFormFieldRes) Reset() {
	*x = ResetSecureFormFieldRes{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetSecureFormFieldRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetSecureFormFieldRes) ProtoMessage() {}

func (x *ResetSecureFormFieldRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetSecureFormFieldRes.ProtoReflect.Descriptor instead.
func (*ResetSecureFormFieldRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{109}
}

type AcceptSecureFormFieldReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceSessionSid int64 `protobuf:"varint,1,opt,name=voice_session_sid,json=voiceSessionSid,proto3" json:"voice_session_sid,omitempty"`
}

func (x *AcceptSecureFormFieldReq) Reset() {
	*x = AcceptSecureFormFieldReq{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcceptSecureFormFieldReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptSecureFormFieldReq) ProtoMessage() {}

func (x *AcceptSecureFormFieldReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptSecureFormFieldReq.ProtoReflect.Descriptor instead.
func (*AcceptSecureFormFieldReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{110}
}

func (x *AcceptSecureFormFieldReq) GetVoiceSessionSid() int64 {
	if x != nil {
		return x.VoiceSessionSid
	}
	return 0
}

type AcceptSecureFormFieldRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AcceptSecureFormFieldRes) Reset() {
	*x = AcceptSecureFormFieldRes{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcceptSecureFormFieldRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptSecureFormFieldRes) ProtoMessage() {}

func (x *AcceptSecureFormFieldRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptSecureFormFieldRes.ProtoReflect.Descriptor instead.
func (*AcceptSecureFormFieldRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{111}
}

type ProcessSecureFormReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values   map[string]*integrations.Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PortalId string                         `protobuf:"bytes,2,opt,name=portal_id,json=portalId,proto3" json:"portal_id,omitempty"`
	// segment tells us which workflow segment needs processing
	Segment int32 `protobuf:"varint,3,opt,name=segment,proto3" json:"segment,omitempty"`
	// which choice in the workflow array to be processed
	Choice          int32 `protobuf:"varint,4,opt,name=choice,proto3" json:"choice,omitempty"`
	VoiceSessionSid int64 `protobuf:"varint,5,opt,name=voice_session_sid,json=voiceSessionSid,proto3" json:"voice_session_sid,omitempty"`
}

func (x *ProcessSecureFormReq) Reset() {
	*x = ProcessSecureFormReq{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessSecureFormReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessSecureFormReq) ProtoMessage() {}

func (x *ProcessSecureFormReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessSecureFormReq.ProtoReflect.Descriptor instead.
func (*ProcessSecureFormReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{112}
}

func (x *ProcessSecureFormReq) GetValues() map[string]*integrations.Value {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *ProcessSecureFormReq) GetPortalId() string {
	if x != nil {
		return x.PortalId
	}
	return ""
}

func (x *ProcessSecureFormReq) GetSegment() int32 {
	if x != nil {
		return x.Segment
	}
	return 0
}

func (x *ProcessSecureFormReq) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

func (x *ProcessSecureFormReq) GetVoiceSessionSid() int64 {
	if x != nil {
		return x.VoiceSessionSid
	}
	return 0
}

type ProcessSecureFormRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// the response data from the process
	Data map[string]*integrations.Value `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ProcessSecureFormRes) Reset() {
	*x = ProcessSecureFormRes{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessSecureFormRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessSecureFormRes) ProtoMessage() {}

func (x *ProcessSecureFormRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessSecureFormRes.ProtoReflect.Descriptor instead.
func (*ProcessSecureFormRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{113}
}

func (x *ProcessSecureFormRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ProcessSecureFormRes) GetData() map[string]*integrations.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type FinishSecureFormHandlingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason          string                         `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	Data            map[string]*integrations.Value `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VoiceSessionSid int64                          `protobuf:"varint,3,opt,name=voice_session_sid,json=voiceSessionSid,proto3" json:"voice_session_sid,omitempty"`
}

func (x *FinishSecureFormHandlingReq) Reset() {
	*x = FinishSecureFormHandlingReq{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinishSecureFormHandlingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishSecureFormHandlingReq) ProtoMessage() {}

func (x *FinishSecureFormHandlingReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishSecureFormHandlingReq.ProtoReflect.Descriptor instead.
func (*FinishSecureFormHandlingReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{114}
}

func (x *FinishSecureFormHandlingReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *FinishSecureFormHandlingReq) GetData() map[string]*integrations.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FinishSecureFormHandlingReq) GetVoiceSessionSid() int64 {
	if x != nil {
		return x.VoiceSessionSid
	}
	return 0
}

type FinishSecureFormHandlingRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FinishSecureFormHandlingRes) Reset() {
	*x = FinishSecureFormHandlingRes{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinishSecureFormHandlingRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishSecureFormHandlingRes) ProtoMessage() {}

func (x *FinishSecureFormHandlingRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishSecureFormHandlingRes.ProtoReflect.Descriptor instead.
func (*FinishSecureFormHandlingRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{115}
}

type PopulateWorkflowFieldsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientSid           int64                 `protobuf:"varint,1,opt,name=client_sid,json=clientSid,proto3" json:"client_sid,omitempty"`
	AgentSid            int64                 `protobuf:"varint,2,opt,name=agent_sid,json=agentSid,proto3" json:"agent_sid,omitempty"`
	CallSid             int64                 `protobuf:"varint,3,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	CallType            commons.CallType_Enum `protobuf:"varint,4,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
	ScheduledCallbackId string                `protobuf:"bytes,5,opt,name=scheduled_callback_id,json=scheduledCallbackId,proto3" json:"scheduled_callback_id,omitempty"`
	// field_definitions are all the fields that we will check if they have already been collected during the IVR
	FieldDefinitions []*integrations1.FieldDefinition `protobuf:"bytes,6,rep,name=field_definitions,json=fieldDefinitions,proto3" json:"field_definitions,omitempty"`
}

func (x *PopulateWorkflowFieldsReq) Reset() {
	*x = PopulateWorkflowFieldsReq{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PopulateWorkflowFieldsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopulateWorkflowFieldsReq) ProtoMessage() {}

func (x *PopulateWorkflowFieldsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopulateWorkflowFieldsReq.ProtoReflect.Descriptor instead.
func (*PopulateWorkflowFieldsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{116}
}

func (x *PopulateWorkflowFieldsReq) GetClientSid() int64 {
	if x != nil {
		return x.ClientSid
	}
	return 0
}

func (x *PopulateWorkflowFieldsReq) GetAgentSid() int64 {
	if x != nil {
		return x.AgentSid
	}
	return 0
}

func (x *PopulateWorkflowFieldsReq) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *PopulateWorkflowFieldsReq) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

func (x *PopulateWorkflowFieldsReq) GetScheduledCallbackId() string {
	if x != nil {
		return x.ScheduledCallbackId
	}
	return ""
}

func (x *PopulateWorkflowFieldsReq) GetFieldDefinitions() []*integrations1.FieldDefinition {
	if x != nil {
		return x.FieldDefinitions
	}
	return nil
}

type PopulateWorkflowFieldsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values map[string]*integrations.Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PopulateWorkflowFieldsRes) Reset() {
	*x = PopulateWorkflowFieldsRes{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PopulateWorkflowFieldsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopulateWorkflowFieldsRes) ProtoMessage() {}

func (x *PopulateWorkflowFieldsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopulateWorkflowFieldsRes.ProtoReflect.Descriptor instead.
func (*PopulateWorkflowFieldsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{117}
}

func (x *PopulateWorkflowFieldsRes) GetValues() map[string]*integrations.Value {
	if x != nil {
		return x.Values
	}
	return nil
}

type ValidateFieldReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceSessionSid int64                    `protobuf:"varint,1,opt,name=voice_session_sid,json=voiceSessionSid,proto3" json:"voice_session_sid,omitempty"`
	ValidationType  integrations1.Validation `protobuf:"varint,2,opt,name=validation_type,json=validationType,proto3,enum=api.commons.integrations.Validation" json:"validation_type,omitempty"`
	FieldName       string                   `protobuf:"bytes,3,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
}

func (x *ValidateFieldReq) Reset() {
	*x = ValidateFieldReq{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateFieldReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateFieldReq) ProtoMessage() {}

func (x *ValidateFieldReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateFieldReq.ProtoReflect.Descriptor instead.
func (*ValidateFieldReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{118}
}

func (x *ValidateFieldReq) GetVoiceSessionSid() int64 {
	if x != nil {
		return x.VoiceSessionSid
	}
	return 0
}

func (x *ValidateFieldReq) GetValidationType() integrations1.Validation {
	if x != nil {
		return x.ValidationType
	}
	return integrations1.Validation(0)
}

func (x *ValidateFieldReq) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

type ValidateFieldRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid  bool   `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ValidateFieldRes) Reset() {
	*x = ValidateFieldRes{}
	mi := &file_api_v0alpha_acd_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateFieldRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateFieldRes) ProtoMessage() {}

func (x *ValidateFieldRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_acd_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateFieldRes.ProtoReflect.Descriptor instead.
func (*ValidateFieldRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_acd_proto_rawDescGZIP(), []int{119}
}

func (x *ValidateFieldRes) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *ValidateFieldRes) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

var File_api_v0alpha_acd_proto protoreflect.FileDescriptor

var file_api_v0alpha_acd_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x1a, 0x17, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x27, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x66, 0x0a, 0x15, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6b, 0x65,
	0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65,
	0x22, 0xce, 0x04, 0x0a, 0x13, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x34, 0x0a, 0x17, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x73,
	0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x65, 0x72, 0x49, 0x73, 0x4c, 0x6f, 0x73,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x73, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x4d, 0x75, 0x74, 0x65,
	0x64, 0x22, 0x59, 0x0a, 0x1d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x1b,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x61,
	0x6c, 0x6c, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x60, 0x0a,
	0x24, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x76, 0x0a, 0x22, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x63,
	0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5f, 0x0a, 0x14, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3d,
	0x0a, 0x1a, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x1a, 0x0a,
	0x18, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3d, 0x0a, 0x1a, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x3d, 0x0a, 0x1a, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x63, 0x6f, 0x6d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x6f, 0x6d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x3b, 0x0a, 0x18, 0x44, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x18, 0x0a, 0x16,
	0x44, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3a, 0x0a, 0x17, 0x44, 0x69, 0x61, 0x6c, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3c, 0x0a, 0x19, 0x44,
	0x69, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x69, 0x61,
	0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x4c, 0x0a, 0x11, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x11, 0x0a, 0x0f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x37, 0x0a, 0x14, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x14,
	0x0a, 0x12, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x36, 0x0a, 0x13, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x55, 0x49,
	0x42, 0x75, 0x73, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x13, 0x0a, 0x11,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x55, 0x49, 0x42, 0x75, 0x73, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x51, 0x0a, 0x16, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xb0, 0x01, 0x0a,
	0x14, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x64, 0x12, 0x49, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x16, 0x0a, 0x14, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0xf9, 0x02, 0x0a, 0x14, 0x43, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x77,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x06,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x62, 0x6f, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x6f, 0x78, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x49, 0x0a, 0x20, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x4a, 0x04,
	0x08, 0x03, 0x10, 0x04, 0x22, 0x20, 0x0a, 0x1e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x57, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x46, 0x0a, 0x23, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x57, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x23,
	0x0a, 0x21, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6d, 0x54, 0x6f,
	0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x4a, 0x0a, 0x21, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57,
	0x61, 0x72, 0x6d, 0x54, 0x6f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22,
	0x21, 0x0a, 0x1f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6d, 0x54,
	0x6f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x76, 0x0a, 0x24, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x61,
	0x72, 0x6d, 0x54, 0x6f, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x24, 0x0a, 0x22, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x4f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x59, 0x0a, 0x1c, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x43,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x4f, 0x0a, 0x2c, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x2a, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x55, 0x0a, 0x18, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22,
	0x18, 0x0a, 0x16, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x43,
	0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xac, 0x01, 0x0a, 0x1d, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x64, 0x54, 0x6f, 0x4f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x64, 0x54, 0x6f, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x6f, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x64, 0x54, 0x6f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x64, 0x54, 0x6f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0xd2, 0x01, 0x0a, 0x22, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x57, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x48, 0x6f, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x22, 0x0a, 0x20, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x4f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xb6, 0x01,
	0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x57, 0x61, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x6b, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x1b, 0x0a, 0x19,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xa2, 0x02, 0x0a, 0x1f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x48, 0x6f, 0x6c, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x64, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1f,
	0x0a, 0x1d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6d, 0x54, 0x6f,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x3e, 0x0a, 0x1b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x46,
	0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22,
	0x1b, 0x0a, 0x19, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x46,
	0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x98, 0x01, 0x0a,
	0x23, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x63, 0x61,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x23, 0x0a, 0x21, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x46,
	0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x70, 0x0a, 0x19,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x48, 0x6f,
	0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x19,
	0x0a, 0x17, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4f, 0x6e,
	0x48, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x68, 0x0a, 0x1e, 0x41, 0x43, 0x44,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x61, 0x6c, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x12, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x1c, 0x41,
	0x43, 0x44, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x51, 0x0a, 0x14, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x12, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x6a,
	0x0a, 0x1a, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x18, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x3c,
	0x0a, 0x19, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x42, 0x58, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x19, 0x0a, 0x17,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x42, 0x58, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3d, 0x0a, 0x1a, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x50, 0x42, 0x58, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50,
	0x42, 0x58, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x6e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x4c,
	0x6f, 0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x44, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x4c,
	0x6f, 0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x0e,
	0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x69, 0x64, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x6e, 0x0a, 0x18, 0x43, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12,
	0x37, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08,
	0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x48, 0x0a, 0x16, 0x43, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x22, 0x8b, 0x02, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x45, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x6c,
	0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x6c,
	0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x91, 0x01, 0x0a, 0x1a, 0x50, 0x65, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x50, 0x65, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x65, 0x0a, 0x15, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x17, 0x0a, 0x15, 0x48, 0x6f, 0x6c, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x22, 0x67, 0x0a, 0x17, 0x55, 0x6e, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x19, 0x0a, 0x17, 0x55, 0x6e, 0x68,
	0x6f, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x62, 0x78, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x78, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x7d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x22, 0xb2, 0x01, 0x0a, 0x1a, 0x57, 0x61, 0x72, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x48, 0x6f, 0x6c, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x57, 0x61, 0x72, 0x6d, 0x43, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x22, 0x56, 0x0a, 0x1b, 0x57, 0x61, 0x72, 0x6d, 0x43, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x1d, 0x0a, 0x1b,
	0x57, 0x61, 0x72, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x57, 0x0a, 0x1c, 0x57,
	0x61, 0x72, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0x1e, 0x0a, 0x1c, 0x57, 0x61, 0x72, 0x6d, 0x43, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x52, 0x65, 0x73, 0x22, 0x70, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x75, 0x6e,
	0x64, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64,
	0x12, 0x34, 0x0a, 0x14, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x6f,
	0x75, 0x6e, 0x64, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x66, 0x0a,
	0x17, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x22, 0xe8, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x49,
	0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x18, 0x0a, 0x16, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x6b, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x44, 0x54, 0x4d,
	0x46, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x64, 0x74, 0x6d,
	0x66, 0x5f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x54, 0x4d,
	0x46, 0x44, 0x69, 0x67, 0x69, 0x74, 0x52, 0x0a, 0x64, 0x74, 0x6d, 0x66, 0x44, 0x69, 0x67, 0x69,
	0x74, 0x73, 0x22, 0x0f, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x44, 0x54, 0x4d, 0x46, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x33, 0x0a, 0x10, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x4d, 0x75, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x35, 0x0a, 0x12, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x64, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x6d, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x5d, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x22, 0x66, 0x0a, 0x19, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x22,
	0x45, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65,
	0x73, 0x22, 0x46, 0x0a, 0x18, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a,
	0x11, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x65, 0x73, 0x22, 0xb5, 0x02, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x45,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65,
	0x71, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64,
	0x1a, 0x5b, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcc, 0x01,
	0x0a, 0x14, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65,
	0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x59, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x84, 0x02, 0x0a,
	0x1b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x11,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x1a, 0x59, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x1d, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x22, 0xb7, 0x02, 0x0a, 0x19, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc4, 0x01, 0x0a,
	0x19, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x5b, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xac, 0x01, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x40, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x32, 0xb3, 0x4c, 0x0a, 0x03, 0x41, 0x63, 0x64, 0x12, 0x97, 0x01, 0x0a,
	0x14, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x37, 0xba, 0xb8, 0x91,
	0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x65, 0x74, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x30, 0x01, 0x12, 0x89, 0x01, 0x0a, 0x0e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x31, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01,
	0x2a, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x61, 0x63, 0x64, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x65, 0x74, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0xac, 0x01, 0x0a, 0x16, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x2a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xac, 0x02, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x67, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x12, 0xc8, 0x01, 0x0a, 0x1d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x43, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0x90, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x65, 0x74, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x85, 0x01, 0x0a,
	0x0d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x12, 0x21,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x30, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x6f, 0x6d, 0x12, 0x9d, 0x01, 0x0a, 0x13, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x27, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f,
	0x6d, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x36, 0xba, 0xb8,
	0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64,
	0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x12, 0x9d, 0x01, 0x0a, 0x13, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x27, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f,
	0x6d, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x36, 0xba, 0xb8,
	0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64,
	0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x9d, 0x01, 0x0a, 0x13, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x27, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f,
	0x6d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x36, 0xba, 0xb8,
	0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64,
	0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x12, 0x95, 0x01, 0x0a, 0x11, 0x44, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x44, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x34, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x64, 0x69, 0x61, 0x6c, 0x6d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x91, 0x01, 0x0a,
	0x10, 0x44, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x44, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x33, 0xba, 0xb8, 0x91,
	0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f,
	0x64, 0x69, 0x61, 0x6c, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x12, 0x99, 0x01, 0x0a, 0x12, 0x44, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69,
	0x61, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x35, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x64, 0x69, 0x61, 0x6c, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x79, 0x0a, 0x0a,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2d, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x70, 0x61, 0x75, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x0d, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x30, 0xba,
	0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22,
	0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63,
	0x64, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x74, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12,
	0x81, 0x01, 0x0a, 0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x55, 0x49, 0x42, 0x75, 0x73, 0x79,
	0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x47, 0x55, 0x49, 0x42, 0x75, 0x73, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x55, 0x49, 0x42, 0x75, 0x73, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x2f, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x75, 0x69, 0x62,
	0x75, 0x73, 0x79, 0x12, 0x9b, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x85, 0x01, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x30, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x72, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x0f, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x23, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x32, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0xc1, 0x01, 0x0a, 0x1c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x4f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x30, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x57, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3f, 0xba, 0xb8,
	0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x77, 0x61, 0x72, 0x6d, 0x74, 0x6f, 0x6f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0xb5, 0x01,
	0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6d, 0x54, 0x6f,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x2d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x57, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x57, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x77, 0x61, 0x72, 0x6d, 0x74, 0x6f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0xc8, 0x01, 0x0a, 0x1d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x57, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x61,
	0x72, 0x6d, 0x54, 0x6f, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x57, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x43, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xac, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a,
	0x22, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61,
	0x63, 0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x77, 0x61, 0x72, 0x6d, 0x74,
	0x6f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x12, 0xb9, 0x01, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x61, 0x72,
	0x6d, 0x54, 0x6f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12,
	0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3d, 0xba,
	0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22,
	0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63,
	0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x77, 0x61, 0x72, 0x6d, 0x74, 0x6f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0xa5, 0x01, 0x0a,
	0x15, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x54,
	0x6f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x38, 0xba, 0xb8, 0x91, 0x02,
	0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x63,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x65, 0x6e, 0x64, 0x74, 0x6f, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0xe5, 0x01, 0x0a, 0x25, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x39,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x48, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3b, 0x3a, 0x01, 0x2a, 0x22, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x74, 0x6f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x95, 0x01, 0x0a,
	0x11, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x34,
	0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a,
	0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61,
	0x63, 0x64, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x43, 0x6f, 0x6c, 0x64, 0x54, 0x6f, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x64, 0x54, 0x6f, 0x4f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x43, 0x6f, 0x6c, 0x64, 0x54, 0x6f, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x39, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x63, 0x6f, 0x6c, 0x64, 0x74, 0x6f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x9d, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6c,
	0x64, 0x54, 0x6f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43,
	0x6f, 0x6c, 0x64, 0x54, 0x6f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x64, 0x54, 0x6f, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x36, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x63, 0x6f, 0x6c, 0x64, 0x74, 0x6f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0xbd, 0x01, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x61, 0x72,
	0x6d, 0x54, 0x6f, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x4f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x4f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a,
	0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x61, 0x63, 0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x77, 0x61, 0x72,
	0x6d, 0x74, 0x6f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0xd5, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x72, 0x6d, 0x4f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x72, 0x6d, 0x4f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x57, 0x61, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x47, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xac, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x77, 0x61, 0x72,
	0x6d, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x64, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0xb1, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x47, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xac, 0x02, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x77, 0x61, 0x72, 0x6d, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x64, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0xb1, 0x01, 0x0a,
	0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x57, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x61,
	0x72, 0x6d, 0x54, 0x6f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x77, 0x61, 0x72, 0x6d, 0x74, 0x6f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0xa1, 0x01, 0x0a, 0x14, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x6c, 0x64, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x72,
	0x6f, 0x6d, 0x48, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x37, 0xba, 0xb8, 0x91,
	0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x65, 0x74, 0x63, 0x61, 0x6c, 0x6c, 0x66, 0x72, 0x6f, 0x6d,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0xc1, 0x01, 0x0a, 0x1c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x65,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x72, 0x6f,
	0x6d, 0x48, 0x6f, 0x6c, 0x64, 0x12, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x6c, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x48, 0x6f,
	0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x67, 0x65, 0x74, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x63, 0x61, 0x6c, 0x6c,
	0x66, 0x72, 0x6f, 0x6d, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0xad, 0x01, 0x0a, 0x17, 0x41, 0x43, 0x44,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x41, 0x43, 0x44, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x41, 0x43, 0x44, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3a, 0xba, 0xb8,
	0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64,
	0x2f, 0x61, 0x63, 0x64, 0x67, 0x65, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x12, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x50, 0x75, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x12,
	0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x50, 0x75, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x48, 0x6f, 0x6c, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x4f, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x35, 0xba,
	0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22,
	0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63,
	0x64, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x74, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x6e,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x9d, 0x01, 0x0a, 0x13, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x36, 0xba, 0xb8,
	0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64,
	0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x13, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x42,
	0x58, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x27, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x50, 0x42, 0x58, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x42, 0x58, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x36, 0xba, 0xb8,
	0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64,
	0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x78, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x12, 0x99, 0x01, 0x0a, 0x12, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x42,
	0x58, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x26, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50,
	0x42, 0x58, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x42, 0x58, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x35, 0xba, 0xb8, 0x91, 0x02, 0x02,
	0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x70, 0x62, 0x78, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x63, 0x61, 0x6c, 0x6c,
	0x12, 0x95, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x6f,
	0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x6f,
	0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x34, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x67, 0x65, 0x74, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x6c, 0x6f, 0x73, 0x74, 0x70, 0x65, 0x65, 0x72, 0x12, 0x9d, 0x01, 0x0a, 0x11, 0x43, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0xac, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22,
	0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63,
	0x64, 0x2f, 0x67, 0x65, 0x74, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x72, 0x61, 0x77, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0xa0, 0x01, 0x0a, 0x13, 0x50, 0x65, 0x65,
	0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x39, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xac, 0x02, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x77, 0x69, 0x74, 0x68, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x9b, 0x01, 0x0a, 0x12,
	0x48, 0x6f, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0xac, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22,
	0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63,
	0x64, 0x2f, 0x6d, 0x75, 0x74, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x9e, 0x01, 0x0a, 0x14, 0x55, 0x6e,
	0x68, 0x6f, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x55, 0x6e, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x6e, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22, 0x3a,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xac, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a,
	0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x75, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x96, 0x01, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x38, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xac, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64,
	0x2f, 0x67, 0x65, 0x74, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x61, 0x6c, 0x6c, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0xaa, 0x01, 0x0a, 0x17, 0x57, 0x61, 0x72, 0x6d, 0x43, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x57, 0x61,
	0x72, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x57, 0x61, 0x72, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xac, 0x02, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x77, 0x61, 0x72, 0x6d, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0xae, 0x01, 0x0a, 0x18, 0x57, 0x61, 0x72, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x28, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x57, 0x61, 0x72, 0x6d,
	0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x57, 0x61, 0x72, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xac, 0x02, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x77, 0x61, 0x72, 0x6d, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x12, 0xb2, 0x01, 0x0a, 0x19, 0x57, 0x61, 0x72, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12,
	0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x57, 0x61,
	0x72, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x57, 0x61, 0x72, 0x6d, 0x43, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xac,
	0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x77, 0x61, 0x72,
	0x6d, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xac, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a,
	0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61,
	0x63, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x9e, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x70,
	0x53, 0x6f, 0x75, 0x6e, 0x64, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8,
	0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xac, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01,
	0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x61, 0x63, 0x64, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x98, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x25,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0xac, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22,
	0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63,
	0x64, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x12, 0x74, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x44, 0x54, 0x4d, 0x46, 0x12,
	0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x44, 0x54, 0x4d, 0x46, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x44, 0x54, 0x4d, 0x46, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2e, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xac, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64,
	0x2f, 0x70, 0x6c, 0x61, 0x79, 0x64, 0x74, 0x6d, 0x66, 0x12, 0x78, 0x0a, 0x09, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x2f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xac, 0x02, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d,
	0x75, 0x74, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x0b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x6d,
	0x75, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x31, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xac, 0x02, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x75, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x22, 0x38, 0xba, 0xb8,
	0x91, 0x02, 0x08, 0x0a, 0x06, 0x08, 0xac, 0x02, 0x08, 0xd9, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0xab, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65,
	0x73, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x08, 0x0a, 0x06, 0x08, 0xac, 0x02, 0x08, 0xd9, 0x02,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x30, 0x01, 0x12, 0xa1, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x08,
	0x0a, 0x06, 0x08, 0xac, 0x02, 0x08, 0xd9, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01,
	0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x61, 0x63, 0x64, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x66,
	0x6f, 0x72, 0x6d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0xa5, 0x01, 0x0a, 0x15, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73,
	0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x08, 0x0a, 0x06, 0x08, 0xac, 0x02, 0x08, 0xd9, 0x02, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x95, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8,
	0x91, 0x02, 0x08, 0x0a, 0x06, 0x08, 0xac, 0x02, 0x08, 0xd9, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0xb1, 0x01, 0x0a, 0x18, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a,
	0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x22, 0x41, 0xba, 0xb8, 0x91, 0x02, 0x08,
	0x0a, 0x06, 0x08, 0xac, 0x02, 0x08, 0xd9, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01,
	0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x61, 0x63, 0x64, 0x2f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x66, 0x6f, 0x72, 0x6d, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0xa6, 0x01, 0x0a,
	0x16, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x6f,
	0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0xac, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x70,
	0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x65, 0x73, 0x22, 0x33, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xac,
	0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x64, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x90, 0x01, 0x0a, 0x0f, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x08,
	0x41, 0x63, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0xa2, 0x02, 0x03, 0x41, 0x56, 0x58, 0xaa, 0x02, 0x0b, 0x41, 0x70, 0x69, 0x2e, 0x56,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02, 0x0b, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0xe2, 0x02, 0x17, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x0c, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v0alpha_acd_proto_rawDescOnce sync.Once
	file_api_v0alpha_acd_proto_rawDescData = file_api_v0alpha_acd_proto_rawDesc
)

func file_api_v0alpha_acd_proto_rawDescGZIP() []byte {
	file_api_v0alpha_acd_proto_rawDescOnce.Do(func() {
		file_api_v0alpha_acd_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v0alpha_acd_proto_rawDescData)
	})
	return file_api_v0alpha_acd_proto_rawDescData
}

var file_api_v0alpha_acd_proto_msgTypes = make([]protoimpl.MessageInfo, 129)
var file_api_v0alpha_acd_proto_goTypes = []any{
	(*AgentGetStatusRequest)(nil),                        // 0: api.v0alpha.AgentGetStatusRequest
	(*AgentGetStatusReply)(nil),                          // 1: api.v0alpha.AgentGetStatusReply
	(*AgentGetConnectedPartyRequest)(nil),                // 2: api.v0alpha.AgentGetConnectedPartyRequest
	(*AgentGetConnectedPartyReply)(nil),                  // 3: api.v0alpha.AgentGetConnectedPartyReply
	(*ManagerAgentGetConnectedPartyRequest)(nil),         // 4: api.v0alpha.ManagerAgentGetConnectedPartyRequest
	(*ManagerAgentGetConnectedPartyReply)(nil),           // 5: api.v0alpha.ManagerAgentGetConnectedPartyReply
	(*AgentIntercomRequest)(nil),                         // 6: api.v0alpha.AgentIntercomRequest
	(*AgentIntercomReply)(nil),                           // 7: api.v0alpha.AgentIntercomReply
	(*AgentIntercomAcceptRequest)(nil),                   // 8: api.v0alpha.AgentIntercomAcceptRequest
	(*AgentIntercomAcceptReply)(nil),                     // 9: api.v0alpha.AgentIntercomAcceptReply
	(*AgentIntercomRejectRequest)(nil),                   // 10: api.v0alpha.AgentIntercomRejectRequest
	(*AgentIntercomRejectReply)(nil),                     // 11: api.v0alpha.AgentIntercomRejectReply
	(*AgentIntercomCancelRequest)(nil),                   // 12: api.v0alpha.AgentIntercomCancelRequest
	(*AgentIntercomCancelReply)(nil),                     // 13: api.v0alpha.AgentIntercomCancelReply
	(*DialManualPrepareRequest)(nil),                     // 14: api.v0alpha.DialManualPrepareRequest
	(*DialManualPrepareReply)(nil),                       // 15: api.v0alpha.DialManualPrepareReply
	(*DialManualCancelRequest)(nil),                      // 16: api.v0alpha.DialManualCancelRequest
	(*DialManualCancelReply)(nil),                        // 17: api.v0alpha.DialManualCancelReply
	(*DialPreviewPrepareRequest)(nil),                    // 18: api.v0alpha.DialPreviewPrepareRequest
	(*DialPreviewPrepareReply)(nil),                      // 19: api.v0alpha.DialPreviewPrepareReply
	(*AgentPauseRequest)(nil),                            // 20: api.v0alpha.AgentPauseRequest
	(*AgentPauseReply)(nil),                              // 21: api.v0alpha.AgentPauseReply
	(*AgentSetReadyRequest)(nil),                         // 22: api.v0alpha.AgentSetReadyRequest
	(*AgentSetReadyReply)(nil),                           // 23: api.v0alpha.AgentSetReadyReply
	(*AgentGUIBusyRequest)(nil),                          // 24: api.v0alpha.AgentGUIBusyRequest
	(*AgentGUIBusyReply)(nil),                            // 25: api.v0alpha.AgentGUIBusyReply
	(*AgentDisconnectRequest)(nil),                       // 26: api.v0alpha.AgentDisconnectRequest
	(*AgentDisconnectReply)(nil),                         // 27: api.v0alpha.AgentDisconnectReply
	(*AgentSessionEventReq)(nil),                         // 28: api.v0alpha.AgentSessionEventReq
	(*AgentSessionEventRes)(nil),                         // 29: api.v0alpha.AgentSessionEventRes
	(*CallerRequeueRequest)(nil),                         // 30: api.v0alpha.CallerRequeueRequest
	(*CallerRequeueReply)(nil),                           // 31: api.v0alpha.CallerRequeueReply
	(*TransferWarmToAgentCancelRequest)(nil),             // 32: api.v0alpha.TransferWarmToAgentCancelRequest
	(*TransferWarmToAgentCancelReply)(nil),               // 33: api.v0alpha.TransferWarmToAgentCancelReply
	(*TransferWarmToOutboundCancelRequest)(nil),          // 34: api.v0alpha.TransferWarmToOutboundCancelRequest
	(*TransferWarmToOutboundCancelReply)(nil),            // 35: api.v0alpha.TransferWarmToOutboundCancelReply
	(*TransferWarmToAgentApproveRequest)(nil),            // 36: api.v0alpha.TransferWarmToAgentApproveRequest
	(*TransferWarmToAgentApproveReply)(nil),              // 37: api.v0alpha.TransferWarmToAgentApproveReply
	(*TransferWarmToOutboundApproveRequest)(nil),         // 38: api.v0alpha.TransferWarmToOutboundApproveRequest
	(*TransferWarmToOutboundApproveReply)(nil),           // 39: api.v0alpha.TransferWarmToOutboundApproveReply
	(*CallerSendToVoicemailRequest)(nil),                 // 40: api.v0alpha.CallerSendToVoicemailRequest
	(*CallerSendToVoicemailReply)(nil),                   // 41: api.v0alpha.CallerSendToVoicemailReply
	(*AgentInviteTransferCallerToConferenceRequest)(nil), // 42: api.v0alpha.AgentInviteTransferCallerToConferenceRequest
	(*AgentInviteTransferCallerToConferenceReply)(nil),   // 43: api.v0alpha.AgentInviteTransferCallerToConferenceReply
	(*AgentMonitorCallsRequest)(nil),                     // 44: api.v0alpha.AgentMonitorCallsRequest
	(*AgentMonitorCallsReply)(nil),                       // 45: api.v0alpha.AgentMonitorCallsReply
	(*TransferColdToOutboundRequest)(nil),                // 46: api.v0alpha.TransferColdToOutboundRequest
	(*TransferColdToOutboundReply)(nil),                  // 47: api.v0alpha.TransferColdToOutboundReply
	(*TransferColdToAgentRequest)(nil),                   // 48: api.v0alpha.TransferColdToAgentRequest
	(*TransferColdToAgentReply)(nil),                     // 49: api.v0alpha.TransferColdToAgentReply
	(*TransferWarmToOutboundStartRequest)(nil),           // 50: api.v0alpha.TransferWarmToOutboundStartRequest
	(*TransferWarmToOutboundStartReply)(nil),             // 51: api.v0alpha.TransferWarmToOutboundStartReply
	(*CreateWarmOutboundTransferMemberRequest)(nil),      // 52: api.v0alpha.CreateWarmOutboundTransferMemberRequest
	(*CreateWarmOutboundTransferMemberReply)(nil),        // 53: api.v0alpha.CreateWarmOutboundTransferMemberReply
	(*RemoveTransferMemberRequest)(nil),                  // 54: api.v0alpha.RemoveTransferMemberRequest
	(*RemoveTransferMemberReply)(nil),                    // 55: api.v0alpha.RemoveTransferMemberReply
	(*TransferWarmToAgentStartRequest)(nil),              // 56: api.v0alpha.TransferWarmToAgentStartRequest
	(*TransferWarmToAgentStartReply)(nil),                // 57: api.v0alpha.TransferWarmToAgentStartReply
	(*AgentGetCallFromHoldRequest)(nil),                  // 58: api.v0alpha.AgentGetCallFromHoldRequest
	(*AgentGetCallFromHoldReply)(nil),                    // 59: api.v0alpha.AgentGetCallFromHoldReply
	(*AgentGetSpecificCallFromHoldRequest)(nil),          // 60: api.v0alpha.AgentGetSpecificCallFromHoldRequest
	(*AgentGetSpecificCallFromHoldReply)(nil),            // 61: api.v0alpha.AgentGetSpecificCallFromHoldReply
	(*AgentPutCallOnHoldRequest)(nil),                    // 62: api.v0alpha.AgentPutCallOnHoldRequest
	(*AgentPutCallOnHoldReply)(nil),                      // 63: api.v0alpha.AgentPutCallOnHoldReply
	(*ACDGetAllAgentsStatusesRequest)(nil),               // 64: api.v0alpha.ACDGetAllAgentsStatusesRequest
	(*AgentStatusDetails)(nil),                           // 65: api.v0alpha.AgentStatusDetails
	(*ACDGetAllAgentsStatusesReply)(nil),                 // 66: api.v0alpha.ACDGetAllAgentsStatusesReply
	(*AgentReceiveMessageRequest)(nil),                   // 67: api.v0alpha.AgentReceiveMessageRequest
	(*AgentReceiveMessageReply)(nil),                     // 68: api.v0alpha.AgentReceiveMessageReply
	(*AgentPBXRejectCallRequest)(nil),                    // 69: api.v0alpha.AgentPBXRejectCallRequest
	(*AgentPBXRejectCallReply)(nil),                      // 70: api.v0alpha.AgentPBXRejectCallReply
	(*AgentPBXApproveCallRequest)(nil),                   // 71: api.v0alpha.AgentPBXApproveCallRequest
	(*AgentPBXApproveCallReply)(nil),                     // 72: api.v0alpha.AgentPBXApproveCallReply
	(*GetCallerLostPeerRequest)(nil),                     // 73: api.v0alpha.GetCallerLostPeerRequest
	(*GetCallerLostPeerReply)(nil),                       // 74: api.v0alpha.GetCallerLostPeerReply
	(*CallerGetRawEventRequest)(nil),                     // 75: api.v0alpha.CallerGetRawEventRequest
	(*CallerGetRawEventReply)(nil),                       // 76: api.v0alpha.CallerGetRawEventReply
	(*CallerEvent)(nil),                                  // 77: api.v0alpha.CallerEvent
	(*PeerAgentWithCallerRequest)(nil),                   // 78: api.v0alpha.PeerAgentWithCallerRequest
	(*PeerAgentWithCallerReply)(nil),                     // 79: api.v0alpha.PeerAgentWithCallerReply
	(*HoldTransferMemberReq)(nil),                        // 80: api.v0alpha.HoldTransferMemberReq
	(*HoldTransferMemberRes)(nil),                        // 81: api.v0alpha.HoldTransferMemberRes
	(*UnholdTransferMemberReq)(nil),                      // 82: api.v0alpha.UnholdTransferMemberReq
	(*UnholdTransferMemberRes)(nil),                      // 83: api.v0alpha.UnholdTransferMemberRes
	(*GetAgentCallCountsReq)(nil),                        // 84: api.v0alpha.GetAgentCallCountsReq
	(*GetAgentCallCountsRes)(nil),                        // 85: api.v0alpha.GetAgentCallCountsRes
	(*WarmCallerTransferStartReq)(nil),                   // 86: api.v0alpha.WarmCallerTransferStartReq
	(*WarmCallerTransferStartRes)(nil),                   // 87: api.v0alpha.WarmCallerTransferStartRes
	(*WarmCallerTransferCancelReq)(nil),                  // 88: api.v0alpha.WarmCallerTransferCancelReq
	(*WarmCallerTransferCancelRes)(nil),                  // 89: api.v0alpha.WarmCallerTransferCancelRes
	(*WarmCallerTransferApproveReq)(nil),                 // 90: api.v0alpha.WarmCallerTransferApproveReq
	(*WarmCallerTransferApproveRes)(nil),                 // 91: api.v0alpha.WarmCallerTransferApproveRes
	(*PlaySoundboardEntityReq)(nil),                      // 92: api.v0alpha.PlaySoundboardEntityReq
	(*PlaySoundboardEntityRes)(nil),                      // 93: api.v0alpha.PlaySoundboardEntityRes
	(*StopSoundboardEntityReq)(nil),                      // 94: api.v0alpha.StopSoundboardEntityReq
	(*StopSoundboardEntityRes)(nil),                      // 95: api.v0alpha.StopSoundboardEntityRes
	(*UpdateAgentSkillsRequest)(nil),                     // 96: api.v0alpha.UpdateAgentSkillsRequest
	(*UpdateAgentSkillsReply)(nil),                       // 97: api.v0alpha.UpdateAgentSkillsReply
	(*PlayDTMFRequest)(nil),                              // 98: api.v0alpha.PlayDTMFRequest
	(*PlayDTMFReply)(nil),                                // 99: api.v0alpha.PlayDTMFReply
	(*AgentMuteRequest)(nil),                             // 100: api.v0alpha.AgentMuteRequest
	(*AgentMuteReply)(nil),                               // 101: api.v0alpha.AgentMuteReply
	(*AgentUnmuteRequest)(nil),                           // 102: api.v0alpha.AgentUnmuteRequest
	(*AgentUnmuteReply)(nil),                             // 103: api.v0alpha.AgentUnmuteReply
	(*StartSecureFormReq)(nil),                           // 104: api.v0alpha.StartSecureFormReq
	(*StartSecureFormRes)(nil),                           // 105: api.v0alpha.StartSecureFormRes
	(*CollectSecureFormFieldReq)(nil),                    // 106: api.v0alpha.CollectSecureFormFieldReq
	(*CollectSecureFormFieldRes)(nil),                    // 107: api.v0alpha.CollectSecureFormFieldRes
	(*ResetSecureFormFieldReq)(nil),                      // 108: api.v0alpha.ResetSecureFormFieldReq
	(*ResetSecureFormFieldRes)(nil),                      // 109: api.v0alpha.ResetSecureFormFieldRes
	(*AcceptSecureFormFieldReq)(nil),                     // 110: api.v0alpha.AcceptSecureFormFieldReq
	(*AcceptSecureFormFieldRes)(nil),                     // 111: api.v0alpha.AcceptSecureFormFieldRes
	(*ProcessSecureFormReq)(nil),                         // 112: api.v0alpha.ProcessSecureFormReq
	(*ProcessSecureFormRes)(nil),                         // 113: api.v0alpha.ProcessSecureFormRes
	(*FinishSecureFormHandlingReq)(nil),                  // 114: api.v0alpha.FinishSecureFormHandlingReq
	(*FinishSecureFormHandlingRes)(nil),                  // 115: api.v0alpha.FinishSecureFormHandlingRes
	(*PopulateWorkflowFieldsReq)(nil),                    // 116: api.v0alpha.PopulateWorkflowFieldsReq
	(*PopulateWorkflowFieldsRes)(nil),                    // 117: api.v0alpha.PopulateWorkflowFieldsRes
	(*ValidateFieldReq)(nil),                             // 118: api.v0alpha.ValidateFieldReq
	(*ValidateFieldRes)(nil),                             // 119: api.v0alpha.ValidateFieldRes
	nil,                                                  // 120: api.v0alpha.CallerRequeueRequest.SkillsEntry
	nil,                                                  // 121: api.v0alpha.TransferWarmToAgentStartRequest.SkillsEntry
	nil,                                                  // 122: api.v0alpha.CallerEvent.SkillsEntry
	nil,                                                  // 123: api.v0alpha.CallerEvent.AllSkillsEntry
	nil,                                                  // 124: api.v0alpha.UpdateAgentSkillsRequest.SkillsEntry
	nil,                                                  // 125: api.v0alpha.ProcessSecureFormReq.ValuesEntry
	nil,                                                  // 126: api.v0alpha.ProcessSecureFormRes.DataEntry
	nil,                                                  // 127: api.v0alpha.FinishSecureFormHandlingReq.DataEntry
	nil,                                                  // 128: api.v0alpha.PopulateWorkflowFieldsRes.ValuesEntry
	(commons.AgentStatus_Enum)(0),                        // 129: api.commons.AgentStatus.Enum
	(*commons.TransferMember)(nil),                       // 130: api.commons.TransferMember
	(commons.CallType_Enum)(0),                           // 131: api.commons.CallType.Enum
	(commons.AgentSessionLogActionKey_Enum)(0),           // 132: api.commons.AgentSessionLogActionKey.Enum
	(commons.ReplaceConfig_Enum)(0),                      // 133: api.commons.ReplaceConfig.Enum
	(commons.HoldType)(0),                                // 134: api.commons.HoldType
	(commons.DTMFDigit)(0),                               // 135: api.commons.DTMFDigit
	(*integrations1.FieldDefinition)(nil),                // 136: api.commons.integrations.FieldDefinition
	(integrations1.Validation)(0),                        // 137: api.commons.integrations.Validation
	(*integrations.Value)(nil),                           // 138: api.v1alpha1.integrations.Value
}
var file_api_v0alpha_acd_proto_depIdxs = []int32{
	129, // 0: api.v0alpha.AgentGetStatusReply.status_desc:type_name -> api.commons.AgentStatus.Enum
	130, // 1: api.v0alpha.AgentGetStatusReply.transfer_members:type_name -> api.commons.TransferMember
	131, // 2: api.v0alpha.AgentGetConnectedPartyReply.call_type:type_name -> api.commons.CallType.Enum
	131, // 3: api.v0alpha.ManagerAgentGetConnectedPartyReply.call_type:type_name -> api.commons.CallType.Enum
	132, // 4: api.v0alpha.AgentSessionEventReq.action_key:type_name -> api.commons.AgentSessionLogActionKey.Enum
	120, // 5: api.v0alpha.CallerRequeueRequest.skills:type_name -> api.v0alpha.CallerRequeueRequest.SkillsEntry
	133, // 6: api.v0alpha.CallerRequeueRequest.replace_config:type_name -> api.commons.ReplaceConfig.Enum
	121, // 7: api.v0alpha.TransferWarmToAgentStartRequest.skills:type_name -> api.v0alpha.TransferWarmToAgentStartRequest.SkillsEntry
	131, // 8: api.v0alpha.AgentGetSpecificCallFromHoldRequest.call_type:type_name -> api.commons.CallType.Enum
	134, // 9: api.v0alpha.AgentPutCallOnHoldRequest.hold_type:type_name -> api.commons.HoldType
	129, // 10: api.v0alpha.AgentStatusDetails.status_desc:type_name -> api.commons.AgentStatus.Enum
	65,  // 11: api.v0alpha.ACDGetAllAgentsStatusesReply.agent_status_details:type_name -> api.v0alpha.AgentStatusDetails
	131, // 12: api.v0alpha.GetCallerLostPeerRequest.call_type:type_name -> api.commons.CallType.Enum
	131, // 13: api.v0alpha.CallerGetRawEventRequest.call_type:type_name -> api.commons.CallType.Enum
	77,  // 14: api.v0alpha.CallerGetRawEventReply.event:type_name -> api.v0alpha.CallerEvent
	122, // 15: api.v0alpha.CallerEvent.skills:type_name -> api.v0alpha.CallerEvent.SkillsEntry
	123, // 16: api.v0alpha.CallerEvent.allSkills:type_name -> api.v0alpha.CallerEvent.AllSkillsEntry
	131, // 17: api.v0alpha.PeerAgentWithCallerRequest.call_type:type_name -> api.commons.CallType.Enum
	131, // 18: api.v0alpha.WarmCallerTransferStartReq.call_type:type_name -> api.commons.CallType.Enum
	124, // 19: api.v0alpha.UpdateAgentSkillsRequest.skills:type_name -> api.v0alpha.UpdateAgentSkillsRequest.SkillsEntry
	135, // 20: api.v0alpha.PlayDTMFRequest.dtmf_digits:type_name -> api.commons.DTMFDigit
	125, // 21: api.v0alpha.ProcessSecureFormReq.values:type_name -> api.v0alpha.ProcessSecureFormReq.ValuesEntry
	126, // 22: api.v0alpha.ProcessSecureFormRes.data:type_name -> api.v0alpha.ProcessSecureFormRes.DataEntry
	127, // 23: api.v0alpha.FinishSecureFormHandlingReq.data:type_name -> api.v0alpha.FinishSecureFormHandlingReq.DataEntry
	131, // 24: api.v0alpha.PopulateWorkflowFieldsReq.call_type:type_name -> api.commons.CallType.Enum
	136, // 25: api.v0alpha.PopulateWorkflowFieldsReq.field_definitions:type_name -> api.commons.integrations.FieldDefinition
	128, // 26: api.v0alpha.PopulateWorkflowFieldsRes.values:type_name -> api.v0alpha.PopulateWorkflowFieldsRes.ValuesEntry
	137, // 27: api.v0alpha.ValidateFieldReq.validation_type:type_name -> api.commons.integrations.Validation
	138, // 28: api.v0alpha.ProcessSecureFormReq.ValuesEntry.value:type_name -> api.v1alpha1.integrations.Value
	138, // 29: api.v0alpha.ProcessSecureFormRes.DataEntry.value:type_name -> api.v1alpha1.integrations.Value
	138, // 30: api.v0alpha.FinishSecureFormHandlingReq.DataEntry.value:type_name -> api.v1alpha1.integrations.Value
	138, // 31: api.v0alpha.PopulateWorkflowFieldsRes.ValuesEntry.value:type_name -> api.v1alpha1.integrations.Value
	0,   // 32: api.v0alpha.Acd.AgentGetStatusStream:input_type -> api.v0alpha.AgentGetStatusRequest
	0,   // 33: api.v0alpha.Acd.AgentGetStatus:input_type -> api.v0alpha.AgentGetStatusRequest
	2,   // 34: api.v0alpha.Acd.AgentGetConnectedParty:input_type -> api.v0alpha.AgentGetConnectedPartyRequest
	4,   // 35: api.v0alpha.Acd.ManagerAgentGetConnectedParty:input_type -> api.v0alpha.ManagerAgentGetConnectedPartyRequest
	6,   // 36: api.v0alpha.Acd.AgentIntercom:input_type -> api.v0alpha.AgentIntercomRequest
	8,   // 37: api.v0alpha.Acd.AgentIntercomAccept:input_type -> api.v0alpha.AgentIntercomAcceptRequest
	10,  // 38: api.v0alpha.Acd.AgentIntercomReject:input_type -> api.v0alpha.AgentIntercomRejectRequest
	12,  // 39: api.v0alpha.Acd.AgentIntercomCancel:input_type -> api.v0alpha.AgentIntercomCancelRequest
	14,  // 40: api.v0alpha.Acd.DialManualPrepare:input_type -> api.v0alpha.DialManualPrepareRequest
	16,  // 41: api.v0alpha.Acd.DialManualCancel:input_type -> api.v0alpha.DialManualCancelRequest
	18,  // 42: api.v0alpha.Acd.DialPreviewPrepare:input_type -> api.v0alpha.DialPreviewPrepareRequest
	20,  // 43: api.v0alpha.Acd.AgentPause:input_type -> api.v0alpha.AgentPauseRequest
	22,  // 44: api.v0alpha.Acd.AgentSetReady:input_type -> api.v0alpha.AgentSetReadyRequest
	24,  // 45: api.v0alpha.Acd.AgentGUIBusy:input_type -> api.v0alpha.AgentGUIBusyRequest
	28,  // 46: api.v0alpha.Acd.ReportAgentSessionEvent:input_type -> api.v0alpha.AgentSessionEventReq
	30,  // 47: api.v0alpha.Acd.CallerRequeue:input_type -> api.v0alpha.CallerRequeueRequest
	26,  // 48: api.v0alpha.Acd.AgentDisconnect:input_type -> api.v0alpha.AgentDisconnectRequest
	34,  // 49: api.v0alpha.Acd.TransferWarmToOutboundCancel:input_type -> api.v0alpha.TransferWarmToOutboundCancelRequest
	32,  // 50: api.v0alpha.Acd.TransferWarmToAgentCancel:input_type -> api.v0alpha.TransferWarmToAgentCancelRequest
	38,  // 51: api.v0alpha.Acd.TransferWarmToOutboundApprove:input_type -> api.v0alpha.TransferWarmToOutboundApproveRequest
	36,  // 52: api.v0alpha.Acd.TransferWarmToAgentApprove:input_type -> api.v0alpha.TransferWarmToAgentApproveRequest
	40,  // 53: api.v0alpha.Acd.CallerSendToVoicemail:input_type -> api.v0alpha.CallerSendToVoicemailRequest
	42,  // 54: api.v0alpha.Acd.AgentInviteTransferCallerToConference:input_type -> api.v0alpha.AgentInviteTransferCallerToConferenceRequest
	44,  // 55: api.v0alpha.Acd.AgentMonitorCalls:input_type -> api.v0alpha.AgentMonitorCallsRequest
	46,  // 56: api.v0alpha.Acd.TransferColdToOutbound:input_type -> api.v0alpha.TransferColdToOutboundRequest
	48,  // 57: api.v0alpha.Acd.TransferColdToAgent:input_type -> api.v0alpha.TransferColdToAgentRequest
	50,  // 58: api.v0alpha.Acd.TransferWarmToOutboundStart:input_type -> api.v0alpha.TransferWarmToOutboundStartRequest
	52,  // 59: api.v0alpha.Acd.CreateWarmOutboundTransferMember:input_type -> api.v0alpha.CreateWarmOutboundTransferMemberRequest
	54,  // 60: api.v0alpha.Acd.RemoveTransferMember:input_type -> api.v0alpha.RemoveTransferMemberRequest
	56,  // 61: api.v0alpha.Acd.TransferWarmToAgentStart:input_type -> api.v0alpha.TransferWarmToAgentStartRequest
	58,  // 62: api.v0alpha.Acd.AgentGetCallFromHold:input_type -> api.v0alpha.AgentGetCallFromHoldRequest
	60,  // 63: api.v0alpha.Acd.AgentGetSpecificCallFromHold:input_type -> api.v0alpha.AgentGetSpecificCallFromHoldRequest
	64,  // 64: api.v0alpha.Acd.ACDGetAllAgentsStatuses:input_type -> api.v0alpha.ACDGetAllAgentsStatusesRequest
	62,  // 65: api.v0alpha.Acd.AgentPutCallOnHold:input_type -> api.v0alpha.AgentPutCallOnHoldRequest
	67,  // 66: api.v0alpha.Acd.AgentReceiveMessage:input_type -> api.v0alpha.AgentReceiveMessageRequest
	71,  // 67: api.v0alpha.Acd.AgentPBXApproveCall:input_type -> api.v0alpha.AgentPBXApproveCallRequest
	69,  // 68: api.v0alpha.Acd.AgentPBXRejectCall:input_type -> api.v0alpha.AgentPBXRejectCallRequest
	73,  // 69: api.v0alpha.Acd.GetCallerLostPeer:input_type -> api.v0alpha.GetCallerLostPeerRequest
	75,  // 70: api.v0alpha.Acd.CallerGetRawEvent:input_type -> api.v0alpha.CallerGetRawEventRequest
	78,  // 71: api.v0alpha.Acd.PeerAgentWithCaller:input_type -> api.v0alpha.PeerAgentWithCallerRequest
	80,  // 72: api.v0alpha.Acd.HoldTransferMember:input_type -> api.v0alpha.HoldTransferMemberReq
	82,  // 73: api.v0alpha.Acd.UnholdTransferMember:input_type -> api.v0alpha.UnholdTransferMemberReq
	84,  // 74: api.v0alpha.Acd.GetAgentCallCounts:input_type -> api.v0alpha.GetAgentCallCountsReq
	86,  // 75: api.v0alpha.Acd.WarmCallerTransferStart:input_type -> api.v0alpha.WarmCallerTransferStartReq
	88,  // 76: api.v0alpha.Acd.WarmCallerTransferCancel:input_type -> api.v0alpha.WarmCallerTransferCancelReq
	90,  // 77: api.v0alpha.Acd.WarmCallerTransferApprove:input_type -> api.v0alpha.WarmCallerTransferApproveReq
	92,  // 78: api.v0alpha.Acd.PlaySoundboardEntity:input_type -> api.v0alpha.PlaySoundboardEntityReq
	94,  // 79: api.v0alpha.Acd.StopSoundboardEntity:input_type -> api.v0alpha.StopSoundboardEntityReq
	96,  // 80: api.v0alpha.Acd.UpdateAgentSkills:input_type -> api.v0alpha.UpdateAgentSkillsRequest
	98,  // 81: api.v0alpha.Acd.PlayDTMF:input_type -> api.v0alpha.PlayDTMFRequest
	100, // 82: api.v0alpha.Acd.AgentMute:input_type -> api.v0alpha.AgentMuteRequest
	102, // 83: api.v0alpha.Acd.AgentUnmute:input_type -> api.v0alpha.AgentUnmuteRequest
	104, // 84: api.v0alpha.Acd.StartSecureForm:input_type -> api.v0alpha.StartSecureFormReq
	106, // 85: api.v0alpha.Acd.CollectSecureFormField:input_type -> api.v0alpha.CollectSecureFormFieldReq
	108, // 86: api.v0alpha.Acd.ResetSecureFormField:input_type -> api.v0alpha.ResetSecureFormFieldReq
	110, // 87: api.v0alpha.Acd.AcceptSecureFormField:input_type -> api.v0alpha.AcceptSecureFormFieldReq
	112, // 88: api.v0alpha.Acd.ProcessSecureForm:input_type -> api.v0alpha.ProcessSecureFormReq
	114, // 89: api.v0alpha.Acd.FinishSecureFormHandling:input_type -> api.v0alpha.FinishSecureFormHandlingReq
	116, // 90: api.v0alpha.Acd.PopulateWorkflowFields:input_type -> api.v0alpha.PopulateWorkflowFieldsReq
	118, // 91: api.v0alpha.Acd.ValidateField:input_type -> api.v0alpha.ValidateFieldReq
	1,   // 92: api.v0alpha.Acd.AgentGetStatusStream:output_type -> api.v0alpha.AgentGetStatusReply
	1,   // 93: api.v0alpha.Acd.AgentGetStatus:output_type -> api.v0alpha.AgentGetStatusReply
	3,   // 94: api.v0alpha.Acd.AgentGetConnectedParty:output_type -> api.v0alpha.AgentGetConnectedPartyReply
	5,   // 95: api.v0alpha.Acd.ManagerAgentGetConnectedParty:output_type -> api.v0alpha.ManagerAgentGetConnectedPartyReply
	7,   // 96: api.v0alpha.Acd.AgentIntercom:output_type -> api.v0alpha.AgentIntercomReply
	9,   // 97: api.v0alpha.Acd.AgentIntercomAccept:output_type -> api.v0alpha.AgentIntercomAcceptReply
	11,  // 98: api.v0alpha.Acd.AgentIntercomReject:output_type -> api.v0alpha.AgentIntercomRejectReply
	13,  // 99: api.v0alpha.Acd.AgentIntercomCancel:output_type -> api.v0alpha.AgentIntercomCancelReply
	15,  // 100: api.v0alpha.Acd.DialManualPrepare:output_type -> api.v0alpha.DialManualPrepareReply
	17,  // 101: api.v0alpha.Acd.DialManualCancel:output_type -> api.v0alpha.DialManualCancelReply
	19,  // 102: api.v0alpha.Acd.DialPreviewPrepare:output_type -> api.v0alpha.DialPreviewPrepareReply
	21,  // 103: api.v0alpha.Acd.AgentPause:output_type -> api.v0alpha.AgentPauseReply
	23,  // 104: api.v0alpha.Acd.AgentSetReady:output_type -> api.v0alpha.AgentSetReadyReply
	25,  // 105: api.v0alpha.Acd.AgentGUIBusy:output_type -> api.v0alpha.AgentGUIBusyReply
	29,  // 106: api.v0alpha.Acd.ReportAgentSessionEvent:output_type -> api.v0alpha.AgentSessionEventRes
	31,  // 107: api.v0alpha.Acd.CallerRequeue:output_type -> api.v0alpha.CallerRequeueReply
	27,  // 108: api.v0alpha.Acd.AgentDisconnect:output_type -> api.v0alpha.AgentDisconnectReply
	35,  // 109: api.v0alpha.Acd.TransferWarmToOutboundCancel:output_type -> api.v0alpha.TransferWarmToOutboundCancelReply
	33,  // 110: api.v0alpha.Acd.TransferWarmToAgentCancel:output_type -> api.v0alpha.TransferWarmToAgentCancelReply
	39,  // 111: api.v0alpha.Acd.TransferWarmToOutboundApprove:output_type -> api.v0alpha.TransferWarmToOutboundApproveReply
	37,  // 112: api.v0alpha.Acd.TransferWarmToAgentApprove:output_type -> api.v0alpha.TransferWarmToAgentApproveReply
	41,  // 113: api.v0alpha.Acd.CallerSendToVoicemail:output_type -> api.v0alpha.CallerSendToVoicemailReply
	43,  // 114: api.v0alpha.Acd.AgentInviteTransferCallerToConference:output_type -> api.v0alpha.AgentInviteTransferCallerToConferenceReply
	45,  // 115: api.v0alpha.Acd.AgentMonitorCalls:output_type -> api.v0alpha.AgentMonitorCallsReply
	47,  // 116: api.v0alpha.Acd.TransferColdToOutbound:output_type -> api.v0alpha.TransferColdToOutboundReply
	49,  // 117: api.v0alpha.Acd.TransferColdToAgent:output_type -> api.v0alpha.TransferColdToAgentReply
	51,  // 118: api.v0alpha.Acd.TransferWarmToOutboundStart:output_type -> api.v0alpha.TransferWarmToOutboundStartReply
	53,  // 119: api.v0alpha.Acd.CreateWarmOutboundTransferMember:output_type -> api.v0alpha.CreateWarmOutboundTransferMemberReply
	55,  // 120: api.v0alpha.Acd.RemoveTransferMember:output_type -> api.v0alpha.RemoveTransferMemberReply
	57,  // 121: api.v0alpha.Acd.TransferWarmToAgentStart:output_type -> api.v0alpha.TransferWarmToAgentStartReply
	59,  // 122: api.v0alpha.Acd.AgentGetCallFromHold:output_type -> api.v0alpha.AgentGetCallFromHoldReply
	61,  // 123: api.v0alpha.Acd.AgentGetSpecificCallFromHold:output_type -> api.v0alpha.AgentGetSpecificCallFromHoldReply
	66,  // 124: api.v0alpha.Acd.ACDGetAllAgentsStatuses:output_type -> api.v0alpha.ACDGetAllAgentsStatusesReply
	63,  // 125: api.v0alpha.Acd.AgentPutCallOnHold:output_type -> api.v0alpha.AgentPutCallOnHoldReply
	68,  // 126: api.v0alpha.Acd.AgentReceiveMessage:output_type -> api.v0alpha.AgentReceiveMessageReply
	72,  // 127: api.v0alpha.Acd.AgentPBXApproveCall:output_type -> api.v0alpha.AgentPBXApproveCallReply
	70,  // 128: api.v0alpha.Acd.AgentPBXRejectCall:output_type -> api.v0alpha.AgentPBXRejectCallReply
	74,  // 129: api.v0alpha.Acd.GetCallerLostPeer:output_type -> api.v0alpha.GetCallerLostPeerReply
	76,  // 130: api.v0alpha.Acd.CallerGetRawEvent:output_type -> api.v0alpha.CallerGetRawEventReply
	79,  // 131: api.v0alpha.Acd.PeerAgentWithCaller:output_type -> api.v0alpha.PeerAgentWithCallerReply
	81,  // 132: api.v0alpha.Acd.HoldTransferMember:output_type -> api.v0alpha.HoldTransferMemberRes
	83,  // 133: api.v0alpha.Acd.UnholdTransferMember:output_type -> api.v0alpha.UnholdTransferMemberRes
	85,  // 134: api.v0alpha.Acd.GetAgentCallCounts:output_type -> api.v0alpha.GetAgentCallCountsRes
	87,  // 135: api.v0alpha.Acd.WarmCallerTransferStart:output_type -> api.v0alpha.WarmCallerTransferStartRes
	89,  // 136: api.v0alpha.Acd.WarmCallerTransferCancel:output_type -> api.v0alpha.WarmCallerTransferCancelRes
	91,  // 137: api.v0alpha.Acd.WarmCallerTransferApprove:output_type -> api.v0alpha.WarmCallerTransferApproveRes
	93,  // 138: api.v0alpha.Acd.PlaySoundboardEntity:output_type -> api.v0alpha.PlaySoundboardEntityRes
	95,  // 139: api.v0alpha.Acd.StopSoundboardEntity:output_type -> api.v0alpha.StopSoundboardEntityRes
	97,  // 140: api.v0alpha.Acd.UpdateAgentSkills:output_type -> api.v0alpha.UpdateAgentSkillsReply
	99,  // 141: api.v0alpha.Acd.PlayDTMF:output_type -> api.v0alpha.PlayDTMFReply
	101, // 142: api.v0alpha.Acd.AgentMute:output_type -> api.v0alpha.AgentMuteReply
	103, // 143: api.v0alpha.Acd.AgentUnmute:output_type -> api.v0alpha.AgentUnmuteReply
	105, // 144: api.v0alpha.Acd.StartSecureForm:output_type -> api.v0alpha.StartSecureFormRes
	107, // 145: api.v0alpha.Acd.CollectSecureFormField:output_type -> api.v0alpha.CollectSecureFormFieldRes
	109, // 146: api.v0alpha.Acd.ResetSecureFormField:output_type -> api.v0alpha.ResetSecureFormFieldRes
	111, // 147: api.v0alpha.Acd.AcceptSecureFormField:output_type -> api.v0alpha.AcceptSecureFormFieldRes
	113, // 148: api.v0alpha.Acd.ProcessSecureForm:output_type -> api.v0alpha.ProcessSecureFormRes
	115, // 149: api.v0alpha.Acd.FinishSecureFormHandling:output_type -> api.v0alpha.FinishSecureFormHandlingRes
	117, // 150: api.v0alpha.Acd.PopulateWorkflowFields:output_type -> api.v0alpha.PopulateWorkflowFieldsRes
	119, // 151: api.v0alpha.Acd.ValidateField:output_type -> api.v0alpha.ValidateFieldRes
	92,  // [92:152] is the sub-list for method output_type
	32,  // [32:92] is the sub-list for method input_type
	32,  // [32:32] is the sub-list for extension type_name
	32,  // [32:32] is the sub-list for extension extendee
	0,   // [0:32] is the sub-list for field type_name
}

func init() { file_api_v0alpha_acd_proto_init() }
func file_api_v0alpha_acd_proto_init() {
	if File_api_v0alpha_acd_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v0alpha_acd_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   129,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v0alpha_acd_proto_goTypes,
		DependencyIndexes: file_api_v0alpha_acd_proto_depIdxs,
		MessageInfos:      file_api_v0alpha_acd_proto_msgTypes,
	}.Build()
	File_api_v0alpha_acd_proto = out.File
	file_api_v0alpha_acd_proto_rawDesc = nil
	file_api_v0alpha_acd_proto_goTypes = nil
	file_api_v0alpha_acd_proto_depIdxs = nil
}
