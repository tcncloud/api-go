// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: api/v0alpha/callqueue.proto

package v0alpha

import (
	_ "github.com/tcncloud/api-go/annotations"
	commons "github.com/tcncloud/api-go/api/commons"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DequeuePreviewRecordOrCallReq struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TimeoutMinutes  int32                  `protobuf:"varint,1,opt,name=timeout_minutes,json=timeoutMinutes,proto3" json:"timeout_minutes,omitempty"`
	AgentSessionSid int64                  `protobuf:"varint,2,opt,name=agent_session_sid,json=agentSessionSid,proto3" json:"agent_session_sid,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DequeuePreviewRecordOrCallReq) Reset() {
	*x = DequeuePreviewRecordOrCallReq{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DequeuePreviewRecordOrCallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeuePreviewRecordOrCallReq) ProtoMessage() {}

func (x *DequeuePreviewRecordOrCallReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeuePreviewRecordOrCallReq.ProtoReflect.Descriptor instead.
func (*DequeuePreviewRecordOrCallReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{0}
}

func (x *DequeuePreviewRecordOrCallReq) GetTimeoutMinutes() int32 {
	if x != nil {
		return x.TimeoutMinutes
	}
	return 0
}

func (x *DequeuePreviewRecordOrCallReq) GetAgentSessionSid() int64 {
	if x != nil {
		return x.AgentSessionSid
	}
	return 0
}

type DequeuePreviewRecordOrCallRes struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	QueueName     string                    `protobuf:"bytes,1,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`
	Call          *commons.SimpleCallData   `protobuf:"bytes,2,opt,name=call,proto3" json:"call,omitempty"`
	Record        *commons.SimpleRecordData `protobuf:"bytes,3,opt,name=record,proto3" json:"record,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DequeuePreviewRecordOrCallRes) Reset() {
	*x = DequeuePreviewRecordOrCallRes{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DequeuePreviewRecordOrCallRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeuePreviewRecordOrCallRes) ProtoMessage() {}

func (x *DequeuePreviewRecordOrCallRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeuePreviewRecordOrCallRes.ProtoReflect.Descriptor instead.
func (*DequeuePreviewRecordOrCallRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{1}
}

func (x *DequeuePreviewRecordOrCallRes) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

func (x *DequeuePreviewRecordOrCallRes) GetCall() *commons.SimpleCallData {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *DequeuePreviewRecordOrCallRes) GetRecord() *commons.SimpleRecordData {
	if x != nil {
		return x.Record
	}
	return nil
}

type EnqueuePreviewRecordReq struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Record        *commons.SimpleRecordData `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	QueueName     string                    `protobuf:"bytes,2,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnqueuePreviewRecordReq) Reset() {
	*x = EnqueuePreviewRecordReq{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnqueuePreviewRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueuePreviewRecordReq) ProtoMessage() {}

func (x *EnqueuePreviewRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueuePreviewRecordReq.ProtoReflect.Descriptor instead.
func (*EnqueuePreviewRecordReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{2}
}

func (x *EnqueuePreviewRecordReq) GetRecord() *commons.SimpleRecordData {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *EnqueuePreviewRecordReq) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

type EnqueuePreviewRecordRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnqueuePreviewRecordRes) Reset() {
	*x = EnqueuePreviewRecordRes{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnqueuePreviewRecordRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueuePreviewRecordRes) ProtoMessage() {}

func (x *EnqueuePreviewRecordRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueuePreviewRecordRes.ProtoReflect.Descriptor instead.
func (*EnqueuePreviewRecordRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{3}
}

type DequeueScrubbedCallForPreviewRecordReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HuntGroupSid  int64                  `protobuf:"varint,1,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	PhoneNumber   string                 `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	PhoneNumIndex int32                  `protobuf:"varint,3,opt,name=phone_num_index,json=phoneNumIndex,proto3" json:"phone_num_index,omitempty"`
	TaskGroupSid  int64                  `protobuf:"varint,4,opt,name=task_group_sid,json=taskGroupSid,proto3" json:"task_group_sid,omitempty"`
	TaskSid       int64                  `protobuf:"varint,5,opt,name=task_sid,json=taskSid,proto3" json:"task_sid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DequeueScrubbedCallForPreviewRecordReq) Reset() {
	*x = DequeueScrubbedCallForPreviewRecordReq{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DequeueScrubbedCallForPreviewRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueScrubbedCallForPreviewRecordReq) ProtoMessage() {}

func (x *DequeueScrubbedCallForPreviewRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueScrubbedCallForPreviewRecordReq.ProtoReflect.Descriptor instead.
func (*DequeueScrubbedCallForPreviewRecordReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{4}
}

func (x *DequeueScrubbedCallForPreviewRecordReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *DequeueScrubbedCallForPreviewRecordReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *DequeueScrubbedCallForPreviewRecordReq) GetPhoneNumIndex() int32 {
	if x != nil {
		return x.PhoneNumIndex
	}
	return 0
}

func (x *DequeueScrubbedCallForPreviewRecordReq) GetTaskGroupSid() int64 {
	if x != nil {
		return x.TaskGroupSid
	}
	return 0
}

func (x *DequeueScrubbedCallForPreviewRecordReq) GetTaskSid() int64 {
	if x != nil {
		return x.TaskSid
	}
	return 0
}

type DequeueScrubbedCallForPreviewRecordRes struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Call          *commons.SimpleCallData `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DequeueScrubbedCallForPreviewRecordRes) Reset() {
	*x = DequeueScrubbedCallForPreviewRecordRes{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DequeueScrubbedCallForPreviewRecordRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueScrubbedCallForPreviewRecordRes) ProtoMessage() {}

func (x *DequeueScrubbedCallForPreviewRecordRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueScrubbedCallForPreviewRecordRes.ProtoReflect.Descriptor instead.
func (*DequeueScrubbedCallForPreviewRecordRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{5}
}

func (x *DequeueScrubbedCallForPreviewRecordRes) GetCall() *commons.SimpleCallData {
	if x != nil {
		return x.Call
	}
	return nil
}

type ClearPreviewRecordReturnQueueReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearPreviewRecordReturnQueueReq) Reset() {
	*x = ClearPreviewRecordReturnQueueReq{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearPreviewRecordReturnQueueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearPreviewRecordReturnQueueReq) ProtoMessage() {}

func (x *ClearPreviewRecordReturnQueueReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearPreviewRecordReturnQueueReq.ProtoReflect.Descriptor instead.
func (*ClearPreviewRecordReturnQueueReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{6}
}

type ClearPreviewRecordReturnQueueRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearPreviewRecordReturnQueueRes) Reset() {
	*x = ClearPreviewRecordReturnQueueRes{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearPreviewRecordReturnQueueRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearPreviewRecordReturnQueueRes) ProtoMessage() {}

func (x *ClearPreviewRecordReturnQueueRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearPreviewRecordReturnQueueRes.ProtoReflect.Descriptor instead.
func (*ClearPreviewRecordReturnQueueRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{7}
}

type EnqueuePreviewDialCallReq struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Call          *commons.SimpleCallData `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"`
	QueueName     string                  `protobuf:"bytes,2,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnqueuePreviewDialCallReq) Reset() {
	*x = EnqueuePreviewDialCallReq{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnqueuePreviewDialCallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueuePreviewDialCallReq) ProtoMessage() {}

func (x *EnqueuePreviewDialCallReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueuePreviewDialCallReq.ProtoReflect.Descriptor instead.
func (*EnqueuePreviewDialCallReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{8}
}

func (x *EnqueuePreviewDialCallReq) GetCall() *commons.SimpleCallData {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *EnqueuePreviewDialCallReq) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

type EnqueuePreviewDialCallRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnqueuePreviewDialCallRes) Reset() {
	*x = EnqueuePreviewDialCallRes{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnqueuePreviewDialCallRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueuePreviewDialCallRes) ProtoMessage() {}

func (x *EnqueuePreviewDialCallRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueuePreviewDialCallRes.ProtoReflect.Descriptor instead.
func (*EnqueuePreviewDialCallRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{9}
}

type ClearManualDialQueueReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearManualDialQueueReq) Reset() {
	*x = ClearManualDialQueueReq{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearManualDialQueueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearManualDialQueueReq) ProtoMessage() {}

func (x *ClearManualDialQueueReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearManualDialQueueReq.ProtoReflect.Descriptor instead.
func (*ClearManualDialQueueReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{10}
}

type ClearManualDialQueueRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearManualDialQueueRes) Reset() {
	*x = ClearManualDialQueueRes{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearManualDialQueueRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearManualDialQueueRes) ProtoMessage() {}

func (x *ClearManualDialQueueRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearManualDialQueueRes.ProtoReflect.Descriptor instead.
func (*ClearManualDialQueueRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{11}
}

type ProcessManualDialCallReq struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Call          *commons.SimpleCallData `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessManualDialCallReq) Reset() {
	*x = ProcessManualDialCallReq{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessManualDialCallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessManualDialCallReq) ProtoMessage() {}

func (x *ProcessManualDialCallReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessManualDialCallReq.ProtoReflect.Descriptor instead.
func (*ProcessManualDialCallReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{12}
}

func (x *ProcessManualDialCallReq) GetCall() *commons.SimpleCallData {
	if x != nil {
		return x.Call
	}
	return nil
}

type ProcessManualDialCallRes struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	ScrubbedCall  *commons.SimpleCallData `protobuf:"bytes,1,opt,name=scrubbed_call,json=scrubbedCall,proto3" json:"scrubbed_call,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessManualDialCallRes) Reset() {
	*x = ProcessManualDialCallRes{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessManualDialCallRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessManualDialCallRes) ProtoMessage() {}

func (x *ProcessManualDialCallRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessManualDialCallRes.ProtoReflect.Descriptor instead.
func (*ProcessManualDialCallRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{13}
}

func (x *ProcessManualDialCallRes) GetScrubbedCall() *commons.SimpleCallData {
	if x != nil {
		return x.ScrubbedCall
	}
	return nil
}

type DequeueCallForManualApprovalReq struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	HuntGroupSid    int64                  `protobuf:"varint,1,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	AgentSessionSid int64                  `protobuf:"varint,2,opt,name=agent_session_sid,json=agentSessionSid,proto3" json:"agent_session_sid,omitempty"`
	TimeoutMinutes  int32                  `protobuf:"varint,3,opt,name=timeout_minutes,json=timeoutMinutes,proto3" json:"timeout_minutes,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DequeueCallForManualApprovalReq) Reset() {
	*x = DequeueCallForManualApprovalReq{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DequeueCallForManualApprovalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueCallForManualApprovalReq) ProtoMessage() {}

func (x *DequeueCallForManualApprovalReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueCallForManualApprovalReq.ProtoReflect.Descriptor instead.
func (*DequeueCallForManualApprovalReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{14}
}

func (x *DequeueCallForManualApprovalReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *DequeueCallForManualApprovalReq) GetAgentSessionSid() int64 {
	if x != nil {
		return x.AgentSessionSid
	}
	return 0
}

func (x *DequeueCallForManualApprovalReq) GetTimeoutMinutes() int32 {
	if x != nil {
		return x.TimeoutMinutes
	}
	return 0
}

type DequeueCallForManualApprovalRes struct {
	state              protoimpl.MessageState           `protogen:"open.v1"`
	Call               *commons.SimpleCallData          `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"`
	Queue              string                           `protobuf:"bytes,2,opt,name=queue,proto3" json:"queue,omitempty"`
	ClientInfo         *GetClientInfoDataRes            `protobuf:"bytes,3,opt,name=client_info,json=clientInfo,proto3" json:"client_info,omitempty"`
	ClientInfoTemplate *GetClientInfoDisplayTemplateRes `protobuf:"bytes,4,opt,name=client_info_template,json=clientInfoTemplate,proto3" json:"client_info_template,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DequeueCallForManualApprovalRes) Reset() {
	*x = DequeueCallForManualApprovalRes{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DequeueCallForManualApprovalRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueCallForManualApprovalRes) ProtoMessage() {}

func (x *DequeueCallForManualApprovalRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueCallForManualApprovalRes.ProtoReflect.Descriptor instead.
func (*DequeueCallForManualApprovalRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{15}
}

func (x *DequeueCallForManualApprovalRes) GetCall() *commons.SimpleCallData {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *DequeueCallForManualApprovalRes) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *DequeueCallForManualApprovalRes) GetClientInfo() *GetClientInfoDataRes {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

func (x *DequeueCallForManualApprovalRes) GetClientInfoTemplate() *GetClientInfoDisplayTemplateRes {
	if x != nil {
		return x.ClientInfoTemplate
	}
	return nil
}

type EnqueueManuallyApprovedCallReq struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Call          *commons.SimpleCallData `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnqueueManuallyApprovedCallReq) Reset() {
	*x = EnqueueManuallyApprovedCallReq{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnqueueManuallyApprovedCallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueManuallyApprovedCallReq) ProtoMessage() {}

func (x *EnqueueManuallyApprovedCallReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueManuallyApprovedCallReq.ProtoReflect.Descriptor instead.
func (*EnqueueManuallyApprovedCallReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{16}
}

func (x *EnqueueManuallyApprovedCallReq) GetCall() *commons.SimpleCallData {
	if x != nil {
		return x.Call
	}
	return nil
}

type EnqueueManuallyApprovedCallRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnqueueManuallyApprovedCallRes) Reset() {
	*x = EnqueueManuallyApprovedCallRes{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnqueueManuallyApprovedCallRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueManuallyApprovedCallRes) ProtoMessage() {}

func (x *EnqueueManuallyApprovedCallRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueManuallyApprovedCallRes.ProtoReflect.Descriptor instead.
func (*EnqueueManuallyApprovedCallRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{17}
}

type EnqueueManuallyRejectedCallReq struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Call          *commons.SimpleCallData `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnqueueManuallyRejectedCallReq) Reset() {
	*x = EnqueueManuallyRejectedCallReq{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnqueueManuallyRejectedCallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueManuallyRejectedCallReq) ProtoMessage() {}

func (x *EnqueueManuallyRejectedCallReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueManuallyRejectedCallReq.ProtoReflect.Descriptor instead.
func (*EnqueueManuallyRejectedCallReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{18}
}

func (x *EnqueueManuallyRejectedCallReq) GetCall() *commons.SimpleCallData {
	if x != nil {
		return x.Call
	}
	return nil
}

type EnqueueManuallyRejectedCallRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnqueueManuallyRejectedCallRes) Reset() {
	*x = EnqueueManuallyRejectedCallRes{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnqueueManuallyRejectedCallRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueManuallyRejectedCallRes) ProtoMessage() {}

func (x *EnqueueManuallyRejectedCallRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueManuallyRejectedCallRes.ProtoReflect.Descriptor instead.
func (*EnqueueManuallyRejectedCallRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{19}
}

type RequeueManuallyApprovedCallReq struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Call          *commons.SimpleCallData `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"`
	QueueName     string                  `protobuf:"bytes,2,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequeueManuallyApprovedCallReq) Reset() {
	*x = RequeueManuallyApprovedCallReq{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequeueManuallyApprovedCallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequeueManuallyApprovedCallReq) ProtoMessage() {}

func (x *RequeueManuallyApprovedCallReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequeueManuallyApprovedCallReq.ProtoReflect.Descriptor instead.
func (*RequeueManuallyApprovedCallReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{20}
}

func (x *RequeueManuallyApprovedCallReq) GetCall() *commons.SimpleCallData {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *RequeueManuallyApprovedCallReq) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

type RequeueManuallyApprovedCallRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequeueManuallyApprovedCallRes) Reset() {
	*x = RequeueManuallyApprovedCallRes{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequeueManuallyApprovedCallRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequeueManuallyApprovedCallRes) ProtoMessage() {}

func (x *RequeueManuallyApprovedCallRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequeueManuallyApprovedCallRes.ProtoReflect.Descriptor instead.
func (*RequeueManuallyApprovedCallRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{21}
}

type EnqueueManuallyApprovedSmsReq struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Sms           *commons.SimpleSmsMamData `protobuf:"bytes,1,opt,name=sms,proto3" json:"sms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnqueueManuallyApprovedSmsReq) Reset() {
	*x = EnqueueManuallyApprovedSmsReq{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnqueueManuallyApprovedSmsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueManuallyApprovedSmsReq) ProtoMessage() {}

func (x *EnqueueManuallyApprovedSmsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueManuallyApprovedSmsReq.ProtoReflect.Descriptor instead.
func (*EnqueueManuallyApprovedSmsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{22}
}

func (x *EnqueueManuallyApprovedSmsReq) GetSms() *commons.SimpleSmsMamData {
	if x != nil {
		return x.Sms
	}
	return nil
}

type EnqueueManuallyApprovedSmsRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnqueueManuallyApprovedSmsRes) Reset() {
	*x = EnqueueManuallyApprovedSmsRes{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnqueueManuallyApprovedSmsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueManuallyApprovedSmsRes) ProtoMessage() {}

func (x *EnqueueManuallyApprovedSmsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueManuallyApprovedSmsRes.ProtoReflect.Descriptor instead.
func (*EnqueueManuallyApprovedSmsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{23}
}

type EnqueueManuallyRejectedSmsReq struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Sms           *commons.SimpleSmsMamData `protobuf:"bytes,1,opt,name=sms,proto3" json:"sms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnqueueManuallyRejectedSmsReq) Reset() {
	*x = EnqueueManuallyRejectedSmsReq{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnqueueManuallyRejectedSmsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueManuallyRejectedSmsReq) ProtoMessage() {}

func (x *EnqueueManuallyRejectedSmsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueManuallyRejectedSmsReq.ProtoReflect.Descriptor instead.
func (*EnqueueManuallyRejectedSmsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{24}
}

func (x *EnqueueManuallyRejectedSmsReq) GetSms() *commons.SimpleSmsMamData {
	if x != nil {
		return x.Sms
	}
	return nil
}

type EnqueueManuallyRejectedSmsRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnqueueManuallyRejectedSmsRes) Reset() {
	*x = EnqueueManuallyRejectedSmsRes{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnqueueManuallyRejectedSmsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueManuallyRejectedSmsRes) ProtoMessage() {}

func (x *EnqueueManuallyRejectedSmsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueManuallyRejectedSmsRes.ProtoReflect.Descriptor instead.
func (*EnqueueManuallyRejectedSmsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{25}
}

type RequeueManuallyApprovedSmsReq struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Sms           *commons.SimpleSmsMamData `protobuf:"bytes,1,opt,name=sms,proto3" json:"sms,omitempty"`
	QueueName     string                    `protobuf:"bytes,2,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequeueManuallyApprovedSmsReq) Reset() {
	*x = RequeueManuallyApprovedSmsReq{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequeueManuallyApprovedSmsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequeueManuallyApprovedSmsReq) ProtoMessage() {}

func (x *RequeueManuallyApprovedSmsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequeueManuallyApprovedSmsReq.ProtoReflect.Descriptor instead.
func (*RequeueManuallyApprovedSmsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{26}
}

func (x *RequeueManuallyApprovedSmsReq) GetSms() *commons.SimpleSmsMamData {
	if x != nil {
		return x.Sms
	}
	return nil
}

func (x *RequeueManuallyApprovedSmsReq) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

type RequeueManuallyApprovedSmsRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequeueManuallyApprovedSmsRes) Reset() {
	*x = RequeueManuallyApprovedSmsRes{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequeueManuallyApprovedSmsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequeueManuallyApprovedSmsRes) ProtoMessage() {}

func (x *RequeueManuallyApprovedSmsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequeueManuallyApprovedSmsRes.ProtoReflect.Descriptor instead.
func (*RequeueManuallyApprovedSmsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{27}
}

type DequeueSmsMamForManualApprovalReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HuntGroupSid  int64                  `protobuf:"varint,2,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DequeueSmsMamForManualApprovalReq) Reset() {
	*x = DequeueSmsMamForManualApprovalReq{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DequeueSmsMamForManualApprovalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueSmsMamForManualApprovalReq) ProtoMessage() {}

func (x *DequeueSmsMamForManualApprovalReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueSmsMamForManualApprovalReq.ProtoReflect.Descriptor instead.
func (*DequeueSmsMamForManualApprovalReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{28}
}

func (x *DequeueSmsMamForManualApprovalReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

type DequeueSmsMamForManualApprovalRes struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Sms           *commons.SimpleSmsMamData `protobuf:"bytes,1,opt,name=sms,proto3" json:"sms,omitempty"`
	Queue         string                    `protobuf:"bytes,2,opt,name=queue,proto3" json:"queue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DequeueSmsMamForManualApprovalRes) Reset() {
	*x = DequeueSmsMamForManualApprovalRes{}
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DequeueSmsMamForManualApprovalRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueSmsMamForManualApprovalRes) ProtoMessage() {}

func (x *DequeueSmsMamForManualApprovalRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_callqueue_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueSmsMamForManualApprovalRes.ProtoReflect.Descriptor instead.
func (*DequeueSmsMamForManualApprovalRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_callqueue_proto_rawDescGZIP(), []int{29}
}

func (x *DequeueSmsMamForManualApprovalRes) GetSms() *commons.SimpleSmsMamData {
	if x != nil {
		return x.Sms
	}
	return nil
}

func (x *DequeueSmsMamForManualApprovalRes) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

var File_api_v0alpha_callqueue_proto protoreflect.FileDescriptor

var file_api_v0alpha_callqueue_proto_rawDesc = string([]byte{
	0x0a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x61,
	0x6c, 0x6c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x17, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x70, 0x33, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x74, 0x0a, 0x1d, 0x44, 0x65, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22,
	0xa6, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2f, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x63, 0x61, 0x6c,
	0x6c, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x6f, 0x0a, 0x17, 0x45, 0x6e, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x45, 0x6e, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x26, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x63, 0x72, 0x75, 0x62, 0x62, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x69,
	0x64, 0x22, 0x59, 0x0a, 0x26, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x72, 0x75,
	0x62, 0x62, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x22, 0x0a, 0x20,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71,
	0x22, 0x22, 0x0a, 0x20, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x22, 0x6b, 0x0a, 0x19, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x63, 0x61,
	0x6c, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x1b, 0x0a, 0x19, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x44, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x19,
	0x0a, 0x17, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61,
	0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x12, 0x2f, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x63, 0x61, 0x6c,
	0x6c, 0x22, 0x5c, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x40, 0x0a,
	0x0d, 0x73, 0x63, 0x72, 0x75, 0x62, 0x62, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x75, 0x62, 0x62, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x22,
	0x9c, 0x01, 0x0a, 0x1f, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x46,
	0x6f, 0x72, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x22, 0x8c,
	0x02, 0x0a, 0x1f, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x6f,
	0x72, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x63,
	0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5e, 0x0a,
	0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x51, 0x0a,
	0x1e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x2f, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c,
	0x22, 0x20, 0x0a, 0x1e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x6c, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x22, 0x51, 0x0a, 0x1e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x20, 0x0a, 0x1e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x70, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x61, 0x6c,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x1d, 0x45,
	0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x03,
	0x73, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x6d,
	0x73, 0x4d, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x73, 0x6d, 0x73, 0x22, 0x1f, 0x0a,
	0x1d, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x22, 0x50,
	0x0a, 0x1d, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c,
	0x79, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x2f, 0x0a, 0x03, 0x73, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x53, 0x6d, 0x73, 0x4d, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x73, 0x6d, 0x73,
	0x22, 0x1f, 0x0a, 0x1d, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x6c, 0x79, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x6d, 0x73, 0x52, 0x65,
	0x73, 0x22, 0x6f, 0x0a, 0x1d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x6c, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x6d, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x2f, 0x0a, 0x03, 0x73, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x53, 0x6d, 0x73, 0x4d, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03,
	0x73, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x6c, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x6d, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x21, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53, 0x6d,
	0x73, 0x4d, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x22, 0x6a,
	0x0a, 0x21, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53, 0x6d, 0x73, 0x4d, 0x61, 0x6d, 0x46,
	0x6f, 0x72, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x03, 0x73, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x6d, 0x73, 0x4d, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x03, 0x73, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x32, 0x8f, 0x16, 0x0a, 0x09, 0x43,
	0x61, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0xb9, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4f, 0x72, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x22,
	0x43, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01,
	0x2a, 0x22, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x63, 0x61, 0x6c, 0x6c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x64, 0x65, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6f, 0x72,
	0x63, 0x61, 0x6c, 0x6c, 0x12, 0xa1, 0x01, 0x0a, 0x14, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x02,
	0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x2f, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0xdd, 0x01, 0x0a, 0x23, 0x44, 0x65, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x62, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c,
	0x46, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44,
	0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x62, 0x65, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62,
	0x62, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x22, 0x4c, 0xba, 0xb8, 0x91, 0x02,
	0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x3a, 0x01, 0x2a, 0x22, 0x3a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2f, 0x64, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x63, 0x72, 0x75,
	0x62, 0x62, 0x65, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0xc5, 0x01, 0x0a, 0x1d, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x22, 0x46, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x3a, 0x01, 0x2a, 0x22, 0x34, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x2f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x12, 0xa9, 0x01, 0x0a, 0x16, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x44, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x26, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x44, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x3f, 0xba, 0xb8, 0x91,
	0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x61, 0x6c, 0x6c,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x64, 0x69, 0x61, 0x6c, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0xa1, 0x01, 0x0a,
	0x14, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44,
	0x69, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65,
	0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30,
	0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x64, 0x69, 0x61, 0x6c, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x12, 0xa5, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61,
	0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x64, 0x69, 0x61, 0x6c, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0xc1, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x45, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a, 0x22, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f,
	0x64, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0xbd, 0x01, 0x0a,
	0x1b, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x2b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x44, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x2f, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0xbd, 0x01, 0x0a,
	0x1b, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x2b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x44, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x2f, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0xbd, 0x01, 0x0a,
	0x1b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x2b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x44, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0xb9, 0x01, 0x0a,
	0x1a, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x6d, 0x73, 0x12, 0x2a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x64, 0x53, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x6c, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x6d, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x43, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x36, 0x3a, 0x01, 0x2a, 0x22, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x65, 0x6e,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x73, 0x6d, 0x73, 0x12, 0xb9, 0x01, 0x0a, 0x1a, 0x45, 0x6e, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x53, 0x6d, 0x73, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c,
	0x79, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x43, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01,
	0x2a, 0x22, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x63, 0x61, 0x6c, 0x6c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x73, 0x6d, 0x73, 0x12, 0xb9, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x53, 0x6d, 0x73, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c,
	0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x22, 0x43, 0xba, 0xb8, 0x91,
	0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01, 0x2a, 0x22, 0x31, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x61, 0x6c, 0x6c,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x6d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x6c, 0x79, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x73, 0x6d, 0x73,
	0x12, 0xc9, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53, 0x6d, 0x73, 0x4d,
	0x61, 0x6d, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53, 0x6d, 0x73, 0x4d, 0x61, 0x6d, 0x46,
	0x6f, 0x72, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53, 0x6d, 0x73, 0x4d, 0x61, 0x6d, 0x46,
	0x6f, 0x72, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x22, 0x47, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3a, 0x3a, 0x01, 0x2a, 0x22, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x64, 0x65,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x6d, 0x73, 0x6d, 0x61, 0x6d, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x42, 0x96, 0x01, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x42, 0x0e, 0x43, 0x61, 0x6c, 0x6c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74,
	0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xa2, 0x02, 0x03, 0x41, 0x56, 0x58,
	0xaa, 0x02, 0x0b, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02,
	0x0b, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xe2, 0x02, 0x17, 0x41,
	0x70, 0x69, 0x5c, 0x56, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_v0alpha_callqueue_proto_rawDescOnce sync.Once
	file_api_v0alpha_callqueue_proto_rawDescData []byte
)

func file_api_v0alpha_callqueue_proto_rawDescGZIP() []byte {
	file_api_v0alpha_callqueue_proto_rawDescOnce.Do(func() {
		file_api_v0alpha_callqueue_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_v0alpha_callqueue_proto_rawDesc), len(file_api_v0alpha_callqueue_proto_rawDesc)))
	})
	return file_api_v0alpha_callqueue_proto_rawDescData
}

var file_api_v0alpha_callqueue_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_api_v0alpha_callqueue_proto_goTypes = []any{
	(*DequeuePreviewRecordOrCallReq)(nil),          // 0: api.v0alpha.DequeuePreviewRecordOrCallReq
	(*DequeuePreviewRecordOrCallRes)(nil),          // 1: api.v0alpha.DequeuePreviewRecordOrCallRes
	(*EnqueuePreviewRecordReq)(nil),                // 2: api.v0alpha.EnqueuePreviewRecordReq
	(*EnqueuePreviewRecordRes)(nil),                // 3: api.v0alpha.EnqueuePreviewRecordRes
	(*DequeueScrubbedCallForPreviewRecordReq)(nil), // 4: api.v0alpha.DequeueScrubbedCallForPreviewRecordReq
	(*DequeueScrubbedCallForPreviewRecordRes)(nil), // 5: api.v0alpha.DequeueScrubbedCallForPreviewRecordRes
	(*ClearPreviewRecordReturnQueueReq)(nil),       // 6: api.v0alpha.ClearPreviewRecordReturnQueueReq
	(*ClearPreviewRecordReturnQueueRes)(nil),       // 7: api.v0alpha.ClearPreviewRecordReturnQueueRes
	(*EnqueuePreviewDialCallReq)(nil),              // 8: api.v0alpha.EnqueuePreviewDialCallReq
	(*EnqueuePreviewDialCallRes)(nil),              // 9: api.v0alpha.EnqueuePreviewDialCallRes
	(*ClearManualDialQueueReq)(nil),                // 10: api.v0alpha.ClearManualDialQueueReq
	(*ClearManualDialQueueRes)(nil),                // 11: api.v0alpha.ClearManualDialQueueRes
	(*ProcessManualDialCallReq)(nil),               // 12: api.v0alpha.ProcessManualDialCallReq
	(*ProcessManualDialCallRes)(nil),               // 13: api.v0alpha.ProcessManualDialCallRes
	(*DequeueCallForManualApprovalReq)(nil),        // 14: api.v0alpha.DequeueCallForManualApprovalReq
	(*DequeueCallForManualApprovalRes)(nil),        // 15: api.v0alpha.DequeueCallForManualApprovalRes
	(*EnqueueManuallyApprovedCallReq)(nil),         // 16: api.v0alpha.EnqueueManuallyApprovedCallReq
	(*EnqueueManuallyApprovedCallRes)(nil),         // 17: api.v0alpha.EnqueueManuallyApprovedCallRes
	(*EnqueueManuallyRejectedCallReq)(nil),         // 18: api.v0alpha.EnqueueManuallyRejectedCallReq
	(*EnqueueManuallyRejectedCallRes)(nil),         // 19: api.v0alpha.EnqueueManuallyRejectedCallRes
	(*RequeueManuallyApprovedCallReq)(nil),         // 20: api.v0alpha.RequeueManuallyApprovedCallReq
	(*RequeueManuallyApprovedCallRes)(nil),         // 21: api.v0alpha.RequeueManuallyApprovedCallRes
	(*EnqueueManuallyApprovedSmsReq)(nil),          // 22: api.v0alpha.EnqueueManuallyApprovedSmsReq
	(*EnqueueManuallyApprovedSmsRes)(nil),          // 23: api.v0alpha.EnqueueManuallyApprovedSmsRes
	(*EnqueueManuallyRejectedSmsReq)(nil),          // 24: api.v0alpha.EnqueueManuallyRejectedSmsReq
	(*EnqueueManuallyRejectedSmsRes)(nil),          // 25: api.v0alpha.EnqueueManuallyRejectedSmsRes
	(*RequeueManuallyApprovedSmsReq)(nil),          // 26: api.v0alpha.RequeueManuallyApprovedSmsReq
	(*RequeueManuallyApprovedSmsRes)(nil),          // 27: api.v0alpha.RequeueManuallyApprovedSmsRes
	(*DequeueSmsMamForManualApprovalReq)(nil),      // 28: api.v0alpha.DequeueSmsMamForManualApprovalReq
	(*DequeueSmsMamForManualApprovalRes)(nil),      // 29: api.v0alpha.DequeueSmsMamForManualApprovalRes
	(*commons.SimpleCallData)(nil),                 // 30: api.commons.SimpleCallData
	(*commons.SimpleRecordData)(nil),               // 31: api.commons.SimpleRecordData
	(*GetClientInfoDataRes)(nil),                   // 32: api.v0alpha.GetClientInfoDataRes
	(*GetClientInfoDisplayTemplateRes)(nil),        // 33: api.v0alpha.GetClientInfoDisplayTemplateRes
	(*commons.SimpleSmsMamData)(nil),               // 34: api.commons.SimpleSmsMamData
}
var file_api_v0alpha_callqueue_proto_depIdxs = []int32{
	30, // 0: api.v0alpha.DequeuePreviewRecordOrCallRes.call:type_name -> api.commons.SimpleCallData
	31, // 1: api.v0alpha.DequeuePreviewRecordOrCallRes.record:type_name -> api.commons.SimpleRecordData
	31, // 2: api.v0alpha.EnqueuePreviewRecordReq.record:type_name -> api.commons.SimpleRecordData
	30, // 3: api.v0alpha.DequeueScrubbedCallForPreviewRecordRes.call:type_name -> api.commons.SimpleCallData
	30, // 4: api.v0alpha.EnqueuePreviewDialCallReq.call:type_name -> api.commons.SimpleCallData
	30, // 5: api.v0alpha.ProcessManualDialCallReq.call:type_name -> api.commons.SimpleCallData
	30, // 6: api.v0alpha.ProcessManualDialCallRes.scrubbed_call:type_name -> api.commons.SimpleCallData
	30, // 7: api.v0alpha.DequeueCallForManualApprovalRes.call:type_name -> api.commons.SimpleCallData
	32, // 8: api.v0alpha.DequeueCallForManualApprovalRes.client_info:type_name -> api.v0alpha.GetClientInfoDataRes
	33, // 9: api.v0alpha.DequeueCallForManualApprovalRes.client_info_template:type_name -> api.v0alpha.GetClientInfoDisplayTemplateRes
	30, // 10: api.v0alpha.EnqueueManuallyApprovedCallReq.call:type_name -> api.commons.SimpleCallData
	30, // 11: api.v0alpha.EnqueueManuallyRejectedCallReq.call:type_name -> api.commons.SimpleCallData
	30, // 12: api.v0alpha.RequeueManuallyApprovedCallReq.call:type_name -> api.commons.SimpleCallData
	34, // 13: api.v0alpha.EnqueueManuallyApprovedSmsReq.sms:type_name -> api.commons.SimpleSmsMamData
	34, // 14: api.v0alpha.EnqueueManuallyRejectedSmsReq.sms:type_name -> api.commons.SimpleSmsMamData
	34, // 15: api.v0alpha.RequeueManuallyApprovedSmsReq.sms:type_name -> api.commons.SimpleSmsMamData
	34, // 16: api.v0alpha.DequeueSmsMamForManualApprovalRes.sms:type_name -> api.commons.SimpleSmsMamData
	0,  // 17: api.v0alpha.CallQueue.DequeuePreviewRecordOrCall:input_type -> api.v0alpha.DequeuePreviewRecordOrCallReq
	2,  // 18: api.v0alpha.CallQueue.EnqueuePreviewRecord:input_type -> api.v0alpha.EnqueuePreviewRecordReq
	4,  // 19: api.v0alpha.CallQueue.DequeueScrubbedCallForPreviewRecord:input_type -> api.v0alpha.DequeueScrubbedCallForPreviewRecordReq
	6,  // 20: api.v0alpha.CallQueue.ClearPreviewRecordReturnQueue:input_type -> api.v0alpha.ClearPreviewRecordReturnQueueReq
	8,  // 21: api.v0alpha.CallQueue.EnqueuePreviewDialCall:input_type -> api.v0alpha.EnqueuePreviewDialCallReq
	10, // 22: api.v0alpha.CallQueue.ClearManualDialQueue:input_type -> api.v0alpha.ClearManualDialQueueReq
	12, // 23: api.v0alpha.CallQueue.ProcessManualDialCall:input_type -> api.v0alpha.ProcessManualDialCallReq
	14, // 24: api.v0alpha.CallQueue.DequeueCallForManualApproval:input_type -> api.v0alpha.DequeueCallForManualApprovalReq
	16, // 25: api.v0alpha.CallQueue.EnqueueManuallyApprovedCall:input_type -> api.v0alpha.EnqueueManuallyApprovedCallReq
	18, // 26: api.v0alpha.CallQueue.EnqueueManuallyRejectedCall:input_type -> api.v0alpha.EnqueueManuallyRejectedCallReq
	20, // 27: api.v0alpha.CallQueue.RequeueManuallyApprovedCall:input_type -> api.v0alpha.RequeueManuallyApprovedCallReq
	22, // 28: api.v0alpha.CallQueue.EnqueueManuallyApprovedSms:input_type -> api.v0alpha.EnqueueManuallyApprovedSmsReq
	24, // 29: api.v0alpha.CallQueue.EnqueueManuallyRejectedSms:input_type -> api.v0alpha.EnqueueManuallyRejectedSmsReq
	26, // 30: api.v0alpha.CallQueue.RequeueManuallyApprovedSms:input_type -> api.v0alpha.RequeueManuallyApprovedSmsReq
	28, // 31: api.v0alpha.CallQueue.DequeueSmsMamForManualApproval:input_type -> api.v0alpha.DequeueSmsMamForManualApprovalReq
	1,  // 32: api.v0alpha.CallQueue.DequeuePreviewRecordOrCall:output_type -> api.v0alpha.DequeuePreviewRecordOrCallRes
	3,  // 33: api.v0alpha.CallQueue.EnqueuePreviewRecord:output_type -> api.v0alpha.EnqueuePreviewRecordRes
	5,  // 34: api.v0alpha.CallQueue.DequeueScrubbedCallForPreviewRecord:output_type -> api.v0alpha.DequeueScrubbedCallForPreviewRecordRes
	7,  // 35: api.v0alpha.CallQueue.ClearPreviewRecordReturnQueue:output_type -> api.v0alpha.ClearPreviewRecordReturnQueueRes
	9,  // 36: api.v0alpha.CallQueue.EnqueuePreviewDialCall:output_type -> api.v0alpha.EnqueuePreviewDialCallRes
	11, // 37: api.v0alpha.CallQueue.ClearManualDialQueue:output_type -> api.v0alpha.ClearManualDialQueueRes
	13, // 38: api.v0alpha.CallQueue.ProcessManualDialCall:output_type -> api.v0alpha.ProcessManualDialCallRes
	15, // 39: api.v0alpha.CallQueue.DequeueCallForManualApproval:output_type -> api.v0alpha.DequeueCallForManualApprovalRes
	17, // 40: api.v0alpha.CallQueue.EnqueueManuallyApprovedCall:output_type -> api.v0alpha.EnqueueManuallyApprovedCallRes
	19, // 41: api.v0alpha.CallQueue.EnqueueManuallyRejectedCall:output_type -> api.v0alpha.EnqueueManuallyRejectedCallRes
	21, // 42: api.v0alpha.CallQueue.RequeueManuallyApprovedCall:output_type -> api.v0alpha.RequeueManuallyApprovedCallRes
	23, // 43: api.v0alpha.CallQueue.EnqueueManuallyApprovedSms:output_type -> api.v0alpha.EnqueueManuallyApprovedSmsRes
	25, // 44: api.v0alpha.CallQueue.EnqueueManuallyRejectedSms:output_type -> api.v0alpha.EnqueueManuallyRejectedSmsRes
	27, // 45: api.v0alpha.CallQueue.RequeueManuallyApprovedSms:output_type -> api.v0alpha.RequeueManuallyApprovedSmsRes
	29, // 46: api.v0alpha.CallQueue.DequeueSmsMamForManualApproval:output_type -> api.v0alpha.DequeueSmsMamForManualApprovalRes
	32, // [32:47] is the sub-list for method output_type
	17, // [17:32] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_api_v0alpha_callqueue_proto_init() }
func file_api_v0alpha_callqueue_proto_init() {
	if File_api_v0alpha_callqueue_proto != nil {
		return
	}
	file_api_v0alpha_p3api_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_v0alpha_callqueue_proto_rawDesc), len(file_api_v0alpha_callqueue_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v0alpha_callqueue_proto_goTypes,
		DependencyIndexes: file_api_v0alpha_callqueue_proto_depIdxs,
		MessageInfos:      file_api_v0alpha_callqueue_proto_msgTypes,
	}.Build()
	File_api_v0alpha_callqueue_proto = out.File
	file_api_v0alpha_callqueue_proto_goTypes = nil
	file_api_v0alpha_callqueue_proto_depIdxs = nil
}
