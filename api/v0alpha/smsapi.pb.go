// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: api/v0alpha/smsapi.proto

package v0alpha

import (
	_ "github.com/tcncloud/api-go/annotations"
	commons "github.com/tcncloud/api-go/api/commons"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListSmsTemplatesReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSmsTemplatesReq) Reset() {
	*x = ListSmsTemplatesReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmsTemplatesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmsTemplatesReq) ProtoMessage() {}

func (x *ListSmsTemplatesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmsTemplatesReq.ProtoReflect.Descriptor instead.
func (*ListSmsTemplatesReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{0}
}

type ListSmsTemplatesRes struct {
	state                  protoimpl.MessageState    `protogen:"open.v1"`
	SmsTemplateWithIntents []*SmsTemplateWithIntents `protobuf:"bytes,1,rep,name=sms_template_with_intents,json=smsTemplateWithIntents,proto3" json:"sms_template_with_intents,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ListSmsTemplatesRes) Reset() {
	*x = ListSmsTemplatesRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmsTemplatesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmsTemplatesRes) ProtoMessage() {}

func (x *ListSmsTemplatesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmsTemplatesRes.ProtoReflect.Descriptor instead.
func (*ListSmsTemplatesRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{1}
}

func (x *ListSmsTemplatesRes) GetSmsTemplateWithIntents() []*SmsTemplateWithIntents {
	if x != nil {
		return x.SmsTemplateWithIntents
	}
	return nil
}

type SmsTemplateWithIntents struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SmsTemplate        *SmsTemplate           `protobuf:"bytes,1,opt,name=sms_template,json=smsTemplate,proto3" json:"sms_template,omitempty"`
	SmsIntentTemplates []*SmsIntentTemplate   `protobuf:"bytes,2,rep,name=sms_intent_templates,json=smsIntentTemplates,proto3" json:"sms_intent_templates,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SmsTemplateWithIntents) Reset() {
	*x = SmsTemplateWithIntents{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmsTemplateWithIntents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsTemplateWithIntents) ProtoMessage() {}

func (x *SmsTemplateWithIntents) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsTemplateWithIntents.ProtoReflect.Descriptor instead.
func (*SmsTemplateWithIntents) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{2}
}

func (x *SmsTemplateWithIntents) GetSmsTemplate() *SmsTemplate {
	if x != nil {
		return x.SmsTemplate
	}
	return nil
}

func (x *SmsTemplateWithIntents) GetSmsIntentTemplates() []*SmsIntentTemplate {
	if x != nil {
		return x.SmsIntentTemplates
	}
	return nil
}

type SmsTemplate struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SmsTemplateSid int64                  `protobuf:"varint,1,opt,name=sms_template_sid,json=smsTemplateSid,proto3" json:"sms_template_sid,omitempty"`
	Message        string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	LastUpdated    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SmsTemplate) Reset() {
	*x = SmsTemplate{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmsTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsTemplate) ProtoMessage() {}

func (x *SmsTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsTemplate.ProtoReflect.Descriptor instead.
func (*SmsTemplate) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{3}
}

func (x *SmsTemplate) GetSmsTemplateSid() int64 {
	if x != nil {
		return x.SmsTemplateSid
	}
	return 0
}

func (x *SmsTemplate) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SmsTemplate) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

type CreateSmsTemplateReq struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Message              string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	SmsIntentTemplateSid []int64                `protobuf:"varint,2,rep,packed,name=sms_intent_template_sid,json=smsIntentTemplateSid,proto3" json:"sms_intent_template_sid,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CreateSmsTemplateReq) Reset() {
	*x = CreateSmsTemplateReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSmsTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSmsTemplateReq) ProtoMessage() {}

func (x *CreateSmsTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSmsTemplateReq.ProtoReflect.Descriptor instead.
func (*CreateSmsTemplateReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{4}
}

func (x *CreateSmsTemplateReq) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateSmsTemplateReq) GetSmsIntentTemplateSid() []int64 {
	if x != nil {
		return x.SmsIntentTemplateSid
	}
	return nil
}

type CreateSmsTemplateRes struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SmsTemplateSid int64                  `protobuf:"varint,1,opt,name=sms_template_sid,json=smsTemplateSid,proto3" json:"sms_template_sid,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateSmsTemplateRes) Reset() {
	*x = CreateSmsTemplateRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSmsTemplateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSmsTemplateRes) ProtoMessage() {}

func (x *CreateSmsTemplateRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSmsTemplateRes.ProtoReflect.Descriptor instead.
func (*CreateSmsTemplateRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{5}
}

func (x *CreateSmsTemplateRes) GetSmsTemplateSid() int64 {
	if x != nil {
		return x.SmsTemplateSid
	}
	return 0
}

type UpdateSmsTemplateReq struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SmsTemplateSid       int64                  `protobuf:"varint,1,opt,name=sms_template_sid,json=smsTemplateSid,proto3" json:"sms_template_sid,omitempty"`
	Message              string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	SmsIntentTemplateSid []int64                `protobuf:"varint,3,rep,packed,name=sms_intent_template_sid,json=smsIntentTemplateSid,proto3" json:"sms_intent_template_sid,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *UpdateSmsTemplateReq) Reset() {
	*x = UpdateSmsTemplateReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSmsTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSmsTemplateReq) ProtoMessage() {}

func (x *UpdateSmsTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSmsTemplateReq.ProtoReflect.Descriptor instead.
func (*UpdateSmsTemplateReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateSmsTemplateReq) GetSmsTemplateSid() int64 {
	if x != nil {
		return x.SmsTemplateSid
	}
	return 0
}

func (x *UpdateSmsTemplateReq) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateSmsTemplateReq) GetSmsIntentTemplateSid() []int64 {
	if x != nil {
		return x.SmsIntentTemplateSid
	}
	return nil
}

type UpdateSmsTemplateRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSmsTemplateRes) Reset() {
	*x = UpdateSmsTemplateRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSmsTemplateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSmsTemplateRes) ProtoMessage() {}

func (x *UpdateSmsTemplateRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSmsTemplateRes.ProtoReflect.Descriptor instead.
func (*UpdateSmsTemplateRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateSmsTemplateRes) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type DeleteSmsTemplateReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SmsTemplateSid int64                  `protobuf:"varint,1,opt,name=sms_template_sid,json=smsTemplateSid,proto3" json:"sms_template_sid,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DeleteSmsTemplateReq) Reset() {
	*x = DeleteSmsTemplateReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSmsTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSmsTemplateReq) ProtoMessage() {}

func (x *DeleteSmsTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSmsTemplateReq.ProtoReflect.Descriptor instead.
func (*DeleteSmsTemplateReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteSmsTemplateReq) GetSmsTemplateSid() int64 {
	if x != nil {
		return x.SmsTemplateSid
	}
	return 0
}

type DeleteSmsTemplateRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSmsTemplateRes) Reset() {
	*x = DeleteSmsTemplateRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSmsTemplateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSmsTemplateRes) ProtoMessage() {}

func (x *DeleteSmsTemplateRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSmsTemplateRes.ProtoReflect.Descriptor instead.
func (*DeleteSmsTemplateRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteSmsTemplateRes) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type GetSmsTemplateBySidReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SmsTemplateSid int64                  `protobuf:"varint,1,opt,name=sms_template_sid,json=smsTemplateSid,proto3" json:"sms_template_sid,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetSmsTemplateBySidReq) Reset() {
	*x = GetSmsTemplateBySidReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSmsTemplateBySidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSmsTemplateBySidReq) ProtoMessage() {}

func (x *GetSmsTemplateBySidReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSmsTemplateBySidReq.ProtoReflect.Descriptor instead.
func (*GetSmsTemplateBySidReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{10}
}

func (x *GetSmsTemplateBySidReq) GetSmsTemplateSid() int64 {
	if x != nil {
		return x.SmsTemplateSid
	}
	return 0
}

type GetSmsTemplateBySidRes struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SmsTemplate        *SmsTemplate           `protobuf:"bytes,1,opt,name=sms_template,json=smsTemplate,proto3" json:"sms_template,omitempty"`
	SmsIntentTemplates []*SmsIntentTemplate   `protobuf:"bytes,2,rep,name=sms_intent_templates,json=smsIntentTemplates,proto3" json:"sms_intent_templates,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetSmsTemplateBySidRes) Reset() {
	*x = GetSmsTemplateBySidRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSmsTemplateBySidRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSmsTemplateBySidRes) ProtoMessage() {}

func (x *GetSmsTemplateBySidRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSmsTemplateBySidRes.ProtoReflect.Descriptor instead.
func (*GetSmsTemplateBySidRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{11}
}

func (x *GetSmsTemplateBySidRes) GetSmsTemplate() *SmsTemplate {
	if x != nil {
		return x.SmsTemplate
	}
	return nil
}

func (x *GetSmsTemplateBySidRes) GetSmsIntentTemplates() []*SmsIntentTemplate {
	if x != nil {
		return x.SmsIntentTemplates
	}
	return nil
}

type SmsIntentTemplate struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SmsIntentTemplateSid int64                  `protobuf:"varint,1,opt,name=sms_intent_template_sid,json=smsIntentTemplateSid,proto3" json:"sms_intent_template_sid,omitempty"`
	Name                 string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ActionKey            string                 `protobuf:"bytes,4,opt,name=action_key,json=actionKey,proto3" json:"action_key,omitempty"`
	ActionDetail         string                 `protobuf:"bytes,5,opt,name=action_detail,json=actionDetail,proto3" json:"action_detail,omitempty"`
	ActionTrigger        string                 `protobuf:"bytes,6,opt,name=action_trigger,json=actionTrigger,proto3" json:"action_trigger,omitempty"`
	Priority             int64                  `protobuf:"varint,7,opt,name=priority,proto3" json:"priority,omitempty"`
	LastUpdated          *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SmsIntentTemplate) Reset() {
	*x = SmsIntentTemplate{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmsIntentTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsIntentTemplate) ProtoMessage() {}

func (x *SmsIntentTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsIntentTemplate.ProtoReflect.Descriptor instead.
func (*SmsIntentTemplate) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{12}
}

func (x *SmsIntentTemplate) GetSmsIntentTemplateSid() int64 {
	if x != nil {
		return x.SmsIntentTemplateSid
	}
	return 0
}

func (x *SmsIntentTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SmsIntentTemplate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SmsIntentTemplate) GetActionKey() string {
	if x != nil {
		return x.ActionKey
	}
	return ""
}

func (x *SmsIntentTemplate) GetActionDetail() string {
	if x != nil {
		return x.ActionDetail
	}
	return ""
}

func (x *SmsIntentTemplate) GetActionTrigger() string {
	if x != nil {
		return x.ActionTrigger
	}
	return ""
}

func (x *SmsIntentTemplate) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *SmsIntentTemplate) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

type ListSmsIntentTemplatesReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSmsIntentTemplatesReq) Reset() {
	*x = ListSmsIntentTemplatesReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmsIntentTemplatesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmsIntentTemplatesReq) ProtoMessage() {}

func (x *ListSmsIntentTemplatesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmsIntentTemplatesReq.ProtoReflect.Descriptor instead.
func (*ListSmsIntentTemplatesReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{13}
}

type ListSmsIntentTemplatesRes struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SmsIntentTemplate []*SmsIntentTemplate   `protobuf:"bytes,1,rep,name=sms_intent_template,json=smsIntentTemplate,proto3" json:"sms_intent_template,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ListSmsIntentTemplatesRes) Reset() {
	*x = ListSmsIntentTemplatesRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmsIntentTemplatesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmsIntentTemplatesRes) ProtoMessage() {}

func (x *ListSmsIntentTemplatesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmsIntentTemplatesRes.ProtoReflect.Descriptor instead.
func (*ListSmsIntentTemplatesRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{14}
}

func (x *ListSmsIntentTemplatesRes) GetSmsIntentTemplate() []*SmsIntentTemplate {
	if x != nil {
		return x.SmsIntentTemplate
	}
	return nil
}

type UpdateSmsIntentTemplateRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSmsIntentTemplateRes) Reset() {
	*x = UpdateSmsIntentTemplateRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSmsIntentTemplateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSmsIntentTemplateRes) ProtoMessage() {}

func (x *UpdateSmsIntentTemplateRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSmsIntentTemplateRes.ProtoReflect.Descriptor instead.
func (*UpdateSmsIntentTemplateRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateSmsIntentTemplateRes) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type DeleteSmsIntentTemplateReq struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SmsIntentTemplateSid int64                  `protobuf:"varint,2,opt,name=sms_intent_template_sid,json=smsIntentTemplateSid,proto3" json:"sms_intent_template_sid,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *DeleteSmsIntentTemplateReq) Reset() {
	*x = DeleteSmsIntentTemplateReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSmsIntentTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSmsIntentTemplateReq) ProtoMessage() {}

func (x *DeleteSmsIntentTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSmsIntentTemplateReq.ProtoReflect.Descriptor instead.
func (*DeleteSmsIntentTemplateReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteSmsIntentTemplateReq) GetSmsIntentTemplateSid() int64 {
	if x != nil {
		return x.SmsIntentTemplateSid
	}
	return 0
}

type DeleteSmsIntentTemplateRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSmsIntentTemplateRes) Reset() {
	*x = DeleteSmsIntentTemplateRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSmsIntentTemplateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSmsIntentTemplateRes) ProtoMessage() {}

func (x *DeleteSmsIntentTemplateRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSmsIntentTemplateRes.ProtoReflect.Descriptor instead.
func (*DeleteSmsIntentTemplateRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteSmsIntentTemplateRes) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type CreateSmsIntentTemplateRes struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SmsIntentTemplateSid int64                  `protobuf:"varint,1,opt,name=sms_intent_template_sid,json=smsIntentTemplateSid,proto3" json:"sms_intent_template_sid,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CreateSmsIntentTemplateRes) Reset() {
	*x = CreateSmsIntentTemplateRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSmsIntentTemplateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSmsIntentTemplateRes) ProtoMessage() {}

func (x *CreateSmsIntentTemplateRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSmsIntentTemplateRes.ProtoReflect.Descriptor instead.
func (*CreateSmsIntentTemplateRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{18}
}

func (x *CreateSmsIntentTemplateRes) GetSmsIntentTemplateSid() int64 {
	if x != nil {
		return x.SmsIntentTemplateSid
	}
	return 0
}

type GetSmsIntentTemplateBySidReq struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SmsIntentTemplateSid int64                  `protobuf:"varint,2,opt,name=sms_intent_template_sid,json=smsIntentTemplateSid,proto3" json:"sms_intent_template_sid,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetSmsIntentTemplateBySidReq) Reset() {
	*x = GetSmsIntentTemplateBySidReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSmsIntentTemplateBySidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSmsIntentTemplateBySidReq) ProtoMessage() {}

func (x *GetSmsIntentTemplateBySidReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSmsIntentTemplateBySidReq.ProtoReflect.Descriptor instead.
func (*GetSmsIntentTemplateBySidReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{19}
}

func (x *GetSmsIntentTemplateBySidReq) GetSmsIntentTemplateSid() int64 {
	if x != nil {
		return x.SmsIntentTemplateSid
	}
	return 0
}

type SmsNumbers struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	SmsNumberSid  int64                   `protobuf:"varint,1,opt,name=sms_number_sid,json=smsNumberSid,proto3" json:"sms_number_sid,omitempty"`
	CountrySid    int64                   `protobuf:"varint,2,opt,name=country_sid,json=countrySid,proto3" json:"country_sid,omitempty"`
	Number        string                  `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`
	ProviderName  string                  `protobuf:"bytes,4,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	Notes         string                  `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
	IvrReference  *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=ivr_reference,json=ivrReference,proto3" json:"ivr_reference,omitempty"`
	ClientName    string                  `protobuf:"bytes,7,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	IsTollFree    bool                    `protobuf:"varint,8,opt,name=isTollFree,proto3" json:"isTollFree,omitempty"`
	SrcNumberType string                  `protobuf:"bytes,9,opt,name=src_number_type,json=srcNumberType,proto3" json:"src_number_type,omitempty"`
	LastUpdated   *timestamppb.Timestamp  `protobuf:"bytes,10,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SmsNumbers) Reset() {
	*x = SmsNumbers{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmsNumbers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsNumbers) ProtoMessage() {}

func (x *SmsNumbers) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsNumbers.ProtoReflect.Descriptor instead.
func (*SmsNumbers) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{20}
}

func (x *SmsNumbers) GetSmsNumberSid() int64 {
	if x != nil {
		return x.SmsNumberSid
	}
	return 0
}

func (x *SmsNumbers) GetCountrySid() int64 {
	if x != nil {
		return x.CountrySid
	}
	return 0
}

func (x *SmsNumbers) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *SmsNumbers) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *SmsNumbers) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *SmsNumbers) GetIvrReference() *wrapperspb.StringValue {
	if x != nil {
		return x.IvrReference
	}
	return nil
}

func (x *SmsNumbers) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *SmsNumbers) GetIsTollFree() bool {
	if x != nil {
		return x.IsTollFree
	}
	return false
}

func (x *SmsNumbers) GetSrcNumberType() string {
	if x != nil {
		return x.SrcNumberType
	}
	return ""
}

func (x *SmsNumbers) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

type ListSmsSourceNumbersReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSmsSourceNumbersReq) Reset() {
	*x = ListSmsSourceNumbersReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmsSourceNumbersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmsSourceNumbersReq) ProtoMessage() {}

func (x *ListSmsSourceNumbersReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmsSourceNumbersReq.ProtoReflect.Descriptor instead.
func (*ListSmsSourceNumbersReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{21}
}

type ListSmsSourceNumbersRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SmsNumbers    []*SmsNumbers          `protobuf:"bytes,1,rep,name=sms_numbers,json=smsNumbers,proto3" json:"sms_numbers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSmsSourceNumbersRes) Reset() {
	*x = ListSmsSourceNumbersRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmsSourceNumbersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmsSourceNumbersRes) ProtoMessage() {}

func (x *ListSmsSourceNumbersRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmsSourceNumbersRes.ProtoReflect.Descriptor instead.
func (*ListSmsSourceNumbersRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{22}
}

func (x *ListSmsSourceNumbersRes) GetSmsNumbers() []*SmsNumbers {
	if x != nil {
		return x.SmsNumbers
	}
	return nil
}

type UpdateSmsSourceNumberReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SmsNumberSid  int64                  `protobuf:"varint,1,opt,name=sms_number_sid,json=smsNumberSid,proto3" json:"sms_number_sid,omitempty"`
	CountrySid    int64                  `protobuf:"varint,2,opt,name=country_sid,json=countrySid,proto3" json:"country_sid,omitempty"`
	Number        string                 `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`
	ProviderName  string                 `protobuf:"bytes,4,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	Notes         string                 `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
	IvrReference  string                 `protobuf:"bytes,6,opt,name=ivr_reference,json=ivrReference,proto3" json:"ivr_reference,omitempty"`
	SrcNumberType string                 `protobuf:"bytes,7,opt,name=src_number_type,json=srcNumberType,proto3" json:"src_number_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSmsSourceNumberReq) Reset() {
	*x = UpdateSmsSourceNumberReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSmsSourceNumberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSmsSourceNumberReq) ProtoMessage() {}

func (x *UpdateSmsSourceNumberReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSmsSourceNumberReq.ProtoReflect.Descriptor instead.
func (*UpdateSmsSourceNumberReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateSmsSourceNumberReq) GetSmsNumberSid() int64 {
	if x != nil {
		return x.SmsNumberSid
	}
	return 0
}

func (x *UpdateSmsSourceNumberReq) GetCountrySid() int64 {
	if x != nil {
		return x.CountrySid
	}
	return 0
}

func (x *UpdateSmsSourceNumberReq) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *UpdateSmsSourceNumberReq) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *UpdateSmsSourceNumberReq) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *UpdateSmsSourceNumberReq) GetIvrReference() string {
	if x != nil {
		return x.IvrReference
	}
	return ""
}

func (x *UpdateSmsSourceNumberReq) GetSrcNumberType() string {
	if x != nil {
		return x.SrcNumberType
	}
	return ""
}

type UpdateSmsSourceNumberRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSmsSourceNumberRes) Reset() {
	*x = UpdateSmsSourceNumberRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSmsSourceNumberRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSmsSourceNumberRes) ProtoMessage() {}

func (x *UpdateSmsSourceNumberRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSmsSourceNumberRes.ProtoReflect.Descriptor instead.
func (*UpdateSmsSourceNumberRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateSmsSourceNumberRes) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type DeleteSmsSourceNumberReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SmsNumberSid  int64                  `protobuf:"varint,2,opt,name=sms_number_sid,json=smsNumberSid,proto3" json:"sms_number_sid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSmsSourceNumberReq) Reset() {
	*x = DeleteSmsSourceNumberReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSmsSourceNumberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSmsSourceNumberReq) ProtoMessage() {}

func (x *DeleteSmsSourceNumberReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSmsSourceNumberReq.ProtoReflect.Descriptor instead.
func (*DeleteSmsSourceNumberReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteSmsSourceNumberReq) GetSmsNumberSid() int64 {
	if x != nil {
		return x.SmsNumberSid
	}
	return 0
}

type DeleteSmsSourceNumberRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSmsSourceNumberRes) Reset() {
	*x = DeleteSmsSourceNumberRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSmsSourceNumberRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSmsSourceNumberRes) ProtoMessage() {}

func (x *DeleteSmsSourceNumberRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSmsSourceNumberRes.ProtoReflect.Descriptor instead.
func (*DeleteSmsSourceNumberRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteSmsSourceNumberRes) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type CreateSmsSourceNumberReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CountrySid    int64                  `protobuf:"varint,1,opt,name=country_sid,json=countrySid,proto3" json:"country_sid,omitempty"`
	Number        string                 `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
	ProviderName  string                 `protobuf:"bytes,3,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	Notes         string                 `protobuf:"bytes,4,opt,name=notes,proto3" json:"notes,omitempty"`
	IvrReference  string                 `protobuf:"bytes,5,opt,name=ivr_reference,json=ivrReference,proto3" json:"ivr_reference,omitempty"`
	SrcNumberType string                 `protobuf:"bytes,6,opt,name=src_number_type,json=srcNumberType,proto3" json:"src_number_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSmsSourceNumberReq) Reset() {
	*x = CreateSmsSourceNumberReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSmsSourceNumberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSmsSourceNumberReq) ProtoMessage() {}

func (x *CreateSmsSourceNumberReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSmsSourceNumberReq.ProtoReflect.Descriptor instead.
func (*CreateSmsSourceNumberReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{27}
}

func (x *CreateSmsSourceNumberReq) GetCountrySid() int64 {
	if x != nil {
		return x.CountrySid
	}
	return 0
}

func (x *CreateSmsSourceNumberReq) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *CreateSmsSourceNumberReq) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *CreateSmsSourceNumberReq) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *CreateSmsSourceNumberReq) GetIvrReference() string {
	if x != nil {
		return x.IvrReference
	}
	return ""
}

func (x *CreateSmsSourceNumberReq) GetSrcNumberType() string {
	if x != nil {
		return x.SrcNumberType
	}
	return ""
}

type CreateSmsSourceNumberRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SmsNumberSid  int64                  `protobuf:"varint,1,opt,name=sms_number_sid,json=smsNumberSid,proto3" json:"sms_number_sid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSmsSourceNumberRes) Reset() {
	*x = CreateSmsSourceNumberRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSmsSourceNumberRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSmsSourceNumberRes) ProtoMessage() {}

func (x *CreateSmsSourceNumberRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSmsSourceNumberRes.ProtoReflect.Descriptor instead.
func (*CreateSmsSourceNumberRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{28}
}

func (x *CreateSmsSourceNumberRes) GetSmsNumberSid() int64 {
	if x != nil {
		return x.SmsNumberSid
	}
	return 0
}

type GetSmsSourceNumberBySidReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SmsNumberSid  int64                  `protobuf:"varint,2,opt,name=sms_number_sid,json=smsNumberSid,proto3" json:"sms_number_sid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSmsSourceNumberBySidReq) Reset() {
	*x = GetSmsSourceNumberBySidReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSmsSourceNumberBySidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSmsSourceNumberBySidReq) ProtoMessage() {}

func (x *GetSmsSourceNumberBySidReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSmsSourceNumberBySidReq.ProtoReflect.Descriptor instead.
func (*GetSmsSourceNumberBySidReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{29}
}

func (x *GetSmsSourceNumberBySidReq) GetSmsNumberSid() int64 {
	if x != nil {
		return x.SmsNumberSid
	}
	return 0
}

type SendSmsNotificationReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ToPhoneNumArr []string               `protobuf:"bytes,3,rep,name=to_phone_num_arr,json=toPhoneNumArr,proto3" json:"to_phone_num_arr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendSmsNotificationReq) Reset() {
	*x = SendSmsNotificationReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendSmsNotificationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSmsNotificationReq) ProtoMessage() {}

func (x *SendSmsNotificationReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSmsNotificationReq.ProtoReflect.Descriptor instead.
func (*SendSmsNotificationReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{30}
}

func (x *SendSmsNotificationReq) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SendSmsNotificationReq) GetToPhoneNumArr() []string {
	if x != nil {
		return x.ToPhoneNumArr
	}
	return nil
}

type SendSmsNotificationRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      string                 `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendSmsNotificationRes) Reset() {
	*x = SendSmsNotificationRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendSmsNotificationRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSmsNotificationRes) ProtoMessage() {}

func (x *SendSmsNotificationRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSmsNotificationRes.ProtoReflect.Descriptor instead.
func (*SendSmsNotificationRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{31}
}

func (x *SendSmsNotificationRes) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type ListSmsGroupByFiltersReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SearchFrom    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=search_from,json=searchFrom,proto3" json:"search_from,omitempty"`
	SearchTo      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=search_to,json=searchTo,proto3" json:"search_to,omitempty"`
	Status        string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Name          string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSmsGroupByFiltersReq) Reset() {
	*x = ListSmsGroupByFiltersReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmsGroupByFiltersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmsGroupByFiltersReq) ProtoMessage() {}

func (x *ListSmsGroupByFiltersReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmsGroupByFiltersReq.ProtoReflect.Descriptor instead.
func (*ListSmsGroupByFiltersReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{32}
}

func (x *ListSmsGroupByFiltersReq) GetSearchFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.SearchFrom
	}
	return nil
}

func (x *ListSmsGroupByFiltersReq) GetSearchTo() *timestamppb.Timestamp {
	if x != nil {
		return x.SearchTo
	}
	return nil
}

func (x *ListSmsGroupByFiltersReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListSmsGroupByFiltersReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SmsGroupWithIntents struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SmsGroupInfoRes *SmsGroupInfo          `protobuf:"bytes,1,opt,name=sms_group_info_res,json=smsGroupInfoRes,proto3" json:"sms_group_info_res,omitempty"`
	SmsIntentGroups []*SmsIntentGroup      `protobuf:"bytes,2,rep,name=sms_intent_groups,json=smsIntentGroups,proto3" json:"sms_intent_groups,omitempty"`
	SmsMamSettings  *SmsMamSettings        `protobuf:"bytes,3,opt,name=sms_mam_settings,json=smsMamSettings,proto3" json:"sms_mam_settings,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SmsGroupWithIntents) Reset() {
	*x = SmsGroupWithIntents{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmsGroupWithIntents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsGroupWithIntents) ProtoMessage() {}

func (x *SmsGroupWithIntents) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsGroupWithIntents.ProtoReflect.Descriptor instead.
func (*SmsGroupWithIntents) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{33}
}

func (x *SmsGroupWithIntents) GetSmsGroupInfoRes() *SmsGroupInfo {
	if x != nil {
		return x.SmsGroupInfoRes
	}
	return nil
}

func (x *SmsGroupWithIntents) GetSmsIntentGroups() []*SmsIntentGroup {
	if x != nil {
		return x.SmsIntentGroups
	}
	return nil
}

func (x *SmsGroupWithIntents) GetSmsMamSettings() *SmsMamSettings {
	if x != nil {
		return x.SmsMamSettings
	}
	return nil
}

type ListSmsGroupByFiltersRes struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	SmsGroupWithIntents []*SmsGroupWithIntents `protobuf:"bytes,1,rep,name=sms_group_with_intents,json=smsGroupWithIntents,proto3" json:"sms_group_with_intents,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ListSmsGroupByFiltersRes) Reset() {
	*x = ListSmsGroupByFiltersRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmsGroupByFiltersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmsGroupByFiltersRes) ProtoMessage() {}

func (x *ListSmsGroupByFiltersRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmsGroupByFiltersRes.ProtoReflect.Descriptor instead.
func (*ListSmsGroupByFiltersRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{34}
}

func (x *ListSmsGroupByFiltersRes) GetSmsGroupWithIntents() []*SmsGroupWithIntents {
	if x != nil {
		return x.SmsGroupWithIntents
	}
	return nil
}

type ListSmsGroupsByGroupSidsReq struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SmsGroupSidsArr []int64                `protobuf:"varint,2,rep,packed,name=sms_group_sids_arr,json=smsGroupSidsArr,proto3" json:"sms_group_sids_arr,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ListSmsGroupsByGroupSidsReq) Reset() {
	*x = ListSmsGroupsByGroupSidsReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmsGroupsByGroupSidsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmsGroupsByGroupSidsReq) ProtoMessage() {}

func (x *ListSmsGroupsByGroupSidsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmsGroupsByGroupSidsReq.ProtoReflect.Descriptor instead.
func (*ListSmsGroupsByGroupSidsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{35}
}

func (x *ListSmsGroupsByGroupSidsReq) GetSmsGroupSidsArr() []int64 {
	if x != nil {
		return x.SmsGroupSidsArr
	}
	return nil
}

type ListSmsGroupsByGroupSidsRes struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	SmsGroupWithIntents []*SmsGroupWithIntents `protobuf:"bytes,1,rep,name=sms_group_with_intents,json=smsGroupWithIntents,proto3" json:"sms_group_with_intents,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ListSmsGroupsByGroupSidsRes) Reset() {
	*x = ListSmsGroupsByGroupSidsRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmsGroupsByGroupSidsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmsGroupsByGroupSidsRes) ProtoMessage() {}

func (x *ListSmsGroupsByGroupSidsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmsGroupsByGroupSidsRes.ProtoReflect.Descriptor instead.
func (*ListSmsGroupsByGroupSidsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{36}
}

func (x *ListSmsGroupsByGroupSidsRes) GetSmsGroupWithIntents() []*SmsGroupWithIntents {
	if x != nil {
		return x.SmsGroupWithIntents
	}
	return nil
}

type SmsGroupInfo struct {
	state              protoimpl.MessageState  `protogen:"open.v1"`
	SmsGroupSid        int64                   `protobuf:"varint,1,opt,name=sms_group_sid,json=smsGroupSid,proto3" json:"sms_group_sid,omitempty"`
	CountrySid         int64                   `protobuf:"varint,2,opt,name=country_sid,json=countrySid,proto3" json:"country_sid,omitempty"`
	SmsMessageSid      int64                   `protobuf:"varint,3,opt,name=sms_message_sid,json=smsMessageSid,proto3" json:"sms_message_sid,omitempty"`
	Name               string                  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	StartTime          *timestamppb.Timestamp  `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	StopTime           *timestamppb.Timestamp  `protobuf:"bytes,6,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`
	SendsPerMinute     int64                   `protobuf:"varint,7,opt,name=sends_per_minute,json=sendsPerMinute,proto3" json:"sends_per_minute,omitempty"`
	Status             int64                   `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	TotalCost          float64                 `protobuf:"fixed64,9,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	CallerIds          []string                `protobuf:"bytes,10,rep,name=caller_ids,json=callerIds,proto3" json:"caller_ids,omitempty"`
	ClientName         string                  `protobuf:"bytes,11,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	TotalScheduled     int64                   `protobuf:"varint,12,opt,name=total_scheduled,json=totalScheduled,proto3" json:"total_scheduled,omitempty"`
	TotalCompleted     int64                   `protobuf:"varint,13,opt,name=total_completed,json=totalCompleted,proto3" json:"total_completed,omitempty"`
	ContactGroupSidStr *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=contact_group_sid_str,json=contactGroupSidStr,proto3" json:"contact_group_sid_str,omitempty"`
	ContactGroupSid    int64                   `protobuf:"varint,15,opt,name=contact_group_sid,json=contactGroupSid,proto3" json:"contact_group_sid,omitempty"`
	PhoneNumCol        *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=phone_num_col,json=phoneNumCol,proto3" json:"phone_num_col,omitempty"`
	UseTzRestrictions  *wrapperspb.StringValue `protobuf:"bytes,17,opt,name=use_tz_restrictions,json=useTzRestrictions,proto3" json:"use_tz_restrictions,omitempty"`
	MessageCount       int32                   `protobuf:"varint,18,opt,name=message_count,json=messageCount,proto3" json:"message_count,omitempty"`
	TodaysMessageCount int32                   `protobuf:"varint,19,opt,name=todays_message_count,json=todaysMessageCount,proto3" json:"todays_message_count,omitempty"`
	DateCreated        *timestamppb.Timestamp  `protobuf:"bytes,20,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SmsGroupInfo) Reset() {
	*x = SmsGroupInfo{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmsGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsGroupInfo) ProtoMessage() {}

func (x *SmsGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsGroupInfo.ProtoReflect.Descriptor instead.
func (*SmsGroupInfo) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{37}
}

func (x *SmsGroupInfo) GetSmsGroupSid() int64 {
	if x != nil {
		return x.SmsGroupSid
	}
	return 0
}

func (x *SmsGroupInfo) GetCountrySid() int64 {
	if x != nil {
		return x.CountrySid
	}
	return 0
}

func (x *SmsGroupInfo) GetSmsMessageSid() int64 {
	if x != nil {
		return x.SmsMessageSid
	}
	return 0
}

func (x *SmsGroupInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SmsGroupInfo) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *SmsGroupInfo) GetStopTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StopTime
	}
	return nil
}

func (x *SmsGroupInfo) GetSendsPerMinute() int64 {
	if x != nil {
		return x.SendsPerMinute
	}
	return 0
}

func (x *SmsGroupInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SmsGroupInfo) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *SmsGroupInfo) GetCallerIds() []string {
	if x != nil {
		return x.CallerIds
	}
	return nil
}

func (x *SmsGroupInfo) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *SmsGroupInfo) GetTotalScheduled() int64 {
	if x != nil {
		return x.TotalScheduled
	}
	return 0
}

func (x *SmsGroupInfo) GetTotalCompleted() int64 {
	if x != nil {
		return x.TotalCompleted
	}
	return 0
}

func (x *SmsGroupInfo) GetContactGroupSidStr() *wrapperspb.StringValue {
	if x != nil {
		return x.ContactGroupSidStr
	}
	return nil
}

func (x *SmsGroupInfo) GetContactGroupSid() int64 {
	if x != nil {
		return x.ContactGroupSid
	}
	return 0
}

func (x *SmsGroupInfo) GetPhoneNumCol() *wrapperspb.StringValue {
	if x != nil {
		return x.PhoneNumCol
	}
	return nil
}

func (x *SmsGroupInfo) GetUseTzRestrictions() *wrapperspb.StringValue {
	if x != nil {
		return x.UseTzRestrictions
	}
	return nil
}

func (x *SmsGroupInfo) GetMessageCount() int32 {
	if x != nil {
		return x.MessageCount
	}
	return 0
}

func (x *SmsGroupInfo) GetTodaysMessageCount() int32 {
	if x != nil {
		return x.TodaysMessageCount
	}
	return 0
}

func (x *SmsGroupInfo) GetDateCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCreated
	}
	return nil
}

type ListSmsTasksByGroupSidsReq struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SmsGroupSidsArr []int64                `protobuf:"varint,2,rep,packed,name=sms_group_sids_arr,json=smsGroupSidsArr,proto3" json:"sms_group_sids_arr,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ListSmsTasksByGroupSidsReq) Reset() {
	*x = ListSmsTasksByGroupSidsReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmsTasksByGroupSidsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmsTasksByGroupSidsReq) ProtoMessage() {}

func (x *ListSmsTasksByGroupSidsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmsTasksByGroupSidsReq.ProtoReflect.Descriptor instead.
func (*ListSmsTasksByGroupSidsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{38}
}

func (x *ListSmsTasksByGroupSidsReq) GetSmsGroupSidsArr() []int64 {
	if x != nil {
		return x.SmsGroupSidsArr
	}
	return nil
}

type ListSmsTasksByGroupSidsRes struct {
	state                protoimpl.MessageState  `protogen:"open.v1"`
	SmsTaskInfoWithReply []*SmsTaskInfoWithReply `protobuf:"bytes,1,rep,name=sms_task_info_with_reply,json=smsTaskInfoWithReply,proto3" json:"sms_task_info_with_reply,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ListSmsTasksByGroupSidsRes) Reset() {
	*x = ListSmsTasksByGroupSidsRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmsTasksByGroupSidsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmsTasksByGroupSidsRes) ProtoMessage() {}

func (x *ListSmsTasksByGroupSidsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmsTasksByGroupSidsRes.ProtoReflect.Descriptor instead.
func (*ListSmsTasksByGroupSidsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{39}
}

func (x *ListSmsTasksByGroupSidsRes) GetSmsTaskInfoWithReply() []*SmsTaskInfoWithReply {
	if x != nil {
		return x.SmsTaskInfoWithReply
	}
	return nil
}

type ListSmsTasksWithDetailedStatusReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SmsGroupSid   int64                  `protobuf:"varint,2,opt,name=sms_group_sid,json=smsGroupSid,proto3" json:"sms_group_sid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSmsTasksWithDetailedStatusReq) Reset() {
	*x = ListSmsTasksWithDetailedStatusReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmsTasksWithDetailedStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmsTasksWithDetailedStatusReq) ProtoMessage() {}

func (x *ListSmsTasksWithDetailedStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmsTasksWithDetailedStatusReq.ProtoReflect.Descriptor instead.
func (*ListSmsTasksWithDetailedStatusReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{40}
}

func (x *ListSmsTasksWithDetailedStatusReq) GetSmsGroupSid() int64 {
	if x != nil {
		return x.SmsGroupSid
	}
	return 0
}

type ListSmsTasksWithDetailedStatusRes struct {
	state                protoimpl.MessageState  `protogen:"open.v1"`
	SmsTaskInfoWithReply []*SmsTaskInfoWithReply `protobuf:"bytes,1,rep,name=sms_task_info_with_reply,json=smsTaskInfoWithReply,proto3" json:"sms_task_info_with_reply,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ListSmsTasksWithDetailedStatusRes) Reset() {
	*x = ListSmsTasksWithDetailedStatusRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmsTasksWithDetailedStatusRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmsTasksWithDetailedStatusRes) ProtoMessage() {}

func (x *ListSmsTasksWithDetailedStatusRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmsTasksWithDetailedStatusRes.ProtoReflect.Descriptor instead.
func (*ListSmsTasksWithDetailedStatusRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{41}
}

func (x *ListSmsTasksWithDetailedStatusRes) GetSmsTaskInfoWithReply() []*SmsTaskInfoWithReply {
	if x != nil {
		return x.SmsTaskInfoWithReply
	}
	return nil
}

type SmsTaskInfoWithReply struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SmsTaskInfoRes     *SmsTaskInfoRes        `protobuf:"bytes,1,opt,name=sms_task_info_res,json=smsTaskInfoRes,proto3" json:"sms_task_info_res,omitempty"`
	SmsReceivedReplies []*SmsReceivedReplies  `protobuf:"bytes,2,rep,name=sms_received_replies,json=smsReceivedReplies,proto3" json:"sms_received_replies,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SmsTaskInfoWithReply) Reset() {
	*x = SmsTaskInfoWithReply{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmsTaskInfoWithReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsTaskInfoWithReply) ProtoMessage() {}

func (x *SmsTaskInfoWithReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsTaskInfoWithReply.ProtoReflect.Descriptor instead.
func (*SmsTaskInfoWithReply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{42}
}

func (x *SmsTaskInfoWithReply) GetSmsTaskInfoRes() *SmsTaskInfoRes {
	if x != nil {
		return x.SmsTaskInfoRes
	}
	return nil
}

func (x *SmsTaskInfoWithReply) GetSmsReceivedReplies() []*SmsReceivedReplies {
	if x != nil {
		return x.SmsReceivedReplies
	}
	return nil
}

type SmsTaskInfoRes struct {
	state                 protoimpl.MessageState  `protogen:"open.v1"`
	SmsTaskSid            int64                   `protobuf:"varint,1,opt,name=sms_task_sid,json=smsTaskSid,proto3" json:"sms_task_sid,omitempty"`
	SmsGroupSid           int64                   `protobuf:"varint,2,opt,name=sms_group_sid,json=smsGroupSid,proto3" json:"sms_group_sid,omitempty"`
	DeliveryStatus        int64                   `protobuf:"varint,3,opt,name=delivery_status,json=deliveryStatus,proto3" json:"delivery_status,omitempty"`
	DeliveryStatusMessage string                  `protobuf:"bytes,4,opt,name=delivery_status_message,json=deliveryStatusMessage,proto3" json:"delivery_status_message,omitempty"`
	Data                  string                  `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Cost                  float64                 `protobuf:"fixed64,6,opt,name=cost,proto3" json:"cost,omitempty"`
	MsgUuid               *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=msg_uuid,json=msgUuid,proto3" json:"msg_uuid,omitempty"`
	MsgTime               *timestamppb.Timestamp  `protobuf:"bytes,8,opt,name=msg_time,json=msgTime,proto3" json:"msg_time,omitempty"`
	Status                int64                   `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	PhoneNumCol           *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=phone_num_col,json=phoneNumCol,proto3" json:"phone_num_col,omitempty"`
	Units                 int64                   `protobuf:"varint,11,opt,name=units,proto3" json:"units,omitempty"`
	SmsTaskParent         *wrapperspb.Int64Value  `protobuf:"bytes,12,opt,name=sms_task_parent,json=smsTaskParent,proto3" json:"sms_task_parent,omitempty"`
	MamAgentResponse      *MamAgentResponse       `protobuf:"bytes,13,opt,name=mam_agent_response,json=mamAgentResponse,proto3" json:"mam_agent_response,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SmsTaskInfoRes) Reset() {
	*x = SmsTaskInfoRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmsTaskInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsTaskInfoRes) ProtoMessage() {}

func (x *SmsTaskInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsTaskInfoRes.ProtoReflect.Descriptor instead.
func (*SmsTaskInfoRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{43}
}

func (x *SmsTaskInfoRes) GetSmsTaskSid() int64 {
	if x != nil {
		return x.SmsTaskSid
	}
	return 0
}

func (x *SmsTaskInfoRes) GetSmsGroupSid() int64 {
	if x != nil {
		return x.SmsGroupSid
	}
	return 0
}

func (x *SmsTaskInfoRes) GetDeliveryStatus() int64 {
	if x != nil {
		return x.DeliveryStatus
	}
	return 0
}

func (x *SmsTaskInfoRes) GetDeliveryStatusMessage() string {
	if x != nil {
		return x.DeliveryStatusMessage
	}
	return ""
}

func (x *SmsTaskInfoRes) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *SmsTaskInfoRes) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *SmsTaskInfoRes) GetMsgUuid() *wrapperspb.StringValue {
	if x != nil {
		return x.MsgUuid
	}
	return nil
}

func (x *SmsTaskInfoRes) GetMsgTime() *timestamppb.Timestamp {
	if x != nil {
		return x.MsgTime
	}
	return nil
}

func (x *SmsTaskInfoRes) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SmsTaskInfoRes) GetPhoneNumCol() *wrapperspb.StringValue {
	if x != nil {
		return x.PhoneNumCol
	}
	return nil
}

func (x *SmsTaskInfoRes) GetUnits() int64 {
	if x != nil {
		return x.Units
	}
	return 0
}

func (x *SmsTaskInfoRes) GetSmsTaskParent() *wrapperspb.Int64Value {
	if x != nil {
		return x.SmsTaskParent
	}
	return nil
}

func (x *SmsTaskInfoRes) GetMamAgentResponse() *MamAgentResponse {
	if x != nil {
		return x.MamAgentResponse
	}
	return nil
}

type SmsReceivedReplies struct {
	state                 protoimpl.MessageState  `protogen:"open.v1"`
	SmsReceivedRepliesSid int64                   `protobuf:"varint,1,opt,name=sms_received_replies_sid,json=smsReceivedRepliesSid,proto3" json:"sms_received_replies_sid,omitempty"`
	SmsTaskSid            int64                   `protobuf:"varint,2,opt,name=sms_task_sid,json=smsTaskSid,proto3" json:"sms_task_sid,omitempty"`
	SrcNumber             string                  `protobuf:"bytes,3,opt,name=src_number,json=srcNumber,proto3" json:"src_number,omitempty"`
	DstNumber             string                  `protobuf:"bytes,4,opt,name=dst_number,json=dstNumber,proto3" json:"dst_number,omitempty"`
	MsgUuid               string                  `protobuf:"bytes,5,opt,name=msg_uuid,json=msgUuid,proto3" json:"msg_uuid,omitempty"`
	ReceivedReply         string                  `protobuf:"bytes,6,opt,name=received_reply,json=receivedReply,proto3" json:"received_reply,omitempty"`
	ReceivedTime          *timestamppb.Timestamp  `protobuf:"bytes,7,opt,name=received_time,json=receivedTime,proto3" json:"received_time,omitempty"`
	AnalysisReport        string                  `protobuf:"bytes,8,opt,name=analysis_report,json=analysisReport,proto3" json:"analysis_report,omitempty"`
	InboundSmsGroupId     string                  `protobuf:"bytes,9,opt,name=inbound_sms_group_id,json=inboundSmsGroupId,proto3" json:"inbound_sms_group_id,omitempty"`
	Cost                  float64                 `protobuf:"fixed64,10,opt,name=cost,proto3" json:"cost,omitempty"`
	Status                commons.SMSIBTaskStatus `protobuf:"varint,11,opt,name=status,proto3,enum=api.commons.SMSIBTaskStatus" json:"status,omitempty"`
	Units                 int64                   `protobuf:"varint,12,opt,name=units,proto3" json:"units,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SmsReceivedReplies) Reset() {
	*x = SmsReceivedReplies{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmsReceivedReplies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsReceivedReplies) ProtoMessage() {}

func (x *SmsReceivedReplies) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsReceivedReplies.ProtoReflect.Descriptor instead.
func (*SmsReceivedReplies) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{44}
}

func (x *SmsReceivedReplies) GetSmsReceivedRepliesSid() int64 {
	if x != nil {
		return x.SmsReceivedRepliesSid
	}
	return 0
}

func (x *SmsReceivedReplies) GetSmsTaskSid() int64 {
	if x != nil {
		return x.SmsTaskSid
	}
	return 0
}

func (x *SmsReceivedReplies) GetSrcNumber() string {
	if x != nil {
		return x.SrcNumber
	}
	return ""
}

func (x *SmsReceivedReplies) GetDstNumber() string {
	if x != nil {
		return x.DstNumber
	}
	return ""
}

func (x *SmsReceivedReplies) GetMsgUuid() string {
	if x != nil {
		return x.MsgUuid
	}
	return ""
}

func (x *SmsReceivedReplies) GetReceivedReply() string {
	if x != nil {
		return x.ReceivedReply
	}
	return ""
}

func (x *SmsReceivedReplies) GetReceivedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivedTime
	}
	return nil
}

func (x *SmsReceivedReplies) GetAnalysisReport() string {
	if x != nil {
		return x.AnalysisReport
	}
	return ""
}

func (x *SmsReceivedReplies) GetInboundSmsGroupId() string {
	if x != nil {
		return x.InboundSmsGroupId
	}
	return ""
}

func (x *SmsReceivedReplies) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *SmsReceivedReplies) GetStatus() commons.SMSIBTaskStatus {
	if x != nil {
		return x.Status
	}
	return commons.SMSIBTaskStatus(0)
}

func (x *SmsReceivedReplies) GetUnits() int64 {
	if x != nil {
		return x.Units
	}
	return 0
}

type UpdateSmsGroupRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSmsGroupRes) Reset() {
	*x = UpdateSmsGroupRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSmsGroupRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSmsGroupRes) ProtoMessage() {}

func (x *UpdateSmsGroupRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSmsGroupRes.ProtoReflect.Descriptor instead.
func (*UpdateSmsGroupRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{45}
}

func (x *UpdateSmsGroupRes) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ScheduleSmsReq struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SmsTemplateSid       int64                  `protobuf:"varint,1,opt,name=sms_template_sid,json=smsTemplateSid,proto3" json:"sms_template_sid,omitempty"`
	InitialPace          int64                  `protobuf:"varint,2,opt,name=initial_pace,json=initialPace,proto3" json:"initial_pace,omitempty"`
	SelectedPhoneCol     string                 `protobuf:"bytes,3,opt,name=selected_phone_col,json=selectedPhoneCol,proto3" json:"selected_phone_col,omitempty"`
	SourceNumber         string                 `protobuf:"bytes,4,opt,name=source_number,json=sourceNumber,proto3" json:"source_number,omitempty"`
	CountrySid           int64                  `protobuf:"varint,5,opt,name=country_sid,json=countrySid,proto3" json:"country_sid,omitempty"`
	TimezoneRestrictions bool                   `protobuf:"varint,6,opt,name=timezone_restrictions,json=timezoneRestrictions,proto3" json:"timezone_restrictions,omitempty"`
	GroupName            string                 `protobuf:"bytes,7,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	ContactGroupSid      int64                  `protobuf:"varint,8,opt,name=contact_group_sid,json=contactGroupSid,proto3" json:"contact_group_sid,omitempty"`
	StartTime            *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	StopTime             *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`
	SelectedMamHuntGroup string                 `protobuf:"bytes,11,opt,name=selected_mam_hunt_group,json=selectedMamHuntGroup,proto3" json:"selected_mam_hunt_group,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ScheduleSmsReq) Reset() {
	*x = ScheduleSmsReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleSmsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleSmsReq) ProtoMessage() {}

func (x *ScheduleSmsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleSmsReq.ProtoReflect.Descriptor instead.
func (*ScheduleSmsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{46}
}

func (x *ScheduleSmsReq) GetSmsTemplateSid() int64 {
	if x != nil {
		return x.SmsTemplateSid
	}
	return 0
}

func (x *ScheduleSmsReq) GetInitialPace() int64 {
	if x != nil {
		return x.InitialPace
	}
	return 0
}

func (x *ScheduleSmsReq) GetSelectedPhoneCol() string {
	if x != nil {
		return x.SelectedPhoneCol
	}
	return ""
}

func (x *ScheduleSmsReq) GetSourceNumber() string {
	if x != nil {
		return x.SourceNumber
	}
	return ""
}

func (x *ScheduleSmsReq) GetCountrySid() int64 {
	if x != nil {
		return x.CountrySid
	}
	return 0
}

func (x *ScheduleSmsReq) GetTimezoneRestrictions() bool {
	if x != nil {
		return x.TimezoneRestrictions
	}
	return false
}

func (x *ScheduleSmsReq) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *ScheduleSmsReq) GetContactGroupSid() int64 {
	if x != nil {
		return x.ContactGroupSid
	}
	return 0
}

func (x *ScheduleSmsReq) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ScheduleSmsReq) GetStopTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StopTime
	}
	return nil
}

func (x *ScheduleSmsReq) GetSelectedMamHuntGroup() string {
	if x != nil {
		return x.SelectedMamHuntGroup
	}
	return ""
}

type ScheduleSmsRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SmsGroupSid   int64                  `protobuf:"varint,1,opt,name=sms_group_sid,json=smsGroupSid,proto3" json:"sms_group_sid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleSmsRes) Reset() {
	*x = ScheduleSmsRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleSmsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleSmsRes) ProtoMessage() {}

func (x *ScheduleSmsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleSmsRes.ProtoReflect.Descriptor instead.
func (*ScheduleSmsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{47}
}

func (x *ScheduleSmsRes) GetSmsGroupSid() int64 {
	if x != nil {
		return x.SmsGroupSid
	}
	return 0
}

type ResendUnconnectedSmsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SmsGroupSid   int64                  `protobuf:"varint,1,opt,name=sms_group_sid,json=smsGroupSid,proto3" json:"sms_group_sid,omitempty"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	StopTime      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResendUnconnectedSmsReq) Reset() {
	*x = ResendUnconnectedSmsReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResendUnconnectedSmsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendUnconnectedSmsReq) ProtoMessage() {}

func (x *ResendUnconnectedSmsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendUnconnectedSmsReq.ProtoReflect.Descriptor instead.
func (*ResendUnconnectedSmsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{48}
}

func (x *ResendUnconnectedSmsReq) GetSmsGroupSid() int64 {
	if x != nil {
		return x.SmsGroupSid
	}
	return 0
}

func (x *ResendUnconnectedSmsReq) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ResendUnconnectedSmsReq) GetStopTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StopTime
	}
	return nil
}

type ResendUnconnectedSmsRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResendUnconnectedSmsRes) Reset() {
	*x = ResendUnconnectedSmsRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResendUnconnectedSmsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendUnconnectedSmsRes) ProtoMessage() {}

func (x *ResendUnconnectedSmsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendUnconnectedSmsRes.ProtoReflect.Descriptor instead.
func (*ResendUnconnectedSmsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{49}
}

func (x *ResendUnconnectedSmsRes) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type SmsActivitySearchReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ToNumber      string                 `protobuf:"bytes,1,opt,name=to_number,json=toNumber,proto3" json:"to_number,omitempty"`
	SrcNumber     string                 `protobuf:"bytes,2,opt,name=src_number,json=srcNumber,proto3" json:"src_number,omitempty"`
	FromDate      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
	EntireHistory bool                   `protobuf:"varint,5,opt,name=entire_history,json=entireHistory,proto3" json:"entire_history,omitempty"`
	SentOnly      bool                   `protobuf:"varint,6,opt,name=sent_only,json=sentOnly,proto3" json:"sent_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SmsActivitySearchReq) Reset() {
	*x = SmsActivitySearchReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmsActivitySearchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsActivitySearchReq) ProtoMessage() {}

func (x *SmsActivitySearchReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsActivitySearchReq.ProtoReflect.Descriptor instead.
func (*SmsActivitySearchReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{50}
}

func (x *SmsActivitySearchReq) GetToNumber() string {
	if x != nil {
		return x.ToNumber
	}
	return ""
}

func (x *SmsActivitySearchReq) GetSrcNumber() string {
	if x != nil {
		return x.SrcNumber
	}
	return ""
}

func (x *SmsActivitySearchReq) GetFromDate() *timestamppb.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *SmsActivitySearchReq) GetToDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

func (x *SmsActivitySearchReq) GetEntireHistory() bool {
	if x != nil {
		return x.EntireHistory
	}
	return false
}

func (x *SmsActivitySearchReq) GetSentOnly() bool {
	if x != nil {
		return x.SentOnly
	}
	return false
}

type SmsActivitySearchRes struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	SmsGroupWithIntents []*SmsGroupWithIntents `protobuf:"bytes,1,rep,name=sms_group_with_intents,json=smsGroupWithIntents,proto3" json:"sms_group_with_intents,omitempty"`
	SmsTaskInfoRes      []*SmsTaskInfoRes      `protobuf:"bytes,2,rep,name=sms_task_info_res,json=smsTaskInfoRes,proto3" json:"sms_task_info_res,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SmsActivitySearchRes) Reset() {
	*x = SmsActivitySearchRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmsActivitySearchRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsActivitySearchRes) ProtoMessage() {}

func (x *SmsActivitySearchRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsActivitySearchRes.ProtoReflect.Descriptor instead.
func (*SmsActivitySearchRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{51}
}

func (x *SmsActivitySearchRes) GetSmsGroupWithIntents() []*SmsGroupWithIntents {
	if x != nil {
		return x.SmsGroupWithIntents
	}
	return nil
}

func (x *SmsActivitySearchRes) GetSmsTaskInfoRes() []*SmsTaskInfoRes {
	if x != nil {
		return x.SmsTaskInfoRes
	}
	return nil
}

type InboundSmsTemplate struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	InboundSmsTemplateId string                 `protobuf:"bytes,1,opt,name=inbound_sms_template_id,json=inboundSmsTemplateId,proto3" json:"inbound_sms_template_id,omitempty"`
	SmsNumberSid         int64                  `protobuf:"varint,2,opt,name=sms_number_sid,json=smsNumberSid,proto3" json:"sms_number_sid,omitempty"`
	Name                 string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ReportSettings       *ReportSettings        `protobuf:"bytes,4,opt,name=report_settings,json=reportSettings,proto3" json:"report_settings,omitempty"`
	LastUpdated          *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *InboundSmsTemplate) Reset() {
	*x = InboundSmsTemplate{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InboundSmsTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboundSmsTemplate) ProtoMessage() {}

func (x *InboundSmsTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboundSmsTemplate.ProtoReflect.Descriptor instead.
func (*InboundSmsTemplate) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{52}
}

func (x *InboundSmsTemplate) GetInboundSmsTemplateId() string {
	if x != nil {
		return x.InboundSmsTemplateId
	}
	return ""
}

func (x *InboundSmsTemplate) GetSmsNumberSid() int64 {
	if x != nil {
		return x.SmsNumberSid
	}
	return 0
}

func (x *InboundSmsTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InboundSmsTemplate) GetReportSettings() *ReportSettings {
	if x != nil {
		return x.ReportSettings
	}
	return nil
}

func (x *InboundSmsTemplate) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

type ListInboundSmsTemplatesReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListInboundSmsTemplatesReq) Reset() {
	*x = ListInboundSmsTemplatesReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInboundSmsTemplatesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInboundSmsTemplatesReq) ProtoMessage() {}

func (x *ListInboundSmsTemplatesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInboundSmsTemplatesReq.ProtoReflect.Descriptor instead.
func (*ListInboundSmsTemplatesReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{53}
}

type ListInboundSmsTemplatesRes struct {
	state                         protoimpl.MessageState           `protogen:"open.v1"`
	InboundSmsTemplateWithIntents []*InboundSmsTemplateWithIntents `protobuf:"bytes,1,rep,name=inbound_sms_template_with_intents,json=inboundSmsTemplateWithIntents,proto3" json:"inbound_sms_template_with_intents,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *ListInboundSmsTemplatesRes) Reset() {
	*x = ListInboundSmsTemplatesRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInboundSmsTemplatesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInboundSmsTemplatesRes) ProtoMessage() {}

func (x *ListInboundSmsTemplatesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInboundSmsTemplatesRes.ProtoReflect.Descriptor instead.
func (*ListInboundSmsTemplatesRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{54}
}

func (x *ListInboundSmsTemplatesRes) GetInboundSmsTemplateWithIntents() []*InboundSmsTemplateWithIntents {
	if x != nil {
		return x.InboundSmsTemplateWithIntents
	}
	return nil
}

type InboundSmsTemplateWithIntents struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	InboundSmsTemplate *InboundSmsTemplate    `protobuf:"bytes,1,opt,name=inbound_sms_template,json=inboundSmsTemplate,proto3" json:"inbound_sms_template,omitempty"`
	SmsIntentTemplates []*SmsIntentTemplate   `protobuf:"bytes,2,rep,name=sms_intent_templates,json=smsIntentTemplates,proto3" json:"sms_intent_templates,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *InboundSmsTemplateWithIntents) Reset() {
	*x = InboundSmsTemplateWithIntents{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InboundSmsTemplateWithIntents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboundSmsTemplateWithIntents) ProtoMessage() {}

func (x *InboundSmsTemplateWithIntents) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboundSmsTemplateWithIntents.ProtoReflect.Descriptor instead.
func (*InboundSmsTemplateWithIntents) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{55}
}

func (x *InboundSmsTemplateWithIntents) GetInboundSmsTemplate() *InboundSmsTemplate {
	if x != nil {
		return x.InboundSmsTemplate
	}
	return nil
}

func (x *InboundSmsTemplateWithIntents) GetSmsIntentTemplates() []*SmsIntentTemplate {
	if x != nil {
		return x.SmsIntentTemplates
	}
	return nil
}

type UpdateInboundSmsTemplateReq struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	InboundSmsTemplateId string                 `protobuf:"bytes,1,opt,name=inbound_sms_template_id,json=inboundSmsTemplateId,proto3" json:"inbound_sms_template_id,omitempty"`
	SmsNumberSid         int64                  `protobuf:"varint,2,opt,name=sms_number_sid,json=smsNumberSid,proto3" json:"sms_number_sid,omitempty"`
	Name                 string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	SmsIntentTemplateSid []int64                `protobuf:"varint,6,rep,packed,name=sms_intent_template_sid,json=smsIntentTemplateSid,proto3" json:"sms_intent_template_sid,omitempty"`
	ReportSettings       *ReportSettings        `protobuf:"bytes,7,opt,name=report_settings,json=reportSettings,proto3" json:"report_settings,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *UpdateInboundSmsTemplateReq) Reset() {
	*x = UpdateInboundSmsTemplateReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateInboundSmsTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInboundSmsTemplateReq) ProtoMessage() {}

func (x *UpdateInboundSmsTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInboundSmsTemplateReq.ProtoReflect.Descriptor instead.
func (*UpdateInboundSmsTemplateReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{56}
}

func (x *UpdateInboundSmsTemplateReq) GetInboundSmsTemplateId() string {
	if x != nil {
		return x.InboundSmsTemplateId
	}
	return ""
}

func (x *UpdateInboundSmsTemplateReq) GetSmsNumberSid() int64 {
	if x != nil {
		return x.SmsNumberSid
	}
	return 0
}

func (x *UpdateInboundSmsTemplateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateInboundSmsTemplateReq) GetSmsIntentTemplateSid() []int64 {
	if x != nil {
		return x.SmsIntentTemplateSid
	}
	return nil
}

func (x *UpdateInboundSmsTemplateReq) GetReportSettings() *ReportSettings {
	if x != nil {
		return x.ReportSettings
	}
	return nil
}

type UpdateInboundSmsTemplateRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateInboundSmsTemplateRes) Reset() {
	*x = UpdateInboundSmsTemplateRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateInboundSmsTemplateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInboundSmsTemplateRes) ProtoMessage() {}

func (x *UpdateInboundSmsTemplateRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInboundSmsTemplateRes.ProtoReflect.Descriptor instead.
func (*UpdateInboundSmsTemplateRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{57}
}

func (x *UpdateInboundSmsTemplateRes) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type DeleteInboundSmsTemplateReq struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	InboundSmsTemplateId string                 `protobuf:"bytes,1,opt,name=inbound_sms_template_id,json=inboundSmsTemplateId,proto3" json:"inbound_sms_template_id,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *DeleteInboundSmsTemplateReq) Reset() {
	*x = DeleteInboundSmsTemplateReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteInboundSmsTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInboundSmsTemplateReq) ProtoMessage() {}

func (x *DeleteInboundSmsTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInboundSmsTemplateReq.ProtoReflect.Descriptor instead.
func (*DeleteInboundSmsTemplateReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{58}
}

func (x *DeleteInboundSmsTemplateReq) GetInboundSmsTemplateId() string {
	if x != nil {
		return x.InboundSmsTemplateId
	}
	return ""
}

type DeleteInboundSmsTemplateRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteInboundSmsTemplateRes) Reset() {
	*x = DeleteInboundSmsTemplateRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteInboundSmsTemplateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInboundSmsTemplateRes) ProtoMessage() {}

func (x *DeleteInboundSmsTemplateRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInboundSmsTemplateRes.ProtoReflect.Descriptor instead.
func (*DeleteInboundSmsTemplateRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{59}
}

func (x *DeleteInboundSmsTemplateRes) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type CreateInboundSmsTemplateReq struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SmsNumberSid         int64                  `protobuf:"varint,1,opt,name=sms_number_sid,json=smsNumberSid,proto3" json:"sms_number_sid,omitempty"`
	Name                 string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SmsIntentTemplateSid []int64                `protobuf:"varint,5,rep,packed,name=sms_intent_template_sid,json=smsIntentTemplateSid,proto3" json:"sms_intent_template_sid,omitempty"`
	ReportSettings       *ReportSettings        `protobuf:"bytes,6,opt,name=report_settings,json=reportSettings,proto3" json:"report_settings,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CreateInboundSmsTemplateReq) Reset() {
	*x = CreateInboundSmsTemplateReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInboundSmsTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInboundSmsTemplateReq) ProtoMessage() {}

func (x *CreateInboundSmsTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInboundSmsTemplateReq.ProtoReflect.Descriptor instead.
func (*CreateInboundSmsTemplateReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{60}
}

func (x *CreateInboundSmsTemplateReq) GetSmsNumberSid() int64 {
	if x != nil {
		return x.SmsNumberSid
	}
	return 0
}

func (x *CreateInboundSmsTemplateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateInboundSmsTemplateReq) GetSmsIntentTemplateSid() []int64 {
	if x != nil {
		return x.SmsIntentTemplateSid
	}
	return nil
}

func (x *CreateInboundSmsTemplateReq) GetReportSettings() *ReportSettings {
	if x != nil {
		return x.ReportSettings
	}
	return nil
}

type CreateInboundSmsTemplateRes struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	InboundSmsTemplateId string                 `protobuf:"bytes,1,opt,name=inbound_sms_template_id,json=inboundSmsTemplateId,proto3" json:"inbound_sms_template_id,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CreateInboundSmsTemplateRes) Reset() {
	*x = CreateInboundSmsTemplateRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInboundSmsTemplateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInboundSmsTemplateRes) ProtoMessage() {}

func (x *CreateInboundSmsTemplateRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInboundSmsTemplateRes.ProtoReflect.Descriptor instead.
func (*CreateInboundSmsTemplateRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{61}
}

func (x *CreateInboundSmsTemplateRes) GetInboundSmsTemplateId() string {
	if x != nil {
		return x.InboundSmsTemplateId
	}
	return ""
}

type GetInboundSmsTemplateByIdReq struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	InboundSmsTemplateId string                 `protobuf:"bytes,3,opt,name=inbound_sms_template_id,json=inboundSmsTemplateId,proto3" json:"inbound_sms_template_id,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetInboundSmsTemplateByIdReq) Reset() {
	*x = GetInboundSmsTemplateByIdReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInboundSmsTemplateByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInboundSmsTemplateByIdReq) ProtoMessage() {}

func (x *GetInboundSmsTemplateByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInboundSmsTemplateByIdReq.ProtoReflect.Descriptor instead.
func (*GetInboundSmsTemplateByIdReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{62}
}

func (x *GetInboundSmsTemplateByIdReq) GetInboundSmsTemplateId() string {
	if x != nil {
		return x.InboundSmsTemplateId
	}
	return ""
}

type GetInboundSmsTemplateByIdRes struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	InboundSmsTemplate *InboundSmsTemplate    `protobuf:"bytes,1,opt,name=inbound_sms_template,json=inboundSmsTemplate,proto3" json:"inbound_sms_template,omitempty"`
	SmsIntentTemplates []*SmsIntentTemplate   `protobuf:"bytes,2,rep,name=sms_intent_templates,json=smsIntentTemplates,proto3" json:"sms_intent_templates,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetInboundSmsTemplateByIdRes) Reset() {
	*x = GetInboundSmsTemplateByIdRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInboundSmsTemplateByIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInboundSmsTemplateByIdRes) ProtoMessage() {}

func (x *GetInboundSmsTemplateByIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInboundSmsTemplateByIdRes.ProtoReflect.Descriptor instead.
func (*GetInboundSmsTemplateByIdRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{63}
}

func (x *GetInboundSmsTemplateByIdRes) GetInboundSmsTemplate() *InboundSmsTemplate {
	if x != nil {
		return x.InboundSmsTemplate
	}
	return nil
}

func (x *GetInboundSmsTemplateByIdRes) GetSmsIntentTemplates() []*SmsIntentTemplate {
	if x != nil {
		return x.SmsIntentTemplates
	}
	return nil
}

type InboundSmsGroupWithIntents struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	InboundSmsGroup    *InboundSmsGroup       `protobuf:"bytes,1,opt,name=inbound_sms_group,json=inboundSmsGroup,proto3" json:"inbound_sms_group,omitempty"`
	SmsIntentTemplates []*SmsIntentTemplate   `protobuf:"bytes,2,rep,name=sms_intent_templates,json=smsIntentTemplates,proto3" json:"sms_intent_templates,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *InboundSmsGroupWithIntents) Reset() {
	*x = InboundSmsGroupWithIntents{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InboundSmsGroupWithIntents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboundSmsGroupWithIntents) ProtoMessage() {}

func (x *InboundSmsGroupWithIntents) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboundSmsGroupWithIntents.ProtoReflect.Descriptor instead.
func (*InboundSmsGroupWithIntents) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{64}
}

func (x *InboundSmsGroupWithIntents) GetInboundSmsGroup() *InboundSmsGroup {
	if x != nil {
		return x.InboundSmsGroup
	}
	return nil
}

func (x *InboundSmsGroupWithIntents) GetSmsIntentTemplates() []*SmsIntentTemplate {
	if x != nil {
		return x.SmsIntentTemplates
	}
	return nil
}

type InboundSmsGroup struct {
	state                protoimpl.MessageState   `protogen:"open.v1"`
	InboundSmsGroupId    string                   `protobuf:"bytes,1,opt,name=inbound_sms_group_id,json=inboundSmsGroupId,proto3" json:"inbound_sms_group_id,omitempty"`
	SmsNumberSid         int64                    `protobuf:"varint,2,opt,name=sms_number_sid,json=smsNumberSid,proto3" json:"sms_number_sid,omitempty"`
	Name                 string                   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Status               commons.SMSIBGroupStatus `protobuf:"varint,4,opt,name=status,proto3,enum=api.commons.SMSIBGroupStatus" json:"status,omitempty"`
	StartTime            *timestamppb.Timestamp   `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	StopTime             *timestamppb.Timestamp   `protobuf:"bytes,6,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`
	TotalCost            float64                  `protobuf:"fixed64,7,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	InboundSmsTemplateId string                   `protobuf:"bytes,8,opt,name=inbound_sms_template_id,json=inboundSmsTemplateId,proto3" json:"inbound_sms_template_id,omitempty"`
	MessageCount         int32                    `protobuf:"varint,9,opt,name=message_count,json=messageCount,proto3" json:"message_count,omitempty"`
	TodaysMessageCount   int32                    `protobuf:"varint,10,opt,name=todays_message_count,json=todaysMessageCount,proto3" json:"todays_message_count,omitempty"`
	ReportSettings       *ReportSettings          `protobuf:"bytes,11,opt,name=report_settings,json=reportSettings,proto3" json:"report_settings,omitempty"`
	DateCreated          *timestamppb.Timestamp   `protobuf:"bytes,12,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *InboundSmsGroup) Reset() {
	*x = InboundSmsGroup{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InboundSmsGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboundSmsGroup) ProtoMessage() {}

func (x *InboundSmsGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboundSmsGroup.ProtoReflect.Descriptor instead.
func (*InboundSmsGroup) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{65}
}

func (x *InboundSmsGroup) GetInboundSmsGroupId() string {
	if x != nil {
		return x.InboundSmsGroupId
	}
	return ""
}

func (x *InboundSmsGroup) GetSmsNumberSid() int64 {
	if x != nil {
		return x.SmsNumberSid
	}
	return 0
}

func (x *InboundSmsGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InboundSmsGroup) GetStatus() commons.SMSIBGroupStatus {
	if x != nil {
		return x.Status
	}
	return commons.SMSIBGroupStatus(0)
}

func (x *InboundSmsGroup) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *InboundSmsGroup) GetStopTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StopTime
	}
	return nil
}

func (x *InboundSmsGroup) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *InboundSmsGroup) GetInboundSmsTemplateId() string {
	if x != nil {
		return x.InboundSmsTemplateId
	}
	return ""
}

func (x *InboundSmsGroup) GetMessageCount() int32 {
	if x != nil {
		return x.MessageCount
	}
	return 0
}

func (x *InboundSmsGroup) GetTodaysMessageCount() int32 {
	if x != nil {
		return x.TodaysMessageCount
	}
	return 0
}

func (x *InboundSmsGroup) GetReportSettings() *ReportSettings {
	if x != nil {
		return x.ReportSettings
	}
	return nil
}

func (x *InboundSmsGroup) GetDateCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCreated
	}
	return nil
}

type ListInboundSmsGroupsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListInboundSmsGroupsReq) Reset() {
	*x = ListInboundSmsGroupsReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInboundSmsGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInboundSmsGroupsReq) ProtoMessage() {}

func (x *ListInboundSmsGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInboundSmsGroupsReq.ProtoReflect.Descriptor instead.
func (*ListInboundSmsGroupsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{66}
}

type ListInboundSmsGroupsRes struct {
	state                      protoimpl.MessageState        `protogen:"open.v1"`
	InboundSmsGroupWithIntents []*InboundSmsGroupWithIntents `protobuf:"bytes,1,rep,name=inbound_sms_group_with_intents,json=inboundSmsGroupWithIntents,proto3" json:"inbound_sms_group_with_intents,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *ListInboundSmsGroupsRes) Reset() {
	*x = ListInboundSmsGroupsRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInboundSmsGroupsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInboundSmsGroupsRes) ProtoMessage() {}

func (x *ListInboundSmsGroupsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInboundSmsGroupsRes.ProtoReflect.Descriptor instead.
func (*ListInboundSmsGroupsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{67}
}

func (x *ListInboundSmsGroupsRes) GetInboundSmsGroupWithIntents() []*InboundSmsGroupWithIntents {
	if x != nil {
		return x.InboundSmsGroupWithIntents
	}
	return nil
}

type UpdateInboundSmsGroupReq struct {
	state                protoimpl.MessageState   `protogen:"open.v1"`
	InboundSmsGroupId    string                   `protobuf:"bytes,1,opt,name=inbound_sms_group_id,json=inboundSmsGroupId,proto3" json:"inbound_sms_group_id,omitempty"`
	SmsNumberSid         int64                    `protobuf:"varint,2,opt,name=sms_number_sid,json=smsNumberSid,proto3" json:"sms_number_sid,omitempty"`
	Name                 string                   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Status               commons.SMSIBGroupStatus `protobuf:"varint,6,opt,name=status,proto3,enum=api.commons.SMSIBGroupStatus" json:"status,omitempty"`
	StartTime            *timestamppb.Timestamp   `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	StopTime             *timestamppb.Timestamp   `protobuf:"bytes,8,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`
	TotalCost            float64                  `protobuf:"fixed64,9,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	InboundSmsTemplateId string                   `protobuf:"bytes,10,opt,name=inbound_sms_template_id,json=inboundSmsTemplateId,proto3" json:"inbound_sms_template_id,omitempty"`
	ReportSettings       *ReportSettings          `protobuf:"bytes,11,opt,name=report_settings,json=reportSettings,proto3" json:"report_settings,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *UpdateInboundSmsGroupReq) Reset() {
	*x = UpdateInboundSmsGroupReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateInboundSmsGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInboundSmsGroupReq) ProtoMessage() {}

func (x *UpdateInboundSmsGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInboundSmsGroupReq.ProtoReflect.Descriptor instead.
func (*UpdateInboundSmsGroupReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{68}
}

func (x *UpdateInboundSmsGroupReq) GetInboundSmsGroupId() string {
	if x != nil {
		return x.InboundSmsGroupId
	}
	return ""
}

func (x *UpdateInboundSmsGroupReq) GetSmsNumberSid() int64 {
	if x != nil {
		return x.SmsNumberSid
	}
	return 0
}

func (x *UpdateInboundSmsGroupReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateInboundSmsGroupReq) GetStatus() commons.SMSIBGroupStatus {
	if x != nil {
		return x.Status
	}
	return commons.SMSIBGroupStatus(0)
}

func (x *UpdateInboundSmsGroupReq) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *UpdateInboundSmsGroupReq) GetStopTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StopTime
	}
	return nil
}

func (x *UpdateInboundSmsGroupReq) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *UpdateInboundSmsGroupReq) GetInboundSmsTemplateId() string {
	if x != nil {
		return x.InboundSmsTemplateId
	}
	return ""
}

func (x *UpdateInboundSmsGroupReq) GetReportSettings() *ReportSettings {
	if x != nil {
		return x.ReportSettings
	}
	return nil
}

type UpdateInboundSmsGroupRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateInboundSmsGroupRes) Reset() {
	*x = UpdateInboundSmsGroupRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateInboundSmsGroupRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInboundSmsGroupRes) ProtoMessage() {}

func (x *UpdateInboundSmsGroupRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInboundSmsGroupRes.ProtoReflect.Descriptor instead.
func (*UpdateInboundSmsGroupRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{69}
}

func (x *UpdateInboundSmsGroupRes) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type DeleteInboundSmsGroupReq struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	InboundSmsGroupId string                 `protobuf:"bytes,1,opt,name=inbound_sms_group_id,json=inboundSmsGroupId,proto3" json:"inbound_sms_group_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DeleteInboundSmsGroupReq) Reset() {
	*x = DeleteInboundSmsGroupReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteInboundSmsGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInboundSmsGroupReq) ProtoMessage() {}

func (x *DeleteInboundSmsGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInboundSmsGroupReq.ProtoReflect.Descriptor instead.
func (*DeleteInboundSmsGroupReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{70}
}

func (x *DeleteInboundSmsGroupReq) GetInboundSmsGroupId() string {
	if x != nil {
		return x.InboundSmsGroupId
	}
	return ""
}

type DeleteInboundSmsGroupRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteInboundSmsGroupRes) Reset() {
	*x = DeleteInboundSmsGroupRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteInboundSmsGroupRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInboundSmsGroupRes) ProtoMessage() {}

func (x *DeleteInboundSmsGroupRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInboundSmsGroupRes.ProtoReflect.Descriptor instead.
func (*DeleteInboundSmsGroupRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{71}
}

func (x *DeleteInboundSmsGroupRes) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type CreateInboundSmsGroupReq struct {
	state                protoimpl.MessageState   `protogen:"open.v1"`
	SmsNumberSid         int64                    `protobuf:"varint,1,opt,name=sms_number_sid,json=smsNumberSid,proto3" json:"sms_number_sid,omitempty"`
	Name                 string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status               commons.SMSIBGroupStatus `protobuf:"varint,5,opt,name=status,proto3,enum=api.commons.SMSIBGroupStatus" json:"status,omitempty"`
	StartTime            *timestamppb.Timestamp   `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	StopTime             *timestamppb.Timestamp   `protobuf:"bytes,7,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`
	TotalCost            float64                  `protobuf:"fixed64,8,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	InboundSmsTemplateId string                   `protobuf:"bytes,9,opt,name=inbound_sms_template_id,json=inboundSmsTemplateId,proto3" json:"inbound_sms_template_id,omitempty"`
	ReportSettings       *ReportSettings          `protobuf:"bytes,10,opt,name=report_settings,json=reportSettings,proto3" json:"report_settings,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CreateInboundSmsGroupReq) Reset() {
	*x = CreateInboundSmsGroupReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInboundSmsGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInboundSmsGroupReq) ProtoMessage() {}

func (x *CreateInboundSmsGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInboundSmsGroupReq.ProtoReflect.Descriptor instead.
func (*CreateInboundSmsGroupReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{72}
}

func (x *CreateInboundSmsGroupReq) GetSmsNumberSid() int64 {
	if x != nil {
		return x.SmsNumberSid
	}
	return 0
}

func (x *CreateInboundSmsGroupReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateInboundSmsGroupReq) GetStatus() commons.SMSIBGroupStatus {
	if x != nil {
		return x.Status
	}
	return commons.SMSIBGroupStatus(0)
}

func (x *CreateInboundSmsGroupReq) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *CreateInboundSmsGroupReq) GetStopTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StopTime
	}
	return nil
}

func (x *CreateInboundSmsGroupReq) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *CreateInboundSmsGroupReq) GetInboundSmsTemplateId() string {
	if x != nil {
		return x.InboundSmsTemplateId
	}
	return ""
}

func (x *CreateInboundSmsGroupReq) GetReportSettings() *ReportSettings {
	if x != nil {
		return x.ReportSettings
	}
	return nil
}

type CreateInboundSmsGroupRes struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	InboundSmsGroupId string                 `protobuf:"bytes,1,opt,name=inbound_sms_group_id,json=inboundSmsGroupId,proto3" json:"inbound_sms_group_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CreateInboundSmsGroupRes) Reset() {
	*x = CreateInboundSmsGroupRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInboundSmsGroupRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInboundSmsGroupRes) ProtoMessage() {}

func (x *CreateInboundSmsGroupRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInboundSmsGroupRes.ProtoReflect.Descriptor instead.
func (*CreateInboundSmsGroupRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{73}
}

func (x *CreateInboundSmsGroupRes) GetInboundSmsGroupId() string {
	if x != nil {
		return x.InboundSmsGroupId
	}
	return ""
}

type GetInboundSmsGroupByIdReq struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	InboundSmsGroupId string                 `protobuf:"bytes,3,opt,name=inbound_sms_group_id,json=inboundSmsGroupId,proto3" json:"inbound_sms_group_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetInboundSmsGroupByIdReq) Reset() {
	*x = GetInboundSmsGroupByIdReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInboundSmsGroupByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInboundSmsGroupByIdReq) ProtoMessage() {}

func (x *GetInboundSmsGroupByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInboundSmsGroupByIdReq.ProtoReflect.Descriptor instead.
func (*GetInboundSmsGroupByIdReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{74}
}

func (x *GetInboundSmsGroupByIdReq) GetInboundSmsGroupId() string {
	if x != nil {
		return x.InboundSmsGroupId
	}
	return ""
}

type GetInboundSmsGroupByIdRes struct {
	state                      protoimpl.MessageState      `protogen:"open.v1"`
	InboundSmsGroupWithIntents *InboundSmsGroupWithIntents `protobuf:"bytes,1,opt,name=inbound_sms_group_with_intents,json=inboundSmsGroupWithIntents,proto3" json:"inbound_sms_group_with_intents,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *GetInboundSmsGroupByIdRes) Reset() {
	*x = GetInboundSmsGroupByIdRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInboundSmsGroupByIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInboundSmsGroupByIdRes) ProtoMessage() {}

func (x *GetInboundSmsGroupByIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInboundSmsGroupByIdRes.ProtoReflect.Descriptor instead.
func (*GetInboundSmsGroupByIdRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{75}
}

func (x *GetInboundSmsGroupByIdRes) GetInboundSmsGroupWithIntents() *InboundSmsGroupWithIntents {
	if x != nil {
		return x.InboundSmsGroupWithIntents
	}
	return nil
}

type ListActiveInboundSmsGroupsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListActiveInboundSmsGroupsReq) Reset() {
	*x = ListActiveInboundSmsGroupsReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListActiveInboundSmsGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActiveInboundSmsGroupsReq) ProtoMessage() {}

func (x *ListActiveInboundSmsGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActiveInboundSmsGroupsReq.ProtoReflect.Descriptor instead.
func (*ListActiveInboundSmsGroupsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{76}
}

type ListActiveInboundSmsGroupsRes struct {
	state                      protoimpl.MessageState        `protogen:"open.v1"`
	InboundSmsGroupWithIntents []*InboundSmsGroupWithIntents `protobuf:"bytes,1,rep,name=inbound_sms_group_with_intents,json=inboundSmsGroupWithIntents,proto3" json:"inbound_sms_group_with_intents,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *ListActiveInboundSmsGroupsRes) Reset() {
	*x = ListActiveInboundSmsGroupsRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListActiveInboundSmsGroupsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActiveInboundSmsGroupsRes) ProtoMessage() {}

func (x *ListActiveInboundSmsGroupsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActiveInboundSmsGroupsRes.ProtoReflect.Descriptor instead.
func (*ListActiveInboundSmsGroupsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{77}
}

func (x *ListActiveInboundSmsGroupsRes) GetInboundSmsGroupWithIntents() []*InboundSmsGroupWithIntents {
	if x != nil {
		return x.InboundSmsGroupWithIntents
	}
	return nil
}

type ListInboundSmsGroupByFiltersReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SearchFrom    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=search_from,json=searchFrom,proto3" json:"search_from,omitempty"`
	SearchTo      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=search_to,json=searchTo,proto3" json:"search_to,omitempty"`
	Status        string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Name          string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListInboundSmsGroupByFiltersReq) Reset() {
	*x = ListInboundSmsGroupByFiltersReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInboundSmsGroupByFiltersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInboundSmsGroupByFiltersReq) ProtoMessage() {}

func (x *ListInboundSmsGroupByFiltersReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInboundSmsGroupByFiltersReq.ProtoReflect.Descriptor instead.
func (*ListInboundSmsGroupByFiltersReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{78}
}

func (x *ListInboundSmsGroupByFiltersReq) GetSearchFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.SearchFrom
	}
	return nil
}

func (x *ListInboundSmsGroupByFiltersReq) GetSearchTo() *timestamppb.Timestamp {
	if x != nil {
		return x.SearchTo
	}
	return nil
}

func (x *ListInboundSmsGroupByFiltersReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListInboundSmsGroupByFiltersReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListInboundSmsGroupByFiltersRes struct {
	state                      protoimpl.MessageState        `protogen:"open.v1"`
	InboundSmsGroupWithIntents []*InboundSmsGroupWithIntents `protobuf:"bytes,1,rep,name=inbound_sms_group_with_intents,json=inboundSmsGroupWithIntents,proto3" json:"inbound_sms_group_with_intents,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *ListInboundSmsGroupByFiltersRes) Reset() {
	*x = ListInboundSmsGroupByFiltersRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInboundSmsGroupByFiltersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInboundSmsGroupByFiltersRes) ProtoMessage() {}

func (x *ListInboundSmsGroupByFiltersRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInboundSmsGroupByFiltersRes.ProtoReflect.Descriptor instead.
func (*ListInboundSmsGroupByFiltersRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{79}
}

func (x *ListInboundSmsGroupByFiltersRes) GetInboundSmsGroupWithIntents() []*InboundSmsGroupWithIntents {
	if x != nil {
		return x.InboundSmsGroupWithIntents
	}
	return nil
}

type ListInboundSmsGroupsByGroupIdsReq struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	InboundSmsGroupIdsArr []string               `protobuf:"bytes,1,rep,name=inbound_sms_group_ids_arr,json=inboundSmsGroupIdsArr,proto3" json:"inbound_sms_group_ids_arr,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ListInboundSmsGroupsByGroupIdsReq) Reset() {
	*x = ListInboundSmsGroupsByGroupIdsReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInboundSmsGroupsByGroupIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInboundSmsGroupsByGroupIdsReq) ProtoMessage() {}

func (x *ListInboundSmsGroupsByGroupIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInboundSmsGroupsByGroupIdsReq.ProtoReflect.Descriptor instead.
func (*ListInboundSmsGroupsByGroupIdsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{80}
}

func (x *ListInboundSmsGroupsByGroupIdsReq) GetInboundSmsGroupIdsArr() []string {
	if x != nil {
		return x.InboundSmsGroupIdsArr
	}
	return nil
}

type ListInboundSmsGroupsByGroupIdsRes struct {
	state                      protoimpl.MessageState        `protogen:"open.v1"`
	InboundSmsGroupWithIntents []*InboundSmsGroupWithIntents `protobuf:"bytes,1,rep,name=inbound_sms_group_with_intents,json=inboundSmsGroupWithIntents,proto3" json:"inbound_sms_group_with_intents,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *ListInboundSmsGroupsByGroupIdsRes) Reset() {
	*x = ListInboundSmsGroupsByGroupIdsRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInboundSmsGroupsByGroupIdsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInboundSmsGroupsByGroupIdsRes) ProtoMessage() {}

func (x *ListInboundSmsGroupsByGroupIdsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInboundSmsGroupsByGroupIdsRes.ProtoReflect.Descriptor instead.
func (*ListInboundSmsGroupsByGroupIdsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{81}
}

func (x *ListInboundSmsGroupsByGroupIdsRes) GetInboundSmsGroupWithIntents() []*InboundSmsGroupWithIntents {
	if x != nil {
		return x.InboundSmsGroupWithIntents
	}
	return nil
}

type ScheduleInboundSmsReq struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	InboundSmsTemplateId string                 `protobuf:"bytes,1,opt,name=inbound_sms_template_id,json=inboundSmsTemplateId,proto3" json:"inbound_sms_template_id,omitempty"`
	SmsNumberSid         int64                  `protobuf:"varint,2,opt,name=sms_number_sid,json=smsNumberSid,proto3" json:"sms_number_sid,omitempty"`
	GroupName            string                 `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ScheduleInboundSmsReq) Reset() {
	*x = ScheduleInboundSmsReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleInboundSmsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleInboundSmsReq) ProtoMessage() {}

func (x *ScheduleInboundSmsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleInboundSmsReq.ProtoReflect.Descriptor instead.
func (*ScheduleInboundSmsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{82}
}

func (x *ScheduleInboundSmsReq) GetInboundSmsTemplateId() string {
	if x != nil {
		return x.InboundSmsTemplateId
	}
	return ""
}

func (x *ScheduleInboundSmsReq) GetSmsNumberSid() int64 {
	if x != nil {
		return x.SmsNumberSid
	}
	return 0
}

func (x *ScheduleInboundSmsReq) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type ScheduleInboundSmsRes struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	InboundSmsGroupId string                 `protobuf:"bytes,1,opt,name=inbound_sms_group_id,json=inboundSmsGroupId,proto3" json:"inbound_sms_group_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ScheduleInboundSmsRes) Reset() {
	*x = ScheduleInboundSmsRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleInboundSmsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleInboundSmsRes) ProtoMessage() {}

func (x *ScheduleInboundSmsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleInboundSmsRes.ProtoReflect.Descriptor instead.
func (*ScheduleInboundSmsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{83}
}

func (x *ScheduleInboundSmsRes) GetInboundSmsGroupId() string {
	if x != nil {
		return x.InboundSmsGroupId
	}
	return ""
}

type StopInboundSmsGroupReq struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	InboundSmsGroupId string                 `protobuf:"bytes,1,opt,name=inbound_sms_group_id,json=inboundSmsGroupId,proto3" json:"inbound_sms_group_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *StopInboundSmsGroupReq) Reset() {
	*x = StopInboundSmsGroupReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopInboundSmsGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopInboundSmsGroupReq) ProtoMessage() {}

func (x *StopInboundSmsGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopInboundSmsGroupReq.ProtoReflect.Descriptor instead.
func (*StopInboundSmsGroupReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{84}
}

func (x *StopInboundSmsGroupReq) GetInboundSmsGroupId() string {
	if x != nil {
		return x.InboundSmsGroupId
	}
	return ""
}

type StopInboundSmsGroupRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopInboundSmsGroupRes) Reset() {
	*x = StopInboundSmsGroupRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopInboundSmsGroupRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopInboundSmsGroupRes) ProtoMessage() {}

func (x *StopInboundSmsGroupRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopInboundSmsGroupRes.ProtoReflect.Descriptor instead.
func (*StopInboundSmsGroupRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{85}
}

func (x *StopInboundSmsGroupRes) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type SmsConversation struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SmsConversationId string                 `protobuf:"bytes,1,opt,name=sms_conversation_id,json=smsConversationId,proto3" json:"sms_conversation_id,omitempty"`
	InboundSmsGroupId string                 `protobuf:"bytes,2,opt,name=inbound_sms_group_id,json=inboundSmsGroupId,proto3" json:"inbound_sms_group_id,omitempty"`
	SmsTaskParent     *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=sms_task_parent,json=smsTaskParent,proto3" json:"sms_task_parent,omitempty"`
	CreatedOn         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SmsConversation) Reset() {
	*x = SmsConversation{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmsConversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsConversation) ProtoMessage() {}

func (x *SmsConversation) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsConversation.ProtoReflect.Descriptor instead.
func (*SmsConversation) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{86}
}

func (x *SmsConversation) GetSmsConversationId() string {
	if x != nil {
		return x.SmsConversationId
	}
	return ""
}

func (x *SmsConversation) GetInboundSmsGroupId() string {
	if x != nil {
		return x.InboundSmsGroupId
	}
	return ""
}

func (x *SmsConversation) GetSmsTaskParent() *wrapperspb.Int64Value {
	if x != nil {
		return x.SmsTaskParent
	}
	return nil
}

func (x *SmsConversation) GetCreatedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedOn
	}
	return nil
}

type ListSmsConversationsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSmsConversationsReq) Reset() {
	*x = ListSmsConversationsReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmsConversationsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmsConversationsReq) ProtoMessage() {}

func (x *ListSmsConversationsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmsConversationsReq.ProtoReflect.Descriptor instead.
func (*ListSmsConversationsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{87}
}

type ListSmsConversationsRes struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SmsConversations []*SmsConversation     `protobuf:"bytes,1,rep,name=sms_conversations,json=smsConversations,proto3" json:"sms_conversations,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ListSmsConversationsRes) Reset() {
	*x = ListSmsConversationsRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmsConversationsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmsConversationsRes) ProtoMessage() {}

func (x *ListSmsConversationsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmsConversationsRes.ProtoReflect.Descriptor instead.
func (*ListSmsConversationsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{88}
}

func (x *ListSmsConversationsRes) GetSmsConversations() []*SmsConversation {
	if x != nil {
		return x.SmsConversations
	}
	return nil
}

type UpdateSmsConversationReq struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SmsConversationId string                 `protobuf:"bytes,1,opt,name=sms_conversation_id,json=smsConversationId,proto3" json:"sms_conversation_id,omitempty"`
	InboundSmsGroupId string                 `protobuf:"bytes,2,opt,name=inbound_sms_group_id,json=inboundSmsGroupId,proto3" json:"inbound_sms_group_id,omitempty"`
	SmsTaskParent     *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=sms_task_parent,json=smsTaskParent,proto3" json:"sms_task_parent,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UpdateSmsConversationReq) Reset() {
	*x = UpdateSmsConversationReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSmsConversationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSmsConversationReq) ProtoMessage() {}

func (x *UpdateSmsConversationReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSmsConversationReq.ProtoReflect.Descriptor instead.
func (*UpdateSmsConversationReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{89}
}

func (x *UpdateSmsConversationReq) GetSmsConversationId() string {
	if x != nil {
		return x.SmsConversationId
	}
	return ""
}

func (x *UpdateSmsConversationReq) GetInboundSmsGroupId() string {
	if x != nil {
		return x.InboundSmsGroupId
	}
	return ""
}

func (x *UpdateSmsConversationReq) GetSmsTaskParent() *wrapperspb.Int64Value {
	if x != nil {
		return x.SmsTaskParent
	}
	return nil
}

type UpdateSmsConversationRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSmsConversationRes) Reset() {
	*x = UpdateSmsConversationRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSmsConversationRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSmsConversationRes) ProtoMessage() {}

func (x *UpdateSmsConversationRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSmsConversationRes.ProtoReflect.Descriptor instead.
func (*UpdateSmsConversationRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{90}
}

func (x *UpdateSmsConversationRes) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type DeleteSmsConversationReq struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SmsConversationId string                 `protobuf:"bytes,1,opt,name=sms_conversation_id,json=smsConversationId,proto3" json:"sms_conversation_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DeleteSmsConversationReq) Reset() {
	*x = DeleteSmsConversationReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSmsConversationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSmsConversationReq) ProtoMessage() {}

func (x *DeleteSmsConversationReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSmsConversationReq.ProtoReflect.Descriptor instead.
func (*DeleteSmsConversationReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{91}
}

func (x *DeleteSmsConversationReq) GetSmsConversationId() string {
	if x != nil {
		return x.SmsConversationId
	}
	return ""
}

type DeleteSmsConversationRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSmsConversationRes) Reset() {
	*x = DeleteSmsConversationRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSmsConversationRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSmsConversationRes) ProtoMessage() {}

func (x *DeleteSmsConversationRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSmsConversationRes.ProtoReflect.Descriptor instead.
func (*DeleteSmsConversationRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{92}
}

func (x *DeleteSmsConversationRes) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type CreateSmsConversationReq struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	InboundSmsGroupId string                 `protobuf:"bytes,1,opt,name=inbound_sms_group_id,json=inboundSmsGroupId,proto3" json:"inbound_sms_group_id,omitempty"`
	SmsTaskParent     *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=sms_task_parent,json=smsTaskParent,proto3" json:"sms_task_parent,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CreateSmsConversationReq) Reset() {
	*x = CreateSmsConversationReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSmsConversationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSmsConversationReq) ProtoMessage() {}

func (x *CreateSmsConversationReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSmsConversationReq.ProtoReflect.Descriptor instead.
func (*CreateSmsConversationReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{93}
}

func (x *CreateSmsConversationReq) GetInboundSmsGroupId() string {
	if x != nil {
		return x.InboundSmsGroupId
	}
	return ""
}

func (x *CreateSmsConversationReq) GetSmsTaskParent() *wrapperspb.Int64Value {
	if x != nil {
		return x.SmsTaskParent
	}
	return nil
}

type CreateSmsConversationRes struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SmsConversationId string                 `protobuf:"bytes,1,opt,name=sms_conversation_id,json=smsConversationId,proto3" json:"sms_conversation_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CreateSmsConversationRes) Reset() {
	*x = CreateSmsConversationRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSmsConversationRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSmsConversationRes) ProtoMessage() {}

func (x *CreateSmsConversationRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSmsConversationRes.ProtoReflect.Descriptor instead.
func (*CreateSmsConversationRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{94}
}

func (x *CreateSmsConversationRes) GetSmsConversationId() string {
	if x != nil {
		return x.SmsConversationId
	}
	return ""
}

type GetSmsConversationByIdReq struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SmsConversationId string                 `protobuf:"bytes,1,opt,name=sms_conversation_id,json=smsConversationId,proto3" json:"sms_conversation_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetSmsConversationByIdReq) Reset() {
	*x = GetSmsConversationByIdReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSmsConversationByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSmsConversationByIdReq) ProtoMessage() {}

func (x *GetSmsConversationByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSmsConversationByIdReq.ProtoReflect.Descriptor instead.
func (*GetSmsConversationByIdReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{95}
}

func (x *GetSmsConversationByIdReq) GetSmsConversationId() string {
	if x != nil {
		return x.SmsConversationId
	}
	return ""
}

type GetSmsConversationByIdRes struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SmsConversation *SmsConversation       `protobuf:"bytes,1,opt,name=sms_conversation,json=smsConversation,proto3" json:"sms_conversation,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetSmsConversationByIdRes) Reset() {
	*x = GetSmsConversationByIdRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSmsConversationByIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSmsConversationByIdRes) ProtoMessage() {}

func (x *GetSmsConversationByIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSmsConversationByIdRes.ProtoReflect.Descriptor instead.
func (*GetSmsConversationByIdRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{96}
}

func (x *GetSmsConversationByIdRes) GetSmsConversation() *SmsConversation {
	if x != nil {
		return x.SmsConversation
	}
	return nil
}

type ListSmsConversationAuditsReq struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SmsConversationId string                 `protobuf:"bytes,1,opt,name=sms_conversation_id,json=smsConversationId,proto3" json:"sms_conversation_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ListSmsConversationAuditsReq) Reset() {
	*x = ListSmsConversationAuditsReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmsConversationAuditsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmsConversationAuditsReq) ProtoMessage() {}

func (x *ListSmsConversationAuditsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmsConversationAuditsReq.ProtoReflect.Descriptor instead.
func (*ListSmsConversationAuditsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{97}
}

func (x *ListSmsConversationAuditsReq) GetSmsConversationId() string {
	if x != nil {
		return x.SmsConversationId
	}
	return ""
}

type ListSmsConversationAuditsRes struct {
	state                 protoimpl.MessageState  `protogen:"open.v1"`
	SmsConversationAudits []*SmsConversationAudit `protobuf:"bytes,1,rep,name=sms_conversation_audits,json=smsConversationAudits,proto3" json:"sms_conversation_audits,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ListSmsConversationAuditsRes) Reset() {
	*x = ListSmsConversationAuditsRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmsConversationAuditsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmsConversationAuditsRes) ProtoMessage() {}

func (x *ListSmsConversationAuditsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmsConversationAuditsRes.ProtoReflect.Descriptor instead.
func (*ListSmsConversationAuditsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{98}
}

func (x *ListSmsConversationAuditsRes) GetSmsConversationAudits() []*SmsConversationAudit {
	if x != nil {
		return x.SmsConversationAudits
	}
	return nil
}

type CreateSmsConversationAuditRes struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	SmsConversationAuditId string                 `protobuf:"bytes,1,opt,name=sms_conversation_audit_id,json=smsConversationAuditId,proto3" json:"sms_conversation_audit_id,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CreateSmsConversationAuditRes) Reset() {
	*x = CreateSmsConversationAuditRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSmsConversationAuditRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSmsConversationAuditRes) ProtoMessage() {}

func (x *CreateSmsConversationAuditRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSmsConversationAuditRes.ProtoReflect.Descriptor instead.
func (*CreateSmsConversationAuditRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{99}
}

func (x *CreateSmsConversationAuditRes) GetSmsConversationAuditId() string {
	if x != nil {
		return x.SmsConversationAuditId
	}
	return ""
}

type GetSmsConversationAuditByIdReq struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	SmsConversationAuditId string                 `protobuf:"bytes,1,opt,name=sms_conversation_audit_id,json=smsConversationAuditId,proto3" json:"sms_conversation_audit_id,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetSmsConversationAuditByIdReq) Reset() {
	*x = GetSmsConversationAuditByIdReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSmsConversationAuditByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSmsConversationAuditByIdReq) ProtoMessage() {}

func (x *GetSmsConversationAuditByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSmsConversationAuditByIdReq.ProtoReflect.Descriptor instead.
func (*GetSmsConversationAuditByIdReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{100}
}

func (x *GetSmsConversationAuditByIdReq) GetSmsConversationAuditId() string {
	if x != nil {
		return x.SmsConversationAuditId
	}
	return ""
}

type GetSmsConversationAuditByIdRes struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SmsConversationAudit *SmsConversationAudit  `protobuf:"bytes,1,opt,name=sms_conversation_audit,json=smsConversationAudit,proto3" json:"sms_conversation_audit,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetSmsConversationAuditByIdRes) Reset() {
	*x = GetSmsConversationAuditByIdRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSmsConversationAuditByIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSmsConversationAuditByIdRes) ProtoMessage() {}

func (x *GetSmsConversationAuditByIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSmsConversationAuditByIdRes.ProtoReflect.Descriptor instead.
func (*GetSmsConversationAuditByIdRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{101}
}

func (x *GetSmsConversationAuditByIdRes) GetSmsConversationAudit() *SmsConversationAudit {
	if x != nil {
		return x.SmsConversationAudit
	}
	return nil
}

type ListSmsConversationAssignedAgentsReq struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SmsConversationId string                 `protobuf:"bytes,1,opt,name=sms_conversation_id,json=smsConversationId,proto3" json:"sms_conversation_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ListSmsConversationAssignedAgentsReq) Reset() {
	*x = ListSmsConversationAssignedAgentsReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmsConversationAssignedAgentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmsConversationAssignedAgentsReq) ProtoMessage() {}

func (x *ListSmsConversationAssignedAgentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmsConversationAssignedAgentsReq.ProtoReflect.Descriptor instead.
func (*ListSmsConversationAssignedAgentsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{102}
}

func (x *ListSmsConversationAssignedAgentsReq) GetSmsConversationId() string {
	if x != nil {
		return x.SmsConversationId
	}
	return ""
}

type ListSmsConversationAssignedAgentsRes struct {
	state                         protoimpl.MessageState          `protogen:"open.v1"`
	SmsConversationAssignedAgents []*SmsConversationAssignedAgent `protobuf:"bytes,1,rep,name=sms_conversation_assigned_agents,json=smsConversationAssignedAgents,proto3" json:"sms_conversation_assigned_agents,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *ListSmsConversationAssignedAgentsRes) Reset() {
	*x = ListSmsConversationAssignedAgentsRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmsConversationAssignedAgentsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmsConversationAssignedAgentsRes) ProtoMessage() {}

func (x *ListSmsConversationAssignedAgentsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmsConversationAssignedAgentsRes.ProtoReflect.Descriptor instead.
func (*ListSmsConversationAssignedAgentsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{103}
}

func (x *ListSmsConversationAssignedAgentsRes) GetSmsConversationAssignedAgents() []*SmsConversationAssignedAgent {
	if x != nil {
		return x.SmsConversationAssignedAgents
	}
	return nil
}

type CreateSmsConversationAssignedAgentRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSmsConversationAssignedAgentRes) Reset() {
	*x = CreateSmsConversationAssignedAgentRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSmsConversationAssignedAgentRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSmsConversationAssignedAgentRes) ProtoMessage() {}

func (x *CreateSmsConversationAssignedAgentRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSmsConversationAssignedAgentRes.ProtoReflect.Descriptor instead.
func (*CreateSmsConversationAssignedAgentRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{104}
}

func (x *CreateSmsConversationAssignedAgentRes) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type GetSmsConversationAssignedAgentByIdReq struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SmsConversationId string                 `protobuf:"bytes,1,opt,name=sms_conversation_id,json=smsConversationId,proto3" json:"sms_conversation_id,omitempty"`
	AssignedAgentId   int64                  `protobuf:"varint,2,opt,name=assigned_agent_id,json=assignedAgentId,proto3" json:"assigned_agent_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetSmsConversationAssignedAgentByIdReq) Reset() {
	*x = GetSmsConversationAssignedAgentByIdReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSmsConversationAssignedAgentByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSmsConversationAssignedAgentByIdReq) ProtoMessage() {}

func (x *GetSmsConversationAssignedAgentByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSmsConversationAssignedAgentByIdReq.ProtoReflect.Descriptor instead.
func (*GetSmsConversationAssignedAgentByIdReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{105}
}

func (x *GetSmsConversationAssignedAgentByIdReq) GetSmsConversationId() string {
	if x != nil {
		return x.SmsConversationId
	}
	return ""
}

func (x *GetSmsConversationAssignedAgentByIdReq) GetAssignedAgentId() int64 {
	if x != nil {
		return x.AssignedAgentId
	}
	return 0
}

type GetSmsConversationAssignedAgentByIdRes struct {
	state                        protoimpl.MessageState        `protogen:"open.v1"`
	SmsConversationAssignedAgent *SmsConversationAssignedAgent `protobuf:"bytes,1,opt,name=sms_conversation_assigned_agent,json=smsConversationAssignedAgent,proto3" json:"sms_conversation_assigned_agent,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *GetSmsConversationAssignedAgentByIdRes) Reset() {
	*x = GetSmsConversationAssignedAgentByIdRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSmsConversationAssignedAgentByIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSmsConversationAssignedAgentByIdRes) ProtoMessage() {}

func (x *GetSmsConversationAssignedAgentByIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSmsConversationAssignedAgentByIdRes.ProtoReflect.Descriptor instead.
func (*GetSmsConversationAssignedAgentByIdRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{106}
}

func (x *GetSmsConversationAssignedAgentByIdRes) GetSmsConversationAssignedAgent() *SmsConversationAssignedAgent {
	if x != nil {
		return x.SmsConversationAssignedAgent
	}
	return nil
}

type SmsConversationAudit struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	SmsConversationAuditId string                 `protobuf:"bytes,1,opt,name=sms_conversation_audit_id,json=smsConversationAuditId,proto3" json:"sms_conversation_audit_id,omitempty"`
	SmsConversationId      string                 `protobuf:"bytes,2,opt,name=sms_conversation_id,json=smsConversationId,proto3" json:"sms_conversation_id,omitempty"`
	SmsTaskSid             int64                  `protobuf:"varint,3,opt,name=sms_task_sid,json=smsTaskSid,proto3" json:"sms_task_sid,omitempty"`
	SmsReceivedRepliesSid  int64                  `protobuf:"varint,4,opt,name=sms_received_replies_sid,json=smsReceivedRepliesSid,proto3" json:"sms_received_replies_sid,omitempty"`
	Action                 int64                  `protobuf:"varint,5,opt,name=action,proto3" json:"action,omitempty"`
	Description            string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	AgentId                int64                  `protobuf:"varint,7,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	CreatedOn              *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SmsConversationAudit) Reset() {
	*x = SmsConversationAudit{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmsConversationAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsConversationAudit) ProtoMessage() {}

func (x *SmsConversationAudit) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsConversationAudit.ProtoReflect.Descriptor instead.
func (*SmsConversationAudit) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{107}
}

func (x *SmsConversationAudit) GetSmsConversationAuditId() string {
	if x != nil {
		return x.SmsConversationAuditId
	}
	return ""
}

func (x *SmsConversationAudit) GetSmsConversationId() string {
	if x != nil {
		return x.SmsConversationId
	}
	return ""
}

func (x *SmsConversationAudit) GetSmsTaskSid() int64 {
	if x != nil {
		return x.SmsTaskSid
	}
	return 0
}

func (x *SmsConversationAudit) GetSmsReceivedRepliesSid() int64 {
	if x != nil {
		return x.SmsReceivedRepliesSid
	}
	return 0
}

func (x *SmsConversationAudit) GetAction() int64 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *SmsConversationAudit) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SmsConversationAudit) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *SmsConversationAudit) GetCreatedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedOn
	}
	return nil
}

type SmsConversationAssignedAgent struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SmsConversationId string                 `protobuf:"bytes,1,opt,name=sms_conversation_id,json=smsConversationId,proto3" json:"sms_conversation_id,omitempty"`
	AssignedAgentId   int64                  `protobuf:"varint,2,opt,name=assigned_agent_id,json=assignedAgentId,proto3" json:"assigned_agent_id,omitempty"`
	PrimaryAgent      bool                   `protobuf:"varint,3,opt,name=primary_agent,json=primaryAgent,proto3" json:"primary_agent,omitempty"`
	Notify            bool                   `protobuf:"varint,4,opt,name=notify,proto3" json:"notify,omitempty"`
	CreatedOn         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SmsConversationAssignedAgent) Reset() {
	*x = SmsConversationAssignedAgent{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmsConversationAssignedAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsConversationAssignedAgent) ProtoMessage() {}

func (x *SmsConversationAssignedAgent) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsConversationAssignedAgent.ProtoReflect.Descriptor instead.
func (*SmsConversationAssignedAgent) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{108}
}

func (x *SmsConversationAssignedAgent) GetSmsConversationId() string {
	if x != nil {
		return x.SmsConversationId
	}
	return ""
}

func (x *SmsConversationAssignedAgent) GetAssignedAgentId() int64 {
	if x != nil {
		return x.AssignedAgentId
	}
	return 0
}

func (x *SmsConversationAssignedAgent) GetPrimaryAgent() bool {
	if x != nil {
		return x.PrimaryAgent
	}
	return false
}

func (x *SmsConversationAssignedAgent) GetNotify() bool {
	if x != nil {
		return x.Notify
	}
	return false
}

func (x *SmsConversationAssignedAgent) GetCreatedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedOn
	}
	return nil
}

type GetSmsMessageReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SmsMessageSid int64                  `protobuf:"varint,1,opt,name=sms_message_sid,json=smsMessageSid,proto3" json:"sms_message_sid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSmsMessageReq) Reset() {
	*x = GetSmsMessageReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSmsMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSmsMessageReq) ProtoMessage() {}

func (x *GetSmsMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSmsMessageReq.ProtoReflect.Descriptor instead.
func (*GetSmsMessageReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{109}
}

func (x *GetSmsMessageReq) GetSmsMessageSid() int64 {
	if x != nil {
		return x.SmsMessageSid
	}
	return 0
}

type GetSmsMessageRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SmsMessage    *SmsMessage            `protobuf:"bytes,1,opt,name=sms_message,json=smsMessage,proto3" json:"sms_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSmsMessageRes) Reset() {
	*x = GetSmsMessageRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSmsMessageRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSmsMessageRes) ProtoMessage() {}

func (x *GetSmsMessageRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSmsMessageRes.ProtoReflect.Descriptor instead.
func (*GetSmsMessageRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{110}
}

func (x *GetSmsMessageRes) GetSmsMessage() *SmsMessage {
	if x != nil {
		return x.SmsMessage
	}
	return nil
}

type SmsMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SmsMessageSid int64                  `protobuf:"varint,1,opt,name=sms_message_sid,json=smsMessageSid,proto3" json:"sms_message_sid,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SmsMessage) Reset() {
	*x = SmsMessage{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsMessage) ProtoMessage() {}

func (x *SmsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsMessage.ProtoReflect.Descriptor instead.
func (*SmsMessage) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{111}
}

func (x *SmsMessage) GetSmsMessageSid() int64 {
	if x != nil {
		return x.SmsMessageSid
	}
	return 0
}

func (x *SmsMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SmsIntentGroup struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SmsIntentGroupSid int64                  `protobuf:"varint,1,opt,name=sms_intent_group_sid,json=smsIntentGroupSid,proto3" json:"sms_intent_group_sid,omitempty"`
	SmsGroupSid       int64                  `protobuf:"varint,2,opt,name=sms_group_sid,json=smsGroupSid,proto3" json:"sms_group_sid,omitempty"`
	Name              string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description       string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	ActionKey         string                 `protobuf:"bytes,5,opt,name=action_key,json=actionKey,proto3" json:"action_key,omitempty"`
	ActionDetail      string                 `protobuf:"bytes,6,opt,name=action_detail,json=actionDetail,proto3" json:"action_detail,omitempty"`
	ActionTrigger     string                 `protobuf:"bytes,7,opt,name=action_trigger,json=actionTrigger,proto3" json:"action_trigger,omitempty"`
	Priority          int64                  `protobuf:"varint,8,opt,name=priority,proto3" json:"priority,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SmsIntentGroup) Reset() {
	*x = SmsIntentGroup{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmsIntentGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsIntentGroup) ProtoMessage() {}

func (x *SmsIntentGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsIntentGroup.ProtoReflect.Descriptor instead.
func (*SmsIntentGroup) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{112}
}

func (x *SmsIntentGroup) GetSmsIntentGroupSid() int64 {
	if x != nil {
		return x.SmsIntentGroupSid
	}
	return 0
}

func (x *SmsIntentGroup) GetSmsGroupSid() int64 {
	if x != nil {
		return x.SmsGroupSid
	}
	return 0
}

func (x *SmsIntentGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SmsIntentGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SmsIntentGroup) GetActionKey() string {
	if x != nil {
		return x.ActionKey
	}
	return ""
}

func (x *SmsIntentGroup) GetActionDetail() string {
	if x != nil {
		return x.ActionDetail
	}
	return ""
}

func (x *SmsIntentGroup) GetActionTrigger() string {
	if x != nil {
		return x.ActionTrigger
	}
	return ""
}

func (x *SmsIntentGroup) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type InboundSmsTask struct {
	state                protoimpl.MessageState  `protogen:"open.v1"`
	SmsReceivedRepliesId int64                   `protobuf:"varint,1,opt,name=sms_received_replies_id,json=smsReceivedRepliesId,proto3" json:"sms_received_replies_id,omitempty"`
	SrcNumber            string                  `protobuf:"bytes,2,opt,name=src_number,json=srcNumber,proto3" json:"src_number,omitempty"`
	DstNumber            string                  `protobuf:"bytes,3,opt,name=dst_number,json=dstNumber,proto3" json:"dst_number,omitempty"`
	MsgId                string                  `protobuf:"bytes,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	ReceivedReply        string                  `protobuf:"bytes,5,opt,name=received_reply,json=receivedReply,proto3" json:"received_reply,omitempty"`
	ReceivedTime         *timestamppb.Timestamp  `protobuf:"bytes,6,opt,name=received_time,json=receivedTime,proto3" json:"received_time,omitempty"`
	InboundSmsGroupId    string                  `protobuf:"bytes,7,opt,name=inbound_sms_group_id,json=inboundSmsGroupId,proto3" json:"inbound_sms_group_id,omitempty"`
	Cost                 float64                 `protobuf:"fixed64,8,opt,name=cost,proto3" json:"cost,omitempty"`
	Status               commons.SMSIBTaskStatus `protobuf:"varint,9,opt,name=status,proto3,enum=api.commons.SMSIBTaskStatus" json:"status,omitempty"`
	AnalysisReport       string                  `protobuf:"bytes,10,opt,name=analysis_report,json=analysisReport,proto3" json:"analysis_report,omitempty"`
	Units                int64                   `protobuf:"varint,11,opt,name=units,proto3" json:"units,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *InboundSmsTask) Reset() {
	*x = InboundSmsTask{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InboundSmsTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboundSmsTask) ProtoMessage() {}

func (x *InboundSmsTask) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboundSmsTask.ProtoReflect.Descriptor instead.
func (*InboundSmsTask) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{113}
}

func (x *InboundSmsTask) GetSmsReceivedRepliesId() int64 {
	if x != nil {
		return x.SmsReceivedRepliesId
	}
	return 0
}

func (x *InboundSmsTask) GetSrcNumber() string {
	if x != nil {
		return x.SrcNumber
	}
	return ""
}

func (x *InboundSmsTask) GetDstNumber() string {
	if x != nil {
		return x.DstNumber
	}
	return ""
}

func (x *InboundSmsTask) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *InboundSmsTask) GetReceivedReply() string {
	if x != nil {
		return x.ReceivedReply
	}
	return ""
}

func (x *InboundSmsTask) GetReceivedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivedTime
	}
	return nil
}

func (x *InboundSmsTask) GetInboundSmsGroupId() string {
	if x != nil {
		return x.InboundSmsGroupId
	}
	return ""
}

func (x *InboundSmsTask) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *InboundSmsTask) GetStatus() commons.SMSIBTaskStatus {
	if x != nil {
		return x.Status
	}
	return commons.SMSIBTaskStatus(0)
}

func (x *InboundSmsTask) GetAnalysisReport() string {
	if x != nil {
		return x.AnalysisReport
	}
	return ""
}

func (x *InboundSmsTask) GetUnits() int64 {
	if x != nil {
		return x.Units
	}
	return 0
}

type ListInboundSmsTasksByGroupIdsReq struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	InboundSmsGroupIdsArr []string               `protobuf:"bytes,3,rep,name=inbound_sms_group_ids_arr,json=inboundSmsGroupIdsArr,proto3" json:"inbound_sms_group_ids_arr,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ListInboundSmsTasksByGroupIdsReq) Reset() {
	*x = ListInboundSmsTasksByGroupIdsReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInboundSmsTasksByGroupIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInboundSmsTasksByGroupIdsReq) ProtoMessage() {}

func (x *ListInboundSmsTasksByGroupIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInboundSmsTasksByGroupIdsReq.ProtoReflect.Descriptor instead.
func (*ListInboundSmsTasksByGroupIdsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{114}
}

func (x *ListInboundSmsTasksByGroupIdsReq) GetInboundSmsGroupIdsArr() []string {
	if x != nil {
		return x.InboundSmsGroupIdsArr
	}
	return nil
}

type ListInboundSmsTasksByGroupIdsRes struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	InboundSmsTasks []*InboundSmsTask      `protobuf:"bytes,1,rep,name=inbound_sms_tasks,json=inboundSmsTasks,proto3" json:"inbound_sms_tasks,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ListInboundSmsTasksByGroupIdsRes) Reset() {
	*x = ListInboundSmsTasksByGroupIdsRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInboundSmsTasksByGroupIdsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInboundSmsTasksByGroupIdsRes) ProtoMessage() {}

func (x *ListInboundSmsTasksByGroupIdsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInboundSmsTasksByGroupIdsRes.ProtoReflect.Descriptor instead.
func (*ListInboundSmsTasksByGroupIdsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{115}
}

func (x *ListInboundSmsTasksByGroupIdsRes) GetInboundSmsTasks() []*InboundSmsTask {
	if x != nil {
		return x.InboundSmsTasks
	}
	return nil
}

type ReportSettings struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Enabled           bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	DeliveryMethod    string                 `protobuf:"bytes,2,opt,name=delivery_method,json=deliveryMethod,proto3" json:"delivery_method,omitempty"`
	ReportTemplateSid int64                  `protobuf:"varint,3,opt,name=report_template_sid,json=reportTemplateSid,proto3" json:"report_template_sid,omitempty"`
	SmsSettings       *SmsSettings           `protobuf:"bytes,4,opt,name=sms_settings,json=smsSettings,proto3" json:"sms_settings,omitempty"`
	EmailSettings     *EmailSettings         `protobuf:"bytes,5,opt,name=email_settings,json=emailSettings,proto3" json:"email_settings,omitempty"`
	FtpSettings       *FtpSettings           `protobuf:"bytes,6,opt,name=ftp_settings,json=ftpSettings,proto3" json:"ftp_settings,omitempty"`
	SftpSettings      *SftpSettings          `protobuf:"bytes,7,opt,name=sftp_settings,json=sftpSettings,proto3" json:"sftp_settings,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ReportSettings) Reset() {
	*x = ReportSettings{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportSettings) ProtoMessage() {}

func (x *ReportSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportSettings.ProtoReflect.Descriptor instead.
func (*ReportSettings) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{116}
}

func (x *ReportSettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ReportSettings) GetDeliveryMethod() string {
	if x != nil {
		return x.DeliveryMethod
	}
	return ""
}

func (x *ReportSettings) GetReportTemplateSid() int64 {
	if x != nil {
		return x.ReportTemplateSid
	}
	return 0
}

func (x *ReportSettings) GetSmsSettings() *SmsSettings {
	if x != nil {
		return x.SmsSettings
	}
	return nil
}

func (x *ReportSettings) GetEmailSettings() *EmailSettings {
	if x != nil {
		return x.EmailSettings
	}
	return nil
}

func (x *ReportSettings) GetFtpSettings() *FtpSettings {
	if x != nil {
		return x.FtpSettings
	}
	return nil
}

func (x *ReportSettings) GetSftpSettings() *SftpSettings {
	if x != nil {
		return x.SftpSettings
	}
	return nil
}

type SmsSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PhoneNumbers  []string               `protobuf:"bytes,1,rep,name=phone_numbers,json=phoneNumbers,proto3" json:"phone_numbers,omitempty"`
	SrcNumber     string                 `protobuf:"bytes,2,opt,name=src_number,json=srcNumber,proto3" json:"src_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SmsSettings) Reset() {
	*x = SmsSettings{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmsSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsSettings) ProtoMessage() {}

func (x *SmsSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsSettings.ProtoReflect.Descriptor instead.
func (*SmsSettings) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{117}
}

func (x *SmsSettings) GetPhoneNumbers() []string {
	if x != nil {
		return x.PhoneNumbers
	}
	return nil
}

func (x *SmsSettings) GetSrcNumber() string {
	if x != nil {
		return x.SrcNumber
	}
	return ""
}

type EmailSettings struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ReportType       string                 `protobuf:"bytes,1,opt,name=report_type,json=reportType,proto3" json:"report_type,omitempty"`
	EmailAddresses   []string               `protobuf:"bytes,2,rep,name=email_addresses,json=emailAddresses,proto3" json:"email_addresses,omitempty"`
	ReportFormat     string                 `protobuf:"bytes,3,opt,name=report_format,json=reportFormat,proto3" json:"report_format,omitempty"`
	FromEmailAddress string                 `protobuf:"bytes,4,opt,name=from_email_address,json=fromEmailAddress,proto3" json:"from_email_address,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *EmailSettings) Reset() {
	*x = EmailSettings{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmailSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailSettings) ProtoMessage() {}

func (x *EmailSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailSettings.ProtoReflect.Descriptor instead.
func (*EmailSettings) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{118}
}

func (x *EmailSettings) GetReportType() string {
	if x != nil {
		return x.ReportType
	}
	return ""
}

func (x *EmailSettings) GetEmailAddresses() []string {
	if x != nil {
		return x.EmailAddresses
	}
	return nil
}

func (x *EmailSettings) GetReportFormat() string {
	if x != nil {
		return x.ReportFormat
	}
	return ""
}

func (x *EmailSettings) GetFromEmailAddress() string {
	if x != nil {
		return x.FromEmailAddress
	}
	return ""
}

type FtpSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Passwd        string                 `protobuf:"bytes,1,opt,name=passwd,proto3" json:"passwd,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	ReportFormat  string                 `protobuf:"bytes,3,opt,name=report_format,json=reportFormat,proto3" json:"report_format,omitempty"`
	Path          string                 `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Url           string                 `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FtpSettings) Reset() {
	*x = FtpSettings{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FtpSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FtpSettings) ProtoMessage() {}

func (x *FtpSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FtpSettings.ProtoReflect.Descriptor instead.
func (*FtpSettings) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{119}
}

func (x *FtpSettings) GetPasswd() string {
	if x != nil {
		return x.Passwd
	}
	return ""
}

func (x *FtpSettings) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *FtpSettings) GetReportFormat() string {
	if x != nil {
		return x.ReportFormat
	}
	return ""
}

func (x *FtpSettings) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FtpSettings) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type SftpSettings struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Passwd             string                 `protobuf:"bytes,1,opt,name=passwd,proto3" json:"passwd,omitempty"`
	Username           string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	ReportFormat       string                 `protobuf:"bytes,3,opt,name=report_format,json=reportFormat,proto3" json:"report_format,omitempty"`
	Path               string                 `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	AuthenticationType string                 `protobuf:"bytes,5,opt,name=authentication_type,json=authenticationType,proto3" json:"authentication_type,omitempty"`
	Url                string                 `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	PrivateKey         string                 `protobuf:"bytes,7,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SftpSettings) Reset() {
	*x = SftpSettings{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SftpSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SftpSettings) ProtoMessage() {}

func (x *SftpSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SftpSettings.ProtoReflect.Descriptor instead.
func (*SftpSettings) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{120}
}

func (x *SftpSettings) GetPasswd() string {
	if x != nil {
		return x.Passwd
	}
	return ""
}

func (x *SftpSettings) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SftpSettings) GetReportFormat() string {
	if x != nil {
		return x.ReportFormat
	}
	return ""
}

func (x *SftpSettings) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SftpSettings) GetAuthenticationType() string {
	if x != nil {
		return x.AuthenticationType
	}
	return ""
}

func (x *SftpSettings) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SftpSettings) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

type SmsMamSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MamHgSid      string                 `protobuf:"bytes,1,opt,name=mam_hg_sid,json=mamHgSid,proto3" json:"mam_hg_sid,omitempty"`
	MamHgName     string                 `protobuf:"bytes,2,opt,name=mam_hg_name,json=mamHgName,proto3" json:"mam_hg_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SmsMamSettings) Reset() {
	*x = SmsMamSettings{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmsMamSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsMamSettings) ProtoMessage() {}

func (x *SmsMamSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsMamSettings.ProtoReflect.Descriptor instead.
func (*SmsMamSettings) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{121}
}

func (x *SmsMamSettings) GetMamHgSid() string {
	if x != nil {
		return x.MamHgSid
	}
	return ""
}

func (x *SmsMamSettings) GetMamHgName() string {
	if x != nil {
		return x.MamHgName
	}
	return ""
}

type MamAgentResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Status            commons.SMSMamStatus   `protobuf:"varint,2,opt,name=status,proto3,enum=api.commons.SMSMamStatus" json:"status,omitempty"`
	AgentResponseTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=agent_response_time,json=agentResponseTime,proto3" json:"agent_response_time,omitempty"`
	AgentName         string                 `protobuf:"bytes,4,opt,name=agent_name,json=agentName,proto3" json:"agent_name,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MamAgentResponse) Reset() {
	*x = MamAgentResponse{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MamAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MamAgentResponse) ProtoMessage() {}

func (x *MamAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MamAgentResponse.ProtoReflect.Descriptor instead.
func (*MamAgentResponse) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{122}
}

func (x *MamAgentResponse) GetStatus() commons.SMSMamStatus {
	if x != nil {
		return x.Status
	}
	return commons.SMSMamStatus(0)
}

func (x *MamAgentResponse) GetAgentResponseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AgentResponseTime
	}
	return nil
}

func (x *MamAgentResponse) GetAgentName() string {
	if x != nil {
		return x.AgentName
	}
	return ""
}

type StopAllOutboundSmsGroupsReq struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SmsGroupSidsArr []int64                `protobuf:"varint,2,rep,packed,name=sms_group_sids_arr,json=smsGroupSidsArr,proto3" json:"sms_group_sids_arr,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StopAllOutboundSmsGroupsReq) Reset() {
	*x = StopAllOutboundSmsGroupsReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopAllOutboundSmsGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopAllOutboundSmsGroupsReq) ProtoMessage() {}

func (x *StopAllOutboundSmsGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopAllOutboundSmsGroupsReq.ProtoReflect.Descriptor instead.
func (*StopAllOutboundSmsGroupsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{123}
}

func (x *StopAllOutboundSmsGroupsReq) GetSmsGroupSidsArr() []int64 {
	if x != nil {
		return x.SmsGroupSidsArr
	}
	return nil
}

type StopAllOutboundSmsGroupsRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopAllOutboundSmsGroupsRes) Reset() {
	*x = StopAllOutboundSmsGroupsRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopAllOutboundSmsGroupsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopAllOutboundSmsGroupsRes) ProtoMessage() {}

func (x *StopAllOutboundSmsGroupsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopAllOutboundSmsGroupsRes.ProtoReflect.Descriptor instead.
func (*StopAllOutboundSmsGroupsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{124}
}

func (x *StopAllOutboundSmsGroupsRes) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type StopAllInboundSmsGroupsReq struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	InboundSmsGroupIdsArr []string               `protobuf:"bytes,3,rep,name=inbound_sms_group_ids_arr,json=inboundSmsGroupIdsArr,proto3" json:"inbound_sms_group_ids_arr,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *StopAllInboundSmsGroupsReq) Reset() {
	*x = StopAllInboundSmsGroupsReq{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopAllInboundSmsGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopAllInboundSmsGroupsReq) ProtoMessage() {}

func (x *StopAllInboundSmsGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopAllInboundSmsGroupsReq.ProtoReflect.Descriptor instead.
func (*StopAllInboundSmsGroupsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{125}
}

func (x *StopAllInboundSmsGroupsReq) GetInboundSmsGroupIdsArr() []string {
	if x != nil {
		return x.InboundSmsGroupIdsArr
	}
	return nil
}

type StopAllInboundSmsGroupsRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopAllInboundSmsGroupsRes) Reset() {
	*x = StopAllInboundSmsGroupsRes{}
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopAllInboundSmsGroupsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopAllInboundSmsGroupsRes) ProtoMessage() {}

func (x *StopAllInboundSmsGroupsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_smsapi_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopAllInboundSmsGroupsRes.ProtoReflect.Descriptor instead.
func (*StopAllInboundSmsGroupsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_smsapi_proto_rawDescGZIP(), []int{126}
}

func (x *StopAllInboundSmsGroupsRes) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_api_v0alpha_smsapi_proto protoreflect.FileDescriptor

var file_api_v0alpha_smsapi_proto_rawDesc = []byte{
	0x0a, 0x18, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d,
	0x73, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x17, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x6d,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d,
	0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x22, 0x75, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x19, 0x73, 0x6d, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x16, 0x73, 0x6d,
	0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x16, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x3b, 0x0a, 0x0c, 0x73, 0x6d, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x0b, 0x73, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x14,
	0x73, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x12, 0x73, 0x6d, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0x90,
	0x01, 0x0a, 0x0b, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x73, 0x6d, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x6d, 0x73, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x22, 0x67, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x14, 0x73, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6d, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x6d,
	0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x22, 0x91, 0x01, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6d, 0x73, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x73, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x6d, 0x73,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x14, 0x73, 0x6d, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64,
	0x22, 0x2e, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x40, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6d, 0x73, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x73, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53,
	0x69, 0x64, 0x22, 0x2e, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x42, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x42, 0x79, 0x53, 0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x6d, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x6d,
	0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x79, 0x53, 0x69, 0x64, 0x52, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x6d, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x0b, 0x73, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x50,
	0x0a, 0x14, 0x73, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6d, 0x73, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x12, 0x73, 0x6d,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x22, 0xc6, 0x02, 0x0a, 0x11, 0x53, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x6d, 0x73, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x73, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x22, 0x6b, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x13, 0x73, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53,
	0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x11, 0x73, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x22, 0x34, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x53, 0x0a, 0x1a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x6d, 0x73, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x73, 0x6d, 0x73, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x22, 0x34,
	0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x53, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x73, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x22, 0x55, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x53, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x53, 0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x6d, 0x73,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x73, 0x6d, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64,
	0x22, 0x91, 0x03, 0x0a, 0x0a, 0x53, 0x6d, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x6d, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6d, 0x73, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x53, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x53, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x69, 0x76, 0x72,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x69, 0x76, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x73, 0x54, 0x6f, 0x6c, 0x6c, 0x46, 0x72, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x54, 0x6f, 0x6c, 0x6c, 0x46, 0x72, 0x65, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x73, 0x72, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x22,
	0x53, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x73, 0x6d,
	0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6d,
	0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x73, 0x6d, 0x73, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x22, 0x81, 0x02, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x6d, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6d, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6d, 0x73, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x76, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x76, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x72, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x32, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x6d, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x40, 0x0a, 0x18,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6d, 0x73, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x73, 0x6d, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x69, 0x64, 0x22, 0x32,
	0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xdb, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x76, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x76, 0x72, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x72, 0x63, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x40, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x6d, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6d, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53,
	0x69, 0x64, 0x22, 0x42, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x73, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x53, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6d, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6d, 0x73, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x53, 0x69, 0x64, 0x22, 0x5b, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x6d,
	0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x74, 0x6f,
	0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x41, 0x72, 0x72, 0x22, 0x34, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x13, 0x53, 0x6d, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x46, 0x0a, 0x12, 0x73, 0x6d, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6d, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x73, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x6d, 0x73, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x53, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x0f, 0x73, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x6d, 0x73, 0x5f, 0x6d, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6d, 0x73, 0x4d, 0x61, 0x6d,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x73, 0x6d, 0x73, 0x4d, 0x61, 0x6d,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x71, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x16, 0x73, 0x6d, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x13, 0x73, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x4a, 0x0a, 0x1b, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x6d,
	0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x5f, 0x61, 0x72, 0x72,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x69, 0x64, 0x73, 0x41, 0x72, 0x72, 0x22, 0x74, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x69, 0x64, 0x73, 0x52, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x16, 0x73, 0x6d, 0x73, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x13, 0x73, 0x6d, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x99, 0x07,
	0x0a, 0x0c, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22,
	0x0a, 0x0d, 0x73, 0x6d, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x53, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6d, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x6d,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74,
	0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73,
	0x65, 0x6e, 0x64, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x69, 0x64, 0x53, 0x74, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x5f, 0x63, 0x6f, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x43, 0x6f, 0x6c, 0x12, 0x4c, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x7a, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x75, 0x73, 0x65, 0x54, 0x7a, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x64, 0x61,
	0x79, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x49, 0x0a, 0x1a, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x6d, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x6d, 0x73, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64,
	0x73, 0x41, 0x72, 0x72, 0x22, 0x77, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x12, 0x59, 0x0a, 0x18, 0x73, 0x6d, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x53, 0x6d, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x57, 0x69,
	0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x14, 0x73, 0x6d, 0x73, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x47, 0x0a,
	0x21, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x6d, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x6d, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x22, 0x7e, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d,
	0x73, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x18, 0x73,
	0x6d, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6d, 0x73, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x52, 0x14, 0x73, 0x6d, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x57, 0x69, 0x74,
	0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xb1, 0x01, 0x0a, 0x14, 0x53, 0x6d, 0x73, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x46, 0x0a, 0x11, 0x73, 0x6d, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6d, 0x73, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x52, 0x0e, 0x73, 0x6d, 0x73, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x14, 0x73, 0x6d, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x53, 0x6d, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x52, 0x12, 0x73, 0x6d, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x22, 0xd1, 0x04, 0x0a, 0x0e, 0x53,
	0x6d, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x20, 0x0a,
	0x0c, 0x73, 0x6d, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x6d, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x73, 0x6d, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08,
	0x6d, 0x73, 0x67, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x73,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x63, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x43, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0f,
	0x73, 0x6d, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0d, 0x73, 0x6d, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x4b, 0x0a, 0x12, 0x6d, 0x61, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x61, 0x6d, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x6d, 0x61,
	0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xea,
	0x03, 0x0a, 0x12, 0x53, 0x6d, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73, 0x6d, 0x73, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x73, 0x6d, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x6d, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x73, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x4d,
	0x53, 0x49, 0x42, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x22, 0x2b, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xfc, 0x03, 0x0a, 0x0e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x6d, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x53, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x15,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x17, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x6d,
	0x5f, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x6d, 0x48, 0x75,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x34, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x53, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x6d, 0x73,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x73, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x22, 0xb1, 0x01,
	0x0a, 0x17, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x6e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x53, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x6d, 0x73,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x73, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x31, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x6e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x84, 0x02, 0x0a, 0x14, 0x53, 0x6d, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x72,
	0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x72, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x72,
	0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xb5, 0x01, 0x0a, 0x14,
	0x53, 0x6d, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x16, 0x73, 0x6d, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x13, 0x73, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x73,
	0x6d, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6d, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x52, 0x0e, 0x73, 0x6d, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x22, 0x8a, 0x02, 0x0a, 0x12, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6d, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6d, 0x73, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x22, 0x1c, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x22, 0x92,
	0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d,
	0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x74, 0x0a,
	0x21, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d,
	0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x1d, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x1d, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x14, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x12, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x14, 0x73, 0x6d, 0x73, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x12, 0x73, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0x8b, 0x02, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6d, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6d, 0x73, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x73,
	0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x14, 0x73, 0x6d,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53,
	0x69, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x35, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x54, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x35,
	0x0a, 0x17, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xd4, 0x01, 0x0a,
	0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d,
	0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x6d, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6d, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x6d, 0x73, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x14, 0x73, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x12, 0x44, 0x0a,
	0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0x54, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6d,
	0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x22, 0xc3, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x12, 0x51, 0x0a, 0x14, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6d, 0x73,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x49, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x12, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x14, 0x73, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x53, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x12, 0x73, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x1a, 0x49, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x49,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0f,
	0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x50, 0x0a, 0x14, 0x73, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6d, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x12, 0x73,
	0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x22, 0xd9, 0x04, 0x0a, 0x0f, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6d, 0x73, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x73, 0x6d, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53,
	0x4d, 0x53, 0x49, 0x42, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x73,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3d,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x19, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x22, 0x86, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x1e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x73, 0x6d, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x1a, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0xcc, 0x03, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x2f,
	0x0a, 0x14, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x6d, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6d, 0x73, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x4d, 0x53, 0x49, 0x42, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x73,
	0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73,
	0x6d, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0x32, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x4b, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x12, 0x2f, 0x0a, 0x14, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6d, 0x73, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x22, 0x32, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9b, 0x03, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6d, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6d, 0x73, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x4d, 0x53, 0x49, 0x42,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37,
	0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73,
	0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a,
	0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0x4b, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x12,
	0x2f, 0x0a, 0x14, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x22, 0x4c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a,
	0x14, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x88,
	0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x1e,
	0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x1a, 0x69,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x22, 0x8c, 0x01, 0x0a, 0x1d, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x1e,
	0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x1a, 0x69,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x1f, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a,
	0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x54, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x8e, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x1e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73,
	0x6d, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x1a, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x5d, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x38, 0x0a, 0x19, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x61,
	0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x41, 0x72, 0x72, 0x22,
	0x90, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x1e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x49, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x1a, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x15, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x17,
	0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6d, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6d, 0x73,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x15, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6d, 0x73,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x22, 0x49, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x14,
	0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x30, 0x0a,
	0x16, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xf2, 0x01, 0x0a, 0x0f, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x73, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73,
	0x6d, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x6d, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x6d, 0x73, 0x54,
	0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x4f, 0x6e, 0x22, 0x19, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x22,
	0x64, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x11, 0x73, 0x6d,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x73, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6d,
	0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x6d, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x6d, 0x73, 0x54, 0x61,
	0x73, 0x6b, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x32, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4a, 0x0a, 0x18,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6d, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x90, 0x01, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x6d,
	0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x73, 0x6d, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22,
	0x4a, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6d, 0x73, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6d, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53,
	0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6d,
	0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73,
	0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4e,
	0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6d, 0x73,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x79,
	0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x59,
	0x0a, 0x17, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6d,
	0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x52, 0x15, 0x73, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x73, 0x22, 0x5a, 0x0a, 0x1d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x6d,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73,
	0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x73, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x6d, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x6d, 0x73, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x49, 0x64, 0x22, 0x79, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x16, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x14, 0x73, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x22, 0x56, 0x0a,
	0x24, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x73, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d,
	0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x72,
	0x0a, 0x20, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x1d, 0x73, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x3f, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6d, 0x73,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x26, 0x47,
	0x65, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x12, 0x70, 0x0a, 0x1f, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6d, 0x73,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x1c, 0x73, 0x6d, 0x73, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0xec, 0x02, 0x0a, 0x14, 0x53, 0x6d, 0x73, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x12, 0x39, 0x0a, 0x19, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6d, 0x73, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x73,
	0x6d, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x73, 0x6d, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x64, 0x12, 0x37, 0x0a,
	0x18, 0x73, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x73, 0x6d, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x53, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x22, 0xf2, 0x01, 0x0a, 0x1c, 0x53, 0x6d, 0x73, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6d, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x22, 0x3a, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x53, 0x6d, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x6d, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x6d, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x6d,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x73,
	0x6d, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53,
	0x6d, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x73, 0x6d, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4e, 0x0a, 0x0a, 0x53, 0x6d, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6d, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x6d,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x0e, 0x53, 0x6d, 0x73, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x6d, 0x73, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x6d, 0x73,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x73, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xbe, 0x03, 0x0a, 0x0e, 0x49,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x35, 0x0a,
	0x17, 0x73, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x73, 0x6d, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6d, 0x73,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x4d, 0x53, 0x49, 0x42, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x22, 0x5c, 0x0a, 0x20, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x38, 0x0a, 0x19, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x15, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x41, 0x72, 0x72, 0x22, 0x6b, 0x0a, 0x20, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x12, 0x47, 0x0a,
	0x11, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d,
	0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d,
	0x73, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x80, 0x03, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0c,
	0x73, 0x6d, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x53, 0x6d, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x73, 0x6d,
	0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3b, 0x0a, 0x0c,
	0x66, 0x74, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x46, 0x74, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x66, 0x74,
	0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x66, 0x74,
	0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53,
	0x66, 0x74, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x73, 0x66, 0x74,
	0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x51, 0x0a, 0x0b, 0x53, 0x6d, 0x73,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x72, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xac, 0x01, 0x0a,
	0x0d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x0b,
	0x46, 0x74, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xdf, 0x01, 0x0a, 0x0c, 0x53,
	0x66, 0x74, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x4e, 0x0a, 0x0e,
	0x53, 0x6d, 0x73, 0x4d, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1c,
	0x0a, 0x0a, 0x6d, 0x61, 0x6d, 0x5f, 0x68, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x6d, 0x48, 0x67, 0x53, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0b,
	0x6d, 0x61, 0x6d, 0x5f, 0x68, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x61, 0x6d, 0x48, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb6, 0x01, 0x0a,
	0x10, 0x4d, 0x61, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x53, 0x4d, 0x53, 0x4d, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x4a, 0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6c, 0x6c,
	0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x6d, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0f, 0x73, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x73, 0x41, 0x72,
	0x72, 0x22, 0x35, 0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x4f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x56, 0x0a, 0x1a, 0x53, 0x74, 0x6f, 0x70,
	0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x38, 0x0a, 0x19, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x5f,
	0x61, 0x72, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x41, 0x72, 0x72,
	0x22, 0x34, 0x0a, 0x1a, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xb1, 0x4e, 0x0a, 0x06, 0x53, 0x6d, 0x73, 0x41, 0x70,
	0x69, 0x12, 0x8e, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x36, 0xba, 0xb8, 0x91, 0x02,
	0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70,
	0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x6d, 0x73, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x37,
	0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a,
	0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73,
	0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x6d, 0x73, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x6d, 0x73, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x92, 0x01, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x6d, 0x73, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x9a, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x42, 0x79, 0x53, 0x69, 0x64, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x73, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x79, 0x53, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x23,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x79, 0x53, 0x69, 0x64,
	0x52, 0x65, 0x73, 0x22, 0x39, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x73, 0x6d,
	0x73, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x62, 0x79, 0x73, 0x69, 0x64, 0x12, 0xa6,
	0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x02,
	0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x6d, 0x73, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x53, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8,
	0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x6d, 0x73, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a,
	0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x6d,
	0x73, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0xaa, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba,
	0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22,
	0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d,
	0x73, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x6d, 0x73, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0xa7, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x79, 0x53, 0x69, 0x64, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x79, 0x53,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x53, 0x6d, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74,
	0x73, 0x6d, 0x73, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x62, 0x79, 0x73, 0x69, 0x64, 0x12, 0x9e, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x6d, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x6d, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91,
	0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61,
	0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x6d, 0x73, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x6d, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22,
	0x3b, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01,
	0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x6d, 0x73,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0xa2, 0x01, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x6d, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x6d, 0x73, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0xa2, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x6d, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x02,
	0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69,
	0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x6d, 0x73, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x9a, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x6d,
	0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x53,
	0x69, 0x64, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x42, 0x79, 0x53, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6d, 0x73, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x73,
	0x6d, 0x73, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x62, 0x79,
	0x73, 0x69, 0x64, 0x12, 0x9a, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x6d,
	0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x39, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x6e,
	0x64, 0x73, 0x6d, 0x73, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0xa2, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x6d, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x62, 0x79, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69,
	0x64, 0x73, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x69, 0x64, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x6d, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x62, 0x79, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x69, 0x64, 0x73, 0x12, 0xaa, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x6d, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69,
	0x64, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d,
	0x73, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x6d, 0x73, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x62, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x69, 0x64, 0x73, 0x12, 0xb2, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x43, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x36, 0x3a, 0x01, 0x2a, 0x22, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x6d, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x62, 0x79, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x66, 0x6f, 0x72, 0x61, 0x75, 0x64, 0x69, 0x74, 0x12, 0xbe, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x69, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x28, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x22, 0x46, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39,
	0x3a, 0x01, 0x2a, 0x22, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x6d, 0x73,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x62, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x69, 0x64,
	0x73, 0x66, 0x6f, 0x72, 0x61, 0x75, 0x64, 0x69, 0x74, 0x12, 0xba, 0x01, 0x0a, 0x1f, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x6d, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x69, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x27, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x6d, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x45, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01,
	0x2a, 0x22, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x6d, 0x73, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x62, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x69, 0x64, 0x73, 0x66, 0x6f,
	0x72, 0x61, 0x75, 0x64, 0x69, 0x74, 0x12, 0xc6, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x6d, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x44, 0xba, 0xb8, 0x91, 0x02, 0x02,
	0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x6d, 0x73, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x8d, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x9d, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53,
	0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x22, 0x42, 0xba, 0xb8, 0x91,
	0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61,
	0x70, 0x69, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x65, 0x6e, 0x64, 0x73, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12,
	0x9b, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6d,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x22, 0x41, 0xba, 0xb8, 0x91, 0x02,
	0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70,
	0x69, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x7a, 0x0a,
	0x0b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x6d, 0x73, 0x12, 0x1b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x53, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x22, 0x31, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x6d, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x14, 0x52, 0x65,
	0x73, 0x65, 0x6e, 0x64, 0x55, 0x6e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53,
	0x6d, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x6e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x53, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x6e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3a,
	0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a,
	0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73,
	0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x75, 0x6e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x73, 0x6d, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x11, 0x53,
	0x6d, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53,
	0x6d, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x53, 0x6d, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x6d,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0xae, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a,
	0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x69, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x6d, 0x73, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0xae, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31,
	0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x69,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x6d, 0x73, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0xae, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x28,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x6d, 0x73, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x27,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a,
	0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x6d, 0x73, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12,
	0xb2, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d,
	0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x29, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x69, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x6d, 0x73, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x62, 0x79, 0x69, 0x64, 0x12, 0xa2, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x25,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8,
	0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x6d, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xa2, 0x01, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e,
	0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x69,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x6d, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xa2,
	0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a,
	0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x6d, 0x73, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x9e, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x24, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x6d, 0x73, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0xb6, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x40, 0xba, 0xb8, 0x91,
	0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61,
	0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x69, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x6d, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0xbe, 0x01,
	0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x22, 0x42, 0xba, 0xb8, 0x91, 0x02,
	0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70,
	0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x6d, 0x73,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x62, 0x79, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0xa6,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x49, 0x64, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x02,
	0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x6d, 0x73, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x62, 0x79, 0x69, 0x64, 0x12, 0xc5, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x22, 0x43, 0xba, 0xb8, 0x91, 0x02,
	0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01, 0x2a, 0x22, 0x31, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70,
	0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x6d, 0x73,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x62, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x73, 0x12,
	0x9a, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x49,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x22, 0x39, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c,
	0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x69, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x6d, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x96, 0x01, 0x0a,
	0x12, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x6d, 0x73, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x22, 0x38, 0xba, 0xb8, 0x91,
	0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61,
	0x70, 0x69, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x69, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x6d, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x3b, 0xba,
	0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22,
	0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d,
	0x73, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x6d, 0x73, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa2, 0x01, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x6d, 0x73, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0xa2, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6d,
	0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x6d, 0x73, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9e, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x02,
	0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x6d, 0x73, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x73,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a,
	0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x73, 0x6d, 0x73, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x79, 0x69, 0x64, 0x12, 0x82,
	0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x6d, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x6d, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x22, 0x33,
	0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a,
	0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73,
	0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x73, 0x6d, 0x73, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d,
	0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33,
	0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73,
	0x6d, 0x73, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x12, 0xb2, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x73, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x6d, 0x73, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x61, 0x75, 0x64, 0x69, 0x74, 0x12, 0xba, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x22, 0x41, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x73, 0x6d, 0x73,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x62, 0x79, 0x69, 0x64, 0x12, 0xcd, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6d, 0x73, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x48, 0xba, 0xb8, 0x91,
	0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x3a, 0x01, 0x2a, 0x22, 0x36, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x6d, 0x73, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0xd2, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d,
	0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d,
	0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x31,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x22, 0x47, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a,
	0x3a, 0x01, 0x2a, 0x22, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x6d, 0x73,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xda, 0x01, 0x0a, 0x23, 0x47,
	0x65, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x22, 0x49, 0xba, 0xb8,
	0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x3a, 0x01, 0x2a, 0x22, 0x37,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x73, 0x6d, 0x73, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x62, 0x79, 0x69, 0x64, 0x12, 0xc2, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x6d, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x22, 0x43, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01, 0x2a, 0x22, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x6d, 0x73, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x62, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x73, 0x12, 0xae, 0x01, 0x0a,
	0x18, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x4f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3e, 0xba,
	0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22,
	0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d,
	0x73, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x6d, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0xaa, 0x01,
	0x0a, 0x17, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x49,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x6d, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91,
	0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x6d, 0x73, 0x61,
	0x70, 0x69, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x6d, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x93, 0x01, 0x0a, 0x0f, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x0b,
	0x53, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x26, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0xa2, 0x02, 0x03, 0x41, 0x56, 0x58, 0xaa, 0x02, 0x0b, 0x41, 0x70,
	0x69, 0x2e, 0x56, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02, 0x0b, 0x41, 0x70, 0x69, 0x5c,
	0x56, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xe2, 0x02, 0x17, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x0c, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v0alpha_smsapi_proto_rawDescOnce sync.Once
	file_api_v0alpha_smsapi_proto_rawDescData = file_api_v0alpha_smsapi_proto_rawDesc
)

func file_api_v0alpha_smsapi_proto_rawDescGZIP() []byte {
	file_api_v0alpha_smsapi_proto_rawDescOnce.Do(func() {
		file_api_v0alpha_smsapi_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v0alpha_smsapi_proto_rawDescData)
	})
	return file_api_v0alpha_smsapi_proto_rawDescData
}

var file_api_v0alpha_smsapi_proto_msgTypes = make([]protoimpl.MessageInfo, 127)
var file_api_v0alpha_smsapi_proto_goTypes = []any{
	(*ListSmsTemplatesReq)(nil),                    // 0: api.v0alpha.ListSmsTemplatesReq
	(*ListSmsTemplatesRes)(nil),                    // 1: api.v0alpha.ListSmsTemplatesRes
	(*SmsTemplateWithIntents)(nil),                 // 2: api.v0alpha.SmsTemplateWithIntents
	(*SmsTemplate)(nil),                            // 3: api.v0alpha.SmsTemplate
	(*CreateSmsTemplateReq)(nil),                   // 4: api.v0alpha.CreateSmsTemplateReq
	(*CreateSmsTemplateRes)(nil),                   // 5: api.v0alpha.CreateSmsTemplateRes
	(*UpdateSmsTemplateReq)(nil),                   // 6: api.v0alpha.UpdateSmsTemplateReq
	(*UpdateSmsTemplateRes)(nil),                   // 7: api.v0alpha.UpdateSmsTemplateRes
	(*DeleteSmsTemplateReq)(nil),                   // 8: api.v0alpha.DeleteSmsTemplateReq
	(*DeleteSmsTemplateRes)(nil),                   // 9: api.v0alpha.DeleteSmsTemplateRes
	(*GetSmsTemplateBySidReq)(nil),                 // 10: api.v0alpha.GetSmsTemplateBySidReq
	(*GetSmsTemplateBySidRes)(nil),                 // 11: api.v0alpha.GetSmsTemplateBySidRes
	(*SmsIntentTemplate)(nil),                      // 12: api.v0alpha.SmsIntentTemplate
	(*ListSmsIntentTemplatesReq)(nil),              // 13: api.v0alpha.ListSmsIntentTemplatesReq
	(*ListSmsIntentTemplatesRes)(nil),              // 14: api.v0alpha.ListSmsIntentTemplatesRes
	(*UpdateSmsIntentTemplateRes)(nil),             // 15: api.v0alpha.UpdateSmsIntentTemplateRes
	(*DeleteSmsIntentTemplateReq)(nil),             // 16: api.v0alpha.DeleteSmsIntentTemplateReq
	(*DeleteSmsIntentTemplateRes)(nil),             // 17: api.v0alpha.DeleteSmsIntentTemplateRes
	(*CreateSmsIntentTemplateRes)(nil),             // 18: api.v0alpha.CreateSmsIntentTemplateRes
	(*GetSmsIntentTemplateBySidReq)(nil),           // 19: api.v0alpha.GetSmsIntentTemplateBySidReq
	(*SmsNumbers)(nil),                             // 20: api.v0alpha.SmsNumbers
	(*ListSmsSourceNumbersReq)(nil),                // 21: api.v0alpha.ListSmsSourceNumbersReq
	(*ListSmsSourceNumbersRes)(nil),                // 22: api.v0alpha.ListSmsSourceNumbersRes
	(*UpdateSmsSourceNumberReq)(nil),               // 23: api.v0alpha.UpdateSmsSourceNumberReq
	(*UpdateSmsSourceNumberRes)(nil),               // 24: api.v0alpha.UpdateSmsSourceNumberRes
	(*DeleteSmsSourceNumberReq)(nil),               // 25: api.v0alpha.DeleteSmsSourceNumberReq
	(*DeleteSmsSourceNumberRes)(nil),               // 26: api.v0alpha.DeleteSmsSourceNumberRes
	(*CreateSmsSourceNumberReq)(nil),               // 27: api.v0alpha.CreateSmsSourceNumberReq
	(*CreateSmsSourceNumberRes)(nil),               // 28: api.v0alpha.CreateSmsSourceNumberRes
	(*GetSmsSourceNumberBySidReq)(nil),             // 29: api.v0alpha.GetSmsSourceNumberBySidReq
	(*SendSmsNotificationReq)(nil),                 // 30: api.v0alpha.SendSmsNotificationReq
	(*SendSmsNotificationRes)(nil),                 // 31: api.v0alpha.SendSmsNotificationRes
	(*ListSmsGroupByFiltersReq)(nil),               // 32: api.v0alpha.ListSmsGroupByFiltersReq
	(*SmsGroupWithIntents)(nil),                    // 33: api.v0alpha.SmsGroupWithIntents
	(*ListSmsGroupByFiltersRes)(nil),               // 34: api.v0alpha.ListSmsGroupByFiltersRes
	(*ListSmsGroupsByGroupSidsReq)(nil),            // 35: api.v0alpha.ListSmsGroupsByGroupSidsReq
	(*ListSmsGroupsByGroupSidsRes)(nil),            // 36: api.v0alpha.ListSmsGroupsByGroupSidsRes
	(*SmsGroupInfo)(nil),                           // 37: api.v0alpha.SmsGroupInfo
	(*ListSmsTasksByGroupSidsReq)(nil),             // 38: api.v0alpha.ListSmsTasksByGroupSidsReq
	(*ListSmsTasksByGroupSidsRes)(nil),             // 39: api.v0alpha.ListSmsTasksByGroupSidsRes
	(*ListSmsTasksWithDetailedStatusReq)(nil),      // 40: api.v0alpha.ListSmsTasksWithDetailedStatusReq
	(*ListSmsTasksWithDetailedStatusRes)(nil),      // 41: api.v0alpha.ListSmsTasksWithDetailedStatusRes
	(*SmsTaskInfoWithReply)(nil),                   // 42: api.v0alpha.SmsTaskInfoWithReply
	(*SmsTaskInfoRes)(nil),                         // 43: api.v0alpha.SmsTaskInfoRes
	(*SmsReceivedReplies)(nil),                     // 44: api.v0alpha.SmsReceivedReplies
	(*UpdateSmsGroupRes)(nil),                      // 45: api.v0alpha.UpdateSmsGroupRes
	(*ScheduleSmsReq)(nil),                         // 46: api.v0alpha.ScheduleSmsReq
	(*ScheduleSmsRes)(nil),                         // 47: api.v0alpha.ScheduleSmsRes
	(*ResendUnconnectedSmsReq)(nil),                // 48: api.v0alpha.ResendUnconnectedSmsReq
	(*ResendUnconnectedSmsRes)(nil),                // 49: api.v0alpha.ResendUnconnectedSmsRes
	(*SmsActivitySearchReq)(nil),                   // 50: api.v0alpha.SmsActivitySearchReq
	(*SmsActivitySearchRes)(nil),                   // 51: api.v0alpha.SmsActivitySearchRes
	(*InboundSmsTemplate)(nil),                     // 52: api.v0alpha.InboundSmsTemplate
	(*ListInboundSmsTemplatesReq)(nil),             // 53: api.v0alpha.ListInboundSmsTemplatesReq
	(*ListInboundSmsTemplatesRes)(nil),             // 54: api.v0alpha.ListInboundSmsTemplatesRes
	(*InboundSmsTemplateWithIntents)(nil),          // 55: api.v0alpha.InboundSmsTemplateWithIntents
	(*UpdateInboundSmsTemplateReq)(nil),            // 56: api.v0alpha.UpdateInboundSmsTemplateReq
	(*UpdateInboundSmsTemplateRes)(nil),            // 57: api.v0alpha.UpdateInboundSmsTemplateRes
	(*DeleteInboundSmsTemplateReq)(nil),            // 58: api.v0alpha.DeleteInboundSmsTemplateReq
	(*DeleteInboundSmsTemplateRes)(nil),            // 59: api.v0alpha.DeleteInboundSmsTemplateRes
	(*CreateInboundSmsTemplateReq)(nil),            // 60: api.v0alpha.CreateInboundSmsTemplateReq
	(*CreateInboundSmsTemplateRes)(nil),            // 61: api.v0alpha.CreateInboundSmsTemplateRes
	(*GetInboundSmsTemplateByIdReq)(nil),           // 62: api.v0alpha.GetInboundSmsTemplateByIdReq
	(*GetInboundSmsTemplateByIdRes)(nil),           // 63: api.v0alpha.GetInboundSmsTemplateByIdRes
	(*InboundSmsGroupWithIntents)(nil),             // 64: api.v0alpha.InboundSmsGroupWithIntents
	(*InboundSmsGroup)(nil),                        // 65: api.v0alpha.InboundSmsGroup
	(*ListInboundSmsGroupsReq)(nil),                // 66: api.v0alpha.ListInboundSmsGroupsReq
	(*ListInboundSmsGroupsRes)(nil),                // 67: api.v0alpha.ListInboundSmsGroupsRes
	(*UpdateInboundSmsGroupReq)(nil),               // 68: api.v0alpha.UpdateInboundSmsGroupReq
	(*UpdateInboundSmsGroupRes)(nil),               // 69: api.v0alpha.UpdateInboundSmsGroupRes
	(*DeleteInboundSmsGroupReq)(nil),               // 70: api.v0alpha.DeleteInboundSmsGroupReq
	(*DeleteInboundSmsGroupRes)(nil),               // 71: api.v0alpha.DeleteInboundSmsGroupRes
	(*CreateInboundSmsGroupReq)(nil),               // 72: api.v0alpha.CreateInboundSmsGroupReq
	(*CreateInboundSmsGroupRes)(nil),               // 73: api.v0alpha.CreateInboundSmsGroupRes
	(*GetInboundSmsGroupByIdReq)(nil),              // 74: api.v0alpha.GetInboundSmsGroupByIdReq
	(*GetInboundSmsGroupByIdRes)(nil),              // 75: api.v0alpha.GetInboundSmsGroupByIdRes
	(*ListActiveInboundSmsGroupsReq)(nil),          // 76: api.v0alpha.ListActiveInboundSmsGroupsReq
	(*ListActiveInboundSmsGroupsRes)(nil),          // 77: api.v0alpha.ListActiveInboundSmsGroupsRes
	(*ListInboundSmsGroupByFiltersReq)(nil),        // 78: api.v0alpha.ListInboundSmsGroupByFiltersReq
	(*ListInboundSmsGroupByFiltersRes)(nil),        // 79: api.v0alpha.ListInboundSmsGroupByFiltersRes
	(*ListInboundSmsGroupsByGroupIdsReq)(nil),      // 80: api.v0alpha.ListInboundSmsGroupsByGroupIdsReq
	(*ListInboundSmsGroupsByGroupIdsRes)(nil),      // 81: api.v0alpha.ListInboundSmsGroupsByGroupIdsRes
	(*ScheduleInboundSmsReq)(nil),                  // 82: api.v0alpha.ScheduleInboundSmsReq
	(*ScheduleInboundSmsRes)(nil),                  // 83: api.v0alpha.ScheduleInboundSmsRes
	(*StopInboundSmsGroupReq)(nil),                 // 84: api.v0alpha.StopInboundSmsGroupReq
	(*StopInboundSmsGroupRes)(nil),                 // 85: api.v0alpha.StopInboundSmsGroupRes
	(*SmsConversation)(nil),                        // 86: api.v0alpha.SmsConversation
	(*ListSmsConversationsReq)(nil),                // 87: api.v0alpha.ListSmsConversationsReq
	(*ListSmsConversationsRes)(nil),                // 88: api.v0alpha.ListSmsConversationsRes
	(*UpdateSmsConversationReq)(nil),               // 89: api.v0alpha.UpdateSmsConversationReq
	(*UpdateSmsConversationRes)(nil),               // 90: api.v0alpha.UpdateSmsConversationRes
	(*DeleteSmsConversationReq)(nil),               // 91: api.v0alpha.DeleteSmsConversationReq
	(*DeleteSmsConversationRes)(nil),               // 92: api.v0alpha.DeleteSmsConversationRes
	(*CreateSmsConversationReq)(nil),               // 93: api.v0alpha.CreateSmsConversationReq
	(*CreateSmsConversationRes)(nil),               // 94: api.v0alpha.CreateSmsConversationRes
	(*GetSmsConversationByIdReq)(nil),              // 95: api.v0alpha.GetSmsConversationByIdReq
	(*GetSmsConversationByIdRes)(nil),              // 96: api.v0alpha.GetSmsConversationByIdRes
	(*ListSmsConversationAuditsReq)(nil),           // 97: api.v0alpha.ListSmsConversationAuditsReq
	(*ListSmsConversationAuditsRes)(nil),           // 98: api.v0alpha.ListSmsConversationAuditsRes
	(*CreateSmsConversationAuditRes)(nil),          // 99: api.v0alpha.CreateSmsConversationAuditRes
	(*GetSmsConversationAuditByIdReq)(nil),         // 100: api.v0alpha.GetSmsConversationAuditByIdReq
	(*GetSmsConversationAuditByIdRes)(nil),         // 101: api.v0alpha.GetSmsConversationAuditByIdRes
	(*ListSmsConversationAssignedAgentsReq)(nil),   // 102: api.v0alpha.ListSmsConversationAssignedAgentsReq
	(*ListSmsConversationAssignedAgentsRes)(nil),   // 103: api.v0alpha.ListSmsConversationAssignedAgentsRes
	(*CreateSmsConversationAssignedAgentRes)(nil),  // 104: api.v0alpha.CreateSmsConversationAssignedAgentRes
	(*GetSmsConversationAssignedAgentByIdReq)(nil), // 105: api.v0alpha.GetSmsConversationAssignedAgentByIdReq
	(*GetSmsConversationAssignedAgentByIdRes)(nil), // 106: api.v0alpha.GetSmsConversationAssignedAgentByIdRes
	(*SmsConversationAudit)(nil),                   // 107: api.v0alpha.SmsConversationAudit
	(*SmsConversationAssignedAgent)(nil),           // 108: api.v0alpha.SmsConversationAssignedAgent
	(*GetSmsMessageReq)(nil),                       // 109: api.v0alpha.GetSmsMessageReq
	(*GetSmsMessageRes)(nil),                       // 110: api.v0alpha.GetSmsMessageRes
	(*SmsMessage)(nil),                             // 111: api.v0alpha.SmsMessage
	(*SmsIntentGroup)(nil),                         // 112: api.v0alpha.SmsIntentGroup
	(*InboundSmsTask)(nil),                         // 113: api.v0alpha.InboundSmsTask
	(*ListInboundSmsTasksByGroupIdsReq)(nil),       // 114: api.v0alpha.ListInboundSmsTasksByGroupIdsReq
	(*ListInboundSmsTasksByGroupIdsRes)(nil),       // 115: api.v0alpha.ListInboundSmsTasksByGroupIdsRes
	(*ReportSettings)(nil),                         // 116: api.v0alpha.ReportSettings
	(*SmsSettings)(nil),                            // 117: api.v0alpha.SmsSettings
	(*EmailSettings)(nil),                          // 118: api.v0alpha.EmailSettings
	(*FtpSettings)(nil),                            // 119: api.v0alpha.FtpSettings
	(*SftpSettings)(nil),                           // 120: api.v0alpha.SftpSettings
	(*SmsMamSettings)(nil),                         // 121: api.v0alpha.SmsMamSettings
	(*MamAgentResponse)(nil),                       // 122: api.v0alpha.MamAgentResponse
	(*StopAllOutboundSmsGroupsReq)(nil),            // 123: api.v0alpha.StopAllOutboundSmsGroupsReq
	(*StopAllOutboundSmsGroupsRes)(nil),            // 124: api.v0alpha.StopAllOutboundSmsGroupsRes
	(*StopAllInboundSmsGroupsReq)(nil),             // 125: api.v0alpha.StopAllInboundSmsGroupsReq
	(*StopAllInboundSmsGroupsRes)(nil),             // 126: api.v0alpha.StopAllInboundSmsGroupsRes
	(*timestamppb.Timestamp)(nil),                  // 127: google.protobuf.Timestamp
	(*wrapperspb.StringValue)(nil),                 // 128: google.protobuf.StringValue
	(*wrapperspb.Int64Value)(nil),                  // 129: google.protobuf.Int64Value
	(commons.SMSIBTaskStatus)(0),                   // 130: api.commons.SMSIBTaskStatus
	(commons.SMSIBGroupStatus)(0),                  // 131: api.commons.SMSIBGroupStatus
	(commons.SMSMamStatus)(0),                      // 132: api.commons.SMSMamStatus
}
var file_api_v0alpha_smsapi_proto_depIdxs = []int32{
	2,   // 0: api.v0alpha.ListSmsTemplatesRes.sms_template_with_intents:type_name -> api.v0alpha.SmsTemplateWithIntents
	3,   // 1: api.v0alpha.SmsTemplateWithIntents.sms_template:type_name -> api.v0alpha.SmsTemplate
	12,  // 2: api.v0alpha.SmsTemplateWithIntents.sms_intent_templates:type_name -> api.v0alpha.SmsIntentTemplate
	127, // 3: api.v0alpha.SmsTemplate.last_updated:type_name -> google.protobuf.Timestamp
	3,   // 4: api.v0alpha.GetSmsTemplateBySidRes.sms_template:type_name -> api.v0alpha.SmsTemplate
	12,  // 5: api.v0alpha.GetSmsTemplateBySidRes.sms_intent_templates:type_name -> api.v0alpha.SmsIntentTemplate
	127, // 6: api.v0alpha.SmsIntentTemplate.last_updated:type_name -> google.protobuf.Timestamp
	12,  // 7: api.v0alpha.ListSmsIntentTemplatesRes.sms_intent_template:type_name -> api.v0alpha.SmsIntentTemplate
	128, // 8: api.v0alpha.SmsNumbers.ivr_reference:type_name -> google.protobuf.StringValue
	127, // 9: api.v0alpha.SmsNumbers.last_updated:type_name -> google.protobuf.Timestamp
	20,  // 10: api.v0alpha.ListSmsSourceNumbersRes.sms_numbers:type_name -> api.v0alpha.SmsNumbers
	127, // 11: api.v0alpha.ListSmsGroupByFiltersReq.search_from:type_name -> google.protobuf.Timestamp
	127, // 12: api.v0alpha.ListSmsGroupByFiltersReq.search_to:type_name -> google.protobuf.Timestamp
	37,  // 13: api.v0alpha.SmsGroupWithIntents.sms_group_info_res:type_name -> api.v0alpha.SmsGroupInfo
	112, // 14: api.v0alpha.SmsGroupWithIntents.sms_intent_groups:type_name -> api.v0alpha.SmsIntentGroup
	121, // 15: api.v0alpha.SmsGroupWithIntents.sms_mam_settings:type_name -> api.v0alpha.SmsMamSettings
	33,  // 16: api.v0alpha.ListSmsGroupByFiltersRes.sms_group_with_intents:type_name -> api.v0alpha.SmsGroupWithIntents
	33,  // 17: api.v0alpha.ListSmsGroupsByGroupSidsRes.sms_group_with_intents:type_name -> api.v0alpha.SmsGroupWithIntents
	127, // 18: api.v0alpha.SmsGroupInfo.start_time:type_name -> google.protobuf.Timestamp
	127, // 19: api.v0alpha.SmsGroupInfo.stop_time:type_name -> google.protobuf.Timestamp
	128, // 20: api.v0alpha.SmsGroupInfo.contact_group_sid_str:type_name -> google.protobuf.StringValue
	128, // 21: api.v0alpha.SmsGroupInfo.phone_num_col:type_name -> google.protobuf.StringValue
	128, // 22: api.v0alpha.SmsGroupInfo.use_tz_restrictions:type_name -> google.protobuf.StringValue
	127, // 23: api.v0alpha.SmsGroupInfo.date_created:type_name -> google.protobuf.Timestamp
	42,  // 24: api.v0alpha.ListSmsTasksByGroupSidsRes.sms_task_info_with_reply:type_name -> api.v0alpha.SmsTaskInfoWithReply
	42,  // 25: api.v0alpha.ListSmsTasksWithDetailedStatusRes.sms_task_info_with_reply:type_name -> api.v0alpha.SmsTaskInfoWithReply
	43,  // 26: api.v0alpha.SmsTaskInfoWithReply.sms_task_info_res:type_name -> api.v0alpha.SmsTaskInfoRes
	44,  // 27: api.v0alpha.SmsTaskInfoWithReply.sms_received_replies:type_name -> api.v0alpha.SmsReceivedReplies
	128, // 28: api.v0alpha.SmsTaskInfoRes.msg_uuid:type_name -> google.protobuf.StringValue
	127, // 29: api.v0alpha.SmsTaskInfoRes.msg_time:type_name -> google.protobuf.Timestamp
	128, // 30: api.v0alpha.SmsTaskInfoRes.phone_num_col:type_name -> google.protobuf.StringValue
	129, // 31: api.v0alpha.SmsTaskInfoRes.sms_task_parent:type_name -> google.protobuf.Int64Value
	122, // 32: api.v0alpha.SmsTaskInfoRes.mam_agent_response:type_name -> api.v0alpha.MamAgentResponse
	127, // 33: api.v0alpha.SmsReceivedReplies.received_time:type_name -> google.protobuf.Timestamp
	130, // 34: api.v0alpha.SmsReceivedReplies.status:type_name -> api.commons.SMSIBTaskStatus
	127, // 35: api.v0alpha.ScheduleSmsReq.start_time:type_name -> google.protobuf.Timestamp
	127, // 36: api.v0alpha.ScheduleSmsReq.stop_time:type_name -> google.protobuf.Timestamp
	127, // 37: api.v0alpha.ResendUnconnectedSmsReq.start_time:type_name -> google.protobuf.Timestamp
	127, // 38: api.v0alpha.ResendUnconnectedSmsReq.stop_time:type_name -> google.protobuf.Timestamp
	127, // 39: api.v0alpha.SmsActivitySearchReq.from_date:type_name -> google.protobuf.Timestamp
	127, // 40: api.v0alpha.SmsActivitySearchReq.to_date:type_name -> google.protobuf.Timestamp
	33,  // 41: api.v0alpha.SmsActivitySearchRes.sms_group_with_intents:type_name -> api.v0alpha.SmsGroupWithIntents
	43,  // 42: api.v0alpha.SmsActivitySearchRes.sms_task_info_res:type_name -> api.v0alpha.SmsTaskInfoRes
	116, // 43: api.v0alpha.InboundSmsTemplate.report_settings:type_name -> api.v0alpha.ReportSettings
	127, // 44: api.v0alpha.InboundSmsTemplate.last_updated:type_name -> google.protobuf.Timestamp
	55,  // 45: api.v0alpha.ListInboundSmsTemplatesRes.inbound_sms_template_with_intents:type_name -> api.v0alpha.InboundSmsTemplateWithIntents
	52,  // 46: api.v0alpha.InboundSmsTemplateWithIntents.inbound_sms_template:type_name -> api.v0alpha.InboundSmsTemplate
	12,  // 47: api.v0alpha.InboundSmsTemplateWithIntents.sms_intent_templates:type_name -> api.v0alpha.SmsIntentTemplate
	116, // 48: api.v0alpha.UpdateInboundSmsTemplateReq.report_settings:type_name -> api.v0alpha.ReportSettings
	116, // 49: api.v0alpha.CreateInboundSmsTemplateReq.report_settings:type_name -> api.v0alpha.ReportSettings
	52,  // 50: api.v0alpha.GetInboundSmsTemplateByIdRes.inbound_sms_template:type_name -> api.v0alpha.InboundSmsTemplate
	12,  // 51: api.v0alpha.GetInboundSmsTemplateByIdRes.sms_intent_templates:type_name -> api.v0alpha.SmsIntentTemplate
	65,  // 52: api.v0alpha.InboundSmsGroupWithIntents.inbound_sms_group:type_name -> api.v0alpha.InboundSmsGroup
	12,  // 53: api.v0alpha.InboundSmsGroupWithIntents.sms_intent_templates:type_name -> api.v0alpha.SmsIntentTemplate
	131, // 54: api.v0alpha.InboundSmsGroup.status:type_name -> api.commons.SMSIBGroupStatus
	127, // 55: api.v0alpha.InboundSmsGroup.start_time:type_name -> google.protobuf.Timestamp
	127, // 56: api.v0alpha.InboundSmsGroup.stop_time:type_name -> google.protobuf.Timestamp
	116, // 57: api.v0alpha.InboundSmsGroup.report_settings:type_name -> api.v0alpha.ReportSettings
	127, // 58: api.v0alpha.InboundSmsGroup.date_created:type_name -> google.protobuf.Timestamp
	64,  // 59: api.v0alpha.ListInboundSmsGroupsRes.inbound_sms_group_with_intents:type_name -> api.v0alpha.InboundSmsGroupWithIntents
	131, // 60: api.v0alpha.UpdateInboundSmsGroupReq.status:type_name -> api.commons.SMSIBGroupStatus
	127, // 61: api.v0alpha.UpdateInboundSmsGroupReq.start_time:type_name -> google.protobuf.Timestamp
	127, // 62: api.v0alpha.UpdateInboundSmsGroupReq.stop_time:type_name -> google.protobuf.Timestamp
	116, // 63: api.v0alpha.UpdateInboundSmsGroupReq.report_settings:type_name -> api.v0alpha.ReportSettings
	131, // 64: api.v0alpha.CreateInboundSmsGroupReq.status:type_name -> api.commons.SMSIBGroupStatus
	127, // 65: api.v0alpha.CreateInboundSmsGroupReq.start_time:type_name -> google.protobuf.Timestamp
	127, // 66: api.v0alpha.CreateInboundSmsGroupReq.stop_time:type_name -> google.protobuf.Timestamp
	116, // 67: api.v0alpha.CreateInboundSmsGroupReq.report_settings:type_name -> api.v0alpha.ReportSettings
	64,  // 68: api.v0alpha.GetInboundSmsGroupByIdRes.inbound_sms_group_with_intents:type_name -> api.v0alpha.InboundSmsGroupWithIntents
	64,  // 69: api.v0alpha.ListActiveInboundSmsGroupsRes.inbound_sms_group_with_intents:type_name -> api.v0alpha.InboundSmsGroupWithIntents
	127, // 70: api.v0alpha.ListInboundSmsGroupByFiltersReq.search_from:type_name -> google.protobuf.Timestamp
	127, // 71: api.v0alpha.ListInboundSmsGroupByFiltersReq.search_to:type_name -> google.protobuf.Timestamp
	64,  // 72: api.v0alpha.ListInboundSmsGroupByFiltersRes.inbound_sms_group_with_intents:type_name -> api.v0alpha.InboundSmsGroupWithIntents
	64,  // 73: api.v0alpha.ListInboundSmsGroupsByGroupIdsRes.inbound_sms_group_with_intents:type_name -> api.v0alpha.InboundSmsGroupWithIntents
	129, // 74: api.v0alpha.SmsConversation.sms_task_parent:type_name -> google.protobuf.Int64Value
	127, // 75: api.v0alpha.SmsConversation.created_on:type_name -> google.protobuf.Timestamp
	86,  // 76: api.v0alpha.ListSmsConversationsRes.sms_conversations:type_name -> api.v0alpha.SmsConversation
	129, // 77: api.v0alpha.UpdateSmsConversationReq.sms_task_parent:type_name -> google.protobuf.Int64Value
	129, // 78: api.v0alpha.CreateSmsConversationReq.sms_task_parent:type_name -> google.protobuf.Int64Value
	86,  // 79: api.v0alpha.GetSmsConversationByIdRes.sms_conversation:type_name -> api.v0alpha.SmsConversation
	107, // 80: api.v0alpha.ListSmsConversationAuditsRes.sms_conversation_audits:type_name -> api.v0alpha.SmsConversationAudit
	107, // 81: api.v0alpha.GetSmsConversationAuditByIdRes.sms_conversation_audit:type_name -> api.v0alpha.SmsConversationAudit
	108, // 82: api.v0alpha.ListSmsConversationAssignedAgentsRes.sms_conversation_assigned_agents:type_name -> api.v0alpha.SmsConversationAssignedAgent
	108, // 83: api.v0alpha.GetSmsConversationAssignedAgentByIdRes.sms_conversation_assigned_agent:type_name -> api.v0alpha.SmsConversationAssignedAgent
	127, // 84: api.v0alpha.SmsConversationAudit.created_on:type_name -> google.protobuf.Timestamp
	127, // 85: api.v0alpha.SmsConversationAssignedAgent.created_on:type_name -> google.protobuf.Timestamp
	111, // 86: api.v0alpha.GetSmsMessageRes.sms_message:type_name -> api.v0alpha.SmsMessage
	127, // 87: api.v0alpha.InboundSmsTask.received_time:type_name -> google.protobuf.Timestamp
	130, // 88: api.v0alpha.InboundSmsTask.status:type_name -> api.commons.SMSIBTaskStatus
	113, // 89: api.v0alpha.ListInboundSmsTasksByGroupIdsRes.inbound_sms_tasks:type_name -> api.v0alpha.InboundSmsTask
	117, // 90: api.v0alpha.ReportSettings.sms_settings:type_name -> api.v0alpha.SmsSettings
	118, // 91: api.v0alpha.ReportSettings.email_settings:type_name -> api.v0alpha.EmailSettings
	119, // 92: api.v0alpha.ReportSettings.ftp_settings:type_name -> api.v0alpha.FtpSettings
	120, // 93: api.v0alpha.ReportSettings.sftp_settings:type_name -> api.v0alpha.SftpSettings
	132, // 94: api.v0alpha.MamAgentResponse.status:type_name -> api.commons.SMSMamStatus
	127, // 95: api.v0alpha.MamAgentResponse.agent_response_time:type_name -> google.protobuf.Timestamp
	0,   // 96: api.v0alpha.SmsApi.ListSmsTemplates:input_type -> api.v0alpha.ListSmsTemplatesReq
	4,   // 97: api.v0alpha.SmsApi.CreateSmsTemplate:input_type -> api.v0alpha.CreateSmsTemplateReq
	6,   // 98: api.v0alpha.SmsApi.UpdateSmsTemplate:input_type -> api.v0alpha.UpdateSmsTemplateReq
	8,   // 99: api.v0alpha.SmsApi.DeleteSmsTemplate:input_type -> api.v0alpha.DeleteSmsTemplateReq
	10,  // 100: api.v0alpha.SmsApi.GetSmsTemplateBySid:input_type -> api.v0alpha.GetSmsTemplateBySidReq
	13,  // 101: api.v0alpha.SmsApi.ListSmsIntentTemplates:input_type -> api.v0alpha.ListSmsIntentTemplatesReq
	12,  // 102: api.v0alpha.SmsApi.CreateSmsIntentTemplate:input_type -> api.v0alpha.SmsIntentTemplate
	12,  // 103: api.v0alpha.SmsApi.UpdateSmsIntentTemplate:input_type -> api.v0alpha.SmsIntentTemplate
	16,  // 104: api.v0alpha.SmsApi.DeleteSmsIntentTemplate:input_type -> api.v0alpha.DeleteSmsIntentTemplateReq
	19,  // 105: api.v0alpha.SmsApi.GetSmsIntentTemplateBySid:input_type -> api.v0alpha.GetSmsIntentTemplateBySidReq
	21,  // 106: api.v0alpha.SmsApi.ListSmsSourceNumbers:input_type -> api.v0alpha.ListSmsSourceNumbersReq
	27,  // 107: api.v0alpha.SmsApi.CreateSmsSourceNumber:input_type -> api.v0alpha.CreateSmsSourceNumberReq
	23,  // 108: api.v0alpha.SmsApi.UpdateSmsSourceNumber:input_type -> api.v0alpha.UpdateSmsSourceNumberReq
	25,  // 109: api.v0alpha.SmsApi.DeleteSmsSourceNumber:input_type -> api.v0alpha.DeleteSmsSourceNumberReq
	29,  // 110: api.v0alpha.SmsApi.GetSmsSourceNumberBySid:input_type -> api.v0alpha.GetSmsSourceNumberBySidReq
	30,  // 111: api.v0alpha.SmsApi.SendSmsNotification:input_type -> api.v0alpha.SendSmsNotificationReq
	32,  // 112: api.v0alpha.SmsApi.ListSmsGroupByFilters:input_type -> api.v0alpha.ListSmsGroupByFiltersReq
	35,  // 113: api.v0alpha.SmsApi.ListSmsGroupsByGroupSids:input_type -> api.v0alpha.ListSmsGroupsByGroupSidsReq
	38,  // 114: api.v0alpha.SmsApi.ListSmsTasksByGroupSids:input_type -> api.v0alpha.ListSmsTasksByGroupSidsReq
	32,  // 115: api.v0alpha.SmsApi.ListSmsGroupByFiltersForAudit:input_type -> api.v0alpha.ListSmsGroupByFiltersReq
	35,  // 116: api.v0alpha.SmsApi.ListSmsGroupsByGroupSidsForAudit:input_type -> api.v0alpha.ListSmsGroupsByGroupSidsReq
	38,  // 117: api.v0alpha.SmsApi.ListSmsTasksByGroupSidsForAudit:input_type -> api.v0alpha.ListSmsTasksByGroupSidsReq
	40,  // 118: api.v0alpha.SmsApi.ListSmsTasksWithDetailedStatus:input_type -> api.v0alpha.ListSmsTasksWithDetailedStatusReq
	37,  // 119: api.v0alpha.SmsApi.UpdateSmsGroupStatus:input_type -> api.v0alpha.SmsGroupInfo
	37,  // 120: api.v0alpha.SmsApi.UpdateSmsGroupSendsPerMinute:input_type -> api.v0alpha.SmsGroupInfo
	37,  // 121: api.v0alpha.SmsApi.UpdateSmsGroupScheduleTimes:input_type -> api.v0alpha.SmsGroupInfo
	46,  // 122: api.v0alpha.SmsApi.ScheduleSms:input_type -> api.v0alpha.ScheduleSmsReq
	48,  // 123: api.v0alpha.SmsApi.ResendUnconnectedSms:input_type -> api.v0alpha.ResendUnconnectedSmsReq
	50,  // 124: api.v0alpha.SmsApi.SmsActivitySearch:input_type -> api.v0alpha.SmsActivitySearchReq
	60,  // 125: api.v0alpha.SmsApi.CreateInboundSmsTemplate:input_type -> api.v0alpha.CreateInboundSmsTemplateReq
	56,  // 126: api.v0alpha.SmsApi.UpdateInboundSmsTemplate:input_type -> api.v0alpha.UpdateInboundSmsTemplateReq
	58,  // 127: api.v0alpha.SmsApi.DeleteInboundSmsTemplate:input_type -> api.v0alpha.DeleteInboundSmsTemplateReq
	53,  // 128: api.v0alpha.SmsApi.ListInboundSmsTemplates:input_type -> api.v0alpha.ListInboundSmsTemplatesReq
	62,  // 129: api.v0alpha.SmsApi.GetInboundSmsTemplateById:input_type -> api.v0alpha.GetInboundSmsTemplateByIdReq
	72,  // 130: api.v0alpha.SmsApi.CreateInboundSmsGroup:input_type -> api.v0alpha.CreateInboundSmsGroupReq
	68,  // 131: api.v0alpha.SmsApi.UpdateInboundSmsGroup:input_type -> api.v0alpha.UpdateInboundSmsGroupReq
	70,  // 132: api.v0alpha.SmsApi.DeleteInboundSmsGroup:input_type -> api.v0alpha.DeleteInboundSmsGroupReq
	66,  // 133: api.v0alpha.SmsApi.ListInboundSmsGroups:input_type -> api.v0alpha.ListInboundSmsGroupsReq
	76,  // 134: api.v0alpha.SmsApi.ListActiveInboundSmsGroups:input_type -> api.v0alpha.ListActiveInboundSmsGroupsReq
	78,  // 135: api.v0alpha.SmsApi.ListInboundSmsGroupByFilters:input_type -> api.v0alpha.ListInboundSmsGroupByFiltersReq
	74,  // 136: api.v0alpha.SmsApi.GetInboundSmsGroupById:input_type -> api.v0alpha.GetInboundSmsGroupByIdReq
	80,  // 137: api.v0alpha.SmsApi.ListInboundSmsGroupsByGroupIds:input_type -> api.v0alpha.ListInboundSmsGroupsByGroupIdsReq
	84,  // 138: api.v0alpha.SmsApi.StopInboundSmsGroup:input_type -> api.v0alpha.StopInboundSmsGroupReq
	82,  // 139: api.v0alpha.SmsApi.ScheduleInboundSms:input_type -> api.v0alpha.ScheduleInboundSmsReq
	93,  // 140: api.v0alpha.SmsApi.CreateSmsConversation:input_type -> api.v0alpha.CreateSmsConversationReq
	89,  // 141: api.v0alpha.SmsApi.UpdateSmsConversation:input_type -> api.v0alpha.UpdateSmsConversationReq
	91,  // 142: api.v0alpha.SmsApi.DeleteSmsConversation:input_type -> api.v0alpha.DeleteSmsConversationReq
	87,  // 143: api.v0alpha.SmsApi.ListSmsConversations:input_type -> api.v0alpha.ListSmsConversationsReq
	95,  // 144: api.v0alpha.SmsApi.GetSmsConversationById:input_type -> api.v0alpha.GetSmsConversationByIdReq
	109, // 145: api.v0alpha.SmsApi.GetSmsMessage:input_type -> api.v0alpha.GetSmsMessageReq
	107, // 146: api.v0alpha.SmsApi.CreateSmsConversationAudit:input_type -> api.v0alpha.SmsConversationAudit
	97,  // 147: api.v0alpha.SmsApi.ListSmsConversationAudits:input_type -> api.v0alpha.ListSmsConversationAuditsReq
	100, // 148: api.v0alpha.SmsApi.GetSmsConversationAuditById:input_type -> api.v0alpha.GetSmsConversationAuditByIdReq
	108, // 149: api.v0alpha.SmsApi.CreateSmsConversationAssignedAgent:input_type -> api.v0alpha.SmsConversationAssignedAgent
	102, // 150: api.v0alpha.SmsApi.ListSmsConversationAssignedAgents:input_type -> api.v0alpha.ListSmsConversationAssignedAgentsReq
	105, // 151: api.v0alpha.SmsApi.GetSmsConversationAssignedAgentById:input_type -> api.v0alpha.GetSmsConversationAssignedAgentByIdReq
	114, // 152: api.v0alpha.SmsApi.ListInboundSmsTasksByGroupIds:input_type -> api.v0alpha.ListInboundSmsTasksByGroupIdsReq
	123, // 153: api.v0alpha.SmsApi.StopAllOutboundSmsGroups:input_type -> api.v0alpha.StopAllOutboundSmsGroupsReq
	125, // 154: api.v0alpha.SmsApi.StopAllInboundSmsGroups:input_type -> api.v0alpha.StopAllInboundSmsGroupsReq
	1,   // 155: api.v0alpha.SmsApi.ListSmsTemplates:output_type -> api.v0alpha.ListSmsTemplatesRes
	5,   // 156: api.v0alpha.SmsApi.CreateSmsTemplate:output_type -> api.v0alpha.CreateSmsTemplateRes
	7,   // 157: api.v0alpha.SmsApi.UpdateSmsTemplate:output_type -> api.v0alpha.UpdateSmsTemplateRes
	9,   // 158: api.v0alpha.SmsApi.DeleteSmsTemplate:output_type -> api.v0alpha.DeleteSmsTemplateRes
	11,  // 159: api.v0alpha.SmsApi.GetSmsTemplateBySid:output_type -> api.v0alpha.GetSmsTemplateBySidRes
	14,  // 160: api.v0alpha.SmsApi.ListSmsIntentTemplates:output_type -> api.v0alpha.ListSmsIntentTemplatesRes
	18,  // 161: api.v0alpha.SmsApi.CreateSmsIntentTemplate:output_type -> api.v0alpha.CreateSmsIntentTemplateRes
	15,  // 162: api.v0alpha.SmsApi.UpdateSmsIntentTemplate:output_type -> api.v0alpha.UpdateSmsIntentTemplateRes
	17,  // 163: api.v0alpha.SmsApi.DeleteSmsIntentTemplate:output_type -> api.v0alpha.DeleteSmsIntentTemplateRes
	12,  // 164: api.v0alpha.SmsApi.GetSmsIntentTemplateBySid:output_type -> api.v0alpha.SmsIntentTemplate
	22,  // 165: api.v0alpha.SmsApi.ListSmsSourceNumbers:output_type -> api.v0alpha.ListSmsSourceNumbersRes
	28,  // 166: api.v0alpha.SmsApi.CreateSmsSourceNumber:output_type -> api.v0alpha.CreateSmsSourceNumberRes
	24,  // 167: api.v0alpha.SmsApi.UpdateSmsSourceNumber:output_type -> api.v0alpha.UpdateSmsSourceNumberRes
	26,  // 168: api.v0alpha.SmsApi.DeleteSmsSourceNumber:output_type -> api.v0alpha.DeleteSmsSourceNumberRes
	20,  // 169: api.v0alpha.SmsApi.GetSmsSourceNumberBySid:output_type -> api.v0alpha.SmsNumbers
	31,  // 170: api.v0alpha.SmsApi.SendSmsNotification:output_type -> api.v0alpha.SendSmsNotificationRes
	34,  // 171: api.v0alpha.SmsApi.ListSmsGroupByFilters:output_type -> api.v0alpha.ListSmsGroupByFiltersRes
	36,  // 172: api.v0alpha.SmsApi.ListSmsGroupsByGroupSids:output_type -> api.v0alpha.ListSmsGroupsByGroupSidsRes
	39,  // 173: api.v0alpha.SmsApi.ListSmsTasksByGroupSids:output_type -> api.v0alpha.ListSmsTasksByGroupSidsRes
	34,  // 174: api.v0alpha.SmsApi.ListSmsGroupByFiltersForAudit:output_type -> api.v0alpha.ListSmsGroupByFiltersRes
	36,  // 175: api.v0alpha.SmsApi.ListSmsGroupsByGroupSidsForAudit:output_type -> api.v0alpha.ListSmsGroupsByGroupSidsRes
	39,  // 176: api.v0alpha.SmsApi.ListSmsTasksByGroupSidsForAudit:output_type -> api.v0alpha.ListSmsTasksByGroupSidsRes
	41,  // 177: api.v0alpha.SmsApi.ListSmsTasksWithDetailedStatus:output_type -> api.v0alpha.ListSmsTasksWithDetailedStatusRes
	45,  // 178: api.v0alpha.SmsApi.UpdateSmsGroupStatus:output_type -> api.v0alpha.UpdateSmsGroupRes
	45,  // 179: api.v0alpha.SmsApi.UpdateSmsGroupSendsPerMinute:output_type -> api.v0alpha.UpdateSmsGroupRes
	45,  // 180: api.v0alpha.SmsApi.UpdateSmsGroupScheduleTimes:output_type -> api.v0alpha.UpdateSmsGroupRes
	47,  // 181: api.v0alpha.SmsApi.ScheduleSms:output_type -> api.v0alpha.ScheduleSmsRes
	49,  // 182: api.v0alpha.SmsApi.ResendUnconnectedSms:output_type -> api.v0alpha.ResendUnconnectedSmsRes
	51,  // 183: api.v0alpha.SmsApi.SmsActivitySearch:output_type -> api.v0alpha.SmsActivitySearchRes
	61,  // 184: api.v0alpha.SmsApi.CreateInboundSmsTemplate:output_type -> api.v0alpha.CreateInboundSmsTemplateRes
	57,  // 185: api.v0alpha.SmsApi.UpdateInboundSmsTemplate:output_type -> api.v0alpha.UpdateInboundSmsTemplateRes
	59,  // 186: api.v0alpha.SmsApi.DeleteInboundSmsTemplate:output_type -> api.v0alpha.DeleteInboundSmsTemplateRes
	54,  // 187: api.v0alpha.SmsApi.ListInboundSmsTemplates:output_type -> api.v0alpha.ListInboundSmsTemplatesRes
	63,  // 188: api.v0alpha.SmsApi.GetInboundSmsTemplateById:output_type -> api.v0alpha.GetInboundSmsTemplateByIdRes
	73,  // 189: api.v0alpha.SmsApi.CreateInboundSmsGroup:output_type -> api.v0alpha.CreateInboundSmsGroupRes
	69,  // 190: api.v0alpha.SmsApi.UpdateInboundSmsGroup:output_type -> api.v0alpha.UpdateInboundSmsGroupRes
	71,  // 191: api.v0alpha.SmsApi.DeleteInboundSmsGroup:output_type -> api.v0alpha.DeleteInboundSmsGroupRes
	67,  // 192: api.v0alpha.SmsApi.ListInboundSmsGroups:output_type -> api.v0alpha.ListInboundSmsGroupsRes
	77,  // 193: api.v0alpha.SmsApi.ListActiveInboundSmsGroups:output_type -> api.v0alpha.ListActiveInboundSmsGroupsRes
	79,  // 194: api.v0alpha.SmsApi.ListInboundSmsGroupByFilters:output_type -> api.v0alpha.ListInboundSmsGroupByFiltersRes
	75,  // 195: api.v0alpha.SmsApi.GetInboundSmsGroupById:output_type -> api.v0alpha.GetInboundSmsGroupByIdRes
	81,  // 196: api.v0alpha.SmsApi.ListInboundSmsGroupsByGroupIds:output_type -> api.v0alpha.ListInboundSmsGroupsByGroupIdsRes
	85,  // 197: api.v0alpha.SmsApi.StopInboundSmsGroup:output_type -> api.v0alpha.StopInboundSmsGroupRes
	83,  // 198: api.v0alpha.SmsApi.ScheduleInboundSms:output_type -> api.v0alpha.ScheduleInboundSmsRes
	94,  // 199: api.v0alpha.SmsApi.CreateSmsConversation:output_type -> api.v0alpha.CreateSmsConversationRes
	90,  // 200: api.v0alpha.SmsApi.UpdateSmsConversation:output_type -> api.v0alpha.UpdateSmsConversationRes
	92,  // 201: api.v0alpha.SmsApi.DeleteSmsConversation:output_type -> api.v0alpha.DeleteSmsConversationRes
	88,  // 202: api.v0alpha.SmsApi.ListSmsConversations:output_type -> api.v0alpha.ListSmsConversationsRes
	96,  // 203: api.v0alpha.SmsApi.GetSmsConversationById:output_type -> api.v0alpha.GetSmsConversationByIdRes
	110, // 204: api.v0alpha.SmsApi.GetSmsMessage:output_type -> api.v0alpha.GetSmsMessageRes
	99,  // 205: api.v0alpha.SmsApi.CreateSmsConversationAudit:output_type -> api.v0alpha.CreateSmsConversationAuditRes
	98,  // 206: api.v0alpha.SmsApi.ListSmsConversationAudits:output_type -> api.v0alpha.ListSmsConversationAuditsRes
	101, // 207: api.v0alpha.SmsApi.GetSmsConversationAuditById:output_type -> api.v0alpha.GetSmsConversationAuditByIdRes
	104, // 208: api.v0alpha.SmsApi.CreateSmsConversationAssignedAgent:output_type -> api.v0alpha.CreateSmsConversationAssignedAgentRes
	103, // 209: api.v0alpha.SmsApi.ListSmsConversationAssignedAgents:output_type -> api.v0alpha.ListSmsConversationAssignedAgentsRes
	106, // 210: api.v0alpha.SmsApi.GetSmsConversationAssignedAgentById:output_type -> api.v0alpha.GetSmsConversationAssignedAgentByIdRes
	115, // 211: api.v0alpha.SmsApi.ListInboundSmsTasksByGroupIds:output_type -> api.v0alpha.ListInboundSmsTasksByGroupIdsRes
	124, // 212: api.v0alpha.SmsApi.StopAllOutboundSmsGroups:output_type -> api.v0alpha.StopAllOutboundSmsGroupsRes
	126, // 213: api.v0alpha.SmsApi.StopAllInboundSmsGroups:output_type -> api.v0alpha.StopAllInboundSmsGroupsRes
	155, // [155:214] is the sub-list for method output_type
	96,  // [96:155] is the sub-list for method input_type
	96,  // [96:96] is the sub-list for extension type_name
	96,  // [96:96] is the sub-list for extension extendee
	0,   // [0:96] is the sub-list for field type_name
}

func init() { file_api_v0alpha_smsapi_proto_init() }
func file_api_v0alpha_smsapi_proto_init() {
	if File_api_v0alpha_smsapi_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v0alpha_smsapi_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   127,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v0alpha_smsapi_proto_goTypes,
		DependencyIndexes: file_api_v0alpha_smsapi_proto_depIdxs,
		MessageInfos:      file_api_v0alpha_smsapi_proto_msgTypes,
	}.Build()
	File_api_v0alpha_smsapi_proto = out.File
	file_api_v0alpha_smsapi_proto_rawDesc = nil
	file_api_v0alpha_smsapi_proto_goTypes = nil
	file_api_v0alpha_smsapi_proto_depIdxs = nil
}
