// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: api/v0alpha/lms.proto

package v0alpha

import (
	_ "github.com/tcncloud/api-go/annotations"
	commons "github.com/tcncloud/api-go/api/commons"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TimeUnit int32

const (
	// DEFAULT is decided by SURL (no quantity needed)
	TimeUnit_DEFAULT    TimeUnit = 0
	TimeUnit_TIME_WEEKS TimeUnit = 1
	TimeUnit_TIME_DAYS  TimeUnit = 2
	TimeUnit_TIME_HOURS TimeUnit = 3
)

// Enum value maps for TimeUnit.
var (
	TimeUnit_name = map[int32]string{
		0: "DEFAULT",
		1: "TIME_WEEKS",
		2: "TIME_DAYS",
		3: "TIME_HOURS",
	}
	TimeUnit_value = map[string]int32{
		"DEFAULT":    0,
		"TIME_WEEKS": 1,
		"TIME_DAYS":  2,
		"TIME_HOURS": 3,
	}
)

func (x TimeUnit) Enum() *TimeUnit {
	p := new(TimeUnit)
	*p = x
	return p
}

func (x TimeUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v0alpha_lms_proto_enumTypes[0].Descriptor()
}

func (TimeUnit) Type() protoreflect.EnumType {
	return &file_api_v0alpha_lms_proto_enumTypes[0]
}

func (x TimeUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeUnit.Descriptor instead.
func (TimeUnit) EnumDescriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{0}
}

// The types of entities that can be returned from Epic's bulk data api.
type EpicEntityType int32

const (
	EpicEntityType_EPIC_UNKNOWN_TYPE                   EpicEntityType = 0
	EpicEntityType_EPIC_ENTITY_TYPE_PATIENT            EpicEntityType = 1
	EpicEntityType_EPIC_ENTITY_TYPE_APPOINTMENT        EpicEntityType = 2
	EpicEntityType_EPIC_ENTITY_TYPE_MEDICATION         EpicEntityType = 3
	EpicEntityType_EPIC_ENTITY_TYPE_MEDICATION_REQUEST EpicEntityType = 4
	EpicEntityType_EPIC_ENTITY_TYPE_ACCOUNT            EpicEntityType = 5
)

// Enum value maps for EpicEntityType.
var (
	EpicEntityType_name = map[int32]string{
		0: "EPIC_UNKNOWN_TYPE",
		1: "EPIC_ENTITY_TYPE_PATIENT",
		2: "EPIC_ENTITY_TYPE_APPOINTMENT",
		3: "EPIC_ENTITY_TYPE_MEDICATION",
		4: "EPIC_ENTITY_TYPE_MEDICATION_REQUEST",
		5: "EPIC_ENTITY_TYPE_ACCOUNT",
	}
	EpicEntityType_value = map[string]int32{
		"EPIC_UNKNOWN_TYPE":                   0,
		"EPIC_ENTITY_TYPE_PATIENT":            1,
		"EPIC_ENTITY_TYPE_APPOINTMENT":        2,
		"EPIC_ENTITY_TYPE_MEDICATION":         3,
		"EPIC_ENTITY_TYPE_MEDICATION_REQUEST": 4,
		"EPIC_ENTITY_TYPE_ACCOUNT":            5,
	}
)

func (x EpicEntityType) Enum() *EpicEntityType {
	p := new(EpicEntityType)
	*p = x
	return p
}

func (x EpicEntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EpicEntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v0alpha_lms_proto_enumTypes[1].Descriptor()
}

func (EpicEntityType) Type() protoreflect.EnumType {
	return &file_api_v0alpha_lms_proto_enumTypes[1]
}

func (x EpicEntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EpicEntityType.Descriptor instead.
func (EpicEntityType) EnumDescriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{1}
}

type GetPublicKeyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPublicKeyReq) Reset() {
	*x = GetPublicKeyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublicKeyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicKeyReq) ProtoMessage() {}

func (x *GetPublicKeyReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicKeyReq.ProtoReflect.Descriptor instead.
func (*GetPublicKeyReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{0}
}

type PublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *PublicKey) Reset() {
	*x = PublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKey) ProtoMessage() {}

func (x *PublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKey.ProtoReflect.Descriptor instead.
func (*PublicKey) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{1}
}

func (x *PublicKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type FindFieldUsagesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName string `protobuf:"bytes,3,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
}

func (x *FindFieldUsagesReq) Reset() {
	*x = FindFieldUsagesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFieldUsagesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFieldUsagesReq) ProtoMessage() {}

func (x *FindFieldUsagesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFieldUsagesReq.ProtoReflect.Descriptor instead.
func (*FindFieldUsagesReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{2}
}

func (x *FindFieldUsagesReq) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

type NameAndId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NameAndId) Reset() {
	*x = NameAndId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameAndId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameAndId) ProtoMessage() {}

func (x *NameAndId) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameAndId.ProtoReflect.Descriptor instead.
func (*NameAndId) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{3}
}

func (x *NameAndId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NameAndId) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FindFieldUsagesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName string `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	// contains the name, and id of all the file templates that use field_name.
	FileTemplates []*NameAndId `protobuf:"bytes,2,rep,name=file_templates,json=fileTemplates,proto3" json:"file_templates,omitempty"`
	// contains the name, and id of all the elements that use field_name
	Elements []*NameAndId `protobuf:"bytes,3,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *FindFieldUsagesRes) Reset() {
	*x = FindFieldUsagesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFieldUsagesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFieldUsagesRes) ProtoMessage() {}

func (x *FindFieldUsagesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFieldUsagesRes.ProtoReflect.Descriptor instead.
func (*FindFieldUsagesRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{4}
}

func (x *FindFieldUsagesRes) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *FindFieldUsagesRes) GetFileTemplates() []*NameAndId {
	if x != nil {
		return x.FileTemplates
	}
	return nil
}

func (x *FindFieldUsagesRes) GetElements() []*NameAndId {
	if x != nil {
		return x.Elements
	}
	return nil
}

type ElementError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// an ElementError contains a "reason" the element is invalid that is one of the above types
	//
	// Types that are assignable to Reason:
	//
	//	*ElementError_InvalidExpression_
	//	*ElementError_MissingField_
	//	*ElementError_BadFieldType_
	Reason isElementError_Reason `protobuf_oneof:"reason"`
}

func (x *ElementError) Reset() {
	*x = ElementError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementError) ProtoMessage() {}

func (x *ElementError) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementError.ProtoReflect.Descriptor instead.
func (*ElementError) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{5}
}

func (m *ElementError) GetReason() isElementError_Reason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (x *ElementError) GetInvalidExpression() *ElementError_InvalidExpression {
	if x, ok := x.GetReason().(*ElementError_InvalidExpression_); ok {
		return x.InvalidExpression
	}
	return nil
}

func (x *ElementError) GetMissingField() *ElementError_MissingField {
	if x, ok := x.GetReason().(*ElementError_MissingField_); ok {
		return x.MissingField
	}
	return nil
}

func (x *ElementError) GetBadFieldType() *ElementError_BadFieldType {
	if x, ok := x.GetReason().(*ElementError_BadFieldType_); ok {
		return x.BadFieldType
	}
	return nil
}

type isElementError_Reason interface {
	isElementError_Reason()
}

type ElementError_InvalidExpression_ struct {
	InvalidExpression *ElementError_InvalidExpression `protobuf:"bytes,4,opt,name=invalid_expression,json=invalidExpression,proto3,oneof"`
}

type ElementError_MissingField_ struct {
	MissingField *ElementError_MissingField `protobuf:"bytes,5,opt,name=missing_field,json=missingField,proto3,oneof"`
}

type ElementError_BadFieldType_ struct {
	BadFieldType *ElementError_BadFieldType `protobuf:"bytes,6,opt,name=bad_field_type,json=badFieldType,proto3,oneof"`
}

func (*ElementError_InvalidExpression_) isElementError_Reason() {}

func (*ElementError_MissingField_) isElementError_Reason() {}

func (*ElementError_BadFieldType_) isElementError_Reason() {}

type ElementSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementId   string        `protobuf:"bytes,1,opt,name=element_id,json=elementId,proto3" json:"element_id,omitempty"`
	ElementName string        `protobuf:"bytes,2,opt,name=element_name,json=elementName,proto3" json:"element_name,omitempty"`
	Error       *ElementError `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ElementSummary) Reset() {
	*x = ElementSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementSummary) ProtoMessage() {}

func (x *ElementSummary) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementSummary.ProtoReflect.Descriptor instead.
func (*ElementSummary) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{6}
}

func (x *ElementSummary) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (x *ElementSummary) GetElementName() string {
	if x != nil {
		return x.ElementName
	}
	return ""
}

func (x *ElementSummary) GetError() *ElementError {
	if x != nil {
		return x.Error
	}
	return nil
}

type FindInvalidElementsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId    string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	RegionId string `protobuf:"bytes,2,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
}

func (x *FindInvalidElementsReq) Reset() {
	*x = FindInvalidElementsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindInvalidElementsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindInvalidElementsReq) ProtoMessage() {}

func (x *FindInvalidElementsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindInvalidElementsReq.ProtoReflect.Descriptor instead.
func (*FindInvalidElementsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{7}
}

func (x *FindInvalidElementsReq) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *FindInvalidElementsReq) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type FindInvalidElementsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvalidElements []*ElementSummary `protobuf:"bytes,1,rep,name=invalid_elements,json=invalidElements,proto3" json:"invalid_elements,omitempty"`
}

func (x *FindInvalidElementsRes) Reset() {
	*x = FindInvalidElementsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindInvalidElementsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindInvalidElementsRes) ProtoMessage() {}

func (x *FindInvalidElementsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindInvalidElementsRes.ProtoReflect.Descriptor instead.
func (*FindInvalidElementsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{8}
}

func (x *FindInvalidElementsRes) GetInvalidElements() []*ElementSummary {
	if x != nil {
		return x.InvalidElements
	}
	return nil
}

type GetComplianceScrubListsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetComplianceScrubListsReq) Reset() {
	*x = GetComplianceScrubListsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetComplianceScrubListsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetComplianceScrubListsReq) ProtoMessage() {}

func (x *GetComplianceScrubListsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetComplianceScrubListsReq.ProtoReflect.Descriptor instead.
func (*GetComplianceScrubListsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{9}
}

type GetComplianceScrubListsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScrubLists []string `protobuf:"bytes,1,rep,name=scrub_lists,json=scrubLists,proto3" json:"scrub_lists,omitempty"`
}

func (x *GetComplianceScrubListsRes) Reset() {
	*x = GetComplianceScrubListsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetComplianceScrubListsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetComplianceScrubListsRes) ProtoMessage() {}

func (x *GetComplianceScrubListsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetComplianceScrubListsRes.ProtoReflect.Descriptor instead.
func (*GetComplianceScrubListsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{10}
}

func (x *GetComplianceScrubListsRes) GetScrubLists() []string {
	if x != nil {
		return x.ScrubLists
	}
	return nil
}

type ProcessElementReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementId string `protobuf:"bytes,1,opt,name=element_id,json=elementId,proto3" json:"element_id,omitempty"`
	// says if it was triggered by a cron or manually
	ProcessMessage string `protobuf:"bytes,2,opt,name=process_message,json=processMessage,proto3" json:"process_message,omitempty"`
}

func (x *ProcessElementReq) Reset() {
	*x = ProcessElementReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessElementReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessElementReq) ProtoMessage() {}

func (x *ProcessElementReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessElementReq.ProtoReflect.Descriptor instead.
func (*ProcessElementReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{11}
}

func (x *ProcessElementReq) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (x *ProcessElementReq) GetProcessMessage() string {
	if x != nil {
		return x.ProcessMessage
	}
	return ""
}

type ProcessListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the element/node we want to upload the list to.
	// must be an api_entrypoint type element.
	ElementId string `protobuf:"bytes,3,opt,name=element_id,json=elementId,proto3" json:"element_id,omitempty"`
	// raw bytes of the list we are uploading.
	// must be parsable by the file_template for element_id.
	List []byte `protobuf:"bytes,4,opt,name=list,proto3" json:"list,omitempty"`
}

func (x *ProcessListRequest) Reset() {
	*x = ProcessListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessListRequest) ProtoMessage() {}

func (x *ProcessListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessListRequest.ProtoReflect.Descriptor instead.
func (*ProcessListRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{12}
}

func (x *ProcessListRequest) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (x *ProcessListRequest) GetList() []byte {
	if x != nil {
		return x.List
	}
	return nil
}

type ProcessListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProcessListResponse) Reset() {
	*x = ProcessListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessListResponse) ProtoMessage() {}

func (x *ProcessListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessListResponse.ProtoReflect.Descriptor instead.
func (*ProcessListResponse) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{13}
}

type StreamListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId    string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	RegionId string `protobuf:"bytes,2,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// the element/node we want to upload the list to.
	// must be an api_entrypoint type element.
	// all chunks will be concat together in order for each element streamed.
	// if this field is ever empty the whole call will error.
	ElementId string `protobuf:"bytes,3,opt,name=element_id,json=elementId,proto3" json:"element_id,omitempty"`
	// up to 2mb of raw bytes of the list we are uploading.
	// all chunks streamed are concat together and uploaded after streaming ends.
	Chunk []byte `protobuf:"bytes,4,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *StreamListRequest) Reset() {
	*x = StreamListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamListRequest) ProtoMessage() {}

func (x *StreamListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamListRequest.ProtoReflect.Descriptor instead.
func (*StreamListRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{14}
}

func (x *StreamListRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *StreamListRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *StreamListRequest) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (x *StreamListRequest) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type StreamListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamListResponse) Reset() {
	*x = StreamListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamListResponse) ProtoMessage() {}

func (x *StreamListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamListResponse.ProtoReflect.Descriptor instead.
func (*StreamListResponse) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{15}
}

type ListAvailableFieldsByElementIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementId string `protobuf:"bytes,1,opt,name=element_id,json=elementId,proto3" json:"element_id,omitempty"`
}

func (x *ListAvailableFieldsByElementIdReq) Reset() {
	*x = ListAvailableFieldsByElementIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAvailableFieldsByElementIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAvailableFieldsByElementIdReq) ProtoMessage() {}

func (x *ListAvailableFieldsByElementIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAvailableFieldsByElementIdReq.ProtoReflect.Descriptor instead.
func (*ListAvailableFieldsByElementIdReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{16}
}

func (x *ListAvailableFieldsByElementIdReq) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

type ListFieldsForElementReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementId string `protobuf:"bytes,1,opt,name=element_id,json=elementId,proto3" json:"element_id,omitempty"`
}

func (x *ListFieldsForElementReq) Reset() {
	*x = ListFieldsForElementReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFieldsForElementReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFieldsForElementReq) ProtoMessage() {}

func (x *ListFieldsForElementReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFieldsForElementReq.ProtoReflect.Descriptor instead.
func (*ListFieldsForElementReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{17}
}

func (x *ListFieldsForElementReq) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

type ListFieldsForElementRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*Field `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *ListFieldsForElementRes) Reset() {
	*x = ListFieldsForElementRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFieldsForElementRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFieldsForElementRes) ProtoMessage() {}

func (x *ListFieldsForElementRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFieldsForElementRes.ProtoReflect.Descriptor instead.
func (*ListFieldsForElementRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{18}
}

func (x *ListFieldsForElementRes) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ListAutocompleteFieldsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAutocompleteFieldsReq) Reset() {
	*x = ListAutocompleteFieldsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAutocompleteFieldsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAutocompleteFieldsReq) ProtoMessage() {}

func (x *ListAutocompleteFieldsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAutocompleteFieldsReq.ProtoReflect.Descriptor instead.
func (*ListAutocompleteFieldsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{19}
}

type ListAutocompleteFieldsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*Field `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *ListAutocompleteFieldsRes) Reset() {
	*x = ListAutocompleteFieldsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAutocompleteFieldsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAutocompleteFieldsRes) ProtoMessage() {}

func (x *ListAutocompleteFieldsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAutocompleteFieldsRes.ProtoReflect.Descriptor instead.
func (*ListAutocompleteFieldsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{20}
}

func (x *ListAutocompleteFieldsRes) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ElementPK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementId string `protobuf:"bytes,1,opt,name=element_id,json=elementId,proto3" json:"element_id,omitempty"`
}

func (x *ElementPK) Reset() {
	*x = ElementPK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementPK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementPK) ProtoMessage() {}

func (x *ElementPK) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementPK.ProtoReflect.Descriptor instead.
func (*ElementPK) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{21}
}

func (x *ElementPK) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

// REPLACES PipelineElement and List
type Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementId      string                            `protobuf:"bytes,3,opt,name=element_id,json=elementId,proto3" json:"element_id,omitempty"`
	Name           string                            `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Inputs         []string                          `protobuf:"bytes,11,rep,name=inputs,proto3" json:"inputs,omitempty"`
	InputIsDiscard []bool                            `protobuf:"varint,20,rep,packed,name=input_is_discard,json=inputIsDiscard,proto3" json:"input_is_discard,omitempty"`
	Transform      *Process                          `protobuf:"bytes,13,opt,name=transform,proto3" json:"transform,omitempty"`
	LastStatus     commons.PipelineElementStatusType `protobuf:"varint,14,opt,name=last_status,json=lastStatus,proto3,enum=api.commons.PipelineElementStatusType" json:"last_status,omitempty"`
	Labels         []string                          `protobuf:"bytes,16,rep,name=labels,proto3" json:"labels,omitempty"`
	CreatedDate    *timestamppb.Timestamp            `protobuf:"bytes,17,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	LastEdited     *timestamppb.Timestamp            `protobuf:"bytes,18,opt,name=last_edited,json=lastEdited,proto3" json:"last_edited,omitempty"`
	Description    string                            `protobuf:"bytes,19,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Element) Reset() {
	*x = Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Element) ProtoMessage() {}

func (x *Element) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Element.ProtoReflect.Descriptor instead.
func (*Element) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{22}
}

func (x *Element) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (x *Element) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Element) GetInputs() []string {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Element) GetInputIsDiscard() []bool {
	if x != nil {
		return x.InputIsDiscard
	}
	return nil
}

func (x *Element) GetTransform() *Process {
	if x != nil {
		return x.Transform
	}
	return nil
}

func (x *Element) GetLastStatus() commons.PipelineElementStatusType {
	if x != nil {
		return x.LastStatus
	}
	return commons.PipelineElementStatusType(0)
}

func (x *Element) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Element) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *Element) GetLastEdited() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEdited
	}
	return nil
}

func (x *Element) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type PeekListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementId string `protobuf:"bytes,3,opt,name=element_id,json=elementId,proto3" json:"element_id,omitempty"`
	Version   int64  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	PageSize  int32  `protobuf:"varint,10,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Page      int32  `protobuf:"varint,12,opt,name=page,proto3" json:"page,omitempty"`
	// process to run before we return the records back
	// currently only expecting this to be a simple filter process
	Process *Process `protobuf:"bytes,13,opt,name=process,proto3" json:"process,omitempty"`
	// if true, we will fetch the discards chunk to look at instead of the data chunk
	PeekAtDiscards bool `protobuf:"varint,14,opt,name=peek_at_discards,json=peekAtDiscards,proto3" json:"peek_at_discards,omitempty"`
}

func (x *PeekListReq) Reset() {
	*x = PeekListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeekListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeekListReq) ProtoMessage() {}

func (x *PeekListReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeekListReq.ProtoReflect.Descriptor instead.
func (*PeekListReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{23}
}

func (x *PeekListReq) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (x *PeekListReq) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *PeekListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PeekListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PeekListReq) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *PeekListReq) GetPeekAtDiscards() bool {
	if x != nil {
		return x.PeekAtDiscards
	}
	return false
}

type PeekListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*RecordProto `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	Metrics *ListMetrics   `protobuf:"bytes,2,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *PeekListRes) Reset() {
	*x = PeekListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeekListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeekListRes) ProtoMessage() {}

func (x *PeekListRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeekListRes.ProtoReflect.Descriptor instead.
func (*PeekListRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{24}
}

func (x *PeekListRes) GetRecords() []*RecordProto {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *PeekListRes) GetMetrics() *ListMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type GetHistoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementId  string `protobuf:"bytes,3,opt,name=element_id,json=elementId,proto3" json:"element_id,omitempty"`
	Count      int32  `protobuf:"varint,10,opt,name=count,proto3" json:"count,omitempty"`
	StartingId int64  `protobuf:"varint,11,opt,name=starting_id,json=startingId,proto3" json:"starting_id,omitempty"`
}

func (x *GetHistoryReq) Reset() {
	*x = GetHistoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHistoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoryReq) ProtoMessage() {}

func (x *GetHistoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoryReq.ProtoReflect.Descriptor instead.
func (*GetHistoryReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{25}
}

func (x *GetHistoryReq) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (x *GetHistoryReq) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetHistoryReq) GetStartingId() int64 {
	if x != nil {
		return x.StartingId
	}
	return 0
}

type GetHistoryRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementId string             `protobuf:"bytes,3,opt,name=element_id,json=elementId,proto3" json:"element_id,omitempty"`
	Commits   []*HistoryAndCount `protobuf:"bytes,11,rep,name=commits,proto3" json:"commits,omitempty"`
}

func (x *GetHistoryRes) Reset() {
	*x = GetHistoryRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHistoryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoryRes) ProtoMessage() {}

func (x *GetHistoryRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoryRes.ProtoReflect.Descriptor instead.
func (*GetHistoryRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{26}
}

func (x *GetHistoryRes) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (x *GetHistoryRes) GetCommits() []*HistoryAndCount {
	if x != nil {
		return x.Commits
	}
	return nil
}

// the history table stores history for pipeline_elements
type History struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementId string   `protobuf:"bytes,3,opt,name=element_id,json=elementId,proto3" json:"element_id,omitempty"`
	HistoryId int64    `protobuf:"varint,4,opt,name=history_id,json=historyId,proto3" json:"history_id,omitempty"`
	Process   *Process `protobuf:"bytes,7,opt,name=process,proto3" json:"process,omitempty"`
	// whether the pipeline process was successful, or a failure.  Success = false
	Failed        bool                    `protobuf:"varint,10,opt,name=failed,proto3" json:"failed,omitempty"`
	AttemptNumber int32                   `protobuf:"varint,12,opt,name=attempt_number,json=attemptNumber,proto3" json:"attempt_number,omitempty"`
	Reason        *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=reason,proto3" json:"reason,omitempty"`
	UploadTs      *timestamppb.Timestamp  `protobuf:"bytes,14,opt,name=upload_ts,json=uploadTs,proto3" json:"upload_ts,omitempty"`
	StartedTs     *timestamppb.Timestamp  `protobuf:"bytes,15,opt,name=started_ts,json=startedTs,proto3" json:"started_ts,omitempty"`
	FinishedTs    *timestamppb.Timestamp  `protobuf:"bytes,16,opt,name=finished_ts,json=finishedTs,proto3" json:"finished_ts,omitempty"`
	// will only match a valid event in the event queue as long as it isn't
	// emptied
	EventId         int64        `protobuf:"varint,18,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	ParentElementId string       `protobuf:"bytes,22,opt,name=parent_element_id,json=parentElementId,proto3" json:"parent_element_id,omitempty"`
	Metrics         *ListMetrics `protobuf:"bytes,23,opt,name=metrics,proto3" json:"metrics,omitempty"`
	DiscardMetrics  *ListMetrics `protobuf:"bytes,24,opt,name=discard_metrics,json=discardMetrics,proto3" json:"discard_metrics,omitempty"`
}

func (x *History) Reset() {
	*x = History{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *History) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*History) ProtoMessage() {}

func (x *History) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use History.ProtoReflect.Descriptor instead.
func (*History) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{27}
}

func (x *History) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (x *History) GetHistoryId() int64 {
	if x != nil {
		return x.HistoryId
	}
	return 0
}

func (x *History) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *History) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

func (x *History) GetAttemptNumber() int32 {
	if x != nil {
		return x.AttemptNumber
	}
	return 0
}

func (x *History) GetReason() *wrapperspb.StringValue {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *History) GetUploadTs() *timestamppb.Timestamp {
	if x != nil {
		return x.UploadTs
	}
	return nil
}

func (x *History) GetStartedTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedTs
	}
	return nil
}

func (x *History) GetFinishedTs() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedTs
	}
	return nil
}

func (x *History) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *History) GetParentElementId() string {
	if x != nil {
		return x.ParentElementId
	}
	return ""
}

func (x *History) GetMetrics() *ListMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *History) GetDiscardMetrics() *ListMetrics {
	if x != nil {
		return x.DiscardMetrics
	}
	return nil
}

// since its possible to get a load of history events that all look the same
// this keeps track of the range. history_id and ending_history_id
// are the range of data where 'failed', and 'reason' were the same.
// The rest of the fields point to the history_id's record
// 'count' is the field that keeps track of how many messages in a row were
// similar
type HistoryAndCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementId string `protobuf:"bytes,3,opt,name=element_id,json=elementId,proto3" json:"element_id,omitempty"`
	// history_id of the element that started getting the duplicate error message
	HistoryId int64 `protobuf:"varint,4,opt,name=history_id,json=historyId,proto3" json:"history_id,omitempty"`
	// history_id of where we stopped getting the duplicate error message
	EndingHistoryId int64    `protobuf:"varint,5,opt,name=ending_history_id,json=endingHistoryId,proto3" json:"ending_history_id,omitempty"`
	Process         *Process `protobuf:"bytes,7,opt,name=process,proto3" json:"process,omitempty"`
	// whether the pipeline process was successful, or a failure.  Success = false
	Failed        bool                    `protobuf:"varint,10,opt,name=failed,proto3" json:"failed,omitempty"`
	AttemptNumber int32                   `protobuf:"varint,12,opt,name=attempt_number,json=attemptNumber,proto3" json:"attempt_number,omitempty"`
	Reason        *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=reason,proto3" json:"reason,omitempty"`
	UploadTs      *timestamppb.Timestamp  `protobuf:"bytes,14,opt,name=upload_ts,json=uploadTs,proto3" json:"upload_ts,omitempty"`
	StartedTs     *timestamppb.Timestamp  `protobuf:"bytes,15,opt,name=started_ts,json=startedTs,proto3" json:"started_ts,omitempty"`
	FinishedTs    *timestamppb.Timestamp  `protobuf:"bytes,16,opt,name=finished_ts,json=finishedTs,proto3" json:"finished_ts,omitempty"`
	// will only match a valid event in the event queue as long as it isn't
	// emptied
	EventId         int64        `protobuf:"varint,18,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	ParentElementId string       `protobuf:"bytes,22,opt,name=parent_element_id,json=parentElementId,proto3" json:"parent_element_id,omitempty"`
	Metrics         *ListMetrics `protobuf:"bytes,23,opt,name=metrics,proto3" json:"metrics,omitempty"`
	DiscardMetrics  *ListMetrics `protobuf:"bytes,25,opt,name=discard_metrics,json=discardMetrics,proto3" json:"discard_metrics,omitempty"`
	// how many messages encountered a similar 'reason' field
	Count int64 `protobuf:"varint,24,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *HistoryAndCount) Reset() {
	*x = HistoryAndCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryAndCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryAndCount) ProtoMessage() {}

func (x *HistoryAndCount) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryAndCount.ProtoReflect.Descriptor instead.
func (*HistoryAndCount) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{28}
}

func (x *HistoryAndCount) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (x *HistoryAndCount) GetHistoryId() int64 {
	if x != nil {
		return x.HistoryId
	}
	return 0
}

func (x *HistoryAndCount) GetEndingHistoryId() int64 {
	if x != nil {
		return x.EndingHistoryId
	}
	return 0
}

func (x *HistoryAndCount) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *HistoryAndCount) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

func (x *HistoryAndCount) GetAttemptNumber() int32 {
	if x != nil {
		return x.AttemptNumber
	}
	return 0
}

func (x *HistoryAndCount) GetReason() *wrapperspb.StringValue {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *HistoryAndCount) GetUploadTs() *timestamppb.Timestamp {
	if x != nil {
		return x.UploadTs
	}
	return nil
}

func (x *HistoryAndCount) GetStartedTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedTs
	}
	return nil
}

func (x *HistoryAndCount) GetFinishedTs() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedTs
	}
	return nil
}

func (x *HistoryAndCount) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *HistoryAndCount) GetParentElementId() string {
	if x != nil {
		return x.ParentElementId
	}
	return ""
}

func (x *HistoryAndCount) GetMetrics() *ListMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *HistoryAndCount) GetDiscardMetrics() *ListMetrics {
	if x != nil {
		return x.DiscardMetrics
	}
	return nil
}

func (x *HistoryAndCount) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RecordProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*RecordFieldProto `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *RecordProto) Reset() {
	*x = RecordProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordProto) ProtoMessage() {}

func (x *RecordProto) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordProto.ProtoReflect.Descriptor instead.
func (*RecordProto) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{29}
}

func (x *RecordProto) GetFields() []*RecordFieldProto {
	if x != nil {
		return x.Fields
	}
	return nil
}

type RecordProtoPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Old *RecordProto `protobuf:"bytes,1,opt,name=old,proto3" json:"old,omitempty"`
	New *RecordProto `protobuf:"bytes,2,opt,name=new,proto3" json:"new,omitempty"`
}

func (x *RecordProtoPair) Reset() {
	*x = RecordProtoPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordProtoPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordProtoPair) ProtoMessage() {}

func (x *RecordProtoPair) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordProtoPair.ProtoReflect.Descriptor instead.
func (*RecordProtoPair) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{30}
}

func (x *RecordProtoPair) GetOld() *RecordProto {
	if x != nil {
		return x.Old
	}
	return nil
}

func (x *RecordProtoPair) GetNew() *RecordProto {
	if x != nil {
		return x.New
	}
	return nil
}

type ProcessFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*ProcessFields_Field `protobuf:"bytes,8,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *ProcessFields) Reset() {
	*x = ProcessFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessFields) ProtoMessage() {}

func (x *ProcessFields) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessFields.ProtoReflect.Descriptor instead.
func (*ProcessFields) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{31}
}

func (x *ProcessFields) GetFields() []*ProcessFields_Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type FieldPK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FieldPK) Reset() {
	*x = FieldPK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldPK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldPK) ProtoMessage() {}

func (x *FieldPK) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldPK.ProtoReflect.Descriptor instead.
func (*FieldPK) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{32}
}

func (x *FieldPK) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type         commons.FieldType      `protobuf:"varint,4,opt,name=type,proto3,enum=api.commons.FieldType" json:"type,omitempty"`
	DateModified *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=date_modified,json=dateModified,proto3" json:"date_modified,omitempty"`
	Metadata     *FieldMetadata         `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Description  string                 `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{33}
}

func (x *Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Field) GetType() commons.FieldType {
	if x != nil {
		return x.Type
	}
	return commons.FieldType(0)
}

func (x *Field) GetDateModified() *timestamppb.Timestamp {
	if x != nil {
		return x.DateModified
	}
	return nil
}

func (x *Field) GetMetadata() *FieldMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Field) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type UpdateFieldReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type         commons.FieldType      `protobuf:"varint,4,opt,name=type,proto3,enum=api.commons.FieldType" json:"type,omitempty"`
	DateModified *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=date_modified,json=dateModified,proto3" json:"date_modified,omitempty"`
	NewName      string                 `protobuf:"bytes,6,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	Metadata     *FieldMetadata         `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Description  string                 `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UpdateFieldReq) Reset() {
	*x = UpdateFieldReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFieldReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFieldReq) ProtoMessage() {}

func (x *UpdateFieldReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFieldReq.ProtoReflect.Descriptor instead.
func (*UpdateFieldReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateFieldReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateFieldReq) GetType() commons.FieldType {
	if x != nil {
		return x.Type
	}
	return commons.FieldType(0)
}

func (x *UpdateFieldReq) GetDateModified() *timestamppb.Timestamp {
	if x != nil {
		return x.DateModified
	}
	return nil
}

func (x *UpdateFieldReq) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

func (x *UpdateFieldReq) GetMetadata() *FieldMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UpdateFieldReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type FieldMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeFormat string                    `protobuf:"bytes,1,opt,name=time_format,json=timeFormat,proto3" json:"time_format,omitempty"`
	Precision  commons.DateTimePrecision `protobuf:"varint,2,opt,name=precision,proto3,enum=api.commons.DateTimePrecision" json:"precision,omitempty"`
	// 3-10 are Parsing Options
	// Remove any characters that are in this string
	// `remove_characters` will override leave_characters
	RemoveCharacters string `protobuf:"bytes,3,opt,name=remove_characters,json=removeCharacters,proto3" json:"remove_characters,omitempty"`
	// If the parsed value is empty
	// it will be replaced with this value
	ReplaceEmpty string `protobuf:"bytes,4,opt,name=replace_empty,json=replaceEmpty,proto3" json:"replace_empty,omitempty"`
	// If an error is encountered with parsing
	// then the field will be replaced with this value
	ReplaceError string `protobuf:"bytes,5,opt,name=replace_error,json=replaceError,proto3" json:"replace_error,omitempty"`
	// Remove any letters (a-zA-Z) from the field
	RemoveLetters bool `protobuf:"varint,6,opt,name=remove_letters,json=removeLetters,proto3" json:"remove_letters,omitempty"`
	// Remove any numbers (digits 0-9) from the field
	RemoveNumbers bool `protobuf:"varint,7,opt,name=remove_numbers,json=removeNumbers,proto3" json:"remove_numbers,omitempty"`
	// Removes any symbols or punctuation from the field
	RemoveSymbols bool `protobuf:"varint,8,opt,name=remove_symbols,json=removeSymbols,proto3" json:"remove_symbols,omitempty"`
	// Any characters in this string will not be remove
	// can be overridden by remove_characters
	LeaveCharacters string `protobuf:"bytes,9,opt,name=leave_characters,json=leaveCharacters,proto3" json:"leave_characters,omitempty"`
	// Remove any matches of this entire string
	RemoveString string `protobuf:"bytes,10,opt,name=remove_string,json=removeString,proto3" json:"remove_string,omitempty"`
	// 'json_dot_path' holds the json path that will fetch the  value for this field by walking path
	// over a json object via:
	// https://github.com/tidwall/gjson
	// ex: dot_path = a.b.0.firstName
	// Values must resolve to one thing, not a range of things. If a range is retrieved, the first value is taken
	// the rest are ignored.
	// If string is empty, we just use the field name for the path
	JsonDotPath string `protobuf:"bytes,11,opt,name=json_dot_path,json=jsonDotPath,proto3" json:"json_dot_path,omitempty"`
	// If true value retrieved from json *must* match the field definition, or error.
	// If true, the value if a string, will be 'parsed' into the correct type.
	// If false, the value will be used as is, meaning time_strings, number_strings and the like will remain as strings.
	JsonForceTypeMatch bool `protobuf:"varint,12,opt,name=json_force_type_match,json=jsonForceTypeMatch,proto3" json:"json_force_type_match,omitempty"`
	// for fixed width files indicates the starting position of the data.
	// if it is -1, starting position is one character after the previous fields starting position + length.
	// if this is the first field and it is -1, starting position is 0
	StartingPosition int32 `protobuf:"varint,13,opt,name=starting_position,json=startingPosition,proto3" json:"starting_position,omitempty"`
	// for fixed width files indicates how many characters to the right of starting position we will read.
	// this field is required to be greater than 0.
	FieldLength int32 `protobuf:"varint,14,opt,name=field_length,json=fieldLength,proto3" json:"field_length,omitempty"`
}

func (x *FieldMetadata) Reset() {
	*x = FieldMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldMetadata) ProtoMessage() {}

func (x *FieldMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldMetadata.ProtoReflect.Descriptor instead.
func (*FieldMetadata) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{35}
}

func (x *FieldMetadata) GetTimeFormat() string {
	if x != nil {
		return x.TimeFormat
	}
	return ""
}

func (x *FieldMetadata) GetPrecision() commons.DateTimePrecision {
	if x != nil {
		return x.Precision
	}
	return commons.DateTimePrecision(0)
}

func (x *FieldMetadata) GetRemoveCharacters() string {
	if x != nil {
		return x.RemoveCharacters
	}
	return ""
}

func (x *FieldMetadata) GetReplaceEmpty() string {
	if x != nil {
		return x.ReplaceEmpty
	}
	return ""
}

func (x *FieldMetadata) GetReplaceError() string {
	if x != nil {
		return x.ReplaceError
	}
	return ""
}

func (x *FieldMetadata) GetRemoveLetters() bool {
	if x != nil {
		return x.RemoveLetters
	}
	return false
}

func (x *FieldMetadata) GetRemoveNumbers() bool {
	if x != nil {
		return x.RemoveNumbers
	}
	return false
}

func (x *FieldMetadata) GetRemoveSymbols() bool {
	if x != nil {
		return x.RemoveSymbols
	}
	return false
}

func (x *FieldMetadata) GetLeaveCharacters() string {
	if x != nil {
		return x.LeaveCharacters
	}
	return ""
}

func (x *FieldMetadata) GetRemoveString() string {
	if x != nil {
		return x.RemoveString
	}
	return ""
}

func (x *FieldMetadata) GetJsonDotPath() string {
	if x != nil {
		return x.JsonDotPath
	}
	return ""
}

func (x *FieldMetadata) GetJsonForceTypeMatch() bool {
	if x != nil {
		return x.JsonForceTypeMatch
	}
	return false
}

func (x *FieldMetadata) GetStartingPosition() int32 {
	if x != nil {
		return x.StartingPosition
	}
	return 0
}

func (x *FieldMetadata) GetFieldLength() int32 {
	if x != nil {
		return x.FieldLength
	}
	return 0
}

type Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*Field `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Fields) Reset() {
	*x = Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fields) ProtoMessage() {}

func (x *Fields) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fields.ProtoReflect.Descriptor instead.
func (*Fields) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{36}
}

func (x *Fields) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

// first value is the field_name in the record.
// additional values are nested fields on record field looked up from index[0]
type FieldIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index []string `protobuf:"bytes,1,rep,name=index,proto3" json:"index,omitempty"`
	// modify the fetched field, if the fetched field's type
	// can support the modifier
	//
	// Types that are assignable to Modifier:
	//
	//	*FieldIndex_Datetime
	Modifier isFieldIndex_Modifier `protobuf_oneof:"modifier"`
}

func (x *FieldIndex) Reset() {
	*x = FieldIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldIndex) ProtoMessage() {}

func (x *FieldIndex) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldIndex.ProtoReflect.Descriptor instead.
func (*FieldIndex) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{37}
}

func (x *FieldIndex) GetIndex() []string {
	if x != nil {
		return x.Index
	}
	return nil
}

func (m *FieldIndex) GetModifier() isFieldIndex_Modifier {
	if m != nil {
		return m.Modifier
	}
	return nil
}

func (x *FieldIndex) GetDatetime() *DateTimeModifier {
	if x, ok := x.GetModifier().(*FieldIndex_Datetime); ok {
		return x.Datetime
	}
	return nil
}

type isFieldIndex_Modifier interface {
	isFieldIndex_Modifier()
}

type FieldIndex_Datetime struct {
	// modifies the fetched field if it is a datetime field
	Datetime *DateTimeModifier `protobuf:"bytes,2,opt,name=datetime,proto3,oneof"`
}

func (*FieldIndex_Datetime) isFieldIndex_Modifier() {}

type ListFieldsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListFieldsReq) Reset() {
	*x = ListFieldsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFieldsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFieldsReq) ProtoMessage() {}

func (x *ListFieldsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFieldsReq.ProtoReflect.Descriptor instead.
func (*ListFieldsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{38}
}

type RecordFieldProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*RecordFieldProto_StringValue
	//	*RecordFieldProto_NumberValue
	//	*RecordFieldProto_BoolValue
	//	*RecordFieldProto_Phone
	//	*RecordFieldProto_Currency
	//	*RecordFieldProto_PostalCode
	//	*RecordFieldProto_Email
	//	*RecordFieldProto_DateTime
	//	*RecordFieldProto_RepeatedRecords
	//	*RecordFieldProto_RecordFieldMap
	//	*RecordFieldProto_Err
	//	*RecordFieldProto_EnrichedPhone
	//	*RecordFieldProto_EnrichedZip
	Payload isRecordFieldProto_Payload `protobuf_oneof:"payload"`
}

func (x *RecordFieldProto) Reset() {
	*x = RecordFieldProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordFieldProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordFieldProto) ProtoMessage() {}

func (x *RecordFieldProto) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordFieldProto.ProtoReflect.Descriptor instead.
func (*RecordFieldProto) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{39}
}

func (x *RecordFieldProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *RecordFieldProto) GetPayload() isRecordFieldProto_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *RecordFieldProto) GetStringValue() string {
	if x, ok := x.GetPayload().(*RecordFieldProto_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *RecordFieldProto) GetNumberValue() float64 {
	if x, ok := x.GetPayload().(*RecordFieldProto_NumberValue); ok {
		return x.NumberValue
	}
	return 0
}

func (x *RecordFieldProto) GetBoolValue() bool {
	if x, ok := x.GetPayload().(*RecordFieldProto_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *RecordFieldProto) GetPhone() *Phone {
	if x, ok := x.GetPayload().(*RecordFieldProto_Phone); ok {
		return x.Phone
	}
	return nil
}

func (x *RecordFieldProto) GetCurrency() *Currency {
	if x, ok := x.GetPayload().(*RecordFieldProto_Currency); ok {
		return x.Currency
	}
	return nil
}

func (x *RecordFieldProto) GetPostalCode() *PostalCode {
	if x, ok := x.GetPayload().(*RecordFieldProto_PostalCode); ok {
		return x.PostalCode
	}
	return nil
}

func (x *RecordFieldProto) GetEmail() *Email {
	if x, ok := x.GetPayload().(*RecordFieldProto_Email); ok {
		return x.Email
	}
	return nil
}

func (x *RecordFieldProto) GetDateTime() *DateTime {
	if x, ok := x.GetPayload().(*RecordFieldProto_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *RecordFieldProto) GetRepeatedRecords() *RepeatedRecords {
	if x, ok := x.GetPayload().(*RecordFieldProto_RepeatedRecords); ok {
		return x.RepeatedRecords
	}
	return nil
}

func (x *RecordFieldProto) GetRecordFieldMap() *RecordFieldMap {
	if x, ok := x.GetPayload().(*RecordFieldProto_RecordFieldMap); ok {
		return x.RecordFieldMap
	}
	return nil
}

func (x *RecordFieldProto) GetErr() *Error {
	if x, ok := x.GetPayload().(*RecordFieldProto_Err); ok {
		return x.Err
	}
	return nil
}

func (x *RecordFieldProto) GetEnrichedPhone() *EnrichedPhone {
	if x, ok := x.GetPayload().(*RecordFieldProto_EnrichedPhone); ok {
		return x.EnrichedPhone
	}
	return nil
}

func (x *RecordFieldProto) GetEnrichedZip() *EnrichedZip {
	if x, ok := x.GetPayload().(*RecordFieldProto_EnrichedZip); ok {
		return x.EnrichedZip
	}
	return nil
}

type isRecordFieldProto_Payload interface {
	isRecordFieldProto_Payload()
}

type RecordFieldProto_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type RecordFieldProto_NumberValue struct {
	NumberValue float64 `protobuf:"fixed64,3,opt,name=number_value,json=numberValue,proto3,oneof"`
}

type RecordFieldProto_BoolValue struct {
	BoolValue bool `protobuf:"varint,4,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type RecordFieldProto_Phone struct {
	Phone *Phone `protobuf:"bytes,5,opt,name=phone,proto3,oneof"`
}

type RecordFieldProto_Currency struct {
	Currency *Currency `protobuf:"bytes,6,opt,name=currency,proto3,oneof"`
}

type RecordFieldProto_PostalCode struct {
	PostalCode *PostalCode `protobuf:"bytes,8,opt,name=postal_code,json=postalCode,proto3,oneof"`
}

type RecordFieldProto_Email struct {
	Email *Email `protobuf:"bytes,9,opt,name=email,proto3,oneof"`
}

type RecordFieldProto_DateTime struct {
	DateTime *DateTime `protobuf:"bytes,10,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type RecordFieldProto_RepeatedRecords struct {
	RepeatedRecords *RepeatedRecords `protobuf:"bytes,13,opt,name=repeated_records,json=repeatedRecords,proto3,oneof"`
}

type RecordFieldProto_RecordFieldMap struct {
	RecordFieldMap *RecordFieldMap `protobuf:"bytes,14,opt,name=record_field_map,json=recordFieldMap,proto3,oneof"`
}

type RecordFieldProto_Err struct {
	Err *Error `protobuf:"bytes,15,opt,name=err,proto3,oneof"`
}

type RecordFieldProto_EnrichedPhone struct {
	EnrichedPhone *EnrichedPhone `protobuf:"bytes,16,opt,name=enriched_phone,json=enrichedPhone,proto3,oneof"`
}

type RecordFieldProto_EnrichedZip struct {
	EnrichedZip *EnrichedZip `protobuf:"bytes,17,opt,name=enriched_zip,json=enrichedZip,proto3,oneof"`
}

func (*RecordFieldProto_StringValue) isRecordFieldProto_Payload() {}

func (*RecordFieldProto_NumberValue) isRecordFieldProto_Payload() {}

func (*RecordFieldProto_BoolValue) isRecordFieldProto_Payload() {}

func (*RecordFieldProto_Phone) isRecordFieldProto_Payload() {}

func (*RecordFieldProto_Currency) isRecordFieldProto_Payload() {}

func (*RecordFieldProto_PostalCode) isRecordFieldProto_Payload() {}

func (*RecordFieldProto_Email) isRecordFieldProto_Payload() {}

func (*RecordFieldProto_DateTime) isRecordFieldProto_Payload() {}

func (*RecordFieldProto_RepeatedRecords) isRecordFieldProto_Payload() {}

func (*RecordFieldProto_RecordFieldMap) isRecordFieldProto_Payload() {}

func (*RecordFieldProto_Err) isRecordFieldProto_Payload() {}

func (*RecordFieldProto_EnrichedPhone) isRecordFieldProto_Payload() {}

func (*RecordFieldProto_EnrichedZip) isRecordFieldProto_Payload() {}

type RepeatedRecords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*RecordProto `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *RepeatedRecords) Reset() {
	*x = RepeatedRecords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedRecords) ProtoMessage() {}

func (x *RepeatedRecords) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedRecords.ProtoReflect.Descriptor instead.
func (*RepeatedRecords) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{40}
}

func (x *RepeatedRecords) GetRecords() []*RecordProto {
	if x != nil {
		return x.Records
	}
	return nil
}

type ListElementsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels []string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *ListElementsReq) Reset() {
	*x = ListElementsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListElementsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListElementsReq) ProtoMessage() {}

func (x *ListElementsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListElementsReq.ProtoReflect.Descriptor instead.
func (*ListElementsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{41}
}

func (x *ListElementsReq) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type GetFileTemplatesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetFileTemplatesReq) Reset() {
	*x = GetFileTemplatesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileTemplatesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileTemplatesReq) ProtoMessage() {}

func (x *GetFileTemplatesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileTemplatesReq.ProtoReflect.Descriptor instead.
func (*GetFileTemplatesReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{42}
}

type FileTemplateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type commons.FieldType `protobuf:"varint,2,opt,name=type,proto3,enum=api.commons.FieldType" json:"type,omitempty"`
}

func (x *FileTemplateField) Reset() {
	*x = FileTemplateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileTemplateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTemplateField) ProtoMessage() {}

func (x *FileTemplateField) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTemplateField.ProtoReflect.Descriptor instead.
func (*FileTemplateField) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{43}
}

func (x *FileTemplateField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileTemplateField) GetType() commons.FieldType {
	if x != nil {
		return x.Type
	}
	return commons.FieldType(0)
}

type FileTemplateFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*FileTemplateField `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *FileTemplateFields) Reset() {
	*x = FileTemplateFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileTemplateFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTemplateFields) ProtoMessage() {}

func (x *FileTemplateFields) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTemplateFields.ProtoReflect.Descriptor instead.
func (*FileTemplateFields) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{44}
}

func (x *FileTemplateFields) GetFields() []*FileTemplateField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type FieldTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []commons.FieldType `protobuf:"varint,1,rep,packed,name=values,proto3,enum=api.commons.FieldType" json:"values,omitempty"`
}

func (x *FieldTypes) Reset() {
	*x = FieldTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldTypes) ProtoMessage() {}

func (x *FieldTypes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldTypes.ProtoReflect.Descriptor instead.
func (*FieldTypes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{45}
}

func (x *FieldTypes) GetValues() []commons.FieldType {
	if x != nil {
		return x.Values
	}
	return nil
}

type FileTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileTemplateId   string             `protobuf:"bytes,3,opt,name=file_template_id,json=fileTemplateId,proto3" json:"file_template_id,omitempty"`
	Name             string             `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Description      string             `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	FieldNames       []string           `protobuf:"bytes,12,rep,name=field_names,json=fieldNames,proto3" json:"field_names,omitempty"`
	FileFormatParams *FileFormatParams  `protobuf:"bytes,14,opt,name=file_format_params,json=fileFormatParams,proto3" json:"file_format_params,omitempty"`
	FileFormat       commons.FileFormat `protobuf:"varint,15,opt,name=file_format,json=fileFormat,proto3,enum=api.commons.FileFormat" json:"file_format,omitempty"`
	Fields           []*Field           `protobuf:"bytes,16,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *FileTemplate) Reset() {
	*x = FileTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTemplate) ProtoMessage() {}

func (x *FileTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTemplate.ProtoReflect.Descriptor instead.
func (*FileTemplate) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{46}
}

func (x *FileTemplate) GetFileTemplateId() string {
	if x != nil {
		return x.FileTemplateId
	}
	return ""
}

func (x *FileTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileTemplate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FileTemplate) GetFieldNames() []string {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

func (x *FileTemplate) GetFileFormatParams() *FileFormatParams {
	if x != nil {
		return x.FileFormatParams
	}
	return nil
}

func (x *FileTemplate) GetFileFormat() commons.FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return commons.FileFormat(0)
}

func (x *FileTemplate) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type LMSUploadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementId string `protobuf:"bytes,3,opt,name=element_id,json=elementId,proto3" json:"element_id,omitempty"`
	// if left empty, will use the list_id's default file template
	FileId string `protobuf:"bytes,12,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
}

func (x *LMSUploadReq) Reset() {
	*x = LMSUploadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LMSUploadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LMSUploadReq) ProtoMessage() {}

func (x *LMSUploadReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LMSUploadReq.ProtoReflect.Descriptor instead.
func (*LMSUploadReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{47}
}

func (x *LMSUploadReq) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (x *LMSUploadReq) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

type LMSUploadRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LMSUploadRes) Reset() {
	*x = LMSUploadRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LMSUploadRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LMSUploadRes) ProtoMessage() {}

func (x *LMSUploadRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LMSUploadRes.ProtoReflect.Descriptor instead.
func (*LMSUploadRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{48}
}

type ReRunReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListId   string `protobuf:"bytes,3,opt,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
	RerunUrl string `protobuf:"bytes,4,opt,name=rerun_url,json=rerunUrl,proto3" json:"rerun_url,omitempty"`
}

func (x *ReRunReq) Reset() {
	*x = ReRunReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReRunReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReRunReq) ProtoMessage() {}

func (x *ReRunReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReRunReq.ProtoReflect.Descriptor instead.
func (*ReRunReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{49}
}

func (x *ReRunReq) GetListId() string {
	if x != nil {
		return x.ListId
	}
	return ""
}

func (x *ReRunReq) GetRerunUrl() string {
	if x != nil {
		return x.RerunUrl
	}
	return ""
}

type ReRunRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReRunRes) Reset() {
	*x = ReRunRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReRunRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReRunRes) ProtoMessage() {}

func (x *ReRunRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReRunRes.ProtoReflect.Descriptor instead.
func (*ReRunRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{50}
}

type Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression string `protobuf:"bytes,55,opt,name=expression,proto3" json:"expression,omitempty"`
	// Types that are assignable to Proc:
	//
	//	*Process_Append
	//	*Process_Sort
	//	*Process_Filter
	//	*Process_GsExport
	//	*Process_P3Export
	//	*Process_Compl
	//	*Process_Dedup
	//	*Process_CfsExport
	//	*Process_SftpExport
	//	*Process_Reshape
	//	*Process_Lookup
	//	*Process_Entrypoint
	//	*Process_ComplianceExport
	//	*Process_ApiEntrypoint
	//	*Process_SftpImport
	//	*Process_Scrub
	//	*Process_Frequency
	//	*Process_CjsImport
	//	*Process_CjsExport
	//	*Process_CjsEnrich
	//	*Process_WebEntrypoint
	//	*Process_DeleteScrubEntries
	//	*Process_WfmExport
	//	*Process_LinkEnrich
	//	*Process_Rnd
	//	*Process_ConsentEnrich
	//	*Process_ConsentExport
	//	*Process_ComplianceProcessor
	//	*Process_ConsentEntrypoint
	//	*Process_PortalLinkEnrich
	//	*Process_BulkWebEntrypoint
	//	*Process_OmniExchangeProcess
	//	*Process_WebExchangeProcess
	//	*Process_Split
	//	*Process_EpicEntryPoint
	//	*Process_ContactManagerSink
	//	*Process_Sum
	Proc isProcess_Proc `protobuf_oneof:"proc"`
}

func (x *Process) Reset() {
	*x = Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{51}
}

func (x *Process) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (m *Process) GetProc() isProcess_Proc {
	if m != nil {
		return m.Proc
	}
	return nil
}

func (x *Process) GetAppend() *AppendProcess {
	if x, ok := x.GetProc().(*Process_Append); ok {
		return x.Append
	}
	return nil
}

func (x *Process) GetSort() *SortCriteria {
	if x, ok := x.GetProc().(*Process_Sort); ok {
		return x.Sort
	}
	return nil
}

func (x *Process) GetFilter() *FilterProcess {
	if x, ok := x.GetProc().(*Process_Filter); ok {
		return x.Filter
	}
	return nil
}

func (x *Process) GetGsExport() *GSExportProcess {
	if x, ok := x.GetProc().(*Process_GsExport); ok {
		return x.GsExport
	}
	return nil
}

func (x *Process) GetP3Export() *P3ExportProcess {
	if x, ok := x.GetProc().(*Process_P3Export); ok {
		return x.P3Export
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
func (x *Process) GetCompl() *ComplProcess {
	if x, ok := x.GetProc().(*Process_Compl); ok {
		return x.Compl
	}
	return nil
}

func (x *Process) GetDedup() *DeDupCriteria {
	if x, ok := x.GetProc().(*Process_Dedup); ok {
		return x.Dedup
	}
	return nil
}

func (x *Process) GetCfsExport() *CFSExportProcess {
	if x, ok := x.GetProc().(*Process_CfsExport); ok {
		return x.CfsExport
	}
	return nil
}

func (x *Process) GetSftpExport() *SftpExportProcess {
	if x, ok := x.GetProc().(*Process_SftpExport); ok {
		return x.SftpExport
	}
	return nil
}

func (x *Process) GetReshape() *ReshapeProcess {
	if x, ok := x.GetProc().(*Process_Reshape); ok {
		return x.Reshape
	}
	return nil
}

func (x *Process) GetLookup() *LookupProcess {
	if x, ok := x.GetProc().(*Process_Lookup); ok {
		return x.Lookup
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
func (x *Process) GetEntrypoint() *EntrypointProcess {
	if x, ok := x.GetProc().(*Process_Entrypoint); ok {
		return x.Entrypoint
	}
	return nil
}

func (x *Process) GetComplianceExport() *ComplianceExportProcess {
	if x, ok := x.GetProc().(*Process_ComplianceExport); ok {
		return x.ComplianceExport
	}
	return nil
}

func (x *Process) GetApiEntrypoint() *ApiEntrypoint {
	if x, ok := x.GetProc().(*Process_ApiEntrypoint); ok {
		return x.ApiEntrypoint
	}
	return nil
}

func (x *Process) GetSftpImport() *SftpImport {
	if x, ok := x.GetProc().(*Process_SftpImport); ok {
		return x.SftpImport
	}
	return nil
}

func (x *Process) GetScrub() *ScrubProcess {
	if x, ok := x.GetProc().(*Process_Scrub); ok {
		return x.Scrub
	}
	return nil
}

func (x *Process) GetFrequency() *FrequencyProcess {
	if x, ok := x.GetProc().(*Process_Frequency); ok {
		return x.Frequency
	}
	return nil
}

func (x *Process) GetCjsImport() *CjsImportProcess {
	if x, ok := x.GetProc().(*Process_CjsImport); ok {
		return x.CjsImport
	}
	return nil
}

func (x *Process) GetCjsExport() *CjsExportProcess {
	if x, ok := x.GetProc().(*Process_CjsExport); ok {
		return x.CjsExport
	}
	return nil
}

func (x *Process) GetCjsEnrich() *CjsEnrichmentProcess {
	if x, ok := x.GetProc().(*Process_CjsEnrich); ok {
		return x.CjsEnrich
	}
	return nil
}

func (x *Process) GetWebEntrypoint() *WebEntrypointProcess {
	if x, ok := x.GetProc().(*Process_WebEntrypoint); ok {
		return x.WebEntrypoint
	}
	return nil
}

func (x *Process) GetDeleteScrubEntries() *DeleteScrubEntriesProcess {
	if x, ok := x.GetProc().(*Process_DeleteScrubEntries); ok {
		return x.DeleteScrubEntries
	}
	return nil
}

func (x *Process) GetWfmExport() *WfmExportProcess {
	if x, ok := x.GetProc().(*Process_WfmExport); ok {
		return x.WfmExport
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
func (x *Process) GetLinkEnrich() *PaymentLinkEnrichment {
	if x, ok := x.GetProc().(*Process_LinkEnrich); ok {
		return x.LinkEnrich
	}
	return nil
}

func (x *Process) GetRnd() *RndEnrichmentProcess {
	if x, ok := x.GetProc().(*Process_Rnd); ok {
		return x.Rnd
	}
	return nil
}

func (x *Process) GetConsentEnrich() *ConsentEnrichmentProcess {
	if x, ok := x.GetProc().(*Process_ConsentEnrich); ok {
		return x.ConsentEnrich
	}
	return nil
}

func (x *Process) GetConsentExport() *ConsentExportProcess {
	if x, ok := x.GetProc().(*Process_ConsentExport); ok {
		return x.ConsentExport
	}
	return nil
}

func (x *Process) GetComplianceProcessor() *ComplianceProcessor {
	if x, ok := x.GetProc().(*Process_ComplianceProcessor); ok {
		return x.ComplianceProcessor
	}
	return nil
}

func (x *Process) GetConsentEntrypoint() *ConsentEntrypointProcess {
	if x, ok := x.GetProc().(*Process_ConsentEntrypoint); ok {
		return x.ConsentEntrypoint
	}
	return nil
}

func (x *Process) GetPortalLinkEnrich() *PortalLinkEnrichment {
	if x, ok := x.GetProc().(*Process_PortalLinkEnrich); ok {
		return x.PortalLinkEnrich
	}
	return nil
}

func (x *Process) GetBulkWebEntrypoint() *BulkWebEntrypointProcess {
	if x, ok := x.GetProc().(*Process_BulkWebEntrypoint); ok {
		return x.BulkWebEntrypoint
	}
	return nil
}

func (x *Process) GetOmniExchangeProcess() *OmniExchangeProcess {
	if x, ok := x.GetProc().(*Process_OmniExchangeProcess); ok {
		return x.OmniExchangeProcess
	}
	return nil
}

func (x *Process) GetWebExchangeProcess() *WebExchangeProcess {
	if x, ok := x.GetProc().(*Process_WebExchangeProcess); ok {
		return x.WebExchangeProcess
	}
	return nil
}

func (x *Process) GetSplit() *SplitCriteria {
	if x, ok := x.GetProc().(*Process_Split); ok {
		return x.Split
	}
	return nil
}

func (x *Process) GetEpicEntryPoint() *EpicEntrypoint {
	if x, ok := x.GetProc().(*Process_EpicEntryPoint); ok {
		return x.EpicEntryPoint
	}
	return nil
}

func (x *Process) GetContactManagerSink() *ContactManagerSink {
	if x, ok := x.GetProc().(*Process_ContactManagerSink); ok {
		return x.ContactManagerSink
	}
	return nil
}

func (x *Process) GetSum() *SumProcess {
	if x, ok := x.GetProc().(*Process_Sum); ok {
		return x.Sum
	}
	return nil
}

type isProcess_Proc interface {
	isProcess_Proc()
}

type Process_Append struct {
	Append *AppendProcess `protobuf:"bytes,30,opt,name=append,proto3,oneof"`
}

type Process_Sort struct {
	Sort *SortCriteria `protobuf:"bytes,31,opt,name=sort,proto3,oneof"`
}

type Process_Filter struct {
	Filter *FilterProcess `protobuf:"bytes,32,opt,name=filter,proto3,oneof"`
}

type Process_GsExport struct {
	GsExport *GSExportProcess `protobuf:"bytes,42,opt,name=gs_export,json=gsExport,proto3,oneof"`
}

type Process_P3Export struct {
	P3Export *P3ExportProcess `protobuf:"bytes,44,opt,name=p3_export,json=p3Export,proto3,oneof"`
}

type Process_Compl struct {
	// USE LookupProcess
	//
	// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
	Compl *ComplProcess `protobuf:"bytes,45,opt,name=compl,proto3,oneof"`
}

type Process_Dedup struct {
	Dedup *DeDupCriteria `protobuf:"bytes,46,opt,name=dedup,proto3,oneof"`
}

type Process_CfsExport struct {
	CfsExport *CFSExportProcess `protobuf:"bytes,47,opt,name=cfs_export,json=cfsExport,proto3,oneof"`
}

type Process_SftpExport struct {
	SftpExport *SftpExportProcess `protobuf:"bytes,48,opt,name=sftp_export,json=sftpExport,proto3,oneof"`
}

type Process_Reshape struct {
	Reshape *ReshapeProcess `protobuf:"bytes,49,opt,name=reshape,proto3,oneof"`
}

type Process_Lookup struct {
	Lookup *LookupProcess `protobuf:"bytes,50,opt,name=lookup,proto3,oneof"`
}

type Process_Entrypoint struct {
	// split into ApiEntrypoint and SftpImport
	//
	// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
	Entrypoint *EntrypointProcess `protobuf:"bytes,51,opt,name=entrypoint,proto3,oneof"`
}

type Process_ComplianceExport struct {
	ComplianceExport *ComplianceExportProcess `protobuf:"bytes,52,opt,name=compliance_export,json=complianceExport,proto3,oneof"`
}

type Process_ApiEntrypoint struct {
	ApiEntrypoint *ApiEntrypoint `protobuf:"bytes,53,opt,name=api_entrypoint,json=apiEntrypoint,proto3,oneof"`
}

type Process_SftpImport struct {
	SftpImport *SftpImport `protobuf:"bytes,54,opt,name=sftp_import,json=sftpImport,proto3,oneof"`
}

type Process_Scrub struct {
	Scrub *ScrubProcess `protobuf:"bytes,56,opt,name=scrub,proto3,oneof"`
}

type Process_Frequency struct {
	Frequency *FrequencyProcess `protobuf:"bytes,57,opt,name=frequency,proto3,oneof"`
}

type Process_CjsImport struct {
	// Will import a list from Durable Data Service(CJS)
	// The templates for CJS and LMS will need to match
	CjsImport *CjsImportProcess `protobuf:"bytes,58,opt,name=cjs_import,json=cjsImport,proto3,oneof"`
}

type Process_CjsExport struct {
	// Exports a list to Durable Data Service (CJS)
	// The exported fields will need to match the
	// CJS template if exporting to an existing list.
	CjsExport *CjsExportProcess `protobuf:"bytes,59,opt,name=cjs_export,json=cjsExport,proto3,oneof"`
}

type Process_CjsEnrich struct {
	// Enriches an LMS list with
	// data from a CJS list
	CjsEnrich *CjsEnrichmentProcess `protobuf:"bytes,60,opt,name=cjs_enrich,json=cjsEnrich,proto3,oneof"`
}

type Process_WebEntrypoint struct {
	WebEntrypoint *WebEntrypointProcess `protobuf:"bytes,61,opt,name=web_entrypoint,json=webEntrypoint,proto3,oneof"`
}

type Process_DeleteScrubEntries struct {
	DeleteScrubEntries *DeleteScrubEntriesProcess `protobuf:"bytes,62,opt,name=delete_scrub_entries,json=deleteScrubEntries,proto3,oneof"`
}

type Process_WfmExport struct {
	WfmExport *WfmExportProcess `protobuf:"bytes,63,opt,name=wfm_export,json=wfmExport,proto3,oneof"`
}

type Process_LinkEnrich struct {
	// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
	LinkEnrich *PaymentLinkEnrichment `protobuf:"bytes,64,opt,name=link_enrich,json=linkEnrich,proto3,oneof"`
}

type Process_Rnd struct {
	Rnd *RndEnrichmentProcess `protobuf:"bytes,65,opt,name=rnd,proto3,oneof"`
}

type Process_ConsentEnrich struct {
	// Enriches an LMS list with consent data
	ConsentEnrich *ConsentEnrichmentProcess `protobuf:"bytes,66,opt,name=consent_enrich,json=consentEnrich,proto3,oneof"`
}

type Process_ConsentExport struct {
	// Exchanges with compliance consent to add or delete consents
	ConsentExport *ConsentExportProcess `protobuf:"bytes,67,opt,name=consent_export,json=consentExport,proto3,oneof"`
}

type Process_ComplianceProcessor struct {
	// Processes a list through compliance and enriching
	// whether a coule would have been permitted or not
	ComplianceProcessor *ComplianceProcessor `protobuf:"bytes,69,opt,name=compliance_processor,json=complianceProcessor,proto3,oneof"`
}

type Process_ConsentEntrypoint struct {
	ConsentEntrypoint *ConsentEntrypointProcess `protobuf:"bytes,70,opt,name=consent_entrypoint,json=consentEntrypoint,proto3,oneof"`
}

type Process_PortalLinkEnrich struct {
	PortalLinkEnrich *PortalLinkEnrichment `protobuf:"bytes,71,opt,name=portal_link_enrich,json=portalLinkEnrich,proto3,oneof"`
}

type Process_BulkWebEntrypoint struct {
	BulkWebEntrypoint *BulkWebEntrypointProcess `protobuf:"bytes,72,opt,name=bulk_web_entrypoint,json=bulkWebEntrypoint,proto3,oneof"`
}

type Process_OmniExchangeProcess struct {
	// OmniExchangeProcess allows omni to import contacts using LMS file upload
	OmniExchangeProcess *OmniExchangeProcess `protobuf:"bytes,73,opt,name=omni_exchange_process,json=omniExchangeProcess,proto3,oneof"`
}

type Process_WebExchangeProcess struct {
	// WebExchangeProcess allows a user to setup a process to send data to an external api
	WebExchangeProcess *WebExchangeProcess `protobuf:"bytes,74,opt,name=web_exchange_process,json=webExchangeProcess,proto3,oneof"`
}

type Process_Split struct {
	Split *SplitCriteria `protobuf:"bytes,75,opt,name=split,proto3,oneof"`
}

type Process_EpicEntryPoint struct {
	EpicEntryPoint *EpicEntrypoint `protobuf:"bytes,76,opt,name=epic_entry_point,json=epicEntryPoint,proto3,oneof"`
}

type Process_ContactManagerSink struct {
	ContactManagerSink *ContactManagerSink `protobuf:"bytes,77,opt,name=contact_manager_sink,json=contactManagerSink,proto3,oneof"`
}

type Process_Sum struct {
	Sum *SumProcess `protobuf:"bytes,78,opt,name=sum,proto3,oneof"`
}

func (*Process_Append) isProcess_Proc() {}

func (*Process_Sort) isProcess_Proc() {}

func (*Process_Filter) isProcess_Proc() {}

func (*Process_GsExport) isProcess_Proc() {}

func (*Process_P3Export) isProcess_Proc() {}

func (*Process_Compl) isProcess_Proc() {}

func (*Process_Dedup) isProcess_Proc() {}

func (*Process_CfsExport) isProcess_Proc() {}

func (*Process_SftpExport) isProcess_Proc() {}

func (*Process_Reshape) isProcess_Proc() {}

func (*Process_Lookup) isProcess_Proc() {}

func (*Process_Entrypoint) isProcess_Proc() {}

func (*Process_ComplianceExport) isProcess_Proc() {}

func (*Process_ApiEntrypoint) isProcess_Proc() {}

func (*Process_SftpImport) isProcess_Proc() {}

func (*Process_Scrub) isProcess_Proc() {}

func (*Process_Frequency) isProcess_Proc() {}

func (*Process_CjsImport) isProcess_Proc() {}

func (*Process_CjsExport) isProcess_Proc() {}

func (*Process_CjsEnrich) isProcess_Proc() {}

func (*Process_WebEntrypoint) isProcess_Proc() {}

func (*Process_DeleteScrubEntries) isProcess_Proc() {}

func (*Process_WfmExport) isProcess_Proc() {}

func (*Process_LinkEnrich) isProcess_Proc() {}

func (*Process_Rnd) isProcess_Proc() {}

func (*Process_ConsentEnrich) isProcess_Proc() {}

func (*Process_ConsentExport) isProcess_Proc() {}

func (*Process_ComplianceProcessor) isProcess_Proc() {}

func (*Process_ConsentEntrypoint) isProcess_Proc() {}

func (*Process_PortalLinkEnrich) isProcess_Proc() {}

func (*Process_BulkWebEntrypoint) isProcess_Proc() {}

func (*Process_OmniExchangeProcess) isProcess_Proc() {}

func (*Process_WebExchangeProcess) isProcess_Proc() {}

func (*Process_Split) isProcess_Proc() {}

func (*Process_EpicEntryPoint) isProcess_Proc() {}

func (*Process_ContactManagerSink) isProcess_Proc() {}

func (*Process_Sum) isProcess_Proc() {}

type ComplianceProcessor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID for the rulset to run against
	RuleSetId string `protobuf:"bytes,1,opt,name=rule_set_id,json=ruleSetId,proto3" json:"rule_set_id,omitempty"`
	// Comm type we are using (phone, email, sms)
	CommType *commons.CommType `protobuf:"bytes,5,opt,name=comm_type,json=commType,proto3" json:"comm_type,omitempty"`
	// call type we are checking (inbound, outbound, preview, mac)
	// or field containing the call type
	CallType string `protobuf:"bytes,6,opt,name=call_type,json=callType,proto3" json:"call_type,omitempty"`
	// Field containing the phone number (optional)
	PhoneNumberField string `protobuf:"bytes,7,opt,name=phone_number_field,json=phoneNumberField,proto3" json:"phone_number_field,omitempty"`
	// Field containing the email (optional)
	EmailField string `protobuf:"bytes,8,opt,name=email_field,json=emailField,proto3" json:"email_field,omitempty"`
	// Field containing the zip code
	ZipCodeField string `protobuf:"bytes,9,opt,name=zip_code_field,json=zipCodeField,proto3" json:"zip_code_field,omitempty"`
	// The Key is the metadata field name
	// The value is the record field that
	// contains the value
	CallMetadata map[string]string `protobuf:"bytes,10,rep,name=call_metadata,json=callMetadata,proto3" json:"call_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Country code, or field containing
	// the country code
	CountryCode string `protobuf:"bytes,11,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
}

func (x *ComplianceProcessor) Reset() {
	*x = ComplianceProcessor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceProcessor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceProcessor) ProtoMessage() {}

func (x *ComplianceProcessor) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceProcessor.ProtoReflect.Descriptor instead.
func (*ComplianceProcessor) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{52}
}

func (x *ComplianceProcessor) GetRuleSetId() string {
	if x != nil {
		return x.RuleSetId
	}
	return ""
}

func (x *ComplianceProcessor) GetCommType() *commons.CommType {
	if x != nil {
		return x.CommType
	}
	return nil
}

func (x *ComplianceProcessor) GetCallType() string {
	if x != nil {
		return x.CallType
	}
	return ""
}

func (x *ComplianceProcessor) GetPhoneNumberField() string {
	if x != nil {
		return x.PhoneNumberField
	}
	return ""
}

func (x *ComplianceProcessor) GetEmailField() string {
	if x != nil {
		return x.EmailField
	}
	return ""
}

func (x *ComplianceProcessor) GetZipCodeField() string {
	if x != nil {
		return x.ZipCodeField
	}
	return ""
}

func (x *ComplianceProcessor) GetCallMetadata() map[string]string {
	if x != nil {
		return x.CallMetadata
	}
	return nil
}

func (x *ComplianceProcessor) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

// sources the LMS list with consent records
type ConsentEntrypointProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Profile Id to get consent records from
	ConsentProfileId string `protobuf:"bytes,1,opt,name=consent_profile_id,json=consentProfileId,proto3" json:"consent_profile_id,omitempty"`
}

func (x *ConsentEntrypointProcess) Reset() {
	*x = ConsentEntrypointProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentEntrypointProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentEntrypointProcess) ProtoMessage() {}

func (x *ConsentEntrypointProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentEntrypointProcess.ProtoReflect.Descriptor instead.
func (*ConsentEntrypointProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{53}
}

func (x *ConsentEntrypointProcess) GetConsentProfileId() string {
	if x != nil {
		return x.ConsentProfileId
	}
	return ""
}

type ConsentEnrichmentProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies which record field contains the content
	ContentField string `protobuf:"bytes,3,opt,name=content_field,json=contentField,proto3" json:"content_field,omitempty"`
	// Profile to use
	ConsentProfile string `protobuf:"bytes,4,opt,name=consent_profile,json=consentProfile,proto3" json:"consent_profile,omitempty"`
	// Profile Id
	ConsentProfileId string `protobuf:"bytes,5,opt,name=consent_profile_id,json=consentProfileId,proto3" json:"consent_profile_id,omitempty"`
}

func (x *ConsentEnrichmentProcess) Reset() {
	*x = ConsentEnrichmentProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentEnrichmentProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentEnrichmentProcess) ProtoMessage() {}

func (x *ConsentEnrichmentProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentEnrichmentProcess.ProtoReflect.Descriptor instead.
func (*ConsentEnrichmentProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{54}
}

func (x *ConsentEnrichmentProcess) GetContentField() string {
	if x != nil {
		return x.ContentField
	}
	return ""
}

func (x *ConsentEnrichmentProcess) GetConsentProfile() string {
	if x != nil {
		return x.ConsentProfile
	}
	return ""
}

func (x *ConsentEnrichmentProcess) GetConsentProfileId() string {
	if x != nil {
		return x.ConsentProfileId
	}
	return ""
}

type ConsentExportProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies which record field is the content
	ContentField string `protobuf:"bytes,3,opt,name=content_field,json=contentField,proto3" json:"content_field,omitempty"`
	// Profile to use
	ConsentProfile string `protobuf:"bytes,4,opt,name=consent_profile,json=consentProfile,proto3" json:"consent_profile,omitempty"`
	// Profile ID of profile to use
	ConsentProfileId string `protobuf:"bytes,5,opt,name=consent_profile_id,json=consentProfileId,proto3" json:"consent_profile_id,omitempty"` // Optional, only needed with phone/sms
	// Run as test, disabled, or normal
	RunType commons.RunType `protobuf:"varint,6,opt,name=run_type,json=runType,proto3,enum=api.commons.RunType" json:"run_type,omitempty"`
	// Type of consent action to do: ADD/REVOKE
	Action commons.ConsentActionType `protobuf:"varint,7,opt,name=action,proto3,enum=api.commons.ConsentActionType" json:"action,omitempty"`
	// Field name or literal value for referring url when creating consent
	ReferringUrl string `protobuf:"bytes,8,opt,name=referring_url,json=referringUrl,proto3" json:"referring_url,omitempty"`
	// Field name or literal value for topic when creating consent
	Topic string `protobuf:"bytes,9,opt,name=topic,proto3" json:"topic,omitempty"`
	// Field name or literal value for revoked reason when creating consent
	RevokedReason string `protobuf:"bytes,10,opt,name=revoked_reason,json=revokedReason,proto3" json:"revoked_reason,omitempty"`
	// Field name or literal value for granted reason when creating consent
	GrantedReason string `protobuf:"bytes,11,opt,name=granted_reason,json=grantedReason,proto3" json:"granted_reason,omitempty"`
	// Field name or literal value for proof when creating consent
	Proof string `protobuf:"bytes,12,opt,name=proof,proto3" json:"proof,omitempty"`
	// Field name or literal value for "condition time of day from" when creating consent
	ConditionTimeOfDayFrom string `protobuf:"bytes,13,opt,name=condition_time_of_day_from,json=conditionTimeOfDayFrom,proto3" json:"condition_time_of_day_from,omitempty"`
	// Field name or literal value for "condition time of day to" when creating consent
	ConditionTimeOfDayTo string `protobuf:"bytes,14,opt,name=condition_time_of_day_to,json=conditionTimeOfDayTo,proto3" json:"condition_time_of_day_to,omitempty"`
	// Field name or literal value for notes when creating consent
	Notes string `protobuf:"bytes,15,opt,name=notes,proto3" json:"notes,omitempty"`
	// Field name for expire timestamp when creating consent
	// replaced by expiration
	//
	// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
	Expire string `protobuf:"bytes,16,opt,name=expire,proto3" json:"expire,omitempty"`
	// Field name for "condition from" timestamp when creating consent
	ConditionFrom string `protobuf:"bytes,17,opt,name=condition_from,json=conditionFrom,proto3" json:"condition_from,omitempty"`
	// Field name for "condition to" timestamp when creating consent
	ConditionTo string `protobuf:"bytes,18,opt,name=condition_to,json=conditionTo,proto3" json:"condition_to,omitempty"`
	// Either a field name or content type value for the contennt type of the content
	//
	// Types that are assignable to ContentType:
	//
	//	*ConsentExportProcess_ContentTypeVal
	//	*ConsentExportProcess_ContentTypeFieldName
	ContentType isConsentExportProcess_ContentType `protobuf_oneof:"content_type"`
	// Either a field name or channel type value for the channel type. Field value should be a string
	//
	// Types that are assignable to ChannelType:
	//
	//	*ConsentExportProcess_ChannelTypeVal
	//	*ConsentExportProcess_ChannelTypeFieldName
	ChannelType isConsentExportProcess_ChannelType `protobuf_oneof:"channel_type"`
	// Types that are assignable to Expiration:
	//
	//	*ConsentExportProcess_ExpirationDate
	//	*ConsentExportProcess_ExpirationFieldName
	//	*ConsentExportProcess_ExpirationAfterDuration
	Expiration isConsentExportProcess_Expiration `protobuf_oneof:"expiration"`
}

func (x *ConsentExportProcess) Reset() {
	*x = ConsentExportProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentExportProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentExportProcess) ProtoMessage() {}

func (x *ConsentExportProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentExportProcess.ProtoReflect.Descriptor instead.
func (*ConsentExportProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{55}
}

func (x *ConsentExportProcess) GetContentField() string {
	if x != nil {
		return x.ContentField
	}
	return ""
}

func (x *ConsentExportProcess) GetConsentProfile() string {
	if x != nil {
		return x.ConsentProfile
	}
	return ""
}

func (x *ConsentExportProcess) GetConsentProfileId() string {
	if x != nil {
		return x.ConsentProfileId
	}
	return ""
}

func (x *ConsentExportProcess) GetRunType() commons.RunType {
	if x != nil {
		return x.RunType
	}
	return commons.RunType(0)
}

func (x *ConsentExportProcess) GetAction() commons.ConsentActionType {
	if x != nil {
		return x.Action
	}
	return commons.ConsentActionType(0)
}

func (x *ConsentExportProcess) GetReferringUrl() string {
	if x != nil {
		return x.ReferringUrl
	}
	return ""
}

func (x *ConsentExportProcess) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ConsentExportProcess) GetRevokedReason() string {
	if x != nil {
		return x.RevokedReason
	}
	return ""
}

func (x *ConsentExportProcess) GetGrantedReason() string {
	if x != nil {
		return x.GrantedReason
	}
	return ""
}

func (x *ConsentExportProcess) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

func (x *ConsentExportProcess) GetConditionTimeOfDayFrom() string {
	if x != nil {
		return x.ConditionTimeOfDayFrom
	}
	return ""
}

func (x *ConsentExportProcess) GetConditionTimeOfDayTo() string {
	if x != nil {
		return x.ConditionTimeOfDayTo
	}
	return ""
}

func (x *ConsentExportProcess) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
func (x *ConsentExportProcess) GetExpire() string {
	if x != nil {
		return x.Expire
	}
	return ""
}

func (x *ConsentExportProcess) GetConditionFrom() string {
	if x != nil {
		return x.ConditionFrom
	}
	return ""
}

func (x *ConsentExportProcess) GetConditionTo() string {
	if x != nil {
		return x.ConditionTo
	}
	return ""
}

func (m *ConsentExportProcess) GetContentType() isConsentExportProcess_ContentType {
	if m != nil {
		return m.ContentType
	}
	return nil
}

func (x *ConsentExportProcess) GetContentTypeVal() commons.ContentType {
	if x, ok := x.GetContentType().(*ConsentExportProcess_ContentTypeVal); ok {
		return x.ContentTypeVal
	}
	return commons.ContentType(0)
}

func (x *ConsentExportProcess) GetContentTypeFieldName() string {
	if x, ok := x.GetContentType().(*ConsentExportProcess_ContentTypeFieldName); ok {
		return x.ContentTypeFieldName
	}
	return ""
}

func (m *ConsentExportProcess) GetChannelType() isConsentExportProcess_ChannelType {
	if m != nil {
		return m.ChannelType
	}
	return nil
}

func (x *ConsentExportProcess) GetChannelTypeVal() commons.Channel {
	if x, ok := x.GetChannelType().(*ConsentExportProcess_ChannelTypeVal); ok {
		return x.ChannelTypeVal
	}
	return commons.Channel(0)
}

func (x *ConsentExportProcess) GetChannelTypeFieldName() string {
	if x, ok := x.GetChannelType().(*ConsentExportProcess_ChannelTypeFieldName); ok {
		return x.ChannelTypeFieldName
	}
	return ""
}

func (m *ConsentExportProcess) GetExpiration() isConsentExportProcess_Expiration {
	if m != nil {
		return m.Expiration
	}
	return nil
}

func (x *ConsentExportProcess) GetExpirationDate() *timestamppb.Timestamp {
	if x, ok := x.GetExpiration().(*ConsentExportProcess_ExpirationDate); ok {
		return x.ExpirationDate
	}
	return nil
}

func (x *ConsentExportProcess) GetExpirationFieldName() string {
	if x, ok := x.GetExpiration().(*ConsentExportProcess_ExpirationFieldName); ok {
		return x.ExpirationFieldName
	}
	return ""
}

func (x *ConsentExportProcess) GetExpirationAfterDuration() *durationpb.Duration {
	if x, ok := x.GetExpiration().(*ConsentExportProcess_ExpirationAfterDuration); ok {
		return x.ExpirationAfterDuration
	}
	return nil
}

type isConsentExportProcess_ContentType interface {
	isConsentExportProcess_ContentType()
}

type ConsentExportProcess_ContentTypeVal struct {
	ContentTypeVal commons.ContentType `protobuf:"varint,27,opt,name=content_type_val,json=contentTypeVal,proto3,enum=api.commons.ContentType,oneof"`
}

type ConsentExportProcess_ContentTypeFieldName struct {
	ContentTypeFieldName string `protobuf:"bytes,28,opt,name=content_type_field_name,json=contentTypeFieldName,proto3,oneof"`
}

func (*ConsentExportProcess_ContentTypeVal) isConsentExportProcess_ContentType() {}

func (*ConsentExportProcess_ContentTypeFieldName) isConsentExportProcess_ContentType() {}

type isConsentExportProcess_ChannelType interface {
	isConsentExportProcess_ChannelType()
}

type ConsentExportProcess_ChannelTypeVal struct {
	ChannelTypeVal commons.Channel `protobuf:"varint,29,opt,name=channel_type_val,json=channelTypeVal,proto3,enum=api.commons.Channel,oneof"`
}

type ConsentExportProcess_ChannelTypeFieldName struct {
	ChannelTypeFieldName string `protobuf:"bytes,30,opt,name=channel_type_field_name,json=channelTypeFieldName,proto3,oneof"`
}

func (*ConsentExportProcess_ChannelTypeVal) isConsentExportProcess_ChannelType() {}

func (*ConsentExportProcess_ChannelTypeFieldName) isConsentExportProcess_ChannelType() {}

type isConsentExportProcess_Expiration interface {
	isConsentExportProcess_Expiration()
}

type ConsentExportProcess_ExpirationDate struct {
	// the static time that consent will expire at
	ExpirationDate *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=expiration_date,json=expirationDate,proto3,oneof"`
}

type ConsentExportProcess_ExpirationFieldName struct {
	// the field name that holds info about the static time consent will expire at
	ExpirationFieldName string `protobuf:"bytes,32,opt,name=expiration_field_name,json=expirationFieldName,proto3,oneof"`
}

type ConsentExportProcess_ExpirationAfterDuration struct {
	// the relative time consent will expire at
	ExpirationAfterDuration *durationpb.Duration `protobuf:"bytes,33,opt,name=expiration_after_duration,json=expirationAfterDuration,proto3,oneof"`
}

func (*ConsentExportProcess_ExpirationDate) isConsentExportProcess_Expiration() {}

func (*ConsentExportProcess_ExpirationFieldName) isConsentExportProcess_Expiration() {}

func (*ConsentExportProcess_ExpirationAfterDuration) isConsentExportProcess_Expiration() {}

type PaymentLinkEnrichment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
	PaymentLinkConfigId string `protobuf:"bytes,2,opt,name=payment_link_config_id,json=paymentLinkConfigId,proto3" json:"payment_link_config_id,omitempty"`
	// if true, we will not generate a link for lms records that to not contain *all* of the fields.
	// instead we will move that record to the discards
	//
	// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
	DiscardOnMissingFields bool `protobuf:"varint,3,opt,name=discard_on_missing_fields,json=discardOnMissingFields,proto3" json:"discard_on_missing_fields,omitempty"`
	// lms field names as keys, mapped to what they should be called in the portal
	KeyMap map[string]string `protobuf:"bytes,4,rep,name=key_map,json=keyMap,proto3" json:"key_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// the portal that these links will belong to.
	PortalId string `protobuf:"bytes,5,opt,name=portal_id,json=portalId,proto3" json:"portal_id,omitempty"`
}

func (x *PaymentLinkEnrichment) Reset() {
	*x = PaymentLinkEnrichment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentLinkEnrichment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentLinkEnrichment) ProtoMessage() {}

func (x *PaymentLinkEnrichment) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentLinkEnrichment.ProtoReflect.Descriptor instead.
func (*PaymentLinkEnrichment) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{56}
}

// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
func (x *PaymentLinkEnrichment) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
func (x *PaymentLinkEnrichment) GetPaymentLinkConfigId() string {
	if x != nil {
		return x.PaymentLinkConfigId
	}
	return ""
}

// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
func (x *PaymentLinkEnrichment) GetDiscardOnMissingFields() bool {
	if x != nil {
		return x.DiscardOnMissingFields
	}
	return false
}

func (x *PaymentLinkEnrichment) GetKeyMap() map[string]string {
	if x != nil {
		return x.KeyMap
	}
	return nil
}

func (x *PaymentLinkEnrichment) GetPortalId() string {
	if x != nil {
		return x.PortalId
	}
	return ""
}

type PortalLinkEnrichment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// lms field names as keys, mapped to what they should be called in the portal
	KeyMap map[string]string `protobuf:"bytes,1,rep,name=key_map,json=keyMap,proto3" json:"key_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// the portal that these links will belong to.
	PortalId string `protobuf:"bytes,2,opt,name=portal_id,json=portalId,proto3" json:"portal_id,omitempty"`
	// unit type and quantity of: months, weeks, days, hours
	Expiration *Expiration `protobuf:"bytes,6,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// if the payment will process or not
	Demo bool `protobuf:"varint,7,opt,name=demo,proto3" json:"demo,omitempty"`
}

func (x *PortalLinkEnrichment) Reset() {
	*x = PortalLinkEnrichment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalLinkEnrichment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalLinkEnrichment) ProtoMessage() {}

func (x *PortalLinkEnrichment) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalLinkEnrichment.ProtoReflect.Descriptor instead.
func (*PortalLinkEnrichment) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{57}
}

func (x *PortalLinkEnrichment) GetKeyMap() map[string]string {
	if x != nil {
		return x.KeyMap
	}
	return nil
}

func (x *PortalLinkEnrichment) GetPortalId() string {
	if x != nil {
		return x.PortalId
	}
	return ""
}

func (x *PortalLinkEnrichment) GetExpiration() *Expiration {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *PortalLinkEnrichment) GetDemo() bool {
	if x != nil {
		return x.Demo
	}
	return false
}

type Expiration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// units can be weeks, days, or hours
	Units TimeUnit `protobuf:"varint,1,opt,name=units,proto3,enum=api.v0alpha.TimeUnit" json:"units,omitempty"`
	// max 1 year
	Quantity int64 `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *Expiration) Reset() {
	*x = Expiration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expiration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expiration) ProtoMessage() {}

func (x *Expiration) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expiration.ProtoReflect.Descriptor instead.
func (*Expiration) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{58}
}

func (x *Expiration) GetUnits() TimeUnit {
	if x != nil {
		return x.Units
	}
	return TimeUnit_DEFAULT
}

func (x *Expiration) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

// split into ApiEntrypoint and SftpImport
type EntrypointProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EntrypointProcess) Reset() {
	*x = EntrypointProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntrypointProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntrypointProcess) ProtoMessage() {}

func (x *EntrypointProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntrypointProcess.ProtoReflect.Descriptor instead.
func (*EntrypointProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{59}
}

type ApiEntrypoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FtsId string `protobuf:"bytes,100,opt,name=fts_id,json=ftsId,proto3" json:"fts_id,omitempty"`
	// prefered/default template
	FileTemplateId string `protobuf:"bytes,16,opt,name=file_template_id,json=fileTemplateId,proto3" json:"file_template_id,omitempty"`
	Incremental    bool   `protobuf:"varint,17,opt,name=incremental,proto3" json:"incremental,omitempty"`
	Encrypted      bool   `protobuf:"varint,18,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
}

func (x *ApiEntrypoint) Reset() {
	*x = ApiEntrypoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiEntrypoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiEntrypoint) ProtoMessage() {}

func (x *ApiEntrypoint) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiEntrypoint.ProtoReflect.Descriptor instead.
func (*ApiEntrypoint) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{60}
}

func (x *ApiEntrypoint) GetFtsId() string {
	if x != nil {
		return x.FtsId
	}
	return ""
}

func (x *ApiEntrypoint) GetFileTemplateId() string {
	if x != nil {
		return x.FileTemplateId
	}
	return ""
}

func (x *ApiEntrypoint) GetIncremental() bool {
	if x != nil {
		return x.Incremental
	}
	return false
}

func (x *ApiEntrypoint) GetEncrypted() bool {
	if x != nil {
		return x.Encrypted
	}
	return false
}

// HttpReq is what we will use to construct a GET or POST request to the server.
type HttpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// what url to hit. First url in the group Must be able to be used as is, it
	// won't be parsed or messed with. Just passed directly to an http client.
	// every additional url instead of being a simple string can use values
	// retrieved from the previous response body, or headers. Examples: url =
	// "https://{{header.nextUrl}}" url = "{{body.path.toThe.1.nextUrl}}/search?
	// country={{body.country}}" to restate in english the examples: we will
	// replace the contents between {{ }} with the values retrieved from the
	// previous response body or headers the last url must always contain records
	// that can be parsed by the specified file template. templated values must
	// always be:
	//   - wrapped in {{ }},
	//   - first word be either "header." or "body."
	//     followed by a json dot path to the value to be looked up, or
	//   - a named starting with $ ex. {{$token}} referencing a previous saved value.
	//   - a special field: <TODAY> <NOW>  <TODAY.UNIX>
	//
	// if one of these template values is found, it is assumed the previous
	// response is json, otherwise the lookups will fail, and the entrypoint will
	// error.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// initial headers must have static values for all the key value pairs.
	// every headers field after the first can contain template wrappers to
	// specify looking up the value from the previous response body, or headers
	// example:
	// { "key": "value", "{{header.nextKey}}": "{{body.somePath.to.a.str}}"}
	Headers map[string]string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// same as url, and headers fields, it is possible to use templated values to
	// construct the body often, body is either empty, or a json string
	Body string `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	// what type of request to make  GET by default
	Method commons.HttpVerb `protobuf:"varint,4,opt,name=method,proto3,enum=api.commons.HttpVerb" json:"method,omitempty"`
	// the values to save from this response.
	// saved values can be referenced on *all* future requests.
	// so things like auth tokens need to be declared here so they can be
	// referenced by name later.
	// ex:
	// putting { "token": "body.response.authToken" } in the map
	// will allow us to use {{$token}} in all future http requests
	NamedResponseValues map[string]string `protobuf:"bytes,5,rep,name=named_response_values,json=namedResponseValues,proto3" json:"named_response_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HttpReq) Reset() {
	*x = HttpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpReq) ProtoMessage() {}

func (x *HttpReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpReq.ProtoReflect.Descriptor instead.
func (*HttpReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{61}
}

func (x *HttpReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HttpReq) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HttpReq) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *HttpReq) GetMethod() commons.HttpVerb {
	if x != nil {
		return x.Method
	}
	return commons.HttpVerb(0)
}

func (x *HttpReq) GetNamedResponseValues() map[string]string {
	if x != nil {
		return x.NamedResponseValues
	}
	return nil
}

type WebEntrypointProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the requests to make, in order, to get to our records.
	// Last request in the array must always be able to be parsed by the file template, or the template represented by the file_template_id
	// a nil, or 0 length array for http_requests will fail the entrypoint.
	// See comments on the HttpReq message for using templated values in the requests.
	HttpRequests   []*HttpReq `protobuf:"bytes,1,rep,name=http_requests,json=httpRequests,proto3" json:"http_requests,omitempty"`
	FileTemplateId string     `protobuf:"bytes,5,opt,name=file_template_id,json=fileTemplateId,proto3" json:"file_template_id,omitempty"`
	// if set, the process will use this exact template during processing
	FileTemplate *FileTemplate `protobuf:"bytes,6,opt,name=file_template,json=fileTemplate,proto3" json:"file_template,omitempty"`
	// The name of this process. -YYYYMMDD will be attached.
	// If empty, defaults to web-entrypoint-<now>.
	// If scheduled through the lms-api, the element name will be used if left blank
	Name string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	// the cron string, just like sftp_import process
	Cron string `protobuf:"bytes,19,opt,name=cron,proto3" json:"cron,omitempty"`
	// Specifies the timezone to be used by the cron
	Timezone string `protobuf:"bytes,20,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// if false, the cron will not put events int he queue when triggered
	Enabled bool `protobuf:"varint,21,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *WebEntrypointProcess) Reset() {
	*x = WebEntrypointProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebEntrypointProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebEntrypointProcess) ProtoMessage() {}

func (x *WebEntrypointProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebEntrypointProcess.ProtoReflect.Descriptor instead.
func (*WebEntrypointProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{62}
}

func (x *WebEntrypointProcess) GetHttpRequests() []*HttpReq {
	if x != nil {
		return x.HttpRequests
	}
	return nil
}

func (x *WebEntrypointProcess) GetFileTemplateId() string {
	if x != nil {
		return x.FileTemplateId
	}
	return ""
}

func (x *WebEntrypointProcess) GetFileTemplate() *FileTemplate {
	if x != nil {
		return x.FileTemplate
	}
	return nil
}

func (x *WebEntrypointProcess) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WebEntrypointProcess) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

func (x *WebEntrypointProcess) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *WebEntrypointProcess) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// BulkWebEntrypointProcess works like a WebEntrypointProcess, but allows
// user to specify a paginated request that is repeated till there are no
// more records to import. This should be used when we don't know how much
// data we are importing, or if we have a long running
type BulkWebEntrypointProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the requests to make, in order, to access priliminary data needed
	// to make the bulk data action part of the entrypoint.
	// the user is expected to specify which values need to be saved
	// in the HttpReq.named_response_values map.
	PreliminaryRequests []*HttpReq `protobuf:"bytes,2,rep,name=preliminary_requests,json=preliminaryRequests,proto3" json:"preliminary_requests,omitempty"`
	// this request is expected to return records that can be parsed by
	// the file template each time it is called.
	// if no termination case is specified, then we terminate after the first run.
	PaginatedRequest *PaginatedHttpRequest `protobuf:"bytes,4,opt,name=paginated_request,json=paginatedRequest,proto3" json:"paginated_request,omitempty"`
	// the file template that can parse the paginated data
	FileTemplateId string `protobuf:"bytes,5,opt,name=file_template_id,json=fileTemplateId,proto3" json:"file_template_id,omitempty"`
	// The name of this process. -YYYYMMDD will be attached.
	// If empty, defaults to web-entrypoint-<now>.
	// If scheduled through the lms-api, the element name will be used if left
	// blank
	Name string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	// the cron string, just like sftp_import process
	Cron string `protobuf:"bytes,19,opt,name=cron,proto3" json:"cron,omitempty"`
	// Specifies the timezone to be used by the cron
	Timezone string `protobuf:"bytes,20,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// if false, the cron will not put events in the queue when triggered
	Enabled bool `protobuf:"varint,21,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// how many pages we should save before aggregating the data and sending downstream
	// default is 100. Max is 10000.
	// If a termination state hasn't been reached, the event will be re-queued and continue
	// where it left off.
	FlushPageCount int64 `protobuf:"varint,22,opt,name=flush_page_count,json=flushPageCount,proto3" json:"flush_page_count,omitempty"`
	// how much total elapsed time (in minutes) we want to wait before flushing records.
	// if total time spent aggregating the data goes over this many minutes, we will flush
	// the current records downstream.
	// default is 20. Max is 120. Min is 1.
	// If a termination state hasn't been reached, the event will be re-queued and continue
	// where it left off.
	FlushMinuteCount int64 `protobuf:"varint,23,opt,name=flush_minute_count,json=flushMinuteCount,proto3" json:"flush_minute_count,omitempty"`
	// if true, we will switch to processing mode when we have enough records to flush
	// even if we haven't downloaded all the pages yet.
	// after the current records are flushed, we switch back to downloading the remaining records.
	// If false (default), we download all the pages before we start processing any records.
	FlushDuringCheck bool `protobuf:"varint,24,opt,name=flush_during_check,json=flushDuringCheck,proto3" json:"flush_during_check,omitempty"`
}

func (x *BulkWebEntrypointProcess) Reset() {
	*x = BulkWebEntrypointProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkWebEntrypointProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkWebEntrypointProcess) ProtoMessage() {}

func (x *BulkWebEntrypointProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkWebEntrypointProcess.ProtoReflect.Descriptor instead.
func (*BulkWebEntrypointProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{63}
}

func (x *BulkWebEntrypointProcess) GetPreliminaryRequests() []*HttpReq {
	if x != nil {
		return x.PreliminaryRequests
	}
	return nil
}

func (x *BulkWebEntrypointProcess) GetPaginatedRequest() *PaginatedHttpRequest {
	if x != nil {
		return x.PaginatedRequest
	}
	return nil
}

func (x *BulkWebEntrypointProcess) GetFileTemplateId() string {
	if x != nil {
		return x.FileTemplateId
	}
	return ""
}

func (x *BulkWebEntrypointProcess) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BulkWebEntrypointProcess) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

func (x *BulkWebEntrypointProcess) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *BulkWebEntrypointProcess) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *BulkWebEntrypointProcess) GetFlushPageCount() int64 {
	if x != nil {
		return x.FlushPageCount
	}
	return 0
}

func (x *BulkWebEntrypointProcess) GetFlushMinuteCount() int64 {
	if x != nil {
		return x.FlushMinuteCount
	}
	return 0
}

func (x *BulkWebEntrypointProcess) GetFlushDuringCheck() bool {
	if x != nil {
		return x.FlushDuringCheck
	}
	return false
}

// OmniExchangeProcess allows omni to import contacts using LMS file upload
type OmniExchangeProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_id is the id for the Omni project
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// campaign_id is the id for the Omni campaign
	CampaignId int64  `protobuf:"varint,2,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	TimeZone   string `protobuf:"bytes,5,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	// the number of days into the future, can be 0
	Days int64 `protobuf:"varint,4,opt,name=days,proto3" json:"days,omitempty"`
	// hour of the day, 0-23
	Hour int64 `protobuf:"varint,6,opt,name=hour,proto3" json:"hour,omitempty"`
	// minute of the hour, 0-59
	Minute int64 `protobuf:"varint,7,opt,name=minute,proto3" json:"minute,omitempty"`
}

func (x *OmniExchangeProcess) Reset() {
	*x = OmniExchangeProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniExchangeProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniExchangeProcess) ProtoMessage() {}

func (x *OmniExchangeProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniExchangeProcess.ProtoReflect.Descriptor instead.
func (*OmniExchangeProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{64}
}

func (x *OmniExchangeProcess) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *OmniExchangeProcess) GetCampaignId() int64 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

func (x *OmniExchangeProcess) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *OmniExchangeProcess) GetDays() int64 {
	if x != nil {
		return x.Days
	}
	return 0
}

func (x *OmniExchangeProcess) GetHour() int64 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *OmniExchangeProcess) GetMinute() int64 {
	if x != nil {
		return x.Minute
	}
	return 0
}

// WebExchangeProcess is an lms exchange process that lets the user upload data to third part api.
// right now rest is supported with non bulk uploads.
type WebExchangeProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpRequests []*HttpReq `protobuf:"bytes,1,rep,name=http_requests,json=httpRequests,proto3" json:"http_requests,omitempty"`
	// threshold for a failed process. if threshold is exceeded, entire process fails
	ErrorThreshold int64 `protobuf:"varint,2,opt,name=error_threshold,json=errorThreshold,proto3" json:"error_threshold,omitempty"`
}

func (x *WebExchangeProcess) Reset() {
	*x = WebExchangeProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebExchangeProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebExchangeProcess) ProtoMessage() {}

func (x *WebExchangeProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebExchangeProcess.ProtoReflect.Descriptor instead.
func (*WebExchangeProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{65}
}

func (x *WebExchangeProcess) GetHttpRequests() []*HttpReq {
	if x != nil {
		return x.HttpRequests
	}
	return nil
}

func (x *WebExchangeProcess) GetErrorThreshold() int64 {
	if x != nil {
		return x.ErrorThreshold
	}
	return 0
}

// this request is expected to return records that can be parsed by
// the file template each time it is called.
// if no termination case is specified, (end_for_any, and end_for_all are empty)
// then we terminate after the first call.
type PaginatedHttpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// an http request that must return records.
	// the iteration_request will have access to the special template variable
	// {{$i}} which will increment by 1 every time the request is made.
	IterationRequest *HttpReq `protobuf:"bytes,1,opt,name=iteration_request,json=iterationRequest,proto3" json:"iteration_request,omitempty"`
	// the starting value of i.
	StartIndex int64 `protobuf:"varint,2,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	// terminates if *any* of the terminators return true
	EndForAny []*commons.PaginationTerminator `protobuf:"bytes,3,rep,name=end_for_any,json=endForAny,proto3" json:"end_for_any,omitempty"`
	// terminates if all fo the terminators return true
	EndForAll []*commons.PaginationTerminator `protobuf:"bytes,4,rep,name=end_for_all,json=endForAll,proto3" json:"end_for_all,omitempty"`
	// if set, and if the PaginationTerminator returns true
	// the response is considered not done.
	// No rows are expected to be imported from this response,
	// and the request will retry.
	RequestNotReady *commons.PaginationTerminator `protobuf:"bytes,5,opt,name=request_not_ready,json=requestNotReady,proto3" json:"request_not_ready,omitempty"`
	// how many seconds we will wait before retrying if request_not_ready returns true
	NotReadyWaitSeconds int64 `protobuf:"varint,6,opt,name=not_ready_wait_seconds,json=notReadyWaitSeconds,proto3" json:"not_ready_wait_seconds,omitempty"`
	// whether to retry the preliminary when we get a not ready state
	NotReadyRedoPreliminary bool `protobuf:"varint,7,opt,name=not_ready_redo_preliminary,json=notReadyRedoPreliminary,proto3" json:"not_ready_redo_preliminary,omitempty"`
	// if set we do not advance {{$i}} to the next value if request_not_ready returns true
	NotReadySkipIteration bool `protobuf:"varint,8,opt,name=not_ready_skip_iteration,json=notReadySkipIteration,proto3" json:"not_ready_skip_iteration,omitempty"`
	// whether the end page has records on it
	ProcessStopPage bool `protobuf:"varint,9,opt,name=process_stop_page,json=processStopPage,proto3" json:"process_stop_page,omitempty"`
}

func (x *PaginatedHttpRequest) Reset() {
	*x = PaginatedHttpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginatedHttpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginatedHttpRequest) ProtoMessage() {}

func (x *PaginatedHttpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginatedHttpRequest.ProtoReflect.Descriptor instead.
func (*PaginatedHttpRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{66}
}

func (x *PaginatedHttpRequest) GetIterationRequest() *HttpReq {
	if x != nil {
		return x.IterationRequest
	}
	return nil
}

func (x *PaginatedHttpRequest) GetStartIndex() int64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *PaginatedHttpRequest) GetEndForAny() []*commons.PaginationTerminator {
	if x != nil {
		return x.EndForAny
	}
	return nil
}

func (x *PaginatedHttpRequest) GetEndForAll() []*commons.PaginationTerminator {
	if x != nil {
		return x.EndForAll
	}
	return nil
}

func (x *PaginatedHttpRequest) GetRequestNotReady() *commons.PaginationTerminator {
	if x != nil {
		return x.RequestNotReady
	}
	return nil
}

func (x *PaginatedHttpRequest) GetNotReadyWaitSeconds() int64 {
	if x != nil {
		return x.NotReadyWaitSeconds
	}
	return 0
}

func (x *PaginatedHttpRequest) GetNotReadyRedoPreliminary() bool {
	if x != nil {
		return x.NotReadyRedoPreliminary
	}
	return false
}

func (x *PaginatedHttpRequest) GetNotReadySkipIteration() bool {
	if x != nil {
		return x.NotReadySkipIteration
	}
	return false
}

func (x *PaginatedHttpRequest) GetProcessStopPage() bool {
	if x != nil {
		return x.ProcessStopPage
	}
	return false
}

// Takes SFTP credentials and import a file
type SftpImport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SFTP credentials. `password` will
	// be tried first for authentication,
	// if left blank, `private_key` will be tried.
	User        string               `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	Password    string               `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	PrivateKey  string               `protobuf:"bytes,6,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	Address     string               `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	Port        string               `protobuf:"bytes,8,opt,name=port,proto3" json:"port,omitempty"`
	FilePattern *commons.FilePattern `protobuf:"bytes,13,opt,name=file_pattern,json=filePattern,proto3" json:"file_pattern,omitempty"`
	// We will only process if enabled
	Enabled bool `protobuf:"varint,15,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// prefered/default template
	FileTemplateId string `protobuf:"bytes,16,opt,name=file_template_id,json=fileTemplateId,proto3" json:"file_template_id,omitempty"`
	Incremental    bool   `protobuf:"varint,17,opt,name=incremental,proto3" json:"incremental,omitempty"`
	// Specifies whether the files to be imported
	// are encrypted with PGP key
	Encrypted bool `protobuf:"varint,18,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	// Should be a valid Cron expression
	// based on https://en.wikipedia.org/wiki/Cron
	Cron string `protobuf:"bytes,19,opt,name=cron,proto3" json:"cron,omitempty"`
	// Timezone to be used with the cron,
	// if left blank it will default to the
	// local time of whatever server it is on.
	// e.g. "America/Denver", "America/New_York"
	// Must exist in TZ database
	// https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
	Timezone string `protobuf:"bytes,20,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// Name of the transfer_config, used to find sftp configuration
	TransferConfigName string `protobuf:"bytes,21,opt,name=transfer_config_name,json=transferConfigName,proto3" json:"transfer_config_name,omitempty"`
}

func (x *SftpImport) Reset() {
	*x = SftpImport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SftpImport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SftpImport) ProtoMessage() {}

func (x *SftpImport) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SftpImport.ProtoReflect.Descriptor instead.
func (*SftpImport) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{67}
}

func (x *SftpImport) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *SftpImport) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SftpImport) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *SftpImport) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SftpImport) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *SftpImport) GetFilePattern() *commons.FilePattern {
	if x != nil {
		return x.FilePattern
	}
	return nil
}

func (x *SftpImport) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *SftpImport) GetFileTemplateId() string {
	if x != nil {
		return x.FileTemplateId
	}
	return ""
}

func (x *SftpImport) GetIncremental() bool {
	if x != nil {
		return x.Incremental
	}
	return false
}

func (x *SftpImport) GetEncrypted() bool {
	if x != nil {
		return x.Encrypted
	}
	return false
}

func (x *SftpImport) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

func (x *SftpImport) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *SftpImport) GetTransferConfigName() string {
	if x != nil {
		return x.TransferConfigName
	}
	return ""
}

type RndEnrichmentProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId                string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Field                string `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	DateLastContactField string `protobuf:"bytes,3,opt,name=date_last_contact_field,json=dateLastContactField,proto3" json:"date_last_contact_field,omitempty"`
}

func (x *RndEnrichmentProcess) Reset() {
	*x = RndEnrichmentProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RndEnrichmentProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RndEnrichmentProcess) ProtoMessage() {}

func (x *RndEnrichmentProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RndEnrichmentProcess.ProtoReflect.Descriptor instead.
func (*RndEnrichmentProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{68}
}

func (x *RndEnrichmentProcess) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *RndEnrichmentProcess) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *RndEnrichmentProcess) GetDateLastContactField() string {
	if x != nil {
		return x.DateLastContactField
	}
	return ""
}

type CjsImportProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies which CJS List to import from
	CjsCollectionId string `protobuf:"bytes,3,opt,name=cjs_collection_id,json=cjsCollectionId,proto3" json:"cjs_collection_id,omitempty"`
	// Enable/Disable the process
	Enabled bool `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Should be a valid Cron expression
	// based on https://en.wikipedia.org/wiki/Cron
	Cron string `protobuf:"bytes,6,opt,name=cron,proto3" json:"cron,omitempty"`
	// Timezone to be used with the cron,
	// if left blank it will default to the
	// local time of whatever server it is on.
	// e.g. "America/Denver", "America/New_York"
	// Must exist in TZ database
	// https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
	Timezone string `protobuf:"bytes,7,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// Specifies if a dedup should be performed when importing
	Dedup bool `protobuf:"varint,8,opt,name=dedup,proto3" json:"dedup,omitempty"`
}

func (x *CjsImportProcess) Reset() {
	*x = CjsImportProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CjsImportProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CjsImportProcess) ProtoMessage() {}

func (x *CjsImportProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CjsImportProcess.ProtoReflect.Descriptor instead.
func (*CjsImportProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{69}
}

func (x *CjsImportProcess) GetCjsCollectionId() string {
	if x != nil {
		return x.CjsCollectionId
	}
	return ""
}

func (x *CjsImportProcess) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CjsImportProcess) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

func (x *CjsImportProcess) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *CjsImportProcess) GetDedup() bool {
	if x != nil {
		return x.Dedup
	}
	return false
}

type CjsExportProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If creating a new list, generate
	// a random UUID for `cjs_collection_id`
	CjsCollectionId string `protobuf:"bytes,3,opt,name=cjs_collection_id,json=cjsCollectionId,proto3" json:"cjs_collection_id,omitempty"`
	// Specifies which fields should be exported
	Header *ExportHeader `protobuf:"bytes,4,opt,name=header,proto3" json:"header,omitempty"`
	// To Disable, or run as a test
	RunType commons.RunType `protobuf:"varint,5,opt,name=run_type,json=runType,proto3,enum=api.commons.RunType" json:"run_type,omitempty"`
	// Specifies the name of the CJS list
	// to be created
	CjsCollectionName string `protobuf:"bytes,6,opt,name=cjs_collection_name,json=cjsCollectionName,proto3" json:"cjs_collection_name,omitempty"`
	// If true it will overwrite the current
	// collection instead of appending
	Overwrite bool `protobuf:"varint,8,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
	// If true the collection will update existing
	// entries matched with the key field
	Update bool `protobuf:"varint,9,opt,name=update,proto3" json:"update,omitempty"`
	// Field to use for updating
	UpdateKeyField string `protobuf:"bytes,10,opt,name=update_key_field,json=updateKeyField,proto3" json:"update_key_field,omitempty"`
}

func (x *CjsExportProcess) Reset() {
	*x = CjsExportProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CjsExportProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CjsExportProcess) ProtoMessage() {}

func (x *CjsExportProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CjsExportProcess.ProtoReflect.Descriptor instead.
func (*CjsExportProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{70}
}

func (x *CjsExportProcess) GetCjsCollectionId() string {
	if x != nil {
		return x.CjsCollectionId
	}
	return ""
}

func (x *CjsExportProcess) GetHeader() *ExportHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CjsExportProcess) GetRunType() commons.RunType {
	if x != nil {
		return x.RunType
	}
	return commons.RunType(0)
}

func (x *CjsExportProcess) GetCjsCollectionName() string {
	if x != nil {
		return x.CjsCollectionName
	}
	return ""
}

func (x *CjsExportProcess) GetOverwrite() bool {
	if x != nil {
		return x.Overwrite
	}
	return false
}

func (x *CjsExportProcess) GetUpdate() bool {
	if x != nil {
		return x.Update
	}
	return false
}

func (x *CjsExportProcess) GetUpdateKeyField() string {
	if x != nil {
		return x.UpdateKeyField
	}
	return ""
}

type CjsEnrichmentProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the Journey collection to be used
	// Available options can be obtained
	// from Journey
	CjsCollectionId string `protobuf:"bytes,3,opt,name=cjs_collection_id,json=cjsCollectionId,proto3" json:"cjs_collection_id,omitempty"`
	// Specifies the LMS list field
	// to be used as the key when
	// doing search in CJS list
	KeyField string `protobuf:"bytes,4,opt,name=key_field,json=keyField,proto3" json:"key_field,omitempty"`
	// Specifies how to enrich the LMS list
	// OR - Acjs all records, merging any matches
	// XOR - Keep records that are only in one of the lists (exclude those in both)
	// AND - Keep only records that are in both lists, merge the records
	// JOIN - Keep all of the primary source and merge in matches from the
	//
	//	secondary source
	EnrichType commons.EnrichmentType `protobuf:"varint,5,opt,name=enrich_type,json=enrichType,proto3,enum=api.commons.EnrichmentType" json:"enrich_type,omitempty"`
	// Specifies the primary list (LMS or CJS)
	// When merging records, all the fields from the primary
	// source will be used, and only the extra fields (if any)
	// will be added to the record
	PrimarySource commons.PrimarySource `protobuf:"varint,6,opt,name=primary_source,json=primarySource,proto3,enum=api.commons.PrimarySource" json:"primary_source,omitempty"`
	// Specifies the Journey collection field
	// to be matched against.
	// Available options can be obtained
	// from Journey
	CjsKeyFieldName string `protobuf:"bytes,7,opt,name=cjs_key_field_name,json=cjsKeyFieldName,proto3" json:"cjs_key_field_name,omitempty"`
	// Specifies if the primary list columns
	// should be overwritten by the secondary
	// on matching column names
	ColumnOverwrite bool `protobuf:"varint,8,opt,name=column_overwrite,json=columnOverwrite,proto3" json:"column_overwrite,omitempty"`
	// Specifies what to do when there
	// is a duplicate match for the key in the collection
	DedupKeyPolicy commons.DedupKeyPolicy `protobuf:"varint,9,opt,name=dedup_key_policy,json=dedupKeyPolicy,proto3,enum=api.commons.DedupKeyPolicy" json:"dedup_key_policy,omitempty"`
}

func (x *CjsEnrichmentProcess) Reset() {
	*x = CjsEnrichmentProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CjsEnrichmentProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CjsEnrichmentProcess) ProtoMessage() {}

func (x *CjsEnrichmentProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CjsEnrichmentProcess.ProtoReflect.Descriptor instead.
func (*CjsEnrichmentProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{71}
}

func (x *CjsEnrichmentProcess) GetCjsCollectionId() string {
	if x != nil {
		return x.CjsCollectionId
	}
	return ""
}

func (x *CjsEnrichmentProcess) GetKeyField() string {
	if x != nil {
		return x.KeyField
	}
	return ""
}

func (x *CjsEnrichmentProcess) GetEnrichType() commons.EnrichmentType {
	if x != nil {
		return x.EnrichType
	}
	return commons.EnrichmentType(0)
}

func (x *CjsEnrichmentProcess) GetPrimarySource() commons.PrimarySource {
	if x != nil {
		return x.PrimarySource
	}
	return commons.PrimarySource(0)
}

func (x *CjsEnrichmentProcess) GetCjsKeyFieldName() string {
	if x != nil {
		return x.CjsKeyFieldName
	}
	return ""
}

func (x *CjsEnrichmentProcess) GetColumnOverwrite() bool {
	if x != nil {
		return x.ColumnOverwrite
	}
	return false
}

func (x *CjsEnrichmentProcess) GetDedupKeyPolicy() commons.DedupKeyPolicy {
	if x != nil {
		return x.DedupKeyPolicy
	}
	return commons.DedupKeyPolicy(0)
}

// this process downloads the records from the signed_url
// and writes them to the output
type AppendProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FtsId string `protobuf:"bytes,5,opt,name=fts_id,json=ftsId,proto3" json:"fts_id,omitempty"`
}

func (x *AppendProcess) Reset() {
	*x = AppendProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendProcess) ProtoMessage() {}

func (x *AppendProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendProcess.ProtoReflect.Descriptor instead.
func (*AppendProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{72}
}

func (x *AppendProcess) GetFtsId() string {
	if x != nil {
		return x.FtsId
	}
	return ""
}

// USE INSTEAD of ComplProcess
type LookupProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// names of the fields that will be used in the lookup
	FieldNames []string `protobuf:"bytes,6,rep,name=field_names,json=fieldNames,proto3" json:"field_names,omitempty"`
	// Types that are assignable to Proc:
	//
	//	*LookupProcess_Compl
	//	*LookupProcess_List
	//	*LookupProcess_Url
	Proc isLookupProcess_Proc `protobuf_oneof:"proc"`
}

func (x *LookupProcess) Reset() {
	*x = LookupProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupProcess) ProtoMessage() {}

func (x *LookupProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupProcess.ProtoReflect.Descriptor instead.
func (*LookupProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{73}
}

func (x *LookupProcess) GetFieldNames() []string {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

func (m *LookupProcess) GetProc() isLookupProcess_Proc {
	if m != nil {
		return m.Proc
	}
	return nil
}

func (x *LookupProcess) GetCompl() *LookupProcess_ComplProcess {
	if x, ok := x.GetProc().(*LookupProcess_Compl); ok {
		return x.Compl
	}
	return nil
}

func (x *LookupProcess) GetList() *LookupProcess_ListLookup {
	if x, ok := x.GetProc().(*LookupProcess_List); ok {
		return x.List
	}
	return nil
}

func (x *LookupProcess) GetUrl() *LookupProcess_UrlLookup {
	if x, ok := x.GetProc().(*LookupProcess_Url); ok {
		return x.Url
	}
	return nil
}

type isLookupProcess_Proc interface {
	isLookupProcess_Proc()
}

type LookupProcess_Compl struct {
	// lookup from compliance
	Compl *LookupProcess_ComplProcess `protobuf:"bytes,7,opt,name=compl,proto3,oneof"`
}

type LookupProcess_List struct {
	// lookup from another version of another list
	List *LookupProcess_ListLookup `protobuf:"bytes,8,opt,name=list,proto3,oneof"`
}

type LookupProcess_Url struct {
	// lookup against the records at the url
	Url *LookupProcess_UrlLookup `protobuf:"bytes,9,opt,name=url,proto3,oneof"`
}

func (*LookupProcess_Compl) isLookupProcess_Proc() {}

func (*LookupProcess_List) isLookupProcess_Proc() {}

func (*LookupProcess_Url) isLookupProcess_Proc() {}

// DEPRECATED
type ComplProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ComplProcess) Reset() {
	*x = ComplProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplProcess) ProtoMessage() {}

func (x *ComplProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplProcess.ProtoReflect.Descriptor instead.
func (*ComplProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{74}
}

type CFSExportConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  commons.ExportType `protobuf:"varint,1,opt,name=type,proto3,enum=api.commons.ExportType" json:"type,omitempty"`
	Value string             `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CFSExportConfig) Reset() {
	*x = CFSExportConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFSExportConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFSExportConfig) ProtoMessage() {}

func (x *CFSExportConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFSExportConfig.ProtoReflect.Descriptor instead.
func (*CFSExportConfig) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{75}
}

func (x *CFSExportConfig) GetType() commons.ExportType {
	if x != nil {
		return x.Type
	}
	return commons.ExportType(0)
}

func (x *CFSExportConfig) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type CFSExportReqHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExportHeader *ExportHeader      `protobuf:"bytes,1,opt,name=export_header,json=exportHeader,proto3" json:"export_header,omitempty"`
	Configs      []*CFSExportConfig `protobuf:"bytes,2,rep,name=configs,proto3" json:"configs,omitempty"`
	OrgId        string             `protobuf:"bytes,3,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	RegionId     string             `protobuf:"bytes,4,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
}

func (x *CFSExportReqHeader) Reset() {
	*x = CFSExportReqHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFSExportReqHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFSExportReqHeader) ProtoMessage() {}

func (x *CFSExportReqHeader) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFSExportReqHeader.ProtoReflect.Descriptor instead.
func (*CFSExportReqHeader) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{76}
}

func (x *CFSExportReqHeader) GetExportHeader() *ExportHeader {
	if x != nil {
		return x.ExportHeader
	}
	return nil
}

func (x *CFSExportReqHeader) GetConfigs() []*CFSExportConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

func (x *CFSExportReqHeader) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *CFSExportReqHeader) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type CFSExportProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExportHeader *ExportHeader      `protobuf:"bytes,1,opt,name=export_header,json=exportHeader,proto3" json:"export_header,omitempty"`
	Configs      []*CFSExportConfig `protobuf:"bytes,2,rep,name=configs,proto3" json:"configs,omitempty"`
}

func (x *CFSExportProcess) Reset() {
	*x = CFSExportProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFSExportProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFSExportProcess) ProtoMessage() {}

func (x *CFSExportProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFSExportProcess.ProtoReflect.Descriptor instead.
func (*CFSExportProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{77}
}

func (x *CFSExportProcess) GetExportHeader() *ExportHeader {
	if x != nil {
		return x.ExportHeader
	}
	return nil
}

func (x *CFSExportProcess) GetConfigs() []*CFSExportConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

type FilterProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression string             `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	Operations []*FilterOperation `protobuf:"bytes,2,rep,name=operations,proto3" json:"operations,omitempty"`
	Negate     bool               `protobuf:"varint,3,opt,name=negate,proto3" json:"negate,omitempty"`
}

func (x *FilterProcess) Reset() {
	*x = FilterProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterProcess) ProtoMessage() {}

func (x *FilterProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterProcess.ProtoReflect.Descriptor instead.
func (*FilterProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{78}
}

func (x *FilterProcess) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *FilterProcess) GetOperations() []*FilterOperation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *FilterProcess) GetNegate() bool {
	if x != nil {
		return x.Negate
	}
	return false
}

type FilterOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sequence of checks taken on a record that all must reduce to a boolean.
	// All results are then either AND-ed or OR-ed together. The resulting bool is
	// returned.
	Checks   []*FilterCheck        `protobuf:"bytes,1,rep,name=checks,proto3" json:"checks,omitempty"`
	Operator commons.ChainOperator `protobuf:"varint,2,opt,name=operator,proto3,enum=api.commons.ChainOperator" json:"operator,omitempty"`
}

func (x *FilterOperation) Reset() {
	*x = FilterOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterOperation) ProtoMessage() {}

func (x *FilterOperation) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterOperation.ProtoReflect.Descriptor instead.
func (*FilterOperation) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{79}
}

func (x *FilterOperation) GetChecks() []*FilterCheck {
	if x != nil {
		return x.Checks
	}
	return nil
}

func (x *FilterOperation) GetOperator() commons.ChainOperator {
	if x != nil {
		return x.Operator
	}
	return commons.ChainOperator(0)
}

// Describes a lookup of a field on a record, checking its value or type against
// another value. Each FilterCheck must boil down to a bool value.
type FilterCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// We can either check value, or type in one step, not both.
	//
	// Types that are assignable to Check:
	//
	//	*FilterCheck_ValComp
	//	*FilterCheck_TypeComp
	//	*FilterCheck_ListComp
	Check isFilterCheck_Check `protobuf_oneof:"check"`
}

func (x *FilterCheck) Reset() {
	*x = FilterCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterCheck) ProtoMessage() {}

func (x *FilterCheck) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterCheck.ProtoReflect.Descriptor instead.
func (*FilterCheck) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{80}
}

func (m *FilterCheck) GetCheck() isFilterCheck_Check {
	if m != nil {
		return m.Check
	}
	return nil
}

func (x *FilterCheck) GetValComp() *FilterCheck_ValueComparison {
	if x, ok := x.GetCheck().(*FilterCheck_ValComp); ok {
		return x.ValComp
	}
	return nil
}

func (x *FilterCheck) GetTypeComp() *FilterCheck_TypeComparison {
	if x, ok := x.GetCheck().(*FilterCheck_TypeComp); ok {
		return x.TypeComp
	}
	return nil
}

func (x *FilterCheck) GetListComp() *FilterCheck_ListComparison {
	if x, ok := x.GetCheck().(*FilterCheck_ListComp); ok {
		return x.ListComp
	}
	return nil
}

type isFilterCheck_Check interface {
	isFilterCheck_Check()
}

type FilterCheck_ValComp struct {
	ValComp *FilterCheck_ValueComparison `protobuf:"bytes,12,opt,name=val_comp,json=valComp,proto3,oneof"`
}

type FilterCheck_TypeComp struct {
	TypeComp *FilterCheck_TypeComparison `protobuf:"bytes,13,opt,name=type_comp,json=typeComp,proto3,oneof"`
}

type FilterCheck_ListComp struct {
	ListComp *FilterCheck_ListComparison `protobuf:"bytes,14,opt,name=list_comp,json=listComp,proto3,oneof"`
}

func (*FilterCheck_ValComp) isFilterCheck_Check() {}

func (*FilterCheck_TypeComp) isFilterCheck_Check() {}

func (*FilterCheck_ListComp) isFilterCheck_Check() {}

type GSExportProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket string `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	File   string `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *GSExportProcess) Reset() {
	*x = GSExportProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GSExportProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GSExportProcess) ProtoMessage() {}

func (x *GSExportProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GSExportProcess.ProtoReflect.Descriptor instead.
func (*GSExportProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{81}
}

func (x *GSExportProcess) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *GSExportProcess) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

type P3ExportProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies which fields to export
	Header            *ExportHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	ContactListPrefix string        `protobuf:"bytes,2,opt,name=contact_list_prefix,json=contactListPrefix,proto3" json:"contact_list_prefix,omitempty"`
	// P3 API Username
	//
	// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// P3 API Password
	//
	// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	// user access token for authenticating with p3 without username password combo
	AccessToken string `protobuf:"bytes,49,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	// Call List Country
	Country string `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`
	// Specifies how to handle duplicate phone numbers.
	// 'Keep and Discard' = keep the record, discard the number.
	// 'Allow' = keep the record & number.
	// 'Discard' = discard both.
	// 'Duplicate List' = create duplicate list
	// Default = 'Keep and Discard'
	DupePolicy commons.DuplicatePolicyType `protobuf:"varint,6,opt,name=dupe_policy,json=dupePolicy,proto3,enum=api.commons.DuplicatePolicyType" json:"dupe_policy,omitempty"`
	// Specifies how records without numbers should be handled.
	AbsentPolicy commons.AbsentPolicyType `protobuf:"varint,7,opt,name=absent_policy,json=absentPolicy,proto3,enum=api.commons.AbsentPolicyType" json:"absent_policy,omitempty"`
	// / The number of the import template describing this import.
	TemplateId int32 `protobuf:"varint,8,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	// Specifies a default area code to use with file
	DefaultAreaCode int32 `protobuf:"varint,9,opt,name=default_area_code,json=defaultAreaCode,proto3" json:"default_area_code,omitempty"`
	// The number of the template describing the campaign to be sent.
	ScheduleTemplateNumber int32 `protobuf:"varint,10,opt,name=schedule_template_number,json=scheduleTemplateNumber,proto3" json:"schedule_template_number,omitempty"`
	// `description` will be deprecated in
	// favor of `file_pattern`,
	// currently it is ignored
	Description string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	// To Disable or run as test
	RunType commons.RunType `protobuf:"varint,12,opt,name=run_type,json=runType,proto3,enum=api.commons.RunType" json:"run_type,omitempty"`
	// `file_pattern` is what sets the description
	// we are using api.commons.FilePattern so that it
	// can change depending on the day.
	// The directory field in this `file_pattern`
	// should not be used (it will be ignored)
	//
	// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
	FilePattern *commons.FilePattern `protobuf:"bytes,13,opt,name=file_pattern,json=filePattern,proto3" json:"file_pattern,omitempty"`
	// what to name the file
	Filename *commons.ConstructedFilename `protobuf:"bytes,43,opt,name=filename,proto3" json:"filename,omitempty"`
	// Advanced options
	// Allows ids to be specificied in place of the ones
	// already specified into the schedule template
	CallerIds []int64 `protobuf:"varint,14,rep,packed,name=caller_ids,json=callerIds,proto3" json:"caller_ids,omitempty"`
	// Scrub known cell numbers from call list
	CellScrub bool `protobuf:"varint,15,opt,name=cell_scrub,json=cellScrub,proto3" json:"cell_scrub,omitempty"`
	// Campaign start time
	StartTime *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Campaign end time
	EndTime *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// FIRST, NATURAL, or CUSTOM. Will default to FIRST
	DialOrder commons.DialOrderType `protobuf:"varint,18,opt,name=dial_order,json=dialOrder,proto3,enum=api.commons.DialOrderType" json:"dial_order,omitempty"`
	// Identifies the Email column in the contact list.
	EmailField string `protobuf:"bytes,20,opt,name=email_field,json=emailField,proto3" json:"email_field,omitempty"`
	// Email address to send campaign from.
	EmailFrom string `protobuf:"bytes,21,opt,name=email_from,json=emailFrom,proto3" json:"email_from,omitempty"`
	// Dial numbers from east to west.
	// 'true' = numbers will be dialed from east to west.
	// 'false' = numbers will be dialed in default order.
	// Default = 'false'
	FollowTheSun bool `protobuf:"varint,22,opt,name=follow_the_sun,json=followTheSun,proto3" json:"follow_the_sun,omitempty"`
	// Messages Per Minute
	MessagesPerMinute int32 `protobuf:"varint,23,opt,name=messages_per_minute,json=messagesPerMinute,proto3" json:"messages_per_minute,omitempty"`
	// Allow contacts to be inserted in random order.
	RandomizeContacts bool `protobuf:"varint,24,opt,name=randomize_contacts,json=randomizeContacts,proto3" json:"randomize_contacts,omitempty"`
	// Specifies if to schedule as paused.
	ScheduleAsPaused bool `protobuf:"varint,25,opt,name=schedule_as_paused,json=scheduleAsPaused,proto3" json:"schedule_as_paused,omitempty"`
	// Allows selection of a schedule rule (input by name)
	ScheduleRule string `protobuf:"bytes,26,opt,name=schedule_rule,json=scheduleRule,proto3" json:"schedule_rule,omitempty"`
	// TCN P3 will attempt to very file uniqueness over a 20 hour period.
	// If duplicates are found the duplicates are failed.
	// 'true' = do not attempt to verify file uniqueness.
	// 'false' = attempt to verify file uniqueness.
	// Default = 'false'
	ShaDigestOverride bool `protobuf:"varint,27,opt,name=sha_digest_override,json=shaDigestOverride,proto3" json:"sha_digest_override,omitempty"`
	// Identifies the Cell Phone column in the contact list.
	SmsField string `protobuf:"bytes,28,opt,name=sms_field,json=smsField,proto3" json:"sms_field,omitempty"`
	// Number to to send campaign from.
	SmsSourceNumber int64 `protobuf:"varint,29,opt,name=sms_source_number,json=smsSourceNumber,proto3" json:"sms_source_number,omitempty"`
	//	Allow calls after hours.
	//
	// 'true' = calls may go out after 9 P.M. and before 8 A.M.
	// 'false = calls will not go out after 9 P.M. and before 8 A.M.
	// Default = 'false'
	TimezoneOverride bool `protobuf:"varint,30,opt,name=timezone_override,json=timezoneOverride,proto3" json:"timezone_override,omitempty"`
	// Specifies how to handle zip code scrubbing.
	// If client preference is set to use zip code scrub, that value will be default.
	// 'true' = will scrub based on the client preference for zip code fields.
	// 'false' = will not scrub based on zip code.
	// Default = 'false'
	ZipScrub bool `protobuf:"varint,31,opt,name=zip_scrub,json=zipScrub,proto3" json:"zip_scrub,omitempty"`
	// Specifies the completion percentage at which to execute campaign linking.
	CompletionThreshold int32 `protobuf:"varint,32,opt,name=completion_threshold,json=completionThreshold,proto3" json:"completion_threshold,omitempty"`
	// TIMEZONE must exist in the TZ database:
	// http://en.wikipedia.org/wiki/List_of_tz_database_time_zones
	Timezone string `protobuf:"bytes,33,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// Specifies the Natural Language Compliance Rule
	// to be used. Empty will not use NLC
	ComplianceRule string `protobuf:"bytes,34,opt,name=compliance_rule,json=complianceRule,proto3" json:"compliance_rule,omitempty"`
	// what separates a field from another.  In csv this is ','
	FieldDelimiter string `protobuf:"bytes,35,opt,name=field_delimiter,json=fieldDelimiter,proto3" json:"field_delimiter,omitempty"`
	// what separates a record from another. In csv this is '\n'
	RecordDelimiter string `protobuf:"bytes,36,opt,name=record_delimiter,json=recordDelimiter,proto3" json:"record_delimiter,omitempty"`
	// Wrap fields with `"`
	QuoteFields bool `protobuf:"varint,37,opt,name=quote_fields,json=quoteFields,proto3" json:"quote_fields,omitempty"`
	// Specifies whether to export using the date
	// format defined by the field in the file
	// template or use the default
	UseCustomDateFormat bool `protobuf:"varint,38,opt,name=use_custom_date_format,json=useCustomDateFormat,proto3" json:"use_custom_date_format,omitempty"`
	// Specifies the export filetype
	// (CSV, CUSTOM, TSV, etc.)
	// If the export filetype is anything other than custom
	// `field_delimiter`, `record_delimiter` and `quote_fields`
	// will be ignored
	FileFormat commons.FileFormat `protobuf:"varint,39,opt,name=file_format,json=fileFormat,proto3,enum=api.commons.FileFormat" json:"file_format,omitempty"`
	// The fields `days_into_future`, `start_hour`
	// and `end_hour`
	// will override `start_time`, `end_time`
	// and should be used over `start_time`, and `end_time`
	// Specifies how many days into the future to schedule
	// 0 <= days < 7, 0 = today, 1 = tomorrow, etc.
	DaysIntoFuture int64 `protobuf:"varint,40,opt,name=days_into_future,json=daysIntoFuture,proto3" json:"days_into_future,omitempty"`
	// Specifies the time to start
	// in format "15:04"
	StartHour string `protobuf:"bytes,41,opt,name=start_hour,json=startHour,proto3" json:"start_hour,omitempty"`
	// Specifies the time to end
	// in format "15:04"
	EndHour string `protobuf:"bytes,42,opt,name=end_hour,json=endHour,proto3" json:"end_hour,omitempty"`
	// will schedule the campaign by timezone
	ScheduleByTimezone bool `protobuf:"varint,44,opt,name=schedule_by_timezone,json=scheduleByTimezone,proto3" json:"schedule_by_timezone,omitempty"`
	// If true, it will try to bunch all phone number
	// fields to the left.
	ShiftPhoneFields bool `protobuf:"varint,45,opt,name=shift_phone_fields,json=shiftPhoneFields,proto3" json:"shift_phone_fields,omitempty"`
	// campaign linking
	DoCampaignLinking bool   `protobuf:"varint,46,opt,name=do_campaign_linking,json=doCampaignLinking,proto3" json:"do_campaign_linking,omitempty"`
	CampaignLinkId    string `protobuf:"bytes,47,opt,name=campaign_link_id,json=campaignLinkId,proto3" json:"campaign_link_id,omitempty"`
	StopTrigger       string `protobuf:"bytes,48,opt,name=stop_trigger,json=stopTrigger,proto3" json:"stop_trigger,omitempty"`
}

func (x *P3ExportProcess) Reset() {
	*x = P3ExportProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P3ExportProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P3ExportProcess) ProtoMessage() {}

func (x *P3ExportProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P3ExportProcess.ProtoReflect.Descriptor instead.
func (*P3ExportProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{82}
}

func (x *P3ExportProcess) GetHeader() *ExportHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *P3ExportProcess) GetContactListPrefix() string {
	if x != nil {
		return x.ContactListPrefix
	}
	return ""
}

// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
func (x *P3ExportProcess) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
func (x *P3ExportProcess) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *P3ExportProcess) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *P3ExportProcess) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *P3ExportProcess) GetDupePolicy() commons.DuplicatePolicyType {
	if x != nil {
		return x.DupePolicy
	}
	return commons.DuplicatePolicyType(0)
}

func (x *P3ExportProcess) GetAbsentPolicy() commons.AbsentPolicyType {
	if x != nil {
		return x.AbsentPolicy
	}
	return commons.AbsentPolicyType(0)
}

func (x *P3ExportProcess) GetTemplateId() int32 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *P3ExportProcess) GetDefaultAreaCode() int32 {
	if x != nil {
		return x.DefaultAreaCode
	}
	return 0
}

func (x *P3ExportProcess) GetScheduleTemplateNumber() int32 {
	if x != nil {
		return x.ScheduleTemplateNumber
	}
	return 0
}

func (x *P3ExportProcess) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *P3ExportProcess) GetRunType() commons.RunType {
	if x != nil {
		return x.RunType
	}
	return commons.RunType(0)
}

// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
func (x *P3ExportProcess) GetFilePattern() *commons.FilePattern {
	if x != nil {
		return x.FilePattern
	}
	return nil
}

func (x *P3ExportProcess) GetFilename() *commons.ConstructedFilename {
	if x != nil {
		return x.Filename
	}
	return nil
}

func (x *P3ExportProcess) GetCallerIds() []int64 {
	if x != nil {
		return x.CallerIds
	}
	return nil
}

func (x *P3ExportProcess) GetCellScrub() bool {
	if x != nil {
		return x.CellScrub
	}
	return false
}

func (x *P3ExportProcess) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *P3ExportProcess) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *P3ExportProcess) GetDialOrder() commons.DialOrderType {
	if x != nil {
		return x.DialOrder
	}
	return commons.DialOrderType(0)
}

func (x *P3ExportProcess) GetEmailField() string {
	if x != nil {
		return x.EmailField
	}
	return ""
}

func (x *P3ExportProcess) GetEmailFrom() string {
	if x != nil {
		return x.EmailFrom
	}
	return ""
}

func (x *P3ExportProcess) GetFollowTheSun() bool {
	if x != nil {
		return x.FollowTheSun
	}
	return false
}

func (x *P3ExportProcess) GetMessagesPerMinute() int32 {
	if x != nil {
		return x.MessagesPerMinute
	}
	return 0
}

func (x *P3ExportProcess) GetRandomizeContacts() bool {
	if x != nil {
		return x.RandomizeContacts
	}
	return false
}

func (x *P3ExportProcess) GetScheduleAsPaused() bool {
	if x != nil {
		return x.ScheduleAsPaused
	}
	return false
}

func (x *P3ExportProcess) GetScheduleRule() string {
	if x != nil {
		return x.ScheduleRule
	}
	return ""
}

func (x *P3ExportProcess) GetShaDigestOverride() bool {
	if x != nil {
		return x.ShaDigestOverride
	}
	return false
}

func (x *P3ExportProcess) GetSmsField() string {
	if x != nil {
		return x.SmsField
	}
	return ""
}

func (x *P3ExportProcess) GetSmsSourceNumber() int64 {
	if x != nil {
		return x.SmsSourceNumber
	}
	return 0
}

func (x *P3ExportProcess) GetTimezoneOverride() bool {
	if x != nil {
		return x.TimezoneOverride
	}
	return false
}

func (x *P3ExportProcess) GetZipScrub() bool {
	if x != nil {
		return x.ZipScrub
	}
	return false
}

func (x *P3ExportProcess) GetCompletionThreshold() int32 {
	if x != nil {
		return x.CompletionThreshold
	}
	return 0
}

func (x *P3ExportProcess) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *P3ExportProcess) GetComplianceRule() string {
	if x != nil {
		return x.ComplianceRule
	}
	return ""
}

func (x *P3ExportProcess) GetFieldDelimiter() string {
	if x != nil {
		return x.FieldDelimiter
	}
	return ""
}

func (x *P3ExportProcess) GetRecordDelimiter() string {
	if x != nil {
		return x.RecordDelimiter
	}
	return ""
}

func (x *P3ExportProcess) GetQuoteFields() bool {
	if x != nil {
		return x.QuoteFields
	}
	return false
}

func (x *P3ExportProcess) GetUseCustomDateFormat() bool {
	if x != nil {
		return x.UseCustomDateFormat
	}
	return false
}

func (x *P3ExportProcess) GetFileFormat() commons.FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return commons.FileFormat(0)
}

func (x *P3ExportProcess) GetDaysIntoFuture() int64 {
	if x != nil {
		return x.DaysIntoFuture
	}
	return 0
}

func (x *P3ExportProcess) GetStartHour() string {
	if x != nil {
		return x.StartHour
	}
	return ""
}

func (x *P3ExportProcess) GetEndHour() string {
	if x != nil {
		return x.EndHour
	}
	return ""
}

func (x *P3ExportProcess) GetScheduleByTimezone() bool {
	if x != nil {
		return x.ScheduleByTimezone
	}
	return false
}

func (x *P3ExportProcess) GetShiftPhoneFields() bool {
	if x != nil {
		return x.ShiftPhoneFields
	}
	return false
}

func (x *P3ExportProcess) GetDoCampaignLinking() bool {
	if x != nil {
		return x.DoCampaignLinking
	}
	return false
}

func (x *P3ExportProcess) GetCampaignLinkId() string {
	if x != nil {
		return x.CampaignLinkId
	}
	return ""
}

func (x *P3ExportProcess) GetStopTrigger() string {
	if x != nil {
		return x.StopTrigger
	}
	return ""
}

// Describes an export process to compliance list/DNCL
// Expiration is optional
// CountryCode is required only if the field type is phone/sms
type ComplianceExportProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListName           string                     `protobuf:"bytes,2,opt,name=list_name,json=listName,proto3" json:"list_name,omitempty"`
	Field              string                     `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
	ExpirationField    string                     `protobuf:"bytes,4,opt,name=expiration_field,json=expirationField,proto3" json:"expiration_field,omitempty"` // Optional, has to be type date
	CountryCode        string                     `protobuf:"bytes,5,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`             // Optional, only needed with phone/sms
	RunType            commons.RunType            `protobuf:"varint,6,opt,name=run_type,json=runType,proto3,enum=api.commons.RunType" json:"run_type,omitempty"`
	ComplianceListType commons.ComplianceListType `protobuf:"varint,7,opt,name=compliance_list_type,json=complianceListType,proto3,enum=api.commons.ComplianceListType" json:"compliance_list_type,omitempty"`
}

func (x *ComplianceExportProcess) Reset() {
	*x = ComplianceExportProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceExportProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceExportProcess) ProtoMessage() {}

func (x *ComplianceExportProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceExportProcess.ProtoReflect.Descriptor instead.
func (*ComplianceExportProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{83}
}

func (x *ComplianceExportProcess) GetListName() string {
	if x != nil {
		return x.ListName
	}
	return ""
}

func (x *ComplianceExportProcess) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *ComplianceExportProcess) GetExpirationField() string {
	if x != nil {
		return x.ExpirationField
	}
	return ""
}

func (x *ComplianceExportProcess) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *ComplianceExportProcess) GetRunType() commons.RunType {
	if x != nil {
		return x.RunType
	}
	return commons.RunType(0)
}

func (x *ComplianceExportProcess) GetComplianceListType() commons.ComplianceListType {
	if x != nil {
		return x.ComplianceListType
	}
	return commons.ComplianceListType(0)
}

type ScrubProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListId string `protobuf:"bytes,3,opt,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
	Field  string `protobuf:"bytes,4,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *ScrubProcess) Reset() {
	*x = ScrubProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrubProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrubProcess) ProtoMessage() {}

func (x *ScrubProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrubProcess.ProtoReflect.Descriptor instead.
func (*ScrubProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{84}
}

func (x *ScrubProcess) GetListId() string {
	if x != nil {
		return x.ListId
	}
	return ""
}

func (x *ScrubProcess) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

// This process collects data from a specific fields in all the records in the lms list
// and calls Compliance.DeleteScrubListEntries() on them.
type DeleteScrubEntriesProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 'list_id' is the id of the scrub list in compliance to delete from
	ListId string `protobuf:"bytes,3,opt,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
	// 'field' is which column on an lms record that contains the data we want to delete
	// from the scrub list in compliance.
	// ex: if field is "first"  all records that contain a record field named "first" will have their contents
	// collected, and sent to compliance to be deleted from scrub list.
	Field string `protobuf:"bytes,4,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *DeleteScrubEntriesProcess) Reset() {
	*x = DeleteScrubEntriesProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteScrubEntriesProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScrubEntriesProcess) ProtoMessage() {}

func (x *DeleteScrubEntriesProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScrubEntriesProcess.ProtoReflect.Descriptor instead.
func (*DeleteScrubEntriesProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{85}
}

func (x *DeleteScrubEntriesProcess) GetListId() string {
	if x != nil {
		return x.ListId
	}
	return ""
}

func (x *DeleteScrubEntriesProcess) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

type FrequencyProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LMS field from the list to be used
	Field string `protobuf:"bytes,4,opt,name=field,proto3" json:"field,omitempty"`
	// Duration to check frequency
	Days int64 `protobuf:"varint,5,opt,name=days,proto3" json:"days,omitempty"`
	// Country code needed if `field` is a phone number
	CountryCode string `protobuf:"bytes,6,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// Field we are checking against in frequency
	// e.g. Account Number
	// Will default to "phone_number"
	MetaField string `protobuf:"bytes,7,opt,name=meta_field,json=metaField,proto3" json:"meta_field,omitempty"`
	// Option for dispositions given in key
	// value pairs. Value is optional, it will
	// just check for existence of key if left out.
	Dispositions []*DispositionPair `protobuf:"bytes,8,rep,name=dispositions,proto3" json:"dispositions,omitempty"`
	// Different result types
	// e.g. Answered,Answered Machine,Busy, etc.
	Results []string `protobuf:"bytes,9,rep,name=results,proto3" json:"results,omitempty"`
	// Options for dispositions given in key/value
	// pair sets. Values are optional. Must have
	// at least one match in each set.
	DispositionSets []*DispositionSet `protobuf:"bytes,10,rep,name=disposition_sets,json=dispositionSets,proto3" json:"disposition_sets,omitempty"`
}

func (x *FrequencyProcess) Reset() {
	*x = FrequencyProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrequencyProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequencyProcess) ProtoMessage() {}

func (x *FrequencyProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequencyProcess.ProtoReflect.Descriptor instead.
func (*FrequencyProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{86}
}

func (x *FrequencyProcess) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *FrequencyProcess) GetDays() int64 {
	if x != nil {
		return x.Days
	}
	return 0
}

func (x *FrequencyProcess) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *FrequencyProcess) GetMetaField() string {
	if x != nil {
		return x.MetaField
	}
	return ""
}

func (x *FrequencyProcess) GetDispositions() []*DispositionPair {
	if x != nil {
		return x.Dispositions
	}
	return nil
}

func (x *FrequencyProcess) GetResults() []string {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *FrequencyProcess) GetDispositionSets() []*DispositionSet {
	if x != nil {
		return x.DispositionSets
	}
	return nil
}

type DispositionSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A set of disposition pairs.
	Dispositions []*DispositionPair `protobuf:"bytes,1,rep,name=dispositions,proto3" json:"dispositions,omitempty"`
}

func (x *DispositionSet) Reset() {
	*x = DispositionSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispositionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispositionSet) ProtoMessage() {}

func (x *DispositionSet) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispositionSet.ProtoReflect.Descriptor instead.
func (*DispositionSet) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{87}
}

func (x *DispositionSet) GetDispositions() []*DispositionPair {
	if x != nil {
		return x.Dispositions
	}
	return nil
}

type DispositionPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Value is optional.
	// If left blank, we will just
	// check for existence of `key`.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DispositionPair) Reset() {
	*x = DispositionPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispositionPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispositionPair) ProtoMessage() {}

func (x *DispositionPair) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispositionPair.ProtoReflect.Descriptor instead.
func (*DispositionPair) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{88}
}

func (x *DispositionPair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DispositionPair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SftpExportProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// where we try and write the data to on the destination filesystem
	DestFilepath string `protobuf:"bytes,1,opt,name=dest_filepath,json=destFilepath,proto3" json:"dest_filepath,omitempty"` // DEPRECATED!!
	// if left "", the service will attempt to use a public key instead
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"` // DEPRECATED
	// where we are trying to connect to.
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// username for sftp connection
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"` // DEPRECATED
	// port we will attempt to establish a connection with
	Port int32 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	// File format to use (CSV, CUSTOM, TSV, etc.)
	// `field_delimiter`, `record_dilimiter`, and `quote_fields`
	// will be ignored the the format is not CUSTOM
	Fileformat commons.FileFormat `protobuf:"varint,7,opt,name=fileformat,proto3,enum=api.commons.FileFormat" json:"fileformat,omitempty"`
	// Specifies whether to use headers in the
	// export file or not.
	PrependHeaders bool `protobuf:"varint,8,opt,name=prepend_headers,json=prependHeaders,proto3" json:"prepend_headers,omitempty"`
	// Specifies custom field delimiter (default `,`)
	FieldDelimiter string `protobuf:"bytes,9,opt,name=field_delimiter,json=fieldDelimiter,proto3" json:"field_delimiter,omitempty"`
	// Specifies custom record delimiter (default `\n`)
	RecordDelimiter string `protobuf:"bytes,10,opt,name=record_delimiter,json=recordDelimiter,proto3" json:"record_delimiter,omitempty"`
	// Specifies the construction of the export filename
	//
	// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
	FilePattern *commons.FilePattern `protobuf:"bytes,11,opt,name=file_pattern,json=filePattern,proto3" json:"file_pattern,omitempty"`
	// Run type can be RUN (default), TEST, or DISABLED
	RunType commons.RunType `protobuf:"varint,12,opt,name=run_type,json=runType,proto3,enum=api.commons.RunType" json:"run_type,omitempty"`
	// Specifies which fields to export
	Header *ExportHeader `protobuf:"bytes,13,opt,name=header,proto3" json:"header,omitempty"`
	// Wrap fields with `"`
	QuoteFields bool `protobuf:"varint,14,opt,name=quote_fields,json=quoteFields,proto3" json:"quote_fields,omitempty"`
	// Specifies whether to export using the date
	// format defined by the field in the file
	// template or use the default
	UseCustomDateFormat bool `protobuf:"varint,15,opt,name=use_custom_date_format,json=useCustomDateFormat,proto3" json:"use_custom_date_format,omitempty"`
	// directory to put the file in
	Directory string `protobuf:"bytes,16,opt,name=directory,proto3" json:"directory,omitempty"`
	// what to name the file
	Filename *commons.ConstructedFilename `protobuf:"bytes,17,opt,name=filename,proto3" json:"filename,omitempty"`
	// If true, it will try to bunch all phone number
	// fields to the left.
	ShiftPhoneFields bool `protobuf:"varint,18,opt,name=shift_phone_fields,json=shiftPhoneFields,proto3" json:"shift_phone_fields,omitempty"`
	// transfer configs will be unique by name, transfer configs store credential data
	TransferConfigName string `protobuf:"bytes,19,opt,name=transfer_config_name,json=transferConfigName,proto3" json:"transfer_config_name,omitempty"`
}

func (x *SftpExportProcess) Reset() {
	*x = SftpExportProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SftpExportProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SftpExportProcess) ProtoMessage() {}

func (x *SftpExportProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SftpExportProcess.ProtoReflect.Descriptor instead.
func (*SftpExportProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{89}
}

func (x *SftpExportProcess) GetDestFilepath() string {
	if x != nil {
		return x.DestFilepath
	}
	return ""
}

func (x *SftpExportProcess) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SftpExportProcess) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SftpExportProcess) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SftpExportProcess) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SftpExportProcess) GetFileformat() commons.FileFormat {
	if x != nil {
		return x.Fileformat
	}
	return commons.FileFormat(0)
}

func (x *SftpExportProcess) GetPrependHeaders() bool {
	if x != nil {
		return x.PrependHeaders
	}
	return false
}

func (x *SftpExportProcess) GetFieldDelimiter() string {
	if x != nil {
		return x.FieldDelimiter
	}
	return ""
}

func (x *SftpExportProcess) GetRecordDelimiter() string {
	if x != nil {
		return x.RecordDelimiter
	}
	return ""
}

// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
func (x *SftpExportProcess) GetFilePattern() *commons.FilePattern {
	if x != nil {
		return x.FilePattern
	}
	return nil
}

func (x *SftpExportProcess) GetRunType() commons.RunType {
	if x != nil {
		return x.RunType
	}
	return commons.RunType(0)
}

func (x *SftpExportProcess) GetHeader() *ExportHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SftpExportProcess) GetQuoteFields() bool {
	if x != nil {
		return x.QuoteFields
	}
	return false
}

func (x *SftpExportProcess) GetUseCustomDateFormat() bool {
	if x != nil {
		return x.UseCustomDateFormat
	}
	return false
}

func (x *SftpExportProcess) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *SftpExportProcess) GetFilename() *commons.ConstructedFilename {
	if x != nil {
		return x.Filename
	}
	return nil
}

func (x *SftpExportProcess) GetShiftPhoneFields() bool {
	if x != nil {
		return x.ShiftPhoneFields
	}
	return false
}

func (x *SftpExportProcess) GetTransferConfigName() string {
	if x != nil {
		return x.TransferConfigName
	}
	return ""
}

type WfmMultiSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WfmMultiSkill) Reset() {
	*x = WfmMultiSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WfmMultiSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WfmMultiSkill) ProtoMessage() {}

func (x *WfmMultiSkill) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WfmMultiSkill.ProtoReflect.Descriptor instead.
func (*WfmMultiSkill) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{90}
}

type WfmExportProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// single_skill import with this sid in the data
	// multi_skill wfm will fetch the data from
	// the 'Skill Profile' column
	//
	// Types that are assignable to SkillProfile:
	//
	//	*WfmExportProcess_Single
	//	*WfmExportProcess_Multi
	SkillProfile isWfmExportProcess_SkillProfile `protobuf_oneof:"skill_profile"`
}

func (x *WfmExportProcess) Reset() {
	*x = WfmExportProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WfmExportProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WfmExportProcess) ProtoMessage() {}

func (x *WfmExportProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WfmExportProcess.ProtoReflect.Descriptor instead.
func (*WfmExportProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{91}
}

func (m *WfmExportProcess) GetSkillProfile() isWfmExportProcess_SkillProfile {
	if m != nil {
		return m.SkillProfile
	}
	return nil
}

func (x *WfmExportProcess) GetSingle() int64 {
	if x, ok := x.GetSkillProfile().(*WfmExportProcess_Single); ok {
		return x.Single
	}
	return 0
}

func (x *WfmExportProcess) GetMulti() *WfmMultiSkill {
	if x, ok := x.GetSkillProfile().(*WfmExportProcess_Multi); ok {
		return x.Multi
	}
	return nil
}

type isWfmExportProcess_SkillProfile interface {
	isWfmExportProcess_SkillProfile()
}

type WfmExportProcess_Single struct {
	Single int64 `protobuf:"varint,1,opt,name=single,proto3,oneof"`
}

type WfmExportProcess_Multi struct {
	Multi *WfmMultiSkill `protobuf:"bytes,2,opt,name=multi,proto3,oneof"`
}

func (*WfmExportProcess_Single) isWfmExportProcess_SkillProfile() {}

func (*WfmExportProcess_Multi) isWfmExportProcess_SkillProfile() {}

type ExportHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *ExportHeader) Reset() {
	*x = ExportHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportHeader) ProtoMessage() {}

func (x *ExportHeader) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportHeader.ProtoReflect.Descriptor instead.
func (*ExportHeader) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{92}
}

func (x *ExportHeader) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type SortReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*SortReq_Criteria
	//	*SortReq_Record
	Request isSortReq_Request `protobuf_oneof:"request"`
}

func (x *SortReq) Reset() {
	*x = SortReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortReq) ProtoMessage() {}

func (x *SortReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortReq.ProtoReflect.Descriptor instead.
func (*SortReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{93}
}

func (m *SortReq) GetRequest() isSortReq_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *SortReq) GetCriteria() *SortCriteria {
	if x, ok := x.GetRequest().(*SortReq_Criteria); ok {
		return x.Criteria
	}
	return nil
}

func (x *SortReq) GetRecord() *RecordProto {
	if x, ok := x.GetRequest().(*SortReq_Record); ok {
		return x.Record
	}
	return nil
}

type isSortReq_Request interface {
	isSortReq_Request()
}

type SortReq_Criteria struct {
	// the header, this will always be sent as the first message, and only
	// records will be sent after that.
	Criteria *SortCriteria `protobuf:"bytes,1,opt,name=criteria,proto3,oneof"`
}

type SortReq_Record struct {
	Record *RecordProto `protobuf:"bytes,2,opt,name=record,proto3,oneof"`
}

func (*SortReq_Criteria) isSortReq_Request() {}

func (*SortReq_Record) isSortReq_Request() {}

type CFSExportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*CFSExportReq_Header
	//	*CFSExportReq_Record
	Request isCFSExportReq_Request `protobuf_oneof:"request"`
}

func (x *CFSExportReq) Reset() {
	*x = CFSExportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFSExportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFSExportReq) ProtoMessage() {}

func (x *CFSExportReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFSExportReq.ProtoReflect.Descriptor instead.
func (*CFSExportReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{94}
}

func (m *CFSExportReq) GetRequest() isCFSExportReq_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *CFSExportReq) GetHeader() *CFSExportReqHeader {
	if x, ok := x.GetRequest().(*CFSExportReq_Header); ok {
		return x.Header
	}
	return nil
}

func (x *CFSExportReq) GetRecord() *RecordProto {
	if x, ok := x.GetRequest().(*CFSExportReq_Record); ok {
		return x.Record
	}
	return nil
}

type isCFSExportReq_Request interface {
	isCFSExportReq_Request()
}

type CFSExportReq_Header struct {
	Header *CFSExportReqHeader `protobuf:"bytes,1,opt,name=header,proto3,oneof"`
}

type CFSExportReq_Record struct {
	Record *RecordProto `protobuf:"bytes,2,opt,name=record,proto3,oneof"`
}

func (*CFSExportReq_Header) isCFSExportReq_Request() {}

func (*CFSExportReq_Record) isCFSExportReq_Request() {}

type DeDupCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action commons.DeDupActions `protobuf:"varint,3,opt,name=action,proto3,enum=api.commons.DeDupActions" json:"action,omitempty"`
	Fields []*FieldIndex        `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	// skip record if expression results in true
	Unless *FilterCheck `protobuf:"bytes,4,opt,name=unless,proto3" json:"unless,omitempty"`
	// whether to treat the fields as a disjunct set or composite value
	DisjunctKeys bool `protobuf:"varint,5,opt,name=disjunct_keys,json=disjunctKeys,proto3" json:"disjunct_keys,omitempty"`
}

func (x *DeDupCriteria) Reset() {
	*x = DeDupCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeDupCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeDupCriteria) ProtoMessage() {}

func (x *DeDupCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeDupCriteria.ProtoReflect.Descriptor instead.
func (*DeDupCriteria) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{95}
}

func (x *DeDupCriteria) GetAction() commons.DeDupActions {
	if x != nil {
		return x.Action
	}
	return commons.DeDupActions(0)
}

func (x *DeDupCriteria) GetFields() []*FieldIndex {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *DeDupCriteria) GetUnless() *FilterCheck {
	if x != nil {
		return x.Unless
	}
	return nil
}

func (x *DeDupCriteria) GetDisjunctKeys() bool {
	if x != nil {
		return x.DisjunctKeys
	}
	return false
}

type SortCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ordering, ascending or descending
	Ordering   []commons.SortOrder `protobuf:"varint,1,rep,packed,name=ordering,proto3,enum=api.commons.SortOrder" json:"ordering,omitempty"`
	FieldOrder []*FieldIndex       `protobuf:"bytes,2,rep,name=field_order,json=fieldOrder,proto3" json:"field_order,omitempty"`
}

func (x *SortCriteria) Reset() {
	*x = SortCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortCriteria) ProtoMessage() {}

func (x *SortCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortCriteria.ProtoReflect.Descriptor instead.
func (*SortCriteria) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{96}
}

func (x *SortCriteria) GetOrdering() []commons.SortOrder {
	if x != nil {
		return x.Ordering
	}
	return nil
}

func (x *SortCriteria) GetFieldOrder() []*FieldIndex {
	if x != nil {
		return x.FieldOrder
	}
	return nil
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error    string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	RawValue string `protobuf:"bytes,2,opt,name=raw_value,json=rawValue,proto3" json:"raw_value,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{97}
}

func (x *Error) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Error) GetRawValue() string {
	if x != nil {
		return x.RawValue
	}
	return ""
}

type RecordFieldMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields map[string]*RecordFieldProto `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RecordFieldMap) Reset() {
	*x = RecordFieldMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordFieldMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordFieldMap) ProtoMessage() {}

func (x *RecordFieldMap) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordFieldMap.ProtoReflect.Descriptor instead.
func (*RecordFieldMap) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{98}
}

func (x *RecordFieldMap) GetFields() map[string]*RecordFieldProto {
	if x != nil {
		return x.Fields
	}
	return nil
}

type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol   string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	RawValue string  `protobuf:"bytes,2,opt,name=raw_value,json=rawValue,proto3" json:"raw_value,omitempty"`
	Value    float64 `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	Name     string  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Invalid  bool    `protobuf:"varint,5,opt,name=invalid,proto3" json:"invalid,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{99}
}

func (x *Currency) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Currency) GetRawValue() string {
	if x != nil {
		return x.RawValue
	}
	return ""
}

func (x *Currency) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Currency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Currency) GetInvalid() bool {
	if x != nil {
		return x.Invalid
	}
	return false
}

type Phone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawValue   string `protobuf:"bytes,3,opt,name=raw_value,json=rawValue,proto3" json:"raw_value,omitempty"`
	FullNumber string `protobuf:"bytes,4,opt,name=full_number,json=fullNumber,proto3" json:"full_number,omitempty"`
	Invalid    bool   `protobuf:"varint,5,opt,name=invalid,proto3" json:"invalid,omitempty"`
}

func (x *Phone) Reset() {
	*x = Phone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Phone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Phone) ProtoMessage() {}

func (x *Phone) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Phone.ProtoReflect.Descriptor instead.
func (*Phone) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{100}
}

func (x *Phone) GetRawValue() string {
	if x != nil {
		return x.RawValue
	}
	return ""
}

func (x *Phone) GetFullNumber() string {
	if x != nil {
		return x.FullNumber
	}
	return ""
}

func (x *Phone) GetInvalid() bool {
	if x != nil {
		return x.Invalid
	}
	return false
}

type PostalCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostalCode string `protobuf:"bytes,1,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	Invalid    bool   `protobuf:"varint,2,opt,name=invalid,proto3" json:"invalid,omitempty"`
}

func (x *PostalCode) Reset() {
	*x = PostalCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostalCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostalCode) ProtoMessage() {}

func (x *PostalCode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostalCode.ProtoReflect.Descriptor instead.
func (*PostalCode) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{101}
}

func (x *PostalCode) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *PostalCode) GetInvalid() bool {
	if x != nil {
		return x.Invalid
	}
	return false
}

type Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalPart   string `protobuf:"bytes,1,opt,name=local_part,json=localPart,proto3" json:"local_part,omitempty"`
	Domain      string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	FullAddress string `protobuf:"bytes,3,opt,name=full_address,json=fullAddress,proto3" json:"full_address,omitempty"`
	Invalid     bool   `protobuf:"varint,4,opt,name=invalid,proto3" json:"invalid,omitempty"`
}

func (x *Email) Reset() {
	*x = Email{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Email) ProtoMessage() {}

func (x *Email) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Email.ProtoReflect.Descriptor instead.
func (*Email) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{102}
}

func (x *Email) GetLocalPart() string {
	if x != nil {
		return x.LocalPart
	}
	return ""
}

func (x *Email) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Email) GetFullAddress() string {
	if x != nil {
		return x.FullAddress
	}
	return ""
}

func (x *Email) GetInvalid() bool {
	if x != nil {
		return x.Invalid
	}
	return false
}

// modifies a DateTime by specific amount
type DateTimeModifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Years   int32 `protobuf:"varint,1,opt,name=years,proto3" json:"years,omitempty"`
	Weeks   int32 `protobuf:"varint,3,opt,name=weeks,proto3" json:"weeks,omitempty"`
	Days    int32 `protobuf:"varint,4,opt,name=days,proto3" json:"days,omitempty"`
	Hours   int32 `protobuf:"varint,5,opt,name=hours,proto3" json:"hours,omitempty"`
	Minutes int32 `protobuf:"varint,6,opt,name=minutes,proto3" json:"minutes,omitempty"`
	Seconds int32 `protobuf:"varint,7,opt,name=seconds,proto3" json:"seconds,omitempty"`
}

func (x *DateTimeModifier) Reset() {
	*x = DateTimeModifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateTimeModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateTimeModifier) ProtoMessage() {}

func (x *DateTimeModifier) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateTimeModifier.ProtoReflect.Descriptor instead.
func (*DateTimeModifier) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{103}
}

func (x *DateTimeModifier) GetYears() int32 {
	if x != nil {
		return x.Years
	}
	return 0
}

func (x *DateTimeModifier) GetWeeks() int32 {
	if x != nil {
		return x.Weeks
	}
	return 0
}

func (x *DateTimeModifier) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

func (x *DateTimeModifier) GetHours() int32 {
	if x != nil {
		return x.Hours
	}
	return 0
}

func (x *DateTimeModifier) GetMinutes() int32 {
	if x != nil {
		return x.Minutes
	}
	return 0
}

func (x *DateTimeModifier) GetSeconds() int32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

type DateTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the raw string given when parsing the datetime obj
	RawValue string `protobuf:"bytes,1,opt,name=raw_value,json=rawValue,proto3" json:"raw_value,omitempty"`
	// the format string used to create this datetime object
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	// our date value ordered from most specific to least
	Precision commons.DateTimePrecision `protobuf:"varint,3,opt,name=precision,proto3,enum=api.commons.DateTimePrecision" json:"precision,omitempty"`
	// modifier to apply to our value when comparing
	Modifier *DateTimeModifier `protobuf:"bytes,11,opt,name=modifier,proto3" json:"modifier,omitempty"`
}

func (x *DateTime) Reset() {
	*x = DateTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateTime) ProtoMessage() {}

func (x *DateTime) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateTime.ProtoReflect.Descriptor instead.
func (*DateTime) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{104}
}

func (x *DateTime) GetRawValue() string {
	if x != nil {
		return x.RawValue
	}
	return ""
}

func (x *DateTime) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *DateTime) GetPrecision() commons.DateTimePrecision {
	if x != nil {
		return x.Precision
	}
	return commons.DateTimePrecision(0)
}

func (x *DateTime) GetModifier() *DateTimeModifier {
	if x != nil {
		return x.Modifier
	}
	return nil
}

type EnrichedPhone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaCode            string `protobuf:"bytes,1,opt,name=area_code,json=areaCode,proto3" json:"area_code,omitempty"`
	BlockId             string `protobuf:"bytes,2,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Carrier             string `protobuf:"bytes,3,opt,name=carrier,proto3" json:"carrier,omitempty"`
	Cc                  string `protobuf:"bytes,4,opt,name=cc,proto3" json:"cc,omitempty"`
	Ccnsn               string `protobuf:"bytes,5,opt,name=ccnsn,proto3" json:"ccnsn,omitempty"`
	CellPrefix          string `protobuf:"bytes,6,opt,name=cell_prefix,json=cellPrefix,proto3" json:"cell_prefix,omitempty"`
	City                string `protobuf:"bytes,7,opt,name=city,proto3" json:"city,omitempty"`
	CocType             string `protobuf:"bytes,8,opt,name=coc_type,json=cocType,proto3" json:"coc_type,omitempty"`
	Dst                 bool   `protobuf:"varint,9,opt,name=dst,proto3" json:"dst,omitempty"`
	InternationalPrefix string `protobuf:"bytes,10,opt,name=international_prefix,json=internationalPrefix,proto3" json:"international_prefix,omitempty"`
	Iso2                string `protobuf:"bytes,11,opt,name=iso2,proto3" json:"iso2,omitempty"`
	Language            string `protobuf:"bytes,12,opt,name=language,proto3" json:"language,omitempty"`
	// Location location = 13;
	Max            string  `protobuf:"bytes,14,opt,name=max,proto3" json:"max,omitempty"`
	Min            string  `protobuf:"bytes,15,opt,name=min,proto3" json:"min,omitempty"`
	NationalPrefix string  `protobuf:"bytes,16,opt,name=national_prefix,json=nationalPrefix,proto3" json:"national_prefix,omitempty"`
	Ndc            string  `protobuf:"bytes,17,opt,name=ndc,proto3" json:"ndc,omitempty"`
	Prefix         string  `protobuf:"bytes,18,opt,name=prefix,proto3" json:"prefix,omitempty"`
	RegionCode     string  `protobuf:"bytes,19,opt,name=region_code,json=regionCode,proto3" json:"region_code,omitempty"`
	RegionName     string  `protobuf:"bytes,20,opt,name=region_name,json=regionName,proto3" json:"region_name,omitempty"`
	Ssc1           string  `protobuf:"bytes,21,opt,name=ssc1,proto3" json:"ssc1,omitempty"`
	Ssc2           string  `protobuf:"bytes,22,opt,name=ssc2,proto3" json:"ssc2,omitempty"`
	Ssc3           string  `protobuf:"bytes,23,opt,name=ssc3,proto3" json:"ssc3,omitempty"`
	Ssc4           string  `protobuf:"bytes,24,opt,name=ssc4,proto3" json:"ssc4,omitempty"`
	Source         string  `protobuf:"bytes,25,opt,name=source,proto3" json:"source,omitempty"`
	TimeZone       string  `protobuf:"bytes,26,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	Type           string  `protobuf:"bytes,27,opt,name=type,proto3" json:"type,omitempty"`
	UsesNdc        bool    `protobuf:"varint,28,opt,name=uses_ndc,json=usesNdc,proto3" json:"uses_ndc,omitempty"`
	Utc            float32 `protobuf:"fixed32,29,opt,name=utc,proto3" json:"utc,omitempty"` //RecordFieldProto enriched_from = 30;
}

func (x *EnrichedPhone) Reset() {
	*x = EnrichedPhone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrichedPhone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrichedPhone) ProtoMessage() {}

func (x *EnrichedPhone) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrichedPhone.ProtoReflect.Descriptor instead.
func (*EnrichedPhone) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{105}
}

func (x *EnrichedPhone) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

func (x *EnrichedPhone) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *EnrichedPhone) GetCarrier() string {
	if x != nil {
		return x.Carrier
	}
	return ""
}

func (x *EnrichedPhone) GetCc() string {
	if x != nil {
		return x.Cc
	}
	return ""
}

func (x *EnrichedPhone) GetCcnsn() string {
	if x != nil {
		return x.Ccnsn
	}
	return ""
}

func (x *EnrichedPhone) GetCellPrefix() string {
	if x != nil {
		return x.CellPrefix
	}
	return ""
}

func (x *EnrichedPhone) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *EnrichedPhone) GetCocType() string {
	if x != nil {
		return x.CocType
	}
	return ""
}

func (x *EnrichedPhone) GetDst() bool {
	if x != nil {
		return x.Dst
	}
	return false
}

func (x *EnrichedPhone) GetInternationalPrefix() string {
	if x != nil {
		return x.InternationalPrefix
	}
	return ""
}

func (x *EnrichedPhone) GetIso2() string {
	if x != nil {
		return x.Iso2
	}
	return ""
}

func (x *EnrichedPhone) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *EnrichedPhone) GetMax() string {
	if x != nil {
		return x.Max
	}
	return ""
}

func (x *EnrichedPhone) GetMin() string {
	if x != nil {
		return x.Min
	}
	return ""
}

func (x *EnrichedPhone) GetNationalPrefix() string {
	if x != nil {
		return x.NationalPrefix
	}
	return ""
}

func (x *EnrichedPhone) GetNdc() string {
	if x != nil {
		return x.Ndc
	}
	return ""
}

func (x *EnrichedPhone) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *EnrichedPhone) GetRegionCode() string {
	if x != nil {
		return x.RegionCode
	}
	return ""
}

func (x *EnrichedPhone) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *EnrichedPhone) GetSsc1() string {
	if x != nil {
		return x.Ssc1
	}
	return ""
}

func (x *EnrichedPhone) GetSsc2() string {
	if x != nil {
		return x.Ssc2
	}
	return ""
}

func (x *EnrichedPhone) GetSsc3() string {
	if x != nil {
		return x.Ssc3
	}
	return ""
}

func (x *EnrichedPhone) GetSsc4() string {
	if x != nil {
		return x.Ssc4
	}
	return ""
}

func (x *EnrichedPhone) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *EnrichedPhone) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *EnrichedPhone) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EnrichedPhone) GetUsesNdc() bool {
	if x != nil {
		return x.UsesNdc
	}
	return false
}

func (x *EnrichedPhone) GetUtc() float32 {
	if x != nil {
		return x.Utc
	}
	return 0
}

type EnrichedZip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accuracy    int32  `protobuf:"varint,1,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	AdminCode1  string `protobuf:"bytes,2,opt,name=admin_code1,json=adminCode1,proto3" json:"admin_code1,omitempty"`
	AdminCode2  string `protobuf:"bytes,3,opt,name=admin_code2,json=adminCode2,proto3" json:"admin_code2,omitempty"`
	AdminCode3  string `protobuf:"bytes,4,opt,name=admin_code3,json=adminCode3,proto3" json:"admin_code3,omitempty"`
	AdminName1  string `protobuf:"bytes,5,opt,name=admin_name1,json=adminName1,proto3" json:"admin_name1,omitempty"`
	AdminName2  string `protobuf:"bytes,6,opt,name=admin_name2,json=adminName2,proto3" json:"admin_name2,omitempty"`
	AdminName3  string `protobuf:"bytes,7,opt,name=admin_name3,json=adminName3,proto3" json:"admin_name3,omitempty"`
	AreaCode    string `protobuf:"bytes,8,opt,name=area_code,json=areaCode,proto3" json:"area_code,omitempty"`
	CityName    string `protobuf:"bytes,9,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`
	CityType    string `protobuf:"bytes,10,opt,name=city_type,json=cityType,proto3" json:"city_type,omitempty"`
	CountryCode string `protobuf:"bytes,11,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	CountyFips  string `protobuf:"bytes,12,opt,name=county_fips,json=countyFips,proto3" json:"county_fips,omitempty"`
	CountyName  string `protobuf:"bytes,13,opt,name=county_name,json=countyName,proto3" json:"county_name,omitempty"`
	Dst         bool   `protobuf:"varint,14,opt,name=dst,proto3" json:"dst,omitempty"`
	Iso2        string `protobuf:"bytes,15,opt,name=iso2,proto3" json:"iso2,omitempty"`
	// Location location = 16;
	MsaCode       string  `protobuf:"bytes,17,opt,name=msa_code,json=msaCode,proto3" json:"msa_code,omitempty"`
	PlaceName     string  `protobuf:"bytes,18,opt,name=place_name,json=placeName,proto3" json:"place_name,omitempty"`
	PostalCode    string  `protobuf:"bytes,19,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	PostalCodeKey string  `protobuf:"bytes,20,opt,name=postal_code_key,json=postalCodeKey,proto3" json:"postal_code_key,omitempty"`
	PostalType    string  `protobuf:"bytes,21,opt,name=postal_type,json=postalType,proto3" json:"postal_type,omitempty"`
	ProvinceAbbr  string  `protobuf:"bytes,22,opt,name=province_abbr,json=provinceAbbr,proto3" json:"province_abbr,omitempty"`
	ProvinceName  string  `protobuf:"bytes,23,opt,name=province_name,json=provinceName,proto3" json:"province_name,omitempty"`
	Source        string  `protobuf:"bytes,24,opt,name=source,proto3" json:"source,omitempty"`
	StateFips     string  `protobuf:"bytes,25,opt,name=state_fips,json=stateFips,proto3" json:"state_fips,omitempty"`
	TimeZone      string  `protobuf:"bytes,26,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	Utc           float32 `protobuf:"fixed32,27,opt,name=utc,proto3" json:"utc,omitempty"` //RecordFieldProto enriched_from = 28;
}

func (x *EnrichedZip) Reset() {
	*x = EnrichedZip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrichedZip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrichedZip) ProtoMessage() {}

func (x *EnrichedZip) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrichedZip.ProtoReflect.Descriptor instead.
func (*EnrichedZip) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{106}
}

func (x *EnrichedZip) GetAccuracy() int32 {
	if x != nil {
		return x.Accuracy
	}
	return 0
}

func (x *EnrichedZip) GetAdminCode1() string {
	if x != nil {
		return x.AdminCode1
	}
	return ""
}

func (x *EnrichedZip) GetAdminCode2() string {
	if x != nil {
		return x.AdminCode2
	}
	return ""
}

func (x *EnrichedZip) GetAdminCode3() string {
	if x != nil {
		return x.AdminCode3
	}
	return ""
}

func (x *EnrichedZip) GetAdminName1() string {
	if x != nil {
		return x.AdminName1
	}
	return ""
}

func (x *EnrichedZip) GetAdminName2() string {
	if x != nil {
		return x.AdminName2
	}
	return ""
}

func (x *EnrichedZip) GetAdminName3() string {
	if x != nil {
		return x.AdminName3
	}
	return ""
}

func (x *EnrichedZip) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

func (x *EnrichedZip) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *EnrichedZip) GetCityType() string {
	if x != nil {
		return x.CityType
	}
	return ""
}

func (x *EnrichedZip) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *EnrichedZip) GetCountyFips() string {
	if x != nil {
		return x.CountyFips
	}
	return ""
}

func (x *EnrichedZip) GetCountyName() string {
	if x != nil {
		return x.CountyName
	}
	return ""
}

func (x *EnrichedZip) GetDst() bool {
	if x != nil {
		return x.Dst
	}
	return false
}

func (x *EnrichedZip) GetIso2() string {
	if x != nil {
		return x.Iso2
	}
	return ""
}

func (x *EnrichedZip) GetMsaCode() string {
	if x != nil {
		return x.MsaCode
	}
	return ""
}

func (x *EnrichedZip) GetPlaceName() string {
	if x != nil {
		return x.PlaceName
	}
	return ""
}

func (x *EnrichedZip) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *EnrichedZip) GetPostalCodeKey() string {
	if x != nil {
		return x.PostalCodeKey
	}
	return ""
}

func (x *EnrichedZip) GetPostalType() string {
	if x != nil {
		return x.PostalType
	}
	return ""
}

func (x *EnrichedZip) GetProvinceAbbr() string {
	if x != nil {
		return x.ProvinceAbbr
	}
	return ""
}

func (x *EnrichedZip) GetProvinceName() string {
	if x != nil {
		return x.ProvinceName
	}
	return ""
}

func (x *EnrichedZip) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *EnrichedZip) GetStateFips() string {
	if x != nil {
		return x.StateFips
	}
	return ""
}

func (x *EnrichedZip) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *EnrichedZip) GetUtc() float32 {
	if x != nil {
		return x.Utc
	}
	return 0
}

// represents need for getting current timestamp during processing
type Now struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Now) Reset() {
	*x = Now{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Now) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Now) ProtoMessage() {}

func (x *Now) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Now.ProtoReflect.Descriptor instead.
func (*Now) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{107}
}

// a specific point in time, down to second presision.
type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year int32 `protobuf:"varint,3,opt,name=year,proto3" json:"year,omitempty"`
	// januaury = 1, december = 12
	Month int32 `protobuf:"varint,4,opt,name=month,proto3" json:"month,omitempty"`
	// between 1-53
	Week int32 `protobuf:"varint,5,opt,name=week,proto3" json:"week,omitempty"`
	// depending on the month 1-31
	DayOfMonth int32 `protobuf:"varint,6,opt,name=day_of_month,json=dayOfMonth,proto3" json:"day_of_month,omitempty"`
	// 0-6 sunday = 0
	DayOfWeek int32 `protobuf:"varint,7,opt,name=day_of_week,json=dayOfWeek,proto3" json:"day_of_week,omitempty"`
	// 1 - 366 (leap year)
	DayOfYear int32 `protobuf:"varint,8,opt,name=day_of_year,json=dayOfYear,proto3" json:"day_of_year,omitempty"`
	// 0-23
	Hour int32 `protobuf:"varint,9,opt,name=hour,proto3" json:"hour,omitempty"`
	// 0-59
	Minute int32 `protobuf:"varint,10,opt,name=minute,proto3" json:"minute,omitempty"`
	// 0-59
	Second int32 `protobuf:"varint,11,opt,name=second,proto3" json:"second,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{108}
}

func (x *Timestamp) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Timestamp) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *Timestamp) GetWeek() int32 {
	if x != nil {
		return x.Week
	}
	return 0
}

func (x *Timestamp) GetDayOfMonth() int32 {
	if x != nil {
		return x.DayOfMonth
	}
	return 0
}

func (x *Timestamp) GetDayOfWeek() int32 {
	if x != nil {
		return x.DayOfWeek
	}
	return 0
}

func (x *Timestamp) GetDayOfYear() int32 {
	if x != nil {
		return x.DayOfYear
	}
	return 0
}

func (x *Timestamp) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *Timestamp) GetMinute() int32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

func (x *Timestamp) GetSecond() int32 {
	if x != nil {
		return x.Second
	}
	return 0
}

// a specific year, month, and day.
type Date struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year       int32 `protobuf:"varint,3,opt,name=year,proto3" json:"year,omitempty"`
	Month      int32 `protobuf:"varint,4,opt,name=month,proto3" json:"month,omitempty"`
	Week       int32 `protobuf:"varint,5,opt,name=week,proto3" json:"week,omitempty"`
	DayOfMonth int32 `protobuf:"varint,6,opt,name=day_of_month,json=dayOfMonth,proto3" json:"day_of_month,omitempty"`
	DayOfWeek  int32 `protobuf:"varint,7,opt,name=day_of_week,json=dayOfWeek,proto3" json:"day_of_week,omitempty"`
	DayOfYear  int32 `protobuf:"varint,8,opt,name=day_of_year,json=dayOfYear,proto3" json:"day_of_year,omitempty"`
}

func (x *Date) Reset() {
	*x = Date{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{109}
}

func (x *Date) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Date) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *Date) GetWeek() int32 {
	if x != nil {
		return x.Week
	}
	return 0
}

func (x *Date) GetDayOfMonth() int32 {
	if x != nil {
		return x.DayOfMonth
	}
	return 0
}

func (x *Date) GetDayOfWeek() int32 {
	if x != nil {
		return x.DayOfWeek
	}
	return 0
}

func (x *Date) GetDayOfYear() int32 {
	if x != nil {
		return x.DayOfYear
	}
	return 0
}

// a specific month and day of the year
type MonthAndDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month      int32 `protobuf:"varint,3,opt,name=month,proto3" json:"month,omitempty"`
	Week       int32 `protobuf:"varint,4,opt,name=week,proto3" json:"week,omitempty"`
	DayOfMonth int32 `protobuf:"varint,5,opt,name=day_of_month,json=dayOfMonth,proto3" json:"day_of_month,omitempty"`
	DayOfWeek  int32 `protobuf:"varint,6,opt,name=day_of_week,json=dayOfWeek,proto3" json:"day_of_week,omitempty"`
	DayOfYear  int32 `protobuf:"varint,7,opt,name=day_of_year,json=dayOfYear,proto3" json:"day_of_year,omitempty"`
}

func (x *MonthAndDay) Reset() {
	*x = MonthAndDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthAndDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthAndDay) ProtoMessage() {}

func (x *MonthAndDay) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthAndDay.ProtoReflect.Descriptor instead.
func (*MonthAndDay) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{110}
}

func (x *MonthAndDay) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *MonthAndDay) GetWeek() int32 {
	if x != nil {
		return x.Week
	}
	return 0
}

func (x *MonthAndDay) GetDayOfMonth() int32 {
	if x != nil {
		return x.DayOfMonth
	}
	return 0
}

func (x *MonthAndDay) GetDayOfWeek() int32 {
	if x != nil {
		return x.DayOfWeek
	}
	return 0
}

func (x *MonthAndDay) GetDayOfYear() int32 {
	if x != nil {
		return x.DayOfYear
	}
	return 0
}

// a specific day of the week.  sunday = 0
type DayOfWeek struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DayOfWeek int32 `protobuf:"varint,3,opt,name=day_of_week,json=dayOfWeek,proto3" json:"day_of_week,omitempty"`
}

func (x *DayOfWeek) Reset() {
	*x = DayOfWeek{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DayOfWeek) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DayOfWeek) ProtoMessage() {}

func (x *DayOfWeek) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DayOfWeek.ProtoReflect.Descriptor instead.
func (*DayOfWeek) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{111}
}

func (x *DayOfWeek) GetDayOfWeek() int32 {
	if x != nil {
		return x.DayOfWeek
	}
	return 0
}

// a specific time of day. 24 hour format. 12:00:00AM = 0,0,0
type TimeOfDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hour   int32 `protobuf:"varint,3,opt,name=hour,proto3" json:"hour,omitempty"`
	Minute int32 `protobuf:"varint,4,opt,name=minute,proto3" json:"minute,omitempty"`
	Second int32 `protobuf:"varint,5,opt,name=second,proto3" json:"second,omitempty"`
}

func (x *TimeOfDay) Reset() {
	*x = TimeOfDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeOfDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeOfDay) ProtoMessage() {}

func (x *TimeOfDay) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeOfDay.ProtoReflect.Descriptor instead.
func (*TimeOfDay) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{112}
}

func (x *TimeOfDay) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *TimeOfDay) GetMinute() int32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

func (x *TimeOfDay) GetSecond() int32 {
	if x != nil {
		return x.Second
	}
	return 0
}

type FileFormatParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// use skip_first_lines
	//
	// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
	SkipFirstNoLines int32 `protobuf:"varint,10,opt,name=skip_first_no_lines,json=skipFirstNoLines,proto3" json:"skip_first_no_lines,omitempty"`
	// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
	SkipLinesMatchRegex string `protobuf:"bytes,11,opt,name=skip_lines_match_regex,json=skipLinesMatchRegex,proto3" json:"skip_lines_match_regex,omitempty"`
	TrimSpaces          bool   `protobuf:"varint,12,opt,name=trim_spaces,json=trimSpaces,proto3" json:"trim_spaces,omitempty"`
	CustomDelimiter     string `protobuf:"bytes,13,opt,name=custom_delimiter,json=customDelimiter,proto3" json:"custom_delimiter,omitempty"`
	SkipFirstLine       bool   `protobuf:"varint,14,opt,name=skip_first_line,json=skipFirstLine,proto3" json:"skip_first_line,omitempty"`
	// for json file formats:
	// if non-empty represents that the file is one large json object,
	// and that this is the json path to the root that contains all the records.
	// example: { response: { records: [...] } }
	// to get to the records stored at [...], we would use
	// json_dot_path="response.records"
	// If left blank, we are expected each json object to be on its own line: (jsonl)
	JsonDotPath string `protobuf:"bytes,15,opt,name=json_dot_path,json=jsonDotPath,proto3" json:"json_dot_path,omitempty"`
}

func (x *FileFormatParams) Reset() {
	*x = FileFormatParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileFormatParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileFormatParams) ProtoMessage() {}

func (x *FileFormatParams) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileFormatParams.ProtoReflect.Descriptor instead.
func (*FileFormatParams) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{113}
}

// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
func (x *FileFormatParams) GetSkipFirstNoLines() int32 {
	if x != nil {
		return x.SkipFirstNoLines
	}
	return 0
}

// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
func (x *FileFormatParams) GetSkipLinesMatchRegex() string {
	if x != nil {
		return x.SkipLinesMatchRegex
	}
	return ""
}

func (x *FileFormatParams) GetTrimSpaces() bool {
	if x != nil {
		return x.TrimSpaces
	}
	return false
}

func (x *FileFormatParams) GetCustomDelimiter() string {
	if x != nil {
		return x.CustomDelimiter
	}
	return ""
}

func (x *FileFormatParams) GetSkipFirstLine() bool {
	if x != nil {
		return x.SkipFirstLine
	}
	return false
}

func (x *FileFormatParams) GetJsonDotPath() string {
	if x != nil {
		return x.JsonDotPath
	}
	return ""
}

type ReshapeProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions []*ReshapeAction `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *ReshapeProcess) Reset() {
	*x = ReshapeProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReshapeProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshapeProcess) ProtoMessage() {}

func (x *ReshapeProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshapeProcess.ProtoReflect.Descriptor instead.
func (*ReshapeProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{114}
}

func (x *ReshapeProcess) GetActions() []*ReshapeAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

type ReshapeAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NOT a FieldIndex
	Field string `protobuf:"bytes,19,opt,name=field,proto3" json:"field,omitempty"`
	// will only execute on the matching type (defaults to ALL)
	//
	// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
	MatchingType commons.RecordType `protobuf:"varint,20,opt,name=matching_type,json=matchingType,proto3,enum=api.commons.RecordType" json:"matching_type,omitempty"`
	Predicate    *FilterCheck       `protobuf:"bytes,50,opt,name=predicate,proto3" json:"predicate,omitempty"`
	// Types that are assignable to Action:
	//
	//	*ReshapeAction_Rename_
	//	*ReshapeAction_AddValue_
	//	*ReshapeAction_AddField_
	//	*ReshapeAction_AddDate_
	//	*ReshapeAction_SubtractValue_
	//	*ReshapeAction_SubtractField_
	//	*ReshapeAction_Convert_
	//	*ReshapeAction_RemoveField_
	//	*ReshapeAction_AddNewField_
	//	*ReshapeAction_ChangeCurrencyType_
	//	*ReshapeAction_Divide_
	//	*ReshapeAction_Multiply_
	//	*ReshapeAction_Modulo_
	//	*ReshapeAction_Merge_
	//	*ReshapeAction_SetFieldValue_
	//	*ReshapeAction_AddNewFieldFromField_
	//	*ReshapeAction_SetFieldFromField_
	//	*ReshapeAction_Pad_
	//	*ReshapeAction_Trim_
	//	*ReshapeAction_Extract_
	Action isReshapeAction_Action `protobuf_oneof:"action"`
}

func (x *ReshapeAction) Reset() {
	*x = ReshapeAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReshapeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshapeAction) ProtoMessage() {}

func (x *ReshapeAction) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshapeAction.ProtoReflect.Descriptor instead.
func (*ReshapeAction) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{115}
}

func (x *ReshapeAction) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
func (x *ReshapeAction) GetMatchingType() commons.RecordType {
	if x != nil {
		return x.MatchingType
	}
	return commons.RecordType(0)
}

func (x *ReshapeAction) GetPredicate() *FilterCheck {
	if x != nil {
		return x.Predicate
	}
	return nil
}

func (m *ReshapeAction) GetAction() isReshapeAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *ReshapeAction) GetRename() *ReshapeAction_Rename {
	if x, ok := x.GetAction().(*ReshapeAction_Rename_); ok {
		return x.Rename
	}
	return nil
}

func (x *ReshapeAction) GetAddValue() *ReshapeAction_AddValue {
	if x, ok := x.GetAction().(*ReshapeAction_AddValue_); ok {
		return x.AddValue
	}
	return nil
}

func (x *ReshapeAction) GetAddField() *ReshapeAction_AddField {
	if x, ok := x.GetAction().(*ReshapeAction_AddField_); ok {
		return x.AddField
	}
	return nil
}

func (x *ReshapeAction) GetAddDate() *ReshapeAction_AddDate {
	if x, ok := x.GetAction().(*ReshapeAction_AddDate_); ok {
		return x.AddDate
	}
	return nil
}

func (x *ReshapeAction) GetSubtractValue() *ReshapeAction_SubtractValue {
	if x, ok := x.GetAction().(*ReshapeAction_SubtractValue_); ok {
		return x.SubtractValue
	}
	return nil
}

func (x *ReshapeAction) GetSubtractField() *ReshapeAction_SubtractField {
	if x, ok := x.GetAction().(*ReshapeAction_SubtractField_); ok {
		return x.SubtractField
	}
	return nil
}

func (x *ReshapeAction) GetConvert() *ReshapeAction_Convert {
	if x, ok := x.GetAction().(*ReshapeAction_Convert_); ok {
		return x.Convert
	}
	return nil
}

func (x *ReshapeAction) GetRemoveField() *ReshapeAction_RemoveField {
	if x, ok := x.GetAction().(*ReshapeAction_RemoveField_); ok {
		return x.RemoveField
	}
	return nil
}

func (x *ReshapeAction) GetAddNewField() *ReshapeAction_AddNewField {
	if x, ok := x.GetAction().(*ReshapeAction_AddNewField_); ok {
		return x.AddNewField
	}
	return nil
}

func (x *ReshapeAction) GetChangeCurrencyType() *ReshapeAction_ChangeCurrencyType {
	if x, ok := x.GetAction().(*ReshapeAction_ChangeCurrencyType_); ok {
		return x.ChangeCurrencyType
	}
	return nil
}

func (x *ReshapeAction) GetDivide() *ReshapeAction_Divide {
	if x, ok := x.GetAction().(*ReshapeAction_Divide_); ok {
		return x.Divide
	}
	return nil
}

func (x *ReshapeAction) GetMultiply() *ReshapeAction_Multiply {
	if x, ok := x.GetAction().(*ReshapeAction_Multiply_); ok {
		return x.Multiply
	}
	return nil
}

func (x *ReshapeAction) GetModulo() *ReshapeAction_Modulo {
	if x, ok := x.GetAction().(*ReshapeAction_Modulo_); ok {
		return x.Modulo
	}
	return nil
}

func (x *ReshapeAction) GetMerge() *ReshapeAction_Merge {
	if x, ok := x.GetAction().(*ReshapeAction_Merge_); ok {
		return x.Merge
	}
	return nil
}

func (x *ReshapeAction) GetSetFieldValue() *ReshapeAction_SetFieldValue {
	if x, ok := x.GetAction().(*ReshapeAction_SetFieldValue_); ok {
		return x.SetFieldValue
	}
	return nil
}

func (x *ReshapeAction) GetAddNewFieldFromField() *ReshapeAction_AddNewFieldFromField {
	if x, ok := x.GetAction().(*ReshapeAction_AddNewFieldFromField_); ok {
		return x.AddNewFieldFromField
	}
	return nil
}

func (x *ReshapeAction) GetSetFieldFromField() *ReshapeAction_SetFieldFromField {
	if x, ok := x.GetAction().(*ReshapeAction_SetFieldFromField_); ok {
		return x.SetFieldFromField
	}
	return nil
}

func (x *ReshapeAction) GetPad() *ReshapeAction_Pad {
	if x, ok := x.GetAction().(*ReshapeAction_Pad_); ok {
		return x.Pad
	}
	return nil
}

func (x *ReshapeAction) GetTrim() *ReshapeAction_Trim {
	if x, ok := x.GetAction().(*ReshapeAction_Trim_); ok {
		return x.Trim
	}
	return nil
}

func (x *ReshapeAction) GetExtract() *ReshapeAction_Extract {
	if x, ok := x.GetAction().(*ReshapeAction_Extract_); ok {
		return x.Extract
	}
	return nil
}

type isReshapeAction_Action interface {
	isReshapeAction_Action()
}

type ReshapeAction_Rename_ struct {
	Rename *ReshapeAction_Rename `protobuf:"bytes,22,opt,name=rename,proto3,oneof"`
}

type ReshapeAction_AddValue_ struct {
	AddValue *ReshapeAction_AddValue `protobuf:"bytes,23,opt,name=add_value,json=addValue,proto3,oneof"`
}

type ReshapeAction_AddField_ struct {
	AddField *ReshapeAction_AddField `protobuf:"bytes,24,opt,name=add_field,json=addField,proto3,oneof"`
}

type ReshapeAction_AddDate_ struct {
	AddDate *ReshapeAction_AddDate `protobuf:"bytes,47,opt,name=add_date,json=addDate,proto3,oneof"`
}

type ReshapeAction_SubtractValue_ struct {
	SubtractValue *ReshapeAction_SubtractValue `protobuf:"bytes,25,opt,name=subtract_value,json=subtractValue,proto3,oneof"`
}

type ReshapeAction_SubtractField_ struct {
	SubtractField *ReshapeAction_SubtractField `protobuf:"bytes,26,opt,name=subtract_field,json=subtractField,proto3,oneof"`
}

type ReshapeAction_Convert_ struct {
	Convert *ReshapeAction_Convert `protobuf:"bytes,28,opt,name=convert,proto3,oneof"`
}

type ReshapeAction_RemoveField_ struct {
	RemoveField *ReshapeAction_RemoveField `protobuf:"bytes,29,opt,name=remove_field,json=removeField,proto3,oneof"`
}

type ReshapeAction_AddNewField_ struct {
	AddNewField *ReshapeAction_AddNewField `protobuf:"bytes,30,opt,name=add_new_field,json=addNewField,proto3,oneof"`
}

type ReshapeAction_ChangeCurrencyType_ struct {
	ChangeCurrencyType *ReshapeAction_ChangeCurrencyType `protobuf:"bytes,31,opt,name=change_currency_type,json=changeCurrencyType,proto3,oneof"`
}

type ReshapeAction_Divide_ struct {
	Divide *ReshapeAction_Divide `protobuf:"bytes,32,opt,name=divide,proto3,oneof"`
}

type ReshapeAction_Multiply_ struct {
	Multiply *ReshapeAction_Multiply `protobuf:"bytes,33,opt,name=multiply,proto3,oneof"`
}

type ReshapeAction_Modulo_ struct {
	Modulo *ReshapeAction_Modulo `protobuf:"bytes,34,opt,name=modulo,proto3,oneof"`
}

type ReshapeAction_Merge_ struct {
	Merge *ReshapeAction_Merge `protobuf:"bytes,40,opt,name=merge,proto3,oneof"`
}

type ReshapeAction_SetFieldValue_ struct {
	SetFieldValue *ReshapeAction_SetFieldValue `protobuf:"bytes,41,opt,name=set_field_value,json=setFieldValue,proto3,oneof"`
}

type ReshapeAction_AddNewFieldFromField_ struct {
	AddNewFieldFromField *ReshapeAction_AddNewFieldFromField `protobuf:"bytes,45,opt,name=add_new_field_from_field,json=addNewFieldFromField,proto3,oneof"`
}

type ReshapeAction_SetFieldFromField_ struct {
	SetFieldFromField *ReshapeAction_SetFieldFromField `protobuf:"bytes,46,opt,name=set_field_from_field,json=setFieldFromField,proto3,oneof"`
}

type ReshapeAction_Pad_ struct {
	Pad *ReshapeAction_Pad `protobuf:"bytes,52,opt,name=pad,proto3,oneof"`
}

type ReshapeAction_Trim_ struct {
	Trim *ReshapeAction_Trim `protobuf:"bytes,53,opt,name=trim,proto3,oneof"`
}

type ReshapeAction_Extract_ struct {
	Extract *ReshapeAction_Extract `protobuf:"bytes,54,opt,name=extract,proto3,oneof"`
}

func (*ReshapeAction_Rename_) isReshapeAction_Action() {}

func (*ReshapeAction_AddValue_) isReshapeAction_Action() {}

func (*ReshapeAction_AddField_) isReshapeAction_Action() {}

func (*ReshapeAction_AddDate_) isReshapeAction_Action() {}

func (*ReshapeAction_SubtractValue_) isReshapeAction_Action() {}

func (*ReshapeAction_SubtractField_) isReshapeAction_Action() {}

func (*ReshapeAction_Convert_) isReshapeAction_Action() {}

func (*ReshapeAction_RemoveField_) isReshapeAction_Action() {}

func (*ReshapeAction_AddNewField_) isReshapeAction_Action() {}

func (*ReshapeAction_ChangeCurrencyType_) isReshapeAction_Action() {}

func (*ReshapeAction_Divide_) isReshapeAction_Action() {}

func (*ReshapeAction_Multiply_) isReshapeAction_Action() {}

func (*ReshapeAction_Modulo_) isReshapeAction_Action() {}

func (*ReshapeAction_Merge_) isReshapeAction_Action() {}

func (*ReshapeAction_SetFieldValue_) isReshapeAction_Action() {}

func (*ReshapeAction_AddNewFieldFromField_) isReshapeAction_Action() {}

func (*ReshapeAction_SetFieldFromField_) isReshapeAction_Action() {}

func (*ReshapeAction_Pad_) isReshapeAction_Action() {}

func (*ReshapeAction_Trim_) isReshapeAction_Action() {}

func (*ReshapeAction_Extract_) isReshapeAction_Action() {}

type ContactManagerSink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project id snet to Conatactmanager when sink is ran
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// name sent to ContactManager when the sink is ran
	ContactListName string `protobuf:"bytes,3,opt,name=contact_list_name,json=contactListName,proto3" json:"contact_list_name,omitempty"`
	// description to use for this contact list.
	// Sent to contact manager when ran.
	ContactListDescription string `protobuf:"bytes,4,opt,name=contact_list_description,json=contactListDescription,proto3" json:"contact_list_description,omitempty"`
	// if blank we export all fields.
	// if provided, we export only the fields listed here
	Fields []string `protobuf:"bytes,8,rep,name=fields,proto3" json:"fields,omitempty"`
	// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
	Ttl int64 `protobuf:"varint,7,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// how long the data uploaded to this list lives for
	// if nil we default to the duration for 30 days
	Lifetime *durationpb.Duration `protobuf:"bytes,9,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
}

func (x *ContactManagerSink) Reset() {
	*x = ContactManagerSink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactManagerSink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactManagerSink) ProtoMessage() {}

func (x *ContactManagerSink) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactManagerSink.ProtoReflect.Descriptor instead.
func (*ContactManagerSink) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{116}
}

func (x *ContactManagerSink) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ContactManagerSink) GetContactListName() string {
	if x != nil {
		return x.ContactListName
	}
	return ""
}

func (x *ContactManagerSink) GetContactListDescription() string {
	if x != nil {
		return x.ContactListDescription
	}
	return ""
}

func (x *ContactManagerSink) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
func (x *ContactManagerSink) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *ContactManagerSink) GetLifetime() *durationpb.Duration {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

type SumProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// field to sum
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// new_name for the summed field
	NewName string `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	// optional group_by to aggregate data
	// before summing the desired field
	GroupBy *GroupBy `protobuf:"bytes,3,opt,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	// conditions to limit which record's fields will be summed
	// we will AND these together
	Filter *FilterOperation `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *SumProcess) Reset() {
	*x = SumProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumProcess) ProtoMessage() {}

func (x *SumProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumProcess.ProtoReflect.Descriptor instead.
func (*SumProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{117}
}

func (x *SumProcess) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SumProcess) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

func (x *SumProcess) GetGroupBy() *GroupBy {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *SumProcess) GetFilter() *FilterOperation {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GroupBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// fields to group data by
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *GroupBy) Reset() {
	*x = GroupBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupBy) ProtoMessage() {}

func (x *GroupBy) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupBy.ProtoReflect.Descriptor instead.
func (*GroupBy) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{118}
}

func (x *GroupBy) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

// stored as json in lms_history table
type ListMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// signifies how many records existed at the beginning of the operation
	InputRecordCount int32 `protobuf:"varint,1,opt,name=input_record_count,json=inputRecordCount,proto3" json:"input_record_count,omitempty"`
	// how many records existed on the element at the end of the operation
	OutputRecordCount int32 `protobuf:"varint,2,opt,name=output_record_count,json=outputRecordCount,proto3" json:"output_record_count,omitempty"`
	// all the field names that exist in the list
	FieldNames []string `protobuf:"bytes,3,rep,name=field_names,json=fieldNames,proto3" json:"field_names,omitempty"`
	// all the field types that exist. field_types[i] has a name of field_names[i].
	// THeir indexes match up
	//
	// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
	FieldTypes []commons.RecordType `protobuf:"varint,4,rep,packed,name=field_types,json=fieldTypes,proto3,enum=api.commons.RecordType" json:"field_types,omitempty"`
	Ftypes     []commons.FieldType  `protobuf:"varint,18,rep,packed,name=ftypes,proto3,enum=api.commons.FieldType" json:"ftypes,omitempty"`
	// the counts of the field_name[i], field_type[i] pairs.
	// ex: if field_name[i] == 'test' and field_types[i] == record_type_err, and field_counts[i] == 10
	// means we woud have 10 fiels named test that were error types in the list.
	FieldCounts []int32 `protobuf:"varint,5,rep,packed,name=field_counts,json=fieldCounts,proto3" json:"field_counts,omitempty"`
	// the run type for the exchange.  Will only mean anything if the element is an exchange.
	RunType commons.RunType `protobuf:"varint,6,opt,name=run_type,json=runType,proto3,enum=api.commons.RunType" json:"run_type,omitempty"`
	// will contain the http post response body from the POST request to p3 backoffice
	// only relevent on p3 exchange elements.
	SuccessMessage string `protobuf:"bytes,7,opt,name=success_message,json=successMessage,proto3" json:"success_message,omitempty"`
	// specifies the number of fields the largest record had in the list.
	// ex: max_record_width of 10 means that there exists at least 1 record in the list had 10 fields.
	// meta fields (fields that start with an '_') are not counted
	MaxRecordWidth int32 `protobuf:"varint,8,opt,name=max_record_width,json=maxRecordWidth,proto3" json:"max_record_width,omitempty"`
	// opposite of max_record_width
	MinRecordWidth int32 `protobuf:"varint,9,opt,name=min_record_width,json=minRecordWidth,proto3" json:"min_record_width,omitempty"`
	// the first index we can find the record with max_record_width fields
	MaxRecordIndex int32 `protobuf:"varint,10,opt,name=max_record_index,json=maxRecordIndex,proto3" json:"max_record_index,omitempty"`
	// the first index we can find the record with min_record_width fields
	MinRecordIndex int32 `protobuf:"varint,11,opt,name=min_record_index,json=minRecordIndex,proto3" json:"min_record_index,omitempty"`
	// the upstream files that were used to process this element.
	// usually this field will either be empty, or have 1 item in it.
	Files []string `protobuf:"bytes,12,rep,name=files,proto3" json:"files,omitempty"`
	// which groups exist in the list.
	// a group is a tagged record with a field '_group' and a string payload
	Groups []string `protobuf:"bytes,13,rep,name=groups,proto3" json:"groups,omitempty"`
	// represents which fields were looked up, but were missing from the record
	// this is the set of all missing fields
	MissingFields []string `protobuf:"bytes,15,rep,name=missing_fields,json=missingFields,proto3" json:"missing_fields,omitempty"`
	// represents how many seconds it took for the event to start getting worked on
	SecondsToStart float64 `protobuf:"fixed64,16,opt,name=seconds_to_start,json=secondsToStart,proto3" json:"seconds_to_start,omitempty"`
	// represents how mahy seconds it took to process the event
	SecondsToProcess float64 `protobuf:"fixed64,17,opt,name=seconds_to_process,json=secondsToProcess,proto3" json:"seconds_to_process,omitempty"`
}

func (x *ListMetrics) Reset() {
	*x = ListMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMetrics) ProtoMessage() {}

func (x *ListMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMetrics.ProtoReflect.Descriptor instead.
func (*ListMetrics) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{119}
}

func (x *ListMetrics) GetInputRecordCount() int32 {
	if x != nil {
		return x.InputRecordCount
	}
	return 0
}

func (x *ListMetrics) GetOutputRecordCount() int32 {
	if x != nil {
		return x.OutputRecordCount
	}
	return 0
}

func (x *ListMetrics) GetFieldNames() []string {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
func (x *ListMetrics) GetFieldTypes() []commons.RecordType {
	if x != nil {
		return x.FieldTypes
	}
	return nil
}

func (x *ListMetrics) GetFtypes() []commons.FieldType {
	if x != nil {
		return x.Ftypes
	}
	return nil
}

func (x *ListMetrics) GetFieldCounts() []int32 {
	if x != nil {
		return x.FieldCounts
	}
	return nil
}

func (x *ListMetrics) GetRunType() commons.RunType {
	if x != nil {
		return x.RunType
	}
	return commons.RunType(0)
}

func (x *ListMetrics) GetSuccessMessage() string {
	if x != nil {
		return x.SuccessMessage
	}
	return ""
}

func (x *ListMetrics) GetMaxRecordWidth() int32 {
	if x != nil {
		return x.MaxRecordWidth
	}
	return 0
}

func (x *ListMetrics) GetMinRecordWidth() int32 {
	if x != nil {
		return x.MinRecordWidth
	}
	return 0
}

func (x *ListMetrics) GetMaxRecordIndex() int32 {
	if x != nil {
		return x.MaxRecordIndex
	}
	return 0
}

func (x *ListMetrics) GetMinRecordIndex() int32 {
	if x != nil {
		return x.MinRecordIndex
	}
	return 0
}

func (x *ListMetrics) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *ListMetrics) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *ListMetrics) GetMissingFields() []string {
	if x != nil {
		return x.MissingFields
	}
	return nil
}

func (x *ListMetrics) GetSecondsToStart() float64 {
	if x != nil {
		return x.SecondsToStart
	}
	return 0
}

func (x *ListMetrics) GetSecondsToProcess() float64 {
	if x != nil {
		return x.SecondsToProcess
	}
	return 0
}

type ParseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// if empty, we will use GetAvailableFields instead of
	// ListAvailableFieldsByElementId
	ElementId string `protobuf:"bytes,3,opt,name=element_id,json=elementId,proto3" json:"element_id,omitempty"`
	// if empty, a new session will be returned with the response
	SessionId string `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// current expression string, can be empty
	Expression string `protobuf:"bytes,5,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *ParseReq) Reset() {
	*x = ParseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseReq) ProtoMessage() {}

func (x *ParseReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseReq.ProtoReflect.Descriptor instead.
func (*ParseReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{120}
}

func (x *ParseReq) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (x *ParseReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ParseReq) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

type ParseRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the session_id should be returned on future requests to make things faster
	SessionId  string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Expression string `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	// a list of valid tokens we can use at this point
	NextTokens []string `protobuf:"bytes,3,rep,name=next_tokens,json=nextTokens,proto3" json:"next_tokens,omitempty"`
	// if not a valid expression, error should have the message why
	Error string `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	// whether the result_expression is complete
	Complete bool `protobuf:"varint,6,opt,name=complete,proto3" json:"complete,omitempty"`
	// if complete is true, process will have a completed Process defined.
	// if complete is true, you will be able to send process to lms_api through
	// CreatePipelineElement.
	Process *Process `protobuf:"bytes,7,opt,name=process,proto3" json:"process,omitempty"`
}

func (x *ParseRes) Reset() {
	*x = ParseRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseRes) ProtoMessage() {}

func (x *ParseRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseRes.ProtoReflect.Descriptor instead.
func (*ParseRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{121}
}

func (x *ParseRes) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ParseRes) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *ParseRes) GetNextTokens() []string {
	if x != nil {
		return x.NextTokens
	}
	return nil
}

func (x *ParseRes) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ParseRes) GetComplete() bool {
	if x != nil {
		return x.Complete
	}
	return false
}

func (x *ParseRes) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pk
	EventId int64 `protobuf:"varint,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// element_id that created this event (nil if its an upload, or sftp_import)
	ParentId *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// other inputs to this event
	InputIds  *commons.StringArraySql `protobuf:"bytes,6,opt,name=input_ids,json=inputIds,proto3" json:"input_ids,omitempty"`
	ElementId string                  `protobuf:"bytes,7,opt,name=element_id,json=elementId,proto3" json:"element_id,omitempty"`
	Process   *Process                `protobuf:"bytes,9,opt,name=process,proto3" json:"process,omitempty"`
	// when this event got to the database
	UploadTs *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=upload_ts,json=uploadTs,proto3" json:"upload_ts,omitempty"`
	// when the scheduler started processing (could be nil if not started)
	StartedTs *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=started_ts,json=startedTs,proto3" json:"started_ts,omitempty"`
	// processing finished (could be nil if not finished)
	FinishedTs *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=finished_ts,json=finishedTs,proto3" json:"finished_ts,omitempty"`
	// (not used yet, so always nil) event wont be attempted till after this time
	BackoffTill *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=backoff_till,json=backoffTill,proto3" json:"backoff_till,omitempty"`
	// how many attempts this event is taking
	Attempts int32 `protobuf:"varint,14,opt,name=attempts,proto3" json:"attempts,omitempty"`
	// which hisotry record this event maps to. (only populated if finished_ts is
	// not nil)
	LatestHistory *wrapperspb.Int64Value `protobuf:"bytes,15,opt,name=latest_history,json=latestHistory,proto3" json:"latest_history,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{122}
}

func (x *Event) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *Event) GetParentId() *wrapperspb.StringValue {
	if x != nil {
		return x.ParentId
	}
	return nil
}

func (x *Event) GetInputIds() *commons.StringArraySql {
	if x != nil {
		return x.InputIds
	}
	return nil
}

func (x *Event) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (x *Event) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *Event) GetUploadTs() *timestamppb.Timestamp {
	if x != nil {
		return x.UploadTs
	}
	return nil
}

func (x *Event) GetStartedTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedTs
	}
	return nil
}

func (x *Event) GetFinishedTs() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedTs
	}
	return nil
}

func (x *Event) GetBackoffTill() *timestamppb.Timestamp {
	if x != nil {
		return x.BackoffTill
	}
	return nil
}

func (x *Event) GetAttempts() int32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *Event) GetLatestHistory() *wrapperspb.Int64Value {
	if x != nil {
		return x.LatestHistory
	}
	return nil
}

type Events struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *Events) Reset() {
	*x = Events{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Events) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Events) ProtoMessage() {}

func (x *Events) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Events.ProtoReflect.Descriptor instead.
func (*Events) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{123}
}

func (x *Events) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type ViewQueueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// return events with upload_ts times newer than this timestamp
	NewerThan *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=newer_than,json=newerThan,proto3" json:"newer_than,omitempty"`
	// do not return events with upload_ts times newer than this timestamp
	NoNewerThan *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=no_newer_than,json=noNewerThan,proto3" json:"no_newer_than,omitempty"`
	// skip records with event_id smaller than this id
	AfterEventId int64 `protobuf:"varint,3,opt,name=after_event_id,json=afterEventId,proto3" json:"after_event_id,omitempty"`
	// max number of records to retrieve
	NumberOfRecords int64 `protobuf:"varint,4,opt,name=number_of_records,json=numberOfRecords,proto3" json:"number_of_records,omitempty"`
}

func (x *ViewQueueReq) Reset() {
	*x = ViewQueueReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewQueueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewQueueReq) ProtoMessage() {}

func (x *ViewQueueReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewQueueReq.ProtoReflect.Descriptor instead.
func (*ViewQueueReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{124}
}

func (x *ViewQueueReq) GetNewerThan() *timestamppb.Timestamp {
	if x != nil {
		return x.NewerThan
	}
	return nil
}

func (x *ViewQueueReq) GetNoNewerThan() *timestamppb.Timestamp {
	if x != nil {
		return x.NoNewerThan
	}
	return nil
}

func (x *ViewQueueReq) GetAfterEventId() int64 {
	if x != nil {
		return x.AfterEventId
	}
	return 0
}

func (x *ViewQueueReq) GetNumberOfRecords() int64 {
	if x != nil {
		return x.NumberOfRecords
	}
	return 0
}

type CollectionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name and ID of the collection
	CollectionId   string `protobuf:"bytes,3,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	CollectionName string `protobuf:"bytes,4,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	// Describes the fields used by the collection
	Fields       []*CollectionFieldMetadata `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	Deleted      bool                       `protobuf:"varint,6,opt,name=deleted,proto3" json:"deleted,omitempty"`
	CreatedBy    string                     `protobuf:"bytes,7,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CreatedOn    *timestamppb.Timestamp     `protobuf:"bytes,8,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	LastQueried  *timestamppb.Timestamp     `protobuf:"bytes,9,opt,name=last_queried,json=lastQueried,proto3" json:"last_queried,omitempty"`
	QueryCount   int64                      `protobuf:"varint,10,opt,name=query_count,json=queryCount,proto3" json:"query_count,omitempty"`
	EntryCount   int64                      `protobuf:"varint,11,opt,name=entry_count,json=entryCount,proto3" json:"entry_count,omitempty"`
	LastUpdated  *timestamppb.Timestamp     `protobuf:"bytes,12,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	SearchCount  int64                      `protobuf:"varint,13,opt,name=search_count,json=searchCount,proto3" json:"search_count,omitempty"`
	LastSearched *timestamppb.Timestamp     `protobuf:"bytes,14,opt,name=last_searched,json=lastSearched,proto3" json:"last_searched,omitempty"`
}

func (x *CollectionMetadata) Reset() {
	*x = CollectionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionMetadata) ProtoMessage() {}

func (x *CollectionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionMetadata.ProtoReflect.Descriptor instead.
func (*CollectionMetadata) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{125}
}

func (x *CollectionMetadata) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *CollectionMetadata) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *CollectionMetadata) GetFields() []*CollectionFieldMetadata {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *CollectionMetadata) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *CollectionMetadata) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *CollectionMetadata) GetCreatedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedOn
	}
	return nil
}

func (x *CollectionMetadata) GetLastQueried() *timestamppb.Timestamp {
	if x != nil {
		return x.LastQueried
	}
	return nil
}

func (x *CollectionMetadata) GetQueryCount() int64 {
	if x != nil {
		return x.QueryCount
	}
	return 0
}

func (x *CollectionMetadata) GetEntryCount() int64 {
	if x != nil {
		return x.EntryCount
	}
	return 0
}

func (x *CollectionMetadata) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *CollectionMetadata) GetSearchCount() int64 {
	if x != nil {
		return x.SearchCount
	}
	return 0
}

func (x *CollectionMetadata) GetLastSearched() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSearched
	}
	return nil
}

type CollectionEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string                 `protobuf:"bytes,3,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	EntryId      string                 `protobuf:"bytes,4,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	Fields       []*CollectionField     `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	LastUpdated  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
}

func (x *CollectionEntry) Reset() {
	*x = CollectionEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionEntry) ProtoMessage() {}

func (x *CollectionEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionEntry.ProtoReflect.Descriptor instead.
func (*CollectionEntry) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{126}
}

func (x *CollectionEntry) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *CollectionEntry) GetEntryId() string {
	if x != nil {
		return x.EntryId
	}
	return ""
}

func (x *CollectionEntry) GetFields() []*CollectionField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *CollectionEntry) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

type MatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string             `protobuf:"bytes,3,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	Fields       []*CollectionField `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
	BatchSize    int64              `protobuf:"varint,5,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
}

func (x *MatchReq) Reset() {
	*x = MatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchReq) ProtoMessage() {}

func (x *MatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchReq.ProtoReflect.Descriptor instead.
func (*MatchReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{127}
}

func (x *MatchReq) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *MatchReq) GetFields() []*CollectionField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *MatchReq) GetBatchSize() int64 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

type MatchRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*CollectionEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *MatchRes) Reset() {
	*x = MatchRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRes) ProtoMessage() {}

func (x *MatchRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRes.ProtoReflect.Descriptor instead.
func (*MatchRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{128}
}

func (x *MatchRes) GetEntries() []*CollectionEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

// Metadata associated with a field
type CollectionFieldMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName string            `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	FieldType commons.FieldType `protobuf:"varint,2,opt,name=field_type,json=fieldType,proto3,enum=api.commons.FieldType" json:"field_type,omitempty"`
	// Optional field
	// Specifies formating for the field
	// e.g. for a datetime it might be
	// something like "MM/DD/YYYY hh:mm:ss"
	FieldFormat string `protobuf:"bytes,3,opt,name=field_format,json=fieldFormat,proto3" json:"field_format,omitempty"`
}

func (x *CollectionFieldMetadata) Reset() {
	*x = CollectionFieldMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionFieldMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionFieldMetadata) ProtoMessage() {}

func (x *CollectionFieldMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionFieldMetadata.ProtoReflect.Descriptor instead.
func (*CollectionFieldMetadata) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{129}
}

func (x *CollectionFieldMetadata) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *CollectionFieldMetadata) GetFieldType() commons.FieldType {
	if x != nil {
		return x.FieldType
	}
	return commons.FieldType(0)
}

func (x *CollectionFieldMetadata) GetFieldFormat() string {
	if x != nil {
		return x.FieldFormat
	}
	return ""
}

type CollectionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName  string `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	FieldValue string `protobuf:"bytes,2,opt,name=field_value,json=fieldValue,proto3" json:"field_value,omitempty"`
}

func (x *CollectionField) Reset() {
	*x = CollectionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionField) ProtoMessage() {}

func (x *CollectionField) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionField.ProtoReflect.Descriptor instead.
func (*CollectionField) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{130}
}

func (x *CollectionField) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *CollectionField) GetFieldValue() string {
	if x != nil {
		return x.FieldValue
	}
	return ""
}

type GetCollectionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string `protobuf:"bytes,3,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
}

func (x *GetCollectionReq) Reset() {
	*x = GetCollectionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectionReq) ProtoMessage() {}

func (x *GetCollectionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectionReq.ProtoReflect.Descriptor instead.
func (*GetCollectionReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{131}
}

func (x *GetCollectionReq) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

type StreamCollectionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string `protobuf:"bytes,3,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
}

func (x *StreamCollectionReq) Reset() {
	*x = StreamCollectionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamCollectionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCollectionReq) ProtoMessage() {}

func (x *StreamCollectionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCollectionReq.ProtoReflect.Descriptor instead.
func (*StreamCollectionReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{132}
}

func (x *StreamCollectionReq) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

type DeleteCollectionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string `protobuf:"bytes,3,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
}

func (x *DeleteCollectionReq) Reset() {
	*x = DeleteCollectionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCollectionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCollectionReq) ProtoMessage() {}

func (x *DeleteCollectionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCollectionReq.ProtoReflect.Descriptor instead.
func (*DeleteCollectionReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{133}
}

func (x *DeleteCollectionReq) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

type ResetCollectionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string `protobuf:"bytes,3,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
}

func (x *ResetCollectionReq) Reset() {
	*x = ResetCollectionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetCollectionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCollectionReq) ProtoMessage() {}

func (x *ResetCollectionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCollectionReq.ProtoReflect.Descriptor instead.
func (*ResetCollectionReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{134}
}

func (x *ResetCollectionReq) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

type ListCollectionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListCollectionsReq) Reset() {
	*x = ListCollectionsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCollectionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCollectionsReq) ProtoMessage() {}

func (x *ListCollectionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCollectionsReq.ProtoReflect.Descriptor instead.
func (*ListCollectionsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{135}
}

type ListCollectionsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collections []*CollectionMetadata `protobuf:"bytes,1,rep,name=collections,proto3" json:"collections,omitempty"`
}

func (x *ListCollectionsRes) Reset() {
	*x = ListCollectionsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCollectionsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCollectionsRes) ProtoMessage() {}

func (x *ListCollectionsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCollectionsRes.ProtoReflect.Descriptor instead.
func (*ListCollectionsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{136}
}

func (x *ListCollectionsRes) GetCollections() []*CollectionMetadata {
	if x != nil {
		return x.Collections
	}
	return nil
}

type SearchCollectionsPaginatedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies which collections we are searching in
	// If empty it will search all collections.
	CollectionIds []string `protobuf:"bytes,3,rep,name=collection_ids,json=collectionIds,proto3" json:"collection_ids,omitempty"`
	// Specifies what we are searching for
	Search *Search `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	// Specifies where to start in the results
	From int64 `protobuf:"varint,5,opt,name=from,proto3" json:"from,omitempty"`
	// How many results to include in a page
	PageSize int64 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *SearchCollectionsPaginatedReq) Reset() {
	*x = SearchCollectionsPaginatedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCollectionsPaginatedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCollectionsPaginatedReq) ProtoMessage() {}

func (x *SearchCollectionsPaginatedReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCollectionsPaginatedReq.ProtoReflect.Descriptor instead.
func (*SearchCollectionsPaginatedReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{137}
}

func (x *SearchCollectionsPaginatedReq) GetCollectionIds() []string {
	if x != nil {
		return x.CollectionIds
	}
	return nil
}

func (x *SearchCollectionsPaginatedReq) GetSearch() *Search {
	if x != nil {
		return x.Search
	}
	return nil
}

func (x *SearchCollectionsPaginatedReq) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *SearchCollectionsPaginatedReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type Search struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The term we are searching for
	Term string `protobuf:"bytes,1,opt,name=term,proto3" json:"term,omitempty"`
	// Sets the amount of fuzziness allowed
	// in matches
	// Example:
	// Searching "term" would also match "temr"
	// Not compatible with a substring match
	Fuzziness int64 `protobuf:"varint,2,opt,name=fuzziness,proto3" json:"fuzziness,omitempty"`
	// Checks if a subset of the content matches
	// Example:
	// Searching "but" would also match "rebuttal"
	// Not compatible with fuzziness (will override fuzziness)
	Substring bool `protobuf:"varint,3,opt,name=substring,proto3" json:"substring,omitempty"`
	// Specifies if the search should be negated
	// Example:
	// Searching "term" would match everything NOT including "term"
	Negate bool `protobuf:"varint,4,opt,name=negate,proto3" json:"negate,omitempty"`
	// Specifies if we should be case sensitive
	CaseSensitive bool `protobuf:"varint,5,opt,name=case_sensitive,json=caseSensitive,proto3" json:"case_sensitive,omitempty"`
}

func (x *Search) Reset() {
	*x = Search{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Search) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Search) ProtoMessage() {}

func (x *Search) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Search.ProtoReflect.Descriptor instead.
func (*Search) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{138}
}

func (x *Search) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *Search) GetFuzziness() int64 {
	if x != nil {
		return x.Fuzziness
	}
	return 0
}

func (x *Search) GetSubstring() bool {
	if x != nil {
		return x.Substring
	}
	return false
}

func (x *Search) GetNegate() bool {
	if x != nil {
		return x.Negate
	}
	return false
}

func (x *Search) GetCaseSensitive() bool {
	if x != nil {
		return x.CaseSensitive
	}
	return false
}

type PaginatedSearchRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A page of results
	Entries []*CollectionEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	// Specifies the total number of results
	Total int64 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *PaginatedSearchRes) Reset() {
	*x = PaginatedSearchRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginatedSearchRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginatedSearchRes) ProtoMessage() {}

func (x *PaginatedSearchRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginatedSearchRes.ProtoReflect.Descriptor instead.
func (*PaginatedSearchRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{139}
}

func (x *PaginatedSearchRes) GetEntries() []*CollectionEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *PaginatedSearchRes) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetCollectionEntriesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId  string `protobuf:"bytes,3,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	From          int64  `protobuf:"varint,4,opt,name=from,proto3" json:"from,omitempty"`
	PageSize      int64  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	SearchAfterId string `protobuf:"bytes,6,opt,name=search_after_id,json=searchAfterId,proto3" json:"search_after_id,omitempty"`
}

func (x *GetCollectionEntriesReq) Reset() {
	*x = GetCollectionEntriesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectionEntriesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectionEntriesReq) ProtoMessage() {}

func (x *GetCollectionEntriesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectionEntriesReq.ProtoReflect.Descriptor instead.
func (*GetCollectionEntriesReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{140}
}

func (x *GetCollectionEntriesReq) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *GetCollectionEntriesReq) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *GetCollectionEntriesReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetCollectionEntriesReq) GetSearchAfterId() string {
	if x != nil {
		return x.SearchAfterId
	}
	return ""
}

type GetCollectionEntriesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *CollectionMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Entries  []*CollectionEntry  `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *GetCollectionEntriesRes) Reset() {
	*x = GetCollectionEntriesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectionEntriesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectionEntriesRes) ProtoMessage() {}

func (x *GetCollectionEntriesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectionEntriesRes.ProtoReflect.Descriptor instead.
func (*GetCollectionEntriesRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{141}
}

func (x *GetCollectionEntriesRes) GetMetadata() *CollectionMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetCollectionEntriesRes) GetEntries() []*CollectionEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type DeleteCollectionEntryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string `protobuf:"bytes,3,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	EntryId      string `protobuf:"bytes,4,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
}

func (x *DeleteCollectionEntryReq) Reset() {
	*x = DeleteCollectionEntryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCollectionEntryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCollectionEntryReq) ProtoMessage() {}

func (x *DeleteCollectionEntryReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCollectionEntryReq.ProtoReflect.Descriptor instead.
func (*DeleteCollectionEntryReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{142}
}

func (x *DeleteCollectionEntryReq) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *DeleteCollectionEntryReq) GetEntryId() string {
	if x != nil {
		return x.EntryId
	}
	return ""
}

type ListCampaignLinksRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Links []*Link `protobuf:"bytes,1,rep,name=Links,proto3" json:"Links,omitempty"`
}

func (x *ListCampaignLinksRes) Reset() {
	*x = ListCampaignLinksRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCampaignLinksRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCampaignLinksRes) ProtoMessage() {}

func (x *ListCampaignLinksRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCampaignLinksRes.ProtoReflect.Descriptor instead.
func (*ListCampaignLinksRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{143}
}

func (x *ListCampaignLinksRes) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

type Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XmlClientPropSid int64  `protobuf:"varint,1,opt,name=xml_client_prop_sid,json=xmlClientPropSid,proto3" json:"xml_client_prop_sid,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description      string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Link) Reset() {
	*x = Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{144}
}

func (x *Link) GetXmlClientPropSid() int64 {
	if x != nil {
		return x.XmlClientPropSid
	}
	return 0
}

func (x *Link) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Link) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CjsSearchField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CjsSearchFieldId      string            `protobuf:"bytes,1,opt,name=cjs_search_field_id,json=cjsSearchFieldId,proto3" json:"cjs_search_field_id,omitempty"`
	CjsSearchDefinitionId string            `protobuf:"bytes,2,opt,name=cjs_search_definition_id,json=cjsSearchDefinitionId,proto3" json:"cjs_search_definition_id,omitempty"`
	FieldName             string            `protobuf:"bytes,3,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	FieldType             commons.FieldType `protobuf:"varint,4,opt,name=field_type,json=fieldType,proto3,enum=api.commons.FieldType" json:"field_type,omitempty"`
	FieldValue            string            `protobuf:"bytes,5,opt,name=field_value,json=fieldValue,proto3" json:"field_value,omitempty"` // leave empty in definition to prompt user for value
}

func (x *CjsSearchField) Reset() {
	*x = CjsSearchField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CjsSearchField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CjsSearchField) ProtoMessage() {}

func (x *CjsSearchField) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CjsSearchField.ProtoReflect.Descriptor instead.
func (*CjsSearchField) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{145}
}

func (x *CjsSearchField) GetCjsSearchFieldId() string {
	if x != nil {
		return x.CjsSearchFieldId
	}
	return ""
}

func (x *CjsSearchField) GetCjsSearchDefinitionId() string {
	if x != nil {
		return x.CjsSearchDefinitionId
	}
	return ""
}

func (x *CjsSearchField) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *CjsSearchField) GetFieldType() commons.FieldType {
	if x != nil {
		return x.FieldType
	}
	return commons.FieldType(0)
}

func (x *CjsSearchField) GetFieldValue() string {
	if x != nil {
		return x.FieldValue
	}
	return ""
}

type CjsSearchDefinitionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CjsSearchDefinitionId string                 `protobuf:"bytes,1,opt,name=cjs_search_definition_id,json=cjsSearchDefinitionId,proto3" json:"cjs_search_definition_id,omitempty"`
	Name                  string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description           string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Deleted               bool                   `protobuf:"varint,6,opt,name=deleted,proto3" json:"deleted,omitempty"`
	ExecCount             int64                  `protobuf:"varint,7,opt,name=exec_count,json=execCount,proto3" json:"exec_count,omitempty"`
	ExecSuccess           int64                  `protobuf:"varint,8,opt,name=exec_success,json=execSuccess,proto3" json:"exec_success,omitempty"`
	ExecFail              int64                  `protobuf:"varint,9,opt,name=exec_fail,json=execFail,proto3" json:"exec_fail,omitempty"`
	CreatedDate           *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	LastEdited            *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=last_edited,json=lastEdited,proto3" json:"last_edited,omitempty"`
}

func (x *CjsSearchDefinitionMetadata) Reset() {
	*x = CjsSearchDefinitionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CjsSearchDefinitionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CjsSearchDefinitionMetadata) ProtoMessage() {}

func (x *CjsSearchDefinitionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CjsSearchDefinitionMetadata.ProtoReflect.Descriptor instead.
func (*CjsSearchDefinitionMetadata) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{146}
}

func (x *CjsSearchDefinitionMetadata) GetCjsSearchDefinitionId() string {
	if x != nil {
		return x.CjsSearchDefinitionId
	}
	return ""
}

func (x *CjsSearchDefinitionMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CjsSearchDefinitionMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CjsSearchDefinitionMetadata) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *CjsSearchDefinitionMetadata) GetExecCount() int64 {
	if x != nil {
		return x.ExecCount
	}
	return 0
}

func (x *CjsSearchDefinitionMetadata) GetExecSuccess() int64 {
	if x != nil {
		return x.ExecSuccess
	}
	return 0
}

func (x *CjsSearchDefinitionMetadata) GetExecFail() int64 {
	if x != nil {
		return x.ExecFail
	}
	return 0
}

func (x *CjsSearchDefinitionMetadata) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *CjsSearchDefinitionMetadata) GetLastEdited() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEdited
	}
	return nil
}

type CjsSearchDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata                *CjsSearchDefinitionMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	SearchFields            []*CjsSearchField            `protobuf:"bytes,2,rep,name=search_fields,json=searchFields,proto3" json:"search_fields,omitempty"`
	WhitelistedReturnFields []*CjsSearchField            `protobuf:"bytes,3,rep,name=whitelisted_return_fields,json=whitelistedReturnFields,proto3" json:"whitelisted_return_fields,omitempty"`
	BlacklistedReturnFields []*CjsSearchField            `protobuf:"bytes,4,rep,name=blacklisted_return_fields,json=blacklistedReturnFields,proto3" json:"blacklisted_return_fields,omitempty"`
	// field(s) used to identify a unique individual within a collection (ex. account_number)
	UniqueIdentifiers []*CjsSearchField `protobuf:"bytes,5,rep,name=unique_identifiers,json=uniqueIdentifiers,proto3" json:"unique_identifiers,omitempty"`
}

func (x *CjsSearchDefinition) Reset() {
	*x = CjsSearchDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CjsSearchDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CjsSearchDefinition) ProtoMessage() {}

func (x *CjsSearchDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CjsSearchDefinition.ProtoReflect.Descriptor instead.
func (*CjsSearchDefinition) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{147}
}

func (x *CjsSearchDefinition) GetMetadata() *CjsSearchDefinitionMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CjsSearchDefinition) GetSearchFields() []*CjsSearchField {
	if x != nil {
		return x.SearchFields
	}
	return nil
}

func (x *CjsSearchDefinition) GetWhitelistedReturnFields() []*CjsSearchField {
	if x != nil {
		return x.WhitelistedReturnFields
	}
	return nil
}

func (x *CjsSearchDefinition) GetBlacklistedReturnFields() []*CjsSearchField {
	if x != nil {
		return x.BlacklistedReturnFields
	}
	return nil
}

func (x *CjsSearchDefinition) GetUniqueIdentifiers() []*CjsSearchField {
	if x != nil {
		return x.UniqueIdentifiers
	}
	return nil
}

type GetCjsSearchDefinitionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CjsSearchDefinitionId string `protobuf:"bytes,1,opt,name=cjs_search_definition_id,json=cjsSearchDefinitionId,proto3" json:"cjs_search_definition_id,omitempty"`
}

func (x *GetCjsSearchDefinitionReq) Reset() {
	*x = GetCjsSearchDefinitionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCjsSearchDefinitionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCjsSearchDefinitionReq) ProtoMessage() {}

func (x *GetCjsSearchDefinitionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCjsSearchDefinitionReq.ProtoReflect.Descriptor instead.
func (*GetCjsSearchDefinitionReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{148}
}

func (x *GetCjsSearchDefinitionReq) GetCjsSearchDefinitionId() string {
	if x != nil {
		return x.CjsSearchDefinitionId
	}
	return ""
}

type DeleteCjsSearchDefinitionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CjsSearchDefinitionId string `protobuf:"bytes,1,opt,name=cjs_search_definition_id,json=cjsSearchDefinitionId,proto3" json:"cjs_search_definition_id,omitempty"`
}

func (x *DeleteCjsSearchDefinitionReq) Reset() {
	*x = DeleteCjsSearchDefinitionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCjsSearchDefinitionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCjsSearchDefinitionReq) ProtoMessage() {}

func (x *DeleteCjsSearchDefinitionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCjsSearchDefinitionReq.ProtoReflect.Descriptor instead.
func (*DeleteCjsSearchDefinitionReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{149}
}

func (x *DeleteCjsSearchDefinitionReq) GetCjsSearchDefinitionId() string {
	if x != nil {
		return x.CjsSearchDefinitionId
	}
	return ""
}

type ListCjsSearchDefinitionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListCjsSearchDefinitionsReq) Reset() {
	*x = ListCjsSearchDefinitionsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCjsSearchDefinitionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCjsSearchDefinitionsReq) ProtoMessage() {}

func (x *ListCjsSearchDefinitionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCjsSearchDefinitionsReq.ProtoReflect.Descriptor instead.
func (*ListCjsSearchDefinitionsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{150}
}

type ListCjsSearchDefinitionsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Definitions []*CjsSearchDefinitionMetadata `protobuf:"bytes,1,rep,name=definitions,proto3" json:"definitions,omitempty"`
}

func (x *ListCjsSearchDefinitionsRes) Reset() {
	*x = ListCjsSearchDefinitionsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCjsSearchDefinitionsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCjsSearchDefinitionsRes) ProtoMessage() {}

func (x *ListCjsSearchDefinitionsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCjsSearchDefinitionsRes.ProtoReflect.Descriptor instead.
func (*ListCjsSearchDefinitionsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{151}
}

func (x *ListCjsSearchDefinitionsRes) GetDefinitions() []*CjsSearchDefinitionMetadata {
	if x != nil {
		return x.Definitions
	}
	return nil
}

type ExecuteCjsSearchDefinitionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchDefinitionId string                   `protobuf:"bytes,1,opt,name=search_definition_id,json=searchDefinitionId,proto3" json:"search_definition_id,omitempty"`
	SearchFields       []*CjsExecuteSearchField `protobuf:"bytes,4,rep,name=search_fields,json=searchFields,proto3" json:"search_fields,omitempty"`
}

func (x *ExecuteCjsSearchDefinitionReq) Reset() {
	*x = ExecuteCjsSearchDefinitionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteCjsSearchDefinitionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteCjsSearchDefinitionReq) ProtoMessage() {}

func (x *ExecuteCjsSearchDefinitionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteCjsSearchDefinitionReq.ProtoReflect.Descriptor instead.
func (*ExecuteCjsSearchDefinitionReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{152}
}

func (x *ExecuteCjsSearchDefinitionReq) GetSearchDefinitionId() string {
	if x != nil {
		return x.SearchDefinitionId
	}
	return ""
}

func (x *ExecuteCjsSearchDefinitionReq) GetSearchFields() []*CjsExecuteSearchField {
	if x != nil {
		return x.SearchFields
	}
	return nil
}

type ExecuteCjsSearchDefinitionRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionEntries []*CollectionEntries `protobuf:"bytes,1,rep,name=collection_entries,json=collectionEntries,proto3" json:"collection_entries,omitempty"`
}

func (x *ExecuteCjsSearchDefinitionRes) Reset() {
	*x = ExecuteCjsSearchDefinitionRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteCjsSearchDefinitionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteCjsSearchDefinitionRes) ProtoMessage() {}

func (x *ExecuteCjsSearchDefinitionRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteCjsSearchDefinitionRes.ProtoReflect.Descriptor instead.
func (*ExecuteCjsSearchDefinitionRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{153}
}

func (x *ExecuteCjsSearchDefinitionRes) GetCollectionEntries() []*CollectionEntries {
	if x != nil {
		return x.CollectionEntries
	}
	return nil
}

type CollectionEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *CollectionMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Entries  []*CollectionEntry  `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *CollectionEntries) Reset() {
	*x = CollectionEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionEntries) ProtoMessage() {}

func (x *CollectionEntries) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionEntries.ProtoReflect.Descriptor instead.
func (*CollectionEntries) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{154}
}

func (x *CollectionEntries) GetMetadata() *CollectionMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CollectionEntries) GetEntries() []*CollectionEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type CjsExecuteSearchField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Field:
	//
	//	*CjsExecuteSearchField_FieldName
	//	*CjsExecuteSearchField_FieldType
	Field      isCjsExecuteSearchField_Field `protobuf_oneof:"field"`
	FieldValue string                        `protobuf:"bytes,3,opt,name=field_value,json=fieldValue,proto3" json:"field_value,omitempty"`
}

func (x *CjsExecuteSearchField) Reset() {
	*x = CjsExecuteSearchField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CjsExecuteSearchField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CjsExecuteSearchField) ProtoMessage() {}

func (x *CjsExecuteSearchField) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CjsExecuteSearchField.ProtoReflect.Descriptor instead.
func (*CjsExecuteSearchField) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{155}
}

func (m *CjsExecuteSearchField) GetField() isCjsExecuteSearchField_Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (x *CjsExecuteSearchField) GetFieldName() string {
	if x, ok := x.GetField().(*CjsExecuteSearchField_FieldName); ok {
		return x.FieldName
	}
	return ""
}

func (x *CjsExecuteSearchField) GetFieldType() commons.FieldType {
	if x, ok := x.GetField().(*CjsExecuteSearchField_FieldType); ok {
		return x.FieldType
	}
	return commons.FieldType(0)
}

func (x *CjsExecuteSearchField) GetFieldValue() string {
	if x != nil {
		return x.FieldValue
	}
	return ""
}

type isCjsExecuteSearchField_Field interface {
	isCjsExecuteSearchField_Field()
}

type CjsExecuteSearchField_FieldName struct {
	FieldName string `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3,oneof"`
}

type CjsExecuteSearchField_FieldType struct {
	FieldType commons.FieldType `protobuf:"varint,2,opt,name=field_type,json=fieldType,proto3,enum=api.commons.FieldType,oneof"`
}

func (*CjsExecuteSearchField_FieldName) isCjsExecuteSearchField_Field() {}

func (*CjsExecuteSearchField_FieldType) isCjsExecuteSearchField_Field() {}

type CjsSecureSearchCriteriaMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CjsSecureSearchCriteriaId string `protobuf:"bytes,1,opt,name=cjs_secure_search_criteria_id,json=cjsSecureSearchCriteriaId,proto3" json:"cjs_secure_search_criteria_id,omitempty"`
	Deleted                   bool   `protobuf:"varint,4,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// auditing
	CreatedOn   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	LastUpdated *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
}

func (x *CjsSecureSearchCriteriaMetadata) Reset() {
	*x = CjsSecureSearchCriteriaMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CjsSecureSearchCriteriaMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CjsSecureSearchCriteriaMetadata) ProtoMessage() {}

func (x *CjsSecureSearchCriteriaMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CjsSecureSearchCriteriaMetadata.ProtoReflect.Descriptor instead.
func (*CjsSecureSearchCriteriaMetadata) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{156}
}

func (x *CjsSecureSearchCriteriaMetadata) GetCjsSecureSearchCriteriaId() string {
	if x != nil {
		return x.CjsSecureSearchCriteriaId
	}
	return ""
}

func (x *CjsSecureSearchCriteriaMetadata) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *CjsSecureSearchCriteriaMetadata) GetCreatedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedOn
	}
	return nil
}

func (x *CjsSecureSearchCriteriaMetadata) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

type CjsSecureSearchCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *CjsSecureSearchCriteriaMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Fields   []*CjsSecureSearchCriteriaField  `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *CjsSecureSearchCriteria) Reset() {
	*x = CjsSecureSearchCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CjsSecureSearchCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CjsSecureSearchCriteria) ProtoMessage() {}

func (x *CjsSecureSearchCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CjsSecureSearchCriteria.ProtoReflect.Descriptor instead.
func (*CjsSecureSearchCriteria) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{157}
}

func (x *CjsSecureSearchCriteria) GetMetadata() *CjsSecureSearchCriteriaMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CjsSecureSearchCriteria) GetFields() []*CjsSecureSearchCriteriaField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type GetCjsSecureSearchCriteriaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCjsSecureSearchCriteriaReq) Reset() {
	*x = GetCjsSecureSearchCriteriaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCjsSecureSearchCriteriaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCjsSecureSearchCriteriaReq) ProtoMessage() {}

func (x *GetCjsSecureSearchCriteriaReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCjsSecureSearchCriteriaReq.ProtoReflect.Descriptor instead.
func (*GetCjsSecureSearchCriteriaReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{158}
}

type CjsSecureSearchCriteriaField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CjsSecureSearchCriteriaFieldId string            `protobuf:"bytes,1,opt,name=cjs_secure_search_criteria_field_id,json=cjsSecureSearchCriteriaFieldId,proto3" json:"cjs_secure_search_criteria_field_id,omitempty"`
	CjsSecureSearchCriteriaId      string            `protobuf:"bytes,2,opt,name=cjs_secure_search_criteria_id,json=cjsSecureSearchCriteriaId,proto3" json:"cjs_secure_search_criteria_id,omitempty"`
	FieldType                      commons.FieldType `protobuf:"varint,3,opt,name=field_type,json=fieldType,proto3,enum=api.commons.FieldType" json:"field_type,omitempty"`
}

func (x *CjsSecureSearchCriteriaField) Reset() {
	*x = CjsSecureSearchCriteriaField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CjsSecureSearchCriteriaField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CjsSecureSearchCriteriaField) ProtoMessage() {}

func (x *CjsSecureSearchCriteriaField) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CjsSecureSearchCriteriaField.ProtoReflect.Descriptor instead.
func (*CjsSecureSearchCriteriaField) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{159}
}

func (x *CjsSecureSearchCriteriaField) GetCjsSecureSearchCriteriaFieldId() string {
	if x != nil {
		return x.CjsSecureSearchCriteriaFieldId
	}
	return ""
}

func (x *CjsSecureSearchCriteriaField) GetCjsSecureSearchCriteriaId() string {
	if x != nil {
		return x.CjsSecureSearchCriteriaId
	}
	return ""
}

func (x *CjsSecureSearchCriteriaField) GetFieldType() commons.FieldType {
	if x != nil {
		return x.FieldType
	}
	return commons.FieldType(0)
}

type SplitCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//
	//	*SplitCriteria_Unique
	//	*SplitCriteria_MaxSize
	//	*SplitCriteria_EqualParts
	Action isSplitCriteria_Action `protobuf_oneof:"action"`
}

func (x *SplitCriteria) Reset() {
	*x = SplitCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitCriteria) ProtoMessage() {}

func (x *SplitCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitCriteria.ProtoReflect.Descriptor instead.
func (*SplitCriteria) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{160}
}

func (m *SplitCriteria) GetAction() isSplitCriteria_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *SplitCriteria) GetUnique() *SplitByUnique {
	if x, ok := x.GetAction().(*SplitCriteria_Unique); ok {
		return x.Unique
	}
	return nil
}

func (x *SplitCriteria) GetMaxSize() *SplitByMaxSize {
	if x, ok := x.GetAction().(*SplitCriteria_MaxSize); ok {
		return x.MaxSize
	}
	return nil
}

func (x *SplitCriteria) GetEqualParts() *SplitByEqualParts {
	if x, ok := x.GetAction().(*SplitCriteria_EqualParts); ok {
		return x.EqualParts
	}
	return nil
}

type isSplitCriteria_Action interface {
	isSplitCriteria_Action()
}

type SplitCriteria_Unique struct {
	Unique *SplitByUnique `protobuf:"bytes,1,opt,name=unique,proto3,oneof"`
}

type SplitCriteria_MaxSize struct {
	MaxSize *SplitByMaxSize `protobuf:"bytes,2,opt,name=max_size,json=maxSize,proto3,oneof"`
}

type SplitCriteria_EqualParts struct {
	EqualParts *SplitByEqualParts `protobuf:"bytes,3,opt,name=equal_parts,json=equalParts,proto3,oneof"`
}

func (*SplitCriteria_Unique) isSplitCriteria_Action() {}

func (*SplitCriteria_MaxSize) isSplitCriteria_Action() {}

func (*SplitCriteria_EqualParts) isSplitCriteria_Action() {}

type UniquePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SplitOnFields *FieldIndex `protobuf:"bytes,1,opt,name=split_on_fields,json=splitOnFields,proto3" json:"split_on_fields,omitempty"`
	SplitValue    string      `protobuf:"bytes,2,opt,name=split_value,json=splitValue,proto3" json:"split_value,omitempty"`
}

func (x *UniquePair) Reset() {
	*x = UniquePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniquePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniquePair) ProtoMessage() {}

func (x *UniquePair) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniquePair.ProtoReflect.Descriptor instead.
func (*UniquePair) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{161}
}

func (x *UniquePair) GetSplitOnFields() *FieldIndex {
	if x != nil {
		return x.SplitOnFields
	}
	return nil
}

func (x *UniquePair) GetSplitValue() string {
	if x != nil {
		return x.SplitValue
	}
	return ""
}

type SplitByNamedUnique struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamedFields []*UniquePair `protobuf:"bytes,1,rep,name=named_fields,json=namedFields,proto3" json:"named_fields,omitempty"`
}

func (x *SplitByNamedUnique) Reset() {
	*x = SplitByNamedUnique{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitByNamedUnique) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitByNamedUnique) ProtoMessage() {}

func (x *SplitByNamedUnique) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitByNamedUnique.ProtoReflect.Descriptor instead.
func (*SplitByNamedUnique) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{162}
}

func (x *SplitByNamedUnique) GetNamedFields() []*UniquePair {
	if x != nil {
		return x.NamedFields
	}
	return nil
}

type SplitByUnique struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SplitOnFields []*FieldIndex `protobuf:"bytes,1,rep,name=split_on_fields,json=splitOnFields,proto3" json:"split_on_fields,omitempty"`
}

func (x *SplitByUnique) Reset() {
	*x = SplitByUnique{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitByUnique) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitByUnique) ProtoMessage() {}

func (x *SplitByUnique) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitByUnique.ProtoReflect.Descriptor instead.
func (*SplitByUnique) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{163}
}

func (x *SplitByUnique) GetSplitOnFields() []*FieldIndex {
	if x != nil {
		return x.SplitOnFields
	}
	return nil
}

type SplitByMaxSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxSize int32 `protobuf:"varint,1,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
}

func (x *SplitByMaxSize) Reset() {
	*x = SplitByMaxSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitByMaxSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitByMaxSize) ProtoMessage() {}

func (x *SplitByMaxSize) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitByMaxSize.ProtoReflect.Descriptor instead.
func (*SplitByMaxSize) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{164}
}

func (x *SplitByMaxSize) GetMaxSize() int32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

type SplitByEqualParts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartSize int32 `protobuf:"varint,1,opt,name=part_size,json=partSize,proto3" json:"part_size,omitempty"`
}

func (x *SplitByEqualParts) Reset() {
	*x = SplitByEqualParts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitByEqualParts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitByEqualParts) ProtoMessage() {}

func (x *SplitByEqualParts) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitByEqualParts.ProtoReflect.Descriptor instead.
func (*SplitByEqualParts) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{165}
}

func (x *SplitByEqualParts) GetPartSize() int32 {
	if x != nil {
		return x.PartSize
	}
	return 0
}

// EHR EPIC
type EpicEntrypoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// how often this event needs to run.
	// this cron string will be restricted differently depending
	// on the specific operation being run. For example, Epic
	// only allows calls once per 24 hours.
	Cron string `protobuf:"bytes,2,opt,name=cron,proto3" json:"cron,omitempty"`
	// how long in minutes we will wait with the entrypoint
	// in the CHECK state. 0 is interpreted as wait indefinitely.
	MaxWaitTime float64 `protobuf:"fixed64,3,opt,name=max_wait_time,json=maxWaitTime,proto3" json:"max_wait_time,omitempty"`
	// the types of entities we want retrieved
	EntityTypes []EpicEntityType `protobuf:"varint,4,rep,packed,name=entity_types,json=entityTypes,proto3,enum=api.v0alpha.EpicEntityType" json:"entity_types,omitempty"`
	// the base url that points to the group of entites we are querying.
	// Each group can be contacted once every 24 hours max.
	// Example: https://apporchard.epic.com/interconnect-aocurprd-oauth/api/FHIR/R4
	GroupBaseUrl string `protobuf:"bytes,5,opt,name=group_base_url,json=groupBaseUrl,proto3" json:"group_base_url,omitempty"`
	// the id for the group we are matching.
	// Example: eIscQb2HmqkT.aPxBKDR1mIj3721CpVk1suC7rlu3yX83
	GroupFhirId string `protobuf:"bytes,6,opt,name=group_fhir_id,json=groupFhirId,proto3" json:"group_fhir_id,omitempty"`
	// values during event processing.
	// Not visible to user.
	RuntimeValues *RuntimeValues `protobuf:"bytes,7,opt,name=runtime_values,json=runtimeValues,proto3" json:"runtime_values,omitempty"`
	// how many pages we should save before aggregating the data and sending downstream
	// default is 100. Max is 10000.
	// If a termination state hasn't been reached, the event will be re-queued and continue
	// where it left off.
	FlushPageCount int64 `protobuf:"varint,8,opt,name=flush_page_count,json=flushPageCount,proto3" json:"flush_page_count,omitempty"`
	// how much total elapsed time (in minutes) we want to wait before flushing records.
	// if total time spent aggregating the data goes over this many minutes, we will flush
	// the current records downstream.
	// default is 20. Max is 120. Min is 1.
	// If a termination state hasn't been reached, the event will be re-queued and continue
	// where it left off.
	FlushMinuteCount int64 `protobuf:"varint,9,opt,name=flush_minute_count,json=flushMinuteCount,proto3" json:"flush_minute_count,omitempty"`
	// if true, we will switch to processing mode when we have enough records to flush
	// even if we haven't downloaded all the pages yet.
	// after the current records are flushed, we switch back to downloading the remaining records.
	// If false (default), we download all the pages before we start processing any records.
	FlushDuringCheck bool `protobuf:"varint,10,opt,name=flush_during_check,json=flushDuringCheck,proto3" json:"flush_during_check,omitempty"`
	// Specifies the timezone to be used by the cron
	Timezone string `protobuf:"bytes,11,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// If process is enabled
	Enabled bool `protobuf:"varint,12,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The fields the user wants retrieved from the raw json response
	Fields []*Field `protobuf:"bytes,13,rep,name=fields,proto3" json:"fields,omitempty"`
	// If we should return one column as raw json and not any specified fields for file template
	RawJson bool `protobuf:"varint,14,opt,name=raw_json,json=rawJson,proto3" json:"raw_json,omitempty"`
	// non prod specifies which key, and which client id we are going to use.
	NonProd bool `protobuf:"varint,15,opt,name=non_prod,json=nonProd,proto3" json:"non_prod,omitempty"`
	// auth server urls can be different from the group base url
	AuthServer string `protobuf:"bytes,16,opt,name=auth_server,json=authServer,proto3" json:"auth_server,omitempty"`
}

func (x *EpicEntrypoint) Reset() {
	*x = EpicEntrypoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpicEntrypoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpicEntrypoint) ProtoMessage() {}

func (x *EpicEntrypoint) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpicEntrypoint.ProtoReflect.Descriptor instead.
func (*EpicEntrypoint) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{166}
}

func (x *EpicEntrypoint) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

func (x *EpicEntrypoint) GetMaxWaitTime() float64 {
	if x != nil {
		return x.MaxWaitTime
	}
	return 0
}

func (x *EpicEntrypoint) GetEntityTypes() []EpicEntityType {
	if x != nil {
		return x.EntityTypes
	}
	return nil
}

func (x *EpicEntrypoint) GetGroupBaseUrl() string {
	if x != nil {
		return x.GroupBaseUrl
	}
	return ""
}

func (x *EpicEntrypoint) GetGroupFhirId() string {
	if x != nil {
		return x.GroupFhirId
	}
	return ""
}

func (x *EpicEntrypoint) GetRuntimeValues() *RuntimeValues {
	if x != nil {
		return x.RuntimeValues
	}
	return nil
}

func (x *EpicEntrypoint) GetFlushPageCount() int64 {
	if x != nil {
		return x.FlushPageCount
	}
	return 0
}

func (x *EpicEntrypoint) GetFlushMinuteCount() int64 {
	if x != nil {
		return x.FlushMinuteCount
	}
	return 0
}

func (x *EpicEntrypoint) GetFlushDuringCheck() bool {
	if x != nil {
		return x.FlushDuringCheck
	}
	return false
}

func (x *EpicEntrypoint) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *EpicEntrypoint) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *EpicEntrypoint) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *EpicEntrypoint) GetRawJson() bool {
	if x != nil {
		return x.RawJson
	}
	return false
}

func (x *EpicEntrypoint) GetNonProd() bool {
	if x != nil {
		return x.NonProd
	}
	return false
}

func (x *EpicEntrypoint) GetAuthServer() string {
	if x != nil {
		return x.AuthServer
	}
	return ""
}

// These values are invisible to the user, and null in the lms_elements table.
// These will be used during the processing of the event.
type RuntimeValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// current state of the entrypoint
	// this is set to kickoff when the entrypoint is queued up
	State commons.EventState `protobuf:"varint,1,opt,name=state,proto3,enum=api.commons.EventState" json:"state,omitempty"`
	// the token we are using for this session.
	// This value is retrieved by sending a jwt to epic's auth endpoint.
	AccessToken string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	// the url returned from the kickoff's 'Content-Location' response header
	// used during the CHECK state.
	CheckUrl string `protobuf:"bytes,3,opt,name=check_url,json=checkUrl,proto3" json:"check_url,omitempty"`
	// the the location for all the data we are importing.
	// Epic returns newline delimited json for each url endpoint
	DataUrls []*EntityURL `protobuf:"bytes,4,rep,name=data_urls,json=dataUrls,proto3" json:"data_urls,omitempty"`
	// how many times we have ran the paginated request
	CurrentIteration  int64 `protobuf:"varint,5,opt,name=current_iteration,json=currentIteration,proto3" json:"current_iteration,omitempty"`
	TotalSecondsSpent int64 `protobuf:"varint,6,opt,name=total_seconds_spent,json=totalSecondsSpent,proto3" json:"total_seconds_spent,omitempty"`
	// any errors that happened during processing
	Errors []string `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	// how many times the bulk entrypoint has been not ready total
	TotalNotReadyCount int64 `protobuf:"varint,8,opt,name=total_not_ready_count,json=totalNotReadyCount,proto3" json:"total_not_ready_count,omitempty"`
	// as of writing, the unflushed input is stored in fts.
	// the keys will be the fts_id the page, and the values the size of the request in bytes
	FileIds map[string]int64 `protobuf:"bytes,9,rep,name=file_ids,json=fileIds,proto3" json:"file_ids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// the named variables saved from the preliminary requests
	// these can be used in the paginated_request
	PreliminaryVars map[string]string `protobuf:"bytes,10,rep,name=preliminary_vars,json=preliminaryVars,proto3" json:"preliminary_vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// the events that happened before this one
	ParentEventIds []int64 `protobuf:"varint,11,rep,packed,name=parent_event_ids,json=parentEventIds,proto3" json:"parent_event_ids,omitempty"`
	// if true we wont need to switch back from process state, to check state.
	// if false, we need to continue in check state after flushing records
	NoMorePages bool `protobuf:"varint,12,opt,name=no_more_pages,json=noMorePages,proto3" json:"no_more_pages,omitempty"`
	// tracks all fts files we have writen regardless of whether they have been processed yet
	TotalFtsIds []string `protobuf:"bytes,13,rep,name=total_fts_ids,json=totalFtsIds,proto3" json:"total_fts_ids,omitempty"`
}

func (x *RuntimeValues) Reset() {
	*x = RuntimeValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeValues) ProtoMessage() {}

func (x *RuntimeValues) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeValues.ProtoReflect.Descriptor instead.
func (*RuntimeValues) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{167}
}

func (x *RuntimeValues) GetState() commons.EventState {
	if x != nil {
		return x.State
	}
	return commons.EventState(0)
}

func (x *RuntimeValues) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *RuntimeValues) GetCheckUrl() string {
	if x != nil {
		return x.CheckUrl
	}
	return ""
}

func (x *RuntimeValues) GetDataUrls() []*EntityURL {
	if x != nil {
		return x.DataUrls
	}
	return nil
}

func (x *RuntimeValues) GetCurrentIteration() int64 {
	if x != nil {
		return x.CurrentIteration
	}
	return 0
}

func (x *RuntimeValues) GetTotalSecondsSpent() int64 {
	if x != nil {
		return x.TotalSecondsSpent
	}
	return 0
}

func (x *RuntimeValues) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *RuntimeValues) GetTotalNotReadyCount() int64 {
	if x != nil {
		return x.TotalNotReadyCount
	}
	return 0
}

func (x *RuntimeValues) GetFileIds() map[string]int64 {
	if x != nil {
		return x.FileIds
	}
	return nil
}

func (x *RuntimeValues) GetPreliminaryVars() map[string]string {
	if x != nil {
		return x.PreliminaryVars
	}
	return nil
}

func (x *RuntimeValues) GetParentEventIds() []int64 {
	if x != nil {
		return x.ParentEventIds
	}
	return nil
}

func (x *RuntimeValues) GetNoMorePages() bool {
	if x != nil {
		return x.NoMorePages
	}
	return false
}

func (x *RuntimeValues) GetTotalFtsIds() []string {
	if x != nil {
		return x.TotalFtsIds
	}
	return nil
}

type EntityURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityType EpicEntityType `protobuf:"varint,1,opt,name=entity_type,json=entityType,proto3,enum=api.v0alpha.EpicEntityType" json:"entity_type,omitempty"`
	Url        string         `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *EntityURL) Reset() {
	*x = EntityURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityURL) ProtoMessage() {}

func (x *EntityURL) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityURL.ProtoReflect.Descriptor instead.
func (*EntityURL) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{168}
}

func (x *EntityURL) GetEntityType() EpicEntityType {
	if x != nil {
		return x.EntityType
	}
	return EpicEntityType_EPIC_UNKNOWN_TYPE
}

func (x *EntityURL) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type SampleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SampleRequest) Reset() {
	*x = SampleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleRequest) ProtoMessage() {}

func (x *SampleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleRequest.ProtoReflect.Descriptor instead.
func (*SampleRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{169}
}

type EHREntityType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpicEntity EpicEntityType `protobuf:"varint,1,opt,name=epic_entity,json=epicEntity,proto3,enum=api.v0alpha.EpicEntityType" json:"epic_entity,omitempty"`
}

func (x *EHREntityType) Reset() {
	*x = EHREntityType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EHREntityType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EHREntityType) ProtoMessage() {}

func (x *EHREntityType) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EHREntityType.ProtoReflect.Descriptor instead.
func (*EHREntityType) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{170}
}

func (x *EHREntityType) GetEpicEntity() EpicEntityType {
	if x != nil {
		return x.EpicEntity
	}
	return EpicEntityType_EPIC_UNKNOWN_TYPE
}

type ElementError_InvalidExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression string `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *ElementError_InvalidExpression) Reset() {
	*x = ElementError_InvalidExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementError_InvalidExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementError_InvalidExpression) ProtoMessage() {}

func (x *ElementError_InvalidExpression) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementError_InvalidExpression.ProtoReflect.Descriptor instead.
func (*ElementError_InvalidExpression) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ElementError_InvalidExpression) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

type ElementError_MissingField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName string `protobuf:"bytes,2,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
}

func (x *ElementError_MissingField) Reset() {
	*x = ElementError_MissingField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementError_MissingField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementError_MissingField) ProtoMessage() {}

func (x *ElementError_MissingField) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementError_MissingField.ProtoReflect.Descriptor instead.
func (*ElementError_MissingField) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{5, 1}
}

func (x *ElementError_MissingField) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

// this element is doing an operation that will always fail.
// Examples:
//   - Enrichment with fields that are not phone or zip type
//   - reshape Add/Subtract functions on non number types
//   - Filter using datetime math with non datetime fields
//
// this will be possible to determine all cases after https://git.tcncloud.net/m/neo/-/issues/6924
type ElementError_BadFieldType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName string `protobuf:"bytes,3,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
}

func (x *ElementError_BadFieldType) Reset() {
	*x = ElementError_BadFieldType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementError_BadFieldType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementError_BadFieldType) ProtoMessage() {}

func (x *ElementError_BadFieldType) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementError_BadFieldType.ProtoReflect.Descriptor instead.
func (*ElementError_BadFieldType) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{5, 2}
}

func (x *ElementError_BadFieldType) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

type ProcessFields_NestedField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FieldType commons.RecordType `protobuf:"varint,2,opt,name=field_type,json=fieldType,proto3,enum=api.commons.RecordType" json:"field_type,omitempty"`
}

func (x *ProcessFields_NestedField) Reset() {
	*x = ProcessFields_NestedField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessFields_NestedField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessFields_NestedField) ProtoMessage() {}

func (x *ProcessFields_NestedField) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessFields_NestedField.ProtoReflect.Descriptor instead.
func (*ProcessFields_NestedField) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{31, 0}
}

func (x *ProcessFields_NestedField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcessFields_NestedField) GetFieldType() commons.RecordType {
	if x != nil {
		return x.FieldType
	}
	return commons.RecordType(0)
}

type ProcessFields_Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string             `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	FieldType commons.RecordType `protobuf:"varint,4,opt,name=field_type,json=fieldType,proto3,enum=api.commons.RecordType" json:"field_type,omitempty"`
	// any nested fields, could be empty
	Nested []*ProcessFields_NestedField `protobuf:"bytes,5,rep,name=nested,proto3" json:"nested,omitempty"`
	Format string                       `protobuf:"bytes,9,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *ProcessFields_Field) Reset() {
	*x = ProcessFields_Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessFields_Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessFields_Field) ProtoMessage() {}

func (x *ProcessFields_Field) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessFields_Field.ProtoReflect.Descriptor instead.
func (*ProcessFields_Field) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{31, 1}
}

func (x *ProcessFields_Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcessFields_Field) GetFieldType() commons.RecordType {
	if x != nil {
		return x.FieldType
	}
	return commons.RecordType(0)
}

func (x *ProcessFields_Field) GetNested() []*ProcessFields_NestedField {
	if x != nil {
		return x.Nested
	}
	return nil
}

func (x *ProcessFields_Field) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type LookupProcess_ComplProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryCode string `protobuf:"bytes,11,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
}

func (x *LookupProcess_ComplProcess) Reset() {
	*x = LookupProcess_ComplProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupProcess_ComplProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupProcess_ComplProcess) ProtoMessage() {}

func (x *LookupProcess_ComplProcess) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupProcess_ComplProcess.ProtoReflect.Descriptor instead.
func (*LookupProcess_ComplProcess) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{73, 0}
}

func (x *LookupProcess_ComplProcess) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

type LookupProcess_ListLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId     string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	RegionId  string `protobuf:"bytes,2,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	ElementId string `protobuf:"bytes,3,opt,name=element_id,json=elementId,proto3" json:"element_id,omitempty"`
	// latest list will be used by default
	Version int64 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *LookupProcess_ListLookup) Reset() {
	*x = LookupProcess_ListLookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupProcess_ListLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupProcess_ListLookup) ProtoMessage() {}

func (x *LookupProcess_ListLookup) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupProcess_ListLookup.ProtoReflect.Descriptor instead.
func (*LookupProcess_ListLookup) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{73, 1}
}

func (x *LookupProcess_ListLookup) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *LookupProcess_ListLookup) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *LookupProcess_ListLookup) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (x *LookupProcess_ListLookup) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type LookupProcess_UrlLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	// the template file used to convert records to proto
	// if left blank it assumes already converted format
	FileTemplate *FileTemplate `protobuf:"bytes,10,opt,name=file_template,json=fileTemplate,proto3" json:"file_template,omitempty"`
}

func (x *LookupProcess_UrlLookup) Reset() {
	*x = LookupProcess_UrlLookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupProcess_UrlLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupProcess_UrlLookup) ProtoMessage() {}

func (x *LookupProcess_UrlLookup) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupProcess_UrlLookup.ProtoReflect.Descriptor instead.
func (*LookupProcess_UrlLookup) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{73, 2}
}

func (x *LookupProcess_UrlLookup) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *LookupProcess_UrlLookup) GetFileTemplate() *FileTemplate {
	if x != nil {
		return x.FileTemplate
	}
	return nil
}

// a value to compare against.
type FilterCheck_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//
	//	*FilterCheck_Value_StringVal
	//	*FilterCheck_Value_NumberVal
	//	*FilterCheck_Value_BoolVal
	//	*FilterCheck_Value_FieldName
	//	*FilterCheck_Value_DateTime
	Val isFilterCheck_Value_Val `protobuf_oneof:"val"`
}

func (x *FilterCheck_Value) Reset() {
	*x = FilterCheck_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterCheck_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterCheck_Value) ProtoMessage() {}

func (x *FilterCheck_Value) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterCheck_Value.ProtoReflect.Descriptor instead.
func (*FilterCheck_Value) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{80, 0}
}

func (m *FilterCheck_Value) GetVal() isFilterCheck_Value_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *FilterCheck_Value) GetStringVal() string {
	if x, ok := x.GetVal().(*FilterCheck_Value_StringVal); ok {
		return x.StringVal
	}
	return ""
}

func (x *FilterCheck_Value) GetNumberVal() float64 {
	if x, ok := x.GetVal().(*FilterCheck_Value_NumberVal); ok {
		return x.NumberVal
	}
	return 0
}

func (x *FilterCheck_Value) GetBoolVal() bool {
	if x, ok := x.GetVal().(*FilterCheck_Value_BoolVal); ok {
		return x.BoolVal
	}
	return false
}

func (x *FilterCheck_Value) GetFieldName() *FieldIndex {
	if x, ok := x.GetVal().(*FilterCheck_Value_FieldName); ok {
		return x.FieldName
	}
	return nil
}

func (x *FilterCheck_Value) GetDateTime() *DateTime {
	if x, ok := x.GetVal().(*FilterCheck_Value_DateTime); ok {
		return x.DateTime
	}
	return nil
}

type isFilterCheck_Value_Val interface {
	isFilterCheck_Value_Val()
}

type FilterCheck_Value_StringVal struct {
	// compare against the provided static string
	StringVal string `protobuf:"bytes,1,opt,name=string_val,json=stringVal,proto3,oneof"`
}

type FilterCheck_Value_NumberVal struct {
	// compare against the provided static double
	NumberVal float64 `protobuf:"fixed64,2,opt,name=number_val,json=numberVal,proto3,oneof"`
}

type FilterCheck_Value_BoolVal struct {
	BoolVal bool `protobuf:"varint,3,opt,name=bool_val,json=boolVal,proto3,oneof"`
}

type FilterCheck_Value_FieldName struct {
	// compare against the value looked up from the record by field_name
	FieldName *FieldIndex `protobuf:"bytes,5,opt,name=field_name,json=fieldName,proto3,oneof"`
}

type FilterCheck_Value_DateTime struct {
	// compare against the datetime value
	DateTime *DateTime `protobuf:"bytes,14,opt,name=date_time,json=dateTime,proto3,oneof"`
}

func (*FilterCheck_Value_StringVal) isFilterCheck_Value_Val() {}

func (*FilterCheck_Value_NumberVal) isFilterCheck_Value_Val() {}

func (*FilterCheck_Value_BoolVal) isFilterCheck_Value_Val() {}

func (*FilterCheck_Value_FieldName) isFilterCheck_Value_Val() {}

func (*FilterCheck_Value_DateTime) isFilterCheck_Value_Val() {}

// A bool comparison of a field vs some other value
type FilterCheck_ValueComparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the field to lookup in record. This field's value will be used
	FieldName *FieldIndex `protobuf:"bytes,6,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	// operation we are performing
	Op commons.CompareOperator `protobuf:"varint,7,opt,name=op,proto3,enum=api.commons.CompareOperator" json:"op,omitempty"`
	// other value to compare against
	Value *FilterCheck_Value `protobuf:"bytes,8,opt,name=value,proto3" json:"value,omitempty"`
	// if "negate" is true, we negate the result of this comparison
	Negate bool `protobuf:"varint,9,opt,name=negate,proto3" json:"negate,omitempty"`
	// if "exists" is true, we check for field existence
	Exists bool `protobuf:"varint,10,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *FilterCheck_ValueComparison) Reset() {
	*x = FilterCheck_ValueComparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterCheck_ValueComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterCheck_ValueComparison) ProtoMessage() {}

func (x *FilterCheck_ValueComparison) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterCheck_ValueComparison.ProtoReflect.Descriptor instead.
func (*FilterCheck_ValueComparison) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{80, 1}
}

func (x *FilterCheck_ValueComparison) GetFieldName() *FieldIndex {
	if x != nil {
		return x.FieldName
	}
	return nil
}

func (x *FilterCheck_ValueComparison) GetOp() commons.CompareOperator {
	if x != nil {
		return x.Op
	}
	return commons.CompareOperator(0)
}

func (x *FilterCheck_ValueComparison) GetValue() *FilterCheck_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *FilterCheck_ValueComparison) GetNegate() bool {
	if x != nil {
		return x.Negate
	}
	return false
}

func (x *FilterCheck_ValueComparison) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

// bool comparison saying the field matches a specific type or not
type FilterCheck_TypeComparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the field to lookup in record. This field's type will be used
	FieldName *FieldIndex `protobuf:"bytes,9,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	// the type we must match to report true
	MatchesFieldType commons.RecordType `protobuf:"varint,10,opt,name=matches_field_type,json=matchesFieldType,proto3,enum=api.commons.RecordType" json:"matches_field_type,omitempty"`
	// if "negate" is true, we negate the result of this comparison
	Negate bool `protobuf:"varint,11,opt,name=negate,proto3" json:"negate,omitempty"`
}

func (x *FilterCheck_TypeComparison) Reset() {
	*x = FilterCheck_TypeComparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterCheck_TypeComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterCheck_TypeComparison) ProtoMessage() {}

func (x *FilterCheck_TypeComparison) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterCheck_TypeComparison.ProtoReflect.Descriptor instead.
func (*FilterCheck_TypeComparison) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{80, 2}
}

func (x *FilterCheck_TypeComparison) GetFieldName() *FieldIndex {
	if x != nil {
		return x.FieldName
	}
	return nil
}

func (x *FilterCheck_TypeComparison) GetMatchesFieldType() commons.RecordType {
	if x != nil {
		return x.MatchesFieldType
	}
	return commons.RecordType(0)
}

func (x *FilterCheck_TypeComparison) GetNegate() bool {
	if x != nil {
		return x.Negate
	}
	return false
}

// list comparison of a list of fields vs list of values
type FilterCheck_ListComparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the field to lookup in record. This field's value will be used
	FieldName *FieldIndex                              `protobuf:"bytes,5,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	Data      []*FilterCheck_ListComparison_FieldOrVal `protobuf:"bytes,8,rep,name=data,proto3" json:"data,omitempty"`
	// if "negate" is true, we negate the result of this comparison
	Negate bool `protobuf:"varint,9,opt,name=negate,proto3" json:"negate,omitempty"`
}

func (x *FilterCheck_ListComparison) Reset() {
	*x = FilterCheck_ListComparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterCheck_ListComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterCheck_ListComparison) ProtoMessage() {}

func (x *FilterCheck_ListComparison) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterCheck_ListComparison.ProtoReflect.Descriptor instead.
func (*FilterCheck_ListComparison) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{80, 3}
}

func (x *FilterCheck_ListComparison) GetFieldName() *FieldIndex {
	if x != nil {
		return x.FieldName
	}
	return nil
}

func (x *FilterCheck_ListComparison) GetData() []*FilterCheck_ListComparison_FieldOrVal {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FilterCheck_ListComparison) GetNegate() bool {
	if x != nil {
		return x.Negate
	}
	return false
}

type FilterCheck_ListComparison_FieldOrVal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//
	//	*FilterCheck_ListComparison_FieldOrVal_Field
	//	*FilterCheck_ListComparison_FieldOrVal_Value
	Val isFilterCheck_ListComparison_FieldOrVal_Val `protobuf_oneof:"val"`
}

func (x *FilterCheck_ListComparison_FieldOrVal) Reset() {
	*x = FilterCheck_ListComparison_FieldOrVal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterCheck_ListComparison_FieldOrVal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterCheck_ListComparison_FieldOrVal) ProtoMessage() {}

func (x *FilterCheck_ListComparison_FieldOrVal) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterCheck_ListComparison_FieldOrVal.ProtoReflect.Descriptor instead.
func (*FilterCheck_ListComparison_FieldOrVal) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{80, 3, 0}
}

func (m *FilterCheck_ListComparison_FieldOrVal) GetVal() isFilterCheck_ListComparison_FieldOrVal_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *FilterCheck_ListComparison_FieldOrVal) GetField() *FieldIndex {
	if x, ok := x.GetVal().(*FilterCheck_ListComparison_FieldOrVal_Field); ok {
		return x.Field
	}
	return nil
}

func (x *FilterCheck_ListComparison_FieldOrVal) GetValue() *FilterCheck_Value {
	if x, ok := x.GetVal().(*FilterCheck_ListComparison_FieldOrVal_Value); ok {
		return x.Value
	}
	return nil
}

type isFilterCheck_ListComparison_FieldOrVal_Val interface {
	isFilterCheck_ListComparison_FieldOrVal_Val()
}

type FilterCheck_ListComparison_FieldOrVal_Field struct {
	Field *FieldIndex `protobuf:"bytes,6,opt,name=field,proto3,oneof"`
}

type FilterCheck_ListComparison_FieldOrVal_Value struct {
	Value *FilterCheck_Value `protobuf:"bytes,7,opt,name=value,proto3,oneof"`
}

func (*FilterCheck_ListComparison_FieldOrVal_Field) isFilterCheck_ListComparison_FieldOrVal_Val() {}

func (*FilterCheck_ListComparison_FieldOrVal_Value) isFilterCheck_ListComparison_FieldOrVal_Val() {}

// rename this field's name to new_name, keep the value the same
type ReshapeAction_Rename struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewName string `protobuf:"bytes,10,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
}

func (x *ReshapeAction_Rename) Reset() {
	*x = ReshapeAction_Rename{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReshapeAction_Rename) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshapeAction_Rename) ProtoMessage() {}

func (x *ReshapeAction_Rename) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshapeAction_Rename.ProtoReflect.Descriptor instead.
func (*ReshapeAction_Rename) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{115, 0}
}

func (x *ReshapeAction_Rename) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

// add a static value to field's current value.
type ReshapeAction_AddValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// if the field type is time-like, this is number of seconds
	Value float64 `protobuf:"fixed64,11,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ReshapeAction_AddValue) Reset() {
	*x = ReshapeAction_AddValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReshapeAction_AddValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshapeAction_AddValue) ProtoMessage() {}

func (x *ReshapeAction_AddValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshapeAction_AddValue.ProtoReflect.Descriptor instead.
func (*ReshapeAction_AddValue) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{115, 1}
}

func (x *ReshapeAction_AddValue) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// add or subtract a datetime modifier to the field
type ReshapeAction_AddDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datetime *DateTimeModifier `protobuf:"bytes,45,opt,name=datetime,proto3" json:"datetime,omitempty"`
}

func (x *ReshapeAction_AddDate) Reset() {
	*x = ReshapeAction_AddDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReshapeAction_AddDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshapeAction_AddDate) ProtoMessage() {}

func (x *ReshapeAction_AddDate) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshapeAction_AddDate.ProtoReflect.Descriptor instead.
func (*ReshapeAction_AddDate) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{115, 2}
}

func (x *ReshapeAction_AddDate) GetDatetime() *DateTimeModifier {
	if x != nil {
		return x.Datetime
	}
	return nil
}

// add two fields values together. If field is time-like, other_field must be
// either number or timestamp
type ReshapeAction_AddField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtherField *FieldIndex `protobuf:"bytes,12,opt,name=other_field,json=otherField,proto3" json:"other_field,omitempty"`
}

func (x *ReshapeAction_AddField) Reset() {
	*x = ReshapeAction_AddField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReshapeAction_AddField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshapeAction_AddField) ProtoMessage() {}

func (x *ReshapeAction_AddField) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshapeAction_AddField.ProtoReflect.Descriptor instead.
func (*ReshapeAction_AddField) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{115, 3}
}

func (x *ReshapeAction_AddField) GetOtherField() *FieldIndex {
	if x != nil {
		return x.OtherField
	}
	return nil
}

// subtract a static value to field's current value
type ReshapeAction_SubtractValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// if the field type is time-like, this is number of seconds
	Value float64 `protobuf:"fixed64,11,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ReshapeAction_SubtractValue) Reset() {
	*x = ReshapeAction_SubtractValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReshapeAction_SubtractValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshapeAction_SubtractValue) ProtoMessage() {}

func (x *ReshapeAction_SubtractValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshapeAction_SubtractValue.ProtoReflect.Descriptor instead.
func (*ReshapeAction_SubtractValue) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{115, 4}
}

func (x *ReshapeAction_SubtractValue) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// subtract two fields values. If field is time-like, other_field must be
// either number or timestamp
type ReshapeAction_SubtractField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtherField *FieldIndex `protobuf:"bytes,12,opt,name=other_field,json=otherField,proto3" json:"other_field,omitempty"`
}

func (x *ReshapeAction_SubtractField) Reset() {
	*x = ReshapeAction_SubtractField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReshapeAction_SubtractField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshapeAction_SubtractField) ProtoMessage() {}

func (x *ReshapeAction_SubtractField) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshapeAction_SubtractField.ProtoReflect.Descriptor instead.
func (*ReshapeAction_SubtractField) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{115, 5}
}

func (x *ReshapeAction_SubtractField) GetOtherField() *FieldIndex {
	if x != nil {
		return x.OtherField
	}
	return nil
}

// convert a field to another type, if conversion fails, it will be an error
// type
type ReshapeAction_Convert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
	NewType      commons.RecordType `protobuf:"varint,17,opt,name=newType,proto3,enum=api.commons.RecordType" json:"newType,omitempty"`
	NewField     *Field             `protobuf:"bytes,18,opt,name=new_field,json=newField,proto3" json:"new_field,omitempty"`
	DefaultValue *RecordFieldProto  `protobuf:"bytes,19,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
}

func (x *ReshapeAction_Convert) Reset() {
	*x = ReshapeAction_Convert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReshapeAction_Convert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshapeAction_Convert) ProtoMessage() {}

func (x *ReshapeAction_Convert) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshapeAction_Convert.ProtoReflect.Descriptor instead.
func (*ReshapeAction_Convert) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{115, 6}
}

// Deprecated: Marked as deprecated in api/v0alpha/lms.proto.
func (x *ReshapeAction_Convert) GetNewType() commons.RecordType {
	if x != nil {
		return x.NewType
	}
	return commons.RecordType(0)
}

func (x *ReshapeAction_Convert) GetNewField() *Field {
	if x != nil {
		return x.NewField
	}
	return nil
}

func (x *ReshapeAction_Convert) GetDefaultValue() *RecordFieldProto {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

// Represents a message for division operation.
type ReshapeAction_Divide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The default value to be used if no other value is provided.
	DefaultValue float64 `protobuf:"fixed64,1,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// The divisor to be used for the division operation.
	Divisor float64 `protobuf:"fixed64,2,opt,name=divisor,proto3" json:"divisor,omitempty"`
}

func (x *ReshapeAction_Divide) Reset() {
	*x = ReshapeAction_Divide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReshapeAction_Divide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshapeAction_Divide) ProtoMessage() {}

func (x *ReshapeAction_Divide) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshapeAction_Divide.ProtoReflect.Descriptor instead.
func (*ReshapeAction_Divide) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{115, 7}
}

func (x *ReshapeAction_Divide) GetDefaultValue() float64 {
	if x != nil {
		return x.DefaultValue
	}
	return 0
}

func (x *ReshapeAction_Divide) GetDivisor() float64 {
	if x != nil {
		return x.Divisor
	}
	return 0
}

// Represents a message for multiplication operation.
type ReshapeAction_Multiply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The default value to be used if no other value is provided.
	DefaultValue float64 `protobuf:"fixed64,1,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// The multiplier to be used for the multiplication operation.
	Multiplier float64 `protobuf:"fixed64,2,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
}

func (x *ReshapeAction_Multiply) Reset() {
	*x = ReshapeAction_Multiply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReshapeAction_Multiply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshapeAction_Multiply) ProtoMessage() {}

func (x *ReshapeAction_Multiply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshapeAction_Multiply.ProtoReflect.Descriptor instead.
func (*ReshapeAction_Multiply) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{115, 8}
}

func (x *ReshapeAction_Multiply) GetDefaultValue() float64 {
	if x != nil {
		return x.DefaultValue
	}
	return 0
}

func (x *ReshapeAction_Multiply) GetMultiplier() float64 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

// Represents a message for modulo operation.
type ReshapeAction_Modulo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The default value to be used if no other value is provided.
	DefaultValue int32 `protobuf:"varint,1,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// The modulus to be used for the modulo operation.
	Modulus int32 `protobuf:"varint,2,opt,name=modulus,proto3" json:"modulus,omitempty"`
}

func (x *ReshapeAction_Modulo) Reset() {
	*x = ReshapeAction_Modulo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReshapeAction_Modulo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshapeAction_Modulo) ProtoMessage() {}

func (x *ReshapeAction_Modulo) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshapeAction_Modulo.ProtoReflect.Descriptor instead.
func (*ReshapeAction_Modulo) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{115, 9}
}

func (x *ReshapeAction_Modulo) GetDefaultValue() int32 {
	if x != nil {
		return x.DefaultValue
	}
	return 0
}

func (x *ReshapeAction_Modulo) GetModulus() int32 {
	if x != nil {
		return x.Modulus
	}
	return 0
}

// will remove "field" from the record
type ReshapeAction_RemoveField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReshapeAction_RemoveField) Reset() {
	*x = ReshapeAction_RemoveField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReshapeAction_RemoveField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshapeAction_RemoveField) ProtoMessage() {}

func (x *ReshapeAction_RemoveField) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshapeAction_RemoveField.ProtoReflect.Descriptor instead.
func (*ReshapeAction_RemoveField) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{115, 10}
}

// will add "field" to the record with default starting value
// TODO: make a RecordFieldProtoValue, it is a noeof
type ReshapeAction_AddNewField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartingValue *RecordFieldProto `protobuf:"bytes,18,opt,name=starting_value,json=startingValue,proto3" json:"starting_value,omitempty"`
}

func (x *ReshapeAction_AddNewField) Reset() {
	*x = ReshapeAction_AddNewField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReshapeAction_AddNewField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshapeAction_AddNewField) ProtoMessage() {}

func (x *ReshapeAction_AddNewField) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshapeAction_AddNewField.ProtoReflect.Descriptor instead.
func (*ReshapeAction_AddNewField) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{115, 11}
}

func (x *ReshapeAction_AddNewField) GetStartingValue() *RecordFieldProto {
	if x != nil {
		return x.StartingValue
	}
	return nil
}

// will add "field" to the record with default starting value from other field
type ReshapeAction_AddNewFieldFromField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string      `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	OtherField *FieldIndex `protobuf:"bytes,12,opt,name=other_field,json=otherField,proto3" json:"other_field,omitempty"`
}

func (x *ReshapeAction_AddNewFieldFromField) Reset() {
	*x = ReshapeAction_AddNewFieldFromField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReshapeAction_AddNewFieldFromField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshapeAction_AddNewFieldFromField) ProtoMessage() {}

func (x *ReshapeAction_AddNewFieldFromField) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshapeAction_AddNewFieldFromField.ProtoReflect.Descriptor instead.
func (*ReshapeAction_AddNewFieldFromField) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{115, 12}
}

func (x *ReshapeAction_AddNewFieldFromField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReshapeAction_AddNewFieldFromField) GetOtherField() *FieldIndex {
	if x != nil {
		return x.OtherField
	}
	return nil
}

// change the currency value to one represented
type ReshapeAction_ChangeCurrencyType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReshapeAction_ChangeCurrencyType) Reset() {
	*x = ReshapeAction_ChangeCurrencyType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReshapeAction_ChangeCurrencyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshapeAction_ChangeCurrencyType) ProtoMessage() {}

func (x *ReshapeAction_ChangeCurrencyType) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshapeAction_ChangeCurrencyType.ProtoReflect.Descriptor instead.
func (*ReshapeAction_ChangeCurrencyType) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{115, 13}
}

// will set field with the value
type ReshapeAction_SetFieldValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *RecordFieldProto `protobuf:"bytes,18,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ReshapeAction_SetFieldValue) Reset() {
	*x = ReshapeAction_SetFieldValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReshapeAction_SetFieldValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshapeAction_SetFieldValue) ProtoMessage() {}

func (x *ReshapeAction_SetFieldValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshapeAction_SetFieldValue.ProtoReflect.Descriptor instead.
func (*ReshapeAction_SetFieldValue) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{115, 14}
}

func (x *ReshapeAction_SetFieldValue) GetValue() *RecordFieldProto {
	if x != nil {
		return x.Value
	}
	return nil
}

// will set "field" from other field
type ReshapeAction_SetFieldFromField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string      `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	OtherField *FieldIndex `protobuf:"bytes,12,opt,name=other_field,json=otherField,proto3" json:"other_field,omitempty"`
}

func (x *ReshapeAction_SetFieldFromField) Reset() {
	*x = ReshapeAction_SetFieldFromField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReshapeAction_SetFieldFromField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshapeAction_SetFieldFromField) ProtoMessage() {}

func (x *ReshapeAction_SetFieldFromField) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshapeAction_SetFieldFromField.ProtoReflect.Descriptor instead.
func (*ReshapeAction_SetFieldFromField) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{115, 15}
}

func (x *ReshapeAction_SetFieldFromField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReshapeAction_SetFieldFromField) GetOtherField() *FieldIndex {
	if x != nil {
		return x.OtherField
	}
	return nil
}

// merges together all the strings fetched from FieldOrVal into the reshape
// action field. overrides any data already in the field.
type ReshapeAction_Merge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*ReshapeAction_Merge_FieldOrVal `protobuf:"bytes,44,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ReshapeAction_Merge) Reset() {
	*x = ReshapeAction_Merge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReshapeAction_Merge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshapeAction_Merge) ProtoMessage() {}

func (x *ReshapeAction_Merge) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshapeAction_Merge.ProtoReflect.Descriptor instead.
func (*ReshapeAction_Merge) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{115, 16}
}

func (x *ReshapeAction_Merge) GetData() []*ReshapeAction_Merge_FieldOrVal {
	if x != nil {
		return x.Data
	}
	return nil
}

// provide padding to the right or left of the string field
type ReshapeAction_Pad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// what character to pad with.  Must be length 1.
	Char string `protobuf:"bytes,10,opt,name=char,proto3" json:"char,omitempty"`
	// what the desired length of the string is.
	// if < 0 we will use the len of the longest string in the column
	Amount int32 `protobuf:"varint,12,opt,name=amount,proto3" json:"amount,omitempty"`
	// prefixorsuffix
	Prefix bool `protobuf:"varint,13,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *ReshapeAction_Pad) Reset() {
	*x = ReshapeAction_Pad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReshapeAction_Pad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshapeAction_Pad) ProtoMessage() {}

func (x *ReshapeAction_Pad) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshapeAction_Pad.ProtoReflect.Descriptor instead.
func (*ReshapeAction_Pad) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{115, 17}
}

func (x *ReshapeAction_Pad) GetChar() string {
	if x != nil {
		return x.Char
	}
	return ""
}

func (x *ReshapeAction_Pad) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ReshapeAction_Pad) GetPrefix() bool {
	if x != nil {
		return x.Prefix
	}
	return false
}

// trims off specific characters from a prefix or suffix.
// Or can trim off a certain amount of characters from the left or right.
type ReshapeAction_Trim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Opt:
	//
	//	*ReshapeAction_Trim_Amount
	//	*ReshapeAction_Trim_Data
	//	*ReshapeAction_Trim_Marker
	Opt isReshapeAction_Trim_Opt `protobuf_oneof:"opt"`
	// if true, the trim operation starts at the end of the string and works backwards
	Suffix bool `protobuf:"varint,10,opt,name=suffix,proto3" json:"suffix,omitempty"`
}

func (x *ReshapeAction_Trim) Reset() {
	*x = ReshapeAction_Trim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReshapeAction_Trim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshapeAction_Trim) ProtoMessage() {}

func (x *ReshapeAction_Trim) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshapeAction_Trim.ProtoReflect.Descriptor instead.
func (*ReshapeAction_Trim) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{115, 18}
}

func (m *ReshapeAction_Trim) GetOpt() isReshapeAction_Trim_Opt {
	if m != nil {
		return m.Opt
	}
	return nil
}

func (x *ReshapeAction_Trim) GetAmount() int32 {
	if x, ok := x.GetOpt().(*ReshapeAction_Trim_Amount); ok {
		return x.Amount
	}
	return 0
}

func (x *ReshapeAction_Trim) GetData() string {
	if x, ok := x.GetOpt().(*ReshapeAction_Trim_Data); ok {
		return x.Data
	}
	return ""
}

func (x *ReshapeAction_Trim) GetMarker() string {
	if x, ok := x.GetOpt().(*ReshapeAction_Trim_Marker); ok {
		return x.Marker
	}
	return ""
}

func (x *ReshapeAction_Trim) GetSuffix() bool {
	if x != nil {
		return x.Suffix
	}
	return false
}

type isReshapeAction_Trim_Opt interface {
	isReshapeAction_Trim_Opt()
}

type ReshapeAction_Trim_Amount struct {
	// trim this exact amount of chars. If the string is less than amount in length
	// the string is set to the empty string
	// examples:
	// - trim.amount = 3 on 'abcdef' => 'def'
	// - trim.amount = 3 on 'ab' => ”
	Amount int32 `protobuf:"varint,1,opt,name=amount,proto3,oneof"`
}

type ReshapeAction_Trim_Data struct {
	// trim this specific string from the field if it exists, otherwise do nothing
	// examples:
	// - trim.data = 'abc' on 'abcdef' => 'def'
	// - trim.data = 'abc' on 'ab' => 'ab'
	Data string `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

type ReshapeAction_Trim_Marker struct {
	// trim til this specific marker. If marker doesn't exist string is left alone
	// examples:
	// - trim.marker = 'de' on 'abcdef' = 'def'
	Marker string `protobuf:"bytes,3,opt,name=marker,proto3,oneof"`
}

func (*ReshapeAction_Trim_Amount) isReshapeAction_Trim_Opt() {}

func (*ReshapeAction_Trim_Data) isReshapeAction_Trim_Opt() {}

func (*ReshapeAction_Trim_Marker) isReshapeAction_Trim_Opt() {}

// extract takes a string and can take any combination of substrings of the string
type ReshapeAction_Extract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parts represents several substrings using indices
	Parts []*ReshapeAction_Extract_Slice `protobuf:"bytes,39,rep,name=parts,proto3" json:"parts,omitempty"`
}

func (x *ReshapeAction_Extract) Reset() {
	*x = ReshapeAction_Extract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReshapeAction_Extract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshapeAction_Extract) ProtoMessage() {}

func (x *ReshapeAction_Extract) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshapeAction_Extract.ProtoReflect.Descriptor instead.
func (*ReshapeAction_Extract) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{115, 19}
}

func (x *ReshapeAction_Extract) GetParts() []*ReshapeAction_Extract_Slice {
	if x != nil {
		return x.Parts
	}
	return nil
}

type ReshapeAction_Merge_FieldOrVal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//
	//	*ReshapeAction_Merge_FieldOrVal_Field
	//	*ReshapeAction_Merge_FieldOrVal_Value
	Val isReshapeAction_Merge_FieldOrVal_Val `protobuf_oneof:"val"`
}

func (x *ReshapeAction_Merge_FieldOrVal) Reset() {
	*x = ReshapeAction_Merge_FieldOrVal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReshapeAction_Merge_FieldOrVal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshapeAction_Merge_FieldOrVal) ProtoMessage() {}

func (x *ReshapeAction_Merge_FieldOrVal) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshapeAction_Merge_FieldOrVal.ProtoReflect.Descriptor instead.
func (*ReshapeAction_Merge_FieldOrVal) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{115, 16, 0}
}

func (m *ReshapeAction_Merge_FieldOrVal) GetVal() isReshapeAction_Merge_FieldOrVal_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *ReshapeAction_Merge_FieldOrVal) GetField() *FieldIndex {
	if x, ok := x.GetVal().(*ReshapeAction_Merge_FieldOrVal_Field); ok {
		return x.Field
	}
	return nil
}

func (x *ReshapeAction_Merge_FieldOrVal) GetValue() string {
	if x, ok := x.GetVal().(*ReshapeAction_Merge_FieldOrVal_Value); ok {
		return x.Value
	}
	return ""
}

type isReshapeAction_Merge_FieldOrVal_Val interface {
	isReshapeAction_Merge_FieldOrVal_Val()
}

type ReshapeAction_Merge_FieldOrVal_Field struct {
	Field *FieldIndex `protobuf:"bytes,38,opt,name=field,proto3,oneof"` // fetch the string from this field
}

type ReshapeAction_Merge_FieldOrVal_Value struct {
	Value string `protobuf:"bytes,43,opt,name=value,proto3,oneof"` // use this exact string value
}

func (*ReshapeAction_Merge_FieldOrVal_Field) isReshapeAction_Merge_FieldOrVal_Val() {}

func (*ReshapeAction_Merge_FieldOrVal_Value) isReshapeAction_Merge_FieldOrVal_Val() {}

// represents an index. can be a string or a number
type ReshapeAction_Extract_Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//
	//	*ReshapeAction_Extract_Index_Position
	//	*ReshapeAction_Extract_Index_Match
	Val isReshapeAction_Extract_Index_Val `protobuf_oneof:"val"`
}

func (x *ReshapeAction_Extract_Index) Reset() {
	*x = ReshapeAction_Extract_Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReshapeAction_Extract_Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshapeAction_Extract_Index) ProtoMessage() {}

func (x *ReshapeAction_Extract_Index) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshapeAction_Extract_Index.ProtoReflect.Descriptor instead.
func (*ReshapeAction_Extract_Index) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{115, 19, 0}
}

func (m *ReshapeAction_Extract_Index) GetVal() isReshapeAction_Extract_Index_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *ReshapeAction_Extract_Index) GetPosition() int32 {
	if x, ok := x.GetVal().(*ReshapeAction_Extract_Index_Position); ok {
		return x.Position
	}
	return 0
}

func (x *ReshapeAction_Extract_Index) GetMatch() string {
	if x, ok := x.GetVal().(*ReshapeAction_Extract_Index_Match); ok {
		return x.Match
	}
	return ""
}

type isReshapeAction_Extract_Index_Val interface {
	isReshapeAction_Extract_Index_Val()
}

type ReshapeAction_Extract_Index_Position struct {
	// the base 0 index of the string
	Position int32 `protobuf:"varint,12,opt,name=position,proto3,oneof"`
}

type ReshapeAction_Extract_Index_Match struct {
	// an index matching the substring. Starting at the beginning of the substring
	Match string `protobuf:"bytes,43,opt,name=match,proto3,oneof"`
}

func (*ReshapeAction_Extract_Index_Position) isReshapeAction_Extract_Index_Val() {}

func (*ReshapeAction_Extract_Index_Match) isReshapeAction_Extract_Index_Val() {}

// Slice represents a part of a string. think of a python or golang slice operator
// where the new substring starts at the starting index and ends at the ending index exclusively
type ReshapeAction_Extract_Slice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the default inclusivity is [start, end)
	// this marks whether to not include the start_index marker in the slice
	StartIsExclusive bool `protobuf:"varint,13,opt,name=start_is_exclusive,json=startIsExclusive,proto3" json:"start_is_exclusive,omitempty"`
	// this marks whether to include the end_index marker in the slice
	EndIsInclusive bool `protobuf:"varint,14,opt,name=end_is_inclusive,json=endIsInclusive,proto3" json:"end_is_inclusive,omitempty"`
	// start index marks where to start the slice at. can be a string or number
	// subsequent indexes are backup indexes incase the first doesn't exist
	StartIndex []*ReshapeAction_Extract_Index `protobuf:"bytes,35,rep,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	// end index marks where to start the slice at. can be a string or number
	// subsequent indexes are backup indexes incase the first doesn't exist
	EndIndex []*ReshapeAction_Extract_Index `protobuf:"bytes,36,rep,name=end_index,json=endIndex,proto3" json:"end_index,omitempty"`
}

func (x *ReshapeAction_Extract_Slice) Reset() {
	*x = ReshapeAction_Extract_Slice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_lms_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReshapeAction_Extract_Slice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshapeAction_Extract_Slice) ProtoMessage() {}

func (x *ReshapeAction_Extract_Slice) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_lms_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshapeAction_Extract_Slice.ProtoReflect.Descriptor instead.
func (*ReshapeAction_Extract_Slice) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_lms_proto_rawDescGZIP(), []int{115, 19, 1}
}

func (x *ReshapeAction_Extract_Slice) GetStartIsExclusive() bool {
	if x != nil {
		return x.StartIsExclusive
	}
	return false
}

func (x *ReshapeAction_Extract_Slice) GetEndIsInclusive() bool {
	if x != nil {
		return x.EndIsInclusive
	}
	return false
}

func (x *ReshapeAction_Extract_Slice) GetStartIndex() []*ReshapeAction_Extract_Index {
	if x != nil {
		return x.StartIndex
	}
	return nil
}

func (x *ReshapeAction_Extract_Slice) GetEndIndex() []*ReshapeAction_Extract_Index {
	if x != nil {
		return x.EndIndex
	}
	return nil
}

var File_api_v0alpha_lms_proto protoreflect.FileDescriptor

var file_api_v0alpha_lms_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x1a, 0x17, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x6d, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x22, 0x1d, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x22, 0x33, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65,
	0x41, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x12, 0x46, 0x69,
	0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x49, 0x64, 0x52,
	0x0d, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x32,
	0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x49, 0x64, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0xa8, 0x03, 0x0a, 0x0c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x5c, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x48, 0x00, 0x52, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x4e, 0x0a, 0x0e, 0x62, 0x61, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x1a, 0x33, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x2d, 0x0a, 0x0c, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x2d, 0x0a, 0x0c, 0x42, 0x61, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x83, 0x01,
	0x0a, 0x0e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x4c, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x60, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x22, 0x3d, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x73,
	0x22, 0x5b, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x47, 0x0a,
	0x12, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x0a,
	0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x14, 0x0a, 0x12, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x42, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x45, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x46, 0x6f, 0x72,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75,
	0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x22, 0x47, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x2a, 0x0a, 0x09,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x4b, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xb1, 0x03, 0x0a, 0x07, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x18, 0x14, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x49, 0x73, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x47, 0x0a,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3d,
	0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd1, 0x01, 0x0a,
	0x0b, 0x50, 0x65, 0x65, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x65, 0x65, 0x6b, 0x5f, 0x61,
	0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x70, 0x65, 0x65, 0x6b, 0x41, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x22, 0x75, 0x0a, 0x0b, 0x50, 0x65, 0x65, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12,
	0x32, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x65, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x66,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xdb, 0x04, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x54, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x41, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x22, 0xa5, 0x05, 0x0a, 0x0f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x41, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x44, 0x0a, 0x0b,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x35, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x22, 0x69, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x61, 0x69, 0x72, 0x12, 0x2a, 0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x6f, 0x6c,
	0x64, 0x12, 0x2a, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x22, 0xd2, 0x02,
	0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x38, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x59, 0x0a, 0x0b, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x1a, 0xab, 0x01, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x22, 0x1d, 0x0a, 0x07, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x4b, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xe2, 0x01, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x02, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65,
	0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65,
	0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xd1, 0x04, 0x0a, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0d,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x44, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x31, 0x0a, 0x15, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x6a, 0x73, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x22, 0x34, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2a, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x6b, 0x0a, 0x0a, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3b, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x0f, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x22, 0xdb, 0x05, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x48, 0x00, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3a, 0x0a, 0x0b,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6f,
	0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x26,
	0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x43, 0x0a, 0x0e, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x65, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x65,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x5a, 0x69, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x65,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x5a, 0x69, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x45, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x29, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x22, 0x53,
	0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x4c, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x22, 0x3c, 0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0xc2, 0x02, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x4b, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x10, 0x66, 0x69,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x38,
	0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x66, 0x69,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x22, 0x46, 0x0a, 0x0c, 0x4c, 0x4d, 0x53, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x0e, 0x0a, 0x0c,
	0x4c, 0x4d, 0x53, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x08,
	0x52, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x72, 0x75, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x72, 0x75, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0x0a,
	0x0a, 0x08, 0x52, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x84, 0x14, 0x0a, 0x07, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x48, 0x00, 0x52, 0x06, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x09, 0x67, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x53, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x08, 0x67, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x3b, 0x0a, 0x09, 0x70, 0x33, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x50, 0x33, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x48, 0x00, 0x52, 0x08, 0x70, 0x33, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x35, 0x0a,
	0x05, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x05, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x12, 0x32, 0x0a, 0x05, 0x64, 0x65, 0x64, 0x75, 0x70, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x44, 0x65, 0x44, 0x75, 0x70, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x48,
	0x00, 0x52, 0x05, 0x64, 0x65, 0x64, 0x75, 0x70, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x66, 0x73, 0x5f,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x46, 0x53, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x09, 0x63,
	0x66, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x66, 0x74, 0x70,
	0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x66, 0x74, 0x70,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52,
	0x0a, 0x73, 0x66, 0x74, 0x70, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x68, 0x61,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x68, 0x61, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x00, 0x52, 0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x44, 0x0a, 0x0a, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x02,
	0x18, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x53, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x61, 0x70, 0x69, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x70, 0x69, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x70, 0x69,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x73, 0x66,
	0x74, 0x70, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x66,
	0x74, 0x70, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x66, 0x74, 0x70,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x63, 0x72, 0x75, 0x62, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x63, 0x72, 0x75, 0x62, 0x12, 0x3d, 0x0a, 0x09, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x09, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x6a, 0x73, 0x5f,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6a, 0x73, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x09, 0x63,
	0x6a, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x6a, 0x73, 0x5f,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6a, 0x73, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x09, 0x63,
	0x6a, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x6a, 0x73, 0x5f,
	0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6a, 0x73, 0x45, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x00, 0x52, 0x09, 0x63, 0x6a, 0x73, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x12, 0x4a, 0x0a, 0x0e,
	0x77, 0x65, 0x62, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x57, 0x65, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x65, 0x62, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00,
	0x52, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x77, 0x66, 0x6d, 0x5f, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x57, 0x66, 0x6d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x09, 0x77, 0x66, 0x6d, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x49, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x65, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x02, 0x18,
	0x01, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x12,
	0x35, 0x0a, 0x03, 0x72, 0x6e, 0x64, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x6e, 0x64, 0x45, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x00, 0x52, 0x03, 0x72, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x12, 0x4a, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x55, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x11,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x51, 0x0a, 0x12, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x45, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x12, 0x57, 0x0a, 0x13, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x77, 0x65, 0x62,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x48, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x42, 0x75, 0x6c, 0x6b, 0x57, 0x65, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x11, 0x62, 0x75, 0x6c, 0x6b,
	0x57, 0x65, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x56, 0x0a,
	0x15, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00,
	0x52, 0x13, 0x6f, 0x6d, 0x6e, 0x69, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x14, 0x77, 0x65, 0x62, 0x5f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x4a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x57, 0x65, 0x62, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x12, 0x77, 0x65, 0x62, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x48, 0x00, 0x52, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x47,
	0x0a, 0x10, 0x65, 0x70, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x70, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x70, 0x69, 0x63, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x18,
	0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x2b, 0x0a, 0x03,
	0x73, 0x75, 0x6d, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x48, 0x00, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x42, 0x06, 0x0a, 0x04, 0x70, 0x72, 0x6f,
	0x63, 0x22, 0xb8, 0x03, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x7a, 0x69, 0x70,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x7a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x57, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x6c,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x3f, 0x0a, 0x11, 0x43,
	0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x48, 0x0a, 0x18,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0x88, 0x09, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x75,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x55,
	0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x3a, 0x0a, 0x1a,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f,
	0x66, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4f,
	0x66, 0x44, 0x61, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x36, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61,
	0x79, 0x5f, 0x74, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x54, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x12, 0x44, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x56,
	0x61, 0x6c, 0x12, 0x37, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x01, 0x52, 0x0e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x12, 0x37, 0x0a,
	0x17, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x0e, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a,
	0x15, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x13,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x19, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x02, 0x52, 0x17, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcc, 0x02, 0x0a, 0x15, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x37, 0x0a, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x19, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x16, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x4f, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x47, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4b, 0x65,
	0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x4d, 0x61,
	0x70, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x49, 0x64, 0x1a, 0x39,
	0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x83, 0x02, 0x0a, 0x14, 0x50, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x46, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x45, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x6d, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x64, 0x65, 0x6d, 0x6f, 0x1a, 0x39, 0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x55, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x13, 0x0a, 0x11, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x0d,
	0x41, 0x70, 0x69, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x66, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66,
	0x74, 0x73, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x22, 0x82,
	0x03, 0x0a, 0x07, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3b, 0x0a, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x52, 0x65, 0x71, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x2d, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x56, 0x65, 0x72, 0x62, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x61, 0x0a, 0x15,
	0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65,
	0x71, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x6e, 0x61, 0x6d, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a,
	0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x99, 0x02, 0x0a, 0x14, 0x57, 0x65, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x0d,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0xc1, 0x03, 0x0a, 0x18, 0x42, 0x75, 0x6c, 0x6b, 0x57, 0x65, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x14,
	0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71,
	0x52, 0x13, 0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x50, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x6c, 0x75, 0x73, 0x68,
	0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x64,
	0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x22, 0xc0, 0x01, 0x0a, 0x13, 0x4f, 0x6d, 0x6e, 0x69, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x64, 0x61, 0x79, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x78, 0x0a, 0x12, 0x57, 0x65, 0x62, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x0d,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x22, 0xa6, 0x04, 0x0a, 0x14, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x74,
	0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x11, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x52, 0x10, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x41, 0x0a,
	0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x41, 0x6e, 0x79,
	0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x46, 0x6f, 0x72,
	0x41, 0x6c, 0x6c, 0x12, 0x4d, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x57, 0x61, 0x69, 0x74,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6e, 0x6f, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x5f, 0x72, 0x65, 0x64, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6e, 0x6f, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x64, 0x6f, 0x50, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x53, 0x6b, 0x69, 0x70, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x67, 0x65, 0x22, 0xae, 0x03, 0x0a, 0x0a, 0x53, 0x66,
	0x74, 0x70, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x6f, 0x6e,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7a, 0x0a, 0x14, 0x52, 0x6e,
	0x64, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x35, 0x0a, 0x17, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x10, 0x43, 0x6a, 0x73, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63,
	0x6a, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6a, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x72, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x64, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x64, 0x65, 0x64, 0x75, 0x70, 0x22, 0xb2, 0x02, 0x0a, 0x10, 0x43, 0x6a, 0x73, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x6a, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6a, 0x73, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x08, 0x72,
	0x75, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x6a, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6a, 0x73, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xff, 0x02, 0x0a,
	0x14, 0x43, 0x6a, 0x73, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6a, 0x73, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6a, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3c,
	0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0e,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x2b, 0x0a, 0x12, 0x63, 0x6a, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6a, 0x73,
	0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x76,
	0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x64, 0x65, 0x64, 0x75, 0x70,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x44, 0x65, 0x64, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e,
	0x64, 0x65, 0x64, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x26,
	0x0a, 0x0d, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x66, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x66, 0x74, 0x73, 0x49, 0x64, 0x22, 0xfd, 0x03, 0x0a, 0x0d, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x12, 0x3b, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x48,
	0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x55, 0x72, 0x6c, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x1a, 0x31, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x1a, 0x79, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a,
	0x5d, 0x0a, 0x09, 0x55, 0x72, 0x6c, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3e,
	0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x70, 0x72, 0x6f, 0x63, 0x22, 0x0e, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x22, 0x54, 0x0a, 0x0f, 0x43, 0x46, 0x53, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc0, 0x01, 0x0a,
	0x12, 0x43, 0x46, 0x53, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x43, 0x46, 0x53, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f,
	0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x8a, 0x01, 0x0a, 0x10, 0x43, 0x46, 0x53, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x46, 0x53, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x85, 0x01, 0x0a,
	0x0d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c,
	0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x22, 0x7b, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x22, 0x80, 0x09, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x45, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x07, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x12, 0x46, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x12, 0x46, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08,
	0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x1a, 0xdd, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x76, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x12, 0x38, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x05, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x1a, 0xdd, 0x01, 0x0a, 0x0f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02,
	0x6f, 0x70, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x1a, 0xa7, 0x01, 0x0a, 0x0e, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x1a, 0xa6, 0x02, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x72, 0x56, 0x61, 0x6c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x1a, 0x7c, 0x0a,
	0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x72, 0x56, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x36, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x22, 0x3d, 0x0a, 0x0f, 0x47, 0x53, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x22, 0xbc, 0x10, 0x0a, 0x0f, 0x50, 0x33, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1e, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x75, 0x70, 0x65, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x64, 0x75, 0x70, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x42, 0x0a, 0x0d, 0x61, 0x62,
	0x73, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x72, 0x75, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x3c, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73,
	0x63, 0x72, 0x75, 0x62, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c,
	0x53, 0x63, 0x72, 0x75, 0x62, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x69, 0x61, 0x6c, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x64, 0x69, 0x61, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x65,
	0x5f, 0x73, 0x75, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x54, 0x68, 0x65, 0x53, 0x75, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50,
	0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x73, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x68,
	0x61, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x68, 0x61, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6d,
	0x73, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x6d, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6d, 0x73, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x73, 0x6d, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x7a, 0x69, 0x70, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x7a, 0x69, 0x70, 0x53, 0x63, 0x72, 0x75, 0x62, 0x12, 0x31, 0x0a,
	0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x29,
	0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x16,
	0x75, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x75, 0x73,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x38, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x64,
	0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x6f, 0x5f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x61, 0x79, 0x73, 0x49, 0x6e, 0x74, 0x6f, 0x46,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x48, 0x6f, 0x75, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x12,
	0x30, 0x0a, 0x14, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x64, 0x6f, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x6f,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x13,
	0x10, 0x14, 0x22, 0x9e, 0x02, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2f, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x52, 0x75, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x51, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x3d, 0x0a, 0x0c, 0x53, 0x63, 0x72, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x22, 0x4a, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x72, 0x75,
	0x62, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xa2,
	0x02, 0x0a, 0x10, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x40, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x64,
	0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x39, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x8d, 0x06, 0x0a, 0x11, 0x53, 0x66, 0x74, 0x70, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x74,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x29,
	0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0c, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x75,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x33, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x75, 0x73, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x57, 0x66, 0x6d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x22, 0x71, 0x0a, 0x10, 0x57, 0x66, 0x6d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x57,
	0x66, 0x6d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x05,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x42, 0x0f, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x24, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x81, 0x01, 0x0a,
	0x07, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x48, 0x00, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x06, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x88, 0x01, 0x0a, 0x0c, 0x43, 0x46, 0x53, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x39, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x43, 0x46, 0x53, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x06,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xca, 0x01, 0x0a, 0x0d,
	0x44, 0x65, 0x44, 0x75, 0x70, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x31, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x44, 0x75,
	0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x30, 0x0a, 0x06, 0x75, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x06, 0x75, 0x6e, 0x6c,
	0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x6a,
	0x75, 0x6e, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x7c, 0x0a, 0x0c, 0x53, 0x6f, 0x72, 0x74,
	0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x32, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x0b,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x3a, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x77, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x77, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x3f, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x58, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x83, 0x01, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x77, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x77, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x5f, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x61, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x22, 0x7b, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x9c, 0x01,
	0x0a, 0x10, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x79, 0x65, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x79, 0x65, 0x61, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x65, 0x6b,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61,
	0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xb8, 0x01, 0x0a,
	0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x77,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61,
	0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x3c,
	0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xcb, 0x05, 0x0a, 0x0d, 0x45, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x65, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72,
	0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x63,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x63, 0x6e, 0x73, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x63, 0x6e, 0x73,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x63, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x64, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x6f, 0x32, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x6f, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x64, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6e, 0x64, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x73, 0x63, 0x31, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x73, 0x63, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x73, 0x63, 0x32, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x73, 0x63, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x73, 0x63, 0x33, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x73, 0x63, 0x33, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x73, 0x63, 0x34, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x73, 0x63, 0x34, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x73,
	0x5f, 0x6e, 0x64, 0x63, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x73, 0x65, 0x73,
	0x4e, 0x64, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x74, 0x63, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x03, 0x75, 0x74, 0x63, 0x22, 0xa5, 0x06, 0x0a, 0x0b, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68,
	0x65, 0x64, 0x5a, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x31,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x31, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x33, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x31, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x33, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x33, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x66, 0x69, 0x70, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x46, 0x69,
	0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x64, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x6f, 0x32, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x6f, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x61,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x61,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x62, 0x62, 0x72, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x41, 0x62,
	0x62, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x70, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x46, 0x69, 0x70, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x74, 0x63, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x75, 0x74, 0x63, 0x22, 0x05, 0x0a,
	0x03, 0x4e, 0x6f, 0x77, 0x22, 0xef, 0x01, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x77, 0x65, 0x65, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x65, 0x65, 0x6b,
	0x12, 0x20, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65,
	0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65,
	0x65, 0x6b, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x79, 0x65, 0x61,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x59, 0x65,
	0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x65, 0x65,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x12, 0x20, 0x0a,
	0x0c, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12,
	0x1e, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12,
	0x1e, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x59, 0x65, 0x61, 0x72, 0x22,
	0x99, 0x01, 0x0a, 0x0b, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x41, 0x6e, 0x64, 0x44, 0x61, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x61, 0x79,
	0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0b, 0x64,
	0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x1e, 0x0a, 0x0b, 0x64,
	0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x59, 0x65, 0x61, 0x72, 0x22, 0x2b, 0x0a, 0x09, 0x44,
	0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f,
	0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64,
	0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x22, 0x4f, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x4f, 0x66, 0x44, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x96, 0x02, 0x0a, 0x10, 0x46, 0x69,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x31,
	0x0a, 0x13, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x10, 0x73, 0x6b, 0x69, 0x70, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x6f, 0x4c, 0x69, 0x6e, 0x65,
	0x73, 0x12, 0x37, 0x0a, 0x16, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x73, 0x6b, 0x69, 0x70, 0x4c, 0x69, 0x6e, 0x65, 0x73,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72,
	0x69, 0x6d, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x74, 0x72, 0x69, 0x6d, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x65, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x73, 0x6b, 0x69, 0x70, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x44, 0x6f, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x22, 0x46, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x68, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x68, 0x61, 0x70, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa9, 0x1b, 0x0a, 0x0d, 0x52,
	0x65, 0x73, 0x68, 0x61, 0x70, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x06,
	0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x68, 0x61,
	0x70, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x68, 0x61,
	0x70, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x61, 0x64, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x42, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x68, 0x61, 0x70, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x08, 0x61, 0x64, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x3f, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x68, 0x61, 0x70, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x68, 0x61, 0x70, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x68,
	0x61, 0x70, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x68, 0x61, 0x70, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x12, 0x4b, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x68, 0x61, 0x70, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x4c, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x6e, 0x65, 0x77,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x68, 0x61,
	0x70, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x61, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x68, 0x61, 0x70, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x68, 0x61, 0x70, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x48, 0x00, 0x52, 0x06, 0x64, 0x69, 0x76,
	0x69, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x68, 0x61, 0x70, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x6f,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x68, 0x61, 0x70, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x6f, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x6f, 0x12, 0x38, 0x0a, 0x05, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x68, 0x61, 0x70, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x52, 0x0a,
	0x0f, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x68, 0x61, 0x70, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x69, 0x0a, 0x18, 0x61, 0x64, 0x64, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x68, 0x61, 0x70, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x14, 0x61, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x5f, 0x0a, 0x14,
	0x73, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x68, 0x61, 0x70, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x32, 0x0a,
	0x03, 0x70, 0x61, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x68, 0x61, 0x70, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x64, 0x48, 0x00, 0x52, 0x03, 0x70, 0x61,
	0x64, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x72, 0x69, 0x6d, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x68, 0x61, 0x70, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x69, 0x6d,
	0x48, 0x00, 0x52, 0x04, 0x74, 0x72, 0x69, 0x6d, 0x12, 0x3e, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x68, 0x61, 0x70, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x23, 0x0a, 0x06, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x20, 0x0a,
	0x08, 0x41, 0x64, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x44, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x44, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x38, 0x0a, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x25, 0x0a, 0x0d, 0x53,
	0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x49, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0xb5, 0x01,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x6e, 0x65, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2f, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x42, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x47, 0x0a, 0x06, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x64, 0x69, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x1a, 0x4f,
	0x0a, 0x08, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x1a,
	0x47, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x75, 0x73, 0x1a, 0x0d, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x53, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x4e, 0x65,
	0x77, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x64, 0x0a, 0x14,
	0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x1a, 0x14, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x44, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x61,
	0x0a, 0x11, 0x53, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x1a, 0xa6, 0x01, 0x0a, 0x05, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x68, 0x61, 0x70, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4f, 0x72, 0x56, 0x61, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x5c, 0x0a, 0x0a,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x72, 0x56, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x1a, 0x49, 0x0a, 0x03, 0x50, 0x61,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x68, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x1a, 0x6f, 0x0a, 0x04, 0x54, 0x72, 0x69, 0x6d, 0x12, 0x18, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x42,
	0x05, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x1a, 0x83, 0x03, 0x0a, 0x07, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x68, 0x61, 0x70, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x74, 0x73, 0x1a, 0x44, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x42, 0x05, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x1a, 0xf1, 0x01, 0x0a, 0x05, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x73, 0x5f, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x49,
	0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x68, 0x61, 0x70, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x45, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x68, 0x61, 0x70, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x08, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfe, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x03, 0x74, 0x74,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x03, 0x74, 0x74, 0x6c,
	0x12, 0x35, 0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c,
	0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0a, 0x53, 0x75, 0x6d, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x21,
	0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x22, 0xcc, 0x05, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x3c, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x06, 0x66, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x66, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x52, 0x75, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x61, 0x78, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x54, 0x6f, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x68, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xcc, 0x01, 0x0a, 0x08, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x22, 0xb6, 0x04, 0x0a, 0x05, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x71, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x54, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x54, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x74,
	0x69, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x54, 0x69,
	0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x42,
	0x0a, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x22, 0x34, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x0c, 0x56, 0x69, 0x65,
	0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x0a, 0x6e, 0x65, 0x77,
	0x65, 0x72, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x65, 0x72,
	0x54, 0x68, 0x61, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6e, 0x65, 0x77, 0x65, 0x72,
	0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6e, 0x6f, 0x4e, 0x65, 0x77, 0x65, 0x72,
	0x54, 0x68, 0x61, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xb8, 0x04, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x3d, 0x0a,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d,
	0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x64, 0x22, 0xc6, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x08, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0x42, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x12, 0x36, 0x0a,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x51, 0x0a, 0x0f, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x37, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x3a, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x39,
	0x0a, 0x12, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x22,
	0x57, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x73, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x97, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x66, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x73, 0x65,
	0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x22, 0x62, 0x0a, 0x12, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x12,
	0x36, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x97, 0x01,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x36, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x5a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x05,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x6b, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2d, 0x0a,
	0x13, 0x78, 0x6d, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x78, 0x6d, 0x6c, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xef, 0x01, 0x0a, 0x0e, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x6a, 0x73, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x63, 0x6a, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x6a, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6a, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x81, 0x03, 0x0a, 0x1b, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x6a, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6a, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x65, 0x78, 0x65, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x65, 0x78, 0x65, 0x63, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x3d, 0x0a, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x65, 0x64, 0x22, 0x9b, 0x03, 0x0a, 0x13, 0x43, 0x6a, 0x73,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x44, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6a, 0x73, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x57, 0x0a, 0x19, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x17, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x57, 0x0a, 0x19, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x17, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x11, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x54, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6a, 0x73,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x6a, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6a, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x1c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x18,
	0x63, 0x6a, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x63, 0x6a, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6a, 0x73,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x22, 0x69, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6a, 0x73, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x9a, 0x01, 0x0a, 0x1d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6a, 0x73, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6a, 0x73, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0c,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x6e, 0x0a, 0x1d,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x4d, 0x0a,
	0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x88, 0x01, 0x0a,
	0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x36, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x15, 0x43, 0x6a, 0x73, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xf7, 0x01, 0x0a, 0x1f, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x1d, 0x63, 0x6a, 0x73,
	0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x63, 0x6a, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e,
	0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22,
	0xa6, 0x01, 0x0a, 0x17, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x48, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6a, 0x73, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43,
	0x6a, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x65, 0x71, 0x22, 0xe4, 0x01, 0x0a, 0x1c, 0x43, 0x6a,
	0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x4b, 0x0a, 0x23, 0x63, 0x6a,
	0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x63, 0x6a, 0x73, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1d, 0x63, 0x6a, 0x73, 0x5f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x63, 0x6a, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xcc, 0x01, 0x0a, 0x0d, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x12, 0x34, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x42, 0x79, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x42, 0x79,
	0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x42, 0x79, 0x45, 0x71, 0x75,
	0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x71, 0x75, 0x61, 0x6c,
	0x50, 0x61, 0x72, 0x74, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x6e, 0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x3f, 0x0a,
	0x0f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x0d, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x4f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x50, 0x0a, 0x12, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x55,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x22, 0x50, 0x0a, 0x0d, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x42, 0x79, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x0d, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x4f, 0x6e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x22, 0x2b, 0x0a, 0x0e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x42, 0x79, 0x4d, 0x61,
	0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x30, 0x0a, 0x11, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x42, 0x79, 0x45, 0x71, 0x75, 0x61, 0x6c,
	0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0xd4, 0x04, 0x0a, 0x0e, 0x45, 0x70, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a,
	0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x45, 0x70, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x73, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66, 0x68, 0x69,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x46, 0x68, 0x69, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0d, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6c,
	0x75, 0x73, 0x68, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x50, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x6d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x64, 0x75, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x66, 0x6c, 0x75, 0x73, 0x68, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x61, 0x77, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x6e, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x6e, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0xed, 0x05, 0x0a, 0x0d, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x55, 0x52, 0x4c, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x55, 0x72, 0x6c, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x70,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x5a, 0x0a, 0x10, 0x70,
	0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x56, 0x61, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x6f, 0x4d, 0x6f, 0x72, 0x65,
	0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66,
	0x74, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x46, 0x74, 0x73, 0x49, 0x64, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5b, 0x0a, 0x09, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x55, 0x52, 0x4c, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x70, 0x69, 0x63, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x20, 0x0a, 0x0d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x52, 0x09, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x4d, 0x0a, 0x0d, 0x45, 0x48, 0x52, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x70, 0x69,
	0x63, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x70, 0x69,
	0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x70, 0x69,
	0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2a, 0x46, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x53, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10, 0x03, 0x2a,
	0xcf, 0x01, 0x0a, 0x0e, 0x45, 0x70, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x50, 0x49, 0x43, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x50, 0x49,
	0x43, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41,
	0x54, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x50, 0x49, 0x43, 0x5f,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x50, 0x49,
	0x43, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x50,
	0x49, 0x43, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x50, 0x49, 0x43, 0x5f, 0x45, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x05, 0x32, 0x92, 0x40, 0x0a, 0x03, 0x4c, 0x4d, 0x53, 0x12, 0x76, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22,
	0x30, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe9, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x70, 0x67, 0x70, 0x6b, 0x65, 0x79, 0x2f, 0x67, 0x65,
	0x74, 0x12, 0x87, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x3b,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe9, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b,
	0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x34,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe8, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24,
	0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x30, 0x01, 0x12, 0x87, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe9, 0x07, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x87, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x3b, 0xba,
	0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe9, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a,
	0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x19,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x22, 0x38, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe9, 0x07,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x12, 0x6a,
	0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x33, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe9,
	0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x6b, 0x0a, 0x0a, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x2c, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xe8, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x64, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x30, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xe9, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a,
	0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c,
	0x6d, 0x73, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x12, 0x73, 0x0a,
	0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x33, 0xba,
	0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe9, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a,
	0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x6a, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x33, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xe9, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x2a, 0x1e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xa3,
	0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x42, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x35, 0xba,
	0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe8, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a,
	0x01, 0x2a, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x62, 0x79, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x9a, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x36, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xe8, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x66, 0x6f, 0x72, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0xa2, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x26, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x22, 0x38, 0xba, 0xb8,
	0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe8, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01,
	0x2a, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x6c, 0x6d, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x4c,
	0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x22, 0x36, 0xba, 0xb8, 0x91, 0x02, 0x04, 0x0a, 0x02,
	0x08, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x63, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x73, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x65, 0x65, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x50, 0x65, 0x65, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22,
	0x33, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe8, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x79, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x22, 0x33, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0xe8, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22,
	0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d,
	0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x73, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x36, 0xba, 0xb8,
	0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe9, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01,
	0x2a, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x6c, 0x6d, 0x73, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x75, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x2f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xe8, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x30, 0x01, 0x12, 0x6f, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x4b, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x33, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0xe8, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x12, 0x73, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x36, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xe9, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73,
	0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x73, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x36,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe9, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26,
	0x3a, 0x01, 0x2a, 0x2a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x70, 0x79, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3c, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xe9, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a,
	0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c,
	0x6d, 0x73, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x70,
	0x79, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x30, 0x01, 0x12, 0x86, 0x01, 0x0a, 0x16,
	0x43, 0x6f, 0x70, 0x79, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x6f, 0x77, 0x6e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x14, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe9, 0x07, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x30, 0x01, 0x12, 0x81, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x37, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe9, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xe9, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a,
	0x22, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c,
	0x6d, 0x73, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x7b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x98, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe9,
	0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x6c, 0x69, 0x73,
	0x74, 0x2f, 0x7b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x28, 0x01,
	0x12, 0x80, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x36, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xe8, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a,
	0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c,
	0x6d, 0x73, 0x2f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x72, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x34, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe8, 0x07, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x6e, 0x65, 0x77,
	0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x6d, 0x0a, 0x09, 0x56, 0x69, 0x65, 0x77, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x30, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe8, 0x07,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x76, 0x69, 0x65, 0x77,
	0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x70, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x6f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x22, 0x32, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe8, 0x07,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x6f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0xe9, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x63, 0x72, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xe9, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f,
	0x66, 0x69, 0x6e, 0x64, 0x2d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x9c, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x23,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe9, 0x07, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x2d,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x8b, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x35, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x86,
	0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x35, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe8, 0x07, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x35, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x83, 0x01, 0x0a,
	0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x35, 0xba, 0xb8, 0x91,
	0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x22, 0x31, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xe8, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x0f,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x34, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x8a,
	0x01, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x22, 0x38, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b,
	0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x93, 0x01, 0x0a, 0x15,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x90, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x8b, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x35, 0xba, 0xb8, 0x91, 0x02, 0x02,
	0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x30, 0x01, 0x12, 0xab, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x22, 0x40,
	0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a,
	0x22, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c,
	0x6d, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0xaa, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x46, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe8,
	0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01, 0x2a, 0x22, 0x31, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0xa6, 0x01,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x20, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6a, 0x73, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x45, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01,
	0x2a, 0x22, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x6c, 0x6d, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa6, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6a,
	0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0xba, 0xb8, 0x91,
	0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x9c, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6a, 0x73, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x45, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a, 0x22, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa5,
	0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x45, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01,
	0x2a, 0x22, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x6c, 0x6d, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb4, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6a, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6a, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x22, 0x44, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xbc, 0x01,
	0x0a, 0x1a, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6a,
	0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x22, 0x46, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x39, 0x3a, 0x01, 0x2a, 0x22, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xba, 0x01, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x2a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6a, 0x73,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x22, 0x4a, 0xba,
	0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe9, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x3a,
	0x01, 0x2a, 0x22, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x67, 0x65, 0x74, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x64, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0xba, 0x01, 0x0a, 0x1d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x24, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x43, 0x6a, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x22, 0x4d, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0xe9, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x3a, 0x01, 0x2a, 0x22, 0x38, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x64, 0x63, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0xac, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6a, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4d, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0xe9, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x3a, 0x01, 0x2a, 0x22, 0x38, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x64, 0x63, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x72, 0x0a, 0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2c, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xe9, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a,
	0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c,
	0x6d, 0x73, 0x2f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x48, 0x52, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x45, 0x48, 0x52, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x1a,
	0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe8, 0x07,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x65, 0x68, 0x72, 0x2d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0xa3, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x4b, 0x1a, 0x13, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x52, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe8, 0x07, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x42, 0x3a, 0x01, 0x2a, 0x22, 0x3d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6d, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x62, 0x79, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x42, 0x90, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x08, 0x4c, 0x6d, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d,
	0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xa2, 0x02,
	0x03, 0x41, 0x56, 0x58, 0xaa, 0x02, 0x0b, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0xca, 0x02, 0x0b, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0xe2, 0x02, 0x17, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x41, 0x70, 0x69,
	0x3a, 0x3a, 0x56, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_api_v0alpha_lms_proto_rawDescOnce sync.Once
	file_api_v0alpha_lms_proto_rawDescData = file_api_v0alpha_lms_proto_rawDesc
)

func file_api_v0alpha_lms_proto_rawDescGZIP() []byte {
	file_api_v0alpha_lms_proto_rawDescOnce.Do(func() {
		file_api_v0alpha_lms_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v0alpha_lms_proto_rawDescData)
	})
	return file_api_v0alpha_lms_proto_rawDescData
}

var file_api_v0alpha_lms_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_v0alpha_lms_proto_msgTypes = make([]protoimpl.MessageInfo, 215)
var file_api_v0alpha_lms_proto_goTypes = []any{
	(TimeUnit)(0),                                 // 0: api.v0alpha.TimeUnit
	(EpicEntityType)(0),                           // 1: api.v0alpha.EpicEntityType
	(*GetPublicKeyReq)(nil),                       // 2: api.v0alpha.GetPublicKeyReq
	(*PublicKey)(nil),                             // 3: api.v0alpha.PublicKey
	(*FindFieldUsagesReq)(nil),                    // 4: api.v0alpha.FindFieldUsagesReq
	(*NameAndId)(nil),                             // 5: api.v0alpha.NameAndId
	(*FindFieldUsagesRes)(nil),                    // 6: api.v0alpha.FindFieldUsagesRes
	(*ElementError)(nil),                          // 7: api.v0alpha.ElementError
	(*ElementSummary)(nil),                        // 8: api.v0alpha.ElementSummary
	(*FindInvalidElementsReq)(nil),                // 9: api.v0alpha.FindInvalidElementsReq
	(*FindInvalidElementsRes)(nil),                // 10: api.v0alpha.FindInvalidElementsRes
	(*GetComplianceScrubListsReq)(nil),            // 11: api.v0alpha.GetComplianceScrubListsReq
	(*GetComplianceScrubListsRes)(nil),            // 12: api.v0alpha.GetComplianceScrubListsRes
	(*ProcessElementReq)(nil),                     // 13: api.v0alpha.ProcessElementReq
	(*ProcessListRequest)(nil),                    // 14: api.v0alpha.ProcessListRequest
	(*ProcessListResponse)(nil),                   // 15: api.v0alpha.ProcessListResponse
	(*StreamListRequest)(nil),                     // 16: api.v0alpha.StreamListRequest
	(*StreamListResponse)(nil),                    // 17: api.v0alpha.StreamListResponse
	(*ListAvailableFieldsByElementIdReq)(nil),     // 18: api.v0alpha.ListAvailableFieldsByElementIdReq
	(*ListFieldsForElementReq)(nil),               // 19: api.v0alpha.ListFieldsForElementReq
	(*ListFieldsForElementRes)(nil),               // 20: api.v0alpha.ListFieldsForElementRes
	(*ListAutocompleteFieldsReq)(nil),             // 21: api.v0alpha.ListAutocompleteFieldsReq
	(*ListAutocompleteFieldsRes)(nil),             // 22: api.v0alpha.ListAutocompleteFieldsRes
	(*ElementPK)(nil),                             // 23: api.v0alpha.ElementPK
	(*Element)(nil),                               // 24: api.v0alpha.Element
	(*PeekListReq)(nil),                           // 25: api.v0alpha.PeekListReq
	(*PeekListRes)(nil),                           // 26: api.v0alpha.PeekListRes
	(*GetHistoryReq)(nil),                         // 27: api.v0alpha.GetHistoryReq
	(*GetHistoryRes)(nil),                         // 28: api.v0alpha.GetHistoryRes
	(*History)(nil),                               // 29: api.v0alpha.History
	(*HistoryAndCount)(nil),                       // 30: api.v0alpha.HistoryAndCount
	(*RecordProto)(nil),                           // 31: api.v0alpha.RecordProto
	(*RecordProtoPair)(nil),                       // 32: api.v0alpha.RecordProtoPair
	(*ProcessFields)(nil),                         // 33: api.v0alpha.ProcessFields
	(*FieldPK)(nil),                               // 34: api.v0alpha.FieldPK
	(*Field)(nil),                                 // 35: api.v0alpha.Field
	(*UpdateFieldReq)(nil),                        // 36: api.v0alpha.UpdateFieldReq
	(*FieldMetadata)(nil),                         // 37: api.v0alpha.FieldMetadata
	(*Fields)(nil),                                // 38: api.v0alpha.Fields
	(*FieldIndex)(nil),                            // 39: api.v0alpha.FieldIndex
	(*ListFieldsReq)(nil),                         // 40: api.v0alpha.ListFieldsReq
	(*RecordFieldProto)(nil),                      // 41: api.v0alpha.RecordFieldProto
	(*RepeatedRecords)(nil),                       // 42: api.v0alpha.RepeatedRecords
	(*ListElementsReq)(nil),                       // 43: api.v0alpha.ListElementsReq
	(*GetFileTemplatesReq)(nil),                   // 44: api.v0alpha.GetFileTemplatesReq
	(*FileTemplateField)(nil),                     // 45: api.v0alpha.FileTemplateField
	(*FileTemplateFields)(nil),                    // 46: api.v0alpha.FileTemplateFields
	(*FieldTypes)(nil),                            // 47: api.v0alpha.FieldTypes
	(*FileTemplate)(nil),                          // 48: api.v0alpha.FileTemplate
	(*LMSUploadReq)(nil),                          // 49: api.v0alpha.LMSUploadReq
	(*LMSUploadRes)(nil),                          // 50: api.v0alpha.LMSUploadRes
	(*ReRunReq)(nil),                              // 51: api.v0alpha.ReRunReq
	(*ReRunRes)(nil),                              // 52: api.v0alpha.ReRunRes
	(*Process)(nil),                               // 53: api.v0alpha.Process
	(*ComplianceProcessor)(nil),                   // 54: api.v0alpha.ComplianceProcessor
	(*ConsentEntrypointProcess)(nil),              // 55: api.v0alpha.ConsentEntrypointProcess
	(*ConsentEnrichmentProcess)(nil),              // 56: api.v0alpha.ConsentEnrichmentProcess
	(*ConsentExportProcess)(nil),                  // 57: api.v0alpha.ConsentExportProcess
	(*PaymentLinkEnrichment)(nil),                 // 58: api.v0alpha.PaymentLinkEnrichment
	(*PortalLinkEnrichment)(nil),                  // 59: api.v0alpha.PortalLinkEnrichment
	(*Expiration)(nil),                            // 60: api.v0alpha.Expiration
	(*EntrypointProcess)(nil),                     // 61: api.v0alpha.EntrypointProcess
	(*ApiEntrypoint)(nil),                         // 62: api.v0alpha.ApiEntrypoint
	(*HttpReq)(nil),                               // 63: api.v0alpha.HttpReq
	(*WebEntrypointProcess)(nil),                  // 64: api.v0alpha.WebEntrypointProcess
	(*BulkWebEntrypointProcess)(nil),              // 65: api.v0alpha.BulkWebEntrypointProcess
	(*OmniExchangeProcess)(nil),                   // 66: api.v0alpha.OmniExchangeProcess
	(*WebExchangeProcess)(nil),                    // 67: api.v0alpha.WebExchangeProcess
	(*PaginatedHttpRequest)(nil),                  // 68: api.v0alpha.PaginatedHttpRequest
	(*SftpImport)(nil),                            // 69: api.v0alpha.SftpImport
	(*RndEnrichmentProcess)(nil),                  // 70: api.v0alpha.RndEnrichmentProcess
	(*CjsImportProcess)(nil),                      // 71: api.v0alpha.CjsImportProcess
	(*CjsExportProcess)(nil),                      // 72: api.v0alpha.CjsExportProcess
	(*CjsEnrichmentProcess)(nil),                  // 73: api.v0alpha.CjsEnrichmentProcess
	(*AppendProcess)(nil),                         // 74: api.v0alpha.AppendProcess
	(*LookupProcess)(nil),                         // 75: api.v0alpha.LookupProcess
	(*ComplProcess)(nil),                          // 76: api.v0alpha.ComplProcess
	(*CFSExportConfig)(nil),                       // 77: api.v0alpha.CFSExportConfig
	(*CFSExportReqHeader)(nil),                    // 78: api.v0alpha.CFSExportReqHeader
	(*CFSExportProcess)(nil),                      // 79: api.v0alpha.CFSExportProcess
	(*FilterProcess)(nil),                         // 80: api.v0alpha.FilterProcess
	(*FilterOperation)(nil),                       // 81: api.v0alpha.FilterOperation
	(*FilterCheck)(nil),                           // 82: api.v0alpha.FilterCheck
	(*GSExportProcess)(nil),                       // 83: api.v0alpha.GSExportProcess
	(*P3ExportProcess)(nil),                       // 84: api.v0alpha.P3ExportProcess
	(*ComplianceExportProcess)(nil),               // 85: api.v0alpha.ComplianceExportProcess
	(*ScrubProcess)(nil),                          // 86: api.v0alpha.ScrubProcess
	(*DeleteScrubEntriesProcess)(nil),             // 87: api.v0alpha.DeleteScrubEntriesProcess
	(*FrequencyProcess)(nil),                      // 88: api.v0alpha.FrequencyProcess
	(*DispositionSet)(nil),                        // 89: api.v0alpha.DispositionSet
	(*DispositionPair)(nil),                       // 90: api.v0alpha.DispositionPair
	(*SftpExportProcess)(nil),                     // 91: api.v0alpha.SftpExportProcess
	(*WfmMultiSkill)(nil),                         // 92: api.v0alpha.WfmMultiSkill
	(*WfmExportProcess)(nil),                      // 93: api.v0alpha.WfmExportProcess
	(*ExportHeader)(nil),                          // 94: api.v0alpha.ExportHeader
	(*SortReq)(nil),                               // 95: api.v0alpha.SortReq
	(*CFSExportReq)(nil),                          // 96: api.v0alpha.CFSExportReq
	(*DeDupCriteria)(nil),                         // 97: api.v0alpha.DeDupCriteria
	(*SortCriteria)(nil),                          // 98: api.v0alpha.SortCriteria
	(*Error)(nil),                                 // 99: api.v0alpha.Error
	(*RecordFieldMap)(nil),                        // 100: api.v0alpha.RecordFieldMap
	(*Currency)(nil),                              // 101: api.v0alpha.Currency
	(*Phone)(nil),                                 // 102: api.v0alpha.Phone
	(*PostalCode)(nil),                            // 103: api.v0alpha.PostalCode
	(*Email)(nil),                                 // 104: api.v0alpha.Email
	(*DateTimeModifier)(nil),                      // 105: api.v0alpha.DateTimeModifier
	(*DateTime)(nil),                              // 106: api.v0alpha.DateTime
	(*EnrichedPhone)(nil),                         // 107: api.v0alpha.EnrichedPhone
	(*EnrichedZip)(nil),                           // 108: api.v0alpha.EnrichedZip
	(*Now)(nil),                                   // 109: api.v0alpha.Now
	(*Timestamp)(nil),                             // 110: api.v0alpha.Timestamp
	(*Date)(nil),                                  // 111: api.v0alpha.Date
	(*MonthAndDay)(nil),                           // 112: api.v0alpha.MonthAndDay
	(*DayOfWeek)(nil),                             // 113: api.v0alpha.DayOfWeek
	(*TimeOfDay)(nil),                             // 114: api.v0alpha.TimeOfDay
	(*FileFormatParams)(nil),                      // 115: api.v0alpha.FileFormatParams
	(*ReshapeProcess)(nil),                        // 116: api.v0alpha.ReshapeProcess
	(*ReshapeAction)(nil),                         // 117: api.v0alpha.ReshapeAction
	(*ContactManagerSink)(nil),                    // 118: api.v0alpha.ContactManagerSink
	(*SumProcess)(nil),                            // 119: api.v0alpha.SumProcess
	(*GroupBy)(nil),                               // 120: api.v0alpha.GroupBy
	(*ListMetrics)(nil),                           // 121: api.v0alpha.ListMetrics
	(*ParseReq)(nil),                              // 122: api.v0alpha.ParseReq
	(*ParseRes)(nil),                              // 123: api.v0alpha.ParseRes
	(*Event)(nil),                                 // 124: api.v0alpha.Event
	(*Events)(nil),                                // 125: api.v0alpha.Events
	(*ViewQueueReq)(nil),                          // 126: api.v0alpha.ViewQueueReq
	(*CollectionMetadata)(nil),                    // 127: api.v0alpha.CollectionMetadata
	(*CollectionEntry)(nil),                       // 128: api.v0alpha.CollectionEntry
	(*MatchReq)(nil),                              // 129: api.v0alpha.MatchReq
	(*MatchRes)(nil),                              // 130: api.v0alpha.MatchRes
	(*CollectionFieldMetadata)(nil),               // 131: api.v0alpha.CollectionFieldMetadata
	(*CollectionField)(nil),                       // 132: api.v0alpha.CollectionField
	(*GetCollectionReq)(nil),                      // 133: api.v0alpha.GetCollectionReq
	(*StreamCollectionReq)(nil),                   // 134: api.v0alpha.StreamCollectionReq
	(*DeleteCollectionReq)(nil),                   // 135: api.v0alpha.DeleteCollectionReq
	(*ResetCollectionReq)(nil),                    // 136: api.v0alpha.ResetCollectionReq
	(*ListCollectionsReq)(nil),                    // 137: api.v0alpha.ListCollectionsReq
	(*ListCollectionsRes)(nil),                    // 138: api.v0alpha.ListCollectionsRes
	(*SearchCollectionsPaginatedReq)(nil),         // 139: api.v0alpha.SearchCollectionsPaginatedReq
	(*Search)(nil),                                // 140: api.v0alpha.Search
	(*PaginatedSearchRes)(nil),                    // 141: api.v0alpha.PaginatedSearchRes
	(*GetCollectionEntriesReq)(nil),               // 142: api.v0alpha.GetCollectionEntriesReq
	(*GetCollectionEntriesRes)(nil),               // 143: api.v0alpha.GetCollectionEntriesRes
	(*DeleteCollectionEntryReq)(nil),              // 144: api.v0alpha.DeleteCollectionEntryReq
	(*ListCampaignLinksRes)(nil),                  // 145: api.v0alpha.ListCampaignLinksRes
	(*Link)(nil),                                  // 146: api.v0alpha.Link
	(*CjsSearchField)(nil),                        // 147: api.v0alpha.CjsSearchField
	(*CjsSearchDefinitionMetadata)(nil),           // 148: api.v0alpha.CjsSearchDefinitionMetadata
	(*CjsSearchDefinition)(nil),                   // 149: api.v0alpha.CjsSearchDefinition
	(*GetCjsSearchDefinitionReq)(nil),             // 150: api.v0alpha.GetCjsSearchDefinitionReq
	(*DeleteCjsSearchDefinitionReq)(nil),          // 151: api.v0alpha.DeleteCjsSearchDefinitionReq
	(*ListCjsSearchDefinitionsReq)(nil),           // 152: api.v0alpha.ListCjsSearchDefinitionsReq
	(*ListCjsSearchDefinitionsRes)(nil),           // 153: api.v0alpha.ListCjsSearchDefinitionsRes
	(*ExecuteCjsSearchDefinitionReq)(nil),         // 154: api.v0alpha.ExecuteCjsSearchDefinitionReq
	(*ExecuteCjsSearchDefinitionRes)(nil),         // 155: api.v0alpha.ExecuteCjsSearchDefinitionRes
	(*CollectionEntries)(nil),                     // 156: api.v0alpha.CollectionEntries
	(*CjsExecuteSearchField)(nil),                 // 157: api.v0alpha.CjsExecuteSearchField
	(*CjsSecureSearchCriteriaMetadata)(nil),       // 158: api.v0alpha.CjsSecureSearchCriteriaMetadata
	(*CjsSecureSearchCriteria)(nil),               // 159: api.v0alpha.CjsSecureSearchCriteria
	(*GetCjsSecureSearchCriteriaReq)(nil),         // 160: api.v0alpha.GetCjsSecureSearchCriteriaReq
	(*CjsSecureSearchCriteriaField)(nil),          // 161: api.v0alpha.CjsSecureSearchCriteriaField
	(*SplitCriteria)(nil),                         // 162: api.v0alpha.SplitCriteria
	(*UniquePair)(nil),                            // 163: api.v0alpha.UniquePair
	(*SplitByNamedUnique)(nil),                    // 164: api.v0alpha.SplitByNamedUnique
	(*SplitByUnique)(nil),                         // 165: api.v0alpha.SplitByUnique
	(*SplitByMaxSize)(nil),                        // 166: api.v0alpha.SplitByMaxSize
	(*SplitByEqualParts)(nil),                     // 167: api.v0alpha.SplitByEqualParts
	(*EpicEntrypoint)(nil),                        // 168: api.v0alpha.EpicEntrypoint
	(*RuntimeValues)(nil),                         // 169: api.v0alpha.RuntimeValues
	(*EntityURL)(nil),                             // 170: api.v0alpha.EntityURL
	(*SampleRequest)(nil),                         // 171: api.v0alpha.SampleRequest
	(*EHREntityType)(nil),                         // 172: api.v0alpha.EHREntityType
	(*ElementError_InvalidExpression)(nil),        // 173: api.v0alpha.ElementError.InvalidExpression
	(*ElementError_MissingField)(nil),             // 174: api.v0alpha.ElementError.MissingField
	(*ElementError_BadFieldType)(nil),             // 175: api.v0alpha.ElementError.BadFieldType
	(*ProcessFields_NestedField)(nil),             // 176: api.v0alpha.ProcessFields.NestedField
	(*ProcessFields_Field)(nil),                   // 177: api.v0alpha.ProcessFields.Field
	nil,                                           // 178: api.v0alpha.ComplianceProcessor.CallMetadataEntry
	nil,                                           // 179: api.v0alpha.PaymentLinkEnrichment.KeyMapEntry
	nil,                                           // 180: api.v0alpha.PortalLinkEnrichment.KeyMapEntry
	nil,                                           // 181: api.v0alpha.HttpReq.HeadersEntry
	nil,                                           // 182: api.v0alpha.HttpReq.NamedResponseValuesEntry
	(*LookupProcess_ComplProcess)(nil),            // 183: api.v0alpha.LookupProcess.ComplProcess
	(*LookupProcess_ListLookup)(nil),              // 184: api.v0alpha.LookupProcess.ListLookup
	(*LookupProcess_UrlLookup)(nil),               // 185: api.v0alpha.LookupProcess.UrlLookup
	(*FilterCheck_Value)(nil),                     // 186: api.v0alpha.FilterCheck.Value
	(*FilterCheck_ValueComparison)(nil),           // 187: api.v0alpha.FilterCheck.ValueComparison
	(*FilterCheck_TypeComparison)(nil),            // 188: api.v0alpha.FilterCheck.TypeComparison
	(*FilterCheck_ListComparison)(nil),            // 189: api.v0alpha.FilterCheck.ListComparison
	(*FilterCheck_ListComparison_FieldOrVal)(nil), // 190: api.v0alpha.FilterCheck.ListComparison.FieldOrVal
	nil,                                        // 191: api.v0alpha.RecordFieldMap.FieldsEntry
	(*ReshapeAction_Rename)(nil),               // 192: api.v0alpha.ReshapeAction.Rename
	(*ReshapeAction_AddValue)(nil),             // 193: api.v0alpha.ReshapeAction.AddValue
	(*ReshapeAction_AddDate)(nil),              // 194: api.v0alpha.ReshapeAction.AddDate
	(*ReshapeAction_AddField)(nil),             // 195: api.v0alpha.ReshapeAction.AddField
	(*ReshapeAction_SubtractValue)(nil),        // 196: api.v0alpha.ReshapeAction.SubtractValue
	(*ReshapeAction_SubtractField)(nil),        // 197: api.v0alpha.ReshapeAction.SubtractField
	(*ReshapeAction_Convert)(nil),              // 198: api.v0alpha.ReshapeAction.Convert
	(*ReshapeAction_Divide)(nil),               // 199: api.v0alpha.ReshapeAction.Divide
	(*ReshapeAction_Multiply)(nil),             // 200: api.v0alpha.ReshapeAction.Multiply
	(*ReshapeAction_Modulo)(nil),               // 201: api.v0alpha.ReshapeAction.Modulo
	(*ReshapeAction_RemoveField)(nil),          // 202: api.v0alpha.ReshapeAction.RemoveField
	(*ReshapeAction_AddNewField)(nil),          // 203: api.v0alpha.ReshapeAction.AddNewField
	(*ReshapeAction_AddNewFieldFromField)(nil), // 204: api.v0alpha.ReshapeAction.AddNewFieldFromField
	(*ReshapeAction_ChangeCurrencyType)(nil),   // 205: api.v0alpha.ReshapeAction.ChangeCurrencyType
	(*ReshapeAction_SetFieldValue)(nil),        // 206: api.v0alpha.ReshapeAction.SetFieldValue
	(*ReshapeAction_SetFieldFromField)(nil),    // 207: api.v0alpha.ReshapeAction.SetFieldFromField
	(*ReshapeAction_Merge)(nil),                // 208: api.v0alpha.ReshapeAction.Merge
	(*ReshapeAction_Pad)(nil),                  // 209: api.v0alpha.ReshapeAction.Pad
	(*ReshapeAction_Trim)(nil),                 // 210: api.v0alpha.ReshapeAction.Trim
	(*ReshapeAction_Extract)(nil),              // 211: api.v0alpha.ReshapeAction.Extract
	(*ReshapeAction_Merge_FieldOrVal)(nil),     // 212: api.v0alpha.ReshapeAction.Merge.FieldOrVal
	(*ReshapeAction_Extract_Index)(nil),        // 213: api.v0alpha.ReshapeAction.Extract.Index
	(*ReshapeAction_Extract_Slice)(nil),        // 214: api.v0alpha.ReshapeAction.Extract.Slice
	nil,                                        // 215: api.v0alpha.RuntimeValues.FileIdsEntry
	nil,                                        // 216: api.v0alpha.RuntimeValues.PreliminaryVarsEntry
	(commons.PipelineElementStatusType)(0),     // 217: api.commons.PipelineElementStatusType
	(*timestamppb.Timestamp)(nil),              // 218: google.protobuf.Timestamp
	(*wrapperspb.StringValue)(nil),             // 219: google.protobuf.StringValue
	(commons.FieldType)(0),                     // 220: api.commons.FieldType
	(commons.DateTimePrecision)(0),             // 221: api.commons.DateTimePrecision
	(commons.FileFormat)(0),                    // 222: api.commons.FileFormat
	(*commons.CommType)(nil),                   // 223: api.commons.CommType
	(commons.RunType)(0),                       // 224: api.commons.RunType
	(commons.ConsentActionType)(0),             // 225: api.commons.ConsentActionType
	(commons.ContentType)(0),                   // 226: api.commons.ContentType
	(commons.Channel)(0),                       // 227: api.commons.Channel
	(*durationpb.Duration)(nil),                // 228: google.protobuf.Duration
	(commons.HttpVerb)(0),                      // 229: api.commons.HttpVerb
	(*commons.PaginationTerminator)(nil),       // 230: api.commons.PaginationTerminator
	(*commons.FilePattern)(nil),                // 231: api.commons.FilePattern
	(commons.EnrichmentType)(0),                // 232: api.commons.EnrichmentType
	(commons.PrimarySource)(0),                 // 233: api.commons.PrimarySource
	(commons.DedupKeyPolicy)(0),                // 234: api.commons.DedupKeyPolicy
	(commons.ExportType)(0),                    // 235: api.commons.ExportType
	(commons.ChainOperator)(0),                 // 236: api.commons.ChainOperator
	(commons.DuplicatePolicyType)(0),           // 237: api.commons.DuplicatePolicyType
	(commons.AbsentPolicyType)(0),              // 238: api.commons.AbsentPolicyType
	(*commons.ConstructedFilename)(nil),        // 239: api.commons.ConstructedFilename
	(commons.DialOrderType)(0),                 // 240: api.commons.DialOrderType
	(commons.ComplianceListType)(0),            // 241: api.commons.ComplianceListType
	(commons.DeDupActions)(0),                  // 242: api.commons.DeDupActions
	(commons.SortOrder)(0),                     // 243: api.commons.SortOrder
	(commons.RecordType)(0),                    // 244: api.commons.RecordType
	(*commons.StringArraySql)(nil),             // 245: api.commons.StringArraySql
	(*wrapperspb.Int64Value)(nil),              // 246: google.protobuf.Int64Value
	(commons.EventState)(0),                    // 247: api.commons.EventState
	(commons.CompareOperator)(0),               // 248: api.commons.CompareOperator
	(*emptypb.Empty)(nil),                      // 249: google.protobuf.Empty
}
var file_api_v0alpha_lms_proto_depIdxs = []int32{
	5,   // 0: api.v0alpha.FindFieldUsagesRes.file_templates:type_name -> api.v0alpha.NameAndId
	5,   // 1: api.v0alpha.FindFieldUsagesRes.elements:type_name -> api.v0alpha.NameAndId
	173, // 2: api.v0alpha.ElementError.invalid_expression:type_name -> api.v0alpha.ElementError.InvalidExpression
	174, // 3: api.v0alpha.ElementError.missing_field:type_name -> api.v0alpha.ElementError.MissingField
	175, // 4: api.v0alpha.ElementError.bad_field_type:type_name -> api.v0alpha.ElementError.BadFieldType
	7,   // 5: api.v0alpha.ElementSummary.error:type_name -> api.v0alpha.ElementError
	8,   // 6: api.v0alpha.FindInvalidElementsRes.invalid_elements:type_name -> api.v0alpha.ElementSummary
	35,  // 7: api.v0alpha.ListFieldsForElementRes.fields:type_name -> api.v0alpha.Field
	35,  // 8: api.v0alpha.ListAutocompleteFieldsRes.fields:type_name -> api.v0alpha.Field
	53,  // 9: api.v0alpha.Element.transform:type_name -> api.v0alpha.Process
	217, // 10: api.v0alpha.Element.last_status:type_name -> api.commons.PipelineElementStatusType
	218, // 11: api.v0alpha.Element.created_date:type_name -> google.protobuf.Timestamp
	218, // 12: api.v0alpha.Element.last_edited:type_name -> google.protobuf.Timestamp
	53,  // 13: api.v0alpha.PeekListReq.process:type_name -> api.v0alpha.Process
	31,  // 14: api.v0alpha.PeekListRes.records:type_name -> api.v0alpha.RecordProto
	121, // 15: api.v0alpha.PeekListRes.metrics:type_name -> api.v0alpha.ListMetrics
	30,  // 16: api.v0alpha.GetHistoryRes.commits:type_name -> api.v0alpha.HistoryAndCount
	53,  // 17: api.v0alpha.History.process:type_name -> api.v0alpha.Process
	219, // 18: api.v0alpha.History.reason:type_name -> google.protobuf.StringValue
	218, // 19: api.v0alpha.History.upload_ts:type_name -> google.protobuf.Timestamp
	218, // 20: api.v0alpha.History.started_ts:type_name -> google.protobuf.Timestamp
	218, // 21: api.v0alpha.History.finished_ts:type_name -> google.protobuf.Timestamp
	121, // 22: api.v0alpha.History.metrics:type_name -> api.v0alpha.ListMetrics
	121, // 23: api.v0alpha.History.discard_metrics:type_name -> api.v0alpha.ListMetrics
	53,  // 24: api.v0alpha.HistoryAndCount.process:type_name -> api.v0alpha.Process
	219, // 25: api.v0alpha.HistoryAndCount.reason:type_name -> google.protobuf.StringValue
	218, // 26: api.v0alpha.HistoryAndCount.upload_ts:type_name -> google.protobuf.Timestamp
	218, // 27: api.v0alpha.HistoryAndCount.started_ts:type_name -> google.protobuf.Timestamp
	218, // 28: api.v0alpha.HistoryAndCount.finished_ts:type_name -> google.protobuf.Timestamp
	121, // 29: api.v0alpha.HistoryAndCount.metrics:type_name -> api.v0alpha.ListMetrics
	121, // 30: api.v0alpha.HistoryAndCount.discard_metrics:type_name -> api.v0alpha.ListMetrics
	41,  // 31: api.v0alpha.RecordProto.fields:type_name -> api.v0alpha.RecordFieldProto
	31,  // 32: api.v0alpha.RecordProtoPair.old:type_name -> api.v0alpha.RecordProto
	31,  // 33: api.v0alpha.RecordProtoPair.new:type_name -> api.v0alpha.RecordProto
	177, // 34: api.v0alpha.ProcessFields.fields:type_name -> api.v0alpha.ProcessFields.Field
	220, // 35: api.v0alpha.Field.type:type_name -> api.commons.FieldType
	218, // 36: api.v0alpha.Field.date_modified:type_name -> google.protobuf.Timestamp
	37,  // 37: api.v0alpha.Field.metadata:type_name -> api.v0alpha.FieldMetadata
	220, // 38: api.v0alpha.UpdateFieldReq.type:type_name -> api.commons.FieldType
	218, // 39: api.v0alpha.UpdateFieldReq.date_modified:type_name -> google.protobuf.Timestamp
	37,  // 40: api.v0alpha.UpdateFieldReq.metadata:type_name -> api.v0alpha.FieldMetadata
	221, // 41: api.v0alpha.FieldMetadata.precision:type_name -> api.commons.DateTimePrecision
	35,  // 42: api.v0alpha.Fields.fields:type_name -> api.v0alpha.Field
	105, // 43: api.v0alpha.FieldIndex.datetime:type_name -> api.v0alpha.DateTimeModifier
	102, // 44: api.v0alpha.RecordFieldProto.phone:type_name -> api.v0alpha.Phone
	101, // 45: api.v0alpha.RecordFieldProto.currency:type_name -> api.v0alpha.Currency
	103, // 46: api.v0alpha.RecordFieldProto.postal_code:type_name -> api.v0alpha.PostalCode
	104, // 47: api.v0alpha.RecordFieldProto.email:type_name -> api.v0alpha.Email
	106, // 48: api.v0alpha.RecordFieldProto.date_time:type_name -> api.v0alpha.DateTime
	42,  // 49: api.v0alpha.RecordFieldProto.repeated_records:type_name -> api.v0alpha.RepeatedRecords
	100, // 50: api.v0alpha.RecordFieldProto.record_field_map:type_name -> api.v0alpha.RecordFieldMap
	99,  // 51: api.v0alpha.RecordFieldProto.err:type_name -> api.v0alpha.Error
	107, // 52: api.v0alpha.RecordFieldProto.enriched_phone:type_name -> api.v0alpha.EnrichedPhone
	108, // 53: api.v0alpha.RecordFieldProto.enriched_zip:type_name -> api.v0alpha.EnrichedZip
	31,  // 54: api.v0alpha.RepeatedRecords.records:type_name -> api.v0alpha.RecordProto
	220, // 55: api.v0alpha.FileTemplateField.type:type_name -> api.commons.FieldType
	45,  // 56: api.v0alpha.FileTemplateFields.fields:type_name -> api.v0alpha.FileTemplateField
	220, // 57: api.v0alpha.FieldTypes.values:type_name -> api.commons.FieldType
	115, // 58: api.v0alpha.FileTemplate.file_format_params:type_name -> api.v0alpha.FileFormatParams
	222, // 59: api.v0alpha.FileTemplate.file_format:type_name -> api.commons.FileFormat
	35,  // 60: api.v0alpha.FileTemplate.fields:type_name -> api.v0alpha.Field
	74,  // 61: api.v0alpha.Process.append:type_name -> api.v0alpha.AppendProcess
	98,  // 62: api.v0alpha.Process.sort:type_name -> api.v0alpha.SortCriteria
	80,  // 63: api.v0alpha.Process.filter:type_name -> api.v0alpha.FilterProcess
	83,  // 64: api.v0alpha.Process.gs_export:type_name -> api.v0alpha.GSExportProcess
	84,  // 65: api.v0alpha.Process.p3_export:type_name -> api.v0alpha.P3ExportProcess
	76,  // 66: api.v0alpha.Process.compl:type_name -> api.v0alpha.ComplProcess
	97,  // 67: api.v0alpha.Process.dedup:type_name -> api.v0alpha.DeDupCriteria
	79,  // 68: api.v0alpha.Process.cfs_export:type_name -> api.v0alpha.CFSExportProcess
	91,  // 69: api.v0alpha.Process.sftp_export:type_name -> api.v0alpha.SftpExportProcess
	116, // 70: api.v0alpha.Process.reshape:type_name -> api.v0alpha.ReshapeProcess
	75,  // 71: api.v0alpha.Process.lookup:type_name -> api.v0alpha.LookupProcess
	61,  // 72: api.v0alpha.Process.entrypoint:type_name -> api.v0alpha.EntrypointProcess
	85,  // 73: api.v0alpha.Process.compliance_export:type_name -> api.v0alpha.ComplianceExportProcess
	62,  // 74: api.v0alpha.Process.api_entrypoint:type_name -> api.v0alpha.ApiEntrypoint
	69,  // 75: api.v0alpha.Process.sftp_import:type_name -> api.v0alpha.SftpImport
	86,  // 76: api.v0alpha.Process.scrub:type_name -> api.v0alpha.ScrubProcess
	88,  // 77: api.v0alpha.Process.frequency:type_name -> api.v0alpha.FrequencyProcess
	71,  // 78: api.v0alpha.Process.cjs_import:type_name -> api.v0alpha.CjsImportProcess
	72,  // 79: api.v0alpha.Process.cjs_export:type_name -> api.v0alpha.CjsExportProcess
	73,  // 80: api.v0alpha.Process.cjs_enrich:type_name -> api.v0alpha.CjsEnrichmentProcess
	64,  // 81: api.v0alpha.Process.web_entrypoint:type_name -> api.v0alpha.WebEntrypointProcess
	87,  // 82: api.v0alpha.Process.delete_scrub_entries:type_name -> api.v0alpha.DeleteScrubEntriesProcess
	93,  // 83: api.v0alpha.Process.wfm_export:type_name -> api.v0alpha.WfmExportProcess
	58,  // 84: api.v0alpha.Process.link_enrich:type_name -> api.v0alpha.PaymentLinkEnrichment
	70,  // 85: api.v0alpha.Process.rnd:type_name -> api.v0alpha.RndEnrichmentProcess
	56,  // 86: api.v0alpha.Process.consent_enrich:type_name -> api.v0alpha.ConsentEnrichmentProcess
	57,  // 87: api.v0alpha.Process.consent_export:type_name -> api.v0alpha.ConsentExportProcess
	54,  // 88: api.v0alpha.Process.compliance_processor:type_name -> api.v0alpha.ComplianceProcessor
	55,  // 89: api.v0alpha.Process.consent_entrypoint:type_name -> api.v0alpha.ConsentEntrypointProcess
	59,  // 90: api.v0alpha.Process.portal_link_enrich:type_name -> api.v0alpha.PortalLinkEnrichment
	65,  // 91: api.v0alpha.Process.bulk_web_entrypoint:type_name -> api.v0alpha.BulkWebEntrypointProcess
	66,  // 92: api.v0alpha.Process.omni_exchange_process:type_name -> api.v0alpha.OmniExchangeProcess
	67,  // 93: api.v0alpha.Process.web_exchange_process:type_name -> api.v0alpha.WebExchangeProcess
	162, // 94: api.v0alpha.Process.split:type_name -> api.v0alpha.SplitCriteria
	168, // 95: api.v0alpha.Process.epic_entry_point:type_name -> api.v0alpha.EpicEntrypoint
	118, // 96: api.v0alpha.Process.contact_manager_sink:type_name -> api.v0alpha.ContactManagerSink
	119, // 97: api.v0alpha.Process.sum:type_name -> api.v0alpha.SumProcess
	223, // 98: api.v0alpha.ComplianceProcessor.comm_type:type_name -> api.commons.CommType
	178, // 99: api.v0alpha.ComplianceProcessor.call_metadata:type_name -> api.v0alpha.ComplianceProcessor.CallMetadataEntry
	224, // 100: api.v0alpha.ConsentExportProcess.run_type:type_name -> api.commons.RunType
	225, // 101: api.v0alpha.ConsentExportProcess.action:type_name -> api.commons.ConsentActionType
	226, // 102: api.v0alpha.ConsentExportProcess.content_type_val:type_name -> api.commons.ContentType
	227, // 103: api.v0alpha.ConsentExportProcess.channel_type_val:type_name -> api.commons.Channel
	218, // 104: api.v0alpha.ConsentExportProcess.expiration_date:type_name -> google.protobuf.Timestamp
	228, // 105: api.v0alpha.ConsentExportProcess.expiration_after_duration:type_name -> google.protobuf.Duration
	179, // 106: api.v0alpha.PaymentLinkEnrichment.key_map:type_name -> api.v0alpha.PaymentLinkEnrichment.KeyMapEntry
	180, // 107: api.v0alpha.PortalLinkEnrichment.key_map:type_name -> api.v0alpha.PortalLinkEnrichment.KeyMapEntry
	60,  // 108: api.v0alpha.PortalLinkEnrichment.expiration:type_name -> api.v0alpha.Expiration
	0,   // 109: api.v0alpha.Expiration.units:type_name -> api.v0alpha.TimeUnit
	181, // 110: api.v0alpha.HttpReq.headers:type_name -> api.v0alpha.HttpReq.HeadersEntry
	229, // 111: api.v0alpha.HttpReq.method:type_name -> api.commons.HttpVerb
	182, // 112: api.v0alpha.HttpReq.named_response_values:type_name -> api.v0alpha.HttpReq.NamedResponseValuesEntry
	63,  // 113: api.v0alpha.WebEntrypointProcess.http_requests:type_name -> api.v0alpha.HttpReq
	48,  // 114: api.v0alpha.WebEntrypointProcess.file_template:type_name -> api.v0alpha.FileTemplate
	63,  // 115: api.v0alpha.BulkWebEntrypointProcess.preliminary_requests:type_name -> api.v0alpha.HttpReq
	68,  // 116: api.v0alpha.BulkWebEntrypointProcess.paginated_request:type_name -> api.v0alpha.PaginatedHttpRequest
	63,  // 117: api.v0alpha.WebExchangeProcess.http_requests:type_name -> api.v0alpha.HttpReq
	63,  // 118: api.v0alpha.PaginatedHttpRequest.iteration_request:type_name -> api.v0alpha.HttpReq
	230, // 119: api.v0alpha.PaginatedHttpRequest.end_for_any:type_name -> api.commons.PaginationTerminator
	230, // 120: api.v0alpha.PaginatedHttpRequest.end_for_all:type_name -> api.commons.PaginationTerminator
	230, // 121: api.v0alpha.PaginatedHttpRequest.request_not_ready:type_name -> api.commons.PaginationTerminator
	231, // 122: api.v0alpha.SftpImport.file_pattern:type_name -> api.commons.FilePattern
	94,  // 123: api.v0alpha.CjsExportProcess.header:type_name -> api.v0alpha.ExportHeader
	224, // 124: api.v0alpha.CjsExportProcess.run_type:type_name -> api.commons.RunType
	232, // 125: api.v0alpha.CjsEnrichmentProcess.enrich_type:type_name -> api.commons.EnrichmentType
	233, // 126: api.v0alpha.CjsEnrichmentProcess.primary_source:type_name -> api.commons.PrimarySource
	234, // 127: api.v0alpha.CjsEnrichmentProcess.dedup_key_policy:type_name -> api.commons.DedupKeyPolicy
	183, // 128: api.v0alpha.LookupProcess.compl:type_name -> api.v0alpha.LookupProcess.ComplProcess
	184, // 129: api.v0alpha.LookupProcess.list:type_name -> api.v0alpha.LookupProcess.ListLookup
	185, // 130: api.v0alpha.LookupProcess.url:type_name -> api.v0alpha.LookupProcess.UrlLookup
	235, // 131: api.v0alpha.CFSExportConfig.type:type_name -> api.commons.ExportType
	94,  // 132: api.v0alpha.CFSExportReqHeader.export_header:type_name -> api.v0alpha.ExportHeader
	77,  // 133: api.v0alpha.CFSExportReqHeader.configs:type_name -> api.v0alpha.CFSExportConfig
	94,  // 134: api.v0alpha.CFSExportProcess.export_header:type_name -> api.v0alpha.ExportHeader
	77,  // 135: api.v0alpha.CFSExportProcess.configs:type_name -> api.v0alpha.CFSExportConfig
	81,  // 136: api.v0alpha.FilterProcess.operations:type_name -> api.v0alpha.FilterOperation
	82,  // 137: api.v0alpha.FilterOperation.checks:type_name -> api.v0alpha.FilterCheck
	236, // 138: api.v0alpha.FilterOperation.operator:type_name -> api.commons.ChainOperator
	187, // 139: api.v0alpha.FilterCheck.val_comp:type_name -> api.v0alpha.FilterCheck.ValueComparison
	188, // 140: api.v0alpha.FilterCheck.type_comp:type_name -> api.v0alpha.FilterCheck.TypeComparison
	189, // 141: api.v0alpha.FilterCheck.list_comp:type_name -> api.v0alpha.FilterCheck.ListComparison
	94,  // 142: api.v0alpha.P3ExportProcess.header:type_name -> api.v0alpha.ExportHeader
	237, // 143: api.v0alpha.P3ExportProcess.dupe_policy:type_name -> api.commons.DuplicatePolicyType
	238, // 144: api.v0alpha.P3ExportProcess.absent_policy:type_name -> api.commons.AbsentPolicyType
	224, // 145: api.v0alpha.P3ExportProcess.run_type:type_name -> api.commons.RunType
	231, // 146: api.v0alpha.P3ExportProcess.file_pattern:type_name -> api.commons.FilePattern
	239, // 147: api.v0alpha.P3ExportProcess.filename:type_name -> api.commons.ConstructedFilename
	218, // 148: api.v0alpha.P3ExportProcess.start_time:type_name -> google.protobuf.Timestamp
	218, // 149: api.v0alpha.P3ExportProcess.end_time:type_name -> google.protobuf.Timestamp
	240, // 150: api.v0alpha.P3ExportProcess.dial_order:type_name -> api.commons.DialOrderType
	222, // 151: api.v0alpha.P3ExportProcess.file_format:type_name -> api.commons.FileFormat
	224, // 152: api.v0alpha.ComplianceExportProcess.run_type:type_name -> api.commons.RunType
	241, // 153: api.v0alpha.ComplianceExportProcess.compliance_list_type:type_name -> api.commons.ComplianceListType
	90,  // 154: api.v0alpha.FrequencyProcess.dispositions:type_name -> api.v0alpha.DispositionPair
	89,  // 155: api.v0alpha.FrequencyProcess.disposition_sets:type_name -> api.v0alpha.DispositionSet
	90,  // 156: api.v0alpha.DispositionSet.dispositions:type_name -> api.v0alpha.DispositionPair
	222, // 157: api.v0alpha.SftpExportProcess.fileformat:type_name -> api.commons.FileFormat
	231, // 158: api.v0alpha.SftpExportProcess.file_pattern:type_name -> api.commons.FilePattern
	224, // 159: api.v0alpha.SftpExportProcess.run_type:type_name -> api.commons.RunType
	94,  // 160: api.v0alpha.SftpExportProcess.header:type_name -> api.v0alpha.ExportHeader
	239, // 161: api.v0alpha.SftpExportProcess.filename:type_name -> api.commons.ConstructedFilename
	92,  // 162: api.v0alpha.WfmExportProcess.multi:type_name -> api.v0alpha.WfmMultiSkill
	98,  // 163: api.v0alpha.SortReq.criteria:type_name -> api.v0alpha.SortCriteria
	31,  // 164: api.v0alpha.SortReq.record:type_name -> api.v0alpha.RecordProto
	78,  // 165: api.v0alpha.CFSExportReq.header:type_name -> api.v0alpha.CFSExportReqHeader
	31,  // 166: api.v0alpha.CFSExportReq.record:type_name -> api.v0alpha.RecordProto
	242, // 167: api.v0alpha.DeDupCriteria.action:type_name -> api.commons.DeDupActions
	39,  // 168: api.v0alpha.DeDupCriteria.fields:type_name -> api.v0alpha.FieldIndex
	82,  // 169: api.v0alpha.DeDupCriteria.unless:type_name -> api.v0alpha.FilterCheck
	243, // 170: api.v0alpha.SortCriteria.ordering:type_name -> api.commons.SortOrder
	39,  // 171: api.v0alpha.SortCriteria.field_order:type_name -> api.v0alpha.FieldIndex
	191, // 172: api.v0alpha.RecordFieldMap.fields:type_name -> api.v0alpha.RecordFieldMap.FieldsEntry
	221, // 173: api.v0alpha.DateTime.precision:type_name -> api.commons.DateTimePrecision
	105, // 174: api.v0alpha.DateTime.modifier:type_name -> api.v0alpha.DateTimeModifier
	117, // 175: api.v0alpha.ReshapeProcess.actions:type_name -> api.v0alpha.ReshapeAction
	244, // 176: api.v0alpha.ReshapeAction.matching_type:type_name -> api.commons.RecordType
	82,  // 177: api.v0alpha.ReshapeAction.predicate:type_name -> api.v0alpha.FilterCheck
	192, // 178: api.v0alpha.ReshapeAction.rename:type_name -> api.v0alpha.ReshapeAction.Rename
	193, // 179: api.v0alpha.ReshapeAction.add_value:type_name -> api.v0alpha.ReshapeAction.AddValue
	195, // 180: api.v0alpha.ReshapeAction.add_field:type_name -> api.v0alpha.ReshapeAction.AddField
	194, // 181: api.v0alpha.ReshapeAction.add_date:type_name -> api.v0alpha.ReshapeAction.AddDate
	196, // 182: api.v0alpha.ReshapeAction.subtract_value:type_name -> api.v0alpha.ReshapeAction.SubtractValue
	197, // 183: api.v0alpha.ReshapeAction.subtract_field:type_name -> api.v0alpha.ReshapeAction.SubtractField
	198, // 184: api.v0alpha.ReshapeAction.convert:type_name -> api.v0alpha.ReshapeAction.Convert
	202, // 185: api.v0alpha.ReshapeAction.remove_field:type_name -> api.v0alpha.ReshapeAction.RemoveField
	203, // 186: api.v0alpha.ReshapeAction.add_new_field:type_name -> api.v0alpha.ReshapeAction.AddNewField
	205, // 187: api.v0alpha.ReshapeAction.change_currency_type:type_name -> api.v0alpha.ReshapeAction.ChangeCurrencyType
	199, // 188: api.v0alpha.ReshapeAction.divide:type_name -> api.v0alpha.ReshapeAction.Divide
	200, // 189: api.v0alpha.ReshapeAction.multiply:type_name -> api.v0alpha.ReshapeAction.Multiply
	201, // 190: api.v0alpha.ReshapeAction.modulo:type_name -> api.v0alpha.ReshapeAction.Modulo
	208, // 191: api.v0alpha.ReshapeAction.merge:type_name -> api.v0alpha.ReshapeAction.Merge
	206, // 192: api.v0alpha.ReshapeAction.set_field_value:type_name -> api.v0alpha.ReshapeAction.SetFieldValue
	204, // 193: api.v0alpha.ReshapeAction.add_new_field_from_field:type_name -> api.v0alpha.ReshapeAction.AddNewFieldFromField
	207, // 194: api.v0alpha.ReshapeAction.set_field_from_field:type_name -> api.v0alpha.ReshapeAction.SetFieldFromField
	209, // 195: api.v0alpha.ReshapeAction.pad:type_name -> api.v0alpha.ReshapeAction.Pad
	210, // 196: api.v0alpha.ReshapeAction.trim:type_name -> api.v0alpha.ReshapeAction.Trim
	211, // 197: api.v0alpha.ReshapeAction.extract:type_name -> api.v0alpha.ReshapeAction.Extract
	228, // 198: api.v0alpha.ContactManagerSink.lifetime:type_name -> google.protobuf.Duration
	120, // 199: api.v0alpha.SumProcess.group_by:type_name -> api.v0alpha.GroupBy
	81,  // 200: api.v0alpha.SumProcess.filter:type_name -> api.v0alpha.FilterOperation
	244, // 201: api.v0alpha.ListMetrics.field_types:type_name -> api.commons.RecordType
	220, // 202: api.v0alpha.ListMetrics.ftypes:type_name -> api.commons.FieldType
	224, // 203: api.v0alpha.ListMetrics.run_type:type_name -> api.commons.RunType
	53,  // 204: api.v0alpha.ParseRes.process:type_name -> api.v0alpha.Process
	219, // 205: api.v0alpha.Event.parent_id:type_name -> google.protobuf.StringValue
	245, // 206: api.v0alpha.Event.input_ids:type_name -> api.commons.StringArraySql
	53,  // 207: api.v0alpha.Event.process:type_name -> api.v0alpha.Process
	218, // 208: api.v0alpha.Event.upload_ts:type_name -> google.protobuf.Timestamp
	218, // 209: api.v0alpha.Event.started_ts:type_name -> google.protobuf.Timestamp
	218, // 210: api.v0alpha.Event.finished_ts:type_name -> google.protobuf.Timestamp
	218, // 211: api.v0alpha.Event.backoff_till:type_name -> google.protobuf.Timestamp
	246, // 212: api.v0alpha.Event.latest_history:type_name -> google.protobuf.Int64Value
	124, // 213: api.v0alpha.Events.events:type_name -> api.v0alpha.Event
	218, // 214: api.v0alpha.ViewQueueReq.newer_than:type_name -> google.protobuf.Timestamp
	218, // 215: api.v0alpha.ViewQueueReq.no_newer_than:type_name -> google.protobuf.Timestamp
	131, // 216: api.v0alpha.CollectionMetadata.fields:type_name -> api.v0alpha.CollectionFieldMetadata
	218, // 217: api.v0alpha.CollectionMetadata.created_on:type_name -> google.protobuf.Timestamp
	218, // 218: api.v0alpha.CollectionMetadata.last_queried:type_name -> google.protobuf.Timestamp
	218, // 219: api.v0alpha.CollectionMetadata.last_updated:type_name -> google.protobuf.Timestamp
	218, // 220: api.v0alpha.CollectionMetadata.last_searched:type_name -> google.protobuf.Timestamp
	132, // 221: api.v0alpha.CollectionEntry.fields:type_name -> api.v0alpha.CollectionField
	218, // 222: api.v0alpha.CollectionEntry.last_updated:type_name -> google.protobuf.Timestamp
	132, // 223: api.v0alpha.MatchReq.fields:type_name -> api.v0alpha.CollectionField
	128, // 224: api.v0alpha.MatchRes.entries:type_name -> api.v0alpha.CollectionEntry
	220, // 225: api.v0alpha.CollectionFieldMetadata.field_type:type_name -> api.commons.FieldType
	127, // 226: api.v0alpha.ListCollectionsRes.collections:type_name -> api.v0alpha.CollectionMetadata
	140, // 227: api.v0alpha.SearchCollectionsPaginatedReq.search:type_name -> api.v0alpha.Search
	128, // 228: api.v0alpha.PaginatedSearchRes.entries:type_name -> api.v0alpha.CollectionEntry
	127, // 229: api.v0alpha.GetCollectionEntriesRes.metadata:type_name -> api.v0alpha.CollectionMetadata
	128, // 230: api.v0alpha.GetCollectionEntriesRes.entries:type_name -> api.v0alpha.CollectionEntry
	146, // 231: api.v0alpha.ListCampaignLinksRes.Links:type_name -> api.v0alpha.Link
	220, // 232: api.v0alpha.CjsSearchField.field_type:type_name -> api.commons.FieldType
	218, // 233: api.v0alpha.CjsSearchDefinitionMetadata.created_date:type_name -> google.protobuf.Timestamp
	218, // 234: api.v0alpha.CjsSearchDefinitionMetadata.last_edited:type_name -> google.protobuf.Timestamp
	148, // 235: api.v0alpha.CjsSearchDefinition.metadata:type_name -> api.v0alpha.CjsSearchDefinitionMetadata
	147, // 236: api.v0alpha.CjsSearchDefinition.search_fields:type_name -> api.v0alpha.CjsSearchField
	147, // 237: api.v0alpha.CjsSearchDefinition.whitelisted_return_fields:type_name -> api.v0alpha.CjsSearchField
	147, // 238: api.v0alpha.CjsSearchDefinition.blacklisted_return_fields:type_name -> api.v0alpha.CjsSearchField
	147, // 239: api.v0alpha.CjsSearchDefinition.unique_identifiers:type_name -> api.v0alpha.CjsSearchField
	148, // 240: api.v0alpha.ListCjsSearchDefinitionsRes.definitions:type_name -> api.v0alpha.CjsSearchDefinitionMetadata
	157, // 241: api.v0alpha.ExecuteCjsSearchDefinitionReq.search_fields:type_name -> api.v0alpha.CjsExecuteSearchField
	156, // 242: api.v0alpha.ExecuteCjsSearchDefinitionRes.collection_entries:type_name -> api.v0alpha.CollectionEntries
	127, // 243: api.v0alpha.CollectionEntries.metadata:type_name -> api.v0alpha.CollectionMetadata
	128, // 244: api.v0alpha.CollectionEntries.entries:type_name -> api.v0alpha.CollectionEntry
	220, // 245: api.v0alpha.CjsExecuteSearchField.field_type:type_name -> api.commons.FieldType
	218, // 246: api.v0alpha.CjsSecureSearchCriteriaMetadata.created_on:type_name -> google.protobuf.Timestamp
	218, // 247: api.v0alpha.CjsSecureSearchCriteriaMetadata.last_updated:type_name -> google.protobuf.Timestamp
	158, // 248: api.v0alpha.CjsSecureSearchCriteria.metadata:type_name -> api.v0alpha.CjsSecureSearchCriteriaMetadata
	161, // 249: api.v0alpha.CjsSecureSearchCriteria.fields:type_name -> api.v0alpha.CjsSecureSearchCriteriaField
	220, // 250: api.v0alpha.CjsSecureSearchCriteriaField.field_type:type_name -> api.commons.FieldType
	165, // 251: api.v0alpha.SplitCriteria.unique:type_name -> api.v0alpha.SplitByUnique
	166, // 252: api.v0alpha.SplitCriteria.max_size:type_name -> api.v0alpha.SplitByMaxSize
	167, // 253: api.v0alpha.SplitCriteria.equal_parts:type_name -> api.v0alpha.SplitByEqualParts
	39,  // 254: api.v0alpha.UniquePair.split_on_fields:type_name -> api.v0alpha.FieldIndex
	163, // 255: api.v0alpha.SplitByNamedUnique.named_fields:type_name -> api.v0alpha.UniquePair
	39,  // 256: api.v0alpha.SplitByUnique.split_on_fields:type_name -> api.v0alpha.FieldIndex
	1,   // 257: api.v0alpha.EpicEntrypoint.entity_types:type_name -> api.v0alpha.EpicEntityType
	169, // 258: api.v0alpha.EpicEntrypoint.runtime_values:type_name -> api.v0alpha.RuntimeValues
	35,  // 259: api.v0alpha.EpicEntrypoint.fields:type_name -> api.v0alpha.Field
	247, // 260: api.v0alpha.RuntimeValues.state:type_name -> api.commons.EventState
	170, // 261: api.v0alpha.RuntimeValues.data_urls:type_name -> api.v0alpha.EntityURL
	215, // 262: api.v0alpha.RuntimeValues.file_ids:type_name -> api.v0alpha.RuntimeValues.FileIdsEntry
	216, // 263: api.v0alpha.RuntimeValues.preliminary_vars:type_name -> api.v0alpha.RuntimeValues.PreliminaryVarsEntry
	1,   // 264: api.v0alpha.EntityURL.entity_type:type_name -> api.v0alpha.EpicEntityType
	1,   // 265: api.v0alpha.EHREntityType.epic_entity:type_name -> api.v0alpha.EpicEntityType
	244, // 266: api.v0alpha.ProcessFields.NestedField.field_type:type_name -> api.commons.RecordType
	244, // 267: api.v0alpha.ProcessFields.Field.field_type:type_name -> api.commons.RecordType
	176, // 268: api.v0alpha.ProcessFields.Field.nested:type_name -> api.v0alpha.ProcessFields.NestedField
	48,  // 269: api.v0alpha.LookupProcess.UrlLookup.file_template:type_name -> api.v0alpha.FileTemplate
	39,  // 270: api.v0alpha.FilterCheck.Value.field_name:type_name -> api.v0alpha.FieldIndex
	106, // 271: api.v0alpha.FilterCheck.Value.date_time:type_name -> api.v0alpha.DateTime
	39,  // 272: api.v0alpha.FilterCheck.ValueComparison.field_name:type_name -> api.v0alpha.FieldIndex
	248, // 273: api.v0alpha.FilterCheck.ValueComparison.op:type_name -> api.commons.CompareOperator
	186, // 274: api.v0alpha.FilterCheck.ValueComparison.value:type_name -> api.v0alpha.FilterCheck.Value
	39,  // 275: api.v0alpha.FilterCheck.TypeComparison.field_name:type_name -> api.v0alpha.FieldIndex
	244, // 276: api.v0alpha.FilterCheck.TypeComparison.matches_field_type:type_name -> api.commons.RecordType
	39,  // 277: api.v0alpha.FilterCheck.ListComparison.field_name:type_name -> api.v0alpha.FieldIndex
	190, // 278: api.v0alpha.FilterCheck.ListComparison.data:type_name -> api.v0alpha.FilterCheck.ListComparison.FieldOrVal
	39,  // 279: api.v0alpha.FilterCheck.ListComparison.FieldOrVal.field:type_name -> api.v0alpha.FieldIndex
	186, // 280: api.v0alpha.FilterCheck.ListComparison.FieldOrVal.value:type_name -> api.v0alpha.FilterCheck.Value
	41,  // 281: api.v0alpha.RecordFieldMap.FieldsEntry.value:type_name -> api.v0alpha.RecordFieldProto
	105, // 282: api.v0alpha.ReshapeAction.AddDate.datetime:type_name -> api.v0alpha.DateTimeModifier
	39,  // 283: api.v0alpha.ReshapeAction.AddField.other_field:type_name -> api.v0alpha.FieldIndex
	39,  // 284: api.v0alpha.ReshapeAction.SubtractField.other_field:type_name -> api.v0alpha.FieldIndex
	244, // 285: api.v0alpha.ReshapeAction.Convert.newType:type_name -> api.commons.RecordType
	35,  // 286: api.v0alpha.ReshapeAction.Convert.new_field:type_name -> api.v0alpha.Field
	41,  // 287: api.v0alpha.ReshapeAction.Convert.default_value:type_name -> api.v0alpha.RecordFieldProto
	41,  // 288: api.v0alpha.ReshapeAction.AddNewField.starting_value:type_name -> api.v0alpha.RecordFieldProto
	39,  // 289: api.v0alpha.ReshapeAction.AddNewFieldFromField.other_field:type_name -> api.v0alpha.FieldIndex
	41,  // 290: api.v0alpha.ReshapeAction.SetFieldValue.value:type_name -> api.v0alpha.RecordFieldProto
	39,  // 291: api.v0alpha.ReshapeAction.SetFieldFromField.other_field:type_name -> api.v0alpha.FieldIndex
	212, // 292: api.v0alpha.ReshapeAction.Merge.data:type_name -> api.v0alpha.ReshapeAction.Merge.FieldOrVal
	214, // 293: api.v0alpha.ReshapeAction.Extract.parts:type_name -> api.v0alpha.ReshapeAction.Extract.Slice
	39,  // 294: api.v0alpha.ReshapeAction.Merge.FieldOrVal.field:type_name -> api.v0alpha.FieldIndex
	213, // 295: api.v0alpha.ReshapeAction.Extract.Slice.start_index:type_name -> api.v0alpha.ReshapeAction.Extract.Index
	213, // 296: api.v0alpha.ReshapeAction.Extract.Slice.end_index:type_name -> api.v0alpha.ReshapeAction.Extract.Index
	2,   // 297: api.v0alpha.LMS.GetPublicKey:input_type -> api.v0alpha.GetPublicKeyReq
	48,  // 298: api.v0alpha.LMS.CreateFileTemplate:input_type -> api.v0alpha.FileTemplate
	44,  // 299: api.v0alpha.LMS.ListFileTemplates:input_type -> api.v0alpha.GetFileTemplatesReq
	48,  // 300: api.v0alpha.LMS.UpdateFileTemplate:input_type -> api.v0alpha.FileTemplate
	48,  // 301: api.v0alpha.LMS.DeleteFileTemplate:input_type -> api.v0alpha.FileTemplate
	48,  // 302: api.v0alpha.LMS.GetFileTemplate:input_type -> api.v0alpha.FileTemplate
	35,  // 303: api.v0alpha.LMS.CreateField:input_type -> api.v0alpha.Field
	40,  // 304: api.v0alpha.LMS.ListFields:input_type -> api.v0alpha.ListFieldsReq
	35,  // 305: api.v0alpha.LMS.GetField:input_type -> api.v0alpha.Field
	36,  // 306: api.v0alpha.LMS.UpdateField:input_type -> api.v0alpha.UpdateFieldReq
	35,  // 307: api.v0alpha.LMS.DeleteField:input_type -> api.v0alpha.Field
	18,  // 308: api.v0alpha.LMS.ListAvailableFieldsByElementId:input_type -> api.v0alpha.ListAvailableFieldsByElementIdReq
	19,  // 309: api.v0alpha.LMS.ListFieldsForElement:input_type -> api.v0alpha.ListFieldsForElementReq
	21,  // 310: api.v0alpha.LMS.ListAutocompleteFields:input_type -> api.v0alpha.ListAutocompleteFieldsReq
	249, // 311: api.v0alpha.LMS.ListCampaignLinks:input_type -> google.protobuf.Empty
	25,  // 312: api.v0alpha.LMS.PeekList:input_type -> api.v0alpha.PeekListReq
	27,  // 313: api.v0alpha.LMS.GetHistory:input_type -> api.v0alpha.GetHistoryReq
	24,  // 314: api.v0alpha.LMS.CreateElement:input_type -> api.v0alpha.Element
	43,  // 315: api.v0alpha.LMS.ListElements:input_type -> api.v0alpha.ListElementsReq
	23,  // 316: api.v0alpha.LMS.GetElement:input_type -> api.v0alpha.ElementPK
	24,  // 317: api.v0alpha.LMS.UpdateElement:input_type -> api.v0alpha.Element
	24,  // 318: api.v0alpha.LMS.DeleteElement:input_type -> api.v0alpha.Element
	24,  // 319: api.v0alpha.LMS.CopyPipelineUpstream:input_type -> api.v0alpha.Element
	24,  // 320: api.v0alpha.LMS.CopyPipelineDownstream:input_type -> api.v0alpha.Element
	13,  // 321: api.v0alpha.LMS.ProcessElement:input_type -> api.v0alpha.ProcessElementReq
	14,  // 322: api.v0alpha.LMS.ProcessList:input_type -> api.v0alpha.ProcessListRequest
	16,  // 323: api.v0alpha.LMS.StreamList:input_type -> api.v0alpha.StreamListRequest
	249, // 324: api.v0alpha.LMS.GetAvailableFields:input_type -> google.protobuf.Empty
	249, // 325: api.v0alpha.LMS.ListNewEvents:input_type -> google.protobuf.Empty
	126, // 326: api.v0alpha.LMS.ViewQueue:input_type -> api.v0alpha.ViewQueueReq
	122, // 327: api.v0alpha.LMS.Autocomplete:input_type -> api.v0alpha.ParseReq
	11,  // 328: api.v0alpha.LMS.GetComplianceScrubLists:input_type -> api.v0alpha.GetComplianceScrubListsReq
	4,   // 329: api.v0alpha.LMS.FindFieldUsages:input_type -> api.v0alpha.FindFieldUsagesReq
	9,   // 330: api.v0alpha.LMS.FindInvalidElements:input_type -> api.v0alpha.FindInvalidElementsReq
	127, // 331: api.v0alpha.LMS.CreateCollection:input_type -> api.v0alpha.CollectionMetadata
	133, // 332: api.v0alpha.LMS.GetCollection:input_type -> api.v0alpha.GetCollectionReq
	127, // 333: api.v0alpha.LMS.UpdateCollection:input_type -> api.v0alpha.CollectionMetadata
	135, // 334: api.v0alpha.LMS.DeleteCollection:input_type -> api.v0alpha.DeleteCollectionReq
	137, // 335: api.v0alpha.LMS.ListCollections:input_type -> api.v0alpha.ListCollectionsReq
	136, // 336: api.v0alpha.LMS.ResetCollection:input_type -> api.v0alpha.ResetCollectionReq
	128, // 337: api.v0alpha.LMS.AddCollectionEntry:input_type -> api.v0alpha.CollectionEntry
	144, // 338: api.v0alpha.LMS.DeleteCollectionEntry:input_type -> api.v0alpha.DeleteCollectionEntryReq
	128, // 339: api.v0alpha.LMS.UpdateCollectionEntry:input_type -> api.v0alpha.CollectionEntry
	134, // 340: api.v0alpha.LMS.StreamCollection:input_type -> api.v0alpha.StreamCollectionReq
	139, // 341: api.v0alpha.LMS.SearchCollectionsPaginated:input_type -> api.v0alpha.SearchCollectionsPaginatedReq
	142, // 342: api.v0alpha.LMS.GetCollectionEntries:input_type -> api.v0alpha.GetCollectionEntriesReq
	149, // 343: api.v0alpha.LMS.CreateCjsSearchDefinition:input_type -> api.v0alpha.CjsSearchDefinition
	150, // 344: api.v0alpha.LMS.GetCjsSearchDefinition:input_type -> api.v0alpha.GetCjsSearchDefinitionReq
	149, // 345: api.v0alpha.LMS.UpdateCjsSearchDefinition:input_type -> api.v0alpha.CjsSearchDefinition
	151, // 346: api.v0alpha.LMS.DeleteCjsSearchDefinition:input_type -> api.v0alpha.DeleteCjsSearchDefinitionReq
	152, // 347: api.v0alpha.LMS.ListCjsSearchDefinitions:input_type -> api.v0alpha.ListCjsSearchDefinitionsReq
	154, // 348: api.v0alpha.LMS.ExecuteCjsSearchDefinition:input_type -> api.v0alpha.ExecuteCjsSearchDefinitionReq
	160, // 349: api.v0alpha.LMS.GetCjsSecureSearchCriteria:input_type -> api.v0alpha.GetCjsSecureSearchCriteriaReq
	159, // 350: api.v0alpha.LMS.CreateCjsSecureSearchCriteria:input_type -> api.v0alpha.CjsSecureSearchCriteria
	159, // 351: api.v0alpha.LMS.UpdateCjsSecureSearchCriteria:input_type -> api.v0alpha.CjsSecureSearchCriteria
	171, // 352: api.v0alpha.LMS.SampleEndpoint:input_type -> api.v0alpha.SampleRequest
	172, // 353: api.v0alpha.LMS.GetAvailableEHRFields:input_type -> api.v0alpha.EHREntityType
	23,  // 354: api.v0alpha.LMS.GetQueuedEventsStatusByElementId:input_type -> api.v0alpha.ElementPK
	3,   // 355: api.v0alpha.LMS.GetPublicKey:output_type -> api.v0alpha.PublicKey
	48,  // 356: api.v0alpha.LMS.CreateFileTemplate:output_type -> api.v0alpha.FileTemplate
	48,  // 357: api.v0alpha.LMS.ListFileTemplates:output_type -> api.v0alpha.FileTemplate
	48,  // 358: api.v0alpha.LMS.UpdateFileTemplate:output_type -> api.v0alpha.FileTemplate
	48,  // 359: api.v0alpha.LMS.DeleteFileTemplate:output_type -> api.v0alpha.FileTemplate
	48,  // 360: api.v0alpha.LMS.GetFileTemplate:output_type -> api.v0alpha.FileTemplate
	35,  // 361: api.v0alpha.LMS.CreateField:output_type -> api.v0alpha.Field
	38,  // 362: api.v0alpha.LMS.ListFields:output_type -> api.v0alpha.Fields
	35,  // 363: api.v0alpha.LMS.GetField:output_type -> api.v0alpha.Field
	35,  // 364: api.v0alpha.LMS.UpdateField:output_type -> api.v0alpha.Field
	35,  // 365: api.v0alpha.LMS.DeleteField:output_type -> api.v0alpha.Field
	33,  // 366: api.v0alpha.LMS.ListAvailableFieldsByElementId:output_type -> api.v0alpha.ProcessFields
	20,  // 367: api.v0alpha.LMS.ListFieldsForElement:output_type -> api.v0alpha.ListFieldsForElementRes
	22,  // 368: api.v0alpha.LMS.ListAutocompleteFields:output_type -> api.v0alpha.ListAutocompleteFieldsRes
	145, // 369: api.v0alpha.LMS.ListCampaignLinks:output_type -> api.v0alpha.ListCampaignLinksRes
	26,  // 370: api.v0alpha.LMS.PeekList:output_type -> api.v0alpha.PeekListRes
	28,  // 371: api.v0alpha.LMS.GetHistory:output_type -> api.v0alpha.GetHistoryRes
	24,  // 372: api.v0alpha.LMS.CreateElement:output_type -> api.v0alpha.Element
	24,  // 373: api.v0alpha.LMS.ListElements:output_type -> api.v0alpha.Element
	24,  // 374: api.v0alpha.LMS.GetElement:output_type -> api.v0alpha.Element
	24,  // 375: api.v0alpha.LMS.UpdateElement:output_type -> api.v0alpha.Element
	24,  // 376: api.v0alpha.LMS.DeleteElement:output_type -> api.v0alpha.Element
	24,  // 377: api.v0alpha.LMS.CopyPipelineUpstream:output_type -> api.v0alpha.Element
	24,  // 378: api.v0alpha.LMS.CopyPipelineDownstream:output_type -> api.v0alpha.Element
	249, // 379: api.v0alpha.LMS.ProcessElement:output_type -> google.protobuf.Empty
	15,  // 380: api.v0alpha.LMS.ProcessList:output_type -> api.v0alpha.ProcessListResponse
	17,  // 381: api.v0alpha.LMS.StreamList:output_type -> api.v0alpha.StreamListResponse
	33,  // 382: api.v0alpha.LMS.GetAvailableFields:output_type -> api.v0alpha.ProcessFields
	125, // 383: api.v0alpha.LMS.ListNewEvents:output_type -> api.v0alpha.Events
	125, // 384: api.v0alpha.LMS.ViewQueue:output_type -> api.v0alpha.Events
	123, // 385: api.v0alpha.LMS.Autocomplete:output_type -> api.v0alpha.ParseRes
	12,  // 386: api.v0alpha.LMS.GetComplianceScrubLists:output_type -> api.v0alpha.GetComplianceScrubListsRes
	6,   // 387: api.v0alpha.LMS.FindFieldUsages:output_type -> api.v0alpha.FindFieldUsagesRes
	10,  // 388: api.v0alpha.LMS.FindInvalidElements:output_type -> api.v0alpha.FindInvalidElementsRes
	127, // 389: api.v0alpha.LMS.CreateCollection:output_type -> api.v0alpha.CollectionMetadata
	127, // 390: api.v0alpha.LMS.GetCollection:output_type -> api.v0alpha.CollectionMetadata
	249, // 391: api.v0alpha.LMS.UpdateCollection:output_type -> google.protobuf.Empty
	249, // 392: api.v0alpha.LMS.DeleteCollection:output_type -> google.protobuf.Empty
	138, // 393: api.v0alpha.LMS.ListCollections:output_type -> api.v0alpha.ListCollectionsRes
	249, // 394: api.v0alpha.LMS.ResetCollection:output_type -> google.protobuf.Empty
	128, // 395: api.v0alpha.LMS.AddCollectionEntry:output_type -> api.v0alpha.CollectionEntry
	249, // 396: api.v0alpha.LMS.DeleteCollectionEntry:output_type -> google.protobuf.Empty
	128, // 397: api.v0alpha.LMS.UpdateCollectionEntry:output_type -> api.v0alpha.CollectionEntry
	128, // 398: api.v0alpha.LMS.StreamCollection:output_type -> api.v0alpha.CollectionEntry
	141, // 399: api.v0alpha.LMS.SearchCollectionsPaginated:output_type -> api.v0alpha.PaginatedSearchRes
	143, // 400: api.v0alpha.LMS.GetCollectionEntries:output_type -> api.v0alpha.GetCollectionEntriesRes
	149, // 401: api.v0alpha.LMS.CreateCjsSearchDefinition:output_type -> api.v0alpha.CjsSearchDefinition
	149, // 402: api.v0alpha.LMS.GetCjsSearchDefinition:output_type -> api.v0alpha.CjsSearchDefinition
	249, // 403: api.v0alpha.LMS.UpdateCjsSearchDefinition:output_type -> google.protobuf.Empty
	249, // 404: api.v0alpha.LMS.DeleteCjsSearchDefinition:output_type -> google.protobuf.Empty
	153, // 405: api.v0alpha.LMS.ListCjsSearchDefinitions:output_type -> api.v0alpha.ListCjsSearchDefinitionsRes
	155, // 406: api.v0alpha.LMS.ExecuteCjsSearchDefinition:output_type -> api.v0alpha.ExecuteCjsSearchDefinitionRes
	159, // 407: api.v0alpha.LMS.GetCjsSecureSearchCriteria:output_type -> api.v0alpha.CjsSecureSearchCriteria
	159, // 408: api.v0alpha.LMS.CreateCjsSecureSearchCriteria:output_type -> api.v0alpha.CjsSecureSearchCriteria
	249, // 409: api.v0alpha.LMS.UpdateCjsSecureSearchCriteria:output_type -> google.protobuf.Empty
	249, // 410: api.v0alpha.LMS.SampleEndpoint:output_type -> google.protobuf.Empty
	38,  // 411: api.v0alpha.LMS.GetAvailableEHRFields:output_type -> api.v0alpha.Fields
	125, // 412: api.v0alpha.LMS.GetQueuedEventsStatusByElementId:output_type -> api.v0alpha.Events
	355, // [355:413] is the sub-list for method output_type
	297, // [297:355] is the sub-list for method input_type
	297, // [297:297] is the sub-list for extension type_name
	297, // [297:297] is the sub-list for extension extendee
	0,   // [0:297] is the sub-list for field type_name
}

func init() { file_api_v0alpha_lms_proto_init() }
func file_api_v0alpha_lms_proto_init() {
	if File_api_v0alpha_lms_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v0alpha_lms_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetPublicKeyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*FindFieldUsagesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*NameAndId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*FindFieldUsagesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ElementError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ElementSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*FindInvalidElementsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*FindInvalidElementsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetComplianceScrubListsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetComplianceScrubListsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessElementReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*StreamListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*StreamListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ListAvailableFieldsByElementIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ListFieldsForElementReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ListFieldsForElementRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*ListAutocompleteFieldsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*ListAutocompleteFieldsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*ElementPK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*PeekListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*PeekListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*GetHistoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*GetHistoryRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*History); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*HistoryAndCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*RecordProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*RecordProtoPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*FieldPK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateFieldReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*FieldMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*FieldIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*ListFieldsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*RecordFieldProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*RepeatedRecords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*ListElementsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*GetFileTemplatesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*FileTemplateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*FileTemplateFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*FieldTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*FileTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*LMSUploadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*LMSUploadRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*ReRunReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*ReRunRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceProcessor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*ConsentEntrypointProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*ConsentEnrichmentProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*ConsentExportProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*PaymentLinkEnrichment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*PortalLinkEnrichment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*Expiration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*EntrypointProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*ApiEntrypoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*HttpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*WebEntrypointProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*BulkWebEntrypointProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*OmniExchangeProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*WebExchangeProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*PaginatedHttpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*SftpImport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*RndEnrichmentProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*CjsImportProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*CjsExportProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*CjsEnrichmentProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*AppendProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*LookupProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*ComplProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*CFSExportConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*CFSExportReqHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*CFSExportProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*FilterProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*FilterOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*FilterCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*GSExportProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*P3ExportProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceExportProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*ScrubProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteScrubEntriesProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*FrequencyProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*DispositionSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*DispositionPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*SftpExportProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[90].Exporter = func(v any, i int) any {
			switch v := v.(*WfmMultiSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*WfmExportProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[92].Exporter = func(v any, i int) any {
			switch v := v.(*ExportHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[93].Exporter = func(v any, i int) any {
			switch v := v.(*SortReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[94].Exporter = func(v any, i int) any {
			switch v := v.(*CFSExportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[95].Exporter = func(v any, i int) any {
			switch v := v.(*DeDupCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[96].Exporter = func(v any, i int) any {
			switch v := v.(*SortCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[97].Exporter = func(v any, i int) any {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[98].Exporter = func(v any, i int) any {
			switch v := v.(*RecordFieldMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[99].Exporter = func(v any, i int) any {
			switch v := v.(*Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[100].Exporter = func(v any, i int) any {
			switch v := v.(*Phone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[101].Exporter = func(v any, i int) any {
			switch v := v.(*PostalCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[102].Exporter = func(v any, i int) any {
			switch v := v.(*Email); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[103].Exporter = func(v any, i int) any {
			switch v := v.(*DateTimeModifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[104].Exporter = func(v any, i int) any {
			switch v := v.(*DateTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[105].Exporter = func(v any, i int) any {
			switch v := v.(*EnrichedPhone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[106].Exporter = func(v any, i int) any {
			switch v := v.(*EnrichedZip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[107].Exporter = func(v any, i int) any {
			switch v := v.(*Now); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[108].Exporter = func(v any, i int) any {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[109].Exporter = func(v any, i int) any {
			switch v := v.(*Date); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[110].Exporter = func(v any, i int) any {
			switch v := v.(*MonthAndDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[111].Exporter = func(v any, i int) any {
			switch v := v.(*DayOfWeek); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[112].Exporter = func(v any, i int) any {
			switch v := v.(*TimeOfDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[113].Exporter = func(v any, i int) any {
			switch v := v.(*FileFormatParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[114].Exporter = func(v any, i int) any {
			switch v := v.(*ReshapeProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[115].Exporter = func(v any, i int) any {
			switch v := v.(*ReshapeAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[116].Exporter = func(v any, i int) any {
			switch v := v.(*ContactManagerSink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[117].Exporter = func(v any, i int) any {
			switch v := v.(*SumProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[118].Exporter = func(v any, i int) any {
			switch v := v.(*GroupBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[119].Exporter = func(v any, i int) any {
			switch v := v.(*ListMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[120].Exporter = func(v any, i int) any {
			switch v := v.(*ParseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[121].Exporter = func(v any, i int) any {
			switch v := v.(*ParseRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[122].Exporter = func(v any, i int) any {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[123].Exporter = func(v any, i int) any {
			switch v := v.(*Events); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[124].Exporter = func(v any, i int) any {
			switch v := v.(*ViewQueueReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[125].Exporter = func(v any, i int) any {
			switch v := v.(*CollectionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[126].Exporter = func(v any, i int) any {
			switch v := v.(*CollectionEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[127].Exporter = func(v any, i int) any {
			switch v := v.(*MatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[128].Exporter = func(v any, i int) any {
			switch v := v.(*MatchRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[129].Exporter = func(v any, i int) any {
			switch v := v.(*CollectionFieldMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[130].Exporter = func(v any, i int) any {
			switch v := v.(*CollectionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[131].Exporter = func(v any, i int) any {
			switch v := v.(*GetCollectionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[132].Exporter = func(v any, i int) any {
			switch v := v.(*StreamCollectionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[133].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteCollectionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[134].Exporter = func(v any, i int) any {
			switch v := v.(*ResetCollectionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[135].Exporter = func(v any, i int) any {
			switch v := v.(*ListCollectionsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[136].Exporter = func(v any, i int) any {
			switch v := v.(*ListCollectionsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[137].Exporter = func(v any, i int) any {
			switch v := v.(*SearchCollectionsPaginatedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[138].Exporter = func(v any, i int) any {
			switch v := v.(*Search); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[139].Exporter = func(v any, i int) any {
			switch v := v.(*PaginatedSearchRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[140].Exporter = func(v any, i int) any {
			switch v := v.(*GetCollectionEntriesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[141].Exporter = func(v any, i int) any {
			switch v := v.(*GetCollectionEntriesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[142].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteCollectionEntryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[143].Exporter = func(v any, i int) any {
			switch v := v.(*ListCampaignLinksRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[144].Exporter = func(v any, i int) any {
			switch v := v.(*Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[145].Exporter = func(v any, i int) any {
			switch v := v.(*CjsSearchField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[146].Exporter = func(v any, i int) any {
			switch v := v.(*CjsSearchDefinitionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[147].Exporter = func(v any, i int) any {
			switch v := v.(*CjsSearchDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[148].Exporter = func(v any, i int) any {
			switch v := v.(*GetCjsSearchDefinitionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[149].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteCjsSearchDefinitionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[150].Exporter = func(v any, i int) any {
			switch v := v.(*ListCjsSearchDefinitionsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[151].Exporter = func(v any, i int) any {
			switch v := v.(*ListCjsSearchDefinitionsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[152].Exporter = func(v any, i int) any {
			switch v := v.(*ExecuteCjsSearchDefinitionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[153].Exporter = func(v any, i int) any {
			switch v := v.(*ExecuteCjsSearchDefinitionRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[154].Exporter = func(v any, i int) any {
			switch v := v.(*CollectionEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[155].Exporter = func(v any, i int) any {
			switch v := v.(*CjsExecuteSearchField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[156].Exporter = func(v any, i int) any {
			switch v := v.(*CjsSecureSearchCriteriaMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[157].Exporter = func(v any, i int) any {
			switch v := v.(*CjsSecureSearchCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[158].Exporter = func(v any, i int) any {
			switch v := v.(*GetCjsSecureSearchCriteriaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[159].Exporter = func(v any, i int) any {
			switch v := v.(*CjsSecureSearchCriteriaField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[160].Exporter = func(v any, i int) any {
			switch v := v.(*SplitCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[161].Exporter = func(v any, i int) any {
			switch v := v.(*UniquePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[162].Exporter = func(v any, i int) any {
			switch v := v.(*SplitByNamedUnique); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[163].Exporter = func(v any, i int) any {
			switch v := v.(*SplitByUnique); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[164].Exporter = func(v any, i int) any {
			switch v := v.(*SplitByMaxSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[165].Exporter = func(v any, i int) any {
			switch v := v.(*SplitByEqualParts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[166].Exporter = func(v any, i int) any {
			switch v := v.(*EpicEntrypoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[167].Exporter = func(v any, i int) any {
			switch v := v.(*RuntimeValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[168].Exporter = func(v any, i int) any {
			switch v := v.(*EntityURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[169].Exporter = func(v any, i int) any {
			switch v := v.(*SampleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[170].Exporter = func(v any, i int) any {
			switch v := v.(*EHREntityType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[171].Exporter = func(v any, i int) any {
			switch v := v.(*ElementError_InvalidExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[172].Exporter = func(v any, i int) any {
			switch v := v.(*ElementError_MissingField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[173].Exporter = func(v any, i int) any {
			switch v := v.(*ElementError_BadFieldType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[174].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessFields_NestedField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[175].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessFields_Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[181].Exporter = func(v any, i int) any {
			switch v := v.(*LookupProcess_ComplProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[182].Exporter = func(v any, i int) any {
			switch v := v.(*LookupProcess_ListLookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[183].Exporter = func(v any, i int) any {
			switch v := v.(*LookupProcess_UrlLookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[184].Exporter = func(v any, i int) any {
			switch v := v.(*FilterCheck_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[185].Exporter = func(v any, i int) any {
			switch v := v.(*FilterCheck_ValueComparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[186].Exporter = func(v any, i int) any {
			switch v := v.(*FilterCheck_TypeComparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[187].Exporter = func(v any, i int) any {
			switch v := v.(*FilterCheck_ListComparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[188].Exporter = func(v any, i int) any {
			switch v := v.(*FilterCheck_ListComparison_FieldOrVal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[190].Exporter = func(v any, i int) any {
			switch v := v.(*ReshapeAction_Rename); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[191].Exporter = func(v any, i int) any {
			switch v := v.(*ReshapeAction_AddValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[192].Exporter = func(v any, i int) any {
			switch v := v.(*ReshapeAction_AddDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[193].Exporter = func(v any, i int) any {
			switch v := v.(*ReshapeAction_AddField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[194].Exporter = func(v any, i int) any {
			switch v := v.(*ReshapeAction_SubtractValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[195].Exporter = func(v any, i int) any {
			switch v := v.(*ReshapeAction_SubtractField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[196].Exporter = func(v any, i int) any {
			switch v := v.(*ReshapeAction_Convert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[197].Exporter = func(v any, i int) any {
			switch v := v.(*ReshapeAction_Divide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[198].Exporter = func(v any, i int) any {
			switch v := v.(*ReshapeAction_Multiply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[199].Exporter = func(v any, i int) any {
			switch v := v.(*ReshapeAction_Modulo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[200].Exporter = func(v any, i int) any {
			switch v := v.(*ReshapeAction_RemoveField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[201].Exporter = func(v any, i int) any {
			switch v := v.(*ReshapeAction_AddNewField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[202].Exporter = func(v any, i int) any {
			switch v := v.(*ReshapeAction_AddNewFieldFromField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[203].Exporter = func(v any, i int) any {
			switch v := v.(*ReshapeAction_ChangeCurrencyType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[204].Exporter = func(v any, i int) any {
			switch v := v.(*ReshapeAction_SetFieldValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[205].Exporter = func(v any, i int) any {
			switch v := v.(*ReshapeAction_SetFieldFromField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[206].Exporter = func(v any, i int) any {
			switch v := v.(*ReshapeAction_Merge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[207].Exporter = func(v any, i int) any {
			switch v := v.(*ReshapeAction_Pad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[208].Exporter = func(v any, i int) any {
			switch v := v.(*ReshapeAction_Trim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[209].Exporter = func(v any, i int) any {
			switch v := v.(*ReshapeAction_Extract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[210].Exporter = func(v any, i int) any {
			switch v := v.(*ReshapeAction_Merge_FieldOrVal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[211].Exporter = func(v any, i int) any {
			switch v := v.(*ReshapeAction_Extract_Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_lms_proto_msgTypes[212].Exporter = func(v any, i int) any {
			switch v := v.(*ReshapeAction_Extract_Slice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v0alpha_lms_proto_msgTypes[5].OneofWrappers = []any{
		(*ElementError_InvalidExpression_)(nil),
		(*ElementError_MissingField_)(nil),
		(*ElementError_BadFieldType_)(nil),
	}
	file_api_v0alpha_lms_proto_msgTypes[37].OneofWrappers = []any{
		(*FieldIndex_Datetime)(nil),
	}
	file_api_v0alpha_lms_proto_msgTypes[39].OneofWrappers = []any{
		(*RecordFieldProto_StringValue)(nil),
		(*RecordFieldProto_NumberValue)(nil),
		(*RecordFieldProto_BoolValue)(nil),
		(*RecordFieldProto_Phone)(nil),
		(*RecordFieldProto_Currency)(nil),
		(*RecordFieldProto_PostalCode)(nil),
		(*RecordFieldProto_Email)(nil),
		(*RecordFieldProto_DateTime)(nil),
		(*RecordFieldProto_RepeatedRecords)(nil),
		(*RecordFieldProto_RecordFieldMap)(nil),
		(*RecordFieldProto_Err)(nil),
		(*RecordFieldProto_EnrichedPhone)(nil),
		(*RecordFieldProto_EnrichedZip)(nil),
	}
	file_api_v0alpha_lms_proto_msgTypes[51].OneofWrappers = []any{
		(*Process_Append)(nil),
		(*Process_Sort)(nil),
		(*Process_Filter)(nil),
		(*Process_GsExport)(nil),
		(*Process_P3Export)(nil),
		(*Process_Compl)(nil),
		(*Process_Dedup)(nil),
		(*Process_CfsExport)(nil),
		(*Process_SftpExport)(nil),
		(*Process_Reshape)(nil),
		(*Process_Lookup)(nil),
		(*Process_Entrypoint)(nil),
		(*Process_ComplianceExport)(nil),
		(*Process_ApiEntrypoint)(nil),
		(*Process_SftpImport)(nil),
		(*Process_Scrub)(nil),
		(*Process_Frequency)(nil),
		(*Process_CjsImport)(nil),
		(*Process_CjsExport)(nil),
		(*Process_CjsEnrich)(nil),
		(*Process_WebEntrypoint)(nil),
		(*Process_DeleteScrubEntries)(nil),
		(*Process_WfmExport)(nil),
		(*Process_LinkEnrich)(nil),
		(*Process_Rnd)(nil),
		(*Process_ConsentEnrich)(nil),
		(*Process_ConsentExport)(nil),
		(*Process_ComplianceProcessor)(nil),
		(*Process_ConsentEntrypoint)(nil),
		(*Process_PortalLinkEnrich)(nil),
		(*Process_BulkWebEntrypoint)(nil),
		(*Process_OmniExchangeProcess)(nil),
		(*Process_WebExchangeProcess)(nil),
		(*Process_Split)(nil),
		(*Process_EpicEntryPoint)(nil),
		(*Process_ContactManagerSink)(nil),
		(*Process_Sum)(nil),
	}
	file_api_v0alpha_lms_proto_msgTypes[55].OneofWrappers = []any{
		(*ConsentExportProcess_ContentTypeVal)(nil),
		(*ConsentExportProcess_ContentTypeFieldName)(nil),
		(*ConsentExportProcess_ChannelTypeVal)(nil),
		(*ConsentExportProcess_ChannelTypeFieldName)(nil),
		(*ConsentExportProcess_ExpirationDate)(nil),
		(*ConsentExportProcess_ExpirationFieldName)(nil),
		(*ConsentExportProcess_ExpirationAfterDuration)(nil),
	}
	file_api_v0alpha_lms_proto_msgTypes[73].OneofWrappers = []any{
		(*LookupProcess_Compl)(nil),
		(*LookupProcess_List)(nil),
		(*LookupProcess_Url)(nil),
	}
	file_api_v0alpha_lms_proto_msgTypes[80].OneofWrappers = []any{
		(*FilterCheck_ValComp)(nil),
		(*FilterCheck_TypeComp)(nil),
		(*FilterCheck_ListComp)(nil),
	}
	file_api_v0alpha_lms_proto_msgTypes[91].OneofWrappers = []any{
		(*WfmExportProcess_Single)(nil),
		(*WfmExportProcess_Multi)(nil),
	}
	file_api_v0alpha_lms_proto_msgTypes[93].OneofWrappers = []any{
		(*SortReq_Criteria)(nil),
		(*SortReq_Record)(nil),
	}
	file_api_v0alpha_lms_proto_msgTypes[94].OneofWrappers = []any{
		(*CFSExportReq_Header)(nil),
		(*CFSExportReq_Record)(nil),
	}
	file_api_v0alpha_lms_proto_msgTypes[115].OneofWrappers = []any{
		(*ReshapeAction_Rename_)(nil),
		(*ReshapeAction_AddValue_)(nil),
		(*ReshapeAction_AddField_)(nil),
		(*ReshapeAction_AddDate_)(nil),
		(*ReshapeAction_SubtractValue_)(nil),
		(*ReshapeAction_SubtractField_)(nil),
		(*ReshapeAction_Convert_)(nil),
		(*ReshapeAction_RemoveField_)(nil),
		(*ReshapeAction_AddNewField_)(nil),
		(*ReshapeAction_ChangeCurrencyType_)(nil),
		(*ReshapeAction_Divide_)(nil),
		(*ReshapeAction_Multiply_)(nil),
		(*ReshapeAction_Modulo_)(nil),
		(*ReshapeAction_Merge_)(nil),
		(*ReshapeAction_SetFieldValue_)(nil),
		(*ReshapeAction_AddNewFieldFromField_)(nil),
		(*ReshapeAction_SetFieldFromField_)(nil),
		(*ReshapeAction_Pad_)(nil),
		(*ReshapeAction_Trim_)(nil),
		(*ReshapeAction_Extract_)(nil),
	}
	file_api_v0alpha_lms_proto_msgTypes[155].OneofWrappers = []any{
		(*CjsExecuteSearchField_FieldName)(nil),
		(*CjsExecuteSearchField_FieldType)(nil),
	}
	file_api_v0alpha_lms_proto_msgTypes[160].OneofWrappers = []any{
		(*SplitCriteria_Unique)(nil),
		(*SplitCriteria_MaxSize)(nil),
		(*SplitCriteria_EqualParts)(nil),
	}
	file_api_v0alpha_lms_proto_msgTypes[184].OneofWrappers = []any{
		(*FilterCheck_Value_StringVal)(nil),
		(*FilterCheck_Value_NumberVal)(nil),
		(*FilterCheck_Value_BoolVal)(nil),
		(*FilterCheck_Value_FieldName)(nil),
		(*FilterCheck_Value_DateTime)(nil),
	}
	file_api_v0alpha_lms_proto_msgTypes[188].OneofWrappers = []any{
		(*FilterCheck_ListComparison_FieldOrVal_Field)(nil),
		(*FilterCheck_ListComparison_FieldOrVal_Value)(nil),
	}
	file_api_v0alpha_lms_proto_msgTypes[208].OneofWrappers = []any{
		(*ReshapeAction_Trim_Amount)(nil),
		(*ReshapeAction_Trim_Data)(nil),
		(*ReshapeAction_Trim_Marker)(nil),
	}
	file_api_v0alpha_lms_proto_msgTypes[210].OneofWrappers = []any{
		(*ReshapeAction_Merge_FieldOrVal_Field)(nil),
		(*ReshapeAction_Merge_FieldOrVal_Value)(nil),
	}
	file_api_v0alpha_lms_proto_msgTypes[211].OneofWrappers = []any{
		(*ReshapeAction_Extract_Index_Position)(nil),
		(*ReshapeAction_Extract_Index_Match)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v0alpha_lms_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   215,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v0alpha_lms_proto_goTypes,
		DependencyIndexes: file_api_v0alpha_lms_proto_depIdxs,
		EnumInfos:         file_api_v0alpha_lms_proto_enumTypes,
		MessageInfos:      file_api_v0alpha_lms_proto_msgTypes,
	}.Build()
	File_api_v0alpha_lms_proto = out.File
	file_api_v0alpha_lms_proto_rawDesc = nil
	file_api_v0alpha_lms_proto_goTypes = nil
	file_api_v0alpha_lms_proto_depIdxs = nil
}
