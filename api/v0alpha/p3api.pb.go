// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: api/v0alpha/p3api.proto

package v0alpha

import (
	_ "github.com/tcncloud/api-go/annotations"
	commons "github.com/tcncloud/api-go/api/commons"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AgentStatisticsSettings_HistoryFilter int32

const (
	AgentStatisticsSettings_TODAY   AgentStatisticsSettings_HistoryFilter = 0
	AgentStatisticsSettings_SESSION AgentStatisticsSettings_HistoryFilter = 1
)

// Enum value maps for AgentStatisticsSettings_HistoryFilter.
var (
	AgentStatisticsSettings_HistoryFilter_name = map[int32]string{
		0: "TODAY",
		1: "SESSION",
	}
	AgentStatisticsSettings_HistoryFilter_value = map[string]int32{
		"TODAY":   0,
		"SESSION": 1,
	}
)

func (x AgentStatisticsSettings_HistoryFilter) Enum() *AgentStatisticsSettings_HistoryFilter {
	p := new(AgentStatisticsSettings_HistoryFilter)
	*p = x
	return p
}

func (x AgentStatisticsSettings_HistoryFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentStatisticsSettings_HistoryFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v0alpha_p3api_proto_enumTypes[0].Descriptor()
}

func (AgentStatisticsSettings_HistoryFilter) Type() protoreflect.EnumType {
	return &file_api_v0alpha_p3api_proto_enumTypes[0]
}

func (x AgentStatisticsSettings_HistoryFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentStatisticsSettings_HistoryFilter.Descriptor instead.
func (AgentStatisticsSettings_HistoryFilter) EnumDescriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{58, 0}
}

type HoldQueueMonitoringAgentRouting_Enum int32

const (
	HoldQueueMonitoringAgentRouting_UNKNOWN                  HoldQueueMonitoringAgentRouting_Enum = 0
	HoldQueueMonitoringAgentRouting_ORIGINAL_AGENT_REQUIRED  HoldQueueMonitoringAgentRouting_Enum = 1
	HoldQueueMonitoringAgentRouting_ORIGINAL_AGENT_PREFERRED HoldQueueMonitoringAgentRouting_Enum = 2
	HoldQueueMonitoringAgentRouting_ANY_AGENT                HoldQueueMonitoringAgentRouting_Enum = 3
)

// Enum value maps for HoldQueueMonitoringAgentRouting_Enum.
var (
	HoldQueueMonitoringAgentRouting_Enum_name = map[int32]string{
		0: "UNKNOWN",
		1: "ORIGINAL_AGENT_REQUIRED",
		2: "ORIGINAL_AGENT_PREFERRED",
		3: "ANY_AGENT",
	}
	HoldQueueMonitoringAgentRouting_Enum_value = map[string]int32{
		"UNKNOWN":                  0,
		"ORIGINAL_AGENT_REQUIRED":  1,
		"ORIGINAL_AGENT_PREFERRED": 2,
		"ANY_AGENT":                3,
	}
)

func (x HoldQueueMonitoringAgentRouting_Enum) Enum() *HoldQueueMonitoringAgentRouting_Enum {
	p := new(HoldQueueMonitoringAgentRouting_Enum)
	*p = x
	return p
}

func (x HoldQueueMonitoringAgentRouting_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HoldQueueMonitoringAgentRouting_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v0alpha_p3api_proto_enumTypes[1].Descriptor()
}

func (HoldQueueMonitoringAgentRouting_Enum) Type() protoreflect.EnumType {
	return &file_api_v0alpha_p3api_proto_enumTypes[1]
}

func (x HoldQueueMonitoringAgentRouting_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HoldQueueMonitoringAgentRouting_Enum.Descriptor instead.
func (HoldQueueMonitoringAgentRouting_Enum) EnumDescriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{62, 0}
}

type ManualDialSettings_ZipCodeValidation int32

const (
	ManualDialSettings_FALSE    ManualDialSettings_ZipCodeValidation = 0
	ManualDialSettings_TRUE     ManualDialSettings_ZipCodeValidation = 1
	ManualDialSettings_REQUIRED ManualDialSettings_ZipCodeValidation = 2
)

// Enum value maps for ManualDialSettings_ZipCodeValidation.
var (
	ManualDialSettings_ZipCodeValidation_name = map[int32]string{
		0: "FALSE",
		1: "TRUE",
		2: "REQUIRED",
	}
	ManualDialSettings_ZipCodeValidation_value = map[string]int32{
		"FALSE":    0,
		"TRUE":     1,
		"REQUIRED": 2,
	}
)

func (x ManualDialSettings_ZipCodeValidation) Enum() *ManualDialSettings_ZipCodeValidation {
	p := new(ManualDialSettings_ZipCodeValidation)
	*p = x
	return p
}

func (x ManualDialSettings_ZipCodeValidation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ManualDialSettings_ZipCodeValidation) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v0alpha_p3api_proto_enumTypes[2].Descriptor()
}

func (ManualDialSettings_ZipCodeValidation) Type() protoreflect.EnumType {
	return &file_api_v0alpha_p3api_proto_enumTypes[2]
}

func (x ManualDialSettings_ZipCodeValidation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ManualDialSettings_ZipCodeValidation.Descriptor instead.
func (ManualDialSettings_ZipCodeValidation) EnumDescriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{65, 0}
}

type ManualDialDataDipHandling_Enum int32

const (
	ManualDialDataDipHandling_NONE                      ManualDialDataDipHandling_Enum = 0
	ManualDialDataDipHandling_CANCEL                    ManualDialDataDipHandling_Enum = 1
	ManualDialDataDipHandling_NOTIFY_AND_CANCEL         ManualDialDataDipHandling_Enum = 2
	ManualDialDataDipHandling_NOTIFY_AND_ALLOW_CALL     ManualDialDataDipHandling_Enum = 3
	ManualDialDataDipHandling_CALL_WITH_ORIGINAL_VALUES ManualDialDataDipHandling_Enum = 4
)

// Enum value maps for ManualDialDataDipHandling_Enum.
var (
	ManualDialDataDipHandling_Enum_name = map[int32]string{
		0: "NONE",
		1: "CANCEL",
		2: "NOTIFY_AND_CANCEL",
		3: "NOTIFY_AND_ALLOW_CALL",
		4: "CALL_WITH_ORIGINAL_VALUES",
	}
	ManualDialDataDipHandling_Enum_value = map[string]int32{
		"NONE":                      0,
		"CANCEL":                    1,
		"NOTIFY_AND_CANCEL":         2,
		"NOTIFY_AND_ALLOW_CALL":     3,
		"CALL_WITH_ORIGINAL_VALUES": 4,
	}
)

func (x ManualDialDataDipHandling_Enum) Enum() *ManualDialDataDipHandling_Enum {
	p := new(ManualDialDataDipHandling_Enum)
	*p = x
	return p
}

func (x ManualDialDataDipHandling_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ManualDialDataDipHandling_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v0alpha_p3api_proto_enumTypes[3].Descriptor()
}

func (ManualDialDataDipHandling_Enum) Type() protoreflect.EnumType {
	return &file_api_v0alpha_p3api_proto_enumTypes[3]
}

func (x ManualDialDataDipHandling_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ManualDialDataDipHandling_Enum.Descriptor instead.
func (ManualDialDataDipHandling_Enum) EnumDescriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{66, 0}
}

type DisplayDataSettings_DisplayDataDip int32

const (
	DisplayDataSettings_NONE    DisplayDataSettings_DisplayDataDip = 0
	DisplayDataSettings_ALL     DisplayDataSettings_DisplayDataDip = 1
	DisplayDataSettings_LIMITED DisplayDataSettings_DisplayDataDip = 2
)

// Enum value maps for DisplayDataSettings_DisplayDataDip.
var (
	DisplayDataSettings_DisplayDataDip_name = map[int32]string{
		0: "NONE",
		1: "ALL",
		2: "LIMITED",
	}
	DisplayDataSettings_DisplayDataDip_value = map[string]int32{
		"NONE":    0,
		"ALL":     1,
		"LIMITED": 2,
	}
)

func (x DisplayDataSettings_DisplayDataDip) Enum() *DisplayDataSettings_DisplayDataDip {
	p := new(DisplayDataSettings_DisplayDataDip)
	*p = x
	return p
}

func (x DisplayDataSettings_DisplayDataDip) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisplayDataSettings_DisplayDataDip) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v0alpha_p3api_proto_enumTypes[4].Descriptor()
}

func (DisplayDataSettings_DisplayDataDip) Type() protoreflect.EnumType {
	return &file_api_v0alpha_p3api_proto_enumTypes[4]
}

func (x DisplayDataSettings_DisplayDataDip) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisplayDataSettings_DisplayDataDip.Descriptor instead.
func (DisplayDataSettings_DisplayDataDip) EnumDescriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{73, 0}
}

type RequeueTransferQueueConfigType_Enum int32

const (
	RequeueTransferQueueConfigType_UNKNOWN RequeueTransferQueueConfigType_Enum = 0
	RequeueTransferQueueConfigType_DEFAULT RequeueTransferQueueConfigType_Enum = 1
	RequeueTransferQueueConfigType_CURRENT RequeueTransferQueueConfigType_Enum = 2
	RequeueTransferQueueConfigType_CUSTOM  RequeueTransferQueueConfigType_Enum = 3
)

// Enum value maps for RequeueTransferQueueConfigType_Enum.
var (
	RequeueTransferQueueConfigType_Enum_name = map[int32]string{
		0: "UNKNOWN",
		1: "DEFAULT",
		2: "CURRENT",
		3: "CUSTOM",
	}
	RequeueTransferQueueConfigType_Enum_value = map[string]int32{
		"UNKNOWN": 0,
		"DEFAULT": 1,
		"CURRENT": 2,
		"CUSTOM":  3,
	}
)

func (x RequeueTransferQueueConfigType_Enum) Enum() *RequeueTransferQueueConfigType_Enum {
	p := new(RequeueTransferQueueConfigType_Enum)
	*p = x
	return p
}

func (x RequeueTransferQueueConfigType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequeueTransferQueueConfigType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v0alpha_p3api_proto_enumTypes[5].Descriptor()
}

func (RequeueTransferQueueConfigType_Enum) Type() protoreflect.EnumType {
	return &file_api_v0alpha_p3api_proto_enumTypes[5]
}

func (x RequeueTransferQueueConfigType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequeueTransferQueueConfigType_Enum.Descriptor instead.
func (RequeueTransferQueueConfigType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{74, 0}
}

type RecordingStatus_Enum int32

const (
	RecordingStatus_UNKNOWN         RecordingStatus_Enum = 0
	RecordingStatus_KEEP_RECORDING  RecordingStatus_Enum = 1
	RecordingStatus_STOP_RECORDING  RecordingStatus_Enum = 2
	RecordingStatus_START_RECORDING RecordingStatus_Enum = 3
)

// Enum value maps for RecordingStatus_Enum.
var (
	RecordingStatus_Enum_name = map[int32]string{
		0: "UNKNOWN",
		1: "KEEP_RECORDING",
		2: "STOP_RECORDING",
		3: "START_RECORDING",
	}
	RecordingStatus_Enum_value = map[string]int32{
		"UNKNOWN":         0,
		"KEEP_RECORDING":  1,
		"STOP_RECORDING":  2,
		"START_RECORDING": 3,
	}
)

func (x RecordingStatus_Enum) Enum() *RecordingStatus_Enum {
	p := new(RecordingStatus_Enum)
	*p = x
	return p
}

func (x RecordingStatus_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordingStatus_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v0alpha_p3api_proto_enumTypes[6].Descriptor()
}

func (RecordingStatus_Enum) Type() protoreflect.EnumType {
	return &file_api_v0alpha_p3api_proto_enumTypes[6]
}

func (x RecordingStatus_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordingStatus_Enum.Descriptor instead.
func (RecordingStatus_Enum) EnumDescriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{75, 0}
}

type TransferSettingsType_Enum int32

const (
	TransferSettingsType_UNKNOWN       TransferSettingsType_Enum = 0
	TransferSettingsType_AGENT         TransferSettingsType_Enum = 1
	TransferSettingsType_OPEN          TransferSettingsType_Enum = 2
	TransferSettingsType_REQUEUE       TransferSettingsType_Enum = 3
	TransferSettingsType_VOICE_MAIL    TransferSettingsType_Enum = 4
	TransferSettingsType_PBX_EXTENSION TransferSettingsType_Enum = 5
)

// Enum value maps for TransferSettingsType_Enum.
var (
	TransferSettingsType_Enum_name = map[int32]string{
		0: "UNKNOWN",
		1: "AGENT",
		2: "OPEN",
		3: "REQUEUE",
		4: "VOICE_MAIL",
		5: "PBX_EXTENSION",
	}
	TransferSettingsType_Enum_value = map[string]int32{
		"UNKNOWN":       0,
		"AGENT":         1,
		"OPEN":          2,
		"REQUEUE":       3,
		"VOICE_MAIL":    4,
		"PBX_EXTENSION": 5,
	}
)

func (x TransferSettingsType_Enum) Enum() *TransferSettingsType_Enum {
	p := new(TransferSettingsType_Enum)
	*p = x
	return p
}

func (x TransferSettingsType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferSettingsType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v0alpha_p3api_proto_enumTypes[7].Descriptor()
}

func (TransferSettingsType_Enum) Type() protoreflect.EnumType {
	return &file_api_v0alpha_p3api_proto_enumTypes[7]
}

func (x TransferSettingsType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferSettingsType_Enum.Descriptor instead.
func (TransferSettingsType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{76, 0}
}

type TransferSettingsHandOffType_Enum int32

const (
	TransferSettingsHandOffType_UNKNOWN    TransferSettingsHandOffType_Enum = 0
	TransferSettingsHandOffType_CONFERENCE TransferSettingsHandOffType_Enum = 1
	TransferSettingsHandOffType_WARM       TransferSettingsHandOffType_Enum = 2
	TransferSettingsHandOffType_COLD       TransferSettingsHandOffType_Enum = 3
)

// Enum value maps for TransferSettingsHandOffType_Enum.
var (
	TransferSettingsHandOffType_Enum_name = map[int32]string{
		0: "UNKNOWN",
		1: "CONFERENCE",
		2: "WARM",
		3: "COLD",
	}
	TransferSettingsHandOffType_Enum_value = map[string]int32{
		"UNKNOWN":    0,
		"CONFERENCE": 1,
		"WARM":       2,
		"COLD":       3,
	}
)

func (x TransferSettingsHandOffType_Enum) Enum() *TransferSettingsHandOffType_Enum {
	p := new(TransferSettingsHandOffType_Enum)
	*p = x
	return p
}

func (x TransferSettingsHandOffType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferSettingsHandOffType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v0alpha_p3api_proto_enumTypes[8].Descriptor()
}

func (TransferSettingsHandOffType_Enum) Type() protoreflect.EnumType {
	return &file_api_v0alpha_p3api_proto_enumTypes[8]
}

func (x TransferSettingsHandOffType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferSettingsHandOffType_Enum.Descriptor instead.
func (TransferSettingsHandOffType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{77, 0}
}

type AllowedHoldType_Enum int32

const (
	AllowedHoldType_NONE   AllowedHoldType_Enum = 0
	AllowedHoldType_SIMPLE AllowedHoldType_Enum = 1
	AllowedHoldType_MULTI  AllowedHoldType_Enum = 2
	AllowedHoldType_BOTH   AllowedHoldType_Enum = 3
)

// Enum value maps for AllowedHoldType_Enum.
var (
	AllowedHoldType_Enum_name = map[int32]string{
		0: "NONE",
		1: "SIMPLE",
		2: "MULTI",
		3: "BOTH",
	}
	AllowedHoldType_Enum_value = map[string]int32{
		"NONE":   0,
		"SIMPLE": 1,
		"MULTI":  2,
		"BOTH":   3,
	}
)

func (x AllowedHoldType_Enum) Enum() *AllowedHoldType_Enum {
	p := new(AllowedHoldType_Enum)
	*p = x
	return p
}

func (x AllowedHoldType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllowedHoldType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v0alpha_p3api_proto_enumTypes[9].Descriptor()
}

func (AllowedHoldType_Enum) Type() protoreflect.EnumType {
	return &file_api_v0alpha_p3api_proto_enumTypes[9]
}

func (x AllowedHoldType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllowedHoldType_Enum.Descriptor instead.
func (AllowedHoldType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{79, 0}
}

type GetAgentHuntGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HuntGroupSid int64 `protobuf:"varint,1,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
}

func (x *GetAgentHuntGroupReq) Reset() {
	*x = GetAgentHuntGroupReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAgentHuntGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentHuntGroupReq) ProtoMessage() {}

func (x *GetAgentHuntGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentHuntGroupReq.ProtoReflect.Descriptor instead.
func (*GetAgentHuntGroupReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{0}
}

func (x *GetAgentHuntGroupReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

// HuntGroup describes a hunt group in an organization.
type HuntGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sid of the hunt group.
	HuntGroupSid int64 `protobuf:"varint,1,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	// The client sid of the hunt group.
	ClientSid int64 `protobuf:"varint,2,opt,name=client_sid,json=clientSid,proto3" json:"client_sid,omitempty"`
	// The name of the hunt group.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the hunt group.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The last time the hunt group was modified.
	ModifyDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=modify_date,json=modifyDate,proto3" json:"modify_date,omitempty"`
	// The type of hunt group, connected or softphone.
	Type commons.HuntGroupType_Enum `protobuf:"varint,6,opt,name=type,proto3,enum=api.commons.HuntGroupType_Enum" json:"type,omitempty"`
	// The number of agents in the hunt group.
	AgentCount int64 `protobuf:"varint,7,opt,name=agent_count,json=agentCount,proto3" json:"agent_count,omitempty"`
	// The number of agents that have this hunt group's skill.
	HuntGroupSkillAgentCount int64 `protobuf:"varint,8,opt,name=hunt_group_skill_agent_count,json=huntGroupSkillAgentCount,proto3" json:"hunt_group_skill_agent_count,omitempty"`
}

func (x *HuntGroup) Reset() {
	*x = HuntGroup{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HuntGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HuntGroup) ProtoMessage() {}

func (x *HuntGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HuntGroup.ProtoReflect.Descriptor instead.
func (*HuntGroup) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{1}
}

func (x *HuntGroup) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *HuntGroup) GetClientSid() int64 {
	if x != nil {
		return x.ClientSid
	}
	return 0
}

func (x *HuntGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HuntGroup) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *HuntGroup) GetModifyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifyDate
	}
	return nil
}

func (x *HuntGroup) GetType() commons.HuntGroupType_Enum {
	if x != nil {
		return x.Type
	}
	return commons.HuntGroupType_Enum(0)
}

func (x *HuntGroup) GetAgentCount() int64 {
	if x != nil {
		return x.AgentCount
	}
	return 0
}

func (x *HuntGroup) GetHuntGroupSkillAgentCount() int64 {
	if x != nil {
		return x.HuntGroupSkillAgentCount
	}
	return 0
}

type GetAgentSkillsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the hunt group that will be used to get the hunt group skills (including PBX skills).
	HuntGroupSid int64 `protobuf:"varint,4,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
}

func (x *GetAgentSkillsReq) Reset() {
	*x = GetAgentSkillsReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAgentSkillsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentSkillsReq) ProtoMessage() {}

func (x *GetAgentSkillsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentSkillsReq.ProtoReflect.Descriptor instead.
func (*GetAgentSkillsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{2}
}

func (x *GetAgentSkillsReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

type GetAgentSkillsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// skills found for the given parameters, will be value pairs (name, level).
	Skills map[string]int64 `protobuf:"bytes,2,rep,name=skills,proto3" json:"skills,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetAgentSkillsRes) Reset() {
	*x = GetAgentSkillsRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAgentSkillsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentSkillsRes) ProtoMessage() {}

func (x *GetAgentSkillsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentSkillsRes.ProtoReflect.Descriptor instead.
func (*GetAgentSkillsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{3}
}

func (x *GetAgentSkillsRes) GetSkills() map[string]int64 {
	if x != nil {
		return x.Skills
	}
	return nil
}

type CreateAgentSkillReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CreateAgentSkillReq) Reset() {
	*x = CreateAgentSkillReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAgentSkillReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAgentSkillReq) ProtoMessage() {}

func (x *CreateAgentSkillReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAgentSkillReq.ProtoReflect.Descriptor instead.
func (*CreateAgentSkillReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{4}
}

func (x *CreateAgentSkillReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAgentSkillReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CreateAgentSkillRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateAgentSkillRes) Reset() {
	*x = CreateAgentSkillRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAgentSkillRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAgentSkillRes) ProtoMessage() {}

func (x *CreateAgentSkillRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAgentSkillRes.ProtoReflect.Descriptor instead.
func (*CreateAgentSkillRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{5}
}

type UpdateAgentSkillReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentSkillSid int64  `protobuf:"varint,1,opt,name=agent_skill_sid,json=agentSkillSid,proto3" json:"agent_skill_sid,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UpdateAgentSkillReq) Reset() {
	*x = UpdateAgentSkillReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAgentSkillReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentSkillReq) ProtoMessage() {}

func (x *UpdateAgentSkillReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentSkillReq.ProtoReflect.Descriptor instead.
func (*UpdateAgentSkillReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateAgentSkillReq) GetAgentSkillSid() int64 {
	if x != nil {
		return x.AgentSkillSid
	}
	return 0
}

func (x *UpdateAgentSkillReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAgentSkillReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type UpdateAgentSkillRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAgentSkillRes) Reset() {
	*x = UpdateAgentSkillRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAgentSkillRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentSkillRes) ProtoMessage() {}

func (x *UpdateAgentSkillRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentSkillRes.ProtoReflect.Descriptor instead.
func (*UpdateAgentSkillRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{7}
}

type DeleteAgentSkillReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentSkillSid int64 `protobuf:"varint,1,opt,name=agent_skill_sid,json=agentSkillSid,proto3" json:"agent_skill_sid,omitempty"`
}

func (x *DeleteAgentSkillReq) Reset() {
	*x = DeleteAgentSkillReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAgentSkillReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAgentSkillReq) ProtoMessage() {}

func (x *DeleteAgentSkillReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAgentSkillReq.ProtoReflect.Descriptor instead.
func (*DeleteAgentSkillReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteAgentSkillReq) GetAgentSkillSid() int64 {
	if x != nil {
		return x.AgentSkillSid
	}
	return 0
}

type DeleteAgentSkillRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAgentSkillRes) Reset() {
	*x = DeleteAgentSkillRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAgentSkillRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAgentSkillRes) ProtoMessage() {}

func (x *DeleteAgentSkillRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAgentSkillRes.ProtoReflect.Descriptor instead.
func (*DeleteAgentSkillRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{9}
}

type ListAgentSkillsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAgentSkillsReq) Reset() {
	*x = ListAgentSkillsReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentSkillsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentSkillsReq) ProtoMessage() {}

func (x *ListAgentSkillsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentSkillsReq.ProtoReflect.Descriptor instead.
func (*ListAgentSkillsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{10}
}

type ListAgentSkillsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Skills []*AgentSkill `protobuf:"bytes,1,rep,name=skills,proto3" json:"skills,omitempty"`
}

func (x *ListAgentSkillsRes) Reset() {
	*x = ListAgentSkillsRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentSkillsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentSkillsRes) ProtoMessage() {}

func (x *ListAgentSkillsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentSkillsRes.ProtoReflect.Descriptor instead.
func (*ListAgentSkillsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{11}
}

func (x *ListAgentSkillsRes) GetSkills() []*AgentSkill {
	if x != nil {
		return x.Skills
	}
	return nil
}

// Request message for the ListSkillsForCurrentAgent RPC.
type ListSkillsForCurrentAgentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListSkillsForCurrentAgentReq) Reset() {
	*x = ListSkillsForCurrentAgentReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSkillsForCurrentAgentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSkillsForCurrentAgentReq) ProtoMessage() {}

func (x *ListSkillsForCurrentAgentReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSkillsForCurrentAgentReq.ProtoReflect.Descriptor instead.
func (*ListSkillsForCurrentAgentReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{12}
}

// Response message for the ListSkillsForCurrentAgent RPC.
type ListSkillsForCurrentAgentRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The returned list of skills belonging to the current agent.
	Skills []*AgentSkill `protobuf:"bytes,1,rep,name=skills,proto3" json:"skills,omitempty"`
}

func (x *ListSkillsForCurrentAgentRes) Reset() {
	*x = ListSkillsForCurrentAgentRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSkillsForCurrentAgentRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSkillsForCurrentAgentRes) ProtoMessage() {}

func (x *ListSkillsForCurrentAgentRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSkillsForCurrentAgentRes.ProtoReflect.Descriptor instead.
func (*ListSkillsForCurrentAgentRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{13}
}

func (x *ListSkillsForCurrentAgentRes) GetSkills() []*AgentSkill {
	if x != nil {
		return x.Skills
	}
	return nil
}

type GetAgentSessionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentSessionSid int64 `protobuf:"varint,1,opt,name=agent_session_sid,json=agentSessionSid,proto3" json:"agent_session_sid,omitempty"`
}

func (x *GetAgentSessionReq) Reset() {
	*x = GetAgentSessionReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAgentSessionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentSessionReq) ProtoMessage() {}

func (x *GetAgentSessionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentSessionReq.ProtoReflect.Descriptor instead.
func (*GetAgentSessionReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{14}
}

func (x *GetAgentSessionReq) GetAgentSessionSid() int64 {
	if x != nil {
		return x.AgentSessionSid
	}
	return 0
}

type AgentSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentSessionSid   int64                    `protobuf:"varint,1,opt,name=agent_session_sid,json=agentSessionSid,proto3" json:"agent_session_sid,omitempty"`
	WebLoginTime      *timestamppb.Timestamp   `protobuf:"bytes,2,opt,name=web_login_time,json=webLoginTime,proto3" json:"web_login_time,omitempty"`
	WebLogoutTime     *timestamppb.Timestamp   `protobuf:"bytes,3,opt,name=web_logout_time,json=webLogoutTime,proto3" json:"web_logout_time,omitempty"`
	IvrLoginTime      *timestamppb.Timestamp   `protobuf:"bytes,4,opt,name=ivr_login_time,json=ivrLoginTime,proto3" json:"ivr_login_time,omitempty"`
	IvrLogoutTime     *timestamppb.Timestamp   `protobuf:"bytes,5,opt,name=ivr_logout_time,json=ivrLogoutTime,proto3" json:"ivr_logout_time,omitempty"`
	IvrDuration       *wrapperspb.Int32Value   `protobuf:"bytes,6,opt,name=ivr_duration,json=ivrDuration,proto3" json:"ivr_duration,omitempty"`
	IvrBilledDuration *wrapperspb.Int32Value   `protobuf:"bytes,7,opt,name=ivr_billed_duration,json=ivrBilledDuration,proto3" json:"ivr_billed_duration,omitempty"`
	Cost              *wrapperspb.DoubleValue  `protobuf:"bytes,8,opt,name=cost,proto3" json:"cost,omitempty"`
	AgentSid          *wrapperspb.Int64Value   `protobuf:"bytes,9,opt,name=agent_sid,json=agentSid,proto3" json:"agent_sid,omitempty"`
	Status            *wrapperspb.Int32Value   `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	SoftphoneUser     *wrapperspb.BoolValue    `protobuf:"bytes,11,opt,name=softphone_user,json=softphoneUser,proto3" json:"softphone_user,omitempty"`
	AgentDialIn       commons.AgentDialIn_Enum `protobuf:"varint,12,opt,name=agent_dial_in,json=agentDialIn,proto3,enum=api.commons.AgentDialIn_Enum" json:"agent_dial_in,omitempty"`
	AgentCallerid     *wrapperspb.StringValue  `protobuf:"bytes,13,opt,name=agent_callerid,json=agentCallerid,proto3" json:"agent_callerid,omitempty"`
	AgentDialedNumber *wrapperspb.StringValue  `protobuf:"bytes,14,opt,name=agent_dialed_number,json=agentDialedNumber,proto3" json:"agent_dialed_number,omitempty"`
	Worker            *wrapperspb.StringValue  `protobuf:"bytes,15,opt,name=worker,proto3" json:"worker,omitempty"`
	HuntGroupSid      *wrapperspb.Int64Value   `protobuf:"bytes,16,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	WaitDuration      *wrapperspb.Int32Value   `protobuf:"bytes,17,opt,name=wait_duration,json=waitDuration,proto3" json:"wait_duration,omitempty"`
	PauseDuration     *wrapperspb.Int32Value   `protobuf:"bytes,18,opt,name=pause_duration,json=pauseDuration,proto3" json:"pause_duration,omitempty"`
	TransferDuration  *wrapperspb.Int32Value   `protobuf:"bytes,19,opt,name=transfer_duration,json=transferDuration,proto3" json:"transfer_duration,omitempty"`
	WrapUpDuration    *wrapperspb.Int32Value   `protobuf:"bytes,20,opt,name=wrap_up_duration,json=wrapUpDuration,proto3" json:"wrap_up_duration,omitempty"`
	TalkDuration      *wrapperspb.Int32Value   `protobuf:"bytes,21,opt,name=talk_duration,json=talkDuration,proto3" json:"talk_duration,omitempty"`
	ManualDuration    *wrapperspb.Int32Value   `protobuf:"bytes,22,opt,name=manual_duration,json=manualDuration,proto3" json:"manual_duration,omitempty"`
	PreviewDuration   *wrapperspb.Int32Value   `protobuf:"bytes,23,opt,name=preview_duration,json=previewDuration,proto3" json:"preview_duration,omitempty"`
	HoldDuration      *wrapperspb.Int32Value   `protobuf:"bytes,24,opt,name=hold_duration,json=holdDuration,proto3" json:"hold_duration,omitempty"`
}

func (x *AgentSession) Reset() {
	*x = AgentSession{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentSession) ProtoMessage() {}

func (x *AgentSession) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentSession.ProtoReflect.Descriptor instead.
func (*AgentSession) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{15}
}

func (x *AgentSession) GetAgentSessionSid() int64 {
	if x != nil {
		return x.AgentSessionSid
	}
	return 0
}

func (x *AgentSession) GetWebLoginTime() *timestamppb.Timestamp {
	if x != nil {
		return x.WebLoginTime
	}
	return nil
}

func (x *AgentSession) GetWebLogoutTime() *timestamppb.Timestamp {
	if x != nil {
		return x.WebLogoutTime
	}
	return nil
}

func (x *AgentSession) GetIvrLoginTime() *timestamppb.Timestamp {
	if x != nil {
		return x.IvrLoginTime
	}
	return nil
}

func (x *AgentSession) GetIvrLogoutTime() *timestamppb.Timestamp {
	if x != nil {
		return x.IvrLogoutTime
	}
	return nil
}

func (x *AgentSession) GetIvrDuration() *wrapperspb.Int32Value {
	if x != nil {
		return x.IvrDuration
	}
	return nil
}

func (x *AgentSession) GetIvrBilledDuration() *wrapperspb.Int32Value {
	if x != nil {
		return x.IvrBilledDuration
	}
	return nil
}

func (x *AgentSession) GetCost() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *AgentSession) GetAgentSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.AgentSid
	}
	return nil
}

func (x *AgentSession) GetStatus() *wrapperspb.Int32Value {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AgentSession) GetSoftphoneUser() *wrapperspb.BoolValue {
	if x != nil {
		return x.SoftphoneUser
	}
	return nil
}

func (x *AgentSession) GetAgentDialIn() commons.AgentDialIn_Enum {
	if x != nil {
		return x.AgentDialIn
	}
	return commons.AgentDialIn_Enum(0)
}

func (x *AgentSession) GetAgentCallerid() *wrapperspb.StringValue {
	if x != nil {
		return x.AgentCallerid
	}
	return nil
}

func (x *AgentSession) GetAgentDialedNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.AgentDialedNumber
	}
	return nil
}

func (x *AgentSession) GetWorker() *wrapperspb.StringValue {
	if x != nil {
		return x.Worker
	}
	return nil
}

func (x *AgentSession) GetHuntGroupSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.HuntGroupSid
	}
	return nil
}

func (x *AgentSession) GetWaitDuration() *wrapperspb.Int32Value {
	if x != nil {
		return x.WaitDuration
	}
	return nil
}

func (x *AgentSession) GetPauseDuration() *wrapperspb.Int32Value {
	if x != nil {
		return x.PauseDuration
	}
	return nil
}

func (x *AgentSession) GetTransferDuration() *wrapperspb.Int32Value {
	if x != nil {
		return x.TransferDuration
	}
	return nil
}

func (x *AgentSession) GetWrapUpDuration() *wrapperspb.Int32Value {
	if x != nil {
		return x.WrapUpDuration
	}
	return nil
}

func (x *AgentSession) GetTalkDuration() *wrapperspb.Int32Value {
	if x != nil {
		return x.TalkDuration
	}
	return nil
}

func (x *AgentSession) GetManualDuration() *wrapperspb.Int32Value {
	if x != nil {
		return x.ManualDuration
	}
	return nil
}

func (x *AgentSession) GetPreviewDuration() *wrapperspb.Int32Value {
	if x != nil {
		return x.PreviewDuration
	}
	return nil
}

func (x *AgentSession) GetHoldDuration() *wrapperspb.Int32Value {
	if x != nil {
		return x.HoldDuration
	}
	return nil
}

type GetCurrentAgentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCurrentAgentReq) Reset() {
	*x = GetCurrentAgentReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCurrentAgentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentAgentReq) ProtoMessage() {}

func (x *GetCurrentAgentReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentAgentReq.ProtoReflect.Descriptor instead.
func (*GetCurrentAgentReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{16}
}

type Agent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentSid               int64                   `protobuf:"varint,1,opt,name=agent_sid,json=agentSid,proto3" json:"agent_sid,omitempty"`
	ClientSid              int64                   `protobuf:"varint,2,opt,name=client_sid,json=clientSid,proto3" json:"client_sid,omitempty"`
	AgentProfileSid        int64                   `protobuf:"varint,3,opt,name=agent_profile_sid,json=agentProfileSid,proto3" json:"agent_profile_sid,omitempty"`
	WebLogin               string                  `protobuf:"bytes,4,opt,name=web_login,json=webLogin,proto3" json:"web_login,omitempty"`
	AgentId                *wrapperspb.Int64Value  `protobuf:"bytes,7,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	AgentPin               *wrapperspb.Int64Value  `protobuf:"bytes,8,opt,name=agent_pin,json=agentPin,proto3" json:"agent_pin,omitempty"`
	AddDate                *timestamppb.Timestamp  `protobuf:"bytes,9,opt,name=add_date,json=addDate,proto3" json:"add_date,omitempty"`
	ModifyDate             *timestamppb.Timestamp  `protobuf:"bytes,10,opt,name=modify_date,json=modifyDate,proto3" json:"modify_date,omitempty"`
	CallbackNumber         *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=callback_number,json=callbackNumber,proto3" json:"callback_number,omitempty"`
	CallbackExtension      *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=callback_extension,json=callbackExtension,proto3" json:"callback_extension,omitempty"`
	HuntGroupSid           *wrapperspb.Int64Value  `protobuf:"bytes,13,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	SubscriberUsername     *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=subscriber_username,json=subscriberUsername,proto3" json:"subscriber_username,omitempty"`
	PartnerAgentId         *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=partner_agent_id,json=partnerAgentId,proto3" json:"partner_agent_id,omitempty"`
	LastPasswordChangeDate *timestamppb.Timestamp  `protobuf:"bytes,16,opt,name=last_password_change_date,json=lastPasswordChangeDate,proto3" json:"last_password_change_date,omitempty"`
}

func (x *Agent) Reset() {
	*x = Agent{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Agent) ProtoMessage() {}

func (x *Agent) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Agent.ProtoReflect.Descriptor instead.
func (*Agent) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{17}
}

func (x *Agent) GetAgentSid() int64 {
	if x != nil {
		return x.AgentSid
	}
	return 0
}

func (x *Agent) GetClientSid() int64 {
	if x != nil {
		return x.ClientSid
	}
	return 0
}

func (x *Agent) GetAgentProfileSid() int64 {
	if x != nil {
		return x.AgentProfileSid
	}
	return 0
}

func (x *Agent) GetWebLogin() string {
	if x != nil {
		return x.WebLogin
	}
	return ""
}

func (x *Agent) GetAgentId() *wrapperspb.Int64Value {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *Agent) GetAgentPin() *wrapperspb.Int64Value {
	if x != nil {
		return x.AgentPin
	}
	return nil
}

func (x *Agent) GetAddDate() *timestamppb.Timestamp {
	if x != nil {
		return x.AddDate
	}
	return nil
}

func (x *Agent) GetModifyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifyDate
	}
	return nil
}

func (x *Agent) GetCallbackNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.CallbackNumber
	}
	return nil
}

func (x *Agent) GetCallbackExtension() *wrapperspb.StringValue {
	if x != nil {
		return x.CallbackExtension
	}
	return nil
}

func (x *Agent) GetHuntGroupSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.HuntGroupSid
	}
	return nil
}

func (x *Agent) GetSubscriberUsername() *wrapperspb.StringValue {
	if x != nil {
		return x.SubscriberUsername
	}
	return nil
}

func (x *Agent) GetPartnerAgentId() *wrapperspb.StringValue {
	if x != nil {
		return x.PartnerAgentId
	}
	return nil
}

func (x *Agent) GetLastPasswordChangeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastPasswordChangeDate
	}
	return nil
}

type GetClientInfoDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallSid  int64                 `protobuf:"varint,1,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	CallType commons.CallType_Enum `protobuf:"varint,2,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
	TaskSid  int64                 `protobuf:"varint,4,opt,name=task_sid,json=taskSid,proto3" json:"task_sid,omitempty"`
}

func (x *GetClientInfoDataReq) Reset() {
	*x = GetClientInfoDataReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClientInfoDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientInfoDataReq) ProtoMessage() {}

func (x *GetClientInfoDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientInfoDataReq.ProtoReflect.Descriptor instead.
func (*GetClientInfoDataReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{18}
}

func (x *GetClientInfoDataReq) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *GetClientInfoDataReq) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

func (x *GetClientInfoDataReq) GetTaskSid() int64 {
	if x != nil {
		return x.TaskSid
	}
	return 0
}

type GetClientInfoDataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber string                       `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	CallerId    string                       `protobuf:"bytes,2,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	Rows        []*commons.ClientInfoDataRow `protobuf:"bytes,3,rep,name=rows,proto3" json:"rows,omitempty"`
	CountrySid  int64                        `protobuf:"varint,4,opt,name=country_sid,json=countrySid,proto3" json:"country_sid,omitempty"`
}

func (x *GetClientInfoDataRes) Reset() {
	*x = GetClientInfoDataRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClientInfoDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientInfoDataRes) ProtoMessage() {}

func (x *GetClientInfoDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientInfoDataRes.ProtoReflect.Descriptor instead.
func (*GetClientInfoDataRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{19}
}

func (x *GetClientInfoDataRes) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *GetClientInfoDataRes) GetCallerId() string {
	if x != nil {
		return x.CallerId
	}
	return ""
}

func (x *GetClientInfoDataRes) GetRows() []*commons.ClientInfoDataRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *GetClientInfoDataRes) GetCountrySid() int64 {
	if x != nil {
		return x.CountrySid
	}
	return 0
}

type GetClientInfoDisplayTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallSid      int64                 `protobuf:"varint,1,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	CallType     commons.CallType_Enum `protobuf:"varint,2,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
	HuntGroupSid int64                 `protobuf:"varint,4,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
}

func (x *GetClientInfoDisplayTemplateReq) Reset() {
	*x = GetClientInfoDisplayTemplateReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClientInfoDisplayTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientInfoDisplayTemplateReq) ProtoMessage() {}

func (x *GetClientInfoDisplayTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientInfoDisplayTemplateReq.ProtoReflect.Descriptor instead.
func (*GetClientInfoDisplayTemplateReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{20}
}

func (x *GetClientInfoDisplayTemplateReq) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *GetClientInfoDisplayTemplateReq) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

func (x *GetClientInfoDisplayTemplateReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

type GetClientInfoDisplayTemplateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayAllFields     bool                                    `protobuf:"varint,1,opt,name=display_all_fields,json=displayAllFields,proto3" json:"display_all_fields,omitempty"`
	DialedNumberSettings *commons.DialedNumberFieldSettings      `protobuf:"bytes,2,opt,name=dialed_number_settings,json=dialedNumberSettings,proto3" json:"dialed_number_settings,omitempty"`
	Rows                 []*commons.ClientInfoDisplayTemplateRow `protobuf:"bytes,3,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *GetClientInfoDisplayTemplateRes) Reset() {
	*x = GetClientInfoDisplayTemplateRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClientInfoDisplayTemplateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientInfoDisplayTemplateRes) ProtoMessage() {}

func (x *GetClientInfoDisplayTemplateRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientInfoDisplayTemplateRes.ProtoReflect.Descriptor instead.
func (*GetClientInfoDisplayTemplateRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{21}
}

func (x *GetClientInfoDisplayTemplateRes) GetDisplayAllFields() bool {
	if x != nil {
		return x.DisplayAllFields
	}
	return false
}

func (x *GetClientInfoDisplayTemplateRes) GetDialedNumberSettings() *commons.DialedNumberFieldSettings {
	if x != nil {
		return x.DialedNumberSettings
	}
	return nil
}

func (x *GetClientInfoDisplayTemplateRes) GetRows() []*commons.ClientInfoDisplayTemplateRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

type ListAgentStatisticsDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HuntGroupSid int64 `protobuf:"varint,3,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	SessionSid   int64 `protobuf:"varint,4,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
}

func (x *ListAgentStatisticsDataReq) Reset() {
	*x = ListAgentStatisticsDataReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentStatisticsDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentStatisticsDataReq) ProtoMessage() {}

func (x *ListAgentStatisticsDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentStatisticsDataReq.ProtoReflect.Descriptor instead.
func (*ListAgentStatisticsDataReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{22}
}

func (x *ListAgentStatisticsDataReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *ListAgentStatisticsDataReq) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

type StatisticsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentSessionCount *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=agent_session_count,json=agentSessionCount,proto3" json:"agent_session_count,omitempty"`
	IvrDuration       *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=ivr_duration,json=ivrDuration,proto3" json:"ivr_duration,omitempty"`
	AgentWaitDuration *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=agent_wait_duration,json=agentWaitDuration,proto3" json:"agent_wait_duration,omitempty"`
	CallWaitDuration  *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=call_wait_duration,json=callWaitDuration,proto3" json:"call_wait_duration,omitempty"`
	HoldDuration      *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=hold_duration,json=holdDuration,proto3" json:"hold_duration,omitempty"`
	ManualDuration    *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=manual_duration,json=manualDuration,proto3" json:"manual_duration,omitempty"`
	PauseDuration     *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=pause_duration,json=pauseDuration,proto3" json:"pause_duration,omitempty"`
	PreviewDuration   *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=preview_duration,json=previewDuration,proto3" json:"preview_duration,omitempty"`
	SuspendedDuration *wrapperspb.Int64Value `protobuf:"bytes,9,opt,name=suspended_duration,json=suspendedDuration,proto3" json:"suspended_duration,omitempty"`
	TalkDuration      *wrapperspb.Int64Value `protobuf:"bytes,10,opt,name=talk_duration,json=talkDuration,proto3" json:"talk_duration,omitempty"`
	TransferDuration  *wrapperspb.Int64Value `protobuf:"bytes,11,opt,name=transfer_duration,json=transferDuration,proto3" json:"transfer_duration,omitempty"`
	WrapUpDuration    *wrapperspb.Int64Value `protobuf:"bytes,12,opt,name=wrap_up_duration,json=wrapUpDuration,proto3" json:"wrap_up_duration,omitempty"`
	AgentName         string                 `protobuf:"bytes,13,opt,name=agent_name,json=agentName,proto3" json:"agent_name,omitempty"`
	HuntGroupName     string                 `protobuf:"bytes,14,opt,name=hunt_group_name,json=huntGroupName,proto3" json:"hunt_group_name,omitempty"`
	CallCount         int64                  `protobuf:"varint,15,opt,name=call_count,json=callCount,proto3" json:"call_count,omitempty"`
	WebLoginTime      *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=web_login_time,json=webLoginTime,proto3" json:"web_login_time,omitempty"`
	AgentSid          int64                  `protobuf:"varint,17,opt,name=agent_sid,json=agentSid,proto3" json:"agent_sid,omitempty"`
	HuntGroupSid      int64                  `protobuf:"varint,18,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
}

func (x *StatisticsData) Reset() {
	*x = StatisticsData{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatisticsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsData) ProtoMessage() {}

func (x *StatisticsData) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsData.ProtoReflect.Descriptor instead.
func (*StatisticsData) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{23}
}

func (x *StatisticsData) GetAgentSessionCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.AgentSessionCount
	}
	return nil
}

func (x *StatisticsData) GetIvrDuration() *wrapperspb.Int64Value {
	if x != nil {
		return x.IvrDuration
	}
	return nil
}

func (x *StatisticsData) GetAgentWaitDuration() *wrapperspb.Int64Value {
	if x != nil {
		return x.AgentWaitDuration
	}
	return nil
}

func (x *StatisticsData) GetCallWaitDuration() *wrapperspb.Int64Value {
	if x != nil {
		return x.CallWaitDuration
	}
	return nil
}

func (x *StatisticsData) GetHoldDuration() *wrapperspb.Int64Value {
	if x != nil {
		return x.HoldDuration
	}
	return nil
}

func (x *StatisticsData) GetManualDuration() *wrapperspb.Int64Value {
	if x != nil {
		return x.ManualDuration
	}
	return nil
}

func (x *StatisticsData) GetPauseDuration() *wrapperspb.Int64Value {
	if x != nil {
		return x.PauseDuration
	}
	return nil
}

func (x *StatisticsData) GetPreviewDuration() *wrapperspb.Int64Value {
	if x != nil {
		return x.PreviewDuration
	}
	return nil
}

func (x *StatisticsData) GetSuspendedDuration() *wrapperspb.Int64Value {
	if x != nil {
		return x.SuspendedDuration
	}
	return nil
}

func (x *StatisticsData) GetTalkDuration() *wrapperspb.Int64Value {
	if x != nil {
		return x.TalkDuration
	}
	return nil
}

func (x *StatisticsData) GetTransferDuration() *wrapperspb.Int64Value {
	if x != nil {
		return x.TransferDuration
	}
	return nil
}

func (x *StatisticsData) GetWrapUpDuration() *wrapperspb.Int64Value {
	if x != nil {
		return x.WrapUpDuration
	}
	return nil
}

func (x *StatisticsData) GetAgentName() string {
	if x != nil {
		return x.AgentName
	}
	return ""
}

func (x *StatisticsData) GetHuntGroupName() string {
	if x != nil {
		return x.HuntGroupName
	}
	return ""
}

func (x *StatisticsData) GetCallCount() int64 {
	if x != nil {
		return x.CallCount
	}
	return 0
}

func (x *StatisticsData) GetWebLoginTime() *timestamppb.Timestamp {
	if x != nil {
		return x.WebLoginTime
	}
	return nil
}

func (x *StatisticsData) GetAgentSid() int64 {
	if x != nil {
		return x.AgentSid
	}
	return 0
}

func (x *StatisticsData) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

type StatisticsColumnDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeaderLabel string `protobuf:"bytes,1,opt,name=header_label,json=headerLabel,proto3" json:"header_label,omitempty"`
	StatisticId string `protobuf:"bytes,2,opt,name=statistic_id,json=statisticId,proto3" json:"statistic_id,omitempty"`
	ToolTip     string `protobuf:"bytes,3,opt,name=tool_tip,json=toolTip,proto3" json:"tool_tip,omitempty"`
}

func (x *StatisticsColumnDefinition) Reset() {
	*x = StatisticsColumnDefinition{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatisticsColumnDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsColumnDefinition) ProtoMessage() {}

func (x *StatisticsColumnDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsColumnDefinition.ProtoReflect.Descriptor instead.
func (*StatisticsColumnDefinition) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{24}
}

func (x *StatisticsColumnDefinition) GetHeaderLabel() string {
	if x != nil {
		return x.HeaderLabel
	}
	return ""
}

func (x *StatisticsColumnDefinition) GetStatisticId() string {
	if x != nil {
		return x.StatisticId
	}
	return ""
}

func (x *StatisticsColumnDefinition) GetToolTip() string {
	if x != nil {
		return x.ToolTip
	}
	return ""
}

type ListAgentStatisticsDataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatisticsData []*StatisticsData             `protobuf:"bytes,1,rep,name=statistics_data,json=statisticsData,proto3" json:"statistics_data,omitempty"`
	ShownColumns   []*StatisticsColumnDefinition `protobuf:"bytes,2,rep,name=shown_columns,json=shownColumns,proto3" json:"shown_columns,omitempty"`
}

func (x *ListAgentStatisticsDataRes) Reset() {
	*x = ListAgentStatisticsDataRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentStatisticsDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentStatisticsDataRes) ProtoMessage() {}

func (x *ListAgentStatisticsDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentStatisticsDataRes.ProtoReflect.Descriptor instead.
func (*ListAgentStatisticsDataRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{25}
}

func (x *ListAgentStatisticsDataRes) GetStatisticsData() []*StatisticsData {
	if x != nil {
		return x.StatisticsData
	}
	return nil
}

func (x *ListAgentStatisticsDataRes) GetShownColumns() []*StatisticsColumnDefinition {
	if x != nil {
		return x.ShownColumns
	}
	return nil
}

// A phone book
type PhoneBook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The entry type, either 'Hunt Group' or 'Client"
	EntryType string `protobuf:"bytes,2,opt,name=entry_type,json=entryType,proto3" json:"entry_type,omitempty"`
	// The entry name
	EntryName string `protobuf:"bytes,3,opt,name=entry_name,json=entryName,proto3" json:"entry_name,omitempty"`
	// Entry type will be 'Hunt Group' if this field is set.
	// Otherwise the entry type will be 'Client'.
	HuntGroupSid *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	// The phone number
	PhoneNumber string `protobuf:"bytes,6,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// The phone number type determines where this phone book is used.
	// It can be any combination of Caller ID, Outbound, and Transfer, separated by a colon.
	// For example -> Caller ID:Outbound:Transfer would be all three.
	PhoneNumberType *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=phone_number_type,json=phoneNumberType,proto3" json:"phone_number_type,omitempty"`
	// Whether the phone number is displayed to the agent or not. The entry name will always be displayed.
	PhoneNumberHidden bool `protobuf:"varint,8,opt,name=phone_number_hidden,json=phoneNumberHidden,proto3" json:"phone_number_hidden,omitempty"`
}

func (x *PhoneBook) Reset() {
	*x = PhoneBook{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PhoneBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneBook) ProtoMessage() {}

func (x *PhoneBook) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneBook.ProtoReflect.Descriptor instead.
func (*PhoneBook) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{26}
}

func (x *PhoneBook) GetEntryType() string {
	if x != nil {
		return x.EntryType
	}
	return ""
}

func (x *PhoneBook) GetEntryName() string {
	if x != nil {
		return x.EntryName
	}
	return ""
}

func (x *PhoneBook) GetHuntGroupSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.HuntGroupSid
	}
	return nil
}

func (x *PhoneBook) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *PhoneBook) GetPhoneNumberType() *wrapperspb.StringValue {
	if x != nil {
		return x.PhoneNumberType
	}
	return nil
}

func (x *PhoneBook) GetPhoneNumberHidden() bool {
	if x != nil {
		return x.PhoneNumberHidden
	}
	return false
}

// An entry that is associted with a phone book.
type PhoneBookEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sid that matches this phone book entry to a specific phone book.
	PhoneBookSid int64 `protobuf:"varint,1,opt,name=phone_book_sid,json=phoneBookSid,proto3" json:"phone_book_sid,omitempty"`
	// The entry name
	EntryName string `protobuf:"bytes,2,opt,name=entry_name,json=entryName,proto3" json:"entry_name,omitempty"`
	// Whether the phone book entry is a standard number or a SIP URI.
	//
	// Types that are assignable to PhoneBookEntry:
	//
	//	*PhoneBookEntry_Standard
	//	*PhoneBookEntry_SipUri
	PhoneBookEntry isPhoneBookEntry_PhoneBookEntry `protobuf_oneof:"phone_book_entry"`
	// Whether the phone number is displayed to the agent or not. The entry name will always be displayed.
	PhoneNumberHidden bool `protobuf:"varint,5,opt,name=phone_number_hidden,json=phoneNumberHidden,proto3" json:"phone_number_hidden,omitempty"`
}

func (x *PhoneBookEntry) Reset() {
	*x = PhoneBookEntry{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PhoneBookEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneBookEntry) ProtoMessage() {}

func (x *PhoneBookEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneBookEntry.ProtoReflect.Descriptor instead.
func (*PhoneBookEntry) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{27}
}

func (x *PhoneBookEntry) GetPhoneBookSid() int64 {
	if x != nil {
		return x.PhoneBookSid
	}
	return 0
}

func (x *PhoneBookEntry) GetEntryName() string {
	if x != nil {
		return x.EntryName
	}
	return ""
}

func (m *PhoneBookEntry) GetPhoneBookEntry() isPhoneBookEntry_PhoneBookEntry {
	if m != nil {
		return m.PhoneBookEntry
	}
	return nil
}

func (x *PhoneBookEntry) GetStandard() *PhoneBookStandardNumber {
	if x, ok := x.GetPhoneBookEntry().(*PhoneBookEntry_Standard); ok {
		return x.Standard
	}
	return nil
}

func (x *PhoneBookEntry) GetSipUri() *PhoneBookSIPURI {
	if x, ok := x.GetPhoneBookEntry().(*PhoneBookEntry_SipUri); ok {
		return x.SipUri
	}
	return nil
}

func (x *PhoneBookEntry) GetPhoneNumberHidden() bool {
	if x != nil {
		return x.PhoneNumberHidden
	}
	return false
}

type isPhoneBookEntry_PhoneBookEntry interface {
	isPhoneBookEntry_PhoneBookEntry()
}

type PhoneBookEntry_Standard struct {
	Standard *PhoneBookStandardNumber `protobuf:"bytes,3,opt,name=standard,proto3,oneof"`
}

type PhoneBookEntry_SipUri struct {
	SipUri *PhoneBookSIPURI `protobuf:"bytes,4,opt,name=sip_uri,json=sipUri,proto3,oneof"`
}

func (*PhoneBookEntry_Standard) isPhoneBookEntry_PhoneBookEntry() {}

func (*PhoneBookEntry_SipUri) isPhoneBookEntry_PhoneBookEntry() {}

// A standard phone number
type PhoneBookStandardNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The phone number
	PhoneNumber string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// The phone number types determines where this phone book is used.
	// It can be any combination of Caller ID, Outbound, and Transfer, separated by a colon.
	// For example -> Caller ID:Outbound:Transfer would be all three.
	PhoneNumberTypes []commons.PhoneBookPhoneNumberType `protobuf:"varint,2,rep,packed,name=phone_number_types,json=phoneNumberTypes,proto3,enum=api.commons.PhoneBookPhoneNumberType" json:"phone_number_types,omitempty"`
	WhiteList        bool                               `protobuf:"varint,3,opt,name=white_list,json=whiteList,proto3" json:"white_list,omitempty"`
}

func (x *PhoneBookStandardNumber) Reset() {
	*x = PhoneBookStandardNumber{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PhoneBookStandardNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneBookStandardNumber) ProtoMessage() {}

func (x *PhoneBookStandardNumber) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneBookStandardNumber.ProtoReflect.Descriptor instead.
func (*PhoneBookStandardNumber) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{28}
}

func (x *PhoneBookStandardNumber) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *PhoneBookStandardNumber) GetPhoneNumberTypes() []commons.PhoneBookPhoneNumberType {
	if x != nil {
		return x.PhoneNumberTypes
	}
	return nil
}

func (x *PhoneBookStandardNumber) GetWhiteList() bool {
	if x != nil {
		return x.WhiteList
	}
	return false
}

// A SIP URI
type PhoneBookSIPURI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The part of the SIP URI before the @ symbol
	SipUriLeft string `protobuf:"bytes,1,opt,name=sip_uri_left,json=sipUriLeft,proto3" json:"sip_uri_left,omitempty"`
	// The part of the SIP URI after the @ symbol
	SipUriRight string `protobuf:"bytes,2,opt,name=sip_uri_right,json=sipUriRight,proto3" json:"sip_uri_right,omitempty"`
	// The sip types determines where this phone book is used.
	// It can be Outbound, Transfer, or both separated by a colon.
	// For example -> Outbound:Transfer
	SipTypes []commons.PhoneBookSIPType `protobuf:"varint,3,rep,packed,name=sip_types,json=sipTypes,proto3,enum=api.commons.PhoneBookSIPType" json:"sip_types,omitempty"`
}

func (x *PhoneBookSIPURI) Reset() {
	*x = PhoneBookSIPURI{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PhoneBookSIPURI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneBookSIPURI) ProtoMessage() {}

func (x *PhoneBookSIPURI) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneBookSIPURI.ProtoReflect.Descriptor instead.
func (*PhoneBookSIPURI) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{29}
}

func (x *PhoneBookSIPURI) GetSipUriLeft() string {
	if x != nil {
		return x.SipUriLeft
	}
	return ""
}

func (x *PhoneBookSIPURI) GetSipUriRight() string {
	if x != nil {
		return x.SipUriRight
	}
	return ""
}

func (x *PhoneBookSIPURI) GetSipTypes() []commons.PhoneBookSIPType {
	if x != nil {
		return x.SipTypes
	}
	return nil
}

// Request message for the ListClientPhoneBookEntries RPC
type ListClientPhoneBookEntriesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListClientPhoneBookEntriesReq) Reset() {
	*x = ListClientPhoneBookEntriesReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClientPhoneBookEntriesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClientPhoneBookEntriesReq) ProtoMessage() {}

func (x *ListClientPhoneBookEntriesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClientPhoneBookEntriesReq.ProtoReflect.Descriptor instead.
func (*ListClientPhoneBookEntriesReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{30}
}

// Response message for the ListClientPhoneBookEntries RPC
type ListClientPhoneBookEntriesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of phone book entries
	PhoneBookEntries []*PhoneBookEntry `protobuf:"bytes,1,rep,name=phone_book_entries,json=phoneBookEntries,proto3" json:"phone_book_entries,omitempty"`
	// This field is not set, since the entry type is 'Client'.
	HuntGroupSid int64 `protobuf:"varint,2,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
}

func (x *ListClientPhoneBookEntriesRes) Reset() {
	*x = ListClientPhoneBookEntriesRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClientPhoneBookEntriesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClientPhoneBookEntriesRes) ProtoMessage() {}

func (x *ListClientPhoneBookEntriesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClientPhoneBookEntriesRes.ProtoReflect.Descriptor instead.
func (*ListClientPhoneBookEntriesRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{31}
}

func (x *ListClientPhoneBookEntriesRes) GetPhoneBookEntries() []*PhoneBookEntry {
	if x != nil {
		return x.PhoneBookEntries
	}
	return nil
}

func (x *ListClientPhoneBookEntriesRes) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

// Request message for the ListHuntGroupPhoneBookEntries RPC
type ListHuntGroupPhoneBookEntriesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required to specify which Hunt Group entries are requested
	HuntGroupSid int64 `protobuf:"varint,1,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
}

func (x *ListHuntGroupPhoneBookEntriesReq) Reset() {
	*x = ListHuntGroupPhoneBookEntriesReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHuntGroupPhoneBookEntriesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHuntGroupPhoneBookEntriesReq) ProtoMessage() {}

func (x *ListHuntGroupPhoneBookEntriesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHuntGroupPhoneBookEntriesReq.ProtoReflect.Descriptor instead.
func (*ListHuntGroupPhoneBookEntriesReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{32}
}

func (x *ListHuntGroupPhoneBookEntriesReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

// Response message for the ListHuntGroupPhoneBookEntries RPC
type ListHuntGroupPhoneBookEntriesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of phone book entries
	PhoneBookEntries []*PhoneBookEntry `protobuf:"bytes,1,rep,name=phone_book_entries,json=phoneBookEntries,proto3" json:"phone_book_entries,omitempty"`
	// This field is set, since the entry type is 'Hunt Group"
	HuntGroupSid int64 `protobuf:"varint,2,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
}

func (x *ListHuntGroupPhoneBookEntriesRes) Reset() {
	*x = ListHuntGroupPhoneBookEntriesRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHuntGroupPhoneBookEntriesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHuntGroupPhoneBookEntriesRes) ProtoMessage() {}

func (x *ListHuntGroupPhoneBookEntriesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHuntGroupPhoneBookEntriesRes.ProtoReflect.Descriptor instead.
func (*ListHuntGroupPhoneBookEntriesRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{33}
}

func (x *ListHuntGroupPhoneBookEntriesRes) GetPhoneBookEntries() []*PhoneBookEntry {
	if x != nil {
		return x.PhoneBookEntries
	}
	return nil
}

func (x *ListHuntGroupPhoneBookEntriesRes) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

// Request message for the CreatePhoneBookEntry RPC
type CreatePhoneBookEntryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Entry type will be 'Hunt Group' if this field is set.
	// Otherwise the entry type will be 'Client'.
	HuntGroupSid int64 `protobuf:"varint,1,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	// The entry name
	EntryName string `protobuf:"bytes,2,opt,name=entry_name,json=entryName,proto3" json:"entry_name,omitempty"`
	// Whether the phone book entry is a standard number or a SIP URI.
	//
	// Types that are assignable to PhoneBookEntry:
	//
	//	*CreatePhoneBookEntryReq_Standard
	//	*CreatePhoneBookEntryReq_SipUri
	PhoneBookEntry isCreatePhoneBookEntryReq_PhoneBookEntry `protobuf_oneof:"phone_book_entry"`
	// Whether the phone number is displayed to the agent or not. The entry name will always be displayed.
	PhoneNumberHidden bool `protobuf:"varint,5,opt,name=phone_number_hidden,json=phoneNumberHidden,proto3" json:"phone_number_hidden,omitempty"`
}

func (x *CreatePhoneBookEntryReq) Reset() {
	*x = CreatePhoneBookEntryReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePhoneBookEntryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePhoneBookEntryReq) ProtoMessage() {}

func (x *CreatePhoneBookEntryReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePhoneBookEntryReq.ProtoReflect.Descriptor instead.
func (*CreatePhoneBookEntryReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{34}
}

func (x *CreatePhoneBookEntryReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *CreatePhoneBookEntryReq) GetEntryName() string {
	if x != nil {
		return x.EntryName
	}
	return ""
}

func (m *CreatePhoneBookEntryReq) GetPhoneBookEntry() isCreatePhoneBookEntryReq_PhoneBookEntry {
	if m != nil {
		return m.PhoneBookEntry
	}
	return nil
}

func (x *CreatePhoneBookEntryReq) GetStandard() *PhoneBookStandardNumber {
	if x, ok := x.GetPhoneBookEntry().(*CreatePhoneBookEntryReq_Standard); ok {
		return x.Standard
	}
	return nil
}

func (x *CreatePhoneBookEntryReq) GetSipUri() *PhoneBookSIPURI {
	if x, ok := x.GetPhoneBookEntry().(*CreatePhoneBookEntryReq_SipUri); ok {
		return x.SipUri
	}
	return nil
}

func (x *CreatePhoneBookEntryReq) GetPhoneNumberHidden() bool {
	if x != nil {
		return x.PhoneNumberHidden
	}
	return false
}

type isCreatePhoneBookEntryReq_PhoneBookEntry interface {
	isCreatePhoneBookEntryReq_PhoneBookEntry()
}

type CreatePhoneBookEntryReq_Standard struct {
	Standard *PhoneBookStandardNumber `protobuf:"bytes,3,opt,name=standard,proto3,oneof"`
}

type CreatePhoneBookEntryReq_SipUri struct {
	SipUri *PhoneBookSIPURI `protobuf:"bytes,4,opt,name=sip_uri,json=sipUri,proto3,oneof"`
}

func (*CreatePhoneBookEntryReq_Standard) isCreatePhoneBookEntryReq_PhoneBookEntry() {}

func (*CreatePhoneBookEntryReq_SipUri) isCreatePhoneBookEntryReq_PhoneBookEntry() {}

// Response message for the CreatePhoneBookEntry RPC
type CreatePhoneBookEntryRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreatePhoneBookEntryRes) Reset() {
	*x = CreatePhoneBookEntryRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePhoneBookEntryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePhoneBookEntryRes) ProtoMessage() {}

func (x *CreatePhoneBookEntryRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePhoneBookEntryRes.ProtoReflect.Descriptor instead.
func (*CreatePhoneBookEntryRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{35}
}

// Request message for the UpdatePhoneBookEntry RPC
type UpdatePhoneBookEntryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sid that matches this phone book entry to a specific phone book.
	PhoneBookSid int64 `protobuf:"varint,1,opt,name=phone_book_sid,json=phoneBookSid,proto3" json:"phone_book_sid,omitempty"`
	// Entry type will be 'Hunt Group' if this field is set.
	// Otherwise the entry type will be 'Client'.
	HuntGroupSid int64 `protobuf:"varint,2,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	// The entry name
	EntryName string `protobuf:"bytes,3,opt,name=entry_name,json=entryName,proto3" json:"entry_name,omitempty"`
	// Whether the phone book entry is a standard number or a SIP URI.
	//
	// Types that are assignable to PhoneBookEntry:
	//
	//	*UpdatePhoneBookEntryReq_Standard
	//	*UpdatePhoneBookEntryReq_SipUri
	PhoneBookEntry isUpdatePhoneBookEntryReq_PhoneBookEntry `protobuf_oneof:"phone_book_entry"`
	// Whether the phone number is displayed to the agent or not. The entry name will always be displayed.
	PhoneNumberHidden bool `protobuf:"varint,6,opt,name=phone_number_hidden,json=phoneNumberHidden,proto3" json:"phone_number_hidden,omitempty"`
}

func (x *UpdatePhoneBookEntryReq) Reset() {
	*x = UpdatePhoneBookEntryReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePhoneBookEntryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePhoneBookEntryReq) ProtoMessage() {}

func (x *UpdatePhoneBookEntryReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePhoneBookEntryReq.ProtoReflect.Descriptor instead.
func (*UpdatePhoneBookEntryReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{36}
}

func (x *UpdatePhoneBookEntryReq) GetPhoneBookSid() int64 {
	if x != nil {
		return x.PhoneBookSid
	}
	return 0
}

func (x *UpdatePhoneBookEntryReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *UpdatePhoneBookEntryReq) GetEntryName() string {
	if x != nil {
		return x.EntryName
	}
	return ""
}

func (m *UpdatePhoneBookEntryReq) GetPhoneBookEntry() isUpdatePhoneBookEntryReq_PhoneBookEntry {
	if m != nil {
		return m.PhoneBookEntry
	}
	return nil
}

func (x *UpdatePhoneBookEntryReq) GetStandard() *PhoneBookStandardNumber {
	if x, ok := x.GetPhoneBookEntry().(*UpdatePhoneBookEntryReq_Standard); ok {
		return x.Standard
	}
	return nil
}

func (x *UpdatePhoneBookEntryReq) GetSipUri() *PhoneBookSIPURI {
	if x, ok := x.GetPhoneBookEntry().(*UpdatePhoneBookEntryReq_SipUri); ok {
		return x.SipUri
	}
	return nil
}

func (x *UpdatePhoneBookEntryReq) GetPhoneNumberHidden() bool {
	if x != nil {
		return x.PhoneNumberHidden
	}
	return false
}

type isUpdatePhoneBookEntryReq_PhoneBookEntry interface {
	isUpdatePhoneBookEntryReq_PhoneBookEntry()
}

type UpdatePhoneBookEntryReq_Standard struct {
	Standard *PhoneBookStandardNumber `protobuf:"bytes,4,opt,name=standard,proto3,oneof"`
}

type UpdatePhoneBookEntryReq_SipUri struct {
	SipUri *PhoneBookSIPURI `protobuf:"bytes,5,opt,name=sip_uri,json=sipUri,proto3,oneof"`
}

func (*UpdatePhoneBookEntryReq_Standard) isUpdatePhoneBookEntryReq_PhoneBookEntry() {}

func (*UpdatePhoneBookEntryReq_SipUri) isUpdatePhoneBookEntryReq_PhoneBookEntry() {}

// Response message for the UpdatePhoneBookEntry RPC
type UpdatePhoneBookEntryRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePhoneBookEntryRes) Reset() {
	*x = UpdatePhoneBookEntryRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePhoneBookEntryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePhoneBookEntryRes) ProtoMessage() {}

func (x *UpdatePhoneBookEntryRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePhoneBookEntryRes.ProtoReflect.Descriptor instead.
func (*UpdatePhoneBookEntryRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{37}
}

// Request message for the DeletePhoneBookEntry RPC
type DeletePhoneBookEntryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sid that matches this phone book entry to a specific phone book.
	PhoneBookSid int64 `protobuf:"varint,1,opt,name=phone_book_sid,json=phoneBookSid,proto3" json:"phone_book_sid,omitempty"`
}

func (x *DeletePhoneBookEntryReq) Reset() {
	*x = DeletePhoneBookEntryReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePhoneBookEntryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePhoneBookEntryReq) ProtoMessage() {}

func (x *DeletePhoneBookEntryReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePhoneBookEntryReq.ProtoReflect.Descriptor instead.
func (*DeletePhoneBookEntryReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{38}
}

func (x *DeletePhoneBookEntryReq) GetPhoneBookSid() int64 {
	if x != nil {
		return x.PhoneBookSid
	}
	return 0
}

// Response message for the DeletePhoneBookEntry RPC
type DeletePhoneBookEntryRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePhoneBookEntryRes) Reset() {
	*x = DeletePhoneBookEntryRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePhoneBookEntryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePhoneBookEntryRes) ProtoMessage() {}

func (x *DeletePhoneBookEntryRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePhoneBookEntryRes.ProtoReflect.Descriptor instead.
func (*DeletePhoneBookEntryRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{39}
}

// Request message for the ListPhoneBooks RPC
type ListPhoneBooksReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the hunt group that 'Hunt Group' entry types will have.
	HuntGroupSid int64 `protobuf:"varint,2,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
}

func (x *ListPhoneBooksReq) Reset() {
	*x = ListPhoneBooksReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPhoneBooksReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPhoneBooksReq) ProtoMessage() {}

func (x *ListPhoneBooksReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPhoneBooksReq.ProtoReflect.Descriptor instead.
func (*ListPhoneBooksReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{40}
}

func (x *ListPhoneBooksReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

// Response message for the ListPhoneBooks RPC
type ListPhoneBooksRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Phone books with the caller id phone number type
	CallerIdPhoneBooks []*PhoneBook `protobuf:"bytes,1,rep,name=caller_id_phone_books,json=callerIdPhoneBooks,proto3" json:"caller_id_phone_books,omitempty"`
	// Phone books with the outbound phone number type
	OutboundPhoneBooks []*PhoneBook `protobuf:"bytes,2,rep,name=outbound_phone_books,json=outboundPhoneBooks,proto3" json:"outbound_phone_books,omitempty"`
	// Phone books with the transfer phone number type
	TransferPhoneBooks []*PhoneBook `protobuf:"bytes,3,rep,name=transfer_phone_books,json=transferPhoneBooks,proto3" json:"transfer_phone_books,omitempty"`
}

func (x *ListPhoneBooksRes) Reset() {
	*x = ListPhoneBooksRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPhoneBooksRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPhoneBooksRes) ProtoMessage() {}

func (x *ListPhoneBooksRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPhoneBooksRes.ProtoReflect.Descriptor instead.
func (*ListPhoneBooksRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{41}
}

func (x *ListPhoneBooksRes) GetCallerIdPhoneBooks() []*PhoneBook {
	if x != nil {
		return x.CallerIdPhoneBooks
	}
	return nil
}

func (x *ListPhoneBooksRes) GetOutboundPhoneBooks() []*PhoneBook {
	if x != nil {
		return x.OutboundPhoneBooks
	}
	return nil
}

func (x *ListPhoneBooksRes) GetTransferPhoneBooks() []*PhoneBook {
	if x != nil {
		return x.TransferPhoneBooks
	}
	return nil
}

type ListAgentTriggersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HuntGroupSid int64 `protobuf:"varint,1,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
}

func (x *ListAgentTriggersReq) Reset() {
	*x = ListAgentTriggersReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentTriggersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentTriggersReq) ProtoMessage() {}

func (x *ListAgentTriggersReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentTriggersReq.ProtoReflect.Descriptor instead.
func (*ListAgentTriggersReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{42}
}

func (x *ListAgentTriggersReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

type TriggerParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionKey    string `protobuf:"bytes,1,opt,name=action_key,json=actionKey,proto3" json:"action_key,omitempty"`
	ActionString string `protobuf:"bytes,2,opt,name=action_string,json=actionString,proto3" json:"action_string,omitempty"`
}

func (x *TriggerParameters) Reset() {
	*x = TriggerParameters{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerParameters) ProtoMessage() {}

func (x *TriggerParameters) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerParameters.ProtoReflect.Descriptor instead.
func (*TriggerParameters) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{43}
}

func (x *TriggerParameters) GetActionKey() string {
	if x != nil {
		return x.ActionKey
	}
	return ""
}

func (x *TriggerParameters) GetActionString() string {
	if x != nil {
		return x.ActionString
	}
	return ""
}

type TriggerDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerName       string                  `protobuf:"bytes,1,opt,name=trigger_name,json=triggerName,proto3" json:"trigger_name,omitempty"`
	TriggerDesc       string                  `protobuf:"bytes,2,opt,name=trigger_desc,json=triggerDesc,proto3" json:"trigger_desc,omitempty"`
	TriggerStatus     int64                   `protobuf:"varint,3,opt,name=trigger_status,json=triggerStatus,proto3" json:"trigger_status,omitempty"`
	TriggerDuration   int64                   `protobuf:"varint,4,opt,name=trigger_duration,json=triggerDuration,proto3" json:"trigger_duration,omitempty"`
	CallTypes         []commons.CallType_Enum `protobuf:"varint,5,rep,packed,name=call_types,json=callTypes,proto3,enum=api.commons.CallType_Enum" json:"call_types,omitempty"`
	TriggerParameters []*TriggerParameters    `protobuf:"bytes,6,rep,name=trigger_parameters,json=triggerParameters,proto3" json:"trigger_parameters,omitempty"`
}

func (x *TriggerDetails) Reset() {
	*x = TriggerDetails{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerDetails) ProtoMessage() {}

func (x *TriggerDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerDetails.ProtoReflect.Descriptor instead.
func (*TriggerDetails) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{44}
}

func (x *TriggerDetails) GetTriggerName() string {
	if x != nil {
		return x.TriggerName
	}
	return ""
}

func (x *TriggerDetails) GetTriggerDesc() string {
	if x != nil {
		return x.TriggerDesc
	}
	return ""
}

func (x *TriggerDetails) GetTriggerStatus() int64 {
	if x != nil {
		return x.TriggerStatus
	}
	return 0
}

func (x *TriggerDetails) GetTriggerDuration() int64 {
	if x != nil {
		return x.TriggerDuration
	}
	return 0
}

func (x *TriggerDetails) GetCallTypes() []commons.CallType_Enum {
	if x != nil {
		return x.CallTypes
	}
	return nil
}

func (x *TriggerDetails) GetTriggerParameters() []*TriggerParameters {
	if x != nil {
		return x.TriggerParameters
	}
	return nil
}

type ListAgentTriggersRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerDetails []*TriggerDetails `protobuf:"bytes,1,rep,name=trigger_details,json=triggerDetails,proto3" json:"trigger_details,omitempty"`
}

func (x *ListAgentTriggersRes) Reset() {
	*x = ListAgentTriggersRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentTriggersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentTriggersRes) ProtoMessage() {}

func (x *ListAgentTriggersRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentTriggersRes.ProtoReflect.Descriptor instead.
func (*ListAgentTriggersRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{45}
}

func (x *ListAgentTriggersRes) GetTriggerDetails() []*TriggerDetails {
	if x != nil {
		return x.TriggerDetails
	}
	return nil
}

type PBXExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PbxExtensionSid int64  `protobuf:"varint,1,opt,name=pbx_extension_sid,json=pbxExtensionSid,proto3" json:"pbx_extension_sid,omitempty"`
	PbxExtension    string `protobuf:"bytes,2,opt,name=pbx_extension,json=pbxExtension,proto3" json:"pbx_extension,omitempty"`
	JoinSid         int64  `protobuf:"varint,4,opt,name=join_sid,json=joinSid,proto3" json:"join_sid,omitempty"`
	JoinType        string `protobuf:"bytes,5,opt,name=join_type,json=joinType,proto3" json:"join_type,omitempty"`
	EmailSubject    string `protobuf:"bytes,6,opt,name=email_subject,json=emailSubject,proto3" json:"email_subject,omitempty"`
	EmailBody       string `protobuf:"bytes,7,opt,name=email_body,json=emailBody,proto3" json:"email_body,omitempty"`
	EmailAddresses  string `protobuf:"bytes,8,opt,name=email_addresses,json=emailAddresses,proto3" json:"email_addresses,omitempty"`
	AgentAccess     bool   `protobuf:"varint,9,opt,name=agent_access,json=agentAccess,proto3" json:"agent_access,omitempty"`
}

func (x *PBXExtension) Reset() {
	*x = PBXExtension{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PBXExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBXExtension) ProtoMessage() {}

func (x *PBXExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBXExtension.ProtoReflect.Descriptor instead.
func (*PBXExtension) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{46}
}

func (x *PBXExtension) GetPbxExtensionSid() int64 {
	if x != nil {
		return x.PbxExtensionSid
	}
	return 0
}

func (x *PBXExtension) GetPbxExtension() string {
	if x != nil {
		return x.PbxExtension
	}
	return ""
}

func (x *PBXExtension) GetJoinSid() int64 {
	if x != nil {
		return x.JoinSid
	}
	return 0
}

func (x *PBXExtension) GetJoinType() string {
	if x != nil {
		return x.JoinType
	}
	return ""
}

func (x *PBXExtension) GetEmailSubject() string {
	if x != nil {
		return x.EmailSubject
	}
	return ""
}

func (x *PBXExtension) GetEmailBody() string {
	if x != nil {
		return x.EmailBody
	}
	return ""
}

func (x *PBXExtension) GetEmailAddresses() string {
	if x != nil {
		return x.EmailAddresses
	}
	return ""
}

func (x *PBXExtension) GetAgentAccess() bool {
	if x != nil {
		return x.AgentAccess
	}
	return false
}

type ListPBXExtensionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListPBXExtensionsReq) Reset() {
	*x = ListPBXExtensionsReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPBXExtensionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPBXExtensionsReq) ProtoMessage() {}

func (x *ListPBXExtensionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPBXExtensionsReq.ProtoReflect.Descriptor instead.
func (*ListPBXExtensionsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{47}
}

type ListPBXExtensionsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentExtensions     []*ListPBXExtensionsRes_AgentExtension     `protobuf:"bytes,1,rep,name=agent_extensions,json=agentExtensions,proto3" json:"agent_extensions,omitempty"`
	HuntGroupExtensions []*ListPBXExtensionsRes_HuntGroupExtension `protobuf:"bytes,2,rep,name=hunt_group_extensions,json=huntGroupExtensions,proto3" json:"hunt_group_extensions,omitempty"`
}

func (x *ListPBXExtensionsRes) Reset() {
	*x = ListPBXExtensionsRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPBXExtensionsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPBXExtensionsRes) ProtoMessage() {}

func (x *ListPBXExtensionsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPBXExtensionsRes.ProtoReflect.Descriptor instead.
func (*ListPBXExtensionsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{48}
}

func (x *ListPBXExtensionsRes) GetAgentExtensions() []*ListPBXExtensionsRes_AgentExtension {
	if x != nil {
		return x.AgentExtensions
	}
	return nil
}

func (x *ListPBXExtensionsRes) GetHuntGroupExtensions() []*ListPBXExtensionsRes_HuntGroupExtension {
	if x != nil {
		return x.HuntGroupExtensions
	}
	return nil
}

type EmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject   string   `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Body      string   `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Addresses []string `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *EmailResponse) Reset() {
	*x = EmailResponse{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailResponse) ProtoMessage() {}

func (x *EmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailResponse.ProtoReflect.Descriptor instead.
func (*EmailResponse) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{49}
}

func (x *EmailResponse) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *EmailResponse) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *EmailResponse) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type MailMergeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallSid             int64                 `protobuf:"varint,4,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	CallType            commons.CallType_Enum `protobuf:"varint,5,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
	ScheduledCallbackId string                `protobuf:"bytes,6,opt,name=scheduled_callback_id,json=scheduledCallbackId,proto3" json:"scheduled_callback_id,omitempty"`
}

func (x *MailMergeData) Reset() {
	*x = MailMergeData{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MailMergeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailMergeData) ProtoMessage() {}

func (x *MailMergeData) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailMergeData.ProtoReflect.Descriptor instead.
func (*MailMergeData) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{50}
}

func (x *MailMergeData) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *MailMergeData) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

func (x *MailMergeData) GetScheduledCallbackId() string {
	if x != nil {
		return x.ScheduledCallbackId
	}
	return ""
}

type HuntGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HuntGroupResponseSid int64                   `protobuf:"varint,1,opt,name=hunt_group_response_sid,json=huntGroupResponseSid,proto3" json:"hunt_group_response_sid,omitempty"`
	HuntGroupSid         *wrapperspb.Int64Value  `protobuf:"bytes,2,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	Type                 *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Options              []string                `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
	Name                 *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description          *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Order                *wrapperspb.Int32Value  `protobuf:"bytes,7,opt,name=order,proto3" json:"order,omitempty"`
	Required             *wrapperspb.BoolValue   `protobuf:"bytes,8,opt,name=required,proto3" json:"required,omitempty"`
	DefaultValue         *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	ManualDial           *ManualDialSettings     `protobuf:"bytes,10,opt,name=manual_dial,json=manualDial,proto3" json:"manual_dial,omitempty"`
}

func (x *HuntGroupResponse) Reset() {
	*x = HuntGroupResponse{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HuntGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HuntGroupResponse) ProtoMessage() {}

func (x *HuntGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HuntGroupResponse.ProtoReflect.Descriptor instead.
func (*HuntGroupResponse) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{51}
}

func (x *HuntGroupResponse) GetHuntGroupResponseSid() int64 {
	if x != nil {
		return x.HuntGroupResponseSid
	}
	return 0
}

func (x *HuntGroupResponse) GetHuntGroupSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.HuntGroupSid
	}
	return nil
}

func (x *HuntGroupResponse) GetType() *wrapperspb.StringValue {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *HuntGroupResponse) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *HuntGroupResponse) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *HuntGroupResponse) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *HuntGroupResponse) GetOrder() *wrapperspb.Int32Value {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *HuntGroupResponse) GetRequired() *wrapperspb.BoolValue {
	if x != nil {
		return x.Required
	}
	return nil
}

func (x *HuntGroupResponse) GetDefaultValue() *wrapperspb.StringValue {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *HuntGroupResponse) GetManualDial() *ManualDialSettings {
	if x != nil {
		return x.ManualDial
	}
	return nil
}

type DNCL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountrySid     *wrapperspb.Int64Value  `protobuf:"bytes,11,opt,name=country_sid,json=countrySid,proto3" json:"country_sid,omitempty"`
	DnclNotes      *wrapperspb.StringValue `protobuf:"bytes,100,opt,name=dncl_notes,json=dnclNotes,proto3" json:"dncl_notes,omitempty"`
	DnclNumber     *wrapperspb.StringValue `protobuf:"bytes,101,opt,name=dncl_number,json=dnclNumber,proto3" json:"dncl_number,omitempty"`
	ExpirationDate *timestamppb.Timestamp  `protobuf:"bytes,102,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
}

func (x *DNCL) Reset() {
	*x = DNCL{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DNCL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNCL) ProtoMessage() {}

func (x *DNCL) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNCL.ProtoReflect.Descriptor instead.
func (*DNCL) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{52}
}

func (x *DNCL) GetCountrySid() *wrapperspb.Int64Value {
	if x != nil {
		return x.CountrySid
	}
	return nil
}

func (x *DNCL) GetDnclNotes() *wrapperspb.StringValue {
	if x != nil {
		return x.DnclNotes
	}
	return nil
}

func (x *DNCL) GetDnclNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.DnclNumber
	}
	return nil
}

func (x *DNCL) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

type AgentLoggingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallSid           int64                 `protobuf:"varint,1,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	CallType          commons.CallType_Enum `protobuf:"varint,2,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
	ActionValueSuffix string                `protobuf:"bytes,3,opt,name=action_value_suffix,json=actionValueSuffix,proto3" json:"action_value_suffix,omitempty"`
}

func (x *AgentLoggingData) Reset() {
	*x = AgentLoggingData{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentLoggingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentLoggingData) ProtoMessage() {}

func (x *AgentLoggingData) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentLoggingData.ProtoReflect.Descriptor instead.
func (*AgentLoggingData) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{53}
}

func (x *AgentLoggingData) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *AgentLoggingData) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

func (x *AgentLoggingData) GetActionValueSuffix() string {
	if x != nil {
		return x.ActionValueSuffix
	}
	return ""
}

type CreateDNCLNumbersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dncls            []*DNCL           `protobuf:"bytes,1,rep,name=dncls,proto3" json:"dncls,omitempty"`
	AgentLoggingData *AgentLoggingData `protobuf:"bytes,3,opt,name=agent_logging_data,json=agentLoggingData,proto3" json:"agent_logging_data,omitempty"`
}

func (x *CreateDNCLNumbersReq) Reset() {
	*x = CreateDNCLNumbersReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDNCLNumbersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDNCLNumbersReq) ProtoMessage() {}

func (x *CreateDNCLNumbersReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDNCLNumbersReq.ProtoReflect.Descriptor instead.
func (*CreateDNCLNumbersReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{54}
}

func (x *CreateDNCLNumbersReq) GetDncls() []*DNCL {
	if x != nil {
		return x.Dncls
	}
	return nil
}

func (x *CreateDNCLNumbersReq) GetAgentLoggingData() *AgentLoggingData {
	if x != nil {
		return x.AgentLoggingData
	}
	return nil
}

type CreateDNCLNumbersRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuccessCount int64 `protobuf:"varint,1,opt,name=success_count,json=successCount,proto3" json:"success_count,omitempty"`
	InvalidCount int64 `protobuf:"varint,2,opt,name=invalid_count,json=invalidCount,proto3" json:"invalid_count,omitempty"`
	FailureCount int64 `protobuf:"varint,3,opt,name=failure_count,json=failureCount,proto3" json:"failure_count,omitempty"` // can be extrapolated
}

func (x *CreateDNCLNumbersRes) Reset() {
	*x = CreateDNCLNumbersRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDNCLNumbersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDNCLNumbersRes) ProtoMessage() {}

func (x *CreateDNCLNumbersRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDNCLNumbersRes.ProtoReflect.Descriptor instead.
func (*CreateDNCLNumbersRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{55}
}

func (x *CreateDNCLNumbersRes) GetSuccessCount() int64 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

func (x *CreateDNCLNumbersRes) GetInvalidCount() int64 {
	if x != nil {
		return x.InvalidCount
	}
	return 0
}

func (x *CreateDNCLNumbersRes) GetFailureCount() int64 {
	if x != nil {
		return x.FailureCount
	}
	return 0
}

type GetHuntGroupAgentSettingsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HuntGroupSid int64 `protobuf:"varint,1,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
}

func (x *GetHuntGroupAgentSettingsReq) Reset() {
	*x = GetHuntGroupAgentSettingsReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHuntGroupAgentSettingsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHuntGroupAgentSettingsReq) ProtoMessage() {}

func (x *GetHuntGroupAgentSettingsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHuntGroupAgentSettingsReq.ProtoReflect.Descriptor instead.
func (*GetHuntGroupAgentSettingsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{56}
}

func (x *GetHuntGroupAgentSettingsReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

type HuntGroupAgentSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeypadEnabled               bool                         `protobuf:"varint,1,opt,name=keypad_enabled,json=keypadEnabled,proto3" json:"keypad_enabled,omitempty"`
	KeypadDelimiter             string                       `protobuf:"bytes,2,opt,name=keypad_delimiter,json=keypadDelimiter,proto3" json:"keypad_delimiter,omitempty"`
	Statistics                  *AgentStatisticsSettings     `protobuf:"bytes,3,opt,name=statistics,proto3" json:"statistics,omitempty"`
	EndCallConfirmation         bool                         `protobuf:"varint,5,opt,name=end_call_confirmation,json=endCallConfirmation,proto3" json:"end_call_confirmation,omitempty"`
	Pause                       *PauseSettings               `protobuf:"bytes,6,opt,name=pause,proto3" json:"pause,omitempty"`
	Hqm                         *HoldQueueMonitorSettings    `protobuf:"bytes,7,opt,name=hqm,proto3" json:"hqm,omitempty"`
	ManualDial                  *ManualDialSettings          `protobuf:"bytes,8,opt,name=manual_dial,json=manualDial,proto3" json:"manual_dial,omitempty"`
	Transfer                    *TransferSettings            `protobuf:"bytes,9,opt,name=transfer,proto3" json:"transfer,omitempty"`
	PreviewDial                 *PreviewDialSettings         `protobuf:"bytes,10,opt,name=preview_dial,json=previewDial,proto3" json:"preview_dial,omitempty"`
	PhoneNumberActivity         *PhoneNumberActivitySettings `protobuf:"bytes,11,opt,name=phone_number_activity,json=phoneNumberActivity,proto3" json:"phone_number_activity,omitempty"`
	Dncl                        *DnclSettings                `protobuf:"bytes,12,opt,name=dncl,proto3" json:"dncl,omitempty"`
	Hold                        *AgentHoldSettings           `protobuf:"bytes,13,opt,name=hold,proto3" json:"hold,omitempty"`
	ManualApproval              *ManualApprovalSettings      `protobuf:"bytes,14,opt,name=manual_approval,json=manualApproval,proto3" json:"manual_approval,omitempty"`
	DisplayLinkbackHuntgroup    bool                         `protobuf:"varint,15,opt,name=display_linkback_huntgroup,json=displayLinkbackHuntgroup,proto3" json:"display_linkback_huntgroup,omitempty"`
	ScheduleCallback            *ScheduleCallBackSettings    `protobuf:"bytes,16,opt,name=schedule_callback,json=scheduleCallback,proto3" json:"schedule_callback,omitempty"`
	Recording                   *RecordingSettings           `protobuf:"bytes,18,opt,name=recording,proto3" json:"recording,omitempty"`
	DisplayPhoneZipMetadata     bool                         `protobuf:"varint,19,opt,name=display_phone_zip_metadata,json=displayPhoneZipMetadata,proto3" json:"display_phone_zip_metadata,omitempty"`
	PhoneZipMetadataKeys        []string                     `protobuf:"bytes,20,rep,name=phone_zip_metadata_keys,json=phoneZipMetadataKeys,proto3" json:"phone_zip_metadata_keys,omitempty"`
	DisplayMachineDeliver       bool                         `protobuf:"varint,21,opt,name=display_machine_deliver,json=displayMachineDeliver,proto3" json:"display_machine_deliver,omitempty"`
	AllowAgentIntercom          bool                         `protobuf:"varint,22,opt,name=allow_agent_intercom,json=allowAgentIntercom,proto3" json:"allow_agent_intercom,omitempty"`
	DisplayDataSettings         *DisplayDataSettings         `protobuf:"bytes,23,opt,name=display_data_settings,json=displayDataSettings,proto3" json:"display_data_settings,omitempty"`
	AllowChangeHuntGroup        bool                         `protobuf:"varint,24,opt,name=allow_change_hunt_group,json=allowChangeHuntGroup,proto3" json:"allow_change_hunt_group,omitempty"`
	AgentScreenRecording        bool                         `protobuf:"varint,25,opt,name=agent_screen_recording,json=agentScreenRecording,proto3" json:"agent_screen_recording,omitempty"`
	InboundComplianceMetadata   []*ComplianceMetadata        `protobuf:"bytes,26,rep,name=inbound_compliance_metadata,json=inboundComplianceMetadata,proto3" json:"inbound_compliance_metadata,omitempty"`
	NotifyQueuedCalls           bool                         `protobuf:"varint,27,opt,name=notify_queued_calls,json=notifyQueuedCalls,proto3" json:"notify_queued_calls,omitempty"`
	DisplayJourneyRetrievedData bool                         `protobuf:"varint,28,opt,name=display_journey_retrieved_data,json=displayJourneyRetrievedData,proto3" json:"display_journey_retrieved_data,omitempty"`
	LimitJourneyRetrievedData   []string                     `protobuf:"bytes,29,rep,name=limit_journey_retrieved_data,json=limitJourneyRetrievedData,proto3" json:"limit_journey_retrieved_data,omitempty"`
	// initial agent status
	InitialAgentStatus int64 `protobuf:"varint,30,opt,name=initial_agent_status,json=initialAgentStatus,proto3" json:"initial_agent_status,omitempty"`
	DisplayWebLinks    bool  `protobuf:"varint,31,opt,name=display_web_links,json=displayWebLinks,proto3" json:"display_web_links,omitempty"` // determines if agent can see web links
	DisplaySkills      bool  `protobuf:"varint,32,opt,name=display_skills,json=displaySkills,proto3" json:"display_skills,omitempty"`         // determines if agent can see skills
	// Array of interruptable call states (manual, preview, both manual and preview)
	InterruptPeering          []commons.InterruptedPeeringStatus `protobuf:"varint,33,rep,packed,name=interrupt_peering,json=interruptPeering,proto3,enum=api.commons.InterruptedPeeringStatus" json:"interrupt_peering,omitempty"`
	DisplayIntegrationDataMap bool                               `protobuf:"varint,34,opt,name=display_integration_data_map,json=displayIntegrationDataMap,proto3" json:"display_integration_data_map,omitempty"`
	LimitIntegrationDataMap   []string                           `protobuf:"bytes,35,rep,name=limit_integration_data_map,json=limitIntegrationDataMap,proto3" json:"limit_integration_data_map,omitempty"`
}

func (x *HuntGroupAgentSettings) Reset() {
	*x = HuntGroupAgentSettings{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HuntGroupAgentSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HuntGroupAgentSettings) ProtoMessage() {}

func (x *HuntGroupAgentSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HuntGroupAgentSettings.ProtoReflect.Descriptor instead.
func (*HuntGroupAgentSettings) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{57}
}

func (x *HuntGroupAgentSettings) GetKeypadEnabled() bool {
	if x != nil {
		return x.KeypadEnabled
	}
	return false
}

func (x *HuntGroupAgentSettings) GetKeypadDelimiter() string {
	if x != nil {
		return x.KeypadDelimiter
	}
	return ""
}

func (x *HuntGroupAgentSettings) GetStatistics() *AgentStatisticsSettings {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *HuntGroupAgentSettings) GetEndCallConfirmation() bool {
	if x != nil {
		return x.EndCallConfirmation
	}
	return false
}

func (x *HuntGroupAgentSettings) GetPause() *PauseSettings {
	if x != nil {
		return x.Pause
	}
	return nil
}

func (x *HuntGroupAgentSettings) GetHqm() *HoldQueueMonitorSettings {
	if x != nil {
		return x.Hqm
	}
	return nil
}

func (x *HuntGroupAgentSettings) GetManualDial() *ManualDialSettings {
	if x != nil {
		return x.ManualDial
	}
	return nil
}

func (x *HuntGroupAgentSettings) GetTransfer() *TransferSettings {
	if x != nil {
		return x.Transfer
	}
	return nil
}

func (x *HuntGroupAgentSettings) GetPreviewDial() *PreviewDialSettings {
	if x != nil {
		return x.PreviewDial
	}
	return nil
}

func (x *HuntGroupAgentSettings) GetPhoneNumberActivity() *PhoneNumberActivitySettings {
	if x != nil {
		return x.PhoneNumberActivity
	}
	return nil
}

func (x *HuntGroupAgentSettings) GetDncl() *DnclSettings {
	if x != nil {
		return x.Dncl
	}
	return nil
}

func (x *HuntGroupAgentSettings) GetHold() *AgentHoldSettings {
	if x != nil {
		return x.Hold
	}
	return nil
}

func (x *HuntGroupAgentSettings) GetManualApproval() *ManualApprovalSettings {
	if x != nil {
		return x.ManualApproval
	}
	return nil
}

func (x *HuntGroupAgentSettings) GetDisplayLinkbackHuntgroup() bool {
	if x != nil {
		return x.DisplayLinkbackHuntgroup
	}
	return false
}

func (x *HuntGroupAgentSettings) GetScheduleCallback() *ScheduleCallBackSettings {
	if x != nil {
		return x.ScheduleCallback
	}
	return nil
}

func (x *HuntGroupAgentSettings) GetRecording() *RecordingSettings {
	if x != nil {
		return x.Recording
	}
	return nil
}

func (x *HuntGroupAgentSettings) GetDisplayPhoneZipMetadata() bool {
	if x != nil {
		return x.DisplayPhoneZipMetadata
	}
	return false
}

func (x *HuntGroupAgentSettings) GetPhoneZipMetadataKeys() []string {
	if x != nil {
		return x.PhoneZipMetadataKeys
	}
	return nil
}

func (x *HuntGroupAgentSettings) GetDisplayMachineDeliver() bool {
	if x != nil {
		return x.DisplayMachineDeliver
	}
	return false
}

func (x *HuntGroupAgentSettings) GetAllowAgentIntercom() bool {
	if x != nil {
		return x.AllowAgentIntercom
	}
	return false
}

func (x *HuntGroupAgentSettings) GetDisplayDataSettings() *DisplayDataSettings {
	if x != nil {
		return x.DisplayDataSettings
	}
	return nil
}

func (x *HuntGroupAgentSettings) GetAllowChangeHuntGroup() bool {
	if x != nil {
		return x.AllowChangeHuntGroup
	}
	return false
}

func (x *HuntGroupAgentSettings) GetAgentScreenRecording() bool {
	if x != nil {
		return x.AgentScreenRecording
	}
	return false
}

func (x *HuntGroupAgentSettings) GetInboundComplianceMetadata() []*ComplianceMetadata {
	if x != nil {
		return x.InboundComplianceMetadata
	}
	return nil
}

func (x *HuntGroupAgentSettings) GetNotifyQueuedCalls() bool {
	if x != nil {
		return x.NotifyQueuedCalls
	}
	return false
}

func (x *HuntGroupAgentSettings) GetDisplayJourneyRetrievedData() bool {
	if x != nil {
		return x.DisplayJourneyRetrievedData
	}
	return false
}

func (x *HuntGroupAgentSettings) GetLimitJourneyRetrievedData() []string {
	if x != nil {
		return x.LimitJourneyRetrievedData
	}
	return nil
}

func (x *HuntGroupAgentSettings) GetInitialAgentStatus() int64 {
	if x != nil {
		return x.InitialAgentStatus
	}
	return 0
}

func (x *HuntGroupAgentSettings) GetDisplayWebLinks() bool {
	if x != nil {
		return x.DisplayWebLinks
	}
	return false
}

func (x *HuntGroupAgentSettings) GetDisplaySkills() bool {
	if x != nil {
		return x.DisplaySkills
	}
	return false
}

func (x *HuntGroupAgentSettings) GetInterruptPeering() []commons.InterruptedPeeringStatus {
	if x != nil {
		return x.InterruptPeering
	}
	return nil
}

func (x *HuntGroupAgentSettings) GetDisplayIntegrationDataMap() bool {
	if x != nil {
		return x.DisplayIntegrationDataMap
	}
	return false
}

func (x *HuntGroupAgentSettings) GetLimitIntegrationDataMap() []string {
	if x != nil {
		return x.LimitIntegrationDataMap
	}
	return nil
}

type AgentStatisticsSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowStatistics    bool                                  `protobuf:"varint,1,opt,name=show_statistics,json=showStatistics,proto3" json:"show_statistics,omitempty"`
	ShowCallHistory   bool                                  `protobuf:"varint,2,opt,name=show_call_history,json=showCallHistory,proto3" json:"show_call_history,omitempty"`
	FilterCallHistory AgentStatisticsSettings_HistoryFilter `protobuf:"varint,3,opt,name=filter_call_history,json=filterCallHistory,proto3,enum=api.v0alpha.AgentStatisticsSettings_HistoryFilter" json:"filter_call_history,omitempty"`
}

func (x *AgentStatisticsSettings) Reset() {
	*x = AgentStatisticsSettings{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentStatisticsSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentStatisticsSettings) ProtoMessage() {}

func (x *AgentStatisticsSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentStatisticsSettings.ProtoReflect.Descriptor instead.
func (*AgentStatisticsSettings) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{58}
}

func (x *AgentStatisticsSettings) GetShowStatistics() bool {
	if x != nil {
		return x.ShowStatistics
	}
	return false
}

func (x *AgentStatisticsSettings) GetShowCallHistory() bool {
	if x != nil {
		return x.ShowCallHistory
	}
	return false
}

func (x *AgentStatisticsSettings) GetFilterCallHistory() AgentStatisticsSettings_HistoryFilter {
	if x != nil {
		return x.FilterCallHistory
	}
	return AgentStatisticsSettings_TODAY
}

type PauseSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowAgentPause       bool   `protobuf:"varint,1,opt,name=allow_agent_pause,json=allowAgentPause,proto3" json:"allow_agent_pause,omitempty"`
	AllowAgentPauseReset  bool   `protobuf:"varint,2,opt,name=allow_agent_pause_reset,json=allowAgentPauseReset,proto3" json:"allow_agent_pause_reset,omitempty"`
	UseAgentPauseCodes    bool   `protobuf:"varint,3,opt,name=use_agent_pause_codes,json=useAgentPauseCodes,proto3" json:"use_agent_pause_codes,omitempty"`
	DefaultAgentPauseCode string `protobuf:"bytes,4,opt,name=default_agent_pause_code,json=defaultAgentPauseCode,proto3" json:"default_agent_pause_code,omitempty"`
	// recording pause confirmationl -
	RecordingPauseConfirmation bool `protobuf:"varint,5,opt,name=recording_pause_confirmation,json=recordingPauseConfirmation,proto3" json:"recording_pause_confirmation,omitempty"`
}

func (x *PauseSettings) Reset() {
	*x = PauseSettings{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PauseSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseSettings) ProtoMessage() {}

func (x *PauseSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseSettings.ProtoReflect.Descriptor instead.
func (*PauseSettings) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{59}
}

func (x *PauseSettings) GetAllowAgentPause() bool {
	if x != nil {
		return x.AllowAgentPause
	}
	return false
}

func (x *PauseSettings) GetAllowAgentPauseReset() bool {
	if x != nil {
		return x.AllowAgentPauseReset
	}
	return false
}

func (x *PauseSettings) GetUseAgentPauseCodes() bool {
	if x != nil {
		return x.UseAgentPauseCodes
	}
	return false
}

func (x *PauseSettings) GetDefaultAgentPauseCode() string {
	if x != nil {
		return x.DefaultAgentPauseCode
	}
	return ""
}

func (x *PauseSettings) GetRecordingPauseConfirmation() bool {
	if x != nil {
		return x.RecordingPauseConfirmation
	}
	return false
}

type PhoneNumberActivitySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowPhoneNumberActivity       bool `protobuf:"varint,1,opt,name=allow_phone_number_activity,json=allowPhoneNumberActivity,proto3" json:"allow_phone_number_activity,omitempty"`
	AllowExportPhoneNumberActivity bool `protobuf:"varint,2,opt,name=allow_export_phone_number_activity,json=allowExportPhoneNumberActivity,proto3" json:"allow_export_phone_number_activity,omitempty"`
	AllowPnaRecordingsDownload     bool `protobuf:"varint,3,opt,name=allow_pna_recordings_download,json=allowPnaRecordingsDownload,proto3" json:"allow_pna_recordings_download,omitempty"`
	AllowPnaEditResponses          bool `protobuf:"varint,4,opt,name=allow_pna_edit_responses,json=allowPnaEditResponses,proto3" json:"allow_pna_edit_responses,omitempty"`
}

func (x *PhoneNumberActivitySettings) Reset() {
	*x = PhoneNumberActivitySettings{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PhoneNumberActivitySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneNumberActivitySettings) ProtoMessage() {}

func (x *PhoneNumberActivitySettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneNumberActivitySettings.ProtoReflect.Descriptor instead.
func (*PhoneNumberActivitySettings) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{60}
}

func (x *PhoneNumberActivitySettings) GetAllowPhoneNumberActivity() bool {
	if x != nil {
		return x.AllowPhoneNumberActivity
	}
	return false
}

func (x *PhoneNumberActivitySettings) GetAllowExportPhoneNumberActivity() bool {
	if x != nil {
		return x.AllowExportPhoneNumberActivity
	}
	return false
}

func (x *PhoneNumberActivitySettings) GetAllowPnaRecordingsDownload() bool {
	if x != nil {
		return x.AllowPnaRecordingsDownload
	}
	return false
}

func (x *PhoneNumberActivitySettings) GetAllowPnaEditResponses() bool {
	if x != nil {
		return x.AllowPnaEditResponses
	}
	return false
}

type PreviewDialSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequireConfirmation bool  `protobuf:"varint,2,opt,name=require_confirmation,json=requireConfirmation,proto3" json:"require_confirmation,omitempty"`
	TimeoutMinutes      int64 `protobuf:"varint,3,opt,name=timeout_minutes,json=timeoutMinutes,proto3" json:"timeout_minutes,omitempty"`
	AllowCancel         bool  `protobuf:"varint,4,opt,name=allow_cancel,json=allowCancel,proto3" json:"allow_cancel,omitempty"`
	PauseOnCancel       bool  `protobuf:"varint,5,opt,name=pause_on_cancel,json=pauseOnCancel,proto3" json:"pause_on_cancel,omitempty"`
}

func (x *PreviewDialSettings) Reset() {
	*x = PreviewDialSettings{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreviewDialSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewDialSettings) ProtoMessage() {}

func (x *PreviewDialSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewDialSettings.ProtoReflect.Descriptor instead.
func (*PreviewDialSettings) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{61}
}

func (x *PreviewDialSettings) GetRequireConfirmation() bool {
	if x != nil {
		return x.RequireConfirmation
	}
	return false
}

func (x *PreviewDialSettings) GetTimeoutMinutes() int64 {
	if x != nil {
		return x.TimeoutMinutes
	}
	return 0
}

func (x *PreviewDialSettings) GetAllowCancel() bool {
	if x != nil {
		return x.AllowCancel
	}
	return false
}

func (x *PreviewDialSettings) GetPauseOnCancel() bool {
	if x != nil {
		return x.PauseOnCancel
	}
	return false
}

type HoldQueueMonitoringAgentRouting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HoldQueueMonitoringAgentRouting) Reset() {
	*x = HoldQueueMonitoringAgentRouting{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HoldQueueMonitoringAgentRouting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldQueueMonitoringAgentRouting) ProtoMessage() {}

func (x *HoldQueueMonitoringAgentRouting) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldQueueMonitoringAgentRouting.ProtoReflect.Descriptor instead.
func (*HoldQueueMonitoringAgentRouting) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{62}
}

type HoldQueueMonitorSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Monitor        bool                                 `protobuf:"varint,1,opt,name=monitor,proto3" json:"monitor,omitempty"`
	RequiredGroup  int64                                `protobuf:"varint,2,opt,name=required_group,json=requiredGroup,proto3" json:"required_group,omitempty"`
	PreferredGroup int64                                `protobuf:"varint,3,opt,name=preferred_group,json=preferredGroup,proto3" json:"preferred_group,omitempty"`
	AgentRouting   HoldQueueMonitoringAgentRouting_Enum `protobuf:"varint,4,opt,name=agent_routing,json=agentRouting,proto3,enum=api.v0alpha.HoldQueueMonitoringAgentRouting_Enum" json:"agent_routing,omitempty"`
}

func (x *HoldQueueMonitorSettings) Reset() {
	*x = HoldQueueMonitorSettings{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HoldQueueMonitorSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldQueueMonitorSettings) ProtoMessage() {}

func (x *HoldQueueMonitorSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldQueueMonitorSettings.ProtoReflect.Descriptor instead.
func (*HoldQueueMonitorSettings) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{63}
}

func (x *HoldQueueMonitorSettings) GetMonitor() bool {
	if x != nil {
		return x.Monitor
	}
	return false
}

func (x *HoldQueueMonitorSettings) GetRequiredGroup() int64 {
	if x != nil {
		return x.RequiredGroup
	}
	return 0
}

func (x *HoldQueueMonitorSettings) GetPreferredGroup() int64 {
	if x != nil {
		return x.PreferredGroup
	}
	return 0
}

func (x *HoldQueueMonitorSettings) GetAgentRouting() HoldQueueMonitoringAgentRouting_Enum {
	if x != nil {
		return x.AgentRouting
	}
	return HoldQueueMonitoringAgentRouting_UNKNOWN
}

type ComplianceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Required bool   `protobuf:"varint,2,opt,name=required,proto3" json:"required,omitempty"`
}

func (x *ComplianceMetadata) Reset() {
	*x = ComplianceMetadata{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComplianceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceMetadata) ProtoMessage() {}

func (x *ComplianceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceMetadata.ProtoReflect.Descriptor instead.
func (*ComplianceMetadata) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{64}
}

func (x *ComplianceMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComplianceMetadata) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

type ManualDialSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled                        bool                                 `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ShowOutboundPhoneBook          bool                                 `protobuf:"varint,2,opt,name=show_outbound_phone_book,json=showOutboundPhoneBook,proto3" json:"show_outbound_phone_book,omitempty"`
	ShowCallerIdPhoneBook          bool                                 `protobuf:"varint,3,opt,name=show_caller_id_phone_book,json=showCallerIdPhoneBook,proto3" json:"show_caller_id_phone_book,omitempty"`
	HasCustomCallerId              bool                                 `protobuf:"varint,4,opt,name=has_custom_caller_id,json=hasCustomCallerId,proto3" json:"has_custom_caller_id,omitempty"`
	DefaultCallerId                string                               `protobuf:"bytes,5,opt,name=default_caller_id,json=defaultCallerId,proto3" json:"default_caller_id,omitempty"`
	DefaultCountrySid              int64                                `protobuf:"varint,6,opt,name=default_country_sid,json=defaultCountrySid,proto3" json:"default_country_sid,omitempty"`
	ShowCountrySelector            bool                                 `protobuf:"varint,7,opt,name=show_country_selector,json=showCountrySelector,proto3" json:"show_country_selector,omitempty"`
	TimezoneRestrictions           bool                                 `protobuf:"varint,8,opt,name=timezone_restrictions,json=timezoneRestrictions,proto3" json:"timezone_restrictions,omitempty"`
	ScrubCellPhones                bool                                 `protobuf:"varint,9,opt,name=scrub_cell_phones,json=scrubCellPhones,proto3" json:"scrub_cell_phones,omitempty"`
	CallRecording                  bool                                 `protobuf:"varint,11,opt,name=call_recording,json=callRecording,proto3" json:"call_recording,omitempty"`
	AgentOverrideCell              bool                                 `protobuf:"varint,12,opt,name=agent_override_cell,json=agentOverrideCell,proto3" json:"agent_override_cell,omitempty"`
	AgentOverrideCcr               bool                                 `protobuf:"varint,13,opt,name=agent_override_ccr,json=agentOverrideCcr,proto3" json:"agent_override_ccr,omitempty"`
	AgentOverrideDncl              bool                                 `protobuf:"varint,14,opt,name=agent_override_dncl,json=agentOverrideDncl,proto3" json:"agent_override_dncl,omitempty"`
	AgentOverrideTimezone          bool                                 `protobuf:"varint,15,opt,name=agent_override_timezone,json=agentOverrideTimezone,proto3" json:"agent_override_timezone,omitempty"`
	UseWhiteList                   bool                                 `protobuf:"varint,17,opt,name=use_white_list,json=useWhiteList,proto3" json:"use_white_list,omitempty"`
	UseRandomCallerId              bool                                 `protobuf:"varint,18,opt,name=use_random_caller_id,json=useRandomCallerId,proto3" json:"use_random_caller_id,omitempty"`
	RandomCallerIdBucket           int64                                `protobuf:"varint,19,opt,name=random_caller_id_bucket,json=randomCallerIdBucket,proto3" json:"random_caller_id_bucket,omitempty"`
	DefaultCallerIdCountrySid      int64                                `protobuf:"varint,20,opt,name=default_caller_id_country_sid,json=defaultCallerIdCountrySid,proto3" json:"default_caller_id_country_sid,omitempty"`
	DisplayCallerIdCountrySelect   bool                                 `protobuf:"varint,21,opt,name=display_caller_id_country_select,json=displayCallerIdCountrySelect,proto3" json:"display_caller_id_country_select,omitempty"`
	UseCallerIdBucket              bool                                 `protobuf:"varint,23,opt,name=use_caller_id_bucket,json=useCallerIdBucket,proto3" json:"use_caller_id_bucket,omitempty"`
	AgentOverrideNaturalCompliance bool                                 `protobuf:"varint,24,opt,name=agent_override_natural_compliance,json=agentOverrideNaturalCompliance,proto3" json:"agent_override_natural_compliance,omitempty"`
	NaturalComplianceRuleSetName   string                               `protobuf:"bytes,25,opt,name=natural_compliance_rule_set_name,json=naturalComplianceRuleSetName,proto3" json:"natural_compliance_rule_set_name,omitempty"`
	ComplianceMetadata             []*ComplianceMetadata                `protobuf:"bytes,26,rep,name=compliance_metadata,json=complianceMetadata,proto3" json:"compliance_metadata,omitempty"`
	EnableMetadata                 bool                                 `protobuf:"varint,27,opt,name=enable_metadata,json=enableMetadata,proto3" json:"enable_metadata,omitempty"`
	UseTimezoneValidationZip       ManualDialSettings_ZipCodeValidation `protobuf:"varint,28,opt,name=use_timezone_validation_zip,json=useTimezoneValidationZip,proto3,enum=api.v0alpha.ManualDialSettings_ZipCodeValidation" json:"use_timezone_validation_zip,omitempty"`
	// Control whether the reject option is available to the approvers.
	// Please use disable_reject_option_for_approvers under GeneralSettings.
	//
	// Deprecated: Marked as deprecated in api/v0alpha/p3api.proto.
	EnableRejectOptionForApprovers bool `protobuf:"varint,29,opt,name=enable_reject_option_for_approvers,json=enableRejectOptionForApprovers,proto3" json:"enable_reject_option_for_approvers,omitempty"`
	EnableSipAddress               bool `protobuf:"varint,30,opt,name=enable_sip_address,json=enableSipAddress,proto3" json:"enable_sip_address,omitempty"`                       // enable/disable the SIP address
	MaskManualDialCallerId         bool `protobuf:"varint,31,opt,name=mask_manual_dial_caller_id,json=maskManualDialCallerId,proto3" json:"mask_manual_dial_caller_id,omitempty"` // mask/unmask the caller id for buckets and statically set caller ids
	// Manual Dial Data Dip Settings
	EnableManualDialDataDip string `protobuf:"bytes,32,opt,name=enable_manual_dial_data_dip,json=enableManualDialDataDip,proto3" json:"enable_manual_dial_data_dip,omitempty"`
	// Data dip url id
	ManualDialDataDipConfig int64 `protobuf:"varint,33,opt,name=manual_dial_data_dip_config,json=manualDialDataDipConfig,proto3" json:"manual_dial_data_dip_config,omitempty"`
	// Configuration on which action to take on data dip failure
	ManualDialDataDipResultHandling ManualDialDataDipHandling_Enum `protobuf:"varint,34,opt,name=manual_dial_data_dip_result_handling,json=manualDialDataDipResultHandling,proto3,enum=api.v0alpha.ManualDialDataDipHandling_Enum" json:"manual_dial_data_dip_result_handling,omitempty"`
	// Configuration for which Manual Dial Data Dip Parameters to replace
	DataDipManualDialIntegration map[string]string `protobuf:"bytes,35,rep,name=data_dip_manual_dial_integration,json=dataDipManualDialIntegration,proto3" json:"data_dip_manual_dial_integration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Configuration for which action to take on data dip parameter replacement failure
	DataDipManualDialIntegrationHandling ManualDialDataDipHandling_Enum `protobuf:"varint,36,opt,name=data_dip_manual_dial_integration_handling,json=dataDipManualDialIntegrationHandling,proto3,enum=api.v0alpha.ManualDialDataDipHandling_Enum" json:"data_dip_manual_dial_integration_handling,omitempty"`
}

func (x *ManualDialSettings) Reset() {
	*x = ManualDialSettings{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManualDialSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualDialSettings) ProtoMessage() {}

func (x *ManualDialSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualDialSettings.ProtoReflect.Descriptor instead.
func (*ManualDialSettings) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{65}
}

func (x *ManualDialSettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ManualDialSettings) GetShowOutboundPhoneBook() bool {
	if x != nil {
		return x.ShowOutboundPhoneBook
	}
	return false
}

func (x *ManualDialSettings) GetShowCallerIdPhoneBook() bool {
	if x != nil {
		return x.ShowCallerIdPhoneBook
	}
	return false
}

func (x *ManualDialSettings) GetHasCustomCallerId() bool {
	if x != nil {
		return x.HasCustomCallerId
	}
	return false
}

func (x *ManualDialSettings) GetDefaultCallerId() string {
	if x != nil {
		return x.DefaultCallerId
	}
	return ""
}

func (x *ManualDialSettings) GetDefaultCountrySid() int64 {
	if x != nil {
		return x.DefaultCountrySid
	}
	return 0
}

func (x *ManualDialSettings) GetShowCountrySelector() bool {
	if x != nil {
		return x.ShowCountrySelector
	}
	return false
}

func (x *ManualDialSettings) GetTimezoneRestrictions() bool {
	if x != nil {
		return x.TimezoneRestrictions
	}
	return false
}

func (x *ManualDialSettings) GetScrubCellPhones() bool {
	if x != nil {
		return x.ScrubCellPhones
	}
	return false
}

func (x *ManualDialSettings) GetCallRecording() bool {
	if x != nil {
		return x.CallRecording
	}
	return false
}

func (x *ManualDialSettings) GetAgentOverrideCell() bool {
	if x != nil {
		return x.AgentOverrideCell
	}
	return false
}

func (x *ManualDialSettings) GetAgentOverrideCcr() bool {
	if x != nil {
		return x.AgentOverrideCcr
	}
	return false
}

func (x *ManualDialSettings) GetAgentOverrideDncl() bool {
	if x != nil {
		return x.AgentOverrideDncl
	}
	return false
}

func (x *ManualDialSettings) GetAgentOverrideTimezone() bool {
	if x != nil {
		return x.AgentOverrideTimezone
	}
	return false
}

func (x *ManualDialSettings) GetUseWhiteList() bool {
	if x != nil {
		return x.UseWhiteList
	}
	return false
}

func (x *ManualDialSettings) GetUseRandomCallerId() bool {
	if x != nil {
		return x.UseRandomCallerId
	}
	return false
}

func (x *ManualDialSettings) GetRandomCallerIdBucket() int64 {
	if x != nil {
		return x.RandomCallerIdBucket
	}
	return 0
}

func (x *ManualDialSettings) GetDefaultCallerIdCountrySid() int64 {
	if x != nil {
		return x.DefaultCallerIdCountrySid
	}
	return 0
}

func (x *ManualDialSettings) GetDisplayCallerIdCountrySelect() bool {
	if x != nil {
		return x.DisplayCallerIdCountrySelect
	}
	return false
}

func (x *ManualDialSettings) GetUseCallerIdBucket() bool {
	if x != nil {
		return x.UseCallerIdBucket
	}
	return false
}

func (x *ManualDialSettings) GetAgentOverrideNaturalCompliance() bool {
	if x != nil {
		return x.AgentOverrideNaturalCompliance
	}
	return false
}

func (x *ManualDialSettings) GetNaturalComplianceRuleSetName() string {
	if x != nil {
		return x.NaturalComplianceRuleSetName
	}
	return ""
}

func (x *ManualDialSettings) GetComplianceMetadata() []*ComplianceMetadata {
	if x != nil {
		return x.ComplianceMetadata
	}
	return nil
}

func (x *ManualDialSettings) GetEnableMetadata() bool {
	if x != nil {
		return x.EnableMetadata
	}
	return false
}

func (x *ManualDialSettings) GetUseTimezoneValidationZip() ManualDialSettings_ZipCodeValidation {
	if x != nil {
		return x.UseTimezoneValidationZip
	}
	return ManualDialSettings_FALSE
}

// Deprecated: Marked as deprecated in api/v0alpha/p3api.proto.
func (x *ManualDialSettings) GetEnableRejectOptionForApprovers() bool {
	if x != nil {
		return x.EnableRejectOptionForApprovers
	}
	return false
}

func (x *ManualDialSettings) GetEnableSipAddress() bool {
	if x != nil {
		return x.EnableSipAddress
	}
	return false
}

func (x *ManualDialSettings) GetMaskManualDialCallerId() bool {
	if x != nil {
		return x.MaskManualDialCallerId
	}
	return false
}

func (x *ManualDialSettings) GetEnableManualDialDataDip() string {
	if x != nil {
		return x.EnableManualDialDataDip
	}
	return ""
}

func (x *ManualDialSettings) GetManualDialDataDipConfig() int64 {
	if x != nil {
		return x.ManualDialDataDipConfig
	}
	return 0
}

func (x *ManualDialSettings) GetManualDialDataDipResultHandling() ManualDialDataDipHandling_Enum {
	if x != nil {
		return x.ManualDialDataDipResultHandling
	}
	return ManualDialDataDipHandling_NONE
}

func (x *ManualDialSettings) GetDataDipManualDialIntegration() map[string]string {
	if x != nil {
		return x.DataDipManualDialIntegration
	}
	return nil
}

func (x *ManualDialSettings) GetDataDipManualDialIntegrationHandling() ManualDialDataDipHandling_Enum {
	if x != nil {
		return x.DataDipManualDialIntegrationHandling
	}
	return ManualDialDataDipHandling_NONE
}

// Manual Dial Data Dip Configuration actions
type ManualDialDataDipHandling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ManualDialDataDipHandling) Reset() {
	*x = ManualDialDataDipHandling{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManualDialDataDipHandling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualDialDataDipHandling) ProtoMessage() {}

func (x *ManualDialDataDipHandling) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualDialDataDipHandling.ProtoReflect.Descriptor instead.
func (*ManualDialDataDipHandling) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{66}
}

// scrub list ids and field values used in lookup
type ScrubListsAutoAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Scrub list ID
	ScrubList string `protobuf:"bytes,1,opt,name=scrub_list,json=scrubList,proto3" json:"scrub_list,omitempty"`
	// Field ID to be added to scrub list
	FieldId string `protobuf:"bytes,2,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	// Field name/value used to find calldata with same name/key
	FieldName string `protobuf:"bytes,3,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
}

func (x *ScrubListsAutoAdd) Reset() {
	*x = ScrubListsAutoAdd{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScrubListsAutoAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrubListsAutoAdd) ProtoMessage() {}

func (x *ScrubListsAutoAdd) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrubListsAutoAdd.ProtoReflect.Descriptor instead.
func (*ScrubListsAutoAdd) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{67}
}

func (x *ScrubListsAutoAdd) GetScrubList() string {
	if x != nil {
		return x.ScrubList
	}
	return ""
}

func (x *ScrubListsAutoAdd) GetFieldId() string {
	if x != nil {
		return x.FieldId
	}
	return ""
}

func (x *ScrubListsAutoAdd) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

// ScrubListsExpirationLimits - expiration time options when adding  entry to scrub list
type ScrubListsExpirationLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// expiration limit options for outbound calls
	OutboundExpirationLimit []int64 `protobuf:"varint,1,rep,packed,name=outbound_expiration_limit,json=outboundExpirationLimit,proto3" json:"outbound_expiration_limit,omitempty"`
	// expiration limit options for inbound calls
	InboundExpirationLimit []int64 `protobuf:"varint,2,rep,packed,name=inbound_expiration_limit,json=inboundExpirationLimit,proto3" json:"inbound_expiration_limit,omitempty"`
	// expiration limit options for manual dial calls
	ManualDialExpirationLimit []int64 `protobuf:"varint,3,rep,packed,name=manual_dial_expiration_limit,json=manualDialExpirationLimit,proto3" json:"manual_dial_expiration_limit,omitempty"`
	// expiration limit options for preview dial calls
	PreviewDialExpirationLimit []int64 `protobuf:"varint,4,rep,packed,name=preview_dial_expiration_limit,json=previewDialExpirationLimit,proto3" json:"preview_dial_expiration_limit,omitempty"`
}

func (x *ScrubListsExpirationLimits) Reset() {
	*x = ScrubListsExpirationLimits{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScrubListsExpirationLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrubListsExpirationLimits) ProtoMessage() {}

func (x *ScrubListsExpirationLimits) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrubListsExpirationLimits.ProtoReflect.Descriptor instead.
func (*ScrubListsExpirationLimits) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{68}
}

func (x *ScrubListsExpirationLimits) GetOutboundExpirationLimit() []int64 {
	if x != nil {
		return x.OutboundExpirationLimit
	}
	return nil
}

func (x *ScrubListsExpirationLimits) GetInboundExpirationLimit() []int64 {
	if x != nil {
		return x.InboundExpirationLimit
	}
	return nil
}

func (x *ScrubListsExpirationLimits) GetManualDialExpirationLimit() []int64 {
	if x != nil {
		return x.ManualDialExpirationLimit
	}
	return nil
}

func (x *ScrubListsExpirationLimits) GetPreviewDialExpirationLimit() []int64 {
	if x != nil {
		return x.PreviewDialExpirationLimit
	}
	return nil
}

type DnclSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowDnclAdd                   bool  `protobuf:"varint,1,opt,name=allow_dncl_add,json=allowDnclAdd,proto3" json:"allow_dncl_add,omitempty"`
	ManualDialAutoDnclAdd          bool  `protobuf:"varint,2,opt,name=manual_dial_auto_dncl_add,json=manualDialAutoDnclAdd,proto3" json:"manual_dial_auto_dncl_add,omitempty"`
	PreviewDialAutoDnclAdd         bool  `protobuf:"varint,3,opt,name=preview_dial_auto_dncl_add,json=previewDialAutoDnclAdd,proto3" json:"preview_dial_auto_dncl_add,omitempty"`
	AgentResponsesAutoDnclAdd      bool  `protobuf:"varint,4,opt,name=agent_responses_auto_dncl_add,json=agentResponsesAutoDnclAdd,proto3" json:"agent_responses_auto_dncl_add,omitempty"`
	DefaultManualDnclExpireHours   int64 `protobuf:"varint,6,opt,name=default_manual_dncl_expire_hours,json=defaultManualDnclExpireHours,proto3" json:"default_manual_dncl_expire_hours,omitempty"`
	DefaultPreviewDnclExpireHours  int64 `protobuf:"varint,7,opt,name=default_preview_dncl_expire_hours,json=defaultPreviewDnclExpireHours,proto3" json:"default_preview_dncl_expire_hours,omitempty"`
	DefaultDnclCountry             int64 `protobuf:"varint,8,opt,name=default_dncl_country,json=defaultDnclCountry,proto3" json:"default_dncl_country,omitempty"`
	DefaultOutboundDnclExpireHours int64 `protobuf:"varint,9,opt,name=default_outbound_dncl_expire_hours,json=defaultOutboundDnclExpireHours,proto3" json:"default_outbound_dncl_expire_hours,omitempty"`
	DefaultInboundDnclExpireHours  int64 `protobuf:"varint,10,opt,name=default_inbound_dncl_expire_hours,json=defaultInboundDnclExpireHours,proto3" json:"default_inbound_dncl_expire_hours,omitempty"`
	// list of scrub lists to add dncls to
	HuntGroupComplianceScrubLists []string `protobuf:"bytes,11,rep,name=hunt_group_compliance_scrub_lists,json=huntGroupComplianceScrubLists,proto3" json:"hunt_group_compliance_scrub_lists,omitempty"`
	// scrub list ids and field values used in lookup
	ScrubListsAutoAddOptions []*ScrubListsAutoAdd `protobuf:"bytes,12,rep,name=scrub_lists_auto_add_options,json=scrubListsAutoAddOptions,proto3" json:"scrub_lists_auto_add_options,omitempty"`
	// Should Show DNCL Options in Agent Voice Wrapup state
	DisplayDnclOptionsInWrapup bool `protobuf:"varint,13,opt,name=display_dncl_options_in_wrapup,json=displayDnclOptionsInWrapup,proto3" json:"display_dncl_options_in_wrapup,omitempty"`
	// allows agent to remove scrub list entries
	AllowDnclRemove bool `protobuf:"varint,14,opt,name=allow_dncl_remove,json=allowDnclRemove,proto3" json:"allow_dncl_remove,omitempty"`
	// scrub list ids used in lookup for allowed entry removal
	HuntGroupComplianceScrubListsRemovalAllowed []string `protobuf:"bytes,15,rep,name=hunt_group_compliance_scrub_lists_removal_allowed,json=huntGroupComplianceScrubListsRemovalAllowed,proto3" json:"hunt_group_compliance_scrub_lists_removal_allowed,omitempty"`
	// expiration time options when adding  entry to scrub list
	ScrubListsExpirationLimits *ScrubListsExpirationLimits `protobuf:"bytes,16,opt,name=scrub_lists_expiration_limits,json=scrubListsExpirationLimits,proto3" json:"scrub_lists_expiration_limits,omitempty"`
}

func (x *DnclSettings) Reset() {
	*x = DnclSettings{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DnclSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnclSettings) ProtoMessage() {}

func (x *DnclSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnclSettings.ProtoReflect.Descriptor instead.
func (*DnclSettings) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{69}
}

func (x *DnclSettings) GetAllowDnclAdd() bool {
	if x != nil {
		return x.AllowDnclAdd
	}
	return false
}

func (x *DnclSettings) GetManualDialAutoDnclAdd() bool {
	if x != nil {
		return x.ManualDialAutoDnclAdd
	}
	return false
}

func (x *DnclSettings) GetPreviewDialAutoDnclAdd() bool {
	if x != nil {
		return x.PreviewDialAutoDnclAdd
	}
	return false
}

func (x *DnclSettings) GetAgentResponsesAutoDnclAdd() bool {
	if x != nil {
		return x.AgentResponsesAutoDnclAdd
	}
	return false
}

func (x *DnclSettings) GetDefaultManualDnclExpireHours() int64 {
	if x != nil {
		return x.DefaultManualDnclExpireHours
	}
	return 0
}

func (x *DnclSettings) GetDefaultPreviewDnclExpireHours() int64 {
	if x != nil {
		return x.DefaultPreviewDnclExpireHours
	}
	return 0
}

func (x *DnclSettings) GetDefaultDnclCountry() int64 {
	if x != nil {
		return x.DefaultDnclCountry
	}
	return 0
}

func (x *DnclSettings) GetDefaultOutboundDnclExpireHours() int64 {
	if x != nil {
		return x.DefaultOutboundDnclExpireHours
	}
	return 0
}

func (x *DnclSettings) GetDefaultInboundDnclExpireHours() int64 {
	if x != nil {
		return x.DefaultInboundDnclExpireHours
	}
	return 0
}

func (x *DnclSettings) GetHuntGroupComplianceScrubLists() []string {
	if x != nil {
		return x.HuntGroupComplianceScrubLists
	}
	return nil
}

func (x *DnclSettings) GetScrubListsAutoAddOptions() []*ScrubListsAutoAdd {
	if x != nil {
		return x.ScrubListsAutoAddOptions
	}
	return nil
}

func (x *DnclSettings) GetDisplayDnclOptionsInWrapup() bool {
	if x != nil {
		return x.DisplayDnclOptionsInWrapup
	}
	return false
}

func (x *DnclSettings) GetAllowDnclRemove() bool {
	if x != nil {
		return x.AllowDnclRemove
	}
	return false
}

func (x *DnclSettings) GetHuntGroupComplianceScrubListsRemovalAllowed() []string {
	if x != nil {
		return x.HuntGroupComplianceScrubListsRemovalAllowed
	}
	return nil
}

func (x *DnclSettings) GetScrubListsExpirationLimits() *ScrubListsExpirationLimits {
	if x != nil {
		return x.ScrubListsExpirationLimits
	}
	return nil
}

type TransferSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allowed                                bool                                `protobuf:"varint,1,opt,name=allowed,proto3" json:"allowed,omitempty"`
	ShowFiltering                          bool                                `protobuf:"varint,2,opt,name=show_filtering,json=showFiltering,proto3" json:"show_filtering,omitempty"`
	RequeueType                            RequeueTransferQueueConfigType_Enum `protobuf:"varint,3,opt,name=requeue_type,json=requeueType,proto3,enum=api.v0alpha.RequeueTransferQueueConfigType_Enum" json:"requeue_type,omitempty"`
	Type                                   []TransferSettingsType_Enum         `protobuf:"varint,4,rep,packed,name=type,proto3,enum=api.v0alpha.TransferSettingsType_Enum" json:"type,omitempty"`
	DefaultCountrySid                      int64                               `protobuf:"varint,5,opt,name=default_country_sid,json=defaultCountrySid,proto3" json:"default_country_sid,omitempty"`
	ShowCountrySelector                    bool                                `protobuf:"varint,6,opt,name=show_country_selector,json=showCountrySelector,proto3" json:"show_country_selector,omitempty"`
	HasCustomTransferNumber                bool                                `protobuf:"varint,7,opt,name=has_custom_transfer_number,json=hasCustomTransferNumber,proto3" json:"has_custom_transfer_number,omitempty"`
	DefaultTransferNumber                  string                              `protobuf:"bytes,8,opt,name=default_transfer_number,json=defaultTransferNumber,proto3" json:"default_transfer_number,omitempty"`
	HasCustomCallerId                      bool                                `protobuf:"varint,9,opt,name=has_custom_caller_id,json=hasCustomCallerId,proto3" json:"has_custom_caller_id,omitempty"`
	DefaultCallerId                        string                              `protobuf:"bytes,10,opt,name=default_caller_id,json=defaultCallerId,proto3" json:"default_caller_id,omitempty"`
	ShowTransfersPhoneBook                 bool                                `protobuf:"varint,11,opt,name=show_transfers_phone_book,json=showTransfersPhoneBook,proto3" json:"show_transfers_phone_book,omitempty"`
	ShowCallerIdPhoneBook                  bool                                `protobuf:"varint,12,opt,name=show_caller_id_phone_book,json=showCallerIdPhoneBook,proto3" json:"show_caller_id_phone_book,omitempty"`
	HandOffType                            []TransferSettingsHandOffType_Enum  `protobuf:"varint,13,rep,packed,name=hand_off_type,json=handOffType,proto3,enum=api.v0alpha.TransferSettingsHandOffType_Enum" json:"hand_off_type,omitempty"`
	RecordingStatus                        RecordingStatus_Enum                `protobuf:"varint,14,opt,name=recording_status,json=recordingStatus,proto3,enum=api.v0alpha.RecordingStatus_Enum" json:"recording_status,omitempty"`
	DefaultCallerIdCountrySid              int64                               `protobuf:"varint,15,opt,name=default_caller_id_country_sid,json=defaultCallerIdCountrySid,proto3" json:"default_caller_id_country_sid,omitempty"`
	ShowCallerIdCountrySelector            bool                                `protobuf:"varint,16,opt,name=show_caller_id_country_selector,json=showCallerIdCountrySelector,proto3" json:"show_caller_id_country_selector,omitempty"`
	StartRecordTransferTargets             []string                            `protobuf:"bytes,17,rep,name=start_record_transfer_targets,json=startRecordTransferTargets,proto3" json:"start_record_transfer_targets,omitempty"`
	StopRecordTransferTargets              []string                            `protobuf:"bytes,18,rep,name=stop_record_transfer_targets,json=stopRecordTransferTargets,proto3" json:"stop_record_transfer_targets,omitempty"`
	DefaultFilteringIncludeAllOnlineAgents bool                                `protobuf:"varint,19,opt,name=default_filtering_include_all_online_agents,json=defaultFilteringIncludeAllOnlineAgents,proto3" json:"default_filtering_include_all_online_agents,omitempty"`
	RequeueTypeCustomValue                 string                              `protobuf:"bytes,20,opt,name=requeue_type_custom_value,json=requeueTypeCustomValue,proto3" json:"requeue_type_custom_value,omitempty"`
	AgentTransferHuntGroupFilter           bool                                `protobuf:"varint,21,opt,name=agent_transfer_hunt_group_filter,json=agentTransferHuntGroupFilter,proto3" json:"agent_transfer_hunt_group_filter,omitempty"` // limit agent transfers to agents in hunt group
	// Determines what should happen with the recording status on agent transfers
	AgentTransferRecordingStatus RecordingStatus_Enum `protobuf:"varint,22,opt,name=agent_transfer_recording_status,json=agentTransferRecordingStatus,proto3,enum=api.v0alpha.RecordingStatus_Enum" json:"agent_transfer_recording_status,omitempty"`
	// Determines what should happen with the recording status on requeue transfers
	RequeueTransferRecordingStatus RecordingStatus_Enum `protobuf:"varint,23,opt,name=requeue_transfer_recording_status,json=requeueTransferRecordingStatus,proto3,enum=api.v0alpha.RecordingStatus_Enum" json:"requeue_transfer_recording_status,omitempty"`
	// Determines what should happen with the recording status on open transfers
	OpenTransferRecordingStatus RecordingStatus_Enum `protobuf:"varint,24,opt,name=open_transfer_recording_status,json=openTransferRecordingStatus,proto3,enum=api.v0alpha.RecordingStatus_Enum" json:"open_transfer_recording_status,omitempty"`
	// Compliance Settings for call transfers
	NaturalComplianceOverride            bool                  `protobuf:"varint,25,opt,name=natural_compliance_override,json=naturalComplianceOverride,proto3" json:"natural_compliance_override,omitempty"`
	TransferNaturalComplianceRuleSetName string                `protobuf:"bytes,26,opt,name=transfer_natural_compliance_rule_set_name,json=transferNaturalComplianceRuleSetName,proto3" json:"transfer_natural_compliance_rule_set_name,omitempty"`
	ComplianceMetadata                   []*ComplianceMetadata `protobuf:"bytes,27,rep,name=compliance_metadata,json=complianceMetadata,proto3" json:"compliance_metadata,omitempty"`
	CallWhitelist                        bool                  `protobuf:"varint,28,opt,name=call_whitelist,json=callWhitelist,proto3" json:"call_whitelist,omitempty"`
}

func (x *TransferSettings) Reset() {
	*x = TransferSettings{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferSettings) ProtoMessage() {}

func (x *TransferSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferSettings.ProtoReflect.Descriptor instead.
func (*TransferSettings) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{70}
}

func (x *TransferSettings) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

func (x *TransferSettings) GetShowFiltering() bool {
	if x != nil {
		return x.ShowFiltering
	}
	return false
}

func (x *TransferSettings) GetRequeueType() RequeueTransferQueueConfigType_Enum {
	if x != nil {
		return x.RequeueType
	}
	return RequeueTransferQueueConfigType_UNKNOWN
}

func (x *TransferSettings) GetType() []TransferSettingsType_Enum {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *TransferSettings) GetDefaultCountrySid() int64 {
	if x != nil {
		return x.DefaultCountrySid
	}
	return 0
}

func (x *TransferSettings) GetShowCountrySelector() bool {
	if x != nil {
		return x.ShowCountrySelector
	}
	return false
}

func (x *TransferSettings) GetHasCustomTransferNumber() bool {
	if x != nil {
		return x.HasCustomTransferNumber
	}
	return false
}

func (x *TransferSettings) GetDefaultTransferNumber() string {
	if x != nil {
		return x.DefaultTransferNumber
	}
	return ""
}

func (x *TransferSettings) GetHasCustomCallerId() bool {
	if x != nil {
		return x.HasCustomCallerId
	}
	return false
}

func (x *TransferSettings) GetDefaultCallerId() string {
	if x != nil {
		return x.DefaultCallerId
	}
	return ""
}

func (x *TransferSettings) GetShowTransfersPhoneBook() bool {
	if x != nil {
		return x.ShowTransfersPhoneBook
	}
	return false
}

func (x *TransferSettings) GetShowCallerIdPhoneBook() bool {
	if x != nil {
		return x.ShowCallerIdPhoneBook
	}
	return false
}

func (x *TransferSettings) GetHandOffType() []TransferSettingsHandOffType_Enum {
	if x != nil {
		return x.HandOffType
	}
	return nil
}

func (x *TransferSettings) GetRecordingStatus() RecordingStatus_Enum {
	if x != nil {
		return x.RecordingStatus
	}
	return RecordingStatus_UNKNOWN
}

func (x *TransferSettings) GetDefaultCallerIdCountrySid() int64 {
	if x != nil {
		return x.DefaultCallerIdCountrySid
	}
	return 0
}

func (x *TransferSettings) GetShowCallerIdCountrySelector() bool {
	if x != nil {
		return x.ShowCallerIdCountrySelector
	}
	return false
}

func (x *TransferSettings) GetStartRecordTransferTargets() []string {
	if x != nil {
		return x.StartRecordTransferTargets
	}
	return nil
}

func (x *TransferSettings) GetStopRecordTransferTargets() []string {
	if x != nil {
		return x.StopRecordTransferTargets
	}
	return nil
}

func (x *TransferSettings) GetDefaultFilteringIncludeAllOnlineAgents() bool {
	if x != nil {
		return x.DefaultFilteringIncludeAllOnlineAgents
	}
	return false
}

func (x *TransferSettings) GetRequeueTypeCustomValue() string {
	if x != nil {
		return x.RequeueTypeCustomValue
	}
	return ""
}

func (x *TransferSettings) GetAgentTransferHuntGroupFilter() bool {
	if x != nil {
		return x.AgentTransferHuntGroupFilter
	}
	return false
}

func (x *TransferSettings) GetAgentTransferRecordingStatus() RecordingStatus_Enum {
	if x != nil {
		return x.AgentTransferRecordingStatus
	}
	return RecordingStatus_UNKNOWN
}

func (x *TransferSettings) GetRequeueTransferRecordingStatus() RecordingStatus_Enum {
	if x != nil {
		return x.RequeueTransferRecordingStatus
	}
	return RecordingStatus_UNKNOWN
}

func (x *TransferSettings) GetOpenTransferRecordingStatus() RecordingStatus_Enum {
	if x != nil {
		return x.OpenTransferRecordingStatus
	}
	return RecordingStatus_UNKNOWN
}

func (x *TransferSettings) GetNaturalComplianceOverride() bool {
	if x != nil {
		return x.NaturalComplianceOverride
	}
	return false
}

func (x *TransferSettings) GetTransferNaturalComplianceRuleSetName() string {
	if x != nil {
		return x.TransferNaturalComplianceRuleSetName
	}
	return ""
}

func (x *TransferSettings) GetComplianceMetadata() []*ComplianceMetadata {
	if x != nil {
		return x.ComplianceMetadata
	}
	return nil
}

func (x *TransferSettings) GetCallWhitelist() bool {
	if x != nil {
		return x.CallWhitelist
	}
	return false
}

type RecordingSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayIndicator     bool  `protobuf:"varint,1,opt,name=display_indicator,json=displayIndicator,proto3" json:"display_indicator,omitempty"`
	EnablePause          bool  `protobuf:"varint,2,opt,name=enable_pause,json=enablePause,proto3" json:"enable_pause,omitempty"`
	EnableDelay          bool  `protobuf:"varint,3,opt,name=enable_delay,json=enableDelay,proto3" json:"enable_delay,omitempty"`
	Delay                int64 `protobuf:"varint,4,opt,name=delay,proto3" json:"delay,omitempty"`
	PauseRecordingOnHold bool  `protobuf:"varint,32,opt,name=pause_recording_on_hold,json=pauseRecordingOnHold,proto3" json:"pause_recording_on_hold,omitempty"` // determines if the recording will pause while the agent is on hold
}

func (x *RecordingSettings) Reset() {
	*x = RecordingSettings{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordingSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingSettings) ProtoMessage() {}

func (x *RecordingSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingSettings.ProtoReflect.Descriptor instead.
func (*RecordingSettings) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{71}
}

func (x *RecordingSettings) GetDisplayIndicator() bool {
	if x != nil {
		return x.DisplayIndicator
	}
	return false
}

func (x *RecordingSettings) GetEnablePause() bool {
	if x != nil {
		return x.EnablePause
	}
	return false
}

func (x *RecordingSettings) GetEnableDelay() bool {
	if x != nil {
		return x.EnableDelay
	}
	return false
}

func (x *RecordingSettings) GetDelay() int64 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *RecordingSettings) GetPauseRecordingOnHold() bool {
	if x != nil {
		return x.PauseRecordingOnHold
	}
	return false
}

type SimpleHuntGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HuntGroupSid  int64  `protobuf:"varint,1,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	HuntGroupName string `protobuf:"bytes,2,opt,name=hunt_group_name,json=huntGroupName,proto3" json:"hunt_group_name,omitempty"`
}

func (x *SimpleHuntGroup) Reset() {
	*x = SimpleHuntGroup{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimpleHuntGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleHuntGroup) ProtoMessage() {}

func (x *SimpleHuntGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleHuntGroup.ProtoReflect.Descriptor instead.
func (*SimpleHuntGroup) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{72}
}

func (x *SimpleHuntGroup) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *SimpleHuntGroup) GetHuntGroupName() string {
	if x != nil {
		return x.HuntGroupName
	}
	return ""
}

type DisplayDataSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayDataDip       DisplayDataSettings_DisplayDataDip `protobuf:"varint,1,opt,name=display_data_dip,json=displayDataDip,proto3,enum=api.v0alpha.DisplayDataSettings_DisplayDataDip" json:"display_data_dip,omitempty"`
	DisplayDataDipKeys   []string                           `protobuf:"bytes,2,rep,name=display_data_dip_keys,json=displayDataDipKeys,proto3" json:"display_data_dip_keys,omitempty"`
	DisplayDataCollect   bool                               `protobuf:"varint,3,opt,name=display_data_collect,json=displayDataCollect,proto3" json:"display_data_collect,omitempty"`
	DisplayIvrNavigation bool                               `protobuf:"varint,4,opt,name=display_ivr_navigation,json=displayIvrNavigation,proto3" json:"display_ivr_navigation,omitempty"`
	DisplaySipHeaderData bool                               `protobuf:"varint,5,opt,name=display_sip_header_data,json=displaySipHeaderData,proto3" json:"display_sip_header_data,omitempty"`
}

func (x *DisplayDataSettings) Reset() {
	*x = DisplayDataSettings{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisplayDataSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayDataSettings) ProtoMessage() {}

func (x *DisplayDataSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayDataSettings.ProtoReflect.Descriptor instead.
func (*DisplayDataSettings) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{73}
}

func (x *DisplayDataSettings) GetDisplayDataDip() DisplayDataSettings_DisplayDataDip {
	if x != nil {
		return x.DisplayDataDip
	}
	return DisplayDataSettings_NONE
}

func (x *DisplayDataSettings) GetDisplayDataDipKeys() []string {
	if x != nil {
		return x.DisplayDataDipKeys
	}
	return nil
}

func (x *DisplayDataSettings) GetDisplayDataCollect() bool {
	if x != nil {
		return x.DisplayDataCollect
	}
	return false
}

func (x *DisplayDataSettings) GetDisplayIvrNavigation() bool {
	if x != nil {
		return x.DisplayIvrNavigation
	}
	return false
}

func (x *DisplayDataSettings) GetDisplaySipHeaderData() bool {
	if x != nil {
		return x.DisplaySipHeaderData
	}
	return false
}

type RequeueTransferQueueConfigType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequeueTransferQueueConfigType) Reset() {
	*x = RequeueTransferQueueConfigType{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequeueTransferQueueConfigType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequeueTransferQueueConfigType) ProtoMessage() {}

func (x *RequeueTransferQueueConfigType) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequeueTransferQueueConfigType.ProtoReflect.Descriptor instead.
func (*RequeueTransferQueueConfigType) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{74}
}

type RecordingStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecordingStatus) Reset() {
	*x = RecordingStatus{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordingStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingStatus) ProtoMessage() {}

func (x *RecordingStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingStatus.ProtoReflect.Descriptor instead.
func (*RecordingStatus) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{75}
}

type TransferSettingsType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransferSettingsType) Reset() {
	*x = TransferSettingsType{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferSettingsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferSettingsType) ProtoMessage() {}

func (x *TransferSettingsType) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferSettingsType.ProtoReflect.Descriptor instead.
func (*TransferSettingsType) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{76}
}

type TransferSettingsHandOffType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransferSettingsHandOffType) Reset() {
	*x = TransferSettingsHandOffType{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferSettingsHandOffType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferSettingsHandOffType) ProtoMessage() {}

func (x *TransferSettingsHandOffType) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferSettingsHandOffType.ProtoReflect.Descriptor instead.
func (*TransferSettingsHandOffType) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{77}
}

type AgentHoldSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allowed              AllowedHoldType_Enum `protobuf:"varint,1,opt,name=allowed,proto3,enum=api.v0alpha.AllowedHoldType_Enum" json:"allowed,omitempty"`
	AutoPauseOnMultiHold bool                 `protobuf:"varint,2,opt,name=auto_pause_on_multi_hold,json=autoPauseOnMultiHold,proto3" json:"auto_pause_on_multi_hold,omitempty"`
}

func (x *AgentHoldSettings) Reset() {
	*x = AgentHoldSettings{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentHoldSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentHoldSettings) ProtoMessage() {}

func (x *AgentHoldSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentHoldSettings.ProtoReflect.Descriptor instead.
func (*AgentHoldSettings) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{78}
}

func (x *AgentHoldSettings) GetAllowed() AllowedHoldType_Enum {
	if x != nil {
		return x.Allowed
	}
	return AllowedHoldType_NONE
}

func (x *AgentHoldSettings) GetAutoPauseOnMultiHold() bool {
	if x != nil {
		return x.AutoPauseOnMultiHold
	}
	return false
}

type AllowedHoldType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AllowedHoldType) Reset() {
	*x = AllowedHoldType{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllowedHoldType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowedHoldType) ProtoMessage() {}

func (x *AllowedHoldType) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllowedHoldType.ProtoReflect.Descriptor instead.
func (*AllowedHoldType) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{79}
}

type ManualApprovalSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allowed               bool `protobuf:"varint,1,opt,name=allowed,proto3" json:"allowed,omitempty"`
	Confirm               bool `protobuf:"varint,2,opt,name=confirm,proto3" json:"confirm,omitempty"`
	SmsAllowed            bool `protobuf:"varint,3,opt,name=sms_allowed,json=smsAllowed,proto3" json:"sms_allowed,omitempty"`
	SmsNumberConfirmation bool `protobuf:"varint,4,opt,name=sms_number_confirmation,json=smsNumberConfirmation,proto3" json:"sms_number_confirmation,omitempty"`
	// Control whether the reject option is available to the approvers.
	DisableRejectOptionForApprovers bool `protobuf:"varint,5,opt,name=disable_reject_option_for_approvers,json=disableRejectOptionForApprovers,proto3" json:"disable_reject_option_for_approvers,omitempty"`
}

func (x *ManualApprovalSettings) Reset() {
	*x = ManualApprovalSettings{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManualApprovalSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualApprovalSettings) ProtoMessage() {}

func (x *ManualApprovalSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualApprovalSettings.ProtoReflect.Descriptor instead.
func (*ManualApprovalSettings) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{80}
}

func (x *ManualApprovalSettings) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

func (x *ManualApprovalSettings) GetConfirm() bool {
	if x != nil {
		return x.Confirm
	}
	return false
}

func (x *ManualApprovalSettings) GetSmsAllowed() bool {
	if x != nil {
		return x.SmsAllowed
	}
	return false
}

func (x *ManualApprovalSettings) GetSmsNumberConfirmation() bool {
	if x != nil {
		return x.SmsNumberConfirmation
	}
	return false
}

func (x *ManualApprovalSettings) GetDisableRejectOptionForApprovers() bool {
	if x != nil {
		return x.DisableRejectOptionForApprovers
	}
	return false
}

type ListHuntGroupWebLinksReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HuntGroupSid int64                 `protobuf:"varint,1,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	CallSid      int64                 `protobuf:"varint,4,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	CallType     commons.CallType_Enum `protobuf:"varint,5,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
	// the following fields should only be set when the call_sid from the request is from a retrieved scheduled callback.
	// used to get the callback details to replace them in the web links parameters (if any match).
	ServiceId           string `protobuf:"bytes,7,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	ScheduledCallbackId string `protobuf:"bytes,8,opt,name=scheduled_callback_id,json=scheduledCallbackId,proto3" json:"scheduled_callback_id,omitempty"`
	SessionSid          int64  `protobuf:"varint,9,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"` // current session
	// this field should only be set on the request when the ui is in a "preview call" state when dealing with
	// preview calls
	IsInitialPreview bool `protobuf:"varint,10,opt,name=isInitialPreview,proto3" json:"isInitialPreview,omitempty"`
	// use this field when the ui is in a "preview call" state and no call sid is available
	TaskSid int64 `protobuf:"varint,11,opt,name=task_sid,json=taskSid,proto3" json:"task_sid,omitempty"`
}

func (x *ListHuntGroupWebLinksReq) Reset() {
	*x = ListHuntGroupWebLinksReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHuntGroupWebLinksReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHuntGroupWebLinksReq) ProtoMessage() {}

func (x *ListHuntGroupWebLinksReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHuntGroupWebLinksReq.ProtoReflect.Descriptor instead.
func (*ListHuntGroupWebLinksReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{81}
}

func (x *ListHuntGroupWebLinksReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *ListHuntGroupWebLinksReq) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *ListHuntGroupWebLinksReq) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

func (x *ListHuntGroupWebLinksReq) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ListHuntGroupWebLinksReq) GetScheduledCallbackId() string {
	if x != nil {
		return x.ScheduledCallbackId
	}
	return ""
}

func (x *ListHuntGroupWebLinksReq) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

func (x *ListHuntGroupWebLinksReq) GetIsInitialPreview() bool {
	if x != nil {
		return x.IsInitialPreview
	}
	return false
}

func (x *ListHuntGroupWebLinksReq) GetTaskSid() int64 {
	if x != nil {
		return x.TaskSid
	}
	return 0
}

type ListHuntGroupWebLinksRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebLinks []*WebLink `protobuf:"bytes,1,rep,name=web_links,json=webLinks,proto3" json:"web_links,omitempty"`
}

func (x *ListHuntGroupWebLinksRes) Reset() {
	*x = ListHuntGroupWebLinksRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHuntGroupWebLinksRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHuntGroupWebLinksRes) ProtoMessage() {}

func (x *ListHuntGroupWebLinksRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHuntGroupWebLinksRes.ProtoReflect.Descriptor instead.
func (*ListHuntGroupWebLinksRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{82}
}

func (x *ListHuntGroupWebLinksRes) GetWebLinks() []*WebLink {
	if x != nil {
		return x.WebLinks
	}
	return nil
}

type WebLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName           string   `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description           string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	LinkUrl               string   `protobuf:"bytes,3,opt,name=link_url,json=linkUrl,proto3" json:"link_url,omitempty"`
	IsJsLink              bool     `protobuf:"varint,4,opt,name=is_js_link,json=isJsLink,proto3" json:"is_js_link,omitempty"`
	TooltipMissingFields  []string `protobuf:"bytes,6,rep,name=tooltip_missing_fields,json=tooltipMissingFields,proto3" json:"tooltip_missing_fields,omitempty"`
	HuntGroupParameterSid int64    `protobuf:"varint,7,opt,name=hunt_group_parameter_sid,json=huntGroupParameterSid,proto3" json:"hunt_group_parameter_sid,omitempty"`
}

func (x *WebLink) Reset() {
	*x = WebLink{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebLink) ProtoMessage() {}

func (x *WebLink) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebLink.ProtoReflect.Descriptor instead.
func (*WebLink) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{83}
}

func (x *WebLink) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *WebLink) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WebLink) GetLinkUrl() string {
	if x != nil {
		return x.LinkUrl
	}
	return ""
}

func (x *WebLink) GetIsJsLink() bool {
	if x != nil {
		return x.IsJsLink
	}
	return false
}

func (x *WebLink) GetTooltipMissingFields() []string {
	if x != nil {
		return x.TooltipMissingFields
	}
	return nil
}

func (x *WebLink) GetHuntGroupParameterSid() int64 {
	if x != nil {
		return x.HuntGroupParameterSid
	}
	return 0
}

type GetHuntGroupPauseCodesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HuntGroupSid int64 `protobuf:"varint,1,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
}

func (x *GetHuntGroupPauseCodesReq) Reset() {
	*x = GetHuntGroupPauseCodesReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHuntGroupPauseCodesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHuntGroupPauseCodesReq) ProtoMessage() {}

func (x *GetHuntGroupPauseCodesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHuntGroupPauseCodesReq.ProtoReflect.Descriptor instead.
func (*GetHuntGroupPauseCodesReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{84}
}

func (x *GetHuntGroupPauseCodesReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

type GetHuntGroupPauseCodesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	PauseCodes  []string `protobuf:"bytes,3,rep,name=pause_codes,json=pauseCodes,proto3" json:"pause_codes,omitempty"`
}

func (x *GetHuntGroupPauseCodesRes) Reset() {
	*x = GetHuntGroupPauseCodesRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHuntGroupPauseCodesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHuntGroupPauseCodesRes) ProtoMessage() {}

func (x *GetHuntGroupPauseCodesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHuntGroupPauseCodesRes.ProtoReflect.Descriptor instead.
func (*GetHuntGroupPauseCodesRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{85}
}

func (x *GetHuntGroupPauseCodesRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetHuntGroupPauseCodesRes) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetHuntGroupPauseCodesRes) GetPauseCodes() []string {
	if x != nil {
		return x.PauseCodes
	}
	return nil
}

type ListAgentCallHistoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionSid    int64                                 `protobuf:"varint,1,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
	HistoryFilter AgentStatisticsSettings_HistoryFilter `protobuf:"varint,2,opt,name=history_filter,json=historyFilter,proto3,enum=api.v0alpha.AgentStatisticsSettings_HistoryFilter" json:"history_filter,omitempty"`
}

func (x *ListAgentCallHistoryReq) Reset() {
	*x = ListAgentCallHistoryReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentCallHistoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentCallHistoryReq) ProtoMessage() {}

func (x *ListAgentCallHistoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentCallHistoryReq.ProtoReflect.Descriptor instead.
func (*ListAgentCallHistoryReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{86}
}

func (x *ListAgentCallHistoryReq) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

func (x *ListAgentCallHistoryReq) GetHistoryFilter() AgentStatisticsSettings_HistoryFilter {
	if x != nil {
		return x.HistoryFilter
	}
	return AgentStatisticsSettings_TODAY
}

type ListAgentCallHistoryRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	History []*ListAgentCallHistoryRes_Entry `protobuf:"bytes,1,rep,name=history,proto3" json:"history,omitempty"`
}

func (x *ListAgentCallHistoryRes) Reset() {
	*x = ListAgentCallHistoryRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentCallHistoryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentCallHistoryRes) ProtoMessage() {}

func (x *ListAgentCallHistoryRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentCallHistoryRes.ProtoReflect.Descriptor instead.
func (*ListAgentCallHistoryRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{87}
}

func (x *ListAgentCallHistoryRes) GetHistory() []*ListAgentCallHistoryRes_Entry {
	if x != nil {
		return x.History
	}
	return nil
}

type GetCampaignCompletionStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hunt group id that the requesting agent is assigned to, used to check for task groups running for that hunt group.
	HuntGroupSid int64 `protobuf:"varint,3,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
}

func (x *GetCampaignCompletionStatusReq) Reset() {
	*x = GetCampaignCompletionStatusReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCampaignCompletionStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCampaignCompletionStatusReq) ProtoMessage() {}

func (x *GetCampaignCompletionStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCampaignCompletionStatusReq.ProtoReflect.Descriptor instead.
func (*GetCampaignCompletionStatusReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{88}
}

func (x *GetCampaignCompletionStatusReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

type GetCampaignCompletionStatusRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// indicates if any running task groups (broadcasts) were found.
	BroadcastsExist bool `protobuf:"varint,1,opt,name=broadcasts_exist,json=broadcastsExist,proto3" json:"broadcasts_exist,omitempty"`
	// percentage of completion of tasks for found matching task groups.
	PercentComplete int32 `protobuf:"varint,2,opt,name=percent_complete,json=percentComplete,proto3" json:"percent_complete,omitempty"`
	// info of all the matching running task groups.
	CompletionStatus map[int64]*GetCampaignCompletionStatusRes_TaskGroupCompletionStatus `protobuf:"bytes,3,rep,name=completion_status,json=completionStatus,proto3" json:"completion_status,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// total tasks for all task groups
	TotalTasks int32 `protobuf:"varint,4,opt,name=total_tasks,json=totalTasks,proto3" json:"total_tasks,omitempty"`
	// total tasks completed for all task groups
	TotalTasksCompleted int32 `protobuf:"varint,5,opt,name=total_tasks_completed,json=totalTasksCompleted,proto3" json:"total_tasks_completed,omitempty"`
}

func (x *GetCampaignCompletionStatusRes) Reset() {
	*x = GetCampaignCompletionStatusRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCampaignCompletionStatusRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCampaignCompletionStatusRes) ProtoMessage() {}

func (x *GetCampaignCompletionStatusRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCampaignCompletionStatusRes.ProtoReflect.Descriptor instead.
func (*GetCampaignCompletionStatusRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{89}
}

func (x *GetCampaignCompletionStatusRes) GetBroadcastsExist() bool {
	if x != nil {
		return x.BroadcastsExist
	}
	return false
}

func (x *GetCampaignCompletionStatusRes) GetPercentComplete() int32 {
	if x != nil {
		return x.PercentComplete
	}
	return 0
}

func (x *GetCampaignCompletionStatusRes) GetCompletionStatus() map[int64]*GetCampaignCompletionStatusRes_TaskGroupCompletionStatus {
	if x != nil {
		return x.CompletionStatus
	}
	return nil
}

func (x *GetCampaignCompletionStatusRes) GetTotalTasks() int32 {
	if x != nil {
		return x.TotalTasks
	}
	return 0
}

func (x *GetCampaignCompletionStatusRes) GetTotalTasksCompleted() int32 {
	if x != nil {
		return x.TotalTasksCompleted
	}
	return 0
}

type GetLostPeerInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallSid  int64                 `protobuf:"varint,1,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	CallType commons.CallType_Enum `protobuf:"varint,2,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
}

func (x *GetLostPeerInfoReq) Reset() {
	*x = GetLostPeerInfoReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLostPeerInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLostPeerInfoReq) ProtoMessage() {}

func (x *GetLostPeerInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLostPeerInfoReq.ProtoReflect.Descriptor instead.
func (*GetLostPeerInfoReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{90}
}

func (x *GetLostPeerInfoReq) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *GetLostPeerInfoReq) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

type GetLostPeerInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormerAgentSid      int64    `protobuf:"varint,1,opt,name=former_agent_sid,json=formerAgentSid,proto3" json:"former_agent_sid,omitempty"`
	FormerAgentName     string   `protobuf:"bytes,2,opt,name=former_agent_name,json=formerAgentName,proto3" json:"former_agent_name,omitempty"`
	FormerHuntGroupName string   `protobuf:"bytes,3,opt,name=former_hunt_group_name,json=formerHuntGroupName,proto3" json:"former_hunt_group_name,omitempty"`
	HuntGroups          []string `protobuf:"bytes,4,rep,name=hunt_groups,json=huntGroups,proto3" json:"hunt_groups,omitempty"`
	Agents              []string `protobuf:"bytes,5,rep,name=agents,proto3" json:"agents,omitempty"`
	AgentSkills         []string `protobuf:"bytes,6,rep,name=agent_skills,json=agentSkills,proto3" json:"agent_skills,omitempty"`
	PbxExtensions       []string `protobuf:"bytes,7,rep,name=pbx_extensions,json=pbxExtensions,proto3" json:"pbx_extensions,omitempty"`
}

func (x *GetLostPeerInfoRes) Reset() {
	*x = GetLostPeerInfoRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLostPeerInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLostPeerInfoRes) ProtoMessage() {}

func (x *GetLostPeerInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLostPeerInfoRes.ProtoReflect.Descriptor instead.
func (*GetLostPeerInfoRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{91}
}

func (x *GetLostPeerInfoRes) GetFormerAgentSid() int64 {
	if x != nil {
		return x.FormerAgentSid
	}
	return 0
}

func (x *GetLostPeerInfoRes) GetFormerAgentName() string {
	if x != nil {
		return x.FormerAgentName
	}
	return ""
}

func (x *GetLostPeerInfoRes) GetFormerHuntGroupName() string {
	if x != nil {
		return x.FormerHuntGroupName
	}
	return ""
}

func (x *GetLostPeerInfoRes) GetHuntGroups() []string {
	if x != nil {
		return x.HuntGroups
	}
	return nil
}

func (x *GetLostPeerInfoRes) GetAgents() []string {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *GetLostPeerInfoRes) GetAgentSkills() []string {
	if x != nil {
		return x.AgentSkills
	}
	return nil
}

func (x *GetLostPeerInfoRes) GetPbxExtensions() []string {
	if x != nil {
		return x.PbxExtensions
	}
	return nil
}

type GetDispositionKeysReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDispositionKeysReq) Reset() {
	*x = GetDispositionKeysReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDispositionKeysReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDispositionKeysReq) ProtoMessage() {}

func (x *GetDispositionKeysReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDispositionKeysReq.ProtoReflect.Descriptor instead.
func (*GetDispositionKeysReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{92}
}

type GetDispositionKeysRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *GetDispositionKeysRes) Reset() {
	*x = GetDispositionKeysRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDispositionKeysRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDispositionKeysRes) ProtoMessage() {}

func (x *GetDispositionKeysRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDispositionKeysRes.ProtoReflect.Descriptor instead.
func (*GetDispositionKeysRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{93}
}

func (x *GetDispositionKeysRes) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type GetScriptOrResponsesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *MailMergeData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetScriptOrResponsesReq) Reset() {
	*x = GetScriptOrResponsesReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScriptOrResponsesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScriptOrResponsesReq) ProtoMessage() {}

func (x *GetScriptOrResponsesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScriptOrResponsesReq.ProtoReflect.Descriptor instead.
func (*GetScriptOrResponsesReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{94}
}

func (x *GetScriptOrResponsesReq) GetData() *MailMergeData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetScriptOrResponsesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scripts   *HuntGroupScript     `protobuf:"bytes,1,opt,name=scripts,proto3" json:"scripts,omitempty"`
	Responses []*HuntGroupResponse `protobuf:"bytes,2,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *GetScriptOrResponsesRes) Reset() {
	*x = GetScriptOrResponsesRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScriptOrResponsesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScriptOrResponsesRes) ProtoMessage() {}

func (x *GetScriptOrResponsesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScriptOrResponsesRes.ProtoReflect.Descriptor instead.
func (*GetScriptOrResponsesRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{95}
}

func (x *GetScriptOrResponsesRes) GetScripts() *HuntGroupScript {
	if x != nil {
		return x.Scripts
	}
	return nil
}

func (x *GetScriptOrResponsesRes) GetResponses() []*HuntGroupResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type GetReadyAgentsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetReadyAgentsReq) Reset() {
	*x = GetReadyAgentsReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReadyAgentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReadyAgentsReq) ProtoMessage() {}

func (x *GetReadyAgentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReadyAgentsReq.ProtoReflect.Descriptor instead.
func (*GetReadyAgentsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{96}
}

type GetReadyAgentsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadyAgents []*AgentsByAgentSidShort `protobuf:"bytes,1,rep,name=ready_agents,json=readyAgents,proto3" json:"ready_agents,omitempty"`
}

func (x *GetReadyAgentsRes) Reset() {
	*x = GetReadyAgentsRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReadyAgentsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReadyAgentsRes) ProtoMessage() {}

func (x *GetReadyAgentsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReadyAgentsRes.ProtoReflect.Descriptor instead.
func (*GetReadyAgentsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{97}
}

func (x *GetReadyAgentsRes) GetReadyAgents() []*AgentsByAgentSidShort {
	if x != nil {
		return x.ReadyAgents
	}
	return nil
}

type AgentsByAgentSidShort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentSid  int64  `protobuf:"varint,1,opt,name=agent_sid,json=agentSid,proto3" json:"agent_sid,omitempty"`
	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
}

func (x *AgentsByAgentSidShort) Reset() {
	*x = AgentsByAgentSidShort{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentsByAgentSidShort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentsByAgentSidShort) ProtoMessage() {}

func (x *AgentsByAgentSidShort) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentsByAgentSidShort.ProtoReflect.Descriptor instead.
func (*AgentsByAgentSidShort) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{98}
}

func (x *AgentsByAgentSidShort) GetAgentSid() int64 {
	if x != nil {
		return x.AgentSid
	}
	return 0
}

func (x *AgentsByAgentSidShort) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *AgentsByAgentSidShort) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

type ListAgentQueueAndOnHoldCallDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// current session id of the requesting agent.
	AgentSessionSid int64 `protobuf:"varint,3,opt,name=agent_session_sid,json=agentSessionSid,proto3" json:"agent_session_sid,omitempty"`
	// list of skills (skill names) to use for matching queued calls, only calls that require a matching subset of agent_skills will be returned.
	AgentSkills []string `protobuf:"bytes,4,rep,name=agent_skills,json=agentSkills,proto3" json:"agent_skills,omitempty"`
}

func (x *ListAgentQueueAndOnHoldCallDataReq) Reset() {
	*x = ListAgentQueueAndOnHoldCallDataReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentQueueAndOnHoldCallDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentQueueAndOnHoldCallDataReq) ProtoMessage() {}

func (x *ListAgentQueueAndOnHoldCallDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentQueueAndOnHoldCallDataReq.ProtoReflect.Descriptor instead.
func (*ListAgentQueueAndOnHoldCallDataReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{99}
}

func (x *ListAgentQueueAndOnHoldCallDataReq) GetAgentSessionSid() int64 {
	if x != nil {
		return x.AgentSessionSid
	}
	return 0
}

func (x *ListAgentQueueAndOnHoldCallDataReq) GetAgentSkills() []string {
	if x != nil {
		return x.AgentSkills
	}
	return nil
}

type ListAgentQueueAndOnHoldCallDataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// calls that were queued and have a matching subset of the agent_skills from the request.
	AgentQueueCalls []*ListAgentQueueAndOnHoldCallDataRes_CallData `protobuf:"bytes,1,rep,name=agent_queue_calls,json=agentQueueCalls,proto3" json:"agent_queue_calls,omitempty"`
	// calls that were placed on multi-hold by the requesting agent.
	OnHoldCalls []*ListAgentQueueAndOnHoldCallDataRes_CallData `protobuf:"bytes,2,rep,name=on_hold_calls,json=onHoldCalls,proto3" json:"on_hold_calls,omitempty"`
	// calls that were placed in the Hold Queue Monitor, are still on hold by the destination (hold music is being played by the other party) and have a matching subset of the agent_skills from the request.
	HqmCalls []*ListAgentQueueAndOnHoldCallDataRes_CallData `protobuf:"bytes,3,rep,name=hqm_calls,json=hqmCalls,proto3" json:"hqm_calls,omitempty"`
}

func (x *ListAgentQueueAndOnHoldCallDataRes) Reset() {
	*x = ListAgentQueueAndOnHoldCallDataRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentQueueAndOnHoldCallDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentQueueAndOnHoldCallDataRes) ProtoMessage() {}

func (x *ListAgentQueueAndOnHoldCallDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentQueueAndOnHoldCallDataRes.ProtoReflect.Descriptor instead.
func (*ListAgentQueueAndOnHoldCallDataRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{100}
}

func (x *ListAgentQueueAndOnHoldCallDataRes) GetAgentQueueCalls() []*ListAgentQueueAndOnHoldCallDataRes_CallData {
	if x != nil {
		return x.AgentQueueCalls
	}
	return nil
}

func (x *ListAgentQueueAndOnHoldCallDataRes) GetOnHoldCalls() []*ListAgentQueueAndOnHoldCallDataRes_CallData {
	if x != nil {
		return x.OnHoldCalls
	}
	return nil
}

func (x *ListAgentQueueAndOnHoldCallDataRes) GetHqmCalls() []*ListAgentQueueAndOnHoldCallDataRes_CallData {
	if x != nil {
		return x.HqmCalls
	}
	return nil
}

type AgentCallResponseDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Order int64  `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *AgentCallResponseDetails) Reset() {
	*x = AgentCallResponseDetails{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentCallResponseDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentCallResponseDetails) ProtoMessage() {}

func (x *AgentCallResponseDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentCallResponseDetails.ProtoReflect.Descriptor instead.
func (*AgentCallResponseDetails) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{101}
}

func (x *AgentCallResponseDetails) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AgentCallResponseDetails) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AgentCallResponseDetails) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

type SaveAgentCallResponsesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallSid                  int64                       `protobuf:"varint,1,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	AgentSessionSid          int64                       `protobuf:"varint,2,opt,name=agent_session_sid,json=agentSessionSid,proto3" json:"agent_session_sid,omitempty"`
	AgentCallResponseDetails []*AgentCallResponseDetails `protobuf:"bytes,3,rep,name=agent_call_response_details,json=agentCallResponseDetails,proto3" json:"agent_call_response_details,omitempty"`
	CallType                 commons.CallType_Enum       `protobuf:"varint,4,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
	// will create an agent response for the given compliance metadata (not required).
	ComplianceMetadata []*commons.SimpleKeyValue `protobuf:"bytes,5,rep,name=compliance_metadata,json=complianceMetadata,proto3" json:"compliance_metadata,omitempty"`
}

func (x *SaveAgentCallResponsesReq) Reset() {
	*x = SaveAgentCallResponsesReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveAgentCallResponsesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveAgentCallResponsesReq) ProtoMessage() {}

func (x *SaveAgentCallResponsesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveAgentCallResponsesReq.ProtoReflect.Descriptor instead.
func (*SaveAgentCallResponsesReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{102}
}

func (x *SaveAgentCallResponsesReq) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *SaveAgentCallResponsesReq) GetAgentSessionSid() int64 {
	if x != nil {
		return x.AgentSessionSid
	}
	return 0
}

func (x *SaveAgentCallResponsesReq) GetAgentCallResponseDetails() []*AgentCallResponseDetails {
	if x != nil {
		return x.AgentCallResponseDetails
	}
	return nil
}

func (x *SaveAgentCallResponsesReq) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

func (x *SaveAgentCallResponsesReq) GetComplianceMetadata() []*commons.SimpleKeyValue {
	if x != nil {
		return x.ComplianceMetadata
	}
	return nil
}

type SaveAgentCallResponsesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SaveAgentCallResponsesRes) Reset() {
	*x = SaveAgentCallResponsesRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveAgentCallResponsesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveAgentCallResponsesRes) ProtoMessage() {}

func (x *SaveAgentCallResponsesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveAgentCallResponsesRes.ProtoReflect.Descriptor instead.
func (*SaveAgentCallResponsesRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{103}
}

type AgentCallLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentCallLogSid int64                   `protobuf:"varint,1,opt,name=agent_call_log_sid,json=agentCallLogSid,proto3" json:"agent_call_log_sid,omitempty"`
	CallSid         *wrapperspb.Int64Value  `protobuf:"bytes,2,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	CallType        commons.CallType_Enum   `protobuf:"varint,3,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
	ActionDate      *timestamppb.Timestamp  `protobuf:"bytes,4,opt,name=action_date,json=actionDate,proto3" json:"action_date,omitempty"`
	ActionKey       *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=action_key,json=actionKey,proto3" json:"action_key,omitempty"`
	ActionValue     *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=action_value,json=actionValue,proto3" json:"action_value,omitempty"`
}

func (x *AgentCallLog) Reset() {
	*x = AgentCallLog{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentCallLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentCallLog) ProtoMessage() {}

func (x *AgentCallLog) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentCallLog.ProtoReflect.Descriptor instead.
func (*AgentCallLog) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{104}
}

func (x *AgentCallLog) GetAgentCallLogSid() int64 {
	if x != nil {
		return x.AgentCallLogSid
	}
	return 0
}

func (x *AgentCallLog) GetCallSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.CallSid
	}
	return nil
}

func (x *AgentCallLog) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

func (x *AgentCallLog) GetActionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ActionDate
	}
	return nil
}

func (x *AgentCallLog) GetActionKey() *wrapperspb.StringValue {
	if x != nil {
		return x.ActionKey
	}
	return nil
}

func (x *AgentCallLog) GetActionValue() *wrapperspb.StringValue {
	if x != nil {
		return x.ActionValue
	}
	return nil
}

type AgentSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentSkillSid int64                   `protobuf:"varint,1,opt,name=agent_skill_sid,json=agentSkillSid,proto3" json:"agent_skill_sid,omitempty"`
	Name          string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *AgentSkill) Reset() {
	*x = AgentSkill{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentSkill) ProtoMessage() {}

func (x *AgentSkill) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentSkill.ProtoReflect.Descriptor instead.
func (*AgentSkill) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{105}
}

func (x *AgentSkill) GetAgentSkillSid() int64 {
	if x != nil {
		return x.AgentSkillSid
	}
	return 0
}

func (x *AgentSkill) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AgentSkill) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

type ListAgentTransferOptionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAgentTransferOptionsReq) Reset() {
	*x = ListAgentTransferOptionsReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentTransferOptionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentTransferOptionsReq) ProtoMessage() {}

func (x *ListAgentTransferOptionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentTransferOptionsReq.ProtoReflect.Descriptor instead.
func (*ListAgentTransferOptionsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{106}
}

type ListAgentTransferOptionsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentInfo     []*Agent                 `protobuf:"bytes,1,rep,name=agent_info,json=agentInfo,proto3" json:"agent_info,omitempty"`
	HuntGroup     []*HuntGroup             `protobuf:"bytes,2,rep,name=hunt_group,json=huntGroup,proto3" json:"hunt_group,omitempty"`
	PbxExtensions []*PBXExtension          `protobuf:"bytes,3,rep,name=pbx_extensions,json=pbxExtensions,proto3" json:"pbx_extensions,omitempty"`
	AgentSkills   []*AgentSkill            `protobuf:"bytes,4,rep,name=agent_skills,json=agentSkills,proto3" json:"agent_skills,omitempty"`
	AgentProfile  []*AgentsByAgentSidShort `protobuf:"bytes,5,rep,name=agent_profile,json=agentProfile,proto3" json:"agent_profile,omitempty"`
}

func (x *ListAgentTransferOptionsRes) Reset() {
	*x = ListAgentTransferOptionsRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentTransferOptionsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentTransferOptionsRes) ProtoMessage() {}

func (x *ListAgentTransferOptionsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentTransferOptionsRes.ProtoReflect.Descriptor instead.
func (*ListAgentTransferOptionsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{107}
}

func (x *ListAgentTransferOptionsRes) GetAgentInfo() []*Agent {
	if x != nil {
		return x.AgentInfo
	}
	return nil
}

func (x *ListAgentTransferOptionsRes) GetHuntGroup() []*HuntGroup {
	if x != nil {
		return x.HuntGroup
	}
	return nil
}

func (x *ListAgentTransferOptionsRes) GetPbxExtensions() []*PBXExtension {
	if x != nil {
		return x.PbxExtensions
	}
	return nil
}

func (x *ListAgentTransferOptionsRes) GetAgentSkills() []*AgentSkill {
	if x != nil {
		return x.AgentSkills
	}
	return nil
}

func (x *ListAgentTransferOptionsRes) GetAgentProfile() []*AgentsByAgentSidShort {
	if x != nil {
		return x.AgentProfile
	}
	return nil
}

type GetIntercomPeerInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentSessionSid int64 `protobuf:"varint,3,opt,name=agent_session_sid,json=agentSessionSid,proto3" json:"agent_session_sid,omitempty"`
}

func (x *GetIntercomPeerInfoReq) Reset() {
	*x = GetIntercomPeerInfoReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIntercomPeerInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntercomPeerInfoReq) ProtoMessage() {}

func (x *GetIntercomPeerInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntercomPeerInfoReq.ProtoReflect.Descriptor instead.
func (*GetIntercomPeerInfoReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{108}
}

func (x *GetIntercomPeerInfoReq) GetAgentSessionSid() int64 {
	if x != nil {
		return x.AgentSessionSid
	}
	return 0
}

type GetIntercomPeerInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerSid   int64  `protobuf:"varint,1,opt,name=peer_sid,json=peerSid,proto3" json:"peer_sid,omitempty"`
	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
}

func (x *GetIntercomPeerInfoRes) Reset() {
	*x = GetIntercomPeerInfoRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIntercomPeerInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntercomPeerInfoRes) ProtoMessage() {}

func (x *GetIntercomPeerInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntercomPeerInfoRes.ProtoReflect.Descriptor instead.
func (*GetIntercomPeerInfoRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{109}
}

func (x *GetIntercomPeerInfoRes) GetPeerSid() int64 {
	if x != nil {
		return x.PeerSid
	}
	return 0
}

func (x *GetIntercomPeerInfoRes) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *GetIntercomPeerInfoRes) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

type ListOrgResponseEvaluatorsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListOrgResponseEvaluatorsReq) Reset() {
	*x = ListOrgResponseEvaluatorsReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOrgResponseEvaluatorsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrgResponseEvaluatorsReq) ProtoMessage() {}

func (x *ListOrgResponseEvaluatorsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrgResponseEvaluatorsReq.ProtoReflect.Descriptor instead.
func (*ListOrgResponseEvaluatorsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{110}
}

type ListOrgResponseEvaluatorsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Evaluators []*ResponseEvaluator `protobuf:"bytes,1,rep,name=evaluators,proto3" json:"evaluators,omitempty"`
}

func (x *ListOrgResponseEvaluatorsRes) Reset() {
	*x = ListOrgResponseEvaluatorsRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOrgResponseEvaluatorsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrgResponseEvaluatorsRes) ProtoMessage() {}

func (x *ListOrgResponseEvaluatorsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrgResponseEvaluatorsRes.ProtoReflect.Descriptor instead.
func (*ListOrgResponseEvaluatorsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{111}
}

func (x *ListOrgResponseEvaluatorsRes) GetEvaluators() []*ResponseEvaluator {
	if x != nil {
		return x.Evaluators
	}
	return nil
}

type ResponseEvaluator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description          string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	RegularExpression    string `protobuf:"bytes,3,opt,name=regular_expression,json=regularExpression,proto3" json:"regular_expression,omitempty"`
	XmlClientPropertySid int64  `protobuf:"varint,4,opt,name=xml_client_property_sid,json=xmlClientPropertySid,proto3" json:"xml_client_property_sid,omitempty"`
}

func (x *ResponseEvaluator) Reset() {
	*x = ResponseEvaluator{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseEvaluator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseEvaluator) ProtoMessage() {}

func (x *ResponseEvaluator) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseEvaluator.ProtoReflect.Descriptor instead.
func (*ResponseEvaluator) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{112}
}

func (x *ResponseEvaluator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResponseEvaluator) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ResponseEvaluator) GetRegularExpression() string {
	if x != nil {
		return x.RegularExpression
	}
	return ""
}

func (x *ResponseEvaluator) GetXmlClientPropertySid() int64 {
	if x != nil {
		return x.XmlClientPropertySid
	}
	return 0
}

type GetQueueConfigurationOptionsArrayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalizedAccountDefaultString string `protobuf:"bytes,2,opt,name=localized_account_default_string,json=localizedAccountDefaultString,proto3" json:"localized_account_default_string,omitempty"`
}

func (x *GetQueueConfigurationOptionsArrayReq) Reset() {
	*x = GetQueueConfigurationOptionsArrayReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQueueConfigurationOptionsArrayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueueConfigurationOptionsArrayReq) ProtoMessage() {}

func (x *GetQueueConfigurationOptionsArrayReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueueConfigurationOptionsArrayReq.ProtoReflect.Descriptor instead.
func (*GetQueueConfigurationOptionsArrayReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{113}
}

func (x *GetQueueConfigurationOptionsArrayReq) GetLocalizedAccountDefaultString() string {
	if x != nil {
		return x.LocalizedAccountDefaultString
	}
	return ""
}

type GetQueueConfigurationOptionsArrayRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filenames []string `protobuf:"bytes,1,rep,name=filenames,proto3" json:"filenames,omitempty"`
}

func (x *GetQueueConfigurationOptionsArrayRes) Reset() {
	*x = GetQueueConfigurationOptionsArrayRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQueueConfigurationOptionsArrayRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueueConfigurationOptionsArrayRes) ProtoMessage() {}

func (x *GetQueueConfigurationOptionsArrayRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueueConfigurationOptionsArrayRes.ProtoReflect.Descriptor instead.
func (*GetQueueConfigurationOptionsArrayRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{114}
}

func (x *GetQueueConfigurationOptionsArrayRes) GetFilenames() []string {
	if x != nil {
		return x.Filenames
	}
	return nil
}

type AgentCallActivityDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentSid          int64                      `protobuf:"varint,1,opt,name=agent_sid,json=agentSid,proto3" json:"agent_sid,omitempty"`
	AgentName         *wrapperspb.StringValue    `protobuf:"bytes,2,opt,name=agent_name,json=agentName,proto3" json:"agent_name,omitempty"`
	AgentSessionSid   *wrapperspb.Int64Value     `protobuf:"bytes,3,opt,name=agent_session_sid,json=agentSessionSid,proto3" json:"agent_session_sid,omitempty"`
	HuntGroupSid      *wrapperspb.Int64Value     `protobuf:"bytes,4,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	HuntGroupName     *wrapperspb.StringValue    `protobuf:"bytes,5,opt,name=hunt_group_name,json=huntGroupName,proto3" json:"hunt_group_name,omitempty"`
	AgentCallCost     *wrapperspb.DoubleValue    `protobuf:"bytes,6,opt,name=agent_call_cost,json=agentCallCost,proto3" json:"agent_call_cost,omitempty"`
	AgentWaitDuration *wrapperspb.Int64Value     `protobuf:"bytes,7,opt,name=agent_wait_duration,json=agentWaitDuration,proto3" json:"agent_wait_duration,omitempty"`
	CallWaitDuration  *wrapperspb.Int64Value     `protobuf:"bytes,8,opt,name=call_wait_duration,json=callWaitDuration,proto3" json:"call_wait_duration,omitempty"`
	HoldDuration      *wrapperspb.Int64Value     `protobuf:"bytes,9,opt,name=hold_duration,json=holdDuration,proto3" json:"hold_duration,omitempty"`
	ManualDuration    *wrapperspb.Int64Value     `protobuf:"bytes,10,opt,name=manual_duration,json=manualDuration,proto3" json:"manual_duration,omitempty"`
	PauseDuration     *wrapperspb.Int64Value     `protobuf:"bytes,11,opt,name=pause_duration,json=pauseDuration,proto3" json:"pause_duration,omitempty"`
	PreviewDuration   *wrapperspb.Int64Value     `protobuf:"bytes,12,opt,name=preview_duration,json=previewDuration,proto3" json:"preview_duration,omitempty"`
	SuspendedDuration *wrapperspb.Int64Value     `protobuf:"bytes,13,opt,name=suspended_duration,json=suspendedDuration,proto3" json:"suspended_duration,omitempty"`
	TalkDuration      *wrapperspb.Int64Value     `protobuf:"bytes,14,opt,name=talk_duration,json=talkDuration,proto3" json:"talk_duration,omitempty"`
	TransferDuration  *wrapperspb.Int64Value     `protobuf:"bytes,15,opt,name=transfer_duration,json=transferDuration,proto3" json:"transfer_duration,omitempty"`
	WrapUpDuration    *wrapperspb.Int64Value     `protobuf:"bytes,16,opt,name=wrap_up_duration,json=wrapUpDuration,proto3" json:"wrap_up_duration,omitempty"`
	AgentCallSid      *wrapperspb.Int64Value     `protobuf:"bytes,17,opt,name=agent_call_sid,json=agentCallSid,proto3" json:"agent_call_sid,omitempty"`
	HuntGroupType     commons.HuntGroupType_Enum `protobuf:"varint,18,opt,name=hunt_group_type,json=huntGroupType,proto3,enum=api.commons.HuntGroupType_Enum" json:"hunt_group_type,omitempty"`
}

func (x *AgentCallActivityDetails) Reset() {
	*x = AgentCallActivityDetails{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentCallActivityDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentCallActivityDetails) ProtoMessage() {}

func (x *AgentCallActivityDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentCallActivityDetails.ProtoReflect.Descriptor instead.
func (*AgentCallActivityDetails) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{115}
}

func (x *AgentCallActivityDetails) GetAgentSid() int64 {
	if x != nil {
		return x.AgentSid
	}
	return 0
}

func (x *AgentCallActivityDetails) GetAgentName() *wrapperspb.StringValue {
	if x != nil {
		return x.AgentName
	}
	return nil
}

func (x *AgentCallActivityDetails) GetAgentSessionSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.AgentSessionSid
	}
	return nil
}

func (x *AgentCallActivityDetails) GetHuntGroupSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.HuntGroupSid
	}
	return nil
}

func (x *AgentCallActivityDetails) GetHuntGroupName() *wrapperspb.StringValue {
	if x != nil {
		return x.HuntGroupName
	}
	return nil
}

func (x *AgentCallActivityDetails) GetAgentCallCost() *wrapperspb.DoubleValue {
	if x != nil {
		return x.AgentCallCost
	}
	return nil
}

func (x *AgentCallActivityDetails) GetAgentWaitDuration() *wrapperspb.Int64Value {
	if x != nil {
		return x.AgentWaitDuration
	}
	return nil
}

func (x *AgentCallActivityDetails) GetCallWaitDuration() *wrapperspb.Int64Value {
	if x != nil {
		return x.CallWaitDuration
	}
	return nil
}

func (x *AgentCallActivityDetails) GetHoldDuration() *wrapperspb.Int64Value {
	if x != nil {
		return x.HoldDuration
	}
	return nil
}

func (x *AgentCallActivityDetails) GetManualDuration() *wrapperspb.Int64Value {
	if x != nil {
		return x.ManualDuration
	}
	return nil
}

func (x *AgentCallActivityDetails) GetPauseDuration() *wrapperspb.Int64Value {
	if x != nil {
		return x.PauseDuration
	}
	return nil
}

func (x *AgentCallActivityDetails) GetPreviewDuration() *wrapperspb.Int64Value {
	if x != nil {
		return x.PreviewDuration
	}
	return nil
}

func (x *AgentCallActivityDetails) GetSuspendedDuration() *wrapperspb.Int64Value {
	if x != nil {
		return x.SuspendedDuration
	}
	return nil
}

func (x *AgentCallActivityDetails) GetTalkDuration() *wrapperspb.Int64Value {
	if x != nil {
		return x.TalkDuration
	}
	return nil
}

func (x *AgentCallActivityDetails) GetTransferDuration() *wrapperspb.Int64Value {
	if x != nil {
		return x.TransferDuration
	}
	return nil
}

func (x *AgentCallActivityDetails) GetWrapUpDuration() *wrapperspb.Int64Value {
	if x != nil {
		return x.WrapUpDuration
	}
	return nil
}

func (x *AgentCallActivityDetails) GetAgentCallSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.AgentCallSid
	}
	return nil
}

func (x *AgentCallActivityDetails) GetHuntGroupType() commons.HuntGroupType_Enum {
	if x != nil {
		return x.HuntGroupType
	}
	return commons.HuntGroupType_Enum(0)
}

type GetConditionalDNCLRulesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetConditionalDNCLRulesReq) Reset() {
	*x = GetConditionalDNCLRulesReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConditionalDNCLRulesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConditionalDNCLRulesReq) ProtoMessage() {}

func (x *GetConditionalDNCLRulesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConditionalDNCLRulesReq.ProtoReflect.Descriptor instead.
func (*GetConditionalDNCLRulesReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{116}
}

type GetConditionalDNCLRulesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DispositionRules []*AgentDispositionConditionalDncl_DispositionRulesTable `protobuf:"bytes,1,rep,name=disposition_rules,json=dispositionRules,proto3" json:"disposition_rules,omitempty"`
}

func (x *GetConditionalDNCLRulesRes) Reset() {
	*x = GetConditionalDNCLRulesRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConditionalDNCLRulesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConditionalDNCLRulesRes) ProtoMessage() {}

func (x *GetConditionalDNCLRulesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConditionalDNCLRulesRes.ProtoReflect.Descriptor instead.
func (*GetConditionalDNCLRulesRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{117}
}

func (x *GetConditionalDNCLRulesRes) GetDispositionRules() []*AgentDispositionConditionalDncl_DispositionRulesTable {
	if x != nil {
		return x.DispositionRules
	}
	return nil
}

type ManualDialStartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SimpleCallData   *commons.SimpleCallData `protobuf:"bytes,1,opt,name=simple_call_data,json=simpleCallData,proto3" json:"simple_call_data,omitempty"`
	HuntGroupSid     int64                   `protobuf:"varint,6,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	AgentSessionSid  int64                   `protobuf:"varint,7,opt,name=agent_session_sid,json=agentSessionSid,proto3" json:"agent_session_sid,omitempty"`
	BucketId         int64                   `protobuf:"varint,8,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	BucketRegionData string                  `protobuf:"bytes,9,opt,name=bucket_region_data,json=bucketRegionData,proto3" json:"bucket_region_data,omitempty"`
}

func (x *ManualDialStartReq) Reset() {
	*x = ManualDialStartReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManualDialStartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualDialStartReq) ProtoMessage() {}

func (x *ManualDialStartReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualDialStartReq.ProtoReflect.Descriptor instead.
func (*ManualDialStartReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{118}
}

func (x *ManualDialStartReq) GetSimpleCallData() *commons.SimpleCallData {
	if x != nil {
		return x.SimpleCallData
	}
	return nil
}

func (x *ManualDialStartReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *ManualDialStartReq) GetAgentSessionSid() int64 {
	if x != nil {
		return x.AgentSessionSid
	}
	return 0
}

func (x *ManualDialStartReq) GetBucketId() int64 {
	if x != nil {
		return x.BucketId
	}
	return 0
}

func (x *ManualDialStartReq) GetBucketRegionData() string {
	if x != nil {
		return x.BucketRegionData
	}
	return ""
}

type ManualDialStartRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ManualDialStartRes) Reset() {
	*x = ManualDialStartRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManualDialStartRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualDialStartRes) ProtoMessage() {}

func (x *ManualDialStartRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualDialStartRes.ProtoReflect.Descriptor instead.
func (*ManualDialStartRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{119}
}

type ListExtendedCallHistoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchType     commons.CallHistorySearchType_Enum  `protobuf:"varint,4,opt,name=search_type,json=searchType,proto3,enum=api.commons.CallHistorySearchType_Enum" json:"search_type,omitempty"`
	CallTypes      []commons.CallType_Enum             `protobuf:"varint,5,rep,packed,name=call_types,json=callTypes,proto3,enum=api.commons.CallType_Enum" json:"call_types,omitempty"`
	CustomerNumber string                              `protobuf:"bytes,6,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	SearchScope    commons.CallHistorySearchScope_Enum `protobuf:"varint,7,opt,name=search_scope,json=searchScope,proto3,enum=api.commons.CallHistorySearchScope_Enum" json:"search_scope,omitempty"`
	CallSid        int64                               `protobuf:"varint,8,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	CallerId       string                              `protobuf:"bytes,9,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
}

func (x *ListExtendedCallHistoryReq) Reset() {
	*x = ListExtendedCallHistoryReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListExtendedCallHistoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExtendedCallHistoryReq) ProtoMessage() {}

func (x *ListExtendedCallHistoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExtendedCallHistoryReq.ProtoReflect.Descriptor instead.
func (*ListExtendedCallHistoryReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{120}
}

func (x *ListExtendedCallHistoryReq) GetSearchType() commons.CallHistorySearchType_Enum {
	if x != nil {
		return x.SearchType
	}
	return commons.CallHistorySearchType_Enum(0)
}

func (x *ListExtendedCallHistoryReq) GetCallTypes() []commons.CallType_Enum {
	if x != nil {
		return x.CallTypes
	}
	return nil
}

func (x *ListExtendedCallHistoryReq) GetCustomerNumber() string {
	if x != nil {
		return x.CustomerNumber
	}
	return ""
}

func (x *ListExtendedCallHistoryReq) GetSearchScope() commons.CallHistorySearchScope_Enum {
	if x != nil {
		return x.SearchScope
	}
	return commons.CallHistorySearchScope_Enum(0)
}

func (x *ListExtendedCallHistoryReq) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *ListExtendedCallHistoryReq) GetCallerId() string {
	if x != nil {
		return x.CallerId
	}
	return ""
}

// The response for ListExtendedCallHistory
type ListExtendedCallHistoryRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The groupSid
	GroupSid int64 `protobuf:"varint,1,opt,name=group_sid,json=groupSid,proto3" json:"group_sid,omitempty"`
	// The callType, based on the CallType enum.
	CallType commons.CallType_Enum `protobuf:"varint,2,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
	// The callSid
	CallSid int64 `protobuf:"varint,3,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	// The customerNumber
	CustomerNumber string `protobuf:"bytes,4,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	// The phone number
	Phone string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	// The date
	Date string `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`
	// The result
	Result int32 `protobuf:"varint,7,opt,name=result,proto3" json:"result,omitempty"`
	// The length of the call
	Length int32 `protobuf:"varint,8,opt,name=length,proto3" json:"length,omitempty"`
	// The cost of the call
	Cost *wrapperspb.DoubleValue `protobuf:"bytes,9,opt,name=cost,proto3" json:"cost,omitempty"`
	// The keys
	Keys *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=keys,proto3" json:"keys,omitempty"`
	// The callDetails
	CallDetails *GetCallDetailsRes `protobuf:"bytes,11,opt,name=call_details,json=callDetails,proto3" json:"call_details,omitempty"`
	// The linkbackLength
	LinkbackLength int32 `protobuf:"varint,12,opt,name=linkback_length,json=linkbackLength,proto3" json:"linkback_length,omitempty"`
	// If the call is recorded
	IsCallRecorded bool `protobuf:"varint,13,opt,name=is_call_recorded,json=isCallRecorded,proto3" json:"is_call_recorded,omitempty"`
	// The filename of the recording
	RecordingFilename string `protobuf:"bytes,14,opt,name=recording_filename,json=recordingFilename,proto3" json:"recording_filename,omitempty"`
	// The startDate is the chosen Timescale value (1 day, 2 days, etc.) as a time stamp based on the current date.
	// For example, if today is 05/13/22 and the Timescale value is 7 days, it will be the time stamp value of 05/06/22.
	StartDate *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// The country sid on the group, which is for the destination phone number
	CountrySid int64 `protobuf:"varint,16,opt,name=country_sid,json=countrySid,proto3" json:"country_sid,omitempty"`
}

func (x *ListExtendedCallHistoryRes) Reset() {
	*x = ListExtendedCallHistoryRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListExtendedCallHistoryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExtendedCallHistoryRes) ProtoMessage() {}

func (x *ListExtendedCallHistoryRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExtendedCallHistoryRes.ProtoReflect.Descriptor instead.
func (*ListExtendedCallHistoryRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{121}
}

func (x *ListExtendedCallHistoryRes) GetGroupSid() int64 {
	if x != nil {
		return x.GroupSid
	}
	return 0
}

func (x *ListExtendedCallHistoryRes) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

func (x *ListExtendedCallHistoryRes) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *ListExtendedCallHistoryRes) GetCustomerNumber() string {
	if x != nil {
		return x.CustomerNumber
	}
	return ""
}

func (x *ListExtendedCallHistoryRes) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *ListExtendedCallHistoryRes) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ListExtendedCallHistoryRes) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *ListExtendedCallHistoryRes) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *ListExtendedCallHistoryRes) GetCost() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *ListExtendedCallHistoryRes) GetKeys() *wrapperspb.StringValue {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *ListExtendedCallHistoryRes) GetCallDetails() *GetCallDetailsRes {
	if x != nil {
		return x.CallDetails
	}
	return nil
}

func (x *ListExtendedCallHistoryRes) GetLinkbackLength() int32 {
	if x != nil {
		return x.LinkbackLength
	}
	return 0
}

func (x *ListExtendedCallHistoryRes) GetIsCallRecorded() bool {
	if x != nil {
		return x.IsCallRecorded
	}
	return false
}

func (x *ListExtendedCallHistoryRes) GetRecordingFilename() string {
	if x != nil {
		return x.RecordingFilename
	}
	return ""
}

func (x *ListExtendedCallHistoryRes) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ListExtendedCallHistoryRes) GetCountrySid() int64 {
	if x != nil {
		return x.CountrySid
	}
	return 0
}

// Request message for the ListWhiteListPhoneBooks RPC
type ListWhiteListPhoneBooksReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Entry type will be 'Hunt Group' if this field is set.
	// Otherwise the entry type will be 'Client'.
	HuntGroupSid int64 `protobuf:"varint,2,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	// Whether to include the phone number types
	IncludeNullPhoneNumberTypes bool `protobuf:"varint,4,opt,name=include_null_phone_number_types,json=includeNullPhoneNumberTypes,proto3" json:"include_null_phone_number_types,omitempty"`
	// The list of ways to order phone books.
	OrderBys []commons.ListPhoneBookOrderBy_Enum `protobuf:"varint,5,rep,packed,name=order_bys,json=orderBys,proto3,enum=api.commons.ListPhoneBookOrderBy_Enum" json:"order_bys,omitempty"`
}

func (x *ListWhiteListPhoneBooksReq) Reset() {
	*x = ListWhiteListPhoneBooksReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWhiteListPhoneBooksReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWhiteListPhoneBooksReq) ProtoMessage() {}

func (x *ListWhiteListPhoneBooksReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWhiteListPhoneBooksReq.ProtoReflect.Descriptor instead.
func (*ListWhiteListPhoneBooksReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{122}
}

func (x *ListWhiteListPhoneBooksReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *ListWhiteListPhoneBooksReq) GetIncludeNullPhoneNumberTypes() bool {
	if x != nil {
		return x.IncludeNullPhoneNumberTypes
	}
	return false
}

func (x *ListWhiteListPhoneBooksReq) GetOrderBys() []commons.ListPhoneBookOrderBy_Enum {
	if x != nil {
		return x.OrderBys
	}
	return nil
}

// Response message for the ListWhiteListPhoneBooks RPC
type ListWhiteListPhoneBooksRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of phone books
	WhiteListPhoneBooks []*PhoneBook `protobuf:"bytes,1,rep,name=white_list_phone_books,json=whiteListPhoneBooks,proto3" json:"white_list_phone_books,omitempty"`
}

func (x *ListWhiteListPhoneBooksRes) Reset() {
	*x = ListWhiteListPhoneBooksRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWhiteListPhoneBooksRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWhiteListPhoneBooksRes) ProtoMessage() {}

func (x *ListWhiteListPhoneBooksRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWhiteListPhoneBooksRes.ProtoReflect.Descriptor instead.
func (*ListWhiteListPhoneBooksRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{123}
}

func (x *ListWhiteListPhoneBooksRes) GetWhiteListPhoneBooks() []*PhoneBook {
	if x != nil {
		return x.WhiteListPhoneBooks
	}
	return nil
}

type UpdateAgentCallResponseValueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseId int64  `protobuf:"varint,1,opt,name=response_id,json=responseId,proto3" json:"response_id,omitempty"`
	Value      string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UpdateAgentCallResponseValueReq) Reset() {
	*x = UpdateAgentCallResponseValueReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAgentCallResponseValueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentCallResponseValueReq) ProtoMessage() {}

func (x *UpdateAgentCallResponseValueReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentCallResponseValueReq.ProtoReflect.Descriptor instead.
func (*UpdateAgentCallResponseValueReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{124}
}

func (x *UpdateAgentCallResponseValueReq) GetResponseId() int64 {
	if x != nil {
		return x.ResponseId
	}
	return 0
}

func (x *UpdateAgentCallResponseValueReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type UpdateAgentCallResponseValueRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAgentCallResponseValueRes) Reset() {
	*x = UpdateAgentCallResponseValueRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAgentCallResponseValueRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentCallResponseValueRes) ProtoMessage() {}

func (x *UpdateAgentCallResponseValueRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentCallResponseValueRes.ProtoReflect.Descriptor instead.
func (*UpdateAgentCallResponseValueRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{125}
}

type PlacePreviewDialCallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Call            *commons.SimpleCallData `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"`
	HuntGroupSid    int64                   `protobuf:"varint,4,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	AgentSessionSid int64                   `protobuf:"varint,5,opt,name=agent_session_sid,json=agentSessionSid,proto3" json:"agent_session_sid,omitempty"`
}

func (x *PlacePreviewDialCallReq) Reset() {
	*x = PlacePreviewDialCallReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlacePreviewDialCallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacePreviewDialCallReq) ProtoMessage() {}

func (x *PlacePreviewDialCallReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacePreviewDialCallReq.ProtoReflect.Descriptor instead.
func (*PlacePreviewDialCallReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{126}
}

func (x *PlacePreviewDialCallReq) GetCall() *commons.SimpleCallData {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *PlacePreviewDialCallReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *PlacePreviewDialCallReq) GetAgentSessionSid() int64 {
	if x != nil {
		return x.AgentSessionSid
	}
	return 0
}

type PlacePreviewDialCallRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlacePreviewDialCallRes) Reset() {
	*x = PlacePreviewDialCallRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlacePreviewDialCallRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacePreviewDialCallRes) ProtoMessage() {}

func (x *PlacePreviewDialCallRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacePreviewDialCallRes.ProtoReflect.Descriptor instead.
func (*PlacePreviewDialCallRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{127}
}

type CancelPreviewDialCallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Call                *commons.SimpleCallData `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"`
	AgentSessionSid     int64                   `protobuf:"varint,2,opt,name=agent_session_sid,json=agentSessionSid,proto3" json:"agent_session_sid,omitempty"`
	ReportScrubOverride bool                    `protobuf:"varint,3,opt,name=report_scrub_override,json=reportScrubOverride,proto3" json:"report_scrub_override,omitempty"`
}

func (x *CancelPreviewDialCallReq) Reset() {
	*x = CancelPreviewDialCallReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelPreviewDialCallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelPreviewDialCallReq) ProtoMessage() {}

func (x *CancelPreviewDialCallReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelPreviewDialCallReq.ProtoReflect.Descriptor instead.
func (*CancelPreviewDialCallReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{128}
}

func (x *CancelPreviewDialCallReq) GetCall() *commons.SimpleCallData {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *CancelPreviewDialCallReq) GetAgentSessionSid() int64 {
	if x != nil {
		return x.AgentSessionSid
	}
	return 0
}

func (x *CancelPreviewDialCallReq) GetReportScrubOverride() bool {
	if x != nil {
		return x.ReportScrubOverride
	}
	return false
}

type CancelPreviewDialCallRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelPreviewDialCallRes) Reset() {
	*x = CancelPreviewDialCallRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelPreviewDialCallRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelPreviewDialCallRes) ProtoMessage() {}

func (x *CancelPreviewDialCallRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelPreviewDialCallRes.ProtoReflect.Descriptor instead.
func (*CancelPreviewDialCallRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{129}
}

// The response when a recording is downloaded.
type DownloadRecordingRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The url of the recording
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The filename of the recording
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *DownloadRecordingRes) Reset() {
	*x = DownloadRecordingRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadRecordingRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadRecordingRes) ProtoMessage() {}

func (x *DownloadRecordingRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadRecordingRes.ProtoReflect.Descriptor instead.
func (*DownloadRecordingRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{130}
}

func (x *DownloadRecordingRes) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DownloadRecordingRes) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type DownloadCallRecordingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallSid  int64                 `protobuf:"varint,2,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	CallType commons.CallType_Enum `protobuf:"varint,3,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
}

func (x *DownloadCallRecordingReq) Reset() {
	*x = DownloadCallRecordingReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadCallRecordingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadCallRecordingReq) ProtoMessage() {}

func (x *DownloadCallRecordingReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadCallRecordingReq.ProtoReflect.Descriptor instead.
func (*DownloadCallRecordingReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{131}
}

func (x *DownloadCallRecordingReq) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *DownloadCallRecordingReq) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

// The request when multiple call recordings are downloaded.
type DownloadCallRecordingsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CallParams, repeated for each call
	CallParams []*DownloadCallRecordingsReq_CallParams `protobuf:"bytes,2,rep,name=call_params,json=callParams,proto3" json:"call_params,omitempty"`
	// The htmlFileName (Name of the file that shows the html of a call recording and gets downloaded with every recording).
	HtmlFileName string `protobuf:"bytes,3,opt,name=html_file_name,json=htmlFileName,proto3" json:"html_file_name,omitempty"`
	// The content that goes inside the htmlFileName file.
	HtmlFileContent string `protobuf:"bytes,4,opt,name=html_file_content,json=htmlFileContent,proto3" json:"html_file_content,omitempty"`
	// GroupSid is an int if there is only one call recording in the zip file. Otherwise it is nil.
	GroupSid *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=group_sid,json=groupSid,proto3" json:"group_sid,omitempty"`
	// StartDate is the chosen Timescale value (1 day, 2 days, etc.) as a time stamp based on the current date.
	// For example, if today is 05/13/22 and the Timescale value is 7 days, it will be the time stamp value of 05/06/22.
	StartDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
}

func (x *DownloadCallRecordingsReq) Reset() {
	*x = DownloadCallRecordingsReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadCallRecordingsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadCallRecordingsReq) ProtoMessage() {}

func (x *DownloadCallRecordingsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadCallRecordingsReq.ProtoReflect.Descriptor instead.
func (*DownloadCallRecordingsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{132}
}

func (x *DownloadCallRecordingsReq) GetCallParams() []*DownloadCallRecordingsReq_CallParams {
	if x != nil {
		return x.CallParams
	}
	return nil
}

func (x *DownloadCallRecordingsReq) GetHtmlFileName() string {
	if x != nil {
		return x.HtmlFileName
	}
	return ""
}

func (x *DownloadCallRecordingsReq) GetHtmlFileContent() string {
	if x != nil {
		return x.HtmlFileContent
	}
	return ""
}

func (x *DownloadCallRecordingsReq) GetGroupSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.GroupSid
	}
	return nil
}

func (x *DownloadCallRecordingsReq) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

type AgentDispositionConditionalDncl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  string                                                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description           string                                                   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CountrySid            int64                                                    `protobuf:"varint,3,opt,name=country_sid,json=countrySid,proto3" json:"country_sid,omitempty"`
	DispositionRulesTable []*AgentDispositionConditionalDncl_DispositionRulesTable `protobuf:"bytes,4,rep,name=disposition_rules_table,json=dispositionRulesTable,proto3" json:"disposition_rules_table,omitempty"`
}

func (x *AgentDispositionConditionalDncl) Reset() {
	*x = AgentDispositionConditionalDncl{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentDispositionConditionalDncl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentDispositionConditionalDncl) ProtoMessage() {}

func (x *AgentDispositionConditionalDncl) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentDispositionConditionalDncl.ProtoReflect.Descriptor instead.
func (*AgentDispositionConditionalDncl) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{133}
}

func (x *AgentDispositionConditionalDncl) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AgentDispositionConditionalDncl) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AgentDispositionConditionalDncl) GetCountrySid() int64 {
	if x != nil {
		return x.CountrySid
	}
	return 0
}

func (x *AgentDispositionConditionalDncl) GetDispositionRulesTable() []*AgentDispositionConditionalDncl_DispositionRulesTable {
	if x != nil {
		return x.DispositionRulesTable
	}
	return nil
}

type UpdateTaskStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskSid int64              `protobuf:"varint,2,opt,name=task_sid,json=taskSid,proto3" json:"task_sid,omitempty"`
	Status  commons.TaskStatus `protobuf:"varint,3,opt,name=status,proto3,enum=api.commons.TaskStatus" json:"status,omitempty"`
}

func (x *UpdateTaskStatusReq) Reset() {
	*x = UpdateTaskStatusReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaskStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskStatusReq) ProtoMessage() {}

func (x *UpdateTaskStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateTaskStatusReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{134}
}

func (x *UpdateTaskStatusReq) GetTaskSid() int64 {
	if x != nil {
		return x.TaskSid
	}
	return 0
}

func (x *UpdateTaskStatusReq) GetStatus() commons.TaskStatus {
	if x != nil {
		return x.Status
	}
	return commons.TaskStatus(0)
}

type Nil struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Nil) Reset() {
	*x = Nil{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Nil) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nil) ProtoMessage() {}

func (x *Nil) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nil.ProtoReflect.Descriptor instead.
func (*Nil) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{135}
}

// ListCallbackRoutingAgentsReq requires a hunt_group_sid to filter agents by.
type ListCallbackRoutingAgentsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HuntGroupSid to filter agents by
	HuntGroupSid int64 `protobuf:"varint,2,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
}

func (x *ListCallbackRoutingAgentsReq) Reset() {
	*x = ListCallbackRoutingAgentsReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCallbackRoutingAgentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCallbackRoutingAgentsReq) ProtoMessage() {}

func (x *ListCallbackRoutingAgentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCallbackRoutingAgentsReq.ProtoReflect.Descriptor instead.
func (*ListCallbackRoutingAgentsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{136}
}

func (x *ListCallbackRoutingAgentsReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

// ListCallbackRoutingAgentsRes returns a list of agents that are allowed to do callbacks.
type ListCallbackRoutingAgentsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of agents that are allowed to do callbacks
	AgentShort []*AgentsByAgentSidShort `protobuf:"bytes,1,rep,name=agent_short,json=agentShort,proto3" json:"agent_short,omitempty"`
}

func (x *ListCallbackRoutingAgentsRes) Reset() {
	*x = ListCallbackRoutingAgentsRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCallbackRoutingAgentsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCallbackRoutingAgentsRes) ProtoMessage() {}

func (x *ListCallbackRoutingAgentsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCallbackRoutingAgentsRes.ProtoReflect.Descriptor instead.
func (*ListCallbackRoutingAgentsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{137}
}

func (x *ListCallbackRoutingAgentsRes) GetAgentShort() []*AgentsByAgentSidShort {
	if x != nil {
		return x.AgentShort
	}
	return nil
}

type ListCallbackRoutingSkillsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HuntGroupSid int64 `protobuf:"varint,2,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
}

func (x *ListCallbackRoutingSkillsReq) Reset() {
	*x = ListCallbackRoutingSkillsReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCallbackRoutingSkillsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCallbackRoutingSkillsReq) ProtoMessage() {}

func (x *ListCallbackRoutingSkillsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCallbackRoutingSkillsReq.ProtoReflect.Descriptor instead.
func (*ListCallbackRoutingSkillsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{138}
}

func (x *ListCallbackRoutingSkillsReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

type ListCallbackRoutingSkillsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentSkills []*AgentSkill `protobuf:"bytes,1,rep,name=agent_skills,json=agentSkills,proto3" json:"agent_skills,omitempty"`
}

func (x *ListCallbackRoutingSkillsRes) Reset() {
	*x = ListCallbackRoutingSkillsRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCallbackRoutingSkillsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCallbackRoutingSkillsRes) ProtoMessage() {}

func (x *ListCallbackRoutingSkillsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCallbackRoutingSkillsRes.ProtoReflect.Descriptor instead.
func (*ListCallbackRoutingSkillsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{139}
}

func (x *ListCallbackRoutingSkillsRes) GetAgentSkills() []*AgentSkill {
	if x != nil {
		return x.AgentSkills
	}
	return nil
}

type HandleRecordingDelayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HuntGroupSid    int64 `protobuf:"varint,3,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	AgentSessionSid int64 `protobuf:"varint,4,opt,name=agent_session_sid,json=agentSessionSid,proto3" json:"agent_session_sid,omitempty"`
}

func (x *HandleRecordingDelayReq) Reset() {
	*x = HandleRecordingDelayReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandleRecordingDelayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleRecordingDelayReq) ProtoMessage() {}

func (x *HandleRecordingDelayReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleRecordingDelayReq.ProtoReflect.Descriptor instead.
func (*HandleRecordingDelayReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{140}
}

func (x *HandleRecordingDelayReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *HandleRecordingDelayReq) GetAgentSessionSid() int64 {
	if x != nil {
		return x.AgentSessionSid
	}
	return 0
}

type HandleRecordingDelayRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HandleRecordingDelayRes) Reset() {
	*x = HandleRecordingDelayRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandleRecordingDelayRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleRecordingDelayRes) ProtoMessage() {}

func (x *HandleRecordingDelayRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleRecordingDelayRes.ProtoReflect.Descriptor instead.
func (*HandleRecordingDelayRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{141}
}

type ScheduleCallBackSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowCallbackScheduling             bool   `protobuf:"varint,1,opt,name=allow_callback_scheduling,json=allowCallbackScheduling,proto3" json:"allow_callback_scheduling,omitempty"`
	AllowScheduledCallbackCalling       bool   `protobuf:"varint,2,opt,name=allow_scheduled_callback_calling,json=allowScheduledCallbackCalling,proto3" json:"allow_scheduled_callback_calling,omitempty"`
	AllowAutomaticCallbackRetrievalMode bool   `protobuf:"varint,3,opt,name=allow_automatic_callback_retrieval_mode,json=allowAutomaticCallbackRetrievalMode,proto3" json:"allow_automatic_callback_retrieval_mode,omitempty"`
	AllowDefaultCallbackRouting         bool   `protobuf:"varint,4,opt,name=allow_default_callback_routing,json=allowDefaultCallbackRouting,proto3" json:"allow_default_callback_routing,omitempty"`
	CallbacksRetrievalModeSettings      string `protobuf:"bytes,6,opt,name=callbacks_retrieval_mode_settings,json=callbacksRetrievalModeSettings,proto3" json:"callbacks_retrieval_mode_settings,omitempty"`
	DefaultCallbackRoutingSettings      string `protobuf:"bytes,8,opt,name=default_callback_routing_settings,json=defaultCallbackRoutingSettings,proto3" json:"default_callback_routing_settings,omitempty"`
	CallbacksServiceId                  string `protobuf:"bytes,9,opt,name=callbacks_service_id,json=callbacksServiceId,proto3" json:"callbacks_service_id,omitempty"`
	HasCustomCallerId                   bool   `protobuf:"varint,10,opt,name=has_custom_caller_id,json=hasCustomCallerId,proto3" json:"has_custom_caller_id,omitempty"`                                        // agent can edit caller id in scheduled callbacks
	DefaultCallerId                     string `protobuf:"bytes,11,opt,name=default_caller_id,json=defaultCallerId,proto3" json:"default_caller_id,omitempty"`                                                 // default caller id for scheduled callbacks
	AllowScheduledCallbackCalendar      bool   `protobuf:"varint,12,opt,name=allow_scheduled_callback_calendar,json=allowScheduledCallbackCalendar,proto3" json:"allow_scheduled_callback_calendar,omitempty"` // agent can view the scheduled callback calendar
}

func (x *ScheduleCallBackSettings) Reset() {
	*x = ScheduleCallBackSettings{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleCallBackSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleCallBackSettings) ProtoMessage() {}

func (x *ScheduleCallBackSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleCallBackSettings.ProtoReflect.Descriptor instead.
func (*ScheduleCallBackSettings) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{142}
}

func (x *ScheduleCallBackSettings) GetAllowCallbackScheduling() bool {
	if x != nil {
		return x.AllowCallbackScheduling
	}
	return false
}

func (x *ScheduleCallBackSettings) GetAllowScheduledCallbackCalling() bool {
	if x != nil {
		return x.AllowScheduledCallbackCalling
	}
	return false
}

func (x *ScheduleCallBackSettings) GetAllowAutomaticCallbackRetrievalMode() bool {
	if x != nil {
		return x.AllowAutomaticCallbackRetrievalMode
	}
	return false
}

func (x *ScheduleCallBackSettings) GetAllowDefaultCallbackRouting() bool {
	if x != nil {
		return x.AllowDefaultCallbackRouting
	}
	return false
}

func (x *ScheduleCallBackSettings) GetCallbacksRetrievalModeSettings() string {
	if x != nil {
		return x.CallbacksRetrievalModeSettings
	}
	return ""
}

func (x *ScheduleCallBackSettings) GetDefaultCallbackRoutingSettings() string {
	if x != nil {
		return x.DefaultCallbackRoutingSettings
	}
	return ""
}

func (x *ScheduleCallBackSettings) GetCallbacksServiceId() string {
	if x != nil {
		return x.CallbacksServiceId
	}
	return ""
}

func (x *ScheduleCallBackSettings) GetHasCustomCallerId() bool {
	if x != nil {
		return x.HasCustomCallerId
	}
	return false
}

func (x *ScheduleCallBackSettings) GetDefaultCallerId() string {
	if x != nil {
		return x.DefaultCallerId
	}
	return ""
}

func (x *ScheduleCallBackSettings) GetAllowScheduledCallbackCalendar() bool {
	if x != nil {
		return x.AllowScheduledCallbackCalendar
	}
	return false
}

type UpdateAgentAssignedHuntGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HuntGroupSid  int64            `protobuf:"varint,3,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	Skills        map[string]int64 `protobuf:"bytes,4,rep,name=skills,proto3" json:"skills,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ReplaceSkills bool             `protobuf:"varint,5,opt,name=replace_skills,json=replaceSkills,proto3" json:"replace_skills,omitempty"`
}

func (x *UpdateAgentAssignedHuntGroupReq) Reset() {
	*x = UpdateAgentAssignedHuntGroupReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAgentAssignedHuntGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentAssignedHuntGroupReq) ProtoMessage() {}

func (x *UpdateAgentAssignedHuntGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentAssignedHuntGroupReq.ProtoReflect.Descriptor instead.
func (*UpdateAgentAssignedHuntGroupReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{143}
}

func (x *UpdateAgentAssignedHuntGroupReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *UpdateAgentAssignedHuntGroupReq) GetSkills() map[string]int64 {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *UpdateAgentAssignedHuntGroupReq) GetReplaceSkills() bool {
	if x != nil {
		return x.ReplaceSkills
	}
	return false
}

type UpdateAgentAssignedHuntGroupRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAgentAssignedHuntGroupRes) Reset() {
	*x = UpdateAgentAssignedHuntGroupRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAgentAssignedHuntGroupRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentAssignedHuntGroupRes) ProtoMessage() {}

func (x *UpdateAgentAssignedHuntGroupRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentAssignedHuntGroupRes.ProtoReflect.Descriptor instead.
func (*UpdateAgentAssignedHuntGroupRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{144}
}

type ListHuntGroupsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListHuntGroupsReq) Reset() {
	*x = ListHuntGroupsReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHuntGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHuntGroupsReq) ProtoMessage() {}

func (x *ListHuntGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHuntGroupsReq.ProtoReflect.Descriptor instead.
func (*ListHuntGroupsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{145}
}

type ListHuntGroupsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HuntGroup []*HuntGroup `protobuf:"bytes,1,rep,name=hunt_group,json=huntGroup,proto3" json:"hunt_group,omitempty"`
}

func (x *ListHuntGroupsRes) Reset() {
	*x = ListHuntGroupsRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHuntGroupsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHuntGroupsRes) ProtoMessage() {}

func (x *ListHuntGroupsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHuntGroupsRes.ProtoReflect.Descriptor instead.
func (*ListHuntGroupsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{146}
}

func (x *ListHuntGroupsRes) GetHuntGroup() []*HuntGroup {
	if x != nil {
		return x.HuntGroup
	}
	return nil
}

type ListReassignmentHuntGroupsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HuntGroupSid int64 `protobuf:"varint,2,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
}

func (x *ListReassignmentHuntGroupsReq) Reset() {
	*x = ListReassignmentHuntGroupsReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListReassignmentHuntGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReassignmentHuntGroupsReq) ProtoMessage() {}

func (x *ListReassignmentHuntGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReassignmentHuntGroupsReq.ProtoReflect.Descriptor instead.
func (*ListReassignmentHuntGroupsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{147}
}

func (x *ListReassignmentHuntGroupsReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

type ListReassignmentHuntGroupsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HuntGroups []*SimpleHuntGroup `protobuf:"bytes,1,rep,name=hunt_groups,json=huntGroups,proto3" json:"hunt_groups,omitempty"`
}

func (x *ListReassignmentHuntGroupsRes) Reset() {
	*x = ListReassignmentHuntGroupsRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListReassignmentHuntGroupsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReassignmentHuntGroupsRes) ProtoMessage() {}

func (x *ListReassignmentHuntGroupsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReassignmentHuntGroupsRes.ProtoReflect.Descriptor instead.
func (*ListReassignmentHuntGroupsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{148}
}

func (x *ListReassignmentHuntGroupsRes) GetHuntGroups() []*SimpleHuntGroup {
	if x != nil {
		return x.HuntGroups
	}
	return nil
}

type GetOrgAgentSettingsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetOrgAgentSettingsReq) Reset() {
	*x = GetOrgAgentSettingsReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrgAgentSettingsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgAgentSettingsReq) ProtoMessage() {}

func (x *GetOrgAgentSettingsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgAgentSettingsReq.ProtoReflect.Descriptor instead.
func (*GetOrgAgentSettingsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{149}
}

type GetOrgAgentSettingsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultTimeZone           string `protobuf:"bytes,1,opt,name=default_time_zone,json=defaultTimeZone,proto3" json:"default_time_zone,omitempty"`
	DefaultSoftphoneVolumeIn  int64  `protobuf:"varint,2,opt,name=default_softphone_volume_in,json=defaultSoftphoneVolumeIn,proto3" json:"default_softphone_volume_in,omitempty"`
	DefaultSoftphoneVolumeOut int64  `protobuf:"varint,3,opt,name=default_softphone_volume_out,json=defaultSoftphoneVolumeOut,proto3" json:"default_softphone_volume_out,omitempty"`
	LinkbackRecording         bool   `protobuf:"varint,5,opt,name=linkback_recording,json=linkbackRecording,proto3" json:"linkback_recording,omitempty"`
}

func (x *GetOrgAgentSettingsRes) Reset() {
	*x = GetOrgAgentSettingsRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrgAgentSettingsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgAgentSettingsRes) ProtoMessage() {}

func (x *GetOrgAgentSettingsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgAgentSettingsRes.ProtoReflect.Descriptor instead.
func (*GetOrgAgentSettingsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{150}
}

func (x *GetOrgAgentSettingsRes) GetDefaultTimeZone() string {
	if x != nil {
		return x.DefaultTimeZone
	}
	return ""
}

func (x *GetOrgAgentSettingsRes) GetDefaultSoftphoneVolumeIn() int64 {
	if x != nil {
		return x.DefaultSoftphoneVolumeIn
	}
	return 0
}

func (x *GetOrgAgentSettingsRes) GetDefaultSoftphoneVolumeOut() int64 {
	if x != nil {
		return x.DefaultSoftphoneVolumeOut
	}
	return 0
}

func (x *GetOrgAgentSettingsRes) GetLinkbackRecording() bool {
	if x != nil {
		return x.LinkbackRecording
	}
	return false
}

type ListCallerIdsFromBucketReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketNumber int64 `protobuf:"varint,2,opt,name=bucket_number,json=bucketNumber,proto3" json:"bucket_number,omitempty"`
}

func (x *ListCallerIdsFromBucketReq) Reset() {
	*x = ListCallerIdsFromBucketReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCallerIdsFromBucketReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCallerIdsFromBucketReq) ProtoMessage() {}

func (x *ListCallerIdsFromBucketReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCallerIdsFromBucketReq.ProtoReflect.Descriptor instead.
func (*ListCallerIdsFromBucketReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{151}
}

func (x *ListCallerIdsFromBucketReq) GetBucketNumber() int64 {
	if x != nil {
		return x.BucketNumber
	}
	return 0
}

type ListCallerIdsFromBucketRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallerIdInfo []*CallerIdInfo `protobuf:"bytes,1,rep,name=caller_id_info,json=callerIdInfo,proto3" json:"caller_id_info,omitempty"`
}

func (x *ListCallerIdsFromBucketRes) Reset() {
	*x = ListCallerIdsFromBucketRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCallerIdsFromBucketRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCallerIdsFromBucketRes) ProtoMessage() {}

func (x *ListCallerIdsFromBucketRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCallerIdsFromBucketRes.ProtoReflect.Descriptor instead.
func (*ListCallerIdsFromBucketRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{152}
}

func (x *ListCallerIdsFromBucketRes) GetCallerIdInfo() []*CallerIdInfo {
	if x != nil {
		return x.CallerIdInfo
	}
	return nil
}

type CallerIdInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number     string `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	RegionCode string `protobuf:"bytes,2,opt,name=region_code,json=regionCode,proto3" json:"region_code,omitempty"`
}

func (x *CallerIdInfo) Reset() {
	*x = CallerIdInfo{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallerIdInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallerIdInfo) ProtoMessage() {}

func (x *CallerIdInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallerIdInfo.ProtoReflect.Descriptor instead.
func (*CallerIdInfo) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{153}
}

func (x *CallerIdInfo) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *CallerIdInfo) GetRegionCode() string {
	if x != nil {
		return x.RegionCode
	}
	return ""
}

type SaveLastCallResponseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallType     commons.CallType_Enum `protobuf:"varint,1,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
	CallSid      int64                 `protobuf:"varint,2,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	ResponseName string                `protobuf:"bytes,3,opt,name=response_name,json=responseName,proto3" json:"response_name,omitempty"`
}

func (x *SaveLastCallResponseReq) Reset() {
	*x = SaveLastCallResponseReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[154]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveLastCallResponseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveLastCallResponseReq) ProtoMessage() {}

func (x *SaveLastCallResponseReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[154]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveLastCallResponseReq.ProtoReflect.Descriptor instead.
func (*SaveLastCallResponseReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{154}
}

func (x *SaveLastCallResponseReq) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

func (x *SaveLastCallResponseReq) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *SaveLastCallResponseReq) GetResponseName() string {
	if x != nil {
		return x.ResponseName
	}
	return ""
}

type SaveLastCallResponseRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SaveLastCallResponseRes) Reset() {
	*x = SaveLastCallResponseRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[155]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveLastCallResponseRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveLastCallResponseRes) ProtoMessage() {}

func (x *SaveLastCallResponseRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[155]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveLastCallResponseRes.ProtoReflect.Descriptor instead.
func (*SaveLastCallResponseRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{155}
}

type AgentCallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentCallResponseSid int64                   `protobuf:"varint,1,opt,name=agent_call_response_sid,json=agentCallResponseSid,proto3" json:"agent_call_response_sid,omitempty"`
	AgentCallSid         *wrapperspb.Int64Value  `protobuf:"bytes,2,opt,name=agent_call_sid,json=agentCallSid,proto3" json:"agent_call_sid,omitempty"`
	Key                  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value                *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Order                *wrapperspb.Int32Value  `protobuf:"bytes,5,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *AgentCallResponse) Reset() {
	*x = AgentCallResponse{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[156]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentCallResponse) ProtoMessage() {}

func (x *AgentCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[156]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentCallResponse.ProtoReflect.Descriptor instead.
func (*AgentCallResponse) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{156}
}

func (x *AgentCallResponse) GetAgentCallResponseSid() int64 {
	if x != nil {
		return x.AgentCallResponseSid
	}
	return 0
}

func (x *AgentCallResponse) GetAgentCallSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.AgentCallSid
	}
	return nil
}

func (x *AgentCallResponse) GetKey() *wrapperspb.StringValue {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AgentCallResponse) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AgentCallResponse) GetOrder() *wrapperspb.Int32Value {
	if x != nil {
		return x.Order
	}
	return nil
}

type GetCallDetailsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactFieldData         []*ContactFieldDataRow      `protobuf:"bytes,1,rep,name=contact_field_data,json=contactFieldData,proto3" json:"contact_field_data,omitempty"`
	AgentCallActivityDetails []*AgentCallActivityDetails `protobuf:"bytes,2,rep,name=agent_call_activity_details,json=agentCallActivityDetails,proto3" json:"agent_call_activity_details,omitempty"`
	AgentCallResponses       []*AgentCallResponse        `protobuf:"bytes,3,rep,name=agent_call_responses,json=agentCallResponses,proto3" json:"agent_call_responses,omitempty"`
}

func (x *GetCallDetailsRes) Reset() {
	*x = GetCallDetailsRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[157]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCallDetailsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCallDetailsRes) ProtoMessage() {}

func (x *GetCallDetailsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[157]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCallDetailsRes.ProtoReflect.Descriptor instead.
func (*GetCallDetailsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{157}
}

func (x *GetCallDetailsRes) GetContactFieldData() []*ContactFieldDataRow {
	if x != nil {
		return x.ContactFieldData
	}
	return nil
}

func (x *GetCallDetailsRes) GetAgentCallActivityDetails() []*AgentCallActivityDetails {
	if x != nil {
		return x.AgentCallActivityDetails
	}
	return nil
}

func (x *GetCallDetailsRes) GetAgentCallResponses() []*AgentCallResponse {
	if x != nil {
		return x.AgentCallResponses
	}
	return nil
}

type ListAgentCallLogsByCallSidAndTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallSid  int64                 `protobuf:"varint,2,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	CallType commons.CallType_Enum `protobuf:"varint,3,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
}

func (x *ListAgentCallLogsByCallSidAndTypeReq) Reset() {
	*x = ListAgentCallLogsByCallSidAndTypeReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[158]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentCallLogsByCallSidAndTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentCallLogsByCallSidAndTypeReq) ProtoMessage() {}

func (x *ListAgentCallLogsByCallSidAndTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[158]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentCallLogsByCallSidAndTypeReq.ProtoReflect.Descriptor instead.
func (*ListAgentCallLogsByCallSidAndTypeReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{158}
}

func (x *ListAgentCallLogsByCallSidAndTypeReq) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *ListAgentCallLogsByCallSidAndTypeReq) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

type ListAgentCallLogsByCallSidAndTypeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentCallLogs []*AgentCallLog `protobuf:"bytes,1,rep,name=agent_call_logs,json=agentCallLogs,proto3" json:"agent_call_logs,omitempty"`
}

func (x *ListAgentCallLogsByCallSidAndTypeRes) Reset() {
	*x = ListAgentCallLogsByCallSidAndTypeRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[159]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentCallLogsByCallSidAndTypeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentCallLogsByCallSidAndTypeRes) ProtoMessage() {}

func (x *ListAgentCallLogsByCallSidAndTypeRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[159]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentCallLogsByCallSidAndTypeRes.ProtoReflect.Descriptor instead.
func (*ListAgentCallLogsByCallSidAndTypeRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{159}
}

func (x *ListAgentCallLogsByCallSidAndTypeRes) GetAgentCallLogs() []*AgentCallLog {
	if x != nil {
		return x.AgentCallLogs
	}
	return nil
}

type ContactFieldDataRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldLabel string `protobuf:"bytes,1,opt,name=field_label,json=fieldLabel,proto3" json:"field_label,omitempty"`
	FieldValue string `protobuf:"bytes,2,opt,name=field_value,json=fieldValue,proto3" json:"field_value,omitempty"`
	IsPhone    bool   `protobuf:"varint,3,opt,name=is_phone,json=isPhone,proto3" json:"is_phone,omitempty"`
}

func (x *ContactFieldDataRow) Reset() {
	*x = ContactFieldDataRow{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[160]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContactFieldDataRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactFieldDataRow) ProtoMessage() {}

func (x *ContactFieldDataRow) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[160]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactFieldDataRow.ProtoReflect.Descriptor instead.
func (*ContactFieldDataRow) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{160}
}

func (x *ContactFieldDataRow) GetFieldLabel() string {
	if x != nil {
		return x.FieldLabel
	}
	return ""
}

func (x *ContactFieldDataRow) GetFieldValue() string {
	if x != nil {
		return x.FieldValue
	}
	return ""
}

func (x *ContactFieldDataRow) GetIsPhone() bool {
	if x != nil {
		return x.IsPhone
	}
	return false
}

type GetCallDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallSid  int64                 `protobuf:"varint,1,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	CallType commons.CallType_Enum `protobuf:"varint,2,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
}

func (x *GetCallDataReq) Reset() {
	*x = GetCallDataReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[161]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCallDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCallDataReq) ProtoMessage() {}

func (x *GetCallDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[161]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCallDataReq.ProtoReflect.Descriptor instead.
func (*GetCallDataReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{161}
}

func (x *GetCallDataReq) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *GetCallDataReq) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

type GetCallDataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IvrData              map[string]string `protobuf:"bytes,1,rep,name=ivr_data,json=ivrData,proto3" json:"ivr_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PhoneEnhancedData    map[string]string `protobuf:"bytes,2,rep,name=phone_enhanced_data,json=phoneEnhancedData,proto3" json:"phone_enhanced_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DataCollectData      map[string]string `protobuf:"bytes,3,rep,name=data_collect_data,json=dataCollectData,proto3" json:"data_collect_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DataDipData          map[string]string `protobuf:"bytes,4,rep,name=data_dip_data,json=dataDipData,proto3" json:"data_dip_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CallerIdName         string            `protobuf:"bytes,5,opt,name=caller_id_name,json=callerIdName,proto3" json:"caller_id_name,omitempty"`
	LinkbackHuntGroup    string            `protobuf:"bytes,6,opt,name=linkback_hunt_group,json=linkbackHuntGroup,proto3" json:"linkback_hunt_group,omitempty"`
	SipHeaderData        map[string]string `protobuf:"bytes,7,rep,name=sip_header_data,json=sipHeaderData,proto3" json:"sip_header_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	QueuedCallbackData   map[string]string `protobuf:"bytes,8,rep,name=queued_callback_data,json=queuedCallbackData,proto3" json:"queued_callback_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	JourneyRetrievedData map[string]string `protobuf:"bytes,9,rep,name=journey_retrieved_data,json=journeyRetrievedData,proto3" json:"journey_retrieved_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IntegrationData      map[string]string `protobuf:"bytes,10,rep,name=integration_data,json=integrationData,proto3" json:"integration_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetCallDataRes) Reset() {
	*x = GetCallDataRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[162]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCallDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCallDataRes) ProtoMessage() {}

func (x *GetCallDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[162]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCallDataRes.ProtoReflect.Descriptor instead.
func (*GetCallDataRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{162}
}

func (x *GetCallDataRes) GetIvrData() map[string]string {
	if x != nil {
		return x.IvrData
	}
	return nil
}

func (x *GetCallDataRes) GetPhoneEnhancedData() map[string]string {
	if x != nil {
		return x.PhoneEnhancedData
	}
	return nil
}

func (x *GetCallDataRes) GetDataCollectData() map[string]string {
	if x != nil {
		return x.DataCollectData
	}
	return nil
}

func (x *GetCallDataRes) GetDataDipData() map[string]string {
	if x != nil {
		return x.DataDipData
	}
	return nil
}

func (x *GetCallDataRes) GetCallerIdName() string {
	if x != nil {
		return x.CallerIdName
	}
	return ""
}

func (x *GetCallDataRes) GetLinkbackHuntGroup() string {
	if x != nil {
		return x.LinkbackHuntGroup
	}
	return ""
}

func (x *GetCallDataRes) GetSipHeaderData() map[string]string {
	if x != nil {
		return x.SipHeaderData
	}
	return nil
}

func (x *GetCallDataRes) GetQueuedCallbackData() map[string]string {
	if x != nil {
		return x.QueuedCallbackData
	}
	return nil
}

func (x *GetCallDataRes) GetJourneyRetrievedData() map[string]string {
	if x != nil {
		return x.JourneyRetrievedData
	}
	return nil
}

func (x *GetCallDataRes) GetIntegrationData() map[string]string {
	if x != nil {
		return x.IntegrationData
	}
	return nil
}

type UpdatePBXExtensionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PbxExtension   string `protobuf:"bytes,2,opt,name=pbx_extension,json=pbxExtension,proto3" json:"pbx_extension,omitempty"`
	EmailSubject   string `protobuf:"bytes,3,opt,name=email_subject,json=emailSubject,proto3" json:"email_subject,omitempty"`
	EmailBody      string `protobuf:"bytes,4,opt,name=email_body,json=emailBody,proto3" json:"email_body,omitempty"`
	EmailAddresses string `protobuf:"bytes,5,opt,name=email_addresses,json=emailAddresses,proto3" json:"email_addresses,omitempty"`
}

func (x *UpdatePBXExtensionReq) Reset() {
	*x = UpdatePBXExtensionReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[163]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePBXExtensionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePBXExtensionReq) ProtoMessage() {}

func (x *UpdatePBXExtensionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[163]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePBXExtensionReq.ProtoReflect.Descriptor instead.
func (*UpdatePBXExtensionReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{163}
}

func (x *UpdatePBXExtensionReq) GetPbxExtension() string {
	if x != nil {
		return x.PbxExtension
	}
	return ""
}

func (x *UpdatePBXExtensionReq) GetEmailSubject() string {
	if x != nil {
		return x.EmailSubject
	}
	return ""
}

func (x *UpdatePBXExtensionReq) GetEmailBody() string {
	if x != nil {
		return x.EmailBody
	}
	return ""
}

func (x *UpdatePBXExtensionReq) GetEmailAddresses() string {
	if x != nil {
		return x.EmailAddresses
	}
	return ""
}

type UpdatePBXExtensionRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePBXExtensionRes) Reset() {
	*x = UpdatePBXExtensionRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[164]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePBXExtensionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePBXExtensionRes) ProtoMessage() {}

func (x *UpdatePBXExtensionRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[164]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePBXExtensionRes.ProtoReflect.Descriptor instead.
func (*UpdatePBXExtensionRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{164}
}

type HuntGroupScript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description           string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	AutoScriptProgression bool   `protobuf:"varint,3,opt,name=auto_script_progression,json=autoScriptProgression,proto3" json:"auto_script_progression,omitempty"`
	ScriptCategory        string `protobuf:"bytes,4,opt,name=script_category,json=scriptCategory,proto3" json:"script_category,omitempty"`
	Act                   []*Act `protobuf:"bytes,5,rep,name=act,proto3" json:"act,omitempty"`
}

func (x *HuntGroupScript) Reset() {
	*x = HuntGroupScript{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[165]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HuntGroupScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HuntGroupScript) ProtoMessage() {}

func (x *HuntGroupScript) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[165]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HuntGroupScript.ProtoReflect.Descriptor instead.
func (*HuntGroupScript) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{165}
}

func (x *HuntGroupScript) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HuntGroupScript) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HuntGroupScript) GetAutoScriptProgression() bool {
	if x != nil {
		return x.AutoScriptProgression
	}
	return false
}

func (x *HuntGroupScript) GetScriptCategory() string {
	if x != nil {
		return x.ScriptCategory
	}
	return ""
}

func (x *HuntGroupScript) GetAct() []*Act {
	if x != nil {
		return x.Act
	}
	return nil
}

type Act struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disposition                        []*Disposition           `protobuf:"bytes,1,rep,name=disposition,proto3" json:"disposition,omitempty"`
	Verbiage                           []*Verbiage              `protobuf:"bytes,2,rep,name=verbiage,proto3" json:"verbiage,omitempty"`
	DefaultConditionalNavigationTarget int64                    `protobuf:"varint,3,opt,name=default_conditional_navigation_target,json=defaultConditionalNavigationTarget,proto3" json:"default_conditional_navigation_target,omitempty"`
	ConditionalNavigation              []*ConditionalNavigation `protobuf:"bytes,4,rep,name=conditional_navigation,json=conditionalNavigation,proto3" json:"conditional_navigation,omitempty"`
	PageArrivalRecordingControl        int64                    `protobuf:"varint,5,opt,name=page_arrival_recording_control,json=pageArrivalRecordingControl,proto3" json:"page_arrival_recording_control,omitempty"`
	PageExitRecordingControl           int64                    `protobuf:"varint,6,opt,name=page_exit_recording_control,json=pageExitRecordingControl,proto3" json:"page_exit_recording_control,omitempty"`
}

func (x *Act) Reset() {
	*x = Act{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[166]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Act) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Act) ProtoMessage() {}

func (x *Act) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[166]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Act.ProtoReflect.Descriptor instead.
func (*Act) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{166}
}

func (x *Act) GetDisposition() []*Disposition {
	if x != nil {
		return x.Disposition
	}
	return nil
}

func (x *Act) GetVerbiage() []*Verbiage {
	if x != nil {
		return x.Verbiage
	}
	return nil
}

func (x *Act) GetDefaultConditionalNavigationTarget() int64 {
	if x != nil {
		return x.DefaultConditionalNavigationTarget
	}
	return 0
}

func (x *Act) GetConditionalNavigation() []*ConditionalNavigation {
	if x != nil {
		return x.ConditionalNavigation
	}
	return nil
}

func (x *Act) GetPageArrivalRecordingControl() int64 {
	if x != nil {
		return x.PageArrivalRecordingControl
	}
	return 0
}

func (x *Act) GetPageExitRecordingControl() int64 {
	if x != nil {
		return x.PageExitRecordingControl
	}
	return 0
}

type Disposition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Required                    bool     `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
	Order                       int64    `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
	Type                        string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Header                      string   `protobuf:"bytes,4,opt,name=header,proto3" json:"header,omitempty"`
	Prompt                      string   `protobuf:"bytes,5,opt,name=prompt,proto3" json:"prompt,omitempty"`
	DefaultValue                string   `protobuf:"bytes,6,opt,name=defaultValue,proto3" json:"defaultValue,omitempty"`
	ResponseOptions             []string `protobuf:"bytes,7,rep,name=response_options,json=responseOptions,proto3" json:"response_options,omitempty"`
	BypassAutoScriptProgression bool     `protobuf:"varint,8,opt,name=bypass_auto_script_progression,json=bypassAutoScriptProgression,proto3" json:"bypass_auto_script_progression,omitempty"`
}

func (x *Disposition) Reset() {
	*x = Disposition{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[167]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Disposition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disposition) ProtoMessage() {}

func (x *Disposition) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[167]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disposition.ProtoReflect.Descriptor instead.
func (*Disposition) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{167}
}

func (x *Disposition) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *Disposition) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *Disposition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Disposition) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *Disposition) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *Disposition) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *Disposition) GetResponseOptions() []string {
	if x != nil {
		return x.ResponseOptions
	}
	return nil
}

func (x *Disposition) GetBypassAutoScriptProgression() bool {
	if x != nil {
		return x.BypassAutoScriptProgression
	}
	return false
}

type Verbiage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order  int64  `protobuf:"varint,1,opt,name=order,proto3" json:"order,omitempty"`
	Header string `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	Body   string `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Verbiage) Reset() {
	*x = Verbiage{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[168]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Verbiage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Verbiage) ProtoMessage() {}

func (x *Verbiage) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[168]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Verbiage.ProtoReflect.Descriptor instead.
func (*Verbiage) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{168}
}

func (x *Verbiage) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *Verbiage) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *Verbiage) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type ConditionalNavigation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComplexBooleanExpressionList *ComplexBooleanExpressionList `protobuf:"bytes,1,opt,name=complex_boolean_expression_list,json=complexBooleanExpressionList,proto3" json:"complex_boolean_expression_list,omitempty"`
	TargetActIndex               int64                         `protobuf:"varint,2,opt,name=target_act_index,json=targetActIndex,proto3" json:"target_act_index,omitempty"`
}

func (x *ConditionalNavigation) Reset() {
	*x = ConditionalNavigation{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[169]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConditionalNavigation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionalNavigation) ProtoMessage() {}

func (x *ConditionalNavigation) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[169]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionalNavigation.ProtoReflect.Descriptor instead.
func (*ConditionalNavigation) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{169}
}

func (x *ConditionalNavigation) GetComplexBooleanExpressionList() *ComplexBooleanExpressionList {
	if x != nil {
		return x.ComplexBooleanExpressionList
	}
	return nil
}

func (x *ConditionalNavigation) GetTargetActIndex() int64 {
	if x != nil {
		return x.TargetActIndex
	}
	return 0
}

type ComplexBooleanExpressionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComplexBooleanExpression []*ComplexBooleanExpression `protobuf:"bytes,1,rep,name=complex_boolean_expression,json=complexBooleanExpression,proto3" json:"complex_boolean_expression,omitempty"`
}

func (x *ComplexBooleanExpressionList) Reset() {
	*x = ComplexBooleanExpressionList{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[170]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComplexBooleanExpressionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplexBooleanExpressionList) ProtoMessage() {}

func (x *ComplexBooleanExpressionList) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[170]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplexBooleanExpressionList.ProtoReflect.Descriptor instead.
func (*ComplexBooleanExpressionList) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{170}
}

func (x *ComplexBooleanExpressionList) GetComplexBooleanExpression() []*ComplexBooleanExpression {
	if x != nil {
		return x.ComplexBooleanExpression
	}
	return nil
}

type ComplexBooleanExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompareExpressionList *CompareExpressionList `protobuf:"bytes,1,opt,name=compare_expression_list,json=compareExpressionList,proto3" json:"compare_expression_list,omitempty"`
}

func (x *ComplexBooleanExpression) Reset() {
	*x = ComplexBooleanExpression{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[171]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComplexBooleanExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplexBooleanExpression) ProtoMessage() {}

func (x *ComplexBooleanExpression) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[171]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplexBooleanExpression.ProtoReflect.Descriptor instead.
func (*ComplexBooleanExpression) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{171}
}

func (x *ComplexBooleanExpression) GetCompareExpressionList() *CompareExpressionList {
	if x != nil {
		return x.CompareExpressionList
	}
	return nil
}

type CompareExpressionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SimpleCompareExpression []*CompareExpression `protobuf:"bytes,1,rep,name=simple_compare_expression,json=simpleCompareExpression,proto3" json:"simple_compare_expression,omitempty"`
}

func (x *CompareExpressionList) Reset() {
	*x = CompareExpressionList{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[172]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompareExpressionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareExpressionList) ProtoMessage() {}

func (x *CompareExpressionList) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[172]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareExpressionList.ProtoReflect.Descriptor instead.
func (*CompareExpressionList) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{172}
}

func (x *CompareExpressionList) GetSimpleCompareExpression() []*CompareExpression {
	if x != nil {
		return x.SimpleCompareExpression
	}
	return nil
}

type CompareExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorType string `protobuf:"bytes,1,opt,name=operator_type,json=operatorType,proto3" json:"operator_type,omitempty"`
	ValueKey     string `protobuf:"bytes,2,opt,name=value_key,json=valueKey,proto3" json:"value_key,omitempty"`
	CompareValue string `protobuf:"bytes,3,opt,name=compare_value,json=compareValue,proto3" json:"compare_value,omitempty"`
}

func (x *CompareExpression) Reset() {
	*x = CompareExpression{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[173]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompareExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareExpression) ProtoMessage() {}

func (x *CompareExpression) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[173]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareExpression.ProtoReflect.Descriptor instead.
func (*CompareExpression) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{173}
}

func (x *CompareExpression) GetOperatorType() string {
	if x != nil {
		return x.OperatorType
	}
	return ""
}

func (x *CompareExpression) GetValueKey() string {
	if x != nil {
		return x.ValueKey
	}
	return ""
}

func (x *CompareExpression) GetCompareValue() string {
	if x != nil {
		return x.CompareValue
	}
	return ""
}

type ListAgentCallResponseValuesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallSid  int64                 `protobuf:"varint,2,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	CallType commons.CallType_Enum `protobuf:"varint,3,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
}

func (x *ListAgentCallResponseValuesReq) Reset() {
	*x = ListAgentCallResponseValuesReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[174]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentCallResponseValuesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentCallResponseValuesReq) ProtoMessage() {}

func (x *ListAgentCallResponseValuesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[174]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentCallResponseValuesReq.ProtoReflect.Descriptor instead.
func (*ListAgentCallResponseValuesReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{174}
}

func (x *ListAgentCallResponseValuesReq) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *ListAgentCallResponseValuesReq) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

type ListAgentCallResponseValuesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Responses []*ListAgentCallResponseValuesRes_Response `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *ListAgentCallResponseValuesRes) Reset() {
	*x = ListAgentCallResponseValuesRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[175]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentCallResponseValuesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentCallResponseValuesRes) ProtoMessage() {}

func (x *ListAgentCallResponseValuesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[175]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentCallResponseValuesRes.ProtoReflect.Descriptor instead.
func (*ListAgentCallResponseValuesRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{175}
}

func (x *ListAgentCallResponseValuesRes) GetResponses() []*ListAgentCallResponseValuesRes_Response {
	if x != nil {
		return x.Responses
	}
	return nil
}

type ContactSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactSchemaSid int64                  `protobuf:"varint,1,opt,name=contact_schema_sid,json=contactSchemaSid,proto3" json:"contact_schema_sid,omitempty"`
	ContactGroupSid  int64                  `protobuf:"varint,2,opt,name=contact_group_sid,json=contactGroupSid,proto3" json:"contact_group_sid,omitempty"`
	DfcSid01         *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=dfc_sid01,json=dfcSid01,proto3" json:"dfc_sid01,omitempty"`
	DfcSid02         *wrapperspb.Int32Value `protobuf:"bytes,6,opt,name=dfc_sid02,json=dfcSid02,proto3" json:"dfc_sid02,omitempty"`
	DfcSid03         *wrapperspb.Int32Value `protobuf:"bytes,7,opt,name=dfc_sid03,json=dfcSid03,proto3" json:"dfc_sid03,omitempty"`
	DfcSid04         *wrapperspb.Int32Value `protobuf:"bytes,8,opt,name=dfc_sid04,json=dfcSid04,proto3" json:"dfc_sid04,omitempty"`
	DfcSid05         *wrapperspb.Int32Value `protobuf:"bytes,9,opt,name=dfc_sid05,json=dfcSid05,proto3" json:"dfc_sid05,omitempty"`
	DfcSid06         *wrapperspb.Int32Value `protobuf:"bytes,10,opt,name=dfc_sid06,json=dfcSid06,proto3" json:"dfc_sid06,omitempty"`
	DfcSid07         *wrapperspb.Int32Value `protobuf:"bytes,11,opt,name=dfc_sid07,json=dfcSid07,proto3" json:"dfc_sid07,omitempty"`
	DfcSid08         *wrapperspb.Int32Value `protobuf:"bytes,12,opt,name=dfc_sid08,json=dfcSid08,proto3" json:"dfc_sid08,omitempty"`
	DfcSid09         *wrapperspb.Int32Value `protobuf:"bytes,13,opt,name=dfc_sid09,json=dfcSid09,proto3" json:"dfc_sid09,omitempty"`
	DfcSid10         *wrapperspb.Int32Value `protobuf:"bytes,14,opt,name=dfc_sid10,json=dfcSid10,proto3" json:"dfc_sid10,omitempty"`
	DfcSid11         *wrapperspb.Int32Value `protobuf:"bytes,15,opt,name=dfc_sid11,json=dfcSid11,proto3" json:"dfc_sid11,omitempty"`
	DfcSid12         *wrapperspb.Int32Value `protobuf:"bytes,16,opt,name=dfc_sid12,json=dfcSid12,proto3" json:"dfc_sid12,omitempty"`
	DfcSid13         *wrapperspb.Int32Value `protobuf:"bytes,17,opt,name=dfc_sid13,json=dfcSid13,proto3" json:"dfc_sid13,omitempty"`
	DfcSid14         *wrapperspb.Int32Value `protobuf:"bytes,18,opt,name=dfc_sid14,json=dfcSid14,proto3" json:"dfc_sid14,omitempty"`
	DfcSid15         *wrapperspb.Int32Value `protobuf:"bytes,19,opt,name=dfc_sid15,json=dfcSid15,proto3" json:"dfc_sid15,omitempty"`
	DfcSid16         *wrapperspb.Int32Value `protobuf:"bytes,20,opt,name=dfc_sid16,json=dfcSid16,proto3" json:"dfc_sid16,omitempty"`
	DfcSid17         *wrapperspb.Int32Value `protobuf:"bytes,21,opt,name=dfc_sid17,json=dfcSid17,proto3" json:"dfc_sid17,omitempty"`
	DfcSid18         *wrapperspb.Int32Value `protobuf:"bytes,22,opt,name=dfc_sid18,json=dfcSid18,proto3" json:"dfc_sid18,omitempty"`
	DfcSid19         *wrapperspb.Int32Value `protobuf:"bytes,23,opt,name=dfc_sid19,json=dfcSid19,proto3" json:"dfc_sid19,omitempty"`
	DfcSid20         *wrapperspb.Int32Value `protobuf:"bytes,24,opt,name=dfc_sid20,json=dfcSid20,proto3" json:"dfc_sid20,omitempty"`
	DfcSid21         *wrapperspb.Int32Value `protobuf:"bytes,25,opt,name=dfc_sid21,json=dfcSid21,proto3" json:"dfc_sid21,omitempty"`
	DfcSid22         *wrapperspb.Int32Value `protobuf:"bytes,26,opt,name=dfc_sid22,json=dfcSid22,proto3" json:"dfc_sid22,omitempty"`
	DfcSid23         *wrapperspb.Int32Value `protobuf:"bytes,27,opt,name=dfc_sid23,json=dfcSid23,proto3" json:"dfc_sid23,omitempty"`
	DfcSid24         *wrapperspb.Int32Value `protobuf:"bytes,28,opt,name=dfc_sid24,json=dfcSid24,proto3" json:"dfc_sid24,omitempty"`
	DfcSid25         *wrapperspb.Int32Value `protobuf:"bytes,29,opt,name=dfc_sid25,json=dfcSid25,proto3" json:"dfc_sid25,omitempty"`
	DfcSid26         *wrapperspb.Int32Value `protobuf:"bytes,30,opt,name=dfc_sid26,json=dfcSid26,proto3" json:"dfc_sid26,omitempty"`
	DfcSid27         *wrapperspb.Int32Value `protobuf:"bytes,31,opt,name=dfc_sid27,json=dfcSid27,proto3" json:"dfc_sid27,omitempty"`
	DfcSid28         *wrapperspb.Int32Value `protobuf:"bytes,32,opt,name=dfc_sid28,json=dfcSid28,proto3" json:"dfc_sid28,omitempty"`
	DfcSid29         *wrapperspb.Int32Value `protobuf:"bytes,33,opt,name=dfc_sid29,json=dfcSid29,proto3" json:"dfc_sid29,omitempty"`
	DfcSid30         *wrapperspb.Int32Value `protobuf:"bytes,34,opt,name=dfc_sid30,json=dfcSid30,proto3" json:"dfc_sid30,omitempty"`
}

func (x *ContactSchema) Reset() {
	*x = ContactSchema{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[176]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContactSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactSchema) ProtoMessage() {}

func (x *ContactSchema) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[176]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactSchema.ProtoReflect.Descriptor instead.
func (*ContactSchema) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{176}
}

func (x *ContactSchema) GetContactSchemaSid() int64 {
	if x != nil {
		return x.ContactSchemaSid
	}
	return 0
}

func (x *ContactSchema) GetContactGroupSid() int64 {
	if x != nil {
		return x.ContactGroupSid
	}
	return 0
}

func (x *ContactSchema) GetDfcSid01() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid01
	}
	return nil
}

func (x *ContactSchema) GetDfcSid02() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid02
	}
	return nil
}

func (x *ContactSchema) GetDfcSid03() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid03
	}
	return nil
}

func (x *ContactSchema) GetDfcSid04() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid04
	}
	return nil
}

func (x *ContactSchema) GetDfcSid05() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid05
	}
	return nil
}

func (x *ContactSchema) GetDfcSid06() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid06
	}
	return nil
}

func (x *ContactSchema) GetDfcSid07() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid07
	}
	return nil
}

func (x *ContactSchema) GetDfcSid08() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid08
	}
	return nil
}

func (x *ContactSchema) GetDfcSid09() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid09
	}
	return nil
}

func (x *ContactSchema) GetDfcSid10() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid10
	}
	return nil
}

func (x *ContactSchema) GetDfcSid11() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid11
	}
	return nil
}

func (x *ContactSchema) GetDfcSid12() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid12
	}
	return nil
}

func (x *ContactSchema) GetDfcSid13() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid13
	}
	return nil
}

func (x *ContactSchema) GetDfcSid14() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid14
	}
	return nil
}

func (x *ContactSchema) GetDfcSid15() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid15
	}
	return nil
}

func (x *ContactSchema) GetDfcSid16() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid16
	}
	return nil
}

func (x *ContactSchema) GetDfcSid17() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid17
	}
	return nil
}

func (x *ContactSchema) GetDfcSid18() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid18
	}
	return nil
}

func (x *ContactSchema) GetDfcSid19() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid19
	}
	return nil
}

func (x *ContactSchema) GetDfcSid20() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid20
	}
	return nil
}

func (x *ContactSchema) GetDfcSid21() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid21
	}
	return nil
}

func (x *ContactSchema) GetDfcSid22() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid22
	}
	return nil
}

func (x *ContactSchema) GetDfcSid23() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid23
	}
	return nil
}

func (x *ContactSchema) GetDfcSid24() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid24
	}
	return nil
}

func (x *ContactSchema) GetDfcSid25() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid25
	}
	return nil
}

func (x *ContactSchema) GetDfcSid26() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid26
	}
	return nil
}

func (x *ContactSchema) GetDfcSid27() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid27
	}
	return nil
}

func (x *ContactSchema) GetDfcSid28() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid28
	}
	return nil
}

func (x *ContactSchema) GetDfcSid29() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid29
	}
	return nil
}

func (x *ContactSchema) GetDfcSid30() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid30
	}
	return nil
}

type GetContactSchemaByContactGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactGroupSid int64 `protobuf:"varint,2,opt,name=contact_group_sid,json=contactGroupSid,proto3" json:"contact_group_sid,omitempty"`
}

func (x *GetContactSchemaByContactGroupReq) Reset() {
	*x = GetContactSchemaByContactGroupReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[177]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContactSchemaByContactGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactSchemaByContactGroupReq) ProtoMessage() {}

func (x *GetContactSchemaByContactGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[177]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactSchemaByContactGroupReq.ProtoReflect.Descriptor instead.
func (*GetContactSchemaByContactGroupReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{177}
}

func (x *GetContactSchemaByContactGroupReq) GetContactGroupSid() int64 {
	if x != nil {
		return x.ContactGroupSid
	}
	return 0
}

type ContactFieldDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactFieldDescriptionSid int32                   `protobuf:"varint,1,opt,name=contact_field_description_sid,json=contactFieldDescriptionSid,proto3" json:"contact_field_description_sid,omitempty"`
	FieldName                  string                  `protobuf:"bytes,3,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	IsPhone                    bool                    `protobuf:"varint,4,opt,name=is_phone,json=isPhone,proto3" json:"is_phone,omitempty"`
	DisplayFormatString        *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=display_format_string,json=displayFormatString,proto3" json:"display_format_string,omitempty"`
}

func (x *ContactFieldDescription) Reset() {
	*x = ContactFieldDescription{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[178]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContactFieldDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactFieldDescription) ProtoMessage() {}

func (x *ContactFieldDescription) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[178]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactFieldDescription.ProtoReflect.Descriptor instead.
func (*ContactFieldDescription) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{178}
}

func (x *ContactFieldDescription) GetContactFieldDescriptionSid() int32 {
	if x != nil {
		return x.ContactFieldDescriptionSid
	}
	return 0
}

func (x *ContactFieldDescription) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *ContactFieldDescription) GetIsPhone() bool {
	if x != nil {
		return x.IsPhone
	}
	return false
}

func (x *ContactFieldDescription) GetDisplayFormatString() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayFormatString
	}
	return nil
}

type ContactGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactGroupSid int64                   `protobuf:"varint,1,opt,name=contact_group_sid,json=contactGroupSid,proto3" json:"contact_group_sid,omitempty"`
	Name            *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	CountrySid      int64                   `protobuf:"varint,5,opt,name=country_sid,json=countrySid,proto3" json:"country_sid,omitempty"`
	LastUpdated     *timestamppb.Timestamp  `protobuf:"bytes,6,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	ShaDigest       *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=sha_digest,json=shaDigest,proto3" json:"sha_digest,omitempty"`
}

func (x *ContactGroup) Reset() {
	*x = ContactGroup{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[179]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContactGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactGroup) ProtoMessage() {}

func (x *ContactGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[179]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactGroup.ProtoReflect.Descriptor instead.
func (*ContactGroup) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{179}
}

func (x *ContactGroup) GetContactGroupSid() int64 {
	if x != nil {
		return x.ContactGroupSid
	}
	return 0
}

func (x *ContactGroup) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ContactGroup) GetCountrySid() int64 {
	if x != nil {
		return x.CountrySid
	}
	return 0
}

func (x *ContactGroup) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *ContactGroup) GetShaDigest() *wrapperspb.StringValue {
	if x != nil {
		return x.ShaDigest
	}
	return nil
}

type GetContactGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactGroupSid int64 `protobuf:"varint,1,opt,name=contact_group_sid,json=contactGroupSid,proto3" json:"contact_group_sid,omitempty"`
}

func (x *GetContactGroupReq) Reset() {
	*x = GetContactGroupReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[180]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContactGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactGroupReq) ProtoMessage() {}

func (x *GetContactGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[180]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactGroupReq.ProtoReflect.Descriptor instead.
func (*GetContactGroupReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{180}
}

func (x *GetContactGroupReq) GetContactGroupSid() int64 {
	if x != nil {
		return x.ContactGroupSid
	}
	return 0
}

type GetContactGroupSizeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactGroupSize int64 `protobuf:"varint,1,opt,name=contact_group_size,json=contactGroupSize,proto3" json:"contact_group_size,omitempty"`
}

func (x *GetContactGroupSizeRes) Reset() {
	*x = GetContactGroupSizeRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[181]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContactGroupSizeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactGroupSizeRes) ProtoMessage() {}

func (x *GetContactGroupSizeRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[181]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactGroupSizeRes.ProtoReflect.Descriptor instead.
func (*GetContactGroupSizeRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{181}
}

func (x *GetContactGroupSizeRes) GetContactGroupSize() int64 {
	if x != nil {
		return x.ContactGroupSize
	}
	return 0
}

type ListContactGroupDetailsByClientSidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListContactGroupDetailsByClientSidReq) Reset() {
	*x = ListContactGroupDetailsByClientSidReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[182]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListContactGroupDetailsByClientSidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContactGroupDetailsByClientSidReq) ProtoMessage() {}

func (x *ListContactGroupDetailsByClientSidReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[182]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContactGroupDetailsByClientSidReq.ProtoReflect.Descriptor instead.
func (*ListContactGroupDetailsByClientSidReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{182}
}

type ListContactGroupDetailsByClientSidRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactGroup []*ContactGroup `protobuf:"bytes,1,rep,name=contact_group,json=contactGroup,proto3" json:"contact_group,omitempty"`
}

func (x *ListContactGroupDetailsByClientSidRes) Reset() {
	*x = ListContactGroupDetailsByClientSidRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[183]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListContactGroupDetailsByClientSidRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContactGroupDetailsByClientSidRes) ProtoMessage() {}

func (x *ListContactGroupDetailsByClientSidRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[183]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContactGroupDetailsByClientSidRes.ProtoReflect.Descriptor instead.
func (*ListContactGroupDetailsByClientSidRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{183}
}

func (x *ListContactGroupDetailsByClientSidRes) GetContactGroup() []*ContactGroup {
	if x != nil {
		return x.ContactGroup
	}
	return nil
}

type CreateContactFieldDescriptionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName           string                  `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	IsPhone             bool                    `protobuf:"varint,2,opt,name=is_phone,json=isPhone,proto3" json:"is_phone,omitempty"`
	DisplayFormatString *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_format_string,json=displayFormatString,proto3" json:"display_format_string,omitempty"`
}

func (x *CreateContactFieldDescriptionReq) Reset() {
	*x = CreateContactFieldDescriptionReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[184]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateContactFieldDescriptionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContactFieldDescriptionReq) ProtoMessage() {}

func (x *CreateContactFieldDescriptionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[184]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContactFieldDescriptionReq.ProtoReflect.Descriptor instead.
func (*CreateContactFieldDescriptionReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{184}
}

func (x *CreateContactFieldDescriptionReq) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *CreateContactFieldDescriptionReq) GetIsPhone() bool {
	if x != nil {
		return x.IsPhone
	}
	return false
}

func (x *CreateContactFieldDescriptionReq) GetDisplayFormatString() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayFormatString
	}
	return nil
}

type CreateContactFieldDescriptionRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateContactFieldDescriptionRes) Reset() {
	*x = CreateContactFieldDescriptionRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[185]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateContactFieldDescriptionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContactFieldDescriptionRes) ProtoMessage() {}

func (x *CreateContactFieldDescriptionRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[185]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContactFieldDescriptionRes.ProtoReflect.Descriptor instead.
func (*CreateContactFieldDescriptionRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{185}
}

type UpdateContactFieldDescriptionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactFieldDescriptionSid int32                   `protobuf:"varint,1,opt,name=contact_field_description_sid,json=contactFieldDescriptionSid,proto3" json:"contact_field_description_sid,omitempty"`
	FieldName                  string                  `protobuf:"bytes,2,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	IsPhone                    bool                    `protobuf:"varint,3,opt,name=is_phone,json=isPhone,proto3" json:"is_phone,omitempty"`
	DisplayFormatString        *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=display_format_string,json=displayFormatString,proto3" json:"display_format_string,omitempty"`
}

func (x *UpdateContactFieldDescriptionReq) Reset() {
	*x = UpdateContactFieldDescriptionReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[186]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateContactFieldDescriptionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContactFieldDescriptionReq) ProtoMessage() {}

func (x *UpdateContactFieldDescriptionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[186]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContactFieldDescriptionReq.ProtoReflect.Descriptor instead.
func (*UpdateContactFieldDescriptionReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{186}
}

func (x *UpdateContactFieldDescriptionReq) GetContactFieldDescriptionSid() int32 {
	if x != nil {
		return x.ContactFieldDescriptionSid
	}
	return 0
}

func (x *UpdateContactFieldDescriptionReq) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *UpdateContactFieldDescriptionReq) GetIsPhone() bool {
	if x != nil {
		return x.IsPhone
	}
	return false
}

func (x *UpdateContactFieldDescriptionReq) GetDisplayFormatString() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayFormatString
	}
	return nil
}

type UpdateContactFieldDescriptionRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateContactFieldDescriptionRes) Reset() {
	*x = UpdateContactFieldDescriptionRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[187]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateContactFieldDescriptionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContactFieldDescriptionRes) ProtoMessage() {}

func (x *UpdateContactFieldDescriptionRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[187]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContactFieldDescriptionRes.ProtoReflect.Descriptor instead.
func (*UpdateContactFieldDescriptionRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{187}
}

type DeleteContactFieldDescriptionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactFieldDescriptionSid int32 `protobuf:"varint,1,opt,name=contact_field_description_sid,json=contactFieldDescriptionSid,proto3" json:"contact_field_description_sid,omitempty"`
}

func (x *DeleteContactFieldDescriptionReq) Reset() {
	*x = DeleteContactFieldDescriptionReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[188]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteContactFieldDescriptionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteContactFieldDescriptionReq) ProtoMessage() {}

func (x *DeleteContactFieldDescriptionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[188]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteContactFieldDescriptionReq.ProtoReflect.Descriptor instead.
func (*DeleteContactFieldDescriptionReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{188}
}

func (x *DeleteContactFieldDescriptionReq) GetContactFieldDescriptionSid() int32 {
	if x != nil {
		return x.ContactFieldDescriptionSid
	}
	return 0
}

type DeleteContactFieldDescriptionRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteContactFieldDescriptionRes) Reset() {
	*x = DeleteContactFieldDescriptionRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[189]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteContactFieldDescriptionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteContactFieldDescriptionRes) ProtoMessage() {}

func (x *DeleteContactFieldDescriptionRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[189]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteContactFieldDescriptionRes.ProtoReflect.Descriptor instead.
func (*DeleteContactFieldDescriptionRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{189}
}

type ListContactFieldDescriptionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListContactFieldDescriptionsReq) Reset() {
	*x = ListContactFieldDescriptionsReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[190]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListContactFieldDescriptionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContactFieldDescriptionsReq) ProtoMessage() {}

func (x *ListContactFieldDescriptionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[190]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContactFieldDescriptionsReq.ProtoReflect.Descriptor instead.
func (*ListContactFieldDescriptionsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{190}
}

type ListContactFieldDescriptionsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactFieldDescription []*ContactFieldDescription `protobuf:"bytes,1,rep,name=contact_field_description,json=contactFieldDescription,proto3" json:"contact_field_description,omitempty"`
}

func (x *ListContactFieldDescriptionsRes) Reset() {
	*x = ListContactFieldDescriptionsRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[191]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListContactFieldDescriptionsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContactFieldDescriptionsRes) ProtoMessage() {}

func (x *ListContactFieldDescriptionsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[191]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContactFieldDescriptionsRes.ProtoReflect.Descriptor instead.
func (*ListContactFieldDescriptionsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{191}
}

func (x *ListContactFieldDescriptionsRes) GetContactFieldDescription() []*ContactFieldDescription {
	if x != nil {
		return x.ContactFieldDescription
	}
	return nil
}

type ListContactFieldDescriptionsByCGSidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactGroupSid int64 `protobuf:"varint,2,opt,name=contact_group_sid,json=contactGroupSid,proto3" json:"contact_group_sid,omitempty"`
}

func (x *ListContactFieldDescriptionsByCGSidReq) Reset() {
	*x = ListContactFieldDescriptionsByCGSidReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[192]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListContactFieldDescriptionsByCGSidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContactFieldDescriptionsByCGSidReq) ProtoMessage() {}

func (x *ListContactFieldDescriptionsByCGSidReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[192]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContactFieldDescriptionsByCGSidReq.ProtoReflect.Descriptor instead.
func (*ListContactFieldDescriptionsByCGSidReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{192}
}

func (x *ListContactFieldDescriptionsByCGSidReq) GetContactGroupSid() int64 {
	if x != nil {
		return x.ContactGroupSid
	}
	return 0
}

type ListContactFieldDescriptionsByCGSidRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactFieldDescription []*ContactFieldDescription `protobuf:"bytes,1,rep,name=contact_field_description,json=contactFieldDescription,proto3" json:"contact_field_description,omitempty"`
}

func (x *ListContactFieldDescriptionsByCGSidRes) Reset() {
	*x = ListContactFieldDescriptionsByCGSidRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[193]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListContactFieldDescriptionsByCGSidRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContactFieldDescriptionsByCGSidRes) ProtoMessage() {}

func (x *ListContactFieldDescriptionsByCGSidRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[193]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContactFieldDescriptionsByCGSidRes.ProtoReflect.Descriptor instead.
func (*ListContactFieldDescriptionsByCGSidRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{193}
}

func (x *ListContactFieldDescriptionsByCGSidRes) GetContactFieldDescription() []*ContactFieldDescription {
	if x != nil {
		return x.ContactFieldDescription
	}
	return nil
}

// Request for ListTableTemplateProperties
type ListTableTemplatePropertiesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTableTemplatePropertiesReq) Reset() {
	*x = ListTableTemplatePropertiesReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[194]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTableTemplatePropertiesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTableTemplatePropertiesReq) ProtoMessage() {}

func (x *ListTableTemplatePropertiesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[194]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTableTemplatePropertiesReq.ProtoReflect.Descriptor instead.
func (*ListTableTemplatePropertiesReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{194}
}

// Response for ListTableTemplateProperties
type ListTableTemplatePropertiesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentTableTemplates []*TableTemplateProperty `protobuf:"bytes,1,rep,name=agent_table_templates,json=agentTableTemplates,proto3" json:"agent_table_templates,omitempty"` // List of AgentStatusDashboardTemplates belonging to client
	QueueTableTemplates []*TableTemplateProperty `protobuf:"bytes,2,rep,name=queue_table_templates,json=queueTableTemplates,proto3" json:"queue_table_templates,omitempty"` // List of QueueHoldInfoDashboardTemplates belonging to client
}

func (x *ListTableTemplatePropertiesRes) Reset() {
	*x = ListTableTemplatePropertiesRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[195]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTableTemplatePropertiesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTableTemplatePropertiesRes) ProtoMessage() {}

func (x *ListTableTemplatePropertiesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[195]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTableTemplatePropertiesRes.ProtoReflect.Descriptor instead.
func (*ListTableTemplatePropertiesRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{195}
}

func (x *ListTableTemplatePropertiesRes) GetAgentTableTemplates() []*TableTemplateProperty {
	if x != nil {
		return x.AgentTableTemplates
	}
	return nil
}

func (x *ListTableTemplatePropertiesRes) GetQueueTableTemplates() []*TableTemplateProperty {
	if x != nil {
		return x.QueueTableTemplates
	}
	return nil
}

// TableTemplate property
type TableTemplateProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XmlClientPropertySid int64  `protobuf:"varint,1,opt,name=xml_client_property_sid,json=xmlClientPropertySid,proto3" json:"xml_client_property_sid,omitempty"` // Property sid for table template
	Name                 string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                  // Template name
}

func (x *TableTemplateProperty) Reset() {
	*x = TableTemplateProperty{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[196]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableTemplateProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableTemplateProperty) ProtoMessage() {}

func (x *TableTemplateProperty) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[196]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableTemplateProperty.ProtoReflect.Descriptor instead.
func (*TableTemplateProperty) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{196}
}

func (x *TableTemplateProperty) GetXmlClientPropertySid() int64 {
	if x != nil {
		return x.XmlClientPropertySid
	}
	return 0
}

func (x *TableTemplateProperty) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request for ListAgentSkillsFilters
type ListAgentSkillsFiltersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAgentSkillsFiltersReq) Reset() {
	*x = ListAgentSkillsFiltersReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[197]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentSkillsFiltersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentSkillsFiltersReq) ProtoMessage() {}

func (x *ListAgentSkillsFiltersReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[197]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentSkillsFiltersReq.ProtoReflect.Descriptor instead.
func (*ListAgentSkillsFiltersReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{197}
}

// Response for ListAgentSkillsFilters
type ListAgentSkillsFiltersRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentSkillsFilters []*AgentSkillsFilter `protobuf:"bytes,1,rep,name=agent_skills_filters,json=agentSkillsFilters,proto3" json:"agent_skills_filters,omitempty"` // List of agent skills filters
}

func (x *ListAgentSkillsFiltersRes) Reset() {
	*x = ListAgentSkillsFiltersRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[198]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentSkillsFiltersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentSkillsFiltersRes) ProtoMessage() {}

func (x *ListAgentSkillsFiltersRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[198]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentSkillsFiltersRes.ProtoReflect.Descriptor instead.
func (*ListAgentSkillsFiltersRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{198}
}

func (x *ListAgentSkillsFiltersRes) GetAgentSkillsFilters() []*AgentSkillsFilter {
	if x != nil {
		return x.AgentSkillsFilters
	}
	return nil
}

// AgentSkillsFilter property
type AgentSkillsFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XmlClientPropertySid int64  `protobuf:"varint,1,opt,name=xml_client_property_sid,json=xmlClientPropertySid,proto3" json:"xml_client_property_sid,omitempty"` // xml sid associated with skill
	Name                 string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                  // Filter name
}

func (x *AgentSkillsFilter) Reset() {
	*x = AgentSkillsFilter{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[199]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentSkillsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentSkillsFilter) ProtoMessage() {}

func (x *AgentSkillsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[199]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentSkillsFilter.ProtoReflect.Descriptor instead.
func (*AgentSkillsFilter) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{199}
}

func (x *AgentSkillsFilter) GetXmlClientPropertySid() int64 {
	if x != nil {
		return x.XmlClientPropertySid
	}
	return 0
}

func (x *AgentSkillsFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request for ListCustomReportFilters
type ListCustomReportFiltersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListCustomReportFiltersReq) Reset() {
	*x = ListCustomReportFiltersReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[200]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCustomReportFiltersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCustomReportFiltersReq) ProtoMessage() {}

func (x *ListCustomReportFiltersReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[200]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCustomReportFiltersReq.ProtoReflect.Descriptor instead.
func (*ListCustomReportFiltersReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{200}
}

// Response for ListCustomReportFilters
type ListCustomReportFiltersRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomReportFilters []*CustomReportFilterProperty `protobuf:"bytes,1,rep,name=custom_report_filters,json=customReportFilters,proto3" json:"custom_report_filters,omitempty"` // List of custom report filters
}

func (x *ListCustomReportFiltersRes) Reset() {
	*x = ListCustomReportFiltersRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[201]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCustomReportFiltersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCustomReportFiltersRes) ProtoMessage() {}

func (x *ListCustomReportFiltersRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[201]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCustomReportFiltersRes.ProtoReflect.Descriptor instead.
func (*ListCustomReportFiltersRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{201}
}

func (x *ListCustomReportFiltersRes) GetCustomReportFilters() []*CustomReportFilterProperty {
	if x != nil {
		return x.CustomReportFilters
	}
	return nil
}

// CustomReportFilter property
type CustomReportFilterProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XmlClientPropertySid int64  `protobuf:"varint,1,opt,name=xml_client_property_sid,json=xmlClientPropertySid,proto3" json:"xml_client_property_sid,omitempty"` // xml sid associated with report filter
	Name                 string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                  // Filter name
}

func (x *CustomReportFilterProperty) Reset() {
	*x = CustomReportFilterProperty{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[202]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomReportFilterProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomReportFilterProperty) ProtoMessage() {}

func (x *CustomReportFilterProperty) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[202]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomReportFilterProperty.ProtoReflect.Descriptor instead.
func (*CustomReportFilterProperty) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{202}
}

func (x *CustomReportFilterProperty) GetXmlClientPropertySid() int64 {
	if x != nil {
		return x.XmlClientPropertySid
	}
	return 0
}

func (x *CustomReportFilterProperty) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ContactImportTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// column not null
	ContactImportTemplateSid int64                   `protobuf:"varint,1,opt,name=contact_import_template_sid,json=contactImportTemplateSid,proto3" json:"contact_import_template_sid,omitempty"`
	Name                     string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description              string                  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Delimiter                *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=delimiter,proto3" json:"delimiter,omitempty"`
	Quote                    *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=quote,proto3" json:"quote,omitempty"`
	IsFixedWidth             bool                    `protobuf:"varint,7,opt,name=is_fixed_width,json=isFixedWidth,proto3" json:"is_fixed_width,omitempty"`
	DfcSid01                 *wrapperspb.Int32Value  `protobuf:"bytes,8,opt,name=dfc_sid01,json=dfcSid01,proto3" json:"dfc_sid01,omitempty"`
	DfcSid02                 *wrapperspb.Int32Value  `protobuf:"bytes,9,opt,name=dfc_sid02,json=dfcSid02,proto3" json:"dfc_sid02,omitempty"`
	DfcSid03                 *wrapperspb.Int32Value  `protobuf:"bytes,10,opt,name=dfc_sid03,json=dfcSid03,proto3" json:"dfc_sid03,omitempty"`
	DfcSid04                 *wrapperspb.Int32Value  `protobuf:"bytes,11,opt,name=dfc_sid04,json=dfcSid04,proto3" json:"dfc_sid04,omitempty"`
	DfcSid05                 *wrapperspb.Int32Value  `protobuf:"bytes,12,opt,name=dfc_sid05,json=dfcSid05,proto3" json:"dfc_sid05,omitempty"`
	DfcSid06                 *wrapperspb.Int32Value  `protobuf:"bytes,13,opt,name=dfc_sid06,json=dfcSid06,proto3" json:"dfc_sid06,omitempty"`
	DfcSid07                 *wrapperspb.Int32Value  `protobuf:"bytes,14,opt,name=dfc_sid07,json=dfcSid07,proto3" json:"dfc_sid07,omitempty"`
	DfcSid08                 *wrapperspb.Int32Value  `protobuf:"bytes,15,opt,name=dfc_sid08,json=dfcSid08,proto3" json:"dfc_sid08,omitempty"`
	DfcSid09                 *wrapperspb.Int32Value  `protobuf:"bytes,16,opt,name=dfc_sid09,json=dfcSid09,proto3" json:"dfc_sid09,omitempty"`
	DfcSid10                 *wrapperspb.Int32Value  `protobuf:"bytes,17,opt,name=dfc_sid10,json=dfcSid10,proto3" json:"dfc_sid10,omitempty"`
	DfcSid11                 *wrapperspb.Int32Value  `protobuf:"bytes,18,opt,name=dfc_sid11,json=dfcSid11,proto3" json:"dfc_sid11,omitempty"`
	DfcSid12                 *wrapperspb.Int32Value  `protobuf:"bytes,19,opt,name=dfc_sid12,json=dfcSid12,proto3" json:"dfc_sid12,omitempty"`
	DfcSid13                 *wrapperspb.Int32Value  `protobuf:"bytes,20,opt,name=dfc_sid13,json=dfcSid13,proto3" json:"dfc_sid13,omitempty"`
	DfcSid14                 *wrapperspb.Int32Value  `protobuf:"bytes,21,opt,name=dfc_sid14,json=dfcSid14,proto3" json:"dfc_sid14,omitempty"`
	DfcSid15                 *wrapperspb.Int32Value  `protobuf:"bytes,22,opt,name=dfc_sid15,json=dfcSid15,proto3" json:"dfc_sid15,omitempty"`
	DfcSid16                 *wrapperspb.Int32Value  `protobuf:"bytes,23,opt,name=dfc_sid16,json=dfcSid16,proto3" json:"dfc_sid16,omitempty"`
	DfcSid17                 *wrapperspb.Int32Value  `protobuf:"bytes,24,opt,name=dfc_sid17,json=dfcSid17,proto3" json:"dfc_sid17,omitempty"`
	DfcSid18                 *wrapperspb.Int32Value  `protobuf:"bytes,25,opt,name=dfc_sid18,json=dfcSid18,proto3" json:"dfc_sid18,omitempty"`
	DfcSid19                 *wrapperspb.Int32Value  `protobuf:"bytes,26,opt,name=dfc_sid19,json=dfcSid19,proto3" json:"dfc_sid19,omitempty"`
	DfcSid20                 *wrapperspb.Int32Value  `protobuf:"bytes,27,opt,name=dfc_sid20,json=dfcSid20,proto3" json:"dfc_sid20,omitempty"`
	DfcSid21                 *wrapperspb.Int32Value  `protobuf:"bytes,28,opt,name=dfc_sid21,json=dfcSid21,proto3" json:"dfc_sid21,omitempty"`
	DfcSid22                 *wrapperspb.Int32Value  `protobuf:"bytes,29,opt,name=dfc_sid22,json=dfcSid22,proto3" json:"dfc_sid22,omitempty"`
	DfcSid23                 *wrapperspb.Int32Value  `protobuf:"bytes,30,opt,name=dfc_sid23,json=dfcSid23,proto3" json:"dfc_sid23,omitempty"`
	DfcSid24                 *wrapperspb.Int32Value  `protobuf:"bytes,31,opt,name=dfc_sid24,json=dfcSid24,proto3" json:"dfc_sid24,omitempty"`
	DfcSid25                 *wrapperspb.Int32Value  `protobuf:"bytes,32,opt,name=dfc_sid25,json=dfcSid25,proto3" json:"dfc_sid25,omitempty"`
	DfcSid26                 *wrapperspb.Int32Value  `protobuf:"bytes,33,opt,name=dfc_sid26,json=dfcSid26,proto3" json:"dfc_sid26,omitempty"`
	DfcSid27                 *wrapperspb.Int32Value  `protobuf:"bytes,34,opt,name=dfc_sid27,json=dfcSid27,proto3" json:"dfc_sid27,omitempty"`
	DfcSid28                 *wrapperspb.Int32Value  `protobuf:"bytes,35,opt,name=dfc_sid28,json=dfcSid28,proto3" json:"dfc_sid28,omitempty"`
	DfcSid29                 *wrapperspb.Int32Value  `protobuf:"bytes,36,opt,name=dfc_sid29,json=dfcSid29,proto3" json:"dfc_sid29,omitempty"`
	DfcSid30                 *wrapperspb.Int32Value  `protobuf:"bytes,37,opt,name=dfc_sid30,json=dfcSid30,proto3" json:"dfc_sid30,omitempty"`
	FieldLength01            *wrapperspb.Int32Value  `protobuf:"bytes,38,opt,name=field_length01,json=fieldLength01,proto3" json:"field_length01,omitempty"`
	FieldLength02            *wrapperspb.Int32Value  `protobuf:"bytes,39,opt,name=field_length02,json=fieldLength02,proto3" json:"field_length02,omitempty"`
	FieldLength03            *wrapperspb.Int32Value  `protobuf:"bytes,40,opt,name=field_length03,json=fieldLength03,proto3" json:"field_length03,omitempty"`
	FieldLength04            *wrapperspb.Int32Value  `protobuf:"bytes,41,opt,name=field_length04,json=fieldLength04,proto3" json:"field_length04,omitempty"`
	FieldLength05            *wrapperspb.Int32Value  `protobuf:"bytes,42,opt,name=field_length05,json=fieldLength05,proto3" json:"field_length05,omitempty"`
	FieldLength06            *wrapperspb.Int32Value  `protobuf:"bytes,43,opt,name=field_length06,json=fieldLength06,proto3" json:"field_length06,omitempty"`
	FieldLength07            *wrapperspb.Int32Value  `protobuf:"bytes,44,opt,name=field_length07,json=fieldLength07,proto3" json:"field_length07,omitempty"`
	FieldLength08            *wrapperspb.Int32Value  `protobuf:"bytes,45,opt,name=field_length08,json=fieldLength08,proto3" json:"field_length08,omitempty"`
	FieldLength09            *wrapperspb.Int32Value  `protobuf:"bytes,46,opt,name=field_length09,json=fieldLength09,proto3" json:"field_length09,omitempty"`
	FieldLength10            *wrapperspb.Int32Value  `protobuf:"bytes,47,opt,name=field_length10,json=fieldLength10,proto3" json:"field_length10,omitempty"`
	FieldLength11            *wrapperspb.Int32Value  `protobuf:"bytes,48,opt,name=field_length11,json=fieldLength11,proto3" json:"field_length11,omitempty"`
	FieldLength12            *wrapperspb.Int32Value  `protobuf:"bytes,49,opt,name=field_length12,json=fieldLength12,proto3" json:"field_length12,omitempty"`
	FieldLength13            *wrapperspb.Int32Value  `protobuf:"bytes,50,opt,name=field_length13,json=fieldLength13,proto3" json:"field_length13,omitempty"`
	FieldLength14            *wrapperspb.Int32Value  `protobuf:"bytes,51,opt,name=field_length14,json=fieldLength14,proto3" json:"field_length14,omitempty"`
	FieldLength15            *wrapperspb.Int32Value  `protobuf:"bytes,52,opt,name=field_length15,json=fieldLength15,proto3" json:"field_length15,omitempty"`
	FieldLength16            *wrapperspb.Int32Value  `protobuf:"bytes,53,opt,name=field_length16,json=fieldLength16,proto3" json:"field_length16,omitempty"`
	FieldLength17            *wrapperspb.Int32Value  `protobuf:"bytes,54,opt,name=field_length17,json=fieldLength17,proto3" json:"field_length17,omitempty"`
	FieldLength18            *wrapperspb.Int32Value  `protobuf:"bytes,55,opt,name=field_length18,json=fieldLength18,proto3" json:"field_length18,omitempty"`
	FieldLength19            *wrapperspb.Int32Value  `protobuf:"bytes,56,opt,name=field_length19,json=fieldLength19,proto3" json:"field_length19,omitempty"`
	FieldLength20            *wrapperspb.Int32Value  `protobuf:"bytes,57,opt,name=field_length20,json=fieldLength20,proto3" json:"field_length20,omitempty"`
	FieldLength21            *wrapperspb.Int32Value  `protobuf:"bytes,58,opt,name=field_length21,json=fieldLength21,proto3" json:"field_length21,omitempty"`
	FieldLength22            *wrapperspb.Int32Value  `protobuf:"bytes,59,opt,name=field_length22,json=fieldLength22,proto3" json:"field_length22,omitempty"`
	FieldLength23            *wrapperspb.Int32Value  `protobuf:"bytes,60,opt,name=field_length23,json=fieldLength23,proto3" json:"field_length23,omitempty"`
	FieldLength24            *wrapperspb.Int32Value  `protobuf:"bytes,61,opt,name=field_length24,json=fieldLength24,proto3" json:"field_length24,omitempty"`
	FieldLength25            *wrapperspb.Int32Value  `protobuf:"bytes,62,opt,name=field_length25,json=fieldLength25,proto3" json:"field_length25,omitempty"`
	FieldLength26            *wrapperspb.Int32Value  `protobuf:"bytes,63,opt,name=field_length26,json=fieldLength26,proto3" json:"field_length26,omitempty"`
	FieldLength27            *wrapperspb.Int32Value  `protobuf:"bytes,64,opt,name=field_length27,json=fieldLength27,proto3" json:"field_length27,omitempty"`
	FieldLength28            *wrapperspb.Int32Value  `protobuf:"bytes,65,opt,name=field_length28,json=fieldLength28,proto3" json:"field_length28,omitempty"`
	FieldLength29            *wrapperspb.Int32Value  `protobuf:"bytes,66,opt,name=field_length29,json=fieldLength29,proto3" json:"field_length29,omitempty"`
	FieldLength30            *wrapperspb.Int32Value  `protobuf:"bytes,67,opt,name=field_length30,json=fieldLength30,proto3" json:"field_length30,omitempty"`
	TemplateNumber           int32                   `protobuf:"varint,68,opt,name=template_number,json=templateNumber,proto3" json:"template_number,omitempty"`
	ExcludeFirstRow          *wrapperspb.BoolValue   `protobuf:"bytes,69,opt,name=exclude_first_row,json=excludeFirstRow,proto3" json:"exclude_first_row,omitempty"`
}

func (x *ContactImportTemplate) Reset() {
	*x = ContactImportTemplate{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[203]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContactImportTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactImportTemplate) ProtoMessage() {}

func (x *ContactImportTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[203]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactImportTemplate.ProtoReflect.Descriptor instead.
func (*ContactImportTemplate) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{203}
}

func (x *ContactImportTemplate) GetContactImportTemplateSid() int64 {
	if x != nil {
		return x.ContactImportTemplateSid
	}
	return 0
}

func (x *ContactImportTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContactImportTemplate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ContactImportTemplate) GetDelimiter() *wrapperspb.StringValue {
	if x != nil {
		return x.Delimiter
	}
	return nil
}

func (x *ContactImportTemplate) GetQuote() *wrapperspb.StringValue {
	if x != nil {
		return x.Quote
	}
	return nil
}

func (x *ContactImportTemplate) GetIsFixedWidth() bool {
	if x != nil {
		return x.IsFixedWidth
	}
	return false
}

func (x *ContactImportTemplate) GetDfcSid01() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid01
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid02() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid02
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid03() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid03
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid04() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid04
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid05() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid05
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid06() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid06
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid07() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid07
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid08() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid08
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid09() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid09
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid10() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid10
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid11() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid11
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid12() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid12
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid13() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid13
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid14() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid14
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid15() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid15
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid16() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid16
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid17() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid17
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid18() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid18
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid19() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid19
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid20() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid20
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid21() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid21
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid22() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid22
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid23() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid23
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid24() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid24
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid25() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid25
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid26() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid26
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid27() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid27
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid28() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid28
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid29() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid29
	}
	return nil
}

func (x *ContactImportTemplate) GetDfcSid30() *wrapperspb.Int32Value {
	if x != nil {
		return x.DfcSid30
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength01() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength01
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength02() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength02
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength03() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength03
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength04() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength04
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength05() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength05
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength06() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength06
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength07() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength07
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength08() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength08
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength09() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength09
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength10() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength10
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength11() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength11
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength12() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength12
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength13() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength13
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength14() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength14
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength15() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength15
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength16() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength16
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength17() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength17
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength18() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength18
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength19() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength19
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength20() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength20
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength21() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength21
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength22() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength22
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength23() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength23
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength24() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength24
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength25() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength25
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength26() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength26
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength27() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength27
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength28() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength28
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength29() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength29
	}
	return nil
}

func (x *ContactImportTemplate) GetFieldLength30() *wrapperspb.Int32Value {
	if x != nil {
		return x.FieldLength30
	}
	return nil
}

func (x *ContactImportTemplate) GetTemplateNumber() int32 {
	if x != nil {
		return x.TemplateNumber
	}
	return 0
}

func (x *ContactImportTemplate) GetExcludeFirstRow() *wrapperspb.BoolValue {
	if x != nil {
		return x.ExcludeFirstRow
	}
	return nil
}

type ListContactImportTemplatesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListContactImportTemplatesReq) Reset() {
	*x = ListContactImportTemplatesReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[204]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListContactImportTemplatesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContactImportTemplatesReq) ProtoMessage() {}

func (x *ListContactImportTemplatesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[204]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContactImportTemplatesReq.ProtoReflect.Descriptor instead.
func (*ListContactImportTemplatesReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{204}
}

type ListContactImportTemplatesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactImportTemplate []*ContactImportTemplate `protobuf:"bytes,1,rep,name=contact_import_template,json=contactImportTemplate,proto3" json:"contact_import_template,omitempty"`
}

func (x *ListContactImportTemplatesRes) Reset() {
	*x = ListContactImportTemplatesRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[205]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListContactImportTemplatesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContactImportTemplatesRes) ProtoMessage() {}

func (x *ListContactImportTemplatesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[205]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContactImportTemplatesRes.ProtoReflect.Descriptor instead.
func (*ListContactImportTemplatesRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{205}
}

func (x *ListContactImportTemplatesRes) GetContactImportTemplate() []*ContactImportTemplate {
	if x != nil {
		return x.ContactImportTemplate
	}
	return nil
}

type UpdatePreviewRecordToFinishedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentSessionSid int64 `protobuf:"varint,3,opt,name=agent_session_sid,json=agentSessionSid,proto3" json:"agent_session_sid,omitempty"`
	TaskSid         int64 `protobuf:"varint,4,opt,name=task_sid,json=taskSid,proto3" json:"task_sid,omitempty"`
}

func (x *UpdatePreviewRecordToFinishedReq) Reset() {
	*x = UpdatePreviewRecordToFinishedReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[206]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePreviewRecordToFinishedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePreviewRecordToFinishedReq) ProtoMessage() {}

func (x *UpdatePreviewRecordToFinishedReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[206]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePreviewRecordToFinishedReq.ProtoReflect.Descriptor instead.
func (*UpdatePreviewRecordToFinishedReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{206}
}

func (x *UpdatePreviewRecordToFinishedReq) GetAgentSessionSid() int64 {
	if x != nil {
		return x.AgentSessionSid
	}
	return 0
}

func (x *UpdatePreviewRecordToFinishedReq) GetTaskSid() int64 {
	if x != nil {
		return x.TaskSid
	}
	return 0
}

type UpdatePreviewRecordToFinishedRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePreviewRecordToFinishedRes) Reset() {
	*x = UpdatePreviewRecordToFinishedRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[207]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePreviewRecordToFinishedRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePreviewRecordToFinishedRes) ProtoMessage() {}

func (x *UpdatePreviewRecordToFinishedRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[207]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePreviewRecordToFinishedRes.ProtoReflect.Descriptor instead.
func (*UpdatePreviewRecordToFinishedRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{207}
}

type UpdateAgentHuntGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HuntGroupSid int64  `protobuf:"varint,3,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	UserId       string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UpdateAgentHuntGroupReq) Reset() {
	*x = UpdateAgentHuntGroupReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[208]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAgentHuntGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentHuntGroupReq) ProtoMessage() {}

func (x *UpdateAgentHuntGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[208]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentHuntGroupReq.ProtoReflect.Descriptor instead.
func (*UpdateAgentHuntGroupReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{208}
}

func (x *UpdateAgentHuntGroupReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *UpdateAgentHuntGroupReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UpdateAgentHuntGroupRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAgentHuntGroupRes) Reset() {
	*x = UpdateAgentHuntGroupRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[209]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAgentHuntGroupRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentHuntGroupRes) ProtoMessage() {}

func (x *UpdateAgentHuntGroupRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[209]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentHuntGroupRes.ProtoReflect.Descriptor instead.
func (*UpdateAgentHuntGroupRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{209}
}

type MultiAgentHuntGroupAssignmentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds      []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	HuntGroupSid int64    `protobuf:"varint,2,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
}

func (x *MultiAgentHuntGroupAssignmentReq) Reset() {
	*x = MultiAgentHuntGroupAssignmentReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[210]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiAgentHuntGroupAssignmentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiAgentHuntGroupAssignmentReq) ProtoMessage() {}

func (x *MultiAgentHuntGroupAssignmentReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[210]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiAgentHuntGroupAssignmentReq.ProtoReflect.Descriptor instead.
func (*MultiAgentHuntGroupAssignmentReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{210}
}

func (x *MultiAgentHuntGroupAssignmentReq) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *MultiAgentHuntGroupAssignmentReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

type MultiAgentHuntGroupAssignmentRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MultiAgentHuntGroupAssignmentRes) Reset() {
	*x = MultiAgentHuntGroupAssignmentRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[211]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiAgentHuntGroupAssignmentRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiAgentHuntGroupAssignmentRes) ProtoMessage() {}

func (x *MultiAgentHuntGroupAssignmentRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[211]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiAgentHuntGroupAssignmentRes.ProtoReflect.Descriptor instead.
func (*MultiAgentHuntGroupAssignmentRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{211}
}

type GetAgentProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentSid int64 `protobuf:"varint,2,opt,name=agent_sid,json=agentSid,proto3" json:"agent_sid,omitempty"`
}

func (x *GetAgentProfileReq) Reset() {
	*x = GetAgentProfileReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[212]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAgentProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentProfileReq) ProtoMessage() {}

func (x *GetAgentProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[212]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentProfileReq.ProtoReflect.Descriptor instead.
func (*GetAgentProfileReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{212}
}

func (x *GetAgentProfileReq) GetAgentSid() int64 {
	if x != nil {
		return x.AgentSid
	}
	return 0
}

// AgentProfile represents an agent profile.
type AgentProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
}

func (x *AgentProfile) Reset() {
	*x = AgentProfile{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[213]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentProfile) ProtoMessage() {}

func (x *AgentProfile) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[213]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentProfile.ProtoReflect.Descriptor instead.
func (*AgentProfile) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{213}
}

func (x *AgentProfile) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *AgentProfile) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

// RecalculateBillingReq represents the request message
// for method RecalculateBilling. The month field is
// an enum that can either be 0: the current month or
// 1: the previous month. The types field is a list of
// billing types (as defined by api.commons.RecalculateBillingType)
// that will be updated for recalculation.
type RecalculateBillingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month commons.RecalculateBillingMonth  `protobuf:"varint,1,opt,name=month,proto3,enum=api.commons.RecalculateBillingMonth" json:"month,omitempty"`
	Types []commons.RecalculateBillingType `protobuf:"varint,2,rep,packed,name=types,proto3,enum=api.commons.RecalculateBillingType" json:"types,omitempty"`
	OrgId string                           `protobuf:"bytes,3,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *RecalculateBillingReq) Reset() {
	*x = RecalculateBillingReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[214]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecalculateBillingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecalculateBillingReq) ProtoMessage() {}

func (x *RecalculateBillingReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[214]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecalculateBillingReq.ProtoReflect.Descriptor instead.
func (*RecalculateBillingReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{214}
}

func (x *RecalculateBillingReq) GetMonth() commons.RecalculateBillingMonth {
	if x != nil {
		return x.Month
	}
	return commons.RecalculateBillingMonth(0)
}

func (x *RecalculateBillingReq) GetTypes() []commons.RecalculateBillingType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *RecalculateBillingReq) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

// RecalculateBillingRes represents the response message for
// method RecalculateBilling. The field results contains a list of
// BillingResults with an entry for each billing type given on the request message.
// Each result message will contain the count of updated records for a type
// or an error message.
type RecalculateBillingRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RecalculateBillingRes_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *RecalculateBillingRes) Reset() {
	*x = RecalculateBillingRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[215]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecalculateBillingRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecalculateBillingRes) ProtoMessage() {}

func (x *RecalculateBillingRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[215]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecalculateBillingRes.ProtoReflect.Descriptor instead.
func (*RecalculateBillingRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{215}
}

func (x *RecalculateBillingRes) GetResults() []*RecalculateBillingRes_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

// Request message for the ListOutboundBroadcastTemplateData RPC.
type ListOutboundBroadcastTemplateDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListOutboundBroadcastTemplateDataReq) Reset() {
	*x = ListOutboundBroadcastTemplateDataReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[216]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOutboundBroadcastTemplateDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOutboundBroadcastTemplateDataReq) ProtoMessage() {}

func (x *ListOutboundBroadcastTemplateDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[216]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOutboundBroadcastTemplateDataReq.ProtoReflect.Descriptor instead.
func (*ListOutboundBroadcastTemplateDataReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{216}
}

// Response message for the ListOutboundBroadcastTemplateData RPC.
type ListOutboundBroadcastTemplateDataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of outbound broadcast templates found for the requesting client,
	// each entry will contain the data one of the templates found.
	Templates []*ListOutboundBroadcastTemplateDataRes_Data `protobuf:"bytes,1,rep,name=templates,proto3" json:"templates,omitempty"`
}

func (x *ListOutboundBroadcastTemplateDataRes) Reset() {
	*x = ListOutboundBroadcastTemplateDataRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[217]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOutboundBroadcastTemplateDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOutboundBroadcastTemplateDataRes) ProtoMessage() {}

func (x *ListOutboundBroadcastTemplateDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[217]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOutboundBroadcastTemplateDataRes.ProtoReflect.Descriptor instead.
func (*ListOutboundBroadcastTemplateDataRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{217}
}

func (x *ListOutboundBroadcastTemplateDataRes) GetTemplates() []*ListOutboundBroadcastTemplateDataRes_Data {
	if x != nil {
		return x.Templates
	}
	return nil
}

// Request message for the MultiAgentSkillAssignment RPC.
type MultiAgentSkillAssignmentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds []string       `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	Skills  []*SkillUpdate `protobuf:"bytes,3,rep,name=skills,proto3" json:"skills,omitempty"`
}

func (x *MultiAgentSkillAssignmentReq) Reset() {
	*x = MultiAgentSkillAssignmentReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[218]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiAgentSkillAssignmentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiAgentSkillAssignmentReq) ProtoMessage() {}

func (x *MultiAgentSkillAssignmentReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[218]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiAgentSkillAssignmentReq.ProtoReflect.Descriptor instead.
func (*MultiAgentSkillAssignmentReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{218}
}

func (x *MultiAgentSkillAssignmentReq) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *MultiAgentSkillAssignmentReq) GetSkills() []*SkillUpdate {
	if x != nil {
		return x.Skills
	}
	return nil
}

// Response message for the MultiAgentSkillAssignment RPC.
type MultiAgentSkillAssignmentRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MultiAgentSkillAssignmentRes) Reset() {
	*x = MultiAgentSkillAssignmentRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[219]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiAgentSkillAssignmentRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiAgentSkillAssignmentRes) ProtoMessage() {}

func (x *MultiAgentSkillAssignmentRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[219]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiAgentSkillAssignmentRes.ProtoReflect.Descriptor instead.
func (*MultiAgentSkillAssignmentRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{219}
}

// Response message for the MultiAgentSkillUnassignment RPC.
type MultiAgentSkillUnassignmentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds   []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	SkillSids []int64  `protobuf:"varint,2,rep,packed,name=skill_sids,json=skillSids,proto3" json:"skill_sids,omitempty"`
}

func (x *MultiAgentSkillUnassignmentReq) Reset() {
	*x = MultiAgentSkillUnassignmentReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[220]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiAgentSkillUnassignmentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiAgentSkillUnassignmentReq) ProtoMessage() {}

func (x *MultiAgentSkillUnassignmentReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[220]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiAgentSkillUnassignmentReq.ProtoReflect.Descriptor instead.
func (*MultiAgentSkillUnassignmentReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{220}
}

func (x *MultiAgentSkillUnassignmentReq) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *MultiAgentSkillUnassignmentReq) GetSkillSids() []int64 {
	if x != nil {
		return x.SkillSids
	}
	return nil
}

// Response message for the MultiAgentSkillUnassignment RPC.
type MultiAgentSkillUnassignmentRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MultiAgentSkillUnassignmentRes) Reset() {
	*x = MultiAgentSkillUnassignmentRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[221]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiAgentSkillUnassignmentRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiAgentSkillUnassignmentRes) ProtoMessage() {}

func (x *MultiAgentSkillUnassignmentRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[221]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiAgentSkillUnassignmentRes.ProtoReflect.Descriptor instead.
func (*MultiAgentSkillUnassignmentRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{221}
}

// Request message for the ListMAMAgentHuntGroupsByClientSid RPC.
type ListMAMAgentHuntGroupsByClientSidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListMAMAgentHuntGroupsByClientSidReq) Reset() {
	*x = ListMAMAgentHuntGroupsByClientSidReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[222]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMAMAgentHuntGroupsByClientSidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMAMAgentHuntGroupsByClientSidReq) ProtoMessage() {}

func (x *ListMAMAgentHuntGroupsByClientSidReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[222]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMAMAgentHuntGroupsByClientSidReq.ProtoReflect.Descriptor instead.
func (*ListMAMAgentHuntGroupsByClientSidReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{222}
}

// Response message for the ListMAMAgentHuntGroupsByClientSid RPC.
type ListMAMAgentHuntGroupsByClientSidRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HuntGroup []*HuntGroup `protobuf:"bytes,1,rep,name=hunt_group,json=huntGroup,proto3" json:"hunt_group,omitempty"`
}

func (x *ListMAMAgentHuntGroupsByClientSidRes) Reset() {
	*x = ListMAMAgentHuntGroupsByClientSidRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[223]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMAMAgentHuntGroupsByClientSidRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMAMAgentHuntGroupsByClientSidRes) ProtoMessage() {}

func (x *ListMAMAgentHuntGroupsByClientSidRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[223]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMAMAgentHuntGroupsByClientSidRes.ProtoReflect.Descriptor instead.
func (*ListMAMAgentHuntGroupsByClientSidRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{223}
}

func (x *ListMAMAgentHuntGroupsByClientSidRes) GetHuntGroup() []*HuntGroup {
	if x != nil {
		return x.HuntGroup
	}
	return nil
}

// Request message for the UpdateAgentSkills RPC.
type UpdateAgentSkillsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string         `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Skills []*SkillUpdate `protobuf:"bytes,2,rep,name=skills,proto3" json:"skills,omitempty"`
}

func (x *UpdateAgentSkillsReq) Reset() {
	*x = UpdateAgentSkillsReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[224]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAgentSkillsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentSkillsReq) ProtoMessage() {}

func (x *UpdateAgentSkillsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[224]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentSkillsReq.ProtoReflect.Descriptor instead.
func (*UpdateAgentSkillsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{224}
}

func (x *UpdateAgentSkillsReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateAgentSkillsReq) GetSkills() []*SkillUpdate {
	if x != nil {
		return x.Skills
	}
	return nil
}

// Entity message for UpdateAgentSkillsReq message
type SkillUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillSid int64 `protobuf:"varint,1,opt,name=skill_sid,json=skillSid,proto3" json:"skill_sid,omitempty"`
	Level    int64 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *SkillUpdate) Reset() {
	*x = SkillUpdate{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[225]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SkillUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillUpdate) ProtoMessage() {}

func (x *SkillUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[225]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillUpdate.ProtoReflect.Descriptor instead.
func (*SkillUpdate) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{225}
}

func (x *SkillUpdate) GetSkillSid() int64 {
	if x != nil {
		return x.SkillSid
	}
	return 0
}

func (x *SkillUpdate) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

// Response message for the UpdateAgentSkills RPC.
type UpdateAgentSkillsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAgentSkillsRes) Reset() {
	*x = UpdateAgentSkillsRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[226]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAgentSkillsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentSkillsRes) ProtoMessage() {}

func (x *UpdateAgentSkillsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[226]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentSkillsRes.ProtoReflect.Descriptor instead.
func (*UpdateAgentSkillsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{226}
}

// Request message for the ListTtsVoices RPC.
type ListTtsVoicesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTtsVoicesReq) Reset() {
	*x = ListTtsVoicesReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[227]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTtsVoicesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTtsVoicesReq) ProtoMessage() {}

func (x *ListTtsVoicesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[227]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTtsVoicesReq.ProtoReflect.Descriptor instead.
func (*ListTtsVoicesReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{227}
}

// Response message for the ListTtsVoices RPC.
type ListTtsVoicesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voices []*TtsVoice `protobuf:"bytes,1,rep,name=voices,proto3" json:"voices,omitempty"`
}

func (x *ListTtsVoicesRes) Reset() {
	*x = ListTtsVoicesRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[228]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTtsVoicesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTtsVoicesRes) ProtoMessage() {}

func (x *ListTtsVoicesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[228]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTtsVoicesRes.ProtoReflect.Descriptor instead.
func (*ListTtsVoicesRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{228}
}

func (x *ListTtsVoicesRes) GetVoices() []*TtsVoice {
	if x != nil {
		return x.Voices
	}
	return nil
}

// Entity message for ListTtsVoice RPC.
type TtsVoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TtsVoiceSid int64  `protobuf:"varint,1,opt,name=tts_voice_sid,json=ttsVoiceSid,proto3" json:"tts_voice_sid,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	ActualName  string `protobuf:"bytes,3,opt,name=actual_name,json=actualName,proto3" json:"actual_name,omitempty"`
	Port        int64  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *TtsVoice) Reset() {
	*x = TtsVoice{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[229]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TtsVoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TtsVoice) ProtoMessage() {}

func (x *TtsVoice) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[229]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TtsVoice.ProtoReflect.Descriptor instead.
func (*TtsVoice) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{229}
}

func (x *TtsVoice) GetTtsVoiceSid() int64 {
	if x != nil {
		return x.TtsVoiceSid
	}
	return 0
}

func (x *TtsVoice) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *TtsVoice) GetActualName() string {
	if x != nil {
		return x.ActualName
	}
	return ""
}

func (x *TtsVoice) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

// Request message for the CreateTtsVoice RPC.
type CreateTtsVoiceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActualName  string `protobuf:"bytes,1,opt,name=actual_name,json=actualName,proto3" json:"actual_name,omitempty"` // required
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Port        int64  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *CreateTtsVoiceReq) Reset() {
	*x = CreateTtsVoiceReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[230]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTtsVoiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTtsVoiceReq) ProtoMessage() {}

func (x *CreateTtsVoiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[230]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTtsVoiceReq.ProtoReflect.Descriptor instead.
func (*CreateTtsVoiceReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{230}
}

func (x *CreateTtsVoiceReq) GetActualName() string {
	if x != nil {
		return x.ActualName
	}
	return ""
}

func (x *CreateTtsVoiceReq) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CreateTtsVoiceReq) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

// Response message for the CreateTtsVoice RPC.
type CreateTtsVoiceRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateTtsVoiceRes) Reset() {
	*x = CreateTtsVoiceRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[231]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTtsVoiceRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTtsVoiceRes) ProtoMessage() {}

func (x *CreateTtsVoiceRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[231]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTtsVoiceRes.ProtoReflect.Descriptor instead.
func (*CreateTtsVoiceRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{231}
}

// Request message for the DeleteTtsVoice RPC.
type DeleteTtsVoiceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TtsVoiceSid int64 `protobuf:"varint,1,opt,name=tts_voice_sid,json=ttsVoiceSid,proto3" json:"tts_voice_sid,omitempty"`
}

func (x *DeleteTtsVoiceReq) Reset() {
	*x = DeleteTtsVoiceReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[232]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTtsVoiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTtsVoiceReq) ProtoMessage() {}

func (x *DeleteTtsVoiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[232]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTtsVoiceReq.ProtoReflect.Descriptor instead.
func (*DeleteTtsVoiceReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{232}
}

func (x *DeleteTtsVoiceReq) GetTtsVoiceSid() int64 {
	if x != nil {
		return x.TtsVoiceSid
	}
	return 0
}

// Response message for the DeleteTtsVoice RPC.
type DeleteTtsVoiceRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTtsVoiceRes) Reset() {
	*x = DeleteTtsVoiceRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[233]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTtsVoiceRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTtsVoiceRes) ProtoMessage() {}

func (x *DeleteTtsVoiceRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[233]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTtsVoiceRes.ProtoReflect.Descriptor instead.
func (*DeleteTtsVoiceRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{233}
}

// Entitiy message for ListCustomDataKeys
type CustomDataKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// client_properties_sid is generated from CreateCustomDataKey RPC
	ClientPropertiesSid int64 `protobuf:"varint,3,opt,name=client_properties_sid,json=clientPropertiesSid,proto3" json:"client_properties_sid,omitempty"`
}

func (x *CustomDataKey) Reset() {
	*x = CustomDataKey{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[234]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomDataKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDataKey) ProtoMessage() {}

func (x *CustomDataKey) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[234]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDataKey.ProtoReflect.Descriptor instead.
func (*CustomDataKey) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{234}
}

func (x *CustomDataKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CustomDataKey) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CustomDataKey) GetClientPropertiesSid() int64 {
	if x != nil {
		return x.ClientPropertiesSid
	}
	return 0
}

// Request message for the ListCustomDataKeys RPC
type ListCustomDataKeysReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListCustomDataKeysReq) Reset() {
	*x = ListCustomDataKeysReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[235]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCustomDataKeysReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCustomDataKeysReq) ProtoMessage() {}

func (x *ListCustomDataKeysReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[235]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCustomDataKeysReq.ProtoReflect.Descriptor instead.
func (*ListCustomDataKeysReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{235}
}

// Response message for the ListCustomDataKeys RPC
type ListCustomDataKeysRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataKeys []*CustomDataKey `protobuf:"bytes,1,rep,name=data_keys,json=dataKeys,proto3" json:"data_keys,omitempty"`
}

func (x *ListCustomDataKeysRes) Reset() {
	*x = ListCustomDataKeysRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[236]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCustomDataKeysRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCustomDataKeysRes) ProtoMessage() {}

func (x *ListCustomDataKeysRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[236]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCustomDataKeysRes.ProtoReflect.Descriptor instead.
func (*ListCustomDataKeysRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{236}
}

func (x *ListCustomDataKeysRes) GetDataKeys() []*CustomDataKey {
	if x != nil {
		return x.DataKeys
	}
	return nil
}

// Request message for the CreateCustomDataKey RPC
type CreateCustomDataKeyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataKey *CustomDataKey `protobuf:"bytes,1,opt,name=data_key,json=dataKey,proto3" json:"data_key,omitempty"`
}

func (x *CreateCustomDataKeyReq) Reset() {
	*x = CreateCustomDataKeyReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[237]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCustomDataKeyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCustomDataKeyReq) ProtoMessage() {}

func (x *CreateCustomDataKeyReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[237]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCustomDataKeyReq.ProtoReflect.Descriptor instead.
func (*CreateCustomDataKeyReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{237}
}

func (x *CreateCustomDataKeyReq) GetDataKey() *CustomDataKey {
	if x != nil {
		return x.DataKey
	}
	return nil
}

// Response message for the CreateCustomDataKey RPC
type CreateCustomDataKeyRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateCustomDataKeyRes) Reset() {
	*x = CreateCustomDataKeyRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[238]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCustomDataKeyRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCustomDataKeyRes) ProtoMessage() {}

func (x *CreateCustomDataKeyRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[238]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCustomDataKeyRes.ProtoReflect.Descriptor instead.
func (*CreateCustomDataKeyRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{238}
}

// Request message for DeleteCustomDataKey RPC
type DeleteCustomDataKeyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientPropertiesSid int64 `protobuf:"varint,1,opt,name=client_properties_sid,json=clientPropertiesSid,proto3" json:"client_properties_sid,omitempty"`
}

func (x *DeleteCustomDataKeyReq) Reset() {
	*x = DeleteCustomDataKeyReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[239]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCustomDataKeyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCustomDataKeyReq) ProtoMessage() {}

func (x *DeleteCustomDataKeyReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[239]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCustomDataKeyReq.ProtoReflect.Descriptor instead.
func (*DeleteCustomDataKeyReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{239}
}

func (x *DeleteCustomDataKeyReq) GetClientPropertiesSid() int64 {
	if x != nil {
		return x.ClientPropertiesSid
	}
	return 0
}

// Response message for DeleteCustomDataKey RPC
type DeleteCustomDataKeyRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCustomDataKeyRes) Reset() {
	*x = DeleteCustomDataKeyRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[240]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCustomDataKeyRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCustomDataKeyRes) ProtoMessage() {}

func (x *DeleteCustomDataKeyRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[240]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCustomDataKeyRes.ProtoReflect.Descriptor instead.
func (*DeleteCustomDataKeyRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{240}
}

// Request message for the UpdateCustomDataKey RPC
type UpdateCustomDataKeyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataKey *CustomDataKey `protobuf:"bytes,1,opt,name=dataKey,proto3" json:"dataKey,omitempty"`
}

func (x *UpdateCustomDataKeyReq) Reset() {
	*x = UpdateCustomDataKeyReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[241]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCustomDataKeyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomDataKeyReq) ProtoMessage() {}

func (x *UpdateCustomDataKeyReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[241]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomDataKeyReq.ProtoReflect.Descriptor instead.
func (*UpdateCustomDataKeyReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{241}
}

func (x *UpdateCustomDataKeyReq) GetDataKey() *CustomDataKey {
	if x != nil {
		return x.DataKey
	}
	return nil
}

// Response message for the UpdateCustomDataKey RPC
type UpdateCustomDataKeyRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCustomDataKeyRes) Reset() {
	*x = UpdateCustomDataKeyRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[242]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCustomDataKeyRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomDataKeyRes) ProtoMessage() {}

func (x *UpdateCustomDataKeyRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[242]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomDataKeyRes.ProtoReflect.Descriptor instead.
func (*UpdateCustomDataKeyRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{242}
}

type Extension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PbxExtensionSid int64  `protobuf:"varint,1,opt,name=pbx_extension_sid,json=pbxExtensionSid,proto3" json:"pbx_extension_sid,omitempty"`
	ExtensionNumber string `protobuf:"bytes,2,opt,name=extension_number,json=extensionNumber,proto3" json:"extension_number,omitempty"` // 3 numerical digits
	// Types that are assignable to ExtensionType:
	//
	//	*Extension_Agent_
	//	*Extension_HuntGroup_
	ExtensionType isExtension_ExtensionType `protobuf_oneof:"extension_type"`
	AgentAccess   bool                      `protobuf:"varint,5,opt,name=agent_access,json=agentAccess,proto3" json:"agent_access,omitempty"`
	Email         *Extension_Email          `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	Greeting      string                    `protobuf:"bytes,8,opt,name=greeting,proto3" json:"greeting,omitempty"`
	HasGreeting   bool                      `protobuf:"varint,9,opt,name=has_greeting,json=hasGreeting,proto3" json:"has_greeting,omitempty"`
	// unheard_messages is the count of all of the unheard
	// voicemail messages for the extension.
	UnheardMessages int32 `protobuf:"varint,10,opt,name=unheard_messages,json=unheardMessages,proto3" json:"unheard_messages,omitempty"`
	// total_messages is the count of every voicemail message
	// for the extension (heard + unheard).
	TotalMessages int32 `protobuf:"varint,11,opt,name=total_messages,json=totalMessages,proto3" json:"total_messages,omitempty"`
}

func (x *Extension) Reset() {
	*x = Extension{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[243]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Extension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extension) ProtoMessage() {}

func (x *Extension) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[243]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extension.ProtoReflect.Descriptor instead.
func (*Extension) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{243}
}

func (x *Extension) GetPbxExtensionSid() int64 {
	if x != nil {
		return x.PbxExtensionSid
	}
	return 0
}

func (x *Extension) GetExtensionNumber() string {
	if x != nil {
		return x.ExtensionNumber
	}
	return ""
}

func (m *Extension) GetExtensionType() isExtension_ExtensionType {
	if m != nil {
		return m.ExtensionType
	}
	return nil
}

func (x *Extension) GetAgent() *Extension_Agent {
	if x, ok := x.GetExtensionType().(*Extension_Agent_); ok {
		return x.Agent
	}
	return nil
}

func (x *Extension) GetHuntGroup() *Extension_HuntGroup {
	if x, ok := x.GetExtensionType().(*Extension_HuntGroup_); ok {
		return x.HuntGroup
	}
	return nil
}

func (x *Extension) GetAgentAccess() bool {
	if x != nil {
		return x.AgentAccess
	}
	return false
}

func (x *Extension) GetEmail() *Extension_Email {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *Extension) GetGreeting() string {
	if x != nil {
		return x.Greeting
	}
	return ""
}

func (x *Extension) GetHasGreeting() bool {
	if x != nil {
		return x.HasGreeting
	}
	return false
}

func (x *Extension) GetUnheardMessages() int32 {
	if x != nil {
		return x.UnheardMessages
	}
	return 0
}

func (x *Extension) GetTotalMessages() int32 {
	if x != nil {
		return x.TotalMessages
	}
	return 0
}

type isExtension_ExtensionType interface {
	isExtension_ExtensionType()
}

type Extension_Agent_ struct {
	Agent *Extension_Agent `protobuf:"bytes,3,opt,name=agent,proto3,oneof"`
}

type Extension_HuntGroup_ struct {
	HuntGroup *Extension_HuntGroup `protobuf:"bytes,4,opt,name=hunt_group,json=huntGroup,proto3,oneof"`
}

func (*Extension_Agent_) isExtension_ExtensionType() {}

func (*Extension_HuntGroup_) isExtension_ExtensionType() {}

type ListAgentExtensionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAgentExtensionsReq) Reset() {
	*x = ListAgentExtensionsReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[244]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentExtensionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentExtensionsReq) ProtoMessage() {}

func (x *ListAgentExtensionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[244]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentExtensionsReq.ProtoReflect.Descriptor instead.
func (*ListAgentExtensionsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{244}
}

type ListAgentExtensionsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extensions []*Extension `protobuf:"bytes,1,rep,name=extensions,proto3" json:"extensions,omitempty"`
}

func (x *ListAgentExtensionsRes) Reset() {
	*x = ListAgentExtensionsRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[245]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentExtensionsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentExtensionsRes) ProtoMessage() {}

func (x *ListAgentExtensionsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[245]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentExtensionsRes.ProtoReflect.Descriptor instead.
func (*ListAgentExtensionsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{245}
}

func (x *ListAgentExtensionsRes) GetExtensions() []*Extension {
	if x != nil {
		return x.Extensions
	}
	return nil
}

type ListHuntGroupExtensionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListHuntGroupExtensionsReq) Reset() {
	*x = ListHuntGroupExtensionsReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[246]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHuntGroupExtensionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHuntGroupExtensionsReq) ProtoMessage() {}

func (x *ListHuntGroupExtensionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[246]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHuntGroupExtensionsReq.ProtoReflect.Descriptor instead.
func (*ListHuntGroupExtensionsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{246}
}

type ListHuntGroupExtensionsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extensions []*Extension `protobuf:"bytes,1,rep,name=extensions,proto3" json:"extensions,omitempty"`
}

func (x *ListHuntGroupExtensionsRes) Reset() {
	*x = ListHuntGroupExtensionsRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[247]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHuntGroupExtensionsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHuntGroupExtensionsRes) ProtoMessage() {}

func (x *ListHuntGroupExtensionsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[247]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHuntGroupExtensionsRes.ProtoReflect.Descriptor instead.
func (*ListHuntGroupExtensionsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{247}
}

func (x *ListHuntGroupExtensionsRes) GetExtensions() []*Extension {
	if x != nil {
		return x.Extensions
	}
	return nil
}

type CreateExtensionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtensionMessage *Extension `protobuf:"bytes,1,opt,name=extension_message,json=extensionMessage,proto3" json:"extension_message,omitempty"`
}

func (x *CreateExtensionReq) Reset() {
	*x = CreateExtensionReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[248]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateExtensionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExtensionReq) ProtoMessage() {}

func (x *CreateExtensionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[248]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExtensionReq.ProtoReflect.Descriptor instead.
func (*CreateExtensionReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{248}
}

func (x *CreateExtensionReq) GetExtensionMessage() *Extension {
	if x != nil {
		return x.ExtensionMessage
	}
	return nil
}

type CreateExtensionRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateExtensionRes) Reset() {
	*x = CreateExtensionRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[249]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateExtensionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExtensionRes) ProtoMessage() {}

func (x *CreateExtensionRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[249]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExtensionRes.ProtoReflect.Descriptor instead.
func (*CreateExtensionRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{249}
}

type UpdateExtensionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtensionMessage *Extension `protobuf:"bytes,1,opt,name=extension_message,json=extensionMessage,proto3" json:"extension_message,omitempty"`
}

func (x *UpdateExtensionReq) Reset() {
	*x = UpdateExtensionReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[250]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateExtensionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExtensionReq) ProtoMessage() {}

func (x *UpdateExtensionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[250]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExtensionReq.ProtoReflect.Descriptor instead.
func (*UpdateExtensionReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{250}
}

func (x *UpdateExtensionReq) GetExtensionMessage() *Extension {
	if x != nil {
		return x.ExtensionMessage
	}
	return nil
}

type UpdateExtensionRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateExtensionRes) Reset() {
	*x = UpdateExtensionRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[251]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateExtensionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExtensionRes) ProtoMessage() {}

func (x *UpdateExtensionRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[251]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExtensionRes.ProtoReflect.Descriptor instead.
func (*UpdateExtensionRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{251}
}

type DeleteExtensionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PbxExtensionSid int64 `protobuf:"varint,1,opt,name=pbx_extension_sid,json=pbxExtensionSid,proto3" json:"pbx_extension_sid,omitempty"`
}

func (x *DeleteExtensionReq) Reset() {
	*x = DeleteExtensionReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[252]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteExtensionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExtensionReq) ProtoMessage() {}

func (x *DeleteExtensionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[252]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExtensionReq.ProtoReflect.Descriptor instead.
func (*DeleteExtensionReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{252}
}

func (x *DeleteExtensionReq) GetPbxExtensionSid() int64 {
	if x != nil {
		return x.PbxExtensionSid
	}
	return 0
}

type DeleteExtensionRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteExtensionRes) Reset() {
	*x = DeleteExtensionRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[253]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteExtensionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExtensionRes) ProtoMessage() {}

func (x *DeleteExtensionRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[253]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExtensionRes.ProtoReflect.Descriptor instead.
func (*DeleteExtensionRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{253}
}

type GetActivityLogHistoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DayFilter int32  `protobuf:"varint,1,opt,name=day_filter,json=dayFilter,proto3" json:"day_filter,omitempty"`
	UserName  string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	OrgId     string `protobuf:"bytes,4,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *GetActivityLogHistoryReq) Reset() {
	*x = GetActivityLogHistoryReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[254]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActivityLogHistoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityLogHistoryReq) ProtoMessage() {}

func (x *GetActivityLogHistoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[254]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityLogHistoryReq.ProtoReflect.Descriptor instead.
func (*GetActivityLogHistoryReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{254}
}

func (x *GetActivityLogHistoryReq) GetDayFilter() int32 {
	if x != nil {
		return x.DayFilter
	}
	return 0
}

func (x *GetActivityLogHistoryReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *GetActivityLogHistoryReq) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type GetActivityLogHistoryRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityLogs []*ActivityLog `protobuf:"bytes,1,rep,name=activity_logs,json=activityLogs,proto3" json:"activity_logs,omitempty"`
}

func (x *GetActivityLogHistoryRes) Reset() {
	*x = GetActivityLogHistoryRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[255]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActivityLogHistoryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityLogHistoryRes) ProtoMessage() {}

func (x *GetActivityLogHistoryRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[255]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityLogHistoryRes.ProtoReflect.Descriptor instead.
func (*GetActivityLogHistoryRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{255}
}

func (x *GetActivityLogHistoryRes) GetActivityLogs() []*ActivityLog {
	if x != nil {
		return x.ActivityLogs
	}
	return nil
}

type ActivityLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName      *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	OriginationIp *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=origination_ip,json=originationIp,proto3" json:"origination_ip,omitempty"`
	ActionDate    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=action_date,json=actionDate,proto3" json:"action_date,omitempty"`
	Action        *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	Notes         *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *ActivityLog) Reset() {
	*x = ActivityLog{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[256]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityLog) ProtoMessage() {}

func (x *ActivityLog) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[256]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityLog.ProtoReflect.Descriptor instead.
func (*ActivityLog) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{256}
}

func (x *ActivityLog) GetUserName() *wrapperspb.StringValue {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *ActivityLog) GetOriginationIp() *wrapperspb.StringValue {
	if x != nil {
		return x.OriginationIp
	}
	return nil
}

func (x *ActivityLog) GetActionDate() *wrapperspb.StringValue {
	if x != nil {
		return x.ActionDate
	}
	return nil
}

func (x *ActivityLog) GetAction() *wrapperspb.StringValue {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *ActivityLog) GetNotes() *wrapperspb.StringValue {
	if x != nil {
		return x.Notes
	}
	return nil
}

type ListSkillsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filters the response to only contain skills with the
	// given types. Leaving this field empty will return
	// all skill types. The PBX SkillType is not
	// supported and will cause an error if present.
	// Should use AGENT_PBX or HUNT_GROUP_PBX.
	TypeFilters []commons.SkillType_Enum `protobuf:"varint,1,rep,packed,name=type_filters,json=typeFilters,proto3,enum=api.commons.SkillType_Enum" json:"type_filters,omitempty"`
}

func (x *ListSkillsReq) Reset() {
	*x = ListSkillsReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[257]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSkillsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSkillsReq) ProtoMessage() {}

func (x *ListSkillsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[257]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSkillsReq.ProtoReflect.Descriptor instead.
func (*ListSkillsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{257}
}

func (x *ListSkillsReq) GetTypeFilters() []commons.SkillType_Enum {
	if x != nil {
		return x.TypeFilters
	}
	return nil
}

type ListSkillsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Skills []*P3Skill `protobuf:"bytes,1,rep,name=skills,proto3" json:"skills,omitempty"`
}

func (x *ListSkillsRes) Reset() {
	*x = ListSkillsRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[258]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSkillsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSkillsRes) ProtoMessage() {}

func (x *ListSkillsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[258]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSkillsRes.ProtoReflect.Descriptor instead.
func (*ListSkillsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{258}
}

func (x *ListSkillsRes) GetSkills() []*P3Skill {
	if x != nil {
		return x.Skills
	}
	return nil
}

type P3Skill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region      string                 `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	P3Id        string                 `protobuf:"bytes,2,opt,name=p3_id,json=p3Id,proto3" json:"p3_id,omitempty"`
	Name        string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Type        commons.SkillType_Enum `protobuf:"varint,5,opt,name=type,proto3,enum=api.commons.SkillType_Enum" json:"type,omitempty"`
}

func (x *P3Skill) Reset() {
	*x = P3Skill{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[259]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *P3Skill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P3Skill) ProtoMessage() {}

func (x *P3Skill) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[259]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P3Skill.ProtoReflect.Descriptor instead.
func (*P3Skill) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{259}
}

func (x *P3Skill) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *P3Skill) GetP3Id() string {
	if x != nil {
		return x.P3Id
	}
	return ""
}

func (x *P3Skill) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *P3Skill) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *P3Skill) GetType() commons.SkillType_Enum {
	if x != nil {
		return x.Type
	}
	return commons.SkillType_Enum(0)
}

// Request message for listing schedule rules (ListScheduleRules).
type ListScheduleRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListScheduleRulesRequest) Reset() {
	*x = ListScheduleRulesRequest{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[260]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListScheduleRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScheduleRulesRequest) ProtoMessage() {}

func (x *ListScheduleRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[260]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScheduleRulesRequest.ProtoReflect.Descriptor instead.
func (*ListScheduleRulesRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{260}
}

// Response message for listing schedule rules (ListScheduleRules).
type ListScheduleRulesResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleRules []*ScheduleRule `protobuf:"bytes,1,rep,name=schedule_rules,json=scheduleRules,proto3" json:"schedule_rules,omitempty"` // Rules that define when calls may be executed.  This mimicks the 'schedule_rule' table in Skunk.
}

func (x *ListScheduleRulesResult) Reset() {
	*x = ListScheduleRulesResult{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[261]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListScheduleRulesResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScheduleRulesResult) ProtoMessage() {}

func (x *ListScheduleRulesResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[261]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScheduleRulesResult.ProtoReflect.Descriptor instead.
func (*ListScheduleRulesResult) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{261}
}

func (x *ListScheduleRulesResult) GetScheduleRules() []*ScheduleRule {
	if x != nil {
		return x.ScheduleRules
	}
	return nil
}

// Schedule Rule after the Skunk database
type ScheduleRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleRuleSid int64                   `protobuf:"varint,1,opt,name=schedule_rule_sid,json=scheduleRuleSid,proto3" json:"schedule_rule_sid,omitempty"` // The 'sid' for the rule in the Skunk table.
	ClientSid       *wrapperspb.Int64Value  `protobuf:"bytes,2,opt,name=client_sid,json=clientSid,proto3" json:"client_sid,omitempty"`                      // The 'sid' for the related 'client' table in Skunk.
	Name            *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                 // The name of the rule.
	RuleTimeZone    *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=rule_time_zone,json=ruleTimeZone,proto3" json:"rule_time_zone,omitempty"`           // The time zone the rule is to be applied to.
}

func (x *ScheduleRule) Reset() {
	*x = ScheduleRule{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[262]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleRule) ProtoMessage() {}

func (x *ScheduleRule) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[262]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleRule.ProtoReflect.Descriptor instead.
func (*ScheduleRule) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{262}
}

func (x *ScheduleRule) GetScheduleRuleSid() int64 {
	if x != nil {
		return x.ScheduleRuleSid
	}
	return 0
}

func (x *ScheduleRule) GetClientSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.ClientSid
	}
	return nil
}

func (x *ScheduleRule) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ScheduleRule) GetRuleTimeZone() *wrapperspb.StringValue {
	if x != nil {
		return x.RuleTimeZone
	}
	return nil
}

// Request message for listing sms numbers
type ListSmsNumbersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListSmsNumbersReq) Reset() {
	*x = ListSmsNumbersReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[263]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmsNumbersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmsNumbersReq) ProtoMessage() {}

func (x *ListSmsNumbersReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[263]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmsNumbersReq.ProtoReflect.Descriptor instead.
func (*ListSmsNumbersReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{263}
}

// Response message for listing sms numbers
type ListSmsNumbersRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of sms numbers
	SmsNumbers []*commons.SmsNumber `protobuf:"bytes,1,rep,name=sms_numbers,json=smsNumbers,proto3" json:"sms_numbers,omitempty"`
}

func (x *ListSmsNumbersRes) Reset() {
	*x = ListSmsNumbersRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[264]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmsNumbersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmsNumbersRes) ProtoMessage() {}

func (x *ListSmsNumbersRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[264]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmsNumbersRes.ProtoReflect.Descriptor instead.
func (*ListSmsNumbersRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{264}
}

func (x *ListSmsNumbersRes) GetSmsNumbers() []*commons.SmsNumber {
	if x != nil {
		return x.SmsNumbers
	}
	return nil
}

type GetMailMergeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientSid    int64          `protobuf:"varint,1,opt,name=client_sid,json=clientSid,proto3" json:"client_sid,omitempty"`
	AgentSid     int64          `protobuf:"varint,2,opt,name=agent_sid,json=agentSid,proto3" json:"agent_sid,omitempty"`
	Data         *MailMergeData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	HuntGroupSid int64          `protobuf:"varint,4,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
}

func (x *GetMailMergeReq) Reset() {
	*x = GetMailMergeReq{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[265]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMailMergeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMailMergeReq) ProtoMessage() {}

func (x *GetMailMergeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[265]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMailMergeReq.ProtoReflect.Descriptor instead.
func (*GetMailMergeReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{265}
}

func (x *GetMailMergeReq) GetClientSid() int64 {
	if x != nil {
		return x.ClientSid
	}
	return 0
}

func (x *GetMailMergeReq) GetAgentSid() int64 {
	if x != nil {
		return x.AgentSid
	}
	return 0
}

func (x *GetMailMergeReq) GetData() *MailMergeData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetMailMergeReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

type GetMailMergeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentInfo            map[string]string `protobuf:"bytes,1,rep,name=agent_info,json=agentInfo,proto3" json:"agent_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CustomData           map[string]string `protobuf:"bytes,2,rep,name=custom_data,json=customData,proto3" json:"custom_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DataCollect          map[string]string `protobuf:"bytes,3,rep,name=data_collect,json=dataCollect,proto3" json:"data_collect,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DataDip              map[string]string `protobuf:"bytes,4,rep,name=data_dip,json=dataDip,proto3" json:"data_dip,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Ivr                  map[string]string `protobuf:"bytes,5,rep,name=ivr,proto3" json:"ivr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ScheduledCall        map[string]string `protobuf:"bytes,6,rep,name=scheduled_call,json=scheduledCall,proto3" json:"scheduled_call,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tts                  map[string]string `protobuf:"bytes,7,rep,name=tts,proto3" json:"tts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ZipPhoneMetadata     map[string]string `protobuf:"bytes,8,rep,name=zip_phone_metadata,json=zipPhoneMetadata,proto3" json:"zip_phone_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	JourneyRetrievedData map[string]string `protobuf:"bytes,9,rep,name=journey_retrieved_data,json=journeyRetrievedData,proto3" json:"journey_retrieved_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IntegrationData      map[string]string `protobuf:"bytes,10,rep,name=integration_data,json=integrationData,proto3" json:"integration_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetMailMergeRes) Reset() {
	*x = GetMailMergeRes{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[266]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMailMergeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMailMergeRes) ProtoMessage() {}

func (x *GetMailMergeRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[266]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMailMergeRes.ProtoReflect.Descriptor instead.
func (*GetMailMergeRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{266}
}

func (x *GetMailMergeRes) GetAgentInfo() map[string]string {
	if x != nil {
		return x.AgentInfo
	}
	return nil
}

func (x *GetMailMergeRes) GetCustomData() map[string]string {
	if x != nil {
		return x.CustomData
	}
	return nil
}

func (x *GetMailMergeRes) GetDataCollect() map[string]string {
	if x != nil {
		return x.DataCollect
	}
	return nil
}

func (x *GetMailMergeRes) GetDataDip() map[string]string {
	if x != nil {
		return x.DataDip
	}
	return nil
}

func (x *GetMailMergeRes) GetIvr() map[string]string {
	if x != nil {
		return x.Ivr
	}
	return nil
}

func (x *GetMailMergeRes) GetScheduledCall() map[string]string {
	if x != nil {
		return x.ScheduledCall
	}
	return nil
}

func (x *GetMailMergeRes) GetTts() map[string]string {
	if x != nil {
		return x.Tts
	}
	return nil
}

func (x *GetMailMergeRes) GetZipPhoneMetadata() map[string]string {
	if x != nil {
		return x.ZipPhoneMetadata
	}
	return nil
}

func (x *GetMailMergeRes) GetJourneyRetrievedData() map[string]string {
	if x != nil {
		return x.JourneyRetrievedData
	}
	return nil
}

func (x *GetMailMergeRes) GetIntegrationData() map[string]string {
	if x != nil {
		return x.IntegrationData
	}
	return nil
}

type ListPBXExtensionsRes_AgentExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PbxExtension     string         `protobuf:"bytes,1,opt,name=pbx_extension,json=pbxExtension,proto3" json:"pbx_extension,omitempty"`
	GreetingLocation string         `protobuf:"bytes,2,opt,name=greeting_location,json=greetingLocation,proto3" json:"greeting_location,omitempty"`
	Email            *EmailResponse `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	AgentName        string         `protobuf:"bytes,4,opt,name=agent_name,json=agentName,proto3" json:"agent_name,omitempty"`
	HasGreeting      bool           `protobuf:"varint,5,opt,name=has_greeting,json=hasGreeting,proto3" json:"has_greeting,omitempty"`
}

func (x *ListPBXExtensionsRes_AgentExtension) Reset() {
	*x = ListPBXExtensionsRes_AgentExtension{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[268]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPBXExtensionsRes_AgentExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPBXExtensionsRes_AgentExtension) ProtoMessage() {}

func (x *ListPBXExtensionsRes_AgentExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[268]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPBXExtensionsRes_AgentExtension.ProtoReflect.Descriptor instead.
func (*ListPBXExtensionsRes_AgentExtension) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{48, 0}
}

func (x *ListPBXExtensionsRes_AgentExtension) GetPbxExtension() string {
	if x != nil {
		return x.PbxExtension
	}
	return ""
}

func (x *ListPBXExtensionsRes_AgentExtension) GetGreetingLocation() string {
	if x != nil {
		return x.GreetingLocation
	}
	return ""
}

func (x *ListPBXExtensionsRes_AgentExtension) GetEmail() *EmailResponse {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *ListPBXExtensionsRes_AgentExtension) GetAgentName() string {
	if x != nil {
		return x.AgentName
	}
	return ""
}

func (x *ListPBXExtensionsRes_AgentExtension) GetHasGreeting() bool {
	if x != nil {
		return x.HasGreeting
	}
	return false
}

type ListPBXExtensionsRes_HuntGroupExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PbxExtension     string         `protobuf:"bytes,1,opt,name=pbx_extension,json=pbxExtension,proto3" json:"pbx_extension,omitempty"`
	GreetingLocation string         `protobuf:"bytes,2,opt,name=greeting_location,json=greetingLocation,proto3" json:"greeting_location,omitempty"`
	Email            *EmailResponse `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	HuntGroupName    string         `protobuf:"bytes,4,opt,name=hunt_group_name,json=huntGroupName,proto3" json:"hunt_group_name,omitempty"`
	HasGreeting      bool           `protobuf:"varint,5,opt,name=has_greeting,json=hasGreeting,proto3" json:"has_greeting,omitempty"`
}

func (x *ListPBXExtensionsRes_HuntGroupExtension) Reset() {
	*x = ListPBXExtensionsRes_HuntGroupExtension{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[269]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPBXExtensionsRes_HuntGroupExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPBXExtensionsRes_HuntGroupExtension) ProtoMessage() {}

func (x *ListPBXExtensionsRes_HuntGroupExtension) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[269]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPBXExtensionsRes_HuntGroupExtension.ProtoReflect.Descriptor instead.
func (*ListPBXExtensionsRes_HuntGroupExtension) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{48, 1}
}

func (x *ListPBXExtensionsRes_HuntGroupExtension) GetPbxExtension() string {
	if x != nil {
		return x.PbxExtension
	}
	return ""
}

func (x *ListPBXExtensionsRes_HuntGroupExtension) GetGreetingLocation() string {
	if x != nil {
		return x.GreetingLocation
	}
	return ""
}

func (x *ListPBXExtensionsRes_HuntGroupExtension) GetEmail() *EmailResponse {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *ListPBXExtensionsRes_HuntGroupExtension) GetHuntGroupName() string {
	if x != nil {
		return x.HuntGroupName
	}
	return ""
}

func (x *ListPBXExtensionsRes_HuntGroupExtension) GetHasGreeting() bool {
	if x != nil {
		return x.HasGreeting
	}
	return false
}

type ListAgentCallHistoryRes_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallSid      int64                 `protobuf:"varint,1,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	ScheduleTime string                `protobuf:"bytes,2,opt,name=schedule_time,json=scheduleTime,proto3" json:"schedule_time,omitempty"`
	CallType     commons.CallType_Enum `protobuf:"varint,3,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
	PhoneNumber  string                `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	CallerId     string                `protobuf:"bytes,5,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	Result       int32                 `protobuf:"varint,6,opt,name=result,proto3" json:"result,omitempty"`
	Duration     int32                 `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *ListAgentCallHistoryRes_Entry) Reset() {
	*x = ListAgentCallHistoryRes_Entry{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[271]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentCallHistoryRes_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentCallHistoryRes_Entry) ProtoMessage() {}

func (x *ListAgentCallHistoryRes_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[271]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentCallHistoryRes_Entry.ProtoReflect.Descriptor instead.
func (*ListAgentCallHistoryRes_Entry) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{87, 0}
}

func (x *ListAgentCallHistoryRes_Entry) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *ListAgentCallHistoryRes_Entry) GetScheduleTime() string {
	if x != nil {
		return x.ScheduleTime
	}
	return ""
}

func (x *ListAgentCallHistoryRes_Entry) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

func (x *ListAgentCallHistoryRes_Entry) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *ListAgentCallHistoryRes_Entry) GetCallerId() string {
	if x != nil {
		return x.CallerId
	}
	return ""
}

func (x *ListAgentCallHistoryRes_Entry) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *ListAgentCallHistoryRes_Entry) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type GetCampaignCompletionStatusRes_TaskGroupCompletionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the running task group.
	TaskGroupSid int64 `protobuf:"varint,1,opt,name=task_group_sid,json=taskGroupSid,proto3" json:"task_group_sid,omitempty"`
	// name of the running task group.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// percentage of task completed for the given task group.
	PercentComplete int32 `protobuf:"varint,3,opt,name=percent_complete,json=percentComplete,proto3" json:"percent_complete,omitempty"`
	// total tasks for a single task group
	TotalTasks int32 `protobuf:"varint,4,opt,name=total_tasks,json=totalTasks,proto3" json:"total_tasks,omitempty"`
	// total tasks completed for a single task group
	TotalTasksCompleted int32 `protobuf:"varint,5,opt,name=total_tasks_completed,json=totalTasksCompleted,proto3" json:"total_tasks_completed,omitempty"`
}

func (x *GetCampaignCompletionStatusRes_TaskGroupCompletionStatus) Reset() {
	*x = GetCampaignCompletionStatusRes_TaskGroupCompletionStatus{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[272]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCampaignCompletionStatusRes_TaskGroupCompletionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCampaignCompletionStatusRes_TaskGroupCompletionStatus) ProtoMessage() {}

func (x *GetCampaignCompletionStatusRes_TaskGroupCompletionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[272]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCampaignCompletionStatusRes_TaskGroupCompletionStatus.ProtoReflect.Descriptor instead.
func (*GetCampaignCompletionStatusRes_TaskGroupCompletionStatus) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{89, 0}
}

func (x *GetCampaignCompletionStatusRes_TaskGroupCompletionStatus) GetTaskGroupSid() int64 {
	if x != nil {
		return x.TaskGroupSid
	}
	return 0
}

func (x *GetCampaignCompletionStatusRes_TaskGroupCompletionStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetCampaignCompletionStatusRes_TaskGroupCompletionStatus) GetPercentComplete() int32 {
	if x != nil {
		return x.PercentComplete
	}
	return 0
}

func (x *GetCampaignCompletionStatusRes_TaskGroupCompletionStatus) GetTotalTasks() int32 {
	if x != nil {
		return x.TotalTasks
	}
	return 0
}

func (x *GetCampaignCompletionStatusRes_TaskGroupCompletionStatus) GetTotalTasksCompleted() int32 {
	if x != nil {
		return x.TotalTasksCompleted
	}
	return 0
}

type ListAgentQueueAndOnHoldCallDataRes_CallData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the found call.
	CallSid int64 `protobuf:"varint,1,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	// number dialed when the call was placed.
	PhoneNumber string `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// caller_id used when the call was placed.
	CallerId string `protobuf:"bytes,3,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	// call type of the found call.
	CallType commons.CallType_Enum `protobuf:"varint,4,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
	// timestamp indicating when the call started.
	StartDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// timestamp indicating when the call was put on hold (only set when call is a hold call).
	HoldDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=hold_date,json=holdDate,proto3" json:"hold_date,omitempty"`
	// formatted skills that the call requires.
	Skills []string `protobuf:"bytes,7,rep,name=skills,proto3" json:"skills,omitempty"`
	// indicates if the call is specific to the agent (multi-hold) or it can be picked up by multiple agents (queued and HQM calls).
	AgentSpecific bool `protobuf:"varint,8,opt,name=agent_specific,json=agentSpecific,proto3" json:"agent_specific,omitempty"`
	// queued notification type of the call.
	QueuedNotificationType commons.QueuedNotificationType `protobuf:"varint,9,opt,name=queued_notification_type,json=queuedNotificationType,proto3,enum=api.commons.QueuedNotificationType" json:"queued_notification_type,omitempty"`
}

func (x *ListAgentQueueAndOnHoldCallDataRes_CallData) Reset() {
	*x = ListAgentQueueAndOnHoldCallDataRes_CallData{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[274]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentQueueAndOnHoldCallDataRes_CallData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentQueueAndOnHoldCallDataRes_CallData) ProtoMessage() {}

func (x *ListAgentQueueAndOnHoldCallDataRes_CallData) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[274]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentQueueAndOnHoldCallDataRes_CallData.ProtoReflect.Descriptor instead.
func (*ListAgentQueueAndOnHoldCallDataRes_CallData) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{100, 0}
}

func (x *ListAgentQueueAndOnHoldCallDataRes_CallData) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *ListAgentQueueAndOnHoldCallDataRes_CallData) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *ListAgentQueueAndOnHoldCallDataRes_CallData) GetCallerId() string {
	if x != nil {
		return x.CallerId
	}
	return ""
}

func (x *ListAgentQueueAndOnHoldCallDataRes_CallData) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

func (x *ListAgentQueueAndOnHoldCallDataRes_CallData) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ListAgentQueueAndOnHoldCallDataRes_CallData) GetHoldDate() *timestamppb.Timestamp {
	if x != nil {
		return x.HoldDate
	}
	return nil
}

func (x *ListAgentQueueAndOnHoldCallDataRes_CallData) GetSkills() []string {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *ListAgentQueueAndOnHoldCallDataRes_CallData) GetAgentSpecific() bool {
	if x != nil {
		return x.AgentSpecific
	}
	return false
}

func (x *ListAgentQueueAndOnHoldCallDataRes_CallData) GetQueuedNotificationType() commons.QueuedNotificationType {
	if x != nil {
		return x.QueuedNotificationType
	}
	return commons.QueuedNotificationType(0)
}

// The CallParams for a call recording.
type DownloadCallRecordingsReq_CallParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The callSid
	CallSid int64 `protobuf:"varint,1,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	// The callType, based on the CallType enum.
	CallType commons.CallType_Enum `protobuf:"varint,2,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
}

func (x *DownloadCallRecordingsReq_CallParams) Reset() {
	*x = DownloadCallRecordingsReq_CallParams{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[275]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadCallRecordingsReq_CallParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadCallRecordingsReq_CallParams) ProtoMessage() {}

func (x *DownloadCallRecordingsReq_CallParams) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[275]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadCallRecordingsReq_CallParams.ProtoReflect.Descriptor instead.
func (*DownloadCallRecordingsReq_CallParams) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{132, 0}
}

func (x *DownloadCallRecordingsReq_CallParams) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *DownloadCallRecordingsReq_CallParams) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

type AgentDispositionConditionalDncl_DispositionRulesTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DispositionKey             string                                                        `protobuf:"bytes,1,opt,name=disposition_key,json=dispositionKey,proto3" json:"disposition_key,omitempty"`
	DispositionExpirationTable []*AgentDispositionConditionalDncl_DispositionExpirationTable `protobuf:"bytes,3,rep,name=disposition_expiration_table,json=dispositionExpirationTable,proto3" json:"disposition_expiration_table,omitempty"`
}

func (x *AgentDispositionConditionalDncl_DispositionRulesTable) Reset() {
	*x = AgentDispositionConditionalDncl_DispositionRulesTable{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[276]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentDispositionConditionalDncl_DispositionRulesTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentDispositionConditionalDncl_DispositionRulesTable) ProtoMessage() {}

func (x *AgentDispositionConditionalDncl_DispositionRulesTable) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[276]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentDispositionConditionalDncl_DispositionRulesTable.ProtoReflect.Descriptor instead.
func (*AgentDispositionConditionalDncl_DispositionRulesTable) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{133, 0}
}

func (x *AgentDispositionConditionalDncl_DispositionRulesTable) GetDispositionKey() string {
	if x != nil {
		return x.DispositionKey
	}
	return ""
}

func (x *AgentDispositionConditionalDncl_DispositionRulesTable) GetDispositionExpirationTable() []*AgentDispositionConditionalDncl_DispositionExpirationTable {
	if x != nil {
		return x.DispositionExpirationTable
	}
	return nil
}

type AgentDispositionConditionalDncl_DispositionExpirationTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DispositionValue string `protobuf:"bytes,1,opt,name=disposition_value,json=dispositionValue,proto3" json:"disposition_value,omitempty"`
	Integer          int64  `protobuf:"varint,2,opt,name=integer,proto3" json:"integer,omitempty"`
}

func (x *AgentDispositionConditionalDncl_DispositionExpirationTable) Reset() {
	*x = AgentDispositionConditionalDncl_DispositionExpirationTable{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[277]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentDispositionConditionalDncl_DispositionExpirationTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentDispositionConditionalDncl_DispositionExpirationTable) ProtoMessage() {}

func (x *AgentDispositionConditionalDncl_DispositionExpirationTable) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[277]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentDispositionConditionalDncl_DispositionExpirationTable.ProtoReflect.Descriptor instead.
func (*AgentDispositionConditionalDncl_DispositionExpirationTable) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{133, 1}
}

func (x *AgentDispositionConditionalDncl_DispositionExpirationTable) GetDispositionValue() string {
	if x != nil {
		return x.DispositionValue
	}
	return ""
}

func (x *AgentDispositionConditionalDncl_DispositionExpirationTable) GetInteger() int64 {
	if x != nil {
		return x.Integer
	}
	return 0
}

type ListAgentCallResponseValuesRes_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ListAgentCallResponseValuesRes_Response) Reset() {
	*x = ListAgentCallResponseValuesRes_Response{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[287]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentCallResponseValuesRes_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentCallResponseValuesRes_Response) ProtoMessage() {}

func (x *ListAgentCallResponseValuesRes_Response) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[287]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentCallResponseValuesRes_Response.ProtoReflect.Descriptor instead.
func (*ListAgentCallResponseValuesRes_Response) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{175, 0}
}

func (x *ListAgentCallResponseValuesRes_Response) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ListAgentCallResponseValuesRes_Response) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type RecalculateBillingRes_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type commons.RecalculateBillingType `protobuf:"varint,1,opt,name=type,proto3,enum=api.commons.RecalculateBillingType" json:"type,omitempty"`
	// Types that are assignable to ResultType:
	//
	//	*RecalculateBillingRes_Result_Updated
	//	*RecalculateBillingRes_Result_ErrorMessage
	ResultType isRecalculateBillingRes_Result_ResultType `protobuf_oneof:"result_type"`
}

func (x *RecalculateBillingRes_Result) Reset() {
	*x = RecalculateBillingRes_Result{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[288]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecalculateBillingRes_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecalculateBillingRes_Result) ProtoMessage() {}

func (x *RecalculateBillingRes_Result) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[288]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecalculateBillingRes_Result.ProtoReflect.Descriptor instead.
func (*RecalculateBillingRes_Result) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{215, 0}
}

func (x *RecalculateBillingRes_Result) GetType() commons.RecalculateBillingType {
	if x != nil {
		return x.Type
	}
	return commons.RecalculateBillingType(0)
}

func (m *RecalculateBillingRes_Result) GetResultType() isRecalculateBillingRes_Result_ResultType {
	if m != nil {
		return m.ResultType
	}
	return nil
}

func (x *RecalculateBillingRes_Result) GetUpdated() int64 {
	if x, ok := x.GetResultType().(*RecalculateBillingRes_Result_Updated); ok {
		return x.Updated
	}
	return 0
}

func (x *RecalculateBillingRes_Result) GetErrorMessage() string {
	if x, ok := x.GetResultType().(*RecalculateBillingRes_Result_ErrorMessage); ok {
		return x.ErrorMessage
	}
	return ""
}

type isRecalculateBillingRes_Result_ResultType interface {
	isRecalculateBillingRes_Result_ResultType()
}

type RecalculateBillingRes_Result_Updated struct {
	Updated int64 `protobuf:"varint,2,opt,name=updated,proto3,oneof"`
}

type RecalculateBillingRes_Result_ErrorMessage struct {
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3,oneof"`
}

func (*RecalculateBillingRes_Result_Updated) isRecalculateBillingRes_Result_ResultType() {}

func (*RecalculateBillingRes_Result_ErrorMessage) isRecalculateBillingRes_Result_ResultType() {}

type ListOutboundBroadcastTemplateDataRes_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number of the template (not to be confused with the template id)
	TemplateNumber int64 `protobuf:"varint,1,opt,name=template_number,json=templateNumber,proto3" json:"template_number,omitempty"`
	// name of the template (as shown in back office)
	TemplateName string `protobuf:"bytes,2,opt,name=template_name,json=templateName,proto3" json:"template_name,omitempty"`
	// type of template (will be either STANDARD or LAYERED)
	TemplateType commons.TemplateType_Enum `protobuf:"varint,3,opt,name=template_type,json=templateType,proto3,enum=api.commons.TemplateType_Enum" json:"template_type,omitempty"`
	// date that the template was last modified
	ModifyDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=modify_date,json=modifyDate,proto3" json:"modify_date,omitempty"`
}

func (x *ListOutboundBroadcastTemplateDataRes_Data) Reset() {
	*x = ListOutboundBroadcastTemplateDataRes_Data{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[289]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOutboundBroadcastTemplateDataRes_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOutboundBroadcastTemplateDataRes_Data) ProtoMessage() {}

func (x *ListOutboundBroadcastTemplateDataRes_Data) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[289]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOutboundBroadcastTemplateDataRes_Data.ProtoReflect.Descriptor instead.
func (*ListOutboundBroadcastTemplateDataRes_Data) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{217, 0}
}

func (x *ListOutboundBroadcastTemplateDataRes_Data) GetTemplateNumber() int64 {
	if x != nil {
		return x.TemplateNumber
	}
	return 0
}

func (x *ListOutboundBroadcastTemplateDataRes_Data) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *ListOutboundBroadcastTemplateDataRes_Data) GetTemplateType() commons.TemplateType_Enum {
	if x != nil {
		return x.TemplateType
	}
	return commons.TemplateType_Enum(0)
}

func (x *ListOutboundBroadcastTemplateDataRes_Data) GetModifyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifyDate
	}
	return nil
}

type Extension_Agent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The first_name & last_name fields will be set during
	// CreateExtension and UpdateExtension. If these fields are
	// set for those calls they will be overwritten.
	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	UserId    string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Whether the agent associated with this extension is archived.
	Archived bool `protobuf:"varint,5,opt,name=archived,proto3" json:"archived,omitempty"`
}

func (x *Extension_Agent) Reset() {
	*x = Extension_Agent{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[290]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Extension_Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extension_Agent) ProtoMessage() {}

func (x *Extension_Agent) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[290]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extension_Agent.ProtoReflect.Descriptor instead.
func (*Extension_Agent) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{243, 0}
}

func (x *Extension_Agent) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Extension_Agent) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Extension_Agent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Extension_Agent) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

type Extension_HuntGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HuntGroupSid int64 `protobuf:"varint,1,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	// The hunt_group_name field will be set during CreateExtension
	// and UpdateExtension. If this field is set for those calls it
	// will be overwritten.
	HuntGroupName string `protobuf:"bytes,2,opt,name=hunt_group_name,json=huntGroupName,proto3" json:"hunt_group_name,omitempty"`
	// Whether the hunt group associated with this extension is archived.
	Archived bool `protobuf:"varint,3,opt,name=archived,proto3" json:"archived,omitempty"`
}

func (x *Extension_HuntGroup) Reset() {
	*x = Extension_HuntGroup{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[291]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Extension_HuntGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extension_HuntGroup) ProtoMessage() {}

func (x *Extension_HuntGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[291]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extension_HuntGroup.ProtoReflect.Descriptor instead.
func (*Extension_HuntGroup) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{243, 1}
}

func (x *Extension_HuntGroup) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *Extension_HuntGroup) GetHuntGroupName() string {
	if x != nil {
		return x.HuntGroupName
	}
	return ""
}

func (x *Extension_HuntGroup) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

type Extension_Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject   string   `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Body      string   `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Addresses []string `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
	AttachVm  bool     `protobuf:"varint,4,opt,name=attach_vm,json=attachVm,proto3" json:"attach_vm,omitempty"`
}

func (x *Extension_Email) Reset() {
	*x = Extension_Email{}
	mi := &file_api_v0alpha_p3api_proto_msgTypes[292]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Extension_Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extension_Email) ProtoMessage() {}

func (x *Extension_Email) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_p3api_proto_msgTypes[292]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extension_Email.ProtoReflect.Descriptor instead.
func (*Extension_Email) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_p3api_proto_rawDescGZIP(), []int{243, 2}
}

func (x *Extension_Email) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Extension_Email) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *Extension_Email) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Extension_Email) GetAttachVm() bool {
	if x != nil {
		return x.AttachVm
	}
	return false
}

var File_api_v0alpha_p3api_proto protoreflect.FileDescriptor

var file_api_v0alpha_p3api_proto_rawDesc = []byte{
	0x0a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x17, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x77, 0x66, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x3c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x75,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64,
	0x22, 0xf7, 0x02, 0x0a, 0x09, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24,
	0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1c, 0x68, 0x75,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x18, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3f, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x69, 0x64, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x98, 0x01, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x4b, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x73, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x15, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x3d, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a,
	0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x53, 0x69, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x14, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x22, 0x45, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x22, 0x4f, 0x0a, 0x1c, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x22, 0x40, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0xaf, 0x0c, 0x0a,
	0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0e, 0x77, 0x65, 0x62,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x77,
	0x65, 0x62, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x77,
	0x65, 0x62, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x77, 0x65, 0x62, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x40, 0x0a, 0x0e, 0x69, 0x76, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x76, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x42, 0x0a, 0x0f, 0x69, 0x76, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x69, 0x76, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x76, 0x72, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x76, 0x72, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x13, 0x69, 0x76, 0x72, 0x5f, 0x62, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x11, 0x69, 0x76, 0x72, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x63, 0x6f, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x6f, 0x66, 0x74, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x6f, 0x66, 0x74, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x44, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x12, 0x43, 0x0a, 0x0e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x64, 0x12, 0x4c,
	0x0a, 0x13, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x44, 0x69, 0x61, 0x6c, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x06,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0e, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x70, 0x61,
	0x75, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x11, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x10, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x75, 0x70,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x77, 0x72,
	0x61, 0x70, 0x55, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0d,
	0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x74, 0x61, 0x6c, 0x6b, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44,
	0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0d,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x68, 0x6f, 0x6c, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x14,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x22, 0xb7, 0x06, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x65, 0x62, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x50, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x61, 0x64, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x63, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x4b, 0x0a, 0x12, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a,
	0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64,
	0x12, 0x4d, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x46, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x85,
	0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x53,
	0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x53, 0x69, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72,
	0x6f, 0x77, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x53, 0x69, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c,
	0x53, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x69, 0x64, 0x22, 0xec, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x6c, 0x6c, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x5c, 0x0a, 0x16, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14, 0x64, 0x69,
	0x61, 0x6c, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x22, 0x63, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12,
	0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0xd3, 0x08, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x13, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x76, 0x72, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x76, 0x72, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x13, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x69, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x61, 0x69, 0x74,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x63, 0x61,
	0x6c, 0x6c, 0x57, 0x61, 0x69, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40,
	0x0a, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x68, 0x6f, 0x6c, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x70, 0x61, 0x75,
	0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x10, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x73, 0x75, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40,
	0x0a, 0x0d, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x74, 0x61, 0x6c, 0x6b, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x48, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x10, 0x77, 0x72,
	0x61, 0x70, 0x5f, 0x75, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0e, 0x77, 0x72, 0x61, 0x70, 0x55, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x75, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x61,
	0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x77, 0x65, 0x62, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x77, 0x65, 0x62,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x22, 0x7d, 0x0a, 0x1a,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x70, 0x22, 0xb0, 0x01, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x4c, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0xa9,
	0x02, 0x0a, 0x09, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x68, 0x75,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x48, 0x0a, 0x11, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x96, 0x02, 0x0a, 0x0e, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x24, 0x0a,
	0x0e, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b,
	0x53, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x69, 0x70, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x53,
	0x49, 0x50, 0x55, 0x52, 0x49, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x70, 0x55, 0x72, 0x69, 0x12,
	0x2e, 0x0a, 0x13, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42,
	0x12, 0x0a, 0x10, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x22, 0xb0, 0x01, 0x0a, 0x17, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f,
	0x6b, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x53, 0x0a, 0x12, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x68, 0x69, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x0f, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x49, 0x50, 0x55, 0x52, 0x49, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x69,
	0x70, 0x5f, 0x75, 0x72, 0x69, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x69, 0x70, 0x55, 0x72, 0x69, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x22, 0x0a, 0x0d,
	0x73, 0x69, 0x70, 0x5f, 0x75, 0x72, 0x69, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x69, 0x70, 0x55, 0x72, 0x69, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x3a, 0x0a, 0x09, 0x73, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x49, 0x50, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x73, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x1f, 0x0a, 0x1d,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42,
	0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x22, 0x90, 0x01,
	0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x49, 0x0a, 0x12, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42,
	0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42,
	0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64,
	0x22, 0x48, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x20, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x49, 0x0a, 0x12, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42,
	0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42,
	0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64,
	0x22, 0x9f, 0x02, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e,
	0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x42, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x69, 0x70, 0x5f, 0x75, 0x72, 0x69,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x49,
	0x50, 0x55, 0x52, 0x49, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x70, 0x55, 0x72, 0x69, 0x12, 0x2e,
	0x0a, 0x13, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x12,
	0x0a, 0x10, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x22, 0xc5, 0x02,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f,
	0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x69, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x69, 0x70, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f,
	0x6b, 0x53, 0x49, 0x50, 0x55, 0x52, 0x49, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x70, 0x55, 0x72,
	0x69, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x42, 0x12, 0x0a, 0x10, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x19, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x22, 0x3f, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42,
	0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x69,
	0x64, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x22, 0x39, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x22, 0xf2, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x12, 0x49, 0x0a,
	0x15, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x12, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x48, 0x0a, 0x14, 0x6f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x12,
	0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f,
	0x6b, 0x73, 0x12, 0x48, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x22, 0x3c, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x11, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x22, 0xb2, 0x02, 0x0a, 0x0e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09,
	0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x12, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x11, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x5c, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x12, 0x44, 0x0a, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xa7, 0x02, 0x0a, 0x0c, 0x50, 0x42, 0x58, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x62, 0x78, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x70, 0x62, 0x78, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x62, 0x78, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x62, 0x78, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6a, 0x6f, 0x69, 0x6e,
	0x53, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x16, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x42, 0x58, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x22, 0x9c, 0x05, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x42, 0x58, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x5b, 0x0a, 0x10, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x42,
	0x58, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x68,
	0x0a, 0x15, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x42, 0x58, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x2e, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x13, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xd6, 0x01, 0x0a, 0x0e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x62, 0x78, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x62, 0x78, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x11, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x72, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x47, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x1a, 0xe3, 0x01, 0x0a, 0x12, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x62, 0x78, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x62, 0x78, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x11, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x26, 0x0a, 0x0f,
	0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x47,
	0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x5b, 0x0a, 0x0d, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x0d, 0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69,
	0x64, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x4a, 0x04,
	0x08, 0x01, 0x10, 0x02, 0x22, 0xbb, 0x04, 0x0a, 0x11, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x68, 0x75,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x68, 0x75, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x69,
	0x64, 0x12, 0x41, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x41, 0x0a,
	0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x40, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69,
	0x61, 0x6c, 0x22, 0x85, 0x02, 0x0a, 0x04, 0x44, 0x4e, 0x43, 0x4c, 0x12, 0x3c, 0x0a, 0x0b, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x6e, 0x63,
	0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x64, 0x6e, 0x63,
	0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x6e, 0x63, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x6e, 0x63, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x10, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x22, 0x8c, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x4e,
	0x43, 0x4c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x05,
	0x64, 0x6e, 0x63, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x4e, 0x43, 0x4c, 0x52, 0x05,
	0x64, 0x6e, 0x63, 0x6c, 0x73, 0x12, 0x4b, 0x0a, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x10, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x43,
	0x4c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x44, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64,
	0x22, 0x85, 0x10, 0x0a, 0x16, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6b,
	0x65, 0x79, 0x70, 0x61, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x64, 0x5f, 0x64, 0x65, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6b, 0x65,
	0x79, 0x70, 0x61, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x44, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x05, 0x70, 0x61, 0x75, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x03, 0x68, 0x71, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x03, 0x68,
	0x71, 0x6d, 0x12, 0x40, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x44, 0x69, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0x43, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x69, 0x61, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x44, 0x69, 0x61, 0x6c, 0x12, 0x5c, 0x0a, 0x15, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x13, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x6e, 0x63, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44,
	0x6e, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x04, 0x64, 0x6e, 0x63,
	0x6c, 0x12, 0x32, 0x0a, 0x04, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x04, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4c, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x1a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x68, 0x75, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4c, 0x69, 0x6e, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x75, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x52, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x3c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x1a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x7a, 0x69, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x5a, 0x69, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x35, 0x0a, 0x17, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x7a, 0x69, 0x70, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x14, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5a, 0x69, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f,
	0x6d, 0x12, 0x54, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x34,
	0x0a, 0x16, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x5f, 0x0a, 0x1b, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x19, 0x69, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x1c, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x19, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x14, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x57, 0x65, 0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x52, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x5f, 0x70, 0x65,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72,
	0x75, 0x70, 0x74, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x1c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x61, 0x70, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x23, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x61, 0x70, 0x4a, 0x04, 0x08, 0x11, 0x10, 0x12, 0x22, 0xfb, 0x01, 0x0a, 0x17, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73,
	0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x62, 0x0a, 0x13, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x27, 0x0a,
	0x0d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x09,
	0x0a, 0x05, 0x54, 0x4f, 0x44, 0x41, 0x59, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0xa0, 0x02, 0x0a, 0x0d, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x75,
	0x73, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x75, 0x73, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x37,
	0x0a, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x1c, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x02, 0x0a, 0x1b, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x22, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x1d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x6e,
	0x61, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x50, 0x6e, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x70, 0x6e, 0x61, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x50, 0x6e, 0x61, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x22, 0xc2, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x69, 0x61, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x70, 0x61, 0x75, 0x73, 0x65, 0x4f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x80, 0x01, 0x0a, 0x1f, 0x48, 0x6f, 0x6c, 0x64, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x5d, 0x0a, 0x04, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1b,
	0x0a, 0x17, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4f,
	0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52,
	0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4e, 0x59,
	0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x22, 0xdc, 0x01, 0x0a, 0x18, 0x48, 0x6f, 0x6c,
	0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x56, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x44, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0xd9, 0x11,
	0x0a, 0x12, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x37,
	0x0a, 0x18, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x38, 0x0a, 0x19, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x77,
	0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f,
	0x6b, 0x12, 0x2f, 0x0a, 0x14, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x68, 0x61, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x69, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73,
	0x68, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x33, 0x0a, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x63, 0x72, 0x75, 0x62,
	0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x65, 0x6c,
	0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x63, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x43, 0x63, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x64, 0x6e, 0x63, 0x6c, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x44, 0x6e, 0x63, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x75, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x43,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x40,
	0x0a, 0x1d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x69, 0x64,
	0x12, 0x46, 0x0a, 0x20, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x75, 0x73, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x49, 0x64, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x21, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x13,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27,
	0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x70, 0x0a, 0x1b, 0x75, 0x73, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x44, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x5a, 0x69,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x18, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x69, 0x70, 0x12, 0x4e, 0x0a, 0x22, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1e, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x1a, 0x6d, 0x61, 0x73, 0x6b, 0x5f,
	0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x6d, 0x61, 0x73,
	0x6b, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64,
	0x69, 0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69,
	0x70, 0x12, 0x3c, 0x0a, 0x1b, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x6c,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x7a, 0x0a, 0x24, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x70, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1f, 0x6d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x70, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x89, 0x01, 0x0a, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f,
	0x64, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x70, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1c, 0x64, 0x61, 0x74, 0x61, 0x44,
	0x69, 0x70, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x84, 0x01, 0x0a, 0x29, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x64, 0x69, 0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x44, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x70, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x24, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69,
	0x70, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x1a, 0x4f,
	0x0a, 0x21, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x70, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44,
	0x69, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x36, 0x0a, 0x11, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x52, 0x55, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x51,
	0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04, 0x08,
	0x10, 0x10, 0x11, 0x4a, 0x04, 0x08, 0x16, 0x10, 0x17, 0x22, 0x8a, 0x01, 0x0a, 0x19, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x70, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0x6d, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x41, 0x4c, 0x4c, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x53, 0x10, 0x04, 0x22, 0x6c, 0x0a, 0x11, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x63, 0x72, 0x75, 0x62, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x1a, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69,
	0x73, 0x74, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x17, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x38, 0x0a, 0x18, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x16, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x6d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x19, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x1a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x69, 0x61, 0x6c, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xba, 0x08,
	0x0a, 0x0c, 0x44, 0x6e, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x24,
	0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x6e, 0x63, 0x6c, 0x5f, 0x61, 0x64, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x6e, 0x63,
	0x6c, 0x41, 0x64, 0x64, 0x12, 0x38, 0x0a, 0x19, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x64,
	0x69, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x64, 0x6e, 0x63, 0x6c, 0x5f, 0x61, 0x64,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44,
	0x69, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x6e, 0x63, 0x6c, 0x41, 0x64, 0x64, 0x12, 0x3a,
	0x0a, 0x1a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x64, 0x6e, 0x63, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x69, 0x61, 0x6c, 0x41,
	0x75, 0x74, 0x6f, 0x44, 0x6e, 0x63, 0x6c, 0x41, 0x64, 0x64, 0x12, 0x40, 0x0a, 0x1d, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x5f, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x64, 0x6e, 0x63, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x19, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x6e, 0x63, 0x6c, 0x41, 0x64, 0x64, 0x12, 0x46, 0x0a, 0x20,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x64,
	0x6e, 0x63, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x6e, 0x63, 0x6c, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x48,
	0x6f, 0x75, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x21, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x6e, 0x63, 0x6c, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x1d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44,
	0x6e, 0x63, 0x6c, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x6e, 0x63, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6e, 0x63, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x4a, 0x0a, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x6e, 0x63, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x6e, 0x63,
	0x6c, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x21,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x64, 0x6e, 0x63, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x6e, 0x63, 0x6c, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x21, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x1d, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x73,
	0x12, 0x5e, 0x0a, 0x1c, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x41,
	0x75, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x52, 0x18, 0x73, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73,
	0x74, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x42, 0x0a, 0x1e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x6e, 0x63, 0x6c,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x72, 0x61, 0x70,
	0x75, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x44, 0x6e, 0x63, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x57, 0x72,
	0x61, 0x70, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x6e,
	0x63, 0x6c, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x6e, 0x63, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x12, 0x66, 0x0a, 0x31, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x2b, 0x68, 0x75, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61,
	0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x6a, 0x0a, 0x1d, 0x73, 0x63, 0x72, 0x75,
	0x62, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63,
	0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x1a, 0x73, 0x63, 0x72, 0x75, 0x62, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0xee, 0x0e, 0x0a, 0x10, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x53, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x69,
	0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x1a, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x68, 0x61, 0x73, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x68, 0x61,
	0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x73, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x73, 0x68, 0x6f, 0x77,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f,
	0x6f, 0x6b, 0x12, 0x38, 0x0a, 0x19, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x49, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x51, 0x0a, 0x0d,
	0x68, 0x61, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4c, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a,
	0x1d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x49, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x69, 0x64, 0x12,
	0x44, 0x0a, 0x1f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19,
	0x73, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x2b, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x26,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x46, 0x0a, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x68, 0x0a, 0x1f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x6c, 0x0a, 0x21, 0x72, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x1e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x66, 0x0a, 0x1e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1b, 0x6f, 0x70,
	0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x57, 0x0a, 0x29, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x24, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61,
	0x6c, 0x6c, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x11,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x61,
	0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e,
	0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x70, 0x61, 0x75,
	0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x48, 0x6f, 0x6c,
	0x64, 0x22, 0x5f, 0x0a, 0x0f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x48, 0x75, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x75,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xf4, 0x02, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x59, 0x0a, 0x10, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x44, 0x69, 0x70, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x44, 0x69, 0x70, 0x12, 0x31, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x44, 0x69, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x76, 0x72, 0x5f, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x49, 0x76, 0x72, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x35, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x69, 0x70, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x69, 0x70, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x30, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x70, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x10, 0x02, 0x22, 0x5b, 0x0a, 0x1e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x39, 0x0a, 0x04, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x10, 0x03, 0x22, 0x63, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x50, 0x0a, 0x04, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x4b, 0x45, 0x45, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f,
	0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x22, 0x70, 0x0a, 0x14, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x58, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x45, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x4f,
	0x49, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x42,
	0x58, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x22, 0x56, 0x0a,
	0x1b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x48, 0x61, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x22, 0x37, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x41, 0x52, 0x4d, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x43,
	0x4f, 0x4c, 0x44, 0x10, 0x03, 0x22, 0x88, 0x01, 0x0a, 0x11, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48,
	0x6f, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x75, 0x74, 0x6f,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x4f, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x48, 0x6f, 0x6c, 0x64,
	0x22, 0x44, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x31, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x42, 0x4f, 0x54, 0x48, 0x10, 0x03, 0x22, 0xf3, 0x01, 0x0a, 0x16, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6d, 0x73, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x6d, 0x73, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x6d, 0x73, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x6d, 0x73, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c,
	0x0a, 0x23, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x22, 0xcf, 0x02, 0x0a,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x65,
	0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x69, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x64, 0x22, 0x4d,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57,
	0x65, 0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x77, 0x65,
	0x62, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x57, 0x65, 0x62, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x08, 0x77, 0x65, 0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0xf6, 0x01,
	0x0a, 0x07, 0x57, 0x65, 0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x6a, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x4a, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x6f, 0x6c, 0x74,
	0x69, 0x70, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x74, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x37, 0x0a,
	0x18, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x53, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x48, 0x75, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x22, 0x72, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x95, 0x01,
	0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x59, 0x0a, 0x0e, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xd6, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0xf4, 0x01, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x46,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x22, 0xa0, 0x05, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x6e, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x1a, 0xd5, 0x01, 0x0a, 0x19, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x1a, 0x8a, 0x01, 0x0a,
	0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x5b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x68, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x16, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x68, 0x75, 0x6e, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x75, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x62, 0x78, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x62, 0x78, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x71, 0x22, 0x2f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0x49, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8f, 0x01,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x07, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x73, 0x12, 0x3c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22,
	0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x22, 0x5a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x70, 0x0a, 0x15, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x64, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x73, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x41, 0x6e, 0x64, 0x4f, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x61, 0x6c,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x22, 0xf2, 0x05, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x6e, 0x64, 0x4f, 0x6e, 0x48,
	0x6f, 0x6c, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x12, 0x64,
	0x0a, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x6e, 0x64, 0x4f, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x73, 0x12, 0x5c, 0x0a, 0x0d, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x6e, 0x64, 0x4f, 0x6e, 0x48, 0x6f, 0x6c,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x6f, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x12, 0x55, 0x0a, 0x09, 0x68, 0x71, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x41, 0x6e, 0x64, 0x4f, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x68, 0x71, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x1a, 0xb0, 0x03, 0x0a, 0x08, 0x43, 0x61,
	0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x5d, 0x0a,
	0x18, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x58, 0x0a, 0x18,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xcf, 0x02, 0x0a, 0x19, 0x53, 0x61, 0x76, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x64, 0x0a, 0x1b, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x18, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x61, 0x76, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0xe7, 0x02, 0x0a, 0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67,
	0x53, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x3f,
	0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x88, 0x01, 0x0a, 0x0a, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x26,
	0x0a, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1d, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x22, 0xce, 0x02, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0a,
	0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48,
	0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x40, 0x0a, 0x0e, 0x70, 0x62, 0x78, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x42, 0x58, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x62, 0x78, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x12, 0x47, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x0c, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x44, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64,
	0x22, 0x6f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x50,
	0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x65,
	0x65, 0x72, 0x53, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x22, 0x5e, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x22, 0xaf, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a,
	0x12, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17,
	0x78, 0x6d, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x78,
	0x6d, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x53, 0x69, 0x64, 0x22, 0x6f, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x47, 0x0a, 0x20, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0x44, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xe3, 0x09, 0x0a, 0x18, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x68, 0x75,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x44, 0x0a,
	0x0f, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x13, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x69, 0x74, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x77,
	0x61, 0x69, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x10, 0x63, 0x61, 0x6c, 0x6c, 0x57, 0x61, 0x69, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x68, 0x6f, 0x6c, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0e, 0x70, 0x61, 0x75,
	0x73, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a,
	0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11,
	0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x74, 0x61, 0x6c, 0x6b, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a,
	0x10, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x75, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x77, 0x72, 0x61, 0x70, 0x55, 0x70, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x0f, 0x68, 0x75, 0x6e, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x48,
	0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x0d, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x4e, 0x43, 0x4c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x22, 0x8d,
	0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x4e, 0x43, 0x4c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x6f, 0x0a,
	0x11, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x6e, 0x63, 0x6c, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x10, 0x64, 0x69,
	0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xfe,
	0x01, 0x0a, 0x12, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e,
	0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22,
	0x14, 0x0a, 0x12, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x22, 0xcf, 0x02, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x12, 0x48, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09,
	0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x22, 0x95, 0x05, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x41,
	0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x6b,
	0x62, 0x61, 0x63, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x69, 0x64, 0x22,
	0xcd, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x12, 0x24,
	0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x1f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x73, 0x22,
	0x69, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x12, 0x4b, 0x0a,
	0x16, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x13, 0x77, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x22, 0x58, 0x0a, 0x1f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x63, 0x61, 0x6c, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x22, 0xab, 0x01, 0x0a, 0x18, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x44, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x2f,
	0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12,
	0x2a, 0x0a, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22,
	0x1a, 0x0a, 0x18, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x44, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x44, 0x0a, 0x14, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x6e, 0x0a, 0x18, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x98, 0x03, 0x0a, 0x19, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x52, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x74, 0x6d,
	0x6c, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x74, 0x6d,
	0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x74, 0x6d, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x1a, 0x60, 0x0a, 0x0a, 0x43, 0x61,
	0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c,
	0x53, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0xae, 0x04, 0x0a,
	0x1f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6e, 0x63, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x53, 0x69, 0x64, 0x12, 0x7a, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x6e, 0x63, 0x6c, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x15, 0x64, 0x69,
	0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x1a, 0xd2, 0x01, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x89, 0x01, 0x0a, 0x1c, 0x64, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6e, 0x63, 0x6c, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x1a, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x1a, 0x63, 0x0a, 0x1a, 0x44, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x22, 0x61, 0x0a,
	0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x64, 0x12,
	0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x05, 0x0a, 0x03, 0x4e, 0x69, 0x6c, 0x22, 0x44, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x22, 0x63, 0x0a,
	0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x43, 0x0a,
	0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69,
	0x64, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x22, 0x44, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x22, 0x5a, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x22, 0x6b, 0x0a, 0x17, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x64, 0x22, 0x19, 0x0a, 0x17, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x22, 0xb6, 0x05, 0x0a,
	0x18, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63,
	0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x54,
	0x0a, 0x27, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x23, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x21, 0x63, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x49, 0x0a, 0x21, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x14, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x68, 0x61, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x49,
	0x0a, 0x21, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a,
	0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xfb, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48, 0x75, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12,
	0x50, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x2e, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x21, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x75,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x22, 0x4a, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x0a, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x68, 0x75,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x45, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x22, 0x5e,
	0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x3d, 0x0a, 0x0b, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x0a, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x18,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x22, 0xf9, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x67, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12,
	0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x6f, 0x66,
	0x74, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x12, 0x3f,
	0x0a, 0x1c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x6f, 0x66,
	0x74, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x12,
	0x2d, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6c, 0x69, 0x6e,
	0x6b, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4a, 0x04,
	0x08, 0x04, 0x10, 0x05, 0x22, 0x41, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x5d, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x47, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x92, 0x01, 0x0a, 0x17, 0x53, 0x61, 0x76, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x09, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x61, 0x76, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x22,
	0xa4, 0x02, 0x0a, 0x11, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12,
	0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x9b, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x12,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x64, 0x0a, 0x1b,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x18, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x50, 0x0a, 0x14, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x22, 0x7a, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x53,
	0x69, 0x64, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x69, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x41, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x52, 0x0d, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x22, 0x72, 0x0a, 0x13, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x6f, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x22,
	0x64, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe4, 0x0a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x69, 0x76, 0x72, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x2e, 0x49, 0x76, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x69, 0x76, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x62, 0x0a,
	0x13, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x45, 0x6e, 0x68,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x5c, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f,
	0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x50, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x69, 0x6e, 0x6b, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x69, 0x6e, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x75,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x56, 0x0a, 0x0f, 0x73, 0x69, 0x70, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x2e, 0x53, 0x69,
	0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x73, 0x69, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x65, 0x0a, 0x14, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x12, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x6b, 0x0a, 0x16, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x6a,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x5b, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x3a, 0x0a, 0x0c, 0x49, 0x76, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x53, 0x69, 0x70, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x47, 0x0a, 0x19, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9, 0x01, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x42, 0x58, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x62, 0x78, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x62, 0x78, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x42, 0x58, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x22, 0xcc, 0x01, 0x0a, 0x0f, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x75,
	0x74, 0x6f, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x03,
	0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x52, 0x03, 0x61, 0x63, 0x74,
	0x22, 0xa6, 0x03, 0x0a, 0x03, 0x41, 0x63, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x62, 0x69, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x62, 0x69, 0x61, 0x67, 0x65, 0x52, 0x08, 0x76,
	0x65, 0x72, 0x62, 0x69, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x25, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x59, 0x0a, 0x16, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x1e, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x72,
	0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x70,
	0x61, 0x67, 0x65, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x18, 0x70, 0x61, 0x67, 0x65, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0x97, 0x02, 0x0a, 0x0b, 0x44, 0x69,
	0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43,
	0x0a, 0x1e, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x41, 0x75,
	0x74, 0x6f, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x08, 0x56, 0x65, 0x72, 0x62, 0x69, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x22, 0xb3, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x1f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x1c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x83, 0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x76, 0x0a,
	0x18, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x17, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x15,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x73, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5a,
	0x0a, 0x19, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x17, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x11, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x74, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c,
	0x53, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa8, 0x01, 0x0a,
	0x1e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x52, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x1a, 0x32, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb5, 0x0e, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x53, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x30, 0x31,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x30, 0x31, 0x12, 0x38, 0x0a,
	0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x30, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64,
	0x66, 0x63, 0x53, 0x69, 0x64, 0x30, 0x32, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73,
	0x69, 0x64, 0x30, 0x33, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x30,
	0x33, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x30, 0x34, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x30, 0x34, 0x12, 0x38, 0x0a, 0x09, 0x64,
	0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x30, 0x35, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63,
	0x53, 0x69, 0x64, 0x30, 0x35, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64,
	0x30, 0x36, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x30, 0x36, 0x12,
	0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x30, 0x37, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x30, 0x37, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63,
	0x5f, 0x73, 0x69, 0x64, 0x30, 0x38, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69,
	0x64, 0x30, 0x38, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x30, 0x39,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x30, 0x39, 0x12, 0x38, 0x0a,
	0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x31, 0x30, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64,
	0x66, 0x63, 0x53, 0x69, 0x64, 0x31, 0x30, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73,
	0x69, 0x64, 0x31, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x31,
	0x31, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x31, 0x32, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x31, 0x32, 0x12, 0x38, 0x0a, 0x09, 0x64,
	0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x31, 0x33, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63,
	0x53, 0x69, 0x64, 0x31, 0x33, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64,
	0x31, 0x34, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x31, 0x34, 0x12,
	0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x31, 0x35, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x31, 0x35, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63,
	0x5f, 0x73, 0x69, 0x64, 0x31, 0x36, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69,
	0x64, 0x31, 0x36, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x31, 0x37,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x31, 0x37, 0x12, 0x38, 0x0a,
	0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x31, 0x38, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64,
	0x66, 0x63, 0x53, 0x69, 0x64, 0x31, 0x38, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73,
	0x69, 0x64, 0x31, 0x39, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x31,
	0x39, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x32, 0x30, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x32, 0x30, 0x12, 0x38, 0x0a, 0x09, 0x64,
	0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x32, 0x31, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63,
	0x53, 0x69, 0x64, 0x32, 0x31, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64,
	0x32, 0x32, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x32, 0x32, 0x12,
	0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x32, 0x33, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x32, 0x33, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63,
	0x5f, 0x73, 0x69, 0x64, 0x32, 0x34, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69,
	0x64, 0x32, 0x34, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x32, 0x35,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x32, 0x35, 0x12, 0x38, 0x0a,
	0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x32, 0x36, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64,
	0x66, 0x63, 0x53, 0x69, 0x64, 0x32, 0x36, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73,
	0x69, 0x64, 0x32, 0x37, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x32,
	0x37, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x32, 0x38, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x32, 0x38, 0x12, 0x38, 0x0a, 0x09, 0x64,
	0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x32, 0x39, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63,
	0x53, 0x69, 0x64, 0x32, 0x39, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64,
	0x33, 0x30, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x33, 0x30, 0x22,
	0x4f, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64,
	0x22, 0xe8, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x1d,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x89, 0x02, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x68,
	0x61, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x68,
	0x61, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x40, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x22, 0x46, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0x27, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x52, 0x65, 0x71, 0x22, 0x67, 0x0a, 0x25, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64,
	0x52, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0xae, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0x22, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a,
	0x1d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x22, 0x0a, 0x20,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x22, 0x65, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x1d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x22, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x21, 0x0a, 0x1f, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x22, 0x83,
	0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x12, 0x60, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x43, 0x47, 0x53, 0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x2a,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x26, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x43, 0x47, 0x53,
	0x69, 0x64, 0x52, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x22, 0xd0, 0x01, 0x0a, 0x1e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x15,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
	0x13, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x15, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x13, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x15,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x78, 0x6d, 0x6c, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x78, 0x6d, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x1b, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x22, 0x6d, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x14, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x5e, 0x0a, 0x11,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x35, 0x0a, 0x17, 0x78, 0x6d, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x78, 0x6d, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1c, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x22, 0x79, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x67, 0x0a, 0x1a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x78, 0x6d, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x78, 0x6d, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd7,
	0x20, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x46, 0x69, 0x78, 0x65, 0x64, 0x57, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x30, 0x31,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x30, 0x31, 0x12, 0x38, 0x0a,
	0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x30, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64,
	0x66, 0x63, 0x53, 0x69, 0x64, 0x30, 0x32, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73,
	0x69, 0x64, 0x30, 0x33, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x30,
	0x33, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x30, 0x34, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x30, 0x34, 0x12, 0x38, 0x0a, 0x09, 0x64,
	0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x30, 0x35, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63,
	0x53, 0x69, 0x64, 0x30, 0x35, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64,
	0x30, 0x36, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x30, 0x36, 0x12,
	0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x30, 0x37, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x30, 0x37, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63,
	0x5f, 0x73, 0x69, 0x64, 0x30, 0x38, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69,
	0x64, 0x30, 0x38, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x30, 0x39,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x30, 0x39, 0x12, 0x38, 0x0a,
	0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x31, 0x30, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64,
	0x66, 0x63, 0x53, 0x69, 0x64, 0x31, 0x30, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73,
	0x69, 0x64, 0x31, 0x31, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x31,
	0x31, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x31, 0x32, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x31, 0x32, 0x12, 0x38, 0x0a, 0x09, 0x64,
	0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x31, 0x33, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63,
	0x53, 0x69, 0x64, 0x31, 0x33, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64,
	0x31, 0x34, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x31, 0x34, 0x12,
	0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x31, 0x35, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x31, 0x35, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63,
	0x5f, 0x73, 0x69, 0x64, 0x31, 0x36, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69,
	0x64, 0x31, 0x36, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x31, 0x37,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x31, 0x37, 0x12, 0x38, 0x0a,
	0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x31, 0x38, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64,
	0x66, 0x63, 0x53, 0x69, 0x64, 0x31, 0x38, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73,
	0x69, 0x64, 0x31, 0x39, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x31,
	0x39, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x32, 0x30, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x32, 0x30, 0x12, 0x38, 0x0a, 0x09, 0x64,
	0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x32, 0x31, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63,
	0x53, 0x69, 0x64, 0x32, 0x31, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64,
	0x32, 0x32, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x32, 0x32, 0x12,
	0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x32, 0x33, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x32, 0x33, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63,
	0x5f, 0x73, 0x69, 0x64, 0x32, 0x34, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69,
	0x64, 0x32, 0x34, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x32, 0x35,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x32, 0x35, 0x12, 0x38, 0x0a,
	0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x32, 0x36, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64,
	0x66, 0x63, 0x53, 0x69, 0x64, 0x32, 0x36, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73,
	0x69, 0x64, 0x32, 0x37, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x32,
	0x37, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x32, 0x38, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x32, 0x38, 0x12, 0x38, 0x0a, 0x09, 0x64,
	0x66, 0x63, 0x5f, 0x73, 0x69, 0x64, 0x32, 0x39, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63,
	0x53, 0x69, 0x64, 0x32, 0x39, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x66, 0x63, 0x5f, 0x73, 0x69, 0x64,
	0x33, 0x30, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x66, 0x63, 0x53, 0x69, 0x64, 0x33, 0x30, 0x12,
	0x42, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x30,
	0x31, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x30, 0x31, 0x12, 0x42, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x30, 0x32, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x30, 0x32, 0x12, 0x42, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x30, 0x33, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x30, 0x33, 0x12, 0x42, 0x0a, 0x0e, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x30, 0x34, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x30, 0x34, 0x12,
	0x42, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x30,
	0x35, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x30, 0x35, 0x12, 0x42, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x30, 0x36, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x30, 0x36, 0x12, 0x42, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x30, 0x37, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x30, 0x37, 0x12, 0x42, 0x0a, 0x0e, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x30, 0x38, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x30, 0x38, 0x12,
	0x42, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x30,
	0x39, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x30, 0x39, 0x12, 0x42, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x31, 0x30, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x31, 0x30, 0x12, 0x42, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x31, 0x31, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x31, 0x31, 0x12, 0x42, 0x0a, 0x0e, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x31, 0x32, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x31, 0x32, 0x12,
	0x42, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x31,
	0x33, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x31, 0x33, 0x12, 0x42, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x31, 0x34, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x31, 0x34, 0x12, 0x42, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x31, 0x35, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x31, 0x35, 0x12, 0x42, 0x0a, 0x0e, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x31, 0x36, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x31, 0x36, 0x12,
	0x42, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x31,
	0x37, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x31, 0x37, 0x12, 0x42, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x31, 0x38, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x31, 0x38, 0x12, 0x42, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x31, 0x39, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x31, 0x39, 0x12, 0x42, 0x0a, 0x0e, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x32, 0x30, 0x18, 0x39, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x32, 0x30, 0x12,
	0x42, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x32,
	0x31, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x32, 0x31, 0x12, 0x42, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x32, 0x32, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x32, 0x32, 0x12, 0x42, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x32, 0x33, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x32, 0x33, 0x12, 0x42, 0x0a, 0x0e, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x32, 0x34, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x32, 0x34, 0x12,
	0x42, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x32,
	0x35, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x32, 0x35, 0x12, 0x42, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x32, 0x36, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x32, 0x36, 0x12, 0x42, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x32, 0x37, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x32, 0x37, 0x12, 0x42, 0x0a, 0x0e, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x32, 0x38, 0x18, 0x41, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x32, 0x38, 0x12,
	0x42, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x32,
	0x39, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x32, 0x39, 0x12, 0x42, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x33, 0x30, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x33, 0x30, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x44, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x46, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x6f, 0x77, 0x22, 0x1f, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x22, 0x7b, 0x0a, 0x1d, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x17, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x69, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x69,
	0x64, 0x22, 0x22, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x22, 0x58, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x19, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x75,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x20, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x22,
	0x22, 0x0a, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x22, 0x31, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x22, 0x4a, 0x0a, 0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x3a, 0x0a, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0xf2, 0x01, 0x0a, 0x15, 0x52,
	0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x42,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x93, 0x01, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x26, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x22, 0xd5, 0x02, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x12, 0x54, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x1a, 0xd6, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a,
	0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x22,
	0x71, 0x0a, 0x1c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x02, 0x22, 0x1e, 0x0a, 0x1c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x22, 0x5a, 0x0a, 0x1e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x73, 0x22, 0x20,
	0x0a, 0x1e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x22, 0x26, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x41, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x64, 0x52, 0x65, 0x71, 0x22, 0x5d, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x41, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x52, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x0a, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x68, 0x75,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x61, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x22, 0x40, 0x0a, 0x0b, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x16, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x74, 0x73, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x22, 0x41, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x74, 0x73, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x06,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x74, 0x73, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x08,
	0x54, 0x74, 0x73, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x74, 0x73, 0x5f,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x74, 0x74, 0x73, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x22, 0x6b, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x74,
	0x73, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x74, 0x73, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x22, 0x37, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x74, 0x73, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0d, 0x74,
	0x74, 0x73, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x74, 0x74, 0x73, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x69, 0x64, 0x22,
	0x13, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x74, 0x73, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x22, 0x6d, 0x0a, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x53, 0x69, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x22, 0x50, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65,
	0x79, 0x73, 0x52, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x4f,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x22,
	0x18, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x16, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x53, 0x69, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x22, 0x4e, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65,
	0x79, 0x22, 0x18, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x22, 0xc4, 0x06, 0x0a, 0x09,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x62, 0x78,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x62, 0x78, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x34, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x09,
	0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c,
	0x68, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x47, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x29, 0x0a, 0x10, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x75, 0x6e, 0x68, 0x65, 0x61,
	0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x1a, 0x7e, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x4a, 0x04, 0x08, 0x01, 0x10,
	0x02, 0x1a, 0x75, 0x0a, 0x09, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24,
	0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68,
	0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x1a, 0x70, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x76, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x56, 0x6d, 0x42, 0x10, 0x0a, 0x0e, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x4a, 0x04, 0x08, 0x06,
	0x10, 0x07, 0x22, 0x18, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x22, 0x50, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x1c,
	0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x22, 0x54, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x59, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x43, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x14, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x22, 0x59, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x43, 0x0a, 0x11, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x14,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x62,
	0x78, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x62, 0x78, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x6d, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x79, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x61,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x4c, 0x6f, 0x67, 0x73, 0x22, 0xb6, 0x02, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x12, 0x39, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x43, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x70, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22,
	0x4f, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x22, 0x3d, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x50, 0x33, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x22,
	0x9d, 0x01, 0x0a, 0x07, 0x50, 0x33, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x70, 0x33, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x33, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x1a, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5b, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69,
	0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x75, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x6d, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x22, 0x4c, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x37, 0x0a, 0x0b, 0x73, 0x6d, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6d, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0a,
	0x73, 0x6d, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64,
	0x22, 0xb9, 0x0b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4d, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x50, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x12, 0x44, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x70, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x70, 0x12, 0x37, 0x0a, 0x03, 0x69, 0x76, 0x72, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x2e, 0x49, 0x76, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x69, 0x76, 0x72,
	0x12, 0x56, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x37, 0x0a, 0x03, 0x74, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x2e, 0x54, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x74, 0x74,
	0x73, 0x12, 0x60, 0x0a, 0x12, 0x7a, 0x69, 0x70, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x69, 0x6c, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x2e, 0x5a, 0x69, 0x70, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x10, 0x7a, 0x69, 0x70, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x6c, 0x0a, 0x16, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x6a, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x5c, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69,
	0x6c, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x3c, 0x0a, 0x0e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a,
	0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c,
	0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x36, 0x0a, 0x08, 0x49, 0x76, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x40, 0x0a, 0x12, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x36, 0x0a, 0x08, 0x54, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x5a, 0x69,
	0x70, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x47, 0x0a, 0x19, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xe7, 0x7f, 0x0a,
	0x05, 0x50, 0x33, 0x41, 0x70, 0x69, 0x12, 0x86, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x21, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x75,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x36, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65,
	0x74, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x68, 0x75, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x83, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x34, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01,
	0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x22, 0x33, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x65, 0x74, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x8f, 0x01,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02, 0x04, 0x0a, 0x02, 0x08,
	0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x12,
	0x8f, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02, 0x04, 0x0a,
	0x02, 0x08, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69,
	0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x12, 0x8f, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02,
	0x04, 0x0a, 0x02, 0x08, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x12, 0x8b, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x22, 0x36, 0xba, 0xb8, 0x91, 0x02, 0x04,
	0x0a, 0x02, 0x08, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70,
	0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x12, 0xb1, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x46, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12,
	0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x66, 0x6f, 0x72, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x77, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x22, 0x31, 0xba, 0xb8, 0x91,
	0x02, 0x04, 0x0a, 0x02, 0x08, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22,
	0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33,
	0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x94,
	0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x22, 0x39, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0x90, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22,
	0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33,
	0x61, 0x70, 0x69, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x7c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x34, 0xba,
	0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22,
	0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x91, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x22,
	0x36, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01,
	0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69,
	0x6e, 0x66, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x12, 0xbd, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x22, 0x41, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x91, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x42, 0x58, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x42, 0x58, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x42, 0x58, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x36, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01,
	0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x70, 0x62, 0x78, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0x90, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61,
	0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xac, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x75,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x90, 0x03,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x68, 0x75, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x37, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0x90, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a,
	0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70,
	0x33, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x8c, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0x90, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22,
	0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33,
	0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x8c, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0x90, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61,
	0x70, 0x69, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x95, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x42, 0x58,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x42,
	0x58, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x42, 0x58, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a,
	0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x70, 0x62,
	0x78, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x91, 0x01, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x43, 0x4c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x43, 0x4c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x43, 0x4c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x22, 0x36, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x6e, 0x63, 0x6c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x9d,
	0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x39, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0xab,
	0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x29, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x75,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x3e, 0xba, 0xb8,
	0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x68, 0x75, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xa1, 0x01, 0x0a,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x65,
	0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x57, 0x65, 0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x65, 0x62, 0x4c, 0x69, 0x6e, 0x6b,
	0x73, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x68,
	0x75, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x77, 0x65, 0x62, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x12, 0xa5, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x75, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91,
	0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x65, 0x74, 0x68, 0x75, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x70, 0x61,
	0x75, 0x73, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x22, 0x39, 0xba,
	0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22,
	0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33,
	0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x61, 0x6c,
	0x6c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0xb8, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x42, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x90, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0xc4, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x75, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x45, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x90, 0x03, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73,
	0x74, 0x68, 0x75, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f,
	0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x22,
	0x3c, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x90, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0xa0, 0x01,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f,
	0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x90, 0x03, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0xa0, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a,
	0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x90,
	0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x85, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f,
	0x6f, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f,
	0x6f, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x22, 0x33, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73,
	0x74, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x22, 0x36, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12,
	0xb9, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x02,
	0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x65, 0x74, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x22, 0x34, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27,
	0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x6c, 0x6f, 0x73, 0x74, 0x70,
	0x65, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x95, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x22,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74,
	0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x6b, 0x65, 0x79, 0x73, 0x12,
	0x85, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x22, 0x33, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xc9, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x6e, 0x64, 0x4f, 0x6e, 0x48,
	0x6f, 0x6c, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x6e, 0x64, 0x4f, 0x6e, 0x48, 0x6f, 0x6c,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x6e, 0x64, 0x4f, 0x6e, 0x48, 0x6f,
	0x6c, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x22, 0x44, 0xba,
	0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22,
	0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33,
	0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x68, 0x6f, 0x6c, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x64,
	0x61, 0x74, 0x61, 0x12, 0xa5, 0x01, 0x0a, 0x16, 0x53, 0x61, 0x76, 0x65, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x26,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x61, 0x76,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3b,
	0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a,
	0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70,
	0x33, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x61, 0x76, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x61,
	0x6c, 0x6c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8,
	0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61,
	0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xbd, 0x01, 0x0a, 0x1c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x22, 0x41, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x61, 0x6c, 0x6c, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x50, 0x65, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x22, 0x38, 0xba,
	0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22,
	0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x70,
	0x65, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0xb1, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3e, 0xba, 0xb8, 0x91,
	0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70,
	0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x67, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0xd1, 0x01, 0x0a, 0x21,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x52, 0x65, 0x73, 0x22, 0x46, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x3a, 0x01, 0x2a, 0x22, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65,
	0x74, 0x71, 0x75, 0x65, 0x75, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x61, 0x72, 0x72, 0x61, 0x79, 0x12,
	0xa9, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x4e, 0x43, 0x4c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x4e, 0x43, 0x4c, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x4e, 0x43, 0x4c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3c, 0xba,
	0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22,
	0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x64, 0x6e, 0x63, 0x6c, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0f,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x22, 0x34, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27,
	0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x64, 0x69,
	0x61, 0x6c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0xab, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x30, 0x01, 0x12, 0xa9, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b,
	0x73, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x77, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x73, 0x12, 0x9d, 0x01, 0x0a, 0x15, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0xa0, 0x01, 0x0a, 0x16, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x69,
	0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x39, 0xba, 0xb8, 0x91, 0x02, 0x02,
	0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x64, 0x69, 0x61, 0x6c,
	0x63, 0x61, 0x6c, 0x6c, 0x12, 0xa1, 0x01, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x25,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x69, 0x61, 0x6c, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x44, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8,
	0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x64, 0x69, 0x61, 0x6c, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x7d, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x10,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4e, 0x69, 0x6c,
	0x22, 0x35, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a,
	0x01, 0x2a, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xb1, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3e, 0xba, 0xb8, 0x91,
	0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70,
	0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xb1, 0x01, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x3e, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01,
	0x2a, 0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12,
	0x9d, 0x01, 0x0a, 0x14, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x24,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x52, 0x65, 0x73, 0x22, 0x39, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0xbd, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x2c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x22, 0x41, 0xba, 0xb8,
	0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61,
	0x70, 0x69, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x68, 0x75, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x79, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x22, 0x30, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x65, 0x74, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x12, 0x87, 0x01, 0x0a, 0x0e, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x35, 0xba,
	0xb8, 0x91, 0x02, 0x04, 0x0a, 0x02, 0x08, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01,
	0x2a, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x75,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3f, 0xba, 0xb8, 0x91,
	0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70,
	0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x72, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x68, 0x75, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x99, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x22, 0x38,
	0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a,
	0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70,
	0x33, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x6f, 0x72, 0x67, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73,
	0x74, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x64, 0x73, 0x66, 0x72, 0x6f, 0x6d, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x9d, 0x01, 0x0a, 0x14, 0x53, 0x61, 0x76, 0x65, 0x4c, 0x61, 0x73,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x61, 0x76, 0x65,
	0x4c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x22, 0x39, 0xba, 0xb8, 0x91, 0x02, 0x02,
	0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x61, 0x76, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x63, 0x61, 0x6c, 0x6c, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0xd1, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x79, 0x43, 0x61, 0x6c, 0x6c,
	0x53, 0x69, 0x64, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x79, 0x43, 0x61, 0x6c, 0x6c,
	0x53, 0x69, 0x64, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x79, 0x43,
	0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x22, 0x46, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x3a,
	0x01, 0x2a, 0x22, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x63, 0x61, 0x6c, 0x6c, 0x6c, 0x6f, 0x67, 0x73, 0x62, 0x79, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69,
	0x64, 0x61, 0x6e, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0xb9, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x33, 0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x63, 0x61, 0x6c, 0x6c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0xb1, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x22, 0x43, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x36, 0x3a, 0x01, 0x2a, 0x22, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x62, 0x79, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xd5, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12,
	0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x64, 0x52, 0x65, 0x73, 0x22, 0x47, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x3a, 0x01, 0x2a, 0x22, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x62, 0x79, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x69, 0x64,
	0x12, 0x91, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65,
	0x74, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x52,
	0x65, 0x73, 0x22, 0x38, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x69, 0x7a, 0x65, 0x12, 0xc3, 0x01, 0x0a,
	0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x44, 0xba, 0xb8,
	0x91, 0x02, 0x04, 0x0a, 0x02, 0x08, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a,
	0x22, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70,
	0x33, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0xc3, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x22, 0x44, 0xba, 0xb8, 0x91, 0x02, 0x04, 0x0a, 0x02, 0x08, 0x64, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xc3, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x44, 0xba, 0xb8, 0x91, 0x02, 0x04, 0x0a,
	0x02, 0x08, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69,
	0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xbd,
	0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x22, 0x41, 0xba, 0xb8, 0x91,
	0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70,
	0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xd9,
	0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x79, 0x43, 0x47, 0x53, 0x69, 0x64, 0x12, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x79, 0x43, 0x47, 0x53, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x43, 0x47, 0x53, 0x69, 0x64, 0x52, 0x65, 0x73,
	0x22, 0x48, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x3a,
	0x01, 0x2a, 0x22, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x62, 0x79, 0x63, 0x67, 0x73, 0x69, 0x64, 0x12, 0xb5, 0x01, 0x0a, 0x1a, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32,
	0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x12, 0xc1, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x22, 0x42, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x74, 0x6f, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0xa0, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48,
	0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x22, 0x3c, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0x90, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a,
	0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70,
	0x33, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x68, 0x75, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xc4, 0x01, 0x0a, 0x1d, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x45, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0x90, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61,
	0x70, 0x69, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x68, 0x75, 0x6e,
	0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x83, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x22, 0x34, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a,
	0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xf0,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x12, 0xd1, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x22, 0x46, 0xba,
	0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x3a, 0x01, 0x2a, 0x22,
	0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33,
	0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x61, 0x74, 0x61, 0x12, 0xb4, 0x01, 0x0a, 0x19, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x29,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x41, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0x90, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61,
	0x70, 0x69, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xbc, 0x01, 0x0a,
	0x1b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x43, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0x90, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x75,
	0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xd1, 0x01, 0x0a, 0x21,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x41, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69,
	0x64, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x41, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x41, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48,
	0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x64, 0x52, 0x65, 0x73, 0x22, 0x46, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x3a, 0x01, 0x2a, 0x22, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x6d, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x68, 0x75, 0x6e, 0x74, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x62, 0x79, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x69, 0x64, 0x12,
	0x84, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x74, 0x73, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x74, 0x73, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x74, 0x73, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x35, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe6, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x74, 0x74, 0x73,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x74, 0x73, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x74,
	0x73, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x74,
	0x73, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x22, 0x36, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xe6, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x74, 0x73, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x12, 0x88, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x74, 0x73, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x74, 0x73, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x74, 0x73, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x22, 0x36, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xe6, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x74, 0x74, 0x73, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x97, 0x01, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x22, 0x39, 0xba, 0xb8, 0x91,
	0x02, 0x04, 0x0a, 0x02, 0x08, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22,
	0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33,
	0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x64, 0x61,
	0x74, 0x61, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x23,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x04, 0x0a,
	0x02, 0x08, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x64, 0x61, 0x74,
	0x61, 0x6b, 0x65, 0x79, 0x12, 0x9b, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x04, 0x0a, 0x02, 0x08,
	0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x64, 0x61, 0x74, 0x61, 0x6b,
	0x65, 0x79, 0x12, 0x9b, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x1a,
	0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x04, 0x0a, 0x02, 0x08, 0x64, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x64, 0x61, 0x74, 0x61, 0x6b, 0x65, 0x79,
	0x12, 0xa6, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x4c, 0x6f, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xc8, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x6c, 0x6f, 0x67,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x30, 0x01, 0x12, 0xbb, 0x01, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x42, 0xba, 0xb8, 0x91, 0x02, 0x04, 0x0a, 0x02, 0x08, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x04, 0x0a, 0x02, 0x08, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x96, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x34, 0xba, 0xb8, 0x91, 0x02, 0x04, 0x0a, 0x02, 0x08, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xab, 0x01, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x04, 0x0a,
	0x02, 0x08, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x6d, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d,
	0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d,
	0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x22, 0x36, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xb0, 0x09, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a,
	0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70,
	0x33, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x6d, 0x73, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x22, 0x34, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xac, 0x02, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x70, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x6d, 0x61, 0x69,
	0x6c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x42, 0x92, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x0a, 0x50, 0x33, 0x61, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70,
	0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0xa2, 0x02, 0x03, 0x41, 0x56, 0x58, 0xaa, 0x02, 0x0b, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0xca, 0x02, 0x0b, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0xe2, 0x02, 0x17, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x41,
	0x70, 0x69, 0x3a, 0x3a, 0x56, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_api_v0alpha_p3api_proto_rawDescOnce sync.Once
	file_api_v0alpha_p3api_proto_rawDescData = file_api_v0alpha_p3api_proto_rawDesc
)

func file_api_v0alpha_p3api_proto_rawDescGZIP() []byte {
	file_api_v0alpha_p3api_proto_rawDescOnce.Do(func() {
		file_api_v0alpha_p3api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v0alpha_p3api_proto_rawDescData)
	})
	return file_api_v0alpha_p3api_proto_rawDescData
}

var file_api_v0alpha_p3api_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_api_v0alpha_p3api_proto_msgTypes = make([]protoimpl.MessageInfo, 303)
var file_api_v0alpha_p3api_proto_goTypes = []any{
	(AgentStatisticsSettings_HistoryFilter)(0),      // 0: api.v0alpha.AgentStatisticsSettings.HistoryFilter
	(HoldQueueMonitoringAgentRouting_Enum)(0),       // 1: api.v0alpha.HoldQueueMonitoringAgentRouting.Enum
	(ManualDialSettings_ZipCodeValidation)(0),       // 2: api.v0alpha.ManualDialSettings.ZipCodeValidation
	(ManualDialDataDipHandling_Enum)(0),             // 3: api.v0alpha.ManualDialDataDipHandling.Enum
	(DisplayDataSettings_DisplayDataDip)(0),         // 4: api.v0alpha.DisplayDataSettings.DisplayDataDip
	(RequeueTransferQueueConfigType_Enum)(0),        // 5: api.v0alpha.RequeueTransferQueueConfigType.Enum
	(RecordingStatus_Enum)(0),                       // 6: api.v0alpha.RecordingStatus.Enum
	(TransferSettingsType_Enum)(0),                  // 7: api.v0alpha.TransferSettingsType.Enum
	(TransferSettingsHandOffType_Enum)(0),           // 8: api.v0alpha.TransferSettingsHandOffType.Enum
	(AllowedHoldType_Enum)(0),                       // 9: api.v0alpha.AllowedHoldType.Enum
	(*GetAgentHuntGroupReq)(nil),                    // 10: api.v0alpha.GetAgentHuntGroupReq
	(*HuntGroup)(nil),                               // 11: api.v0alpha.HuntGroup
	(*GetAgentSkillsReq)(nil),                       // 12: api.v0alpha.GetAgentSkillsReq
	(*GetAgentSkillsRes)(nil),                       // 13: api.v0alpha.GetAgentSkillsRes
	(*CreateAgentSkillReq)(nil),                     // 14: api.v0alpha.CreateAgentSkillReq
	(*CreateAgentSkillRes)(nil),                     // 15: api.v0alpha.CreateAgentSkillRes
	(*UpdateAgentSkillReq)(nil),                     // 16: api.v0alpha.UpdateAgentSkillReq
	(*UpdateAgentSkillRes)(nil),                     // 17: api.v0alpha.UpdateAgentSkillRes
	(*DeleteAgentSkillReq)(nil),                     // 18: api.v0alpha.DeleteAgentSkillReq
	(*DeleteAgentSkillRes)(nil),                     // 19: api.v0alpha.DeleteAgentSkillRes
	(*ListAgentSkillsReq)(nil),                      // 20: api.v0alpha.ListAgentSkillsReq
	(*ListAgentSkillsRes)(nil),                      // 21: api.v0alpha.ListAgentSkillsRes
	(*ListSkillsForCurrentAgentReq)(nil),            // 22: api.v0alpha.ListSkillsForCurrentAgentReq
	(*ListSkillsForCurrentAgentRes)(nil),            // 23: api.v0alpha.ListSkillsForCurrentAgentRes
	(*GetAgentSessionReq)(nil),                      // 24: api.v0alpha.GetAgentSessionReq
	(*AgentSession)(nil),                            // 25: api.v0alpha.AgentSession
	(*GetCurrentAgentReq)(nil),                      // 26: api.v0alpha.GetCurrentAgentReq
	(*Agent)(nil),                                   // 27: api.v0alpha.Agent
	(*GetClientInfoDataReq)(nil),                    // 28: api.v0alpha.GetClientInfoDataReq
	(*GetClientInfoDataRes)(nil),                    // 29: api.v0alpha.GetClientInfoDataRes
	(*GetClientInfoDisplayTemplateReq)(nil),         // 30: api.v0alpha.GetClientInfoDisplayTemplateReq
	(*GetClientInfoDisplayTemplateRes)(nil),         // 31: api.v0alpha.GetClientInfoDisplayTemplateRes
	(*ListAgentStatisticsDataReq)(nil),              // 32: api.v0alpha.ListAgentStatisticsDataReq
	(*StatisticsData)(nil),                          // 33: api.v0alpha.StatisticsData
	(*StatisticsColumnDefinition)(nil),              // 34: api.v0alpha.StatisticsColumnDefinition
	(*ListAgentStatisticsDataRes)(nil),              // 35: api.v0alpha.ListAgentStatisticsDataRes
	(*PhoneBook)(nil),                               // 36: api.v0alpha.PhoneBook
	(*PhoneBookEntry)(nil),                          // 37: api.v0alpha.PhoneBookEntry
	(*PhoneBookStandardNumber)(nil),                 // 38: api.v0alpha.PhoneBookStandardNumber
	(*PhoneBookSIPURI)(nil),                         // 39: api.v0alpha.PhoneBookSIPURI
	(*ListClientPhoneBookEntriesReq)(nil),           // 40: api.v0alpha.ListClientPhoneBookEntriesReq
	(*ListClientPhoneBookEntriesRes)(nil),           // 41: api.v0alpha.ListClientPhoneBookEntriesRes
	(*ListHuntGroupPhoneBookEntriesReq)(nil),        // 42: api.v0alpha.ListHuntGroupPhoneBookEntriesReq
	(*ListHuntGroupPhoneBookEntriesRes)(nil),        // 43: api.v0alpha.ListHuntGroupPhoneBookEntriesRes
	(*CreatePhoneBookEntryReq)(nil),                 // 44: api.v0alpha.CreatePhoneBookEntryReq
	(*CreatePhoneBookEntryRes)(nil),                 // 45: api.v0alpha.CreatePhoneBookEntryRes
	(*UpdatePhoneBookEntryReq)(nil),                 // 46: api.v0alpha.UpdatePhoneBookEntryReq
	(*UpdatePhoneBookEntryRes)(nil),                 // 47: api.v0alpha.UpdatePhoneBookEntryRes
	(*DeletePhoneBookEntryReq)(nil),                 // 48: api.v0alpha.DeletePhoneBookEntryReq
	(*DeletePhoneBookEntryRes)(nil),                 // 49: api.v0alpha.DeletePhoneBookEntryRes
	(*ListPhoneBooksReq)(nil),                       // 50: api.v0alpha.ListPhoneBooksReq
	(*ListPhoneBooksRes)(nil),                       // 51: api.v0alpha.ListPhoneBooksRes
	(*ListAgentTriggersReq)(nil),                    // 52: api.v0alpha.ListAgentTriggersReq
	(*TriggerParameters)(nil),                       // 53: api.v0alpha.TriggerParameters
	(*TriggerDetails)(nil),                          // 54: api.v0alpha.TriggerDetails
	(*ListAgentTriggersRes)(nil),                    // 55: api.v0alpha.ListAgentTriggersRes
	(*PBXExtension)(nil),                            // 56: api.v0alpha.PBXExtension
	(*ListPBXExtensionsReq)(nil),                    // 57: api.v0alpha.ListPBXExtensionsReq
	(*ListPBXExtensionsRes)(nil),                    // 58: api.v0alpha.ListPBXExtensionsRes
	(*EmailResponse)(nil),                           // 59: api.v0alpha.EmailResponse
	(*MailMergeData)(nil),                           // 60: api.v0alpha.MailMergeData
	(*HuntGroupResponse)(nil),                       // 61: api.v0alpha.HuntGroupResponse
	(*DNCL)(nil),                                    // 62: api.v0alpha.DNCL
	(*AgentLoggingData)(nil),                        // 63: api.v0alpha.AgentLoggingData
	(*CreateDNCLNumbersReq)(nil),                    // 64: api.v0alpha.CreateDNCLNumbersReq
	(*CreateDNCLNumbersRes)(nil),                    // 65: api.v0alpha.CreateDNCLNumbersRes
	(*GetHuntGroupAgentSettingsReq)(nil),            // 66: api.v0alpha.GetHuntGroupAgentSettingsReq
	(*HuntGroupAgentSettings)(nil),                  // 67: api.v0alpha.HuntGroupAgentSettings
	(*AgentStatisticsSettings)(nil),                 // 68: api.v0alpha.AgentStatisticsSettings
	(*PauseSettings)(nil),                           // 69: api.v0alpha.PauseSettings
	(*PhoneNumberActivitySettings)(nil),             // 70: api.v0alpha.PhoneNumberActivitySettings
	(*PreviewDialSettings)(nil),                     // 71: api.v0alpha.PreviewDialSettings
	(*HoldQueueMonitoringAgentRouting)(nil),         // 72: api.v0alpha.HoldQueueMonitoringAgentRouting
	(*HoldQueueMonitorSettings)(nil),                // 73: api.v0alpha.HoldQueueMonitorSettings
	(*ComplianceMetadata)(nil),                      // 74: api.v0alpha.ComplianceMetadata
	(*ManualDialSettings)(nil),                      // 75: api.v0alpha.ManualDialSettings
	(*ManualDialDataDipHandling)(nil),               // 76: api.v0alpha.ManualDialDataDipHandling
	(*ScrubListsAutoAdd)(nil),                       // 77: api.v0alpha.ScrubListsAutoAdd
	(*ScrubListsExpirationLimits)(nil),              // 78: api.v0alpha.ScrubListsExpirationLimits
	(*DnclSettings)(nil),                            // 79: api.v0alpha.DnclSettings
	(*TransferSettings)(nil),                        // 80: api.v0alpha.TransferSettings
	(*RecordingSettings)(nil),                       // 81: api.v0alpha.RecordingSettings
	(*SimpleHuntGroup)(nil),                         // 82: api.v0alpha.SimpleHuntGroup
	(*DisplayDataSettings)(nil),                     // 83: api.v0alpha.DisplayDataSettings
	(*RequeueTransferQueueConfigType)(nil),          // 84: api.v0alpha.RequeueTransferQueueConfigType
	(*RecordingStatus)(nil),                         // 85: api.v0alpha.RecordingStatus
	(*TransferSettingsType)(nil),                    // 86: api.v0alpha.TransferSettingsType
	(*TransferSettingsHandOffType)(nil),             // 87: api.v0alpha.TransferSettingsHandOffType
	(*AgentHoldSettings)(nil),                       // 88: api.v0alpha.AgentHoldSettings
	(*AllowedHoldType)(nil),                         // 89: api.v0alpha.AllowedHoldType
	(*ManualApprovalSettings)(nil),                  // 90: api.v0alpha.ManualApprovalSettings
	(*ListHuntGroupWebLinksReq)(nil),                // 91: api.v0alpha.ListHuntGroupWebLinksReq
	(*ListHuntGroupWebLinksRes)(nil),                // 92: api.v0alpha.ListHuntGroupWebLinksRes
	(*WebLink)(nil),                                 // 93: api.v0alpha.WebLink
	(*GetHuntGroupPauseCodesReq)(nil),               // 94: api.v0alpha.GetHuntGroupPauseCodesReq
	(*GetHuntGroupPauseCodesRes)(nil),               // 95: api.v0alpha.GetHuntGroupPauseCodesRes
	(*ListAgentCallHistoryReq)(nil),                 // 96: api.v0alpha.ListAgentCallHistoryReq
	(*ListAgentCallHistoryRes)(nil),                 // 97: api.v0alpha.ListAgentCallHistoryRes
	(*GetCampaignCompletionStatusReq)(nil),          // 98: api.v0alpha.GetCampaignCompletionStatusReq
	(*GetCampaignCompletionStatusRes)(nil),          // 99: api.v0alpha.GetCampaignCompletionStatusRes
	(*GetLostPeerInfoReq)(nil),                      // 100: api.v0alpha.GetLostPeerInfoReq
	(*GetLostPeerInfoRes)(nil),                      // 101: api.v0alpha.GetLostPeerInfoRes
	(*GetDispositionKeysReq)(nil),                   // 102: api.v0alpha.GetDispositionKeysReq
	(*GetDispositionKeysRes)(nil),                   // 103: api.v0alpha.GetDispositionKeysRes
	(*GetScriptOrResponsesReq)(nil),                 // 104: api.v0alpha.GetScriptOrResponsesReq
	(*GetScriptOrResponsesRes)(nil),                 // 105: api.v0alpha.GetScriptOrResponsesRes
	(*GetReadyAgentsReq)(nil),                       // 106: api.v0alpha.GetReadyAgentsReq
	(*GetReadyAgentsRes)(nil),                       // 107: api.v0alpha.GetReadyAgentsRes
	(*AgentsByAgentSidShort)(nil),                   // 108: api.v0alpha.AgentsByAgentSidShort
	(*ListAgentQueueAndOnHoldCallDataReq)(nil),      // 109: api.v0alpha.ListAgentQueueAndOnHoldCallDataReq
	(*ListAgentQueueAndOnHoldCallDataRes)(nil),      // 110: api.v0alpha.ListAgentQueueAndOnHoldCallDataRes
	(*AgentCallResponseDetails)(nil),                // 111: api.v0alpha.AgentCallResponseDetails
	(*SaveAgentCallResponsesReq)(nil),               // 112: api.v0alpha.SaveAgentCallResponsesReq
	(*SaveAgentCallResponsesRes)(nil),               // 113: api.v0alpha.SaveAgentCallResponsesRes
	(*AgentCallLog)(nil),                            // 114: api.v0alpha.AgentCallLog
	(*AgentSkill)(nil),                              // 115: api.v0alpha.AgentSkill
	(*ListAgentTransferOptionsReq)(nil),             // 116: api.v0alpha.ListAgentTransferOptionsReq
	(*ListAgentTransferOptionsRes)(nil),             // 117: api.v0alpha.ListAgentTransferOptionsRes
	(*GetIntercomPeerInfoReq)(nil),                  // 118: api.v0alpha.GetIntercomPeerInfoReq
	(*GetIntercomPeerInfoRes)(nil),                  // 119: api.v0alpha.GetIntercomPeerInfoRes
	(*ListOrgResponseEvaluatorsReq)(nil),            // 120: api.v0alpha.ListOrgResponseEvaluatorsReq
	(*ListOrgResponseEvaluatorsRes)(nil),            // 121: api.v0alpha.ListOrgResponseEvaluatorsRes
	(*ResponseEvaluator)(nil),                       // 122: api.v0alpha.ResponseEvaluator
	(*GetQueueConfigurationOptionsArrayReq)(nil),    // 123: api.v0alpha.GetQueueConfigurationOptionsArrayReq
	(*GetQueueConfigurationOptionsArrayRes)(nil),    // 124: api.v0alpha.GetQueueConfigurationOptionsArrayRes
	(*AgentCallActivityDetails)(nil),                // 125: api.v0alpha.AgentCallActivityDetails
	(*GetConditionalDNCLRulesReq)(nil),              // 126: api.v0alpha.GetConditionalDNCLRulesReq
	(*GetConditionalDNCLRulesRes)(nil),              // 127: api.v0alpha.GetConditionalDNCLRulesRes
	(*ManualDialStartReq)(nil),                      // 128: api.v0alpha.ManualDialStartReq
	(*ManualDialStartRes)(nil),                      // 129: api.v0alpha.ManualDialStartRes
	(*ListExtendedCallHistoryReq)(nil),              // 130: api.v0alpha.ListExtendedCallHistoryReq
	(*ListExtendedCallHistoryRes)(nil),              // 131: api.v0alpha.ListExtendedCallHistoryRes
	(*ListWhiteListPhoneBooksReq)(nil),              // 132: api.v0alpha.ListWhiteListPhoneBooksReq
	(*ListWhiteListPhoneBooksRes)(nil),              // 133: api.v0alpha.ListWhiteListPhoneBooksRes
	(*UpdateAgentCallResponseValueReq)(nil),         // 134: api.v0alpha.UpdateAgentCallResponseValueReq
	(*UpdateAgentCallResponseValueRes)(nil),         // 135: api.v0alpha.UpdateAgentCallResponseValueRes
	(*PlacePreviewDialCallReq)(nil),                 // 136: api.v0alpha.PlacePreviewDialCallReq
	(*PlacePreviewDialCallRes)(nil),                 // 137: api.v0alpha.PlacePreviewDialCallRes
	(*CancelPreviewDialCallReq)(nil),                // 138: api.v0alpha.CancelPreviewDialCallReq
	(*CancelPreviewDialCallRes)(nil),                // 139: api.v0alpha.CancelPreviewDialCallRes
	(*DownloadRecordingRes)(nil),                    // 140: api.v0alpha.DownloadRecordingRes
	(*DownloadCallRecordingReq)(nil),                // 141: api.v0alpha.DownloadCallRecordingReq
	(*DownloadCallRecordingsReq)(nil),               // 142: api.v0alpha.DownloadCallRecordingsReq
	(*AgentDispositionConditionalDncl)(nil),         // 143: api.v0alpha.AgentDispositionConditionalDncl
	(*UpdateTaskStatusReq)(nil),                     // 144: api.v0alpha.UpdateTaskStatusReq
	(*Nil)(nil),                                     // 145: api.v0alpha.Nil
	(*ListCallbackRoutingAgentsReq)(nil),            // 146: api.v0alpha.ListCallbackRoutingAgentsReq
	(*ListCallbackRoutingAgentsRes)(nil),            // 147: api.v0alpha.ListCallbackRoutingAgentsRes
	(*ListCallbackRoutingSkillsReq)(nil),            // 148: api.v0alpha.ListCallbackRoutingSkillsReq
	(*ListCallbackRoutingSkillsRes)(nil),            // 149: api.v0alpha.ListCallbackRoutingSkillsRes
	(*HandleRecordingDelayReq)(nil),                 // 150: api.v0alpha.HandleRecordingDelayReq
	(*HandleRecordingDelayRes)(nil),                 // 151: api.v0alpha.HandleRecordingDelayRes
	(*ScheduleCallBackSettings)(nil),                // 152: api.v0alpha.ScheduleCallBackSettings
	(*UpdateAgentAssignedHuntGroupReq)(nil),         // 153: api.v0alpha.UpdateAgentAssignedHuntGroupReq
	(*UpdateAgentAssignedHuntGroupRes)(nil),         // 154: api.v0alpha.UpdateAgentAssignedHuntGroupRes
	(*ListHuntGroupsReq)(nil),                       // 155: api.v0alpha.ListHuntGroupsReq
	(*ListHuntGroupsRes)(nil),                       // 156: api.v0alpha.ListHuntGroupsRes
	(*ListReassignmentHuntGroupsReq)(nil),           // 157: api.v0alpha.ListReassignmentHuntGroupsReq
	(*ListReassignmentHuntGroupsRes)(nil),           // 158: api.v0alpha.ListReassignmentHuntGroupsRes
	(*GetOrgAgentSettingsReq)(nil),                  // 159: api.v0alpha.GetOrgAgentSettingsReq
	(*GetOrgAgentSettingsRes)(nil),                  // 160: api.v0alpha.GetOrgAgentSettingsRes
	(*ListCallerIdsFromBucketReq)(nil),              // 161: api.v0alpha.ListCallerIdsFromBucketReq
	(*ListCallerIdsFromBucketRes)(nil),              // 162: api.v0alpha.ListCallerIdsFromBucketRes
	(*CallerIdInfo)(nil),                            // 163: api.v0alpha.CallerIdInfo
	(*SaveLastCallResponseReq)(nil),                 // 164: api.v0alpha.SaveLastCallResponseReq
	(*SaveLastCallResponseRes)(nil),                 // 165: api.v0alpha.SaveLastCallResponseRes
	(*AgentCallResponse)(nil),                       // 166: api.v0alpha.AgentCallResponse
	(*GetCallDetailsRes)(nil),                       // 167: api.v0alpha.GetCallDetailsRes
	(*ListAgentCallLogsByCallSidAndTypeReq)(nil),    // 168: api.v0alpha.ListAgentCallLogsByCallSidAndTypeReq
	(*ListAgentCallLogsByCallSidAndTypeRes)(nil),    // 169: api.v0alpha.ListAgentCallLogsByCallSidAndTypeRes
	(*ContactFieldDataRow)(nil),                     // 170: api.v0alpha.ContactFieldDataRow
	(*GetCallDataReq)(nil),                          // 171: api.v0alpha.GetCallDataReq
	(*GetCallDataRes)(nil),                          // 172: api.v0alpha.GetCallDataRes
	(*UpdatePBXExtensionReq)(nil),                   // 173: api.v0alpha.UpdatePBXExtensionReq
	(*UpdatePBXExtensionRes)(nil),                   // 174: api.v0alpha.UpdatePBXExtensionRes
	(*HuntGroupScript)(nil),                         // 175: api.v0alpha.HuntGroupScript
	(*Act)(nil),                                     // 176: api.v0alpha.Act
	(*Disposition)(nil),                             // 177: api.v0alpha.Disposition
	(*Verbiage)(nil),                                // 178: api.v0alpha.Verbiage
	(*ConditionalNavigation)(nil),                   // 179: api.v0alpha.ConditionalNavigation
	(*ComplexBooleanExpressionList)(nil),            // 180: api.v0alpha.ComplexBooleanExpressionList
	(*ComplexBooleanExpression)(nil),                // 181: api.v0alpha.ComplexBooleanExpression
	(*CompareExpressionList)(nil),                   // 182: api.v0alpha.CompareExpressionList
	(*CompareExpression)(nil),                       // 183: api.v0alpha.CompareExpression
	(*ListAgentCallResponseValuesReq)(nil),          // 184: api.v0alpha.ListAgentCallResponseValuesReq
	(*ListAgentCallResponseValuesRes)(nil),          // 185: api.v0alpha.ListAgentCallResponseValuesRes
	(*ContactSchema)(nil),                           // 186: api.v0alpha.ContactSchema
	(*GetContactSchemaByContactGroupReq)(nil),       // 187: api.v0alpha.GetContactSchemaByContactGroupReq
	(*ContactFieldDescription)(nil),                 // 188: api.v0alpha.ContactFieldDescription
	(*ContactGroup)(nil),                            // 189: api.v0alpha.ContactGroup
	(*GetContactGroupReq)(nil),                      // 190: api.v0alpha.GetContactGroupReq
	(*GetContactGroupSizeRes)(nil),                  // 191: api.v0alpha.GetContactGroupSizeRes
	(*ListContactGroupDetailsByClientSidReq)(nil),   // 192: api.v0alpha.ListContactGroupDetailsByClientSidReq
	(*ListContactGroupDetailsByClientSidRes)(nil),   // 193: api.v0alpha.ListContactGroupDetailsByClientSidRes
	(*CreateContactFieldDescriptionReq)(nil),        // 194: api.v0alpha.CreateContactFieldDescriptionReq
	(*CreateContactFieldDescriptionRes)(nil),        // 195: api.v0alpha.CreateContactFieldDescriptionRes
	(*UpdateContactFieldDescriptionReq)(nil),        // 196: api.v0alpha.UpdateContactFieldDescriptionReq
	(*UpdateContactFieldDescriptionRes)(nil),        // 197: api.v0alpha.UpdateContactFieldDescriptionRes
	(*DeleteContactFieldDescriptionReq)(nil),        // 198: api.v0alpha.DeleteContactFieldDescriptionReq
	(*DeleteContactFieldDescriptionRes)(nil),        // 199: api.v0alpha.DeleteContactFieldDescriptionRes
	(*ListContactFieldDescriptionsReq)(nil),         // 200: api.v0alpha.ListContactFieldDescriptionsReq
	(*ListContactFieldDescriptionsRes)(nil),         // 201: api.v0alpha.ListContactFieldDescriptionsRes
	(*ListContactFieldDescriptionsByCGSidReq)(nil),  // 202: api.v0alpha.ListContactFieldDescriptionsByCGSidReq
	(*ListContactFieldDescriptionsByCGSidRes)(nil),  // 203: api.v0alpha.ListContactFieldDescriptionsByCGSidRes
	(*ListTableTemplatePropertiesReq)(nil),          // 204: api.v0alpha.ListTableTemplatePropertiesReq
	(*ListTableTemplatePropertiesRes)(nil),          // 205: api.v0alpha.ListTableTemplatePropertiesRes
	(*TableTemplateProperty)(nil),                   // 206: api.v0alpha.TableTemplateProperty
	(*ListAgentSkillsFiltersReq)(nil),               // 207: api.v0alpha.ListAgentSkillsFiltersReq
	(*ListAgentSkillsFiltersRes)(nil),               // 208: api.v0alpha.ListAgentSkillsFiltersRes
	(*AgentSkillsFilter)(nil),                       // 209: api.v0alpha.AgentSkillsFilter
	(*ListCustomReportFiltersReq)(nil),              // 210: api.v0alpha.ListCustomReportFiltersReq
	(*ListCustomReportFiltersRes)(nil),              // 211: api.v0alpha.ListCustomReportFiltersRes
	(*CustomReportFilterProperty)(nil),              // 212: api.v0alpha.CustomReportFilterProperty
	(*ContactImportTemplate)(nil),                   // 213: api.v0alpha.ContactImportTemplate
	(*ListContactImportTemplatesReq)(nil),           // 214: api.v0alpha.ListContactImportTemplatesReq
	(*ListContactImportTemplatesRes)(nil),           // 215: api.v0alpha.ListContactImportTemplatesRes
	(*UpdatePreviewRecordToFinishedReq)(nil),        // 216: api.v0alpha.UpdatePreviewRecordToFinishedReq
	(*UpdatePreviewRecordToFinishedRes)(nil),        // 217: api.v0alpha.UpdatePreviewRecordToFinishedRes
	(*UpdateAgentHuntGroupReq)(nil),                 // 218: api.v0alpha.UpdateAgentHuntGroupReq
	(*UpdateAgentHuntGroupRes)(nil),                 // 219: api.v0alpha.UpdateAgentHuntGroupRes
	(*MultiAgentHuntGroupAssignmentReq)(nil),        // 220: api.v0alpha.MultiAgentHuntGroupAssignmentReq
	(*MultiAgentHuntGroupAssignmentRes)(nil),        // 221: api.v0alpha.MultiAgentHuntGroupAssignmentRes
	(*GetAgentProfileReq)(nil),                      // 222: api.v0alpha.GetAgentProfileReq
	(*AgentProfile)(nil),                            // 223: api.v0alpha.AgentProfile
	(*RecalculateBillingReq)(nil),                   // 224: api.v0alpha.RecalculateBillingReq
	(*RecalculateBillingRes)(nil),                   // 225: api.v0alpha.RecalculateBillingRes
	(*ListOutboundBroadcastTemplateDataReq)(nil),    // 226: api.v0alpha.ListOutboundBroadcastTemplateDataReq
	(*ListOutboundBroadcastTemplateDataRes)(nil),    // 227: api.v0alpha.ListOutboundBroadcastTemplateDataRes
	(*MultiAgentSkillAssignmentReq)(nil),            // 228: api.v0alpha.MultiAgentSkillAssignmentReq
	(*MultiAgentSkillAssignmentRes)(nil),            // 229: api.v0alpha.MultiAgentSkillAssignmentRes
	(*MultiAgentSkillUnassignmentReq)(nil),          // 230: api.v0alpha.MultiAgentSkillUnassignmentReq
	(*MultiAgentSkillUnassignmentRes)(nil),          // 231: api.v0alpha.MultiAgentSkillUnassignmentRes
	(*ListMAMAgentHuntGroupsByClientSidReq)(nil),    // 232: api.v0alpha.ListMAMAgentHuntGroupsByClientSidReq
	(*ListMAMAgentHuntGroupsByClientSidRes)(nil),    // 233: api.v0alpha.ListMAMAgentHuntGroupsByClientSidRes
	(*UpdateAgentSkillsReq)(nil),                    // 234: api.v0alpha.UpdateAgentSkillsReq
	(*SkillUpdate)(nil),                             // 235: api.v0alpha.SkillUpdate
	(*UpdateAgentSkillsRes)(nil),                    // 236: api.v0alpha.UpdateAgentSkillsRes
	(*ListTtsVoicesReq)(nil),                        // 237: api.v0alpha.ListTtsVoicesReq
	(*ListTtsVoicesRes)(nil),                        // 238: api.v0alpha.ListTtsVoicesRes
	(*TtsVoice)(nil),                                // 239: api.v0alpha.TtsVoice
	(*CreateTtsVoiceReq)(nil),                       // 240: api.v0alpha.CreateTtsVoiceReq
	(*CreateTtsVoiceRes)(nil),                       // 241: api.v0alpha.CreateTtsVoiceRes
	(*DeleteTtsVoiceReq)(nil),                       // 242: api.v0alpha.DeleteTtsVoiceReq
	(*DeleteTtsVoiceRes)(nil),                       // 243: api.v0alpha.DeleteTtsVoiceRes
	(*CustomDataKey)(nil),                           // 244: api.v0alpha.CustomDataKey
	(*ListCustomDataKeysReq)(nil),                   // 245: api.v0alpha.ListCustomDataKeysReq
	(*ListCustomDataKeysRes)(nil),                   // 246: api.v0alpha.ListCustomDataKeysRes
	(*CreateCustomDataKeyReq)(nil),                  // 247: api.v0alpha.CreateCustomDataKeyReq
	(*CreateCustomDataKeyRes)(nil),                  // 248: api.v0alpha.CreateCustomDataKeyRes
	(*DeleteCustomDataKeyReq)(nil),                  // 249: api.v0alpha.DeleteCustomDataKeyReq
	(*DeleteCustomDataKeyRes)(nil),                  // 250: api.v0alpha.DeleteCustomDataKeyRes
	(*UpdateCustomDataKeyReq)(nil),                  // 251: api.v0alpha.UpdateCustomDataKeyReq
	(*UpdateCustomDataKeyRes)(nil),                  // 252: api.v0alpha.UpdateCustomDataKeyRes
	(*Extension)(nil),                               // 253: api.v0alpha.Extension
	(*ListAgentExtensionsReq)(nil),                  // 254: api.v0alpha.ListAgentExtensionsReq
	(*ListAgentExtensionsRes)(nil),                  // 255: api.v0alpha.ListAgentExtensionsRes
	(*ListHuntGroupExtensionsReq)(nil),              // 256: api.v0alpha.ListHuntGroupExtensionsReq
	(*ListHuntGroupExtensionsRes)(nil),              // 257: api.v0alpha.ListHuntGroupExtensionsRes
	(*CreateExtensionReq)(nil),                      // 258: api.v0alpha.CreateExtensionReq
	(*CreateExtensionRes)(nil),                      // 259: api.v0alpha.CreateExtensionRes
	(*UpdateExtensionReq)(nil),                      // 260: api.v0alpha.UpdateExtensionReq
	(*UpdateExtensionRes)(nil),                      // 261: api.v0alpha.UpdateExtensionRes
	(*DeleteExtensionReq)(nil),                      // 262: api.v0alpha.DeleteExtensionReq
	(*DeleteExtensionRes)(nil),                      // 263: api.v0alpha.DeleteExtensionRes
	(*GetActivityLogHistoryReq)(nil),                // 264: api.v0alpha.GetActivityLogHistoryReq
	(*GetActivityLogHistoryRes)(nil),                // 265: api.v0alpha.GetActivityLogHistoryRes
	(*ActivityLog)(nil),                             // 266: api.v0alpha.ActivityLog
	(*ListSkillsReq)(nil),                           // 267: api.v0alpha.ListSkillsReq
	(*ListSkillsRes)(nil),                           // 268: api.v0alpha.ListSkillsRes
	(*P3Skill)(nil),                                 // 269: api.v0alpha.P3Skill
	(*ListScheduleRulesRequest)(nil),                // 270: api.v0alpha.ListScheduleRulesRequest
	(*ListScheduleRulesResult)(nil),                 // 271: api.v0alpha.ListScheduleRulesResult
	(*ScheduleRule)(nil),                            // 272: api.v0alpha.ScheduleRule
	(*ListSmsNumbersReq)(nil),                       // 273: api.v0alpha.ListSmsNumbersReq
	(*ListSmsNumbersRes)(nil),                       // 274: api.v0alpha.ListSmsNumbersRes
	(*GetMailMergeReq)(nil),                         // 275: api.v0alpha.GetMailMergeReq
	(*GetMailMergeRes)(nil),                         // 276: api.v0alpha.GetMailMergeRes
	nil,                                             // 277: api.v0alpha.GetAgentSkillsRes.SkillsEntry
	(*ListPBXExtensionsRes_AgentExtension)(nil),     // 278: api.v0alpha.ListPBXExtensionsRes.AgentExtension
	(*ListPBXExtensionsRes_HuntGroupExtension)(nil), // 279: api.v0alpha.ListPBXExtensionsRes.HuntGroupExtension
	nil,                                   // 280: api.v0alpha.ManualDialSettings.DataDipManualDialIntegrationEntry
	(*ListAgentCallHistoryRes_Entry)(nil), // 281: api.v0alpha.ListAgentCallHistoryRes.Entry
	(*GetCampaignCompletionStatusRes_TaskGroupCompletionStatus)(nil), // 282: api.v0alpha.GetCampaignCompletionStatusRes.TaskGroupCompletionStatus
	nil, // 283: api.v0alpha.GetCampaignCompletionStatusRes.CompletionStatusEntry
	(*ListAgentQueueAndOnHoldCallDataRes_CallData)(nil),                // 284: api.v0alpha.ListAgentQueueAndOnHoldCallDataRes.CallData
	(*DownloadCallRecordingsReq_CallParams)(nil),                       // 285: api.v0alpha.DownloadCallRecordingsReq.CallParams
	(*AgentDispositionConditionalDncl_DispositionRulesTable)(nil),      // 286: api.v0alpha.AgentDispositionConditionalDncl.DispositionRulesTable
	(*AgentDispositionConditionalDncl_DispositionExpirationTable)(nil), // 287: api.v0alpha.AgentDispositionConditionalDncl.DispositionExpirationTable
	nil, // 288: api.v0alpha.UpdateAgentAssignedHuntGroupReq.SkillsEntry
	nil, // 289: api.v0alpha.GetCallDataRes.IvrDataEntry
	nil, // 290: api.v0alpha.GetCallDataRes.PhoneEnhancedDataEntry
	nil, // 291: api.v0alpha.GetCallDataRes.DataCollectDataEntry
	nil, // 292: api.v0alpha.GetCallDataRes.DataDipDataEntry
	nil, // 293: api.v0alpha.GetCallDataRes.SipHeaderDataEntry
	nil, // 294: api.v0alpha.GetCallDataRes.QueuedCallbackDataEntry
	nil, // 295: api.v0alpha.GetCallDataRes.JourneyRetrievedDataEntry
	nil, // 296: api.v0alpha.GetCallDataRes.IntegrationDataEntry
	(*ListAgentCallResponseValuesRes_Response)(nil),   // 297: api.v0alpha.ListAgentCallResponseValuesRes.Response
	(*RecalculateBillingRes_Result)(nil),              // 298: api.v0alpha.RecalculateBillingRes.Result
	(*ListOutboundBroadcastTemplateDataRes_Data)(nil), // 299: api.v0alpha.ListOutboundBroadcastTemplateDataRes.Data
	(*Extension_Agent)(nil),                           // 300: api.v0alpha.Extension.Agent
	(*Extension_HuntGroup)(nil),                       // 301: api.v0alpha.Extension.HuntGroup
	(*Extension_Email)(nil),                           // 302: api.v0alpha.Extension.Email
	nil,                                               // 303: api.v0alpha.GetMailMergeRes.AgentInfoEntry
	nil,                                               // 304: api.v0alpha.GetMailMergeRes.CustomDataEntry
	nil,                                               // 305: api.v0alpha.GetMailMergeRes.DataCollectEntry
	nil,                                               // 306: api.v0alpha.GetMailMergeRes.DataDipEntry
	nil,                                               // 307: api.v0alpha.GetMailMergeRes.IvrEntry
	nil,                                               // 308: api.v0alpha.GetMailMergeRes.ScheduledCallEntry
	nil,                                               // 309: api.v0alpha.GetMailMergeRes.TtsEntry
	nil,                                               // 310: api.v0alpha.GetMailMergeRes.ZipPhoneMetadataEntry
	nil,                                               // 311: api.v0alpha.GetMailMergeRes.JourneyRetrievedDataEntry
	nil,                                               // 312: api.v0alpha.GetMailMergeRes.IntegrationDataEntry
	(*wrapperspb.StringValue)(nil),                    // 313: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),                     // 314: google.protobuf.Timestamp
	(commons.HuntGroupType_Enum)(0),                   // 315: api.commons.HuntGroupType.Enum
	(*wrapperspb.Int32Value)(nil),                     // 316: google.protobuf.Int32Value
	(*wrapperspb.DoubleValue)(nil),                    // 317: google.protobuf.DoubleValue
	(*wrapperspb.Int64Value)(nil),                     // 318: google.protobuf.Int64Value
	(*wrapperspb.BoolValue)(nil),                      // 319: google.protobuf.BoolValue
	(commons.AgentDialIn_Enum)(0),                     // 320: api.commons.AgentDialIn.Enum
	(commons.CallType_Enum)(0),                        // 321: api.commons.CallType.Enum
	(*commons.ClientInfoDataRow)(nil),                 // 322: api.commons.ClientInfoDataRow
	(*commons.DialedNumberFieldSettings)(nil),    // 323: api.commons.DialedNumberFieldSettings
	(*commons.ClientInfoDisplayTemplateRow)(nil), // 324: api.commons.ClientInfoDisplayTemplateRow
	(commons.PhoneBookPhoneNumberType)(0),        // 325: api.commons.PhoneBookPhoneNumberType
	(commons.PhoneBookSIPType)(0),                // 326: api.commons.PhoneBookSIPType
	(commons.InterruptedPeeringStatus)(0),        // 327: api.commons.InterruptedPeeringStatus
	(*commons.SimpleKeyValue)(nil),               // 328: api.commons.SimpleKeyValue
	(*commons.SimpleCallData)(nil),               // 329: api.commons.SimpleCallData
	(commons.CallHistorySearchType_Enum)(0),      // 330: api.commons.CallHistorySearchType.Enum
	(commons.CallHistorySearchScope_Enum)(0),     // 331: api.commons.CallHistorySearchScope.Enum
	(commons.ListPhoneBookOrderBy_Enum)(0),       // 332: api.commons.ListPhoneBookOrderBy.Enum
	(commons.TaskStatus)(0),                      // 333: api.commons.TaskStatus
	(commons.RecalculateBillingMonth)(0),         // 334: api.commons.RecalculateBillingMonth
	(commons.RecalculateBillingType)(0),          // 335: api.commons.RecalculateBillingType
	(commons.SkillType_Enum)(0),                  // 336: api.commons.SkillType.Enum
	(*commons.SmsNumber)(nil),                    // 337: api.commons.SmsNumber
	(commons.QueuedNotificationType)(0),          // 338: api.commons.QueuedNotificationType
	(commons.TemplateType_Enum)(0),               // 339: api.commons.TemplateType.Enum
}
var file_api_v0alpha_p3api_proto_depIdxs = []int32{
	313, // 0: api.v0alpha.HuntGroup.description:type_name -> google.protobuf.StringValue
	314, // 1: api.v0alpha.HuntGroup.modify_date:type_name -> google.protobuf.Timestamp
	315, // 2: api.v0alpha.HuntGroup.type:type_name -> api.commons.HuntGroupType.Enum
	277, // 3: api.v0alpha.GetAgentSkillsRes.skills:type_name -> api.v0alpha.GetAgentSkillsRes.SkillsEntry
	115, // 4: api.v0alpha.ListAgentSkillsRes.skills:type_name -> api.v0alpha.AgentSkill
	115, // 5: api.v0alpha.ListSkillsForCurrentAgentRes.skills:type_name -> api.v0alpha.AgentSkill
	314, // 6: api.v0alpha.AgentSession.web_login_time:type_name -> google.protobuf.Timestamp
	314, // 7: api.v0alpha.AgentSession.web_logout_time:type_name -> google.protobuf.Timestamp
	314, // 8: api.v0alpha.AgentSession.ivr_login_time:type_name -> google.protobuf.Timestamp
	314, // 9: api.v0alpha.AgentSession.ivr_logout_time:type_name -> google.protobuf.Timestamp
	316, // 10: api.v0alpha.AgentSession.ivr_duration:type_name -> google.protobuf.Int32Value
	316, // 11: api.v0alpha.AgentSession.ivr_billed_duration:type_name -> google.protobuf.Int32Value
	317, // 12: api.v0alpha.AgentSession.cost:type_name -> google.protobuf.DoubleValue
	318, // 13: api.v0alpha.AgentSession.agent_sid:type_name -> google.protobuf.Int64Value
	316, // 14: api.v0alpha.AgentSession.status:type_name -> google.protobuf.Int32Value
	319, // 15: api.v0alpha.AgentSession.softphone_user:type_name -> google.protobuf.BoolValue
	320, // 16: api.v0alpha.AgentSession.agent_dial_in:type_name -> api.commons.AgentDialIn.Enum
	313, // 17: api.v0alpha.AgentSession.agent_callerid:type_name -> google.protobuf.StringValue
	313, // 18: api.v0alpha.AgentSession.agent_dialed_number:type_name -> google.protobuf.StringValue
	313, // 19: api.v0alpha.AgentSession.worker:type_name -> google.protobuf.StringValue
	318, // 20: api.v0alpha.AgentSession.hunt_group_sid:type_name -> google.protobuf.Int64Value
	316, // 21: api.v0alpha.AgentSession.wait_duration:type_name -> google.protobuf.Int32Value
	316, // 22: api.v0alpha.AgentSession.pause_duration:type_name -> google.protobuf.Int32Value
	316, // 23: api.v0alpha.AgentSession.transfer_duration:type_name -> google.protobuf.Int32Value
	316, // 24: api.v0alpha.AgentSession.wrap_up_duration:type_name -> google.protobuf.Int32Value
	316, // 25: api.v0alpha.AgentSession.talk_duration:type_name -> google.protobuf.Int32Value
	316, // 26: api.v0alpha.AgentSession.manual_duration:type_name -> google.protobuf.Int32Value
	316, // 27: api.v0alpha.AgentSession.preview_duration:type_name -> google.protobuf.Int32Value
	316, // 28: api.v0alpha.AgentSession.hold_duration:type_name -> google.protobuf.Int32Value
	318, // 29: api.v0alpha.Agent.agent_id:type_name -> google.protobuf.Int64Value
	318, // 30: api.v0alpha.Agent.agent_pin:type_name -> google.protobuf.Int64Value
	314, // 31: api.v0alpha.Agent.add_date:type_name -> google.protobuf.Timestamp
	314, // 32: api.v0alpha.Agent.modify_date:type_name -> google.protobuf.Timestamp
	313, // 33: api.v0alpha.Agent.callback_number:type_name -> google.protobuf.StringValue
	313, // 34: api.v0alpha.Agent.callback_extension:type_name -> google.protobuf.StringValue
	318, // 35: api.v0alpha.Agent.hunt_group_sid:type_name -> google.protobuf.Int64Value
	313, // 36: api.v0alpha.Agent.subscriber_username:type_name -> google.protobuf.StringValue
	313, // 37: api.v0alpha.Agent.partner_agent_id:type_name -> google.protobuf.StringValue
	314, // 38: api.v0alpha.Agent.last_password_change_date:type_name -> google.protobuf.Timestamp
	321, // 39: api.v0alpha.GetClientInfoDataReq.call_type:type_name -> api.commons.CallType.Enum
	322, // 40: api.v0alpha.GetClientInfoDataRes.rows:type_name -> api.commons.ClientInfoDataRow
	321, // 41: api.v0alpha.GetClientInfoDisplayTemplateReq.call_type:type_name -> api.commons.CallType.Enum
	323, // 42: api.v0alpha.GetClientInfoDisplayTemplateRes.dialed_number_settings:type_name -> api.commons.DialedNumberFieldSettings
	324, // 43: api.v0alpha.GetClientInfoDisplayTemplateRes.rows:type_name -> api.commons.ClientInfoDisplayTemplateRow
	318, // 44: api.v0alpha.StatisticsData.agent_session_count:type_name -> google.protobuf.Int64Value
	318, // 45: api.v0alpha.StatisticsData.ivr_duration:type_name -> google.protobuf.Int64Value
	318, // 46: api.v0alpha.StatisticsData.agent_wait_duration:type_name -> google.protobuf.Int64Value
	318, // 47: api.v0alpha.StatisticsData.call_wait_duration:type_name -> google.protobuf.Int64Value
	318, // 48: api.v0alpha.StatisticsData.hold_duration:type_name -> google.protobuf.Int64Value
	318, // 49: api.v0alpha.StatisticsData.manual_duration:type_name -> google.protobuf.Int64Value
	318, // 50: api.v0alpha.StatisticsData.pause_duration:type_name -> google.protobuf.Int64Value
	318, // 51: api.v0alpha.StatisticsData.preview_duration:type_name -> google.protobuf.Int64Value
	318, // 52: api.v0alpha.StatisticsData.suspended_duration:type_name -> google.protobuf.Int64Value
	318, // 53: api.v0alpha.StatisticsData.talk_duration:type_name -> google.protobuf.Int64Value
	318, // 54: api.v0alpha.StatisticsData.transfer_duration:type_name -> google.protobuf.Int64Value
	318, // 55: api.v0alpha.StatisticsData.wrap_up_duration:type_name -> google.protobuf.Int64Value
	314, // 56: api.v0alpha.StatisticsData.web_login_time:type_name -> google.protobuf.Timestamp
	33,  // 57: api.v0alpha.ListAgentStatisticsDataRes.statistics_data:type_name -> api.v0alpha.StatisticsData
	34,  // 58: api.v0alpha.ListAgentStatisticsDataRes.shown_columns:type_name -> api.v0alpha.StatisticsColumnDefinition
	318, // 59: api.v0alpha.PhoneBook.hunt_group_sid:type_name -> google.protobuf.Int64Value
	313, // 60: api.v0alpha.PhoneBook.phone_number_type:type_name -> google.protobuf.StringValue
	38,  // 61: api.v0alpha.PhoneBookEntry.standard:type_name -> api.v0alpha.PhoneBookStandardNumber
	39,  // 62: api.v0alpha.PhoneBookEntry.sip_uri:type_name -> api.v0alpha.PhoneBookSIPURI
	325, // 63: api.v0alpha.PhoneBookStandardNumber.phone_number_types:type_name -> api.commons.PhoneBookPhoneNumberType
	326, // 64: api.v0alpha.PhoneBookSIPURI.sip_types:type_name -> api.commons.PhoneBookSIPType
	37,  // 65: api.v0alpha.ListClientPhoneBookEntriesRes.phone_book_entries:type_name -> api.v0alpha.PhoneBookEntry
	37,  // 66: api.v0alpha.ListHuntGroupPhoneBookEntriesRes.phone_book_entries:type_name -> api.v0alpha.PhoneBookEntry
	38,  // 67: api.v0alpha.CreatePhoneBookEntryReq.standard:type_name -> api.v0alpha.PhoneBookStandardNumber
	39,  // 68: api.v0alpha.CreatePhoneBookEntryReq.sip_uri:type_name -> api.v0alpha.PhoneBookSIPURI
	38,  // 69: api.v0alpha.UpdatePhoneBookEntryReq.standard:type_name -> api.v0alpha.PhoneBookStandardNumber
	39,  // 70: api.v0alpha.UpdatePhoneBookEntryReq.sip_uri:type_name -> api.v0alpha.PhoneBookSIPURI
	36,  // 71: api.v0alpha.ListPhoneBooksRes.caller_id_phone_books:type_name -> api.v0alpha.PhoneBook
	36,  // 72: api.v0alpha.ListPhoneBooksRes.outbound_phone_books:type_name -> api.v0alpha.PhoneBook
	36,  // 73: api.v0alpha.ListPhoneBooksRes.transfer_phone_books:type_name -> api.v0alpha.PhoneBook
	321, // 74: api.v0alpha.TriggerDetails.call_types:type_name -> api.commons.CallType.Enum
	53,  // 75: api.v0alpha.TriggerDetails.trigger_parameters:type_name -> api.v0alpha.TriggerParameters
	54,  // 76: api.v0alpha.ListAgentTriggersRes.trigger_details:type_name -> api.v0alpha.TriggerDetails
	278, // 77: api.v0alpha.ListPBXExtensionsRes.agent_extensions:type_name -> api.v0alpha.ListPBXExtensionsRes.AgentExtension
	279, // 78: api.v0alpha.ListPBXExtensionsRes.hunt_group_extensions:type_name -> api.v0alpha.ListPBXExtensionsRes.HuntGroupExtension
	321, // 79: api.v0alpha.MailMergeData.call_type:type_name -> api.commons.CallType.Enum
	318, // 80: api.v0alpha.HuntGroupResponse.hunt_group_sid:type_name -> google.protobuf.Int64Value
	313, // 81: api.v0alpha.HuntGroupResponse.type:type_name -> google.protobuf.StringValue
	313, // 82: api.v0alpha.HuntGroupResponse.name:type_name -> google.protobuf.StringValue
	313, // 83: api.v0alpha.HuntGroupResponse.description:type_name -> google.protobuf.StringValue
	316, // 84: api.v0alpha.HuntGroupResponse.order:type_name -> google.protobuf.Int32Value
	319, // 85: api.v0alpha.HuntGroupResponse.required:type_name -> google.protobuf.BoolValue
	313, // 86: api.v0alpha.HuntGroupResponse.default_value:type_name -> google.protobuf.StringValue
	75,  // 87: api.v0alpha.HuntGroupResponse.manual_dial:type_name -> api.v0alpha.ManualDialSettings
	318, // 88: api.v0alpha.DNCL.country_sid:type_name -> google.protobuf.Int64Value
	313, // 89: api.v0alpha.DNCL.dncl_notes:type_name -> google.protobuf.StringValue
	313, // 90: api.v0alpha.DNCL.dncl_number:type_name -> google.protobuf.StringValue
	314, // 91: api.v0alpha.DNCL.expiration_date:type_name -> google.protobuf.Timestamp
	321, // 92: api.v0alpha.AgentLoggingData.call_type:type_name -> api.commons.CallType.Enum
	62,  // 93: api.v0alpha.CreateDNCLNumbersReq.dncls:type_name -> api.v0alpha.DNCL
	63,  // 94: api.v0alpha.CreateDNCLNumbersReq.agent_logging_data:type_name -> api.v0alpha.AgentLoggingData
	68,  // 95: api.v0alpha.HuntGroupAgentSettings.statistics:type_name -> api.v0alpha.AgentStatisticsSettings
	69,  // 96: api.v0alpha.HuntGroupAgentSettings.pause:type_name -> api.v0alpha.PauseSettings
	73,  // 97: api.v0alpha.HuntGroupAgentSettings.hqm:type_name -> api.v0alpha.HoldQueueMonitorSettings
	75,  // 98: api.v0alpha.HuntGroupAgentSettings.manual_dial:type_name -> api.v0alpha.ManualDialSettings
	80,  // 99: api.v0alpha.HuntGroupAgentSettings.transfer:type_name -> api.v0alpha.TransferSettings
	71,  // 100: api.v0alpha.HuntGroupAgentSettings.preview_dial:type_name -> api.v0alpha.PreviewDialSettings
	70,  // 101: api.v0alpha.HuntGroupAgentSettings.phone_number_activity:type_name -> api.v0alpha.PhoneNumberActivitySettings
	79,  // 102: api.v0alpha.HuntGroupAgentSettings.dncl:type_name -> api.v0alpha.DnclSettings
	88,  // 103: api.v0alpha.HuntGroupAgentSettings.hold:type_name -> api.v0alpha.AgentHoldSettings
	90,  // 104: api.v0alpha.HuntGroupAgentSettings.manual_approval:type_name -> api.v0alpha.ManualApprovalSettings
	152, // 105: api.v0alpha.HuntGroupAgentSettings.schedule_callback:type_name -> api.v0alpha.ScheduleCallBackSettings
	81,  // 106: api.v0alpha.HuntGroupAgentSettings.recording:type_name -> api.v0alpha.RecordingSettings
	83,  // 107: api.v0alpha.HuntGroupAgentSettings.display_data_settings:type_name -> api.v0alpha.DisplayDataSettings
	74,  // 108: api.v0alpha.HuntGroupAgentSettings.inbound_compliance_metadata:type_name -> api.v0alpha.ComplianceMetadata
	327, // 109: api.v0alpha.HuntGroupAgentSettings.interrupt_peering:type_name -> api.commons.InterruptedPeeringStatus
	0,   // 110: api.v0alpha.AgentStatisticsSettings.filter_call_history:type_name -> api.v0alpha.AgentStatisticsSettings.HistoryFilter
	1,   // 111: api.v0alpha.HoldQueueMonitorSettings.agent_routing:type_name -> api.v0alpha.HoldQueueMonitoringAgentRouting.Enum
	74,  // 112: api.v0alpha.ManualDialSettings.compliance_metadata:type_name -> api.v0alpha.ComplianceMetadata
	2,   // 113: api.v0alpha.ManualDialSettings.use_timezone_validation_zip:type_name -> api.v0alpha.ManualDialSettings.ZipCodeValidation
	3,   // 114: api.v0alpha.ManualDialSettings.manual_dial_data_dip_result_handling:type_name -> api.v0alpha.ManualDialDataDipHandling.Enum
	280, // 115: api.v0alpha.ManualDialSettings.data_dip_manual_dial_integration:type_name -> api.v0alpha.ManualDialSettings.DataDipManualDialIntegrationEntry
	3,   // 116: api.v0alpha.ManualDialSettings.data_dip_manual_dial_integration_handling:type_name -> api.v0alpha.ManualDialDataDipHandling.Enum
	77,  // 117: api.v0alpha.DnclSettings.scrub_lists_auto_add_options:type_name -> api.v0alpha.ScrubListsAutoAdd
	78,  // 118: api.v0alpha.DnclSettings.scrub_lists_expiration_limits:type_name -> api.v0alpha.ScrubListsExpirationLimits
	5,   // 119: api.v0alpha.TransferSettings.requeue_type:type_name -> api.v0alpha.RequeueTransferQueueConfigType.Enum
	7,   // 120: api.v0alpha.TransferSettings.type:type_name -> api.v0alpha.TransferSettingsType.Enum
	8,   // 121: api.v0alpha.TransferSettings.hand_off_type:type_name -> api.v0alpha.TransferSettingsHandOffType.Enum
	6,   // 122: api.v0alpha.TransferSettings.recording_status:type_name -> api.v0alpha.RecordingStatus.Enum
	6,   // 123: api.v0alpha.TransferSettings.agent_transfer_recording_status:type_name -> api.v0alpha.RecordingStatus.Enum
	6,   // 124: api.v0alpha.TransferSettings.requeue_transfer_recording_status:type_name -> api.v0alpha.RecordingStatus.Enum
	6,   // 125: api.v0alpha.TransferSettings.open_transfer_recording_status:type_name -> api.v0alpha.RecordingStatus.Enum
	74,  // 126: api.v0alpha.TransferSettings.compliance_metadata:type_name -> api.v0alpha.ComplianceMetadata
	4,   // 127: api.v0alpha.DisplayDataSettings.display_data_dip:type_name -> api.v0alpha.DisplayDataSettings.DisplayDataDip
	9,   // 128: api.v0alpha.AgentHoldSettings.allowed:type_name -> api.v0alpha.AllowedHoldType.Enum
	321, // 129: api.v0alpha.ListHuntGroupWebLinksReq.call_type:type_name -> api.commons.CallType.Enum
	93,  // 130: api.v0alpha.ListHuntGroupWebLinksRes.web_links:type_name -> api.v0alpha.WebLink
	0,   // 131: api.v0alpha.ListAgentCallHistoryReq.history_filter:type_name -> api.v0alpha.AgentStatisticsSettings.HistoryFilter
	281, // 132: api.v0alpha.ListAgentCallHistoryRes.history:type_name -> api.v0alpha.ListAgentCallHistoryRes.Entry
	283, // 133: api.v0alpha.GetCampaignCompletionStatusRes.completion_status:type_name -> api.v0alpha.GetCampaignCompletionStatusRes.CompletionStatusEntry
	321, // 134: api.v0alpha.GetLostPeerInfoReq.call_type:type_name -> api.commons.CallType.Enum
	60,  // 135: api.v0alpha.GetScriptOrResponsesReq.data:type_name -> api.v0alpha.MailMergeData
	175, // 136: api.v0alpha.GetScriptOrResponsesRes.scripts:type_name -> api.v0alpha.HuntGroupScript
	61,  // 137: api.v0alpha.GetScriptOrResponsesRes.responses:type_name -> api.v0alpha.HuntGroupResponse
	108, // 138: api.v0alpha.GetReadyAgentsRes.ready_agents:type_name -> api.v0alpha.AgentsByAgentSidShort
	284, // 139: api.v0alpha.ListAgentQueueAndOnHoldCallDataRes.agent_queue_calls:type_name -> api.v0alpha.ListAgentQueueAndOnHoldCallDataRes.CallData
	284, // 140: api.v0alpha.ListAgentQueueAndOnHoldCallDataRes.on_hold_calls:type_name -> api.v0alpha.ListAgentQueueAndOnHoldCallDataRes.CallData
	284, // 141: api.v0alpha.ListAgentQueueAndOnHoldCallDataRes.hqm_calls:type_name -> api.v0alpha.ListAgentQueueAndOnHoldCallDataRes.CallData
	111, // 142: api.v0alpha.SaveAgentCallResponsesReq.agent_call_response_details:type_name -> api.v0alpha.AgentCallResponseDetails
	321, // 143: api.v0alpha.SaveAgentCallResponsesReq.call_type:type_name -> api.commons.CallType.Enum
	328, // 144: api.v0alpha.SaveAgentCallResponsesReq.compliance_metadata:type_name -> api.commons.SimpleKeyValue
	318, // 145: api.v0alpha.AgentCallLog.call_sid:type_name -> google.protobuf.Int64Value
	321, // 146: api.v0alpha.AgentCallLog.call_type:type_name -> api.commons.CallType.Enum
	314, // 147: api.v0alpha.AgentCallLog.action_date:type_name -> google.protobuf.Timestamp
	313, // 148: api.v0alpha.AgentCallLog.action_key:type_name -> google.protobuf.StringValue
	313, // 149: api.v0alpha.AgentCallLog.action_value:type_name -> google.protobuf.StringValue
	313, // 150: api.v0alpha.AgentSkill.description:type_name -> google.protobuf.StringValue
	27,  // 151: api.v0alpha.ListAgentTransferOptionsRes.agent_info:type_name -> api.v0alpha.Agent
	11,  // 152: api.v0alpha.ListAgentTransferOptionsRes.hunt_group:type_name -> api.v0alpha.HuntGroup
	56,  // 153: api.v0alpha.ListAgentTransferOptionsRes.pbx_extensions:type_name -> api.v0alpha.PBXExtension
	115, // 154: api.v0alpha.ListAgentTransferOptionsRes.agent_skills:type_name -> api.v0alpha.AgentSkill
	108, // 155: api.v0alpha.ListAgentTransferOptionsRes.agent_profile:type_name -> api.v0alpha.AgentsByAgentSidShort
	122, // 156: api.v0alpha.ListOrgResponseEvaluatorsRes.evaluators:type_name -> api.v0alpha.ResponseEvaluator
	313, // 157: api.v0alpha.AgentCallActivityDetails.agent_name:type_name -> google.protobuf.StringValue
	318, // 158: api.v0alpha.AgentCallActivityDetails.agent_session_sid:type_name -> google.protobuf.Int64Value
	318, // 159: api.v0alpha.AgentCallActivityDetails.hunt_group_sid:type_name -> google.protobuf.Int64Value
	313, // 160: api.v0alpha.AgentCallActivityDetails.hunt_group_name:type_name -> google.protobuf.StringValue
	317, // 161: api.v0alpha.AgentCallActivityDetails.agent_call_cost:type_name -> google.protobuf.DoubleValue
	318, // 162: api.v0alpha.AgentCallActivityDetails.agent_wait_duration:type_name -> google.protobuf.Int64Value
	318, // 163: api.v0alpha.AgentCallActivityDetails.call_wait_duration:type_name -> google.protobuf.Int64Value
	318, // 164: api.v0alpha.AgentCallActivityDetails.hold_duration:type_name -> google.protobuf.Int64Value
	318, // 165: api.v0alpha.AgentCallActivityDetails.manual_duration:type_name -> google.protobuf.Int64Value
	318, // 166: api.v0alpha.AgentCallActivityDetails.pause_duration:type_name -> google.protobuf.Int64Value
	318, // 167: api.v0alpha.AgentCallActivityDetails.preview_duration:type_name -> google.protobuf.Int64Value
	318, // 168: api.v0alpha.AgentCallActivityDetails.suspended_duration:type_name -> google.protobuf.Int64Value
	318, // 169: api.v0alpha.AgentCallActivityDetails.talk_duration:type_name -> google.protobuf.Int64Value
	318, // 170: api.v0alpha.AgentCallActivityDetails.transfer_duration:type_name -> google.protobuf.Int64Value
	318, // 171: api.v0alpha.AgentCallActivityDetails.wrap_up_duration:type_name -> google.protobuf.Int64Value
	318, // 172: api.v0alpha.AgentCallActivityDetails.agent_call_sid:type_name -> google.protobuf.Int64Value
	315, // 173: api.v0alpha.AgentCallActivityDetails.hunt_group_type:type_name -> api.commons.HuntGroupType.Enum
	286, // 174: api.v0alpha.GetConditionalDNCLRulesRes.disposition_rules:type_name -> api.v0alpha.AgentDispositionConditionalDncl.DispositionRulesTable
	329, // 175: api.v0alpha.ManualDialStartReq.simple_call_data:type_name -> api.commons.SimpleCallData
	330, // 176: api.v0alpha.ListExtendedCallHistoryReq.search_type:type_name -> api.commons.CallHistorySearchType.Enum
	321, // 177: api.v0alpha.ListExtendedCallHistoryReq.call_types:type_name -> api.commons.CallType.Enum
	331, // 178: api.v0alpha.ListExtendedCallHistoryReq.search_scope:type_name -> api.commons.CallHistorySearchScope.Enum
	321, // 179: api.v0alpha.ListExtendedCallHistoryRes.call_type:type_name -> api.commons.CallType.Enum
	317, // 180: api.v0alpha.ListExtendedCallHistoryRes.cost:type_name -> google.protobuf.DoubleValue
	313, // 181: api.v0alpha.ListExtendedCallHistoryRes.keys:type_name -> google.protobuf.StringValue
	167, // 182: api.v0alpha.ListExtendedCallHistoryRes.call_details:type_name -> api.v0alpha.GetCallDetailsRes
	314, // 183: api.v0alpha.ListExtendedCallHistoryRes.start_date:type_name -> google.protobuf.Timestamp
	332, // 184: api.v0alpha.ListWhiteListPhoneBooksReq.order_bys:type_name -> api.commons.ListPhoneBookOrderBy.Enum
	36,  // 185: api.v0alpha.ListWhiteListPhoneBooksRes.white_list_phone_books:type_name -> api.v0alpha.PhoneBook
	329, // 186: api.v0alpha.PlacePreviewDialCallReq.call:type_name -> api.commons.SimpleCallData
	329, // 187: api.v0alpha.CancelPreviewDialCallReq.call:type_name -> api.commons.SimpleCallData
	321, // 188: api.v0alpha.DownloadCallRecordingReq.call_type:type_name -> api.commons.CallType.Enum
	285, // 189: api.v0alpha.DownloadCallRecordingsReq.call_params:type_name -> api.v0alpha.DownloadCallRecordingsReq.CallParams
	318, // 190: api.v0alpha.DownloadCallRecordingsReq.group_sid:type_name -> google.protobuf.Int64Value
	314, // 191: api.v0alpha.DownloadCallRecordingsReq.start_date:type_name -> google.protobuf.Timestamp
	286, // 192: api.v0alpha.AgentDispositionConditionalDncl.disposition_rules_table:type_name -> api.v0alpha.AgentDispositionConditionalDncl.DispositionRulesTable
	333, // 193: api.v0alpha.UpdateTaskStatusReq.status:type_name -> api.commons.TaskStatus
	108, // 194: api.v0alpha.ListCallbackRoutingAgentsRes.agent_short:type_name -> api.v0alpha.AgentsByAgentSidShort
	115, // 195: api.v0alpha.ListCallbackRoutingSkillsRes.agent_skills:type_name -> api.v0alpha.AgentSkill
	288, // 196: api.v0alpha.UpdateAgentAssignedHuntGroupReq.skills:type_name -> api.v0alpha.UpdateAgentAssignedHuntGroupReq.SkillsEntry
	11,  // 197: api.v0alpha.ListHuntGroupsRes.hunt_group:type_name -> api.v0alpha.HuntGroup
	82,  // 198: api.v0alpha.ListReassignmentHuntGroupsRes.hunt_groups:type_name -> api.v0alpha.SimpleHuntGroup
	163, // 199: api.v0alpha.ListCallerIdsFromBucketRes.caller_id_info:type_name -> api.v0alpha.CallerIdInfo
	321, // 200: api.v0alpha.SaveLastCallResponseReq.call_type:type_name -> api.commons.CallType.Enum
	318, // 201: api.v0alpha.AgentCallResponse.agent_call_sid:type_name -> google.protobuf.Int64Value
	313, // 202: api.v0alpha.AgentCallResponse.key:type_name -> google.protobuf.StringValue
	313, // 203: api.v0alpha.AgentCallResponse.value:type_name -> google.protobuf.StringValue
	316, // 204: api.v0alpha.AgentCallResponse.order:type_name -> google.protobuf.Int32Value
	170, // 205: api.v0alpha.GetCallDetailsRes.contact_field_data:type_name -> api.v0alpha.ContactFieldDataRow
	125, // 206: api.v0alpha.GetCallDetailsRes.agent_call_activity_details:type_name -> api.v0alpha.AgentCallActivityDetails
	166, // 207: api.v0alpha.GetCallDetailsRes.agent_call_responses:type_name -> api.v0alpha.AgentCallResponse
	321, // 208: api.v0alpha.ListAgentCallLogsByCallSidAndTypeReq.call_type:type_name -> api.commons.CallType.Enum
	114, // 209: api.v0alpha.ListAgentCallLogsByCallSidAndTypeRes.agent_call_logs:type_name -> api.v0alpha.AgentCallLog
	321, // 210: api.v0alpha.GetCallDataReq.call_type:type_name -> api.commons.CallType.Enum
	289, // 211: api.v0alpha.GetCallDataRes.ivr_data:type_name -> api.v0alpha.GetCallDataRes.IvrDataEntry
	290, // 212: api.v0alpha.GetCallDataRes.phone_enhanced_data:type_name -> api.v0alpha.GetCallDataRes.PhoneEnhancedDataEntry
	291, // 213: api.v0alpha.GetCallDataRes.data_collect_data:type_name -> api.v0alpha.GetCallDataRes.DataCollectDataEntry
	292, // 214: api.v0alpha.GetCallDataRes.data_dip_data:type_name -> api.v0alpha.GetCallDataRes.DataDipDataEntry
	293, // 215: api.v0alpha.GetCallDataRes.sip_header_data:type_name -> api.v0alpha.GetCallDataRes.SipHeaderDataEntry
	294, // 216: api.v0alpha.GetCallDataRes.queued_callback_data:type_name -> api.v0alpha.GetCallDataRes.QueuedCallbackDataEntry
	295, // 217: api.v0alpha.GetCallDataRes.journey_retrieved_data:type_name -> api.v0alpha.GetCallDataRes.JourneyRetrievedDataEntry
	296, // 218: api.v0alpha.GetCallDataRes.integration_data:type_name -> api.v0alpha.GetCallDataRes.IntegrationDataEntry
	176, // 219: api.v0alpha.HuntGroupScript.act:type_name -> api.v0alpha.Act
	177, // 220: api.v0alpha.Act.disposition:type_name -> api.v0alpha.Disposition
	178, // 221: api.v0alpha.Act.verbiage:type_name -> api.v0alpha.Verbiage
	179, // 222: api.v0alpha.Act.conditional_navigation:type_name -> api.v0alpha.ConditionalNavigation
	180, // 223: api.v0alpha.ConditionalNavigation.complex_boolean_expression_list:type_name -> api.v0alpha.ComplexBooleanExpressionList
	181, // 224: api.v0alpha.ComplexBooleanExpressionList.complex_boolean_expression:type_name -> api.v0alpha.ComplexBooleanExpression
	182, // 225: api.v0alpha.ComplexBooleanExpression.compare_expression_list:type_name -> api.v0alpha.CompareExpressionList
	183, // 226: api.v0alpha.CompareExpressionList.simple_compare_expression:type_name -> api.v0alpha.CompareExpression
	321, // 227: api.v0alpha.ListAgentCallResponseValuesReq.call_type:type_name -> api.commons.CallType.Enum
	297, // 228: api.v0alpha.ListAgentCallResponseValuesRes.responses:type_name -> api.v0alpha.ListAgentCallResponseValuesRes.Response
	316, // 229: api.v0alpha.ContactSchema.dfc_sid01:type_name -> google.protobuf.Int32Value
	316, // 230: api.v0alpha.ContactSchema.dfc_sid02:type_name -> google.protobuf.Int32Value
	316, // 231: api.v0alpha.ContactSchema.dfc_sid03:type_name -> google.protobuf.Int32Value
	316, // 232: api.v0alpha.ContactSchema.dfc_sid04:type_name -> google.protobuf.Int32Value
	316, // 233: api.v0alpha.ContactSchema.dfc_sid05:type_name -> google.protobuf.Int32Value
	316, // 234: api.v0alpha.ContactSchema.dfc_sid06:type_name -> google.protobuf.Int32Value
	316, // 235: api.v0alpha.ContactSchema.dfc_sid07:type_name -> google.protobuf.Int32Value
	316, // 236: api.v0alpha.ContactSchema.dfc_sid08:type_name -> google.protobuf.Int32Value
	316, // 237: api.v0alpha.ContactSchema.dfc_sid09:type_name -> google.protobuf.Int32Value
	316, // 238: api.v0alpha.ContactSchema.dfc_sid10:type_name -> google.protobuf.Int32Value
	316, // 239: api.v0alpha.ContactSchema.dfc_sid11:type_name -> google.protobuf.Int32Value
	316, // 240: api.v0alpha.ContactSchema.dfc_sid12:type_name -> google.protobuf.Int32Value
	316, // 241: api.v0alpha.ContactSchema.dfc_sid13:type_name -> google.protobuf.Int32Value
	316, // 242: api.v0alpha.ContactSchema.dfc_sid14:type_name -> google.protobuf.Int32Value
	316, // 243: api.v0alpha.ContactSchema.dfc_sid15:type_name -> google.protobuf.Int32Value
	316, // 244: api.v0alpha.ContactSchema.dfc_sid16:type_name -> google.protobuf.Int32Value
	316, // 245: api.v0alpha.ContactSchema.dfc_sid17:type_name -> google.protobuf.Int32Value
	316, // 246: api.v0alpha.ContactSchema.dfc_sid18:type_name -> google.protobuf.Int32Value
	316, // 247: api.v0alpha.ContactSchema.dfc_sid19:type_name -> google.protobuf.Int32Value
	316, // 248: api.v0alpha.ContactSchema.dfc_sid20:type_name -> google.protobuf.Int32Value
	316, // 249: api.v0alpha.ContactSchema.dfc_sid21:type_name -> google.protobuf.Int32Value
	316, // 250: api.v0alpha.ContactSchema.dfc_sid22:type_name -> google.protobuf.Int32Value
	316, // 251: api.v0alpha.ContactSchema.dfc_sid23:type_name -> google.protobuf.Int32Value
	316, // 252: api.v0alpha.ContactSchema.dfc_sid24:type_name -> google.protobuf.Int32Value
	316, // 253: api.v0alpha.ContactSchema.dfc_sid25:type_name -> google.protobuf.Int32Value
	316, // 254: api.v0alpha.ContactSchema.dfc_sid26:type_name -> google.protobuf.Int32Value
	316, // 255: api.v0alpha.ContactSchema.dfc_sid27:type_name -> google.protobuf.Int32Value
	316, // 256: api.v0alpha.ContactSchema.dfc_sid28:type_name -> google.protobuf.Int32Value
	316, // 257: api.v0alpha.ContactSchema.dfc_sid29:type_name -> google.protobuf.Int32Value
	316, // 258: api.v0alpha.ContactSchema.dfc_sid30:type_name -> google.protobuf.Int32Value
	313, // 259: api.v0alpha.ContactFieldDescription.display_format_string:type_name -> google.protobuf.StringValue
	313, // 260: api.v0alpha.ContactGroup.name:type_name -> google.protobuf.StringValue
	314, // 261: api.v0alpha.ContactGroup.last_updated:type_name -> google.protobuf.Timestamp
	313, // 262: api.v0alpha.ContactGroup.sha_digest:type_name -> google.protobuf.StringValue
	189, // 263: api.v0alpha.ListContactGroupDetailsByClientSidRes.contact_group:type_name -> api.v0alpha.ContactGroup
	313, // 264: api.v0alpha.CreateContactFieldDescriptionReq.display_format_string:type_name -> google.protobuf.StringValue
	313, // 265: api.v0alpha.UpdateContactFieldDescriptionReq.display_format_string:type_name -> google.protobuf.StringValue
	188, // 266: api.v0alpha.ListContactFieldDescriptionsRes.contact_field_description:type_name -> api.v0alpha.ContactFieldDescription
	188, // 267: api.v0alpha.ListContactFieldDescriptionsByCGSidRes.contact_field_description:type_name -> api.v0alpha.ContactFieldDescription
	206, // 268: api.v0alpha.ListTableTemplatePropertiesRes.agent_table_templates:type_name -> api.v0alpha.TableTemplateProperty
	206, // 269: api.v0alpha.ListTableTemplatePropertiesRes.queue_table_templates:type_name -> api.v0alpha.TableTemplateProperty
	209, // 270: api.v0alpha.ListAgentSkillsFiltersRes.agent_skills_filters:type_name -> api.v0alpha.AgentSkillsFilter
	212, // 271: api.v0alpha.ListCustomReportFiltersRes.custom_report_filters:type_name -> api.v0alpha.CustomReportFilterProperty
	313, // 272: api.v0alpha.ContactImportTemplate.delimiter:type_name -> google.protobuf.StringValue
	313, // 273: api.v0alpha.ContactImportTemplate.quote:type_name -> google.protobuf.StringValue
	316, // 274: api.v0alpha.ContactImportTemplate.dfc_sid01:type_name -> google.protobuf.Int32Value
	316, // 275: api.v0alpha.ContactImportTemplate.dfc_sid02:type_name -> google.protobuf.Int32Value
	316, // 276: api.v0alpha.ContactImportTemplate.dfc_sid03:type_name -> google.protobuf.Int32Value
	316, // 277: api.v0alpha.ContactImportTemplate.dfc_sid04:type_name -> google.protobuf.Int32Value
	316, // 278: api.v0alpha.ContactImportTemplate.dfc_sid05:type_name -> google.protobuf.Int32Value
	316, // 279: api.v0alpha.ContactImportTemplate.dfc_sid06:type_name -> google.protobuf.Int32Value
	316, // 280: api.v0alpha.ContactImportTemplate.dfc_sid07:type_name -> google.protobuf.Int32Value
	316, // 281: api.v0alpha.ContactImportTemplate.dfc_sid08:type_name -> google.protobuf.Int32Value
	316, // 282: api.v0alpha.ContactImportTemplate.dfc_sid09:type_name -> google.protobuf.Int32Value
	316, // 283: api.v0alpha.ContactImportTemplate.dfc_sid10:type_name -> google.protobuf.Int32Value
	316, // 284: api.v0alpha.ContactImportTemplate.dfc_sid11:type_name -> google.protobuf.Int32Value
	316, // 285: api.v0alpha.ContactImportTemplate.dfc_sid12:type_name -> google.protobuf.Int32Value
	316, // 286: api.v0alpha.ContactImportTemplate.dfc_sid13:type_name -> google.protobuf.Int32Value
	316, // 287: api.v0alpha.ContactImportTemplate.dfc_sid14:type_name -> google.protobuf.Int32Value
	316, // 288: api.v0alpha.ContactImportTemplate.dfc_sid15:type_name -> google.protobuf.Int32Value
	316, // 289: api.v0alpha.ContactImportTemplate.dfc_sid16:type_name -> google.protobuf.Int32Value
	316, // 290: api.v0alpha.ContactImportTemplate.dfc_sid17:type_name -> google.protobuf.Int32Value
	316, // 291: api.v0alpha.ContactImportTemplate.dfc_sid18:type_name -> google.protobuf.Int32Value
	316, // 292: api.v0alpha.ContactImportTemplate.dfc_sid19:type_name -> google.protobuf.Int32Value
	316, // 293: api.v0alpha.ContactImportTemplate.dfc_sid20:type_name -> google.protobuf.Int32Value
	316, // 294: api.v0alpha.ContactImportTemplate.dfc_sid21:type_name -> google.protobuf.Int32Value
	316, // 295: api.v0alpha.ContactImportTemplate.dfc_sid22:type_name -> google.protobuf.Int32Value
	316, // 296: api.v0alpha.ContactImportTemplate.dfc_sid23:type_name -> google.protobuf.Int32Value
	316, // 297: api.v0alpha.ContactImportTemplate.dfc_sid24:type_name -> google.protobuf.Int32Value
	316, // 298: api.v0alpha.ContactImportTemplate.dfc_sid25:type_name -> google.protobuf.Int32Value
	316, // 299: api.v0alpha.ContactImportTemplate.dfc_sid26:type_name -> google.protobuf.Int32Value
	316, // 300: api.v0alpha.ContactImportTemplate.dfc_sid27:type_name -> google.protobuf.Int32Value
	316, // 301: api.v0alpha.ContactImportTemplate.dfc_sid28:type_name -> google.protobuf.Int32Value
	316, // 302: api.v0alpha.ContactImportTemplate.dfc_sid29:type_name -> google.protobuf.Int32Value
	316, // 303: api.v0alpha.ContactImportTemplate.dfc_sid30:type_name -> google.protobuf.Int32Value
	316, // 304: api.v0alpha.ContactImportTemplate.field_length01:type_name -> google.protobuf.Int32Value
	316, // 305: api.v0alpha.ContactImportTemplate.field_length02:type_name -> google.protobuf.Int32Value
	316, // 306: api.v0alpha.ContactImportTemplate.field_length03:type_name -> google.protobuf.Int32Value
	316, // 307: api.v0alpha.ContactImportTemplate.field_length04:type_name -> google.protobuf.Int32Value
	316, // 308: api.v0alpha.ContactImportTemplate.field_length05:type_name -> google.protobuf.Int32Value
	316, // 309: api.v0alpha.ContactImportTemplate.field_length06:type_name -> google.protobuf.Int32Value
	316, // 310: api.v0alpha.ContactImportTemplate.field_length07:type_name -> google.protobuf.Int32Value
	316, // 311: api.v0alpha.ContactImportTemplate.field_length08:type_name -> google.protobuf.Int32Value
	316, // 312: api.v0alpha.ContactImportTemplate.field_length09:type_name -> google.protobuf.Int32Value
	316, // 313: api.v0alpha.ContactImportTemplate.field_length10:type_name -> google.protobuf.Int32Value
	316, // 314: api.v0alpha.ContactImportTemplate.field_length11:type_name -> google.protobuf.Int32Value
	316, // 315: api.v0alpha.ContactImportTemplate.field_length12:type_name -> google.protobuf.Int32Value
	316, // 316: api.v0alpha.ContactImportTemplate.field_length13:type_name -> google.protobuf.Int32Value
	316, // 317: api.v0alpha.ContactImportTemplate.field_length14:type_name -> google.protobuf.Int32Value
	316, // 318: api.v0alpha.ContactImportTemplate.field_length15:type_name -> google.protobuf.Int32Value
	316, // 319: api.v0alpha.ContactImportTemplate.field_length16:type_name -> google.protobuf.Int32Value
	316, // 320: api.v0alpha.ContactImportTemplate.field_length17:type_name -> google.protobuf.Int32Value
	316, // 321: api.v0alpha.ContactImportTemplate.field_length18:type_name -> google.protobuf.Int32Value
	316, // 322: api.v0alpha.ContactImportTemplate.field_length19:type_name -> google.protobuf.Int32Value
	316, // 323: api.v0alpha.ContactImportTemplate.field_length20:type_name -> google.protobuf.Int32Value
	316, // 324: api.v0alpha.ContactImportTemplate.field_length21:type_name -> google.protobuf.Int32Value
	316, // 325: api.v0alpha.ContactImportTemplate.field_length22:type_name -> google.protobuf.Int32Value
	316, // 326: api.v0alpha.ContactImportTemplate.field_length23:type_name -> google.protobuf.Int32Value
	316, // 327: api.v0alpha.ContactImportTemplate.field_length24:type_name -> google.protobuf.Int32Value
	316, // 328: api.v0alpha.ContactImportTemplate.field_length25:type_name -> google.protobuf.Int32Value
	316, // 329: api.v0alpha.ContactImportTemplate.field_length26:type_name -> google.protobuf.Int32Value
	316, // 330: api.v0alpha.ContactImportTemplate.field_length27:type_name -> google.protobuf.Int32Value
	316, // 331: api.v0alpha.ContactImportTemplate.field_length28:type_name -> google.protobuf.Int32Value
	316, // 332: api.v0alpha.ContactImportTemplate.field_length29:type_name -> google.protobuf.Int32Value
	316, // 333: api.v0alpha.ContactImportTemplate.field_length30:type_name -> google.protobuf.Int32Value
	319, // 334: api.v0alpha.ContactImportTemplate.exclude_first_row:type_name -> google.protobuf.BoolValue
	213, // 335: api.v0alpha.ListContactImportTemplatesRes.contact_import_template:type_name -> api.v0alpha.ContactImportTemplate
	334, // 336: api.v0alpha.RecalculateBillingReq.month:type_name -> api.commons.RecalculateBillingMonth
	335, // 337: api.v0alpha.RecalculateBillingReq.types:type_name -> api.commons.RecalculateBillingType
	298, // 338: api.v0alpha.RecalculateBillingRes.results:type_name -> api.v0alpha.RecalculateBillingRes.Result
	299, // 339: api.v0alpha.ListOutboundBroadcastTemplateDataRes.templates:type_name -> api.v0alpha.ListOutboundBroadcastTemplateDataRes.Data
	235, // 340: api.v0alpha.MultiAgentSkillAssignmentReq.skills:type_name -> api.v0alpha.SkillUpdate
	11,  // 341: api.v0alpha.ListMAMAgentHuntGroupsByClientSidRes.hunt_group:type_name -> api.v0alpha.HuntGroup
	235, // 342: api.v0alpha.UpdateAgentSkillsReq.skills:type_name -> api.v0alpha.SkillUpdate
	239, // 343: api.v0alpha.ListTtsVoicesRes.voices:type_name -> api.v0alpha.TtsVoice
	244, // 344: api.v0alpha.ListCustomDataKeysRes.data_keys:type_name -> api.v0alpha.CustomDataKey
	244, // 345: api.v0alpha.CreateCustomDataKeyReq.data_key:type_name -> api.v0alpha.CustomDataKey
	244, // 346: api.v0alpha.UpdateCustomDataKeyReq.dataKey:type_name -> api.v0alpha.CustomDataKey
	300, // 347: api.v0alpha.Extension.agent:type_name -> api.v0alpha.Extension.Agent
	301, // 348: api.v0alpha.Extension.hunt_group:type_name -> api.v0alpha.Extension.HuntGroup
	302, // 349: api.v0alpha.Extension.email:type_name -> api.v0alpha.Extension.Email
	253, // 350: api.v0alpha.ListAgentExtensionsRes.extensions:type_name -> api.v0alpha.Extension
	253, // 351: api.v0alpha.ListHuntGroupExtensionsRes.extensions:type_name -> api.v0alpha.Extension
	253, // 352: api.v0alpha.CreateExtensionReq.extension_message:type_name -> api.v0alpha.Extension
	253, // 353: api.v0alpha.UpdateExtensionReq.extension_message:type_name -> api.v0alpha.Extension
	266, // 354: api.v0alpha.GetActivityLogHistoryRes.activity_logs:type_name -> api.v0alpha.ActivityLog
	313, // 355: api.v0alpha.ActivityLog.user_name:type_name -> google.protobuf.StringValue
	313, // 356: api.v0alpha.ActivityLog.origination_ip:type_name -> google.protobuf.StringValue
	313, // 357: api.v0alpha.ActivityLog.action_date:type_name -> google.protobuf.StringValue
	313, // 358: api.v0alpha.ActivityLog.action:type_name -> google.protobuf.StringValue
	313, // 359: api.v0alpha.ActivityLog.notes:type_name -> google.protobuf.StringValue
	336, // 360: api.v0alpha.ListSkillsReq.type_filters:type_name -> api.commons.SkillType.Enum
	269, // 361: api.v0alpha.ListSkillsRes.skills:type_name -> api.v0alpha.P3Skill
	336, // 362: api.v0alpha.P3Skill.type:type_name -> api.commons.SkillType.Enum
	272, // 363: api.v0alpha.ListScheduleRulesResult.schedule_rules:type_name -> api.v0alpha.ScheduleRule
	318, // 364: api.v0alpha.ScheduleRule.client_sid:type_name -> google.protobuf.Int64Value
	313, // 365: api.v0alpha.ScheduleRule.name:type_name -> google.protobuf.StringValue
	313, // 366: api.v0alpha.ScheduleRule.rule_time_zone:type_name -> google.protobuf.StringValue
	337, // 367: api.v0alpha.ListSmsNumbersRes.sms_numbers:type_name -> api.commons.SmsNumber
	60,  // 368: api.v0alpha.GetMailMergeReq.data:type_name -> api.v0alpha.MailMergeData
	303, // 369: api.v0alpha.GetMailMergeRes.agent_info:type_name -> api.v0alpha.GetMailMergeRes.AgentInfoEntry
	304, // 370: api.v0alpha.GetMailMergeRes.custom_data:type_name -> api.v0alpha.GetMailMergeRes.CustomDataEntry
	305, // 371: api.v0alpha.GetMailMergeRes.data_collect:type_name -> api.v0alpha.GetMailMergeRes.DataCollectEntry
	306, // 372: api.v0alpha.GetMailMergeRes.data_dip:type_name -> api.v0alpha.GetMailMergeRes.DataDipEntry
	307, // 373: api.v0alpha.GetMailMergeRes.ivr:type_name -> api.v0alpha.GetMailMergeRes.IvrEntry
	308, // 374: api.v0alpha.GetMailMergeRes.scheduled_call:type_name -> api.v0alpha.GetMailMergeRes.ScheduledCallEntry
	309, // 375: api.v0alpha.GetMailMergeRes.tts:type_name -> api.v0alpha.GetMailMergeRes.TtsEntry
	310, // 376: api.v0alpha.GetMailMergeRes.zip_phone_metadata:type_name -> api.v0alpha.GetMailMergeRes.ZipPhoneMetadataEntry
	311, // 377: api.v0alpha.GetMailMergeRes.journey_retrieved_data:type_name -> api.v0alpha.GetMailMergeRes.JourneyRetrievedDataEntry
	312, // 378: api.v0alpha.GetMailMergeRes.integration_data:type_name -> api.v0alpha.GetMailMergeRes.IntegrationDataEntry
	59,  // 379: api.v0alpha.ListPBXExtensionsRes.AgentExtension.email:type_name -> api.v0alpha.EmailResponse
	59,  // 380: api.v0alpha.ListPBXExtensionsRes.HuntGroupExtension.email:type_name -> api.v0alpha.EmailResponse
	321, // 381: api.v0alpha.ListAgentCallHistoryRes.Entry.call_type:type_name -> api.commons.CallType.Enum
	282, // 382: api.v0alpha.GetCampaignCompletionStatusRes.CompletionStatusEntry.value:type_name -> api.v0alpha.GetCampaignCompletionStatusRes.TaskGroupCompletionStatus
	321, // 383: api.v0alpha.ListAgentQueueAndOnHoldCallDataRes.CallData.call_type:type_name -> api.commons.CallType.Enum
	314, // 384: api.v0alpha.ListAgentQueueAndOnHoldCallDataRes.CallData.start_date:type_name -> google.protobuf.Timestamp
	314, // 385: api.v0alpha.ListAgentQueueAndOnHoldCallDataRes.CallData.hold_date:type_name -> google.protobuf.Timestamp
	338, // 386: api.v0alpha.ListAgentQueueAndOnHoldCallDataRes.CallData.queued_notification_type:type_name -> api.commons.QueuedNotificationType
	321, // 387: api.v0alpha.DownloadCallRecordingsReq.CallParams.call_type:type_name -> api.commons.CallType.Enum
	287, // 388: api.v0alpha.AgentDispositionConditionalDncl.DispositionRulesTable.disposition_expiration_table:type_name -> api.v0alpha.AgentDispositionConditionalDncl.DispositionExpirationTable
	335, // 389: api.v0alpha.RecalculateBillingRes.Result.type:type_name -> api.commons.RecalculateBillingType
	339, // 390: api.v0alpha.ListOutboundBroadcastTemplateDataRes.Data.template_type:type_name -> api.commons.TemplateType.Enum
	314, // 391: api.v0alpha.ListOutboundBroadcastTemplateDataRes.Data.modify_date:type_name -> google.protobuf.Timestamp
	10,  // 392: api.v0alpha.P3Api.GetAgentHuntGroup:input_type -> api.v0alpha.GetAgentHuntGroupReq
	24,  // 393: api.v0alpha.P3Api.GetAgentSession:input_type -> api.v0alpha.GetAgentSessionReq
	12,  // 394: api.v0alpha.P3Api.GetAgentSkills:input_type -> api.v0alpha.GetAgentSkillsReq
	14,  // 395: api.v0alpha.P3Api.CreateAgentSkill:input_type -> api.v0alpha.CreateAgentSkillReq
	16,  // 396: api.v0alpha.P3Api.UpdateAgentSkill:input_type -> api.v0alpha.UpdateAgentSkillReq
	18,  // 397: api.v0alpha.P3Api.DeleteAgentSkill:input_type -> api.v0alpha.DeleteAgentSkillReq
	20,  // 398: api.v0alpha.P3Api.ListAgentSkills:input_type -> api.v0alpha.ListAgentSkillsReq
	22,  // 399: api.v0alpha.P3Api.ListSkillsForCurrentAgent:input_type -> api.v0alpha.ListSkillsForCurrentAgentReq
	267, // 400: api.v0alpha.P3Api.ListSkills:input_type -> api.v0alpha.ListSkillsReq
	234, // 401: api.v0alpha.P3Api.UpdateAgentSkills:input_type -> api.v0alpha.UpdateAgentSkillsReq
	26,  // 402: api.v0alpha.P3Api.GetCurrentAgent:input_type -> api.v0alpha.GetCurrentAgentReq
	28,  // 403: api.v0alpha.P3Api.GetClientInfoData:input_type -> api.v0alpha.GetClientInfoDataReq
	30,  // 404: api.v0alpha.P3Api.GetClientInfoDisplayTemplate:input_type -> api.v0alpha.GetClientInfoDisplayTemplateReq
	32,  // 405: api.v0alpha.P3Api.ListAgentStatisticsData:input_type -> api.v0alpha.ListAgentStatisticsDataReq
	57,  // 406: api.v0alpha.P3Api.ListPBXExtensions:input_type -> api.v0alpha.ListPBXExtensionsReq
	254, // 407: api.v0alpha.P3Api.ListAgentExtensions:input_type -> api.v0alpha.ListAgentExtensionsReq
	256, // 408: api.v0alpha.P3Api.ListHuntGroupExtensions:input_type -> api.v0alpha.ListHuntGroupExtensionsReq
	258, // 409: api.v0alpha.P3Api.CreateExtension:input_type -> api.v0alpha.CreateExtensionReq
	262, // 410: api.v0alpha.P3Api.DeleteExtension:input_type -> api.v0alpha.DeleteExtensionReq
	260, // 411: api.v0alpha.P3Api.UpdateExtension:input_type -> api.v0alpha.UpdateExtensionReq
	173, // 412: api.v0alpha.P3Api.UpdatePBXExtension:input_type -> api.v0alpha.UpdatePBXExtensionReq
	64,  // 413: api.v0alpha.P3Api.CreateDNCLNumbers:input_type -> api.v0alpha.CreateDNCLNumbersReq
	104, // 414: api.v0alpha.P3Api.GetScriptOrResponses:input_type -> api.v0alpha.GetScriptOrResponsesReq
	66,  // 415: api.v0alpha.P3Api.GetHuntGroupAgentSettings:input_type -> api.v0alpha.GetHuntGroupAgentSettingsReq
	91,  // 416: api.v0alpha.P3Api.ListHuntGroupWebLinks:input_type -> api.v0alpha.ListHuntGroupWebLinksReq
	94,  // 417: api.v0alpha.P3Api.GetHuntGroupPauseCodes:input_type -> api.v0alpha.GetHuntGroupPauseCodesReq
	96,  // 418: api.v0alpha.P3Api.ListAgentCallHistory:input_type -> api.v0alpha.ListAgentCallHistoryReq
	40,  // 419: api.v0alpha.P3Api.ListClientPhoneBookEntries:input_type -> api.v0alpha.ListClientPhoneBookEntriesReq
	42,  // 420: api.v0alpha.P3Api.ListHuntGroupPhoneBookEntries:input_type -> api.v0alpha.ListHuntGroupPhoneBookEntriesReq
	44,  // 421: api.v0alpha.P3Api.CreatePhoneBookEntry:input_type -> api.v0alpha.CreatePhoneBookEntryReq
	46,  // 422: api.v0alpha.P3Api.UpdatePhoneBookEntry:input_type -> api.v0alpha.UpdatePhoneBookEntryReq
	48,  // 423: api.v0alpha.P3Api.DeletePhoneBookEntry:input_type -> api.v0alpha.DeletePhoneBookEntryReq
	50,  // 424: api.v0alpha.P3Api.ListPhoneBooks:input_type -> api.v0alpha.ListPhoneBooksReq
	52,  // 425: api.v0alpha.P3Api.ListAgentTriggers:input_type -> api.v0alpha.ListAgentTriggersReq
	98,  // 426: api.v0alpha.P3Api.GetCampaignCompletionStatus:input_type -> api.v0alpha.GetCampaignCompletionStatusReq
	100, // 427: api.v0alpha.P3Api.GetLostPeerInfo:input_type -> api.v0alpha.GetLostPeerInfoReq
	102, // 428: api.v0alpha.P3Api.GetDispositionKeys:input_type -> api.v0alpha.GetDispositionKeysReq
	106, // 429: api.v0alpha.P3Api.GetReadyAgents:input_type -> api.v0alpha.GetReadyAgentsReq
	109, // 430: api.v0alpha.P3Api.ListAgentQueueAndOnHoldCallData:input_type -> api.v0alpha.ListAgentQueueAndOnHoldCallDataReq
	112, // 431: api.v0alpha.P3Api.SaveAgentCallResponses:input_type -> api.v0alpha.SaveAgentCallResponsesReq
	116, // 432: api.v0alpha.P3Api.ListAgentTransferOptions:input_type -> api.v0alpha.ListAgentTransferOptionsReq
	134, // 433: api.v0alpha.P3Api.UpdateAgentCallResponseValue:input_type -> api.v0alpha.UpdateAgentCallResponseValueReq
	118, // 434: api.v0alpha.P3Api.GetIntercomPeerInfo:input_type -> api.v0alpha.GetIntercomPeerInfoReq
	120, // 435: api.v0alpha.P3Api.ListOrgResponseEvaluators:input_type -> api.v0alpha.ListOrgResponseEvaluatorsReq
	123, // 436: api.v0alpha.P3Api.GetQueueConfigurationOptionsArray:input_type -> api.v0alpha.GetQueueConfigurationOptionsArrayReq
	126, // 437: api.v0alpha.P3Api.GetConditionalDNCLRules:input_type -> api.v0alpha.GetConditionalDNCLRulesReq
	128, // 438: api.v0alpha.P3Api.ManualDialStart:input_type -> api.v0alpha.ManualDialStartReq
	130, // 439: api.v0alpha.P3Api.ListExtendedCallHistory:input_type -> api.v0alpha.ListExtendedCallHistoryReq
	132, // 440: api.v0alpha.P3Api.ListWhiteListPhoneBooks:input_type -> api.v0alpha.ListWhiteListPhoneBooksReq
	141, // 441: api.v0alpha.P3Api.DownloadCallRecording:input_type -> api.v0alpha.DownloadCallRecordingReq
	142, // 442: api.v0alpha.P3Api.DownloadCallRecordings:input_type -> api.v0alpha.DownloadCallRecordingsReq
	136, // 443: api.v0alpha.P3Api.PlacePreviewDialCall:input_type -> api.v0alpha.PlacePreviewDialCallReq
	138, // 444: api.v0alpha.P3Api.CancelPreviewDialCall:input_type -> api.v0alpha.CancelPreviewDialCallReq
	144, // 445: api.v0alpha.P3Api.UpdateTaskStatus:input_type -> api.v0alpha.UpdateTaskStatusReq
	146, // 446: api.v0alpha.P3Api.ListCallbackRoutingAgents:input_type -> api.v0alpha.ListCallbackRoutingAgentsReq
	148, // 447: api.v0alpha.P3Api.ListCallbackRoutingSkills:input_type -> api.v0alpha.ListCallbackRoutingSkillsReq
	150, // 448: api.v0alpha.P3Api.HandleRecordingDelay:input_type -> api.v0alpha.HandleRecordingDelayReq
	153, // 449: api.v0alpha.P3Api.UpdateAgentAssignedHuntGroup:input_type -> api.v0alpha.UpdateAgentAssignedHuntGroupReq
	171, // 450: api.v0alpha.P3Api.GetCallData:input_type -> api.v0alpha.GetCallDataReq
	155, // 451: api.v0alpha.P3Api.ListHuntGroups:input_type -> api.v0alpha.ListHuntGroupsReq
	157, // 452: api.v0alpha.P3Api.ListReassignmentHuntGroups:input_type -> api.v0alpha.ListReassignmentHuntGroupsReq
	159, // 453: api.v0alpha.P3Api.GetOrgAgentSettings:input_type -> api.v0alpha.GetOrgAgentSettingsReq
	161, // 454: api.v0alpha.P3Api.ListCallerIdsFromBucket:input_type -> api.v0alpha.ListCallerIdsFromBucketReq
	164, // 455: api.v0alpha.P3Api.SaveLastCallResponse:input_type -> api.v0alpha.SaveLastCallResponseReq
	168, // 456: api.v0alpha.P3Api.ListAgentCallLogsByCallSidAndType:input_type -> api.v0alpha.ListAgentCallLogsByCallSidAndTypeReq
	184, // 457: api.v0alpha.P3Api.ListAgentCallResponseValues:input_type -> api.v0alpha.ListAgentCallResponseValuesReq
	187, // 458: api.v0alpha.P3Api.GetContactSchemaByContactGroup:input_type -> api.v0alpha.GetContactSchemaByContactGroupReq
	192, // 459: api.v0alpha.P3Api.ListContactGroupDetailsByClientSid:input_type -> api.v0alpha.ListContactGroupDetailsByClientSidReq
	190, // 460: api.v0alpha.P3Api.GetContactGroupDetails:input_type -> api.v0alpha.GetContactGroupReq
	190, // 461: api.v0alpha.P3Api.GetContactGroupSize:input_type -> api.v0alpha.GetContactGroupReq
	194, // 462: api.v0alpha.P3Api.CreateContactFieldDescription:input_type -> api.v0alpha.CreateContactFieldDescriptionReq
	196, // 463: api.v0alpha.P3Api.UpdateContactFieldDescription:input_type -> api.v0alpha.UpdateContactFieldDescriptionReq
	198, // 464: api.v0alpha.P3Api.DeleteContactFieldDescription:input_type -> api.v0alpha.DeleteContactFieldDescriptionReq
	200, // 465: api.v0alpha.P3Api.ListContactFieldDescriptions:input_type -> api.v0alpha.ListContactFieldDescriptionsReq
	202, // 466: api.v0alpha.P3Api.ListContactFieldDescriptionsByCGSid:input_type -> api.v0alpha.ListContactFieldDescriptionsByCGSidReq
	214, // 467: api.v0alpha.P3Api.ListContactImportTemplates:input_type -> api.v0alpha.ListContactImportTemplatesReq
	216, // 468: api.v0alpha.P3Api.UpdatePreviewRecordToFinished:input_type -> api.v0alpha.UpdatePreviewRecordToFinishedReq
	218, // 469: api.v0alpha.P3Api.UpdateAgentHuntGroup:input_type -> api.v0alpha.UpdateAgentHuntGroupReq
	220, // 470: api.v0alpha.P3Api.MultiAgentHuntGroupAssignment:input_type -> api.v0alpha.MultiAgentHuntGroupAssignmentReq
	222, // 471: api.v0alpha.P3Api.GetAgentProfile:input_type -> api.v0alpha.GetAgentProfileReq
	224, // 472: api.v0alpha.P3Api.RecalculateBilling:input_type -> api.v0alpha.RecalculateBillingReq
	226, // 473: api.v0alpha.P3Api.ListOutboundBroadcastTemplateData:input_type -> api.v0alpha.ListOutboundBroadcastTemplateDataReq
	228, // 474: api.v0alpha.P3Api.MultiAgentSkillAssignment:input_type -> api.v0alpha.MultiAgentSkillAssignmentReq
	230, // 475: api.v0alpha.P3Api.MultiAgentSkillUnassignment:input_type -> api.v0alpha.MultiAgentSkillUnassignmentReq
	232, // 476: api.v0alpha.P3Api.ListMAMAgentHuntGroupsByClientSid:input_type -> api.v0alpha.ListMAMAgentHuntGroupsByClientSidReq
	237, // 477: api.v0alpha.P3Api.ListTtsVoices:input_type -> api.v0alpha.ListTtsVoicesReq
	240, // 478: api.v0alpha.P3Api.CreateTtsVoice:input_type -> api.v0alpha.CreateTtsVoiceReq
	242, // 479: api.v0alpha.P3Api.DeleteTtsVoice:input_type -> api.v0alpha.DeleteTtsVoiceReq
	245, // 480: api.v0alpha.P3Api.ListCustomDataKeys:input_type -> api.v0alpha.ListCustomDataKeysReq
	247, // 481: api.v0alpha.P3Api.CreateCustomDataKey:input_type -> api.v0alpha.CreateCustomDataKeyReq
	249, // 482: api.v0alpha.P3Api.DeleteCustomDataKey:input_type -> api.v0alpha.DeleteCustomDataKeyReq
	251, // 483: api.v0alpha.P3Api.UpdateCustomDataKey:input_type -> api.v0alpha.UpdateCustomDataKeyReq
	264, // 484: api.v0alpha.P3Api.GetActivityLogHistory:input_type -> api.v0alpha.GetActivityLogHistoryReq
	204, // 485: api.v0alpha.P3Api.ListTableTemplateProperties:input_type -> api.v0alpha.ListTableTemplatePropertiesReq
	207, // 486: api.v0alpha.P3Api.ListAgentSkillsFilters:input_type -> api.v0alpha.ListAgentSkillsFiltersReq
	270, // 487: api.v0alpha.P3Api.ListScheduleRules:input_type -> api.v0alpha.ListScheduleRulesRequest
	210, // 488: api.v0alpha.P3Api.ListCustomReportFilters:input_type -> api.v0alpha.ListCustomReportFiltersReq
	273, // 489: api.v0alpha.P3Api.ListSmsNumbers:input_type -> api.v0alpha.ListSmsNumbersReq
	275, // 490: api.v0alpha.P3Api.GetMailMerge:input_type -> api.v0alpha.GetMailMergeReq
	11,  // 491: api.v0alpha.P3Api.GetAgentHuntGroup:output_type -> api.v0alpha.HuntGroup
	25,  // 492: api.v0alpha.P3Api.GetAgentSession:output_type -> api.v0alpha.AgentSession
	13,  // 493: api.v0alpha.P3Api.GetAgentSkills:output_type -> api.v0alpha.GetAgentSkillsRes
	15,  // 494: api.v0alpha.P3Api.CreateAgentSkill:output_type -> api.v0alpha.CreateAgentSkillRes
	17,  // 495: api.v0alpha.P3Api.UpdateAgentSkill:output_type -> api.v0alpha.UpdateAgentSkillRes
	19,  // 496: api.v0alpha.P3Api.DeleteAgentSkill:output_type -> api.v0alpha.DeleteAgentSkillRes
	21,  // 497: api.v0alpha.P3Api.ListAgentSkills:output_type -> api.v0alpha.ListAgentSkillsRes
	23,  // 498: api.v0alpha.P3Api.ListSkillsForCurrentAgent:output_type -> api.v0alpha.ListSkillsForCurrentAgentRes
	268, // 499: api.v0alpha.P3Api.ListSkills:output_type -> api.v0alpha.ListSkillsRes
	236, // 500: api.v0alpha.P3Api.UpdateAgentSkills:output_type -> api.v0alpha.UpdateAgentSkillsRes
	27,  // 501: api.v0alpha.P3Api.GetCurrentAgent:output_type -> api.v0alpha.Agent
	29,  // 502: api.v0alpha.P3Api.GetClientInfoData:output_type -> api.v0alpha.GetClientInfoDataRes
	31,  // 503: api.v0alpha.P3Api.GetClientInfoDisplayTemplate:output_type -> api.v0alpha.GetClientInfoDisplayTemplateRes
	35,  // 504: api.v0alpha.P3Api.ListAgentStatisticsData:output_type -> api.v0alpha.ListAgentStatisticsDataRes
	58,  // 505: api.v0alpha.P3Api.ListPBXExtensions:output_type -> api.v0alpha.ListPBXExtensionsRes
	255, // 506: api.v0alpha.P3Api.ListAgentExtensions:output_type -> api.v0alpha.ListAgentExtensionsRes
	257, // 507: api.v0alpha.P3Api.ListHuntGroupExtensions:output_type -> api.v0alpha.ListHuntGroupExtensionsRes
	259, // 508: api.v0alpha.P3Api.CreateExtension:output_type -> api.v0alpha.CreateExtensionRes
	263, // 509: api.v0alpha.P3Api.DeleteExtension:output_type -> api.v0alpha.DeleteExtensionRes
	261, // 510: api.v0alpha.P3Api.UpdateExtension:output_type -> api.v0alpha.UpdateExtensionRes
	174, // 511: api.v0alpha.P3Api.UpdatePBXExtension:output_type -> api.v0alpha.UpdatePBXExtensionRes
	65,  // 512: api.v0alpha.P3Api.CreateDNCLNumbers:output_type -> api.v0alpha.CreateDNCLNumbersRes
	105, // 513: api.v0alpha.P3Api.GetScriptOrResponses:output_type -> api.v0alpha.GetScriptOrResponsesRes
	67,  // 514: api.v0alpha.P3Api.GetHuntGroupAgentSettings:output_type -> api.v0alpha.HuntGroupAgentSettings
	92,  // 515: api.v0alpha.P3Api.ListHuntGroupWebLinks:output_type -> api.v0alpha.ListHuntGroupWebLinksRes
	95,  // 516: api.v0alpha.P3Api.GetHuntGroupPauseCodes:output_type -> api.v0alpha.GetHuntGroupPauseCodesRes
	97,  // 517: api.v0alpha.P3Api.ListAgentCallHistory:output_type -> api.v0alpha.ListAgentCallHistoryRes
	41,  // 518: api.v0alpha.P3Api.ListClientPhoneBookEntries:output_type -> api.v0alpha.ListClientPhoneBookEntriesRes
	43,  // 519: api.v0alpha.P3Api.ListHuntGroupPhoneBookEntries:output_type -> api.v0alpha.ListHuntGroupPhoneBookEntriesRes
	45,  // 520: api.v0alpha.P3Api.CreatePhoneBookEntry:output_type -> api.v0alpha.CreatePhoneBookEntryRes
	47,  // 521: api.v0alpha.P3Api.UpdatePhoneBookEntry:output_type -> api.v0alpha.UpdatePhoneBookEntryRes
	49,  // 522: api.v0alpha.P3Api.DeletePhoneBookEntry:output_type -> api.v0alpha.DeletePhoneBookEntryRes
	51,  // 523: api.v0alpha.P3Api.ListPhoneBooks:output_type -> api.v0alpha.ListPhoneBooksRes
	55,  // 524: api.v0alpha.P3Api.ListAgentTriggers:output_type -> api.v0alpha.ListAgentTriggersRes
	99,  // 525: api.v0alpha.P3Api.GetCampaignCompletionStatus:output_type -> api.v0alpha.GetCampaignCompletionStatusRes
	101, // 526: api.v0alpha.P3Api.GetLostPeerInfo:output_type -> api.v0alpha.GetLostPeerInfoRes
	103, // 527: api.v0alpha.P3Api.GetDispositionKeys:output_type -> api.v0alpha.GetDispositionKeysRes
	107, // 528: api.v0alpha.P3Api.GetReadyAgents:output_type -> api.v0alpha.GetReadyAgentsRes
	110, // 529: api.v0alpha.P3Api.ListAgentQueueAndOnHoldCallData:output_type -> api.v0alpha.ListAgentQueueAndOnHoldCallDataRes
	113, // 530: api.v0alpha.P3Api.SaveAgentCallResponses:output_type -> api.v0alpha.SaveAgentCallResponsesRes
	117, // 531: api.v0alpha.P3Api.ListAgentTransferOptions:output_type -> api.v0alpha.ListAgentTransferOptionsRes
	135, // 532: api.v0alpha.P3Api.UpdateAgentCallResponseValue:output_type -> api.v0alpha.UpdateAgentCallResponseValueRes
	119, // 533: api.v0alpha.P3Api.GetIntercomPeerInfo:output_type -> api.v0alpha.GetIntercomPeerInfoRes
	121, // 534: api.v0alpha.P3Api.ListOrgResponseEvaluators:output_type -> api.v0alpha.ListOrgResponseEvaluatorsRes
	124, // 535: api.v0alpha.P3Api.GetQueueConfigurationOptionsArray:output_type -> api.v0alpha.GetQueueConfigurationOptionsArrayRes
	127, // 536: api.v0alpha.P3Api.GetConditionalDNCLRules:output_type -> api.v0alpha.GetConditionalDNCLRulesRes
	129, // 537: api.v0alpha.P3Api.ManualDialStart:output_type -> api.v0alpha.ManualDialStartRes
	131, // 538: api.v0alpha.P3Api.ListExtendedCallHistory:output_type -> api.v0alpha.ListExtendedCallHistoryRes
	133, // 539: api.v0alpha.P3Api.ListWhiteListPhoneBooks:output_type -> api.v0alpha.ListWhiteListPhoneBooksRes
	140, // 540: api.v0alpha.P3Api.DownloadCallRecording:output_type -> api.v0alpha.DownloadRecordingRes
	140, // 541: api.v0alpha.P3Api.DownloadCallRecordings:output_type -> api.v0alpha.DownloadRecordingRes
	137, // 542: api.v0alpha.P3Api.PlacePreviewDialCall:output_type -> api.v0alpha.PlacePreviewDialCallRes
	139, // 543: api.v0alpha.P3Api.CancelPreviewDialCall:output_type -> api.v0alpha.CancelPreviewDialCallRes
	145, // 544: api.v0alpha.P3Api.UpdateTaskStatus:output_type -> api.v0alpha.Nil
	147, // 545: api.v0alpha.P3Api.ListCallbackRoutingAgents:output_type -> api.v0alpha.ListCallbackRoutingAgentsRes
	149, // 546: api.v0alpha.P3Api.ListCallbackRoutingSkills:output_type -> api.v0alpha.ListCallbackRoutingSkillsRes
	151, // 547: api.v0alpha.P3Api.HandleRecordingDelay:output_type -> api.v0alpha.HandleRecordingDelayRes
	154, // 548: api.v0alpha.P3Api.UpdateAgentAssignedHuntGroup:output_type -> api.v0alpha.UpdateAgentAssignedHuntGroupRes
	172, // 549: api.v0alpha.P3Api.GetCallData:output_type -> api.v0alpha.GetCallDataRes
	156, // 550: api.v0alpha.P3Api.ListHuntGroups:output_type -> api.v0alpha.ListHuntGroupsRes
	158, // 551: api.v0alpha.P3Api.ListReassignmentHuntGroups:output_type -> api.v0alpha.ListReassignmentHuntGroupsRes
	160, // 552: api.v0alpha.P3Api.GetOrgAgentSettings:output_type -> api.v0alpha.GetOrgAgentSettingsRes
	162, // 553: api.v0alpha.P3Api.ListCallerIdsFromBucket:output_type -> api.v0alpha.ListCallerIdsFromBucketRes
	165, // 554: api.v0alpha.P3Api.SaveLastCallResponse:output_type -> api.v0alpha.SaveLastCallResponseRes
	169, // 555: api.v0alpha.P3Api.ListAgentCallLogsByCallSidAndType:output_type -> api.v0alpha.ListAgentCallLogsByCallSidAndTypeRes
	185, // 556: api.v0alpha.P3Api.ListAgentCallResponseValues:output_type -> api.v0alpha.ListAgentCallResponseValuesRes
	186, // 557: api.v0alpha.P3Api.GetContactSchemaByContactGroup:output_type -> api.v0alpha.ContactSchema
	193, // 558: api.v0alpha.P3Api.ListContactGroupDetailsByClientSid:output_type -> api.v0alpha.ListContactGroupDetailsByClientSidRes
	189, // 559: api.v0alpha.P3Api.GetContactGroupDetails:output_type -> api.v0alpha.ContactGroup
	191, // 560: api.v0alpha.P3Api.GetContactGroupSize:output_type -> api.v0alpha.GetContactGroupSizeRes
	195, // 561: api.v0alpha.P3Api.CreateContactFieldDescription:output_type -> api.v0alpha.CreateContactFieldDescriptionRes
	197, // 562: api.v0alpha.P3Api.UpdateContactFieldDescription:output_type -> api.v0alpha.UpdateContactFieldDescriptionRes
	199, // 563: api.v0alpha.P3Api.DeleteContactFieldDescription:output_type -> api.v0alpha.DeleteContactFieldDescriptionRes
	201, // 564: api.v0alpha.P3Api.ListContactFieldDescriptions:output_type -> api.v0alpha.ListContactFieldDescriptionsRes
	203, // 565: api.v0alpha.P3Api.ListContactFieldDescriptionsByCGSid:output_type -> api.v0alpha.ListContactFieldDescriptionsByCGSidRes
	215, // 566: api.v0alpha.P3Api.ListContactImportTemplates:output_type -> api.v0alpha.ListContactImportTemplatesRes
	217, // 567: api.v0alpha.P3Api.UpdatePreviewRecordToFinished:output_type -> api.v0alpha.UpdatePreviewRecordToFinishedRes
	219, // 568: api.v0alpha.P3Api.UpdateAgentHuntGroup:output_type -> api.v0alpha.UpdateAgentHuntGroupRes
	221, // 569: api.v0alpha.P3Api.MultiAgentHuntGroupAssignment:output_type -> api.v0alpha.MultiAgentHuntGroupAssignmentRes
	223, // 570: api.v0alpha.P3Api.GetAgentProfile:output_type -> api.v0alpha.AgentProfile
	225, // 571: api.v0alpha.P3Api.RecalculateBilling:output_type -> api.v0alpha.RecalculateBillingRes
	227, // 572: api.v0alpha.P3Api.ListOutboundBroadcastTemplateData:output_type -> api.v0alpha.ListOutboundBroadcastTemplateDataRes
	229, // 573: api.v0alpha.P3Api.MultiAgentSkillAssignment:output_type -> api.v0alpha.MultiAgentSkillAssignmentRes
	231, // 574: api.v0alpha.P3Api.MultiAgentSkillUnassignment:output_type -> api.v0alpha.MultiAgentSkillUnassignmentRes
	233, // 575: api.v0alpha.P3Api.ListMAMAgentHuntGroupsByClientSid:output_type -> api.v0alpha.ListMAMAgentHuntGroupsByClientSidRes
	238, // 576: api.v0alpha.P3Api.ListTtsVoices:output_type -> api.v0alpha.ListTtsVoicesRes
	241, // 577: api.v0alpha.P3Api.CreateTtsVoice:output_type -> api.v0alpha.CreateTtsVoiceRes
	243, // 578: api.v0alpha.P3Api.DeleteTtsVoice:output_type -> api.v0alpha.DeleteTtsVoiceRes
	246, // 579: api.v0alpha.P3Api.ListCustomDataKeys:output_type -> api.v0alpha.ListCustomDataKeysRes
	248, // 580: api.v0alpha.P3Api.CreateCustomDataKey:output_type -> api.v0alpha.CreateCustomDataKeyRes
	250, // 581: api.v0alpha.P3Api.DeleteCustomDataKey:output_type -> api.v0alpha.DeleteCustomDataKeyRes
	252, // 582: api.v0alpha.P3Api.UpdateCustomDataKey:output_type -> api.v0alpha.UpdateCustomDataKeyRes
	265, // 583: api.v0alpha.P3Api.GetActivityLogHistory:output_type -> api.v0alpha.GetActivityLogHistoryRes
	205, // 584: api.v0alpha.P3Api.ListTableTemplateProperties:output_type -> api.v0alpha.ListTableTemplatePropertiesRes
	208, // 585: api.v0alpha.P3Api.ListAgentSkillsFilters:output_type -> api.v0alpha.ListAgentSkillsFiltersRes
	271, // 586: api.v0alpha.P3Api.ListScheduleRules:output_type -> api.v0alpha.ListScheduleRulesResult
	211, // 587: api.v0alpha.P3Api.ListCustomReportFilters:output_type -> api.v0alpha.ListCustomReportFiltersRes
	274, // 588: api.v0alpha.P3Api.ListSmsNumbers:output_type -> api.v0alpha.ListSmsNumbersRes
	276, // 589: api.v0alpha.P3Api.GetMailMerge:output_type -> api.v0alpha.GetMailMergeRes
	491, // [491:590] is the sub-list for method output_type
	392, // [392:491] is the sub-list for method input_type
	392, // [392:392] is the sub-list for extension type_name
	392, // [392:392] is the sub-list for extension extendee
	0,   // [0:392] is the sub-list for field type_name
}

func init() { file_api_v0alpha_p3api_proto_init() }
func file_api_v0alpha_p3api_proto_init() {
	if File_api_v0alpha_p3api_proto != nil {
		return
	}
	file_api_v0alpha_p3api_proto_msgTypes[27].OneofWrappers = []any{
		(*PhoneBookEntry_Standard)(nil),
		(*PhoneBookEntry_SipUri)(nil),
	}
	file_api_v0alpha_p3api_proto_msgTypes[34].OneofWrappers = []any{
		(*CreatePhoneBookEntryReq_Standard)(nil),
		(*CreatePhoneBookEntryReq_SipUri)(nil),
	}
	file_api_v0alpha_p3api_proto_msgTypes[36].OneofWrappers = []any{
		(*UpdatePhoneBookEntryReq_Standard)(nil),
		(*UpdatePhoneBookEntryReq_SipUri)(nil),
	}
	file_api_v0alpha_p3api_proto_msgTypes[243].OneofWrappers = []any{
		(*Extension_Agent_)(nil),
		(*Extension_HuntGroup_)(nil),
	}
	file_api_v0alpha_p3api_proto_msgTypes[288].OneofWrappers = []any{
		(*RecalculateBillingRes_Result_Updated)(nil),
		(*RecalculateBillingRes_Result_ErrorMessage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v0alpha_p3api_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   303,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v0alpha_p3api_proto_goTypes,
		DependencyIndexes: file_api_v0alpha_p3api_proto_depIdxs,
		EnumInfos:         file_api_v0alpha_p3api_proto_enumTypes,
		MessageInfos:      file_api_v0alpha_p3api_proto_msgTypes,
	}.Build()
	File_api_v0alpha_p3api_proto = out.File
	file_api_v0alpha_p3api_proto_rawDesc = nil
	file_api_v0alpha_p3api_proto_goTypes = nil
	file_api_v0alpha_p3api_proto_depIdxs = nil
}
