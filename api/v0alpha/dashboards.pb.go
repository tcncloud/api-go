// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: api/v0alpha/dashboards.proto

package v0alpha

import (
	_ "github.com/tcncloud/api-go/annotations"
	perms "github.com/tcncloud/api-go/annotations/perms"
	commons "github.com/tcncloud/api-go/api/commons"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// simple time selection
type TimeSpan_Interval int32

const (
	TimeSpan_TODAY              TimeSpan_Interval = 0
	TimeSpan_YESTERDAY          TimeSpan_Interval = 1
	TimeSpan_LAST_30_DAYS       TimeSpan_Interval = 2
	TimeSpan_MONTH_TO_DATE      TimeSpan_Interval = 3
	TimeSpan_LAST_2_WEEKS       TimeSpan_Interval = 4
	TimeSpan_THIS_WEEK          TimeSpan_Interval = 5
	TimeSpan_THIS_MONTH         TimeSpan_Interval = 6
	TimeSpan_THIS_DAY_LAST_WEEK TimeSpan_Interval = 7
	TimeSpan_PREVIOUS_MONTH     TimeSpan_Interval = 8
)

// Enum value maps for TimeSpan_Interval.
var (
	TimeSpan_Interval_name = map[int32]string{
		0: "TODAY",
		1: "YESTERDAY",
		2: "LAST_30_DAYS",
		3: "MONTH_TO_DATE",
		4: "LAST_2_WEEKS",
		5: "THIS_WEEK",
		6: "THIS_MONTH",
		7: "THIS_DAY_LAST_WEEK",
		8: "PREVIOUS_MONTH",
	}
	TimeSpan_Interval_value = map[string]int32{
		"TODAY":              0,
		"YESTERDAY":          1,
		"LAST_30_DAYS":       2,
		"MONTH_TO_DATE":      3,
		"LAST_2_WEEKS":       4,
		"THIS_WEEK":          5,
		"THIS_MONTH":         6,
		"THIS_DAY_LAST_WEEK": 7,
		"PREVIOUS_MONTH":     8,
	}
)

func (x TimeSpan_Interval) Enum() *TimeSpan_Interval {
	p := new(TimeSpan_Interval)
	*p = x
	return p
}

func (x TimeSpan_Interval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeSpan_Interval) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v0alpha_dashboards_proto_enumTypes[0].Descriptor()
}

func (TimeSpan_Interval) Type() protoreflect.EnumType {
	return &file_api_v0alpha_dashboards_proto_enumTypes[0]
}

func (x TimeSpan_Interval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeSpan_Interval.Descriptor instead.
func (TimeSpan_Interval) EnumDescriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{26, 0}
}

// PublishDashboardRequest used in PublishDashboard rpc
type PublishDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource id of the dashboard to be published
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// destination resource id can be emtpy to create
	// a new resource or can be used to update an existing
	DestinationResourceId string `protobuf:"bytes,2,opt,name=destination_resource_id,json=destinationResourceId,proto3" json:"destination_resource_id,omitempty"`
}

func (x *PublishDashboardRequest) Reset() {
	*x = PublishDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishDashboardRequest) ProtoMessage() {}

func (x *PublishDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishDashboardRequest.ProtoReflect.Descriptor instead.
func (*PublishDashboardRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{0}
}

func (x *PublishDashboardRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *PublishDashboardRequest) GetDestinationResourceId() string {
	if x != nil {
		return x.DestinationResourceId
	}
	return ""
}

// PublishDashboardResponse used in PublishDashboard rpc
type PublishDashboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource id of the published dashboard
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *PublishDashboardResponse) Reset() {
	*x = PublishDashboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishDashboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishDashboardResponse) ProtoMessage() {}

func (x *PublishDashboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishDashboardResponse.ProtoReflect.Descriptor instead.
func (*PublishDashboardResponse) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{1}
}

func (x *PublishDashboardResponse) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

// ListDashboardsRequest --  filled in from auth. May include filters in future
type ListDashboardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListDashboardsRequest) Reset() {
	*x = ListDashboardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDashboardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDashboardsRequest) ProtoMessage() {}

func (x *ListDashboardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDashboardsRequest.ProtoReflect.Descriptor instead.
func (*ListDashboardsRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{2}
}

// ListDashboardsRes contains an array of dashboard summaries
type ListDashboardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DashboardSummaries []*DashboardSummary `protobuf:"bytes,1,rep,name=dashboard_summaries,json=dashboardSummaries,proto3" json:"dashboard_summaries,omitempty"`
}

func (x *ListDashboardsResponse) Reset() {
	*x = ListDashboardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDashboardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDashboardsResponse) ProtoMessage() {}

func (x *ListDashboardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDashboardsResponse.ProtoReflect.Descriptor instead.
func (*ListDashboardsResponse) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{3}
}

func (x *ListDashboardsResponse) GetDashboardSummaries() []*DashboardSummary {
	if x != nil {
		return x.DashboardSummaries
	}
	return nil
}

// Dashboard summary
type DashboardSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique ID for this dashboard
	DashboardId string `protobuf:"bytes,1,opt,name=dashboard_id,json=dashboardId,proto3" json:"dashboard_id,omitempty"`
	// required dashboard title
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// optional dashboard description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// number of associated panels
	PanelCount int32 `protobuf:"varint,4,opt,name=panel_count,json=panelCount,proto3" json:"panel_count,omitempty"`
	// resource id of the dashboard
	ResourceId string `protobuf:"bytes,5,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// standard dashboard flag
	StandardDashboard bool `protobuf:"varint,6,opt,name=standard_dashboard,json=standardDashboard,proto3" json:"standard_dashboard,omitempty"`
}

func (x *DashboardSummary) Reset() {
	*x = DashboardSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardSummary) ProtoMessage() {}

func (x *DashboardSummary) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardSummary.ProtoReflect.Descriptor instead.
func (*DashboardSummary) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{4}
}

func (x *DashboardSummary) GetDashboardId() string {
	if x != nil {
		return x.DashboardId
	}
	return ""
}

func (x *DashboardSummary) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DashboardSummary) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DashboardSummary) GetPanelCount() int32 {
	if x != nil {
		return x.PanelCount
	}
	return 0
}

func (x *DashboardSummary) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *DashboardSummary) GetStandardDashboard() bool {
	if x != nil {
		return x.StandardDashboard
	}
	return false
}

// GetDefaultDashboardRequest used in GetDefaultDashboard rpc
type GetDefaultDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDefaultDashboardRequest) Reset() {
	*x = GetDefaultDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultDashboardRequest) ProtoMessage() {}

func (x *GetDefaultDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultDashboardRequest.ProtoReflect.Descriptor instead.
func (*GetDefaultDashboardRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{5}
}

// SetDefaultDashboardRequest used in SetDefaultDashboard rpc
type SetDefaultDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique ID of dashboard to be set as default
	DashboardId string `protobuf:"bytes,1,opt,name=dashboard_id,json=dashboardId,proto3" json:"dashboard_id,omitempty"`
	// resource id of the dashboard
	ResourceId string `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *SetDefaultDashboardRequest) Reset() {
	*x = SetDefaultDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultDashboardRequest) ProtoMessage() {}

func (x *SetDefaultDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultDashboardRequest.ProtoReflect.Descriptor instead.
func (*SetDefaultDashboardRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{6}
}

func (x *SetDefaultDashboardRequest) GetDashboardId() string {
	if x != nil {
		return x.DashboardId
	}
	return ""
}

func (x *SetDefaultDashboardRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

// ListProductTypesRequest used in ListProductTypes rpc
type ListProductTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListProductTypesRequest) Reset() {
	*x = ListProductTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProductTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProductTypesRequest) ProtoMessage() {}

func (x *ListProductTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProductTypesRequest.ProtoReflect.Descriptor instead.
func (*ListProductTypesRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{7}
}

type ListProductTypesResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types []*ProductType `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
}

func (x *ListProductTypesResult) Reset() {
	*x = ListProductTypesResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProductTypesResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProductTypesResult) ProtoMessage() {}

func (x *ListProductTypesResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProductTypesResult.ProtoReflect.Descriptor instead.
func (*ListProductTypesResult) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{8}
}

func (x *ListProductTypesResult) GetTypes() []*ProductType {
	if x != nil {
		return x.Types
	}
	return nil
}

type ProductType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ProductType) Reset() {
	*x = ProductType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductType) ProtoMessage() {}

func (x *ProductType) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductType.ProtoReflect.Descriptor instead.
func (*ProductType) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{9}
}

func (x *ProductType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// DeleteDashboardRequest used in DeleteDashboard rpc
type DeleteDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique ID of dashboard to be deleted
	DashboardId string `protobuf:"bytes,1,opt,name=dashboard_id,json=dashboardId,proto3" json:"dashboard_id,omitempty"`
	// resource id of the dashboard
	ResourceId string `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *DeleteDashboardRequest) Reset() {
	*x = DeleteDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDashboardRequest) ProtoMessage() {}

func (x *DeleteDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDashboardRequest.ProtoReflect.Descriptor instead.
func (*DeleteDashboardRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteDashboardRequest) GetDashboardId() string {
	if x != nil {
		return x.DashboardId
	}
	return ""
}

func (x *DeleteDashboardRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

// GetDashboardRequest used in GetDashboard rpc
type GetDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique ID of dashboard to retrieve
	DashboardId string `protobuf:"bytes,1,opt,name=dashboard_id,json=dashboardId,proto3" json:"dashboard_id,omitempty"`
	// resource id of the dashboard
	ResourceId string `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// application retrieving the dashboard
	Application perms.Application `protobuf:"varint,3,opt,name=application,proto3,enum=annotations.perms.Application" json:"application,omitempty"`
}

func (x *GetDashboardRequest) Reset() {
	*x = GetDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardRequest) ProtoMessage() {}

func (x *GetDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardRequest.ProtoReflect.Descriptor instead.
func (*GetDashboardRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{11}
}

func (x *GetDashboardRequest) GetDashboardId() string {
	if x != nil {
		return x.DashboardId
	}
	return ""
}

func (x *GetDashboardRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *GetDashboardRequest) GetApplication() perms.Application {
	if x != nil {
		return x.Application
	}
	return perms.Application(0)
}

// CreateDashboardRequest used in the CreateDashboard rpc
type CreateDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// required dashboard title
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// optional dashboard description
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// layout of associated dashboard panels
	Layout *DashboardLayout `protobuf:"bytes,3,opt,name=layout,proto3" json:"layout,omitempty"`
	// the dashboards viewing params
	View *DashboardView `protobuf:"bytes,4,opt,name=view,proto3" json:"view,omitempty"`
	// the type of dashboard, with type specific components
	Type *DashboardType `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *CreateDashboardRequest) Reset() {
	*x = CreateDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDashboardRequest) ProtoMessage() {}

func (x *CreateDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDashboardRequest.ProtoReflect.Descriptor instead.
func (*CreateDashboardRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{12}
}

func (x *CreateDashboardRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateDashboardRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateDashboardRequest) GetLayout() *DashboardLayout {
	if x != nil {
		return x.Layout
	}
	return nil
}

func (x *CreateDashboardRequest) GetView() *DashboardView {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *CreateDashboardRequest) GetType() *DashboardType {
	if x != nil {
		return x.Type
	}
	return nil
}

// CreateDashboardResponse used in the CreateDashboard rpc
type CreateDashboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique ID of the dashboard created
	DashboardId string `protobuf:"bytes,1,opt,name=dashboard_id,json=dashboardId,proto3" json:"dashboard_id,omitempty"`
	// resource id of the dashboard created
	ResourceId string `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *CreateDashboardResponse) Reset() {
	*x = CreateDashboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDashboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDashboardResponse) ProtoMessage() {}

func (x *CreateDashboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDashboardResponse.ProtoReflect.Descriptor instead.
func (*CreateDashboardResponse) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{13}
}

func (x *CreateDashboardResponse) GetDashboardId() string {
	if x != nil {
		return x.DashboardId
	}
	return ""
}

func (x *CreateDashboardResponse) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

// DashboardLayout contains location information for a dashboards panels
type DashboardLayout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// location information for each panel
	Panels []*DashboardPanel `protobuf:"bytes,1,rep,name=panels,proto3" json:"panels,omitempty"`
}

func (x *DashboardLayout) Reset() {
	*x = DashboardLayout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardLayout) ProtoMessage() {}

func (x *DashboardLayout) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardLayout.ProtoReflect.Descriptor instead.
func (*DashboardLayout) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{14}
}

func (x *DashboardLayout) GetPanels() []*DashboardPanel {
	if x != nil {
		return x.Panels
	}
	return nil
}

// location fields subject to change
type DashboardPanel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// panel_source determines the fields needed to
	// retrieve the panel data and is used to determine
	// who to pull the data from
	PanelSource *PanelSource `protobuf:"bytes,1,opt,name=panel_source,json=panelSource,proto3" json:"panel_source,omitempty"`
	// height of panel
	RowLength int64 `protobuf:"varint,2,opt,name=row_length,json=rowLength,proto3" json:"row_length,omitempty"`
	// length of panel
	ColumnLength int64 `protobuf:"varint,3,opt,name=column_length,json=columnLength,proto3" json:"column_length,omitempty"`
	// absolute x position of panel
	RowStart int64 `protobuf:"varint,4,opt,name=row_start,json=rowStart,proto3" json:"row_start,omitempty"`
	// absoulute y position of panel
	ColumnStart int64 `protobuf:"varint,5,opt,name=column_start,json=columnStart,proto3" json:"column_start,omitempty"`
}

func (x *DashboardPanel) Reset() {
	*x = DashboardPanel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardPanel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardPanel) ProtoMessage() {}

func (x *DashboardPanel) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardPanel.ProtoReflect.Descriptor instead.
func (*DashboardPanel) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{15}
}

func (x *DashboardPanel) GetPanelSource() *PanelSource {
	if x != nil {
		return x.PanelSource
	}
	return nil
}

func (x *DashboardPanel) GetRowLength() int64 {
	if x != nil {
		return x.RowLength
	}
	return 0
}

func (x *DashboardPanel) GetColumnLength() int64 {
	if x != nil {
		return x.ColumnLength
	}
	return 0
}

func (x *DashboardPanel) GetRowStart() int64 {
	if x != nil {
		return x.RowStart
	}
	return 0
}

func (x *DashboardPanel) GetColumnStart() int64 {
	if x != nil {
		return x.ColumnStart
	}
	return 0
}

// PanelSource is used per APP and each message in the oneOf is used to determine what APP to call
type PanelSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// added for each new panel type used by multiple teams
	//
	// Types that are assignable to PanelType:
	//
	//	*PanelSource_InsightId
	//	*PanelSource_LegacyInsightId
	//	*PanelSource_InsightResourceId
	PanelType isPanelSource_PanelType `protobuf_oneof:"panel_type"`
	// Used for selecting which output configuration to display in the dashboard
	OutputConfigurationResourceId string `protobuf:"bytes,4,opt,name=output_configuration_resource_id,json=outputConfigurationResourceId,proto3" json:"output_configuration_resource_id,omitempty"`
}

func (x *PanelSource) Reset() {
	*x = PanelSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PanelSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PanelSource) ProtoMessage() {}

func (x *PanelSource) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PanelSource.ProtoReflect.Descriptor instead.
func (*PanelSource) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{16}
}

func (m *PanelSource) GetPanelType() isPanelSource_PanelType {
	if m != nil {
		return m.PanelType
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v0alpha/dashboards.proto.
func (x *PanelSource) GetInsightId() string {
	if x, ok := x.GetPanelType().(*PanelSource_InsightId); ok {
		return x.InsightId
	}
	return ""
}

func (x *PanelSource) GetLegacyInsightId() string {
	if x, ok := x.GetPanelType().(*PanelSource_LegacyInsightId); ok {
		return x.LegacyInsightId
	}
	return ""
}

func (x *PanelSource) GetInsightResourceId() string {
	if x, ok := x.GetPanelType().(*PanelSource_InsightResourceId); ok {
		return x.InsightResourceId
	}
	return ""
}

func (x *PanelSource) GetOutputConfigurationResourceId() string {
	if x != nil {
		return x.OutputConfigurationResourceId
	}
	return ""
}

type isPanelSource_PanelType interface {
	isPanelSource_PanelType()
}

type PanelSource_InsightId struct {
	// Used for new BI insights in operator
	//
	// Deprecated: Marked as deprecated in api/v0alpha/dashboards.proto.
	InsightId string `protobuf:"bytes,1,opt,name=insight_id,json=insightId,proto3,oneof"`
}

type PanelSource_LegacyInsightId struct {
	// Used for old insights in BI
	LegacyInsightId string `protobuf:"bytes,2,opt,name=legacy_insight_id,json=legacyInsightId,proto3,oneof"`
}

type PanelSource_InsightResourceId struct {
	// Used for BI Insights in operator
	InsightResourceId string `protobuf:"bytes,3,opt,name=insight_resource_id,json=insightResourceId,proto3,oneof"`
}

func (*PanelSource_InsightId) isPanelSource_PanelType() {}

func (*PanelSource_LegacyInsightId) isPanelSource_PanelType() {}

func (*PanelSource_InsightResourceId) isPanelSource_PanelType() {}

// Dashboard contains all fields for a dashboard
type Dashboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique ID for this dashboard
	DashboardId string `protobuf:"bytes,1,opt,name=dashboard_id,json=dashboardId,proto3" json:"dashboard_id,omitempty"`
	// required dashboard title
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// optional dashboard description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// layout of associated panels
	Layout *DashboardLayout `protobuf:"bytes,4,opt,name=layout,proto3" json:"layout,omitempty"`
	// viewing params of dashboard
	View *DashboardView `protobuf:"bytes,5,opt,name=view,proto3" json:"view,omitempty"`
	// dashboard type, with type specific components
	Type *DashboardType `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// resource id of the dashboard
	ResourceId string `protobuf:"bytes,7,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// standard dashboard flag
	StandardDashboard bool `protobuf:"varint,8,opt,name=standard_dashboard,json=standardDashboard,proto3" json:"standard_dashboard,omitempty"`
}

func (x *Dashboard) Reset() {
	*x = Dashboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dashboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dashboard) ProtoMessage() {}

func (x *Dashboard) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dashboard.ProtoReflect.Descriptor instead.
func (*Dashboard) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{17}
}

func (x *Dashboard) GetDashboardId() string {
	if x != nil {
		return x.DashboardId
	}
	return ""
}

func (x *Dashboard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Dashboard) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Dashboard) GetLayout() *DashboardLayout {
	if x != nil {
		return x.Layout
	}
	return nil
}

func (x *Dashboard) GetView() *DashboardView {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *Dashboard) GetType() *DashboardType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Dashboard) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *Dashboard) GetStandardDashboard() bool {
	if x != nil {
		return x.StandardDashboard
	}
	return false
}

// DashboardType, specifies what type of dashboard we are dealing with
type DashboardType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*DashboardType_Historic
	//	*DashboardType_RealTime
	Type isDashboardType_Type `protobuf_oneof:"type"`
}

func (x *DashboardType) Reset() {
	*x = DashboardType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardType) ProtoMessage() {}

func (x *DashboardType) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardType.ProtoReflect.Descriptor instead.
func (*DashboardType) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{18}
}

func (m *DashboardType) GetType() isDashboardType_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *DashboardType) GetHistoric() *HistoricConfig {
	if x, ok := x.GetType().(*DashboardType_Historic); ok {
		return x.Historic
	}
	return nil
}

func (x *DashboardType) GetRealTime() *RealTimeConfig {
	if x, ok := x.GetType().(*DashboardType_RealTime); ok {
		return x.RealTime
	}
	return nil
}

type isDashboardType_Type interface {
	isDashboardType_Type()
}

type DashboardType_Historic struct {
	Historic *HistoricConfig `protobuf:"bytes,6,opt,name=historic,proto3,oneof"`
}

type DashboardType_RealTime struct {
	RealTime *RealTimeConfig `protobuf:"bytes,7,opt,name=real_time,json=realTime,proto3,oneof"`
}

func (*DashboardType_Historic) isDashboardType_Type() {}

func (*DashboardType_RealTime) isDashboardType_Type() {}

// Historic Dashboard type
type HistoricConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// amount of history the dashboard consumes
	//
	// Types that are assignable to TimeSpan:
	//
	//	*HistoricConfig_TimeSpanSimple
	//	*HistoricConfig_TimeSpanRange
	TimeSpan isHistoricConfig_TimeSpan `protobuf_oneof:"time_span"`
	// The default time zone to view the historic data by
	TimeZone commons.TimeZone `protobuf:"varint,4,opt,name=time_zone,json=timeZone,proto3,enum=api.commons.TimeZone" json:"time_zone,omitempty"`
}

func (x *HistoricConfig) Reset() {
	*x = HistoricConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricConfig) ProtoMessage() {}

func (x *HistoricConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricConfig.ProtoReflect.Descriptor instead.
func (*HistoricConfig) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{19}
}

func (m *HistoricConfig) GetTimeSpan() isHistoricConfig_TimeSpan {
	if m != nil {
		return m.TimeSpan
	}
	return nil
}

func (x *HistoricConfig) GetTimeSpanSimple() TimeSpan_Interval {
	if x, ok := x.GetTimeSpan().(*HistoricConfig_TimeSpanSimple); ok {
		return x.TimeSpanSimple
	}
	return TimeSpan_TODAY
}

func (x *HistoricConfig) GetTimeSpanRange() *TimeSpan_Range {
	if x, ok := x.GetTimeSpan().(*HistoricConfig_TimeSpanRange); ok {
		return x.TimeSpanRange
	}
	return nil
}

func (x *HistoricConfig) GetTimeZone() commons.TimeZone {
	if x != nil {
		return x.TimeZone
	}
	return commons.TimeZone(0)
}

type isHistoricConfig_TimeSpan interface {
	isHistoricConfig_TimeSpan()
}

type HistoricConfig_TimeSpanSimple struct {
	TimeSpanSimple TimeSpan_Interval `protobuf:"varint,1,opt,name=time_span_simple,json=timeSpanSimple,proto3,enum=api.v0alpha.TimeSpan_Interval,oneof"`
}

type HistoricConfig_TimeSpanRange struct {
	TimeSpanRange *TimeSpan_Range `protobuf:"bytes,3,opt,name=time_span_range,json=timeSpanRange,proto3,oneof"`
}

func (*HistoricConfig_TimeSpanSimple) isHistoricConfig_TimeSpan() {}

func (*HistoricConfig_TimeSpanRange) isHistoricConfig_TimeSpan() {}

// Real Time Dashboard type
// has no time_span, is only concerned with the present
type RealTimeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RealTimeConfig) Reset() {
	*x = RealTimeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealTimeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeConfig) ProtoMessage() {}

func (x *RealTimeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeConfig.ProtoReflect.Descriptor instead.
func (*RealTimeConfig) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{20}
}

// UpdateDashboard used for the update RPC
type UpdateDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique ID for this dashboard
	DashboardId string `protobuf:"bytes,1,opt,name=dashboard_id,json=dashboardId,proto3" json:"dashboard_id,omitempty"`
	// required dashboard title
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// optional dashboard description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// layout of associated panels
	Layout *DashboardLayout `protobuf:"bytes,4,opt,name=layout,proto3" json:"layout,omitempty"`
	// viewing params of dashboard
	View *DashboardView `protobuf:"bytes,5,opt,name=view,proto3" json:"view,omitempty"`
	// dashboard type, with type specific components
	Type *DashboardType `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// resource id of the dashboard
	ResourceId string `protobuf:"bytes,7,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *UpdateDashboardRequest) Reset() {
	*x = UpdateDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDashboardRequest) ProtoMessage() {}

func (x *UpdateDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDashboardRequest.ProtoReflect.Descriptor instead.
func (*UpdateDashboardRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateDashboardRequest) GetDashboardId() string {
	if x != nil {
		return x.DashboardId
	}
	return ""
}

func (x *UpdateDashboardRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateDashboardRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateDashboardRequest) GetLayout() *DashboardLayout {
	if x != nil {
		return x.Layout
	}
	return nil
}

func (x *UpdateDashboardRequest) GetView() *DashboardView {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *UpdateDashboardRequest) GetType() *DashboardType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *UpdateDashboardRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

// UpdateDashboardTitleAndDescriptionResponse used for the update RPC
type UpdateDashboardTitleAndDescriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique ID for dashboard to update
	DashboardId string `protobuf:"bytes,1,opt,name=dashboard_id,json=dashboardId,proto3" json:"dashboard_id,omitempty"`
	// required new dashboard title
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// optional new dashboard description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// resource id of the dashboard
	ResourceId string `protobuf:"bytes,4,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *UpdateDashboardTitleAndDescriptionRequest) Reset() {
	*x = UpdateDashboardTitleAndDescriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDashboardTitleAndDescriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDashboardTitleAndDescriptionRequest) ProtoMessage() {}

func (x *UpdateDashboardTitleAndDescriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDashboardTitleAndDescriptionRequest.ProtoReflect.Descriptor instead.
func (*UpdateDashboardTitleAndDescriptionRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateDashboardTitleAndDescriptionRequest) GetDashboardId() string {
	if x != nil {
		return x.DashboardId
	}
	return ""
}

func (x *UpdateDashboardTitleAndDescriptionRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateDashboardTitleAndDescriptionRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateDashboardTitleAndDescriptionRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

// UpdateDashboardTitleAndDescriptionRequest used for the update RPC
type UpdateDashboardLayoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique ID for dashboard to update
	DashboardId string `protobuf:"bytes,1,opt,name=dashboard_id,json=dashboardId,proto3" json:"dashboard_id,omitempty"`
	// layout of associated panels
	Layout *DashboardLayout `protobuf:"bytes,2,opt,name=layout,proto3" json:"layout,omitempty"`
	// resource id of the dashboard
	ResourceId string `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *UpdateDashboardLayoutRequest) Reset() {
	*x = UpdateDashboardLayoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDashboardLayoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDashboardLayoutRequest) ProtoMessage() {}

func (x *UpdateDashboardLayoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDashboardLayoutRequest.ProtoReflect.Descriptor instead.
func (*UpdateDashboardLayoutRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateDashboardLayoutRequest) GetDashboardId() string {
	if x != nil {
		return x.DashboardId
	}
	return ""
}

func (x *UpdateDashboardLayoutRequest) GetLayout() *DashboardLayout {
	if x != nil {
		return x.Layout
	}
	return nil
}

func (x *UpdateDashboardLayoutRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

// UpdateDashboardViewRequest  used in the update RPC
type UpdateDashboardViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique ID of dashboard to update
	DashboardId string `protobuf:"bytes,1,opt,name=dashboard_id,json=dashboardId,proto3" json:"dashboard_id,omitempty"`
	// the dashboards viewing params
	View *DashboardView `protobuf:"bytes,2,opt,name=view,proto3" json:"view,omitempty"`
	// resource id of the dashboard
	ResourceId string `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *UpdateDashboardViewRequest) Reset() {
	*x = UpdateDashboardViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDashboardViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDashboardViewRequest) ProtoMessage() {}

func (x *UpdateDashboardViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDashboardViewRequest.ProtoReflect.Descriptor instead.
func (*UpdateDashboardViewRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateDashboardViewRequest) GetDashboardId() string {
	if x != nil {
		return x.DashboardId
	}
	return ""
}

func (x *UpdateDashboardViewRequest) GetView() *DashboardView {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *UpdateDashboardViewRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

// DashboardView contains the viewing parameters that make up the view of a dashboard
type DashboardView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of clients whose data will be viewed
	OrgIds []string `protobuf:"bytes,2,rep,name=org_ids,json=orgIds,proto3" json:"org_ids,omitempty"`
}

func (x *DashboardView) Reset() {
	*x = DashboardView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardView) ProtoMessage() {}

func (x *DashboardView) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardView.ProtoReflect.Descriptor instead.
func (*DashboardView) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{25}
}

func (x *DashboardView) GetOrgIds() []string {
	if x != nil {
		return x.OrgIds
	}
	return nil
}

// TimeSpan is used to determine the time scope of data retrieved from the dash
type TimeSpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TimeSpan) Reset() {
	*x = TimeSpan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSpan) ProtoMessage() {}

func (x *TimeSpan) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSpan.ProtoReflect.Descriptor instead.
func (*TimeSpan) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{26}
}

// CreateApplicationDashboardRequest assigns a dashboard to an application
type CreateApplicationDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DashboardResourceId string            `protobuf:"bytes,1,opt,name=dashboard_resource_id,json=dashboardResourceId,proto3" json:"dashboard_resource_id,omitempty"` // dashboard resource id
	OrgId               string            `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`                                             // org id for ownership
	Application         perms.Application `protobuf:"varint,3,opt,name=application,proto3,enum=annotations.perms.Application" json:"application,omitempty"`          // application enum
}

func (x *CreateApplicationDashboardRequest) Reset() {
	*x = CreateApplicationDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateApplicationDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationDashboardRequest) ProtoMessage() {}

func (x *CreateApplicationDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationDashboardRequest.ProtoReflect.Descriptor instead.
func (*CreateApplicationDashboardRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{27}
}

func (x *CreateApplicationDashboardRequest) GetDashboardResourceId() string {
	if x != nil {
		return x.DashboardResourceId
	}
	return ""
}

func (x *CreateApplicationDashboardRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *CreateApplicationDashboardRequest) GetApplication() perms.Application {
	if x != nil {
		return x.Application
	}
	return perms.Application(0)
}

// CreateApplicationDashboardResponse is idempotent
type CreateApplicationDashboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateApplicationDashboardResponse) Reset() {
	*x = CreateApplicationDashboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateApplicationDashboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationDashboardResponse) ProtoMessage() {}

func (x *CreateApplicationDashboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationDashboardResponse.ProtoReflect.Descriptor instead.
func (*CreateApplicationDashboardResponse) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{28}
}

// ListApplicationDashboardsRequest lists apps and assigned dashboards
type ListApplicationsDashboardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListApplicationsDashboardsRequest) Reset() {
	*x = ListApplicationsDashboardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListApplicationsDashboardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplicationsDashboardsRequest) ProtoMessage() {}

func (x *ListApplicationsDashboardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplicationsDashboardsRequest.ProtoReflect.Descriptor instead.
func (*ListApplicationsDashboardsRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{29}
}

// ApplicationDashboards wraps a list of dashboards for a specific application
type ApplicationDashboards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// application dashboard id
	Application        perms.Application   `protobuf:"varint,1,opt,name=application,proto3,enum=annotations.perms.Application" json:"application,omitempty"`     // application enum
	DashboardSummaries []*DashboardSummary `protobuf:"bytes,2,rep,name=dashboard_summaries,json=dashboardSummaries,proto3" json:"dashboard_summaries,omitempty"` // dashboards assigned to application
}

func (x *ApplicationDashboards) Reset() {
	*x = ApplicationDashboards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationDashboards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationDashboards) ProtoMessage() {}

func (x *ApplicationDashboards) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationDashboards.ProtoReflect.Descriptor instead.
func (*ApplicationDashboards) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{30}
}

func (x *ApplicationDashboards) GetApplication() perms.Application {
	if x != nil {
		return x.Application
	}
	return perms.Application(0)
}

func (x *ApplicationDashboards) GetDashboardSummaries() []*DashboardSummary {
	if x != nil {
		return x.DashboardSummaries
	}
	return nil
}

// ListApplicationsDashboardsResponse used in ListApplicationDashboards rpc'
type ListApplicationsDashboardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationDashboards []*ApplicationDashboards `protobuf:"bytes,1,rep,name=application_dashboards,json=applicationDashboards,proto3" json:"application_dashboards,omitempty"` // list of application dashboards
}

func (x *ListApplicationsDashboardsResponse) Reset() {
	*x = ListApplicationsDashboardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListApplicationsDashboardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplicationsDashboardsResponse) ProtoMessage() {}

func (x *ListApplicationsDashboardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplicationsDashboardsResponse.ProtoReflect.Descriptor instead.
func (*ListApplicationsDashboardsResponse) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{31}
}

func (x *ListApplicationsDashboardsResponse) GetApplicationDashboards() []*ApplicationDashboards {
	if x != nil {
		return x.ApplicationDashboards
	}
	return nil
}

// DeleteApplicationDashboardRequest used in DeleteApplicationDashboard rpc
type DeleteApplicationDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// application dashboard id
	Application         perms.Application `protobuf:"varint,1,opt,name=application,proto3,enum=annotations.perms.Application" json:"application,omitempty"`          // application enum
	DashboardResourceId string            `protobuf:"bytes,2,opt,name=dashboard_resource_id,json=dashboardResourceId,proto3" json:"dashboard_resource_id,omitempty"` // dashboard resource id
	OrgId               string            `protobuf:"bytes,3,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`                                             // org id for ownership
}

func (x *DeleteApplicationDashboardRequest) Reset() {
	*x = DeleteApplicationDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteApplicationDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationDashboardRequest) ProtoMessage() {}

func (x *DeleteApplicationDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationDashboardRequest.ProtoReflect.Descriptor instead.
func (*DeleteApplicationDashboardRequest) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteApplicationDashboardRequest) GetApplication() perms.Application {
	if x != nil {
		return x.Application
	}
	return perms.Application(0)
}

func (x *DeleteApplicationDashboardRequest) GetDashboardResourceId() string {
	if x != nil {
		return x.DashboardResourceId
	}
	return ""
}

func (x *DeleteApplicationDashboardRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

// DeleteApplicationDashboardResponse used in DeleteApplicationDashboard rpc
type DeleteApplicationDashboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteApplicationDashboardResponse) Reset() {
	*x = DeleteApplicationDashboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteApplicationDashboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationDashboardResponse) ProtoMessage() {}

func (x *DeleteApplicationDashboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationDashboardResponse.ProtoReflect.Descriptor instead.
func (*DeleteApplicationDashboardResponse) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{33}
}

// absolute time range
type TimeSpan_Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *TimeSpan_Range) Reset() {
	*x = TimeSpan_Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_dashboards_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSpan_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSpan_Range) ProtoMessage() {}

func (x *TimeSpan_Range) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_dashboards_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSpan_Range.ProtoReflect.Descriptor instead.
func (*TimeSpan_Range) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_dashboards_proto_rawDescGZIP(), []int{26, 0}
}

func (x *TimeSpan_Range) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *TimeSpan_Range) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

var File_api_v0alpha_dashboards_proto protoreflect.FileDescriptor

var file_api_v0alpha_dashboards_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x17, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x72, 0x0a, 0x17, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x18,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x68, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x13,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x12, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0xde, 0x01, 0x0a,
	0x10, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2d,
	0x0a, 0x12, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x22, 0x1c, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x1a, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x19, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x22, 0x31, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5c, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x40, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xe6, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5d, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x0f, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x33, 0x0a, 0x06,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x52, 0x06, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x73, 0x22, 0xd1, 0x01, 0x0a, 0x0e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x77, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x22, 0xe9, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52,
	0x09, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x49,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x20, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xcc, 0x02, 0x0a, 0x09, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x12, 0x2e, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x22, 0x8e, 0x01, 0x0a, 0x0d, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x08, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x12, 0x3a, 0x0a,
	0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52,
	0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xea, 0x01, 0x0a, 0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x4a, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x61,
	0x6e, 0x5f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x12, 0x45, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x6e,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x70,
	0x61, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e,
	0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x10,
	0x0a, 0x0e, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0xaa, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0xa7, 0x01,
	0x0a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x6c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x0d, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x56, 0x69, 0x65, 0x77, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x73, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10,
	0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x9c, 0x02, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x70, 0x61, 0x6e, 0x1a, 0x67, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xa6, 0x01,
	0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f,
	0x44, 0x41, 0x59, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x59, 0x45, 0x53, 0x54, 0x45, 0x52, 0x44,
	0x41, 0x59, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x33, 0x30, 0x5f,
	0x44, 0x41, 0x59, 0x53, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x5f,
	0x54, 0x4f, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x41, 0x53,
	0x54, 0x5f, 0x32, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x53, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x54,
	0x48, 0x49, 0x53, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x48,
	0x49, 0x53, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x48,
	0x49, 0x53, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x57, 0x45, 0x45, 0x4b,
	0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x45, 0x56, 0x49, 0x4f, 0x55, 0x53, 0x5f, 0x4d,
	0x4f, 0x4e, 0x54, 0x48, 0x10, 0x08, 0x22, 0xb0, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x73,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x23, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x40,
	0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4e, 0x0a, 0x13, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x12, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73,
	0x22, 0x7f, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x22, 0xb0, 0x01, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x73,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xd3, 0x13, 0x0a, 0x0a, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x0f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x23, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x08, 0x0a,
	0x06, 0x08, 0xd9, 0x04, 0x08, 0xda, 0x04, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a,
	0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x83, 0x01, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x22, 0x39, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xd9, 0x04,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2f, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12,
	0x98, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xd9, 0x04, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x96, 0x01, 0x0a, 0x0e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x22, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0xd9, 0x04, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xd9, 0x04, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x08, 0x0a, 0x06, 0x08, 0xd9, 0x04, 0x08,
	0xda, 0x04, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x12, 0x9b, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x27, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x43, 0xba,
	0xb8, 0x91, 0x02, 0x08, 0x0a, 0x06, 0x08, 0xd9, 0x04, 0x08, 0xda, 0x04, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x12, 0x8f, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x08, 0x0a, 0x06, 0x08, 0xd9, 0x04, 0x08,
	0xda, 0x04, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x12, 0xc8, 0x01, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x41, 0x6e, 0x64,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x41, 0x6e,
	0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0xba, 0xb8, 0x91,
	0x02, 0x08, 0x0a, 0x06, 0x08, 0xd9, 0x04, 0x08, 0xda, 0x04, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f,
	0x3a, 0x01, 0x2a, 0x22, 0x3a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x9b, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x56, 0x69, 0x65, 0x77, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x43, 0xba, 0xb8, 0x91, 0x02, 0x08, 0x0a,
	0x06, 0x08, 0xd9, 0x04, 0x08, 0xda, 0x04, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a,
	0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x56, 0x69, 0x65, 0x77, 0x12, 0xa1, 0x01,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x45, 0xba, 0xb8, 0x91, 0x02,
	0x08, 0x0a, 0x06, 0x08, 0xd9, 0x04, 0x08, 0xda, 0x04, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a,
	0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x12, 0xa1, 0x01, 0x0a, 0x10, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x08, 0x0a, 0x06, 0x08, 0xfb, 0x01, 0x08,
	0xda, 0x04, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0xc6, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xda,
	0x04, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0xc6,
	0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xda, 0x04, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37,
	0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0xc6, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0xda, 0x04, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x42, 0x97, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x42, 0x0f, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69,
	0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xa2,
	0x02, 0x03, 0x41, 0x56, 0x58, 0xaa, 0x02, 0x0b, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0xca, 0x02, 0x0b, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0xe2, 0x02, 0x17, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x41, 0x70,
	0x69, 0x3a, 0x3a, 0x56, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_api_v0alpha_dashboards_proto_rawDescOnce sync.Once
	file_api_v0alpha_dashboards_proto_rawDescData = file_api_v0alpha_dashboards_proto_rawDesc
)

func file_api_v0alpha_dashboards_proto_rawDescGZIP() []byte {
	file_api_v0alpha_dashboards_proto_rawDescOnce.Do(func() {
		file_api_v0alpha_dashboards_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v0alpha_dashboards_proto_rawDescData)
	})
	return file_api_v0alpha_dashboards_proto_rawDescData
}

var file_api_v0alpha_dashboards_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_v0alpha_dashboards_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_api_v0alpha_dashboards_proto_goTypes = []any{
	(TimeSpan_Interval)(0),                            // 0: api.v0alpha.TimeSpan.Interval
	(*PublishDashboardRequest)(nil),                   // 1: api.v0alpha.PublishDashboardRequest
	(*PublishDashboardResponse)(nil),                  // 2: api.v0alpha.PublishDashboardResponse
	(*ListDashboardsRequest)(nil),                     // 3: api.v0alpha.ListDashboardsRequest
	(*ListDashboardsResponse)(nil),                    // 4: api.v0alpha.ListDashboardsResponse
	(*DashboardSummary)(nil),                          // 5: api.v0alpha.DashboardSummary
	(*GetDefaultDashboardRequest)(nil),                // 6: api.v0alpha.GetDefaultDashboardRequest
	(*SetDefaultDashboardRequest)(nil),                // 7: api.v0alpha.SetDefaultDashboardRequest
	(*ListProductTypesRequest)(nil),                   // 8: api.v0alpha.ListProductTypesRequest
	(*ListProductTypesResult)(nil),                    // 9: api.v0alpha.ListProductTypesResult
	(*ProductType)(nil),                               // 10: api.v0alpha.ProductType
	(*DeleteDashboardRequest)(nil),                    // 11: api.v0alpha.DeleteDashboardRequest
	(*GetDashboardRequest)(nil),                       // 12: api.v0alpha.GetDashboardRequest
	(*CreateDashboardRequest)(nil),                    // 13: api.v0alpha.CreateDashboardRequest
	(*CreateDashboardResponse)(nil),                   // 14: api.v0alpha.CreateDashboardResponse
	(*DashboardLayout)(nil),                           // 15: api.v0alpha.DashboardLayout
	(*DashboardPanel)(nil),                            // 16: api.v0alpha.DashboardPanel
	(*PanelSource)(nil),                               // 17: api.v0alpha.PanelSource
	(*Dashboard)(nil),                                 // 18: api.v0alpha.Dashboard
	(*DashboardType)(nil),                             // 19: api.v0alpha.DashboardType
	(*HistoricConfig)(nil),                            // 20: api.v0alpha.HistoricConfig
	(*RealTimeConfig)(nil),                            // 21: api.v0alpha.RealTimeConfig
	(*UpdateDashboardRequest)(nil),                    // 22: api.v0alpha.UpdateDashboardRequest
	(*UpdateDashboardTitleAndDescriptionRequest)(nil), // 23: api.v0alpha.UpdateDashboardTitleAndDescriptionRequest
	(*UpdateDashboardLayoutRequest)(nil),              // 24: api.v0alpha.UpdateDashboardLayoutRequest
	(*UpdateDashboardViewRequest)(nil),                // 25: api.v0alpha.UpdateDashboardViewRequest
	(*DashboardView)(nil),                             // 26: api.v0alpha.DashboardView
	(*TimeSpan)(nil),                                  // 27: api.v0alpha.TimeSpan
	(*CreateApplicationDashboardRequest)(nil),         // 28: api.v0alpha.CreateApplicationDashboardRequest
	(*CreateApplicationDashboardResponse)(nil),        // 29: api.v0alpha.CreateApplicationDashboardResponse
	(*ListApplicationsDashboardsRequest)(nil),         // 30: api.v0alpha.ListApplicationsDashboardsRequest
	(*ApplicationDashboards)(nil),                     // 31: api.v0alpha.ApplicationDashboards
	(*ListApplicationsDashboardsResponse)(nil),        // 32: api.v0alpha.ListApplicationsDashboardsResponse
	(*DeleteApplicationDashboardRequest)(nil),         // 33: api.v0alpha.DeleteApplicationDashboardRequest
	(*DeleteApplicationDashboardResponse)(nil),        // 34: api.v0alpha.DeleteApplicationDashboardResponse
	(*TimeSpan_Range)(nil),                            // 35: api.v0alpha.TimeSpan.Range
	(perms.Application)(0),                            // 36: annotations.perms.Application
	(commons.TimeZone)(0),                             // 37: api.commons.TimeZone
	(*timestamppb.Timestamp)(nil),                     // 38: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                             // 39: google.protobuf.Empty
}
var file_api_v0alpha_dashboards_proto_depIdxs = []int32{
	5,  // 0: api.v0alpha.ListDashboardsResponse.dashboard_summaries:type_name -> api.v0alpha.DashboardSummary
	10, // 1: api.v0alpha.ListProductTypesResult.types:type_name -> api.v0alpha.ProductType
	36, // 2: api.v0alpha.GetDashboardRequest.application:type_name -> annotations.perms.Application
	15, // 3: api.v0alpha.CreateDashboardRequest.layout:type_name -> api.v0alpha.DashboardLayout
	26, // 4: api.v0alpha.CreateDashboardRequest.view:type_name -> api.v0alpha.DashboardView
	19, // 5: api.v0alpha.CreateDashboardRequest.type:type_name -> api.v0alpha.DashboardType
	16, // 6: api.v0alpha.DashboardLayout.panels:type_name -> api.v0alpha.DashboardPanel
	17, // 7: api.v0alpha.DashboardPanel.panel_source:type_name -> api.v0alpha.PanelSource
	15, // 8: api.v0alpha.Dashboard.layout:type_name -> api.v0alpha.DashboardLayout
	26, // 9: api.v0alpha.Dashboard.view:type_name -> api.v0alpha.DashboardView
	19, // 10: api.v0alpha.Dashboard.type:type_name -> api.v0alpha.DashboardType
	20, // 11: api.v0alpha.DashboardType.historic:type_name -> api.v0alpha.HistoricConfig
	21, // 12: api.v0alpha.DashboardType.real_time:type_name -> api.v0alpha.RealTimeConfig
	0,  // 13: api.v0alpha.HistoricConfig.time_span_simple:type_name -> api.v0alpha.TimeSpan.Interval
	35, // 14: api.v0alpha.HistoricConfig.time_span_range:type_name -> api.v0alpha.TimeSpan.Range
	37, // 15: api.v0alpha.HistoricConfig.time_zone:type_name -> api.commons.TimeZone
	15, // 16: api.v0alpha.UpdateDashboardRequest.layout:type_name -> api.v0alpha.DashboardLayout
	26, // 17: api.v0alpha.UpdateDashboardRequest.view:type_name -> api.v0alpha.DashboardView
	19, // 18: api.v0alpha.UpdateDashboardRequest.type:type_name -> api.v0alpha.DashboardType
	15, // 19: api.v0alpha.UpdateDashboardLayoutRequest.layout:type_name -> api.v0alpha.DashboardLayout
	26, // 20: api.v0alpha.UpdateDashboardViewRequest.view:type_name -> api.v0alpha.DashboardView
	36, // 21: api.v0alpha.CreateApplicationDashboardRequest.application:type_name -> annotations.perms.Application
	36, // 22: api.v0alpha.ApplicationDashboards.application:type_name -> annotations.perms.Application
	5,  // 23: api.v0alpha.ApplicationDashboards.dashboard_summaries:type_name -> api.v0alpha.DashboardSummary
	31, // 24: api.v0alpha.ListApplicationsDashboardsResponse.application_dashboards:type_name -> api.v0alpha.ApplicationDashboards
	36, // 25: api.v0alpha.DeleteApplicationDashboardRequest.application:type_name -> annotations.perms.Application
	38, // 26: api.v0alpha.TimeSpan.Range.start:type_name -> google.protobuf.Timestamp
	38, // 27: api.v0alpha.TimeSpan.Range.end:type_name -> google.protobuf.Timestamp
	13, // 28: api.v0alpha.Dashboards.CreateDashboard:input_type -> api.v0alpha.CreateDashboardRequest
	12, // 29: api.v0alpha.Dashboards.GetDashboard:input_type -> api.v0alpha.GetDashboardRequest
	6,  // 30: api.v0alpha.Dashboards.GetDefaultDashboard:input_type -> api.v0alpha.GetDefaultDashboardRequest
	3,  // 31: api.v0alpha.Dashboards.ListDashboards:input_type -> api.v0alpha.ListDashboardsRequest
	8,  // 32: api.v0alpha.Dashboards.ListProductTypes:input_type -> api.v0alpha.ListProductTypesRequest
	11, // 33: api.v0alpha.Dashboards.DeleteDashboard:input_type -> api.v0alpha.DeleteDashboardRequest
	7,  // 34: api.v0alpha.Dashboards.SetDefaultDashboard:input_type -> api.v0alpha.SetDefaultDashboardRequest
	22, // 35: api.v0alpha.Dashboards.UpdateDashboard:input_type -> api.v0alpha.UpdateDashboardRequest
	23, // 36: api.v0alpha.Dashboards.UpdateDashboardTitleAndDescription:input_type -> api.v0alpha.UpdateDashboardTitleAndDescriptionRequest
	25, // 37: api.v0alpha.Dashboards.UpdateDashboardView:input_type -> api.v0alpha.UpdateDashboardViewRequest
	24, // 38: api.v0alpha.Dashboards.UpdateDashboardLayout:input_type -> api.v0alpha.UpdateDashboardLayoutRequest
	1,  // 39: api.v0alpha.Dashboards.PublishDashboard:input_type -> api.v0alpha.PublishDashboardRequest
	28, // 40: api.v0alpha.Dashboards.CreateApplicationDashboard:input_type -> api.v0alpha.CreateApplicationDashboardRequest
	30, // 41: api.v0alpha.Dashboards.ListApplicationsDashboards:input_type -> api.v0alpha.ListApplicationsDashboardsRequest
	33, // 42: api.v0alpha.Dashboards.DeleteApplicationDashboard:input_type -> api.v0alpha.DeleteApplicationDashboardRequest
	14, // 43: api.v0alpha.Dashboards.CreateDashboard:output_type -> api.v0alpha.CreateDashboardResponse
	18, // 44: api.v0alpha.Dashboards.GetDashboard:output_type -> api.v0alpha.Dashboard
	18, // 45: api.v0alpha.Dashboards.GetDefaultDashboard:output_type -> api.v0alpha.Dashboard
	4,  // 46: api.v0alpha.Dashboards.ListDashboards:output_type -> api.v0alpha.ListDashboardsResponse
	9,  // 47: api.v0alpha.Dashboards.ListProductTypes:output_type -> api.v0alpha.ListProductTypesResult
	39, // 48: api.v0alpha.Dashboards.DeleteDashboard:output_type -> google.protobuf.Empty
	39, // 49: api.v0alpha.Dashboards.SetDefaultDashboard:output_type -> google.protobuf.Empty
	39, // 50: api.v0alpha.Dashboards.UpdateDashboard:output_type -> google.protobuf.Empty
	39, // 51: api.v0alpha.Dashboards.UpdateDashboardTitleAndDescription:output_type -> google.protobuf.Empty
	39, // 52: api.v0alpha.Dashboards.UpdateDashboardView:output_type -> google.protobuf.Empty
	39, // 53: api.v0alpha.Dashboards.UpdateDashboardLayout:output_type -> google.protobuf.Empty
	2,  // 54: api.v0alpha.Dashboards.PublishDashboard:output_type -> api.v0alpha.PublishDashboardResponse
	29, // 55: api.v0alpha.Dashboards.CreateApplicationDashboard:output_type -> api.v0alpha.CreateApplicationDashboardResponse
	32, // 56: api.v0alpha.Dashboards.ListApplicationsDashboards:output_type -> api.v0alpha.ListApplicationsDashboardsResponse
	34, // 57: api.v0alpha.Dashboards.DeleteApplicationDashboard:output_type -> api.v0alpha.DeleteApplicationDashboardResponse
	43, // [43:58] is the sub-list for method output_type
	28, // [28:43] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_api_v0alpha_dashboards_proto_init() }
func file_api_v0alpha_dashboards_proto_init() {
	if File_api_v0alpha_dashboards_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v0alpha_dashboards_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PublishDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PublishDashboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListDashboardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ListDashboardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DashboardSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetDefaultDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*SetDefaultDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ListProductTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ListProductTypesResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ProductType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CreateDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CreateDashboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*DashboardLayout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*DashboardPanel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*PanelSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*Dashboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*DashboardType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*HistoricConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*RealTimeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDashboardTitleAndDescriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDashboardLayoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDashboardViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*DashboardView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*TimeSpan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*CreateApplicationDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*CreateApplicationDashboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*ListApplicationsDashboardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*ApplicationDashboards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*ListApplicationsDashboardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteApplicationDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteApplicationDashboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_dashboards_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*TimeSpan_Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v0alpha_dashboards_proto_msgTypes[16].OneofWrappers = []any{
		(*PanelSource_InsightId)(nil),
		(*PanelSource_LegacyInsightId)(nil),
		(*PanelSource_InsightResourceId)(nil),
	}
	file_api_v0alpha_dashboards_proto_msgTypes[18].OneofWrappers = []any{
		(*DashboardType_Historic)(nil),
		(*DashboardType_RealTime)(nil),
	}
	file_api_v0alpha_dashboards_proto_msgTypes[19].OneofWrappers = []any{
		(*HistoricConfig_TimeSpanSimple)(nil),
		(*HistoricConfig_TimeSpanRange)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v0alpha_dashboards_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v0alpha_dashboards_proto_goTypes,
		DependencyIndexes: file_api_v0alpha_dashboards_proto_depIdxs,
		EnumInfos:         file_api_v0alpha_dashboards_proto_enumTypes,
		MessageInfos:      file_api_v0alpha_dashboards_proto_msgTypes,
	}.Build()
	File_api_v0alpha_dashboards_proto = out.File
	file_api_v0alpha_dashboards_proto_rawDesc = nil
	file_api_v0alpha_dashboards_proto_goTypes = nil
	file_api_v0alpha_dashboards_proto_depIdxs = nil
}
