// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v0alpha/vmds.proto

package v0alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Vmds_GetVoicemailMetadata_FullMethodName         = "/api.v0alpha.Vmds/GetVoicemailMetadata"
	Vmds_GetVoicemailMessageCount_FullMethodName     = "/api.v0alpha.Vmds/GetVoicemailMessageCount"
	Vmds_DeleteVoicemail_FullMethodName              = "/api.v0alpha.Vmds/DeleteVoicemail"
	Vmds_DeleteGreeting_FullMethodName               = "/api.v0alpha.Vmds/DeleteGreeting"
	Vmds_UpdateUploadName_FullMethodName             = "/api.v0alpha.Vmds/UpdateUploadName"
	Vmds_UpdateVoicemailFlagRead_FullMethodName      = "/api.v0alpha.Vmds/UpdateVoicemailFlagRead"
	Vmds_DownloadMessage_FullMethodName              = "/api.v0alpha.Vmds/DownloadMessage"
	Vmds_DownloadMessages_FullMethodName             = "/api.v0alpha.Vmds/DownloadMessages"
	Vmds_DownloadGreetingForExtension_FullMethodName = "/api.v0alpha.Vmds/DownloadGreetingForExtension"
	Vmds_DownloadGreeting_FullMethodName             = "/api.v0alpha.Vmds/DownloadGreeting"
	Vmds_GetUploadGreetingUrl_FullMethodName         = "/api.v0alpha.Vmds/GetUploadGreetingUrl"
	Vmds_ProcessGreetingUpload_FullMethodName        = "/api.v0alpha.Vmds/ProcessGreetingUpload"
	Vmds_UpdateGreetingForExtension_FullMethodName   = "/api.v0alpha.Vmds/UpdateGreetingForExtension"
	Vmds_ListAvailableGreetings_FullMethodName       = "/api.v0alpha.Vmds/ListAvailableGreetings"
)

// VmdsClient is the client API for Vmds service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VmdsClient interface {
	GetVoicemailMetadata(ctx context.Context, in *GetVoicemailMetadataReq, opts ...grpc.CallOption) (Vmds_GetVoicemailMetadataClient, error)
	GetVoicemailMessageCount(ctx context.Context, in *GetVoicemailCountReq, opts ...grpc.CallOption) (*GetVoicemailCountRes, error)
	DeleteVoicemail(ctx context.Context, in *DeleteVoicemailReq, opts ...grpc.CallOption) (*DeleteVoicemailRes, error)
	DeleteGreeting(ctx context.Context, in *DeleteGreetingReq, opts ...grpc.CallOption) (*DeleteGreetingRes, error)
	UpdateUploadName(ctx context.Context, in *UpdateUploadNameReq, opts ...grpc.CallOption) (*UpdateUploadNameRes, error)
	UpdateVoicemailFlagRead(ctx context.Context, in *UpdateVoicemailFlagReadReq, opts ...grpc.CallOption) (*UpdateVoicemailFlagReadRes, error)
	DownloadMessage(ctx context.Context, in *DownloadMessageReq, opts ...grpc.CallOption) (*DownloadMessageRes, error)
	DownloadMessages(ctx context.Context, in *DownloadMessagesReq, opts ...grpc.CallOption) (*DownloadMessagesRes, error)
	DownloadGreetingForExtension(ctx context.Context, in *DownloadGreetingForExtensionReq, opts ...grpc.CallOption) (*DownloadGreetingForExtensionRes, error)
	DownloadGreeting(ctx context.Context, in *DownloadGreetingReq, opts ...grpc.CallOption) (*DownloadGreetingRes, error)
	GetUploadGreetingUrl(ctx context.Context, in *GetUploadGreetingUrlReq, opts ...grpc.CallOption) (*GetUploadGreetingUrlRes, error)
	ProcessGreetingUpload(ctx context.Context, in *ProcessGreetingUploadReq, opts ...grpc.CallOption) (*ProcessGreetingUploadRes, error)
	UpdateGreetingForExtension(ctx context.Context, in *UpdateGreetingForExtensionReq, opts ...grpc.CallOption) (*UpdateGreetingForExtensionRes, error)
	ListAvailableGreetings(ctx context.Context, in *ListAvailableGreetingsReq, opts ...grpc.CallOption) (*ListAvailableGreetingsRes, error)
}

type vmdsClient struct {
	cc grpc.ClientConnInterface
}

func NewVmdsClient(cc grpc.ClientConnInterface) VmdsClient {
	return &vmdsClient{cc}
}

func (c *vmdsClient) GetVoicemailMetadata(ctx context.Context, in *GetVoicemailMetadataReq, opts ...grpc.CallOption) (Vmds_GetVoicemailMetadataClient, error) {
	stream, err := c.cc.NewStream(ctx, &Vmds_ServiceDesc.Streams[0], Vmds_GetVoicemailMetadata_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &vmdsGetVoicemailMetadataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Vmds_GetVoicemailMetadataClient interface {
	Recv() (*GetVoicemailMetadataRes, error)
	grpc.ClientStream
}

type vmdsGetVoicemailMetadataClient struct {
	grpc.ClientStream
}

func (x *vmdsGetVoicemailMetadataClient) Recv() (*GetVoicemailMetadataRes, error) {
	m := new(GetVoicemailMetadataRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vmdsClient) GetVoicemailMessageCount(ctx context.Context, in *GetVoicemailCountReq, opts ...grpc.CallOption) (*GetVoicemailCountRes, error) {
	out := new(GetVoicemailCountRes)
	err := c.cc.Invoke(ctx, Vmds_GetVoicemailMessageCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmdsClient) DeleteVoicemail(ctx context.Context, in *DeleteVoicemailReq, opts ...grpc.CallOption) (*DeleteVoicemailRes, error) {
	out := new(DeleteVoicemailRes)
	err := c.cc.Invoke(ctx, Vmds_DeleteVoicemail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmdsClient) DeleteGreeting(ctx context.Context, in *DeleteGreetingReq, opts ...grpc.CallOption) (*DeleteGreetingRes, error) {
	out := new(DeleteGreetingRes)
	err := c.cc.Invoke(ctx, Vmds_DeleteGreeting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmdsClient) UpdateUploadName(ctx context.Context, in *UpdateUploadNameReq, opts ...grpc.CallOption) (*UpdateUploadNameRes, error) {
	out := new(UpdateUploadNameRes)
	err := c.cc.Invoke(ctx, Vmds_UpdateUploadName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmdsClient) UpdateVoicemailFlagRead(ctx context.Context, in *UpdateVoicemailFlagReadReq, opts ...grpc.CallOption) (*UpdateVoicemailFlagReadRes, error) {
	out := new(UpdateVoicemailFlagReadRes)
	err := c.cc.Invoke(ctx, Vmds_UpdateVoicemailFlagRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmdsClient) DownloadMessage(ctx context.Context, in *DownloadMessageReq, opts ...grpc.CallOption) (*DownloadMessageRes, error) {
	out := new(DownloadMessageRes)
	err := c.cc.Invoke(ctx, Vmds_DownloadMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmdsClient) DownloadMessages(ctx context.Context, in *DownloadMessagesReq, opts ...grpc.CallOption) (*DownloadMessagesRes, error) {
	out := new(DownloadMessagesRes)
	err := c.cc.Invoke(ctx, Vmds_DownloadMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmdsClient) DownloadGreetingForExtension(ctx context.Context, in *DownloadGreetingForExtensionReq, opts ...grpc.CallOption) (*DownloadGreetingForExtensionRes, error) {
	out := new(DownloadGreetingForExtensionRes)
	err := c.cc.Invoke(ctx, Vmds_DownloadGreetingForExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmdsClient) DownloadGreeting(ctx context.Context, in *DownloadGreetingReq, opts ...grpc.CallOption) (*DownloadGreetingRes, error) {
	out := new(DownloadGreetingRes)
	err := c.cc.Invoke(ctx, Vmds_DownloadGreeting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmdsClient) GetUploadGreetingUrl(ctx context.Context, in *GetUploadGreetingUrlReq, opts ...grpc.CallOption) (*GetUploadGreetingUrlRes, error) {
	out := new(GetUploadGreetingUrlRes)
	err := c.cc.Invoke(ctx, Vmds_GetUploadGreetingUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmdsClient) ProcessGreetingUpload(ctx context.Context, in *ProcessGreetingUploadReq, opts ...grpc.CallOption) (*ProcessGreetingUploadRes, error) {
	out := new(ProcessGreetingUploadRes)
	err := c.cc.Invoke(ctx, Vmds_ProcessGreetingUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmdsClient) UpdateGreetingForExtension(ctx context.Context, in *UpdateGreetingForExtensionReq, opts ...grpc.CallOption) (*UpdateGreetingForExtensionRes, error) {
	out := new(UpdateGreetingForExtensionRes)
	err := c.cc.Invoke(ctx, Vmds_UpdateGreetingForExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmdsClient) ListAvailableGreetings(ctx context.Context, in *ListAvailableGreetingsReq, opts ...grpc.CallOption) (*ListAvailableGreetingsRes, error) {
	out := new(ListAvailableGreetingsRes)
	err := c.cc.Invoke(ctx, Vmds_ListAvailableGreetings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VmdsServer is the server API for Vmds service.
// All implementations must embed UnimplementedVmdsServer
// for forward compatibility
type VmdsServer interface {
	GetVoicemailMetadata(*GetVoicemailMetadataReq, Vmds_GetVoicemailMetadataServer) error
	GetVoicemailMessageCount(context.Context, *GetVoicemailCountReq) (*GetVoicemailCountRes, error)
	DeleteVoicemail(context.Context, *DeleteVoicemailReq) (*DeleteVoicemailRes, error)
	DeleteGreeting(context.Context, *DeleteGreetingReq) (*DeleteGreetingRes, error)
	UpdateUploadName(context.Context, *UpdateUploadNameReq) (*UpdateUploadNameRes, error)
	UpdateVoicemailFlagRead(context.Context, *UpdateVoicemailFlagReadReq) (*UpdateVoicemailFlagReadRes, error)
	DownloadMessage(context.Context, *DownloadMessageReq) (*DownloadMessageRes, error)
	DownloadMessages(context.Context, *DownloadMessagesReq) (*DownloadMessagesRes, error)
	DownloadGreetingForExtension(context.Context, *DownloadGreetingForExtensionReq) (*DownloadGreetingForExtensionRes, error)
	DownloadGreeting(context.Context, *DownloadGreetingReq) (*DownloadGreetingRes, error)
	GetUploadGreetingUrl(context.Context, *GetUploadGreetingUrlReq) (*GetUploadGreetingUrlRes, error)
	ProcessGreetingUpload(context.Context, *ProcessGreetingUploadReq) (*ProcessGreetingUploadRes, error)
	UpdateGreetingForExtension(context.Context, *UpdateGreetingForExtensionReq) (*UpdateGreetingForExtensionRes, error)
	ListAvailableGreetings(context.Context, *ListAvailableGreetingsReq) (*ListAvailableGreetingsRes, error)
	mustEmbedUnimplementedVmdsServer()
}

// UnimplementedVmdsServer must be embedded to have forward compatible implementations.
type UnimplementedVmdsServer struct {
}

func (UnimplementedVmdsServer) GetVoicemailMetadata(*GetVoicemailMetadataReq, Vmds_GetVoicemailMetadataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVoicemailMetadata not implemented")
}
func (UnimplementedVmdsServer) GetVoicemailMessageCount(context.Context, *GetVoicemailCountReq) (*GetVoicemailCountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoicemailMessageCount not implemented")
}
func (UnimplementedVmdsServer) DeleteVoicemail(context.Context, *DeleteVoicemailReq) (*DeleteVoicemailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVoicemail not implemented")
}
func (UnimplementedVmdsServer) DeleteGreeting(context.Context, *DeleteGreetingReq) (*DeleteGreetingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGreeting not implemented")
}
func (UnimplementedVmdsServer) UpdateUploadName(context.Context, *UpdateUploadNameReq) (*UpdateUploadNameRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUploadName not implemented")
}
func (UnimplementedVmdsServer) UpdateVoicemailFlagRead(context.Context, *UpdateVoicemailFlagReadReq) (*UpdateVoicemailFlagReadRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVoicemailFlagRead not implemented")
}
func (UnimplementedVmdsServer) DownloadMessage(context.Context, *DownloadMessageReq) (*DownloadMessageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadMessage not implemented")
}
func (UnimplementedVmdsServer) DownloadMessages(context.Context, *DownloadMessagesReq) (*DownloadMessagesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadMessages not implemented")
}
func (UnimplementedVmdsServer) DownloadGreetingForExtension(context.Context, *DownloadGreetingForExtensionReq) (*DownloadGreetingForExtensionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadGreetingForExtension not implemented")
}
func (UnimplementedVmdsServer) DownloadGreeting(context.Context, *DownloadGreetingReq) (*DownloadGreetingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadGreeting not implemented")
}
func (UnimplementedVmdsServer) GetUploadGreetingUrl(context.Context, *GetUploadGreetingUrlReq) (*GetUploadGreetingUrlRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadGreetingUrl not implemented")
}
func (UnimplementedVmdsServer) ProcessGreetingUpload(context.Context, *ProcessGreetingUploadReq) (*ProcessGreetingUploadRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessGreetingUpload not implemented")
}
func (UnimplementedVmdsServer) UpdateGreetingForExtension(context.Context, *UpdateGreetingForExtensionReq) (*UpdateGreetingForExtensionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGreetingForExtension not implemented")
}
func (UnimplementedVmdsServer) ListAvailableGreetings(context.Context, *ListAvailableGreetingsReq) (*ListAvailableGreetingsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableGreetings not implemented")
}
func (UnimplementedVmdsServer) mustEmbedUnimplementedVmdsServer() {}

// UnsafeVmdsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VmdsServer will
// result in compilation errors.
type UnsafeVmdsServer interface {
	mustEmbedUnimplementedVmdsServer()
}

func RegisterVmdsServer(s grpc.ServiceRegistrar, srv VmdsServer) {
	s.RegisterService(&Vmds_ServiceDesc, srv)
}

func _Vmds_GetVoicemailMetadata_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetVoicemailMetadataReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VmdsServer).GetVoicemailMetadata(m, &vmdsGetVoicemailMetadataServer{stream})
}

type Vmds_GetVoicemailMetadataServer interface {
	Send(*GetVoicemailMetadataRes) error
	grpc.ServerStream
}

type vmdsGetVoicemailMetadataServer struct {
	grpc.ServerStream
}

func (x *vmdsGetVoicemailMetadataServer) Send(m *GetVoicemailMetadataRes) error {
	return x.ServerStream.SendMsg(m)
}

func _Vmds_GetVoicemailMessageCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoicemailCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmdsServer).GetVoicemailMessageCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vmds_GetVoicemailMessageCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmdsServer).GetVoicemailMessageCount(ctx, req.(*GetVoicemailCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vmds_DeleteVoicemail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVoicemailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmdsServer).DeleteVoicemail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vmds_DeleteVoicemail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmdsServer).DeleteVoicemail(ctx, req.(*DeleteVoicemailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vmds_DeleteGreeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGreetingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmdsServer).DeleteGreeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vmds_DeleteGreeting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmdsServer).DeleteGreeting(ctx, req.(*DeleteGreetingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vmds_UpdateUploadName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUploadNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmdsServer).UpdateUploadName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vmds_UpdateUploadName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmdsServer).UpdateUploadName(ctx, req.(*UpdateUploadNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vmds_UpdateVoicemailFlagRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVoicemailFlagReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmdsServer).UpdateVoicemailFlagRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vmds_UpdateVoicemailFlagRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmdsServer).UpdateVoicemailFlagRead(ctx, req.(*UpdateVoicemailFlagReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vmds_DownloadMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmdsServer).DownloadMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vmds_DownloadMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmdsServer).DownloadMessage(ctx, req.(*DownloadMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vmds_DownloadMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadMessagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmdsServer).DownloadMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vmds_DownloadMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmdsServer).DownloadMessages(ctx, req.(*DownloadMessagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vmds_DownloadGreetingForExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadGreetingForExtensionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmdsServer).DownloadGreetingForExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vmds_DownloadGreetingForExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmdsServer).DownloadGreetingForExtension(ctx, req.(*DownloadGreetingForExtensionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vmds_DownloadGreeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadGreetingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmdsServer).DownloadGreeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vmds_DownloadGreeting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmdsServer).DownloadGreeting(ctx, req.(*DownloadGreetingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vmds_GetUploadGreetingUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUploadGreetingUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmdsServer).GetUploadGreetingUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vmds_GetUploadGreetingUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmdsServer).GetUploadGreetingUrl(ctx, req.(*GetUploadGreetingUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vmds_ProcessGreetingUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessGreetingUploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmdsServer).ProcessGreetingUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vmds_ProcessGreetingUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmdsServer).ProcessGreetingUpload(ctx, req.(*ProcessGreetingUploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vmds_UpdateGreetingForExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGreetingForExtensionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmdsServer).UpdateGreetingForExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vmds_UpdateGreetingForExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmdsServer).UpdateGreetingForExtension(ctx, req.(*UpdateGreetingForExtensionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vmds_ListAvailableGreetings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvailableGreetingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmdsServer).ListAvailableGreetings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vmds_ListAvailableGreetings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmdsServer).ListAvailableGreetings(ctx, req.(*ListAvailableGreetingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Vmds_ServiceDesc is the grpc.ServiceDesc for Vmds service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vmds_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v0alpha.Vmds",
	HandlerType: (*VmdsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVoicemailMessageCount",
			Handler:    _Vmds_GetVoicemailMessageCount_Handler,
		},
		{
			MethodName: "DeleteVoicemail",
			Handler:    _Vmds_DeleteVoicemail_Handler,
		},
		{
			MethodName: "DeleteGreeting",
			Handler:    _Vmds_DeleteGreeting_Handler,
		},
		{
			MethodName: "UpdateUploadName",
			Handler:    _Vmds_UpdateUploadName_Handler,
		},
		{
			MethodName: "UpdateVoicemailFlagRead",
			Handler:    _Vmds_UpdateVoicemailFlagRead_Handler,
		},
		{
			MethodName: "DownloadMessage",
			Handler:    _Vmds_DownloadMessage_Handler,
		},
		{
			MethodName: "DownloadMessages",
			Handler:    _Vmds_DownloadMessages_Handler,
		},
		{
			MethodName: "DownloadGreetingForExtension",
			Handler:    _Vmds_DownloadGreetingForExtension_Handler,
		},
		{
			MethodName: "DownloadGreeting",
			Handler:    _Vmds_DownloadGreeting_Handler,
		},
		{
			MethodName: "GetUploadGreetingUrl",
			Handler:    _Vmds_GetUploadGreetingUrl_Handler,
		},
		{
			MethodName: "ProcessGreetingUpload",
			Handler:    _Vmds_ProcessGreetingUpload_Handler,
		},
		{
			MethodName: "UpdateGreetingForExtension",
			Handler:    _Vmds_UpdateGreetingForExtension_Handler,
		},
		{
			MethodName: "ListAvailableGreetings",
			Handler:    _Vmds_ListAvailableGreetings_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetVoicemailMetadata",
			Handler:       _Vmds_GetVoicemailMetadata_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v0alpha/vmds.proto",
}
