// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v0alpha/smsapi.proto

package v0alphaconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v0alpha "github.com/tcncloud/api-go/api/v0alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SmsApiName is the fully-qualified name of the SmsApi service.
	SmsApiName = "api.v0alpha.SmsApi"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SmsApiListSmsTemplatesProcedure is the fully-qualified name of the SmsApi's ListSmsTemplates RPC.
	SmsApiListSmsTemplatesProcedure = "/api.v0alpha.SmsApi/ListSmsTemplates"
	// SmsApiCreateSmsTemplateProcedure is the fully-qualified name of the SmsApi's CreateSmsTemplate
	// RPC.
	SmsApiCreateSmsTemplateProcedure = "/api.v0alpha.SmsApi/CreateSmsTemplate"
	// SmsApiUpdateSmsTemplateProcedure is the fully-qualified name of the SmsApi's UpdateSmsTemplate
	// RPC.
	SmsApiUpdateSmsTemplateProcedure = "/api.v0alpha.SmsApi/UpdateSmsTemplate"
	// SmsApiDeleteSmsTemplateProcedure is the fully-qualified name of the SmsApi's DeleteSmsTemplate
	// RPC.
	SmsApiDeleteSmsTemplateProcedure = "/api.v0alpha.SmsApi/DeleteSmsTemplate"
	// SmsApiGetSmsTemplateBySidProcedure is the fully-qualified name of the SmsApi's
	// GetSmsTemplateBySid RPC.
	SmsApiGetSmsTemplateBySidProcedure = "/api.v0alpha.SmsApi/GetSmsTemplateBySid"
	// SmsApiListSmsIntentTemplatesProcedure is the fully-qualified name of the SmsApi's
	// ListSmsIntentTemplates RPC.
	SmsApiListSmsIntentTemplatesProcedure = "/api.v0alpha.SmsApi/ListSmsIntentTemplates"
	// SmsApiCreateSmsIntentTemplateProcedure is the fully-qualified name of the SmsApi's
	// CreateSmsIntentTemplate RPC.
	SmsApiCreateSmsIntentTemplateProcedure = "/api.v0alpha.SmsApi/CreateSmsIntentTemplate"
	// SmsApiUpdateSmsIntentTemplateProcedure is the fully-qualified name of the SmsApi's
	// UpdateSmsIntentTemplate RPC.
	SmsApiUpdateSmsIntentTemplateProcedure = "/api.v0alpha.SmsApi/UpdateSmsIntentTemplate"
	// SmsApiDeleteSmsIntentTemplateProcedure is the fully-qualified name of the SmsApi's
	// DeleteSmsIntentTemplate RPC.
	SmsApiDeleteSmsIntentTemplateProcedure = "/api.v0alpha.SmsApi/DeleteSmsIntentTemplate"
	// SmsApiGetSmsIntentTemplateBySidProcedure is the fully-qualified name of the SmsApi's
	// GetSmsIntentTemplateBySid RPC.
	SmsApiGetSmsIntentTemplateBySidProcedure = "/api.v0alpha.SmsApi/GetSmsIntentTemplateBySid"
	// SmsApiListSmsSourceNumbersProcedure is the fully-qualified name of the SmsApi's
	// ListSmsSourceNumbers RPC.
	SmsApiListSmsSourceNumbersProcedure = "/api.v0alpha.SmsApi/ListSmsSourceNumbers"
	// SmsApiCreateSmsSourceNumberProcedure is the fully-qualified name of the SmsApi's
	// CreateSmsSourceNumber RPC.
	SmsApiCreateSmsSourceNumberProcedure = "/api.v0alpha.SmsApi/CreateSmsSourceNumber"
	// SmsApiUpdateSmsSourceNumberProcedure is the fully-qualified name of the SmsApi's
	// UpdateSmsSourceNumber RPC.
	SmsApiUpdateSmsSourceNumberProcedure = "/api.v0alpha.SmsApi/UpdateSmsSourceNumber"
	// SmsApiDeleteSmsSourceNumberProcedure is the fully-qualified name of the SmsApi's
	// DeleteSmsSourceNumber RPC.
	SmsApiDeleteSmsSourceNumberProcedure = "/api.v0alpha.SmsApi/DeleteSmsSourceNumber"
	// SmsApiGetSmsSourceNumberBySidProcedure is the fully-qualified name of the SmsApi's
	// GetSmsSourceNumberBySid RPC.
	SmsApiGetSmsSourceNumberBySidProcedure = "/api.v0alpha.SmsApi/GetSmsSourceNumberBySid"
	// SmsApiSendSmsNotificationProcedure is the fully-qualified name of the SmsApi's
	// SendSmsNotification RPC.
	SmsApiSendSmsNotificationProcedure = "/api.v0alpha.SmsApi/SendSmsNotification"
	// SmsApiListSmsGroupByFiltersProcedure is the fully-qualified name of the SmsApi's
	// ListSmsGroupByFilters RPC.
	SmsApiListSmsGroupByFiltersProcedure = "/api.v0alpha.SmsApi/ListSmsGroupByFilters"
	// SmsApiListSmsGroupsByGroupSidsProcedure is the fully-qualified name of the SmsApi's
	// ListSmsGroupsByGroupSids RPC.
	SmsApiListSmsGroupsByGroupSidsProcedure = "/api.v0alpha.SmsApi/ListSmsGroupsByGroupSids"
	// SmsApiListSmsTasksByGroupSidsProcedure is the fully-qualified name of the SmsApi's
	// ListSmsTasksByGroupSids RPC.
	SmsApiListSmsTasksByGroupSidsProcedure = "/api.v0alpha.SmsApi/ListSmsTasksByGroupSids"
	// SmsApiListSmsGroupByFiltersForAuditProcedure is the fully-qualified name of the SmsApi's
	// ListSmsGroupByFiltersForAudit RPC.
	SmsApiListSmsGroupByFiltersForAuditProcedure = "/api.v0alpha.SmsApi/ListSmsGroupByFiltersForAudit"
	// SmsApiListSmsGroupsByGroupSidsForAuditProcedure is the fully-qualified name of the SmsApi's
	// ListSmsGroupsByGroupSidsForAudit RPC.
	SmsApiListSmsGroupsByGroupSidsForAuditProcedure = "/api.v0alpha.SmsApi/ListSmsGroupsByGroupSidsForAudit"
	// SmsApiListSmsTasksByGroupSidsForAuditProcedure is the fully-qualified name of the SmsApi's
	// ListSmsTasksByGroupSidsForAudit RPC.
	SmsApiListSmsTasksByGroupSidsForAuditProcedure = "/api.v0alpha.SmsApi/ListSmsTasksByGroupSidsForAudit"
	// SmsApiListSmsTasksWithDetailedStatusProcedure is the fully-qualified name of the SmsApi's
	// ListSmsTasksWithDetailedStatus RPC.
	SmsApiListSmsTasksWithDetailedStatusProcedure = "/api.v0alpha.SmsApi/ListSmsTasksWithDetailedStatus"
	// SmsApiUpdateSmsGroupStatusProcedure is the fully-qualified name of the SmsApi's
	// UpdateSmsGroupStatus RPC.
	SmsApiUpdateSmsGroupStatusProcedure = "/api.v0alpha.SmsApi/UpdateSmsGroupStatus"
	// SmsApiUpdateSmsGroupSendsPerMinuteProcedure is the fully-qualified name of the SmsApi's
	// UpdateSmsGroupSendsPerMinute RPC.
	SmsApiUpdateSmsGroupSendsPerMinuteProcedure = "/api.v0alpha.SmsApi/UpdateSmsGroupSendsPerMinute"
	// SmsApiUpdateSmsGroupScheduleTimesProcedure is the fully-qualified name of the SmsApi's
	// UpdateSmsGroupScheduleTimes RPC.
	SmsApiUpdateSmsGroupScheduleTimesProcedure = "/api.v0alpha.SmsApi/UpdateSmsGroupScheduleTimes"
	// SmsApiScheduleSmsProcedure is the fully-qualified name of the SmsApi's ScheduleSms RPC.
	SmsApiScheduleSmsProcedure = "/api.v0alpha.SmsApi/ScheduleSms"
	// SmsApiResendUnconnectedSmsProcedure is the fully-qualified name of the SmsApi's
	// ResendUnconnectedSms RPC.
	SmsApiResendUnconnectedSmsProcedure = "/api.v0alpha.SmsApi/ResendUnconnectedSms"
	// SmsApiSmsActivitySearchProcedure is the fully-qualified name of the SmsApi's SmsActivitySearch
	// RPC.
	SmsApiSmsActivitySearchProcedure = "/api.v0alpha.SmsApi/SmsActivitySearch"
	// SmsApiCreateInboundSmsTemplateProcedure is the fully-qualified name of the SmsApi's
	// CreateInboundSmsTemplate RPC.
	SmsApiCreateInboundSmsTemplateProcedure = "/api.v0alpha.SmsApi/CreateInboundSmsTemplate"
	// SmsApiUpdateInboundSmsTemplateProcedure is the fully-qualified name of the SmsApi's
	// UpdateInboundSmsTemplate RPC.
	SmsApiUpdateInboundSmsTemplateProcedure = "/api.v0alpha.SmsApi/UpdateInboundSmsTemplate"
	// SmsApiDeleteInboundSmsTemplateProcedure is the fully-qualified name of the SmsApi's
	// DeleteInboundSmsTemplate RPC.
	SmsApiDeleteInboundSmsTemplateProcedure = "/api.v0alpha.SmsApi/DeleteInboundSmsTemplate"
	// SmsApiListInboundSmsTemplatesProcedure is the fully-qualified name of the SmsApi's
	// ListInboundSmsTemplates RPC.
	SmsApiListInboundSmsTemplatesProcedure = "/api.v0alpha.SmsApi/ListInboundSmsTemplates"
	// SmsApiGetInboundSmsTemplateByIdProcedure is the fully-qualified name of the SmsApi's
	// GetInboundSmsTemplateById RPC.
	SmsApiGetInboundSmsTemplateByIdProcedure = "/api.v0alpha.SmsApi/GetInboundSmsTemplateById"
	// SmsApiCreateInboundSmsGroupProcedure is the fully-qualified name of the SmsApi's
	// CreateInboundSmsGroup RPC.
	SmsApiCreateInboundSmsGroupProcedure = "/api.v0alpha.SmsApi/CreateInboundSmsGroup"
	// SmsApiUpdateInboundSmsGroupProcedure is the fully-qualified name of the SmsApi's
	// UpdateInboundSmsGroup RPC.
	SmsApiUpdateInboundSmsGroupProcedure = "/api.v0alpha.SmsApi/UpdateInboundSmsGroup"
	// SmsApiDeleteInboundSmsGroupProcedure is the fully-qualified name of the SmsApi's
	// DeleteInboundSmsGroup RPC.
	SmsApiDeleteInboundSmsGroupProcedure = "/api.v0alpha.SmsApi/DeleteInboundSmsGroup"
	// SmsApiListInboundSmsGroupsProcedure is the fully-qualified name of the SmsApi's
	// ListInboundSmsGroups RPC.
	SmsApiListInboundSmsGroupsProcedure = "/api.v0alpha.SmsApi/ListInboundSmsGroups"
	// SmsApiListActiveInboundSmsGroupsProcedure is the fully-qualified name of the SmsApi's
	// ListActiveInboundSmsGroups RPC.
	SmsApiListActiveInboundSmsGroupsProcedure = "/api.v0alpha.SmsApi/ListActiveInboundSmsGroups"
	// SmsApiListInboundSmsGroupByFiltersProcedure is the fully-qualified name of the SmsApi's
	// ListInboundSmsGroupByFilters RPC.
	SmsApiListInboundSmsGroupByFiltersProcedure = "/api.v0alpha.SmsApi/ListInboundSmsGroupByFilters"
	// SmsApiGetInboundSmsGroupByIdProcedure is the fully-qualified name of the SmsApi's
	// GetInboundSmsGroupById RPC.
	SmsApiGetInboundSmsGroupByIdProcedure = "/api.v0alpha.SmsApi/GetInboundSmsGroupById"
	// SmsApiListInboundSmsGroupsByGroupIdsProcedure is the fully-qualified name of the SmsApi's
	// ListInboundSmsGroupsByGroupIds RPC.
	SmsApiListInboundSmsGroupsByGroupIdsProcedure = "/api.v0alpha.SmsApi/ListInboundSmsGroupsByGroupIds"
	// SmsApiStopInboundSmsGroupProcedure is the fully-qualified name of the SmsApi's
	// StopInboundSmsGroup RPC.
	SmsApiStopInboundSmsGroupProcedure = "/api.v0alpha.SmsApi/StopInboundSmsGroup"
	// SmsApiScheduleInboundSmsProcedure is the fully-qualified name of the SmsApi's ScheduleInboundSms
	// RPC.
	SmsApiScheduleInboundSmsProcedure = "/api.v0alpha.SmsApi/ScheduleInboundSms"
	// SmsApiCreateSmsConversationProcedure is the fully-qualified name of the SmsApi's
	// CreateSmsConversation RPC.
	SmsApiCreateSmsConversationProcedure = "/api.v0alpha.SmsApi/CreateSmsConversation"
	// SmsApiUpdateSmsConversationProcedure is the fully-qualified name of the SmsApi's
	// UpdateSmsConversation RPC.
	SmsApiUpdateSmsConversationProcedure = "/api.v0alpha.SmsApi/UpdateSmsConversation"
	// SmsApiDeleteSmsConversationProcedure is the fully-qualified name of the SmsApi's
	// DeleteSmsConversation RPC.
	SmsApiDeleteSmsConversationProcedure = "/api.v0alpha.SmsApi/DeleteSmsConversation"
	// SmsApiListSmsConversationsProcedure is the fully-qualified name of the SmsApi's
	// ListSmsConversations RPC.
	SmsApiListSmsConversationsProcedure = "/api.v0alpha.SmsApi/ListSmsConversations"
	// SmsApiGetSmsConversationByIdProcedure is the fully-qualified name of the SmsApi's
	// GetSmsConversationById RPC.
	SmsApiGetSmsConversationByIdProcedure = "/api.v0alpha.SmsApi/GetSmsConversationById"
	// SmsApiGetSmsMessageProcedure is the fully-qualified name of the SmsApi's GetSmsMessage RPC.
	SmsApiGetSmsMessageProcedure = "/api.v0alpha.SmsApi/GetSmsMessage"
	// SmsApiCreateSmsConversationAuditProcedure is the fully-qualified name of the SmsApi's
	// CreateSmsConversationAudit RPC.
	SmsApiCreateSmsConversationAuditProcedure = "/api.v0alpha.SmsApi/CreateSmsConversationAudit"
	// SmsApiListSmsConversationAuditsProcedure is the fully-qualified name of the SmsApi's
	// ListSmsConversationAudits RPC.
	SmsApiListSmsConversationAuditsProcedure = "/api.v0alpha.SmsApi/ListSmsConversationAudits"
	// SmsApiGetSmsConversationAuditByIdProcedure is the fully-qualified name of the SmsApi's
	// GetSmsConversationAuditById RPC.
	SmsApiGetSmsConversationAuditByIdProcedure = "/api.v0alpha.SmsApi/GetSmsConversationAuditById"
	// SmsApiCreateSmsConversationAssignedAgentProcedure is the fully-qualified name of the SmsApi's
	// CreateSmsConversationAssignedAgent RPC.
	SmsApiCreateSmsConversationAssignedAgentProcedure = "/api.v0alpha.SmsApi/CreateSmsConversationAssignedAgent"
	// SmsApiListSmsConversationAssignedAgentsProcedure is the fully-qualified name of the SmsApi's
	// ListSmsConversationAssignedAgents RPC.
	SmsApiListSmsConversationAssignedAgentsProcedure = "/api.v0alpha.SmsApi/ListSmsConversationAssignedAgents"
	// SmsApiGetSmsConversationAssignedAgentByIdProcedure is the fully-qualified name of the SmsApi's
	// GetSmsConversationAssignedAgentById RPC.
	SmsApiGetSmsConversationAssignedAgentByIdProcedure = "/api.v0alpha.SmsApi/GetSmsConversationAssignedAgentById"
	// SmsApiListInboundSmsTasksByGroupIdsProcedure is the fully-qualified name of the SmsApi's
	// ListInboundSmsTasksByGroupIds RPC.
	SmsApiListInboundSmsTasksByGroupIdsProcedure = "/api.v0alpha.SmsApi/ListInboundSmsTasksByGroupIds"
	// SmsApiStopAllOutboundSmsGroupsProcedure is the fully-qualified name of the SmsApi's
	// StopAllOutboundSmsGroups RPC.
	SmsApiStopAllOutboundSmsGroupsProcedure = "/api.v0alpha.SmsApi/StopAllOutboundSmsGroups"
	// SmsApiStopAllInboundSmsGroupsProcedure is the fully-qualified name of the SmsApi's
	// StopAllInboundSmsGroups RPC.
	SmsApiStopAllInboundSmsGroupsProcedure = "/api.v0alpha.SmsApi/StopAllInboundSmsGroups"
)

// SmsApiClient is a client for the api.v0alpha.SmsApi service.
type SmsApiClient interface {
	// List Sms Templates  defined by ListSmsTemplatesReq message.
	// Gets all details belong to the clientsid
	// The method will return a stream of ListSmsTemplatesRes messages
	// containing SmsTemplates with SmsIntents
	// Required permissions: VIEW_SMS
	ListSmsTemplates(context.Context, *connect_go.Request[v0alpha.ListSmsTemplatesReq]) (*connect_go.Response[v0alpha.ListSmsTemplatesRes], error)
	// Create/Record a SmsTemplate defined by CreateSmsTemplateReq message.
	// The method will return a CreateSmsTemplateRes message that will
	// contain the newly created values of the sms_template_id
	// Required permissions: VIEW_SMS
	CreateSmsTemplate(context.Context, *connect_go.Request[v0alpha.CreateSmsTemplateReq]) (*connect_go.Response[v0alpha.CreateSmsTemplateRes], error)
	// Update a SmsTemplate defined by UpdateSmsTemplateReq message for
	// the specified sms_template_sid
	// will update the following
	// sms template fields:
	//
	//	MessageSid
	//	SmsTemplateIntentSid
	//
	// The method will return a UpdateSmsTemplateRes message with true or false .
	// Required permissions: VIEW_SMS
	UpdateSmsTemplate(context.Context, *connect_go.Request[v0alpha.UpdateSmsTemplateReq]) (*connect_go.Response[v0alpha.UpdateSmsTemplateRes], error)
	// Delete a SmsTemplate defined by DeleteSmsTemplateReq message for
	// the specified sms_template_id
	// The method will return a DeleteSmsTemplateRes message with true or false .
	// Required permissions: VIEW_SMS
	DeleteSmsTemplate(context.Context, *connect_go.Request[v0alpha.DeleteSmsTemplateReq]) (*connect_go.Response[v0alpha.DeleteSmsTemplateRes], error)
	// Gets an SmsTemplate defined by GetSmsTemplateBySidReq message for the specified
	// sms_template_sid.
	// The method will return a SmsTemplate group.
	// Required permissions: VIEW_SMS
	GetSmsTemplateBySid(context.Context, *connect_go.Request[v0alpha.GetSmsTemplateBySidReq]) (*connect_go.Response[v0alpha.GetSmsTemplateBySidRes], error)
	// List Sms IntentTemplates  defined by ListSmsIntentTemplatesReq message.
	// Gets all details belong to the clientsid
	// The method will return a stream of ListSmsIntentTemplatesRes messages
	// containing ActionKey, ActionDetails, ActionTriggers, ActionPriority
	// Required permissions: VIEW_SMS
	ListSmsIntentTemplates(context.Context, *connect_go.Request[v0alpha.ListSmsIntentTemplatesReq]) (*connect_go.Response[v0alpha.ListSmsIntentTemplatesRes], error)
	// Create/Record a SmsIntentTemplate defined by SmsIntentTemplate message.
	// The method will return a CreateSmsIntentTemplateRes message that will
	// contain the newly created values of the sms_intent_template_sid
	// Required permissions: VIEW_SMS
	CreateSmsIntentTemplate(context.Context, *connect_go.Request[v0alpha.SmsIntentTemplate]) (*connect_go.Response[v0alpha.CreateSmsIntentTemplateRes], error)
	// Update a SmsIntentTemplate defined by SmsIntentTemplate message for
	// the specified sms_intent_template_sid
	// will update the following
	// sms intent template fields:
	//
	//	ActionKey
	//	ActionDetails
	//	ActionTrigger
	//
	// The method will return a UpdateSmsIntentTemplateRes message with true or false .
	// Required permissions: VIEW_SMS
	UpdateSmsIntentTemplate(context.Context, *connect_go.Request[v0alpha.SmsIntentTemplate]) (*connect_go.Response[v0alpha.UpdateSmsIntentTemplateRes], error)
	// Delete a SmsIntentTemplate defined by DeleteSmsIntentTemplateReq message for
	// the specified sms_intent_template_id
	// The method will return a DeleteSmsIntentTemplateRes message with true or false .
	// Required permissions: VIEW_SMS
	DeleteSmsIntentTemplate(context.Context, *connect_go.Request[v0alpha.DeleteSmsIntentTemplateReq]) (*connect_go.Response[v0alpha.DeleteSmsIntentTemplateRes], error)
	// Gets an SmsIntentTemplate group defined by GetSmsIntentTemplateBySidReq message for the specified
	// sms_intent_template_sid.
	// The method will return a SmsIntentTemplate group.
	// Required permissions: VIEW_SMS
	GetSmsIntentTemplateBySid(context.Context, *connect_go.Request[v0alpha.GetSmsIntentTemplateBySidReq]) (*connect_go.Response[v0alpha.SmsIntentTemplate], error)
	// List Sms SourceNumbers  defined by ListSmsSourceNumbersReq message.
	// Gets all source numbers belong to the clientsid
	// The method will return a stream of ListSmsSourceNumbersRes messages
	// containing providername, providertype
	// Required permissions: VIEW_SMS
	ListSmsSourceNumbers(context.Context, *connect_go.Request[v0alpha.ListSmsSourceNumbersReq]) (*connect_go.Response[v0alpha.ListSmsSourceNumbersRes], error)
	// Create/Record a SmsSourceNumber defined by CreateSmsSourceNumberReq message.
	// The method will return a CreateSmsSourceNumberRes message that will
	// contain the newly created values of the sms_number_id
	// Required permissions: VIEW_SMS
	CreateSmsSourceNumber(context.Context, *connect_go.Request[v0alpha.CreateSmsSourceNumberReq]) (*connect_go.Response[v0alpha.CreateSmsSourceNumberRes], error)
	// Update a SmsSourceNumber defined by UpdateSmsSourceNumberReq message for
	// the specified sms_number_sid
	// will update the following
	// sms number fields:
	//
	//	CountrySid
	//	ProviderName
	//	NumberType
	//
	// The method will return a UpdateSmsSourceNumberRes message with true or false .
	// Required permissions: VIEW_SMS
	UpdateSmsSourceNumber(context.Context, *connect_go.Request[v0alpha.UpdateSmsSourceNumberReq]) (*connect_go.Response[v0alpha.UpdateSmsSourceNumberRes], error)
	// Delete a SmsSourceNumber defined by DeleteSmsSourceNumberReq message for
	// the specified sms_number_id
	// The method will return a DeleteSmsSourceNumberRes message with true or false .
	// Required permissions: VIEW_SMS
	DeleteSmsSourceNumber(context.Context, *connect_go.Request[v0alpha.DeleteSmsSourceNumberReq]) (*connect_go.Response[v0alpha.DeleteSmsSourceNumberRes], error)
	// get sms source number for the particular sid
	// Gets an SmsSource Number defined by GetSmsSourceNumberBySidReq message for the specified
	// sms_number_sid.
	// The method will return a SmsNumbers group.
	// Required permissions: VIEW_SMS
	GetSmsSourceNumberBySid(context.Context, *connect_go.Request[v0alpha.GetSmsSourceNumberBySidReq]) (*connect_go.Response[v0alpha.SmsNumbers], error)
	// Send sms notification defined by SendSmsNotificationReq message for the specified
	// message and array of phone num.
	// The method will return a stream of SendSmsNotificationRes messages
	// containing result true/false after notified by sms for the client.
	// Required permissions:
	//
	//	VIEW_SMS
	SendSmsNotification(context.Context, *connect_go.Request[v0alpha.SendSmsNotificationReq]) (*connect_go.Response[v0alpha.SendSmsNotificationRes], error)
	// List Sms Group defined by ListSmsGroupByFiltersReq message.
	// Gets all details belong to the clientsid  with filters
	// The method will return a stream of ListSmsGroupByFiltersRes messages
	// containing SmsGroup Info and SMSIntent
	// Required permissions: VIEW_SMS
	ListSmsGroupByFilters(context.Context, *connect_go.Request[v0alpha.ListSmsGroupByFiltersReq]) (*connect_go.Response[v0alpha.ListSmsGroupByFiltersRes], error)
	// List Sms Group defined by ListSmsGroupsByGroupSidsReq message.
	// Gets all details for the array of group sids
	// The method will return a stream of ListSmsGroupsByGroupSidsRes messages
	// containing SmsGroup Info and SMSIntent
	// Required permissions: VIEW_SMS
	ListSmsGroupsByGroupSids(context.Context, *connect_go.Request[v0alpha.ListSmsGroupsByGroupSidsReq]) (*connect_go.Response[v0alpha.ListSmsGroupsByGroupSidsRes], error)
	// List Sms Task  defined by ListSmsTasksByGroupSidsReq message.
	// Gets all details for the array of group sids
	// The method will return a stream of ListSmsTasksByGroupSidsRes messages
	// containing delivery status, msg_time, cost
	// belonging to the smsgroup.
	// Required permissions: VIEW_SMS
	ListSmsTasksByGroupSids(context.Context, *connect_go.Request[v0alpha.ListSmsTasksByGroupSidsReq]) (*connect_go.Response[v0alpha.ListSmsTasksByGroupSidsRes], error)
	// List Sms Group defined by ListSmsGroupByFiltersReq message.
	// Gets all details belong to the owner path with filters for audit
	// The method will return a stream of ListSmsGroupByFiltersRes messages
	// containing SmsGroup Info and SMSIntent
	// Required permissions: VIEW_SMS
	ListSmsGroupByFiltersForAudit(context.Context, *connect_go.Request[v0alpha.ListSmsGroupByFiltersReq]) (*connect_go.Response[v0alpha.ListSmsGroupByFiltersRes], error)
	// List Sms Group defined by ListSmsGroupsByGroupSidsReq message.
	// Gets all details for the array of group sids for audit
	// The method will return a stream of ListSmsGroupsByGroupSidsRes messages
	// containing SmsGroup Info and SMSIntent
	// Required permissions: VIEW_SMS
	ListSmsGroupsByGroupSidsForAudit(context.Context, *connect_go.Request[v0alpha.ListSmsGroupsByGroupSidsReq]) (*connect_go.Response[v0alpha.ListSmsGroupsByGroupSidsRes], error)
	// List Sms Task  defined by ListSmsTasksByGroupSidsReq message.
	// Gets all details for the array of group sids for audit
	// The method will return a stream of ListSmsTasksByGroupSidsRes messages
	// containing delivery status, msg_time, cost
	// belonging to the smsgroup.
	// Required permissions: VIEW_SMS
	ListSmsTasksByGroupSidsForAudit(context.Context, *connect_go.Request[v0alpha.ListSmsTasksByGroupSidsReq]) (*connect_go.Response[v0alpha.ListSmsTasksByGroupSidsRes], error)
	// List Sms Task  defined by ListSmsTasksWithDetailedStatusReq message.
	// Gets all details for the specified sms group sid.
	// The method will return a stream of ListSmsTasksWithDetailedStatusRes messages
	// containing delivery status, msg_time, cost
	// belonging to the smsgroup.
	// Required permissions: VIEW_SMS
	ListSmsTasksWithDetailedStatus(context.Context, *connect_go.Request[v0alpha.ListSmsTasksWithDetailedStatusReq]) (*connect_go.Response[v0alpha.ListSmsTasksWithDetailedStatusRes], error)
	// Update the Scheduled Sms group defined by SmsGroupInfo message for the specified
	// paused/unpaused/cancel status
	// The method will return a UpdateSmsGroupRes message with true or false .
	// Required permissions: EXECUTE_SEND_BROADCAST
	UpdateSmsGroupStatus(context.Context, *connect_go.Request[v0alpha.SmsGroupInfo]) (*connect_go.Response[v0alpha.UpdateSmsGroupRes], error)
	// Update the Scheduled Sms group defined by SmsGroupInfo message for the specified
	// pacing
	// The method will return a UpdateSmsGroupRes message with true or false .
	// Required permissions: EXECUTE_SEND_BROADCAST
	UpdateSmsGroupSendsPerMinute(context.Context, *connect_go.Request[v0alpha.SmsGroupInfo]) (*connect_go.Response[v0alpha.UpdateSmsGroupRes], error)
	// Update the Scheduled Sms group defined by SmsGroupInfo message for the specified
	// schedule_time
	// The method will return a UpdateSmsGroupRes message with true or false .
	// Required permissions: EXECUTE_SEND_BROADCAST
	UpdateSmsGroupScheduleTimes(context.Context, *connect_go.Request[v0alpha.SmsGroupInfo]) (*connect_go.Response[v0alpha.UpdateSmsGroupRes], error)
	// Schedule Sms group defined by ScheduleSmsReq message for the specified
	// sms_template_id with initialpace, sourcenumber, contactgroupsid
	// The method will return a Sms group.
	// Required permissions: EXECUTE_SEND_BROADCAST
	ScheduleSms(context.Context, *connect_go.Request[v0alpha.ScheduleSmsReq]) (*connect_go.Response[v0alpha.ScheduleSmsRes], error)
	// Re-Schedule Sms group defined by ResendUnconnectedSmsReq message for the specified
	// sms_group_id and start/stop time.
	// The method will return a Sms group.
	// Required permissions: EXECUTE_SEND_BROADCAST
	ResendUnconnectedSms(context.Context, *connect_go.Request[v0alpha.ResendUnconnectedSmsReq]) (*connect_go.Response[v0alpha.ResendUnconnectedSmsRes], error)
	// Search SMS activity defined by SmsActivitySearchReq message for
	// any of the following filters:
	// ClientSid, ToNumber and FromNumber, FromDate, ToDate, SentOnly
	// The method will return the Sms Group with Sms Task & Sms Intent Info
	// Required permissions: VIEW_SMS
	SmsActivitySearch(context.Context, *connect_go.Request[v0alpha.SmsActivitySearchReq]) (*connect_go.Response[v0alpha.SmsActivitySearchRes], error)
	// Create/Record a InboundSmsTemplate defined by CreateInboundSmsTemplateReq message.
	// The method will return a CreateInboundSmsTemplateRes message that will
	// contain the newly created values of the inbound_sms_template_id
	// Required permissions: VIEW_SMS
	CreateInboundSmsTemplate(context.Context, *connect_go.Request[v0alpha.CreateInboundSmsTemplateReq]) (*connect_go.Response[v0alpha.CreateInboundSmsTemplateRes], error)
	// Update a InboundSmsTemplate defined by UpdateInboundSmsTemplateReq message for
	// the specified sms_template_id, region_id and org_id
	// will update the following
	// inbound sms template fields:
	//
	//	TemplateId
	//	SmsTemplateIntentId
	//
	// The method will return a UpdateInboundSmsTemplateRes message with true or false .
	// Required permissions: VIEW_SMS
	UpdateInboundSmsTemplate(context.Context, *connect_go.Request[v0alpha.UpdateInboundSmsTemplateReq]) (*connect_go.Response[v0alpha.UpdateInboundSmsTemplateRes], error)
	// Delete a InboundSmsTemplate defined by DeleteInboundSmsTemplateReq message for
	// the specified inbound_sms_template_id, region_id and org_id
	// The method will return a DeleteInboundSmsTemplateRes message with true or false .
	// Required permissions: VIEW_SMS
	DeleteInboundSmsTemplate(context.Context, *connect_go.Request[v0alpha.DeleteInboundSmsTemplateReq]) (*connect_go.Response[v0alpha.DeleteInboundSmsTemplateRes], error)
	// List InboundSmsTemplate  defined by ListInboundSmsTemplatesReq message.
	// Gets all of the Inbound sms template specified according to the filters.
	// The method will return a stream of ListInboundSmsTemplatesRes messages
	// containing InboundSmsTemplate, and SMSIntent
	// belonging to the inbound smstemplate.
	// Required permissions: VIEW_SMS
	ListInboundSmsTemplates(context.Context, *connect_go.Request[v0alpha.ListInboundSmsTemplatesReq]) (*connect_go.Response[v0alpha.ListInboundSmsTemplatesRes], error)
	// Gets an InboundSmsTemplate group defined by GetInboundSmsTemplateByIdReq message for the specified
	// inbound_sms_template_id, region_id and org_id.
	// The method will return a InboundTemplate group.
	// Required permissions: VIEW_SMS
	GetInboundSmsTemplateById(context.Context, *connect_go.Request[v0alpha.GetInboundSmsTemplateByIdReq]) (*connect_go.Response[v0alpha.GetInboundSmsTemplateByIdRes], error)
	// Create/Record a InboundSmsGroup defined by CreateInboundSmsGroupReq message.
	// The method will return a CreateInboundSmsGroupRes message that will
	// contain the newly created values of the inbound_sms_group_id
	// Required permissions: VIEW_SMS
	CreateInboundSmsGroup(context.Context, *connect_go.Request[v0alpha.CreateInboundSmsGroupReq]) (*connect_go.Response[v0alpha.CreateInboundSmsGroupRes], error)
	// Update a InboundSmsGroup defined by UpdateInboundSmsGroupReq message for
	// the specified sms_group_id, region_id and org_id
	// will update the following
	// inbound sms group fields:
	//
	//	TemplateId
	//	SmsNumber
	//
	// The method will return a UpdateInboundSmsGroupRes message with true or false .
	// Required permissions: VIEW_SMS
	UpdateInboundSmsGroup(context.Context, *connect_go.Request[v0alpha.UpdateInboundSmsGroupReq]) (*connect_go.Response[v0alpha.UpdateInboundSmsGroupRes], error)
	// Delete a InboundSmsGroup defined by DeleteInboundSmsGroupReq message for
	// the specified inbound_sms_group_id, region_id and org_id
	// The method will return a DeleteInboundSmsGroupRes message with true or false .
	// Required permissions: VIEW_SMS
	DeleteInboundSmsGroup(context.Context, *connect_go.Request[v0alpha.DeleteInboundSmsGroupReq]) (*connect_go.Response[v0alpha.DeleteInboundSmsGroupRes], error)
	// List InboundSmsGroup  defined by ListInboundSmsGroupsReq message.
	// Gets all of the Inbound sms group specified according to the filters.
	// The method will return a stream of ListInboundSmsGroupsRes messages
	// containing InboundSmsGroup, and SMSIntent
	// belonging to the inbound smsgroup.
	// Required permissions: VIEW_SMS
	ListInboundSmsGroups(context.Context, *connect_go.Request[v0alpha.ListInboundSmsGroupsReq]) (*connect_go.Response[v0alpha.ListInboundSmsGroupsRes], error)
	// List Active InboundSmsGroup  defined by ListActiveInboundSmsGroupsReq message.
	// Gets active Inbound sms group specified according to the filters.
	// The method will return a stream of ListActiveInboundSmsGroupsRes messages
	// containing InboundSmsGroup, and SMSIntent
	// belonging to the inbound smsgroup.
	// Required permissions: VIEW_SMS
	ListActiveInboundSmsGroups(context.Context, *connect_go.Request[v0alpha.ListActiveInboundSmsGroupsReq]) (*connect_go.Response[v0alpha.ListActiveInboundSmsGroupsRes], error)
	// List InboundSmsGroup  defined by InboundSmsGroupByFiltersReq message.
	// Gets all of the Inbound sms group specified according to the filters.
	// The method will return a stream of InboundSmsGroupByFiltersRes messages
	// containing InboundSmsGroup, and SMSIntent
	// belonging to the inbound smsgroup.
	// Required permissions: VIEW_SMS
	ListInboundSmsGroupByFilters(context.Context, *connect_go.Request[v0alpha.ListInboundSmsGroupByFiltersReq]) (*connect_go.Response[v0alpha.ListInboundSmsGroupByFiltersRes], error)
	// Gets an InboundSms group defined by GetInboundSmsGroupByIdReq message for the specified
	// inbound_sms_group_id, region_id and org_id.
	// The method will return a InboundSms group.
	// Required permissions: VIEW_SMS
	GetInboundSmsGroupById(context.Context, *connect_go.Request[v0alpha.GetInboundSmsGroupByIdReq]) (*connect_go.Response[v0alpha.GetInboundSmsGroupByIdRes], error)
	// List InboundSmsGroup  defined by ListInboundSmsGroupsByGroupIdsReq message.
	// Gets all of the Inbound sms group specified for the groupids array.
	// The method will return a stream of ListInboundSmsGroupsByGroupIdsRes messages
	// containing InboundSmsGroup, and SMSIntent
	// belonging to the inbound smsgroup.
	// Required permissions: VIEW_SMS
	ListInboundSmsGroupsByGroupIds(context.Context, *connect_go.Request[v0alpha.ListInboundSmsGroupsByGroupIdsReq]) (*connect_go.Response[v0alpha.ListInboundSmsGroupsByGroupIdsRes], error)
	// Stop an InboundSms group defined by StopInboundSmsGroupReq message for the specified
	// inbound_sms_group_id, region_id and org_id.
	// The method will mark the InboundSms group completed.
	// Required permissions: VIEW_SMS
	StopInboundSmsGroup(context.Context, *connect_go.Request[v0alpha.StopInboundSmsGroupReq]) (*connect_go.Response[v0alpha.StopInboundSmsGroupRes], error)
	// Schedule InboundSms group defined by ScheduleInboundSmsReq message for the specified
	// inbound_sms_template_id and sms_number_sid.
	// The method will return a InboundSms group.
	// Required permissions: EXECUTE_SEND_BROADCAST
	ScheduleInboundSms(context.Context, *connect_go.Request[v0alpha.ScheduleInboundSmsReq]) (*connect_go.Response[v0alpha.ScheduleInboundSmsRes], error)
	// Create/Record a SmsConversation defined by CreateSmsConversationReq message.
	// The method will return a CreateSmsConversationRes message that will
	// contain the newly created values of the sms_conversation_id
	// Required permissions: VIEW_SMS
	CreateSmsConversation(context.Context, *connect_go.Request[v0alpha.CreateSmsConversationReq]) (*connect_go.Response[v0alpha.CreateSmsConversationRes], error)
	// Update a SmsConversation defined by UpdateSmsConversationReq message for
	// the specified sms_conversation_id, region_id and org_id
	// will update the following
	// conversation fields:
	//
	//	InboundSmsGroupId
	//	SmsTaskParent
	//
	// The method will return a UpdateSmsConversationRes message with true or false .
	// Required permissions: VIEW_SMS
	UpdateSmsConversation(context.Context, *connect_go.Request[v0alpha.UpdateSmsConversationReq]) (*connect_go.Response[v0alpha.UpdateSmsConversationRes], error)
	// Delete a SmsConversation defined by DeleteSmsConversationReq message for
	// the specified sms_conversation_id, region_id and org_id
	// The method will return a DeleteSmsConversationRes message with true or false .
	// Required permissions: VIEW_SMS
	DeleteSmsConversation(context.Context, *connect_go.Request[v0alpha.DeleteSmsConversationReq]) (*connect_go.Response[v0alpha.DeleteSmsConversationRes], error)
	// List SmsConversation profiles defined by ListSmsConversationsReq message.
	// Gets all of the unique sms conversations.
	// The method will return a stream of ListSmsConversationsRes messages
	// containing InboundSmsGroupId, and SmsTaskParent
	// belonging to the smsconversations.
	// Required permissions: VIEW_SMS
	ListSmsConversations(context.Context, *connect_go.Request[v0alpha.ListSmsConversationsReq]) (*connect_go.Response[v0alpha.ListSmsConversationsRes], error)
	// Gets a SmsConversation defined by GetSmsConversationByIdReq message for the specified
	// sms_conversation_id, region_id and org_id.
	// The method will return a SmsConversation.
	// Required permissions: VIEW_SMS
	GetSmsConversationById(context.Context, *connect_go.Request[v0alpha.GetSmsConversationByIdReq]) (*connect_go.Response[v0alpha.GetSmsConversationByIdRes], error)
	// Gets SmsMessage defined by GetSmsMessageReq message for the specified
	// sms_message_sid.
	// The method will return a SmsMessage.
	// Required permissions: VIEW_SMS
	GetSmsMessage(context.Context, *connect_go.Request[v0alpha.GetSmsMessageReq]) (*connect_go.Response[v0alpha.GetSmsMessageRes], error)
	// Create/Record a SmsConversationAudit defined by SmsConversationAudit message.
	// The method will return a CreateSmsConversationAuditRes message that will
	// contain the newly created values of the sms_conversation_audit_id
	// Required permissions: VIEW_SMS
	CreateSmsConversationAudit(context.Context, *connect_go.Request[v0alpha.SmsConversationAudit]) (*connect_go.Response[v0alpha.CreateSmsConversationAuditRes], error)
	// List SmsConversationAudit profiles defined by ListSmsConversationAuditsReq message.
	// Gets all of the values for sms conversations id.
	// The method will return a stream of ListSmsConversationAuditsRes messages
	// containing SmsTaskSid, SmsReceivedReplySid and AgentId
	// belonging to the smsconversationsaudit.
	// Required permissions: VIEW_SMS
	ListSmsConversationAudits(context.Context, *connect_go.Request[v0alpha.ListSmsConversationAuditsReq]) (*connect_go.Response[v0alpha.ListSmsConversationAuditsRes], error)
	// Gets a SmsConversationAudit defined by GetSmsConversationAuditByIdReq message for the specified
	// sms_conversation_audit_id.
	// The method will return a SmsConversationAudit.
	// Required permissions: VIEW_SMS
	GetSmsConversationAuditById(context.Context, *connect_go.Request[v0alpha.GetSmsConversationAuditByIdReq]) (*connect_go.Response[v0alpha.GetSmsConversationAuditByIdRes], error)
	// Create/Record a SmsConversationAssignedAgent defined by SmsConversationAssignedAgent message.
	// The method will return a CreateSmsConversationAssignedAgentRes message with true or false
	// Required permissions: VIEW_SMS
	CreateSmsConversationAssignedAgent(context.Context, *connect_go.Request[v0alpha.SmsConversationAssignedAgent]) (*connect_go.Response[v0alpha.CreateSmsConversationAssignedAgentRes], error)
	// List SmsConversationAssignedAgent profiles defined by ListSmsConversationAssignedAgentsReq message.
	// Gets all of the values for sms conversations id.
	// The method will return a stream of ListSmsConversationAssignedAgentsRes messages
	// containing Assigned AgentId, Primary Agent, and Notiify
	// belonging to the smsconversationassignedagent.
	// Required permissions: VIEW_SMS
	ListSmsConversationAssignedAgents(context.Context, *connect_go.Request[v0alpha.ListSmsConversationAssignedAgentsReq]) (*connect_go.Response[v0alpha.ListSmsConversationAssignedAgentsRes], error)
	// Gets a SmsConversationAssignedAgent defined by GetSmsConversationAssignedAgentByIdReq message for the specified
	// conversation_id & assigned_agent_id
	// The method will return a SmsConversationAssignedAgent.
	// Required permissions: VIEW_SMS
	GetSmsConversationAssignedAgentById(context.Context, *connect_go.Request[v0alpha.GetSmsConversationAssignedAgentByIdReq]) (*connect_go.Response[v0alpha.GetSmsConversationAssignedAgentByIdRes], error)
	// List InboundSmsTasks defined by ListInboundSmsTasksByGroupIdsReq message.
	// Gets all of the Inbound sms tasks for the groupids.
	// The method will return a stream of ListInboundSmsTasksByGroupIdsRes messages
	// containing InboundSmsTask
	// belonging to the inbound smsgroup.
	// Required permissions: VIEW_SMS
	ListInboundSmsTasksByGroupIds(context.Context, *connect_go.Request[v0alpha.ListInboundSmsTasksByGroupIdsReq]) (*connect_go.Response[v0alpha.ListInboundSmsTasksByGroupIdsRes], error)
	// Stop all OutboundSms groups defined by StopAllOutboundSmsGroupsReq message for the specified
	// array of outbound groups and client_sid.
	// The method will mark the OutboundSms groups as completed.
	// Required permissions: VIEW_SMS
	StopAllOutboundSmsGroups(context.Context, *connect_go.Request[v0alpha.StopAllOutboundSmsGroupsReq]) (*connect_go.Response[v0alpha.StopAllOutboundSmsGroupsRes], error)
	// Stop all InboundSms groups defined by StopAllInboundSmsGroupsReq message for the specified
	// array of inbound groups, region_id and org_id.
	// The method will mark the InboundSms groups as completed.
	// Required permissions: VIEW_SMS
	StopAllInboundSmsGroups(context.Context, *connect_go.Request[v0alpha.StopAllInboundSmsGroupsReq]) (*connect_go.Response[v0alpha.StopAllInboundSmsGroupsRes], error)
}

// NewSmsApiClient constructs a client for the api.v0alpha.SmsApi service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSmsApiClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SmsApiClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &smsApiClient{
		listSmsTemplates: connect_go.NewClient[v0alpha.ListSmsTemplatesReq, v0alpha.ListSmsTemplatesRes](
			httpClient,
			baseURL+SmsApiListSmsTemplatesProcedure,
			opts...,
		),
		createSmsTemplate: connect_go.NewClient[v0alpha.CreateSmsTemplateReq, v0alpha.CreateSmsTemplateRes](
			httpClient,
			baseURL+SmsApiCreateSmsTemplateProcedure,
			opts...,
		),
		updateSmsTemplate: connect_go.NewClient[v0alpha.UpdateSmsTemplateReq, v0alpha.UpdateSmsTemplateRes](
			httpClient,
			baseURL+SmsApiUpdateSmsTemplateProcedure,
			opts...,
		),
		deleteSmsTemplate: connect_go.NewClient[v0alpha.DeleteSmsTemplateReq, v0alpha.DeleteSmsTemplateRes](
			httpClient,
			baseURL+SmsApiDeleteSmsTemplateProcedure,
			opts...,
		),
		getSmsTemplateBySid: connect_go.NewClient[v0alpha.GetSmsTemplateBySidReq, v0alpha.GetSmsTemplateBySidRes](
			httpClient,
			baseURL+SmsApiGetSmsTemplateBySidProcedure,
			opts...,
		),
		listSmsIntentTemplates: connect_go.NewClient[v0alpha.ListSmsIntentTemplatesReq, v0alpha.ListSmsIntentTemplatesRes](
			httpClient,
			baseURL+SmsApiListSmsIntentTemplatesProcedure,
			opts...,
		),
		createSmsIntentTemplate: connect_go.NewClient[v0alpha.SmsIntentTemplate, v0alpha.CreateSmsIntentTemplateRes](
			httpClient,
			baseURL+SmsApiCreateSmsIntentTemplateProcedure,
			opts...,
		),
		updateSmsIntentTemplate: connect_go.NewClient[v0alpha.SmsIntentTemplate, v0alpha.UpdateSmsIntentTemplateRes](
			httpClient,
			baseURL+SmsApiUpdateSmsIntentTemplateProcedure,
			opts...,
		),
		deleteSmsIntentTemplate: connect_go.NewClient[v0alpha.DeleteSmsIntentTemplateReq, v0alpha.DeleteSmsIntentTemplateRes](
			httpClient,
			baseURL+SmsApiDeleteSmsIntentTemplateProcedure,
			opts...,
		),
		getSmsIntentTemplateBySid: connect_go.NewClient[v0alpha.GetSmsIntentTemplateBySidReq, v0alpha.SmsIntentTemplate](
			httpClient,
			baseURL+SmsApiGetSmsIntentTemplateBySidProcedure,
			opts...,
		),
		listSmsSourceNumbers: connect_go.NewClient[v0alpha.ListSmsSourceNumbersReq, v0alpha.ListSmsSourceNumbersRes](
			httpClient,
			baseURL+SmsApiListSmsSourceNumbersProcedure,
			opts...,
		),
		createSmsSourceNumber: connect_go.NewClient[v0alpha.CreateSmsSourceNumberReq, v0alpha.CreateSmsSourceNumberRes](
			httpClient,
			baseURL+SmsApiCreateSmsSourceNumberProcedure,
			opts...,
		),
		updateSmsSourceNumber: connect_go.NewClient[v0alpha.UpdateSmsSourceNumberReq, v0alpha.UpdateSmsSourceNumberRes](
			httpClient,
			baseURL+SmsApiUpdateSmsSourceNumberProcedure,
			opts...,
		),
		deleteSmsSourceNumber: connect_go.NewClient[v0alpha.DeleteSmsSourceNumberReq, v0alpha.DeleteSmsSourceNumberRes](
			httpClient,
			baseURL+SmsApiDeleteSmsSourceNumberProcedure,
			opts...,
		),
		getSmsSourceNumberBySid: connect_go.NewClient[v0alpha.GetSmsSourceNumberBySidReq, v0alpha.SmsNumbers](
			httpClient,
			baseURL+SmsApiGetSmsSourceNumberBySidProcedure,
			opts...,
		),
		sendSmsNotification: connect_go.NewClient[v0alpha.SendSmsNotificationReq, v0alpha.SendSmsNotificationRes](
			httpClient,
			baseURL+SmsApiSendSmsNotificationProcedure,
			opts...,
		),
		listSmsGroupByFilters: connect_go.NewClient[v0alpha.ListSmsGroupByFiltersReq, v0alpha.ListSmsGroupByFiltersRes](
			httpClient,
			baseURL+SmsApiListSmsGroupByFiltersProcedure,
			opts...,
		),
		listSmsGroupsByGroupSids: connect_go.NewClient[v0alpha.ListSmsGroupsByGroupSidsReq, v0alpha.ListSmsGroupsByGroupSidsRes](
			httpClient,
			baseURL+SmsApiListSmsGroupsByGroupSidsProcedure,
			opts...,
		),
		listSmsTasksByGroupSids: connect_go.NewClient[v0alpha.ListSmsTasksByGroupSidsReq, v0alpha.ListSmsTasksByGroupSidsRes](
			httpClient,
			baseURL+SmsApiListSmsTasksByGroupSidsProcedure,
			opts...,
		),
		listSmsGroupByFiltersForAudit: connect_go.NewClient[v0alpha.ListSmsGroupByFiltersReq, v0alpha.ListSmsGroupByFiltersRes](
			httpClient,
			baseURL+SmsApiListSmsGroupByFiltersForAuditProcedure,
			opts...,
		),
		listSmsGroupsByGroupSidsForAudit: connect_go.NewClient[v0alpha.ListSmsGroupsByGroupSidsReq, v0alpha.ListSmsGroupsByGroupSidsRes](
			httpClient,
			baseURL+SmsApiListSmsGroupsByGroupSidsForAuditProcedure,
			opts...,
		),
		listSmsTasksByGroupSidsForAudit: connect_go.NewClient[v0alpha.ListSmsTasksByGroupSidsReq, v0alpha.ListSmsTasksByGroupSidsRes](
			httpClient,
			baseURL+SmsApiListSmsTasksByGroupSidsForAuditProcedure,
			opts...,
		),
		listSmsTasksWithDetailedStatus: connect_go.NewClient[v0alpha.ListSmsTasksWithDetailedStatusReq, v0alpha.ListSmsTasksWithDetailedStatusRes](
			httpClient,
			baseURL+SmsApiListSmsTasksWithDetailedStatusProcedure,
			opts...,
		),
		updateSmsGroupStatus: connect_go.NewClient[v0alpha.SmsGroupInfo, v0alpha.UpdateSmsGroupRes](
			httpClient,
			baseURL+SmsApiUpdateSmsGroupStatusProcedure,
			opts...,
		),
		updateSmsGroupSendsPerMinute: connect_go.NewClient[v0alpha.SmsGroupInfo, v0alpha.UpdateSmsGroupRes](
			httpClient,
			baseURL+SmsApiUpdateSmsGroupSendsPerMinuteProcedure,
			opts...,
		),
		updateSmsGroupScheduleTimes: connect_go.NewClient[v0alpha.SmsGroupInfo, v0alpha.UpdateSmsGroupRes](
			httpClient,
			baseURL+SmsApiUpdateSmsGroupScheduleTimesProcedure,
			opts...,
		),
		scheduleSms: connect_go.NewClient[v0alpha.ScheduleSmsReq, v0alpha.ScheduleSmsRes](
			httpClient,
			baseURL+SmsApiScheduleSmsProcedure,
			opts...,
		),
		resendUnconnectedSms: connect_go.NewClient[v0alpha.ResendUnconnectedSmsReq, v0alpha.ResendUnconnectedSmsRes](
			httpClient,
			baseURL+SmsApiResendUnconnectedSmsProcedure,
			opts...,
		),
		smsActivitySearch: connect_go.NewClient[v0alpha.SmsActivitySearchReq, v0alpha.SmsActivitySearchRes](
			httpClient,
			baseURL+SmsApiSmsActivitySearchProcedure,
			opts...,
		),
		createInboundSmsTemplate: connect_go.NewClient[v0alpha.CreateInboundSmsTemplateReq, v0alpha.CreateInboundSmsTemplateRes](
			httpClient,
			baseURL+SmsApiCreateInboundSmsTemplateProcedure,
			opts...,
		),
		updateInboundSmsTemplate: connect_go.NewClient[v0alpha.UpdateInboundSmsTemplateReq, v0alpha.UpdateInboundSmsTemplateRes](
			httpClient,
			baseURL+SmsApiUpdateInboundSmsTemplateProcedure,
			opts...,
		),
		deleteInboundSmsTemplate: connect_go.NewClient[v0alpha.DeleteInboundSmsTemplateReq, v0alpha.DeleteInboundSmsTemplateRes](
			httpClient,
			baseURL+SmsApiDeleteInboundSmsTemplateProcedure,
			opts...,
		),
		listInboundSmsTemplates: connect_go.NewClient[v0alpha.ListInboundSmsTemplatesReq, v0alpha.ListInboundSmsTemplatesRes](
			httpClient,
			baseURL+SmsApiListInboundSmsTemplatesProcedure,
			opts...,
		),
		getInboundSmsTemplateById: connect_go.NewClient[v0alpha.GetInboundSmsTemplateByIdReq, v0alpha.GetInboundSmsTemplateByIdRes](
			httpClient,
			baseURL+SmsApiGetInboundSmsTemplateByIdProcedure,
			opts...,
		),
		createInboundSmsGroup: connect_go.NewClient[v0alpha.CreateInboundSmsGroupReq, v0alpha.CreateInboundSmsGroupRes](
			httpClient,
			baseURL+SmsApiCreateInboundSmsGroupProcedure,
			opts...,
		),
		updateInboundSmsGroup: connect_go.NewClient[v0alpha.UpdateInboundSmsGroupReq, v0alpha.UpdateInboundSmsGroupRes](
			httpClient,
			baseURL+SmsApiUpdateInboundSmsGroupProcedure,
			opts...,
		),
		deleteInboundSmsGroup: connect_go.NewClient[v0alpha.DeleteInboundSmsGroupReq, v0alpha.DeleteInboundSmsGroupRes](
			httpClient,
			baseURL+SmsApiDeleteInboundSmsGroupProcedure,
			opts...,
		),
		listInboundSmsGroups: connect_go.NewClient[v0alpha.ListInboundSmsGroupsReq, v0alpha.ListInboundSmsGroupsRes](
			httpClient,
			baseURL+SmsApiListInboundSmsGroupsProcedure,
			opts...,
		),
		listActiveInboundSmsGroups: connect_go.NewClient[v0alpha.ListActiveInboundSmsGroupsReq, v0alpha.ListActiveInboundSmsGroupsRes](
			httpClient,
			baseURL+SmsApiListActiveInboundSmsGroupsProcedure,
			opts...,
		),
		listInboundSmsGroupByFilters: connect_go.NewClient[v0alpha.ListInboundSmsGroupByFiltersReq, v0alpha.ListInboundSmsGroupByFiltersRes](
			httpClient,
			baseURL+SmsApiListInboundSmsGroupByFiltersProcedure,
			opts...,
		),
		getInboundSmsGroupById: connect_go.NewClient[v0alpha.GetInboundSmsGroupByIdReq, v0alpha.GetInboundSmsGroupByIdRes](
			httpClient,
			baseURL+SmsApiGetInboundSmsGroupByIdProcedure,
			opts...,
		),
		listInboundSmsGroupsByGroupIds: connect_go.NewClient[v0alpha.ListInboundSmsGroupsByGroupIdsReq, v0alpha.ListInboundSmsGroupsByGroupIdsRes](
			httpClient,
			baseURL+SmsApiListInboundSmsGroupsByGroupIdsProcedure,
			opts...,
		),
		stopInboundSmsGroup: connect_go.NewClient[v0alpha.StopInboundSmsGroupReq, v0alpha.StopInboundSmsGroupRes](
			httpClient,
			baseURL+SmsApiStopInboundSmsGroupProcedure,
			opts...,
		),
		scheduleInboundSms: connect_go.NewClient[v0alpha.ScheduleInboundSmsReq, v0alpha.ScheduleInboundSmsRes](
			httpClient,
			baseURL+SmsApiScheduleInboundSmsProcedure,
			opts...,
		),
		createSmsConversation: connect_go.NewClient[v0alpha.CreateSmsConversationReq, v0alpha.CreateSmsConversationRes](
			httpClient,
			baseURL+SmsApiCreateSmsConversationProcedure,
			opts...,
		),
		updateSmsConversation: connect_go.NewClient[v0alpha.UpdateSmsConversationReq, v0alpha.UpdateSmsConversationRes](
			httpClient,
			baseURL+SmsApiUpdateSmsConversationProcedure,
			opts...,
		),
		deleteSmsConversation: connect_go.NewClient[v0alpha.DeleteSmsConversationReq, v0alpha.DeleteSmsConversationRes](
			httpClient,
			baseURL+SmsApiDeleteSmsConversationProcedure,
			opts...,
		),
		listSmsConversations: connect_go.NewClient[v0alpha.ListSmsConversationsReq, v0alpha.ListSmsConversationsRes](
			httpClient,
			baseURL+SmsApiListSmsConversationsProcedure,
			opts...,
		),
		getSmsConversationById: connect_go.NewClient[v0alpha.GetSmsConversationByIdReq, v0alpha.GetSmsConversationByIdRes](
			httpClient,
			baseURL+SmsApiGetSmsConversationByIdProcedure,
			opts...,
		),
		getSmsMessage: connect_go.NewClient[v0alpha.GetSmsMessageReq, v0alpha.GetSmsMessageRes](
			httpClient,
			baseURL+SmsApiGetSmsMessageProcedure,
			opts...,
		),
		createSmsConversationAudit: connect_go.NewClient[v0alpha.SmsConversationAudit, v0alpha.CreateSmsConversationAuditRes](
			httpClient,
			baseURL+SmsApiCreateSmsConversationAuditProcedure,
			opts...,
		),
		listSmsConversationAudits: connect_go.NewClient[v0alpha.ListSmsConversationAuditsReq, v0alpha.ListSmsConversationAuditsRes](
			httpClient,
			baseURL+SmsApiListSmsConversationAuditsProcedure,
			opts...,
		),
		getSmsConversationAuditById: connect_go.NewClient[v0alpha.GetSmsConversationAuditByIdReq, v0alpha.GetSmsConversationAuditByIdRes](
			httpClient,
			baseURL+SmsApiGetSmsConversationAuditByIdProcedure,
			opts...,
		),
		createSmsConversationAssignedAgent: connect_go.NewClient[v0alpha.SmsConversationAssignedAgent, v0alpha.CreateSmsConversationAssignedAgentRes](
			httpClient,
			baseURL+SmsApiCreateSmsConversationAssignedAgentProcedure,
			opts...,
		),
		listSmsConversationAssignedAgents: connect_go.NewClient[v0alpha.ListSmsConversationAssignedAgentsReq, v0alpha.ListSmsConversationAssignedAgentsRes](
			httpClient,
			baseURL+SmsApiListSmsConversationAssignedAgentsProcedure,
			opts...,
		),
		getSmsConversationAssignedAgentById: connect_go.NewClient[v0alpha.GetSmsConversationAssignedAgentByIdReq, v0alpha.GetSmsConversationAssignedAgentByIdRes](
			httpClient,
			baseURL+SmsApiGetSmsConversationAssignedAgentByIdProcedure,
			opts...,
		),
		listInboundSmsTasksByGroupIds: connect_go.NewClient[v0alpha.ListInboundSmsTasksByGroupIdsReq, v0alpha.ListInboundSmsTasksByGroupIdsRes](
			httpClient,
			baseURL+SmsApiListInboundSmsTasksByGroupIdsProcedure,
			opts...,
		),
		stopAllOutboundSmsGroups: connect_go.NewClient[v0alpha.StopAllOutboundSmsGroupsReq, v0alpha.StopAllOutboundSmsGroupsRes](
			httpClient,
			baseURL+SmsApiStopAllOutboundSmsGroupsProcedure,
			opts...,
		),
		stopAllInboundSmsGroups: connect_go.NewClient[v0alpha.StopAllInboundSmsGroupsReq, v0alpha.StopAllInboundSmsGroupsRes](
			httpClient,
			baseURL+SmsApiStopAllInboundSmsGroupsProcedure,
			opts...,
		),
	}
}

// smsApiClient implements SmsApiClient.
type smsApiClient struct {
	listSmsTemplates                    *connect_go.Client[v0alpha.ListSmsTemplatesReq, v0alpha.ListSmsTemplatesRes]
	createSmsTemplate                   *connect_go.Client[v0alpha.CreateSmsTemplateReq, v0alpha.CreateSmsTemplateRes]
	updateSmsTemplate                   *connect_go.Client[v0alpha.UpdateSmsTemplateReq, v0alpha.UpdateSmsTemplateRes]
	deleteSmsTemplate                   *connect_go.Client[v0alpha.DeleteSmsTemplateReq, v0alpha.DeleteSmsTemplateRes]
	getSmsTemplateBySid                 *connect_go.Client[v0alpha.GetSmsTemplateBySidReq, v0alpha.GetSmsTemplateBySidRes]
	listSmsIntentTemplates              *connect_go.Client[v0alpha.ListSmsIntentTemplatesReq, v0alpha.ListSmsIntentTemplatesRes]
	createSmsIntentTemplate             *connect_go.Client[v0alpha.SmsIntentTemplate, v0alpha.CreateSmsIntentTemplateRes]
	updateSmsIntentTemplate             *connect_go.Client[v0alpha.SmsIntentTemplate, v0alpha.UpdateSmsIntentTemplateRes]
	deleteSmsIntentTemplate             *connect_go.Client[v0alpha.DeleteSmsIntentTemplateReq, v0alpha.DeleteSmsIntentTemplateRes]
	getSmsIntentTemplateBySid           *connect_go.Client[v0alpha.GetSmsIntentTemplateBySidReq, v0alpha.SmsIntentTemplate]
	listSmsSourceNumbers                *connect_go.Client[v0alpha.ListSmsSourceNumbersReq, v0alpha.ListSmsSourceNumbersRes]
	createSmsSourceNumber               *connect_go.Client[v0alpha.CreateSmsSourceNumberReq, v0alpha.CreateSmsSourceNumberRes]
	updateSmsSourceNumber               *connect_go.Client[v0alpha.UpdateSmsSourceNumberReq, v0alpha.UpdateSmsSourceNumberRes]
	deleteSmsSourceNumber               *connect_go.Client[v0alpha.DeleteSmsSourceNumberReq, v0alpha.DeleteSmsSourceNumberRes]
	getSmsSourceNumberBySid             *connect_go.Client[v0alpha.GetSmsSourceNumberBySidReq, v0alpha.SmsNumbers]
	sendSmsNotification                 *connect_go.Client[v0alpha.SendSmsNotificationReq, v0alpha.SendSmsNotificationRes]
	listSmsGroupByFilters               *connect_go.Client[v0alpha.ListSmsGroupByFiltersReq, v0alpha.ListSmsGroupByFiltersRes]
	listSmsGroupsByGroupSids            *connect_go.Client[v0alpha.ListSmsGroupsByGroupSidsReq, v0alpha.ListSmsGroupsByGroupSidsRes]
	listSmsTasksByGroupSids             *connect_go.Client[v0alpha.ListSmsTasksByGroupSidsReq, v0alpha.ListSmsTasksByGroupSidsRes]
	listSmsGroupByFiltersForAudit       *connect_go.Client[v0alpha.ListSmsGroupByFiltersReq, v0alpha.ListSmsGroupByFiltersRes]
	listSmsGroupsByGroupSidsForAudit    *connect_go.Client[v0alpha.ListSmsGroupsByGroupSidsReq, v0alpha.ListSmsGroupsByGroupSidsRes]
	listSmsTasksByGroupSidsForAudit     *connect_go.Client[v0alpha.ListSmsTasksByGroupSidsReq, v0alpha.ListSmsTasksByGroupSidsRes]
	listSmsTasksWithDetailedStatus      *connect_go.Client[v0alpha.ListSmsTasksWithDetailedStatusReq, v0alpha.ListSmsTasksWithDetailedStatusRes]
	updateSmsGroupStatus                *connect_go.Client[v0alpha.SmsGroupInfo, v0alpha.UpdateSmsGroupRes]
	updateSmsGroupSendsPerMinute        *connect_go.Client[v0alpha.SmsGroupInfo, v0alpha.UpdateSmsGroupRes]
	updateSmsGroupScheduleTimes         *connect_go.Client[v0alpha.SmsGroupInfo, v0alpha.UpdateSmsGroupRes]
	scheduleSms                         *connect_go.Client[v0alpha.ScheduleSmsReq, v0alpha.ScheduleSmsRes]
	resendUnconnectedSms                *connect_go.Client[v0alpha.ResendUnconnectedSmsReq, v0alpha.ResendUnconnectedSmsRes]
	smsActivitySearch                   *connect_go.Client[v0alpha.SmsActivitySearchReq, v0alpha.SmsActivitySearchRes]
	createInboundSmsTemplate            *connect_go.Client[v0alpha.CreateInboundSmsTemplateReq, v0alpha.CreateInboundSmsTemplateRes]
	updateInboundSmsTemplate            *connect_go.Client[v0alpha.UpdateInboundSmsTemplateReq, v0alpha.UpdateInboundSmsTemplateRes]
	deleteInboundSmsTemplate            *connect_go.Client[v0alpha.DeleteInboundSmsTemplateReq, v0alpha.DeleteInboundSmsTemplateRes]
	listInboundSmsTemplates             *connect_go.Client[v0alpha.ListInboundSmsTemplatesReq, v0alpha.ListInboundSmsTemplatesRes]
	getInboundSmsTemplateById           *connect_go.Client[v0alpha.GetInboundSmsTemplateByIdReq, v0alpha.GetInboundSmsTemplateByIdRes]
	createInboundSmsGroup               *connect_go.Client[v0alpha.CreateInboundSmsGroupReq, v0alpha.CreateInboundSmsGroupRes]
	updateInboundSmsGroup               *connect_go.Client[v0alpha.UpdateInboundSmsGroupReq, v0alpha.UpdateInboundSmsGroupRes]
	deleteInboundSmsGroup               *connect_go.Client[v0alpha.DeleteInboundSmsGroupReq, v0alpha.DeleteInboundSmsGroupRes]
	listInboundSmsGroups                *connect_go.Client[v0alpha.ListInboundSmsGroupsReq, v0alpha.ListInboundSmsGroupsRes]
	listActiveInboundSmsGroups          *connect_go.Client[v0alpha.ListActiveInboundSmsGroupsReq, v0alpha.ListActiveInboundSmsGroupsRes]
	listInboundSmsGroupByFilters        *connect_go.Client[v0alpha.ListInboundSmsGroupByFiltersReq, v0alpha.ListInboundSmsGroupByFiltersRes]
	getInboundSmsGroupById              *connect_go.Client[v0alpha.GetInboundSmsGroupByIdReq, v0alpha.GetInboundSmsGroupByIdRes]
	listInboundSmsGroupsByGroupIds      *connect_go.Client[v0alpha.ListInboundSmsGroupsByGroupIdsReq, v0alpha.ListInboundSmsGroupsByGroupIdsRes]
	stopInboundSmsGroup                 *connect_go.Client[v0alpha.StopInboundSmsGroupReq, v0alpha.StopInboundSmsGroupRes]
	scheduleInboundSms                  *connect_go.Client[v0alpha.ScheduleInboundSmsReq, v0alpha.ScheduleInboundSmsRes]
	createSmsConversation               *connect_go.Client[v0alpha.CreateSmsConversationReq, v0alpha.CreateSmsConversationRes]
	updateSmsConversation               *connect_go.Client[v0alpha.UpdateSmsConversationReq, v0alpha.UpdateSmsConversationRes]
	deleteSmsConversation               *connect_go.Client[v0alpha.DeleteSmsConversationReq, v0alpha.DeleteSmsConversationRes]
	listSmsConversations                *connect_go.Client[v0alpha.ListSmsConversationsReq, v0alpha.ListSmsConversationsRes]
	getSmsConversationById              *connect_go.Client[v0alpha.GetSmsConversationByIdReq, v0alpha.GetSmsConversationByIdRes]
	getSmsMessage                       *connect_go.Client[v0alpha.GetSmsMessageReq, v0alpha.GetSmsMessageRes]
	createSmsConversationAudit          *connect_go.Client[v0alpha.SmsConversationAudit, v0alpha.CreateSmsConversationAuditRes]
	listSmsConversationAudits           *connect_go.Client[v0alpha.ListSmsConversationAuditsReq, v0alpha.ListSmsConversationAuditsRes]
	getSmsConversationAuditById         *connect_go.Client[v0alpha.GetSmsConversationAuditByIdReq, v0alpha.GetSmsConversationAuditByIdRes]
	createSmsConversationAssignedAgent  *connect_go.Client[v0alpha.SmsConversationAssignedAgent, v0alpha.CreateSmsConversationAssignedAgentRes]
	listSmsConversationAssignedAgents   *connect_go.Client[v0alpha.ListSmsConversationAssignedAgentsReq, v0alpha.ListSmsConversationAssignedAgentsRes]
	getSmsConversationAssignedAgentById *connect_go.Client[v0alpha.GetSmsConversationAssignedAgentByIdReq, v0alpha.GetSmsConversationAssignedAgentByIdRes]
	listInboundSmsTasksByGroupIds       *connect_go.Client[v0alpha.ListInboundSmsTasksByGroupIdsReq, v0alpha.ListInboundSmsTasksByGroupIdsRes]
	stopAllOutboundSmsGroups            *connect_go.Client[v0alpha.StopAllOutboundSmsGroupsReq, v0alpha.StopAllOutboundSmsGroupsRes]
	stopAllInboundSmsGroups             *connect_go.Client[v0alpha.StopAllInboundSmsGroupsReq, v0alpha.StopAllInboundSmsGroupsRes]
}

// ListSmsTemplates calls api.v0alpha.SmsApi.ListSmsTemplates.
func (c *smsApiClient) ListSmsTemplates(ctx context.Context, req *connect_go.Request[v0alpha.ListSmsTemplatesReq]) (*connect_go.Response[v0alpha.ListSmsTemplatesRes], error) {
	return c.listSmsTemplates.CallUnary(ctx, req)
}

// CreateSmsTemplate calls api.v0alpha.SmsApi.CreateSmsTemplate.
func (c *smsApiClient) CreateSmsTemplate(ctx context.Context, req *connect_go.Request[v0alpha.CreateSmsTemplateReq]) (*connect_go.Response[v0alpha.CreateSmsTemplateRes], error) {
	return c.createSmsTemplate.CallUnary(ctx, req)
}

// UpdateSmsTemplate calls api.v0alpha.SmsApi.UpdateSmsTemplate.
func (c *smsApiClient) UpdateSmsTemplate(ctx context.Context, req *connect_go.Request[v0alpha.UpdateSmsTemplateReq]) (*connect_go.Response[v0alpha.UpdateSmsTemplateRes], error) {
	return c.updateSmsTemplate.CallUnary(ctx, req)
}

// DeleteSmsTemplate calls api.v0alpha.SmsApi.DeleteSmsTemplate.
func (c *smsApiClient) DeleteSmsTemplate(ctx context.Context, req *connect_go.Request[v0alpha.DeleteSmsTemplateReq]) (*connect_go.Response[v0alpha.DeleteSmsTemplateRes], error) {
	return c.deleteSmsTemplate.CallUnary(ctx, req)
}

// GetSmsTemplateBySid calls api.v0alpha.SmsApi.GetSmsTemplateBySid.
func (c *smsApiClient) GetSmsTemplateBySid(ctx context.Context, req *connect_go.Request[v0alpha.GetSmsTemplateBySidReq]) (*connect_go.Response[v0alpha.GetSmsTemplateBySidRes], error) {
	return c.getSmsTemplateBySid.CallUnary(ctx, req)
}

// ListSmsIntentTemplates calls api.v0alpha.SmsApi.ListSmsIntentTemplates.
func (c *smsApiClient) ListSmsIntentTemplates(ctx context.Context, req *connect_go.Request[v0alpha.ListSmsIntentTemplatesReq]) (*connect_go.Response[v0alpha.ListSmsIntentTemplatesRes], error) {
	return c.listSmsIntentTemplates.CallUnary(ctx, req)
}

// CreateSmsIntentTemplate calls api.v0alpha.SmsApi.CreateSmsIntentTemplate.
func (c *smsApiClient) CreateSmsIntentTemplate(ctx context.Context, req *connect_go.Request[v0alpha.SmsIntentTemplate]) (*connect_go.Response[v0alpha.CreateSmsIntentTemplateRes], error) {
	return c.createSmsIntentTemplate.CallUnary(ctx, req)
}

// UpdateSmsIntentTemplate calls api.v0alpha.SmsApi.UpdateSmsIntentTemplate.
func (c *smsApiClient) UpdateSmsIntentTemplate(ctx context.Context, req *connect_go.Request[v0alpha.SmsIntentTemplate]) (*connect_go.Response[v0alpha.UpdateSmsIntentTemplateRes], error) {
	return c.updateSmsIntentTemplate.CallUnary(ctx, req)
}

// DeleteSmsIntentTemplate calls api.v0alpha.SmsApi.DeleteSmsIntentTemplate.
func (c *smsApiClient) DeleteSmsIntentTemplate(ctx context.Context, req *connect_go.Request[v0alpha.DeleteSmsIntentTemplateReq]) (*connect_go.Response[v0alpha.DeleteSmsIntentTemplateRes], error) {
	return c.deleteSmsIntentTemplate.CallUnary(ctx, req)
}

// GetSmsIntentTemplateBySid calls api.v0alpha.SmsApi.GetSmsIntentTemplateBySid.
func (c *smsApiClient) GetSmsIntentTemplateBySid(ctx context.Context, req *connect_go.Request[v0alpha.GetSmsIntentTemplateBySidReq]) (*connect_go.Response[v0alpha.SmsIntentTemplate], error) {
	return c.getSmsIntentTemplateBySid.CallUnary(ctx, req)
}

// ListSmsSourceNumbers calls api.v0alpha.SmsApi.ListSmsSourceNumbers.
func (c *smsApiClient) ListSmsSourceNumbers(ctx context.Context, req *connect_go.Request[v0alpha.ListSmsSourceNumbersReq]) (*connect_go.Response[v0alpha.ListSmsSourceNumbersRes], error) {
	return c.listSmsSourceNumbers.CallUnary(ctx, req)
}

// CreateSmsSourceNumber calls api.v0alpha.SmsApi.CreateSmsSourceNumber.
func (c *smsApiClient) CreateSmsSourceNumber(ctx context.Context, req *connect_go.Request[v0alpha.CreateSmsSourceNumberReq]) (*connect_go.Response[v0alpha.CreateSmsSourceNumberRes], error) {
	return c.createSmsSourceNumber.CallUnary(ctx, req)
}

// UpdateSmsSourceNumber calls api.v0alpha.SmsApi.UpdateSmsSourceNumber.
func (c *smsApiClient) UpdateSmsSourceNumber(ctx context.Context, req *connect_go.Request[v0alpha.UpdateSmsSourceNumberReq]) (*connect_go.Response[v0alpha.UpdateSmsSourceNumberRes], error) {
	return c.updateSmsSourceNumber.CallUnary(ctx, req)
}

// DeleteSmsSourceNumber calls api.v0alpha.SmsApi.DeleteSmsSourceNumber.
func (c *smsApiClient) DeleteSmsSourceNumber(ctx context.Context, req *connect_go.Request[v0alpha.DeleteSmsSourceNumberReq]) (*connect_go.Response[v0alpha.DeleteSmsSourceNumberRes], error) {
	return c.deleteSmsSourceNumber.CallUnary(ctx, req)
}

// GetSmsSourceNumberBySid calls api.v0alpha.SmsApi.GetSmsSourceNumberBySid.
func (c *smsApiClient) GetSmsSourceNumberBySid(ctx context.Context, req *connect_go.Request[v0alpha.GetSmsSourceNumberBySidReq]) (*connect_go.Response[v0alpha.SmsNumbers], error) {
	return c.getSmsSourceNumberBySid.CallUnary(ctx, req)
}

// SendSmsNotification calls api.v0alpha.SmsApi.SendSmsNotification.
func (c *smsApiClient) SendSmsNotification(ctx context.Context, req *connect_go.Request[v0alpha.SendSmsNotificationReq]) (*connect_go.Response[v0alpha.SendSmsNotificationRes], error) {
	return c.sendSmsNotification.CallUnary(ctx, req)
}

// ListSmsGroupByFilters calls api.v0alpha.SmsApi.ListSmsGroupByFilters.
func (c *smsApiClient) ListSmsGroupByFilters(ctx context.Context, req *connect_go.Request[v0alpha.ListSmsGroupByFiltersReq]) (*connect_go.Response[v0alpha.ListSmsGroupByFiltersRes], error) {
	return c.listSmsGroupByFilters.CallUnary(ctx, req)
}

// ListSmsGroupsByGroupSids calls api.v0alpha.SmsApi.ListSmsGroupsByGroupSids.
func (c *smsApiClient) ListSmsGroupsByGroupSids(ctx context.Context, req *connect_go.Request[v0alpha.ListSmsGroupsByGroupSidsReq]) (*connect_go.Response[v0alpha.ListSmsGroupsByGroupSidsRes], error) {
	return c.listSmsGroupsByGroupSids.CallUnary(ctx, req)
}

// ListSmsTasksByGroupSids calls api.v0alpha.SmsApi.ListSmsTasksByGroupSids.
func (c *smsApiClient) ListSmsTasksByGroupSids(ctx context.Context, req *connect_go.Request[v0alpha.ListSmsTasksByGroupSidsReq]) (*connect_go.Response[v0alpha.ListSmsTasksByGroupSidsRes], error) {
	return c.listSmsTasksByGroupSids.CallUnary(ctx, req)
}

// ListSmsGroupByFiltersForAudit calls api.v0alpha.SmsApi.ListSmsGroupByFiltersForAudit.
func (c *smsApiClient) ListSmsGroupByFiltersForAudit(ctx context.Context, req *connect_go.Request[v0alpha.ListSmsGroupByFiltersReq]) (*connect_go.Response[v0alpha.ListSmsGroupByFiltersRes], error) {
	return c.listSmsGroupByFiltersForAudit.CallUnary(ctx, req)
}

// ListSmsGroupsByGroupSidsForAudit calls api.v0alpha.SmsApi.ListSmsGroupsByGroupSidsForAudit.
func (c *smsApiClient) ListSmsGroupsByGroupSidsForAudit(ctx context.Context, req *connect_go.Request[v0alpha.ListSmsGroupsByGroupSidsReq]) (*connect_go.Response[v0alpha.ListSmsGroupsByGroupSidsRes], error) {
	return c.listSmsGroupsByGroupSidsForAudit.CallUnary(ctx, req)
}

// ListSmsTasksByGroupSidsForAudit calls api.v0alpha.SmsApi.ListSmsTasksByGroupSidsForAudit.
func (c *smsApiClient) ListSmsTasksByGroupSidsForAudit(ctx context.Context, req *connect_go.Request[v0alpha.ListSmsTasksByGroupSidsReq]) (*connect_go.Response[v0alpha.ListSmsTasksByGroupSidsRes], error) {
	return c.listSmsTasksByGroupSidsForAudit.CallUnary(ctx, req)
}

// ListSmsTasksWithDetailedStatus calls api.v0alpha.SmsApi.ListSmsTasksWithDetailedStatus.
func (c *smsApiClient) ListSmsTasksWithDetailedStatus(ctx context.Context, req *connect_go.Request[v0alpha.ListSmsTasksWithDetailedStatusReq]) (*connect_go.Response[v0alpha.ListSmsTasksWithDetailedStatusRes], error) {
	return c.listSmsTasksWithDetailedStatus.CallUnary(ctx, req)
}

// UpdateSmsGroupStatus calls api.v0alpha.SmsApi.UpdateSmsGroupStatus.
func (c *smsApiClient) UpdateSmsGroupStatus(ctx context.Context, req *connect_go.Request[v0alpha.SmsGroupInfo]) (*connect_go.Response[v0alpha.UpdateSmsGroupRes], error) {
	return c.updateSmsGroupStatus.CallUnary(ctx, req)
}

// UpdateSmsGroupSendsPerMinute calls api.v0alpha.SmsApi.UpdateSmsGroupSendsPerMinute.
func (c *smsApiClient) UpdateSmsGroupSendsPerMinute(ctx context.Context, req *connect_go.Request[v0alpha.SmsGroupInfo]) (*connect_go.Response[v0alpha.UpdateSmsGroupRes], error) {
	return c.updateSmsGroupSendsPerMinute.CallUnary(ctx, req)
}

// UpdateSmsGroupScheduleTimes calls api.v0alpha.SmsApi.UpdateSmsGroupScheduleTimes.
func (c *smsApiClient) UpdateSmsGroupScheduleTimes(ctx context.Context, req *connect_go.Request[v0alpha.SmsGroupInfo]) (*connect_go.Response[v0alpha.UpdateSmsGroupRes], error) {
	return c.updateSmsGroupScheduleTimes.CallUnary(ctx, req)
}

// ScheduleSms calls api.v0alpha.SmsApi.ScheduleSms.
func (c *smsApiClient) ScheduleSms(ctx context.Context, req *connect_go.Request[v0alpha.ScheduleSmsReq]) (*connect_go.Response[v0alpha.ScheduleSmsRes], error) {
	return c.scheduleSms.CallUnary(ctx, req)
}

// ResendUnconnectedSms calls api.v0alpha.SmsApi.ResendUnconnectedSms.
func (c *smsApiClient) ResendUnconnectedSms(ctx context.Context, req *connect_go.Request[v0alpha.ResendUnconnectedSmsReq]) (*connect_go.Response[v0alpha.ResendUnconnectedSmsRes], error) {
	return c.resendUnconnectedSms.CallUnary(ctx, req)
}

// SmsActivitySearch calls api.v0alpha.SmsApi.SmsActivitySearch.
func (c *smsApiClient) SmsActivitySearch(ctx context.Context, req *connect_go.Request[v0alpha.SmsActivitySearchReq]) (*connect_go.Response[v0alpha.SmsActivitySearchRes], error) {
	return c.smsActivitySearch.CallUnary(ctx, req)
}

// CreateInboundSmsTemplate calls api.v0alpha.SmsApi.CreateInboundSmsTemplate.
func (c *smsApiClient) CreateInboundSmsTemplate(ctx context.Context, req *connect_go.Request[v0alpha.CreateInboundSmsTemplateReq]) (*connect_go.Response[v0alpha.CreateInboundSmsTemplateRes], error) {
	return c.createInboundSmsTemplate.CallUnary(ctx, req)
}

// UpdateInboundSmsTemplate calls api.v0alpha.SmsApi.UpdateInboundSmsTemplate.
func (c *smsApiClient) UpdateInboundSmsTemplate(ctx context.Context, req *connect_go.Request[v0alpha.UpdateInboundSmsTemplateReq]) (*connect_go.Response[v0alpha.UpdateInboundSmsTemplateRes], error) {
	return c.updateInboundSmsTemplate.CallUnary(ctx, req)
}

// DeleteInboundSmsTemplate calls api.v0alpha.SmsApi.DeleteInboundSmsTemplate.
func (c *smsApiClient) DeleteInboundSmsTemplate(ctx context.Context, req *connect_go.Request[v0alpha.DeleteInboundSmsTemplateReq]) (*connect_go.Response[v0alpha.DeleteInboundSmsTemplateRes], error) {
	return c.deleteInboundSmsTemplate.CallUnary(ctx, req)
}

// ListInboundSmsTemplates calls api.v0alpha.SmsApi.ListInboundSmsTemplates.
func (c *smsApiClient) ListInboundSmsTemplates(ctx context.Context, req *connect_go.Request[v0alpha.ListInboundSmsTemplatesReq]) (*connect_go.Response[v0alpha.ListInboundSmsTemplatesRes], error) {
	return c.listInboundSmsTemplates.CallUnary(ctx, req)
}

// GetInboundSmsTemplateById calls api.v0alpha.SmsApi.GetInboundSmsTemplateById.
func (c *smsApiClient) GetInboundSmsTemplateById(ctx context.Context, req *connect_go.Request[v0alpha.GetInboundSmsTemplateByIdReq]) (*connect_go.Response[v0alpha.GetInboundSmsTemplateByIdRes], error) {
	return c.getInboundSmsTemplateById.CallUnary(ctx, req)
}

// CreateInboundSmsGroup calls api.v0alpha.SmsApi.CreateInboundSmsGroup.
func (c *smsApiClient) CreateInboundSmsGroup(ctx context.Context, req *connect_go.Request[v0alpha.CreateInboundSmsGroupReq]) (*connect_go.Response[v0alpha.CreateInboundSmsGroupRes], error) {
	return c.createInboundSmsGroup.CallUnary(ctx, req)
}

// UpdateInboundSmsGroup calls api.v0alpha.SmsApi.UpdateInboundSmsGroup.
func (c *smsApiClient) UpdateInboundSmsGroup(ctx context.Context, req *connect_go.Request[v0alpha.UpdateInboundSmsGroupReq]) (*connect_go.Response[v0alpha.UpdateInboundSmsGroupRes], error) {
	return c.updateInboundSmsGroup.CallUnary(ctx, req)
}

// DeleteInboundSmsGroup calls api.v0alpha.SmsApi.DeleteInboundSmsGroup.
func (c *smsApiClient) DeleteInboundSmsGroup(ctx context.Context, req *connect_go.Request[v0alpha.DeleteInboundSmsGroupReq]) (*connect_go.Response[v0alpha.DeleteInboundSmsGroupRes], error) {
	return c.deleteInboundSmsGroup.CallUnary(ctx, req)
}

// ListInboundSmsGroups calls api.v0alpha.SmsApi.ListInboundSmsGroups.
func (c *smsApiClient) ListInboundSmsGroups(ctx context.Context, req *connect_go.Request[v0alpha.ListInboundSmsGroupsReq]) (*connect_go.Response[v0alpha.ListInboundSmsGroupsRes], error) {
	return c.listInboundSmsGroups.CallUnary(ctx, req)
}

// ListActiveInboundSmsGroups calls api.v0alpha.SmsApi.ListActiveInboundSmsGroups.
func (c *smsApiClient) ListActiveInboundSmsGroups(ctx context.Context, req *connect_go.Request[v0alpha.ListActiveInboundSmsGroupsReq]) (*connect_go.Response[v0alpha.ListActiveInboundSmsGroupsRes], error) {
	return c.listActiveInboundSmsGroups.CallUnary(ctx, req)
}

// ListInboundSmsGroupByFilters calls api.v0alpha.SmsApi.ListInboundSmsGroupByFilters.
func (c *smsApiClient) ListInboundSmsGroupByFilters(ctx context.Context, req *connect_go.Request[v0alpha.ListInboundSmsGroupByFiltersReq]) (*connect_go.Response[v0alpha.ListInboundSmsGroupByFiltersRes], error) {
	return c.listInboundSmsGroupByFilters.CallUnary(ctx, req)
}

// GetInboundSmsGroupById calls api.v0alpha.SmsApi.GetInboundSmsGroupById.
func (c *smsApiClient) GetInboundSmsGroupById(ctx context.Context, req *connect_go.Request[v0alpha.GetInboundSmsGroupByIdReq]) (*connect_go.Response[v0alpha.GetInboundSmsGroupByIdRes], error) {
	return c.getInboundSmsGroupById.CallUnary(ctx, req)
}

// ListInboundSmsGroupsByGroupIds calls api.v0alpha.SmsApi.ListInboundSmsGroupsByGroupIds.
func (c *smsApiClient) ListInboundSmsGroupsByGroupIds(ctx context.Context, req *connect_go.Request[v0alpha.ListInboundSmsGroupsByGroupIdsReq]) (*connect_go.Response[v0alpha.ListInboundSmsGroupsByGroupIdsRes], error) {
	return c.listInboundSmsGroupsByGroupIds.CallUnary(ctx, req)
}

// StopInboundSmsGroup calls api.v0alpha.SmsApi.StopInboundSmsGroup.
func (c *smsApiClient) StopInboundSmsGroup(ctx context.Context, req *connect_go.Request[v0alpha.StopInboundSmsGroupReq]) (*connect_go.Response[v0alpha.StopInboundSmsGroupRes], error) {
	return c.stopInboundSmsGroup.CallUnary(ctx, req)
}

// ScheduleInboundSms calls api.v0alpha.SmsApi.ScheduleInboundSms.
func (c *smsApiClient) ScheduleInboundSms(ctx context.Context, req *connect_go.Request[v0alpha.ScheduleInboundSmsReq]) (*connect_go.Response[v0alpha.ScheduleInboundSmsRes], error) {
	return c.scheduleInboundSms.CallUnary(ctx, req)
}

// CreateSmsConversation calls api.v0alpha.SmsApi.CreateSmsConversation.
func (c *smsApiClient) CreateSmsConversation(ctx context.Context, req *connect_go.Request[v0alpha.CreateSmsConversationReq]) (*connect_go.Response[v0alpha.CreateSmsConversationRes], error) {
	return c.createSmsConversation.CallUnary(ctx, req)
}

// UpdateSmsConversation calls api.v0alpha.SmsApi.UpdateSmsConversation.
func (c *smsApiClient) UpdateSmsConversation(ctx context.Context, req *connect_go.Request[v0alpha.UpdateSmsConversationReq]) (*connect_go.Response[v0alpha.UpdateSmsConversationRes], error) {
	return c.updateSmsConversation.CallUnary(ctx, req)
}

// DeleteSmsConversation calls api.v0alpha.SmsApi.DeleteSmsConversation.
func (c *smsApiClient) DeleteSmsConversation(ctx context.Context, req *connect_go.Request[v0alpha.DeleteSmsConversationReq]) (*connect_go.Response[v0alpha.DeleteSmsConversationRes], error) {
	return c.deleteSmsConversation.CallUnary(ctx, req)
}

// ListSmsConversations calls api.v0alpha.SmsApi.ListSmsConversations.
func (c *smsApiClient) ListSmsConversations(ctx context.Context, req *connect_go.Request[v0alpha.ListSmsConversationsReq]) (*connect_go.Response[v0alpha.ListSmsConversationsRes], error) {
	return c.listSmsConversations.CallUnary(ctx, req)
}

// GetSmsConversationById calls api.v0alpha.SmsApi.GetSmsConversationById.
func (c *smsApiClient) GetSmsConversationById(ctx context.Context, req *connect_go.Request[v0alpha.GetSmsConversationByIdReq]) (*connect_go.Response[v0alpha.GetSmsConversationByIdRes], error) {
	return c.getSmsConversationById.CallUnary(ctx, req)
}

// GetSmsMessage calls api.v0alpha.SmsApi.GetSmsMessage.
func (c *smsApiClient) GetSmsMessage(ctx context.Context, req *connect_go.Request[v0alpha.GetSmsMessageReq]) (*connect_go.Response[v0alpha.GetSmsMessageRes], error) {
	return c.getSmsMessage.CallUnary(ctx, req)
}

// CreateSmsConversationAudit calls api.v0alpha.SmsApi.CreateSmsConversationAudit.
func (c *smsApiClient) CreateSmsConversationAudit(ctx context.Context, req *connect_go.Request[v0alpha.SmsConversationAudit]) (*connect_go.Response[v0alpha.CreateSmsConversationAuditRes], error) {
	return c.createSmsConversationAudit.CallUnary(ctx, req)
}

// ListSmsConversationAudits calls api.v0alpha.SmsApi.ListSmsConversationAudits.
func (c *smsApiClient) ListSmsConversationAudits(ctx context.Context, req *connect_go.Request[v0alpha.ListSmsConversationAuditsReq]) (*connect_go.Response[v0alpha.ListSmsConversationAuditsRes], error) {
	return c.listSmsConversationAudits.CallUnary(ctx, req)
}

// GetSmsConversationAuditById calls api.v0alpha.SmsApi.GetSmsConversationAuditById.
func (c *smsApiClient) GetSmsConversationAuditById(ctx context.Context, req *connect_go.Request[v0alpha.GetSmsConversationAuditByIdReq]) (*connect_go.Response[v0alpha.GetSmsConversationAuditByIdRes], error) {
	return c.getSmsConversationAuditById.CallUnary(ctx, req)
}

// CreateSmsConversationAssignedAgent calls api.v0alpha.SmsApi.CreateSmsConversationAssignedAgent.
func (c *smsApiClient) CreateSmsConversationAssignedAgent(ctx context.Context, req *connect_go.Request[v0alpha.SmsConversationAssignedAgent]) (*connect_go.Response[v0alpha.CreateSmsConversationAssignedAgentRes], error) {
	return c.createSmsConversationAssignedAgent.CallUnary(ctx, req)
}

// ListSmsConversationAssignedAgents calls api.v0alpha.SmsApi.ListSmsConversationAssignedAgents.
func (c *smsApiClient) ListSmsConversationAssignedAgents(ctx context.Context, req *connect_go.Request[v0alpha.ListSmsConversationAssignedAgentsReq]) (*connect_go.Response[v0alpha.ListSmsConversationAssignedAgentsRes], error) {
	return c.listSmsConversationAssignedAgents.CallUnary(ctx, req)
}

// GetSmsConversationAssignedAgentById calls api.v0alpha.SmsApi.GetSmsConversationAssignedAgentById.
func (c *smsApiClient) GetSmsConversationAssignedAgentById(ctx context.Context, req *connect_go.Request[v0alpha.GetSmsConversationAssignedAgentByIdReq]) (*connect_go.Response[v0alpha.GetSmsConversationAssignedAgentByIdRes], error) {
	return c.getSmsConversationAssignedAgentById.CallUnary(ctx, req)
}

// ListInboundSmsTasksByGroupIds calls api.v0alpha.SmsApi.ListInboundSmsTasksByGroupIds.
func (c *smsApiClient) ListInboundSmsTasksByGroupIds(ctx context.Context, req *connect_go.Request[v0alpha.ListInboundSmsTasksByGroupIdsReq]) (*connect_go.Response[v0alpha.ListInboundSmsTasksByGroupIdsRes], error) {
	return c.listInboundSmsTasksByGroupIds.CallUnary(ctx, req)
}

// StopAllOutboundSmsGroups calls api.v0alpha.SmsApi.StopAllOutboundSmsGroups.
func (c *smsApiClient) StopAllOutboundSmsGroups(ctx context.Context, req *connect_go.Request[v0alpha.StopAllOutboundSmsGroupsReq]) (*connect_go.Response[v0alpha.StopAllOutboundSmsGroupsRes], error) {
	return c.stopAllOutboundSmsGroups.CallUnary(ctx, req)
}

// StopAllInboundSmsGroups calls api.v0alpha.SmsApi.StopAllInboundSmsGroups.
func (c *smsApiClient) StopAllInboundSmsGroups(ctx context.Context, req *connect_go.Request[v0alpha.StopAllInboundSmsGroupsReq]) (*connect_go.Response[v0alpha.StopAllInboundSmsGroupsRes], error) {
	return c.stopAllInboundSmsGroups.CallUnary(ctx, req)
}

// SmsApiHandler is an implementation of the api.v0alpha.SmsApi service.
type SmsApiHandler interface {
	// List Sms Templates  defined by ListSmsTemplatesReq message.
	// Gets all details belong to the clientsid
	// The method will return a stream of ListSmsTemplatesRes messages
	// containing SmsTemplates with SmsIntents
	// Required permissions: VIEW_SMS
	ListSmsTemplates(context.Context, *connect_go.Request[v0alpha.ListSmsTemplatesReq]) (*connect_go.Response[v0alpha.ListSmsTemplatesRes], error)
	// Create/Record a SmsTemplate defined by CreateSmsTemplateReq message.
	// The method will return a CreateSmsTemplateRes message that will
	// contain the newly created values of the sms_template_id
	// Required permissions: VIEW_SMS
	CreateSmsTemplate(context.Context, *connect_go.Request[v0alpha.CreateSmsTemplateReq]) (*connect_go.Response[v0alpha.CreateSmsTemplateRes], error)
	// Update a SmsTemplate defined by UpdateSmsTemplateReq message for
	// the specified sms_template_sid
	// will update the following
	// sms template fields:
	//
	//	MessageSid
	//	SmsTemplateIntentSid
	//
	// The method will return a UpdateSmsTemplateRes message with true or false .
	// Required permissions: VIEW_SMS
	UpdateSmsTemplate(context.Context, *connect_go.Request[v0alpha.UpdateSmsTemplateReq]) (*connect_go.Response[v0alpha.UpdateSmsTemplateRes], error)
	// Delete a SmsTemplate defined by DeleteSmsTemplateReq message for
	// the specified sms_template_id
	// The method will return a DeleteSmsTemplateRes message with true or false .
	// Required permissions: VIEW_SMS
	DeleteSmsTemplate(context.Context, *connect_go.Request[v0alpha.DeleteSmsTemplateReq]) (*connect_go.Response[v0alpha.DeleteSmsTemplateRes], error)
	// Gets an SmsTemplate defined by GetSmsTemplateBySidReq message for the specified
	// sms_template_sid.
	// The method will return a SmsTemplate group.
	// Required permissions: VIEW_SMS
	GetSmsTemplateBySid(context.Context, *connect_go.Request[v0alpha.GetSmsTemplateBySidReq]) (*connect_go.Response[v0alpha.GetSmsTemplateBySidRes], error)
	// List Sms IntentTemplates  defined by ListSmsIntentTemplatesReq message.
	// Gets all details belong to the clientsid
	// The method will return a stream of ListSmsIntentTemplatesRes messages
	// containing ActionKey, ActionDetails, ActionTriggers, ActionPriority
	// Required permissions: VIEW_SMS
	ListSmsIntentTemplates(context.Context, *connect_go.Request[v0alpha.ListSmsIntentTemplatesReq]) (*connect_go.Response[v0alpha.ListSmsIntentTemplatesRes], error)
	// Create/Record a SmsIntentTemplate defined by SmsIntentTemplate message.
	// The method will return a CreateSmsIntentTemplateRes message that will
	// contain the newly created values of the sms_intent_template_sid
	// Required permissions: VIEW_SMS
	CreateSmsIntentTemplate(context.Context, *connect_go.Request[v0alpha.SmsIntentTemplate]) (*connect_go.Response[v0alpha.CreateSmsIntentTemplateRes], error)
	// Update a SmsIntentTemplate defined by SmsIntentTemplate message for
	// the specified sms_intent_template_sid
	// will update the following
	// sms intent template fields:
	//
	//	ActionKey
	//	ActionDetails
	//	ActionTrigger
	//
	// The method will return a UpdateSmsIntentTemplateRes message with true or false .
	// Required permissions: VIEW_SMS
	UpdateSmsIntentTemplate(context.Context, *connect_go.Request[v0alpha.SmsIntentTemplate]) (*connect_go.Response[v0alpha.UpdateSmsIntentTemplateRes], error)
	// Delete a SmsIntentTemplate defined by DeleteSmsIntentTemplateReq message for
	// the specified sms_intent_template_id
	// The method will return a DeleteSmsIntentTemplateRes message with true or false .
	// Required permissions: VIEW_SMS
	DeleteSmsIntentTemplate(context.Context, *connect_go.Request[v0alpha.DeleteSmsIntentTemplateReq]) (*connect_go.Response[v0alpha.DeleteSmsIntentTemplateRes], error)
	// Gets an SmsIntentTemplate group defined by GetSmsIntentTemplateBySidReq message for the specified
	// sms_intent_template_sid.
	// The method will return a SmsIntentTemplate group.
	// Required permissions: VIEW_SMS
	GetSmsIntentTemplateBySid(context.Context, *connect_go.Request[v0alpha.GetSmsIntentTemplateBySidReq]) (*connect_go.Response[v0alpha.SmsIntentTemplate], error)
	// List Sms SourceNumbers  defined by ListSmsSourceNumbersReq message.
	// Gets all source numbers belong to the clientsid
	// The method will return a stream of ListSmsSourceNumbersRes messages
	// containing providername, providertype
	// Required permissions: VIEW_SMS
	ListSmsSourceNumbers(context.Context, *connect_go.Request[v0alpha.ListSmsSourceNumbersReq]) (*connect_go.Response[v0alpha.ListSmsSourceNumbersRes], error)
	// Create/Record a SmsSourceNumber defined by CreateSmsSourceNumberReq message.
	// The method will return a CreateSmsSourceNumberRes message that will
	// contain the newly created values of the sms_number_id
	// Required permissions: VIEW_SMS
	CreateSmsSourceNumber(context.Context, *connect_go.Request[v0alpha.CreateSmsSourceNumberReq]) (*connect_go.Response[v0alpha.CreateSmsSourceNumberRes], error)
	// Update a SmsSourceNumber defined by UpdateSmsSourceNumberReq message for
	// the specified sms_number_sid
	// will update the following
	// sms number fields:
	//
	//	CountrySid
	//	ProviderName
	//	NumberType
	//
	// The method will return a UpdateSmsSourceNumberRes message with true or false .
	// Required permissions: VIEW_SMS
	UpdateSmsSourceNumber(context.Context, *connect_go.Request[v0alpha.UpdateSmsSourceNumberReq]) (*connect_go.Response[v0alpha.UpdateSmsSourceNumberRes], error)
	// Delete a SmsSourceNumber defined by DeleteSmsSourceNumberReq message for
	// the specified sms_number_id
	// The method will return a DeleteSmsSourceNumberRes message with true or false .
	// Required permissions: VIEW_SMS
	DeleteSmsSourceNumber(context.Context, *connect_go.Request[v0alpha.DeleteSmsSourceNumberReq]) (*connect_go.Response[v0alpha.DeleteSmsSourceNumberRes], error)
	// get sms source number for the particular sid
	// Gets an SmsSource Number defined by GetSmsSourceNumberBySidReq message for the specified
	// sms_number_sid.
	// The method will return a SmsNumbers group.
	// Required permissions: VIEW_SMS
	GetSmsSourceNumberBySid(context.Context, *connect_go.Request[v0alpha.GetSmsSourceNumberBySidReq]) (*connect_go.Response[v0alpha.SmsNumbers], error)
	// Send sms notification defined by SendSmsNotificationReq message for the specified
	// message and array of phone num.
	// The method will return a stream of SendSmsNotificationRes messages
	// containing result true/false after notified by sms for the client.
	// Required permissions:
	//
	//	VIEW_SMS
	SendSmsNotification(context.Context, *connect_go.Request[v0alpha.SendSmsNotificationReq]) (*connect_go.Response[v0alpha.SendSmsNotificationRes], error)
	// List Sms Group defined by ListSmsGroupByFiltersReq message.
	// Gets all details belong to the clientsid  with filters
	// The method will return a stream of ListSmsGroupByFiltersRes messages
	// containing SmsGroup Info and SMSIntent
	// Required permissions: VIEW_SMS
	ListSmsGroupByFilters(context.Context, *connect_go.Request[v0alpha.ListSmsGroupByFiltersReq]) (*connect_go.Response[v0alpha.ListSmsGroupByFiltersRes], error)
	// List Sms Group defined by ListSmsGroupsByGroupSidsReq message.
	// Gets all details for the array of group sids
	// The method will return a stream of ListSmsGroupsByGroupSidsRes messages
	// containing SmsGroup Info and SMSIntent
	// Required permissions: VIEW_SMS
	ListSmsGroupsByGroupSids(context.Context, *connect_go.Request[v0alpha.ListSmsGroupsByGroupSidsReq]) (*connect_go.Response[v0alpha.ListSmsGroupsByGroupSidsRes], error)
	// List Sms Task  defined by ListSmsTasksByGroupSidsReq message.
	// Gets all details for the array of group sids
	// The method will return a stream of ListSmsTasksByGroupSidsRes messages
	// containing delivery status, msg_time, cost
	// belonging to the smsgroup.
	// Required permissions: VIEW_SMS
	ListSmsTasksByGroupSids(context.Context, *connect_go.Request[v0alpha.ListSmsTasksByGroupSidsReq]) (*connect_go.Response[v0alpha.ListSmsTasksByGroupSidsRes], error)
	// List Sms Group defined by ListSmsGroupByFiltersReq message.
	// Gets all details belong to the owner path with filters for audit
	// The method will return a stream of ListSmsGroupByFiltersRes messages
	// containing SmsGroup Info and SMSIntent
	// Required permissions: VIEW_SMS
	ListSmsGroupByFiltersForAudit(context.Context, *connect_go.Request[v0alpha.ListSmsGroupByFiltersReq]) (*connect_go.Response[v0alpha.ListSmsGroupByFiltersRes], error)
	// List Sms Group defined by ListSmsGroupsByGroupSidsReq message.
	// Gets all details for the array of group sids for audit
	// The method will return a stream of ListSmsGroupsByGroupSidsRes messages
	// containing SmsGroup Info and SMSIntent
	// Required permissions: VIEW_SMS
	ListSmsGroupsByGroupSidsForAudit(context.Context, *connect_go.Request[v0alpha.ListSmsGroupsByGroupSidsReq]) (*connect_go.Response[v0alpha.ListSmsGroupsByGroupSidsRes], error)
	// List Sms Task  defined by ListSmsTasksByGroupSidsReq message.
	// Gets all details for the array of group sids for audit
	// The method will return a stream of ListSmsTasksByGroupSidsRes messages
	// containing delivery status, msg_time, cost
	// belonging to the smsgroup.
	// Required permissions: VIEW_SMS
	ListSmsTasksByGroupSidsForAudit(context.Context, *connect_go.Request[v0alpha.ListSmsTasksByGroupSidsReq]) (*connect_go.Response[v0alpha.ListSmsTasksByGroupSidsRes], error)
	// List Sms Task  defined by ListSmsTasksWithDetailedStatusReq message.
	// Gets all details for the specified sms group sid.
	// The method will return a stream of ListSmsTasksWithDetailedStatusRes messages
	// containing delivery status, msg_time, cost
	// belonging to the smsgroup.
	// Required permissions: VIEW_SMS
	ListSmsTasksWithDetailedStatus(context.Context, *connect_go.Request[v0alpha.ListSmsTasksWithDetailedStatusReq]) (*connect_go.Response[v0alpha.ListSmsTasksWithDetailedStatusRes], error)
	// Update the Scheduled Sms group defined by SmsGroupInfo message for the specified
	// paused/unpaused/cancel status
	// The method will return a UpdateSmsGroupRes message with true or false .
	// Required permissions: EXECUTE_SEND_BROADCAST
	UpdateSmsGroupStatus(context.Context, *connect_go.Request[v0alpha.SmsGroupInfo]) (*connect_go.Response[v0alpha.UpdateSmsGroupRes], error)
	// Update the Scheduled Sms group defined by SmsGroupInfo message for the specified
	// pacing
	// The method will return a UpdateSmsGroupRes message with true or false .
	// Required permissions: EXECUTE_SEND_BROADCAST
	UpdateSmsGroupSendsPerMinute(context.Context, *connect_go.Request[v0alpha.SmsGroupInfo]) (*connect_go.Response[v0alpha.UpdateSmsGroupRes], error)
	// Update the Scheduled Sms group defined by SmsGroupInfo message for the specified
	// schedule_time
	// The method will return a UpdateSmsGroupRes message with true or false .
	// Required permissions: EXECUTE_SEND_BROADCAST
	UpdateSmsGroupScheduleTimes(context.Context, *connect_go.Request[v0alpha.SmsGroupInfo]) (*connect_go.Response[v0alpha.UpdateSmsGroupRes], error)
	// Schedule Sms group defined by ScheduleSmsReq message for the specified
	// sms_template_id with initialpace, sourcenumber, contactgroupsid
	// The method will return a Sms group.
	// Required permissions: EXECUTE_SEND_BROADCAST
	ScheduleSms(context.Context, *connect_go.Request[v0alpha.ScheduleSmsReq]) (*connect_go.Response[v0alpha.ScheduleSmsRes], error)
	// Re-Schedule Sms group defined by ResendUnconnectedSmsReq message for the specified
	// sms_group_id and start/stop time.
	// The method will return a Sms group.
	// Required permissions: EXECUTE_SEND_BROADCAST
	ResendUnconnectedSms(context.Context, *connect_go.Request[v0alpha.ResendUnconnectedSmsReq]) (*connect_go.Response[v0alpha.ResendUnconnectedSmsRes], error)
	// Search SMS activity defined by SmsActivitySearchReq message for
	// any of the following filters:
	// ClientSid, ToNumber and FromNumber, FromDate, ToDate, SentOnly
	// The method will return the Sms Group with Sms Task & Sms Intent Info
	// Required permissions: VIEW_SMS
	SmsActivitySearch(context.Context, *connect_go.Request[v0alpha.SmsActivitySearchReq]) (*connect_go.Response[v0alpha.SmsActivitySearchRes], error)
	// Create/Record a InboundSmsTemplate defined by CreateInboundSmsTemplateReq message.
	// The method will return a CreateInboundSmsTemplateRes message that will
	// contain the newly created values of the inbound_sms_template_id
	// Required permissions: VIEW_SMS
	CreateInboundSmsTemplate(context.Context, *connect_go.Request[v0alpha.CreateInboundSmsTemplateReq]) (*connect_go.Response[v0alpha.CreateInboundSmsTemplateRes], error)
	// Update a InboundSmsTemplate defined by UpdateInboundSmsTemplateReq message for
	// the specified sms_template_id, region_id and org_id
	// will update the following
	// inbound sms template fields:
	//
	//	TemplateId
	//	SmsTemplateIntentId
	//
	// The method will return a UpdateInboundSmsTemplateRes message with true or false .
	// Required permissions: VIEW_SMS
	UpdateInboundSmsTemplate(context.Context, *connect_go.Request[v0alpha.UpdateInboundSmsTemplateReq]) (*connect_go.Response[v0alpha.UpdateInboundSmsTemplateRes], error)
	// Delete a InboundSmsTemplate defined by DeleteInboundSmsTemplateReq message for
	// the specified inbound_sms_template_id, region_id and org_id
	// The method will return a DeleteInboundSmsTemplateRes message with true or false .
	// Required permissions: VIEW_SMS
	DeleteInboundSmsTemplate(context.Context, *connect_go.Request[v0alpha.DeleteInboundSmsTemplateReq]) (*connect_go.Response[v0alpha.DeleteInboundSmsTemplateRes], error)
	// List InboundSmsTemplate  defined by ListInboundSmsTemplatesReq message.
	// Gets all of the Inbound sms template specified according to the filters.
	// The method will return a stream of ListInboundSmsTemplatesRes messages
	// containing InboundSmsTemplate, and SMSIntent
	// belonging to the inbound smstemplate.
	// Required permissions: VIEW_SMS
	ListInboundSmsTemplates(context.Context, *connect_go.Request[v0alpha.ListInboundSmsTemplatesReq]) (*connect_go.Response[v0alpha.ListInboundSmsTemplatesRes], error)
	// Gets an InboundSmsTemplate group defined by GetInboundSmsTemplateByIdReq message for the specified
	// inbound_sms_template_id, region_id and org_id.
	// The method will return a InboundTemplate group.
	// Required permissions: VIEW_SMS
	GetInboundSmsTemplateById(context.Context, *connect_go.Request[v0alpha.GetInboundSmsTemplateByIdReq]) (*connect_go.Response[v0alpha.GetInboundSmsTemplateByIdRes], error)
	// Create/Record a InboundSmsGroup defined by CreateInboundSmsGroupReq message.
	// The method will return a CreateInboundSmsGroupRes message that will
	// contain the newly created values of the inbound_sms_group_id
	// Required permissions: VIEW_SMS
	CreateInboundSmsGroup(context.Context, *connect_go.Request[v0alpha.CreateInboundSmsGroupReq]) (*connect_go.Response[v0alpha.CreateInboundSmsGroupRes], error)
	// Update a InboundSmsGroup defined by UpdateInboundSmsGroupReq message for
	// the specified sms_group_id, region_id and org_id
	// will update the following
	// inbound sms group fields:
	//
	//	TemplateId
	//	SmsNumber
	//
	// The method will return a UpdateInboundSmsGroupRes message with true or false .
	// Required permissions: VIEW_SMS
	UpdateInboundSmsGroup(context.Context, *connect_go.Request[v0alpha.UpdateInboundSmsGroupReq]) (*connect_go.Response[v0alpha.UpdateInboundSmsGroupRes], error)
	// Delete a InboundSmsGroup defined by DeleteInboundSmsGroupReq message for
	// the specified inbound_sms_group_id, region_id and org_id
	// The method will return a DeleteInboundSmsGroupRes message with true or false .
	// Required permissions: VIEW_SMS
	DeleteInboundSmsGroup(context.Context, *connect_go.Request[v0alpha.DeleteInboundSmsGroupReq]) (*connect_go.Response[v0alpha.DeleteInboundSmsGroupRes], error)
	// List InboundSmsGroup  defined by ListInboundSmsGroupsReq message.
	// Gets all of the Inbound sms group specified according to the filters.
	// The method will return a stream of ListInboundSmsGroupsRes messages
	// containing InboundSmsGroup, and SMSIntent
	// belonging to the inbound smsgroup.
	// Required permissions: VIEW_SMS
	ListInboundSmsGroups(context.Context, *connect_go.Request[v0alpha.ListInboundSmsGroupsReq]) (*connect_go.Response[v0alpha.ListInboundSmsGroupsRes], error)
	// List Active InboundSmsGroup  defined by ListActiveInboundSmsGroupsReq message.
	// Gets active Inbound sms group specified according to the filters.
	// The method will return a stream of ListActiveInboundSmsGroupsRes messages
	// containing InboundSmsGroup, and SMSIntent
	// belonging to the inbound smsgroup.
	// Required permissions: VIEW_SMS
	ListActiveInboundSmsGroups(context.Context, *connect_go.Request[v0alpha.ListActiveInboundSmsGroupsReq]) (*connect_go.Response[v0alpha.ListActiveInboundSmsGroupsRes], error)
	// List InboundSmsGroup  defined by InboundSmsGroupByFiltersReq message.
	// Gets all of the Inbound sms group specified according to the filters.
	// The method will return a stream of InboundSmsGroupByFiltersRes messages
	// containing InboundSmsGroup, and SMSIntent
	// belonging to the inbound smsgroup.
	// Required permissions: VIEW_SMS
	ListInboundSmsGroupByFilters(context.Context, *connect_go.Request[v0alpha.ListInboundSmsGroupByFiltersReq]) (*connect_go.Response[v0alpha.ListInboundSmsGroupByFiltersRes], error)
	// Gets an InboundSms group defined by GetInboundSmsGroupByIdReq message for the specified
	// inbound_sms_group_id, region_id and org_id.
	// The method will return a InboundSms group.
	// Required permissions: VIEW_SMS
	GetInboundSmsGroupById(context.Context, *connect_go.Request[v0alpha.GetInboundSmsGroupByIdReq]) (*connect_go.Response[v0alpha.GetInboundSmsGroupByIdRes], error)
	// List InboundSmsGroup  defined by ListInboundSmsGroupsByGroupIdsReq message.
	// Gets all of the Inbound sms group specified for the groupids array.
	// The method will return a stream of ListInboundSmsGroupsByGroupIdsRes messages
	// containing InboundSmsGroup, and SMSIntent
	// belonging to the inbound smsgroup.
	// Required permissions: VIEW_SMS
	ListInboundSmsGroupsByGroupIds(context.Context, *connect_go.Request[v0alpha.ListInboundSmsGroupsByGroupIdsReq]) (*connect_go.Response[v0alpha.ListInboundSmsGroupsByGroupIdsRes], error)
	// Stop an InboundSms group defined by StopInboundSmsGroupReq message for the specified
	// inbound_sms_group_id, region_id and org_id.
	// The method will mark the InboundSms group completed.
	// Required permissions: VIEW_SMS
	StopInboundSmsGroup(context.Context, *connect_go.Request[v0alpha.StopInboundSmsGroupReq]) (*connect_go.Response[v0alpha.StopInboundSmsGroupRes], error)
	// Schedule InboundSms group defined by ScheduleInboundSmsReq message for the specified
	// inbound_sms_template_id and sms_number_sid.
	// The method will return a InboundSms group.
	// Required permissions: EXECUTE_SEND_BROADCAST
	ScheduleInboundSms(context.Context, *connect_go.Request[v0alpha.ScheduleInboundSmsReq]) (*connect_go.Response[v0alpha.ScheduleInboundSmsRes], error)
	// Create/Record a SmsConversation defined by CreateSmsConversationReq message.
	// The method will return a CreateSmsConversationRes message that will
	// contain the newly created values of the sms_conversation_id
	// Required permissions: VIEW_SMS
	CreateSmsConversation(context.Context, *connect_go.Request[v0alpha.CreateSmsConversationReq]) (*connect_go.Response[v0alpha.CreateSmsConversationRes], error)
	// Update a SmsConversation defined by UpdateSmsConversationReq message for
	// the specified sms_conversation_id, region_id and org_id
	// will update the following
	// conversation fields:
	//
	//	InboundSmsGroupId
	//	SmsTaskParent
	//
	// The method will return a UpdateSmsConversationRes message with true or false .
	// Required permissions: VIEW_SMS
	UpdateSmsConversation(context.Context, *connect_go.Request[v0alpha.UpdateSmsConversationReq]) (*connect_go.Response[v0alpha.UpdateSmsConversationRes], error)
	// Delete a SmsConversation defined by DeleteSmsConversationReq message for
	// the specified sms_conversation_id, region_id and org_id
	// The method will return a DeleteSmsConversationRes message with true or false .
	// Required permissions: VIEW_SMS
	DeleteSmsConversation(context.Context, *connect_go.Request[v0alpha.DeleteSmsConversationReq]) (*connect_go.Response[v0alpha.DeleteSmsConversationRes], error)
	// List SmsConversation profiles defined by ListSmsConversationsReq message.
	// Gets all of the unique sms conversations.
	// The method will return a stream of ListSmsConversationsRes messages
	// containing InboundSmsGroupId, and SmsTaskParent
	// belonging to the smsconversations.
	// Required permissions: VIEW_SMS
	ListSmsConversations(context.Context, *connect_go.Request[v0alpha.ListSmsConversationsReq]) (*connect_go.Response[v0alpha.ListSmsConversationsRes], error)
	// Gets a SmsConversation defined by GetSmsConversationByIdReq message for the specified
	// sms_conversation_id, region_id and org_id.
	// The method will return a SmsConversation.
	// Required permissions: VIEW_SMS
	GetSmsConversationById(context.Context, *connect_go.Request[v0alpha.GetSmsConversationByIdReq]) (*connect_go.Response[v0alpha.GetSmsConversationByIdRes], error)
	// Gets SmsMessage defined by GetSmsMessageReq message for the specified
	// sms_message_sid.
	// The method will return a SmsMessage.
	// Required permissions: VIEW_SMS
	GetSmsMessage(context.Context, *connect_go.Request[v0alpha.GetSmsMessageReq]) (*connect_go.Response[v0alpha.GetSmsMessageRes], error)
	// Create/Record a SmsConversationAudit defined by SmsConversationAudit message.
	// The method will return a CreateSmsConversationAuditRes message that will
	// contain the newly created values of the sms_conversation_audit_id
	// Required permissions: VIEW_SMS
	CreateSmsConversationAudit(context.Context, *connect_go.Request[v0alpha.SmsConversationAudit]) (*connect_go.Response[v0alpha.CreateSmsConversationAuditRes], error)
	// List SmsConversationAudit profiles defined by ListSmsConversationAuditsReq message.
	// Gets all of the values for sms conversations id.
	// The method will return a stream of ListSmsConversationAuditsRes messages
	// containing SmsTaskSid, SmsReceivedReplySid and AgentId
	// belonging to the smsconversationsaudit.
	// Required permissions: VIEW_SMS
	ListSmsConversationAudits(context.Context, *connect_go.Request[v0alpha.ListSmsConversationAuditsReq]) (*connect_go.Response[v0alpha.ListSmsConversationAuditsRes], error)
	// Gets a SmsConversationAudit defined by GetSmsConversationAuditByIdReq message for the specified
	// sms_conversation_audit_id.
	// The method will return a SmsConversationAudit.
	// Required permissions: VIEW_SMS
	GetSmsConversationAuditById(context.Context, *connect_go.Request[v0alpha.GetSmsConversationAuditByIdReq]) (*connect_go.Response[v0alpha.GetSmsConversationAuditByIdRes], error)
	// Create/Record a SmsConversationAssignedAgent defined by SmsConversationAssignedAgent message.
	// The method will return a CreateSmsConversationAssignedAgentRes message with true or false
	// Required permissions: VIEW_SMS
	CreateSmsConversationAssignedAgent(context.Context, *connect_go.Request[v0alpha.SmsConversationAssignedAgent]) (*connect_go.Response[v0alpha.CreateSmsConversationAssignedAgentRes], error)
	// List SmsConversationAssignedAgent profiles defined by ListSmsConversationAssignedAgentsReq message.
	// Gets all of the values for sms conversations id.
	// The method will return a stream of ListSmsConversationAssignedAgentsRes messages
	// containing Assigned AgentId, Primary Agent, and Notiify
	// belonging to the smsconversationassignedagent.
	// Required permissions: VIEW_SMS
	ListSmsConversationAssignedAgents(context.Context, *connect_go.Request[v0alpha.ListSmsConversationAssignedAgentsReq]) (*connect_go.Response[v0alpha.ListSmsConversationAssignedAgentsRes], error)
	// Gets a SmsConversationAssignedAgent defined by GetSmsConversationAssignedAgentByIdReq message for the specified
	// conversation_id & assigned_agent_id
	// The method will return a SmsConversationAssignedAgent.
	// Required permissions: VIEW_SMS
	GetSmsConversationAssignedAgentById(context.Context, *connect_go.Request[v0alpha.GetSmsConversationAssignedAgentByIdReq]) (*connect_go.Response[v0alpha.GetSmsConversationAssignedAgentByIdRes], error)
	// List InboundSmsTasks defined by ListInboundSmsTasksByGroupIdsReq message.
	// Gets all of the Inbound sms tasks for the groupids.
	// The method will return a stream of ListInboundSmsTasksByGroupIdsRes messages
	// containing InboundSmsTask
	// belonging to the inbound smsgroup.
	// Required permissions: VIEW_SMS
	ListInboundSmsTasksByGroupIds(context.Context, *connect_go.Request[v0alpha.ListInboundSmsTasksByGroupIdsReq]) (*connect_go.Response[v0alpha.ListInboundSmsTasksByGroupIdsRes], error)
	// Stop all OutboundSms groups defined by StopAllOutboundSmsGroupsReq message for the specified
	// array of outbound groups and client_sid.
	// The method will mark the OutboundSms groups as completed.
	// Required permissions: VIEW_SMS
	StopAllOutboundSmsGroups(context.Context, *connect_go.Request[v0alpha.StopAllOutboundSmsGroupsReq]) (*connect_go.Response[v0alpha.StopAllOutboundSmsGroupsRes], error)
	// Stop all InboundSms groups defined by StopAllInboundSmsGroupsReq message for the specified
	// array of inbound groups, region_id and org_id.
	// The method will mark the InboundSms groups as completed.
	// Required permissions: VIEW_SMS
	StopAllInboundSmsGroups(context.Context, *connect_go.Request[v0alpha.StopAllInboundSmsGroupsReq]) (*connect_go.Response[v0alpha.StopAllInboundSmsGroupsRes], error)
}

// NewSmsApiHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSmsApiHandler(svc SmsApiHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	smsApiListSmsTemplatesHandler := connect_go.NewUnaryHandler(
		SmsApiListSmsTemplatesProcedure,
		svc.ListSmsTemplates,
		opts...,
	)
	smsApiCreateSmsTemplateHandler := connect_go.NewUnaryHandler(
		SmsApiCreateSmsTemplateProcedure,
		svc.CreateSmsTemplate,
		opts...,
	)
	smsApiUpdateSmsTemplateHandler := connect_go.NewUnaryHandler(
		SmsApiUpdateSmsTemplateProcedure,
		svc.UpdateSmsTemplate,
		opts...,
	)
	smsApiDeleteSmsTemplateHandler := connect_go.NewUnaryHandler(
		SmsApiDeleteSmsTemplateProcedure,
		svc.DeleteSmsTemplate,
		opts...,
	)
	smsApiGetSmsTemplateBySidHandler := connect_go.NewUnaryHandler(
		SmsApiGetSmsTemplateBySidProcedure,
		svc.GetSmsTemplateBySid,
		opts...,
	)
	smsApiListSmsIntentTemplatesHandler := connect_go.NewUnaryHandler(
		SmsApiListSmsIntentTemplatesProcedure,
		svc.ListSmsIntentTemplates,
		opts...,
	)
	smsApiCreateSmsIntentTemplateHandler := connect_go.NewUnaryHandler(
		SmsApiCreateSmsIntentTemplateProcedure,
		svc.CreateSmsIntentTemplate,
		opts...,
	)
	smsApiUpdateSmsIntentTemplateHandler := connect_go.NewUnaryHandler(
		SmsApiUpdateSmsIntentTemplateProcedure,
		svc.UpdateSmsIntentTemplate,
		opts...,
	)
	smsApiDeleteSmsIntentTemplateHandler := connect_go.NewUnaryHandler(
		SmsApiDeleteSmsIntentTemplateProcedure,
		svc.DeleteSmsIntentTemplate,
		opts...,
	)
	smsApiGetSmsIntentTemplateBySidHandler := connect_go.NewUnaryHandler(
		SmsApiGetSmsIntentTemplateBySidProcedure,
		svc.GetSmsIntentTemplateBySid,
		opts...,
	)
	smsApiListSmsSourceNumbersHandler := connect_go.NewUnaryHandler(
		SmsApiListSmsSourceNumbersProcedure,
		svc.ListSmsSourceNumbers,
		opts...,
	)
	smsApiCreateSmsSourceNumberHandler := connect_go.NewUnaryHandler(
		SmsApiCreateSmsSourceNumberProcedure,
		svc.CreateSmsSourceNumber,
		opts...,
	)
	smsApiUpdateSmsSourceNumberHandler := connect_go.NewUnaryHandler(
		SmsApiUpdateSmsSourceNumberProcedure,
		svc.UpdateSmsSourceNumber,
		opts...,
	)
	smsApiDeleteSmsSourceNumberHandler := connect_go.NewUnaryHandler(
		SmsApiDeleteSmsSourceNumberProcedure,
		svc.DeleteSmsSourceNumber,
		opts...,
	)
	smsApiGetSmsSourceNumberBySidHandler := connect_go.NewUnaryHandler(
		SmsApiGetSmsSourceNumberBySidProcedure,
		svc.GetSmsSourceNumberBySid,
		opts...,
	)
	smsApiSendSmsNotificationHandler := connect_go.NewUnaryHandler(
		SmsApiSendSmsNotificationProcedure,
		svc.SendSmsNotification,
		opts...,
	)
	smsApiListSmsGroupByFiltersHandler := connect_go.NewUnaryHandler(
		SmsApiListSmsGroupByFiltersProcedure,
		svc.ListSmsGroupByFilters,
		opts...,
	)
	smsApiListSmsGroupsByGroupSidsHandler := connect_go.NewUnaryHandler(
		SmsApiListSmsGroupsByGroupSidsProcedure,
		svc.ListSmsGroupsByGroupSids,
		opts...,
	)
	smsApiListSmsTasksByGroupSidsHandler := connect_go.NewUnaryHandler(
		SmsApiListSmsTasksByGroupSidsProcedure,
		svc.ListSmsTasksByGroupSids,
		opts...,
	)
	smsApiListSmsGroupByFiltersForAuditHandler := connect_go.NewUnaryHandler(
		SmsApiListSmsGroupByFiltersForAuditProcedure,
		svc.ListSmsGroupByFiltersForAudit,
		opts...,
	)
	smsApiListSmsGroupsByGroupSidsForAuditHandler := connect_go.NewUnaryHandler(
		SmsApiListSmsGroupsByGroupSidsForAuditProcedure,
		svc.ListSmsGroupsByGroupSidsForAudit,
		opts...,
	)
	smsApiListSmsTasksByGroupSidsForAuditHandler := connect_go.NewUnaryHandler(
		SmsApiListSmsTasksByGroupSidsForAuditProcedure,
		svc.ListSmsTasksByGroupSidsForAudit,
		opts...,
	)
	smsApiListSmsTasksWithDetailedStatusHandler := connect_go.NewUnaryHandler(
		SmsApiListSmsTasksWithDetailedStatusProcedure,
		svc.ListSmsTasksWithDetailedStatus,
		opts...,
	)
	smsApiUpdateSmsGroupStatusHandler := connect_go.NewUnaryHandler(
		SmsApiUpdateSmsGroupStatusProcedure,
		svc.UpdateSmsGroupStatus,
		opts...,
	)
	smsApiUpdateSmsGroupSendsPerMinuteHandler := connect_go.NewUnaryHandler(
		SmsApiUpdateSmsGroupSendsPerMinuteProcedure,
		svc.UpdateSmsGroupSendsPerMinute,
		opts...,
	)
	smsApiUpdateSmsGroupScheduleTimesHandler := connect_go.NewUnaryHandler(
		SmsApiUpdateSmsGroupScheduleTimesProcedure,
		svc.UpdateSmsGroupScheduleTimes,
		opts...,
	)
	smsApiScheduleSmsHandler := connect_go.NewUnaryHandler(
		SmsApiScheduleSmsProcedure,
		svc.ScheduleSms,
		opts...,
	)
	smsApiResendUnconnectedSmsHandler := connect_go.NewUnaryHandler(
		SmsApiResendUnconnectedSmsProcedure,
		svc.ResendUnconnectedSms,
		opts...,
	)
	smsApiSmsActivitySearchHandler := connect_go.NewUnaryHandler(
		SmsApiSmsActivitySearchProcedure,
		svc.SmsActivitySearch,
		opts...,
	)
	smsApiCreateInboundSmsTemplateHandler := connect_go.NewUnaryHandler(
		SmsApiCreateInboundSmsTemplateProcedure,
		svc.CreateInboundSmsTemplate,
		opts...,
	)
	smsApiUpdateInboundSmsTemplateHandler := connect_go.NewUnaryHandler(
		SmsApiUpdateInboundSmsTemplateProcedure,
		svc.UpdateInboundSmsTemplate,
		opts...,
	)
	smsApiDeleteInboundSmsTemplateHandler := connect_go.NewUnaryHandler(
		SmsApiDeleteInboundSmsTemplateProcedure,
		svc.DeleteInboundSmsTemplate,
		opts...,
	)
	smsApiListInboundSmsTemplatesHandler := connect_go.NewUnaryHandler(
		SmsApiListInboundSmsTemplatesProcedure,
		svc.ListInboundSmsTemplates,
		opts...,
	)
	smsApiGetInboundSmsTemplateByIdHandler := connect_go.NewUnaryHandler(
		SmsApiGetInboundSmsTemplateByIdProcedure,
		svc.GetInboundSmsTemplateById,
		opts...,
	)
	smsApiCreateInboundSmsGroupHandler := connect_go.NewUnaryHandler(
		SmsApiCreateInboundSmsGroupProcedure,
		svc.CreateInboundSmsGroup,
		opts...,
	)
	smsApiUpdateInboundSmsGroupHandler := connect_go.NewUnaryHandler(
		SmsApiUpdateInboundSmsGroupProcedure,
		svc.UpdateInboundSmsGroup,
		opts...,
	)
	smsApiDeleteInboundSmsGroupHandler := connect_go.NewUnaryHandler(
		SmsApiDeleteInboundSmsGroupProcedure,
		svc.DeleteInboundSmsGroup,
		opts...,
	)
	smsApiListInboundSmsGroupsHandler := connect_go.NewUnaryHandler(
		SmsApiListInboundSmsGroupsProcedure,
		svc.ListInboundSmsGroups,
		opts...,
	)
	smsApiListActiveInboundSmsGroupsHandler := connect_go.NewUnaryHandler(
		SmsApiListActiveInboundSmsGroupsProcedure,
		svc.ListActiveInboundSmsGroups,
		opts...,
	)
	smsApiListInboundSmsGroupByFiltersHandler := connect_go.NewUnaryHandler(
		SmsApiListInboundSmsGroupByFiltersProcedure,
		svc.ListInboundSmsGroupByFilters,
		opts...,
	)
	smsApiGetInboundSmsGroupByIdHandler := connect_go.NewUnaryHandler(
		SmsApiGetInboundSmsGroupByIdProcedure,
		svc.GetInboundSmsGroupById,
		opts...,
	)
	smsApiListInboundSmsGroupsByGroupIdsHandler := connect_go.NewUnaryHandler(
		SmsApiListInboundSmsGroupsByGroupIdsProcedure,
		svc.ListInboundSmsGroupsByGroupIds,
		opts...,
	)
	smsApiStopInboundSmsGroupHandler := connect_go.NewUnaryHandler(
		SmsApiStopInboundSmsGroupProcedure,
		svc.StopInboundSmsGroup,
		opts...,
	)
	smsApiScheduleInboundSmsHandler := connect_go.NewUnaryHandler(
		SmsApiScheduleInboundSmsProcedure,
		svc.ScheduleInboundSms,
		opts...,
	)
	smsApiCreateSmsConversationHandler := connect_go.NewUnaryHandler(
		SmsApiCreateSmsConversationProcedure,
		svc.CreateSmsConversation,
		opts...,
	)
	smsApiUpdateSmsConversationHandler := connect_go.NewUnaryHandler(
		SmsApiUpdateSmsConversationProcedure,
		svc.UpdateSmsConversation,
		opts...,
	)
	smsApiDeleteSmsConversationHandler := connect_go.NewUnaryHandler(
		SmsApiDeleteSmsConversationProcedure,
		svc.DeleteSmsConversation,
		opts...,
	)
	smsApiListSmsConversationsHandler := connect_go.NewUnaryHandler(
		SmsApiListSmsConversationsProcedure,
		svc.ListSmsConversations,
		opts...,
	)
	smsApiGetSmsConversationByIdHandler := connect_go.NewUnaryHandler(
		SmsApiGetSmsConversationByIdProcedure,
		svc.GetSmsConversationById,
		opts...,
	)
	smsApiGetSmsMessageHandler := connect_go.NewUnaryHandler(
		SmsApiGetSmsMessageProcedure,
		svc.GetSmsMessage,
		opts...,
	)
	smsApiCreateSmsConversationAuditHandler := connect_go.NewUnaryHandler(
		SmsApiCreateSmsConversationAuditProcedure,
		svc.CreateSmsConversationAudit,
		opts...,
	)
	smsApiListSmsConversationAuditsHandler := connect_go.NewUnaryHandler(
		SmsApiListSmsConversationAuditsProcedure,
		svc.ListSmsConversationAudits,
		opts...,
	)
	smsApiGetSmsConversationAuditByIdHandler := connect_go.NewUnaryHandler(
		SmsApiGetSmsConversationAuditByIdProcedure,
		svc.GetSmsConversationAuditById,
		opts...,
	)
	smsApiCreateSmsConversationAssignedAgentHandler := connect_go.NewUnaryHandler(
		SmsApiCreateSmsConversationAssignedAgentProcedure,
		svc.CreateSmsConversationAssignedAgent,
		opts...,
	)
	smsApiListSmsConversationAssignedAgentsHandler := connect_go.NewUnaryHandler(
		SmsApiListSmsConversationAssignedAgentsProcedure,
		svc.ListSmsConversationAssignedAgents,
		opts...,
	)
	smsApiGetSmsConversationAssignedAgentByIdHandler := connect_go.NewUnaryHandler(
		SmsApiGetSmsConversationAssignedAgentByIdProcedure,
		svc.GetSmsConversationAssignedAgentById,
		opts...,
	)
	smsApiListInboundSmsTasksByGroupIdsHandler := connect_go.NewUnaryHandler(
		SmsApiListInboundSmsTasksByGroupIdsProcedure,
		svc.ListInboundSmsTasksByGroupIds,
		opts...,
	)
	smsApiStopAllOutboundSmsGroupsHandler := connect_go.NewUnaryHandler(
		SmsApiStopAllOutboundSmsGroupsProcedure,
		svc.StopAllOutboundSmsGroups,
		opts...,
	)
	smsApiStopAllInboundSmsGroupsHandler := connect_go.NewUnaryHandler(
		SmsApiStopAllInboundSmsGroupsProcedure,
		svc.StopAllInboundSmsGroups,
		opts...,
	)
	return "/api.v0alpha.SmsApi/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SmsApiListSmsTemplatesProcedure:
			smsApiListSmsTemplatesHandler.ServeHTTP(w, r)
		case SmsApiCreateSmsTemplateProcedure:
			smsApiCreateSmsTemplateHandler.ServeHTTP(w, r)
		case SmsApiUpdateSmsTemplateProcedure:
			smsApiUpdateSmsTemplateHandler.ServeHTTP(w, r)
		case SmsApiDeleteSmsTemplateProcedure:
			smsApiDeleteSmsTemplateHandler.ServeHTTP(w, r)
		case SmsApiGetSmsTemplateBySidProcedure:
			smsApiGetSmsTemplateBySidHandler.ServeHTTP(w, r)
		case SmsApiListSmsIntentTemplatesProcedure:
			smsApiListSmsIntentTemplatesHandler.ServeHTTP(w, r)
		case SmsApiCreateSmsIntentTemplateProcedure:
			smsApiCreateSmsIntentTemplateHandler.ServeHTTP(w, r)
		case SmsApiUpdateSmsIntentTemplateProcedure:
			smsApiUpdateSmsIntentTemplateHandler.ServeHTTP(w, r)
		case SmsApiDeleteSmsIntentTemplateProcedure:
			smsApiDeleteSmsIntentTemplateHandler.ServeHTTP(w, r)
		case SmsApiGetSmsIntentTemplateBySidProcedure:
			smsApiGetSmsIntentTemplateBySidHandler.ServeHTTP(w, r)
		case SmsApiListSmsSourceNumbersProcedure:
			smsApiListSmsSourceNumbersHandler.ServeHTTP(w, r)
		case SmsApiCreateSmsSourceNumberProcedure:
			smsApiCreateSmsSourceNumberHandler.ServeHTTP(w, r)
		case SmsApiUpdateSmsSourceNumberProcedure:
			smsApiUpdateSmsSourceNumberHandler.ServeHTTP(w, r)
		case SmsApiDeleteSmsSourceNumberProcedure:
			smsApiDeleteSmsSourceNumberHandler.ServeHTTP(w, r)
		case SmsApiGetSmsSourceNumberBySidProcedure:
			smsApiGetSmsSourceNumberBySidHandler.ServeHTTP(w, r)
		case SmsApiSendSmsNotificationProcedure:
			smsApiSendSmsNotificationHandler.ServeHTTP(w, r)
		case SmsApiListSmsGroupByFiltersProcedure:
			smsApiListSmsGroupByFiltersHandler.ServeHTTP(w, r)
		case SmsApiListSmsGroupsByGroupSidsProcedure:
			smsApiListSmsGroupsByGroupSidsHandler.ServeHTTP(w, r)
		case SmsApiListSmsTasksByGroupSidsProcedure:
			smsApiListSmsTasksByGroupSidsHandler.ServeHTTP(w, r)
		case SmsApiListSmsGroupByFiltersForAuditProcedure:
			smsApiListSmsGroupByFiltersForAuditHandler.ServeHTTP(w, r)
		case SmsApiListSmsGroupsByGroupSidsForAuditProcedure:
			smsApiListSmsGroupsByGroupSidsForAuditHandler.ServeHTTP(w, r)
		case SmsApiListSmsTasksByGroupSidsForAuditProcedure:
			smsApiListSmsTasksByGroupSidsForAuditHandler.ServeHTTP(w, r)
		case SmsApiListSmsTasksWithDetailedStatusProcedure:
			smsApiListSmsTasksWithDetailedStatusHandler.ServeHTTP(w, r)
		case SmsApiUpdateSmsGroupStatusProcedure:
			smsApiUpdateSmsGroupStatusHandler.ServeHTTP(w, r)
		case SmsApiUpdateSmsGroupSendsPerMinuteProcedure:
			smsApiUpdateSmsGroupSendsPerMinuteHandler.ServeHTTP(w, r)
		case SmsApiUpdateSmsGroupScheduleTimesProcedure:
			smsApiUpdateSmsGroupScheduleTimesHandler.ServeHTTP(w, r)
		case SmsApiScheduleSmsProcedure:
			smsApiScheduleSmsHandler.ServeHTTP(w, r)
		case SmsApiResendUnconnectedSmsProcedure:
			smsApiResendUnconnectedSmsHandler.ServeHTTP(w, r)
		case SmsApiSmsActivitySearchProcedure:
			smsApiSmsActivitySearchHandler.ServeHTTP(w, r)
		case SmsApiCreateInboundSmsTemplateProcedure:
			smsApiCreateInboundSmsTemplateHandler.ServeHTTP(w, r)
		case SmsApiUpdateInboundSmsTemplateProcedure:
			smsApiUpdateInboundSmsTemplateHandler.ServeHTTP(w, r)
		case SmsApiDeleteInboundSmsTemplateProcedure:
			smsApiDeleteInboundSmsTemplateHandler.ServeHTTP(w, r)
		case SmsApiListInboundSmsTemplatesProcedure:
			smsApiListInboundSmsTemplatesHandler.ServeHTTP(w, r)
		case SmsApiGetInboundSmsTemplateByIdProcedure:
			smsApiGetInboundSmsTemplateByIdHandler.ServeHTTP(w, r)
		case SmsApiCreateInboundSmsGroupProcedure:
			smsApiCreateInboundSmsGroupHandler.ServeHTTP(w, r)
		case SmsApiUpdateInboundSmsGroupProcedure:
			smsApiUpdateInboundSmsGroupHandler.ServeHTTP(w, r)
		case SmsApiDeleteInboundSmsGroupProcedure:
			smsApiDeleteInboundSmsGroupHandler.ServeHTTP(w, r)
		case SmsApiListInboundSmsGroupsProcedure:
			smsApiListInboundSmsGroupsHandler.ServeHTTP(w, r)
		case SmsApiListActiveInboundSmsGroupsProcedure:
			smsApiListActiveInboundSmsGroupsHandler.ServeHTTP(w, r)
		case SmsApiListInboundSmsGroupByFiltersProcedure:
			smsApiListInboundSmsGroupByFiltersHandler.ServeHTTP(w, r)
		case SmsApiGetInboundSmsGroupByIdProcedure:
			smsApiGetInboundSmsGroupByIdHandler.ServeHTTP(w, r)
		case SmsApiListInboundSmsGroupsByGroupIdsProcedure:
			smsApiListInboundSmsGroupsByGroupIdsHandler.ServeHTTP(w, r)
		case SmsApiStopInboundSmsGroupProcedure:
			smsApiStopInboundSmsGroupHandler.ServeHTTP(w, r)
		case SmsApiScheduleInboundSmsProcedure:
			smsApiScheduleInboundSmsHandler.ServeHTTP(w, r)
		case SmsApiCreateSmsConversationProcedure:
			smsApiCreateSmsConversationHandler.ServeHTTP(w, r)
		case SmsApiUpdateSmsConversationProcedure:
			smsApiUpdateSmsConversationHandler.ServeHTTP(w, r)
		case SmsApiDeleteSmsConversationProcedure:
			smsApiDeleteSmsConversationHandler.ServeHTTP(w, r)
		case SmsApiListSmsConversationsProcedure:
			smsApiListSmsConversationsHandler.ServeHTTP(w, r)
		case SmsApiGetSmsConversationByIdProcedure:
			smsApiGetSmsConversationByIdHandler.ServeHTTP(w, r)
		case SmsApiGetSmsMessageProcedure:
			smsApiGetSmsMessageHandler.ServeHTTP(w, r)
		case SmsApiCreateSmsConversationAuditProcedure:
			smsApiCreateSmsConversationAuditHandler.ServeHTTP(w, r)
		case SmsApiListSmsConversationAuditsProcedure:
			smsApiListSmsConversationAuditsHandler.ServeHTTP(w, r)
		case SmsApiGetSmsConversationAuditByIdProcedure:
			smsApiGetSmsConversationAuditByIdHandler.ServeHTTP(w, r)
		case SmsApiCreateSmsConversationAssignedAgentProcedure:
			smsApiCreateSmsConversationAssignedAgentHandler.ServeHTTP(w, r)
		case SmsApiListSmsConversationAssignedAgentsProcedure:
			smsApiListSmsConversationAssignedAgentsHandler.ServeHTTP(w, r)
		case SmsApiGetSmsConversationAssignedAgentByIdProcedure:
			smsApiGetSmsConversationAssignedAgentByIdHandler.ServeHTTP(w, r)
		case SmsApiListInboundSmsTasksByGroupIdsProcedure:
			smsApiListInboundSmsTasksByGroupIdsHandler.ServeHTTP(w, r)
		case SmsApiStopAllOutboundSmsGroupsProcedure:
			smsApiStopAllOutboundSmsGroupsHandler.ServeHTTP(w, r)
		case SmsApiStopAllInboundSmsGroupsProcedure:
			smsApiStopAllInboundSmsGroupsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSmsApiHandler returns CodeUnimplemented from all methods.
type UnimplementedSmsApiHandler struct{}

func (UnimplementedSmsApiHandler) ListSmsTemplates(context.Context, *connect_go.Request[v0alpha.ListSmsTemplatesReq]) (*connect_go.Response[v0alpha.ListSmsTemplatesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.ListSmsTemplates is not implemented"))
}

func (UnimplementedSmsApiHandler) CreateSmsTemplate(context.Context, *connect_go.Request[v0alpha.CreateSmsTemplateReq]) (*connect_go.Response[v0alpha.CreateSmsTemplateRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.CreateSmsTemplate is not implemented"))
}

func (UnimplementedSmsApiHandler) UpdateSmsTemplate(context.Context, *connect_go.Request[v0alpha.UpdateSmsTemplateReq]) (*connect_go.Response[v0alpha.UpdateSmsTemplateRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.UpdateSmsTemplate is not implemented"))
}

func (UnimplementedSmsApiHandler) DeleteSmsTemplate(context.Context, *connect_go.Request[v0alpha.DeleteSmsTemplateReq]) (*connect_go.Response[v0alpha.DeleteSmsTemplateRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.DeleteSmsTemplate is not implemented"))
}

func (UnimplementedSmsApiHandler) GetSmsTemplateBySid(context.Context, *connect_go.Request[v0alpha.GetSmsTemplateBySidReq]) (*connect_go.Response[v0alpha.GetSmsTemplateBySidRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.GetSmsTemplateBySid is not implemented"))
}

func (UnimplementedSmsApiHandler) ListSmsIntentTemplates(context.Context, *connect_go.Request[v0alpha.ListSmsIntentTemplatesReq]) (*connect_go.Response[v0alpha.ListSmsIntentTemplatesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.ListSmsIntentTemplates is not implemented"))
}

func (UnimplementedSmsApiHandler) CreateSmsIntentTemplate(context.Context, *connect_go.Request[v0alpha.SmsIntentTemplate]) (*connect_go.Response[v0alpha.CreateSmsIntentTemplateRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.CreateSmsIntentTemplate is not implemented"))
}

func (UnimplementedSmsApiHandler) UpdateSmsIntentTemplate(context.Context, *connect_go.Request[v0alpha.SmsIntentTemplate]) (*connect_go.Response[v0alpha.UpdateSmsIntentTemplateRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.UpdateSmsIntentTemplate is not implemented"))
}

func (UnimplementedSmsApiHandler) DeleteSmsIntentTemplate(context.Context, *connect_go.Request[v0alpha.DeleteSmsIntentTemplateReq]) (*connect_go.Response[v0alpha.DeleteSmsIntentTemplateRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.DeleteSmsIntentTemplate is not implemented"))
}

func (UnimplementedSmsApiHandler) GetSmsIntentTemplateBySid(context.Context, *connect_go.Request[v0alpha.GetSmsIntentTemplateBySidReq]) (*connect_go.Response[v0alpha.SmsIntentTemplate], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.GetSmsIntentTemplateBySid is not implemented"))
}

func (UnimplementedSmsApiHandler) ListSmsSourceNumbers(context.Context, *connect_go.Request[v0alpha.ListSmsSourceNumbersReq]) (*connect_go.Response[v0alpha.ListSmsSourceNumbersRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.ListSmsSourceNumbers is not implemented"))
}

func (UnimplementedSmsApiHandler) CreateSmsSourceNumber(context.Context, *connect_go.Request[v0alpha.CreateSmsSourceNumberReq]) (*connect_go.Response[v0alpha.CreateSmsSourceNumberRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.CreateSmsSourceNumber is not implemented"))
}

func (UnimplementedSmsApiHandler) UpdateSmsSourceNumber(context.Context, *connect_go.Request[v0alpha.UpdateSmsSourceNumberReq]) (*connect_go.Response[v0alpha.UpdateSmsSourceNumberRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.UpdateSmsSourceNumber is not implemented"))
}

func (UnimplementedSmsApiHandler) DeleteSmsSourceNumber(context.Context, *connect_go.Request[v0alpha.DeleteSmsSourceNumberReq]) (*connect_go.Response[v0alpha.DeleteSmsSourceNumberRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.DeleteSmsSourceNumber is not implemented"))
}

func (UnimplementedSmsApiHandler) GetSmsSourceNumberBySid(context.Context, *connect_go.Request[v0alpha.GetSmsSourceNumberBySidReq]) (*connect_go.Response[v0alpha.SmsNumbers], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.GetSmsSourceNumberBySid is not implemented"))
}

func (UnimplementedSmsApiHandler) SendSmsNotification(context.Context, *connect_go.Request[v0alpha.SendSmsNotificationReq]) (*connect_go.Response[v0alpha.SendSmsNotificationRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.SendSmsNotification is not implemented"))
}

func (UnimplementedSmsApiHandler) ListSmsGroupByFilters(context.Context, *connect_go.Request[v0alpha.ListSmsGroupByFiltersReq]) (*connect_go.Response[v0alpha.ListSmsGroupByFiltersRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.ListSmsGroupByFilters is not implemented"))
}

func (UnimplementedSmsApiHandler) ListSmsGroupsByGroupSids(context.Context, *connect_go.Request[v0alpha.ListSmsGroupsByGroupSidsReq]) (*connect_go.Response[v0alpha.ListSmsGroupsByGroupSidsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.ListSmsGroupsByGroupSids is not implemented"))
}

func (UnimplementedSmsApiHandler) ListSmsTasksByGroupSids(context.Context, *connect_go.Request[v0alpha.ListSmsTasksByGroupSidsReq]) (*connect_go.Response[v0alpha.ListSmsTasksByGroupSidsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.ListSmsTasksByGroupSids is not implemented"))
}

func (UnimplementedSmsApiHandler) ListSmsGroupByFiltersForAudit(context.Context, *connect_go.Request[v0alpha.ListSmsGroupByFiltersReq]) (*connect_go.Response[v0alpha.ListSmsGroupByFiltersRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.ListSmsGroupByFiltersForAudit is not implemented"))
}

func (UnimplementedSmsApiHandler) ListSmsGroupsByGroupSidsForAudit(context.Context, *connect_go.Request[v0alpha.ListSmsGroupsByGroupSidsReq]) (*connect_go.Response[v0alpha.ListSmsGroupsByGroupSidsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.ListSmsGroupsByGroupSidsForAudit is not implemented"))
}

func (UnimplementedSmsApiHandler) ListSmsTasksByGroupSidsForAudit(context.Context, *connect_go.Request[v0alpha.ListSmsTasksByGroupSidsReq]) (*connect_go.Response[v0alpha.ListSmsTasksByGroupSidsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.ListSmsTasksByGroupSidsForAudit is not implemented"))
}

func (UnimplementedSmsApiHandler) ListSmsTasksWithDetailedStatus(context.Context, *connect_go.Request[v0alpha.ListSmsTasksWithDetailedStatusReq]) (*connect_go.Response[v0alpha.ListSmsTasksWithDetailedStatusRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.ListSmsTasksWithDetailedStatus is not implemented"))
}

func (UnimplementedSmsApiHandler) UpdateSmsGroupStatus(context.Context, *connect_go.Request[v0alpha.SmsGroupInfo]) (*connect_go.Response[v0alpha.UpdateSmsGroupRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.UpdateSmsGroupStatus is not implemented"))
}

func (UnimplementedSmsApiHandler) UpdateSmsGroupSendsPerMinute(context.Context, *connect_go.Request[v0alpha.SmsGroupInfo]) (*connect_go.Response[v0alpha.UpdateSmsGroupRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.UpdateSmsGroupSendsPerMinute is not implemented"))
}

func (UnimplementedSmsApiHandler) UpdateSmsGroupScheduleTimes(context.Context, *connect_go.Request[v0alpha.SmsGroupInfo]) (*connect_go.Response[v0alpha.UpdateSmsGroupRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.UpdateSmsGroupScheduleTimes is not implemented"))
}

func (UnimplementedSmsApiHandler) ScheduleSms(context.Context, *connect_go.Request[v0alpha.ScheduleSmsReq]) (*connect_go.Response[v0alpha.ScheduleSmsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.ScheduleSms is not implemented"))
}

func (UnimplementedSmsApiHandler) ResendUnconnectedSms(context.Context, *connect_go.Request[v0alpha.ResendUnconnectedSmsReq]) (*connect_go.Response[v0alpha.ResendUnconnectedSmsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.ResendUnconnectedSms is not implemented"))
}

func (UnimplementedSmsApiHandler) SmsActivitySearch(context.Context, *connect_go.Request[v0alpha.SmsActivitySearchReq]) (*connect_go.Response[v0alpha.SmsActivitySearchRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.SmsActivitySearch is not implemented"))
}

func (UnimplementedSmsApiHandler) CreateInboundSmsTemplate(context.Context, *connect_go.Request[v0alpha.CreateInboundSmsTemplateReq]) (*connect_go.Response[v0alpha.CreateInboundSmsTemplateRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.CreateInboundSmsTemplate is not implemented"))
}

func (UnimplementedSmsApiHandler) UpdateInboundSmsTemplate(context.Context, *connect_go.Request[v0alpha.UpdateInboundSmsTemplateReq]) (*connect_go.Response[v0alpha.UpdateInboundSmsTemplateRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.UpdateInboundSmsTemplate is not implemented"))
}

func (UnimplementedSmsApiHandler) DeleteInboundSmsTemplate(context.Context, *connect_go.Request[v0alpha.DeleteInboundSmsTemplateReq]) (*connect_go.Response[v0alpha.DeleteInboundSmsTemplateRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.DeleteInboundSmsTemplate is not implemented"))
}

func (UnimplementedSmsApiHandler) ListInboundSmsTemplates(context.Context, *connect_go.Request[v0alpha.ListInboundSmsTemplatesReq]) (*connect_go.Response[v0alpha.ListInboundSmsTemplatesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.ListInboundSmsTemplates is not implemented"))
}

func (UnimplementedSmsApiHandler) GetInboundSmsTemplateById(context.Context, *connect_go.Request[v0alpha.GetInboundSmsTemplateByIdReq]) (*connect_go.Response[v0alpha.GetInboundSmsTemplateByIdRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.GetInboundSmsTemplateById is not implemented"))
}

func (UnimplementedSmsApiHandler) CreateInboundSmsGroup(context.Context, *connect_go.Request[v0alpha.CreateInboundSmsGroupReq]) (*connect_go.Response[v0alpha.CreateInboundSmsGroupRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.CreateInboundSmsGroup is not implemented"))
}

func (UnimplementedSmsApiHandler) UpdateInboundSmsGroup(context.Context, *connect_go.Request[v0alpha.UpdateInboundSmsGroupReq]) (*connect_go.Response[v0alpha.UpdateInboundSmsGroupRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.UpdateInboundSmsGroup is not implemented"))
}

func (UnimplementedSmsApiHandler) DeleteInboundSmsGroup(context.Context, *connect_go.Request[v0alpha.DeleteInboundSmsGroupReq]) (*connect_go.Response[v0alpha.DeleteInboundSmsGroupRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.DeleteInboundSmsGroup is not implemented"))
}

func (UnimplementedSmsApiHandler) ListInboundSmsGroups(context.Context, *connect_go.Request[v0alpha.ListInboundSmsGroupsReq]) (*connect_go.Response[v0alpha.ListInboundSmsGroupsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.ListInboundSmsGroups is not implemented"))
}

func (UnimplementedSmsApiHandler) ListActiveInboundSmsGroups(context.Context, *connect_go.Request[v0alpha.ListActiveInboundSmsGroupsReq]) (*connect_go.Response[v0alpha.ListActiveInboundSmsGroupsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.ListActiveInboundSmsGroups is not implemented"))
}

func (UnimplementedSmsApiHandler) ListInboundSmsGroupByFilters(context.Context, *connect_go.Request[v0alpha.ListInboundSmsGroupByFiltersReq]) (*connect_go.Response[v0alpha.ListInboundSmsGroupByFiltersRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.ListInboundSmsGroupByFilters is not implemented"))
}

func (UnimplementedSmsApiHandler) GetInboundSmsGroupById(context.Context, *connect_go.Request[v0alpha.GetInboundSmsGroupByIdReq]) (*connect_go.Response[v0alpha.GetInboundSmsGroupByIdRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.GetInboundSmsGroupById is not implemented"))
}

func (UnimplementedSmsApiHandler) ListInboundSmsGroupsByGroupIds(context.Context, *connect_go.Request[v0alpha.ListInboundSmsGroupsByGroupIdsReq]) (*connect_go.Response[v0alpha.ListInboundSmsGroupsByGroupIdsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.ListInboundSmsGroupsByGroupIds is not implemented"))
}

func (UnimplementedSmsApiHandler) StopInboundSmsGroup(context.Context, *connect_go.Request[v0alpha.StopInboundSmsGroupReq]) (*connect_go.Response[v0alpha.StopInboundSmsGroupRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.StopInboundSmsGroup is not implemented"))
}

func (UnimplementedSmsApiHandler) ScheduleInboundSms(context.Context, *connect_go.Request[v0alpha.ScheduleInboundSmsReq]) (*connect_go.Response[v0alpha.ScheduleInboundSmsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.ScheduleInboundSms is not implemented"))
}

func (UnimplementedSmsApiHandler) CreateSmsConversation(context.Context, *connect_go.Request[v0alpha.CreateSmsConversationReq]) (*connect_go.Response[v0alpha.CreateSmsConversationRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.CreateSmsConversation is not implemented"))
}

func (UnimplementedSmsApiHandler) UpdateSmsConversation(context.Context, *connect_go.Request[v0alpha.UpdateSmsConversationReq]) (*connect_go.Response[v0alpha.UpdateSmsConversationRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.UpdateSmsConversation is not implemented"))
}

func (UnimplementedSmsApiHandler) DeleteSmsConversation(context.Context, *connect_go.Request[v0alpha.DeleteSmsConversationReq]) (*connect_go.Response[v0alpha.DeleteSmsConversationRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.DeleteSmsConversation is not implemented"))
}

func (UnimplementedSmsApiHandler) ListSmsConversations(context.Context, *connect_go.Request[v0alpha.ListSmsConversationsReq]) (*connect_go.Response[v0alpha.ListSmsConversationsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.ListSmsConversations is not implemented"))
}

func (UnimplementedSmsApiHandler) GetSmsConversationById(context.Context, *connect_go.Request[v0alpha.GetSmsConversationByIdReq]) (*connect_go.Response[v0alpha.GetSmsConversationByIdRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.GetSmsConversationById is not implemented"))
}

func (UnimplementedSmsApiHandler) GetSmsMessage(context.Context, *connect_go.Request[v0alpha.GetSmsMessageReq]) (*connect_go.Response[v0alpha.GetSmsMessageRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.GetSmsMessage is not implemented"))
}

func (UnimplementedSmsApiHandler) CreateSmsConversationAudit(context.Context, *connect_go.Request[v0alpha.SmsConversationAudit]) (*connect_go.Response[v0alpha.CreateSmsConversationAuditRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.CreateSmsConversationAudit is not implemented"))
}

func (UnimplementedSmsApiHandler) ListSmsConversationAudits(context.Context, *connect_go.Request[v0alpha.ListSmsConversationAuditsReq]) (*connect_go.Response[v0alpha.ListSmsConversationAuditsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.ListSmsConversationAudits is not implemented"))
}

func (UnimplementedSmsApiHandler) GetSmsConversationAuditById(context.Context, *connect_go.Request[v0alpha.GetSmsConversationAuditByIdReq]) (*connect_go.Response[v0alpha.GetSmsConversationAuditByIdRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.GetSmsConversationAuditById is not implemented"))
}

func (UnimplementedSmsApiHandler) CreateSmsConversationAssignedAgent(context.Context, *connect_go.Request[v0alpha.SmsConversationAssignedAgent]) (*connect_go.Response[v0alpha.CreateSmsConversationAssignedAgentRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.CreateSmsConversationAssignedAgent is not implemented"))
}

func (UnimplementedSmsApiHandler) ListSmsConversationAssignedAgents(context.Context, *connect_go.Request[v0alpha.ListSmsConversationAssignedAgentsReq]) (*connect_go.Response[v0alpha.ListSmsConversationAssignedAgentsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.ListSmsConversationAssignedAgents is not implemented"))
}

func (UnimplementedSmsApiHandler) GetSmsConversationAssignedAgentById(context.Context, *connect_go.Request[v0alpha.GetSmsConversationAssignedAgentByIdReq]) (*connect_go.Response[v0alpha.GetSmsConversationAssignedAgentByIdRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.GetSmsConversationAssignedAgentById is not implemented"))
}

func (UnimplementedSmsApiHandler) ListInboundSmsTasksByGroupIds(context.Context, *connect_go.Request[v0alpha.ListInboundSmsTasksByGroupIdsReq]) (*connect_go.Response[v0alpha.ListInboundSmsTasksByGroupIdsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.ListInboundSmsTasksByGroupIds is not implemented"))
}

func (UnimplementedSmsApiHandler) StopAllOutboundSmsGroups(context.Context, *connect_go.Request[v0alpha.StopAllOutboundSmsGroupsReq]) (*connect_go.Response[v0alpha.StopAllOutboundSmsGroupsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.StopAllOutboundSmsGroups is not implemented"))
}

func (UnimplementedSmsApiHandler) StopAllInboundSmsGroups(context.Context, *connect_go.Request[v0alpha.StopAllInboundSmsGroupsReq]) (*connect_go.Response[v0alpha.StopAllInboundSmsGroupsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.SmsApi.StopAllInboundSmsGroups is not implemented"))
}
