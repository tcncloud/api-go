// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v0alpha/sds.proto

package v0alphaconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v0alpha "github.com/tcncloud/api-go/api/v0alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SdsName is the fully-qualified name of the Sds service.
	SdsName = "api.v0alpha.Sds"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SdsGetAgentResponseDataProcedure is the fully-qualified name of the Sds's GetAgentResponseData
	// RPC.
	SdsGetAgentResponseDataProcedure = "/api.v0alpha.Sds/GetAgentResponseData"
	// SdsGetCallProcedure is the fully-qualified name of the Sds's GetCall RPC.
	SdsGetCallProcedure = "/api.v0alpha.Sds/GetCall"
	// SdsUpdateAgentResponseDataProcedure is the fully-qualified name of the Sds's
	// UpdateAgentResponseData RPC.
	SdsUpdateAgentResponseDataProcedure = "/api.v0alpha.Sds/UpdateAgentResponseData"
	// SdsUpdateVoicemailBoxProcedure is the fully-qualified name of the Sds's UpdateVoicemailBox RPC.
	SdsUpdateVoicemailBoxProcedure = "/api.v0alpha.Sds/UpdateVoicemailBox"
)

// SdsClient is a client for the api.v0alpha.Sds service.
type SdsClient interface {
	// Gets the agent_response_data field for a document in the mongodb calls collection.
	GetAgentResponseData(context.Context, *connect_go.Request[v0alpha.GetAgentResponseDataReq]) (*connect_go.Response[v0alpha.GetAgentResponseDataRes], error)
	// Gets a document from the mongodb calls collection.
	GetCall(context.Context, *connect_go.Request[v0alpha.GetCallReq]) (*connect_go.Response[v0alpha.CallObject], error)
	// Updates the agent_response_data field for a document in the mongodb calls collection.
	UpdateAgentResponseData(context.Context, *connect_go.Request[v0alpha.UpdateAgentResponseDataReq]) (*connect_go.Response[v0alpha.UpdateAgentResponseDataRes], error)
	// Updates the voicemail_box field for a document in the mongodb calls collection.
	UpdateVoicemailBox(context.Context, *connect_go.Request[v0alpha.UpdateVoicemailBoxReq]) (*connect_go.Response[v0alpha.UpdateVoicemailBoxRes], error)
}

// NewSdsClient constructs a client for the api.v0alpha.Sds service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSdsClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SdsClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sdsClient{
		getAgentResponseData: connect_go.NewClient[v0alpha.GetAgentResponseDataReq, v0alpha.GetAgentResponseDataRes](
			httpClient,
			baseURL+SdsGetAgentResponseDataProcedure,
			opts...,
		),
		getCall: connect_go.NewClient[v0alpha.GetCallReq, v0alpha.CallObject](
			httpClient,
			baseURL+SdsGetCallProcedure,
			opts...,
		),
		updateAgentResponseData: connect_go.NewClient[v0alpha.UpdateAgentResponseDataReq, v0alpha.UpdateAgentResponseDataRes](
			httpClient,
			baseURL+SdsUpdateAgentResponseDataProcedure,
			opts...,
		),
		updateVoicemailBox: connect_go.NewClient[v0alpha.UpdateVoicemailBoxReq, v0alpha.UpdateVoicemailBoxRes](
			httpClient,
			baseURL+SdsUpdateVoicemailBoxProcedure,
			opts...,
		),
	}
}

// sdsClient implements SdsClient.
type sdsClient struct {
	getAgentResponseData    *connect_go.Client[v0alpha.GetAgentResponseDataReq, v0alpha.GetAgentResponseDataRes]
	getCall                 *connect_go.Client[v0alpha.GetCallReq, v0alpha.CallObject]
	updateAgentResponseData *connect_go.Client[v0alpha.UpdateAgentResponseDataReq, v0alpha.UpdateAgentResponseDataRes]
	updateVoicemailBox      *connect_go.Client[v0alpha.UpdateVoicemailBoxReq, v0alpha.UpdateVoicemailBoxRes]
}

// GetAgentResponseData calls api.v0alpha.Sds.GetAgentResponseData.
func (c *sdsClient) GetAgentResponseData(ctx context.Context, req *connect_go.Request[v0alpha.GetAgentResponseDataReq]) (*connect_go.Response[v0alpha.GetAgentResponseDataRes], error) {
	return c.getAgentResponseData.CallUnary(ctx, req)
}

// GetCall calls api.v0alpha.Sds.GetCall.
func (c *sdsClient) GetCall(ctx context.Context, req *connect_go.Request[v0alpha.GetCallReq]) (*connect_go.Response[v0alpha.CallObject], error) {
	return c.getCall.CallUnary(ctx, req)
}

// UpdateAgentResponseData calls api.v0alpha.Sds.UpdateAgentResponseData.
func (c *sdsClient) UpdateAgentResponseData(ctx context.Context, req *connect_go.Request[v0alpha.UpdateAgentResponseDataReq]) (*connect_go.Response[v0alpha.UpdateAgentResponseDataRes], error) {
	return c.updateAgentResponseData.CallUnary(ctx, req)
}

// UpdateVoicemailBox calls api.v0alpha.Sds.UpdateVoicemailBox.
func (c *sdsClient) UpdateVoicemailBox(ctx context.Context, req *connect_go.Request[v0alpha.UpdateVoicemailBoxReq]) (*connect_go.Response[v0alpha.UpdateVoicemailBoxRes], error) {
	return c.updateVoicemailBox.CallUnary(ctx, req)
}

// SdsHandler is an implementation of the api.v0alpha.Sds service.
type SdsHandler interface {
	// Gets the agent_response_data field for a document in the mongodb calls collection.
	GetAgentResponseData(context.Context, *connect_go.Request[v0alpha.GetAgentResponseDataReq]) (*connect_go.Response[v0alpha.GetAgentResponseDataRes], error)
	// Gets a document from the mongodb calls collection.
	GetCall(context.Context, *connect_go.Request[v0alpha.GetCallReq]) (*connect_go.Response[v0alpha.CallObject], error)
	// Updates the agent_response_data field for a document in the mongodb calls collection.
	UpdateAgentResponseData(context.Context, *connect_go.Request[v0alpha.UpdateAgentResponseDataReq]) (*connect_go.Response[v0alpha.UpdateAgentResponseDataRes], error)
	// Updates the voicemail_box field for a document in the mongodb calls collection.
	UpdateVoicemailBox(context.Context, *connect_go.Request[v0alpha.UpdateVoicemailBoxReq]) (*connect_go.Response[v0alpha.UpdateVoicemailBoxRes], error)
}

// NewSdsHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSdsHandler(svc SdsHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	sdsGetAgentResponseDataHandler := connect_go.NewUnaryHandler(
		SdsGetAgentResponseDataProcedure,
		svc.GetAgentResponseData,
		opts...,
	)
	sdsGetCallHandler := connect_go.NewUnaryHandler(
		SdsGetCallProcedure,
		svc.GetCall,
		opts...,
	)
	sdsUpdateAgentResponseDataHandler := connect_go.NewUnaryHandler(
		SdsUpdateAgentResponseDataProcedure,
		svc.UpdateAgentResponseData,
		opts...,
	)
	sdsUpdateVoicemailBoxHandler := connect_go.NewUnaryHandler(
		SdsUpdateVoicemailBoxProcedure,
		svc.UpdateVoicemailBox,
		opts...,
	)
	return "/api.v0alpha.Sds/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SdsGetAgentResponseDataProcedure:
			sdsGetAgentResponseDataHandler.ServeHTTP(w, r)
		case SdsGetCallProcedure:
			sdsGetCallHandler.ServeHTTP(w, r)
		case SdsUpdateAgentResponseDataProcedure:
			sdsUpdateAgentResponseDataHandler.ServeHTTP(w, r)
		case SdsUpdateVoicemailBoxProcedure:
			sdsUpdateVoicemailBoxHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSdsHandler returns CodeUnimplemented from all methods.
type UnimplementedSdsHandler struct{}

func (UnimplementedSdsHandler) GetAgentResponseData(context.Context, *connect_go.Request[v0alpha.GetAgentResponseDataReq]) (*connect_go.Response[v0alpha.GetAgentResponseDataRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Sds.GetAgentResponseData is not implemented"))
}

func (UnimplementedSdsHandler) GetCall(context.Context, *connect_go.Request[v0alpha.GetCallReq]) (*connect_go.Response[v0alpha.CallObject], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Sds.GetCall is not implemented"))
}

func (UnimplementedSdsHandler) UpdateAgentResponseData(context.Context, *connect_go.Request[v0alpha.UpdateAgentResponseDataReq]) (*connect_go.Response[v0alpha.UpdateAgentResponseDataRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Sds.UpdateAgentResponseData is not implemented"))
}

func (UnimplementedSdsHandler) UpdateVoicemailBox(context.Context, *connect_go.Request[v0alpha.UpdateVoicemailBoxReq]) (*connect_go.Response[v0alpha.UpdateVoicemailBoxRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Sds.UpdateVoicemailBox is not implemented"))
}
