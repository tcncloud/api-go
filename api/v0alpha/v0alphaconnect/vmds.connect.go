// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v0alpha/vmds.proto

package v0alphaconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v0alpha "github.com/tcncloud/api-go/v0alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// VmdsName is the fully-qualified name of the Vmds service.
	VmdsName = "api.v0alpha.Vmds"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VmdsGetVoicemailMetadataProcedure is the fully-qualified name of the Vmds's GetVoicemailMetadata
	// RPC.
	VmdsGetVoicemailMetadataProcedure = "/api.v0alpha.Vmds/GetVoicemailMetadata"
	// VmdsGetVoicemailMessageCountProcedure is the fully-qualified name of the Vmds's
	// GetVoicemailMessageCount RPC.
	VmdsGetVoicemailMessageCountProcedure = "/api.v0alpha.Vmds/GetVoicemailMessageCount"
	// VmdsDeleteVoicemailProcedure is the fully-qualified name of the Vmds's DeleteVoicemail RPC.
	VmdsDeleteVoicemailProcedure = "/api.v0alpha.Vmds/DeleteVoicemail"
	// VmdsDeleteGreetingProcedure is the fully-qualified name of the Vmds's DeleteGreeting RPC.
	VmdsDeleteGreetingProcedure = "/api.v0alpha.Vmds/DeleteGreeting"
	// VmdsUpdateUploadNameProcedure is the fully-qualified name of the Vmds's UpdateUploadName RPC.
	VmdsUpdateUploadNameProcedure = "/api.v0alpha.Vmds/UpdateUploadName"
	// VmdsUpdateVoicemailFlagReadProcedure is the fully-qualified name of the Vmds's
	// UpdateVoicemailFlagRead RPC.
	VmdsUpdateVoicemailFlagReadProcedure = "/api.v0alpha.Vmds/UpdateVoicemailFlagRead"
	// VmdsDownloadMessageProcedure is the fully-qualified name of the Vmds's DownloadMessage RPC.
	VmdsDownloadMessageProcedure = "/api.v0alpha.Vmds/DownloadMessage"
	// VmdsDownloadMessagesProcedure is the fully-qualified name of the Vmds's DownloadMessages RPC.
	VmdsDownloadMessagesProcedure = "/api.v0alpha.Vmds/DownloadMessages"
	// VmdsDownloadGreetingForExtensionProcedure is the fully-qualified name of the Vmds's
	// DownloadGreetingForExtension RPC.
	VmdsDownloadGreetingForExtensionProcedure = "/api.v0alpha.Vmds/DownloadGreetingForExtension"
	// VmdsDownloadGreetingProcedure is the fully-qualified name of the Vmds's DownloadGreeting RPC.
	VmdsDownloadGreetingProcedure = "/api.v0alpha.Vmds/DownloadGreeting"
	// VmdsGetUploadGreetingUrlProcedure is the fully-qualified name of the Vmds's GetUploadGreetingUrl
	// RPC.
	VmdsGetUploadGreetingUrlProcedure = "/api.v0alpha.Vmds/GetUploadGreetingUrl"
	// VmdsProcessGreetingUploadProcedure is the fully-qualified name of the Vmds's
	// ProcessGreetingUpload RPC.
	VmdsProcessGreetingUploadProcedure = "/api.v0alpha.Vmds/ProcessGreetingUpload"
	// VmdsUpdateGreetingForExtensionProcedure is the fully-qualified name of the Vmds's
	// UpdateGreetingForExtension RPC.
	VmdsUpdateGreetingForExtensionProcedure = "/api.v0alpha.Vmds/UpdateGreetingForExtension"
	// VmdsListAvailableGreetingsProcedure is the fully-qualified name of the Vmds's
	// ListAvailableGreetings RPC.
	VmdsListAvailableGreetingsProcedure = "/api.v0alpha.Vmds/ListAvailableGreetings"
)

// VmdsClient is a client for the api.v0alpha.Vmds service.
type VmdsClient interface {
	GetVoicemailMetadata(context.Context, *connect_go.Request[v0alpha.GetVoicemailMetadataReq]) (*connect_go.ServerStreamForClient[v0alpha.GetVoicemailMetadataRes], error)
	GetVoicemailMessageCount(context.Context, *connect_go.Request[v0alpha.GetVoicemailCountReq]) (*connect_go.Response[v0alpha.GetVoicemailCountRes], error)
	DeleteVoicemail(context.Context, *connect_go.Request[v0alpha.DeleteVoicemailReq]) (*connect_go.Response[v0alpha.DeleteVoicemailRes], error)
	DeleteGreeting(context.Context, *connect_go.Request[v0alpha.DeleteGreetingReq]) (*connect_go.Response[v0alpha.DeleteGreetingRes], error)
	UpdateUploadName(context.Context, *connect_go.Request[v0alpha.UpdateUploadNameReq]) (*connect_go.Response[v0alpha.UpdateUploadNameRes], error)
	UpdateVoicemailFlagRead(context.Context, *connect_go.Request[v0alpha.UpdateVoicemailFlagReadReq]) (*connect_go.Response[v0alpha.UpdateVoicemailFlagReadRes], error)
	DownloadMessage(context.Context, *connect_go.Request[v0alpha.DownloadMessageReq]) (*connect_go.Response[v0alpha.DownloadMessageRes], error)
	DownloadMessages(context.Context, *connect_go.Request[v0alpha.DownloadMessagesReq]) (*connect_go.Response[v0alpha.DownloadMessagesRes], error)
	DownloadGreetingForExtension(context.Context, *connect_go.Request[v0alpha.DownloadGreetingForExtensionReq]) (*connect_go.Response[v0alpha.DownloadGreetingForExtensionRes], error)
	DownloadGreeting(context.Context, *connect_go.Request[v0alpha.DownloadGreetingReq]) (*connect_go.Response[v0alpha.DownloadGreetingRes], error)
	GetUploadGreetingUrl(context.Context, *connect_go.Request[v0alpha.GetUploadGreetingUrlReq]) (*connect_go.Response[v0alpha.GetUploadGreetingUrlRes], error)
	ProcessGreetingUpload(context.Context, *connect_go.Request[v0alpha.ProcessGreetingUploadReq]) (*connect_go.Response[v0alpha.ProcessGreetingUploadRes], error)
	UpdateGreetingForExtension(context.Context, *connect_go.Request[v0alpha.UpdateGreetingForExtensionReq]) (*connect_go.Response[v0alpha.UpdateGreetingForExtensionRes], error)
	ListAvailableGreetings(context.Context, *connect_go.Request[v0alpha.ListAvailableGreetingsReq]) (*connect_go.Response[v0alpha.ListAvailableGreetingsRes], error)
}

// NewVmdsClient constructs a client for the api.v0alpha.Vmds service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVmdsClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) VmdsClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &vmdsClient{
		getVoicemailMetadata: connect_go.NewClient[v0alpha.GetVoicemailMetadataReq, v0alpha.GetVoicemailMetadataRes](
			httpClient,
			baseURL+VmdsGetVoicemailMetadataProcedure,
			opts...,
		),
		getVoicemailMessageCount: connect_go.NewClient[v0alpha.GetVoicemailCountReq, v0alpha.GetVoicemailCountRes](
			httpClient,
			baseURL+VmdsGetVoicemailMessageCountProcedure,
			opts...,
		),
		deleteVoicemail: connect_go.NewClient[v0alpha.DeleteVoicemailReq, v0alpha.DeleteVoicemailRes](
			httpClient,
			baseURL+VmdsDeleteVoicemailProcedure,
			opts...,
		),
		deleteGreeting: connect_go.NewClient[v0alpha.DeleteGreetingReq, v0alpha.DeleteGreetingRes](
			httpClient,
			baseURL+VmdsDeleteGreetingProcedure,
			opts...,
		),
		updateUploadName: connect_go.NewClient[v0alpha.UpdateUploadNameReq, v0alpha.UpdateUploadNameRes](
			httpClient,
			baseURL+VmdsUpdateUploadNameProcedure,
			opts...,
		),
		updateVoicemailFlagRead: connect_go.NewClient[v0alpha.UpdateVoicemailFlagReadReq, v0alpha.UpdateVoicemailFlagReadRes](
			httpClient,
			baseURL+VmdsUpdateVoicemailFlagReadProcedure,
			opts...,
		),
		downloadMessage: connect_go.NewClient[v0alpha.DownloadMessageReq, v0alpha.DownloadMessageRes](
			httpClient,
			baseURL+VmdsDownloadMessageProcedure,
			opts...,
		),
		downloadMessages: connect_go.NewClient[v0alpha.DownloadMessagesReq, v0alpha.DownloadMessagesRes](
			httpClient,
			baseURL+VmdsDownloadMessagesProcedure,
			opts...,
		),
		downloadGreetingForExtension: connect_go.NewClient[v0alpha.DownloadGreetingForExtensionReq, v0alpha.DownloadGreetingForExtensionRes](
			httpClient,
			baseURL+VmdsDownloadGreetingForExtensionProcedure,
			opts...,
		),
		downloadGreeting: connect_go.NewClient[v0alpha.DownloadGreetingReq, v0alpha.DownloadGreetingRes](
			httpClient,
			baseURL+VmdsDownloadGreetingProcedure,
			opts...,
		),
		getUploadGreetingUrl: connect_go.NewClient[v0alpha.GetUploadGreetingUrlReq, v0alpha.GetUploadGreetingUrlRes](
			httpClient,
			baseURL+VmdsGetUploadGreetingUrlProcedure,
			opts...,
		),
		processGreetingUpload: connect_go.NewClient[v0alpha.ProcessGreetingUploadReq, v0alpha.ProcessGreetingUploadRes](
			httpClient,
			baseURL+VmdsProcessGreetingUploadProcedure,
			opts...,
		),
		updateGreetingForExtension: connect_go.NewClient[v0alpha.UpdateGreetingForExtensionReq, v0alpha.UpdateGreetingForExtensionRes](
			httpClient,
			baseURL+VmdsUpdateGreetingForExtensionProcedure,
			opts...,
		),
		listAvailableGreetings: connect_go.NewClient[v0alpha.ListAvailableGreetingsReq, v0alpha.ListAvailableGreetingsRes](
			httpClient,
			baseURL+VmdsListAvailableGreetingsProcedure,
			opts...,
		),
	}
}

// vmdsClient implements VmdsClient.
type vmdsClient struct {
	getVoicemailMetadata         *connect_go.Client[v0alpha.GetVoicemailMetadataReq, v0alpha.GetVoicemailMetadataRes]
	getVoicemailMessageCount     *connect_go.Client[v0alpha.GetVoicemailCountReq, v0alpha.GetVoicemailCountRes]
	deleteVoicemail              *connect_go.Client[v0alpha.DeleteVoicemailReq, v0alpha.DeleteVoicemailRes]
	deleteGreeting               *connect_go.Client[v0alpha.DeleteGreetingReq, v0alpha.DeleteGreetingRes]
	updateUploadName             *connect_go.Client[v0alpha.UpdateUploadNameReq, v0alpha.UpdateUploadNameRes]
	updateVoicemailFlagRead      *connect_go.Client[v0alpha.UpdateVoicemailFlagReadReq, v0alpha.UpdateVoicemailFlagReadRes]
	downloadMessage              *connect_go.Client[v0alpha.DownloadMessageReq, v0alpha.DownloadMessageRes]
	downloadMessages             *connect_go.Client[v0alpha.DownloadMessagesReq, v0alpha.DownloadMessagesRes]
	downloadGreetingForExtension *connect_go.Client[v0alpha.DownloadGreetingForExtensionReq, v0alpha.DownloadGreetingForExtensionRes]
	downloadGreeting             *connect_go.Client[v0alpha.DownloadGreetingReq, v0alpha.DownloadGreetingRes]
	getUploadGreetingUrl         *connect_go.Client[v0alpha.GetUploadGreetingUrlReq, v0alpha.GetUploadGreetingUrlRes]
	processGreetingUpload        *connect_go.Client[v0alpha.ProcessGreetingUploadReq, v0alpha.ProcessGreetingUploadRes]
	updateGreetingForExtension   *connect_go.Client[v0alpha.UpdateGreetingForExtensionReq, v0alpha.UpdateGreetingForExtensionRes]
	listAvailableGreetings       *connect_go.Client[v0alpha.ListAvailableGreetingsReq, v0alpha.ListAvailableGreetingsRes]
}

// GetVoicemailMetadata calls api.v0alpha.Vmds.GetVoicemailMetadata.
func (c *vmdsClient) GetVoicemailMetadata(ctx context.Context, req *connect_go.Request[v0alpha.GetVoicemailMetadataReq]) (*connect_go.ServerStreamForClient[v0alpha.GetVoicemailMetadataRes], error) {
	return c.getVoicemailMetadata.CallServerStream(ctx, req)
}

// GetVoicemailMessageCount calls api.v0alpha.Vmds.GetVoicemailMessageCount.
func (c *vmdsClient) GetVoicemailMessageCount(ctx context.Context, req *connect_go.Request[v0alpha.GetVoicemailCountReq]) (*connect_go.Response[v0alpha.GetVoicemailCountRes], error) {
	return c.getVoicemailMessageCount.CallUnary(ctx, req)
}

// DeleteVoicemail calls api.v0alpha.Vmds.DeleteVoicemail.
func (c *vmdsClient) DeleteVoicemail(ctx context.Context, req *connect_go.Request[v0alpha.DeleteVoicemailReq]) (*connect_go.Response[v0alpha.DeleteVoicemailRes], error) {
	return c.deleteVoicemail.CallUnary(ctx, req)
}

// DeleteGreeting calls api.v0alpha.Vmds.DeleteGreeting.
func (c *vmdsClient) DeleteGreeting(ctx context.Context, req *connect_go.Request[v0alpha.DeleteGreetingReq]) (*connect_go.Response[v0alpha.DeleteGreetingRes], error) {
	return c.deleteGreeting.CallUnary(ctx, req)
}

// UpdateUploadName calls api.v0alpha.Vmds.UpdateUploadName.
func (c *vmdsClient) UpdateUploadName(ctx context.Context, req *connect_go.Request[v0alpha.UpdateUploadNameReq]) (*connect_go.Response[v0alpha.UpdateUploadNameRes], error) {
	return c.updateUploadName.CallUnary(ctx, req)
}

// UpdateVoicemailFlagRead calls api.v0alpha.Vmds.UpdateVoicemailFlagRead.
func (c *vmdsClient) UpdateVoicemailFlagRead(ctx context.Context, req *connect_go.Request[v0alpha.UpdateVoicemailFlagReadReq]) (*connect_go.Response[v0alpha.UpdateVoicemailFlagReadRes], error) {
	return c.updateVoicemailFlagRead.CallUnary(ctx, req)
}

// DownloadMessage calls api.v0alpha.Vmds.DownloadMessage.
func (c *vmdsClient) DownloadMessage(ctx context.Context, req *connect_go.Request[v0alpha.DownloadMessageReq]) (*connect_go.Response[v0alpha.DownloadMessageRes], error) {
	return c.downloadMessage.CallUnary(ctx, req)
}

// DownloadMessages calls api.v0alpha.Vmds.DownloadMessages.
func (c *vmdsClient) DownloadMessages(ctx context.Context, req *connect_go.Request[v0alpha.DownloadMessagesReq]) (*connect_go.Response[v0alpha.DownloadMessagesRes], error) {
	return c.downloadMessages.CallUnary(ctx, req)
}

// DownloadGreetingForExtension calls api.v0alpha.Vmds.DownloadGreetingForExtension.
func (c *vmdsClient) DownloadGreetingForExtension(ctx context.Context, req *connect_go.Request[v0alpha.DownloadGreetingForExtensionReq]) (*connect_go.Response[v0alpha.DownloadGreetingForExtensionRes], error) {
	return c.downloadGreetingForExtension.CallUnary(ctx, req)
}

// DownloadGreeting calls api.v0alpha.Vmds.DownloadGreeting.
func (c *vmdsClient) DownloadGreeting(ctx context.Context, req *connect_go.Request[v0alpha.DownloadGreetingReq]) (*connect_go.Response[v0alpha.DownloadGreetingRes], error) {
	return c.downloadGreeting.CallUnary(ctx, req)
}

// GetUploadGreetingUrl calls api.v0alpha.Vmds.GetUploadGreetingUrl.
func (c *vmdsClient) GetUploadGreetingUrl(ctx context.Context, req *connect_go.Request[v0alpha.GetUploadGreetingUrlReq]) (*connect_go.Response[v0alpha.GetUploadGreetingUrlRes], error) {
	return c.getUploadGreetingUrl.CallUnary(ctx, req)
}

// ProcessGreetingUpload calls api.v0alpha.Vmds.ProcessGreetingUpload.
func (c *vmdsClient) ProcessGreetingUpload(ctx context.Context, req *connect_go.Request[v0alpha.ProcessGreetingUploadReq]) (*connect_go.Response[v0alpha.ProcessGreetingUploadRes], error) {
	return c.processGreetingUpload.CallUnary(ctx, req)
}

// UpdateGreetingForExtension calls api.v0alpha.Vmds.UpdateGreetingForExtension.
func (c *vmdsClient) UpdateGreetingForExtension(ctx context.Context, req *connect_go.Request[v0alpha.UpdateGreetingForExtensionReq]) (*connect_go.Response[v0alpha.UpdateGreetingForExtensionRes], error) {
	return c.updateGreetingForExtension.CallUnary(ctx, req)
}

// ListAvailableGreetings calls api.v0alpha.Vmds.ListAvailableGreetings.
func (c *vmdsClient) ListAvailableGreetings(ctx context.Context, req *connect_go.Request[v0alpha.ListAvailableGreetingsReq]) (*connect_go.Response[v0alpha.ListAvailableGreetingsRes], error) {
	return c.listAvailableGreetings.CallUnary(ctx, req)
}

// VmdsHandler is an implementation of the api.v0alpha.Vmds service.
type VmdsHandler interface {
	GetVoicemailMetadata(context.Context, *connect_go.Request[v0alpha.GetVoicemailMetadataReq], *connect_go.ServerStream[v0alpha.GetVoicemailMetadataRes]) error
	GetVoicemailMessageCount(context.Context, *connect_go.Request[v0alpha.GetVoicemailCountReq]) (*connect_go.Response[v0alpha.GetVoicemailCountRes], error)
	DeleteVoicemail(context.Context, *connect_go.Request[v0alpha.DeleteVoicemailReq]) (*connect_go.Response[v0alpha.DeleteVoicemailRes], error)
	DeleteGreeting(context.Context, *connect_go.Request[v0alpha.DeleteGreetingReq]) (*connect_go.Response[v0alpha.DeleteGreetingRes], error)
	UpdateUploadName(context.Context, *connect_go.Request[v0alpha.UpdateUploadNameReq]) (*connect_go.Response[v0alpha.UpdateUploadNameRes], error)
	UpdateVoicemailFlagRead(context.Context, *connect_go.Request[v0alpha.UpdateVoicemailFlagReadReq]) (*connect_go.Response[v0alpha.UpdateVoicemailFlagReadRes], error)
	DownloadMessage(context.Context, *connect_go.Request[v0alpha.DownloadMessageReq]) (*connect_go.Response[v0alpha.DownloadMessageRes], error)
	DownloadMessages(context.Context, *connect_go.Request[v0alpha.DownloadMessagesReq]) (*connect_go.Response[v0alpha.DownloadMessagesRes], error)
	DownloadGreetingForExtension(context.Context, *connect_go.Request[v0alpha.DownloadGreetingForExtensionReq]) (*connect_go.Response[v0alpha.DownloadGreetingForExtensionRes], error)
	DownloadGreeting(context.Context, *connect_go.Request[v0alpha.DownloadGreetingReq]) (*connect_go.Response[v0alpha.DownloadGreetingRes], error)
	GetUploadGreetingUrl(context.Context, *connect_go.Request[v0alpha.GetUploadGreetingUrlReq]) (*connect_go.Response[v0alpha.GetUploadGreetingUrlRes], error)
	ProcessGreetingUpload(context.Context, *connect_go.Request[v0alpha.ProcessGreetingUploadReq]) (*connect_go.Response[v0alpha.ProcessGreetingUploadRes], error)
	UpdateGreetingForExtension(context.Context, *connect_go.Request[v0alpha.UpdateGreetingForExtensionReq]) (*connect_go.Response[v0alpha.UpdateGreetingForExtensionRes], error)
	ListAvailableGreetings(context.Context, *connect_go.Request[v0alpha.ListAvailableGreetingsReq]) (*connect_go.Response[v0alpha.ListAvailableGreetingsRes], error)
}

// NewVmdsHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVmdsHandler(svc VmdsHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(VmdsGetVoicemailMetadataProcedure, connect_go.NewServerStreamHandler(
		VmdsGetVoicemailMetadataProcedure,
		svc.GetVoicemailMetadata,
		opts...,
	))
	mux.Handle(VmdsGetVoicemailMessageCountProcedure, connect_go.NewUnaryHandler(
		VmdsGetVoicemailMessageCountProcedure,
		svc.GetVoicemailMessageCount,
		opts...,
	))
	mux.Handle(VmdsDeleteVoicemailProcedure, connect_go.NewUnaryHandler(
		VmdsDeleteVoicemailProcedure,
		svc.DeleteVoicemail,
		opts...,
	))
	mux.Handle(VmdsDeleteGreetingProcedure, connect_go.NewUnaryHandler(
		VmdsDeleteGreetingProcedure,
		svc.DeleteGreeting,
		opts...,
	))
	mux.Handle(VmdsUpdateUploadNameProcedure, connect_go.NewUnaryHandler(
		VmdsUpdateUploadNameProcedure,
		svc.UpdateUploadName,
		opts...,
	))
	mux.Handle(VmdsUpdateVoicemailFlagReadProcedure, connect_go.NewUnaryHandler(
		VmdsUpdateVoicemailFlagReadProcedure,
		svc.UpdateVoicemailFlagRead,
		opts...,
	))
	mux.Handle(VmdsDownloadMessageProcedure, connect_go.NewUnaryHandler(
		VmdsDownloadMessageProcedure,
		svc.DownloadMessage,
		opts...,
	))
	mux.Handle(VmdsDownloadMessagesProcedure, connect_go.NewUnaryHandler(
		VmdsDownloadMessagesProcedure,
		svc.DownloadMessages,
		opts...,
	))
	mux.Handle(VmdsDownloadGreetingForExtensionProcedure, connect_go.NewUnaryHandler(
		VmdsDownloadGreetingForExtensionProcedure,
		svc.DownloadGreetingForExtension,
		opts...,
	))
	mux.Handle(VmdsDownloadGreetingProcedure, connect_go.NewUnaryHandler(
		VmdsDownloadGreetingProcedure,
		svc.DownloadGreeting,
		opts...,
	))
	mux.Handle(VmdsGetUploadGreetingUrlProcedure, connect_go.NewUnaryHandler(
		VmdsGetUploadGreetingUrlProcedure,
		svc.GetUploadGreetingUrl,
		opts...,
	))
	mux.Handle(VmdsProcessGreetingUploadProcedure, connect_go.NewUnaryHandler(
		VmdsProcessGreetingUploadProcedure,
		svc.ProcessGreetingUpload,
		opts...,
	))
	mux.Handle(VmdsUpdateGreetingForExtensionProcedure, connect_go.NewUnaryHandler(
		VmdsUpdateGreetingForExtensionProcedure,
		svc.UpdateGreetingForExtension,
		opts...,
	))
	mux.Handle(VmdsListAvailableGreetingsProcedure, connect_go.NewUnaryHandler(
		VmdsListAvailableGreetingsProcedure,
		svc.ListAvailableGreetings,
		opts...,
	))
	return "/api.v0alpha.Vmds/", mux
}

// UnimplementedVmdsHandler returns CodeUnimplemented from all methods.
type UnimplementedVmdsHandler struct{}

func (UnimplementedVmdsHandler) GetVoicemailMetadata(context.Context, *connect_go.Request[v0alpha.GetVoicemailMetadataReq], *connect_go.ServerStream[v0alpha.GetVoicemailMetadataRes]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Vmds.GetVoicemailMetadata is not implemented"))
}

func (UnimplementedVmdsHandler) GetVoicemailMessageCount(context.Context, *connect_go.Request[v0alpha.GetVoicemailCountReq]) (*connect_go.Response[v0alpha.GetVoicemailCountRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Vmds.GetVoicemailMessageCount is not implemented"))
}

func (UnimplementedVmdsHandler) DeleteVoicemail(context.Context, *connect_go.Request[v0alpha.DeleteVoicemailReq]) (*connect_go.Response[v0alpha.DeleteVoicemailRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Vmds.DeleteVoicemail is not implemented"))
}

func (UnimplementedVmdsHandler) DeleteGreeting(context.Context, *connect_go.Request[v0alpha.DeleteGreetingReq]) (*connect_go.Response[v0alpha.DeleteGreetingRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Vmds.DeleteGreeting is not implemented"))
}

func (UnimplementedVmdsHandler) UpdateUploadName(context.Context, *connect_go.Request[v0alpha.UpdateUploadNameReq]) (*connect_go.Response[v0alpha.UpdateUploadNameRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Vmds.UpdateUploadName is not implemented"))
}

func (UnimplementedVmdsHandler) UpdateVoicemailFlagRead(context.Context, *connect_go.Request[v0alpha.UpdateVoicemailFlagReadReq]) (*connect_go.Response[v0alpha.UpdateVoicemailFlagReadRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Vmds.UpdateVoicemailFlagRead is not implemented"))
}

func (UnimplementedVmdsHandler) DownloadMessage(context.Context, *connect_go.Request[v0alpha.DownloadMessageReq]) (*connect_go.Response[v0alpha.DownloadMessageRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Vmds.DownloadMessage is not implemented"))
}

func (UnimplementedVmdsHandler) DownloadMessages(context.Context, *connect_go.Request[v0alpha.DownloadMessagesReq]) (*connect_go.Response[v0alpha.DownloadMessagesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Vmds.DownloadMessages is not implemented"))
}

func (UnimplementedVmdsHandler) DownloadGreetingForExtension(context.Context, *connect_go.Request[v0alpha.DownloadGreetingForExtensionReq]) (*connect_go.Response[v0alpha.DownloadGreetingForExtensionRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Vmds.DownloadGreetingForExtension is not implemented"))
}

func (UnimplementedVmdsHandler) DownloadGreeting(context.Context, *connect_go.Request[v0alpha.DownloadGreetingReq]) (*connect_go.Response[v0alpha.DownloadGreetingRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Vmds.DownloadGreeting is not implemented"))
}

func (UnimplementedVmdsHandler) GetUploadGreetingUrl(context.Context, *connect_go.Request[v0alpha.GetUploadGreetingUrlReq]) (*connect_go.Response[v0alpha.GetUploadGreetingUrlRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Vmds.GetUploadGreetingUrl is not implemented"))
}

func (UnimplementedVmdsHandler) ProcessGreetingUpload(context.Context, *connect_go.Request[v0alpha.ProcessGreetingUploadReq]) (*connect_go.Response[v0alpha.ProcessGreetingUploadRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Vmds.ProcessGreetingUpload is not implemented"))
}

func (UnimplementedVmdsHandler) UpdateGreetingForExtension(context.Context, *connect_go.Request[v0alpha.UpdateGreetingForExtensionReq]) (*connect_go.Response[v0alpha.UpdateGreetingForExtensionRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Vmds.UpdateGreetingForExtension is not implemented"))
}

func (UnimplementedVmdsHandler) ListAvailableGreetings(context.Context, *connect_go.Request[v0alpha.ListAvailableGreetingsReq]) (*connect_go.Response[v0alpha.ListAvailableGreetingsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Vmds.ListAvailableGreetings is not implemented"))
}
