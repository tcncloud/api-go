// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v0alpha/omniapi.proto

package v0alphaconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	commons "github.com/tcncloud/api-go/api/commons"
	v0alpha "github.com/tcncloud/api-go/api/v0alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// OmniApiName is the fully-qualified name of the OmniApi service.
	OmniApiName = "api.v0alpha.OmniApi"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OmniApiArchiveCampaignProcedure is the fully-qualified name of the OmniApi's ArchiveCampaign RPC.
	OmniApiArchiveCampaignProcedure = "/api.v0alpha.OmniApi/ArchiveCampaign"
	// OmniApiCreateCampaignProcedure is the fully-qualified name of the OmniApi's CreateCampaign RPC.
	OmniApiCreateCampaignProcedure = "/api.v0alpha.OmniApi/CreateCampaign"
	// OmniApiGetCampaignByIdProcedure is the fully-qualified name of the OmniApi's GetCampaignById RPC.
	OmniApiGetCampaignByIdProcedure = "/api.v0alpha.OmniApi/GetCampaignById"
	// OmniApiListCampaignsProcedure is the fully-qualified name of the OmniApi's ListCampaigns RPC.
	OmniApiListCampaignsProcedure = "/api.v0alpha.OmniApi/ListCampaigns"
	// OmniApiPauseCampaignProcedure is the fully-qualified name of the OmniApi's PauseCampaign RPC.
	OmniApiPauseCampaignProcedure = "/api.v0alpha.OmniApi/PauseCampaign"
	// OmniApiResumeCampaignProcedure is the fully-qualified name of the OmniApi's ResumeCampaign RPC.
	OmniApiResumeCampaignProcedure = "/api.v0alpha.OmniApi/ResumeCampaign"
	// OmniApiUpdateCampaignProcedure is the fully-qualified name of the OmniApi's UpdateCampaign RPC.
	OmniApiUpdateCampaignProcedure = "/api.v0alpha.OmniApi/UpdateCampaign"
	// OmniApiUpdateCampaignPacingSpeedProcedure is the fully-qualified name of the OmniApi's
	// UpdateCampaignPacingSpeed RPC.
	OmniApiUpdateCampaignPacingSpeedProcedure = "/api.v0alpha.OmniApi/UpdateCampaignPacingSpeed"
	// OmniApiGetOffLoadedTextMessageProcedure is the fully-qualified name of the OmniApi's
	// GetOffLoadedTextMessage RPC.
	OmniApiGetOffLoadedTextMessageProcedure = "/api.v0alpha.OmniApi/GetOffLoadedTextMessage"
	// OmniApiManagerListMessagesProcedure is the fully-qualified name of the OmniApi's
	// ManagerListMessages RPC.
	OmniApiManagerListMessagesProcedure = "/api.v0alpha.OmniApi/ManagerListMessages"
	// OmniApiListMessagesProcedure is the fully-qualified name of the OmniApi's ListMessages RPC.
	OmniApiListMessagesProcedure = "/api.v0alpha.OmniApi/ListMessages"
	// OmniApiSendOmniMessageProcedure is the fully-qualified name of the OmniApi's SendOmniMessage RPC.
	OmniApiSendOmniMessageProcedure = "/api.v0alpha.OmniApi/SendOmniMessage"
	// OmniApiManagerSendOmniMessageProcedure is the fully-qualified name of the OmniApi's
	// ManagerSendOmniMessage RPC.
	OmniApiManagerSendOmniMessageProcedure = "/api.v0alpha.OmniApi/ManagerSendOmniMessage"
	// OmniApiManagerListConversationsProcedure is the fully-qualified name of the OmniApi's
	// ManagerListConversations RPC.
	OmniApiManagerListConversationsProcedure = "/api.v0alpha.OmniApi/ManagerListConversations"
	// OmniApiSuggestResponseProcedure is the fully-qualified name of the OmniApi's SuggestResponse RPC.
	OmniApiSuggestResponseProcedure = "/api.v0alpha.OmniApi/SuggestResponse"
	// OmniApiCreateDispositionProcedure is the fully-qualified name of the OmniApi's CreateDisposition
	// RPC.
	OmniApiCreateDispositionProcedure = "/api.v0alpha.OmniApi/CreateDisposition"
	// OmniApiDeleteDispositionProcedure is the fully-qualified name of the OmniApi's DeleteDisposition
	// RPC.
	OmniApiDeleteDispositionProcedure = "/api.v0alpha.OmniApi/DeleteDisposition"
	// OmniApiListDispositionsProcedure is the fully-qualified name of the OmniApi's ListDispositions
	// RPC.
	OmniApiListDispositionsProcedure = "/api.v0alpha.OmniApi/ListDispositions"
	// OmniApiUpdateDispositionProcedure is the fully-qualified name of the OmniApi's UpdateDisposition
	// RPC.
	OmniApiUpdateDispositionProcedure = "/api.v0alpha.OmniApi/UpdateDisposition"
	// OmniApiListCustomUnsubscribeLinksProcedure is the fully-qualified name of the OmniApi's
	// ListCustomUnsubscribeLinks RPC.
	OmniApiListCustomUnsubscribeLinksProcedure = "/api.v0alpha.OmniApi/ListCustomUnsubscribeLinks"
	// OmniApiCreateCustomUnsubscribeLinkProcedure is the fully-qualified name of the OmniApi's
	// CreateCustomUnsubscribeLink RPC.
	OmniApiCreateCustomUnsubscribeLinkProcedure = "/api.v0alpha.OmniApi/CreateCustomUnsubscribeLink"
	// OmniApiUpdateCustomUnsubscribeLinkProcedure is the fully-qualified name of the OmniApi's
	// UpdateCustomUnsubscribeLink RPC.
	OmniApiUpdateCustomUnsubscribeLinkProcedure = "/api.v0alpha.OmniApi/UpdateCustomUnsubscribeLink"
	// OmniApiDeleteCustomUnsubscribeLinkProcedure is the fully-qualified name of the OmniApi's
	// DeleteCustomUnsubscribeLink RPC.
	OmniApiDeleteCustomUnsubscribeLinkProcedure = "/api.v0alpha.OmniApi/DeleteCustomUnsubscribeLink"
	// OmniApiListContactListsProcedure is the fully-qualified name of the OmniApi's ListContactLists
	// RPC.
	OmniApiListContactListsProcedure = "/api.v0alpha.OmniApi/ListContactLists"
	// OmniApiGetAvailableHeadersProcedure is the fully-qualified name of the OmniApi's
	// GetAvailableHeaders RPC.
	OmniApiGetAvailableHeadersProcedure = "/api.v0alpha.OmniApi/GetAvailableHeaders"
	// OmniApiGetTaskProcedure is the fully-qualified name of the OmniApi's GetTask RPC.
	OmniApiGetTaskProcedure = "/api.v0alpha.OmniApi/GetTask"
	// OmniApiListTasksProcedure is the fully-qualified name of the OmniApi's ListTasks RPC.
	OmniApiListTasksProcedure = "/api.v0alpha.OmniApi/ListTasks"
	// OmniApiCreateConnectedInboxProcedure is the fully-qualified name of the OmniApi's
	// CreateConnectedInbox RPC.
	OmniApiCreateConnectedInboxProcedure = "/api.v0alpha.OmniApi/CreateConnectedInbox"
	// OmniApiDeleteConnectedInboxBySidProcedure is the fully-qualified name of the OmniApi's
	// DeleteConnectedInboxBySid RPC.
	OmniApiDeleteConnectedInboxBySidProcedure = "/api.v0alpha.OmniApi/DeleteConnectedInboxBySid"
	// OmniApiGetConnectedInboxBySidProcedure is the fully-qualified name of the OmniApi's
	// GetConnectedInboxBySid RPC.
	OmniApiGetConnectedInboxBySidProcedure = "/api.v0alpha.OmniApi/GetConnectedInboxBySid"
	// OmniApiPerformSendgridAccountChecksProcedure is the fully-qualified name of the OmniApi's
	// PerformSendgridAccountChecks RPC.
	OmniApiPerformSendgridAccountChecksProcedure = "/api.v0alpha.OmniApi/PerformSendgridAccountChecks"
	// OmniApiListConnectedInboxesProcedure is the fully-qualified name of the OmniApi's
	// ListConnectedInboxes RPC.
	OmniApiListConnectedInboxesProcedure = "/api.v0alpha.OmniApi/ListConnectedInboxes"
	// OmniApiTestConnectedInboxProcedure is the fully-qualified name of the OmniApi's
	// TestConnectedInbox RPC.
	OmniApiTestConnectedInboxProcedure = "/api.v0alpha.OmniApi/TestConnectedInbox"
	// OmniApiUpdateConnectedInboxProcedure is the fully-qualified name of the OmniApi's
	// UpdateConnectedInbox RPC.
	OmniApiUpdateConnectedInboxProcedure = "/api.v0alpha.OmniApi/UpdateConnectedInbox"
	// OmniApiCreateVerifiedEmailProcedure is the fully-qualified name of the OmniApi's
	// CreateVerifiedEmail RPC.
	OmniApiCreateVerifiedEmailProcedure = "/api.v0alpha.OmniApi/CreateVerifiedEmail"
	// OmniApiSendEmailNotificationProcedure is the fully-qualified name of the OmniApi's
	// SendEmailNotification RPC.
	OmniApiSendEmailNotificationProcedure = "/api.v0alpha.OmniApi/SendEmailNotification"
	// OmniApiDeleteVerifiedEmailProcedure is the fully-qualified name of the OmniApi's
	// DeleteVerifiedEmail RPC.
	OmniApiDeleteVerifiedEmailProcedure = "/api.v0alpha.OmniApi/DeleteVerifiedEmail"
	// OmniApiGetVerifiedEmailBySidProcedure is the fully-qualified name of the OmniApi's
	// GetVerifiedEmailBySid RPC.
	OmniApiGetVerifiedEmailBySidProcedure = "/api.v0alpha.OmniApi/GetVerifiedEmailBySid"
	// OmniApiListVerifiedEmailsProcedure is the fully-qualified name of the OmniApi's
	// ListVerifiedEmails RPC.
	OmniApiListVerifiedEmailsProcedure = "/api.v0alpha.OmniApi/ListVerifiedEmails"
	// OmniApiResendVerifiedEmailProcedure is the fully-qualified name of the OmniApi's
	// ResendVerifiedEmail RPC.
	OmniApiResendVerifiedEmailProcedure = "/api.v0alpha.OmniApi/ResendVerifiedEmail"
	// OmniApiUpdateVerifiedEmailProcedure is the fully-qualified name of the OmniApi's
	// UpdateVerifiedEmail RPC.
	OmniApiUpdateVerifiedEmailProcedure = "/api.v0alpha.OmniApi/UpdateVerifiedEmail"
	// OmniApiGetPendingGoogleXOAuth2DataProcedure is the fully-qualified name of the OmniApi's
	// GetPendingGoogleXOAuth2Data RPC.
	OmniApiGetPendingGoogleXOAuth2DataProcedure = "/api.v0alpha.OmniApi/GetPendingGoogleXOAuth2Data"
	// OmniApiSendFeedbackEmailProcedure is the fully-qualified name of the OmniApi's SendFeedbackEmail
	// RPC.
	OmniApiSendFeedbackEmailProcedure = "/api.v0alpha.OmniApi/SendFeedbackEmail"
	// OmniApiGetOmniAttachmentProcedure is the fully-qualified name of the OmniApi's GetOmniAttachment
	// RPC.
	OmniApiGetOmniAttachmentProcedure = "/api.v0alpha.OmniApi/GetOmniAttachment"
	// OmniApiCreateTasksProcedure is the fully-qualified name of the OmniApi's CreateTasks RPC.
	OmniApiCreateTasksProcedure = "/api.v0alpha.OmniApi/CreateTasks"
	// OmniApiCreateSignatureProcedure is the fully-qualified name of the OmniApi's CreateSignature RPC.
	OmniApiCreateSignatureProcedure = "/api.v0alpha.OmniApi/CreateSignature"
	// OmniApiDeleteSignatureProcedure is the fully-qualified name of the OmniApi's DeleteSignature RPC.
	OmniApiDeleteSignatureProcedure = "/api.v0alpha.OmniApi/DeleteSignature"
	// OmniApiListSignaturesProcedure is the fully-qualified name of the OmniApi's ListSignatures RPC.
	OmniApiListSignaturesProcedure = "/api.v0alpha.OmniApi/ListSignatures"
	// OmniApiUpdateSignatureProcedure is the fully-qualified name of the OmniApi's UpdateSignature RPC.
	OmniApiUpdateSignatureProcedure = "/api.v0alpha.OmniApi/UpdateSignature"
	// OmniApiCreateProjectProcedure is the fully-qualified name of the OmniApi's CreateProject RPC.
	OmniApiCreateProjectProcedure = "/api.v0alpha.OmniApi/CreateProject"
	// OmniApiListProjectsProcedure is the fully-qualified name of the OmniApi's ListProjects RPC.
	OmniApiListProjectsProcedure = "/api.v0alpha.OmniApi/ListProjects"
	// OmniApiEditProjectByIdProcedure is the fully-qualified name of the OmniApi's EditProjectById RPC.
	OmniApiEditProjectByIdProcedure = "/api.v0alpha.OmniApi/EditProjectById"
	// OmniApiCloseProjectByIdProcedure is the fully-qualified name of the OmniApi's CloseProjectById
	// RPC.
	OmniApiCloseProjectByIdProcedure = "/api.v0alpha.OmniApi/CloseProjectById"
	// OmniApiGetProjectByIdProcedure is the fully-qualified name of the OmniApi's GetProjectById RPC.
	OmniApiGetProjectByIdProcedure = "/api.v0alpha.OmniApi/GetProjectById"
	// OmniApiCreateCannedMessageProcedure is the fully-qualified name of the OmniApi's
	// CreateCannedMessage RPC.
	OmniApiCreateCannedMessageProcedure = "/api.v0alpha.OmniApi/CreateCannedMessage"
	// OmniApiListCannedMessagesProcedure is the fully-qualified name of the OmniApi's
	// ListCannedMessages RPC.
	OmniApiListCannedMessagesProcedure = "/api.v0alpha.OmniApi/ListCannedMessages"
	// OmniApiUpdateCannedMessageProcedure is the fully-qualified name of the OmniApi's
	// UpdateCannedMessage RPC.
	OmniApiUpdateCannedMessageProcedure = "/api.v0alpha.OmniApi/UpdateCannedMessage"
	// OmniApiGetCannedMessageByIdProcedure is the fully-qualified name of the OmniApi's
	// GetCannedMessageById RPC.
	OmniApiGetCannedMessageByIdProcedure = "/api.v0alpha.OmniApi/GetCannedMessageById"
	// OmniApiDeleteCannedMessageByIdProcedure is the fully-qualified name of the OmniApi's
	// DeleteCannedMessageById RPC.
	OmniApiDeleteCannedMessageByIdProcedure = "/api.v0alpha.OmniApi/DeleteCannedMessageById"
	// OmniApiCreateCannedMessageGroupProcedure is the fully-qualified name of the OmniApi's
	// CreateCannedMessageGroup RPC.
	OmniApiCreateCannedMessageGroupProcedure = "/api.v0alpha.OmniApi/CreateCannedMessageGroup"
	// OmniApiListCannedMessageGroupsProcedure is the fully-qualified name of the OmniApi's
	// ListCannedMessageGroups RPC.
	OmniApiListCannedMessageGroupsProcedure = "/api.v0alpha.OmniApi/ListCannedMessageGroups"
	// OmniApiUpdateCannedMessageGroupProcedure is the fully-qualified name of the OmniApi's
	// UpdateCannedMessageGroup RPC.
	OmniApiUpdateCannedMessageGroupProcedure = "/api.v0alpha.OmniApi/UpdateCannedMessageGroup"
	// OmniApiDeleteCannedMessageGroupProcedure is the fully-qualified name of the OmniApi's
	// DeleteCannedMessageGroup RPC.
	OmniApiDeleteCannedMessageGroupProcedure = "/api.v0alpha.OmniApi/DeleteCannedMessageGroup"
	// OmniApiListCannedMessagesByGroupIdProcedure is the fully-qualified name of the OmniApi's
	// ListCannedMessagesByGroupId RPC.
	OmniApiListCannedMessagesByGroupIdProcedure = "/api.v0alpha.OmniApi/ListCannedMessagesByGroupId"
	// OmniApiGetCannedMessageGroupByIdProcedure is the fully-qualified name of the OmniApi's
	// GetCannedMessageGroupById RPC.
	OmniApiGetCannedMessageGroupByIdProcedure = "/api.v0alpha.OmniApi/GetCannedMessageGroupById"
)

// OmniApiClient is a client for the api.v0alpha.OmniApi service.
type OmniApiClient interface {
	// archive a campaign
	ArchiveCampaign(context.Context, *connect_go.Request[v0alpha.ArchiveCampaignReq]) (*connect_go.Response[v0alpha.ArchiveCampaignRes], error)
	// Create Omni Campaign defined by CreateOmniCampaign message
	// for the name, skill, Hours of operations, and description.
	// the method will return newly created OmniCampaign for this client
	// Required Permission:
	//
	//	OMNI_BOSS
	CreateCampaign(context.Context, *connect_go.Request[v0alpha.CreateCampaignReq]) (*connect_go.Response[commons.OmniCampaign], error)
	// Get campaign defined by GetChatCampaignById.
	GetCampaignById(context.Context, *connect_go.Request[v0alpha.GetCampaignByIdReq]) (*connect_go.Response[commons.OmniCampaign], error)
	// List campaigns defined by ListCampaignsReq.
	// The method will return a ListCampaignsReq entity that will contain
	// all the campaigns within the specified filter.
	ListCampaigns(context.Context, *connect_go.Request[v0alpha.ListCampaignsReq]) (*connect_go.Response[v0alpha.ListCampaignsRes], error)
	// pause a campaign
	PauseCampaign(context.Context, *connect_go.Request[v0alpha.PauseCampaignReq]) (*connect_go.Response[v0alpha.PauseCampaignRes], error)
	// resume a campaign
	ResumeCampaign(context.Context, *connect_go.Request[v0alpha.ResumeCampaignReq]) (*connect_go.Response[v0alpha.ResumeCampaignRes], error)
	// Updates a campaign
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateCampaign(context.Context, *connect_go.Request[v0alpha.UpdateCampaignReq]) (*connect_go.Response[v0alpha.UpdateCampaignRes], error)
	// update campaign pacing - speed up/slow down a campaign
	UpdateCampaignPacingSpeed(context.Context, *connect_go.Request[v0alpha.UpdateCampaignPacingSpeedReq]) (*connect_go.Response[v0alpha.UpdateCampaignPacingSpeedRes], error)
	// Get the text message for an off-loaded text message payload. Used
	// only for managers/agents/users. It is not for customers.
	GetOffLoadedTextMessage(context.Context, *connect_go.Request[v0alpha.GetOffLoadedTextMessageReq]) (*connect_go.Response[v0alpha.GetOffLoadedTextMessageRes], error)
	// Get a stream of new conversation message for a given conversation. Used
	// only for managers. It is not for customers.
	ManagerListMessages(context.Context, *connect_go.Request[v0alpha.ManagerListMessagesReq]) (*connect_go.ServerStreamForClient[commons.OmniMessage], error)
	// Get a stream of conversation message for a given conversation. Used
	// only for agents/users. It is not for customers.
	ListMessages(context.Context, *connect_go.Request[v0alpha.ListMessagesReq]) (*connect_go.ServerStreamForClient[commons.OmniMessage], error)
	// Send a chat message
	SendOmniMessage(context.Context, *connect_go.Request[v0alpha.SendOmniMessageReq]) (*connect_go.Response[commons.Empty], error)
	// Send a chat message
	ManagerSendOmniMessage(context.Context, *connect_go.Request[v0alpha.SendOmniMessageReq]) (*connect_go.Response[commons.Empty], error)
	// lists all conversation and assigned users for a given date range.
	// Required permissions:
	//
	//	OMNI_BOSS
	ManagerListConversations(context.Context, *connect_go.Request[v0alpha.ListConversationsReq]) (*connect_go.Response[v0alpha.ListConversationsRes], error)
	// Experimental API
	SuggestResponse(context.Context, *connect_go.Request[v0alpha.SuggestResponseReq]) (*connect_go.Response[v0alpha.SuggestResponseRes], error)
	// Create a disposition
	CreateDisposition(context.Context, *connect_go.Request[v0alpha.CreateDispositionReq]) (*connect_go.Response[v0alpha.CreateDispositionRes], error)
	// DeleteDisposition - delete an existing disposition
	DeleteDisposition(context.Context, *connect_go.Request[v0alpha.DeleteDispositionReq]) (*connect_go.Response[commons.Empty], error)
	// ListDispositions - lists all dispositions
	ListDispositions(context.Context, *connect_go.Request[v0alpha.ListDispositionsReq]) (*connect_go.Response[v0alpha.ListDispositionsRes], error)
	// UpdateDisposition - update an existing disposition
	UpdateDisposition(context.Context, *connect_go.Request[v0alpha.UpdateDispositionReq]) (*connect_go.Response[commons.Empty], error)
	// ListCustomUnsubscribeLinks - retrieves all the custom unsubscribe links
	ListCustomUnsubscribeLinks(context.Context, *connect_go.Request[commons.Empty]) (*connect_go.Response[v0alpha.ListCustomUnsubscribeLinksRes], error)
	// CreateUnsubscribeLink - creates a new unsubscribe link
	CreateCustomUnsubscribeLink(context.Context, *connect_go.Request[commons.OmniCustomUnsubscribeLink]) (*connect_go.Response[v0alpha.CreateCustomUnsubscribeLinkRes], error)
	// UpdateCustomUnsubscribeLink - update custom unsubscribe link details
	UpdateCustomUnsubscribeLink(context.Context, *connect_go.Request[v0alpha.UpdateCustomUnsubscribeLinkReq]) (*connect_go.Response[v0alpha.UpdateCustomUnsubscribeLinkRes], error)
	// DeleteCustomUnsubscribeLink - deletes custom unsubscribe link details
	DeleteCustomUnsubscribeLink(context.Context, *connect_go.Request[v0alpha.DeleteCustomUnsubscribeLinkReq]) (*connect_go.Response[commons.Empty], error)
	// ListContactLists - retrieves all the contact lists
	ListContactLists(context.Context, *connect_go.Request[v0alpha.ListContactListsReq]) (*connect_go.Response[v0alpha.ListContactListsRes], error)
	// GetAvailableHeaders - retrieves all the available headers that could be present on a contact list
	// Required permissions:
	//
	//	OMNI_BOSS
	GetAvailableHeaders(context.Context, *connect_go.Request[v0alpha.GetAvailableHeadersReq]) (*connect_go.Response[v0alpha.GetAvailableHeadersRes], error)
	// GetTask - retrieves a task using the provided criteria
	// Required permissions:
	//
	//	OMNI_AGENT
	GetTask(context.Context, *connect_go.Request[v0alpha.GetTaskReq]) (*connect_go.Response[commons.OmniTask], error)
	// ListTasks - retrieves tasks using the provided criteria
	// Required permissions:
	//
	//	OMNI_BOSS
	ListTasks(context.Context, *connect_go.Request[v0alpha.ListTasksReq]) (*connect_go.Response[v0alpha.ListTasksRes], error)
	// CreateConnectedInbox - create a new connected inbox
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateConnectedInbox(context.Context, *connect_go.Request[commons.ConnectedInbox]) (*connect_go.Response[v0alpha.CreateConnectedInboxRes], error)
	// DeleteConnectedInboxBySid - deletes a connected inbox given it's identifier
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteConnectedInboxBySid(context.Context, *connect_go.Request[v0alpha.DeleteConnectedInboxBySidReq]) (*connect_go.Response[commons.Empty], error)
	// GetConnectedInboxBySid - retrieves a connected inbox given it's identifier
	// Required permissions:
	//
	//	OMNI_BOSS
	GetConnectedInboxBySid(context.Context, *connect_go.Request[v0alpha.GetConnectedInboxBySidReq]) (*connect_go.Response[commons.ConnectedInbox], error)
	// Perform sendgrid account check to make sure all the account settings are valid defined by SendgridAccountByClientReq message.
	// The method will return a SendgridAccountByClientRes message/entity that will
	// contain the result true/false verifying account settings with sendgrid for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	PerformSendgridAccountChecks(context.Context, *connect_go.Request[v0alpha.SendgridAccountByClientReq]) (*connect_go.Response[v0alpha.SendgridAccountByClientRes], error)
	// ListConnectedInboxes - retrieves all the connected inboxes for the organization
	// Required permissions:
	//
	//	OMNI_BOSS
	ListConnectedInboxes(context.Context, *connect_go.Request[v0alpha.ListConnectedInboxesReq]) (*connect_go.Response[v0alpha.ListConnectedInboxesRes], error)
	// TestConnectedInbox - check if connected inbox login works for a specified email_address,
	// username, password, server_name, and server_port (other fields from ConnectedInbox are ignored).
	// Required permissions:
	//
	//	OMNI_BOSS
	TestConnectedInbox(context.Context, *connect_go.Request[commons.ConnectedInbox]) (*connect_go.Response[v0alpha.TestConnectedInboxRes], error)
	// UpdateConnectedInbox - update a connected inbox
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateConnectedInbox(context.Context, *connect_go.Request[v0alpha.UpdateConnectedInboxReq]) (*connect_go.Response[commons.Empty], error)
	// CreateVerifiedEmail.  this will create a new verified email
	// Required permissions
	//
	//	OMNI_BOSS
	CreateVerifiedEmail(context.Context, *connect_go.Request[commons.VerifiedEmail]) (*connect_go.Response[v0alpha.CreateVerifiedEmailRes], error)
	// Send email notification defined by SendEmailNotificationReq message for the specified
	// subject, message and array of to email addresses.
	// The method will return a stream of SendEmailNotificationRes messages
	// containing result true/false after notified by email for the client_sid.
	// Required permissions:
	//
	//	OMNI_BOSS
	SendEmailNotification(context.Context, *connect_go.Request[v0alpha.SendEmailNotificationReq]) (*connect_go.Response[v0alpha.SendEmailNotificationRes], error)
	// Delete verify email record based on verified email id defined by
	// DeleteVerifiedEmailReq for the specified client.
	// This method will return a DeleteVerifiedEmailRes message/entity.
	// DeleteVerifiedEmail - deletes a verified email record using the given identifier
	// Required permissions
	//
	//	OMNI_BOSS
	DeleteVerifiedEmail(context.Context, *connect_go.Request[v0alpha.DeleteVerifiedEmailReq]) (*connect_go.Response[commons.Empty], error)
	// Get the verified email details based on verified email id defined by
	// GetVerifiedEmailByIdReq for the specified client.
	// This method will return an OmniVerifiedEmail message/entity.
	// Required permissions
	//
	//	OMNI_BOSS
	GetVerifiedEmailBySid(context.Context, *connect_go.Request[v0alpha.GetVerifiedEmailBySidReq]) (*connect_go.Response[commons.VerifiedEmail], error)
	// List all the verified emails and their details defined by
	// ListVerifiedEmailsReq for the specified client.
	// This method will return a ListVerifiedEmailsRes message/entity.
	// Required permissions
	//
	//	OMNI_BOSS
	ListVerifiedEmails(context.Context, *connect_go.Request[v0alpha.ListVerifiedEmailsReq]) (*connect_go.Response[v0alpha.ListVerifiedEmailsRes], error)
	// Resend verify email record based on verified email id defined by
	// ResendVerifiedEmailReq for the specified client.
	// This method will return a ResendVerifiedEmailRes message/entity.
	// Required permissions
	//
	//	OMNI_BOSS
	ResendVerifiedEmail(context.Context, *connect_go.Request[v0alpha.ResendVerifiedEmailReq]) (*connect_go.Response[v0alpha.ResendVerifiedEmailRes], error)
	// Updates verified email description
	UpdateVerifiedEmail(context.Context, *connect_go.Request[v0alpha.UpdateVerifiedEmailReq]) (*connect_go.Response[commons.Empty], error)
	// GetPendingGoogleXOAuth2Data - retrieves the pending oauth data required to finish creating a connected inbox
	// Required permissions:
	//
	//	OMNI_BOSS
	GetPendingGoogleXOAuth2Data(context.Context, *connect_go.Request[v0alpha.GetPendingGoogleXOAuth2DataReq]) (*connect_go.Response[v0alpha.GetPendingGoogleXOAuth2DataRes], error)
	// Send an email to our feedback system. The users email will be populated as the from address to open an email thread with our support.
	SendFeedbackEmail(context.Context, *connect_go.Request[v0alpha.SendFeedbackEmailReq]) (*connect_go.Response[v0alpha.SendFeedbackEmailRes], error)
	// GetOmniAttachment - retrieves the omni attachment details based on the request
	// Required permissions:
	//
	//	OMNI_BOSS
	GetOmniAttachment(context.Context, *connect_go.Request[v0alpha.GetOmniAttachmentReq]) (*connect_go.Response[commons.OmniAttachment], error)
	// Create a task with a given contat list .
	CreateTasks(context.Context, *connect_go.Request[v0alpha.CreateTasksReq]) (*connect_go.Response[v0alpha.CreateTasksRes], error)
	// CreateSignature - creates a new message signature
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateSignature(context.Context, *connect_go.Request[v0alpha.CreateSignatureReq]) (*connect_go.Response[v0alpha.CreateSignatureRes], error)
	// DeleteSignature - deletes a message signature
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteSignature(context.Context, *connect_go.Request[v0alpha.DeleteSignatureReq]) (*connect_go.Response[v0alpha.DeleteSignatureRes], error)
	// ListSignatures - retrieves the signatures created by the organization
	// Required permissions:
	//
	//	OMNI_BOSS
	ListSignatures(context.Context, *connect_go.Request[v0alpha.ListSignaturesReq]) (*connect_go.Response[v0alpha.ListSignaturesRes], error)
	// UpdateSignature - updates a message signature
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateSignature(context.Context, *connect_go.Request[v0alpha.UpdateSignatureReq]) (*connect_go.Response[v0alpha.UpdateSignatureRes], error)
	// Create/Record project defined by CreateProjectReq message for a specified
	// name, description and status.
	// The method will return a Project message/entity that will
	// contain the newly created project_id value for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateProject(context.Context, *connect_go.Request[v0alpha.CreateProjectReq]) (*connect_go.Response[v0alpha.CreateProjectRes], error)
	// list projects for the current org
	// The method will return a list of Project messages/entities
	// Required permissions:
	//
	//	OMNI_BOSS
	ListProjects(context.Context, *connect_go.Request[v0alpha.ListProjectsReq]) (*connect_go.Response[v0alpha.ListProjectsRes], error)
	// Update project defined by EditProjectByIdReq message for a specified
	// project id.
	// The method will return a Project message/entity that will
	// contain the updated details for the project_id
	// Required permissions:
	//
	//	OMNI_BOSS
	EditProjectById(context.Context, *connect_go.Request[v0alpha.EditProjectByIdReq]) (*connect_go.Response[v0alpha.EditProjectByIdRes], error)
	// Closes project defined by CloseProjectByIdReq message for a specified
	// project id.
	// The method will stop all child campaigns and return a an empty response
	// if successful
	// Required permissions:
	//
	//	OMNI_BOSS
	CloseProjectById(context.Context, *connect_go.Request[v0alpha.CloseProjectByIdReq]) (*connect_go.Response[v0alpha.CloseProjectByIdRes], error)
	// Get project details defined by GetProjectByIdReq message for a specified
	// project id.
	// The method will return a GetProjectByIdRes message/entity that will
	// contain all the project details for the project_id
	// Required permissions:
	//
	//	OMNI_BOSS
	GetProjectById(context.Context, *connect_go.Request[v0alpha.GetProjectByIdReq]) (*connect_go.Response[v0alpha.Project], error)
	// Create/Record canned message defined by CreateCannedMessageReq message for a specified
	// name, description and message_body.
	// The method will return a CannedMessage message/entity that will
	// contain the newly created canned message details for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateCannedMessage(context.Context, *connect_go.Request[v0alpha.CreateCannedMessageReq]) (*connect_go.Response[v0alpha.CannedMessage], error)
	// list canned messages for the current org
	// The method will return a list of canned messages/entities
	// Required permissions:
	//
	//	OMNI_BOSS
	ListCannedMessages(context.Context, *connect_go.Request[v0alpha.ListCannedMessagesReq]) (*connect_go.Response[v0alpha.ListCannedMessagesRes], error)
	// Update canned message defined by UpdateCannedMessageReq message for a specified
	// name, description and message_body.
	// The method will return a CannedMessage message/entity that will
	// contain the updated canned message details for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateCannedMessage(context.Context, *connect_go.Request[v0alpha.UpdateCannedMessageReq]) (*connect_go.Response[v0alpha.CannedMessage], error)
	// Get canned message details for the canned_message_id
	// The method will return an canned message/entity
	// Required permissions:
	//
	//	OMNI_BOSS
	GetCannedMessageById(context.Context, *connect_go.Request[v0alpha.GetCannedMessageByIdReq]) (*connect_go.Response[v0alpha.CannedMessageWithGroup], error)
	// Delete canned message details for the canned_message_id
	// The method will delete an canned message/entity
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteCannedMessageById(context.Context, *connect_go.Request[v0alpha.DeleteCannedMessageByIdReq]) (*connect_go.Response[v0alpha.DeleteCannedMessageByIdRes], error)
	// Create/Record canned message group defined by CreateCannedMessageGroup Req message for a specified
	// name and description.
	// The method will return a CannedMessageGroup message/entity that will
	// contain the newly created canned message group details for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateCannedMessageGroup(context.Context, *connect_go.Request[v0alpha.CreateCannedMessageGroupReq]) (*connect_go.Response[v0alpha.CannedMessageGroup], error)
	// list canned message groups for the current org
	// The method will return a list of canned message groups/entities
	// Required permissions:
	//
	//	OMNI_BOSS
	ListCannedMessageGroups(context.Context, *connect_go.Request[v0alpha.ListCannedMessageGroupsReq]) (*connect_go.Response[v0alpha.ListCannedMessageGroupsRes], error)
	// Update canned message group defined by UpdateCannedMessageGroupReq message for a specified
	// name and description.
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateCannedMessageGroup(context.Context, *connect_go.Request[v0alpha.UpdateCannedMessageGroupReq]) (*connect_go.Response[v0alpha.UpdateCannedMessageGroupRes], error)
	// Delete canned message group and all the related messages for the canned_message_group_id
	// The method will delete an canned message group/entity
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteCannedMessageGroup(context.Context, *connect_go.Request[v0alpha.DeleteCannedMessageGroupReq]) (*connect_go.Response[v0alpha.DeleteCannedMessageGroupRes], error)
	// list canned messages for the group
	// The method will return a list of canned messages/entities
	// Required permissions:
	//
	//	OMNI_BOSS
	ListCannedMessagesByGroupId(context.Context, *connect_go.Request[v0alpha.ListCannedMessagesByGroupIdReq]) (*connect_go.Response[v0alpha.ListCannedMessagesByGroupIdRes], error)
	// Get canned message group details for the canned_message_group_id
	// The method will return an canned message group/entity
	// Required permissions:
	//
	//	OMNI_BOSS
	GetCannedMessageGroupById(context.Context, *connect_go.Request[v0alpha.GetCannedMessageGroupByIdReq]) (*connect_go.Response[v0alpha.CannedMessageGroup], error)
}

// NewOmniApiClient constructs a client for the api.v0alpha.OmniApi service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOmniApiClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) OmniApiClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &omniApiClient{
		archiveCampaign: connect_go.NewClient[v0alpha.ArchiveCampaignReq, v0alpha.ArchiveCampaignRes](
			httpClient,
			baseURL+OmniApiArchiveCampaignProcedure,
			opts...,
		),
		createCampaign: connect_go.NewClient[v0alpha.CreateCampaignReq, commons.OmniCampaign](
			httpClient,
			baseURL+OmniApiCreateCampaignProcedure,
			opts...,
		),
		getCampaignById: connect_go.NewClient[v0alpha.GetCampaignByIdReq, commons.OmniCampaign](
			httpClient,
			baseURL+OmniApiGetCampaignByIdProcedure,
			opts...,
		),
		listCampaigns: connect_go.NewClient[v0alpha.ListCampaignsReq, v0alpha.ListCampaignsRes](
			httpClient,
			baseURL+OmniApiListCampaignsProcedure,
			opts...,
		),
		pauseCampaign: connect_go.NewClient[v0alpha.PauseCampaignReq, v0alpha.PauseCampaignRes](
			httpClient,
			baseURL+OmniApiPauseCampaignProcedure,
			opts...,
		),
		resumeCampaign: connect_go.NewClient[v0alpha.ResumeCampaignReq, v0alpha.ResumeCampaignRes](
			httpClient,
			baseURL+OmniApiResumeCampaignProcedure,
			opts...,
		),
		updateCampaign: connect_go.NewClient[v0alpha.UpdateCampaignReq, v0alpha.UpdateCampaignRes](
			httpClient,
			baseURL+OmniApiUpdateCampaignProcedure,
			opts...,
		),
		updateCampaignPacingSpeed: connect_go.NewClient[v0alpha.UpdateCampaignPacingSpeedReq, v0alpha.UpdateCampaignPacingSpeedRes](
			httpClient,
			baseURL+OmniApiUpdateCampaignPacingSpeedProcedure,
			opts...,
		),
		getOffLoadedTextMessage: connect_go.NewClient[v0alpha.GetOffLoadedTextMessageReq, v0alpha.GetOffLoadedTextMessageRes](
			httpClient,
			baseURL+OmniApiGetOffLoadedTextMessageProcedure,
			opts...,
		),
		managerListMessages: connect_go.NewClient[v0alpha.ManagerListMessagesReq, commons.OmniMessage](
			httpClient,
			baseURL+OmniApiManagerListMessagesProcedure,
			opts...,
		),
		listMessages: connect_go.NewClient[v0alpha.ListMessagesReq, commons.OmniMessage](
			httpClient,
			baseURL+OmniApiListMessagesProcedure,
			opts...,
		),
		sendOmniMessage: connect_go.NewClient[v0alpha.SendOmniMessageReq, commons.Empty](
			httpClient,
			baseURL+OmniApiSendOmniMessageProcedure,
			opts...,
		),
		managerSendOmniMessage: connect_go.NewClient[v0alpha.SendOmniMessageReq, commons.Empty](
			httpClient,
			baseURL+OmniApiManagerSendOmniMessageProcedure,
			opts...,
		),
		managerListConversations: connect_go.NewClient[v0alpha.ListConversationsReq, v0alpha.ListConversationsRes](
			httpClient,
			baseURL+OmniApiManagerListConversationsProcedure,
			opts...,
		),
		suggestResponse: connect_go.NewClient[v0alpha.SuggestResponseReq, v0alpha.SuggestResponseRes](
			httpClient,
			baseURL+OmniApiSuggestResponseProcedure,
			opts...,
		),
		createDisposition: connect_go.NewClient[v0alpha.CreateDispositionReq, v0alpha.CreateDispositionRes](
			httpClient,
			baseURL+OmniApiCreateDispositionProcedure,
			opts...,
		),
		deleteDisposition: connect_go.NewClient[v0alpha.DeleteDispositionReq, commons.Empty](
			httpClient,
			baseURL+OmniApiDeleteDispositionProcedure,
			opts...,
		),
		listDispositions: connect_go.NewClient[v0alpha.ListDispositionsReq, v0alpha.ListDispositionsRes](
			httpClient,
			baseURL+OmniApiListDispositionsProcedure,
			opts...,
		),
		updateDisposition: connect_go.NewClient[v0alpha.UpdateDispositionReq, commons.Empty](
			httpClient,
			baseURL+OmniApiUpdateDispositionProcedure,
			opts...,
		),
		listCustomUnsubscribeLinks: connect_go.NewClient[commons.Empty, v0alpha.ListCustomUnsubscribeLinksRes](
			httpClient,
			baseURL+OmniApiListCustomUnsubscribeLinksProcedure,
			opts...,
		),
		createCustomUnsubscribeLink: connect_go.NewClient[commons.OmniCustomUnsubscribeLink, v0alpha.CreateCustomUnsubscribeLinkRes](
			httpClient,
			baseURL+OmniApiCreateCustomUnsubscribeLinkProcedure,
			opts...,
		),
		updateCustomUnsubscribeLink: connect_go.NewClient[v0alpha.UpdateCustomUnsubscribeLinkReq, v0alpha.UpdateCustomUnsubscribeLinkRes](
			httpClient,
			baseURL+OmniApiUpdateCustomUnsubscribeLinkProcedure,
			opts...,
		),
		deleteCustomUnsubscribeLink: connect_go.NewClient[v0alpha.DeleteCustomUnsubscribeLinkReq, commons.Empty](
			httpClient,
			baseURL+OmniApiDeleteCustomUnsubscribeLinkProcedure,
			opts...,
		),
		listContactLists: connect_go.NewClient[v0alpha.ListContactListsReq, v0alpha.ListContactListsRes](
			httpClient,
			baseURL+OmniApiListContactListsProcedure,
			opts...,
		),
		getAvailableHeaders: connect_go.NewClient[v0alpha.GetAvailableHeadersReq, v0alpha.GetAvailableHeadersRes](
			httpClient,
			baseURL+OmniApiGetAvailableHeadersProcedure,
			opts...,
		),
		getTask: connect_go.NewClient[v0alpha.GetTaskReq, commons.OmniTask](
			httpClient,
			baseURL+OmniApiGetTaskProcedure,
			opts...,
		),
		listTasks: connect_go.NewClient[v0alpha.ListTasksReq, v0alpha.ListTasksRes](
			httpClient,
			baseURL+OmniApiListTasksProcedure,
			opts...,
		),
		createConnectedInbox: connect_go.NewClient[commons.ConnectedInbox, v0alpha.CreateConnectedInboxRes](
			httpClient,
			baseURL+OmniApiCreateConnectedInboxProcedure,
			opts...,
		),
		deleteConnectedInboxBySid: connect_go.NewClient[v0alpha.DeleteConnectedInboxBySidReq, commons.Empty](
			httpClient,
			baseURL+OmniApiDeleteConnectedInboxBySidProcedure,
			opts...,
		),
		getConnectedInboxBySid: connect_go.NewClient[v0alpha.GetConnectedInboxBySidReq, commons.ConnectedInbox](
			httpClient,
			baseURL+OmniApiGetConnectedInboxBySidProcedure,
			opts...,
		),
		performSendgridAccountChecks: connect_go.NewClient[v0alpha.SendgridAccountByClientReq, v0alpha.SendgridAccountByClientRes](
			httpClient,
			baseURL+OmniApiPerformSendgridAccountChecksProcedure,
			opts...,
		),
		listConnectedInboxes: connect_go.NewClient[v0alpha.ListConnectedInboxesReq, v0alpha.ListConnectedInboxesRes](
			httpClient,
			baseURL+OmniApiListConnectedInboxesProcedure,
			opts...,
		),
		testConnectedInbox: connect_go.NewClient[commons.ConnectedInbox, v0alpha.TestConnectedInboxRes](
			httpClient,
			baseURL+OmniApiTestConnectedInboxProcedure,
			opts...,
		),
		updateConnectedInbox: connect_go.NewClient[v0alpha.UpdateConnectedInboxReq, commons.Empty](
			httpClient,
			baseURL+OmniApiUpdateConnectedInboxProcedure,
			opts...,
		),
		createVerifiedEmail: connect_go.NewClient[commons.VerifiedEmail, v0alpha.CreateVerifiedEmailRes](
			httpClient,
			baseURL+OmniApiCreateVerifiedEmailProcedure,
			opts...,
		),
		sendEmailNotification: connect_go.NewClient[v0alpha.SendEmailNotificationReq, v0alpha.SendEmailNotificationRes](
			httpClient,
			baseURL+OmniApiSendEmailNotificationProcedure,
			opts...,
		),
		deleteVerifiedEmail: connect_go.NewClient[v0alpha.DeleteVerifiedEmailReq, commons.Empty](
			httpClient,
			baseURL+OmniApiDeleteVerifiedEmailProcedure,
			opts...,
		),
		getVerifiedEmailBySid: connect_go.NewClient[v0alpha.GetVerifiedEmailBySidReq, commons.VerifiedEmail](
			httpClient,
			baseURL+OmniApiGetVerifiedEmailBySidProcedure,
			opts...,
		),
		listVerifiedEmails: connect_go.NewClient[v0alpha.ListVerifiedEmailsReq, v0alpha.ListVerifiedEmailsRes](
			httpClient,
			baseURL+OmniApiListVerifiedEmailsProcedure,
			opts...,
		),
		resendVerifiedEmail: connect_go.NewClient[v0alpha.ResendVerifiedEmailReq, v0alpha.ResendVerifiedEmailRes](
			httpClient,
			baseURL+OmniApiResendVerifiedEmailProcedure,
			opts...,
		),
		updateVerifiedEmail: connect_go.NewClient[v0alpha.UpdateVerifiedEmailReq, commons.Empty](
			httpClient,
			baseURL+OmniApiUpdateVerifiedEmailProcedure,
			opts...,
		),
		getPendingGoogleXOAuth2Data: connect_go.NewClient[v0alpha.GetPendingGoogleXOAuth2DataReq, v0alpha.GetPendingGoogleXOAuth2DataRes](
			httpClient,
			baseURL+OmniApiGetPendingGoogleXOAuth2DataProcedure,
			opts...,
		),
		sendFeedbackEmail: connect_go.NewClient[v0alpha.SendFeedbackEmailReq, v0alpha.SendFeedbackEmailRes](
			httpClient,
			baseURL+OmniApiSendFeedbackEmailProcedure,
			opts...,
		),
		getOmniAttachment: connect_go.NewClient[v0alpha.GetOmniAttachmentReq, commons.OmniAttachment](
			httpClient,
			baseURL+OmniApiGetOmniAttachmentProcedure,
			opts...,
		),
		createTasks: connect_go.NewClient[v0alpha.CreateTasksReq, v0alpha.CreateTasksRes](
			httpClient,
			baseURL+OmniApiCreateTasksProcedure,
			opts...,
		),
		createSignature: connect_go.NewClient[v0alpha.CreateSignatureReq, v0alpha.CreateSignatureRes](
			httpClient,
			baseURL+OmniApiCreateSignatureProcedure,
			opts...,
		),
		deleteSignature: connect_go.NewClient[v0alpha.DeleteSignatureReq, v0alpha.DeleteSignatureRes](
			httpClient,
			baseURL+OmniApiDeleteSignatureProcedure,
			opts...,
		),
		listSignatures: connect_go.NewClient[v0alpha.ListSignaturesReq, v0alpha.ListSignaturesRes](
			httpClient,
			baseURL+OmniApiListSignaturesProcedure,
			opts...,
		),
		updateSignature: connect_go.NewClient[v0alpha.UpdateSignatureReq, v0alpha.UpdateSignatureRes](
			httpClient,
			baseURL+OmniApiUpdateSignatureProcedure,
			opts...,
		),
		createProject: connect_go.NewClient[v0alpha.CreateProjectReq, v0alpha.CreateProjectRes](
			httpClient,
			baseURL+OmniApiCreateProjectProcedure,
			opts...,
		),
		listProjects: connect_go.NewClient[v0alpha.ListProjectsReq, v0alpha.ListProjectsRes](
			httpClient,
			baseURL+OmniApiListProjectsProcedure,
			opts...,
		),
		editProjectById: connect_go.NewClient[v0alpha.EditProjectByIdReq, v0alpha.EditProjectByIdRes](
			httpClient,
			baseURL+OmniApiEditProjectByIdProcedure,
			opts...,
		),
		closeProjectById: connect_go.NewClient[v0alpha.CloseProjectByIdReq, v0alpha.CloseProjectByIdRes](
			httpClient,
			baseURL+OmniApiCloseProjectByIdProcedure,
			opts...,
		),
		getProjectById: connect_go.NewClient[v0alpha.GetProjectByIdReq, v0alpha.Project](
			httpClient,
			baseURL+OmniApiGetProjectByIdProcedure,
			opts...,
		),
		createCannedMessage: connect_go.NewClient[v0alpha.CreateCannedMessageReq, v0alpha.CannedMessage](
			httpClient,
			baseURL+OmniApiCreateCannedMessageProcedure,
			opts...,
		),
		listCannedMessages: connect_go.NewClient[v0alpha.ListCannedMessagesReq, v0alpha.ListCannedMessagesRes](
			httpClient,
			baseURL+OmniApiListCannedMessagesProcedure,
			opts...,
		),
		updateCannedMessage: connect_go.NewClient[v0alpha.UpdateCannedMessageReq, v0alpha.CannedMessage](
			httpClient,
			baseURL+OmniApiUpdateCannedMessageProcedure,
			opts...,
		),
		getCannedMessageById: connect_go.NewClient[v0alpha.GetCannedMessageByIdReq, v0alpha.CannedMessageWithGroup](
			httpClient,
			baseURL+OmniApiGetCannedMessageByIdProcedure,
			opts...,
		),
		deleteCannedMessageById: connect_go.NewClient[v0alpha.DeleteCannedMessageByIdReq, v0alpha.DeleteCannedMessageByIdRes](
			httpClient,
			baseURL+OmniApiDeleteCannedMessageByIdProcedure,
			opts...,
		),
		createCannedMessageGroup: connect_go.NewClient[v0alpha.CreateCannedMessageGroupReq, v0alpha.CannedMessageGroup](
			httpClient,
			baseURL+OmniApiCreateCannedMessageGroupProcedure,
			opts...,
		),
		listCannedMessageGroups: connect_go.NewClient[v0alpha.ListCannedMessageGroupsReq, v0alpha.ListCannedMessageGroupsRes](
			httpClient,
			baseURL+OmniApiListCannedMessageGroupsProcedure,
			opts...,
		),
		updateCannedMessageGroup: connect_go.NewClient[v0alpha.UpdateCannedMessageGroupReq, v0alpha.UpdateCannedMessageGroupRes](
			httpClient,
			baseURL+OmniApiUpdateCannedMessageGroupProcedure,
			opts...,
		),
		deleteCannedMessageGroup: connect_go.NewClient[v0alpha.DeleteCannedMessageGroupReq, v0alpha.DeleteCannedMessageGroupRes](
			httpClient,
			baseURL+OmniApiDeleteCannedMessageGroupProcedure,
			opts...,
		),
		listCannedMessagesByGroupId: connect_go.NewClient[v0alpha.ListCannedMessagesByGroupIdReq, v0alpha.ListCannedMessagesByGroupIdRes](
			httpClient,
			baseURL+OmniApiListCannedMessagesByGroupIdProcedure,
			opts...,
		),
		getCannedMessageGroupById: connect_go.NewClient[v0alpha.GetCannedMessageGroupByIdReq, v0alpha.CannedMessageGroup](
			httpClient,
			baseURL+OmniApiGetCannedMessageGroupByIdProcedure,
			opts...,
		),
	}
}

// omniApiClient implements OmniApiClient.
type omniApiClient struct {
	archiveCampaign              *connect_go.Client[v0alpha.ArchiveCampaignReq, v0alpha.ArchiveCampaignRes]
	createCampaign               *connect_go.Client[v0alpha.CreateCampaignReq, commons.OmniCampaign]
	getCampaignById              *connect_go.Client[v0alpha.GetCampaignByIdReq, commons.OmniCampaign]
	listCampaigns                *connect_go.Client[v0alpha.ListCampaignsReq, v0alpha.ListCampaignsRes]
	pauseCampaign                *connect_go.Client[v0alpha.PauseCampaignReq, v0alpha.PauseCampaignRes]
	resumeCampaign               *connect_go.Client[v0alpha.ResumeCampaignReq, v0alpha.ResumeCampaignRes]
	updateCampaign               *connect_go.Client[v0alpha.UpdateCampaignReq, v0alpha.UpdateCampaignRes]
	updateCampaignPacingSpeed    *connect_go.Client[v0alpha.UpdateCampaignPacingSpeedReq, v0alpha.UpdateCampaignPacingSpeedRes]
	getOffLoadedTextMessage      *connect_go.Client[v0alpha.GetOffLoadedTextMessageReq, v0alpha.GetOffLoadedTextMessageRes]
	managerListMessages          *connect_go.Client[v0alpha.ManagerListMessagesReq, commons.OmniMessage]
	listMessages                 *connect_go.Client[v0alpha.ListMessagesReq, commons.OmniMessage]
	sendOmniMessage              *connect_go.Client[v0alpha.SendOmniMessageReq, commons.Empty]
	managerSendOmniMessage       *connect_go.Client[v0alpha.SendOmniMessageReq, commons.Empty]
	managerListConversations     *connect_go.Client[v0alpha.ListConversationsReq, v0alpha.ListConversationsRes]
	suggestResponse              *connect_go.Client[v0alpha.SuggestResponseReq, v0alpha.SuggestResponseRes]
	createDisposition            *connect_go.Client[v0alpha.CreateDispositionReq, v0alpha.CreateDispositionRes]
	deleteDisposition            *connect_go.Client[v0alpha.DeleteDispositionReq, commons.Empty]
	listDispositions             *connect_go.Client[v0alpha.ListDispositionsReq, v0alpha.ListDispositionsRes]
	updateDisposition            *connect_go.Client[v0alpha.UpdateDispositionReq, commons.Empty]
	listCustomUnsubscribeLinks   *connect_go.Client[commons.Empty, v0alpha.ListCustomUnsubscribeLinksRes]
	createCustomUnsubscribeLink  *connect_go.Client[commons.OmniCustomUnsubscribeLink, v0alpha.CreateCustomUnsubscribeLinkRes]
	updateCustomUnsubscribeLink  *connect_go.Client[v0alpha.UpdateCustomUnsubscribeLinkReq, v0alpha.UpdateCustomUnsubscribeLinkRes]
	deleteCustomUnsubscribeLink  *connect_go.Client[v0alpha.DeleteCustomUnsubscribeLinkReq, commons.Empty]
	listContactLists             *connect_go.Client[v0alpha.ListContactListsReq, v0alpha.ListContactListsRes]
	getAvailableHeaders          *connect_go.Client[v0alpha.GetAvailableHeadersReq, v0alpha.GetAvailableHeadersRes]
	getTask                      *connect_go.Client[v0alpha.GetTaskReq, commons.OmniTask]
	listTasks                    *connect_go.Client[v0alpha.ListTasksReq, v0alpha.ListTasksRes]
	createConnectedInbox         *connect_go.Client[commons.ConnectedInbox, v0alpha.CreateConnectedInboxRes]
	deleteConnectedInboxBySid    *connect_go.Client[v0alpha.DeleteConnectedInboxBySidReq, commons.Empty]
	getConnectedInboxBySid       *connect_go.Client[v0alpha.GetConnectedInboxBySidReq, commons.ConnectedInbox]
	performSendgridAccountChecks *connect_go.Client[v0alpha.SendgridAccountByClientReq, v0alpha.SendgridAccountByClientRes]
	listConnectedInboxes         *connect_go.Client[v0alpha.ListConnectedInboxesReq, v0alpha.ListConnectedInboxesRes]
	testConnectedInbox           *connect_go.Client[commons.ConnectedInbox, v0alpha.TestConnectedInboxRes]
	updateConnectedInbox         *connect_go.Client[v0alpha.UpdateConnectedInboxReq, commons.Empty]
	createVerifiedEmail          *connect_go.Client[commons.VerifiedEmail, v0alpha.CreateVerifiedEmailRes]
	sendEmailNotification        *connect_go.Client[v0alpha.SendEmailNotificationReq, v0alpha.SendEmailNotificationRes]
	deleteVerifiedEmail          *connect_go.Client[v0alpha.DeleteVerifiedEmailReq, commons.Empty]
	getVerifiedEmailBySid        *connect_go.Client[v0alpha.GetVerifiedEmailBySidReq, commons.VerifiedEmail]
	listVerifiedEmails           *connect_go.Client[v0alpha.ListVerifiedEmailsReq, v0alpha.ListVerifiedEmailsRes]
	resendVerifiedEmail          *connect_go.Client[v0alpha.ResendVerifiedEmailReq, v0alpha.ResendVerifiedEmailRes]
	updateVerifiedEmail          *connect_go.Client[v0alpha.UpdateVerifiedEmailReq, commons.Empty]
	getPendingGoogleXOAuth2Data  *connect_go.Client[v0alpha.GetPendingGoogleXOAuth2DataReq, v0alpha.GetPendingGoogleXOAuth2DataRes]
	sendFeedbackEmail            *connect_go.Client[v0alpha.SendFeedbackEmailReq, v0alpha.SendFeedbackEmailRes]
	getOmniAttachment            *connect_go.Client[v0alpha.GetOmniAttachmentReq, commons.OmniAttachment]
	createTasks                  *connect_go.Client[v0alpha.CreateTasksReq, v0alpha.CreateTasksRes]
	createSignature              *connect_go.Client[v0alpha.CreateSignatureReq, v0alpha.CreateSignatureRes]
	deleteSignature              *connect_go.Client[v0alpha.DeleteSignatureReq, v0alpha.DeleteSignatureRes]
	listSignatures               *connect_go.Client[v0alpha.ListSignaturesReq, v0alpha.ListSignaturesRes]
	updateSignature              *connect_go.Client[v0alpha.UpdateSignatureReq, v0alpha.UpdateSignatureRes]
	createProject                *connect_go.Client[v0alpha.CreateProjectReq, v0alpha.CreateProjectRes]
	listProjects                 *connect_go.Client[v0alpha.ListProjectsReq, v0alpha.ListProjectsRes]
	editProjectById              *connect_go.Client[v0alpha.EditProjectByIdReq, v0alpha.EditProjectByIdRes]
	closeProjectById             *connect_go.Client[v0alpha.CloseProjectByIdReq, v0alpha.CloseProjectByIdRes]
	getProjectById               *connect_go.Client[v0alpha.GetProjectByIdReq, v0alpha.Project]
	createCannedMessage          *connect_go.Client[v0alpha.CreateCannedMessageReq, v0alpha.CannedMessage]
	listCannedMessages           *connect_go.Client[v0alpha.ListCannedMessagesReq, v0alpha.ListCannedMessagesRes]
	updateCannedMessage          *connect_go.Client[v0alpha.UpdateCannedMessageReq, v0alpha.CannedMessage]
	getCannedMessageById         *connect_go.Client[v0alpha.GetCannedMessageByIdReq, v0alpha.CannedMessageWithGroup]
	deleteCannedMessageById      *connect_go.Client[v0alpha.DeleteCannedMessageByIdReq, v0alpha.DeleteCannedMessageByIdRes]
	createCannedMessageGroup     *connect_go.Client[v0alpha.CreateCannedMessageGroupReq, v0alpha.CannedMessageGroup]
	listCannedMessageGroups      *connect_go.Client[v0alpha.ListCannedMessageGroupsReq, v0alpha.ListCannedMessageGroupsRes]
	updateCannedMessageGroup     *connect_go.Client[v0alpha.UpdateCannedMessageGroupReq, v0alpha.UpdateCannedMessageGroupRes]
	deleteCannedMessageGroup     *connect_go.Client[v0alpha.DeleteCannedMessageGroupReq, v0alpha.DeleteCannedMessageGroupRes]
	listCannedMessagesByGroupId  *connect_go.Client[v0alpha.ListCannedMessagesByGroupIdReq, v0alpha.ListCannedMessagesByGroupIdRes]
	getCannedMessageGroupById    *connect_go.Client[v0alpha.GetCannedMessageGroupByIdReq, v0alpha.CannedMessageGroup]
}

// ArchiveCampaign calls api.v0alpha.OmniApi.ArchiveCampaign.
func (c *omniApiClient) ArchiveCampaign(ctx context.Context, req *connect_go.Request[v0alpha.ArchiveCampaignReq]) (*connect_go.Response[v0alpha.ArchiveCampaignRes], error) {
	return c.archiveCampaign.CallUnary(ctx, req)
}

// CreateCampaign calls api.v0alpha.OmniApi.CreateCampaign.
func (c *omniApiClient) CreateCampaign(ctx context.Context, req *connect_go.Request[v0alpha.CreateCampaignReq]) (*connect_go.Response[commons.OmniCampaign], error) {
	return c.createCampaign.CallUnary(ctx, req)
}

// GetCampaignById calls api.v0alpha.OmniApi.GetCampaignById.
func (c *omniApiClient) GetCampaignById(ctx context.Context, req *connect_go.Request[v0alpha.GetCampaignByIdReq]) (*connect_go.Response[commons.OmniCampaign], error) {
	return c.getCampaignById.CallUnary(ctx, req)
}

// ListCampaigns calls api.v0alpha.OmniApi.ListCampaigns.
func (c *omniApiClient) ListCampaigns(ctx context.Context, req *connect_go.Request[v0alpha.ListCampaignsReq]) (*connect_go.Response[v0alpha.ListCampaignsRes], error) {
	return c.listCampaigns.CallUnary(ctx, req)
}

// PauseCampaign calls api.v0alpha.OmniApi.PauseCampaign.
func (c *omniApiClient) PauseCampaign(ctx context.Context, req *connect_go.Request[v0alpha.PauseCampaignReq]) (*connect_go.Response[v0alpha.PauseCampaignRes], error) {
	return c.pauseCampaign.CallUnary(ctx, req)
}

// ResumeCampaign calls api.v0alpha.OmniApi.ResumeCampaign.
func (c *omniApiClient) ResumeCampaign(ctx context.Context, req *connect_go.Request[v0alpha.ResumeCampaignReq]) (*connect_go.Response[v0alpha.ResumeCampaignRes], error) {
	return c.resumeCampaign.CallUnary(ctx, req)
}

// UpdateCampaign calls api.v0alpha.OmniApi.UpdateCampaign.
func (c *omniApiClient) UpdateCampaign(ctx context.Context, req *connect_go.Request[v0alpha.UpdateCampaignReq]) (*connect_go.Response[v0alpha.UpdateCampaignRes], error) {
	return c.updateCampaign.CallUnary(ctx, req)
}

// UpdateCampaignPacingSpeed calls api.v0alpha.OmniApi.UpdateCampaignPacingSpeed.
func (c *omniApiClient) UpdateCampaignPacingSpeed(ctx context.Context, req *connect_go.Request[v0alpha.UpdateCampaignPacingSpeedReq]) (*connect_go.Response[v0alpha.UpdateCampaignPacingSpeedRes], error) {
	return c.updateCampaignPacingSpeed.CallUnary(ctx, req)
}

// GetOffLoadedTextMessage calls api.v0alpha.OmniApi.GetOffLoadedTextMessage.
func (c *omniApiClient) GetOffLoadedTextMessage(ctx context.Context, req *connect_go.Request[v0alpha.GetOffLoadedTextMessageReq]) (*connect_go.Response[v0alpha.GetOffLoadedTextMessageRes], error) {
	return c.getOffLoadedTextMessage.CallUnary(ctx, req)
}

// ManagerListMessages calls api.v0alpha.OmniApi.ManagerListMessages.
func (c *omniApiClient) ManagerListMessages(ctx context.Context, req *connect_go.Request[v0alpha.ManagerListMessagesReq]) (*connect_go.ServerStreamForClient[commons.OmniMessage], error) {
	return c.managerListMessages.CallServerStream(ctx, req)
}

// ListMessages calls api.v0alpha.OmniApi.ListMessages.
func (c *omniApiClient) ListMessages(ctx context.Context, req *connect_go.Request[v0alpha.ListMessagesReq]) (*connect_go.ServerStreamForClient[commons.OmniMessage], error) {
	return c.listMessages.CallServerStream(ctx, req)
}

// SendOmniMessage calls api.v0alpha.OmniApi.SendOmniMessage.
func (c *omniApiClient) SendOmniMessage(ctx context.Context, req *connect_go.Request[v0alpha.SendOmniMessageReq]) (*connect_go.Response[commons.Empty], error) {
	return c.sendOmniMessage.CallUnary(ctx, req)
}

// ManagerSendOmniMessage calls api.v0alpha.OmniApi.ManagerSendOmniMessage.
func (c *omniApiClient) ManagerSendOmniMessage(ctx context.Context, req *connect_go.Request[v0alpha.SendOmniMessageReq]) (*connect_go.Response[commons.Empty], error) {
	return c.managerSendOmniMessage.CallUnary(ctx, req)
}

// ManagerListConversations calls api.v0alpha.OmniApi.ManagerListConversations.
func (c *omniApiClient) ManagerListConversations(ctx context.Context, req *connect_go.Request[v0alpha.ListConversationsReq]) (*connect_go.Response[v0alpha.ListConversationsRes], error) {
	return c.managerListConversations.CallUnary(ctx, req)
}

// SuggestResponse calls api.v0alpha.OmniApi.SuggestResponse.
func (c *omniApiClient) SuggestResponse(ctx context.Context, req *connect_go.Request[v0alpha.SuggestResponseReq]) (*connect_go.Response[v0alpha.SuggestResponseRes], error) {
	return c.suggestResponse.CallUnary(ctx, req)
}

// CreateDisposition calls api.v0alpha.OmniApi.CreateDisposition.
func (c *omniApiClient) CreateDisposition(ctx context.Context, req *connect_go.Request[v0alpha.CreateDispositionReq]) (*connect_go.Response[v0alpha.CreateDispositionRes], error) {
	return c.createDisposition.CallUnary(ctx, req)
}

// DeleteDisposition calls api.v0alpha.OmniApi.DeleteDisposition.
func (c *omniApiClient) DeleteDisposition(ctx context.Context, req *connect_go.Request[v0alpha.DeleteDispositionReq]) (*connect_go.Response[commons.Empty], error) {
	return c.deleteDisposition.CallUnary(ctx, req)
}

// ListDispositions calls api.v0alpha.OmniApi.ListDispositions.
func (c *omniApiClient) ListDispositions(ctx context.Context, req *connect_go.Request[v0alpha.ListDispositionsReq]) (*connect_go.Response[v0alpha.ListDispositionsRes], error) {
	return c.listDispositions.CallUnary(ctx, req)
}

// UpdateDisposition calls api.v0alpha.OmniApi.UpdateDisposition.
func (c *omniApiClient) UpdateDisposition(ctx context.Context, req *connect_go.Request[v0alpha.UpdateDispositionReq]) (*connect_go.Response[commons.Empty], error) {
	return c.updateDisposition.CallUnary(ctx, req)
}

// ListCustomUnsubscribeLinks calls api.v0alpha.OmniApi.ListCustomUnsubscribeLinks.
func (c *omniApiClient) ListCustomUnsubscribeLinks(ctx context.Context, req *connect_go.Request[commons.Empty]) (*connect_go.Response[v0alpha.ListCustomUnsubscribeLinksRes], error) {
	return c.listCustomUnsubscribeLinks.CallUnary(ctx, req)
}

// CreateCustomUnsubscribeLink calls api.v0alpha.OmniApi.CreateCustomUnsubscribeLink.
func (c *omniApiClient) CreateCustomUnsubscribeLink(ctx context.Context, req *connect_go.Request[commons.OmniCustomUnsubscribeLink]) (*connect_go.Response[v0alpha.CreateCustomUnsubscribeLinkRes], error) {
	return c.createCustomUnsubscribeLink.CallUnary(ctx, req)
}

// UpdateCustomUnsubscribeLink calls api.v0alpha.OmniApi.UpdateCustomUnsubscribeLink.
func (c *omniApiClient) UpdateCustomUnsubscribeLink(ctx context.Context, req *connect_go.Request[v0alpha.UpdateCustomUnsubscribeLinkReq]) (*connect_go.Response[v0alpha.UpdateCustomUnsubscribeLinkRes], error) {
	return c.updateCustomUnsubscribeLink.CallUnary(ctx, req)
}

// DeleteCustomUnsubscribeLink calls api.v0alpha.OmniApi.DeleteCustomUnsubscribeLink.
func (c *omniApiClient) DeleteCustomUnsubscribeLink(ctx context.Context, req *connect_go.Request[v0alpha.DeleteCustomUnsubscribeLinkReq]) (*connect_go.Response[commons.Empty], error) {
	return c.deleteCustomUnsubscribeLink.CallUnary(ctx, req)
}

// ListContactLists calls api.v0alpha.OmniApi.ListContactLists.
func (c *omniApiClient) ListContactLists(ctx context.Context, req *connect_go.Request[v0alpha.ListContactListsReq]) (*connect_go.Response[v0alpha.ListContactListsRes], error) {
	return c.listContactLists.CallUnary(ctx, req)
}

// GetAvailableHeaders calls api.v0alpha.OmniApi.GetAvailableHeaders.
func (c *omniApiClient) GetAvailableHeaders(ctx context.Context, req *connect_go.Request[v0alpha.GetAvailableHeadersReq]) (*connect_go.Response[v0alpha.GetAvailableHeadersRes], error) {
	return c.getAvailableHeaders.CallUnary(ctx, req)
}

// GetTask calls api.v0alpha.OmniApi.GetTask.
func (c *omniApiClient) GetTask(ctx context.Context, req *connect_go.Request[v0alpha.GetTaskReq]) (*connect_go.Response[commons.OmniTask], error) {
	return c.getTask.CallUnary(ctx, req)
}

// ListTasks calls api.v0alpha.OmniApi.ListTasks.
func (c *omniApiClient) ListTasks(ctx context.Context, req *connect_go.Request[v0alpha.ListTasksReq]) (*connect_go.Response[v0alpha.ListTasksRes], error) {
	return c.listTasks.CallUnary(ctx, req)
}

// CreateConnectedInbox calls api.v0alpha.OmniApi.CreateConnectedInbox.
func (c *omniApiClient) CreateConnectedInbox(ctx context.Context, req *connect_go.Request[commons.ConnectedInbox]) (*connect_go.Response[v0alpha.CreateConnectedInboxRes], error) {
	return c.createConnectedInbox.CallUnary(ctx, req)
}

// DeleteConnectedInboxBySid calls api.v0alpha.OmniApi.DeleteConnectedInboxBySid.
func (c *omniApiClient) DeleteConnectedInboxBySid(ctx context.Context, req *connect_go.Request[v0alpha.DeleteConnectedInboxBySidReq]) (*connect_go.Response[commons.Empty], error) {
	return c.deleteConnectedInboxBySid.CallUnary(ctx, req)
}

// GetConnectedInboxBySid calls api.v0alpha.OmniApi.GetConnectedInboxBySid.
func (c *omniApiClient) GetConnectedInboxBySid(ctx context.Context, req *connect_go.Request[v0alpha.GetConnectedInboxBySidReq]) (*connect_go.Response[commons.ConnectedInbox], error) {
	return c.getConnectedInboxBySid.CallUnary(ctx, req)
}

// PerformSendgridAccountChecks calls api.v0alpha.OmniApi.PerformSendgridAccountChecks.
func (c *omniApiClient) PerformSendgridAccountChecks(ctx context.Context, req *connect_go.Request[v0alpha.SendgridAccountByClientReq]) (*connect_go.Response[v0alpha.SendgridAccountByClientRes], error) {
	return c.performSendgridAccountChecks.CallUnary(ctx, req)
}

// ListConnectedInboxes calls api.v0alpha.OmniApi.ListConnectedInboxes.
func (c *omniApiClient) ListConnectedInboxes(ctx context.Context, req *connect_go.Request[v0alpha.ListConnectedInboxesReq]) (*connect_go.Response[v0alpha.ListConnectedInboxesRes], error) {
	return c.listConnectedInboxes.CallUnary(ctx, req)
}

// TestConnectedInbox calls api.v0alpha.OmniApi.TestConnectedInbox.
func (c *omniApiClient) TestConnectedInbox(ctx context.Context, req *connect_go.Request[commons.ConnectedInbox]) (*connect_go.Response[v0alpha.TestConnectedInboxRes], error) {
	return c.testConnectedInbox.CallUnary(ctx, req)
}

// UpdateConnectedInbox calls api.v0alpha.OmniApi.UpdateConnectedInbox.
func (c *omniApiClient) UpdateConnectedInbox(ctx context.Context, req *connect_go.Request[v0alpha.UpdateConnectedInboxReq]) (*connect_go.Response[commons.Empty], error) {
	return c.updateConnectedInbox.CallUnary(ctx, req)
}

// CreateVerifiedEmail calls api.v0alpha.OmniApi.CreateVerifiedEmail.
func (c *omniApiClient) CreateVerifiedEmail(ctx context.Context, req *connect_go.Request[commons.VerifiedEmail]) (*connect_go.Response[v0alpha.CreateVerifiedEmailRes], error) {
	return c.createVerifiedEmail.CallUnary(ctx, req)
}

// SendEmailNotification calls api.v0alpha.OmniApi.SendEmailNotification.
func (c *omniApiClient) SendEmailNotification(ctx context.Context, req *connect_go.Request[v0alpha.SendEmailNotificationReq]) (*connect_go.Response[v0alpha.SendEmailNotificationRes], error) {
	return c.sendEmailNotification.CallUnary(ctx, req)
}

// DeleteVerifiedEmail calls api.v0alpha.OmniApi.DeleteVerifiedEmail.
func (c *omniApiClient) DeleteVerifiedEmail(ctx context.Context, req *connect_go.Request[v0alpha.DeleteVerifiedEmailReq]) (*connect_go.Response[commons.Empty], error) {
	return c.deleteVerifiedEmail.CallUnary(ctx, req)
}

// GetVerifiedEmailBySid calls api.v0alpha.OmniApi.GetVerifiedEmailBySid.
func (c *omniApiClient) GetVerifiedEmailBySid(ctx context.Context, req *connect_go.Request[v0alpha.GetVerifiedEmailBySidReq]) (*connect_go.Response[commons.VerifiedEmail], error) {
	return c.getVerifiedEmailBySid.CallUnary(ctx, req)
}

// ListVerifiedEmails calls api.v0alpha.OmniApi.ListVerifiedEmails.
func (c *omniApiClient) ListVerifiedEmails(ctx context.Context, req *connect_go.Request[v0alpha.ListVerifiedEmailsReq]) (*connect_go.Response[v0alpha.ListVerifiedEmailsRes], error) {
	return c.listVerifiedEmails.CallUnary(ctx, req)
}

// ResendVerifiedEmail calls api.v0alpha.OmniApi.ResendVerifiedEmail.
func (c *omniApiClient) ResendVerifiedEmail(ctx context.Context, req *connect_go.Request[v0alpha.ResendVerifiedEmailReq]) (*connect_go.Response[v0alpha.ResendVerifiedEmailRes], error) {
	return c.resendVerifiedEmail.CallUnary(ctx, req)
}

// UpdateVerifiedEmail calls api.v0alpha.OmniApi.UpdateVerifiedEmail.
func (c *omniApiClient) UpdateVerifiedEmail(ctx context.Context, req *connect_go.Request[v0alpha.UpdateVerifiedEmailReq]) (*connect_go.Response[commons.Empty], error) {
	return c.updateVerifiedEmail.CallUnary(ctx, req)
}

// GetPendingGoogleXOAuth2Data calls api.v0alpha.OmniApi.GetPendingGoogleXOAuth2Data.
func (c *omniApiClient) GetPendingGoogleXOAuth2Data(ctx context.Context, req *connect_go.Request[v0alpha.GetPendingGoogleXOAuth2DataReq]) (*connect_go.Response[v0alpha.GetPendingGoogleXOAuth2DataRes], error) {
	return c.getPendingGoogleXOAuth2Data.CallUnary(ctx, req)
}

// SendFeedbackEmail calls api.v0alpha.OmniApi.SendFeedbackEmail.
func (c *omniApiClient) SendFeedbackEmail(ctx context.Context, req *connect_go.Request[v0alpha.SendFeedbackEmailReq]) (*connect_go.Response[v0alpha.SendFeedbackEmailRes], error) {
	return c.sendFeedbackEmail.CallUnary(ctx, req)
}

// GetOmniAttachment calls api.v0alpha.OmniApi.GetOmniAttachment.
func (c *omniApiClient) GetOmniAttachment(ctx context.Context, req *connect_go.Request[v0alpha.GetOmniAttachmentReq]) (*connect_go.Response[commons.OmniAttachment], error) {
	return c.getOmniAttachment.CallUnary(ctx, req)
}

// CreateTasks calls api.v0alpha.OmniApi.CreateTasks.
func (c *omniApiClient) CreateTasks(ctx context.Context, req *connect_go.Request[v0alpha.CreateTasksReq]) (*connect_go.Response[v0alpha.CreateTasksRes], error) {
	return c.createTasks.CallUnary(ctx, req)
}

// CreateSignature calls api.v0alpha.OmniApi.CreateSignature.
func (c *omniApiClient) CreateSignature(ctx context.Context, req *connect_go.Request[v0alpha.CreateSignatureReq]) (*connect_go.Response[v0alpha.CreateSignatureRes], error) {
	return c.createSignature.CallUnary(ctx, req)
}

// DeleteSignature calls api.v0alpha.OmniApi.DeleteSignature.
func (c *omniApiClient) DeleteSignature(ctx context.Context, req *connect_go.Request[v0alpha.DeleteSignatureReq]) (*connect_go.Response[v0alpha.DeleteSignatureRes], error) {
	return c.deleteSignature.CallUnary(ctx, req)
}

// ListSignatures calls api.v0alpha.OmniApi.ListSignatures.
func (c *omniApiClient) ListSignatures(ctx context.Context, req *connect_go.Request[v0alpha.ListSignaturesReq]) (*connect_go.Response[v0alpha.ListSignaturesRes], error) {
	return c.listSignatures.CallUnary(ctx, req)
}

// UpdateSignature calls api.v0alpha.OmniApi.UpdateSignature.
func (c *omniApiClient) UpdateSignature(ctx context.Context, req *connect_go.Request[v0alpha.UpdateSignatureReq]) (*connect_go.Response[v0alpha.UpdateSignatureRes], error) {
	return c.updateSignature.CallUnary(ctx, req)
}

// CreateProject calls api.v0alpha.OmniApi.CreateProject.
func (c *omniApiClient) CreateProject(ctx context.Context, req *connect_go.Request[v0alpha.CreateProjectReq]) (*connect_go.Response[v0alpha.CreateProjectRes], error) {
	return c.createProject.CallUnary(ctx, req)
}

// ListProjects calls api.v0alpha.OmniApi.ListProjects.
func (c *omniApiClient) ListProjects(ctx context.Context, req *connect_go.Request[v0alpha.ListProjectsReq]) (*connect_go.Response[v0alpha.ListProjectsRes], error) {
	return c.listProjects.CallUnary(ctx, req)
}

// EditProjectById calls api.v0alpha.OmniApi.EditProjectById.
func (c *omniApiClient) EditProjectById(ctx context.Context, req *connect_go.Request[v0alpha.EditProjectByIdReq]) (*connect_go.Response[v0alpha.EditProjectByIdRes], error) {
	return c.editProjectById.CallUnary(ctx, req)
}

// CloseProjectById calls api.v0alpha.OmniApi.CloseProjectById.
func (c *omniApiClient) CloseProjectById(ctx context.Context, req *connect_go.Request[v0alpha.CloseProjectByIdReq]) (*connect_go.Response[v0alpha.CloseProjectByIdRes], error) {
	return c.closeProjectById.CallUnary(ctx, req)
}

// GetProjectById calls api.v0alpha.OmniApi.GetProjectById.
func (c *omniApiClient) GetProjectById(ctx context.Context, req *connect_go.Request[v0alpha.GetProjectByIdReq]) (*connect_go.Response[v0alpha.Project], error) {
	return c.getProjectById.CallUnary(ctx, req)
}

// CreateCannedMessage calls api.v0alpha.OmniApi.CreateCannedMessage.
func (c *omniApiClient) CreateCannedMessage(ctx context.Context, req *connect_go.Request[v0alpha.CreateCannedMessageReq]) (*connect_go.Response[v0alpha.CannedMessage], error) {
	return c.createCannedMessage.CallUnary(ctx, req)
}

// ListCannedMessages calls api.v0alpha.OmniApi.ListCannedMessages.
func (c *omniApiClient) ListCannedMessages(ctx context.Context, req *connect_go.Request[v0alpha.ListCannedMessagesReq]) (*connect_go.Response[v0alpha.ListCannedMessagesRes], error) {
	return c.listCannedMessages.CallUnary(ctx, req)
}

// UpdateCannedMessage calls api.v0alpha.OmniApi.UpdateCannedMessage.
func (c *omniApiClient) UpdateCannedMessage(ctx context.Context, req *connect_go.Request[v0alpha.UpdateCannedMessageReq]) (*connect_go.Response[v0alpha.CannedMessage], error) {
	return c.updateCannedMessage.CallUnary(ctx, req)
}

// GetCannedMessageById calls api.v0alpha.OmniApi.GetCannedMessageById.
func (c *omniApiClient) GetCannedMessageById(ctx context.Context, req *connect_go.Request[v0alpha.GetCannedMessageByIdReq]) (*connect_go.Response[v0alpha.CannedMessageWithGroup], error) {
	return c.getCannedMessageById.CallUnary(ctx, req)
}

// DeleteCannedMessageById calls api.v0alpha.OmniApi.DeleteCannedMessageById.
func (c *omniApiClient) DeleteCannedMessageById(ctx context.Context, req *connect_go.Request[v0alpha.DeleteCannedMessageByIdReq]) (*connect_go.Response[v0alpha.DeleteCannedMessageByIdRes], error) {
	return c.deleteCannedMessageById.CallUnary(ctx, req)
}

// CreateCannedMessageGroup calls api.v0alpha.OmniApi.CreateCannedMessageGroup.
func (c *omniApiClient) CreateCannedMessageGroup(ctx context.Context, req *connect_go.Request[v0alpha.CreateCannedMessageGroupReq]) (*connect_go.Response[v0alpha.CannedMessageGroup], error) {
	return c.createCannedMessageGroup.CallUnary(ctx, req)
}

// ListCannedMessageGroups calls api.v0alpha.OmniApi.ListCannedMessageGroups.
func (c *omniApiClient) ListCannedMessageGroups(ctx context.Context, req *connect_go.Request[v0alpha.ListCannedMessageGroupsReq]) (*connect_go.Response[v0alpha.ListCannedMessageGroupsRes], error) {
	return c.listCannedMessageGroups.CallUnary(ctx, req)
}

// UpdateCannedMessageGroup calls api.v0alpha.OmniApi.UpdateCannedMessageGroup.
func (c *omniApiClient) UpdateCannedMessageGroup(ctx context.Context, req *connect_go.Request[v0alpha.UpdateCannedMessageGroupReq]) (*connect_go.Response[v0alpha.UpdateCannedMessageGroupRes], error) {
	return c.updateCannedMessageGroup.CallUnary(ctx, req)
}

// DeleteCannedMessageGroup calls api.v0alpha.OmniApi.DeleteCannedMessageGroup.
func (c *omniApiClient) DeleteCannedMessageGroup(ctx context.Context, req *connect_go.Request[v0alpha.DeleteCannedMessageGroupReq]) (*connect_go.Response[v0alpha.DeleteCannedMessageGroupRes], error) {
	return c.deleteCannedMessageGroup.CallUnary(ctx, req)
}

// ListCannedMessagesByGroupId calls api.v0alpha.OmniApi.ListCannedMessagesByGroupId.
func (c *omniApiClient) ListCannedMessagesByGroupId(ctx context.Context, req *connect_go.Request[v0alpha.ListCannedMessagesByGroupIdReq]) (*connect_go.Response[v0alpha.ListCannedMessagesByGroupIdRes], error) {
	return c.listCannedMessagesByGroupId.CallUnary(ctx, req)
}

// GetCannedMessageGroupById calls api.v0alpha.OmniApi.GetCannedMessageGroupById.
func (c *omniApiClient) GetCannedMessageGroupById(ctx context.Context, req *connect_go.Request[v0alpha.GetCannedMessageGroupByIdReq]) (*connect_go.Response[v0alpha.CannedMessageGroup], error) {
	return c.getCannedMessageGroupById.CallUnary(ctx, req)
}

// OmniApiHandler is an implementation of the api.v0alpha.OmniApi service.
type OmniApiHandler interface {
	// archive a campaign
	ArchiveCampaign(context.Context, *connect_go.Request[v0alpha.ArchiveCampaignReq]) (*connect_go.Response[v0alpha.ArchiveCampaignRes], error)
	// Create Omni Campaign defined by CreateOmniCampaign message
	// for the name, skill, Hours of operations, and description.
	// the method will return newly created OmniCampaign for this client
	// Required Permission:
	//
	//	OMNI_BOSS
	CreateCampaign(context.Context, *connect_go.Request[v0alpha.CreateCampaignReq]) (*connect_go.Response[commons.OmniCampaign], error)
	// Get campaign defined by GetChatCampaignById.
	GetCampaignById(context.Context, *connect_go.Request[v0alpha.GetCampaignByIdReq]) (*connect_go.Response[commons.OmniCampaign], error)
	// List campaigns defined by ListCampaignsReq.
	// The method will return a ListCampaignsReq entity that will contain
	// all the campaigns within the specified filter.
	ListCampaigns(context.Context, *connect_go.Request[v0alpha.ListCampaignsReq]) (*connect_go.Response[v0alpha.ListCampaignsRes], error)
	// pause a campaign
	PauseCampaign(context.Context, *connect_go.Request[v0alpha.PauseCampaignReq]) (*connect_go.Response[v0alpha.PauseCampaignRes], error)
	// resume a campaign
	ResumeCampaign(context.Context, *connect_go.Request[v0alpha.ResumeCampaignReq]) (*connect_go.Response[v0alpha.ResumeCampaignRes], error)
	// Updates a campaign
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateCampaign(context.Context, *connect_go.Request[v0alpha.UpdateCampaignReq]) (*connect_go.Response[v0alpha.UpdateCampaignRes], error)
	// update campaign pacing - speed up/slow down a campaign
	UpdateCampaignPacingSpeed(context.Context, *connect_go.Request[v0alpha.UpdateCampaignPacingSpeedReq]) (*connect_go.Response[v0alpha.UpdateCampaignPacingSpeedRes], error)
	// Get the text message for an off-loaded text message payload. Used
	// only for managers/agents/users. It is not for customers.
	GetOffLoadedTextMessage(context.Context, *connect_go.Request[v0alpha.GetOffLoadedTextMessageReq]) (*connect_go.Response[v0alpha.GetOffLoadedTextMessageRes], error)
	// Get a stream of new conversation message for a given conversation. Used
	// only for managers. It is not for customers.
	ManagerListMessages(context.Context, *connect_go.Request[v0alpha.ManagerListMessagesReq], *connect_go.ServerStream[commons.OmniMessage]) error
	// Get a stream of conversation message for a given conversation. Used
	// only for agents/users. It is not for customers.
	ListMessages(context.Context, *connect_go.Request[v0alpha.ListMessagesReq], *connect_go.ServerStream[commons.OmniMessage]) error
	// Send a chat message
	SendOmniMessage(context.Context, *connect_go.Request[v0alpha.SendOmniMessageReq]) (*connect_go.Response[commons.Empty], error)
	// Send a chat message
	ManagerSendOmniMessage(context.Context, *connect_go.Request[v0alpha.SendOmniMessageReq]) (*connect_go.Response[commons.Empty], error)
	// lists all conversation and assigned users for a given date range.
	// Required permissions:
	//
	//	OMNI_BOSS
	ManagerListConversations(context.Context, *connect_go.Request[v0alpha.ListConversationsReq]) (*connect_go.Response[v0alpha.ListConversationsRes], error)
	// Experimental API
	SuggestResponse(context.Context, *connect_go.Request[v0alpha.SuggestResponseReq]) (*connect_go.Response[v0alpha.SuggestResponseRes], error)
	// Create a disposition
	CreateDisposition(context.Context, *connect_go.Request[v0alpha.CreateDispositionReq]) (*connect_go.Response[v0alpha.CreateDispositionRes], error)
	// DeleteDisposition - delete an existing disposition
	DeleteDisposition(context.Context, *connect_go.Request[v0alpha.DeleteDispositionReq]) (*connect_go.Response[commons.Empty], error)
	// ListDispositions - lists all dispositions
	ListDispositions(context.Context, *connect_go.Request[v0alpha.ListDispositionsReq]) (*connect_go.Response[v0alpha.ListDispositionsRes], error)
	// UpdateDisposition - update an existing disposition
	UpdateDisposition(context.Context, *connect_go.Request[v0alpha.UpdateDispositionReq]) (*connect_go.Response[commons.Empty], error)
	// ListCustomUnsubscribeLinks - retrieves all the custom unsubscribe links
	ListCustomUnsubscribeLinks(context.Context, *connect_go.Request[commons.Empty]) (*connect_go.Response[v0alpha.ListCustomUnsubscribeLinksRes], error)
	// CreateUnsubscribeLink - creates a new unsubscribe link
	CreateCustomUnsubscribeLink(context.Context, *connect_go.Request[commons.OmniCustomUnsubscribeLink]) (*connect_go.Response[v0alpha.CreateCustomUnsubscribeLinkRes], error)
	// UpdateCustomUnsubscribeLink - update custom unsubscribe link details
	UpdateCustomUnsubscribeLink(context.Context, *connect_go.Request[v0alpha.UpdateCustomUnsubscribeLinkReq]) (*connect_go.Response[v0alpha.UpdateCustomUnsubscribeLinkRes], error)
	// DeleteCustomUnsubscribeLink - deletes custom unsubscribe link details
	DeleteCustomUnsubscribeLink(context.Context, *connect_go.Request[v0alpha.DeleteCustomUnsubscribeLinkReq]) (*connect_go.Response[commons.Empty], error)
	// ListContactLists - retrieves all the contact lists
	ListContactLists(context.Context, *connect_go.Request[v0alpha.ListContactListsReq]) (*connect_go.Response[v0alpha.ListContactListsRes], error)
	// GetAvailableHeaders - retrieves all the available headers that could be present on a contact list
	// Required permissions:
	//
	//	OMNI_BOSS
	GetAvailableHeaders(context.Context, *connect_go.Request[v0alpha.GetAvailableHeadersReq]) (*connect_go.Response[v0alpha.GetAvailableHeadersRes], error)
	// GetTask - retrieves a task using the provided criteria
	// Required permissions:
	//
	//	OMNI_AGENT
	GetTask(context.Context, *connect_go.Request[v0alpha.GetTaskReq]) (*connect_go.Response[commons.OmniTask], error)
	// ListTasks - retrieves tasks using the provided criteria
	// Required permissions:
	//
	//	OMNI_BOSS
	ListTasks(context.Context, *connect_go.Request[v0alpha.ListTasksReq]) (*connect_go.Response[v0alpha.ListTasksRes], error)
	// CreateConnectedInbox - create a new connected inbox
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateConnectedInbox(context.Context, *connect_go.Request[commons.ConnectedInbox]) (*connect_go.Response[v0alpha.CreateConnectedInboxRes], error)
	// DeleteConnectedInboxBySid - deletes a connected inbox given it's identifier
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteConnectedInboxBySid(context.Context, *connect_go.Request[v0alpha.DeleteConnectedInboxBySidReq]) (*connect_go.Response[commons.Empty], error)
	// GetConnectedInboxBySid - retrieves a connected inbox given it's identifier
	// Required permissions:
	//
	//	OMNI_BOSS
	GetConnectedInboxBySid(context.Context, *connect_go.Request[v0alpha.GetConnectedInboxBySidReq]) (*connect_go.Response[commons.ConnectedInbox], error)
	// Perform sendgrid account check to make sure all the account settings are valid defined by SendgridAccountByClientReq message.
	// The method will return a SendgridAccountByClientRes message/entity that will
	// contain the result true/false verifying account settings with sendgrid for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	PerformSendgridAccountChecks(context.Context, *connect_go.Request[v0alpha.SendgridAccountByClientReq]) (*connect_go.Response[v0alpha.SendgridAccountByClientRes], error)
	// ListConnectedInboxes - retrieves all the connected inboxes for the organization
	// Required permissions:
	//
	//	OMNI_BOSS
	ListConnectedInboxes(context.Context, *connect_go.Request[v0alpha.ListConnectedInboxesReq]) (*connect_go.Response[v0alpha.ListConnectedInboxesRes], error)
	// TestConnectedInbox - check if connected inbox login works for a specified email_address,
	// username, password, server_name, and server_port (other fields from ConnectedInbox are ignored).
	// Required permissions:
	//
	//	OMNI_BOSS
	TestConnectedInbox(context.Context, *connect_go.Request[commons.ConnectedInbox]) (*connect_go.Response[v0alpha.TestConnectedInboxRes], error)
	// UpdateConnectedInbox - update a connected inbox
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateConnectedInbox(context.Context, *connect_go.Request[v0alpha.UpdateConnectedInboxReq]) (*connect_go.Response[commons.Empty], error)
	// CreateVerifiedEmail.  this will create a new verified email
	// Required permissions
	//
	//	OMNI_BOSS
	CreateVerifiedEmail(context.Context, *connect_go.Request[commons.VerifiedEmail]) (*connect_go.Response[v0alpha.CreateVerifiedEmailRes], error)
	// Send email notification defined by SendEmailNotificationReq message for the specified
	// subject, message and array of to email addresses.
	// The method will return a stream of SendEmailNotificationRes messages
	// containing result true/false after notified by email for the client_sid.
	// Required permissions:
	//
	//	OMNI_BOSS
	SendEmailNotification(context.Context, *connect_go.Request[v0alpha.SendEmailNotificationReq]) (*connect_go.Response[v0alpha.SendEmailNotificationRes], error)
	// Delete verify email record based on verified email id defined by
	// DeleteVerifiedEmailReq for the specified client.
	// This method will return a DeleteVerifiedEmailRes message/entity.
	// DeleteVerifiedEmail - deletes a verified email record using the given identifier
	// Required permissions
	//
	//	OMNI_BOSS
	DeleteVerifiedEmail(context.Context, *connect_go.Request[v0alpha.DeleteVerifiedEmailReq]) (*connect_go.Response[commons.Empty], error)
	// Get the verified email details based on verified email id defined by
	// GetVerifiedEmailByIdReq for the specified client.
	// This method will return an OmniVerifiedEmail message/entity.
	// Required permissions
	//
	//	OMNI_BOSS
	GetVerifiedEmailBySid(context.Context, *connect_go.Request[v0alpha.GetVerifiedEmailBySidReq]) (*connect_go.Response[commons.VerifiedEmail], error)
	// List all the verified emails and their details defined by
	// ListVerifiedEmailsReq for the specified client.
	// This method will return a ListVerifiedEmailsRes message/entity.
	// Required permissions
	//
	//	OMNI_BOSS
	ListVerifiedEmails(context.Context, *connect_go.Request[v0alpha.ListVerifiedEmailsReq]) (*connect_go.Response[v0alpha.ListVerifiedEmailsRes], error)
	// Resend verify email record based on verified email id defined by
	// ResendVerifiedEmailReq for the specified client.
	// This method will return a ResendVerifiedEmailRes message/entity.
	// Required permissions
	//
	//	OMNI_BOSS
	ResendVerifiedEmail(context.Context, *connect_go.Request[v0alpha.ResendVerifiedEmailReq]) (*connect_go.Response[v0alpha.ResendVerifiedEmailRes], error)
	// Updates verified email description
	UpdateVerifiedEmail(context.Context, *connect_go.Request[v0alpha.UpdateVerifiedEmailReq]) (*connect_go.Response[commons.Empty], error)
	// GetPendingGoogleXOAuth2Data - retrieves the pending oauth data required to finish creating a connected inbox
	// Required permissions:
	//
	//	OMNI_BOSS
	GetPendingGoogleXOAuth2Data(context.Context, *connect_go.Request[v0alpha.GetPendingGoogleXOAuth2DataReq]) (*connect_go.Response[v0alpha.GetPendingGoogleXOAuth2DataRes], error)
	// Send an email to our feedback system. The users email will be populated as the from address to open an email thread with our support.
	SendFeedbackEmail(context.Context, *connect_go.Request[v0alpha.SendFeedbackEmailReq]) (*connect_go.Response[v0alpha.SendFeedbackEmailRes], error)
	// GetOmniAttachment - retrieves the omni attachment details based on the request
	// Required permissions:
	//
	//	OMNI_BOSS
	GetOmniAttachment(context.Context, *connect_go.Request[v0alpha.GetOmniAttachmentReq]) (*connect_go.Response[commons.OmniAttachment], error)
	// Create a task with a given contat list .
	CreateTasks(context.Context, *connect_go.Request[v0alpha.CreateTasksReq]) (*connect_go.Response[v0alpha.CreateTasksRes], error)
	// CreateSignature - creates a new message signature
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateSignature(context.Context, *connect_go.Request[v0alpha.CreateSignatureReq]) (*connect_go.Response[v0alpha.CreateSignatureRes], error)
	// DeleteSignature - deletes a message signature
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteSignature(context.Context, *connect_go.Request[v0alpha.DeleteSignatureReq]) (*connect_go.Response[v0alpha.DeleteSignatureRes], error)
	// ListSignatures - retrieves the signatures created by the organization
	// Required permissions:
	//
	//	OMNI_BOSS
	ListSignatures(context.Context, *connect_go.Request[v0alpha.ListSignaturesReq]) (*connect_go.Response[v0alpha.ListSignaturesRes], error)
	// UpdateSignature - updates a message signature
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateSignature(context.Context, *connect_go.Request[v0alpha.UpdateSignatureReq]) (*connect_go.Response[v0alpha.UpdateSignatureRes], error)
	// Create/Record project defined by CreateProjectReq message for a specified
	// name, description and status.
	// The method will return a Project message/entity that will
	// contain the newly created project_id value for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateProject(context.Context, *connect_go.Request[v0alpha.CreateProjectReq]) (*connect_go.Response[v0alpha.CreateProjectRes], error)
	// list projects for the current org
	// The method will return a list of Project messages/entities
	// Required permissions:
	//
	//	OMNI_BOSS
	ListProjects(context.Context, *connect_go.Request[v0alpha.ListProjectsReq]) (*connect_go.Response[v0alpha.ListProjectsRes], error)
	// Update project defined by EditProjectByIdReq message for a specified
	// project id.
	// The method will return a Project message/entity that will
	// contain the updated details for the project_id
	// Required permissions:
	//
	//	OMNI_BOSS
	EditProjectById(context.Context, *connect_go.Request[v0alpha.EditProjectByIdReq]) (*connect_go.Response[v0alpha.EditProjectByIdRes], error)
	// Closes project defined by CloseProjectByIdReq message for a specified
	// project id.
	// The method will stop all child campaigns and return a an empty response
	// if successful
	// Required permissions:
	//
	//	OMNI_BOSS
	CloseProjectById(context.Context, *connect_go.Request[v0alpha.CloseProjectByIdReq]) (*connect_go.Response[v0alpha.CloseProjectByIdRes], error)
	// Get project details defined by GetProjectByIdReq message for a specified
	// project id.
	// The method will return a GetProjectByIdRes message/entity that will
	// contain all the project details for the project_id
	// Required permissions:
	//
	//	OMNI_BOSS
	GetProjectById(context.Context, *connect_go.Request[v0alpha.GetProjectByIdReq]) (*connect_go.Response[v0alpha.Project], error)
	// Create/Record canned message defined by CreateCannedMessageReq message for a specified
	// name, description and message_body.
	// The method will return a CannedMessage message/entity that will
	// contain the newly created canned message details for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateCannedMessage(context.Context, *connect_go.Request[v0alpha.CreateCannedMessageReq]) (*connect_go.Response[v0alpha.CannedMessage], error)
	// list canned messages for the current org
	// The method will return a list of canned messages/entities
	// Required permissions:
	//
	//	OMNI_BOSS
	ListCannedMessages(context.Context, *connect_go.Request[v0alpha.ListCannedMessagesReq]) (*connect_go.Response[v0alpha.ListCannedMessagesRes], error)
	// Update canned message defined by UpdateCannedMessageReq message for a specified
	// name, description and message_body.
	// The method will return a CannedMessage message/entity that will
	// contain the updated canned message details for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateCannedMessage(context.Context, *connect_go.Request[v0alpha.UpdateCannedMessageReq]) (*connect_go.Response[v0alpha.CannedMessage], error)
	// Get canned message details for the canned_message_id
	// The method will return an canned message/entity
	// Required permissions:
	//
	//	OMNI_BOSS
	GetCannedMessageById(context.Context, *connect_go.Request[v0alpha.GetCannedMessageByIdReq]) (*connect_go.Response[v0alpha.CannedMessageWithGroup], error)
	// Delete canned message details for the canned_message_id
	// The method will delete an canned message/entity
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteCannedMessageById(context.Context, *connect_go.Request[v0alpha.DeleteCannedMessageByIdReq]) (*connect_go.Response[v0alpha.DeleteCannedMessageByIdRes], error)
	// Create/Record canned message group defined by CreateCannedMessageGroup Req message for a specified
	// name and description.
	// The method will return a CannedMessageGroup message/entity that will
	// contain the newly created canned message group details for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateCannedMessageGroup(context.Context, *connect_go.Request[v0alpha.CreateCannedMessageGroupReq]) (*connect_go.Response[v0alpha.CannedMessageGroup], error)
	// list canned message groups for the current org
	// The method will return a list of canned message groups/entities
	// Required permissions:
	//
	//	OMNI_BOSS
	ListCannedMessageGroups(context.Context, *connect_go.Request[v0alpha.ListCannedMessageGroupsReq]) (*connect_go.Response[v0alpha.ListCannedMessageGroupsRes], error)
	// Update canned message group defined by UpdateCannedMessageGroupReq message for a specified
	// name and description.
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateCannedMessageGroup(context.Context, *connect_go.Request[v0alpha.UpdateCannedMessageGroupReq]) (*connect_go.Response[v0alpha.UpdateCannedMessageGroupRes], error)
	// Delete canned message group and all the related messages for the canned_message_group_id
	// The method will delete an canned message group/entity
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteCannedMessageGroup(context.Context, *connect_go.Request[v0alpha.DeleteCannedMessageGroupReq]) (*connect_go.Response[v0alpha.DeleteCannedMessageGroupRes], error)
	// list canned messages for the group
	// The method will return a list of canned messages/entities
	// Required permissions:
	//
	//	OMNI_BOSS
	ListCannedMessagesByGroupId(context.Context, *connect_go.Request[v0alpha.ListCannedMessagesByGroupIdReq]) (*connect_go.Response[v0alpha.ListCannedMessagesByGroupIdRes], error)
	// Get canned message group details for the canned_message_group_id
	// The method will return an canned message group/entity
	// Required permissions:
	//
	//	OMNI_BOSS
	GetCannedMessageGroupById(context.Context, *connect_go.Request[v0alpha.GetCannedMessageGroupByIdReq]) (*connect_go.Response[v0alpha.CannedMessageGroup], error)
}

// NewOmniApiHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOmniApiHandler(svc OmniApiHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(OmniApiArchiveCampaignProcedure, connect_go.NewUnaryHandler(
		OmniApiArchiveCampaignProcedure,
		svc.ArchiveCampaign,
		opts...,
	))
	mux.Handle(OmniApiCreateCampaignProcedure, connect_go.NewUnaryHandler(
		OmniApiCreateCampaignProcedure,
		svc.CreateCampaign,
		opts...,
	))
	mux.Handle(OmniApiGetCampaignByIdProcedure, connect_go.NewUnaryHandler(
		OmniApiGetCampaignByIdProcedure,
		svc.GetCampaignById,
		opts...,
	))
	mux.Handle(OmniApiListCampaignsProcedure, connect_go.NewUnaryHandler(
		OmniApiListCampaignsProcedure,
		svc.ListCampaigns,
		opts...,
	))
	mux.Handle(OmniApiPauseCampaignProcedure, connect_go.NewUnaryHandler(
		OmniApiPauseCampaignProcedure,
		svc.PauseCampaign,
		opts...,
	))
	mux.Handle(OmniApiResumeCampaignProcedure, connect_go.NewUnaryHandler(
		OmniApiResumeCampaignProcedure,
		svc.ResumeCampaign,
		opts...,
	))
	mux.Handle(OmniApiUpdateCampaignProcedure, connect_go.NewUnaryHandler(
		OmniApiUpdateCampaignProcedure,
		svc.UpdateCampaign,
		opts...,
	))
	mux.Handle(OmniApiUpdateCampaignPacingSpeedProcedure, connect_go.NewUnaryHandler(
		OmniApiUpdateCampaignPacingSpeedProcedure,
		svc.UpdateCampaignPacingSpeed,
		opts...,
	))
	mux.Handle(OmniApiGetOffLoadedTextMessageProcedure, connect_go.NewUnaryHandler(
		OmniApiGetOffLoadedTextMessageProcedure,
		svc.GetOffLoadedTextMessage,
		opts...,
	))
	mux.Handle(OmniApiManagerListMessagesProcedure, connect_go.NewServerStreamHandler(
		OmniApiManagerListMessagesProcedure,
		svc.ManagerListMessages,
		opts...,
	))
	mux.Handle(OmniApiListMessagesProcedure, connect_go.NewServerStreamHandler(
		OmniApiListMessagesProcedure,
		svc.ListMessages,
		opts...,
	))
	mux.Handle(OmniApiSendOmniMessageProcedure, connect_go.NewUnaryHandler(
		OmniApiSendOmniMessageProcedure,
		svc.SendOmniMessage,
		opts...,
	))
	mux.Handle(OmniApiManagerSendOmniMessageProcedure, connect_go.NewUnaryHandler(
		OmniApiManagerSendOmniMessageProcedure,
		svc.ManagerSendOmniMessage,
		opts...,
	))
	mux.Handle(OmniApiManagerListConversationsProcedure, connect_go.NewUnaryHandler(
		OmniApiManagerListConversationsProcedure,
		svc.ManagerListConversations,
		opts...,
	))
	mux.Handle(OmniApiSuggestResponseProcedure, connect_go.NewUnaryHandler(
		OmniApiSuggestResponseProcedure,
		svc.SuggestResponse,
		opts...,
	))
	mux.Handle(OmniApiCreateDispositionProcedure, connect_go.NewUnaryHandler(
		OmniApiCreateDispositionProcedure,
		svc.CreateDisposition,
		opts...,
	))
	mux.Handle(OmniApiDeleteDispositionProcedure, connect_go.NewUnaryHandler(
		OmniApiDeleteDispositionProcedure,
		svc.DeleteDisposition,
		opts...,
	))
	mux.Handle(OmniApiListDispositionsProcedure, connect_go.NewUnaryHandler(
		OmniApiListDispositionsProcedure,
		svc.ListDispositions,
		opts...,
	))
	mux.Handle(OmniApiUpdateDispositionProcedure, connect_go.NewUnaryHandler(
		OmniApiUpdateDispositionProcedure,
		svc.UpdateDisposition,
		opts...,
	))
	mux.Handle(OmniApiListCustomUnsubscribeLinksProcedure, connect_go.NewUnaryHandler(
		OmniApiListCustomUnsubscribeLinksProcedure,
		svc.ListCustomUnsubscribeLinks,
		opts...,
	))
	mux.Handle(OmniApiCreateCustomUnsubscribeLinkProcedure, connect_go.NewUnaryHandler(
		OmniApiCreateCustomUnsubscribeLinkProcedure,
		svc.CreateCustomUnsubscribeLink,
		opts...,
	))
	mux.Handle(OmniApiUpdateCustomUnsubscribeLinkProcedure, connect_go.NewUnaryHandler(
		OmniApiUpdateCustomUnsubscribeLinkProcedure,
		svc.UpdateCustomUnsubscribeLink,
		opts...,
	))
	mux.Handle(OmniApiDeleteCustomUnsubscribeLinkProcedure, connect_go.NewUnaryHandler(
		OmniApiDeleteCustomUnsubscribeLinkProcedure,
		svc.DeleteCustomUnsubscribeLink,
		opts...,
	))
	mux.Handle(OmniApiListContactListsProcedure, connect_go.NewUnaryHandler(
		OmniApiListContactListsProcedure,
		svc.ListContactLists,
		opts...,
	))
	mux.Handle(OmniApiGetAvailableHeadersProcedure, connect_go.NewUnaryHandler(
		OmniApiGetAvailableHeadersProcedure,
		svc.GetAvailableHeaders,
		opts...,
	))
	mux.Handle(OmniApiGetTaskProcedure, connect_go.NewUnaryHandler(
		OmniApiGetTaskProcedure,
		svc.GetTask,
		opts...,
	))
	mux.Handle(OmniApiListTasksProcedure, connect_go.NewUnaryHandler(
		OmniApiListTasksProcedure,
		svc.ListTasks,
		opts...,
	))
	mux.Handle(OmniApiCreateConnectedInboxProcedure, connect_go.NewUnaryHandler(
		OmniApiCreateConnectedInboxProcedure,
		svc.CreateConnectedInbox,
		opts...,
	))
	mux.Handle(OmniApiDeleteConnectedInboxBySidProcedure, connect_go.NewUnaryHandler(
		OmniApiDeleteConnectedInboxBySidProcedure,
		svc.DeleteConnectedInboxBySid,
		opts...,
	))
	mux.Handle(OmniApiGetConnectedInboxBySidProcedure, connect_go.NewUnaryHandler(
		OmniApiGetConnectedInboxBySidProcedure,
		svc.GetConnectedInboxBySid,
		opts...,
	))
	mux.Handle(OmniApiPerformSendgridAccountChecksProcedure, connect_go.NewUnaryHandler(
		OmniApiPerformSendgridAccountChecksProcedure,
		svc.PerformSendgridAccountChecks,
		opts...,
	))
	mux.Handle(OmniApiListConnectedInboxesProcedure, connect_go.NewUnaryHandler(
		OmniApiListConnectedInboxesProcedure,
		svc.ListConnectedInboxes,
		opts...,
	))
	mux.Handle(OmniApiTestConnectedInboxProcedure, connect_go.NewUnaryHandler(
		OmniApiTestConnectedInboxProcedure,
		svc.TestConnectedInbox,
		opts...,
	))
	mux.Handle(OmniApiUpdateConnectedInboxProcedure, connect_go.NewUnaryHandler(
		OmniApiUpdateConnectedInboxProcedure,
		svc.UpdateConnectedInbox,
		opts...,
	))
	mux.Handle(OmniApiCreateVerifiedEmailProcedure, connect_go.NewUnaryHandler(
		OmniApiCreateVerifiedEmailProcedure,
		svc.CreateVerifiedEmail,
		opts...,
	))
	mux.Handle(OmniApiSendEmailNotificationProcedure, connect_go.NewUnaryHandler(
		OmniApiSendEmailNotificationProcedure,
		svc.SendEmailNotification,
		opts...,
	))
	mux.Handle(OmniApiDeleteVerifiedEmailProcedure, connect_go.NewUnaryHandler(
		OmniApiDeleteVerifiedEmailProcedure,
		svc.DeleteVerifiedEmail,
		opts...,
	))
	mux.Handle(OmniApiGetVerifiedEmailBySidProcedure, connect_go.NewUnaryHandler(
		OmniApiGetVerifiedEmailBySidProcedure,
		svc.GetVerifiedEmailBySid,
		opts...,
	))
	mux.Handle(OmniApiListVerifiedEmailsProcedure, connect_go.NewUnaryHandler(
		OmniApiListVerifiedEmailsProcedure,
		svc.ListVerifiedEmails,
		opts...,
	))
	mux.Handle(OmniApiResendVerifiedEmailProcedure, connect_go.NewUnaryHandler(
		OmniApiResendVerifiedEmailProcedure,
		svc.ResendVerifiedEmail,
		opts...,
	))
	mux.Handle(OmniApiUpdateVerifiedEmailProcedure, connect_go.NewUnaryHandler(
		OmniApiUpdateVerifiedEmailProcedure,
		svc.UpdateVerifiedEmail,
		opts...,
	))
	mux.Handle(OmniApiGetPendingGoogleXOAuth2DataProcedure, connect_go.NewUnaryHandler(
		OmniApiGetPendingGoogleXOAuth2DataProcedure,
		svc.GetPendingGoogleXOAuth2Data,
		opts...,
	))
	mux.Handle(OmniApiSendFeedbackEmailProcedure, connect_go.NewUnaryHandler(
		OmniApiSendFeedbackEmailProcedure,
		svc.SendFeedbackEmail,
		opts...,
	))
	mux.Handle(OmniApiGetOmniAttachmentProcedure, connect_go.NewUnaryHandler(
		OmniApiGetOmniAttachmentProcedure,
		svc.GetOmniAttachment,
		opts...,
	))
	mux.Handle(OmniApiCreateTasksProcedure, connect_go.NewUnaryHandler(
		OmniApiCreateTasksProcedure,
		svc.CreateTasks,
		opts...,
	))
	mux.Handle(OmniApiCreateSignatureProcedure, connect_go.NewUnaryHandler(
		OmniApiCreateSignatureProcedure,
		svc.CreateSignature,
		opts...,
	))
	mux.Handle(OmniApiDeleteSignatureProcedure, connect_go.NewUnaryHandler(
		OmniApiDeleteSignatureProcedure,
		svc.DeleteSignature,
		opts...,
	))
	mux.Handle(OmniApiListSignaturesProcedure, connect_go.NewUnaryHandler(
		OmniApiListSignaturesProcedure,
		svc.ListSignatures,
		opts...,
	))
	mux.Handle(OmniApiUpdateSignatureProcedure, connect_go.NewUnaryHandler(
		OmniApiUpdateSignatureProcedure,
		svc.UpdateSignature,
		opts...,
	))
	mux.Handle(OmniApiCreateProjectProcedure, connect_go.NewUnaryHandler(
		OmniApiCreateProjectProcedure,
		svc.CreateProject,
		opts...,
	))
	mux.Handle(OmniApiListProjectsProcedure, connect_go.NewUnaryHandler(
		OmniApiListProjectsProcedure,
		svc.ListProjects,
		opts...,
	))
	mux.Handle(OmniApiEditProjectByIdProcedure, connect_go.NewUnaryHandler(
		OmniApiEditProjectByIdProcedure,
		svc.EditProjectById,
		opts...,
	))
	mux.Handle(OmniApiCloseProjectByIdProcedure, connect_go.NewUnaryHandler(
		OmniApiCloseProjectByIdProcedure,
		svc.CloseProjectById,
		opts...,
	))
	mux.Handle(OmniApiGetProjectByIdProcedure, connect_go.NewUnaryHandler(
		OmniApiGetProjectByIdProcedure,
		svc.GetProjectById,
		opts...,
	))
	mux.Handle(OmniApiCreateCannedMessageProcedure, connect_go.NewUnaryHandler(
		OmniApiCreateCannedMessageProcedure,
		svc.CreateCannedMessage,
		opts...,
	))
	mux.Handle(OmniApiListCannedMessagesProcedure, connect_go.NewUnaryHandler(
		OmniApiListCannedMessagesProcedure,
		svc.ListCannedMessages,
		opts...,
	))
	mux.Handle(OmniApiUpdateCannedMessageProcedure, connect_go.NewUnaryHandler(
		OmniApiUpdateCannedMessageProcedure,
		svc.UpdateCannedMessage,
		opts...,
	))
	mux.Handle(OmniApiGetCannedMessageByIdProcedure, connect_go.NewUnaryHandler(
		OmniApiGetCannedMessageByIdProcedure,
		svc.GetCannedMessageById,
		opts...,
	))
	mux.Handle(OmniApiDeleteCannedMessageByIdProcedure, connect_go.NewUnaryHandler(
		OmniApiDeleteCannedMessageByIdProcedure,
		svc.DeleteCannedMessageById,
		opts...,
	))
	mux.Handle(OmniApiCreateCannedMessageGroupProcedure, connect_go.NewUnaryHandler(
		OmniApiCreateCannedMessageGroupProcedure,
		svc.CreateCannedMessageGroup,
		opts...,
	))
	mux.Handle(OmniApiListCannedMessageGroupsProcedure, connect_go.NewUnaryHandler(
		OmniApiListCannedMessageGroupsProcedure,
		svc.ListCannedMessageGroups,
		opts...,
	))
	mux.Handle(OmniApiUpdateCannedMessageGroupProcedure, connect_go.NewUnaryHandler(
		OmniApiUpdateCannedMessageGroupProcedure,
		svc.UpdateCannedMessageGroup,
		opts...,
	))
	mux.Handle(OmniApiDeleteCannedMessageGroupProcedure, connect_go.NewUnaryHandler(
		OmniApiDeleteCannedMessageGroupProcedure,
		svc.DeleteCannedMessageGroup,
		opts...,
	))
	mux.Handle(OmniApiListCannedMessagesByGroupIdProcedure, connect_go.NewUnaryHandler(
		OmniApiListCannedMessagesByGroupIdProcedure,
		svc.ListCannedMessagesByGroupId,
		opts...,
	))
	mux.Handle(OmniApiGetCannedMessageGroupByIdProcedure, connect_go.NewUnaryHandler(
		OmniApiGetCannedMessageGroupByIdProcedure,
		svc.GetCannedMessageGroupById,
		opts...,
	))
	return "/api.v0alpha.OmniApi/", mux
}

// UnimplementedOmniApiHandler returns CodeUnimplemented from all methods.
type UnimplementedOmniApiHandler struct{}

func (UnimplementedOmniApiHandler) ArchiveCampaign(context.Context, *connect_go.Request[v0alpha.ArchiveCampaignReq]) (*connect_go.Response[v0alpha.ArchiveCampaignRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.ArchiveCampaign is not implemented"))
}

func (UnimplementedOmniApiHandler) CreateCampaign(context.Context, *connect_go.Request[v0alpha.CreateCampaignReq]) (*connect_go.Response[commons.OmniCampaign], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.CreateCampaign is not implemented"))
}

func (UnimplementedOmniApiHandler) GetCampaignById(context.Context, *connect_go.Request[v0alpha.GetCampaignByIdReq]) (*connect_go.Response[commons.OmniCampaign], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.GetCampaignById is not implemented"))
}

func (UnimplementedOmniApiHandler) ListCampaigns(context.Context, *connect_go.Request[v0alpha.ListCampaignsReq]) (*connect_go.Response[v0alpha.ListCampaignsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.ListCampaigns is not implemented"))
}

func (UnimplementedOmniApiHandler) PauseCampaign(context.Context, *connect_go.Request[v0alpha.PauseCampaignReq]) (*connect_go.Response[v0alpha.PauseCampaignRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.PauseCampaign is not implemented"))
}

func (UnimplementedOmniApiHandler) ResumeCampaign(context.Context, *connect_go.Request[v0alpha.ResumeCampaignReq]) (*connect_go.Response[v0alpha.ResumeCampaignRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.ResumeCampaign is not implemented"))
}

func (UnimplementedOmniApiHandler) UpdateCampaign(context.Context, *connect_go.Request[v0alpha.UpdateCampaignReq]) (*connect_go.Response[v0alpha.UpdateCampaignRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.UpdateCampaign is not implemented"))
}

func (UnimplementedOmniApiHandler) UpdateCampaignPacingSpeed(context.Context, *connect_go.Request[v0alpha.UpdateCampaignPacingSpeedReq]) (*connect_go.Response[v0alpha.UpdateCampaignPacingSpeedRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.UpdateCampaignPacingSpeed is not implemented"))
}

func (UnimplementedOmniApiHandler) GetOffLoadedTextMessage(context.Context, *connect_go.Request[v0alpha.GetOffLoadedTextMessageReq]) (*connect_go.Response[v0alpha.GetOffLoadedTextMessageRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.GetOffLoadedTextMessage is not implemented"))
}

func (UnimplementedOmniApiHandler) ManagerListMessages(context.Context, *connect_go.Request[v0alpha.ManagerListMessagesReq], *connect_go.ServerStream[commons.OmniMessage]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.ManagerListMessages is not implemented"))
}

func (UnimplementedOmniApiHandler) ListMessages(context.Context, *connect_go.Request[v0alpha.ListMessagesReq], *connect_go.ServerStream[commons.OmniMessage]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.ListMessages is not implemented"))
}

func (UnimplementedOmniApiHandler) SendOmniMessage(context.Context, *connect_go.Request[v0alpha.SendOmniMessageReq]) (*connect_go.Response[commons.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.SendOmniMessage is not implemented"))
}

func (UnimplementedOmniApiHandler) ManagerSendOmniMessage(context.Context, *connect_go.Request[v0alpha.SendOmniMessageReq]) (*connect_go.Response[commons.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.ManagerSendOmniMessage is not implemented"))
}

func (UnimplementedOmniApiHandler) ManagerListConversations(context.Context, *connect_go.Request[v0alpha.ListConversationsReq]) (*connect_go.Response[v0alpha.ListConversationsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.ManagerListConversations is not implemented"))
}

func (UnimplementedOmniApiHandler) SuggestResponse(context.Context, *connect_go.Request[v0alpha.SuggestResponseReq]) (*connect_go.Response[v0alpha.SuggestResponseRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.SuggestResponse is not implemented"))
}

func (UnimplementedOmniApiHandler) CreateDisposition(context.Context, *connect_go.Request[v0alpha.CreateDispositionReq]) (*connect_go.Response[v0alpha.CreateDispositionRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.CreateDisposition is not implemented"))
}

func (UnimplementedOmniApiHandler) DeleteDisposition(context.Context, *connect_go.Request[v0alpha.DeleteDispositionReq]) (*connect_go.Response[commons.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.DeleteDisposition is not implemented"))
}

func (UnimplementedOmniApiHandler) ListDispositions(context.Context, *connect_go.Request[v0alpha.ListDispositionsReq]) (*connect_go.Response[v0alpha.ListDispositionsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.ListDispositions is not implemented"))
}

func (UnimplementedOmniApiHandler) UpdateDisposition(context.Context, *connect_go.Request[v0alpha.UpdateDispositionReq]) (*connect_go.Response[commons.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.UpdateDisposition is not implemented"))
}

func (UnimplementedOmniApiHandler) ListCustomUnsubscribeLinks(context.Context, *connect_go.Request[commons.Empty]) (*connect_go.Response[v0alpha.ListCustomUnsubscribeLinksRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.ListCustomUnsubscribeLinks is not implemented"))
}

func (UnimplementedOmniApiHandler) CreateCustomUnsubscribeLink(context.Context, *connect_go.Request[commons.OmniCustomUnsubscribeLink]) (*connect_go.Response[v0alpha.CreateCustomUnsubscribeLinkRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.CreateCustomUnsubscribeLink is not implemented"))
}

func (UnimplementedOmniApiHandler) UpdateCustomUnsubscribeLink(context.Context, *connect_go.Request[v0alpha.UpdateCustomUnsubscribeLinkReq]) (*connect_go.Response[v0alpha.UpdateCustomUnsubscribeLinkRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.UpdateCustomUnsubscribeLink is not implemented"))
}

func (UnimplementedOmniApiHandler) DeleteCustomUnsubscribeLink(context.Context, *connect_go.Request[v0alpha.DeleteCustomUnsubscribeLinkReq]) (*connect_go.Response[commons.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.DeleteCustomUnsubscribeLink is not implemented"))
}

func (UnimplementedOmniApiHandler) ListContactLists(context.Context, *connect_go.Request[v0alpha.ListContactListsReq]) (*connect_go.Response[v0alpha.ListContactListsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.ListContactLists is not implemented"))
}

func (UnimplementedOmniApiHandler) GetAvailableHeaders(context.Context, *connect_go.Request[v0alpha.GetAvailableHeadersReq]) (*connect_go.Response[v0alpha.GetAvailableHeadersRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.GetAvailableHeaders is not implemented"))
}

func (UnimplementedOmniApiHandler) GetTask(context.Context, *connect_go.Request[v0alpha.GetTaskReq]) (*connect_go.Response[commons.OmniTask], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.GetTask is not implemented"))
}

func (UnimplementedOmniApiHandler) ListTasks(context.Context, *connect_go.Request[v0alpha.ListTasksReq]) (*connect_go.Response[v0alpha.ListTasksRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.ListTasks is not implemented"))
}

func (UnimplementedOmniApiHandler) CreateConnectedInbox(context.Context, *connect_go.Request[commons.ConnectedInbox]) (*connect_go.Response[v0alpha.CreateConnectedInboxRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.CreateConnectedInbox is not implemented"))
}

func (UnimplementedOmniApiHandler) DeleteConnectedInboxBySid(context.Context, *connect_go.Request[v0alpha.DeleteConnectedInboxBySidReq]) (*connect_go.Response[commons.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.DeleteConnectedInboxBySid is not implemented"))
}

func (UnimplementedOmniApiHandler) GetConnectedInboxBySid(context.Context, *connect_go.Request[v0alpha.GetConnectedInboxBySidReq]) (*connect_go.Response[commons.ConnectedInbox], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.GetConnectedInboxBySid is not implemented"))
}

func (UnimplementedOmniApiHandler) PerformSendgridAccountChecks(context.Context, *connect_go.Request[v0alpha.SendgridAccountByClientReq]) (*connect_go.Response[v0alpha.SendgridAccountByClientRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.PerformSendgridAccountChecks is not implemented"))
}

func (UnimplementedOmniApiHandler) ListConnectedInboxes(context.Context, *connect_go.Request[v0alpha.ListConnectedInboxesReq]) (*connect_go.Response[v0alpha.ListConnectedInboxesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.ListConnectedInboxes is not implemented"))
}

func (UnimplementedOmniApiHandler) TestConnectedInbox(context.Context, *connect_go.Request[commons.ConnectedInbox]) (*connect_go.Response[v0alpha.TestConnectedInboxRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.TestConnectedInbox is not implemented"))
}

func (UnimplementedOmniApiHandler) UpdateConnectedInbox(context.Context, *connect_go.Request[v0alpha.UpdateConnectedInboxReq]) (*connect_go.Response[commons.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.UpdateConnectedInbox is not implemented"))
}

func (UnimplementedOmniApiHandler) CreateVerifiedEmail(context.Context, *connect_go.Request[commons.VerifiedEmail]) (*connect_go.Response[v0alpha.CreateVerifiedEmailRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.CreateVerifiedEmail is not implemented"))
}

func (UnimplementedOmniApiHandler) SendEmailNotification(context.Context, *connect_go.Request[v0alpha.SendEmailNotificationReq]) (*connect_go.Response[v0alpha.SendEmailNotificationRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.SendEmailNotification is not implemented"))
}

func (UnimplementedOmniApiHandler) DeleteVerifiedEmail(context.Context, *connect_go.Request[v0alpha.DeleteVerifiedEmailReq]) (*connect_go.Response[commons.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.DeleteVerifiedEmail is not implemented"))
}

func (UnimplementedOmniApiHandler) GetVerifiedEmailBySid(context.Context, *connect_go.Request[v0alpha.GetVerifiedEmailBySidReq]) (*connect_go.Response[commons.VerifiedEmail], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.GetVerifiedEmailBySid is not implemented"))
}

func (UnimplementedOmniApiHandler) ListVerifiedEmails(context.Context, *connect_go.Request[v0alpha.ListVerifiedEmailsReq]) (*connect_go.Response[v0alpha.ListVerifiedEmailsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.ListVerifiedEmails is not implemented"))
}

func (UnimplementedOmniApiHandler) ResendVerifiedEmail(context.Context, *connect_go.Request[v0alpha.ResendVerifiedEmailReq]) (*connect_go.Response[v0alpha.ResendVerifiedEmailRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.ResendVerifiedEmail is not implemented"))
}

func (UnimplementedOmniApiHandler) UpdateVerifiedEmail(context.Context, *connect_go.Request[v0alpha.UpdateVerifiedEmailReq]) (*connect_go.Response[commons.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.UpdateVerifiedEmail is not implemented"))
}

func (UnimplementedOmniApiHandler) GetPendingGoogleXOAuth2Data(context.Context, *connect_go.Request[v0alpha.GetPendingGoogleXOAuth2DataReq]) (*connect_go.Response[v0alpha.GetPendingGoogleXOAuth2DataRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.GetPendingGoogleXOAuth2Data is not implemented"))
}

func (UnimplementedOmniApiHandler) SendFeedbackEmail(context.Context, *connect_go.Request[v0alpha.SendFeedbackEmailReq]) (*connect_go.Response[v0alpha.SendFeedbackEmailRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.SendFeedbackEmail is not implemented"))
}

func (UnimplementedOmniApiHandler) GetOmniAttachment(context.Context, *connect_go.Request[v0alpha.GetOmniAttachmentReq]) (*connect_go.Response[commons.OmniAttachment], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.GetOmniAttachment is not implemented"))
}

func (UnimplementedOmniApiHandler) CreateTasks(context.Context, *connect_go.Request[v0alpha.CreateTasksReq]) (*connect_go.Response[v0alpha.CreateTasksRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.CreateTasks is not implemented"))
}

func (UnimplementedOmniApiHandler) CreateSignature(context.Context, *connect_go.Request[v0alpha.CreateSignatureReq]) (*connect_go.Response[v0alpha.CreateSignatureRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.CreateSignature is not implemented"))
}

func (UnimplementedOmniApiHandler) DeleteSignature(context.Context, *connect_go.Request[v0alpha.DeleteSignatureReq]) (*connect_go.Response[v0alpha.DeleteSignatureRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.DeleteSignature is not implemented"))
}

func (UnimplementedOmniApiHandler) ListSignatures(context.Context, *connect_go.Request[v0alpha.ListSignaturesReq]) (*connect_go.Response[v0alpha.ListSignaturesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.ListSignatures is not implemented"))
}

func (UnimplementedOmniApiHandler) UpdateSignature(context.Context, *connect_go.Request[v0alpha.UpdateSignatureReq]) (*connect_go.Response[v0alpha.UpdateSignatureRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.UpdateSignature is not implemented"))
}

func (UnimplementedOmniApiHandler) CreateProject(context.Context, *connect_go.Request[v0alpha.CreateProjectReq]) (*connect_go.Response[v0alpha.CreateProjectRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.CreateProject is not implemented"))
}

func (UnimplementedOmniApiHandler) ListProjects(context.Context, *connect_go.Request[v0alpha.ListProjectsReq]) (*connect_go.Response[v0alpha.ListProjectsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.ListProjects is not implemented"))
}

func (UnimplementedOmniApiHandler) EditProjectById(context.Context, *connect_go.Request[v0alpha.EditProjectByIdReq]) (*connect_go.Response[v0alpha.EditProjectByIdRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.EditProjectById is not implemented"))
}

func (UnimplementedOmniApiHandler) CloseProjectById(context.Context, *connect_go.Request[v0alpha.CloseProjectByIdReq]) (*connect_go.Response[v0alpha.CloseProjectByIdRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.CloseProjectById is not implemented"))
}

func (UnimplementedOmniApiHandler) GetProjectById(context.Context, *connect_go.Request[v0alpha.GetProjectByIdReq]) (*connect_go.Response[v0alpha.Project], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.GetProjectById is not implemented"))
}

func (UnimplementedOmniApiHandler) CreateCannedMessage(context.Context, *connect_go.Request[v0alpha.CreateCannedMessageReq]) (*connect_go.Response[v0alpha.CannedMessage], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.CreateCannedMessage is not implemented"))
}

func (UnimplementedOmniApiHandler) ListCannedMessages(context.Context, *connect_go.Request[v0alpha.ListCannedMessagesReq]) (*connect_go.Response[v0alpha.ListCannedMessagesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.ListCannedMessages is not implemented"))
}

func (UnimplementedOmniApiHandler) UpdateCannedMessage(context.Context, *connect_go.Request[v0alpha.UpdateCannedMessageReq]) (*connect_go.Response[v0alpha.CannedMessage], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.UpdateCannedMessage is not implemented"))
}

func (UnimplementedOmniApiHandler) GetCannedMessageById(context.Context, *connect_go.Request[v0alpha.GetCannedMessageByIdReq]) (*connect_go.Response[v0alpha.CannedMessageWithGroup], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.GetCannedMessageById is not implemented"))
}

func (UnimplementedOmniApiHandler) DeleteCannedMessageById(context.Context, *connect_go.Request[v0alpha.DeleteCannedMessageByIdReq]) (*connect_go.Response[v0alpha.DeleteCannedMessageByIdRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.DeleteCannedMessageById is not implemented"))
}

func (UnimplementedOmniApiHandler) CreateCannedMessageGroup(context.Context, *connect_go.Request[v0alpha.CreateCannedMessageGroupReq]) (*connect_go.Response[v0alpha.CannedMessageGroup], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.CreateCannedMessageGroup is not implemented"))
}

func (UnimplementedOmniApiHandler) ListCannedMessageGroups(context.Context, *connect_go.Request[v0alpha.ListCannedMessageGroupsReq]) (*connect_go.Response[v0alpha.ListCannedMessageGroupsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.ListCannedMessageGroups is not implemented"))
}

func (UnimplementedOmniApiHandler) UpdateCannedMessageGroup(context.Context, *connect_go.Request[v0alpha.UpdateCannedMessageGroupReq]) (*connect_go.Response[v0alpha.UpdateCannedMessageGroupRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.UpdateCannedMessageGroup is not implemented"))
}

func (UnimplementedOmniApiHandler) DeleteCannedMessageGroup(context.Context, *connect_go.Request[v0alpha.DeleteCannedMessageGroupReq]) (*connect_go.Response[v0alpha.DeleteCannedMessageGroupRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.DeleteCannedMessageGroup is not implemented"))
}

func (UnimplementedOmniApiHandler) ListCannedMessagesByGroupId(context.Context, *connect_go.Request[v0alpha.ListCannedMessagesByGroupIdReq]) (*connect_go.Response[v0alpha.ListCannedMessagesByGroupIdRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.ListCannedMessagesByGroupId is not implemented"))
}

func (UnimplementedOmniApiHandler) GetCannedMessageGroupById(context.Context, *connect_go.Request[v0alpha.GetCannedMessageGroupByIdReq]) (*connect_go.Response[v0alpha.CannedMessageGroup], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.OmniApi.GetCannedMessageGroupById is not implemented"))
}
