// Copyright (c) 2019, TCN Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v0alpha/acd.proto

package v0alphaconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v0alpha "github.com/tcncloud/api-go/api/v0alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AcdName is the fully-qualified name of the Acd service.
	AcdName = "api.v0alpha.Acd"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AcdAgentGetStatusStreamProcedure is the fully-qualified name of the Acd's AgentGetStatusStream
	// RPC.
	AcdAgentGetStatusStreamProcedure = "/api.v0alpha.Acd/AgentGetStatusStream"
	// AcdAgentGetStatusProcedure is the fully-qualified name of the Acd's AgentGetStatus RPC.
	AcdAgentGetStatusProcedure = "/api.v0alpha.Acd/AgentGetStatus"
	// AcdAgentGetConnectedPartyProcedure is the fully-qualified name of the Acd's
	// AgentGetConnectedParty RPC.
	AcdAgentGetConnectedPartyProcedure = "/api.v0alpha.Acd/AgentGetConnectedParty"
	// AcdManagerAgentGetConnectedPartyProcedure is the fully-qualified name of the Acd's
	// ManagerAgentGetConnectedParty RPC.
	AcdManagerAgentGetConnectedPartyProcedure = "/api.v0alpha.Acd/ManagerAgentGetConnectedParty"
	// AcdAgentIntercomProcedure is the fully-qualified name of the Acd's AgentIntercom RPC.
	AcdAgentIntercomProcedure = "/api.v0alpha.Acd/AgentIntercom"
	// AcdAgentIntercomAcceptProcedure is the fully-qualified name of the Acd's AgentIntercomAccept RPC.
	AcdAgentIntercomAcceptProcedure = "/api.v0alpha.Acd/AgentIntercomAccept"
	// AcdAgentIntercomRejectProcedure is the fully-qualified name of the Acd's AgentIntercomReject RPC.
	AcdAgentIntercomRejectProcedure = "/api.v0alpha.Acd/AgentIntercomReject"
	// AcdAgentIntercomCancelProcedure is the fully-qualified name of the Acd's AgentIntercomCancel RPC.
	AcdAgentIntercomCancelProcedure = "/api.v0alpha.Acd/AgentIntercomCancel"
	// AcdDialManualPrepareProcedure is the fully-qualified name of the Acd's DialManualPrepare RPC.
	AcdDialManualPrepareProcedure = "/api.v0alpha.Acd/DialManualPrepare"
	// AcdDialManualCancelProcedure is the fully-qualified name of the Acd's DialManualCancel RPC.
	AcdDialManualCancelProcedure = "/api.v0alpha.Acd/DialManualCancel"
	// AcdDialPreviewPrepareProcedure is the fully-qualified name of the Acd's DialPreviewPrepare RPC.
	AcdDialPreviewPrepareProcedure = "/api.v0alpha.Acd/DialPreviewPrepare"
	// AcdAgentPauseProcedure is the fully-qualified name of the Acd's AgentPause RPC.
	AcdAgentPauseProcedure = "/api.v0alpha.Acd/AgentPause"
	// AcdAgentSetReadyProcedure is the fully-qualified name of the Acd's AgentSetReady RPC.
	AcdAgentSetReadyProcedure = "/api.v0alpha.Acd/AgentSetReady"
	// AcdAgentGUIBusyProcedure is the fully-qualified name of the Acd's AgentGUIBusy RPC.
	AcdAgentGUIBusyProcedure = "/api.v0alpha.Acd/AgentGUIBusy"
	// AcdReportAgentSessionEventProcedure is the fully-qualified name of the Acd's
	// ReportAgentSessionEvent RPC.
	AcdReportAgentSessionEventProcedure = "/api.v0alpha.Acd/ReportAgentSessionEvent"
	// AcdCallerRequeueProcedure is the fully-qualified name of the Acd's CallerRequeue RPC.
	AcdCallerRequeueProcedure = "/api.v0alpha.Acd/CallerRequeue"
	// AcdAgentDisconnectProcedure is the fully-qualified name of the Acd's AgentDisconnect RPC.
	AcdAgentDisconnectProcedure = "/api.v0alpha.Acd/AgentDisconnect"
	// AcdTransferWarmToOutboundCancelProcedure is the fully-qualified name of the Acd's
	// TransferWarmToOutboundCancel RPC.
	AcdTransferWarmToOutboundCancelProcedure = "/api.v0alpha.Acd/TransferWarmToOutboundCancel"
	// AcdTransferWarmToAgentCancelProcedure is the fully-qualified name of the Acd's
	// TransferWarmToAgentCancel RPC.
	AcdTransferWarmToAgentCancelProcedure = "/api.v0alpha.Acd/TransferWarmToAgentCancel"
	// AcdTransferWarmToOutboundApproveProcedure is the fully-qualified name of the Acd's
	// TransferWarmToOutboundApprove RPC.
	AcdTransferWarmToOutboundApproveProcedure = "/api.v0alpha.Acd/TransferWarmToOutboundApprove"
	// AcdTransferWarmToAgentApproveProcedure is the fully-qualified name of the Acd's
	// TransferWarmToAgentApprove RPC.
	AcdTransferWarmToAgentApproveProcedure = "/api.v0alpha.Acd/TransferWarmToAgentApprove"
	// AcdCallerSendToVoicemailProcedure is the fully-qualified name of the Acd's CallerSendToVoicemail
	// RPC.
	AcdCallerSendToVoicemailProcedure = "/api.v0alpha.Acd/CallerSendToVoicemail"
	// AcdAgentInviteTransferCallerToConferenceProcedure is the fully-qualified name of the Acd's
	// AgentInviteTransferCallerToConference RPC.
	AcdAgentInviteTransferCallerToConferenceProcedure = "/api.v0alpha.Acd/AgentInviteTransferCallerToConference"
	// AcdAgentMonitorCallsProcedure is the fully-qualified name of the Acd's AgentMonitorCalls RPC.
	AcdAgentMonitorCallsProcedure = "/api.v0alpha.Acd/AgentMonitorCalls"
	// AcdTransferColdToOutboundProcedure is the fully-qualified name of the Acd's
	// TransferColdToOutbound RPC.
	AcdTransferColdToOutboundProcedure = "/api.v0alpha.Acd/TransferColdToOutbound"
	// AcdTransferColdToAgentProcedure is the fully-qualified name of the Acd's TransferColdToAgent RPC.
	AcdTransferColdToAgentProcedure = "/api.v0alpha.Acd/TransferColdToAgent"
	// AcdTransferWarmToOutboundStartProcedure is the fully-qualified name of the Acd's
	// TransferWarmToOutboundStart RPC.
	AcdTransferWarmToOutboundStartProcedure = "/api.v0alpha.Acd/TransferWarmToOutboundStart"
	// AcdCreateWarmOutboundTransferMemberProcedure is the fully-qualified name of the Acd's
	// CreateWarmOutboundTransferMember RPC.
	AcdCreateWarmOutboundTransferMemberProcedure = "/api.v0alpha.Acd/CreateWarmOutboundTransferMember"
	// AcdRemoveTransferMemberProcedure is the fully-qualified name of the Acd's RemoveTransferMember
	// RPC.
	AcdRemoveTransferMemberProcedure = "/api.v0alpha.Acd/RemoveTransferMember"
	// AcdTransferWarmToAgentStartProcedure is the fully-qualified name of the Acd's
	// TransferWarmToAgentStart RPC.
	AcdTransferWarmToAgentStartProcedure = "/api.v0alpha.Acd/TransferWarmToAgentStart"
	// AcdAgentGetCallFromHoldProcedure is the fully-qualified name of the Acd's AgentGetCallFromHold
	// RPC.
	AcdAgentGetCallFromHoldProcedure = "/api.v0alpha.Acd/AgentGetCallFromHold"
	// AcdAgentGetSpecificCallFromHoldProcedure is the fully-qualified name of the Acd's
	// AgentGetSpecificCallFromHold RPC.
	AcdAgentGetSpecificCallFromHoldProcedure = "/api.v0alpha.Acd/AgentGetSpecificCallFromHold"
	// AcdACDGetAllAgentsStatusesProcedure is the fully-qualified name of the Acd's
	// ACDGetAllAgentsStatuses RPC.
	AcdACDGetAllAgentsStatusesProcedure = "/api.v0alpha.Acd/ACDGetAllAgentsStatuses"
	// AcdAgentPutCallOnHoldProcedure is the fully-qualified name of the Acd's AgentPutCallOnHold RPC.
	AcdAgentPutCallOnHoldProcedure = "/api.v0alpha.Acd/AgentPutCallOnHold"
	// AcdAgentReceiveMessageProcedure is the fully-qualified name of the Acd's AgentReceiveMessage RPC.
	AcdAgentReceiveMessageProcedure = "/api.v0alpha.Acd/AgentReceiveMessage"
	// AcdAgentPBXApproveCallProcedure is the fully-qualified name of the Acd's AgentPBXApproveCall RPC.
	AcdAgentPBXApproveCallProcedure = "/api.v0alpha.Acd/AgentPBXApproveCall"
	// AcdAgentPBXRejectCallProcedure is the fully-qualified name of the Acd's AgentPBXRejectCall RPC.
	AcdAgentPBXRejectCallProcedure = "/api.v0alpha.Acd/AgentPBXRejectCall"
	// AcdGetCallerLostPeerProcedure is the fully-qualified name of the Acd's GetCallerLostPeer RPC.
	AcdGetCallerLostPeerProcedure = "/api.v0alpha.Acd/GetCallerLostPeer"
	// AcdCallerGetRawEventProcedure is the fully-qualified name of the Acd's CallerGetRawEvent RPC.
	AcdCallerGetRawEventProcedure = "/api.v0alpha.Acd/CallerGetRawEvent"
	// AcdPeerAgentWithCallerProcedure is the fully-qualified name of the Acd's PeerAgentWithCaller RPC.
	AcdPeerAgentWithCallerProcedure = "/api.v0alpha.Acd/PeerAgentWithCaller"
	// AcdHoldTransferMemberProcedure is the fully-qualified name of the Acd's HoldTransferMember RPC.
	AcdHoldTransferMemberProcedure = "/api.v0alpha.Acd/HoldTransferMember"
	// AcdUnholdTransferMemberProcedure is the fully-qualified name of the Acd's UnholdTransferMember
	// RPC.
	AcdUnholdTransferMemberProcedure = "/api.v0alpha.Acd/UnholdTransferMember"
	// AcdGetAgentCallCountsProcedure is the fully-qualified name of the Acd's GetAgentCallCounts RPC.
	AcdGetAgentCallCountsProcedure = "/api.v0alpha.Acd/GetAgentCallCounts"
	// AcdWarmCallerTransferStartProcedure is the fully-qualified name of the Acd's
	// WarmCallerTransferStart RPC.
	AcdWarmCallerTransferStartProcedure = "/api.v0alpha.Acd/WarmCallerTransferStart"
	// AcdWarmCallerTransferCancelProcedure is the fully-qualified name of the Acd's
	// WarmCallerTransferCancel RPC.
	AcdWarmCallerTransferCancelProcedure = "/api.v0alpha.Acd/WarmCallerTransferCancel"
	// AcdWarmCallerTransferApproveProcedure is the fully-qualified name of the Acd's
	// WarmCallerTransferApprove RPC.
	AcdWarmCallerTransferApproveProcedure = "/api.v0alpha.Acd/WarmCallerTransferApprove"
	// AcdPlaySoundboardEntityProcedure is the fully-qualified name of the Acd's PlaySoundboardEntity
	// RPC.
	AcdPlaySoundboardEntityProcedure = "/api.v0alpha.Acd/PlaySoundboardEntity"
	// AcdStopSoundboardEntityProcedure is the fully-qualified name of the Acd's StopSoundboardEntity
	// RPC.
	AcdStopSoundboardEntityProcedure = "/api.v0alpha.Acd/StopSoundboardEntity"
	// AcdUpdateAgentSkillsProcedure is the fully-qualified name of the Acd's UpdateAgentSkills RPC.
	AcdUpdateAgentSkillsProcedure = "/api.v0alpha.Acd/UpdateAgentSkills"
	// AcdPlayDTMFProcedure is the fully-qualified name of the Acd's PlayDTMF RPC.
	AcdPlayDTMFProcedure = "/api.v0alpha.Acd/PlayDTMF"
	// AcdAgentMuteProcedure is the fully-qualified name of the Acd's AgentMute RPC.
	AcdAgentMuteProcedure = "/api.v0alpha.Acd/AgentMute"
	// AcdAgentUnmuteProcedure is the fully-qualified name of the Acd's AgentUnmute RPC.
	AcdAgentUnmuteProcedure = "/api.v0alpha.Acd/AgentUnmute"
	// AcdStartSecureFormProcedure is the fully-qualified name of the Acd's StartSecureForm RPC.
	AcdStartSecureFormProcedure = "/api.v0alpha.Acd/StartSecureForm"
	// AcdCollectSecureFormFieldProcedure is the fully-qualified name of the Acd's
	// CollectSecureFormField RPC.
	AcdCollectSecureFormFieldProcedure = "/api.v0alpha.Acd/CollectSecureFormField"
	// AcdResetSecureFormFieldProcedure is the fully-qualified name of the Acd's ResetSecureFormField
	// RPC.
	AcdResetSecureFormFieldProcedure = "/api.v0alpha.Acd/ResetSecureFormField"
	// AcdAcceptSecureFormFieldProcedure is the fully-qualified name of the Acd's AcceptSecureFormField
	// RPC.
	AcdAcceptSecureFormFieldProcedure = "/api.v0alpha.Acd/AcceptSecureFormField"
	// AcdProcessSecureFormProcedure is the fully-qualified name of the Acd's ProcessSecureForm RPC.
	AcdProcessSecureFormProcedure = "/api.v0alpha.Acd/ProcessSecureForm"
	// AcdFinishSecureFormHandlingProcedure is the fully-qualified name of the Acd's
	// FinishSecureFormHandling RPC.
	AcdFinishSecureFormHandlingProcedure = "/api.v0alpha.Acd/FinishSecureFormHandling"
)

// AcdClient is a client for the api.v0alpha.Acd service.
type AcdClient interface {
	AgentGetStatusStream(context.Context, *connect_go.Request[v0alpha.AgentGetStatusRequest]) (*connect_go.ServerStreamForClient[v0alpha.AgentGetStatusReply], error)
	AgentGetStatus(context.Context, *connect_go.Request[v0alpha.AgentGetStatusRequest]) (*connect_go.Response[v0alpha.AgentGetStatusReply], error)
	AgentGetConnectedParty(context.Context, *connect_go.Request[v0alpha.AgentGetConnectedPartyRequest]) (*connect_go.Response[v0alpha.AgentGetConnectedPartyReply], error)
	ManagerAgentGetConnectedParty(context.Context, *connect_go.Request[v0alpha.ManagerAgentGetConnectedPartyRequest]) (*connect_go.Response[v0alpha.ManagerAgentGetConnectedPartyReply], error)
	AgentIntercom(context.Context, *connect_go.Request[v0alpha.AgentIntercomRequest]) (*connect_go.Response[v0alpha.AgentIntercomReply], error)
	AgentIntercomAccept(context.Context, *connect_go.Request[v0alpha.AgentIntercomAcceptRequest]) (*connect_go.Response[v0alpha.AgentIntercomAcceptReply], error)
	AgentIntercomReject(context.Context, *connect_go.Request[v0alpha.AgentIntercomRejectRequest]) (*connect_go.Response[v0alpha.AgentIntercomRejectReply], error)
	AgentIntercomCancel(context.Context, *connect_go.Request[v0alpha.AgentIntercomCancelRequest]) (*connect_go.Response[v0alpha.AgentIntercomCancelReply], error)
	DialManualPrepare(context.Context, *connect_go.Request[v0alpha.DialManualPrepareRequest]) (*connect_go.Response[v0alpha.DialManualPrepareReply], error)
	DialManualCancel(context.Context, *connect_go.Request[v0alpha.DialManualCancelRequest]) (*connect_go.Response[v0alpha.DialManualCancelReply], error)
	DialPreviewPrepare(context.Context, *connect_go.Request[v0alpha.DialPreviewPrepareRequest]) (*connect_go.Response[v0alpha.DialPreviewPrepareReply], error)
	AgentPause(context.Context, *connect_go.Request[v0alpha.AgentPauseRequest]) (*connect_go.Response[v0alpha.AgentPauseReply], error)
	AgentSetReady(context.Context, *connect_go.Request[v0alpha.AgentSetReadyRequest]) (*connect_go.Response[v0alpha.AgentSetReadyReply], error)
	AgentGUIBusy(context.Context, *connect_go.Request[v0alpha.AgentGUIBusyRequest]) (*connect_go.Response[v0alpha.AgentGUIBusyReply], error)
	ReportAgentSessionEvent(context.Context, *connect_go.Request[v0alpha.AgentSessionEventReq]) (*connect_go.Response[v0alpha.AgentSessionEventRes], error)
	CallerRequeue(context.Context, *connect_go.Request[v0alpha.CallerRequeueRequest]) (*connect_go.Response[v0alpha.CallerRequeueReply], error)
	AgentDisconnect(context.Context, *connect_go.Request[v0alpha.AgentDisconnectRequest]) (*connect_go.Response[v0alpha.AgentDisconnectReply], error)
	TransferWarmToOutboundCancel(context.Context, *connect_go.Request[v0alpha.TransferWarmToOutboundCancelRequest]) (*connect_go.Response[v0alpha.TransferWarmToOutboundCancelReply], error)
	TransferWarmToAgentCancel(context.Context, *connect_go.Request[v0alpha.TransferWarmToAgentCancelRequest]) (*connect_go.Response[v0alpha.TransferWarmToAgentCancelReply], error)
	TransferWarmToOutboundApprove(context.Context, *connect_go.Request[v0alpha.TransferWarmToOutboundApproveRequest]) (*connect_go.Response[v0alpha.TransferWarmToOutboundApproveReply], error)
	TransferWarmToAgentApprove(context.Context, *connect_go.Request[v0alpha.TransferWarmToAgentApproveRequest]) (*connect_go.Response[v0alpha.TransferWarmToAgentApproveReply], error)
	CallerSendToVoicemail(context.Context, *connect_go.Request[v0alpha.CallerSendToVoicemailRequest]) (*connect_go.Response[v0alpha.CallerSendToVoicemailReply], error)
	AgentInviteTransferCallerToConference(context.Context, *connect_go.Request[v0alpha.AgentInviteTransferCallerToConferenceRequest]) (*connect_go.Response[v0alpha.AgentInviteTransferCallerToConferenceReply], error)
	AgentMonitorCalls(context.Context, *connect_go.Request[v0alpha.AgentMonitorCallsRequest]) (*connect_go.Response[v0alpha.AgentMonitorCallsReply], error)
	TransferColdToOutbound(context.Context, *connect_go.Request[v0alpha.TransferColdToOutboundRequest]) (*connect_go.Response[v0alpha.TransferColdToOutboundReply], error)
	TransferColdToAgent(context.Context, *connect_go.Request[v0alpha.TransferColdToAgentRequest]) (*connect_go.Response[v0alpha.TransferColdToAgentReply], error)
	TransferWarmToOutboundStart(context.Context, *connect_go.Request[v0alpha.TransferWarmToOutboundStartRequest]) (*connect_go.Response[v0alpha.TransferWarmToOutboundStartReply], error)
	// creates a new outbound transfer member using the given src/dst numbers
	CreateWarmOutboundTransferMember(context.Context, *connect_go.Request[v0alpha.CreateWarmOutboundTransferMemberRequest]) (*connect_go.Response[v0alpha.CreateWarmOutboundTransferMemberReply], error)
	// hangups a transfer member using the given member identifier
	RemoveTransferMember(context.Context, *connect_go.Request[v0alpha.RemoveTransferMemberRequest]) (*connect_go.Response[v0alpha.RemoveTransferMemberReply], error)
	TransferWarmToAgentStart(context.Context, *connect_go.Request[v0alpha.TransferWarmToAgentStartRequest]) (*connect_go.Response[v0alpha.TransferWarmToAgentStartReply], error)
	AgentGetCallFromHold(context.Context, *connect_go.Request[v0alpha.AgentGetCallFromHoldRequest]) (*connect_go.Response[v0alpha.AgentGetCallFromHoldReply], error)
	AgentGetSpecificCallFromHold(context.Context, *connect_go.Request[v0alpha.AgentGetSpecificCallFromHoldRequest]) (*connect_go.Response[v0alpha.AgentGetSpecificCallFromHoldReply], error)
	ACDGetAllAgentsStatuses(context.Context, *connect_go.Request[v0alpha.ACDGetAllAgentsStatusesRequest]) (*connect_go.Response[v0alpha.ACDGetAllAgentsStatusesReply], error)
	AgentPutCallOnHold(context.Context, *connect_go.Request[v0alpha.AgentPutCallOnHoldRequest]) (*connect_go.Response[v0alpha.AgentPutCallOnHoldReply], error)
	AgentReceiveMessage(context.Context, *connect_go.Request[v0alpha.AgentReceiveMessageRequest]) (*connect_go.Response[v0alpha.AgentReceiveMessageReply], error)
	AgentPBXApproveCall(context.Context, *connect_go.Request[v0alpha.AgentPBXApproveCallRequest]) (*connect_go.Response[v0alpha.AgentPBXApproveCallReply], error)
	AgentPBXRejectCall(context.Context, *connect_go.Request[v0alpha.AgentPBXRejectCallRequest]) (*connect_go.Response[v0alpha.AgentPBXRejectCallReply], error)
	GetCallerLostPeer(context.Context, *connect_go.Request[v0alpha.GetCallerLostPeerRequest]) (*connect_go.Response[v0alpha.GetCallerLostPeerReply], error)
	CallerGetRawEvent(context.Context, *connect_go.Request[v0alpha.CallerGetRawEventRequest]) (*connect_go.Response[v0alpha.CallerGetRawEventReply], error)
	PeerAgentWithCaller(context.Context, *connect_go.Request[v0alpha.PeerAgentWithCallerRequest]) (*connect_go.Response[v0alpha.PeerAgentWithCallerReply], error)
	HoldTransferMember(context.Context, *connect_go.Request[v0alpha.HoldTransferMemberReq]) (*connect_go.Response[v0alpha.HoldTransferMemberRes], error)
	UnholdTransferMember(context.Context, *connect_go.Request[v0alpha.UnholdTransferMemberReq]) (*connect_go.Response[v0alpha.UnholdTransferMemberRes], error)
	GetAgentCallCounts(context.Context, *connect_go.Request[v0alpha.GetAgentCallCountsReq]) (*connect_go.Response[v0alpha.GetAgentCallCountsRes], error)
	// endpoint used to start a warm caller transfer
	WarmCallerTransferStart(context.Context, *connect_go.Request[v0alpha.WarmCallerTransferStartReq]) (*connect_go.Response[v0alpha.WarmCallerTransferStartRes], error)
	// endpoint used to cancel a warm caller transfer
	WarmCallerTransferCancel(context.Context, *connect_go.Request[v0alpha.WarmCallerTransferCancelReq]) (*connect_go.Response[v0alpha.WarmCallerTransferCancelRes], error)
	// endpoint used to approve a warm caller transfer
	WarmCallerTransferApprove(context.Context, *connect_go.Request[v0alpha.WarmCallerTransferApproveReq]) (*connect_go.Response[v0alpha.WarmCallerTransferApproveRes], error)
	// endpoint used to play a soundboard file for a customer
	PlaySoundboardEntity(context.Context, *connect_go.Request[v0alpha.PlaySoundboardEntityReq]) (*connect_go.Response[v0alpha.PlaySoundboardEntityRes], error)
	// endpoint used to stop a soundboard file for a customer
	StopSoundboardEntity(context.Context, *connect_go.Request[v0alpha.StopSoundboardEntityReq]) (*connect_go.Response[v0alpha.StopSoundboardEntityRes], error)
	// endpoint used to update an agent's skills
	UpdateAgentSkills(context.Context, *connect_go.Request[v0alpha.UpdateAgentSkillsRequest]) (*connect_go.Response[v0alpha.UpdateAgentSkillsReply], error)
	// endpoint used to play a dtmf tone to all members of a the agent's conference
	PlayDTMF(context.Context, *connect_go.Request[v0alpha.PlayDTMFRequest]) (*connect_go.Response[v0alpha.PlayDTMFReply], error)
	// endpoint used to mute and agent's mic
	AgentMute(context.Context, *connect_go.Request[v0alpha.AgentMuteRequest]) (*connect_go.Response[v0alpha.AgentMuteReply], error)
	// endpoint used to unmute and agent's mic
	AgentUnmute(context.Context, *connect_go.Request[v0alpha.AgentUnmuteRequest]) (*connect_go.Response[v0alpha.AgentUnmuteReply], error)
	StartSecureForm(context.Context, *connect_go.Request[v0alpha.StartSecureFormReq]) (*connect_go.Response[v0alpha.StartSecureFormRes], error)
	CollectSecureFormField(context.Context, *connect_go.Request[v0alpha.CollectSecureFormFieldReq]) (*connect_go.ServerStreamForClient[v0alpha.CollectSecureFormFieldRes], error)
	ResetSecureFormField(context.Context, *connect_go.Request[v0alpha.ResetSecureFormFieldReq]) (*connect_go.Response[v0alpha.ResetSecureFormFieldRes], error)
	AcceptSecureFormField(context.Context, *connect_go.Request[v0alpha.AcceptSecureFormFieldReq]) (*connect_go.Response[v0alpha.AcceptSecureFormFieldRes], error)
	ProcessSecureForm(context.Context, *connect_go.Request[v0alpha.ProcessSecureFormReq]) (*connect_go.Response[v0alpha.ProcessSecureFormRes], error)
	FinishSecureFormHandling(context.Context, *connect_go.Request[v0alpha.FinishSecureFormHandlingReq]) (*connect_go.Response[v0alpha.FinishSecureFormHandlingRes], error)
}

// NewAcdClient constructs a client for the api.v0alpha.Acd service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAcdClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AcdClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &acdClient{
		agentGetStatusStream: connect_go.NewClient[v0alpha.AgentGetStatusRequest, v0alpha.AgentGetStatusReply](
			httpClient,
			baseURL+AcdAgentGetStatusStreamProcedure,
			opts...,
		),
		agentGetStatus: connect_go.NewClient[v0alpha.AgentGetStatusRequest, v0alpha.AgentGetStatusReply](
			httpClient,
			baseURL+AcdAgentGetStatusProcedure,
			opts...,
		),
		agentGetConnectedParty: connect_go.NewClient[v0alpha.AgentGetConnectedPartyRequest, v0alpha.AgentGetConnectedPartyReply](
			httpClient,
			baseURL+AcdAgentGetConnectedPartyProcedure,
			opts...,
		),
		managerAgentGetConnectedParty: connect_go.NewClient[v0alpha.ManagerAgentGetConnectedPartyRequest, v0alpha.ManagerAgentGetConnectedPartyReply](
			httpClient,
			baseURL+AcdManagerAgentGetConnectedPartyProcedure,
			opts...,
		),
		agentIntercom: connect_go.NewClient[v0alpha.AgentIntercomRequest, v0alpha.AgentIntercomReply](
			httpClient,
			baseURL+AcdAgentIntercomProcedure,
			opts...,
		),
		agentIntercomAccept: connect_go.NewClient[v0alpha.AgentIntercomAcceptRequest, v0alpha.AgentIntercomAcceptReply](
			httpClient,
			baseURL+AcdAgentIntercomAcceptProcedure,
			opts...,
		),
		agentIntercomReject: connect_go.NewClient[v0alpha.AgentIntercomRejectRequest, v0alpha.AgentIntercomRejectReply](
			httpClient,
			baseURL+AcdAgentIntercomRejectProcedure,
			opts...,
		),
		agentIntercomCancel: connect_go.NewClient[v0alpha.AgentIntercomCancelRequest, v0alpha.AgentIntercomCancelReply](
			httpClient,
			baseURL+AcdAgentIntercomCancelProcedure,
			opts...,
		),
		dialManualPrepare: connect_go.NewClient[v0alpha.DialManualPrepareRequest, v0alpha.DialManualPrepareReply](
			httpClient,
			baseURL+AcdDialManualPrepareProcedure,
			opts...,
		),
		dialManualCancel: connect_go.NewClient[v0alpha.DialManualCancelRequest, v0alpha.DialManualCancelReply](
			httpClient,
			baseURL+AcdDialManualCancelProcedure,
			opts...,
		),
		dialPreviewPrepare: connect_go.NewClient[v0alpha.DialPreviewPrepareRequest, v0alpha.DialPreviewPrepareReply](
			httpClient,
			baseURL+AcdDialPreviewPrepareProcedure,
			opts...,
		),
		agentPause: connect_go.NewClient[v0alpha.AgentPauseRequest, v0alpha.AgentPauseReply](
			httpClient,
			baseURL+AcdAgentPauseProcedure,
			opts...,
		),
		agentSetReady: connect_go.NewClient[v0alpha.AgentSetReadyRequest, v0alpha.AgentSetReadyReply](
			httpClient,
			baseURL+AcdAgentSetReadyProcedure,
			opts...,
		),
		agentGUIBusy: connect_go.NewClient[v0alpha.AgentGUIBusyRequest, v0alpha.AgentGUIBusyReply](
			httpClient,
			baseURL+AcdAgentGUIBusyProcedure,
			opts...,
		),
		reportAgentSessionEvent: connect_go.NewClient[v0alpha.AgentSessionEventReq, v0alpha.AgentSessionEventRes](
			httpClient,
			baseURL+AcdReportAgentSessionEventProcedure,
			opts...,
		),
		callerRequeue: connect_go.NewClient[v0alpha.CallerRequeueRequest, v0alpha.CallerRequeueReply](
			httpClient,
			baseURL+AcdCallerRequeueProcedure,
			opts...,
		),
		agentDisconnect: connect_go.NewClient[v0alpha.AgentDisconnectRequest, v0alpha.AgentDisconnectReply](
			httpClient,
			baseURL+AcdAgentDisconnectProcedure,
			opts...,
		),
		transferWarmToOutboundCancel: connect_go.NewClient[v0alpha.TransferWarmToOutboundCancelRequest, v0alpha.TransferWarmToOutboundCancelReply](
			httpClient,
			baseURL+AcdTransferWarmToOutboundCancelProcedure,
			opts...,
		),
		transferWarmToAgentCancel: connect_go.NewClient[v0alpha.TransferWarmToAgentCancelRequest, v0alpha.TransferWarmToAgentCancelReply](
			httpClient,
			baseURL+AcdTransferWarmToAgentCancelProcedure,
			opts...,
		),
		transferWarmToOutboundApprove: connect_go.NewClient[v0alpha.TransferWarmToOutboundApproveRequest, v0alpha.TransferWarmToOutboundApproveReply](
			httpClient,
			baseURL+AcdTransferWarmToOutboundApproveProcedure,
			opts...,
		),
		transferWarmToAgentApprove: connect_go.NewClient[v0alpha.TransferWarmToAgentApproveRequest, v0alpha.TransferWarmToAgentApproveReply](
			httpClient,
			baseURL+AcdTransferWarmToAgentApproveProcedure,
			opts...,
		),
		callerSendToVoicemail: connect_go.NewClient[v0alpha.CallerSendToVoicemailRequest, v0alpha.CallerSendToVoicemailReply](
			httpClient,
			baseURL+AcdCallerSendToVoicemailProcedure,
			opts...,
		),
		agentInviteTransferCallerToConference: connect_go.NewClient[v0alpha.AgentInviteTransferCallerToConferenceRequest, v0alpha.AgentInviteTransferCallerToConferenceReply](
			httpClient,
			baseURL+AcdAgentInviteTransferCallerToConferenceProcedure,
			opts...,
		),
		agentMonitorCalls: connect_go.NewClient[v0alpha.AgentMonitorCallsRequest, v0alpha.AgentMonitorCallsReply](
			httpClient,
			baseURL+AcdAgentMonitorCallsProcedure,
			opts...,
		),
		transferColdToOutbound: connect_go.NewClient[v0alpha.TransferColdToOutboundRequest, v0alpha.TransferColdToOutboundReply](
			httpClient,
			baseURL+AcdTransferColdToOutboundProcedure,
			opts...,
		),
		transferColdToAgent: connect_go.NewClient[v0alpha.TransferColdToAgentRequest, v0alpha.TransferColdToAgentReply](
			httpClient,
			baseURL+AcdTransferColdToAgentProcedure,
			opts...,
		),
		transferWarmToOutboundStart: connect_go.NewClient[v0alpha.TransferWarmToOutboundStartRequest, v0alpha.TransferWarmToOutboundStartReply](
			httpClient,
			baseURL+AcdTransferWarmToOutboundStartProcedure,
			opts...,
		),
		createWarmOutboundTransferMember: connect_go.NewClient[v0alpha.CreateWarmOutboundTransferMemberRequest, v0alpha.CreateWarmOutboundTransferMemberReply](
			httpClient,
			baseURL+AcdCreateWarmOutboundTransferMemberProcedure,
			opts...,
		),
		removeTransferMember: connect_go.NewClient[v0alpha.RemoveTransferMemberRequest, v0alpha.RemoveTransferMemberReply](
			httpClient,
			baseURL+AcdRemoveTransferMemberProcedure,
			opts...,
		),
		transferWarmToAgentStart: connect_go.NewClient[v0alpha.TransferWarmToAgentStartRequest, v0alpha.TransferWarmToAgentStartReply](
			httpClient,
			baseURL+AcdTransferWarmToAgentStartProcedure,
			opts...,
		),
		agentGetCallFromHold: connect_go.NewClient[v0alpha.AgentGetCallFromHoldRequest, v0alpha.AgentGetCallFromHoldReply](
			httpClient,
			baseURL+AcdAgentGetCallFromHoldProcedure,
			opts...,
		),
		agentGetSpecificCallFromHold: connect_go.NewClient[v0alpha.AgentGetSpecificCallFromHoldRequest, v0alpha.AgentGetSpecificCallFromHoldReply](
			httpClient,
			baseURL+AcdAgentGetSpecificCallFromHoldProcedure,
			opts...,
		),
		aCDGetAllAgentsStatuses: connect_go.NewClient[v0alpha.ACDGetAllAgentsStatusesRequest, v0alpha.ACDGetAllAgentsStatusesReply](
			httpClient,
			baseURL+AcdACDGetAllAgentsStatusesProcedure,
			opts...,
		),
		agentPutCallOnHold: connect_go.NewClient[v0alpha.AgentPutCallOnHoldRequest, v0alpha.AgentPutCallOnHoldReply](
			httpClient,
			baseURL+AcdAgentPutCallOnHoldProcedure,
			opts...,
		),
		agentReceiveMessage: connect_go.NewClient[v0alpha.AgentReceiveMessageRequest, v0alpha.AgentReceiveMessageReply](
			httpClient,
			baseURL+AcdAgentReceiveMessageProcedure,
			opts...,
		),
		agentPBXApproveCall: connect_go.NewClient[v0alpha.AgentPBXApproveCallRequest, v0alpha.AgentPBXApproveCallReply](
			httpClient,
			baseURL+AcdAgentPBXApproveCallProcedure,
			opts...,
		),
		agentPBXRejectCall: connect_go.NewClient[v0alpha.AgentPBXRejectCallRequest, v0alpha.AgentPBXRejectCallReply](
			httpClient,
			baseURL+AcdAgentPBXRejectCallProcedure,
			opts...,
		),
		getCallerLostPeer: connect_go.NewClient[v0alpha.GetCallerLostPeerRequest, v0alpha.GetCallerLostPeerReply](
			httpClient,
			baseURL+AcdGetCallerLostPeerProcedure,
			opts...,
		),
		callerGetRawEvent: connect_go.NewClient[v0alpha.CallerGetRawEventRequest, v0alpha.CallerGetRawEventReply](
			httpClient,
			baseURL+AcdCallerGetRawEventProcedure,
			opts...,
		),
		peerAgentWithCaller: connect_go.NewClient[v0alpha.PeerAgentWithCallerRequest, v0alpha.PeerAgentWithCallerReply](
			httpClient,
			baseURL+AcdPeerAgentWithCallerProcedure,
			opts...,
		),
		holdTransferMember: connect_go.NewClient[v0alpha.HoldTransferMemberReq, v0alpha.HoldTransferMemberRes](
			httpClient,
			baseURL+AcdHoldTransferMemberProcedure,
			opts...,
		),
		unholdTransferMember: connect_go.NewClient[v0alpha.UnholdTransferMemberReq, v0alpha.UnholdTransferMemberRes](
			httpClient,
			baseURL+AcdUnholdTransferMemberProcedure,
			opts...,
		),
		getAgentCallCounts: connect_go.NewClient[v0alpha.GetAgentCallCountsReq, v0alpha.GetAgentCallCountsRes](
			httpClient,
			baseURL+AcdGetAgentCallCountsProcedure,
			opts...,
		),
		warmCallerTransferStart: connect_go.NewClient[v0alpha.WarmCallerTransferStartReq, v0alpha.WarmCallerTransferStartRes](
			httpClient,
			baseURL+AcdWarmCallerTransferStartProcedure,
			opts...,
		),
		warmCallerTransferCancel: connect_go.NewClient[v0alpha.WarmCallerTransferCancelReq, v0alpha.WarmCallerTransferCancelRes](
			httpClient,
			baseURL+AcdWarmCallerTransferCancelProcedure,
			opts...,
		),
		warmCallerTransferApprove: connect_go.NewClient[v0alpha.WarmCallerTransferApproveReq, v0alpha.WarmCallerTransferApproveRes](
			httpClient,
			baseURL+AcdWarmCallerTransferApproveProcedure,
			opts...,
		),
		playSoundboardEntity: connect_go.NewClient[v0alpha.PlaySoundboardEntityReq, v0alpha.PlaySoundboardEntityRes](
			httpClient,
			baseURL+AcdPlaySoundboardEntityProcedure,
			opts...,
		),
		stopSoundboardEntity: connect_go.NewClient[v0alpha.StopSoundboardEntityReq, v0alpha.StopSoundboardEntityRes](
			httpClient,
			baseURL+AcdStopSoundboardEntityProcedure,
			opts...,
		),
		updateAgentSkills: connect_go.NewClient[v0alpha.UpdateAgentSkillsRequest, v0alpha.UpdateAgentSkillsReply](
			httpClient,
			baseURL+AcdUpdateAgentSkillsProcedure,
			opts...,
		),
		playDTMF: connect_go.NewClient[v0alpha.PlayDTMFRequest, v0alpha.PlayDTMFReply](
			httpClient,
			baseURL+AcdPlayDTMFProcedure,
			opts...,
		),
		agentMute: connect_go.NewClient[v0alpha.AgentMuteRequest, v0alpha.AgentMuteReply](
			httpClient,
			baseURL+AcdAgentMuteProcedure,
			opts...,
		),
		agentUnmute: connect_go.NewClient[v0alpha.AgentUnmuteRequest, v0alpha.AgentUnmuteReply](
			httpClient,
			baseURL+AcdAgentUnmuteProcedure,
			opts...,
		),
		startSecureForm: connect_go.NewClient[v0alpha.StartSecureFormReq, v0alpha.StartSecureFormRes](
			httpClient,
			baseURL+AcdStartSecureFormProcedure,
			opts...,
		),
		collectSecureFormField: connect_go.NewClient[v0alpha.CollectSecureFormFieldReq, v0alpha.CollectSecureFormFieldRes](
			httpClient,
			baseURL+AcdCollectSecureFormFieldProcedure,
			opts...,
		),
		resetSecureFormField: connect_go.NewClient[v0alpha.ResetSecureFormFieldReq, v0alpha.ResetSecureFormFieldRes](
			httpClient,
			baseURL+AcdResetSecureFormFieldProcedure,
			opts...,
		),
		acceptSecureFormField: connect_go.NewClient[v0alpha.AcceptSecureFormFieldReq, v0alpha.AcceptSecureFormFieldRes](
			httpClient,
			baseURL+AcdAcceptSecureFormFieldProcedure,
			opts...,
		),
		processSecureForm: connect_go.NewClient[v0alpha.ProcessSecureFormReq, v0alpha.ProcessSecureFormRes](
			httpClient,
			baseURL+AcdProcessSecureFormProcedure,
			opts...,
		),
		finishSecureFormHandling: connect_go.NewClient[v0alpha.FinishSecureFormHandlingReq, v0alpha.FinishSecureFormHandlingRes](
			httpClient,
			baseURL+AcdFinishSecureFormHandlingProcedure,
			opts...,
		),
	}
}

// acdClient implements AcdClient.
type acdClient struct {
	agentGetStatusStream                  *connect_go.Client[v0alpha.AgentGetStatusRequest, v0alpha.AgentGetStatusReply]
	agentGetStatus                        *connect_go.Client[v0alpha.AgentGetStatusRequest, v0alpha.AgentGetStatusReply]
	agentGetConnectedParty                *connect_go.Client[v0alpha.AgentGetConnectedPartyRequest, v0alpha.AgentGetConnectedPartyReply]
	managerAgentGetConnectedParty         *connect_go.Client[v0alpha.ManagerAgentGetConnectedPartyRequest, v0alpha.ManagerAgentGetConnectedPartyReply]
	agentIntercom                         *connect_go.Client[v0alpha.AgentIntercomRequest, v0alpha.AgentIntercomReply]
	agentIntercomAccept                   *connect_go.Client[v0alpha.AgentIntercomAcceptRequest, v0alpha.AgentIntercomAcceptReply]
	agentIntercomReject                   *connect_go.Client[v0alpha.AgentIntercomRejectRequest, v0alpha.AgentIntercomRejectReply]
	agentIntercomCancel                   *connect_go.Client[v0alpha.AgentIntercomCancelRequest, v0alpha.AgentIntercomCancelReply]
	dialManualPrepare                     *connect_go.Client[v0alpha.DialManualPrepareRequest, v0alpha.DialManualPrepareReply]
	dialManualCancel                      *connect_go.Client[v0alpha.DialManualCancelRequest, v0alpha.DialManualCancelReply]
	dialPreviewPrepare                    *connect_go.Client[v0alpha.DialPreviewPrepareRequest, v0alpha.DialPreviewPrepareReply]
	agentPause                            *connect_go.Client[v0alpha.AgentPauseRequest, v0alpha.AgentPauseReply]
	agentSetReady                         *connect_go.Client[v0alpha.AgentSetReadyRequest, v0alpha.AgentSetReadyReply]
	agentGUIBusy                          *connect_go.Client[v0alpha.AgentGUIBusyRequest, v0alpha.AgentGUIBusyReply]
	reportAgentSessionEvent               *connect_go.Client[v0alpha.AgentSessionEventReq, v0alpha.AgentSessionEventRes]
	callerRequeue                         *connect_go.Client[v0alpha.CallerRequeueRequest, v0alpha.CallerRequeueReply]
	agentDisconnect                       *connect_go.Client[v0alpha.AgentDisconnectRequest, v0alpha.AgentDisconnectReply]
	transferWarmToOutboundCancel          *connect_go.Client[v0alpha.TransferWarmToOutboundCancelRequest, v0alpha.TransferWarmToOutboundCancelReply]
	transferWarmToAgentCancel             *connect_go.Client[v0alpha.TransferWarmToAgentCancelRequest, v0alpha.TransferWarmToAgentCancelReply]
	transferWarmToOutboundApprove         *connect_go.Client[v0alpha.TransferWarmToOutboundApproveRequest, v0alpha.TransferWarmToOutboundApproveReply]
	transferWarmToAgentApprove            *connect_go.Client[v0alpha.TransferWarmToAgentApproveRequest, v0alpha.TransferWarmToAgentApproveReply]
	callerSendToVoicemail                 *connect_go.Client[v0alpha.CallerSendToVoicemailRequest, v0alpha.CallerSendToVoicemailReply]
	agentInviteTransferCallerToConference *connect_go.Client[v0alpha.AgentInviteTransferCallerToConferenceRequest, v0alpha.AgentInviteTransferCallerToConferenceReply]
	agentMonitorCalls                     *connect_go.Client[v0alpha.AgentMonitorCallsRequest, v0alpha.AgentMonitorCallsReply]
	transferColdToOutbound                *connect_go.Client[v0alpha.TransferColdToOutboundRequest, v0alpha.TransferColdToOutboundReply]
	transferColdToAgent                   *connect_go.Client[v0alpha.TransferColdToAgentRequest, v0alpha.TransferColdToAgentReply]
	transferWarmToOutboundStart           *connect_go.Client[v0alpha.TransferWarmToOutboundStartRequest, v0alpha.TransferWarmToOutboundStartReply]
	createWarmOutboundTransferMember      *connect_go.Client[v0alpha.CreateWarmOutboundTransferMemberRequest, v0alpha.CreateWarmOutboundTransferMemberReply]
	removeTransferMember                  *connect_go.Client[v0alpha.RemoveTransferMemberRequest, v0alpha.RemoveTransferMemberReply]
	transferWarmToAgentStart              *connect_go.Client[v0alpha.TransferWarmToAgentStartRequest, v0alpha.TransferWarmToAgentStartReply]
	agentGetCallFromHold                  *connect_go.Client[v0alpha.AgentGetCallFromHoldRequest, v0alpha.AgentGetCallFromHoldReply]
	agentGetSpecificCallFromHold          *connect_go.Client[v0alpha.AgentGetSpecificCallFromHoldRequest, v0alpha.AgentGetSpecificCallFromHoldReply]
	aCDGetAllAgentsStatuses               *connect_go.Client[v0alpha.ACDGetAllAgentsStatusesRequest, v0alpha.ACDGetAllAgentsStatusesReply]
	agentPutCallOnHold                    *connect_go.Client[v0alpha.AgentPutCallOnHoldRequest, v0alpha.AgentPutCallOnHoldReply]
	agentReceiveMessage                   *connect_go.Client[v0alpha.AgentReceiveMessageRequest, v0alpha.AgentReceiveMessageReply]
	agentPBXApproveCall                   *connect_go.Client[v0alpha.AgentPBXApproveCallRequest, v0alpha.AgentPBXApproveCallReply]
	agentPBXRejectCall                    *connect_go.Client[v0alpha.AgentPBXRejectCallRequest, v0alpha.AgentPBXRejectCallReply]
	getCallerLostPeer                     *connect_go.Client[v0alpha.GetCallerLostPeerRequest, v0alpha.GetCallerLostPeerReply]
	callerGetRawEvent                     *connect_go.Client[v0alpha.CallerGetRawEventRequest, v0alpha.CallerGetRawEventReply]
	peerAgentWithCaller                   *connect_go.Client[v0alpha.PeerAgentWithCallerRequest, v0alpha.PeerAgentWithCallerReply]
	holdTransferMember                    *connect_go.Client[v0alpha.HoldTransferMemberReq, v0alpha.HoldTransferMemberRes]
	unholdTransferMember                  *connect_go.Client[v0alpha.UnholdTransferMemberReq, v0alpha.UnholdTransferMemberRes]
	getAgentCallCounts                    *connect_go.Client[v0alpha.GetAgentCallCountsReq, v0alpha.GetAgentCallCountsRes]
	warmCallerTransferStart               *connect_go.Client[v0alpha.WarmCallerTransferStartReq, v0alpha.WarmCallerTransferStartRes]
	warmCallerTransferCancel              *connect_go.Client[v0alpha.WarmCallerTransferCancelReq, v0alpha.WarmCallerTransferCancelRes]
	warmCallerTransferApprove             *connect_go.Client[v0alpha.WarmCallerTransferApproveReq, v0alpha.WarmCallerTransferApproveRes]
	playSoundboardEntity                  *connect_go.Client[v0alpha.PlaySoundboardEntityReq, v0alpha.PlaySoundboardEntityRes]
	stopSoundboardEntity                  *connect_go.Client[v0alpha.StopSoundboardEntityReq, v0alpha.StopSoundboardEntityRes]
	updateAgentSkills                     *connect_go.Client[v0alpha.UpdateAgentSkillsRequest, v0alpha.UpdateAgentSkillsReply]
	playDTMF                              *connect_go.Client[v0alpha.PlayDTMFRequest, v0alpha.PlayDTMFReply]
	agentMute                             *connect_go.Client[v0alpha.AgentMuteRequest, v0alpha.AgentMuteReply]
	agentUnmute                           *connect_go.Client[v0alpha.AgentUnmuteRequest, v0alpha.AgentUnmuteReply]
	startSecureForm                       *connect_go.Client[v0alpha.StartSecureFormReq, v0alpha.StartSecureFormRes]
	collectSecureFormField                *connect_go.Client[v0alpha.CollectSecureFormFieldReq, v0alpha.CollectSecureFormFieldRes]
	resetSecureFormField                  *connect_go.Client[v0alpha.ResetSecureFormFieldReq, v0alpha.ResetSecureFormFieldRes]
	acceptSecureFormField                 *connect_go.Client[v0alpha.AcceptSecureFormFieldReq, v0alpha.AcceptSecureFormFieldRes]
	processSecureForm                     *connect_go.Client[v0alpha.ProcessSecureFormReq, v0alpha.ProcessSecureFormRes]
	finishSecureFormHandling              *connect_go.Client[v0alpha.FinishSecureFormHandlingReq, v0alpha.FinishSecureFormHandlingRes]
}

// AgentGetStatusStream calls api.v0alpha.Acd.AgentGetStatusStream.
func (c *acdClient) AgentGetStatusStream(ctx context.Context, req *connect_go.Request[v0alpha.AgentGetStatusRequest]) (*connect_go.ServerStreamForClient[v0alpha.AgentGetStatusReply], error) {
	return c.agentGetStatusStream.CallServerStream(ctx, req)
}

// AgentGetStatus calls api.v0alpha.Acd.AgentGetStatus.
func (c *acdClient) AgentGetStatus(ctx context.Context, req *connect_go.Request[v0alpha.AgentGetStatusRequest]) (*connect_go.Response[v0alpha.AgentGetStatusReply], error) {
	return c.agentGetStatus.CallUnary(ctx, req)
}

// AgentGetConnectedParty calls api.v0alpha.Acd.AgentGetConnectedParty.
func (c *acdClient) AgentGetConnectedParty(ctx context.Context, req *connect_go.Request[v0alpha.AgentGetConnectedPartyRequest]) (*connect_go.Response[v0alpha.AgentGetConnectedPartyReply], error) {
	return c.agentGetConnectedParty.CallUnary(ctx, req)
}

// ManagerAgentGetConnectedParty calls api.v0alpha.Acd.ManagerAgentGetConnectedParty.
func (c *acdClient) ManagerAgentGetConnectedParty(ctx context.Context, req *connect_go.Request[v0alpha.ManagerAgentGetConnectedPartyRequest]) (*connect_go.Response[v0alpha.ManagerAgentGetConnectedPartyReply], error) {
	return c.managerAgentGetConnectedParty.CallUnary(ctx, req)
}

// AgentIntercom calls api.v0alpha.Acd.AgentIntercom.
func (c *acdClient) AgentIntercom(ctx context.Context, req *connect_go.Request[v0alpha.AgentIntercomRequest]) (*connect_go.Response[v0alpha.AgentIntercomReply], error) {
	return c.agentIntercom.CallUnary(ctx, req)
}

// AgentIntercomAccept calls api.v0alpha.Acd.AgentIntercomAccept.
func (c *acdClient) AgentIntercomAccept(ctx context.Context, req *connect_go.Request[v0alpha.AgentIntercomAcceptRequest]) (*connect_go.Response[v0alpha.AgentIntercomAcceptReply], error) {
	return c.agentIntercomAccept.CallUnary(ctx, req)
}

// AgentIntercomReject calls api.v0alpha.Acd.AgentIntercomReject.
func (c *acdClient) AgentIntercomReject(ctx context.Context, req *connect_go.Request[v0alpha.AgentIntercomRejectRequest]) (*connect_go.Response[v0alpha.AgentIntercomRejectReply], error) {
	return c.agentIntercomReject.CallUnary(ctx, req)
}

// AgentIntercomCancel calls api.v0alpha.Acd.AgentIntercomCancel.
func (c *acdClient) AgentIntercomCancel(ctx context.Context, req *connect_go.Request[v0alpha.AgentIntercomCancelRequest]) (*connect_go.Response[v0alpha.AgentIntercomCancelReply], error) {
	return c.agentIntercomCancel.CallUnary(ctx, req)
}

// DialManualPrepare calls api.v0alpha.Acd.DialManualPrepare.
func (c *acdClient) DialManualPrepare(ctx context.Context, req *connect_go.Request[v0alpha.DialManualPrepareRequest]) (*connect_go.Response[v0alpha.DialManualPrepareReply], error) {
	return c.dialManualPrepare.CallUnary(ctx, req)
}

// DialManualCancel calls api.v0alpha.Acd.DialManualCancel.
func (c *acdClient) DialManualCancel(ctx context.Context, req *connect_go.Request[v0alpha.DialManualCancelRequest]) (*connect_go.Response[v0alpha.DialManualCancelReply], error) {
	return c.dialManualCancel.CallUnary(ctx, req)
}

// DialPreviewPrepare calls api.v0alpha.Acd.DialPreviewPrepare.
func (c *acdClient) DialPreviewPrepare(ctx context.Context, req *connect_go.Request[v0alpha.DialPreviewPrepareRequest]) (*connect_go.Response[v0alpha.DialPreviewPrepareReply], error) {
	return c.dialPreviewPrepare.CallUnary(ctx, req)
}

// AgentPause calls api.v0alpha.Acd.AgentPause.
func (c *acdClient) AgentPause(ctx context.Context, req *connect_go.Request[v0alpha.AgentPauseRequest]) (*connect_go.Response[v0alpha.AgentPauseReply], error) {
	return c.agentPause.CallUnary(ctx, req)
}

// AgentSetReady calls api.v0alpha.Acd.AgentSetReady.
func (c *acdClient) AgentSetReady(ctx context.Context, req *connect_go.Request[v0alpha.AgentSetReadyRequest]) (*connect_go.Response[v0alpha.AgentSetReadyReply], error) {
	return c.agentSetReady.CallUnary(ctx, req)
}

// AgentGUIBusy calls api.v0alpha.Acd.AgentGUIBusy.
func (c *acdClient) AgentGUIBusy(ctx context.Context, req *connect_go.Request[v0alpha.AgentGUIBusyRequest]) (*connect_go.Response[v0alpha.AgentGUIBusyReply], error) {
	return c.agentGUIBusy.CallUnary(ctx, req)
}

// ReportAgentSessionEvent calls api.v0alpha.Acd.ReportAgentSessionEvent.
func (c *acdClient) ReportAgentSessionEvent(ctx context.Context, req *connect_go.Request[v0alpha.AgentSessionEventReq]) (*connect_go.Response[v0alpha.AgentSessionEventRes], error) {
	return c.reportAgentSessionEvent.CallUnary(ctx, req)
}

// CallerRequeue calls api.v0alpha.Acd.CallerRequeue.
func (c *acdClient) CallerRequeue(ctx context.Context, req *connect_go.Request[v0alpha.CallerRequeueRequest]) (*connect_go.Response[v0alpha.CallerRequeueReply], error) {
	return c.callerRequeue.CallUnary(ctx, req)
}

// AgentDisconnect calls api.v0alpha.Acd.AgentDisconnect.
func (c *acdClient) AgentDisconnect(ctx context.Context, req *connect_go.Request[v0alpha.AgentDisconnectRequest]) (*connect_go.Response[v0alpha.AgentDisconnectReply], error) {
	return c.agentDisconnect.CallUnary(ctx, req)
}

// TransferWarmToOutboundCancel calls api.v0alpha.Acd.TransferWarmToOutboundCancel.
func (c *acdClient) TransferWarmToOutboundCancel(ctx context.Context, req *connect_go.Request[v0alpha.TransferWarmToOutboundCancelRequest]) (*connect_go.Response[v0alpha.TransferWarmToOutboundCancelReply], error) {
	return c.transferWarmToOutboundCancel.CallUnary(ctx, req)
}

// TransferWarmToAgentCancel calls api.v0alpha.Acd.TransferWarmToAgentCancel.
func (c *acdClient) TransferWarmToAgentCancel(ctx context.Context, req *connect_go.Request[v0alpha.TransferWarmToAgentCancelRequest]) (*connect_go.Response[v0alpha.TransferWarmToAgentCancelReply], error) {
	return c.transferWarmToAgentCancel.CallUnary(ctx, req)
}

// TransferWarmToOutboundApprove calls api.v0alpha.Acd.TransferWarmToOutboundApprove.
func (c *acdClient) TransferWarmToOutboundApprove(ctx context.Context, req *connect_go.Request[v0alpha.TransferWarmToOutboundApproveRequest]) (*connect_go.Response[v0alpha.TransferWarmToOutboundApproveReply], error) {
	return c.transferWarmToOutboundApprove.CallUnary(ctx, req)
}

// TransferWarmToAgentApprove calls api.v0alpha.Acd.TransferWarmToAgentApprove.
func (c *acdClient) TransferWarmToAgentApprove(ctx context.Context, req *connect_go.Request[v0alpha.TransferWarmToAgentApproveRequest]) (*connect_go.Response[v0alpha.TransferWarmToAgentApproveReply], error) {
	return c.transferWarmToAgentApprove.CallUnary(ctx, req)
}

// CallerSendToVoicemail calls api.v0alpha.Acd.CallerSendToVoicemail.
func (c *acdClient) CallerSendToVoicemail(ctx context.Context, req *connect_go.Request[v0alpha.CallerSendToVoicemailRequest]) (*connect_go.Response[v0alpha.CallerSendToVoicemailReply], error) {
	return c.callerSendToVoicemail.CallUnary(ctx, req)
}

// AgentInviteTransferCallerToConference calls
// api.v0alpha.Acd.AgentInviteTransferCallerToConference.
func (c *acdClient) AgentInviteTransferCallerToConference(ctx context.Context, req *connect_go.Request[v0alpha.AgentInviteTransferCallerToConferenceRequest]) (*connect_go.Response[v0alpha.AgentInviteTransferCallerToConferenceReply], error) {
	return c.agentInviteTransferCallerToConference.CallUnary(ctx, req)
}

// AgentMonitorCalls calls api.v0alpha.Acd.AgentMonitorCalls.
func (c *acdClient) AgentMonitorCalls(ctx context.Context, req *connect_go.Request[v0alpha.AgentMonitorCallsRequest]) (*connect_go.Response[v0alpha.AgentMonitorCallsReply], error) {
	return c.agentMonitorCalls.CallUnary(ctx, req)
}

// TransferColdToOutbound calls api.v0alpha.Acd.TransferColdToOutbound.
func (c *acdClient) TransferColdToOutbound(ctx context.Context, req *connect_go.Request[v0alpha.TransferColdToOutboundRequest]) (*connect_go.Response[v0alpha.TransferColdToOutboundReply], error) {
	return c.transferColdToOutbound.CallUnary(ctx, req)
}

// TransferColdToAgent calls api.v0alpha.Acd.TransferColdToAgent.
func (c *acdClient) TransferColdToAgent(ctx context.Context, req *connect_go.Request[v0alpha.TransferColdToAgentRequest]) (*connect_go.Response[v0alpha.TransferColdToAgentReply], error) {
	return c.transferColdToAgent.CallUnary(ctx, req)
}

// TransferWarmToOutboundStart calls api.v0alpha.Acd.TransferWarmToOutboundStart.
func (c *acdClient) TransferWarmToOutboundStart(ctx context.Context, req *connect_go.Request[v0alpha.TransferWarmToOutboundStartRequest]) (*connect_go.Response[v0alpha.TransferWarmToOutboundStartReply], error) {
	return c.transferWarmToOutboundStart.CallUnary(ctx, req)
}

// CreateWarmOutboundTransferMember calls api.v0alpha.Acd.CreateWarmOutboundTransferMember.
func (c *acdClient) CreateWarmOutboundTransferMember(ctx context.Context, req *connect_go.Request[v0alpha.CreateWarmOutboundTransferMemberRequest]) (*connect_go.Response[v0alpha.CreateWarmOutboundTransferMemberReply], error) {
	return c.createWarmOutboundTransferMember.CallUnary(ctx, req)
}

// RemoveTransferMember calls api.v0alpha.Acd.RemoveTransferMember.
func (c *acdClient) RemoveTransferMember(ctx context.Context, req *connect_go.Request[v0alpha.RemoveTransferMemberRequest]) (*connect_go.Response[v0alpha.RemoveTransferMemberReply], error) {
	return c.removeTransferMember.CallUnary(ctx, req)
}

// TransferWarmToAgentStart calls api.v0alpha.Acd.TransferWarmToAgentStart.
func (c *acdClient) TransferWarmToAgentStart(ctx context.Context, req *connect_go.Request[v0alpha.TransferWarmToAgentStartRequest]) (*connect_go.Response[v0alpha.TransferWarmToAgentStartReply], error) {
	return c.transferWarmToAgentStart.CallUnary(ctx, req)
}

// AgentGetCallFromHold calls api.v0alpha.Acd.AgentGetCallFromHold.
func (c *acdClient) AgentGetCallFromHold(ctx context.Context, req *connect_go.Request[v0alpha.AgentGetCallFromHoldRequest]) (*connect_go.Response[v0alpha.AgentGetCallFromHoldReply], error) {
	return c.agentGetCallFromHold.CallUnary(ctx, req)
}

// AgentGetSpecificCallFromHold calls api.v0alpha.Acd.AgentGetSpecificCallFromHold.
func (c *acdClient) AgentGetSpecificCallFromHold(ctx context.Context, req *connect_go.Request[v0alpha.AgentGetSpecificCallFromHoldRequest]) (*connect_go.Response[v0alpha.AgentGetSpecificCallFromHoldReply], error) {
	return c.agentGetSpecificCallFromHold.CallUnary(ctx, req)
}

// ACDGetAllAgentsStatuses calls api.v0alpha.Acd.ACDGetAllAgentsStatuses.
func (c *acdClient) ACDGetAllAgentsStatuses(ctx context.Context, req *connect_go.Request[v0alpha.ACDGetAllAgentsStatusesRequest]) (*connect_go.Response[v0alpha.ACDGetAllAgentsStatusesReply], error) {
	return c.aCDGetAllAgentsStatuses.CallUnary(ctx, req)
}

// AgentPutCallOnHold calls api.v0alpha.Acd.AgentPutCallOnHold.
func (c *acdClient) AgentPutCallOnHold(ctx context.Context, req *connect_go.Request[v0alpha.AgentPutCallOnHoldRequest]) (*connect_go.Response[v0alpha.AgentPutCallOnHoldReply], error) {
	return c.agentPutCallOnHold.CallUnary(ctx, req)
}

// AgentReceiveMessage calls api.v0alpha.Acd.AgentReceiveMessage.
func (c *acdClient) AgentReceiveMessage(ctx context.Context, req *connect_go.Request[v0alpha.AgentReceiveMessageRequest]) (*connect_go.Response[v0alpha.AgentReceiveMessageReply], error) {
	return c.agentReceiveMessage.CallUnary(ctx, req)
}

// AgentPBXApproveCall calls api.v0alpha.Acd.AgentPBXApproveCall.
func (c *acdClient) AgentPBXApproveCall(ctx context.Context, req *connect_go.Request[v0alpha.AgentPBXApproveCallRequest]) (*connect_go.Response[v0alpha.AgentPBXApproveCallReply], error) {
	return c.agentPBXApproveCall.CallUnary(ctx, req)
}

// AgentPBXRejectCall calls api.v0alpha.Acd.AgentPBXRejectCall.
func (c *acdClient) AgentPBXRejectCall(ctx context.Context, req *connect_go.Request[v0alpha.AgentPBXRejectCallRequest]) (*connect_go.Response[v0alpha.AgentPBXRejectCallReply], error) {
	return c.agentPBXRejectCall.CallUnary(ctx, req)
}

// GetCallerLostPeer calls api.v0alpha.Acd.GetCallerLostPeer.
func (c *acdClient) GetCallerLostPeer(ctx context.Context, req *connect_go.Request[v0alpha.GetCallerLostPeerRequest]) (*connect_go.Response[v0alpha.GetCallerLostPeerReply], error) {
	return c.getCallerLostPeer.CallUnary(ctx, req)
}

// CallerGetRawEvent calls api.v0alpha.Acd.CallerGetRawEvent.
func (c *acdClient) CallerGetRawEvent(ctx context.Context, req *connect_go.Request[v0alpha.CallerGetRawEventRequest]) (*connect_go.Response[v0alpha.CallerGetRawEventReply], error) {
	return c.callerGetRawEvent.CallUnary(ctx, req)
}

// PeerAgentWithCaller calls api.v0alpha.Acd.PeerAgentWithCaller.
func (c *acdClient) PeerAgentWithCaller(ctx context.Context, req *connect_go.Request[v0alpha.PeerAgentWithCallerRequest]) (*connect_go.Response[v0alpha.PeerAgentWithCallerReply], error) {
	return c.peerAgentWithCaller.CallUnary(ctx, req)
}

// HoldTransferMember calls api.v0alpha.Acd.HoldTransferMember.
func (c *acdClient) HoldTransferMember(ctx context.Context, req *connect_go.Request[v0alpha.HoldTransferMemberReq]) (*connect_go.Response[v0alpha.HoldTransferMemberRes], error) {
	return c.holdTransferMember.CallUnary(ctx, req)
}

// UnholdTransferMember calls api.v0alpha.Acd.UnholdTransferMember.
func (c *acdClient) UnholdTransferMember(ctx context.Context, req *connect_go.Request[v0alpha.UnholdTransferMemberReq]) (*connect_go.Response[v0alpha.UnholdTransferMemberRes], error) {
	return c.unholdTransferMember.CallUnary(ctx, req)
}

// GetAgentCallCounts calls api.v0alpha.Acd.GetAgentCallCounts.
func (c *acdClient) GetAgentCallCounts(ctx context.Context, req *connect_go.Request[v0alpha.GetAgentCallCountsReq]) (*connect_go.Response[v0alpha.GetAgentCallCountsRes], error) {
	return c.getAgentCallCounts.CallUnary(ctx, req)
}

// WarmCallerTransferStart calls api.v0alpha.Acd.WarmCallerTransferStart.
func (c *acdClient) WarmCallerTransferStart(ctx context.Context, req *connect_go.Request[v0alpha.WarmCallerTransferStartReq]) (*connect_go.Response[v0alpha.WarmCallerTransferStartRes], error) {
	return c.warmCallerTransferStart.CallUnary(ctx, req)
}

// WarmCallerTransferCancel calls api.v0alpha.Acd.WarmCallerTransferCancel.
func (c *acdClient) WarmCallerTransferCancel(ctx context.Context, req *connect_go.Request[v0alpha.WarmCallerTransferCancelReq]) (*connect_go.Response[v0alpha.WarmCallerTransferCancelRes], error) {
	return c.warmCallerTransferCancel.CallUnary(ctx, req)
}

// WarmCallerTransferApprove calls api.v0alpha.Acd.WarmCallerTransferApprove.
func (c *acdClient) WarmCallerTransferApprove(ctx context.Context, req *connect_go.Request[v0alpha.WarmCallerTransferApproveReq]) (*connect_go.Response[v0alpha.WarmCallerTransferApproveRes], error) {
	return c.warmCallerTransferApprove.CallUnary(ctx, req)
}

// PlaySoundboardEntity calls api.v0alpha.Acd.PlaySoundboardEntity.
func (c *acdClient) PlaySoundboardEntity(ctx context.Context, req *connect_go.Request[v0alpha.PlaySoundboardEntityReq]) (*connect_go.Response[v0alpha.PlaySoundboardEntityRes], error) {
	return c.playSoundboardEntity.CallUnary(ctx, req)
}

// StopSoundboardEntity calls api.v0alpha.Acd.StopSoundboardEntity.
func (c *acdClient) StopSoundboardEntity(ctx context.Context, req *connect_go.Request[v0alpha.StopSoundboardEntityReq]) (*connect_go.Response[v0alpha.StopSoundboardEntityRes], error) {
	return c.stopSoundboardEntity.CallUnary(ctx, req)
}

// UpdateAgentSkills calls api.v0alpha.Acd.UpdateAgentSkills.
func (c *acdClient) UpdateAgentSkills(ctx context.Context, req *connect_go.Request[v0alpha.UpdateAgentSkillsRequest]) (*connect_go.Response[v0alpha.UpdateAgentSkillsReply], error) {
	return c.updateAgentSkills.CallUnary(ctx, req)
}

// PlayDTMF calls api.v0alpha.Acd.PlayDTMF.
func (c *acdClient) PlayDTMF(ctx context.Context, req *connect_go.Request[v0alpha.PlayDTMFRequest]) (*connect_go.Response[v0alpha.PlayDTMFReply], error) {
	return c.playDTMF.CallUnary(ctx, req)
}

// AgentMute calls api.v0alpha.Acd.AgentMute.
func (c *acdClient) AgentMute(ctx context.Context, req *connect_go.Request[v0alpha.AgentMuteRequest]) (*connect_go.Response[v0alpha.AgentMuteReply], error) {
	return c.agentMute.CallUnary(ctx, req)
}

// AgentUnmute calls api.v0alpha.Acd.AgentUnmute.
func (c *acdClient) AgentUnmute(ctx context.Context, req *connect_go.Request[v0alpha.AgentUnmuteRequest]) (*connect_go.Response[v0alpha.AgentUnmuteReply], error) {
	return c.agentUnmute.CallUnary(ctx, req)
}

// StartSecureForm calls api.v0alpha.Acd.StartSecureForm.
func (c *acdClient) StartSecureForm(ctx context.Context, req *connect_go.Request[v0alpha.StartSecureFormReq]) (*connect_go.Response[v0alpha.StartSecureFormRes], error) {
	return c.startSecureForm.CallUnary(ctx, req)
}

// CollectSecureFormField calls api.v0alpha.Acd.CollectSecureFormField.
func (c *acdClient) CollectSecureFormField(ctx context.Context, req *connect_go.Request[v0alpha.CollectSecureFormFieldReq]) (*connect_go.ServerStreamForClient[v0alpha.CollectSecureFormFieldRes], error) {
	return c.collectSecureFormField.CallServerStream(ctx, req)
}

// ResetSecureFormField calls api.v0alpha.Acd.ResetSecureFormField.
func (c *acdClient) ResetSecureFormField(ctx context.Context, req *connect_go.Request[v0alpha.ResetSecureFormFieldReq]) (*connect_go.Response[v0alpha.ResetSecureFormFieldRes], error) {
	return c.resetSecureFormField.CallUnary(ctx, req)
}

// AcceptSecureFormField calls api.v0alpha.Acd.AcceptSecureFormField.
func (c *acdClient) AcceptSecureFormField(ctx context.Context, req *connect_go.Request[v0alpha.AcceptSecureFormFieldReq]) (*connect_go.Response[v0alpha.AcceptSecureFormFieldRes], error) {
	return c.acceptSecureFormField.CallUnary(ctx, req)
}

// ProcessSecureForm calls api.v0alpha.Acd.ProcessSecureForm.
func (c *acdClient) ProcessSecureForm(ctx context.Context, req *connect_go.Request[v0alpha.ProcessSecureFormReq]) (*connect_go.Response[v0alpha.ProcessSecureFormRes], error) {
	return c.processSecureForm.CallUnary(ctx, req)
}

// FinishSecureFormHandling calls api.v0alpha.Acd.FinishSecureFormHandling.
func (c *acdClient) FinishSecureFormHandling(ctx context.Context, req *connect_go.Request[v0alpha.FinishSecureFormHandlingReq]) (*connect_go.Response[v0alpha.FinishSecureFormHandlingRes], error) {
	return c.finishSecureFormHandling.CallUnary(ctx, req)
}

// AcdHandler is an implementation of the api.v0alpha.Acd service.
type AcdHandler interface {
	AgentGetStatusStream(context.Context, *connect_go.Request[v0alpha.AgentGetStatusRequest], *connect_go.ServerStream[v0alpha.AgentGetStatusReply]) error
	AgentGetStatus(context.Context, *connect_go.Request[v0alpha.AgentGetStatusRequest]) (*connect_go.Response[v0alpha.AgentGetStatusReply], error)
	AgentGetConnectedParty(context.Context, *connect_go.Request[v0alpha.AgentGetConnectedPartyRequest]) (*connect_go.Response[v0alpha.AgentGetConnectedPartyReply], error)
	ManagerAgentGetConnectedParty(context.Context, *connect_go.Request[v0alpha.ManagerAgentGetConnectedPartyRequest]) (*connect_go.Response[v0alpha.ManagerAgentGetConnectedPartyReply], error)
	AgentIntercom(context.Context, *connect_go.Request[v0alpha.AgentIntercomRequest]) (*connect_go.Response[v0alpha.AgentIntercomReply], error)
	AgentIntercomAccept(context.Context, *connect_go.Request[v0alpha.AgentIntercomAcceptRequest]) (*connect_go.Response[v0alpha.AgentIntercomAcceptReply], error)
	AgentIntercomReject(context.Context, *connect_go.Request[v0alpha.AgentIntercomRejectRequest]) (*connect_go.Response[v0alpha.AgentIntercomRejectReply], error)
	AgentIntercomCancel(context.Context, *connect_go.Request[v0alpha.AgentIntercomCancelRequest]) (*connect_go.Response[v0alpha.AgentIntercomCancelReply], error)
	DialManualPrepare(context.Context, *connect_go.Request[v0alpha.DialManualPrepareRequest]) (*connect_go.Response[v0alpha.DialManualPrepareReply], error)
	DialManualCancel(context.Context, *connect_go.Request[v0alpha.DialManualCancelRequest]) (*connect_go.Response[v0alpha.DialManualCancelReply], error)
	DialPreviewPrepare(context.Context, *connect_go.Request[v0alpha.DialPreviewPrepareRequest]) (*connect_go.Response[v0alpha.DialPreviewPrepareReply], error)
	AgentPause(context.Context, *connect_go.Request[v0alpha.AgentPauseRequest]) (*connect_go.Response[v0alpha.AgentPauseReply], error)
	AgentSetReady(context.Context, *connect_go.Request[v0alpha.AgentSetReadyRequest]) (*connect_go.Response[v0alpha.AgentSetReadyReply], error)
	AgentGUIBusy(context.Context, *connect_go.Request[v0alpha.AgentGUIBusyRequest]) (*connect_go.Response[v0alpha.AgentGUIBusyReply], error)
	ReportAgentSessionEvent(context.Context, *connect_go.Request[v0alpha.AgentSessionEventReq]) (*connect_go.Response[v0alpha.AgentSessionEventRes], error)
	CallerRequeue(context.Context, *connect_go.Request[v0alpha.CallerRequeueRequest]) (*connect_go.Response[v0alpha.CallerRequeueReply], error)
	AgentDisconnect(context.Context, *connect_go.Request[v0alpha.AgentDisconnectRequest]) (*connect_go.Response[v0alpha.AgentDisconnectReply], error)
	TransferWarmToOutboundCancel(context.Context, *connect_go.Request[v0alpha.TransferWarmToOutboundCancelRequest]) (*connect_go.Response[v0alpha.TransferWarmToOutboundCancelReply], error)
	TransferWarmToAgentCancel(context.Context, *connect_go.Request[v0alpha.TransferWarmToAgentCancelRequest]) (*connect_go.Response[v0alpha.TransferWarmToAgentCancelReply], error)
	TransferWarmToOutboundApprove(context.Context, *connect_go.Request[v0alpha.TransferWarmToOutboundApproveRequest]) (*connect_go.Response[v0alpha.TransferWarmToOutboundApproveReply], error)
	TransferWarmToAgentApprove(context.Context, *connect_go.Request[v0alpha.TransferWarmToAgentApproveRequest]) (*connect_go.Response[v0alpha.TransferWarmToAgentApproveReply], error)
	CallerSendToVoicemail(context.Context, *connect_go.Request[v0alpha.CallerSendToVoicemailRequest]) (*connect_go.Response[v0alpha.CallerSendToVoicemailReply], error)
	AgentInviteTransferCallerToConference(context.Context, *connect_go.Request[v0alpha.AgentInviteTransferCallerToConferenceRequest]) (*connect_go.Response[v0alpha.AgentInviteTransferCallerToConferenceReply], error)
	AgentMonitorCalls(context.Context, *connect_go.Request[v0alpha.AgentMonitorCallsRequest]) (*connect_go.Response[v0alpha.AgentMonitorCallsReply], error)
	TransferColdToOutbound(context.Context, *connect_go.Request[v0alpha.TransferColdToOutboundRequest]) (*connect_go.Response[v0alpha.TransferColdToOutboundReply], error)
	TransferColdToAgent(context.Context, *connect_go.Request[v0alpha.TransferColdToAgentRequest]) (*connect_go.Response[v0alpha.TransferColdToAgentReply], error)
	TransferWarmToOutboundStart(context.Context, *connect_go.Request[v0alpha.TransferWarmToOutboundStartRequest]) (*connect_go.Response[v0alpha.TransferWarmToOutboundStartReply], error)
	// creates a new outbound transfer member using the given src/dst numbers
	CreateWarmOutboundTransferMember(context.Context, *connect_go.Request[v0alpha.CreateWarmOutboundTransferMemberRequest]) (*connect_go.Response[v0alpha.CreateWarmOutboundTransferMemberReply], error)
	// hangups a transfer member using the given member identifier
	RemoveTransferMember(context.Context, *connect_go.Request[v0alpha.RemoveTransferMemberRequest]) (*connect_go.Response[v0alpha.RemoveTransferMemberReply], error)
	TransferWarmToAgentStart(context.Context, *connect_go.Request[v0alpha.TransferWarmToAgentStartRequest]) (*connect_go.Response[v0alpha.TransferWarmToAgentStartReply], error)
	AgentGetCallFromHold(context.Context, *connect_go.Request[v0alpha.AgentGetCallFromHoldRequest]) (*connect_go.Response[v0alpha.AgentGetCallFromHoldReply], error)
	AgentGetSpecificCallFromHold(context.Context, *connect_go.Request[v0alpha.AgentGetSpecificCallFromHoldRequest]) (*connect_go.Response[v0alpha.AgentGetSpecificCallFromHoldReply], error)
	ACDGetAllAgentsStatuses(context.Context, *connect_go.Request[v0alpha.ACDGetAllAgentsStatusesRequest]) (*connect_go.Response[v0alpha.ACDGetAllAgentsStatusesReply], error)
	AgentPutCallOnHold(context.Context, *connect_go.Request[v0alpha.AgentPutCallOnHoldRequest]) (*connect_go.Response[v0alpha.AgentPutCallOnHoldReply], error)
	AgentReceiveMessage(context.Context, *connect_go.Request[v0alpha.AgentReceiveMessageRequest]) (*connect_go.Response[v0alpha.AgentReceiveMessageReply], error)
	AgentPBXApproveCall(context.Context, *connect_go.Request[v0alpha.AgentPBXApproveCallRequest]) (*connect_go.Response[v0alpha.AgentPBXApproveCallReply], error)
	AgentPBXRejectCall(context.Context, *connect_go.Request[v0alpha.AgentPBXRejectCallRequest]) (*connect_go.Response[v0alpha.AgentPBXRejectCallReply], error)
	GetCallerLostPeer(context.Context, *connect_go.Request[v0alpha.GetCallerLostPeerRequest]) (*connect_go.Response[v0alpha.GetCallerLostPeerReply], error)
	CallerGetRawEvent(context.Context, *connect_go.Request[v0alpha.CallerGetRawEventRequest]) (*connect_go.Response[v0alpha.CallerGetRawEventReply], error)
	PeerAgentWithCaller(context.Context, *connect_go.Request[v0alpha.PeerAgentWithCallerRequest]) (*connect_go.Response[v0alpha.PeerAgentWithCallerReply], error)
	HoldTransferMember(context.Context, *connect_go.Request[v0alpha.HoldTransferMemberReq]) (*connect_go.Response[v0alpha.HoldTransferMemberRes], error)
	UnholdTransferMember(context.Context, *connect_go.Request[v0alpha.UnholdTransferMemberReq]) (*connect_go.Response[v0alpha.UnholdTransferMemberRes], error)
	GetAgentCallCounts(context.Context, *connect_go.Request[v0alpha.GetAgentCallCountsReq]) (*connect_go.Response[v0alpha.GetAgentCallCountsRes], error)
	// endpoint used to start a warm caller transfer
	WarmCallerTransferStart(context.Context, *connect_go.Request[v0alpha.WarmCallerTransferStartReq]) (*connect_go.Response[v0alpha.WarmCallerTransferStartRes], error)
	// endpoint used to cancel a warm caller transfer
	WarmCallerTransferCancel(context.Context, *connect_go.Request[v0alpha.WarmCallerTransferCancelReq]) (*connect_go.Response[v0alpha.WarmCallerTransferCancelRes], error)
	// endpoint used to approve a warm caller transfer
	WarmCallerTransferApprove(context.Context, *connect_go.Request[v0alpha.WarmCallerTransferApproveReq]) (*connect_go.Response[v0alpha.WarmCallerTransferApproveRes], error)
	// endpoint used to play a soundboard file for a customer
	PlaySoundboardEntity(context.Context, *connect_go.Request[v0alpha.PlaySoundboardEntityReq]) (*connect_go.Response[v0alpha.PlaySoundboardEntityRes], error)
	// endpoint used to stop a soundboard file for a customer
	StopSoundboardEntity(context.Context, *connect_go.Request[v0alpha.StopSoundboardEntityReq]) (*connect_go.Response[v0alpha.StopSoundboardEntityRes], error)
	// endpoint used to update an agent's skills
	UpdateAgentSkills(context.Context, *connect_go.Request[v0alpha.UpdateAgentSkillsRequest]) (*connect_go.Response[v0alpha.UpdateAgentSkillsReply], error)
	// endpoint used to play a dtmf tone to all members of a the agent's conference
	PlayDTMF(context.Context, *connect_go.Request[v0alpha.PlayDTMFRequest]) (*connect_go.Response[v0alpha.PlayDTMFReply], error)
	// endpoint used to mute and agent's mic
	AgentMute(context.Context, *connect_go.Request[v0alpha.AgentMuteRequest]) (*connect_go.Response[v0alpha.AgentMuteReply], error)
	// endpoint used to unmute and agent's mic
	AgentUnmute(context.Context, *connect_go.Request[v0alpha.AgentUnmuteRequest]) (*connect_go.Response[v0alpha.AgentUnmuteReply], error)
	StartSecureForm(context.Context, *connect_go.Request[v0alpha.StartSecureFormReq]) (*connect_go.Response[v0alpha.StartSecureFormRes], error)
	CollectSecureFormField(context.Context, *connect_go.Request[v0alpha.CollectSecureFormFieldReq], *connect_go.ServerStream[v0alpha.CollectSecureFormFieldRes]) error
	ResetSecureFormField(context.Context, *connect_go.Request[v0alpha.ResetSecureFormFieldReq]) (*connect_go.Response[v0alpha.ResetSecureFormFieldRes], error)
	AcceptSecureFormField(context.Context, *connect_go.Request[v0alpha.AcceptSecureFormFieldReq]) (*connect_go.Response[v0alpha.AcceptSecureFormFieldRes], error)
	ProcessSecureForm(context.Context, *connect_go.Request[v0alpha.ProcessSecureFormReq]) (*connect_go.Response[v0alpha.ProcessSecureFormRes], error)
	FinishSecureFormHandling(context.Context, *connect_go.Request[v0alpha.FinishSecureFormHandlingReq]) (*connect_go.Response[v0alpha.FinishSecureFormHandlingRes], error)
}

// NewAcdHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAcdHandler(svc AcdHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	acdAgentGetStatusStreamHandler := connect_go.NewServerStreamHandler(
		AcdAgentGetStatusStreamProcedure,
		svc.AgentGetStatusStream,
		opts...,
	)
	acdAgentGetStatusHandler := connect_go.NewUnaryHandler(
		AcdAgentGetStatusProcedure,
		svc.AgentGetStatus,
		opts...,
	)
	acdAgentGetConnectedPartyHandler := connect_go.NewUnaryHandler(
		AcdAgentGetConnectedPartyProcedure,
		svc.AgentGetConnectedParty,
		opts...,
	)
	acdManagerAgentGetConnectedPartyHandler := connect_go.NewUnaryHandler(
		AcdManagerAgentGetConnectedPartyProcedure,
		svc.ManagerAgentGetConnectedParty,
		opts...,
	)
	acdAgentIntercomHandler := connect_go.NewUnaryHandler(
		AcdAgentIntercomProcedure,
		svc.AgentIntercom,
		opts...,
	)
	acdAgentIntercomAcceptHandler := connect_go.NewUnaryHandler(
		AcdAgentIntercomAcceptProcedure,
		svc.AgentIntercomAccept,
		opts...,
	)
	acdAgentIntercomRejectHandler := connect_go.NewUnaryHandler(
		AcdAgentIntercomRejectProcedure,
		svc.AgentIntercomReject,
		opts...,
	)
	acdAgentIntercomCancelHandler := connect_go.NewUnaryHandler(
		AcdAgentIntercomCancelProcedure,
		svc.AgentIntercomCancel,
		opts...,
	)
	acdDialManualPrepareHandler := connect_go.NewUnaryHandler(
		AcdDialManualPrepareProcedure,
		svc.DialManualPrepare,
		opts...,
	)
	acdDialManualCancelHandler := connect_go.NewUnaryHandler(
		AcdDialManualCancelProcedure,
		svc.DialManualCancel,
		opts...,
	)
	acdDialPreviewPrepareHandler := connect_go.NewUnaryHandler(
		AcdDialPreviewPrepareProcedure,
		svc.DialPreviewPrepare,
		opts...,
	)
	acdAgentPauseHandler := connect_go.NewUnaryHandler(
		AcdAgentPauseProcedure,
		svc.AgentPause,
		opts...,
	)
	acdAgentSetReadyHandler := connect_go.NewUnaryHandler(
		AcdAgentSetReadyProcedure,
		svc.AgentSetReady,
		opts...,
	)
	acdAgentGUIBusyHandler := connect_go.NewUnaryHandler(
		AcdAgentGUIBusyProcedure,
		svc.AgentGUIBusy,
		opts...,
	)
	acdReportAgentSessionEventHandler := connect_go.NewUnaryHandler(
		AcdReportAgentSessionEventProcedure,
		svc.ReportAgentSessionEvent,
		opts...,
	)
	acdCallerRequeueHandler := connect_go.NewUnaryHandler(
		AcdCallerRequeueProcedure,
		svc.CallerRequeue,
		opts...,
	)
	acdAgentDisconnectHandler := connect_go.NewUnaryHandler(
		AcdAgentDisconnectProcedure,
		svc.AgentDisconnect,
		opts...,
	)
	acdTransferWarmToOutboundCancelHandler := connect_go.NewUnaryHandler(
		AcdTransferWarmToOutboundCancelProcedure,
		svc.TransferWarmToOutboundCancel,
		opts...,
	)
	acdTransferWarmToAgentCancelHandler := connect_go.NewUnaryHandler(
		AcdTransferWarmToAgentCancelProcedure,
		svc.TransferWarmToAgentCancel,
		opts...,
	)
	acdTransferWarmToOutboundApproveHandler := connect_go.NewUnaryHandler(
		AcdTransferWarmToOutboundApproveProcedure,
		svc.TransferWarmToOutboundApprove,
		opts...,
	)
	acdTransferWarmToAgentApproveHandler := connect_go.NewUnaryHandler(
		AcdTransferWarmToAgentApproveProcedure,
		svc.TransferWarmToAgentApprove,
		opts...,
	)
	acdCallerSendToVoicemailHandler := connect_go.NewUnaryHandler(
		AcdCallerSendToVoicemailProcedure,
		svc.CallerSendToVoicemail,
		opts...,
	)
	acdAgentInviteTransferCallerToConferenceHandler := connect_go.NewUnaryHandler(
		AcdAgentInviteTransferCallerToConferenceProcedure,
		svc.AgentInviteTransferCallerToConference,
		opts...,
	)
	acdAgentMonitorCallsHandler := connect_go.NewUnaryHandler(
		AcdAgentMonitorCallsProcedure,
		svc.AgentMonitorCalls,
		opts...,
	)
	acdTransferColdToOutboundHandler := connect_go.NewUnaryHandler(
		AcdTransferColdToOutboundProcedure,
		svc.TransferColdToOutbound,
		opts...,
	)
	acdTransferColdToAgentHandler := connect_go.NewUnaryHandler(
		AcdTransferColdToAgentProcedure,
		svc.TransferColdToAgent,
		opts...,
	)
	acdTransferWarmToOutboundStartHandler := connect_go.NewUnaryHandler(
		AcdTransferWarmToOutboundStartProcedure,
		svc.TransferWarmToOutboundStart,
		opts...,
	)
	acdCreateWarmOutboundTransferMemberHandler := connect_go.NewUnaryHandler(
		AcdCreateWarmOutboundTransferMemberProcedure,
		svc.CreateWarmOutboundTransferMember,
		opts...,
	)
	acdRemoveTransferMemberHandler := connect_go.NewUnaryHandler(
		AcdRemoveTransferMemberProcedure,
		svc.RemoveTransferMember,
		opts...,
	)
	acdTransferWarmToAgentStartHandler := connect_go.NewUnaryHandler(
		AcdTransferWarmToAgentStartProcedure,
		svc.TransferWarmToAgentStart,
		opts...,
	)
	acdAgentGetCallFromHoldHandler := connect_go.NewUnaryHandler(
		AcdAgentGetCallFromHoldProcedure,
		svc.AgentGetCallFromHold,
		opts...,
	)
	acdAgentGetSpecificCallFromHoldHandler := connect_go.NewUnaryHandler(
		AcdAgentGetSpecificCallFromHoldProcedure,
		svc.AgentGetSpecificCallFromHold,
		opts...,
	)
	acdACDGetAllAgentsStatusesHandler := connect_go.NewUnaryHandler(
		AcdACDGetAllAgentsStatusesProcedure,
		svc.ACDGetAllAgentsStatuses,
		opts...,
	)
	acdAgentPutCallOnHoldHandler := connect_go.NewUnaryHandler(
		AcdAgentPutCallOnHoldProcedure,
		svc.AgentPutCallOnHold,
		opts...,
	)
	acdAgentReceiveMessageHandler := connect_go.NewUnaryHandler(
		AcdAgentReceiveMessageProcedure,
		svc.AgentReceiveMessage,
		opts...,
	)
	acdAgentPBXApproveCallHandler := connect_go.NewUnaryHandler(
		AcdAgentPBXApproveCallProcedure,
		svc.AgentPBXApproveCall,
		opts...,
	)
	acdAgentPBXRejectCallHandler := connect_go.NewUnaryHandler(
		AcdAgentPBXRejectCallProcedure,
		svc.AgentPBXRejectCall,
		opts...,
	)
	acdGetCallerLostPeerHandler := connect_go.NewUnaryHandler(
		AcdGetCallerLostPeerProcedure,
		svc.GetCallerLostPeer,
		opts...,
	)
	acdCallerGetRawEventHandler := connect_go.NewUnaryHandler(
		AcdCallerGetRawEventProcedure,
		svc.CallerGetRawEvent,
		opts...,
	)
	acdPeerAgentWithCallerHandler := connect_go.NewUnaryHandler(
		AcdPeerAgentWithCallerProcedure,
		svc.PeerAgentWithCaller,
		opts...,
	)
	acdHoldTransferMemberHandler := connect_go.NewUnaryHandler(
		AcdHoldTransferMemberProcedure,
		svc.HoldTransferMember,
		opts...,
	)
	acdUnholdTransferMemberHandler := connect_go.NewUnaryHandler(
		AcdUnholdTransferMemberProcedure,
		svc.UnholdTransferMember,
		opts...,
	)
	acdGetAgentCallCountsHandler := connect_go.NewUnaryHandler(
		AcdGetAgentCallCountsProcedure,
		svc.GetAgentCallCounts,
		opts...,
	)
	acdWarmCallerTransferStartHandler := connect_go.NewUnaryHandler(
		AcdWarmCallerTransferStartProcedure,
		svc.WarmCallerTransferStart,
		opts...,
	)
	acdWarmCallerTransferCancelHandler := connect_go.NewUnaryHandler(
		AcdWarmCallerTransferCancelProcedure,
		svc.WarmCallerTransferCancel,
		opts...,
	)
	acdWarmCallerTransferApproveHandler := connect_go.NewUnaryHandler(
		AcdWarmCallerTransferApproveProcedure,
		svc.WarmCallerTransferApprove,
		opts...,
	)
	acdPlaySoundboardEntityHandler := connect_go.NewUnaryHandler(
		AcdPlaySoundboardEntityProcedure,
		svc.PlaySoundboardEntity,
		opts...,
	)
	acdStopSoundboardEntityHandler := connect_go.NewUnaryHandler(
		AcdStopSoundboardEntityProcedure,
		svc.StopSoundboardEntity,
		opts...,
	)
	acdUpdateAgentSkillsHandler := connect_go.NewUnaryHandler(
		AcdUpdateAgentSkillsProcedure,
		svc.UpdateAgentSkills,
		opts...,
	)
	acdPlayDTMFHandler := connect_go.NewUnaryHandler(
		AcdPlayDTMFProcedure,
		svc.PlayDTMF,
		opts...,
	)
	acdAgentMuteHandler := connect_go.NewUnaryHandler(
		AcdAgentMuteProcedure,
		svc.AgentMute,
		opts...,
	)
	acdAgentUnmuteHandler := connect_go.NewUnaryHandler(
		AcdAgentUnmuteProcedure,
		svc.AgentUnmute,
		opts...,
	)
	acdStartSecureFormHandler := connect_go.NewUnaryHandler(
		AcdStartSecureFormProcedure,
		svc.StartSecureForm,
		opts...,
	)
	acdCollectSecureFormFieldHandler := connect_go.NewServerStreamHandler(
		AcdCollectSecureFormFieldProcedure,
		svc.CollectSecureFormField,
		opts...,
	)
	acdResetSecureFormFieldHandler := connect_go.NewUnaryHandler(
		AcdResetSecureFormFieldProcedure,
		svc.ResetSecureFormField,
		opts...,
	)
	acdAcceptSecureFormFieldHandler := connect_go.NewUnaryHandler(
		AcdAcceptSecureFormFieldProcedure,
		svc.AcceptSecureFormField,
		opts...,
	)
	acdProcessSecureFormHandler := connect_go.NewUnaryHandler(
		AcdProcessSecureFormProcedure,
		svc.ProcessSecureForm,
		opts...,
	)
	acdFinishSecureFormHandlingHandler := connect_go.NewUnaryHandler(
		AcdFinishSecureFormHandlingProcedure,
		svc.FinishSecureFormHandling,
		opts...,
	)
	return "/api.v0alpha.Acd/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AcdAgentGetStatusStreamProcedure:
			acdAgentGetStatusStreamHandler.ServeHTTP(w, r)
		case AcdAgentGetStatusProcedure:
			acdAgentGetStatusHandler.ServeHTTP(w, r)
		case AcdAgentGetConnectedPartyProcedure:
			acdAgentGetConnectedPartyHandler.ServeHTTP(w, r)
		case AcdManagerAgentGetConnectedPartyProcedure:
			acdManagerAgentGetConnectedPartyHandler.ServeHTTP(w, r)
		case AcdAgentIntercomProcedure:
			acdAgentIntercomHandler.ServeHTTP(w, r)
		case AcdAgentIntercomAcceptProcedure:
			acdAgentIntercomAcceptHandler.ServeHTTP(w, r)
		case AcdAgentIntercomRejectProcedure:
			acdAgentIntercomRejectHandler.ServeHTTP(w, r)
		case AcdAgentIntercomCancelProcedure:
			acdAgentIntercomCancelHandler.ServeHTTP(w, r)
		case AcdDialManualPrepareProcedure:
			acdDialManualPrepareHandler.ServeHTTP(w, r)
		case AcdDialManualCancelProcedure:
			acdDialManualCancelHandler.ServeHTTP(w, r)
		case AcdDialPreviewPrepareProcedure:
			acdDialPreviewPrepareHandler.ServeHTTP(w, r)
		case AcdAgentPauseProcedure:
			acdAgentPauseHandler.ServeHTTP(w, r)
		case AcdAgentSetReadyProcedure:
			acdAgentSetReadyHandler.ServeHTTP(w, r)
		case AcdAgentGUIBusyProcedure:
			acdAgentGUIBusyHandler.ServeHTTP(w, r)
		case AcdReportAgentSessionEventProcedure:
			acdReportAgentSessionEventHandler.ServeHTTP(w, r)
		case AcdCallerRequeueProcedure:
			acdCallerRequeueHandler.ServeHTTP(w, r)
		case AcdAgentDisconnectProcedure:
			acdAgentDisconnectHandler.ServeHTTP(w, r)
		case AcdTransferWarmToOutboundCancelProcedure:
			acdTransferWarmToOutboundCancelHandler.ServeHTTP(w, r)
		case AcdTransferWarmToAgentCancelProcedure:
			acdTransferWarmToAgentCancelHandler.ServeHTTP(w, r)
		case AcdTransferWarmToOutboundApproveProcedure:
			acdTransferWarmToOutboundApproveHandler.ServeHTTP(w, r)
		case AcdTransferWarmToAgentApproveProcedure:
			acdTransferWarmToAgentApproveHandler.ServeHTTP(w, r)
		case AcdCallerSendToVoicemailProcedure:
			acdCallerSendToVoicemailHandler.ServeHTTP(w, r)
		case AcdAgentInviteTransferCallerToConferenceProcedure:
			acdAgentInviteTransferCallerToConferenceHandler.ServeHTTP(w, r)
		case AcdAgentMonitorCallsProcedure:
			acdAgentMonitorCallsHandler.ServeHTTP(w, r)
		case AcdTransferColdToOutboundProcedure:
			acdTransferColdToOutboundHandler.ServeHTTP(w, r)
		case AcdTransferColdToAgentProcedure:
			acdTransferColdToAgentHandler.ServeHTTP(w, r)
		case AcdTransferWarmToOutboundStartProcedure:
			acdTransferWarmToOutboundStartHandler.ServeHTTP(w, r)
		case AcdCreateWarmOutboundTransferMemberProcedure:
			acdCreateWarmOutboundTransferMemberHandler.ServeHTTP(w, r)
		case AcdRemoveTransferMemberProcedure:
			acdRemoveTransferMemberHandler.ServeHTTP(w, r)
		case AcdTransferWarmToAgentStartProcedure:
			acdTransferWarmToAgentStartHandler.ServeHTTP(w, r)
		case AcdAgentGetCallFromHoldProcedure:
			acdAgentGetCallFromHoldHandler.ServeHTTP(w, r)
		case AcdAgentGetSpecificCallFromHoldProcedure:
			acdAgentGetSpecificCallFromHoldHandler.ServeHTTP(w, r)
		case AcdACDGetAllAgentsStatusesProcedure:
			acdACDGetAllAgentsStatusesHandler.ServeHTTP(w, r)
		case AcdAgentPutCallOnHoldProcedure:
			acdAgentPutCallOnHoldHandler.ServeHTTP(w, r)
		case AcdAgentReceiveMessageProcedure:
			acdAgentReceiveMessageHandler.ServeHTTP(w, r)
		case AcdAgentPBXApproveCallProcedure:
			acdAgentPBXApproveCallHandler.ServeHTTP(w, r)
		case AcdAgentPBXRejectCallProcedure:
			acdAgentPBXRejectCallHandler.ServeHTTP(w, r)
		case AcdGetCallerLostPeerProcedure:
			acdGetCallerLostPeerHandler.ServeHTTP(w, r)
		case AcdCallerGetRawEventProcedure:
			acdCallerGetRawEventHandler.ServeHTTP(w, r)
		case AcdPeerAgentWithCallerProcedure:
			acdPeerAgentWithCallerHandler.ServeHTTP(w, r)
		case AcdHoldTransferMemberProcedure:
			acdHoldTransferMemberHandler.ServeHTTP(w, r)
		case AcdUnholdTransferMemberProcedure:
			acdUnholdTransferMemberHandler.ServeHTTP(w, r)
		case AcdGetAgentCallCountsProcedure:
			acdGetAgentCallCountsHandler.ServeHTTP(w, r)
		case AcdWarmCallerTransferStartProcedure:
			acdWarmCallerTransferStartHandler.ServeHTTP(w, r)
		case AcdWarmCallerTransferCancelProcedure:
			acdWarmCallerTransferCancelHandler.ServeHTTP(w, r)
		case AcdWarmCallerTransferApproveProcedure:
			acdWarmCallerTransferApproveHandler.ServeHTTP(w, r)
		case AcdPlaySoundboardEntityProcedure:
			acdPlaySoundboardEntityHandler.ServeHTTP(w, r)
		case AcdStopSoundboardEntityProcedure:
			acdStopSoundboardEntityHandler.ServeHTTP(w, r)
		case AcdUpdateAgentSkillsProcedure:
			acdUpdateAgentSkillsHandler.ServeHTTP(w, r)
		case AcdPlayDTMFProcedure:
			acdPlayDTMFHandler.ServeHTTP(w, r)
		case AcdAgentMuteProcedure:
			acdAgentMuteHandler.ServeHTTP(w, r)
		case AcdAgentUnmuteProcedure:
			acdAgentUnmuteHandler.ServeHTTP(w, r)
		case AcdStartSecureFormProcedure:
			acdStartSecureFormHandler.ServeHTTP(w, r)
		case AcdCollectSecureFormFieldProcedure:
			acdCollectSecureFormFieldHandler.ServeHTTP(w, r)
		case AcdResetSecureFormFieldProcedure:
			acdResetSecureFormFieldHandler.ServeHTTP(w, r)
		case AcdAcceptSecureFormFieldProcedure:
			acdAcceptSecureFormFieldHandler.ServeHTTP(w, r)
		case AcdProcessSecureFormProcedure:
			acdProcessSecureFormHandler.ServeHTTP(w, r)
		case AcdFinishSecureFormHandlingProcedure:
			acdFinishSecureFormHandlingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAcdHandler returns CodeUnimplemented from all methods.
type UnimplementedAcdHandler struct{}

func (UnimplementedAcdHandler) AgentGetStatusStream(context.Context, *connect_go.Request[v0alpha.AgentGetStatusRequest], *connect_go.ServerStream[v0alpha.AgentGetStatusReply]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.AgentGetStatusStream is not implemented"))
}

func (UnimplementedAcdHandler) AgentGetStatus(context.Context, *connect_go.Request[v0alpha.AgentGetStatusRequest]) (*connect_go.Response[v0alpha.AgentGetStatusReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.AgentGetStatus is not implemented"))
}

func (UnimplementedAcdHandler) AgentGetConnectedParty(context.Context, *connect_go.Request[v0alpha.AgentGetConnectedPartyRequest]) (*connect_go.Response[v0alpha.AgentGetConnectedPartyReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.AgentGetConnectedParty is not implemented"))
}

func (UnimplementedAcdHandler) ManagerAgentGetConnectedParty(context.Context, *connect_go.Request[v0alpha.ManagerAgentGetConnectedPartyRequest]) (*connect_go.Response[v0alpha.ManagerAgentGetConnectedPartyReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.ManagerAgentGetConnectedParty is not implemented"))
}

func (UnimplementedAcdHandler) AgentIntercom(context.Context, *connect_go.Request[v0alpha.AgentIntercomRequest]) (*connect_go.Response[v0alpha.AgentIntercomReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.AgentIntercom is not implemented"))
}

func (UnimplementedAcdHandler) AgentIntercomAccept(context.Context, *connect_go.Request[v0alpha.AgentIntercomAcceptRequest]) (*connect_go.Response[v0alpha.AgentIntercomAcceptReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.AgentIntercomAccept is not implemented"))
}

func (UnimplementedAcdHandler) AgentIntercomReject(context.Context, *connect_go.Request[v0alpha.AgentIntercomRejectRequest]) (*connect_go.Response[v0alpha.AgentIntercomRejectReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.AgentIntercomReject is not implemented"))
}

func (UnimplementedAcdHandler) AgentIntercomCancel(context.Context, *connect_go.Request[v0alpha.AgentIntercomCancelRequest]) (*connect_go.Response[v0alpha.AgentIntercomCancelReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.AgentIntercomCancel is not implemented"))
}

func (UnimplementedAcdHandler) DialManualPrepare(context.Context, *connect_go.Request[v0alpha.DialManualPrepareRequest]) (*connect_go.Response[v0alpha.DialManualPrepareReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.DialManualPrepare is not implemented"))
}

func (UnimplementedAcdHandler) DialManualCancel(context.Context, *connect_go.Request[v0alpha.DialManualCancelRequest]) (*connect_go.Response[v0alpha.DialManualCancelReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.DialManualCancel is not implemented"))
}

func (UnimplementedAcdHandler) DialPreviewPrepare(context.Context, *connect_go.Request[v0alpha.DialPreviewPrepareRequest]) (*connect_go.Response[v0alpha.DialPreviewPrepareReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.DialPreviewPrepare is not implemented"))
}

func (UnimplementedAcdHandler) AgentPause(context.Context, *connect_go.Request[v0alpha.AgentPauseRequest]) (*connect_go.Response[v0alpha.AgentPauseReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.AgentPause is not implemented"))
}

func (UnimplementedAcdHandler) AgentSetReady(context.Context, *connect_go.Request[v0alpha.AgentSetReadyRequest]) (*connect_go.Response[v0alpha.AgentSetReadyReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.AgentSetReady is not implemented"))
}

func (UnimplementedAcdHandler) AgentGUIBusy(context.Context, *connect_go.Request[v0alpha.AgentGUIBusyRequest]) (*connect_go.Response[v0alpha.AgentGUIBusyReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.AgentGUIBusy is not implemented"))
}

func (UnimplementedAcdHandler) ReportAgentSessionEvent(context.Context, *connect_go.Request[v0alpha.AgentSessionEventReq]) (*connect_go.Response[v0alpha.AgentSessionEventRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.ReportAgentSessionEvent is not implemented"))
}

func (UnimplementedAcdHandler) CallerRequeue(context.Context, *connect_go.Request[v0alpha.CallerRequeueRequest]) (*connect_go.Response[v0alpha.CallerRequeueReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.CallerRequeue is not implemented"))
}

func (UnimplementedAcdHandler) AgentDisconnect(context.Context, *connect_go.Request[v0alpha.AgentDisconnectRequest]) (*connect_go.Response[v0alpha.AgentDisconnectReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.AgentDisconnect is not implemented"))
}

func (UnimplementedAcdHandler) TransferWarmToOutboundCancel(context.Context, *connect_go.Request[v0alpha.TransferWarmToOutboundCancelRequest]) (*connect_go.Response[v0alpha.TransferWarmToOutboundCancelReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.TransferWarmToOutboundCancel is not implemented"))
}

func (UnimplementedAcdHandler) TransferWarmToAgentCancel(context.Context, *connect_go.Request[v0alpha.TransferWarmToAgentCancelRequest]) (*connect_go.Response[v0alpha.TransferWarmToAgentCancelReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.TransferWarmToAgentCancel is not implemented"))
}

func (UnimplementedAcdHandler) TransferWarmToOutboundApprove(context.Context, *connect_go.Request[v0alpha.TransferWarmToOutboundApproveRequest]) (*connect_go.Response[v0alpha.TransferWarmToOutboundApproveReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.TransferWarmToOutboundApprove is not implemented"))
}

func (UnimplementedAcdHandler) TransferWarmToAgentApprove(context.Context, *connect_go.Request[v0alpha.TransferWarmToAgentApproveRequest]) (*connect_go.Response[v0alpha.TransferWarmToAgentApproveReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.TransferWarmToAgentApprove is not implemented"))
}

func (UnimplementedAcdHandler) CallerSendToVoicemail(context.Context, *connect_go.Request[v0alpha.CallerSendToVoicemailRequest]) (*connect_go.Response[v0alpha.CallerSendToVoicemailReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.CallerSendToVoicemail is not implemented"))
}

func (UnimplementedAcdHandler) AgentInviteTransferCallerToConference(context.Context, *connect_go.Request[v0alpha.AgentInviteTransferCallerToConferenceRequest]) (*connect_go.Response[v0alpha.AgentInviteTransferCallerToConferenceReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.AgentInviteTransferCallerToConference is not implemented"))
}

func (UnimplementedAcdHandler) AgentMonitorCalls(context.Context, *connect_go.Request[v0alpha.AgentMonitorCallsRequest]) (*connect_go.Response[v0alpha.AgentMonitorCallsReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.AgentMonitorCalls is not implemented"))
}

func (UnimplementedAcdHandler) TransferColdToOutbound(context.Context, *connect_go.Request[v0alpha.TransferColdToOutboundRequest]) (*connect_go.Response[v0alpha.TransferColdToOutboundReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.TransferColdToOutbound is not implemented"))
}

func (UnimplementedAcdHandler) TransferColdToAgent(context.Context, *connect_go.Request[v0alpha.TransferColdToAgentRequest]) (*connect_go.Response[v0alpha.TransferColdToAgentReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.TransferColdToAgent is not implemented"))
}

func (UnimplementedAcdHandler) TransferWarmToOutboundStart(context.Context, *connect_go.Request[v0alpha.TransferWarmToOutboundStartRequest]) (*connect_go.Response[v0alpha.TransferWarmToOutboundStartReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.TransferWarmToOutboundStart is not implemented"))
}

func (UnimplementedAcdHandler) CreateWarmOutboundTransferMember(context.Context, *connect_go.Request[v0alpha.CreateWarmOutboundTransferMemberRequest]) (*connect_go.Response[v0alpha.CreateWarmOutboundTransferMemberReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.CreateWarmOutboundTransferMember is not implemented"))
}

func (UnimplementedAcdHandler) RemoveTransferMember(context.Context, *connect_go.Request[v0alpha.RemoveTransferMemberRequest]) (*connect_go.Response[v0alpha.RemoveTransferMemberReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.RemoveTransferMember is not implemented"))
}

func (UnimplementedAcdHandler) TransferWarmToAgentStart(context.Context, *connect_go.Request[v0alpha.TransferWarmToAgentStartRequest]) (*connect_go.Response[v0alpha.TransferWarmToAgentStartReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.TransferWarmToAgentStart is not implemented"))
}

func (UnimplementedAcdHandler) AgentGetCallFromHold(context.Context, *connect_go.Request[v0alpha.AgentGetCallFromHoldRequest]) (*connect_go.Response[v0alpha.AgentGetCallFromHoldReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.AgentGetCallFromHold is not implemented"))
}

func (UnimplementedAcdHandler) AgentGetSpecificCallFromHold(context.Context, *connect_go.Request[v0alpha.AgentGetSpecificCallFromHoldRequest]) (*connect_go.Response[v0alpha.AgentGetSpecificCallFromHoldReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.AgentGetSpecificCallFromHold is not implemented"))
}

func (UnimplementedAcdHandler) ACDGetAllAgentsStatuses(context.Context, *connect_go.Request[v0alpha.ACDGetAllAgentsStatusesRequest]) (*connect_go.Response[v0alpha.ACDGetAllAgentsStatusesReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.ACDGetAllAgentsStatuses is not implemented"))
}

func (UnimplementedAcdHandler) AgentPutCallOnHold(context.Context, *connect_go.Request[v0alpha.AgentPutCallOnHoldRequest]) (*connect_go.Response[v0alpha.AgentPutCallOnHoldReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.AgentPutCallOnHold is not implemented"))
}

func (UnimplementedAcdHandler) AgentReceiveMessage(context.Context, *connect_go.Request[v0alpha.AgentReceiveMessageRequest]) (*connect_go.Response[v0alpha.AgentReceiveMessageReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.AgentReceiveMessage is not implemented"))
}

func (UnimplementedAcdHandler) AgentPBXApproveCall(context.Context, *connect_go.Request[v0alpha.AgentPBXApproveCallRequest]) (*connect_go.Response[v0alpha.AgentPBXApproveCallReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.AgentPBXApproveCall is not implemented"))
}

func (UnimplementedAcdHandler) AgentPBXRejectCall(context.Context, *connect_go.Request[v0alpha.AgentPBXRejectCallRequest]) (*connect_go.Response[v0alpha.AgentPBXRejectCallReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.AgentPBXRejectCall is not implemented"))
}

func (UnimplementedAcdHandler) GetCallerLostPeer(context.Context, *connect_go.Request[v0alpha.GetCallerLostPeerRequest]) (*connect_go.Response[v0alpha.GetCallerLostPeerReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.GetCallerLostPeer is not implemented"))
}

func (UnimplementedAcdHandler) CallerGetRawEvent(context.Context, *connect_go.Request[v0alpha.CallerGetRawEventRequest]) (*connect_go.Response[v0alpha.CallerGetRawEventReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.CallerGetRawEvent is not implemented"))
}

func (UnimplementedAcdHandler) PeerAgentWithCaller(context.Context, *connect_go.Request[v0alpha.PeerAgentWithCallerRequest]) (*connect_go.Response[v0alpha.PeerAgentWithCallerReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.PeerAgentWithCaller is not implemented"))
}

func (UnimplementedAcdHandler) HoldTransferMember(context.Context, *connect_go.Request[v0alpha.HoldTransferMemberReq]) (*connect_go.Response[v0alpha.HoldTransferMemberRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.HoldTransferMember is not implemented"))
}

func (UnimplementedAcdHandler) UnholdTransferMember(context.Context, *connect_go.Request[v0alpha.UnholdTransferMemberReq]) (*connect_go.Response[v0alpha.UnholdTransferMemberRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.UnholdTransferMember is not implemented"))
}

func (UnimplementedAcdHandler) GetAgentCallCounts(context.Context, *connect_go.Request[v0alpha.GetAgentCallCountsReq]) (*connect_go.Response[v0alpha.GetAgentCallCountsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.GetAgentCallCounts is not implemented"))
}

func (UnimplementedAcdHandler) WarmCallerTransferStart(context.Context, *connect_go.Request[v0alpha.WarmCallerTransferStartReq]) (*connect_go.Response[v0alpha.WarmCallerTransferStartRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.WarmCallerTransferStart is not implemented"))
}

func (UnimplementedAcdHandler) WarmCallerTransferCancel(context.Context, *connect_go.Request[v0alpha.WarmCallerTransferCancelReq]) (*connect_go.Response[v0alpha.WarmCallerTransferCancelRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.WarmCallerTransferCancel is not implemented"))
}

func (UnimplementedAcdHandler) WarmCallerTransferApprove(context.Context, *connect_go.Request[v0alpha.WarmCallerTransferApproveReq]) (*connect_go.Response[v0alpha.WarmCallerTransferApproveRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.WarmCallerTransferApprove is not implemented"))
}

func (UnimplementedAcdHandler) PlaySoundboardEntity(context.Context, *connect_go.Request[v0alpha.PlaySoundboardEntityReq]) (*connect_go.Response[v0alpha.PlaySoundboardEntityRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.PlaySoundboardEntity is not implemented"))
}

func (UnimplementedAcdHandler) StopSoundboardEntity(context.Context, *connect_go.Request[v0alpha.StopSoundboardEntityReq]) (*connect_go.Response[v0alpha.StopSoundboardEntityRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.StopSoundboardEntity is not implemented"))
}

func (UnimplementedAcdHandler) UpdateAgentSkills(context.Context, *connect_go.Request[v0alpha.UpdateAgentSkillsRequest]) (*connect_go.Response[v0alpha.UpdateAgentSkillsReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.UpdateAgentSkills is not implemented"))
}

func (UnimplementedAcdHandler) PlayDTMF(context.Context, *connect_go.Request[v0alpha.PlayDTMFRequest]) (*connect_go.Response[v0alpha.PlayDTMFReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.PlayDTMF is not implemented"))
}

func (UnimplementedAcdHandler) AgentMute(context.Context, *connect_go.Request[v0alpha.AgentMuteRequest]) (*connect_go.Response[v0alpha.AgentMuteReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.AgentMute is not implemented"))
}

func (UnimplementedAcdHandler) AgentUnmute(context.Context, *connect_go.Request[v0alpha.AgentUnmuteRequest]) (*connect_go.Response[v0alpha.AgentUnmuteReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.AgentUnmute is not implemented"))
}

func (UnimplementedAcdHandler) StartSecureForm(context.Context, *connect_go.Request[v0alpha.StartSecureFormReq]) (*connect_go.Response[v0alpha.StartSecureFormRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.StartSecureForm is not implemented"))
}

func (UnimplementedAcdHandler) CollectSecureFormField(context.Context, *connect_go.Request[v0alpha.CollectSecureFormFieldReq], *connect_go.ServerStream[v0alpha.CollectSecureFormFieldRes]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.CollectSecureFormField is not implemented"))
}

func (UnimplementedAcdHandler) ResetSecureFormField(context.Context, *connect_go.Request[v0alpha.ResetSecureFormFieldReq]) (*connect_go.Response[v0alpha.ResetSecureFormFieldRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.ResetSecureFormField is not implemented"))
}

func (UnimplementedAcdHandler) AcceptSecureFormField(context.Context, *connect_go.Request[v0alpha.AcceptSecureFormFieldReq]) (*connect_go.Response[v0alpha.AcceptSecureFormFieldRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.AcceptSecureFormField is not implemented"))
}

func (UnimplementedAcdHandler) ProcessSecureForm(context.Context, *connect_go.Request[v0alpha.ProcessSecureFormReq]) (*connect_go.Response[v0alpha.ProcessSecureFormRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.ProcessSecureForm is not implemented"))
}

func (UnimplementedAcdHandler) FinishSecureFormHandling(context.Context, *connect_go.Request[v0alpha.FinishSecureFormHandlingReq]) (*connect_go.Response[v0alpha.FinishSecureFormHandlingRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Acd.FinishSecureFormHandling is not implemented"))
}
