// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v0alpha/org.proto

package v0alphaconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v0alpha "github.com/tcncloud/api-go/api/v0alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// OrgName is the fully-qualified name of the Org service.
	OrgName = "api.v0alpha.Org"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrgRegisterOrganizationProcedure is the fully-qualified name of the Org's RegisterOrganization
	// RPC.
	OrgRegisterOrganizationProcedure = "/api.v0alpha.Org/RegisterOrganization"
	// OrgConvertOrgToManualProcedure is the fully-qualified name of the Org's ConvertOrgToManual RPC.
	OrgConvertOrgToManualProcedure = "/api.v0alpha.Org/ConvertOrgToManual"
	// OrgUpdateOrganizationProcedure is the fully-qualified name of the Org's UpdateOrganization RPC.
	OrgUpdateOrganizationProcedure = "/api.v0alpha.Org/UpdateOrganization"
	// OrgArchiveOrganizationProcedure is the fully-qualified name of the Org's ArchiveOrganization RPC.
	OrgArchiveOrganizationProcedure = "/api.v0alpha.Org/ArchiveOrganization"
	// OrgUnArchiveOrganizationProcedure is the fully-qualified name of the Org's UnArchiveOrganization
	// RPC.
	OrgUnArchiveOrganizationProcedure = "/api.v0alpha.Org/UnArchiveOrganization"
	// OrgListArchivedOrganizationsProcedure is the fully-qualified name of the Org's
	// ListArchivedOrganizations RPC.
	OrgListArchivedOrganizationsProcedure = "/api.v0alpha.Org/ListArchivedOrganizations"
	// OrgGetOrganizationProfileProcedure is the fully-qualified name of the Org's
	// GetOrganizationProfile RPC.
	OrgGetOrganizationProfileProcedure = "/api.v0alpha.Org/GetOrganizationProfile"
	// OrgGetOrganizationProfileByIdProcedure is the fully-qualified name of the Org's
	// GetOrganizationProfileById RPC.
	OrgGetOrganizationProfileByIdProcedure = "/api.v0alpha.Org/GetOrganizationProfileById"
	// OrgListOrganizationDescriptionsProcedure is the fully-qualified name of the Org's
	// ListOrganizationDescriptions RPC.
	OrgListOrganizationDescriptionsProcedure = "/api.v0alpha.Org/ListOrganizationDescriptions"
	// OrgListRegionalOrganizationsProcedure is the fully-qualified name of the Org's
	// ListRegionalOrganizations RPC.
	OrgListRegionalOrganizationsProcedure = "/api.v0alpha.Org/ListRegionalOrganizations"
	// OrgUpdateP3OwningOrgProcedure is the fully-qualified name of the Org's UpdateP3OwningOrg RPC.
	OrgUpdateP3OwningOrgProcedure = "/api.v0alpha.Org/UpdateP3OwningOrg"
	// OrgGetP3OwningOrgProcedure is the fully-qualified name of the Org's GetP3OwningOrg RPC.
	OrgGetP3OwningOrgProcedure = "/api.v0alpha.Org/GetP3OwningOrg"
	// OrgListOrganizationUserDescriptionsProcedure is the fully-qualified name of the Org's
	// ListOrganizationUserDescriptions RPC.
	OrgListOrganizationUserDescriptionsProcedure = "/api.v0alpha.Org/ListOrganizationUserDescriptions"
	// OrgListUserDescriptionsProcedure is the fully-qualified name of the Org's ListUserDescriptions
	// RPC.
	OrgListUserDescriptionsProcedure = "/api.v0alpha.Org/ListUserDescriptions"
	// OrgGetUserDirectoryProcedure is the fully-qualified name of the Org's GetUserDirectory RPC.
	OrgGetUserDirectoryProcedure = "/api.v0alpha.Org/GetUserDirectory"
	// OrgGetRegionsProcedure is the fully-qualified name of the Org's GetRegions RPC.
	OrgGetRegionsProcedure = "/api.v0alpha.Org/GetRegions"
	// OrgGetUserDetailsProcedure is the fully-qualified name of the Org's GetUserDetails RPC.
	OrgGetUserDetailsProcedure = "/api.v0alpha.Org/GetUserDetails"
	// OrgAdminGetUserDetailsProcedure is the fully-qualified name of the Org's AdminGetUserDetails RPC.
	OrgAdminGetUserDetailsProcedure = "/api.v0alpha.Org/AdminGetUserDetails"
	// OrgGetAgentUsersProcedure is the fully-qualified name of the Org's GetAgentUsers RPC.
	OrgGetAgentUsersProcedure = "/api.v0alpha.Org/GetAgentUsers"
	// OrgGetAgentSettingsProcedure is the fully-qualified name of the Org's GetAgentSettings RPC.
	OrgGetAgentSettingsProcedure = "/api.v0alpha.Org/GetAgentSettings"
	// OrgGetAgentProfileGroupProcedure is the fully-qualified name of the Org's GetAgentProfileGroup
	// RPC.
	OrgGetAgentProfileGroupProcedure = "/api.v0alpha.Org/GetAgentProfileGroup"
	// OrgUpdateAgentProfileGroupProcedure is the fully-qualified name of the Org's
	// UpdateAgentProfileGroup RPC.
	OrgUpdateAgentProfileGroupProcedure = "/api.v0alpha.Org/UpdateAgentProfileGroup"
	// OrgCreateAgentProfileGroupProcedure is the fully-qualified name of the Org's
	// CreateAgentProfileGroup RPC.
	OrgCreateAgentProfileGroupProcedure = "/api.v0alpha.Org/CreateAgentProfileGroup"
	// OrgListAgentProfileGroupsProcedure is the fully-qualified name of the Org's
	// ListAgentProfileGroups RPC.
	OrgListAgentProfileGroupsProcedure = "/api.v0alpha.Org/ListAgentProfileGroups"
	// OrgDeleteAgentProfileGroupProcedure is the fully-qualified name of the Org's
	// DeleteAgentProfileGroup RPC.
	OrgDeleteAgentProfileGroupProcedure = "/api.v0alpha.Org/DeleteAgentProfileGroup"
	// OrgAssignAgentProfileGroupsProcedure is the fully-qualified name of the Org's
	// AssignAgentProfileGroups RPC.
	OrgAssignAgentProfileGroupsProcedure = "/api.v0alpha.Org/AssignAgentProfileGroups"
	// OrgUpdateUserProcedure is the fully-qualified name of the Org's UpdateUser RPC.
	OrgUpdateUserProcedure = "/api.v0alpha.Org/UpdateUser"
	// OrgCreateUserProcedure is the fully-qualified name of the Org's CreateUser RPC.
	OrgCreateUserProcedure = "/api.v0alpha.Org/CreateUser"
	// OrgCreateDelegatedUserProcedure is the fully-qualified name of the Org's CreateDelegatedUser RPC.
	OrgCreateDelegatedUserProcedure = "/api.v0alpha.Org/CreateDelegatedUser"
	// OrgUpdateUserPasswordProcedure is the fully-qualified name of the Org's UpdateUserPassword RPC.
	OrgUpdateUserPasswordProcedure = "/api.v0alpha.Org/UpdateUserPassword"
	// OrgResetUserRequirePasswordResetProcedure is the fully-qualified name of the Org's
	// ResetUserRequirePasswordReset RPC.
	OrgResetUserRequirePasswordResetProcedure = "/api.v0alpha.Org/ResetUserRequirePasswordReset"
	// OrgGetUserPasswordResetLinkProcedure is the fully-qualified name of the Org's
	// GetUserPasswordResetLink RPC.
	OrgGetUserPasswordResetLinkProcedure = "/api.v0alpha.Org/GetUserPasswordResetLink"
	// OrgGetUserEmailVerifiedProcedure is the fully-qualified name of the Org's GetUserEmailVerified
	// RPC.
	OrgGetUserEmailVerifiedProcedure = "/api.v0alpha.Org/GetUserEmailVerified"
	// OrgSendUserVerificationEmailProcedure is the fully-qualified name of the Org's
	// SendUserVerificationEmail RPC.
	OrgSendUserVerificationEmailProcedure = "/api.v0alpha.Org/SendUserVerificationEmail"
	// OrgManualUserEmailVerificationProcedure is the fully-qualified name of the Org's
	// ManualUserEmailVerification RPC.
	OrgManualUserEmailVerificationProcedure = "/api.v0alpha.Org/ManualUserEmailVerification"
	// OrgGetTempUserTokenProcedure is the fully-qualified name of the Org's GetTempUserToken RPC.
	OrgGetTempUserTokenProcedure = "/api.v0alpha.Org/GetTempUserToken"
	// OrgGetCountriesListProcedure is the fully-qualified name of the Org's GetCountriesList RPC.
	OrgGetCountriesListProcedure = "/api.v0alpha.Org/GetCountriesList"
	// OrgGetAdminClientPreferencesProcedure is the fully-qualified name of the Org's
	// GetAdminClientPreferences RPC.
	OrgGetAdminClientPreferencesProcedure = "/api.v0alpha.Org/GetAdminClientPreferences"
	// OrgUpdateAdminClientPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateAdminClientPreferences RPC.
	OrgUpdateAdminClientPreferencesProcedure = "/api.v0alpha.Org/UpdateAdminClientPreferences"
	// OrgGetPermissionsProcedure is the fully-qualified name of the Org's GetPermissions RPC.
	OrgGetPermissionsProcedure = "/api.v0alpha.Org/GetPermissions"
	// OrgRevokeAccountOwnerPermissionFromUserProcedure is the fully-qualified name of the Org's
	// RevokeAccountOwnerPermissionFromUser RPC.
	OrgRevokeAccountOwnerPermissionFromUserProcedure = "/api.v0alpha.Org/RevokeAccountOwnerPermissionFromUser"
	// OrgUpdateUserDisabledProcedure is the fully-qualified name of the Org's UpdateUserDisabled RPC.
	OrgUpdateUserDisabledProcedure = "/api.v0alpha.Org/UpdateUserDisabled"
	// OrgUpdateBulkUsersDisabledProcedure is the fully-qualified name of the Org's
	// UpdateBulkUsersDisabled RPC.
	OrgUpdateBulkUsersDisabledProcedure = "/api.v0alpha.Org/UpdateBulkUsersDisabled"
	// OrgGetOrgBillingSettingsProcedure is the fully-qualified name of the Org's GetOrgBillingSettings
	// RPC.
	OrgGetOrgBillingSettingsProcedure = "/api.v0alpha.Org/GetOrgBillingSettings"
	// OrgSetOrgBillingSettingsProcedure is the fully-qualified name of the Org's SetOrgBillingSettings
	// RPC.
	OrgSetOrgBillingSettingsProcedure = "/api.v0alpha.Org/SetOrgBillingSettings"
	// OrgAddOrgBillingOverrideProcedure is the fully-qualified name of the Org's AddOrgBillingOverride
	// RPC.
	OrgAddOrgBillingOverrideProcedure = "/api.v0alpha.Org/AddOrgBillingOverride"
	// OrgRemoveOrgBillingOverrideProcedure is the fully-qualified name of the Org's
	// RemoveOrgBillingOverride RPC.
	OrgRemoveOrgBillingOverrideProcedure = "/api.v0alpha.Org/RemoveOrgBillingOverride"
	// OrgGetSystemDefaultBillingRatesProcedure is the fully-qualified name of the Org's
	// GetSystemDefaultBillingRates RPC.
	OrgGetSystemDefaultBillingRatesProcedure = "/api.v0alpha.Org/GetSystemDefaultBillingRates"
	// OrgListPermissionGroupsProcedure is the fully-qualified name of the Org's ListPermissionGroups
	// RPC.
	OrgListPermissionGroupsProcedure = "/api.v0alpha.Org/ListPermissionGroups"
	// OrgCreatePermissionGroupProcedure is the fully-qualified name of the Org's CreatePermissionGroup
	// RPC.
	OrgCreatePermissionGroupProcedure = "/api.v0alpha.Org/CreatePermissionGroup"
	// OrgUpdatePermissionGroupProcedure is the fully-qualified name of the Org's UpdatePermissionGroup
	// RPC.
	OrgUpdatePermissionGroupProcedure = "/api.v0alpha.Org/UpdatePermissionGroup"
	// OrgDeletePermissionGroupProcedure is the fully-qualified name of the Org's DeletePermissionGroup
	// RPC.
	OrgDeletePermissionGroupProcedure = "/api.v0alpha.Org/DeletePermissionGroup"
	// OrgAssignUserToAccountOwnerPermissionGroupProcedure is the fully-qualified name of the Org's
	// AssignUserToAccountOwnerPermissionGroup RPC.
	OrgAssignUserToAccountOwnerPermissionGroupProcedure = "/api.v0alpha.Org/AssignUserToAccountOwnerPermissionGroup"
	// OrgAssignUserPermissionGroupProcedure is the fully-qualified name of the Org's
	// AssignUserPermissionGroup RPC.
	OrgAssignUserPermissionGroupProcedure = "/api.v0alpha.Org/AssignUserPermissionGroup"
	// OrgAssignUsersPermissionGroupProcedure is the fully-qualified name of the Org's
	// AssignUsersPermissionGroup RPC.
	OrgAssignUsersPermissionGroupProcedure = "/api.v0alpha.Org/AssignUsersPermissionGroup"
	// OrgUpdateUserNeoPermissionGroupsProcedure is the fully-qualified name of the Org's
	// UpdateUserNeoPermissionGroups RPC.
	OrgUpdateUserNeoPermissionGroupsProcedure = "/api.v0alpha.Org/UpdateUserNeoPermissionGroups"
	// OrgRevokeUserPermissionGroupProcedure is the fully-qualified name of the Org's
	// RevokeUserPermissionGroup RPC.
	OrgRevokeUserPermissionGroupProcedure = "/api.v0alpha.Org/RevokeUserPermissionGroup"
	// OrgRevokeUsersPermissionGroupProcedure is the fully-qualified name of the Org's
	// RevokeUsersPermissionGroup RPC.
	OrgRevokeUsersPermissionGroupProcedure = "/api.v0alpha.Org/RevokeUsersPermissionGroup"
	// OrgInitDefaultPermissionGroupsProcedure is the fully-qualified name of the Org's
	// InitDefaultPermissionGroups RPC.
	OrgInitDefaultPermissionGroupsProcedure = "/api.v0alpha.Org/InitDefaultPermissionGroups"
	// OrgAddPermissionToAccountOwnerPermissionGroupProcedure is the fully-qualified name of the Org's
	// AddPermissionToAccountOwnerPermissionGroup RPC.
	OrgAddPermissionToAccountOwnerPermissionGroupProcedure = "/api.v0alpha.Org/AddPermissionToAccountOwnerPermissionGroup"
	// OrgRevokePermissionToAccountOwnerPermissionGroupProcedure is the fully-qualified name of the
	// Org's RevokePermissionToAccountOwnerPermissionGroup RPC.
	OrgRevokePermissionToAccountOwnerPermissionGroupProcedure = "/api.v0alpha.Org/RevokePermissionToAccountOwnerPermissionGroup"
	// OrgAddPermissionToOrgDefaultGroupProcedure is the fully-qualified name of the Org's
	// AddPermissionToOrgDefaultGroup RPC.
	OrgAddPermissionToOrgDefaultGroupProcedure = "/api.v0alpha.Org/AddPermissionToOrgDefaultGroup"
	// OrgRemovePermissionFromOrgDefaultGroupProcedure is the fully-qualified name of the Org's
	// RemovePermissionFromOrgDefaultGroup RPC.
	OrgRemovePermissionFromOrgDefaultGroupProcedure = "/api.v0alpha.Org/RemovePermissionFromOrgDefaultGroup"
	// OrgGetOrgDefaultSuperUserGroupProcedure is the fully-qualified name of the Org's
	// GetOrgDefaultSuperUserGroup RPC.
	OrgGetOrgDefaultSuperUserGroupProcedure = "/api.v0alpha.Org/GetOrgDefaultSuperUserGroup"
	// OrgListP3PermissionGroupsProcedure is the fully-qualified name of the Org's
	// ListP3PermissionGroups RPC.
	OrgListP3PermissionGroupsProcedure = "/api.v0alpha.Org/ListP3PermissionGroups"
	// OrgAddUserRegionProcedure is the fully-qualified name of the Org's AddUserRegion RPC.
	OrgAddUserRegionProcedure = "/api.v0alpha.Org/AddUserRegion"
	// OrgRemoveUserRegionProcedure is the fully-qualified name of the Org's RemoveUserRegion RPC.
	OrgRemoveUserRegionProcedure = "/api.v0alpha.Org/RemoveUserRegion"
	// OrgCreateP3PermissionGroupProcedure is the fully-qualified name of the Org's
	// CreateP3PermissionGroup RPC.
	OrgCreateP3PermissionGroupProcedure = "/api.v0alpha.Org/CreateP3PermissionGroup"
	// OrgUpdateP3PermissionGroupProcedure is the fully-qualified name of the Org's
	// UpdateP3PermissionGroup RPC.
	OrgUpdateP3PermissionGroupProcedure = "/api.v0alpha.Org/UpdateP3PermissionGroup"
	// OrgDeleteP3PermissionGroupProcedure is the fully-qualified name of the Org's
	// DeleteP3PermissionGroup RPC.
	OrgDeleteP3PermissionGroupProcedure = "/api.v0alpha.Org/DeleteP3PermissionGroup"
	// OrgAssignUsersP3PermissionGroupProcedure is the fully-qualified name of the Org's
	// AssignUsersP3PermissionGroup RPC.
	OrgAssignUsersP3PermissionGroupProcedure = "/api.v0alpha.Org/AssignUsersP3PermissionGroup"
	// OrgAddLoginToUserProcedure is the fully-qualified name of the Org's AddLoginToUser RPC.
	OrgAddLoginToUserProcedure = "/api.v0alpha.Org/AddLoginToUser"
	// OrgRevokeUsersP3PermissionGroupProcedure is the fully-qualified name of the Org's
	// RevokeUsersP3PermissionGroup RPC.
	OrgRevokeUsersP3PermissionGroupProcedure = "/api.v0alpha.Org/RevokeUsersP3PermissionGroup"
	// OrgGetContactPreferencesProcedure is the fully-qualified name of the Org's GetContactPreferences
	// RPC.
	OrgGetContactPreferencesProcedure = "/api.v0alpha.Org/GetContactPreferences"
	// OrgUpdateContactPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateContactPreferences RPC.
	OrgUpdateContactPreferencesProcedure = "/api.v0alpha.Org/UpdateContactPreferences"
	// OrgGetCompliancePreferencesProcedure is the fully-qualified name of the Org's
	// GetCompliancePreferences RPC.
	OrgGetCompliancePreferencesProcedure = "/api.v0alpha.Org/GetCompliancePreferences"
	// OrgUpdateCompliancePreferencesProcedure is the fully-qualified name of the Org's
	// UpdateCompliancePreferences RPC.
	OrgUpdateCompliancePreferencesProcedure = "/api.v0alpha.Org/UpdateCompliancePreferences"
	// OrgGetAgentPreferencesProcedure is the fully-qualified name of the Org's GetAgentPreferences RPC.
	OrgGetAgentPreferencesProcedure = "/api.v0alpha.Org/GetAgentPreferences"
	// OrgUpdateAgentPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateAgentPreferences RPC.
	OrgUpdateAgentPreferencesProcedure = "/api.v0alpha.Org/UpdateAgentPreferences"
	// OrgGetOrganizationPreferencesProcedure is the fully-qualified name of the Org's
	// GetOrganizationPreferences RPC.
	OrgGetOrganizationPreferencesProcedure = "/api.v0alpha.Org/GetOrganizationPreferences"
	// OrgUpdateOrganizationPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateOrganizationPreferences RPC.
	OrgUpdateOrganizationPreferencesProcedure = "/api.v0alpha.Org/UpdateOrganizationPreferences"
	// OrgGetSchedulePreferencesProcedure is the fully-qualified name of the Org's
	// GetSchedulePreferences RPC.
	OrgGetSchedulePreferencesProcedure = "/api.v0alpha.Org/GetSchedulePreferences"
	// OrgUpdateSchedulePreferencesProcedure is the fully-qualified name of the Org's
	// UpdateSchedulePreferences RPC.
	OrgUpdateSchedulePreferencesProcedure = "/api.v0alpha.Org/UpdateSchedulePreferences"
	// OrgGetBusinessPreferencesProcedure is the fully-qualified name of the Org's
	// GetBusinessPreferences RPC.
	OrgGetBusinessPreferencesProcedure = "/api.v0alpha.Org/GetBusinessPreferences"
	// OrgUpdateBusinessPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateBusinessPreferences RPC.
	OrgUpdateBusinessPreferencesProcedure = "/api.v0alpha.Org/UpdateBusinessPreferences"
	// OrgGetEndOfDayPreferencesProcedure is the fully-qualified name of the Org's
	// GetEndOfDayPreferences RPC.
	OrgGetEndOfDayPreferencesProcedure = "/api.v0alpha.Org/GetEndOfDayPreferences"
	// OrgUpdateEndOfDayPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateEndOfDayPreferences RPC.
	OrgUpdateEndOfDayPreferencesProcedure = "/api.v0alpha.Org/UpdateEndOfDayPreferences"
	// OrgGetReportFilterPreferencesProcedure is the fully-qualified name of the Org's
	// GetReportFilterPreferences RPC.
	OrgGetReportFilterPreferencesProcedure = "/api.v0alpha.Org/GetReportFilterPreferences"
	// OrgUpdateReportFilterPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateReportFilterPreferences RPC.
	OrgUpdateReportFilterPreferencesProcedure = "/api.v0alpha.Org/UpdateReportFilterPreferences"
	// OrgGetPhonePreferencesProcedure is the fully-qualified name of the Org's GetPhonePreferences RPC.
	OrgGetPhonePreferencesProcedure = "/api.v0alpha.Org/GetPhonePreferences"
	// OrgUpdatePhonePreferencesProcedure is the fully-qualified name of the Org's
	// UpdatePhonePreferences RPC.
	OrgUpdatePhonePreferencesProcedure = "/api.v0alpha.Org/UpdatePhonePreferences"
	// OrgGetDashboardGeneralPreferencesProcedure is the fully-qualified name of the Org's
	// GetDashboardGeneralPreferences RPC.
	OrgGetDashboardGeneralPreferencesProcedure = "/api.v0alpha.Org/GetDashboardGeneralPreferences"
	// OrgUpdateDashboardGeneralPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateDashboardGeneralPreferences RPC.
	OrgUpdateDashboardGeneralPreferencesProcedure = "/api.v0alpha.Org/UpdateDashboardGeneralPreferences"
	// OrgGetWebhookPreferencesProcedure is the fully-qualified name of the Org's GetWebhookPreferences
	// RPC.
	OrgGetWebhookPreferencesProcedure = "/api.v0alpha.Org/GetWebhookPreferences"
	// OrgUpdateWebhookPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateWebhookPreferences RPC.
	OrgUpdateWebhookPreferencesProcedure = "/api.v0alpha.Org/UpdateWebhookPreferences"
	// OrgGetBroadcastPreferencesProcedure is the fully-qualified name of the Org's
	// GetBroadcastPreferences RPC.
	OrgGetBroadcastPreferencesProcedure = "/api.v0alpha.Org/GetBroadcastPreferences"
	// OrgUpdateBroadcastPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateBroadcastPreferences RPC.
	OrgUpdateBroadcastPreferencesProcedure = "/api.v0alpha.Org/UpdateBroadcastPreferences"
	// OrgGetAuthenticationPreferencesProcedure is the fully-qualified name of the Org's
	// GetAuthenticationPreferences RPC.
	OrgGetAuthenticationPreferencesProcedure = "/api.v0alpha.Org/GetAuthenticationPreferences"
	// OrgUpdateAuthenticationPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateAuthenticationPreferences RPC.
	OrgUpdateAuthenticationPreferencesProcedure = "/api.v0alpha.Org/UpdateAuthenticationPreferences"
	// OrgGetRecordingPreferencesProcedure is the fully-qualified name of the Org's
	// GetRecordingPreferences RPC.
	OrgGetRecordingPreferencesProcedure = "/api.v0alpha.Org/GetRecordingPreferences"
	// OrgUpdateRecordingPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateRecordingPreferences RPC.
	OrgUpdateRecordingPreferencesProcedure = "/api.v0alpha.Org/UpdateRecordingPreferences"
	// OrgGetDashboardQueuePreferencesProcedure is the fully-qualified name of the Org's
	// GetDashboardQueuePreferences RPC.
	OrgGetDashboardQueuePreferencesProcedure = "/api.v0alpha.Org/GetDashboardQueuePreferences"
	// OrgUpdateDashboardQueuePreferencesProcedure is the fully-qualified name of the Org's
	// UpdateDashboardQueuePreferences RPC.
	OrgUpdateDashboardQueuePreferencesProcedure = "/api.v0alpha.Org/UpdateDashboardQueuePreferences"
	// OrgGetAgentQuickViewPreferencesProcedure is the fully-qualified name of the Org's
	// GetAgentQuickViewPreferences RPC.
	OrgGetAgentQuickViewPreferencesProcedure = "/api.v0alpha.Org/GetAgentQuickViewPreferences"
	// OrgGetVoiceAnalyticsPreferencesProcedure is the fully-qualified name of the Org's
	// GetVoiceAnalyticsPreferences RPC.
	OrgGetVoiceAnalyticsPreferencesProcedure = "/api.v0alpha.Org/GetVoiceAnalyticsPreferences"
	// OrgUpdateVoiceAnalyticsPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateVoiceAnalyticsPreferences RPC.
	OrgUpdateVoiceAnalyticsPreferencesProcedure = "/api.v0alpha.Org/UpdateVoiceAnalyticsPreferences"
	// OrgGetScorecardsPreferencesProcedure is the fully-qualified name of the Org's
	// GetScorecardsPreferences RPC.
	OrgGetScorecardsPreferencesProcedure = "/api.v0alpha.Org/GetScorecardsPreferences"
	// OrgUpdateScorecardsPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateScorecardsPreferences RPC.
	OrgUpdateScorecardsPreferencesProcedure = "/api.v0alpha.Org/UpdateScorecardsPreferences"
	// OrgGetEmailSmsPreferencesProcedure is the fully-qualified name of the Org's
	// GetEmailSmsPreferences RPC.
	OrgGetEmailSmsPreferencesProcedure = "/api.v0alpha.Org/GetEmailSmsPreferences"
	// OrgUpdateEmailSmsPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateEmailSmsPreferences RPC.
	OrgUpdateEmailSmsPreferencesProcedure = "/api.v0alpha.Org/UpdateEmailSmsPreferences"
	// OrgEditAgentQuickViewPreferencesProcedure is the fully-qualified name of the Org's
	// EditAgentQuickViewPreferences RPC.
	OrgEditAgentQuickViewPreferencesProcedure = "/api.v0alpha.Org/EditAgentQuickViewPreferences"
	// OrgEditBackofficeThemePreferenceProcedure is the fully-qualified name of the Org's
	// EditBackofficeThemePreference RPC.
	OrgEditBackofficeThemePreferenceProcedure = "/api.v0alpha.Org/EditBackofficeThemePreference"
	// OrgGetBackofficeThemePreferenceProcedure is the fully-qualified name of the Org's
	// GetBackofficeThemePreference RPC.
	OrgGetBackofficeThemePreferenceProcedure = "/api.v0alpha.Org/GetBackofficeThemePreference"
	// OrgAcceptLinkbackRecordingTermsProcedure is the fully-qualified name of the Org's
	// AcceptLinkbackRecordingTerms RPC.
	OrgAcceptLinkbackRecordingTermsProcedure = "/api.v0alpha.Org/AcceptLinkbackRecordingTerms"
	// OrgLinkbackUpdateBroadcastTemplatesProcedure is the fully-qualified name of the Org's
	// LinkbackUpdateBroadcastTemplates RPC.
	OrgLinkbackUpdateBroadcastTemplatesProcedure = "/api.v0alpha.Org/LinkbackUpdateBroadcastTemplates"
	// OrgRecordEmailUnsubscribeAcknowledgementProcedure is the fully-qualified name of the Org's
	// RecordEmailUnsubscribeAcknowledgement RPC.
	OrgRecordEmailUnsubscribeAcknowledgementProcedure = "/api.v0alpha.Org/RecordEmailUnsubscribeAcknowledgement"
	// OrgClearEmailUnsubscribeAcknowledgementProcedure is the fully-qualified name of the Org's
	// ClearEmailUnsubscribeAcknowledgement RPC.
	OrgClearEmailUnsubscribeAcknowledgementProcedure = "/api.v0alpha.Org/ClearEmailUnsubscribeAcknowledgement"
	// OrgCreateWebLinkTemplateProcedure is the fully-qualified name of the Org's CreateWebLinkTemplate
	// RPC.
	OrgCreateWebLinkTemplateProcedure = "/api.v0alpha.Org/CreateWebLinkTemplate"
	// OrgListWebLinkTemplatesProcedure is the fully-qualified name of the Org's ListWebLinkTemplates
	// RPC.
	OrgListWebLinkTemplatesProcedure = "/api.v0alpha.Org/ListWebLinkTemplates"
	// OrgGetWebLinkTemplateProcedure is the fully-qualified name of the Org's GetWebLinkTemplate RPC.
	OrgGetWebLinkTemplateProcedure = "/api.v0alpha.Org/GetWebLinkTemplate"
	// OrgUpdateWebLinkTemplateProcedure is the fully-qualified name of the Org's UpdateWebLinkTemplate
	// RPC.
	OrgUpdateWebLinkTemplateProcedure = "/api.v0alpha.Org/UpdateWebLinkTemplate"
	// OrgDeleteWebLinkTemplateProcedure is the fully-qualified name of the Org's DeleteWebLinkTemplate
	// RPC.
	OrgDeleteWebLinkTemplateProcedure = "/api.v0alpha.Org/DeleteWebLinkTemplate"
	// OrgCreateAgentTriggerTemplateProcedure is the fully-qualified name of the Org's
	// CreateAgentTriggerTemplate RPC.
	OrgCreateAgentTriggerTemplateProcedure = "/api.v0alpha.Org/CreateAgentTriggerTemplate"
	// OrgListAgentTriggerTemplatesProcedure is the fully-qualified name of the Org's
	// ListAgentTriggerTemplates RPC.
	OrgListAgentTriggerTemplatesProcedure = "/api.v0alpha.Org/ListAgentTriggerTemplates"
	// OrgGetAgentTriggerTemplateProcedure is the fully-qualified name of the Org's
	// GetAgentTriggerTemplate RPC.
	OrgGetAgentTriggerTemplateProcedure = "/api.v0alpha.Org/GetAgentTriggerTemplate"
	// OrgUpdateAgentTriggerTemplateProcedure is the fully-qualified name of the Org's
	// UpdateAgentTriggerTemplate RPC.
	OrgUpdateAgentTriggerTemplateProcedure = "/api.v0alpha.Org/UpdateAgentTriggerTemplate"
	// OrgDeleteAgentTriggerTemplateProcedure is the fully-qualified name of the Org's
	// DeleteAgentTriggerTemplate RPC.
	OrgDeleteAgentTriggerTemplateProcedure = "/api.v0alpha.Org/DeleteAgentTriggerTemplate"
	// OrgCreateClientInfoDisplayTemplateProcedure is the fully-qualified name of the Org's
	// CreateClientInfoDisplayTemplate RPC.
	OrgCreateClientInfoDisplayTemplateProcedure = "/api.v0alpha.Org/CreateClientInfoDisplayTemplate"
	// OrgListClientInfoDisplayTemplatesProcedure is the fully-qualified name of the Org's
	// ListClientInfoDisplayTemplates RPC.
	OrgListClientInfoDisplayTemplatesProcedure = "/api.v0alpha.Org/ListClientInfoDisplayTemplates"
	// OrgUpdateClientInfoDisplayTemplateProcedure is the fully-qualified name of the Org's
	// UpdateClientInfoDisplayTemplate RPC.
	OrgUpdateClientInfoDisplayTemplateProcedure = "/api.v0alpha.Org/UpdateClientInfoDisplayTemplate"
	// OrgDeleteClientInfoDisplayTemplateProcedure is the fully-qualified name of the Org's
	// DeleteClientInfoDisplayTemplate RPC.
	OrgDeleteClientInfoDisplayTemplateProcedure = "/api.v0alpha.Org/DeleteClientInfoDisplayTemplate"
	// OrgGetClientInfoDisplayTemplateProcedure is the fully-qualified name of the Org's
	// GetClientInfoDisplayTemplate RPC.
	OrgGetClientInfoDisplayTemplateProcedure = "/api.v0alpha.Org/GetClientInfoDisplayTemplate"
	// OrgListAgentPauseCodesProcedure is the fully-qualified name of the Org's ListAgentPauseCodes RPC.
	OrgListAgentPauseCodesProcedure = "/api.v0alpha.Org/ListAgentPauseCodes"
	// OrgCreateAgentPauseCodeProcedure is the fully-qualified name of the Org's CreateAgentPauseCode
	// RPC.
	OrgCreateAgentPauseCodeProcedure = "/api.v0alpha.Org/CreateAgentPauseCode"
	// OrgUpdateAgentPauseCodeProcedure is the fully-qualified name of the Org's UpdateAgentPauseCode
	// RPC.
	OrgUpdateAgentPauseCodeProcedure = "/api.v0alpha.Org/UpdateAgentPauseCode"
	// OrgDeleteAgentPauseCodeProcedure is the fully-qualified name of the Org's DeleteAgentPauseCode
	// RPC.
	OrgDeleteAgentPauseCodeProcedure = "/api.v0alpha.Org/DeleteAgentPauseCode"
	// OrgListCustomReportFiltersProcedure is the fully-qualified name of the Org's
	// ListCustomReportFilters RPC.
	OrgListCustomReportFiltersProcedure = "/api.v0alpha.Org/ListCustomReportFilters"
	// OrgCreateCustomReportFilterProcedure is the fully-qualified name of the Org's
	// CreateCustomReportFilter RPC.
	OrgCreateCustomReportFilterProcedure = "/api.v0alpha.Org/CreateCustomReportFilter"
	// OrgUpdateCustomReportFilterProcedure is the fully-qualified name of the Org's
	// UpdateCustomReportFilter RPC.
	OrgUpdateCustomReportFilterProcedure = "/api.v0alpha.Org/UpdateCustomReportFilter"
	// OrgDeleteCustomReportFilterProcedure is the fully-qualified name of the Org's
	// DeleteCustomReportFilter RPC.
	OrgDeleteCustomReportFilterProcedure = "/api.v0alpha.Org/DeleteCustomReportFilter"
	// OrgListAgentResponseGroupsProcedure is the fully-qualified name of the Org's
	// ListAgentResponseGroups RPC.
	OrgListAgentResponseGroupsProcedure = "/api.v0alpha.Org/ListAgentResponseGroups"
	// OrgListLastTemplateElementsProcedure is the fully-qualified name of the Org's
	// ListLastTemplateElements RPC.
	OrgListLastTemplateElementsProcedure = "/api.v0alpha.Org/ListLastTemplateElements"
	// OrgListQueueConfigsProcedure is the fully-qualified name of the Org's ListQueueConfigs RPC.
	OrgListQueueConfigsProcedure = "/api.v0alpha.Org/ListQueueConfigs"
	// OrgDeleteQueueConfigProcedure is the fully-qualified name of the Org's DeleteQueueConfig RPC.
	OrgDeleteQueueConfigProcedure = "/api.v0alpha.Org/DeleteQueueConfig"
	// OrgGetQueueConfigProcedure is the fully-qualified name of the Org's GetQueueConfig RPC.
	OrgGetQueueConfigProcedure = "/api.v0alpha.Org/GetQueueConfig"
	// OrgCreateQueueConfigProcedure is the fully-qualified name of the Org's CreateQueueConfig RPC.
	OrgCreateQueueConfigProcedure = "/api.v0alpha.Org/CreateQueueConfig"
	// OrgUpdateQueueConfigProcedure is the fully-qualified name of the Org's UpdateQueueConfig RPC.
	OrgUpdateQueueConfigProcedure = "/api.v0alpha.Org/UpdateQueueConfig"
	// OrgCopyQueueConfigProcedure is the fully-qualified name of the Org's CopyQueueConfig RPC.
	OrgCopyQueueConfigProcedure = "/api.v0alpha.Org/CopyQueueConfig"
	// OrgGetAllQueueConfigSoundsProcedure is the fully-qualified name of the Org's
	// GetAllQueueConfigSounds RPC.
	OrgGetAllQueueConfigSoundsProcedure = "/api.v0alpha.Org/GetAllQueueConfigSounds"
	// OrgGetQueueConfigSoundProcedure is the fully-qualified name of the Org's GetQueueConfigSound RPC.
	OrgGetQueueConfigSoundProcedure = "/api.v0alpha.Org/GetQueueConfigSound"
	// OrgSetQueueConfigSoundProcedure is the fully-qualified name of the Org's SetQueueConfigSound RPC.
	OrgSetQueueConfigSoundProcedure = "/api.v0alpha.Org/SetQueueConfigSound"
	// OrgSetAllQueueConfigSoundsFromSourceProcedure is the fully-qualified name of the Org's
	// SetAllQueueConfigSoundsFromSource RPC.
	OrgSetAllQueueConfigSoundsFromSourceProcedure = "/api.v0alpha.Org/SetAllQueueConfigSoundsFromSource"
	// OrgGetUserBlockedProcedure is the fully-qualified name of the Org's GetUserBlocked RPC.
	OrgGetUserBlockedProcedure = "/api.v0alpha.Org/GetUserBlocked"
	// OrgUnblockUserProcedure is the fully-qualified name of the Org's UnblockUser RPC.
	OrgUnblockUserProcedure = "/api.v0alpha.Org/UnblockUser"
	// OrgListP3UnMigratedUsersProcedure is the fully-qualified name of the Org's ListP3UnMigratedUsers
	// RPC.
	OrgListP3UnMigratedUsersProcedure = "/api.v0alpha.Org/ListP3UnMigratedUsers"
	// OrgMigrateP3UserProcedure is the fully-qualified name of the Org's MigrateP3User RPC.
	OrgMigrateP3UserProcedure = "/api.v0alpha.Org/MigrateP3User"
	// OrgUpdateP3UserNameProcedure is the fully-qualified name of the Org's UpdateP3UserName RPC.
	OrgUpdateP3UserNameProcedure = "/api.v0alpha.Org/UpdateP3UserName"
	// OrgListOwnedUsersProcedure is the fully-qualified name of the Org's ListOwnedUsers RPC.
	OrgListOwnedUsersProcedure = "/api.v0alpha.Org/ListOwnedUsers"
	// OrgListOwnedOrgsProcedure is the fully-qualified name of the Org's ListOwnedOrgs RPC.
	OrgListOwnedOrgsProcedure = "/api.v0alpha.Org/ListOwnedOrgs"
	// OrgRemoveLoginStrikesProcedure is the fully-qualified name of the Org's RemoveLoginStrikes RPC.
	OrgRemoveLoginStrikesProcedure = "/api.v0alpha.Org/RemoveLoginStrikes"
	// OrgRemoveUserLoginStrikesProcedure is the fully-qualified name of the Org's
	// RemoveUserLoginStrikes RPC.
	OrgRemoveUserLoginStrikesProcedure = "/api.v0alpha.Org/RemoveUserLoginStrikes"
	// OrgListLoginHistoryProcedure is the fully-qualified name of the Org's ListLoginHistory RPC.
	OrgListLoginHistoryProcedure = "/api.v0alpha.Org/ListLoginHistory"
	// OrgUpdateP3UserSidsProcedure is the fully-qualified name of the Org's UpdateP3UserSids RPC.
	OrgUpdateP3UserSidsProcedure = "/api.v0alpha.Org/UpdateP3UserSids"
	// OrgCreateAuthConnectionProcedure is the fully-qualified name of the Org's CreateAuthConnection
	// RPC.
	OrgCreateAuthConnectionProcedure = "/api.v0alpha.Org/CreateAuthConnection"
	// OrgGetAuthConnectionSettingsProcedure is the fully-qualified name of the Org's
	// GetAuthConnectionSettings RPC.
	OrgGetAuthConnectionSettingsProcedure = "/api.v0alpha.Org/GetAuthConnectionSettings"
	// OrgUpdateAuthConnectionSettingsProcedure is the fully-qualified name of the Org's
	// UpdateAuthConnectionSettings RPC.
	OrgUpdateAuthConnectionSettingsProcedure = "/api.v0alpha.Org/UpdateAuthConnectionSettings"
	// OrgDeleteAuthConnectionProcedure is the fully-qualified name of the Org's DeleteAuthConnection
	// RPC.
	OrgDeleteAuthConnectionProcedure = "/api.v0alpha.Org/DeleteAuthConnection"
	// OrgGetUserSubscriptionProcedure is the fully-qualified name of the Org's GetUserSubscription RPC.
	OrgGetUserSubscriptionProcedure = "/api.v0alpha.Org/GetUserSubscription"
	// OrgAddUserSubscriptionProcedure is the fully-qualified name of the Org's AddUserSubscription RPC.
	OrgAddUserSubscriptionProcedure = "/api.v0alpha.Org/AddUserSubscription"
	// OrgRemoveUserSubscriptionProcedure is the fully-qualified name of the Org's
	// RemoveUserSubscription RPC.
	OrgRemoveUserSubscriptionProcedure = "/api.v0alpha.Org/RemoveUserSubscription"
	// OrgUpdateUserSubscriptionProcedure is the fully-qualified name of the Org's
	// UpdateUserSubscription RPC.
	OrgUpdateUserSubscriptionProcedure = "/api.v0alpha.Org/UpdateUserSubscription"
	// OrgListUserSubscriptionsProcedure is the fully-qualified name of the Org's ListUserSubscriptions
	// RPC.
	OrgListUserSubscriptionsProcedure = "/api.v0alpha.Org/ListUserSubscriptions"
	// OrgListOrgSubscriptionsProcedure is the fully-qualified name of the Org's ListOrgSubscriptions
	// RPC.
	OrgListOrgSubscriptionsProcedure = "/api.v0alpha.Org/ListOrgSubscriptions"
	// OrgGetSystemEnvironmentDetailsProcedure is the fully-qualified name of the Org's
	// GetSystemEnvironmentDetails RPC.
	OrgGetSystemEnvironmentDetailsProcedure = "/api.v0alpha.Org/GetSystemEnvironmentDetails"
	// OrgListAgentStatisticsTemplatesProcedure is the fully-qualified name of the Org's
	// ListAgentStatisticsTemplates RPC.
	OrgListAgentStatisticsTemplatesProcedure = "/api.v0alpha.Org/ListAgentStatisticsTemplates"
	// OrgCreateAgentStatisticsTemplateProcedure is the fully-qualified name of the Org's
	// CreateAgentStatisticsTemplate RPC.
	OrgCreateAgentStatisticsTemplateProcedure = "/api.v0alpha.Org/CreateAgentStatisticsTemplate"
	// OrgUpdateAgentStatisticsTemplateProcedure is the fully-qualified name of the Org's
	// UpdateAgentStatisticsTemplate RPC.
	OrgUpdateAgentStatisticsTemplateProcedure = "/api.v0alpha.Org/UpdateAgentStatisticsTemplate"
	// OrgDeleteAgentStatisticsTemplateProcedure is the fully-qualified name of the Org's
	// DeleteAgentStatisticsTemplate RPC.
	OrgDeleteAgentStatisticsTemplateProcedure = "/api.v0alpha.Org/DeleteAgentStatisticsTemplate"
)

// OrgClient is a client for the api.v0alpha.Org service.
type OrgClient interface {
	// Registers a new organization
	RegisterOrganization(context.Context, *connect_go.Request[v0alpha.RegisterOrganizationRequest]) (*connect_go.Response[v0alpha.RegisterOrganizationResponse], error)
	// Converts a standard organiztion to a manual one.
	// WARNING: this process cannot be reversed.
	ConvertOrgToManual(context.Context, *connect_go.Request[v0alpha.ConvertOrgToManualRequest]) (*connect_go.Response[v0alpha.ConvertOrgToManualResponse], error)
	// Updates an organization
	UpdateOrganization(context.Context, *connect_go.Request[v0alpha.UpdateOrganizationRequest]) (*connect_go.Response[v0alpha.UpdateOrganizationResponse], error)
	// Archives an organization. An archived organization effectively disappears, but isn't deleted.
	ArchiveOrganization(context.Context, *connect_go.Request[v0alpha.ArchiveOrganizationRequest]) (*connect_go.Response[v0alpha.ArchiveOrganizationResponse], error)
	// Restores an archived organization.
	UnArchiveOrganization(context.Context, *connect_go.Request[v0alpha.UnArchiveOrganizationRequest]) (*connect_go.Response[v0alpha.UnArchiveOrganizationResponse], error)
	// Returns the list of organizations that have been archived.
	ListArchivedOrganizations(context.Context, *connect_go.Request[v0alpha.ListArchivedOrganizationsRequest]) (*connect_go.Response[v0alpha.ListArchivedOrganizationsResponse], error)
	GetOrganizationProfile(context.Context, *connect_go.Request[v0alpha.GetOrganizationProfileRequest]) (*connect_go.Response[v0alpha.GetOrganizationProfileResponse], error)
	GetOrganizationProfileById(context.Context, *connect_go.Request[v0alpha.GetOrganizationProfileByIdRequest]) (*connect_go.Response[v0alpha.GetOrganizationProfileResponse], error)
	ListOrganizationDescriptions(context.Context, *connect_go.Request[v0alpha.ListOrganizationDescriptionsRequest]) (*connect_go.Response[v0alpha.ListOrganizationDescriptionsResponse], error)
	ListRegionalOrganizations(context.Context, *connect_go.Request[v0alpha.ListRegionalOrganizationsRequest]) (*connect_go.Response[v0alpha.ListRegionalOrganizationsResponse], error)
	// update an organizations owning organization.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	UpdateP3OwningOrg(context.Context, *connect_go.Request[v0alpha.UpdateP3OwningOrgRequest]) (*connect_go.Response[v0alpha.UpdateP3OwningOrgResponse], error)
	// gets the owning organiztion for the given org
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	GetP3OwningOrg(context.Context, *connect_go.Request[v0alpha.GetP3OwningOrgRequest]) (*connect_go.Response[v0alpha.GetP3OwningOrgResponse], error)
	ListOrganizationUserDescriptions(context.Context, *connect_go.Request[v0alpha.ListOrganizationUserDescriptionsRequest]) (*connect_go.Response[v0alpha.ListOrganizationUserDescriptionsResponse], error)
	ListUserDescriptions(context.Context, *connect_go.Request[v0alpha.ListUserDescriptionsRequest]) (*connect_go.ServerStreamForClient[v0alpha.ListUserDescriptionsResponse], error)
	GetUserDirectory(context.Context, *connect_go.Request[v0alpha.GetUserDirectoryRequest]) (*connect_go.Response[v0alpha.GetUserDirectoryResponse], error)
	// GetRegions takes nothing in the request and returns a list of all region names
	GetRegions(context.Context, *connect_go.Request[v0alpha.GetRegionsRequest]) (*connect_go.Response[v0alpha.GetRegionsResponse], error)
	GetUserDetails(context.Context, *connect_go.Request[v0alpha.GetUserDetailsRequest]) (*connect_go.Response[v0alpha.UserDetails], error)
	AdminGetUserDetails(context.Context, *connect_go.Request[v0alpha.AdminGetUserDetailsRequest]) (*connect_go.Response[v0alpha.UserDetails], error)
	GetAgentUsers(context.Context, *connect_go.Request[v0alpha.GetAgentUsersRequest]) (*connect_go.Response[v0alpha.GetAgentUsersResponse], error)
	// This is transitionary api. It will be removed when user api is available.
	// GetAgentSettings gets some agent settings as defined by the GetAgentSettingsRequest.
	// Required Permissions:
	// AGENT
	GetAgentSettings(context.Context, *connect_go.Request[v0alpha.GetAgentSettingsRequest]) (*connect_go.Response[v0alpha.GetAgentSettingsResponse], error)
	// GetAgentProfileGroup gets a single AgentProfileGroup by given ID
	// Required Permissions:
	// ORG_VIEW
	GetAgentProfileGroup(context.Context, *connect_go.Request[v0alpha.GetAgentProfileGroupRequest]) (*connect_go.Response[v0alpha.GetAgentProfileGroupResponse], error)
	// UpdateAgentProfileGroup updates an AgentProfileGroup. Can only update if user is in same org as AgentProfileGroup
	// Required Permissions:
	// ORG_EDIT
	UpdateAgentProfileGroup(context.Context, *connect_go.Request[v0alpha.UpdateAgentProfileGroupRequest]) (*connect_go.Response[v0alpha.UpdateAgentProfileGroupResponse], error)
	// CreateAgentProfileGroup creates an AgentProfileGroup. Can only create if user is in same org as AgentProfileGroup
	// Required Permissions:
	// ORG_EDIT
	CreateAgentProfileGroup(context.Context, *connect_go.Request[v0alpha.CreateAgentProfileGroupRequest]) (*connect_go.Response[v0alpha.CreateAgentProfileGroupResponse], error)
	// ListAgentProfileGroups lists all AgentProfileGroups for a given org
	// Required Permissions:
	// ORG_VIEW
	ListAgentProfileGroups(context.Context, *connect_go.Request[v0alpha.ListAgentProfileGroupsRequest]) (*connect_go.Response[v0alpha.ListAgentProfileGroupsResponse], error)
	// DeleteAgentProfileGroup deletes a single AgentProfileGroup by given ID. Can only delete if user is in same org as AgentProfileGroup
	// Required Permissions:
	// ORG_EDIT
	DeleteAgentProfileGroup(context.Context, *connect_go.Request[v0alpha.DeleteAgentProfileGroupRequest]) (*connect_go.Response[v0alpha.DeleteAgentProfileGroupResponse], error)
	// AssignAgentProfileGroups bulk assigns a list of users to a given AgentProfileGroup
	// Required Permissions:
	// ORG_EDIT
	AssignAgentProfileGroups(context.Context, *connect_go.Request[v0alpha.AssignAgentProfileGroupsRequest]) (*connect_go.Response[v0alpha.AssignAgentProfileGroupsResponse], error)
	// UpdateUser updates a user as defined by the UpdateUserRequest.
	// Required Permissions:
	// USER_EDIT if the user_id is given on the request.
	// NONE (TODO: create & use new perm) if the user_id is NOT given.
	//
	//	This will only the currently logged in user.
	//	Only some of the fields on the request message can be updated
	//	for the currently logged in user: time_zone, linkback_numbers,
	//	caller_ids, and default_app.
	UpdateUser(context.Context, *connect_go.Request[v0alpha.UpdateUserRequest]) (*connect_go.Response[v0alpha.UpdateUserResponse], error)
	// CreateUser creates a new user as defined by the CreateUserRequest
	// request message.
	// Required Permissions:
	// USER_CREATE, CUSTOMER_SUPPORT if adding to an org other than your own
	CreateUser(context.Context, *connect_go.Request[v0alpha.CreateUserRequest]) (*connect_go.Response[v0alpha.CreateUserResponse], error)
	// Creates a delegated user. This should only be called by an auth0 action.
	CreateDelegatedUser(context.Context, *connect_go.Request[v0alpha.CreateDelegatedUserRequest]) (*connect_go.Response[v0alpha.CreateDelegatedUserResponse], error)
	// UpdateUserPassword updates a users password to the
	// password given on the request message.
	// Required Permissions:
	// USER_EDIT if user_id was given on the request (Update another user's password)
	// USER_EDIT_PASSWORD if user_id is retrieved from token (Update your own password)
	UpdateUserPassword(context.Context, *connect_go.Request[v0alpha.UpdateUserPasswordRequest]) (*connect_go.Response[v0alpha.UpdateUserPasswordResponse], error)
	// updates the users PasswordResetRequired field to false.
	// this should only be called by an auth0 action.
	ResetUserRequirePasswordReset(context.Context, *connect_go.Request[v0alpha.ResetUserRequirePasswordResetRequest]) (*connect_go.Response[v0alpha.ResetUserRequirePasswordResetResponse], error)
	// Generate a password reset link for a user.
	// Required Permissions:
	//
	//	USER_EDIT_PASSWORD if user_id not given on request.
	//	USER_EDIT if user_id given on the request.
	//	CUSTOMER_SUPPORT if user_id & org_id given on request. User_id must be given if org_id is.
	GetUserPasswordResetLink(context.Context, *connect_go.Request[v0alpha.GetUserPasswordResetLinkRequest]) (*connect_go.Response[v0alpha.GetUserPasswordResetLinkResponse], error)
	// Returns whether or not the given user's email is verified.
	// Required Permissions:
	//
	//	USER_EDIT if org_id not given on request.
	//	CUSTOMER_SUPPORT if org_id given on request.
	GetUserEmailVerified(context.Context, *connect_go.Request[v0alpha.GetUserEmailVerifiedRequest]) (*connect_go.Response[v0alpha.GetUserEmailVerifiedResponse], error)
	// Sends a verfication email to the given users email.
	// Required Permissions:
	//
	//	USER_EDIT if org_id not given on request.
	//	CUSTOMER_SUPPORT if org_id given on request.
	SendUserVerificationEmail(context.Context, *connect_go.Request[v0alpha.SendUserVerificationEmailRequest]) (*connect_go.Response[v0alpha.SendUserVerificationEmailResponse], error)
	// Sets the given user's to verified without needing to send a verification email.
	// Required Permissions:
	//
	//	USER_EDIT if org_id not given on request.
	//	CUSTOMER_SUPPORT if org_id given on request.
	ManualUserEmailVerification(context.Context, *connect_go.Request[v0alpha.ManualUserEmailVerificationRequest]) (*connect_go.Response[v0alpha.ManualUserEmailVerificationResponse], error)
	// Authenticates impersonation and generates token to be used.
	// Required Permissions:
	// CUSTOMER_SUPPORT
	GetTempUserToken(context.Context, *connect_go.Request[v0alpha.GetTempUserTokenReq]) (*connect_go.Response[v0alpha.GetTempUserTokenRes], error)
	GetCountriesList(context.Context, *connect_go.Request[v0alpha.GetCountriesListRequest]) (*connect_go.Response[v0alpha.GetCountriesListResponse], error)
	GetAdminClientPreferences(context.Context, *connect_go.Request[v0alpha.GetAdminClientPreferencesRequest]) (*connect_go.Response[v0alpha.GetAdminClientPreferencesResponse], error)
	UpdateAdminClientPreferences(context.Context, *connect_go.Request[v0alpha.UpdateAdminClientPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateAdminClientPreferencesResponse], error)
	GetPermissions(context.Context, *connect_go.Request[v0alpha.GetPermissionsRequest]) (*connect_go.Response[v0alpha.GetPermissionsResponse], error)
	// RevokeAccountOwnerPermissionFromUser revokes the
	// account owner permission for the given user
	RevokeAccountOwnerPermissionFromUser(context.Context, *connect_go.Request[v0alpha.RevokeAccountOwnerPermissionFromUserRequest]) (*connect_go.Response[v0alpha.RevokeAccountOwnerPermissionFromUserResponse], error)
	// UpdateUserDisabled updates a specified user to disabled or enabled. A disabled user cannot log in.
	// Required Permissions:
	//   - USER_EDIT
	UpdateUserDisabled(context.Context, *connect_go.Request[v0alpha.UpdateUserDisabledRequest]) (*connect_go.Response[v0alpha.UpdateUserDisabledResponse], error)
	// UpdateBulkUsersDisabled updates every given user_id to be disabled or enabled. The returned list of updated_ids contains every id that was successfully updated.
	// Required Permissions:
	//   - USER_EDIT
	UpdateBulkUsersDisabled(context.Context, *connect_go.Request[v0alpha.UpdateBulkUsersDisabledRequest]) (*connect_go.Response[v0alpha.UpdateBulkUsersDisabledResponse], error)
	// Returns the billing data for the given org. Billing data
	// will only be included for countries present on the org's
	// allowed countries preference.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.InvalidArgument: The org_id on the request was invalid.
	//   - grpc.NotFound: The given org_id did not exist.
	//   - grpc.Internal: An unexpected error occurred while getting the orgs billing settings.
	GetOrgBillingSettings(context.Context, *connect_go.Request[v0alpha.GetOrgBillingSettingsRequest]) (*connect_go.Response[v0alpha.GetOrgBillingSettingsResponse], error)
	// Updates the given orgs billing settings as defined by the info
	// given on the request message. Only fields that are given on the
	// field mask will be updated.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.InvalidArgument: A field on the request was invalid.
	//   - grpc.NotFound: The given org_id did not exist.
	//   - grpc.Internal: An unexpected error occurred while updating the orgs billing settings.
	SetOrgBillingSettings(context.Context, *connect_go.Request[v0alpha.SetOrgBillingSettingsRequest]) (*connect_go.Response[v0alpha.SetOrgBillingSettingsResponse], error)
	// Adds a single billing region override for the given orgs billing settings.
	// If an override already exists for the given region it will be updated.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.InvalidArgument: A field on the request was invalid.
	//   - grpc.NotFound: The given org_id did not exist.
	//   - grpc.Internal: An unexpected error occurred while adding the override.
	AddOrgBillingOverride(context.Context, *connect_go.Request[v0alpha.AddOrgBillingOverrideRequest]) (*connect_go.Response[v0alpha.AddOrgBillingOverrideResponse], error)
	// Removes a single billing region override for the given orgs billing settings.
	// If the region override doesn't exist the rpcs will just do nothing.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.InvalidArgument: The given org_id was invalid.
	//   - grpc.NotFound: The given org_id did not exist.
	//   - grpc.Internal: An unexpected error occurred while removing the override.
	RemoveOrgBillingOverride(context.Context, *connect_go.Request[v0alpha.RemoveOrgBillingOverrideRequest]) (*connect_go.Response[v0alpha.RemoveOrgBillingOverrideResponse], error)
	// Returns the system default billing rates.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	GetSystemDefaultBillingRates(context.Context, *connect_go.Request[v0alpha.GetSystemDefaultBillingRatesRequest]) (*connect_go.Response[v0alpha.GetSystemDefaultBillingRatesResponse], error)
	// ListPermissionGroups returns the list of an org's permission groups.
	ListPermissionGroups(context.Context, *connect_go.Request[v0alpha.ListPermissionGroupsRequest]) (*connect_go.Response[v0alpha.ListPermissionGroupsResponse], error)
	// CreatePermissionGroup creates a new permission group for the caller's organization.
	CreatePermissionGroup(context.Context, *connect_go.Request[v0alpha.CreatePermissionGroupRequest]) (*connect_go.Response[v0alpha.CreatePermissionGroupResponse], error)
	// UpdatePermissionGroup updates a permission group by id for the caller's organization.
	UpdatePermissionGroup(context.Context, *connect_go.Request[v0alpha.UpdatePermissionGroupRequest]) (*connect_go.Response[v0alpha.UpdatePermissionGroupResponse], error)
	// DeletePermissionGroup deletes a permission group by id for the caller's organization.
	DeletePermissionGroup(context.Context, *connect_go.Request[v0alpha.DeletePermissionGroupRequest]) (*connect_go.Response[v0alpha.DeletePermissionGroupResponse], error)
	// Assigns a user to a acount owner permission group.
	AssignUserToAccountOwnerPermissionGroup(context.Context, *connect_go.Request[v0alpha.AssignUserToAccountOwnerPermissionGroupRequest]) (*connect_go.Response[v0alpha.AssignUserToAccountOwnerPermissionGroupResponse], error)
	// Assigns a permission group to another user.
	// Requires that all three of permission group, calling user, and user being assigned to be of the same organization.
	// Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
	AssignUserPermissionGroup(context.Context, *connect_go.Request[v0alpha.AssignUserPermissionGroupRequest]) (*connect_go.Response[v0alpha.AssignUserPermissionGroupResponse], error)
	// Assigns a permission group to multiple users.
	// Requires that all three of permission group, calling user, and user being assigned to be of the same organization.
	// Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
	AssignUsersPermissionGroup(context.Context, *connect_go.Request[v0alpha.AssignUsersPermissionGroupRequest]) (*connect_go.Response[v0alpha.AssignUsersPermissionGroupResponse], error)
	// Assigns permission group(s) to another user.
	// Requires that all three of permission group, calling user, and user being assigned to be of the same organization.
	// Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
	UpdateUserNeoPermissionGroups(context.Context, *connect_go.Request[v0alpha.UpdateUserNeoPermissionGroupsRequest]) (*connect_go.Response[v0alpha.UpdateUserNeoPermissionGroupsResponse], error)
	// Revokes a permission group from another user.
	// Requires that all three of permission group, calling user, and user being revoked to be of the same organization.
	// Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
	RevokeUserPermissionGroup(context.Context, *connect_go.Request[v0alpha.RevokeUserPermissionGroupRequest]) (*connect_go.Response[v0alpha.RevokeUserPermissionGroupResponse], error)
	// Revokes a permission group to multiple users.
	// Requires that all three of permission group, calling user, and user being revoked to be of the same organization.
	// Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
	RevokeUsersPermissionGroup(context.Context, *connect_go.Request[v0alpha.RevokeUsersPermissionGroupRequest]) (*connect_go.Response[v0alpha.RevokeUsersPermissionGroupResponse], error)
	// InitDefaultPermissionGroups initializes the default read only permission groups for the callers organization.
	// Idempotent call. Returns the default permission groups for the organization.
	InitDefaultPermissionGroups(context.Context, *connect_go.Request[v0alpha.InitDefaultPermissionGroupsRequest]) (*connect_go.Response[v0alpha.InitDefaultPermissionGroupsResponse], error)
	// Adds a single permission to an organization's Account Owner Group.
	AddPermissionToAccountOwnerPermissionGroup(context.Context, *connect_go.Request[v0alpha.AddPermissionToAccountOwnerPermissionGroupRequest]) (*connect_go.Response[v0alpha.AddPermissionToAccountOwnerPermissionGroupResponse], error)
	// Adds a single permission to an organization's Account Owner Group.
	RevokePermissionToAccountOwnerPermissionGroup(context.Context, *connect_go.Request[v0alpha.RevokePermissionToAccountOwnerPermissionGroupRequest]) (*connect_go.Response[v0alpha.RevokePermissionToAccountOwnerPermissionGroupResponse], error)
	// Adds a single permission to an organization's default Super User Group.
	// Required Permissions:
	//   - TCN_ADMIN_SETTINGS
	AddPermissionToOrgDefaultGroup(context.Context, *connect_go.Request[v0alpha.AddPermissionToOrgDefaultGroupRequest]) (*connect_go.Response[v0alpha.AddPermissionToOrgDefaultGroupResponse], error)
	// Removes a single permission from an organization's default Super User Group.
	// Required Permissions:
	//   - TCN_ADMIN_SETTINGS
	RemovePermissionFromOrgDefaultGroup(context.Context, *connect_go.Request[v0alpha.RemovePermissionFromOrgDefaultGroupRequest]) (*connect_go.Response[v0alpha.RemovePermissionFromOrgDefaultGroupResponse], error)
	// Returns an organization's default Super User Group.
	// Required Permissions:
	//   - TCN_ADMIN_SETTINGS
	GetOrgDefaultSuperUserGroup(context.Context, *connect_go.Request[v0alpha.GetOrgDefaultSuperUserGroupRequest]) (*connect_go.Response[v0alpha.GetOrgDefaultSuperUserGroupResponse], error)
	// ListP3PermissionGroups returns the list of an org's P3 permission groups.
	ListP3PermissionGroups(context.Context, *connect_go.Request[v0alpha.ListP3PermissionGroupsRequest]) (*connect_go.Response[v0alpha.ListP3PermissionGroupsResponse], error)
	// AddUserRegion to a Users Accessible Regions
	AddUserRegion(context.Context, *connect_go.Request[v0alpha.AddUserRegionRequest]) (*connect_go.Response[v0alpha.AddUserRegionResponse], error)
	// RemoveUserRegion from a Users Accessible Regions
	RemoveUserRegion(context.Context, *connect_go.Request[v0alpha.RemoveUserRegionRequest]) (*connect_go.Response[v0alpha.RemoveUserRegionResponse], error)
	// Creates new p3 permission group
	CreateP3PermissionGroup(context.Context, *connect_go.Request[v0alpha.CreateP3PermissionGroupRequest]) (*connect_go.Response[v0alpha.CreateP3PermissionGroupResponse], error)
	// Update p3 permission group
	UpdateP3PermissionGroup(context.Context, *connect_go.Request[v0alpha.UpdateP3PermissionGroupRequest]) (*connect_go.Response[v0alpha.UpdateP3PermissionGroupResponse], error)
	// Delete new p3 permission group
	DeleteP3PermissionGroup(context.Context, *connect_go.Request[v0alpha.DeleteP3PermissionGroupRequest]) (*connect_go.Response[v0alpha.DeleteP3PermissionGroupResponse], error)
	// Assign one or many users a p3 permission group
	AssignUsersP3PermissionGroup(context.Context, *connect_go.Request[v0alpha.AssignUsersP3PermissionGroupRequest]) (*connect_go.Response[v0alpha.AssignUsersP3PermissionGroupResponse], error)
	// AddLoginToUser Creates new login for a given user
	AddLoginToUser(context.Context, *connect_go.Request[v0alpha.AddLoginToUserRequest]) (*connect_go.Response[v0alpha.AddLoginToUserResponse], error)
	// Revoke a p3 permission group to another user(s).
	// Requires that permission group and user(s) being assigned to be of the same organization.
	// Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
	RevokeUsersP3PermissionGroup(context.Context, *connect_go.Request[v0alpha.RevokeUsersP3PermissionGroupRequest]) (*connect_go.Response[v0alpha.RevokeUsersP3PermissionGroupResponse], error)
	// GetContactPreferences returns all contact preferences for client TODO: will replace ContactList above
	GetContactPreferences(context.Context, *connect_go.Request[v0alpha.GetContactPreferencesRequest]) (*connect_go.Response[v0alpha.GetContactPreferencesResponse], error)
	// UpdateContactPreferences update fields for all contact preferences for client
	UpdateContactPreferences(context.Context, *connect_go.Request[v0alpha.UpdateContactPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateContactPreferencesResponse], error)
	// Returns all client compliance preferences
	GetCompliancePreferences(context.Context, *connect_go.Request[v0alpha.GetCompliancePreferencesRequest]) (*connect_go.Response[v0alpha.GetCompliancePreferencesResponse], error)
	// Updates all client Compliance preferences
	UpdateCompliancePreferences(context.Context, *connect_go.Request[v0alpha.UpdateCompliancePreferencesRequest]) (*connect_go.Response[v0alpha.UpdateCompliancePreferencesResponse], error)
	// GetAgentPreferences returns all client agent preferences
	GetAgentPreferences(context.Context, *connect_go.Request[v0alpha.GetAgentPreferencesRequest]) (*connect_go.Response[v0alpha.GetAgentPreferencesResponse], error)
	// UpdateAgentPreferences updates client agent preferences
	UpdateAgentPreferences(context.Context, *connect_go.Request[v0alpha.UpdateAgentPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateAgentPreferencesResponse], error)
	// GetOrganizationPreferences returns preferences for the organization tab
	GetOrganizationPreferences(context.Context, *connect_go.Request[v0alpha.GetOrganizationPreferencesRequest]) (*connect_go.Response[v0alpha.GetOrganizationPreferencesResponse], error)
	// UpdateOrganizationPreferences updates preferences for the organization tab
	UpdateOrganizationPreferences(context.Context, *connect_go.Request[v0alpha.UpdateOrganizationPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateOrganizationPreferencesResponse], error)
	// GetSchedulePreferences returns all schedule preferences for an org.
	GetSchedulePreferences(context.Context, *connect_go.Request[v0alpha.GetSchedulePreferencesRequest]) (*connect_go.Response[v0alpha.GetSchedulePreferencesResponse], error)
	// UpdateSchedulePreferences returns all schedule preferences for an org.
	UpdateSchedulePreferences(context.Context, *connect_go.Request[v0alpha.UpdateSchedulePreferencesRequest]) (*connect_go.Response[v0alpha.UpdateSchedulePreferencesResponse], error)
	// GetBusinessPreferences returns all business intelligence and associated analytic preferences
	GetBusinessPreferences(context.Context, *connect_go.Request[v0alpha.GetBusinessPreferencesRequest]) (*connect_go.Response[v0alpha.GetBusinessPreferencesResponse], error)
	// UpdateBusinessPreferences updates all business intelligence and associated analytic preferences
	UpdateBusinessPreferences(context.Context, *connect_go.Request[v0alpha.UpdateBusinessPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateBusinessPreferencesResponse], error)
	// GetEndOfDayPreferences returns a time (hour 1-24) for each day of the week.
	GetEndOfDayPreferences(context.Context, *connect_go.Request[v0alpha.GetEndOfDayPreferencesRequest]) (*connect_go.Response[v0alpha.GetEndOfDayPreferencesResponse], error)
	// UpdateEndOfDayPreferences update fields for a time (hour 1-24) for each day of the week.
	UpdateEndOfDayPreferences(context.Context, *connect_go.Request[v0alpha.UpdateEndOfDayPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateEndOfDayPreferencesResponse], error)
	// GetReportFilterPreferences returns preferences for the organization tab
	GetReportFilterPreferences(context.Context, *connect_go.Request[v0alpha.GetFilterPreferencesRequest]) (*connect_go.Response[v0alpha.GetFilterPreferencesResponse], error)
	// UpdateReportFilterPreferences updates preferences for the filter tab
	UpdateReportFilterPreferences(context.Context, *connect_go.Request[v0alpha.UpdateFilterPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateFilterPreferencesResponse], error)
	// GetPhonePreferences returns all phone and recording preferences for an org.
	GetPhonePreferences(context.Context, *connect_go.Request[v0alpha.GetPhonePreferencesRequest]) (*connect_go.Response[v0alpha.GetPhonePreferencesResponse], error)
	// UpdatePhonePreferences updates phone and recording preferences for an org.
	UpdatePhonePreferences(context.Context, *connect_go.Request[v0alpha.UpdatePhonePreferencesRequest]) (*connect_go.Response[v0alpha.UpdatePhonePreferencesResponse], error)
	// GetDashboardGeneralPreferences returns all dashboard general preferences for an org.
	GetDashboardGeneralPreferences(context.Context, *connect_go.Request[v0alpha.GetDashboardGeneralPreferencesRequest]) (*connect_go.Response[v0alpha.GetDashboardGeneralPreferencesResponse], error)
	// UpdateDashboardGeneralPreferences updates dashboard General preferences for an org.
	UpdateDashboardGeneralPreferences(context.Context, *connect_go.Request[v0alpha.UpdateDashboardGeneralPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateDashboardGeneralPreferencesResponse], error)
	// GetWebhookPreferences returns all webhook preferences for an org.
	GetWebhookPreferences(context.Context, *connect_go.Request[v0alpha.GetWebhookPreferencesRequest]) (*connect_go.Response[v0alpha.GetWebhookPreferencesResponse], error)
	// UpdateWebhookPreferences updates webhook preferences for an org.
	UpdateWebhookPreferences(context.Context, *connect_go.Request[v0alpha.UpdateWebhookPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateWebhookPreferencesResponse], error)
	// GetBroadcastPreferences returns all broadcast options for campaign preferences for an org.
	GetBroadcastPreferences(context.Context, *connect_go.Request[v0alpha.GetBroadcastPreferencesRequest]) (*connect_go.Response[v0alpha.GetBroadcastPreferencesResponse], error)
	// UpdateBroadcastPreferences updates broadcast options for campaign preferences for an org.
	UpdateBroadcastPreferences(context.Context, *connect_go.Request[v0alpha.UpdateBroadcastPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateBroadcastPreferencesResponse], error)
	// GetAuthenticationPreferences returns all authentication options for an org.
	GetAuthenticationPreferences(context.Context, *connect_go.Request[v0alpha.GetAuthenticationPreferencesRequest]) (*connect_go.Response[v0alpha.GetAuthenticationPreferencesResponse], error)
	// UpdateAuthenticationPreferences updates authentication preferences for an org.
	UpdateAuthenticationPreferences(context.Context, *connect_go.Request[v0alpha.UpdateAuthenticationPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateAuthenticationPreferencesResponse], error)
	// GetRecordingPreferences returns all recording options for an org.
	GetRecordingPreferences(context.Context, *connect_go.Request[v0alpha.GetRecordingPreferencesRequest]) (*connect_go.Response[v0alpha.GetRecordingPreferencesResponse], error)
	// UpdateRecordingPreferences updates Recording preferences for an org.
	UpdateRecordingPreferences(context.Context, *connect_go.Request[v0alpha.UpdateRecordingPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateRecordingPreferencesResponse], error)
	// GetDashboardQueuePreferences returns the Dashboard Queue table preferences.
	GetDashboardQueuePreferences(context.Context, *connect_go.Request[v0alpha.GetDashboardQueuePreferencesRequest]) (*connect_go.Response[v0alpha.GetDashboardQueuePreferencesResponse], error)
	// UpdateDashboardQueuePreferences updates the Dashboard Queue table preferences.
	UpdateDashboardQueuePreferences(context.Context, *connect_go.Request[v0alpha.UpdateDashboardQueuePreferencesRequest]) (*connect_go.Response[v0alpha.UpdateDashboardQueuePreferencesResponse], error)
	// GetAgentQuickViewPreferences returns the diplay templates for the client
	GetAgentQuickViewPreferences(context.Context, *connect_go.Request[v0alpha.GetAgentQuickViewPreferencesRequest]) (*connect_go.Response[v0alpha.GetAgentQuickViewPreferencesResponse], error)
	// GetVoiceAnalyticsPreferences returns the all preferences for voice analytics
	GetVoiceAnalyticsPreferences(context.Context, *connect_go.Request[v0alpha.GetVoiceAnalyticsPreferencesRequest]) (*connect_go.Response[v0alpha.GetVoiceAnalyticsPreferencesResponse], error)
	// GetVoiceAnalyticsPreferences updates the all preferences for voice analytics
	UpdateVoiceAnalyticsPreferences(context.Context, *connect_go.Request[v0alpha.UpdateVoiceAnalyticsPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateVoiceAnalyticsPreferencesResponse], error)
	// GetScorecardsPreferences returns the all preferences for scorecards
	GetScorecardsPreferences(context.Context, *connect_go.Request[v0alpha.GetScorecardsPreferencesRequest]) (*connect_go.Response[v0alpha.GetScorecardsPreferencesResponse], error)
	// GetScorecardsPreferences updates the all preferences for scorecards
	UpdateScorecardsPreferences(context.Context, *connect_go.Request[v0alpha.UpdateScorecardsPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateScorecardsPreferencesResponse], error)
	// GetEmailSmsPreferences returns the all preferences for email and sms
	GetEmailSmsPreferences(context.Context, *connect_go.Request[v0alpha.GetEmailSmsPreferencesRequest]) (*connect_go.Response[v0alpha.GetEmailSmsPreferencesResponse], error)
	// GetEmailSmsPreferences updates the all preferences for email and sms
	UpdateEmailSmsPreferences(context.Context, *connect_go.Request[v0alpha.UpdateEmailSmsPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateEmailSmsPreferencesResponse], error)
	// EditAgentQuickViewPreferences return nil,error
	EditAgentQuickViewPreferences(context.Context, *connect_go.Request[v0alpha.EditAgentQuickViewPreferencesRequest]) (*connect_go.Response[v0alpha.EditAgentQuickViewPreferencesResponse], error)
	// EditBackofficeThemePreference returns nil, error
	// changes the Client Skin client property
	EditBackofficeThemePreference(context.Context, *connect_go.Request[v0alpha.EditBackofficeThemePreferenceRequest]) (*connect_go.Response[v0alpha.EditBackofficeThemePreferenceResponse], error)
	GetBackofficeThemePreference(context.Context, *connect_go.Request[v0alpha.GetBackofficeThemePreferenceRequest]) (*connect_go.Response[v0alpha.GetBackofficeThemePreferenceResponse], error)
	// AcceptLinkbackRecordingTerms controls acknowledgement for linkback recording terms and conditions
	AcceptLinkbackRecordingTerms(context.Context, *connect_go.Request[v0alpha.AcceptLinkbackRecordingTermsRequest]) (*connect_go.Response[v0alpha.AcceptLinkbackRecordingTermsResponse], error)
	// LinkbackUpdateBroadcastTemplates updates broadcast template action parameters pertaining to linkback recording
	LinkbackUpdateBroadcastTemplates(context.Context, *connect_go.Request[v0alpha.LinkbackUpdateBroadcastTemplatesRequest]) (*connect_go.Response[v0alpha.LinkbackUpdateBroadcastTemplatesResponse], error)
	// RecordEmailUnsubscribeAcknowledgement inserts an activity log when the client acknowledges responsibility
	// for their own email unsubscribe links.
	RecordEmailUnsubscribeAcknowledgement(context.Context, *connect_go.Request[v0alpha.RecordEmailUnsubscribeAcknowledgementRequest]) (*connect_go.Response[v0alpha.RecordEmailUnsubscribeAcknowledgementResponse], error)
	// ClearEmailUnsubscribeAcknowledgement inserts an activity log when the client clears acknowledgement for
	// their own email unsubscribe links.
	ClearEmailUnsubscribeAcknowledgement(context.Context, *connect_go.Request[v0alpha.ClearEmailUnsubscribeAcknowledgementRequest]) (*connect_go.Response[v0alpha.ClearEmailUnsubscribeAcknowledgementResponse], error)
	// Creates a new WebLinkTemplate as defined by request message CreateWebLinkTemplateRequest.
	// Required Permissions:
	//
	//	ORG_EDIT
	CreateWebLinkTemplate(context.Context, *connect_go.Request[v0alpha.CreateWebLinkTemplateRequest]) (*connect_go.Response[v0alpha.CreateWebLinkTemplateResponse], error)
	// List every WebLinkTemplate.
	// Required Permissions:
	//
	//	ORG_VIEW
	ListWebLinkTemplates(context.Context, *connect_go.Request[v0alpha.ListWebLinkTemplatesRequest]) (*connect_go.Response[v0alpha.ListWebLinkTemplatesResponse], error)
	// Get one WebLinkTemplate with the given web_link_template_id.
	// Required Permissions:
	//
	//	ORG_VIEW
	GetWebLinkTemplate(context.Context, *connect_go.Request[v0alpha.GetWebLinkTemplateRequest]) (*connect_go.Response[v0alpha.GetWebLinkTemplateResponse], error)
	// Updates the WebLinkTemplate with the given web_link_template_id.
	// Required Permissions:
	//
	//	ORG_EDIT
	UpdateWebLinkTemplate(context.Context, *connect_go.Request[v0alpha.UpdateWebLinkTemplateRequest]) (*connect_go.Response[v0alpha.UpdateWebLinkTemplateResponse], error)
	// Deletes the WebLinkTemplate with the given web_link_template_id.
	// Required Permissions:
	//
	//	ORG_EDIT
	DeleteWebLinkTemplate(context.Context, *connect_go.Request[v0alpha.DeleteWebLinkTemplateRequest]) (*connect_go.Response[v0alpha.DeleteWebLinkTemplateResponse], error)
	// Creates a new AgentTriggerTemplate as defined by request message CreateAgentTriggerTemplateRequest.
	// The id field on the request message will be generated as part of
	// this method. If the id field is set it WILL be overwritten.
	// Required Permissions:
	//
	//	ORG_EDIT
	CreateAgentTriggerTemplate(context.Context, *connect_go.Request[v0alpha.CreateAgentTriggerTemplateRequest]) (*connect_go.Response[v0alpha.CreateAgentTriggerTemplateResponse], error)
	// Returns a list of every AgentTriggerTemplate for the given
	// hunt_group_sid on the request.
	// Requiree Permissions:
	//
	//	ORG_VIEW
	ListAgentTriggerTemplates(context.Context, *connect_go.Request[v0alpha.ListAgentTriggerTemplatesRequest]) (*connect_go.Response[v0alpha.ListAgentTriggerTemplatesResponse], error)
	// Returns one AgentTriggerTemplate with the id given on the request message.
	// Required Permissions:
	//
	//	ORG_VIEW
	GetAgentTriggerTemplate(context.Context, *connect_go.Request[v0alpha.GetAgentTriggerTemplateRequest]) (*connect_go.Response[v0alpha.GetAgentTriggerTemplateResponse], error)
	// Updates the AgentTriggerTemplate with the id given on the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	UpdateAgentTriggerTemplate(context.Context, *connect_go.Request[v0alpha.UpdateAgentTriggerTemplateRequest]) (*connect_go.Response[v0alpha.UpdateAgentTriggerTemplateResponse], error)
	// Deletes the AgentTriggerTemplate with the id given on the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	DeleteAgentTriggerTemplate(context.Context, *connect_go.Request[v0alpha.DeleteAgentTriggerTemplateRequest]) (*connect_go.Response[v0alpha.DeleteAgentTriggerTemplateResponse], error)
	// Creates a new ClientInfoDisplayTemplate as defined by request
	// message CreateClientInfoDisplayRequest.
	// Required Permissions:
	//
	//	ORG_EDIT
	CreateClientInfoDisplayTemplate(context.Context, *connect_go.Request[v0alpha.CreateClientInfoDisplayTemplateRequest]) (*connect_go.Response[v0alpha.CreateClientInfoDisplayTemplateResponse], error)
	// Returns a list of every ClientInfoDisplayTemplate.
	// Required Permissions:
	//
	//	ORG_EDIT
	ListClientInfoDisplayTemplates(context.Context, *connect_go.Request[v0alpha.ListClientInfoDisplayTemplatesRequest]) (*connect_go.Response[v0alpha.ListClientInfoDisplayTemplatesResponse], error)
	// Updates the ClientInfoDisplayTemplate as defined by request
	// message UpdateClientIntoDisplayTemplateRequest.
	// Required Permissions:
	//
	//	ORG_VIEW
	UpdateClientInfoDisplayTemplate(context.Context, *connect_go.Request[v0alpha.UpdateClientInfoDisplayTemplateRequest]) (*connect_go.Response[v0alpha.UpdateClientInfoDisplayTemplateResponse], error)
	// Deletes the ClientInfoDisplayTemplate with the id given on the request
	// message.
	// Required Permissions:
	//
	//	ORG_EDIT
	DeleteClientInfoDisplayTemplate(context.Context, *connect_go.Request[v0alpha.DeleteClientInfoDisplayTemplateRequest]) (*connect_go.Response[v0alpha.DeleteClientInfoDisplayTemplateResponse], error)
	// Returns one ClientInfoDisplayTemplate with the id given on the
	// request message.
	//
	//	Required Permissions:
	//	  ORG_VIEW
	GetClientInfoDisplayTemplate(context.Context, *connect_go.Request[v0alpha.GetClientInfoDisplayTemplateRequest]) (*connect_go.Response[v0alpha.GetClientInfoDisplayTemplateResponse], error)
	// Returns a slice of agent pause codes.
	ListAgentPauseCodes(context.Context, *connect_go.Request[v0alpha.ListAgentPauseCodesRequest]) (*connect_go.Response[v0alpha.ListAgentPauseCodesResponse], error)
	// Creates a new Agent Pause Code as defined by the request message.
	// Errors:
	//   - grpc.InvalidArgument: The pause_code field was not set, or the the pause_code.codes field is an empty list.
	//   - grpc.Internal: an error occurred while marshalling the pause_code into an xml string.
	CreateAgentPauseCode(context.Context, *connect_go.Request[v0alpha.CreateAgentPauseCodeRequest]) (*connect_go.Response[v0alpha.CreateAgentPauseCodeResponse], error)
	// Updates an Agent Pause Code with the xml_client_property_sid given on
	// the pause_code in the request message as defined by the other fields
	// on the pause_code message.
	// Required Permissions:
	//
	//	AGENT_MANAGEMENT
	//	Actual permission checked is ORG_EDIT??
	//
	// Errors:
	//   - grpc.InvalidArgument: The pause_code field was not set or the pause_code.codes field was an empty list.
	//   - grpc.Internal: an error occurred while marshalling the pause_code into an xml string.
	UpdateAgentPauseCode(context.Context, *connect_go.Request[v0alpha.UpdateAgentPauseCodeRequest]) (*connect_go.Response[v0alpha.UpdateAgentPauseCodeResponse], error)
	// Deletes an Agent Pause Code with the sid given on the request message.
	// Errors:
	//   - grpc.InvalidArgument: The xml_client_property_sid field is invalid.
	DeleteAgentPauseCode(context.Context, *connect_go.Request[v0alpha.DeleteAgentPauseCodeRequest]) (*connect_go.Response[v0alpha.DeleteAgentPauseCodeResponse], error)
	// Returns a slice of custom report filters belonging to client_sid.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.NotFound: There is no entry matching the requested client_sid.
	ListCustomReportFilters(context.Context, *connect_go.Request[v0alpha.ListCustomReportFiltersRequest]) (*connect_go.Response[v0alpha.ListCustomReportFiltersResponse], error)
	// Creates a new custom report filter as defined by the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.InvalidArgument: The custom report filter has an empty name or no filtering parameters.
	//   - grpc.Internal: An error occurred marshalling the custom report filter into an xml string.
	CreateCustomReportFilter(context.Context, *connect_go.Request[v0alpha.CreateCustomReportFilterRequest]) (*connect_go.Response[v0alpha.CreateCustomReportFilterResponse], error)
	// Updates a custom report filter with the requested xml_client_property_sid
	// with the report filter in the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.InvalidArgument: The pause_code field was not set or the pause_code.codes field was an empty list.
	//   - grpc.Internal: an error occurred while marshalling the pause_code into an xml string.
	UpdateCustomReportFilter(context.Context, *connect_go.Request[v0alpha.UpdateCustomReportFilterRequest]) (*connect_go.Response[v0alpha.UpdateCustomReportFilterResponse], error)
	// Deletes a custom report filter with the sid given on the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.InvalidArgument: The xml_client_property_sid field is invalid.
	DeleteCustomReportFilter(context.Context, *connect_go.Request[v0alpha.DeleteCustomReportFilterRequest]) (*connect_go.Response[v0alpha.DeleteCustomReportFilterResponse], error)
	// Returns a slice of hunt group scripts belonging to the client_sid.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.NotFound: There is no entry matching the requested client_sid.
	ListAgentResponseGroups(context.Context, *connect_go.Request[v0alpha.ListAgentResponseGroupsRequest]) (*connect_go.Response[v0alpha.ListAgentResponseGroupsResponse], error)
	// Returns a slice of last template element scripts belonging to the client_sid.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.NotFound: There is no entry matching the requested client_sid.
	ListLastTemplateElements(context.Context, *connect_go.Request[v0alpha.ListLastTemplateElementsRequest]) (*connect_go.Response[v0alpha.ListLastTemplateElementsResponse], error)
	// Lists the names of the custom queue configs.
	// Required Permissions:
	//
	//	ORG_VIEW (If @org_id is empty)
	//	CUSTOMER_SUPPORT (If @org_id is NOT empty)
	//
	// Errors:
	//   - grpc.Internal: An error occurred while getting the config names.
	//   - grpc.NotFound: The given @org_id was not found (if @org_id is NOT empty).
	ListQueueConfigs(context.Context, *connect_go.Request[v0alpha.ListQueueConfigsReq]) (*connect_go.Response[v0alpha.ListQueueConfigsRes], error)
	// Deletes a queue config with the given @client_sid and @config_name.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while removing the config.
	//   - grpc.InvalidArgument: the config_name was invalid.
	DeleteQueueConfig(context.Context, *connect_go.Request[v0alpha.DeleteQueueConfigReq]) (*connect_go.Response[v0alpha.DeleteQueueConfigRes], error)
	// Gets the details for the queue config for the given @client_sid with
	// the given @name. If @merge is true, the config data will be merged
	// with the default config data.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred getting the config data.
	//   - grpc.InvalidArgument: the given config name was invalid.
	GetQueueConfig(context.Context, *connect_go.Request[v0alpha.GetQueueConfigReq]) (*connect_go.Response[v0alpha.GetQueueConfigRes], error)
	// Creates a queue config as defined by the @config given
	// on the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while saving the config.
	//   - grpc.InvalidArgument: the given config was invalid.
	CreateQueueConfig(context.Context, *connect_go.Request[v0alpha.CreateQueueConfigReq]) (*connect_go.Response[v0alpha.CreateQueueConfigRes], error)
	// Updates a new queue config as defined by the @config given
	// on the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.NotFound: The name of the given config could not be found.
	//   - grpc.Internal: An unexpected error occurred while saving the config.
	//   - grpc.InvalidArgument: the given config was invalid.
	UpdateQueueConfig(context.Context, *connect_go.Request[v0alpha.UpdateQueueConfigReq]) (*connect_go.Response[v0alpha.UpdateQueueConfigRes], error)
	// Copies a queue config belonging to one organization to another.
	// The queue config with the @from_name will be copied from the
	// organization with the @from_org_id to the organization with the
	// @to_org_id under the new @to_name.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while copying the config.
	//   - grpc.InvalidArgument: A field on the request message was invalid.
	//   - grpc.NotFound: The @to_org_id, @from_org_id, or @from_name was not found.
	//   - grpc.AlreadyExists: The @to_name already exists for the @to_org_id.
	CopyQueueConfig(context.Context, *connect_go.Request[v0alpha.CopyQueueConfigReq]) (*connect_go.Response[v0alpha.CopyQueueConfigRes], error)
	// Returns the url of a downloadable zip file containing every
	// sound for the given queue config.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while zipping the files.
	//   - grpc.NotFound: The given queue config was not found.
	GetAllQueueConfigSounds(context.Context, *connect_go.Request[v0alpha.GetAllQueueConfigSoundsReq]) (*connect_go.Response[v0alpha.GetAllQueueConfigSoundsRes], error)
	// Returns the url of a downladable wav file for the given config's
	// sound matching the given sound enum. Leaving the config field empty
	// will look up the sound for the account default config.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurrec while getting the
	//     downloadable file url.
	//   - grpc.NotFound: The given queue config was not found or the sound
	//     was not found for the config.
	GetQueueConfigSound(context.Context, *connect_go.Request[v0alpha.GetQueueConfigSoundReq]) (*connect_go.Response[v0alpha.GetQueueConfigSoundRes], error)
	// Sets the given sound for the config to one of the uploaded
	// sound files in the clients upload folder matching the
	// given file_name on the request. Leaving the config field empty
	// will set the sound for the account default config.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while updating
	//     the configs sound.
	//   - gprc.NotFound: The given queue config was not found or the
	//     sound file was not found for the client.
	//   - grpc.InvalidArgument: The file_name on the request was invalid.
	SetQueueConfigSound(context.Context, *connect_go.Request[v0alpha.SetQueueConfigSoundReq]) (*connect_go.Response[v0alpha.SetQueueConfigSoundRes], error)
	// Sets every sound for a given config by copying them from
	// another config OR by copying them from a default sound set
	// identified by language and gender. Empty config names will be
	// treated as the account default config.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors
	//   - grpc.Internal: An unexpected error occurred while updating
	//     all sounds for the given to_config.
	//   - grpc.NotFound: The given to_config or from.config (if used)
	//     could not be found or the default sound set for the given
	//     gender/language identifier could not be found.
	//   - grpc.InvalidArgument: The to_config and from.config contained
	//     the same value. (If from.config was used)
	SetAllQueueConfigSoundsFromSource(context.Context, *connect_go.Request[v0alpha.SetAllQueueConfigSoundsFromSourceReq]) (*connect_go.Response[v0alpha.SetAllQueueConfigSoundsFromSourceRes], error)
	// Checks a user's blocked status.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while getting the user.
	//   - grpc.InvalidArgument: The user_id on the request was invalid.
	GetUserBlocked(context.Context, *connect_go.Request[v0alpha.GetUserBlockedRequest]) (*connect_go.Response[v0alpha.GetUserBlockedResponse], error)
	// Unblocks the given user.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while unblocking the user.
	//   - grpc.InvalidArgument: The user_id on the request was invalid.
	UnblockUser(context.Context, *connect_go.Request[v0alpha.UnblockUserRequest]) (*connect_go.Response[v0alpha.UnblockUserResponse], error)
	// List all users who only exist in skunk and have not yet been migrated
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	ListP3UnMigratedUsers(context.Context, *connect_go.Request[v0alpha.ListP3UnMigratedUsersRequest]) (*connect_go.Response[v0alpha.ListP3UnMigratedUsersResponse], error)
	// Migrates a login or agent from backoffice to firestore
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	MigrateP3User(context.Context, *connect_go.Request[v0alpha.MigrateP3UserRequest]) (*connect_go.Response[v0alpha.MigrateP3UserResponse], error)
	// Updates the username in skunk only for a agent or login
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	UpdateP3UserName(context.Context, *connect_go.Request[v0alpha.UpdateP3UserNameRequest]) (*connect_go.Response[v0alpha.UpdateP3UserNameResponse], error)
	// Gets all users under the p3 hierarchy
	// Required Permissions:
	//
	//	OWNING_ORG_IMITATION
	ListOwnedUsers(context.Context, *connect_go.Request[v0alpha.ListOwnedUsersRequest]) (*connect_go.Response[v0alpha.ListOwnedUsersResponse], error)
	// Gets all orgs under the p3 hierarchy
	// Required Permissions:
	// PERMISSION_ORG_VIEW
	ListOwnedOrgs(context.Context, *connect_go.Request[v0alpha.ListOwnedOrgsRequest]) (*connect_go.Response[v0alpha.ListOwnedOrgsResponse], error)
	// Removed login strike from list of given login_log_sids
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	RemoveLoginStrikes(context.Context, *connect_go.Request[v0alpha.RemoveLoginStrikesRequest]) (*connect_go.Response[v0alpha.RemoveLoginStrikesResponse], error)
	// Removed login strikes by user_id
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	RemoveUserLoginStrikes(context.Context, *connect_go.Request[v0alpha.RemoveUserLoginStrikesRequest]) (*connect_go.Response[v0alpha.RemoveUserLoginStrikesResponse], error)
	// Lists user login history by ip or user_id
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	ListLoginHistory(context.Context, *connect_go.Request[v0alpha.ListLoginHistoryRequest]) (*connect_go.Response[v0alpha.ListLoginHistoryResponse], error)
	// Updates a users agentsid and loginsid
	// Required Permissions:
	//
	//	TCN_ADMIN_SETTINGS
	UpdateP3UserSids(context.Context, *connect_go.Request[v0alpha.UpdateP3UserSidsRequest]) (*connect_go.Response[v0alpha.UpdateP3UserSidsResponse], error)
	// CreateAuthConnection creates a new auth0 connection.
	CreateAuthConnection(context.Context, *connect_go.Request[v0alpha.CreateAuthConnectionRequest]) (*connect_go.Response[v0alpha.CreateAuthConnectionResponse], error)
	// GetAuthConnectionSettings gets auth0 connection settings.
	GetAuthConnectionSettings(context.Context, *connect_go.Request[v0alpha.GetAuthConnectionSettingsRequest]) (*connect_go.Response[v0alpha.GetAuthConnectionSettingsResponse], error)
	// UpdateAuthConnectionSettings updates an existing auth0 connection settings.
	UpdateAuthConnectionSettings(context.Context, *connect_go.Request[v0alpha.UpdateAuthConnectionSettingsRequest]) (*connect_go.Response[v0alpha.UpdateAuthConnectionSettingsResponse], error)
	// DeleteAuthConnection removes the current orgs auth settings.
	DeleteAuthConnection(context.Context, *connect_go.Request[v0alpha.DeleteAuthConnectionRequest]) (*connect_go.Response[v0alpha.DeleteAuthConnectionResponse], error)
	// Gets a user subscription by id
	// Required Permissions:
	//
	//	ORG_VIEW if user id IS provided
	//	none if user id NOT provided
	GetUserSubscription(context.Context, *connect_go.Request[v0alpha.GetUserSubscriptionRequest]) (*connect_go.Response[v0alpha.GetUserSubscriptionResponse], error)
	// Adds a user subscription to users list of subscriptions
	// Required Permissions:
	//
	//	USER_EDIT if user id IS provided
	//	EDIT_USER_OPTIONS if user id NOT provided
	AddUserSubscription(context.Context, *connect_go.Request[v0alpha.AddUserSubscriptionRequest]) (*connect_go.Response[v0alpha.AddUserSubscriptionResponse], error)
	// Removes a user subscription from a users list of subscription
	// Required Permissions:
	//
	//	USER_EDIT if user id IS provided
	//	EDIT_USER_OPTIONS if user id NOT provided
	RemoveUserSubscription(context.Context, *connect_go.Request[v0alpha.RemoveUserSubscriptionRequest]) (*connect_go.Response[v0alpha.RemoveUserSubscriptionResponse], error)
	// Updates a user subscription
	// Required Permissions:
	//
	//	USER_EDIT if user id IS provided
	//	EDIT_USER_OPTIONS if user id NOT provided
	UpdateUserSubscription(context.Context, *connect_go.Request[v0alpha.UpdateUserSubscriptionRequest]) (*connect_go.Response[v0alpha.UpdateUserSubscriptionResponse], error)
	// Lists all of a users subscriptions
	// Required Permissions:
	//
	//	ORG_VIEW if user id IS provided
	//	none if user id NOT provided
	ListUserSubscriptions(context.Context, *connect_go.Request[v0alpha.ListUserSubscriptionsRequest]) (*connect_go.Response[v0alpha.ListUserSubscriptionsResponse], error)
	// Lists multiple users subscriptions by org. Optionally filters by event type.
	// Required Permissions:
	//
	//	ORG_VIEW
	ListOrgSubscriptions(context.Context, *connect_go.Request[v0alpha.ListOrgSubscriptionsRequest]) (*connect_go.Response[v0alpha.ListOrgSubscriptionsResponse], error)
	// Returns the systems current environment details
	// Required Permissions:
	//
	//	N/A
	GetSystemEnvironmentDetails(context.Context, *connect_go.Request[v0alpha.GetSystemEnvironmentDetailsRequest]) (*connect_go.Response[v0alpha.GetSystemEnvironmentDetailsResponse], error)
	// Returns a list of agent statistics templates belonging to client_sid.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.NotFound: There is no entry matching the requested client_sid.
	ListAgentStatisticsTemplates(context.Context, *connect_go.Request[v0alpha.ListAgentStatisticsTemplatesRequest]) (*connect_go.Response[v0alpha.ListAgentStatisticsTemplatesResponse], error)
	// Creates a new agent statistics template for the given client_sid.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.NotFound: The client_sid is not found.
	CreateAgentStatisticsTemplate(context.Context, *connect_go.Request[v0alpha.CreateAgentStatisticsTemplateRequest]) (*connect_go.Response[v0alpha.CreateAgentStatisticsTemplateResponse], error)
	// Updates an existing agent statistics template for the given client_sid.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.NotFound: The client_sid is not found.
	UpdateAgentStatisticsTemplate(context.Context, *connect_go.Request[v0alpha.UpdateAgentStatisticsTemplateRequest]) (*connect_go.Response[v0alpha.UpdateAgentStatisticsTemplateResponse], error)
	// Deletes an existing agent statistics template for the given client_sid.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.NotFound: The client_sid or agent statistics template is not found.
	DeleteAgentStatisticsTemplate(context.Context, *connect_go.Request[v0alpha.DeleteAgentStatisticsTemplateRequest]) (*connect_go.Response[v0alpha.DeleteAgentStatisticsTemplateResponse], error)
}

// NewOrgClient constructs a client for the api.v0alpha.Org service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrgClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) OrgClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &orgClient{
		registerOrganization: connect_go.NewClient[v0alpha.RegisterOrganizationRequest, v0alpha.RegisterOrganizationResponse](
			httpClient,
			baseURL+OrgRegisterOrganizationProcedure,
			opts...,
		),
		convertOrgToManual: connect_go.NewClient[v0alpha.ConvertOrgToManualRequest, v0alpha.ConvertOrgToManualResponse](
			httpClient,
			baseURL+OrgConvertOrgToManualProcedure,
			opts...,
		),
		updateOrganization: connect_go.NewClient[v0alpha.UpdateOrganizationRequest, v0alpha.UpdateOrganizationResponse](
			httpClient,
			baseURL+OrgUpdateOrganizationProcedure,
			opts...,
		),
		archiveOrganization: connect_go.NewClient[v0alpha.ArchiveOrganizationRequest, v0alpha.ArchiveOrganizationResponse](
			httpClient,
			baseURL+OrgArchiveOrganizationProcedure,
			opts...,
		),
		unArchiveOrganization: connect_go.NewClient[v0alpha.UnArchiveOrganizationRequest, v0alpha.UnArchiveOrganizationResponse](
			httpClient,
			baseURL+OrgUnArchiveOrganizationProcedure,
			opts...,
		),
		listArchivedOrganizations: connect_go.NewClient[v0alpha.ListArchivedOrganizationsRequest, v0alpha.ListArchivedOrganizationsResponse](
			httpClient,
			baseURL+OrgListArchivedOrganizationsProcedure,
			opts...,
		),
		getOrganizationProfile: connect_go.NewClient[v0alpha.GetOrganizationProfileRequest, v0alpha.GetOrganizationProfileResponse](
			httpClient,
			baseURL+OrgGetOrganizationProfileProcedure,
			opts...,
		),
		getOrganizationProfileById: connect_go.NewClient[v0alpha.GetOrganizationProfileByIdRequest, v0alpha.GetOrganizationProfileResponse](
			httpClient,
			baseURL+OrgGetOrganizationProfileByIdProcedure,
			opts...,
		),
		listOrganizationDescriptions: connect_go.NewClient[v0alpha.ListOrganizationDescriptionsRequest, v0alpha.ListOrganizationDescriptionsResponse](
			httpClient,
			baseURL+OrgListOrganizationDescriptionsProcedure,
			opts...,
		),
		listRegionalOrganizations: connect_go.NewClient[v0alpha.ListRegionalOrganizationsRequest, v0alpha.ListRegionalOrganizationsResponse](
			httpClient,
			baseURL+OrgListRegionalOrganizationsProcedure,
			opts...,
		),
		updateP3OwningOrg: connect_go.NewClient[v0alpha.UpdateP3OwningOrgRequest, v0alpha.UpdateP3OwningOrgResponse](
			httpClient,
			baseURL+OrgUpdateP3OwningOrgProcedure,
			opts...,
		),
		getP3OwningOrg: connect_go.NewClient[v0alpha.GetP3OwningOrgRequest, v0alpha.GetP3OwningOrgResponse](
			httpClient,
			baseURL+OrgGetP3OwningOrgProcedure,
			opts...,
		),
		listOrganizationUserDescriptions: connect_go.NewClient[v0alpha.ListOrganizationUserDescriptionsRequest, v0alpha.ListOrganizationUserDescriptionsResponse](
			httpClient,
			baseURL+OrgListOrganizationUserDescriptionsProcedure,
			opts...,
		),
		listUserDescriptions: connect_go.NewClient[v0alpha.ListUserDescriptionsRequest, v0alpha.ListUserDescriptionsResponse](
			httpClient,
			baseURL+OrgListUserDescriptionsProcedure,
			opts...,
		),
		getUserDirectory: connect_go.NewClient[v0alpha.GetUserDirectoryRequest, v0alpha.GetUserDirectoryResponse](
			httpClient,
			baseURL+OrgGetUserDirectoryProcedure,
			opts...,
		),
		getRegions: connect_go.NewClient[v0alpha.GetRegionsRequest, v0alpha.GetRegionsResponse](
			httpClient,
			baseURL+OrgGetRegionsProcedure,
			opts...,
		),
		getUserDetails: connect_go.NewClient[v0alpha.GetUserDetailsRequest, v0alpha.UserDetails](
			httpClient,
			baseURL+OrgGetUserDetailsProcedure,
			opts...,
		),
		adminGetUserDetails: connect_go.NewClient[v0alpha.AdminGetUserDetailsRequest, v0alpha.UserDetails](
			httpClient,
			baseURL+OrgAdminGetUserDetailsProcedure,
			opts...,
		),
		getAgentUsers: connect_go.NewClient[v0alpha.GetAgentUsersRequest, v0alpha.GetAgentUsersResponse](
			httpClient,
			baseURL+OrgGetAgentUsersProcedure,
			opts...,
		),
		getAgentSettings: connect_go.NewClient[v0alpha.GetAgentSettingsRequest, v0alpha.GetAgentSettingsResponse](
			httpClient,
			baseURL+OrgGetAgentSettingsProcedure,
			opts...,
		),
		getAgentProfileGroup: connect_go.NewClient[v0alpha.GetAgentProfileGroupRequest, v0alpha.GetAgentProfileGroupResponse](
			httpClient,
			baseURL+OrgGetAgentProfileGroupProcedure,
			opts...,
		),
		updateAgentProfileGroup: connect_go.NewClient[v0alpha.UpdateAgentProfileGroupRequest, v0alpha.UpdateAgentProfileGroupResponse](
			httpClient,
			baseURL+OrgUpdateAgentProfileGroupProcedure,
			opts...,
		),
		createAgentProfileGroup: connect_go.NewClient[v0alpha.CreateAgentProfileGroupRequest, v0alpha.CreateAgentProfileGroupResponse](
			httpClient,
			baseURL+OrgCreateAgentProfileGroupProcedure,
			opts...,
		),
		listAgentProfileGroups: connect_go.NewClient[v0alpha.ListAgentProfileGroupsRequest, v0alpha.ListAgentProfileGroupsResponse](
			httpClient,
			baseURL+OrgListAgentProfileGroupsProcedure,
			opts...,
		),
		deleteAgentProfileGroup: connect_go.NewClient[v0alpha.DeleteAgentProfileGroupRequest, v0alpha.DeleteAgentProfileGroupResponse](
			httpClient,
			baseURL+OrgDeleteAgentProfileGroupProcedure,
			opts...,
		),
		assignAgentProfileGroups: connect_go.NewClient[v0alpha.AssignAgentProfileGroupsRequest, v0alpha.AssignAgentProfileGroupsResponse](
			httpClient,
			baseURL+OrgAssignAgentProfileGroupsProcedure,
			opts...,
		),
		updateUser: connect_go.NewClient[v0alpha.UpdateUserRequest, v0alpha.UpdateUserResponse](
			httpClient,
			baseURL+OrgUpdateUserProcedure,
			opts...,
		),
		createUser: connect_go.NewClient[v0alpha.CreateUserRequest, v0alpha.CreateUserResponse](
			httpClient,
			baseURL+OrgCreateUserProcedure,
			opts...,
		),
		createDelegatedUser: connect_go.NewClient[v0alpha.CreateDelegatedUserRequest, v0alpha.CreateDelegatedUserResponse](
			httpClient,
			baseURL+OrgCreateDelegatedUserProcedure,
			opts...,
		),
		updateUserPassword: connect_go.NewClient[v0alpha.UpdateUserPasswordRequest, v0alpha.UpdateUserPasswordResponse](
			httpClient,
			baseURL+OrgUpdateUserPasswordProcedure,
			opts...,
		),
		resetUserRequirePasswordReset: connect_go.NewClient[v0alpha.ResetUserRequirePasswordResetRequest, v0alpha.ResetUserRequirePasswordResetResponse](
			httpClient,
			baseURL+OrgResetUserRequirePasswordResetProcedure,
			opts...,
		),
		getUserPasswordResetLink: connect_go.NewClient[v0alpha.GetUserPasswordResetLinkRequest, v0alpha.GetUserPasswordResetLinkResponse](
			httpClient,
			baseURL+OrgGetUserPasswordResetLinkProcedure,
			opts...,
		),
		getUserEmailVerified: connect_go.NewClient[v0alpha.GetUserEmailVerifiedRequest, v0alpha.GetUserEmailVerifiedResponse](
			httpClient,
			baseURL+OrgGetUserEmailVerifiedProcedure,
			opts...,
		),
		sendUserVerificationEmail: connect_go.NewClient[v0alpha.SendUserVerificationEmailRequest, v0alpha.SendUserVerificationEmailResponse](
			httpClient,
			baseURL+OrgSendUserVerificationEmailProcedure,
			opts...,
		),
		manualUserEmailVerification: connect_go.NewClient[v0alpha.ManualUserEmailVerificationRequest, v0alpha.ManualUserEmailVerificationResponse](
			httpClient,
			baseURL+OrgManualUserEmailVerificationProcedure,
			opts...,
		),
		getTempUserToken: connect_go.NewClient[v0alpha.GetTempUserTokenReq, v0alpha.GetTempUserTokenRes](
			httpClient,
			baseURL+OrgGetTempUserTokenProcedure,
			opts...,
		),
		getCountriesList: connect_go.NewClient[v0alpha.GetCountriesListRequest, v0alpha.GetCountriesListResponse](
			httpClient,
			baseURL+OrgGetCountriesListProcedure,
			opts...,
		),
		getAdminClientPreferences: connect_go.NewClient[v0alpha.GetAdminClientPreferencesRequest, v0alpha.GetAdminClientPreferencesResponse](
			httpClient,
			baseURL+OrgGetAdminClientPreferencesProcedure,
			opts...,
		),
		updateAdminClientPreferences: connect_go.NewClient[v0alpha.UpdateAdminClientPreferencesRequest, v0alpha.UpdateAdminClientPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateAdminClientPreferencesProcedure,
			opts...,
		),
		getPermissions: connect_go.NewClient[v0alpha.GetPermissionsRequest, v0alpha.GetPermissionsResponse](
			httpClient,
			baseURL+OrgGetPermissionsProcedure,
			opts...,
		),
		revokeAccountOwnerPermissionFromUser: connect_go.NewClient[v0alpha.RevokeAccountOwnerPermissionFromUserRequest, v0alpha.RevokeAccountOwnerPermissionFromUserResponse](
			httpClient,
			baseURL+OrgRevokeAccountOwnerPermissionFromUserProcedure,
			opts...,
		),
		updateUserDisabled: connect_go.NewClient[v0alpha.UpdateUserDisabledRequest, v0alpha.UpdateUserDisabledResponse](
			httpClient,
			baseURL+OrgUpdateUserDisabledProcedure,
			opts...,
		),
		updateBulkUsersDisabled: connect_go.NewClient[v0alpha.UpdateBulkUsersDisabledRequest, v0alpha.UpdateBulkUsersDisabledResponse](
			httpClient,
			baseURL+OrgUpdateBulkUsersDisabledProcedure,
			opts...,
		),
		getOrgBillingSettings: connect_go.NewClient[v0alpha.GetOrgBillingSettingsRequest, v0alpha.GetOrgBillingSettingsResponse](
			httpClient,
			baseURL+OrgGetOrgBillingSettingsProcedure,
			opts...,
		),
		setOrgBillingSettings: connect_go.NewClient[v0alpha.SetOrgBillingSettingsRequest, v0alpha.SetOrgBillingSettingsResponse](
			httpClient,
			baseURL+OrgSetOrgBillingSettingsProcedure,
			opts...,
		),
		addOrgBillingOverride: connect_go.NewClient[v0alpha.AddOrgBillingOverrideRequest, v0alpha.AddOrgBillingOverrideResponse](
			httpClient,
			baseURL+OrgAddOrgBillingOverrideProcedure,
			opts...,
		),
		removeOrgBillingOverride: connect_go.NewClient[v0alpha.RemoveOrgBillingOverrideRequest, v0alpha.RemoveOrgBillingOverrideResponse](
			httpClient,
			baseURL+OrgRemoveOrgBillingOverrideProcedure,
			opts...,
		),
		getSystemDefaultBillingRates: connect_go.NewClient[v0alpha.GetSystemDefaultBillingRatesRequest, v0alpha.GetSystemDefaultBillingRatesResponse](
			httpClient,
			baseURL+OrgGetSystemDefaultBillingRatesProcedure,
			opts...,
		),
		listPermissionGroups: connect_go.NewClient[v0alpha.ListPermissionGroupsRequest, v0alpha.ListPermissionGroupsResponse](
			httpClient,
			baseURL+OrgListPermissionGroupsProcedure,
			opts...,
		),
		createPermissionGroup: connect_go.NewClient[v0alpha.CreatePermissionGroupRequest, v0alpha.CreatePermissionGroupResponse](
			httpClient,
			baseURL+OrgCreatePermissionGroupProcedure,
			opts...,
		),
		updatePermissionGroup: connect_go.NewClient[v0alpha.UpdatePermissionGroupRequest, v0alpha.UpdatePermissionGroupResponse](
			httpClient,
			baseURL+OrgUpdatePermissionGroupProcedure,
			opts...,
		),
		deletePermissionGroup: connect_go.NewClient[v0alpha.DeletePermissionGroupRequest, v0alpha.DeletePermissionGroupResponse](
			httpClient,
			baseURL+OrgDeletePermissionGroupProcedure,
			opts...,
		),
		assignUserToAccountOwnerPermissionGroup: connect_go.NewClient[v0alpha.AssignUserToAccountOwnerPermissionGroupRequest, v0alpha.AssignUserToAccountOwnerPermissionGroupResponse](
			httpClient,
			baseURL+OrgAssignUserToAccountOwnerPermissionGroupProcedure,
			opts...,
		),
		assignUserPermissionGroup: connect_go.NewClient[v0alpha.AssignUserPermissionGroupRequest, v0alpha.AssignUserPermissionGroupResponse](
			httpClient,
			baseURL+OrgAssignUserPermissionGroupProcedure,
			opts...,
		),
		assignUsersPermissionGroup: connect_go.NewClient[v0alpha.AssignUsersPermissionGroupRequest, v0alpha.AssignUsersPermissionGroupResponse](
			httpClient,
			baseURL+OrgAssignUsersPermissionGroupProcedure,
			opts...,
		),
		updateUserNeoPermissionGroups: connect_go.NewClient[v0alpha.UpdateUserNeoPermissionGroupsRequest, v0alpha.UpdateUserNeoPermissionGroupsResponse](
			httpClient,
			baseURL+OrgUpdateUserNeoPermissionGroupsProcedure,
			opts...,
		),
		revokeUserPermissionGroup: connect_go.NewClient[v0alpha.RevokeUserPermissionGroupRequest, v0alpha.RevokeUserPermissionGroupResponse](
			httpClient,
			baseURL+OrgRevokeUserPermissionGroupProcedure,
			opts...,
		),
		revokeUsersPermissionGroup: connect_go.NewClient[v0alpha.RevokeUsersPermissionGroupRequest, v0alpha.RevokeUsersPermissionGroupResponse](
			httpClient,
			baseURL+OrgRevokeUsersPermissionGroupProcedure,
			opts...,
		),
		initDefaultPermissionGroups: connect_go.NewClient[v0alpha.InitDefaultPermissionGroupsRequest, v0alpha.InitDefaultPermissionGroupsResponse](
			httpClient,
			baseURL+OrgInitDefaultPermissionGroupsProcedure,
			opts...,
		),
		addPermissionToAccountOwnerPermissionGroup: connect_go.NewClient[v0alpha.AddPermissionToAccountOwnerPermissionGroupRequest, v0alpha.AddPermissionToAccountOwnerPermissionGroupResponse](
			httpClient,
			baseURL+OrgAddPermissionToAccountOwnerPermissionGroupProcedure,
			opts...,
		),
		revokePermissionToAccountOwnerPermissionGroup: connect_go.NewClient[v0alpha.RevokePermissionToAccountOwnerPermissionGroupRequest, v0alpha.RevokePermissionToAccountOwnerPermissionGroupResponse](
			httpClient,
			baseURL+OrgRevokePermissionToAccountOwnerPermissionGroupProcedure,
			opts...,
		),
		addPermissionToOrgDefaultGroup: connect_go.NewClient[v0alpha.AddPermissionToOrgDefaultGroupRequest, v0alpha.AddPermissionToOrgDefaultGroupResponse](
			httpClient,
			baseURL+OrgAddPermissionToOrgDefaultGroupProcedure,
			opts...,
		),
		removePermissionFromOrgDefaultGroup: connect_go.NewClient[v0alpha.RemovePermissionFromOrgDefaultGroupRequest, v0alpha.RemovePermissionFromOrgDefaultGroupResponse](
			httpClient,
			baseURL+OrgRemovePermissionFromOrgDefaultGroupProcedure,
			opts...,
		),
		getOrgDefaultSuperUserGroup: connect_go.NewClient[v0alpha.GetOrgDefaultSuperUserGroupRequest, v0alpha.GetOrgDefaultSuperUserGroupResponse](
			httpClient,
			baseURL+OrgGetOrgDefaultSuperUserGroupProcedure,
			opts...,
		),
		listP3PermissionGroups: connect_go.NewClient[v0alpha.ListP3PermissionGroupsRequest, v0alpha.ListP3PermissionGroupsResponse](
			httpClient,
			baseURL+OrgListP3PermissionGroupsProcedure,
			opts...,
		),
		addUserRegion: connect_go.NewClient[v0alpha.AddUserRegionRequest, v0alpha.AddUserRegionResponse](
			httpClient,
			baseURL+OrgAddUserRegionProcedure,
			opts...,
		),
		removeUserRegion: connect_go.NewClient[v0alpha.RemoveUserRegionRequest, v0alpha.RemoveUserRegionResponse](
			httpClient,
			baseURL+OrgRemoveUserRegionProcedure,
			opts...,
		),
		createP3PermissionGroup: connect_go.NewClient[v0alpha.CreateP3PermissionGroupRequest, v0alpha.CreateP3PermissionGroupResponse](
			httpClient,
			baseURL+OrgCreateP3PermissionGroupProcedure,
			opts...,
		),
		updateP3PermissionGroup: connect_go.NewClient[v0alpha.UpdateP3PermissionGroupRequest, v0alpha.UpdateP3PermissionGroupResponse](
			httpClient,
			baseURL+OrgUpdateP3PermissionGroupProcedure,
			opts...,
		),
		deleteP3PermissionGroup: connect_go.NewClient[v0alpha.DeleteP3PermissionGroupRequest, v0alpha.DeleteP3PermissionGroupResponse](
			httpClient,
			baseURL+OrgDeleteP3PermissionGroupProcedure,
			opts...,
		),
		assignUsersP3PermissionGroup: connect_go.NewClient[v0alpha.AssignUsersP3PermissionGroupRequest, v0alpha.AssignUsersP3PermissionGroupResponse](
			httpClient,
			baseURL+OrgAssignUsersP3PermissionGroupProcedure,
			opts...,
		),
		addLoginToUser: connect_go.NewClient[v0alpha.AddLoginToUserRequest, v0alpha.AddLoginToUserResponse](
			httpClient,
			baseURL+OrgAddLoginToUserProcedure,
			opts...,
		),
		revokeUsersP3PermissionGroup: connect_go.NewClient[v0alpha.RevokeUsersP3PermissionGroupRequest, v0alpha.RevokeUsersP3PermissionGroupResponse](
			httpClient,
			baseURL+OrgRevokeUsersP3PermissionGroupProcedure,
			opts...,
		),
		getContactPreferences: connect_go.NewClient[v0alpha.GetContactPreferencesRequest, v0alpha.GetContactPreferencesResponse](
			httpClient,
			baseURL+OrgGetContactPreferencesProcedure,
			opts...,
		),
		updateContactPreferences: connect_go.NewClient[v0alpha.UpdateContactPreferencesRequest, v0alpha.UpdateContactPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateContactPreferencesProcedure,
			opts...,
		),
		getCompliancePreferences: connect_go.NewClient[v0alpha.GetCompliancePreferencesRequest, v0alpha.GetCompliancePreferencesResponse](
			httpClient,
			baseURL+OrgGetCompliancePreferencesProcedure,
			opts...,
		),
		updateCompliancePreferences: connect_go.NewClient[v0alpha.UpdateCompliancePreferencesRequest, v0alpha.UpdateCompliancePreferencesResponse](
			httpClient,
			baseURL+OrgUpdateCompliancePreferencesProcedure,
			opts...,
		),
		getAgentPreferences: connect_go.NewClient[v0alpha.GetAgentPreferencesRequest, v0alpha.GetAgentPreferencesResponse](
			httpClient,
			baseURL+OrgGetAgentPreferencesProcedure,
			opts...,
		),
		updateAgentPreferences: connect_go.NewClient[v0alpha.UpdateAgentPreferencesRequest, v0alpha.UpdateAgentPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateAgentPreferencesProcedure,
			opts...,
		),
		getOrganizationPreferences: connect_go.NewClient[v0alpha.GetOrganizationPreferencesRequest, v0alpha.GetOrganizationPreferencesResponse](
			httpClient,
			baseURL+OrgGetOrganizationPreferencesProcedure,
			opts...,
		),
		updateOrganizationPreferences: connect_go.NewClient[v0alpha.UpdateOrganizationPreferencesRequest, v0alpha.UpdateOrganizationPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateOrganizationPreferencesProcedure,
			opts...,
		),
		getSchedulePreferences: connect_go.NewClient[v0alpha.GetSchedulePreferencesRequest, v0alpha.GetSchedulePreferencesResponse](
			httpClient,
			baseURL+OrgGetSchedulePreferencesProcedure,
			opts...,
		),
		updateSchedulePreferences: connect_go.NewClient[v0alpha.UpdateSchedulePreferencesRequest, v0alpha.UpdateSchedulePreferencesResponse](
			httpClient,
			baseURL+OrgUpdateSchedulePreferencesProcedure,
			opts...,
		),
		getBusinessPreferences: connect_go.NewClient[v0alpha.GetBusinessPreferencesRequest, v0alpha.GetBusinessPreferencesResponse](
			httpClient,
			baseURL+OrgGetBusinessPreferencesProcedure,
			opts...,
		),
		updateBusinessPreferences: connect_go.NewClient[v0alpha.UpdateBusinessPreferencesRequest, v0alpha.UpdateBusinessPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateBusinessPreferencesProcedure,
			opts...,
		),
		getEndOfDayPreferences: connect_go.NewClient[v0alpha.GetEndOfDayPreferencesRequest, v0alpha.GetEndOfDayPreferencesResponse](
			httpClient,
			baseURL+OrgGetEndOfDayPreferencesProcedure,
			opts...,
		),
		updateEndOfDayPreferences: connect_go.NewClient[v0alpha.UpdateEndOfDayPreferencesRequest, v0alpha.UpdateEndOfDayPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateEndOfDayPreferencesProcedure,
			opts...,
		),
		getReportFilterPreferences: connect_go.NewClient[v0alpha.GetFilterPreferencesRequest, v0alpha.GetFilterPreferencesResponse](
			httpClient,
			baseURL+OrgGetReportFilterPreferencesProcedure,
			opts...,
		),
		updateReportFilterPreferences: connect_go.NewClient[v0alpha.UpdateFilterPreferencesRequest, v0alpha.UpdateFilterPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateReportFilterPreferencesProcedure,
			opts...,
		),
		getPhonePreferences: connect_go.NewClient[v0alpha.GetPhonePreferencesRequest, v0alpha.GetPhonePreferencesResponse](
			httpClient,
			baseURL+OrgGetPhonePreferencesProcedure,
			opts...,
		),
		updatePhonePreferences: connect_go.NewClient[v0alpha.UpdatePhonePreferencesRequest, v0alpha.UpdatePhonePreferencesResponse](
			httpClient,
			baseURL+OrgUpdatePhonePreferencesProcedure,
			opts...,
		),
		getDashboardGeneralPreferences: connect_go.NewClient[v0alpha.GetDashboardGeneralPreferencesRequest, v0alpha.GetDashboardGeneralPreferencesResponse](
			httpClient,
			baseURL+OrgGetDashboardGeneralPreferencesProcedure,
			opts...,
		),
		updateDashboardGeneralPreferences: connect_go.NewClient[v0alpha.UpdateDashboardGeneralPreferencesRequest, v0alpha.UpdateDashboardGeneralPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateDashboardGeneralPreferencesProcedure,
			opts...,
		),
		getWebhookPreferences: connect_go.NewClient[v0alpha.GetWebhookPreferencesRequest, v0alpha.GetWebhookPreferencesResponse](
			httpClient,
			baseURL+OrgGetWebhookPreferencesProcedure,
			opts...,
		),
		updateWebhookPreferences: connect_go.NewClient[v0alpha.UpdateWebhookPreferencesRequest, v0alpha.UpdateWebhookPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateWebhookPreferencesProcedure,
			opts...,
		),
		getBroadcastPreferences: connect_go.NewClient[v0alpha.GetBroadcastPreferencesRequest, v0alpha.GetBroadcastPreferencesResponse](
			httpClient,
			baseURL+OrgGetBroadcastPreferencesProcedure,
			opts...,
		),
		updateBroadcastPreferences: connect_go.NewClient[v0alpha.UpdateBroadcastPreferencesRequest, v0alpha.UpdateBroadcastPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateBroadcastPreferencesProcedure,
			opts...,
		),
		getAuthenticationPreferences: connect_go.NewClient[v0alpha.GetAuthenticationPreferencesRequest, v0alpha.GetAuthenticationPreferencesResponse](
			httpClient,
			baseURL+OrgGetAuthenticationPreferencesProcedure,
			opts...,
		),
		updateAuthenticationPreferences: connect_go.NewClient[v0alpha.UpdateAuthenticationPreferencesRequest, v0alpha.UpdateAuthenticationPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateAuthenticationPreferencesProcedure,
			opts...,
		),
		getRecordingPreferences: connect_go.NewClient[v0alpha.GetRecordingPreferencesRequest, v0alpha.GetRecordingPreferencesResponse](
			httpClient,
			baseURL+OrgGetRecordingPreferencesProcedure,
			opts...,
		),
		updateRecordingPreferences: connect_go.NewClient[v0alpha.UpdateRecordingPreferencesRequest, v0alpha.UpdateRecordingPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateRecordingPreferencesProcedure,
			opts...,
		),
		getDashboardQueuePreferences: connect_go.NewClient[v0alpha.GetDashboardQueuePreferencesRequest, v0alpha.GetDashboardQueuePreferencesResponse](
			httpClient,
			baseURL+OrgGetDashboardQueuePreferencesProcedure,
			opts...,
		),
		updateDashboardQueuePreferences: connect_go.NewClient[v0alpha.UpdateDashboardQueuePreferencesRequest, v0alpha.UpdateDashboardQueuePreferencesResponse](
			httpClient,
			baseURL+OrgUpdateDashboardQueuePreferencesProcedure,
			opts...,
		),
		getAgentQuickViewPreferences: connect_go.NewClient[v0alpha.GetAgentQuickViewPreferencesRequest, v0alpha.GetAgentQuickViewPreferencesResponse](
			httpClient,
			baseURL+OrgGetAgentQuickViewPreferencesProcedure,
			opts...,
		),
		getVoiceAnalyticsPreferences: connect_go.NewClient[v0alpha.GetVoiceAnalyticsPreferencesRequest, v0alpha.GetVoiceAnalyticsPreferencesResponse](
			httpClient,
			baseURL+OrgGetVoiceAnalyticsPreferencesProcedure,
			opts...,
		),
		updateVoiceAnalyticsPreferences: connect_go.NewClient[v0alpha.UpdateVoiceAnalyticsPreferencesRequest, v0alpha.UpdateVoiceAnalyticsPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateVoiceAnalyticsPreferencesProcedure,
			opts...,
		),
		getScorecardsPreferences: connect_go.NewClient[v0alpha.GetScorecardsPreferencesRequest, v0alpha.GetScorecardsPreferencesResponse](
			httpClient,
			baseURL+OrgGetScorecardsPreferencesProcedure,
			opts...,
		),
		updateScorecardsPreferences: connect_go.NewClient[v0alpha.UpdateScorecardsPreferencesRequest, v0alpha.UpdateScorecardsPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateScorecardsPreferencesProcedure,
			opts...,
		),
		getEmailSmsPreferences: connect_go.NewClient[v0alpha.GetEmailSmsPreferencesRequest, v0alpha.GetEmailSmsPreferencesResponse](
			httpClient,
			baseURL+OrgGetEmailSmsPreferencesProcedure,
			opts...,
		),
		updateEmailSmsPreferences: connect_go.NewClient[v0alpha.UpdateEmailSmsPreferencesRequest, v0alpha.UpdateEmailSmsPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateEmailSmsPreferencesProcedure,
			opts...,
		),
		editAgentQuickViewPreferences: connect_go.NewClient[v0alpha.EditAgentQuickViewPreferencesRequest, v0alpha.EditAgentQuickViewPreferencesResponse](
			httpClient,
			baseURL+OrgEditAgentQuickViewPreferencesProcedure,
			opts...,
		),
		editBackofficeThemePreference: connect_go.NewClient[v0alpha.EditBackofficeThemePreferenceRequest, v0alpha.EditBackofficeThemePreferenceResponse](
			httpClient,
			baseURL+OrgEditBackofficeThemePreferenceProcedure,
			opts...,
		),
		getBackofficeThemePreference: connect_go.NewClient[v0alpha.GetBackofficeThemePreferenceRequest, v0alpha.GetBackofficeThemePreferenceResponse](
			httpClient,
			baseURL+OrgGetBackofficeThemePreferenceProcedure,
			opts...,
		),
		acceptLinkbackRecordingTerms: connect_go.NewClient[v0alpha.AcceptLinkbackRecordingTermsRequest, v0alpha.AcceptLinkbackRecordingTermsResponse](
			httpClient,
			baseURL+OrgAcceptLinkbackRecordingTermsProcedure,
			opts...,
		),
		linkbackUpdateBroadcastTemplates: connect_go.NewClient[v0alpha.LinkbackUpdateBroadcastTemplatesRequest, v0alpha.LinkbackUpdateBroadcastTemplatesResponse](
			httpClient,
			baseURL+OrgLinkbackUpdateBroadcastTemplatesProcedure,
			opts...,
		),
		recordEmailUnsubscribeAcknowledgement: connect_go.NewClient[v0alpha.RecordEmailUnsubscribeAcknowledgementRequest, v0alpha.RecordEmailUnsubscribeAcknowledgementResponse](
			httpClient,
			baseURL+OrgRecordEmailUnsubscribeAcknowledgementProcedure,
			opts...,
		),
		clearEmailUnsubscribeAcknowledgement: connect_go.NewClient[v0alpha.ClearEmailUnsubscribeAcknowledgementRequest, v0alpha.ClearEmailUnsubscribeAcknowledgementResponse](
			httpClient,
			baseURL+OrgClearEmailUnsubscribeAcknowledgementProcedure,
			opts...,
		),
		createWebLinkTemplate: connect_go.NewClient[v0alpha.CreateWebLinkTemplateRequest, v0alpha.CreateWebLinkTemplateResponse](
			httpClient,
			baseURL+OrgCreateWebLinkTemplateProcedure,
			opts...,
		),
		listWebLinkTemplates: connect_go.NewClient[v0alpha.ListWebLinkTemplatesRequest, v0alpha.ListWebLinkTemplatesResponse](
			httpClient,
			baseURL+OrgListWebLinkTemplatesProcedure,
			opts...,
		),
		getWebLinkTemplate: connect_go.NewClient[v0alpha.GetWebLinkTemplateRequest, v0alpha.GetWebLinkTemplateResponse](
			httpClient,
			baseURL+OrgGetWebLinkTemplateProcedure,
			opts...,
		),
		updateWebLinkTemplate: connect_go.NewClient[v0alpha.UpdateWebLinkTemplateRequest, v0alpha.UpdateWebLinkTemplateResponse](
			httpClient,
			baseURL+OrgUpdateWebLinkTemplateProcedure,
			opts...,
		),
		deleteWebLinkTemplate: connect_go.NewClient[v0alpha.DeleteWebLinkTemplateRequest, v0alpha.DeleteWebLinkTemplateResponse](
			httpClient,
			baseURL+OrgDeleteWebLinkTemplateProcedure,
			opts...,
		),
		createAgentTriggerTemplate: connect_go.NewClient[v0alpha.CreateAgentTriggerTemplateRequest, v0alpha.CreateAgentTriggerTemplateResponse](
			httpClient,
			baseURL+OrgCreateAgentTriggerTemplateProcedure,
			opts...,
		),
		listAgentTriggerTemplates: connect_go.NewClient[v0alpha.ListAgentTriggerTemplatesRequest, v0alpha.ListAgentTriggerTemplatesResponse](
			httpClient,
			baseURL+OrgListAgentTriggerTemplatesProcedure,
			opts...,
		),
		getAgentTriggerTemplate: connect_go.NewClient[v0alpha.GetAgentTriggerTemplateRequest, v0alpha.GetAgentTriggerTemplateResponse](
			httpClient,
			baseURL+OrgGetAgentTriggerTemplateProcedure,
			opts...,
		),
		updateAgentTriggerTemplate: connect_go.NewClient[v0alpha.UpdateAgentTriggerTemplateRequest, v0alpha.UpdateAgentTriggerTemplateResponse](
			httpClient,
			baseURL+OrgUpdateAgentTriggerTemplateProcedure,
			opts...,
		),
		deleteAgentTriggerTemplate: connect_go.NewClient[v0alpha.DeleteAgentTriggerTemplateRequest, v0alpha.DeleteAgentTriggerTemplateResponse](
			httpClient,
			baseURL+OrgDeleteAgentTriggerTemplateProcedure,
			opts...,
		),
		createClientInfoDisplayTemplate: connect_go.NewClient[v0alpha.CreateClientInfoDisplayTemplateRequest, v0alpha.CreateClientInfoDisplayTemplateResponse](
			httpClient,
			baseURL+OrgCreateClientInfoDisplayTemplateProcedure,
			opts...,
		),
		listClientInfoDisplayTemplates: connect_go.NewClient[v0alpha.ListClientInfoDisplayTemplatesRequest, v0alpha.ListClientInfoDisplayTemplatesResponse](
			httpClient,
			baseURL+OrgListClientInfoDisplayTemplatesProcedure,
			opts...,
		),
		updateClientInfoDisplayTemplate: connect_go.NewClient[v0alpha.UpdateClientInfoDisplayTemplateRequest, v0alpha.UpdateClientInfoDisplayTemplateResponse](
			httpClient,
			baseURL+OrgUpdateClientInfoDisplayTemplateProcedure,
			opts...,
		),
		deleteClientInfoDisplayTemplate: connect_go.NewClient[v0alpha.DeleteClientInfoDisplayTemplateRequest, v0alpha.DeleteClientInfoDisplayTemplateResponse](
			httpClient,
			baseURL+OrgDeleteClientInfoDisplayTemplateProcedure,
			opts...,
		),
		getClientInfoDisplayTemplate: connect_go.NewClient[v0alpha.GetClientInfoDisplayTemplateRequest, v0alpha.GetClientInfoDisplayTemplateResponse](
			httpClient,
			baseURL+OrgGetClientInfoDisplayTemplateProcedure,
			opts...,
		),
		listAgentPauseCodes: connect_go.NewClient[v0alpha.ListAgentPauseCodesRequest, v0alpha.ListAgentPauseCodesResponse](
			httpClient,
			baseURL+OrgListAgentPauseCodesProcedure,
			opts...,
		),
		createAgentPauseCode: connect_go.NewClient[v0alpha.CreateAgentPauseCodeRequest, v0alpha.CreateAgentPauseCodeResponse](
			httpClient,
			baseURL+OrgCreateAgentPauseCodeProcedure,
			opts...,
		),
		updateAgentPauseCode: connect_go.NewClient[v0alpha.UpdateAgentPauseCodeRequest, v0alpha.UpdateAgentPauseCodeResponse](
			httpClient,
			baseURL+OrgUpdateAgentPauseCodeProcedure,
			opts...,
		),
		deleteAgentPauseCode: connect_go.NewClient[v0alpha.DeleteAgentPauseCodeRequest, v0alpha.DeleteAgentPauseCodeResponse](
			httpClient,
			baseURL+OrgDeleteAgentPauseCodeProcedure,
			opts...,
		),
		listCustomReportFilters: connect_go.NewClient[v0alpha.ListCustomReportFiltersRequest, v0alpha.ListCustomReportFiltersResponse](
			httpClient,
			baseURL+OrgListCustomReportFiltersProcedure,
			opts...,
		),
		createCustomReportFilter: connect_go.NewClient[v0alpha.CreateCustomReportFilterRequest, v0alpha.CreateCustomReportFilterResponse](
			httpClient,
			baseURL+OrgCreateCustomReportFilterProcedure,
			opts...,
		),
		updateCustomReportFilter: connect_go.NewClient[v0alpha.UpdateCustomReportFilterRequest, v0alpha.UpdateCustomReportFilterResponse](
			httpClient,
			baseURL+OrgUpdateCustomReportFilterProcedure,
			opts...,
		),
		deleteCustomReportFilter: connect_go.NewClient[v0alpha.DeleteCustomReportFilterRequest, v0alpha.DeleteCustomReportFilterResponse](
			httpClient,
			baseURL+OrgDeleteCustomReportFilterProcedure,
			opts...,
		),
		listAgentResponseGroups: connect_go.NewClient[v0alpha.ListAgentResponseGroupsRequest, v0alpha.ListAgentResponseGroupsResponse](
			httpClient,
			baseURL+OrgListAgentResponseGroupsProcedure,
			opts...,
		),
		listLastTemplateElements: connect_go.NewClient[v0alpha.ListLastTemplateElementsRequest, v0alpha.ListLastTemplateElementsResponse](
			httpClient,
			baseURL+OrgListLastTemplateElementsProcedure,
			opts...,
		),
		listQueueConfigs: connect_go.NewClient[v0alpha.ListQueueConfigsReq, v0alpha.ListQueueConfigsRes](
			httpClient,
			baseURL+OrgListQueueConfigsProcedure,
			opts...,
		),
		deleteQueueConfig: connect_go.NewClient[v0alpha.DeleteQueueConfigReq, v0alpha.DeleteQueueConfigRes](
			httpClient,
			baseURL+OrgDeleteQueueConfigProcedure,
			opts...,
		),
		getQueueConfig: connect_go.NewClient[v0alpha.GetQueueConfigReq, v0alpha.GetQueueConfigRes](
			httpClient,
			baseURL+OrgGetQueueConfigProcedure,
			opts...,
		),
		createQueueConfig: connect_go.NewClient[v0alpha.CreateQueueConfigReq, v0alpha.CreateQueueConfigRes](
			httpClient,
			baseURL+OrgCreateQueueConfigProcedure,
			opts...,
		),
		updateQueueConfig: connect_go.NewClient[v0alpha.UpdateQueueConfigReq, v0alpha.UpdateQueueConfigRes](
			httpClient,
			baseURL+OrgUpdateQueueConfigProcedure,
			opts...,
		),
		copyQueueConfig: connect_go.NewClient[v0alpha.CopyQueueConfigReq, v0alpha.CopyQueueConfigRes](
			httpClient,
			baseURL+OrgCopyQueueConfigProcedure,
			opts...,
		),
		getAllQueueConfigSounds: connect_go.NewClient[v0alpha.GetAllQueueConfigSoundsReq, v0alpha.GetAllQueueConfigSoundsRes](
			httpClient,
			baseURL+OrgGetAllQueueConfigSoundsProcedure,
			opts...,
		),
		getQueueConfigSound: connect_go.NewClient[v0alpha.GetQueueConfigSoundReq, v0alpha.GetQueueConfigSoundRes](
			httpClient,
			baseURL+OrgGetQueueConfigSoundProcedure,
			opts...,
		),
		setQueueConfigSound: connect_go.NewClient[v0alpha.SetQueueConfigSoundReq, v0alpha.SetQueueConfigSoundRes](
			httpClient,
			baseURL+OrgSetQueueConfigSoundProcedure,
			opts...,
		),
		setAllQueueConfigSoundsFromSource: connect_go.NewClient[v0alpha.SetAllQueueConfigSoundsFromSourceReq, v0alpha.SetAllQueueConfigSoundsFromSourceRes](
			httpClient,
			baseURL+OrgSetAllQueueConfigSoundsFromSourceProcedure,
			opts...,
		),
		getUserBlocked: connect_go.NewClient[v0alpha.GetUserBlockedRequest, v0alpha.GetUserBlockedResponse](
			httpClient,
			baseURL+OrgGetUserBlockedProcedure,
			opts...,
		),
		unblockUser: connect_go.NewClient[v0alpha.UnblockUserRequest, v0alpha.UnblockUserResponse](
			httpClient,
			baseURL+OrgUnblockUserProcedure,
			opts...,
		),
		listP3UnMigratedUsers: connect_go.NewClient[v0alpha.ListP3UnMigratedUsersRequest, v0alpha.ListP3UnMigratedUsersResponse](
			httpClient,
			baseURL+OrgListP3UnMigratedUsersProcedure,
			opts...,
		),
		migrateP3User: connect_go.NewClient[v0alpha.MigrateP3UserRequest, v0alpha.MigrateP3UserResponse](
			httpClient,
			baseURL+OrgMigrateP3UserProcedure,
			opts...,
		),
		updateP3UserName: connect_go.NewClient[v0alpha.UpdateP3UserNameRequest, v0alpha.UpdateP3UserNameResponse](
			httpClient,
			baseURL+OrgUpdateP3UserNameProcedure,
			opts...,
		),
		listOwnedUsers: connect_go.NewClient[v0alpha.ListOwnedUsersRequest, v0alpha.ListOwnedUsersResponse](
			httpClient,
			baseURL+OrgListOwnedUsersProcedure,
			opts...,
		),
		listOwnedOrgs: connect_go.NewClient[v0alpha.ListOwnedOrgsRequest, v0alpha.ListOwnedOrgsResponse](
			httpClient,
			baseURL+OrgListOwnedOrgsProcedure,
			opts...,
		),
		removeLoginStrikes: connect_go.NewClient[v0alpha.RemoveLoginStrikesRequest, v0alpha.RemoveLoginStrikesResponse](
			httpClient,
			baseURL+OrgRemoveLoginStrikesProcedure,
			opts...,
		),
		removeUserLoginStrikes: connect_go.NewClient[v0alpha.RemoveUserLoginStrikesRequest, v0alpha.RemoveUserLoginStrikesResponse](
			httpClient,
			baseURL+OrgRemoveUserLoginStrikesProcedure,
			opts...,
		),
		listLoginHistory: connect_go.NewClient[v0alpha.ListLoginHistoryRequest, v0alpha.ListLoginHistoryResponse](
			httpClient,
			baseURL+OrgListLoginHistoryProcedure,
			opts...,
		),
		updateP3UserSids: connect_go.NewClient[v0alpha.UpdateP3UserSidsRequest, v0alpha.UpdateP3UserSidsResponse](
			httpClient,
			baseURL+OrgUpdateP3UserSidsProcedure,
			opts...,
		),
		createAuthConnection: connect_go.NewClient[v0alpha.CreateAuthConnectionRequest, v0alpha.CreateAuthConnectionResponse](
			httpClient,
			baseURL+OrgCreateAuthConnectionProcedure,
			opts...,
		),
		getAuthConnectionSettings: connect_go.NewClient[v0alpha.GetAuthConnectionSettingsRequest, v0alpha.GetAuthConnectionSettingsResponse](
			httpClient,
			baseURL+OrgGetAuthConnectionSettingsProcedure,
			opts...,
		),
		updateAuthConnectionSettings: connect_go.NewClient[v0alpha.UpdateAuthConnectionSettingsRequest, v0alpha.UpdateAuthConnectionSettingsResponse](
			httpClient,
			baseURL+OrgUpdateAuthConnectionSettingsProcedure,
			opts...,
		),
		deleteAuthConnection: connect_go.NewClient[v0alpha.DeleteAuthConnectionRequest, v0alpha.DeleteAuthConnectionResponse](
			httpClient,
			baseURL+OrgDeleteAuthConnectionProcedure,
			opts...,
		),
		getUserSubscription: connect_go.NewClient[v0alpha.GetUserSubscriptionRequest, v0alpha.GetUserSubscriptionResponse](
			httpClient,
			baseURL+OrgGetUserSubscriptionProcedure,
			opts...,
		),
		addUserSubscription: connect_go.NewClient[v0alpha.AddUserSubscriptionRequest, v0alpha.AddUserSubscriptionResponse](
			httpClient,
			baseURL+OrgAddUserSubscriptionProcedure,
			opts...,
		),
		removeUserSubscription: connect_go.NewClient[v0alpha.RemoveUserSubscriptionRequest, v0alpha.RemoveUserSubscriptionResponse](
			httpClient,
			baseURL+OrgRemoveUserSubscriptionProcedure,
			opts...,
		),
		updateUserSubscription: connect_go.NewClient[v0alpha.UpdateUserSubscriptionRequest, v0alpha.UpdateUserSubscriptionResponse](
			httpClient,
			baseURL+OrgUpdateUserSubscriptionProcedure,
			opts...,
		),
		listUserSubscriptions: connect_go.NewClient[v0alpha.ListUserSubscriptionsRequest, v0alpha.ListUserSubscriptionsResponse](
			httpClient,
			baseURL+OrgListUserSubscriptionsProcedure,
			opts...,
		),
		listOrgSubscriptions: connect_go.NewClient[v0alpha.ListOrgSubscriptionsRequest, v0alpha.ListOrgSubscriptionsResponse](
			httpClient,
			baseURL+OrgListOrgSubscriptionsProcedure,
			opts...,
		),
		getSystemEnvironmentDetails: connect_go.NewClient[v0alpha.GetSystemEnvironmentDetailsRequest, v0alpha.GetSystemEnvironmentDetailsResponse](
			httpClient,
			baseURL+OrgGetSystemEnvironmentDetailsProcedure,
			opts...,
		),
		listAgentStatisticsTemplates: connect_go.NewClient[v0alpha.ListAgentStatisticsTemplatesRequest, v0alpha.ListAgentStatisticsTemplatesResponse](
			httpClient,
			baseURL+OrgListAgentStatisticsTemplatesProcedure,
			opts...,
		),
		createAgentStatisticsTemplate: connect_go.NewClient[v0alpha.CreateAgentStatisticsTemplateRequest, v0alpha.CreateAgentStatisticsTemplateResponse](
			httpClient,
			baseURL+OrgCreateAgentStatisticsTemplateProcedure,
			opts...,
		),
		updateAgentStatisticsTemplate: connect_go.NewClient[v0alpha.UpdateAgentStatisticsTemplateRequest, v0alpha.UpdateAgentStatisticsTemplateResponse](
			httpClient,
			baseURL+OrgUpdateAgentStatisticsTemplateProcedure,
			opts...,
		),
		deleteAgentStatisticsTemplate: connect_go.NewClient[v0alpha.DeleteAgentStatisticsTemplateRequest, v0alpha.DeleteAgentStatisticsTemplateResponse](
			httpClient,
			baseURL+OrgDeleteAgentStatisticsTemplateProcedure,
			opts...,
		),
	}
}

// orgClient implements OrgClient.
type orgClient struct {
	registerOrganization                          *connect_go.Client[v0alpha.RegisterOrganizationRequest, v0alpha.RegisterOrganizationResponse]
	convertOrgToManual                            *connect_go.Client[v0alpha.ConvertOrgToManualRequest, v0alpha.ConvertOrgToManualResponse]
	updateOrganization                            *connect_go.Client[v0alpha.UpdateOrganizationRequest, v0alpha.UpdateOrganizationResponse]
	archiveOrganization                           *connect_go.Client[v0alpha.ArchiveOrganizationRequest, v0alpha.ArchiveOrganizationResponse]
	unArchiveOrganization                         *connect_go.Client[v0alpha.UnArchiveOrganizationRequest, v0alpha.UnArchiveOrganizationResponse]
	listArchivedOrganizations                     *connect_go.Client[v0alpha.ListArchivedOrganizationsRequest, v0alpha.ListArchivedOrganizationsResponse]
	getOrganizationProfile                        *connect_go.Client[v0alpha.GetOrganizationProfileRequest, v0alpha.GetOrganizationProfileResponse]
	getOrganizationProfileById                    *connect_go.Client[v0alpha.GetOrganizationProfileByIdRequest, v0alpha.GetOrganizationProfileResponse]
	listOrganizationDescriptions                  *connect_go.Client[v0alpha.ListOrganizationDescriptionsRequest, v0alpha.ListOrganizationDescriptionsResponse]
	listRegionalOrganizations                     *connect_go.Client[v0alpha.ListRegionalOrganizationsRequest, v0alpha.ListRegionalOrganizationsResponse]
	updateP3OwningOrg                             *connect_go.Client[v0alpha.UpdateP3OwningOrgRequest, v0alpha.UpdateP3OwningOrgResponse]
	getP3OwningOrg                                *connect_go.Client[v0alpha.GetP3OwningOrgRequest, v0alpha.GetP3OwningOrgResponse]
	listOrganizationUserDescriptions              *connect_go.Client[v0alpha.ListOrganizationUserDescriptionsRequest, v0alpha.ListOrganizationUserDescriptionsResponse]
	listUserDescriptions                          *connect_go.Client[v0alpha.ListUserDescriptionsRequest, v0alpha.ListUserDescriptionsResponse]
	getUserDirectory                              *connect_go.Client[v0alpha.GetUserDirectoryRequest, v0alpha.GetUserDirectoryResponse]
	getRegions                                    *connect_go.Client[v0alpha.GetRegionsRequest, v0alpha.GetRegionsResponse]
	getUserDetails                                *connect_go.Client[v0alpha.GetUserDetailsRequest, v0alpha.UserDetails]
	adminGetUserDetails                           *connect_go.Client[v0alpha.AdminGetUserDetailsRequest, v0alpha.UserDetails]
	getAgentUsers                                 *connect_go.Client[v0alpha.GetAgentUsersRequest, v0alpha.GetAgentUsersResponse]
	getAgentSettings                              *connect_go.Client[v0alpha.GetAgentSettingsRequest, v0alpha.GetAgentSettingsResponse]
	getAgentProfileGroup                          *connect_go.Client[v0alpha.GetAgentProfileGroupRequest, v0alpha.GetAgentProfileGroupResponse]
	updateAgentProfileGroup                       *connect_go.Client[v0alpha.UpdateAgentProfileGroupRequest, v0alpha.UpdateAgentProfileGroupResponse]
	createAgentProfileGroup                       *connect_go.Client[v0alpha.CreateAgentProfileGroupRequest, v0alpha.CreateAgentProfileGroupResponse]
	listAgentProfileGroups                        *connect_go.Client[v0alpha.ListAgentProfileGroupsRequest, v0alpha.ListAgentProfileGroupsResponse]
	deleteAgentProfileGroup                       *connect_go.Client[v0alpha.DeleteAgentProfileGroupRequest, v0alpha.DeleteAgentProfileGroupResponse]
	assignAgentProfileGroups                      *connect_go.Client[v0alpha.AssignAgentProfileGroupsRequest, v0alpha.AssignAgentProfileGroupsResponse]
	updateUser                                    *connect_go.Client[v0alpha.UpdateUserRequest, v0alpha.UpdateUserResponse]
	createUser                                    *connect_go.Client[v0alpha.CreateUserRequest, v0alpha.CreateUserResponse]
	createDelegatedUser                           *connect_go.Client[v0alpha.CreateDelegatedUserRequest, v0alpha.CreateDelegatedUserResponse]
	updateUserPassword                            *connect_go.Client[v0alpha.UpdateUserPasswordRequest, v0alpha.UpdateUserPasswordResponse]
	resetUserRequirePasswordReset                 *connect_go.Client[v0alpha.ResetUserRequirePasswordResetRequest, v0alpha.ResetUserRequirePasswordResetResponse]
	getUserPasswordResetLink                      *connect_go.Client[v0alpha.GetUserPasswordResetLinkRequest, v0alpha.GetUserPasswordResetLinkResponse]
	getUserEmailVerified                          *connect_go.Client[v0alpha.GetUserEmailVerifiedRequest, v0alpha.GetUserEmailVerifiedResponse]
	sendUserVerificationEmail                     *connect_go.Client[v0alpha.SendUserVerificationEmailRequest, v0alpha.SendUserVerificationEmailResponse]
	manualUserEmailVerification                   *connect_go.Client[v0alpha.ManualUserEmailVerificationRequest, v0alpha.ManualUserEmailVerificationResponse]
	getTempUserToken                              *connect_go.Client[v0alpha.GetTempUserTokenReq, v0alpha.GetTempUserTokenRes]
	getCountriesList                              *connect_go.Client[v0alpha.GetCountriesListRequest, v0alpha.GetCountriesListResponse]
	getAdminClientPreferences                     *connect_go.Client[v0alpha.GetAdminClientPreferencesRequest, v0alpha.GetAdminClientPreferencesResponse]
	updateAdminClientPreferences                  *connect_go.Client[v0alpha.UpdateAdminClientPreferencesRequest, v0alpha.UpdateAdminClientPreferencesResponse]
	getPermissions                                *connect_go.Client[v0alpha.GetPermissionsRequest, v0alpha.GetPermissionsResponse]
	revokeAccountOwnerPermissionFromUser          *connect_go.Client[v0alpha.RevokeAccountOwnerPermissionFromUserRequest, v0alpha.RevokeAccountOwnerPermissionFromUserResponse]
	updateUserDisabled                            *connect_go.Client[v0alpha.UpdateUserDisabledRequest, v0alpha.UpdateUserDisabledResponse]
	updateBulkUsersDisabled                       *connect_go.Client[v0alpha.UpdateBulkUsersDisabledRequest, v0alpha.UpdateBulkUsersDisabledResponse]
	getOrgBillingSettings                         *connect_go.Client[v0alpha.GetOrgBillingSettingsRequest, v0alpha.GetOrgBillingSettingsResponse]
	setOrgBillingSettings                         *connect_go.Client[v0alpha.SetOrgBillingSettingsRequest, v0alpha.SetOrgBillingSettingsResponse]
	addOrgBillingOverride                         *connect_go.Client[v0alpha.AddOrgBillingOverrideRequest, v0alpha.AddOrgBillingOverrideResponse]
	removeOrgBillingOverride                      *connect_go.Client[v0alpha.RemoveOrgBillingOverrideRequest, v0alpha.RemoveOrgBillingOverrideResponse]
	getSystemDefaultBillingRates                  *connect_go.Client[v0alpha.GetSystemDefaultBillingRatesRequest, v0alpha.GetSystemDefaultBillingRatesResponse]
	listPermissionGroups                          *connect_go.Client[v0alpha.ListPermissionGroupsRequest, v0alpha.ListPermissionGroupsResponse]
	createPermissionGroup                         *connect_go.Client[v0alpha.CreatePermissionGroupRequest, v0alpha.CreatePermissionGroupResponse]
	updatePermissionGroup                         *connect_go.Client[v0alpha.UpdatePermissionGroupRequest, v0alpha.UpdatePermissionGroupResponse]
	deletePermissionGroup                         *connect_go.Client[v0alpha.DeletePermissionGroupRequest, v0alpha.DeletePermissionGroupResponse]
	assignUserToAccountOwnerPermissionGroup       *connect_go.Client[v0alpha.AssignUserToAccountOwnerPermissionGroupRequest, v0alpha.AssignUserToAccountOwnerPermissionGroupResponse]
	assignUserPermissionGroup                     *connect_go.Client[v0alpha.AssignUserPermissionGroupRequest, v0alpha.AssignUserPermissionGroupResponse]
	assignUsersPermissionGroup                    *connect_go.Client[v0alpha.AssignUsersPermissionGroupRequest, v0alpha.AssignUsersPermissionGroupResponse]
	updateUserNeoPermissionGroups                 *connect_go.Client[v0alpha.UpdateUserNeoPermissionGroupsRequest, v0alpha.UpdateUserNeoPermissionGroupsResponse]
	revokeUserPermissionGroup                     *connect_go.Client[v0alpha.RevokeUserPermissionGroupRequest, v0alpha.RevokeUserPermissionGroupResponse]
	revokeUsersPermissionGroup                    *connect_go.Client[v0alpha.RevokeUsersPermissionGroupRequest, v0alpha.RevokeUsersPermissionGroupResponse]
	initDefaultPermissionGroups                   *connect_go.Client[v0alpha.InitDefaultPermissionGroupsRequest, v0alpha.InitDefaultPermissionGroupsResponse]
	addPermissionToAccountOwnerPermissionGroup    *connect_go.Client[v0alpha.AddPermissionToAccountOwnerPermissionGroupRequest, v0alpha.AddPermissionToAccountOwnerPermissionGroupResponse]
	revokePermissionToAccountOwnerPermissionGroup *connect_go.Client[v0alpha.RevokePermissionToAccountOwnerPermissionGroupRequest, v0alpha.RevokePermissionToAccountOwnerPermissionGroupResponse]
	addPermissionToOrgDefaultGroup                *connect_go.Client[v0alpha.AddPermissionToOrgDefaultGroupRequest, v0alpha.AddPermissionToOrgDefaultGroupResponse]
	removePermissionFromOrgDefaultGroup           *connect_go.Client[v0alpha.RemovePermissionFromOrgDefaultGroupRequest, v0alpha.RemovePermissionFromOrgDefaultGroupResponse]
	getOrgDefaultSuperUserGroup                   *connect_go.Client[v0alpha.GetOrgDefaultSuperUserGroupRequest, v0alpha.GetOrgDefaultSuperUserGroupResponse]
	listP3PermissionGroups                        *connect_go.Client[v0alpha.ListP3PermissionGroupsRequest, v0alpha.ListP3PermissionGroupsResponse]
	addUserRegion                                 *connect_go.Client[v0alpha.AddUserRegionRequest, v0alpha.AddUserRegionResponse]
	removeUserRegion                              *connect_go.Client[v0alpha.RemoveUserRegionRequest, v0alpha.RemoveUserRegionResponse]
	createP3PermissionGroup                       *connect_go.Client[v0alpha.CreateP3PermissionGroupRequest, v0alpha.CreateP3PermissionGroupResponse]
	updateP3PermissionGroup                       *connect_go.Client[v0alpha.UpdateP3PermissionGroupRequest, v0alpha.UpdateP3PermissionGroupResponse]
	deleteP3PermissionGroup                       *connect_go.Client[v0alpha.DeleteP3PermissionGroupRequest, v0alpha.DeleteP3PermissionGroupResponse]
	assignUsersP3PermissionGroup                  *connect_go.Client[v0alpha.AssignUsersP3PermissionGroupRequest, v0alpha.AssignUsersP3PermissionGroupResponse]
	addLoginToUser                                *connect_go.Client[v0alpha.AddLoginToUserRequest, v0alpha.AddLoginToUserResponse]
	revokeUsersP3PermissionGroup                  *connect_go.Client[v0alpha.RevokeUsersP3PermissionGroupRequest, v0alpha.RevokeUsersP3PermissionGroupResponse]
	getContactPreferences                         *connect_go.Client[v0alpha.GetContactPreferencesRequest, v0alpha.GetContactPreferencesResponse]
	updateContactPreferences                      *connect_go.Client[v0alpha.UpdateContactPreferencesRequest, v0alpha.UpdateContactPreferencesResponse]
	getCompliancePreferences                      *connect_go.Client[v0alpha.GetCompliancePreferencesRequest, v0alpha.GetCompliancePreferencesResponse]
	updateCompliancePreferences                   *connect_go.Client[v0alpha.UpdateCompliancePreferencesRequest, v0alpha.UpdateCompliancePreferencesResponse]
	getAgentPreferences                           *connect_go.Client[v0alpha.GetAgentPreferencesRequest, v0alpha.GetAgentPreferencesResponse]
	updateAgentPreferences                        *connect_go.Client[v0alpha.UpdateAgentPreferencesRequest, v0alpha.UpdateAgentPreferencesResponse]
	getOrganizationPreferences                    *connect_go.Client[v0alpha.GetOrganizationPreferencesRequest, v0alpha.GetOrganizationPreferencesResponse]
	updateOrganizationPreferences                 *connect_go.Client[v0alpha.UpdateOrganizationPreferencesRequest, v0alpha.UpdateOrganizationPreferencesResponse]
	getSchedulePreferences                        *connect_go.Client[v0alpha.GetSchedulePreferencesRequest, v0alpha.GetSchedulePreferencesResponse]
	updateSchedulePreferences                     *connect_go.Client[v0alpha.UpdateSchedulePreferencesRequest, v0alpha.UpdateSchedulePreferencesResponse]
	getBusinessPreferences                        *connect_go.Client[v0alpha.GetBusinessPreferencesRequest, v0alpha.GetBusinessPreferencesResponse]
	updateBusinessPreferences                     *connect_go.Client[v0alpha.UpdateBusinessPreferencesRequest, v0alpha.UpdateBusinessPreferencesResponse]
	getEndOfDayPreferences                        *connect_go.Client[v0alpha.GetEndOfDayPreferencesRequest, v0alpha.GetEndOfDayPreferencesResponse]
	updateEndOfDayPreferences                     *connect_go.Client[v0alpha.UpdateEndOfDayPreferencesRequest, v0alpha.UpdateEndOfDayPreferencesResponse]
	getReportFilterPreferences                    *connect_go.Client[v0alpha.GetFilterPreferencesRequest, v0alpha.GetFilterPreferencesResponse]
	updateReportFilterPreferences                 *connect_go.Client[v0alpha.UpdateFilterPreferencesRequest, v0alpha.UpdateFilterPreferencesResponse]
	getPhonePreferences                           *connect_go.Client[v0alpha.GetPhonePreferencesRequest, v0alpha.GetPhonePreferencesResponse]
	updatePhonePreferences                        *connect_go.Client[v0alpha.UpdatePhonePreferencesRequest, v0alpha.UpdatePhonePreferencesResponse]
	getDashboardGeneralPreferences                *connect_go.Client[v0alpha.GetDashboardGeneralPreferencesRequest, v0alpha.GetDashboardGeneralPreferencesResponse]
	updateDashboardGeneralPreferences             *connect_go.Client[v0alpha.UpdateDashboardGeneralPreferencesRequest, v0alpha.UpdateDashboardGeneralPreferencesResponse]
	getWebhookPreferences                         *connect_go.Client[v0alpha.GetWebhookPreferencesRequest, v0alpha.GetWebhookPreferencesResponse]
	updateWebhookPreferences                      *connect_go.Client[v0alpha.UpdateWebhookPreferencesRequest, v0alpha.UpdateWebhookPreferencesResponse]
	getBroadcastPreferences                       *connect_go.Client[v0alpha.GetBroadcastPreferencesRequest, v0alpha.GetBroadcastPreferencesResponse]
	updateBroadcastPreferences                    *connect_go.Client[v0alpha.UpdateBroadcastPreferencesRequest, v0alpha.UpdateBroadcastPreferencesResponse]
	getAuthenticationPreferences                  *connect_go.Client[v0alpha.GetAuthenticationPreferencesRequest, v0alpha.GetAuthenticationPreferencesResponse]
	updateAuthenticationPreferences               *connect_go.Client[v0alpha.UpdateAuthenticationPreferencesRequest, v0alpha.UpdateAuthenticationPreferencesResponse]
	getRecordingPreferences                       *connect_go.Client[v0alpha.GetRecordingPreferencesRequest, v0alpha.GetRecordingPreferencesResponse]
	updateRecordingPreferences                    *connect_go.Client[v0alpha.UpdateRecordingPreferencesRequest, v0alpha.UpdateRecordingPreferencesResponse]
	getDashboardQueuePreferences                  *connect_go.Client[v0alpha.GetDashboardQueuePreferencesRequest, v0alpha.GetDashboardQueuePreferencesResponse]
	updateDashboardQueuePreferences               *connect_go.Client[v0alpha.UpdateDashboardQueuePreferencesRequest, v0alpha.UpdateDashboardQueuePreferencesResponse]
	getAgentQuickViewPreferences                  *connect_go.Client[v0alpha.GetAgentQuickViewPreferencesRequest, v0alpha.GetAgentQuickViewPreferencesResponse]
	getVoiceAnalyticsPreferences                  *connect_go.Client[v0alpha.GetVoiceAnalyticsPreferencesRequest, v0alpha.GetVoiceAnalyticsPreferencesResponse]
	updateVoiceAnalyticsPreferences               *connect_go.Client[v0alpha.UpdateVoiceAnalyticsPreferencesRequest, v0alpha.UpdateVoiceAnalyticsPreferencesResponse]
	getScorecardsPreferences                      *connect_go.Client[v0alpha.GetScorecardsPreferencesRequest, v0alpha.GetScorecardsPreferencesResponse]
	updateScorecardsPreferences                   *connect_go.Client[v0alpha.UpdateScorecardsPreferencesRequest, v0alpha.UpdateScorecardsPreferencesResponse]
	getEmailSmsPreferences                        *connect_go.Client[v0alpha.GetEmailSmsPreferencesRequest, v0alpha.GetEmailSmsPreferencesResponse]
	updateEmailSmsPreferences                     *connect_go.Client[v0alpha.UpdateEmailSmsPreferencesRequest, v0alpha.UpdateEmailSmsPreferencesResponse]
	editAgentQuickViewPreferences                 *connect_go.Client[v0alpha.EditAgentQuickViewPreferencesRequest, v0alpha.EditAgentQuickViewPreferencesResponse]
	editBackofficeThemePreference                 *connect_go.Client[v0alpha.EditBackofficeThemePreferenceRequest, v0alpha.EditBackofficeThemePreferenceResponse]
	getBackofficeThemePreference                  *connect_go.Client[v0alpha.GetBackofficeThemePreferenceRequest, v0alpha.GetBackofficeThemePreferenceResponse]
	acceptLinkbackRecordingTerms                  *connect_go.Client[v0alpha.AcceptLinkbackRecordingTermsRequest, v0alpha.AcceptLinkbackRecordingTermsResponse]
	linkbackUpdateBroadcastTemplates              *connect_go.Client[v0alpha.LinkbackUpdateBroadcastTemplatesRequest, v0alpha.LinkbackUpdateBroadcastTemplatesResponse]
	recordEmailUnsubscribeAcknowledgement         *connect_go.Client[v0alpha.RecordEmailUnsubscribeAcknowledgementRequest, v0alpha.RecordEmailUnsubscribeAcknowledgementResponse]
	clearEmailUnsubscribeAcknowledgement          *connect_go.Client[v0alpha.ClearEmailUnsubscribeAcknowledgementRequest, v0alpha.ClearEmailUnsubscribeAcknowledgementResponse]
	createWebLinkTemplate                         *connect_go.Client[v0alpha.CreateWebLinkTemplateRequest, v0alpha.CreateWebLinkTemplateResponse]
	listWebLinkTemplates                          *connect_go.Client[v0alpha.ListWebLinkTemplatesRequest, v0alpha.ListWebLinkTemplatesResponse]
	getWebLinkTemplate                            *connect_go.Client[v0alpha.GetWebLinkTemplateRequest, v0alpha.GetWebLinkTemplateResponse]
	updateWebLinkTemplate                         *connect_go.Client[v0alpha.UpdateWebLinkTemplateRequest, v0alpha.UpdateWebLinkTemplateResponse]
	deleteWebLinkTemplate                         *connect_go.Client[v0alpha.DeleteWebLinkTemplateRequest, v0alpha.DeleteWebLinkTemplateResponse]
	createAgentTriggerTemplate                    *connect_go.Client[v0alpha.CreateAgentTriggerTemplateRequest, v0alpha.CreateAgentTriggerTemplateResponse]
	listAgentTriggerTemplates                     *connect_go.Client[v0alpha.ListAgentTriggerTemplatesRequest, v0alpha.ListAgentTriggerTemplatesResponse]
	getAgentTriggerTemplate                       *connect_go.Client[v0alpha.GetAgentTriggerTemplateRequest, v0alpha.GetAgentTriggerTemplateResponse]
	updateAgentTriggerTemplate                    *connect_go.Client[v0alpha.UpdateAgentTriggerTemplateRequest, v0alpha.UpdateAgentTriggerTemplateResponse]
	deleteAgentTriggerTemplate                    *connect_go.Client[v0alpha.DeleteAgentTriggerTemplateRequest, v0alpha.DeleteAgentTriggerTemplateResponse]
	createClientInfoDisplayTemplate               *connect_go.Client[v0alpha.CreateClientInfoDisplayTemplateRequest, v0alpha.CreateClientInfoDisplayTemplateResponse]
	listClientInfoDisplayTemplates                *connect_go.Client[v0alpha.ListClientInfoDisplayTemplatesRequest, v0alpha.ListClientInfoDisplayTemplatesResponse]
	updateClientInfoDisplayTemplate               *connect_go.Client[v0alpha.UpdateClientInfoDisplayTemplateRequest, v0alpha.UpdateClientInfoDisplayTemplateResponse]
	deleteClientInfoDisplayTemplate               *connect_go.Client[v0alpha.DeleteClientInfoDisplayTemplateRequest, v0alpha.DeleteClientInfoDisplayTemplateResponse]
	getClientInfoDisplayTemplate                  *connect_go.Client[v0alpha.GetClientInfoDisplayTemplateRequest, v0alpha.GetClientInfoDisplayTemplateResponse]
	listAgentPauseCodes                           *connect_go.Client[v0alpha.ListAgentPauseCodesRequest, v0alpha.ListAgentPauseCodesResponse]
	createAgentPauseCode                          *connect_go.Client[v0alpha.CreateAgentPauseCodeRequest, v0alpha.CreateAgentPauseCodeResponse]
	updateAgentPauseCode                          *connect_go.Client[v0alpha.UpdateAgentPauseCodeRequest, v0alpha.UpdateAgentPauseCodeResponse]
	deleteAgentPauseCode                          *connect_go.Client[v0alpha.DeleteAgentPauseCodeRequest, v0alpha.DeleteAgentPauseCodeResponse]
	listCustomReportFilters                       *connect_go.Client[v0alpha.ListCustomReportFiltersRequest, v0alpha.ListCustomReportFiltersResponse]
	createCustomReportFilter                      *connect_go.Client[v0alpha.CreateCustomReportFilterRequest, v0alpha.CreateCustomReportFilterResponse]
	updateCustomReportFilter                      *connect_go.Client[v0alpha.UpdateCustomReportFilterRequest, v0alpha.UpdateCustomReportFilterResponse]
	deleteCustomReportFilter                      *connect_go.Client[v0alpha.DeleteCustomReportFilterRequest, v0alpha.DeleteCustomReportFilterResponse]
	listAgentResponseGroups                       *connect_go.Client[v0alpha.ListAgentResponseGroupsRequest, v0alpha.ListAgentResponseGroupsResponse]
	listLastTemplateElements                      *connect_go.Client[v0alpha.ListLastTemplateElementsRequest, v0alpha.ListLastTemplateElementsResponse]
	listQueueConfigs                              *connect_go.Client[v0alpha.ListQueueConfigsReq, v0alpha.ListQueueConfigsRes]
	deleteQueueConfig                             *connect_go.Client[v0alpha.DeleteQueueConfigReq, v0alpha.DeleteQueueConfigRes]
	getQueueConfig                                *connect_go.Client[v0alpha.GetQueueConfigReq, v0alpha.GetQueueConfigRes]
	createQueueConfig                             *connect_go.Client[v0alpha.CreateQueueConfigReq, v0alpha.CreateQueueConfigRes]
	updateQueueConfig                             *connect_go.Client[v0alpha.UpdateQueueConfigReq, v0alpha.UpdateQueueConfigRes]
	copyQueueConfig                               *connect_go.Client[v0alpha.CopyQueueConfigReq, v0alpha.CopyQueueConfigRes]
	getAllQueueConfigSounds                       *connect_go.Client[v0alpha.GetAllQueueConfigSoundsReq, v0alpha.GetAllQueueConfigSoundsRes]
	getQueueConfigSound                           *connect_go.Client[v0alpha.GetQueueConfigSoundReq, v0alpha.GetQueueConfigSoundRes]
	setQueueConfigSound                           *connect_go.Client[v0alpha.SetQueueConfigSoundReq, v0alpha.SetQueueConfigSoundRes]
	setAllQueueConfigSoundsFromSource             *connect_go.Client[v0alpha.SetAllQueueConfigSoundsFromSourceReq, v0alpha.SetAllQueueConfigSoundsFromSourceRes]
	getUserBlocked                                *connect_go.Client[v0alpha.GetUserBlockedRequest, v0alpha.GetUserBlockedResponse]
	unblockUser                                   *connect_go.Client[v0alpha.UnblockUserRequest, v0alpha.UnblockUserResponse]
	listP3UnMigratedUsers                         *connect_go.Client[v0alpha.ListP3UnMigratedUsersRequest, v0alpha.ListP3UnMigratedUsersResponse]
	migrateP3User                                 *connect_go.Client[v0alpha.MigrateP3UserRequest, v0alpha.MigrateP3UserResponse]
	updateP3UserName                              *connect_go.Client[v0alpha.UpdateP3UserNameRequest, v0alpha.UpdateP3UserNameResponse]
	listOwnedUsers                                *connect_go.Client[v0alpha.ListOwnedUsersRequest, v0alpha.ListOwnedUsersResponse]
	listOwnedOrgs                                 *connect_go.Client[v0alpha.ListOwnedOrgsRequest, v0alpha.ListOwnedOrgsResponse]
	removeLoginStrikes                            *connect_go.Client[v0alpha.RemoveLoginStrikesRequest, v0alpha.RemoveLoginStrikesResponse]
	removeUserLoginStrikes                        *connect_go.Client[v0alpha.RemoveUserLoginStrikesRequest, v0alpha.RemoveUserLoginStrikesResponse]
	listLoginHistory                              *connect_go.Client[v0alpha.ListLoginHistoryRequest, v0alpha.ListLoginHistoryResponse]
	updateP3UserSids                              *connect_go.Client[v0alpha.UpdateP3UserSidsRequest, v0alpha.UpdateP3UserSidsResponse]
	createAuthConnection                          *connect_go.Client[v0alpha.CreateAuthConnectionRequest, v0alpha.CreateAuthConnectionResponse]
	getAuthConnectionSettings                     *connect_go.Client[v0alpha.GetAuthConnectionSettingsRequest, v0alpha.GetAuthConnectionSettingsResponse]
	updateAuthConnectionSettings                  *connect_go.Client[v0alpha.UpdateAuthConnectionSettingsRequest, v0alpha.UpdateAuthConnectionSettingsResponse]
	deleteAuthConnection                          *connect_go.Client[v0alpha.DeleteAuthConnectionRequest, v0alpha.DeleteAuthConnectionResponse]
	getUserSubscription                           *connect_go.Client[v0alpha.GetUserSubscriptionRequest, v0alpha.GetUserSubscriptionResponse]
	addUserSubscription                           *connect_go.Client[v0alpha.AddUserSubscriptionRequest, v0alpha.AddUserSubscriptionResponse]
	removeUserSubscription                        *connect_go.Client[v0alpha.RemoveUserSubscriptionRequest, v0alpha.RemoveUserSubscriptionResponse]
	updateUserSubscription                        *connect_go.Client[v0alpha.UpdateUserSubscriptionRequest, v0alpha.UpdateUserSubscriptionResponse]
	listUserSubscriptions                         *connect_go.Client[v0alpha.ListUserSubscriptionsRequest, v0alpha.ListUserSubscriptionsResponse]
	listOrgSubscriptions                          *connect_go.Client[v0alpha.ListOrgSubscriptionsRequest, v0alpha.ListOrgSubscriptionsResponse]
	getSystemEnvironmentDetails                   *connect_go.Client[v0alpha.GetSystemEnvironmentDetailsRequest, v0alpha.GetSystemEnvironmentDetailsResponse]
	listAgentStatisticsTemplates                  *connect_go.Client[v0alpha.ListAgentStatisticsTemplatesRequest, v0alpha.ListAgentStatisticsTemplatesResponse]
	createAgentStatisticsTemplate                 *connect_go.Client[v0alpha.CreateAgentStatisticsTemplateRequest, v0alpha.CreateAgentStatisticsTemplateResponse]
	updateAgentStatisticsTemplate                 *connect_go.Client[v0alpha.UpdateAgentStatisticsTemplateRequest, v0alpha.UpdateAgentStatisticsTemplateResponse]
	deleteAgentStatisticsTemplate                 *connect_go.Client[v0alpha.DeleteAgentStatisticsTemplateRequest, v0alpha.DeleteAgentStatisticsTemplateResponse]
}

// RegisterOrganization calls api.v0alpha.Org.RegisterOrganization.
func (c *orgClient) RegisterOrganization(ctx context.Context, req *connect_go.Request[v0alpha.RegisterOrganizationRequest]) (*connect_go.Response[v0alpha.RegisterOrganizationResponse], error) {
	return c.registerOrganization.CallUnary(ctx, req)
}

// ConvertOrgToManual calls api.v0alpha.Org.ConvertOrgToManual.
func (c *orgClient) ConvertOrgToManual(ctx context.Context, req *connect_go.Request[v0alpha.ConvertOrgToManualRequest]) (*connect_go.Response[v0alpha.ConvertOrgToManualResponse], error) {
	return c.convertOrgToManual.CallUnary(ctx, req)
}

// UpdateOrganization calls api.v0alpha.Org.UpdateOrganization.
func (c *orgClient) UpdateOrganization(ctx context.Context, req *connect_go.Request[v0alpha.UpdateOrganizationRequest]) (*connect_go.Response[v0alpha.UpdateOrganizationResponse], error) {
	return c.updateOrganization.CallUnary(ctx, req)
}

// ArchiveOrganization calls api.v0alpha.Org.ArchiveOrganization.
func (c *orgClient) ArchiveOrganization(ctx context.Context, req *connect_go.Request[v0alpha.ArchiveOrganizationRequest]) (*connect_go.Response[v0alpha.ArchiveOrganizationResponse], error) {
	return c.archiveOrganization.CallUnary(ctx, req)
}

// UnArchiveOrganization calls api.v0alpha.Org.UnArchiveOrganization.
func (c *orgClient) UnArchiveOrganization(ctx context.Context, req *connect_go.Request[v0alpha.UnArchiveOrganizationRequest]) (*connect_go.Response[v0alpha.UnArchiveOrganizationResponse], error) {
	return c.unArchiveOrganization.CallUnary(ctx, req)
}

// ListArchivedOrganizations calls api.v0alpha.Org.ListArchivedOrganizations.
func (c *orgClient) ListArchivedOrganizations(ctx context.Context, req *connect_go.Request[v0alpha.ListArchivedOrganizationsRequest]) (*connect_go.Response[v0alpha.ListArchivedOrganizationsResponse], error) {
	return c.listArchivedOrganizations.CallUnary(ctx, req)
}

// GetOrganizationProfile calls api.v0alpha.Org.GetOrganizationProfile.
func (c *orgClient) GetOrganizationProfile(ctx context.Context, req *connect_go.Request[v0alpha.GetOrganizationProfileRequest]) (*connect_go.Response[v0alpha.GetOrganizationProfileResponse], error) {
	return c.getOrganizationProfile.CallUnary(ctx, req)
}

// GetOrganizationProfileById calls api.v0alpha.Org.GetOrganizationProfileById.
func (c *orgClient) GetOrganizationProfileById(ctx context.Context, req *connect_go.Request[v0alpha.GetOrganizationProfileByIdRequest]) (*connect_go.Response[v0alpha.GetOrganizationProfileResponse], error) {
	return c.getOrganizationProfileById.CallUnary(ctx, req)
}

// ListOrganizationDescriptions calls api.v0alpha.Org.ListOrganizationDescriptions.
func (c *orgClient) ListOrganizationDescriptions(ctx context.Context, req *connect_go.Request[v0alpha.ListOrganizationDescriptionsRequest]) (*connect_go.Response[v0alpha.ListOrganizationDescriptionsResponse], error) {
	return c.listOrganizationDescriptions.CallUnary(ctx, req)
}

// ListRegionalOrganizations calls api.v0alpha.Org.ListRegionalOrganizations.
func (c *orgClient) ListRegionalOrganizations(ctx context.Context, req *connect_go.Request[v0alpha.ListRegionalOrganizationsRequest]) (*connect_go.Response[v0alpha.ListRegionalOrganizationsResponse], error) {
	return c.listRegionalOrganizations.CallUnary(ctx, req)
}

// UpdateP3OwningOrg calls api.v0alpha.Org.UpdateP3OwningOrg.
func (c *orgClient) UpdateP3OwningOrg(ctx context.Context, req *connect_go.Request[v0alpha.UpdateP3OwningOrgRequest]) (*connect_go.Response[v0alpha.UpdateP3OwningOrgResponse], error) {
	return c.updateP3OwningOrg.CallUnary(ctx, req)
}

// GetP3OwningOrg calls api.v0alpha.Org.GetP3OwningOrg.
func (c *orgClient) GetP3OwningOrg(ctx context.Context, req *connect_go.Request[v0alpha.GetP3OwningOrgRequest]) (*connect_go.Response[v0alpha.GetP3OwningOrgResponse], error) {
	return c.getP3OwningOrg.CallUnary(ctx, req)
}

// ListOrganizationUserDescriptions calls api.v0alpha.Org.ListOrganizationUserDescriptions.
func (c *orgClient) ListOrganizationUserDescriptions(ctx context.Context, req *connect_go.Request[v0alpha.ListOrganizationUserDescriptionsRequest]) (*connect_go.Response[v0alpha.ListOrganizationUserDescriptionsResponse], error) {
	return c.listOrganizationUserDescriptions.CallUnary(ctx, req)
}

// ListUserDescriptions calls api.v0alpha.Org.ListUserDescriptions.
func (c *orgClient) ListUserDescriptions(ctx context.Context, req *connect_go.Request[v0alpha.ListUserDescriptionsRequest]) (*connect_go.ServerStreamForClient[v0alpha.ListUserDescriptionsResponse], error) {
	return c.listUserDescriptions.CallServerStream(ctx, req)
}

// GetUserDirectory calls api.v0alpha.Org.GetUserDirectory.
func (c *orgClient) GetUserDirectory(ctx context.Context, req *connect_go.Request[v0alpha.GetUserDirectoryRequest]) (*connect_go.Response[v0alpha.GetUserDirectoryResponse], error) {
	return c.getUserDirectory.CallUnary(ctx, req)
}

// GetRegions calls api.v0alpha.Org.GetRegions.
func (c *orgClient) GetRegions(ctx context.Context, req *connect_go.Request[v0alpha.GetRegionsRequest]) (*connect_go.Response[v0alpha.GetRegionsResponse], error) {
	return c.getRegions.CallUnary(ctx, req)
}

// GetUserDetails calls api.v0alpha.Org.GetUserDetails.
func (c *orgClient) GetUserDetails(ctx context.Context, req *connect_go.Request[v0alpha.GetUserDetailsRequest]) (*connect_go.Response[v0alpha.UserDetails], error) {
	return c.getUserDetails.CallUnary(ctx, req)
}

// AdminGetUserDetails calls api.v0alpha.Org.AdminGetUserDetails.
func (c *orgClient) AdminGetUserDetails(ctx context.Context, req *connect_go.Request[v0alpha.AdminGetUserDetailsRequest]) (*connect_go.Response[v0alpha.UserDetails], error) {
	return c.adminGetUserDetails.CallUnary(ctx, req)
}

// GetAgentUsers calls api.v0alpha.Org.GetAgentUsers.
func (c *orgClient) GetAgentUsers(ctx context.Context, req *connect_go.Request[v0alpha.GetAgentUsersRequest]) (*connect_go.Response[v0alpha.GetAgentUsersResponse], error) {
	return c.getAgentUsers.CallUnary(ctx, req)
}

// GetAgentSettings calls api.v0alpha.Org.GetAgentSettings.
func (c *orgClient) GetAgentSettings(ctx context.Context, req *connect_go.Request[v0alpha.GetAgentSettingsRequest]) (*connect_go.Response[v0alpha.GetAgentSettingsResponse], error) {
	return c.getAgentSettings.CallUnary(ctx, req)
}

// GetAgentProfileGroup calls api.v0alpha.Org.GetAgentProfileGroup.
func (c *orgClient) GetAgentProfileGroup(ctx context.Context, req *connect_go.Request[v0alpha.GetAgentProfileGroupRequest]) (*connect_go.Response[v0alpha.GetAgentProfileGroupResponse], error) {
	return c.getAgentProfileGroup.CallUnary(ctx, req)
}

// UpdateAgentProfileGroup calls api.v0alpha.Org.UpdateAgentProfileGroup.
func (c *orgClient) UpdateAgentProfileGroup(ctx context.Context, req *connect_go.Request[v0alpha.UpdateAgentProfileGroupRequest]) (*connect_go.Response[v0alpha.UpdateAgentProfileGroupResponse], error) {
	return c.updateAgentProfileGroup.CallUnary(ctx, req)
}

// CreateAgentProfileGroup calls api.v0alpha.Org.CreateAgentProfileGroup.
func (c *orgClient) CreateAgentProfileGroup(ctx context.Context, req *connect_go.Request[v0alpha.CreateAgentProfileGroupRequest]) (*connect_go.Response[v0alpha.CreateAgentProfileGroupResponse], error) {
	return c.createAgentProfileGroup.CallUnary(ctx, req)
}

// ListAgentProfileGroups calls api.v0alpha.Org.ListAgentProfileGroups.
func (c *orgClient) ListAgentProfileGroups(ctx context.Context, req *connect_go.Request[v0alpha.ListAgentProfileGroupsRequest]) (*connect_go.Response[v0alpha.ListAgentProfileGroupsResponse], error) {
	return c.listAgentProfileGroups.CallUnary(ctx, req)
}

// DeleteAgentProfileGroup calls api.v0alpha.Org.DeleteAgentProfileGroup.
func (c *orgClient) DeleteAgentProfileGroup(ctx context.Context, req *connect_go.Request[v0alpha.DeleteAgentProfileGroupRequest]) (*connect_go.Response[v0alpha.DeleteAgentProfileGroupResponse], error) {
	return c.deleteAgentProfileGroup.CallUnary(ctx, req)
}

// AssignAgentProfileGroups calls api.v0alpha.Org.AssignAgentProfileGroups.
func (c *orgClient) AssignAgentProfileGroups(ctx context.Context, req *connect_go.Request[v0alpha.AssignAgentProfileGroupsRequest]) (*connect_go.Response[v0alpha.AssignAgentProfileGroupsResponse], error) {
	return c.assignAgentProfileGroups.CallUnary(ctx, req)
}

// UpdateUser calls api.v0alpha.Org.UpdateUser.
func (c *orgClient) UpdateUser(ctx context.Context, req *connect_go.Request[v0alpha.UpdateUserRequest]) (*connect_go.Response[v0alpha.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// CreateUser calls api.v0alpha.Org.CreateUser.
func (c *orgClient) CreateUser(ctx context.Context, req *connect_go.Request[v0alpha.CreateUserRequest]) (*connect_go.Response[v0alpha.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// CreateDelegatedUser calls api.v0alpha.Org.CreateDelegatedUser.
func (c *orgClient) CreateDelegatedUser(ctx context.Context, req *connect_go.Request[v0alpha.CreateDelegatedUserRequest]) (*connect_go.Response[v0alpha.CreateDelegatedUserResponse], error) {
	return c.createDelegatedUser.CallUnary(ctx, req)
}

// UpdateUserPassword calls api.v0alpha.Org.UpdateUserPassword.
func (c *orgClient) UpdateUserPassword(ctx context.Context, req *connect_go.Request[v0alpha.UpdateUserPasswordRequest]) (*connect_go.Response[v0alpha.UpdateUserPasswordResponse], error) {
	return c.updateUserPassword.CallUnary(ctx, req)
}

// ResetUserRequirePasswordReset calls api.v0alpha.Org.ResetUserRequirePasswordReset.
func (c *orgClient) ResetUserRequirePasswordReset(ctx context.Context, req *connect_go.Request[v0alpha.ResetUserRequirePasswordResetRequest]) (*connect_go.Response[v0alpha.ResetUserRequirePasswordResetResponse], error) {
	return c.resetUserRequirePasswordReset.CallUnary(ctx, req)
}

// GetUserPasswordResetLink calls api.v0alpha.Org.GetUserPasswordResetLink.
func (c *orgClient) GetUserPasswordResetLink(ctx context.Context, req *connect_go.Request[v0alpha.GetUserPasswordResetLinkRequest]) (*connect_go.Response[v0alpha.GetUserPasswordResetLinkResponse], error) {
	return c.getUserPasswordResetLink.CallUnary(ctx, req)
}

// GetUserEmailVerified calls api.v0alpha.Org.GetUserEmailVerified.
func (c *orgClient) GetUserEmailVerified(ctx context.Context, req *connect_go.Request[v0alpha.GetUserEmailVerifiedRequest]) (*connect_go.Response[v0alpha.GetUserEmailVerifiedResponse], error) {
	return c.getUserEmailVerified.CallUnary(ctx, req)
}

// SendUserVerificationEmail calls api.v0alpha.Org.SendUserVerificationEmail.
func (c *orgClient) SendUserVerificationEmail(ctx context.Context, req *connect_go.Request[v0alpha.SendUserVerificationEmailRequest]) (*connect_go.Response[v0alpha.SendUserVerificationEmailResponse], error) {
	return c.sendUserVerificationEmail.CallUnary(ctx, req)
}

// ManualUserEmailVerification calls api.v0alpha.Org.ManualUserEmailVerification.
func (c *orgClient) ManualUserEmailVerification(ctx context.Context, req *connect_go.Request[v0alpha.ManualUserEmailVerificationRequest]) (*connect_go.Response[v0alpha.ManualUserEmailVerificationResponse], error) {
	return c.manualUserEmailVerification.CallUnary(ctx, req)
}

// GetTempUserToken calls api.v0alpha.Org.GetTempUserToken.
func (c *orgClient) GetTempUserToken(ctx context.Context, req *connect_go.Request[v0alpha.GetTempUserTokenReq]) (*connect_go.Response[v0alpha.GetTempUserTokenRes], error) {
	return c.getTempUserToken.CallUnary(ctx, req)
}

// GetCountriesList calls api.v0alpha.Org.GetCountriesList.
func (c *orgClient) GetCountriesList(ctx context.Context, req *connect_go.Request[v0alpha.GetCountriesListRequest]) (*connect_go.Response[v0alpha.GetCountriesListResponse], error) {
	return c.getCountriesList.CallUnary(ctx, req)
}

// GetAdminClientPreferences calls api.v0alpha.Org.GetAdminClientPreferences.
func (c *orgClient) GetAdminClientPreferences(ctx context.Context, req *connect_go.Request[v0alpha.GetAdminClientPreferencesRequest]) (*connect_go.Response[v0alpha.GetAdminClientPreferencesResponse], error) {
	return c.getAdminClientPreferences.CallUnary(ctx, req)
}

// UpdateAdminClientPreferences calls api.v0alpha.Org.UpdateAdminClientPreferences.
func (c *orgClient) UpdateAdminClientPreferences(ctx context.Context, req *connect_go.Request[v0alpha.UpdateAdminClientPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateAdminClientPreferencesResponse], error) {
	return c.updateAdminClientPreferences.CallUnary(ctx, req)
}

// GetPermissions calls api.v0alpha.Org.GetPermissions.
func (c *orgClient) GetPermissions(ctx context.Context, req *connect_go.Request[v0alpha.GetPermissionsRequest]) (*connect_go.Response[v0alpha.GetPermissionsResponse], error) {
	return c.getPermissions.CallUnary(ctx, req)
}

// RevokeAccountOwnerPermissionFromUser calls api.v0alpha.Org.RevokeAccountOwnerPermissionFromUser.
func (c *orgClient) RevokeAccountOwnerPermissionFromUser(ctx context.Context, req *connect_go.Request[v0alpha.RevokeAccountOwnerPermissionFromUserRequest]) (*connect_go.Response[v0alpha.RevokeAccountOwnerPermissionFromUserResponse], error) {
	return c.revokeAccountOwnerPermissionFromUser.CallUnary(ctx, req)
}

// UpdateUserDisabled calls api.v0alpha.Org.UpdateUserDisabled.
func (c *orgClient) UpdateUserDisabled(ctx context.Context, req *connect_go.Request[v0alpha.UpdateUserDisabledRequest]) (*connect_go.Response[v0alpha.UpdateUserDisabledResponse], error) {
	return c.updateUserDisabled.CallUnary(ctx, req)
}

// UpdateBulkUsersDisabled calls api.v0alpha.Org.UpdateBulkUsersDisabled.
func (c *orgClient) UpdateBulkUsersDisabled(ctx context.Context, req *connect_go.Request[v0alpha.UpdateBulkUsersDisabledRequest]) (*connect_go.Response[v0alpha.UpdateBulkUsersDisabledResponse], error) {
	return c.updateBulkUsersDisabled.CallUnary(ctx, req)
}

// GetOrgBillingSettings calls api.v0alpha.Org.GetOrgBillingSettings.
func (c *orgClient) GetOrgBillingSettings(ctx context.Context, req *connect_go.Request[v0alpha.GetOrgBillingSettingsRequest]) (*connect_go.Response[v0alpha.GetOrgBillingSettingsResponse], error) {
	return c.getOrgBillingSettings.CallUnary(ctx, req)
}

// SetOrgBillingSettings calls api.v0alpha.Org.SetOrgBillingSettings.
func (c *orgClient) SetOrgBillingSettings(ctx context.Context, req *connect_go.Request[v0alpha.SetOrgBillingSettingsRequest]) (*connect_go.Response[v0alpha.SetOrgBillingSettingsResponse], error) {
	return c.setOrgBillingSettings.CallUnary(ctx, req)
}

// AddOrgBillingOverride calls api.v0alpha.Org.AddOrgBillingOverride.
func (c *orgClient) AddOrgBillingOverride(ctx context.Context, req *connect_go.Request[v0alpha.AddOrgBillingOverrideRequest]) (*connect_go.Response[v0alpha.AddOrgBillingOverrideResponse], error) {
	return c.addOrgBillingOverride.CallUnary(ctx, req)
}

// RemoveOrgBillingOverride calls api.v0alpha.Org.RemoveOrgBillingOverride.
func (c *orgClient) RemoveOrgBillingOverride(ctx context.Context, req *connect_go.Request[v0alpha.RemoveOrgBillingOverrideRequest]) (*connect_go.Response[v0alpha.RemoveOrgBillingOverrideResponse], error) {
	return c.removeOrgBillingOverride.CallUnary(ctx, req)
}

// GetSystemDefaultBillingRates calls api.v0alpha.Org.GetSystemDefaultBillingRates.
func (c *orgClient) GetSystemDefaultBillingRates(ctx context.Context, req *connect_go.Request[v0alpha.GetSystemDefaultBillingRatesRequest]) (*connect_go.Response[v0alpha.GetSystemDefaultBillingRatesResponse], error) {
	return c.getSystemDefaultBillingRates.CallUnary(ctx, req)
}

// ListPermissionGroups calls api.v0alpha.Org.ListPermissionGroups.
func (c *orgClient) ListPermissionGroups(ctx context.Context, req *connect_go.Request[v0alpha.ListPermissionGroupsRequest]) (*connect_go.Response[v0alpha.ListPermissionGroupsResponse], error) {
	return c.listPermissionGroups.CallUnary(ctx, req)
}

// CreatePermissionGroup calls api.v0alpha.Org.CreatePermissionGroup.
func (c *orgClient) CreatePermissionGroup(ctx context.Context, req *connect_go.Request[v0alpha.CreatePermissionGroupRequest]) (*connect_go.Response[v0alpha.CreatePermissionGroupResponse], error) {
	return c.createPermissionGroup.CallUnary(ctx, req)
}

// UpdatePermissionGroup calls api.v0alpha.Org.UpdatePermissionGroup.
func (c *orgClient) UpdatePermissionGroup(ctx context.Context, req *connect_go.Request[v0alpha.UpdatePermissionGroupRequest]) (*connect_go.Response[v0alpha.UpdatePermissionGroupResponse], error) {
	return c.updatePermissionGroup.CallUnary(ctx, req)
}

// DeletePermissionGroup calls api.v0alpha.Org.DeletePermissionGroup.
func (c *orgClient) DeletePermissionGroup(ctx context.Context, req *connect_go.Request[v0alpha.DeletePermissionGroupRequest]) (*connect_go.Response[v0alpha.DeletePermissionGroupResponse], error) {
	return c.deletePermissionGroup.CallUnary(ctx, req)
}

// AssignUserToAccountOwnerPermissionGroup calls
// api.v0alpha.Org.AssignUserToAccountOwnerPermissionGroup.
func (c *orgClient) AssignUserToAccountOwnerPermissionGroup(ctx context.Context, req *connect_go.Request[v0alpha.AssignUserToAccountOwnerPermissionGroupRequest]) (*connect_go.Response[v0alpha.AssignUserToAccountOwnerPermissionGroupResponse], error) {
	return c.assignUserToAccountOwnerPermissionGroup.CallUnary(ctx, req)
}

// AssignUserPermissionGroup calls api.v0alpha.Org.AssignUserPermissionGroup.
func (c *orgClient) AssignUserPermissionGroup(ctx context.Context, req *connect_go.Request[v0alpha.AssignUserPermissionGroupRequest]) (*connect_go.Response[v0alpha.AssignUserPermissionGroupResponse], error) {
	return c.assignUserPermissionGroup.CallUnary(ctx, req)
}

// AssignUsersPermissionGroup calls api.v0alpha.Org.AssignUsersPermissionGroup.
func (c *orgClient) AssignUsersPermissionGroup(ctx context.Context, req *connect_go.Request[v0alpha.AssignUsersPermissionGroupRequest]) (*connect_go.Response[v0alpha.AssignUsersPermissionGroupResponse], error) {
	return c.assignUsersPermissionGroup.CallUnary(ctx, req)
}

// UpdateUserNeoPermissionGroups calls api.v0alpha.Org.UpdateUserNeoPermissionGroups.
func (c *orgClient) UpdateUserNeoPermissionGroups(ctx context.Context, req *connect_go.Request[v0alpha.UpdateUserNeoPermissionGroupsRequest]) (*connect_go.Response[v0alpha.UpdateUserNeoPermissionGroupsResponse], error) {
	return c.updateUserNeoPermissionGroups.CallUnary(ctx, req)
}

// RevokeUserPermissionGroup calls api.v0alpha.Org.RevokeUserPermissionGroup.
func (c *orgClient) RevokeUserPermissionGroup(ctx context.Context, req *connect_go.Request[v0alpha.RevokeUserPermissionGroupRequest]) (*connect_go.Response[v0alpha.RevokeUserPermissionGroupResponse], error) {
	return c.revokeUserPermissionGroup.CallUnary(ctx, req)
}

// RevokeUsersPermissionGroup calls api.v0alpha.Org.RevokeUsersPermissionGroup.
func (c *orgClient) RevokeUsersPermissionGroup(ctx context.Context, req *connect_go.Request[v0alpha.RevokeUsersPermissionGroupRequest]) (*connect_go.Response[v0alpha.RevokeUsersPermissionGroupResponse], error) {
	return c.revokeUsersPermissionGroup.CallUnary(ctx, req)
}

// InitDefaultPermissionGroups calls api.v0alpha.Org.InitDefaultPermissionGroups.
func (c *orgClient) InitDefaultPermissionGroups(ctx context.Context, req *connect_go.Request[v0alpha.InitDefaultPermissionGroupsRequest]) (*connect_go.Response[v0alpha.InitDefaultPermissionGroupsResponse], error) {
	return c.initDefaultPermissionGroups.CallUnary(ctx, req)
}

// AddPermissionToAccountOwnerPermissionGroup calls
// api.v0alpha.Org.AddPermissionToAccountOwnerPermissionGroup.
func (c *orgClient) AddPermissionToAccountOwnerPermissionGroup(ctx context.Context, req *connect_go.Request[v0alpha.AddPermissionToAccountOwnerPermissionGroupRequest]) (*connect_go.Response[v0alpha.AddPermissionToAccountOwnerPermissionGroupResponse], error) {
	return c.addPermissionToAccountOwnerPermissionGroup.CallUnary(ctx, req)
}

// RevokePermissionToAccountOwnerPermissionGroup calls
// api.v0alpha.Org.RevokePermissionToAccountOwnerPermissionGroup.
func (c *orgClient) RevokePermissionToAccountOwnerPermissionGroup(ctx context.Context, req *connect_go.Request[v0alpha.RevokePermissionToAccountOwnerPermissionGroupRequest]) (*connect_go.Response[v0alpha.RevokePermissionToAccountOwnerPermissionGroupResponse], error) {
	return c.revokePermissionToAccountOwnerPermissionGroup.CallUnary(ctx, req)
}

// AddPermissionToOrgDefaultGroup calls api.v0alpha.Org.AddPermissionToOrgDefaultGroup.
func (c *orgClient) AddPermissionToOrgDefaultGroup(ctx context.Context, req *connect_go.Request[v0alpha.AddPermissionToOrgDefaultGroupRequest]) (*connect_go.Response[v0alpha.AddPermissionToOrgDefaultGroupResponse], error) {
	return c.addPermissionToOrgDefaultGroup.CallUnary(ctx, req)
}

// RemovePermissionFromOrgDefaultGroup calls api.v0alpha.Org.RemovePermissionFromOrgDefaultGroup.
func (c *orgClient) RemovePermissionFromOrgDefaultGroup(ctx context.Context, req *connect_go.Request[v0alpha.RemovePermissionFromOrgDefaultGroupRequest]) (*connect_go.Response[v0alpha.RemovePermissionFromOrgDefaultGroupResponse], error) {
	return c.removePermissionFromOrgDefaultGroup.CallUnary(ctx, req)
}

// GetOrgDefaultSuperUserGroup calls api.v0alpha.Org.GetOrgDefaultSuperUserGroup.
func (c *orgClient) GetOrgDefaultSuperUserGroup(ctx context.Context, req *connect_go.Request[v0alpha.GetOrgDefaultSuperUserGroupRequest]) (*connect_go.Response[v0alpha.GetOrgDefaultSuperUserGroupResponse], error) {
	return c.getOrgDefaultSuperUserGroup.CallUnary(ctx, req)
}

// ListP3PermissionGroups calls api.v0alpha.Org.ListP3PermissionGroups.
func (c *orgClient) ListP3PermissionGroups(ctx context.Context, req *connect_go.Request[v0alpha.ListP3PermissionGroupsRequest]) (*connect_go.Response[v0alpha.ListP3PermissionGroupsResponse], error) {
	return c.listP3PermissionGroups.CallUnary(ctx, req)
}

// AddUserRegion calls api.v0alpha.Org.AddUserRegion.
func (c *orgClient) AddUserRegion(ctx context.Context, req *connect_go.Request[v0alpha.AddUserRegionRequest]) (*connect_go.Response[v0alpha.AddUserRegionResponse], error) {
	return c.addUserRegion.CallUnary(ctx, req)
}

// RemoveUserRegion calls api.v0alpha.Org.RemoveUserRegion.
func (c *orgClient) RemoveUserRegion(ctx context.Context, req *connect_go.Request[v0alpha.RemoveUserRegionRequest]) (*connect_go.Response[v0alpha.RemoveUserRegionResponse], error) {
	return c.removeUserRegion.CallUnary(ctx, req)
}

// CreateP3PermissionGroup calls api.v0alpha.Org.CreateP3PermissionGroup.
func (c *orgClient) CreateP3PermissionGroup(ctx context.Context, req *connect_go.Request[v0alpha.CreateP3PermissionGroupRequest]) (*connect_go.Response[v0alpha.CreateP3PermissionGroupResponse], error) {
	return c.createP3PermissionGroup.CallUnary(ctx, req)
}

// UpdateP3PermissionGroup calls api.v0alpha.Org.UpdateP3PermissionGroup.
func (c *orgClient) UpdateP3PermissionGroup(ctx context.Context, req *connect_go.Request[v0alpha.UpdateP3PermissionGroupRequest]) (*connect_go.Response[v0alpha.UpdateP3PermissionGroupResponse], error) {
	return c.updateP3PermissionGroup.CallUnary(ctx, req)
}

// DeleteP3PermissionGroup calls api.v0alpha.Org.DeleteP3PermissionGroup.
func (c *orgClient) DeleteP3PermissionGroup(ctx context.Context, req *connect_go.Request[v0alpha.DeleteP3PermissionGroupRequest]) (*connect_go.Response[v0alpha.DeleteP3PermissionGroupResponse], error) {
	return c.deleteP3PermissionGroup.CallUnary(ctx, req)
}

// AssignUsersP3PermissionGroup calls api.v0alpha.Org.AssignUsersP3PermissionGroup.
func (c *orgClient) AssignUsersP3PermissionGroup(ctx context.Context, req *connect_go.Request[v0alpha.AssignUsersP3PermissionGroupRequest]) (*connect_go.Response[v0alpha.AssignUsersP3PermissionGroupResponse], error) {
	return c.assignUsersP3PermissionGroup.CallUnary(ctx, req)
}

// AddLoginToUser calls api.v0alpha.Org.AddLoginToUser.
func (c *orgClient) AddLoginToUser(ctx context.Context, req *connect_go.Request[v0alpha.AddLoginToUserRequest]) (*connect_go.Response[v0alpha.AddLoginToUserResponse], error) {
	return c.addLoginToUser.CallUnary(ctx, req)
}

// RevokeUsersP3PermissionGroup calls api.v0alpha.Org.RevokeUsersP3PermissionGroup.
func (c *orgClient) RevokeUsersP3PermissionGroup(ctx context.Context, req *connect_go.Request[v0alpha.RevokeUsersP3PermissionGroupRequest]) (*connect_go.Response[v0alpha.RevokeUsersP3PermissionGroupResponse], error) {
	return c.revokeUsersP3PermissionGroup.CallUnary(ctx, req)
}

// GetContactPreferences calls api.v0alpha.Org.GetContactPreferences.
func (c *orgClient) GetContactPreferences(ctx context.Context, req *connect_go.Request[v0alpha.GetContactPreferencesRequest]) (*connect_go.Response[v0alpha.GetContactPreferencesResponse], error) {
	return c.getContactPreferences.CallUnary(ctx, req)
}

// UpdateContactPreferences calls api.v0alpha.Org.UpdateContactPreferences.
func (c *orgClient) UpdateContactPreferences(ctx context.Context, req *connect_go.Request[v0alpha.UpdateContactPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateContactPreferencesResponse], error) {
	return c.updateContactPreferences.CallUnary(ctx, req)
}

// GetCompliancePreferences calls api.v0alpha.Org.GetCompliancePreferences.
func (c *orgClient) GetCompliancePreferences(ctx context.Context, req *connect_go.Request[v0alpha.GetCompliancePreferencesRequest]) (*connect_go.Response[v0alpha.GetCompliancePreferencesResponse], error) {
	return c.getCompliancePreferences.CallUnary(ctx, req)
}

// UpdateCompliancePreferences calls api.v0alpha.Org.UpdateCompliancePreferences.
func (c *orgClient) UpdateCompliancePreferences(ctx context.Context, req *connect_go.Request[v0alpha.UpdateCompliancePreferencesRequest]) (*connect_go.Response[v0alpha.UpdateCompliancePreferencesResponse], error) {
	return c.updateCompliancePreferences.CallUnary(ctx, req)
}

// GetAgentPreferences calls api.v0alpha.Org.GetAgentPreferences.
func (c *orgClient) GetAgentPreferences(ctx context.Context, req *connect_go.Request[v0alpha.GetAgentPreferencesRequest]) (*connect_go.Response[v0alpha.GetAgentPreferencesResponse], error) {
	return c.getAgentPreferences.CallUnary(ctx, req)
}

// UpdateAgentPreferences calls api.v0alpha.Org.UpdateAgentPreferences.
func (c *orgClient) UpdateAgentPreferences(ctx context.Context, req *connect_go.Request[v0alpha.UpdateAgentPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateAgentPreferencesResponse], error) {
	return c.updateAgentPreferences.CallUnary(ctx, req)
}

// GetOrganizationPreferences calls api.v0alpha.Org.GetOrganizationPreferences.
func (c *orgClient) GetOrganizationPreferences(ctx context.Context, req *connect_go.Request[v0alpha.GetOrganizationPreferencesRequest]) (*connect_go.Response[v0alpha.GetOrganizationPreferencesResponse], error) {
	return c.getOrganizationPreferences.CallUnary(ctx, req)
}

// UpdateOrganizationPreferences calls api.v0alpha.Org.UpdateOrganizationPreferences.
func (c *orgClient) UpdateOrganizationPreferences(ctx context.Context, req *connect_go.Request[v0alpha.UpdateOrganizationPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateOrganizationPreferencesResponse], error) {
	return c.updateOrganizationPreferences.CallUnary(ctx, req)
}

// GetSchedulePreferences calls api.v0alpha.Org.GetSchedulePreferences.
func (c *orgClient) GetSchedulePreferences(ctx context.Context, req *connect_go.Request[v0alpha.GetSchedulePreferencesRequest]) (*connect_go.Response[v0alpha.GetSchedulePreferencesResponse], error) {
	return c.getSchedulePreferences.CallUnary(ctx, req)
}

// UpdateSchedulePreferences calls api.v0alpha.Org.UpdateSchedulePreferences.
func (c *orgClient) UpdateSchedulePreferences(ctx context.Context, req *connect_go.Request[v0alpha.UpdateSchedulePreferencesRequest]) (*connect_go.Response[v0alpha.UpdateSchedulePreferencesResponse], error) {
	return c.updateSchedulePreferences.CallUnary(ctx, req)
}

// GetBusinessPreferences calls api.v0alpha.Org.GetBusinessPreferences.
func (c *orgClient) GetBusinessPreferences(ctx context.Context, req *connect_go.Request[v0alpha.GetBusinessPreferencesRequest]) (*connect_go.Response[v0alpha.GetBusinessPreferencesResponse], error) {
	return c.getBusinessPreferences.CallUnary(ctx, req)
}

// UpdateBusinessPreferences calls api.v0alpha.Org.UpdateBusinessPreferences.
func (c *orgClient) UpdateBusinessPreferences(ctx context.Context, req *connect_go.Request[v0alpha.UpdateBusinessPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateBusinessPreferencesResponse], error) {
	return c.updateBusinessPreferences.CallUnary(ctx, req)
}

// GetEndOfDayPreferences calls api.v0alpha.Org.GetEndOfDayPreferences.
func (c *orgClient) GetEndOfDayPreferences(ctx context.Context, req *connect_go.Request[v0alpha.GetEndOfDayPreferencesRequest]) (*connect_go.Response[v0alpha.GetEndOfDayPreferencesResponse], error) {
	return c.getEndOfDayPreferences.CallUnary(ctx, req)
}

// UpdateEndOfDayPreferences calls api.v0alpha.Org.UpdateEndOfDayPreferences.
func (c *orgClient) UpdateEndOfDayPreferences(ctx context.Context, req *connect_go.Request[v0alpha.UpdateEndOfDayPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateEndOfDayPreferencesResponse], error) {
	return c.updateEndOfDayPreferences.CallUnary(ctx, req)
}

// GetReportFilterPreferences calls api.v0alpha.Org.GetReportFilterPreferences.
func (c *orgClient) GetReportFilterPreferences(ctx context.Context, req *connect_go.Request[v0alpha.GetFilterPreferencesRequest]) (*connect_go.Response[v0alpha.GetFilterPreferencesResponse], error) {
	return c.getReportFilterPreferences.CallUnary(ctx, req)
}

// UpdateReportFilterPreferences calls api.v0alpha.Org.UpdateReportFilterPreferences.
func (c *orgClient) UpdateReportFilterPreferences(ctx context.Context, req *connect_go.Request[v0alpha.UpdateFilterPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateFilterPreferencesResponse], error) {
	return c.updateReportFilterPreferences.CallUnary(ctx, req)
}

// GetPhonePreferences calls api.v0alpha.Org.GetPhonePreferences.
func (c *orgClient) GetPhonePreferences(ctx context.Context, req *connect_go.Request[v0alpha.GetPhonePreferencesRequest]) (*connect_go.Response[v0alpha.GetPhonePreferencesResponse], error) {
	return c.getPhonePreferences.CallUnary(ctx, req)
}

// UpdatePhonePreferences calls api.v0alpha.Org.UpdatePhonePreferences.
func (c *orgClient) UpdatePhonePreferences(ctx context.Context, req *connect_go.Request[v0alpha.UpdatePhonePreferencesRequest]) (*connect_go.Response[v0alpha.UpdatePhonePreferencesResponse], error) {
	return c.updatePhonePreferences.CallUnary(ctx, req)
}

// GetDashboardGeneralPreferences calls api.v0alpha.Org.GetDashboardGeneralPreferences.
func (c *orgClient) GetDashboardGeneralPreferences(ctx context.Context, req *connect_go.Request[v0alpha.GetDashboardGeneralPreferencesRequest]) (*connect_go.Response[v0alpha.GetDashboardGeneralPreferencesResponse], error) {
	return c.getDashboardGeneralPreferences.CallUnary(ctx, req)
}

// UpdateDashboardGeneralPreferences calls api.v0alpha.Org.UpdateDashboardGeneralPreferences.
func (c *orgClient) UpdateDashboardGeneralPreferences(ctx context.Context, req *connect_go.Request[v0alpha.UpdateDashboardGeneralPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateDashboardGeneralPreferencesResponse], error) {
	return c.updateDashboardGeneralPreferences.CallUnary(ctx, req)
}

// GetWebhookPreferences calls api.v0alpha.Org.GetWebhookPreferences.
func (c *orgClient) GetWebhookPreferences(ctx context.Context, req *connect_go.Request[v0alpha.GetWebhookPreferencesRequest]) (*connect_go.Response[v0alpha.GetWebhookPreferencesResponse], error) {
	return c.getWebhookPreferences.CallUnary(ctx, req)
}

// UpdateWebhookPreferences calls api.v0alpha.Org.UpdateWebhookPreferences.
func (c *orgClient) UpdateWebhookPreferences(ctx context.Context, req *connect_go.Request[v0alpha.UpdateWebhookPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateWebhookPreferencesResponse], error) {
	return c.updateWebhookPreferences.CallUnary(ctx, req)
}

// GetBroadcastPreferences calls api.v0alpha.Org.GetBroadcastPreferences.
func (c *orgClient) GetBroadcastPreferences(ctx context.Context, req *connect_go.Request[v0alpha.GetBroadcastPreferencesRequest]) (*connect_go.Response[v0alpha.GetBroadcastPreferencesResponse], error) {
	return c.getBroadcastPreferences.CallUnary(ctx, req)
}

// UpdateBroadcastPreferences calls api.v0alpha.Org.UpdateBroadcastPreferences.
func (c *orgClient) UpdateBroadcastPreferences(ctx context.Context, req *connect_go.Request[v0alpha.UpdateBroadcastPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateBroadcastPreferencesResponse], error) {
	return c.updateBroadcastPreferences.CallUnary(ctx, req)
}

// GetAuthenticationPreferences calls api.v0alpha.Org.GetAuthenticationPreferences.
func (c *orgClient) GetAuthenticationPreferences(ctx context.Context, req *connect_go.Request[v0alpha.GetAuthenticationPreferencesRequest]) (*connect_go.Response[v0alpha.GetAuthenticationPreferencesResponse], error) {
	return c.getAuthenticationPreferences.CallUnary(ctx, req)
}

// UpdateAuthenticationPreferences calls api.v0alpha.Org.UpdateAuthenticationPreferences.
func (c *orgClient) UpdateAuthenticationPreferences(ctx context.Context, req *connect_go.Request[v0alpha.UpdateAuthenticationPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateAuthenticationPreferencesResponse], error) {
	return c.updateAuthenticationPreferences.CallUnary(ctx, req)
}

// GetRecordingPreferences calls api.v0alpha.Org.GetRecordingPreferences.
func (c *orgClient) GetRecordingPreferences(ctx context.Context, req *connect_go.Request[v0alpha.GetRecordingPreferencesRequest]) (*connect_go.Response[v0alpha.GetRecordingPreferencesResponse], error) {
	return c.getRecordingPreferences.CallUnary(ctx, req)
}

// UpdateRecordingPreferences calls api.v0alpha.Org.UpdateRecordingPreferences.
func (c *orgClient) UpdateRecordingPreferences(ctx context.Context, req *connect_go.Request[v0alpha.UpdateRecordingPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateRecordingPreferencesResponse], error) {
	return c.updateRecordingPreferences.CallUnary(ctx, req)
}

// GetDashboardQueuePreferences calls api.v0alpha.Org.GetDashboardQueuePreferences.
func (c *orgClient) GetDashboardQueuePreferences(ctx context.Context, req *connect_go.Request[v0alpha.GetDashboardQueuePreferencesRequest]) (*connect_go.Response[v0alpha.GetDashboardQueuePreferencesResponse], error) {
	return c.getDashboardQueuePreferences.CallUnary(ctx, req)
}

// UpdateDashboardQueuePreferences calls api.v0alpha.Org.UpdateDashboardQueuePreferences.
func (c *orgClient) UpdateDashboardQueuePreferences(ctx context.Context, req *connect_go.Request[v0alpha.UpdateDashboardQueuePreferencesRequest]) (*connect_go.Response[v0alpha.UpdateDashboardQueuePreferencesResponse], error) {
	return c.updateDashboardQueuePreferences.CallUnary(ctx, req)
}

// GetAgentQuickViewPreferences calls api.v0alpha.Org.GetAgentQuickViewPreferences.
func (c *orgClient) GetAgentQuickViewPreferences(ctx context.Context, req *connect_go.Request[v0alpha.GetAgentQuickViewPreferencesRequest]) (*connect_go.Response[v0alpha.GetAgentQuickViewPreferencesResponse], error) {
	return c.getAgentQuickViewPreferences.CallUnary(ctx, req)
}

// GetVoiceAnalyticsPreferences calls api.v0alpha.Org.GetVoiceAnalyticsPreferences.
func (c *orgClient) GetVoiceAnalyticsPreferences(ctx context.Context, req *connect_go.Request[v0alpha.GetVoiceAnalyticsPreferencesRequest]) (*connect_go.Response[v0alpha.GetVoiceAnalyticsPreferencesResponse], error) {
	return c.getVoiceAnalyticsPreferences.CallUnary(ctx, req)
}

// UpdateVoiceAnalyticsPreferences calls api.v0alpha.Org.UpdateVoiceAnalyticsPreferences.
func (c *orgClient) UpdateVoiceAnalyticsPreferences(ctx context.Context, req *connect_go.Request[v0alpha.UpdateVoiceAnalyticsPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateVoiceAnalyticsPreferencesResponse], error) {
	return c.updateVoiceAnalyticsPreferences.CallUnary(ctx, req)
}

// GetScorecardsPreferences calls api.v0alpha.Org.GetScorecardsPreferences.
func (c *orgClient) GetScorecardsPreferences(ctx context.Context, req *connect_go.Request[v0alpha.GetScorecardsPreferencesRequest]) (*connect_go.Response[v0alpha.GetScorecardsPreferencesResponse], error) {
	return c.getScorecardsPreferences.CallUnary(ctx, req)
}

// UpdateScorecardsPreferences calls api.v0alpha.Org.UpdateScorecardsPreferences.
func (c *orgClient) UpdateScorecardsPreferences(ctx context.Context, req *connect_go.Request[v0alpha.UpdateScorecardsPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateScorecardsPreferencesResponse], error) {
	return c.updateScorecardsPreferences.CallUnary(ctx, req)
}

// GetEmailSmsPreferences calls api.v0alpha.Org.GetEmailSmsPreferences.
func (c *orgClient) GetEmailSmsPreferences(ctx context.Context, req *connect_go.Request[v0alpha.GetEmailSmsPreferencesRequest]) (*connect_go.Response[v0alpha.GetEmailSmsPreferencesResponse], error) {
	return c.getEmailSmsPreferences.CallUnary(ctx, req)
}

// UpdateEmailSmsPreferences calls api.v0alpha.Org.UpdateEmailSmsPreferences.
func (c *orgClient) UpdateEmailSmsPreferences(ctx context.Context, req *connect_go.Request[v0alpha.UpdateEmailSmsPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateEmailSmsPreferencesResponse], error) {
	return c.updateEmailSmsPreferences.CallUnary(ctx, req)
}

// EditAgentQuickViewPreferences calls api.v0alpha.Org.EditAgentQuickViewPreferences.
func (c *orgClient) EditAgentQuickViewPreferences(ctx context.Context, req *connect_go.Request[v0alpha.EditAgentQuickViewPreferencesRequest]) (*connect_go.Response[v0alpha.EditAgentQuickViewPreferencesResponse], error) {
	return c.editAgentQuickViewPreferences.CallUnary(ctx, req)
}

// EditBackofficeThemePreference calls api.v0alpha.Org.EditBackofficeThemePreference.
func (c *orgClient) EditBackofficeThemePreference(ctx context.Context, req *connect_go.Request[v0alpha.EditBackofficeThemePreferenceRequest]) (*connect_go.Response[v0alpha.EditBackofficeThemePreferenceResponse], error) {
	return c.editBackofficeThemePreference.CallUnary(ctx, req)
}

// GetBackofficeThemePreference calls api.v0alpha.Org.GetBackofficeThemePreference.
func (c *orgClient) GetBackofficeThemePreference(ctx context.Context, req *connect_go.Request[v0alpha.GetBackofficeThemePreferenceRequest]) (*connect_go.Response[v0alpha.GetBackofficeThemePreferenceResponse], error) {
	return c.getBackofficeThemePreference.CallUnary(ctx, req)
}

// AcceptLinkbackRecordingTerms calls api.v0alpha.Org.AcceptLinkbackRecordingTerms.
func (c *orgClient) AcceptLinkbackRecordingTerms(ctx context.Context, req *connect_go.Request[v0alpha.AcceptLinkbackRecordingTermsRequest]) (*connect_go.Response[v0alpha.AcceptLinkbackRecordingTermsResponse], error) {
	return c.acceptLinkbackRecordingTerms.CallUnary(ctx, req)
}

// LinkbackUpdateBroadcastTemplates calls api.v0alpha.Org.LinkbackUpdateBroadcastTemplates.
func (c *orgClient) LinkbackUpdateBroadcastTemplates(ctx context.Context, req *connect_go.Request[v0alpha.LinkbackUpdateBroadcastTemplatesRequest]) (*connect_go.Response[v0alpha.LinkbackUpdateBroadcastTemplatesResponse], error) {
	return c.linkbackUpdateBroadcastTemplates.CallUnary(ctx, req)
}

// RecordEmailUnsubscribeAcknowledgement calls
// api.v0alpha.Org.RecordEmailUnsubscribeAcknowledgement.
func (c *orgClient) RecordEmailUnsubscribeAcknowledgement(ctx context.Context, req *connect_go.Request[v0alpha.RecordEmailUnsubscribeAcknowledgementRequest]) (*connect_go.Response[v0alpha.RecordEmailUnsubscribeAcknowledgementResponse], error) {
	return c.recordEmailUnsubscribeAcknowledgement.CallUnary(ctx, req)
}

// ClearEmailUnsubscribeAcknowledgement calls api.v0alpha.Org.ClearEmailUnsubscribeAcknowledgement.
func (c *orgClient) ClearEmailUnsubscribeAcknowledgement(ctx context.Context, req *connect_go.Request[v0alpha.ClearEmailUnsubscribeAcknowledgementRequest]) (*connect_go.Response[v0alpha.ClearEmailUnsubscribeAcknowledgementResponse], error) {
	return c.clearEmailUnsubscribeAcknowledgement.CallUnary(ctx, req)
}

// CreateWebLinkTemplate calls api.v0alpha.Org.CreateWebLinkTemplate.
func (c *orgClient) CreateWebLinkTemplate(ctx context.Context, req *connect_go.Request[v0alpha.CreateWebLinkTemplateRequest]) (*connect_go.Response[v0alpha.CreateWebLinkTemplateResponse], error) {
	return c.createWebLinkTemplate.CallUnary(ctx, req)
}

// ListWebLinkTemplates calls api.v0alpha.Org.ListWebLinkTemplates.
func (c *orgClient) ListWebLinkTemplates(ctx context.Context, req *connect_go.Request[v0alpha.ListWebLinkTemplatesRequest]) (*connect_go.Response[v0alpha.ListWebLinkTemplatesResponse], error) {
	return c.listWebLinkTemplates.CallUnary(ctx, req)
}

// GetWebLinkTemplate calls api.v0alpha.Org.GetWebLinkTemplate.
func (c *orgClient) GetWebLinkTemplate(ctx context.Context, req *connect_go.Request[v0alpha.GetWebLinkTemplateRequest]) (*connect_go.Response[v0alpha.GetWebLinkTemplateResponse], error) {
	return c.getWebLinkTemplate.CallUnary(ctx, req)
}

// UpdateWebLinkTemplate calls api.v0alpha.Org.UpdateWebLinkTemplate.
func (c *orgClient) UpdateWebLinkTemplate(ctx context.Context, req *connect_go.Request[v0alpha.UpdateWebLinkTemplateRequest]) (*connect_go.Response[v0alpha.UpdateWebLinkTemplateResponse], error) {
	return c.updateWebLinkTemplate.CallUnary(ctx, req)
}

// DeleteWebLinkTemplate calls api.v0alpha.Org.DeleteWebLinkTemplate.
func (c *orgClient) DeleteWebLinkTemplate(ctx context.Context, req *connect_go.Request[v0alpha.DeleteWebLinkTemplateRequest]) (*connect_go.Response[v0alpha.DeleteWebLinkTemplateResponse], error) {
	return c.deleteWebLinkTemplate.CallUnary(ctx, req)
}

// CreateAgentTriggerTemplate calls api.v0alpha.Org.CreateAgentTriggerTemplate.
func (c *orgClient) CreateAgentTriggerTemplate(ctx context.Context, req *connect_go.Request[v0alpha.CreateAgentTriggerTemplateRequest]) (*connect_go.Response[v0alpha.CreateAgentTriggerTemplateResponse], error) {
	return c.createAgentTriggerTemplate.CallUnary(ctx, req)
}

// ListAgentTriggerTemplates calls api.v0alpha.Org.ListAgentTriggerTemplates.
func (c *orgClient) ListAgentTriggerTemplates(ctx context.Context, req *connect_go.Request[v0alpha.ListAgentTriggerTemplatesRequest]) (*connect_go.Response[v0alpha.ListAgentTriggerTemplatesResponse], error) {
	return c.listAgentTriggerTemplates.CallUnary(ctx, req)
}

// GetAgentTriggerTemplate calls api.v0alpha.Org.GetAgentTriggerTemplate.
func (c *orgClient) GetAgentTriggerTemplate(ctx context.Context, req *connect_go.Request[v0alpha.GetAgentTriggerTemplateRequest]) (*connect_go.Response[v0alpha.GetAgentTriggerTemplateResponse], error) {
	return c.getAgentTriggerTemplate.CallUnary(ctx, req)
}

// UpdateAgentTriggerTemplate calls api.v0alpha.Org.UpdateAgentTriggerTemplate.
func (c *orgClient) UpdateAgentTriggerTemplate(ctx context.Context, req *connect_go.Request[v0alpha.UpdateAgentTriggerTemplateRequest]) (*connect_go.Response[v0alpha.UpdateAgentTriggerTemplateResponse], error) {
	return c.updateAgentTriggerTemplate.CallUnary(ctx, req)
}

// DeleteAgentTriggerTemplate calls api.v0alpha.Org.DeleteAgentTriggerTemplate.
func (c *orgClient) DeleteAgentTriggerTemplate(ctx context.Context, req *connect_go.Request[v0alpha.DeleteAgentTriggerTemplateRequest]) (*connect_go.Response[v0alpha.DeleteAgentTriggerTemplateResponse], error) {
	return c.deleteAgentTriggerTemplate.CallUnary(ctx, req)
}

// CreateClientInfoDisplayTemplate calls api.v0alpha.Org.CreateClientInfoDisplayTemplate.
func (c *orgClient) CreateClientInfoDisplayTemplate(ctx context.Context, req *connect_go.Request[v0alpha.CreateClientInfoDisplayTemplateRequest]) (*connect_go.Response[v0alpha.CreateClientInfoDisplayTemplateResponse], error) {
	return c.createClientInfoDisplayTemplate.CallUnary(ctx, req)
}

// ListClientInfoDisplayTemplates calls api.v0alpha.Org.ListClientInfoDisplayTemplates.
func (c *orgClient) ListClientInfoDisplayTemplates(ctx context.Context, req *connect_go.Request[v0alpha.ListClientInfoDisplayTemplatesRequest]) (*connect_go.Response[v0alpha.ListClientInfoDisplayTemplatesResponse], error) {
	return c.listClientInfoDisplayTemplates.CallUnary(ctx, req)
}

// UpdateClientInfoDisplayTemplate calls api.v0alpha.Org.UpdateClientInfoDisplayTemplate.
func (c *orgClient) UpdateClientInfoDisplayTemplate(ctx context.Context, req *connect_go.Request[v0alpha.UpdateClientInfoDisplayTemplateRequest]) (*connect_go.Response[v0alpha.UpdateClientInfoDisplayTemplateResponse], error) {
	return c.updateClientInfoDisplayTemplate.CallUnary(ctx, req)
}

// DeleteClientInfoDisplayTemplate calls api.v0alpha.Org.DeleteClientInfoDisplayTemplate.
func (c *orgClient) DeleteClientInfoDisplayTemplate(ctx context.Context, req *connect_go.Request[v0alpha.DeleteClientInfoDisplayTemplateRequest]) (*connect_go.Response[v0alpha.DeleteClientInfoDisplayTemplateResponse], error) {
	return c.deleteClientInfoDisplayTemplate.CallUnary(ctx, req)
}

// GetClientInfoDisplayTemplate calls api.v0alpha.Org.GetClientInfoDisplayTemplate.
func (c *orgClient) GetClientInfoDisplayTemplate(ctx context.Context, req *connect_go.Request[v0alpha.GetClientInfoDisplayTemplateRequest]) (*connect_go.Response[v0alpha.GetClientInfoDisplayTemplateResponse], error) {
	return c.getClientInfoDisplayTemplate.CallUnary(ctx, req)
}

// ListAgentPauseCodes calls api.v0alpha.Org.ListAgentPauseCodes.
func (c *orgClient) ListAgentPauseCodes(ctx context.Context, req *connect_go.Request[v0alpha.ListAgentPauseCodesRequest]) (*connect_go.Response[v0alpha.ListAgentPauseCodesResponse], error) {
	return c.listAgentPauseCodes.CallUnary(ctx, req)
}

// CreateAgentPauseCode calls api.v0alpha.Org.CreateAgentPauseCode.
func (c *orgClient) CreateAgentPauseCode(ctx context.Context, req *connect_go.Request[v0alpha.CreateAgentPauseCodeRequest]) (*connect_go.Response[v0alpha.CreateAgentPauseCodeResponse], error) {
	return c.createAgentPauseCode.CallUnary(ctx, req)
}

// UpdateAgentPauseCode calls api.v0alpha.Org.UpdateAgentPauseCode.
func (c *orgClient) UpdateAgentPauseCode(ctx context.Context, req *connect_go.Request[v0alpha.UpdateAgentPauseCodeRequest]) (*connect_go.Response[v0alpha.UpdateAgentPauseCodeResponse], error) {
	return c.updateAgentPauseCode.CallUnary(ctx, req)
}

// DeleteAgentPauseCode calls api.v0alpha.Org.DeleteAgentPauseCode.
func (c *orgClient) DeleteAgentPauseCode(ctx context.Context, req *connect_go.Request[v0alpha.DeleteAgentPauseCodeRequest]) (*connect_go.Response[v0alpha.DeleteAgentPauseCodeResponse], error) {
	return c.deleteAgentPauseCode.CallUnary(ctx, req)
}

// ListCustomReportFilters calls api.v0alpha.Org.ListCustomReportFilters.
func (c *orgClient) ListCustomReportFilters(ctx context.Context, req *connect_go.Request[v0alpha.ListCustomReportFiltersRequest]) (*connect_go.Response[v0alpha.ListCustomReportFiltersResponse], error) {
	return c.listCustomReportFilters.CallUnary(ctx, req)
}

// CreateCustomReportFilter calls api.v0alpha.Org.CreateCustomReportFilter.
func (c *orgClient) CreateCustomReportFilter(ctx context.Context, req *connect_go.Request[v0alpha.CreateCustomReportFilterRequest]) (*connect_go.Response[v0alpha.CreateCustomReportFilterResponse], error) {
	return c.createCustomReportFilter.CallUnary(ctx, req)
}

// UpdateCustomReportFilter calls api.v0alpha.Org.UpdateCustomReportFilter.
func (c *orgClient) UpdateCustomReportFilter(ctx context.Context, req *connect_go.Request[v0alpha.UpdateCustomReportFilterRequest]) (*connect_go.Response[v0alpha.UpdateCustomReportFilterResponse], error) {
	return c.updateCustomReportFilter.CallUnary(ctx, req)
}

// DeleteCustomReportFilter calls api.v0alpha.Org.DeleteCustomReportFilter.
func (c *orgClient) DeleteCustomReportFilter(ctx context.Context, req *connect_go.Request[v0alpha.DeleteCustomReportFilterRequest]) (*connect_go.Response[v0alpha.DeleteCustomReportFilterResponse], error) {
	return c.deleteCustomReportFilter.CallUnary(ctx, req)
}

// ListAgentResponseGroups calls api.v0alpha.Org.ListAgentResponseGroups.
func (c *orgClient) ListAgentResponseGroups(ctx context.Context, req *connect_go.Request[v0alpha.ListAgentResponseGroupsRequest]) (*connect_go.Response[v0alpha.ListAgentResponseGroupsResponse], error) {
	return c.listAgentResponseGroups.CallUnary(ctx, req)
}

// ListLastTemplateElements calls api.v0alpha.Org.ListLastTemplateElements.
func (c *orgClient) ListLastTemplateElements(ctx context.Context, req *connect_go.Request[v0alpha.ListLastTemplateElementsRequest]) (*connect_go.Response[v0alpha.ListLastTemplateElementsResponse], error) {
	return c.listLastTemplateElements.CallUnary(ctx, req)
}

// ListQueueConfigs calls api.v0alpha.Org.ListQueueConfigs.
func (c *orgClient) ListQueueConfigs(ctx context.Context, req *connect_go.Request[v0alpha.ListQueueConfigsReq]) (*connect_go.Response[v0alpha.ListQueueConfigsRes], error) {
	return c.listQueueConfigs.CallUnary(ctx, req)
}

// DeleteQueueConfig calls api.v0alpha.Org.DeleteQueueConfig.
func (c *orgClient) DeleteQueueConfig(ctx context.Context, req *connect_go.Request[v0alpha.DeleteQueueConfigReq]) (*connect_go.Response[v0alpha.DeleteQueueConfigRes], error) {
	return c.deleteQueueConfig.CallUnary(ctx, req)
}

// GetQueueConfig calls api.v0alpha.Org.GetQueueConfig.
func (c *orgClient) GetQueueConfig(ctx context.Context, req *connect_go.Request[v0alpha.GetQueueConfigReq]) (*connect_go.Response[v0alpha.GetQueueConfigRes], error) {
	return c.getQueueConfig.CallUnary(ctx, req)
}

// CreateQueueConfig calls api.v0alpha.Org.CreateQueueConfig.
func (c *orgClient) CreateQueueConfig(ctx context.Context, req *connect_go.Request[v0alpha.CreateQueueConfigReq]) (*connect_go.Response[v0alpha.CreateQueueConfigRes], error) {
	return c.createQueueConfig.CallUnary(ctx, req)
}

// UpdateQueueConfig calls api.v0alpha.Org.UpdateQueueConfig.
func (c *orgClient) UpdateQueueConfig(ctx context.Context, req *connect_go.Request[v0alpha.UpdateQueueConfigReq]) (*connect_go.Response[v0alpha.UpdateQueueConfigRes], error) {
	return c.updateQueueConfig.CallUnary(ctx, req)
}

// CopyQueueConfig calls api.v0alpha.Org.CopyQueueConfig.
func (c *orgClient) CopyQueueConfig(ctx context.Context, req *connect_go.Request[v0alpha.CopyQueueConfigReq]) (*connect_go.Response[v0alpha.CopyQueueConfigRes], error) {
	return c.copyQueueConfig.CallUnary(ctx, req)
}

// GetAllQueueConfigSounds calls api.v0alpha.Org.GetAllQueueConfigSounds.
func (c *orgClient) GetAllQueueConfigSounds(ctx context.Context, req *connect_go.Request[v0alpha.GetAllQueueConfigSoundsReq]) (*connect_go.Response[v0alpha.GetAllQueueConfigSoundsRes], error) {
	return c.getAllQueueConfigSounds.CallUnary(ctx, req)
}

// GetQueueConfigSound calls api.v0alpha.Org.GetQueueConfigSound.
func (c *orgClient) GetQueueConfigSound(ctx context.Context, req *connect_go.Request[v0alpha.GetQueueConfigSoundReq]) (*connect_go.Response[v0alpha.GetQueueConfigSoundRes], error) {
	return c.getQueueConfigSound.CallUnary(ctx, req)
}

// SetQueueConfigSound calls api.v0alpha.Org.SetQueueConfigSound.
func (c *orgClient) SetQueueConfigSound(ctx context.Context, req *connect_go.Request[v0alpha.SetQueueConfigSoundReq]) (*connect_go.Response[v0alpha.SetQueueConfigSoundRes], error) {
	return c.setQueueConfigSound.CallUnary(ctx, req)
}

// SetAllQueueConfigSoundsFromSource calls api.v0alpha.Org.SetAllQueueConfigSoundsFromSource.
func (c *orgClient) SetAllQueueConfigSoundsFromSource(ctx context.Context, req *connect_go.Request[v0alpha.SetAllQueueConfigSoundsFromSourceReq]) (*connect_go.Response[v0alpha.SetAllQueueConfigSoundsFromSourceRes], error) {
	return c.setAllQueueConfigSoundsFromSource.CallUnary(ctx, req)
}

// GetUserBlocked calls api.v0alpha.Org.GetUserBlocked.
func (c *orgClient) GetUserBlocked(ctx context.Context, req *connect_go.Request[v0alpha.GetUserBlockedRequest]) (*connect_go.Response[v0alpha.GetUserBlockedResponse], error) {
	return c.getUserBlocked.CallUnary(ctx, req)
}

// UnblockUser calls api.v0alpha.Org.UnblockUser.
func (c *orgClient) UnblockUser(ctx context.Context, req *connect_go.Request[v0alpha.UnblockUserRequest]) (*connect_go.Response[v0alpha.UnblockUserResponse], error) {
	return c.unblockUser.CallUnary(ctx, req)
}

// ListP3UnMigratedUsers calls api.v0alpha.Org.ListP3UnMigratedUsers.
func (c *orgClient) ListP3UnMigratedUsers(ctx context.Context, req *connect_go.Request[v0alpha.ListP3UnMigratedUsersRequest]) (*connect_go.Response[v0alpha.ListP3UnMigratedUsersResponse], error) {
	return c.listP3UnMigratedUsers.CallUnary(ctx, req)
}

// MigrateP3User calls api.v0alpha.Org.MigrateP3User.
func (c *orgClient) MigrateP3User(ctx context.Context, req *connect_go.Request[v0alpha.MigrateP3UserRequest]) (*connect_go.Response[v0alpha.MigrateP3UserResponse], error) {
	return c.migrateP3User.CallUnary(ctx, req)
}

// UpdateP3UserName calls api.v0alpha.Org.UpdateP3UserName.
func (c *orgClient) UpdateP3UserName(ctx context.Context, req *connect_go.Request[v0alpha.UpdateP3UserNameRequest]) (*connect_go.Response[v0alpha.UpdateP3UserNameResponse], error) {
	return c.updateP3UserName.CallUnary(ctx, req)
}

// ListOwnedUsers calls api.v0alpha.Org.ListOwnedUsers.
func (c *orgClient) ListOwnedUsers(ctx context.Context, req *connect_go.Request[v0alpha.ListOwnedUsersRequest]) (*connect_go.Response[v0alpha.ListOwnedUsersResponse], error) {
	return c.listOwnedUsers.CallUnary(ctx, req)
}

// ListOwnedOrgs calls api.v0alpha.Org.ListOwnedOrgs.
func (c *orgClient) ListOwnedOrgs(ctx context.Context, req *connect_go.Request[v0alpha.ListOwnedOrgsRequest]) (*connect_go.Response[v0alpha.ListOwnedOrgsResponse], error) {
	return c.listOwnedOrgs.CallUnary(ctx, req)
}

// RemoveLoginStrikes calls api.v0alpha.Org.RemoveLoginStrikes.
func (c *orgClient) RemoveLoginStrikes(ctx context.Context, req *connect_go.Request[v0alpha.RemoveLoginStrikesRequest]) (*connect_go.Response[v0alpha.RemoveLoginStrikesResponse], error) {
	return c.removeLoginStrikes.CallUnary(ctx, req)
}

// RemoveUserLoginStrikes calls api.v0alpha.Org.RemoveUserLoginStrikes.
func (c *orgClient) RemoveUserLoginStrikes(ctx context.Context, req *connect_go.Request[v0alpha.RemoveUserLoginStrikesRequest]) (*connect_go.Response[v0alpha.RemoveUserLoginStrikesResponse], error) {
	return c.removeUserLoginStrikes.CallUnary(ctx, req)
}

// ListLoginHistory calls api.v0alpha.Org.ListLoginHistory.
func (c *orgClient) ListLoginHistory(ctx context.Context, req *connect_go.Request[v0alpha.ListLoginHistoryRequest]) (*connect_go.Response[v0alpha.ListLoginHistoryResponse], error) {
	return c.listLoginHistory.CallUnary(ctx, req)
}

// UpdateP3UserSids calls api.v0alpha.Org.UpdateP3UserSids.
func (c *orgClient) UpdateP3UserSids(ctx context.Context, req *connect_go.Request[v0alpha.UpdateP3UserSidsRequest]) (*connect_go.Response[v0alpha.UpdateP3UserSidsResponse], error) {
	return c.updateP3UserSids.CallUnary(ctx, req)
}

// CreateAuthConnection calls api.v0alpha.Org.CreateAuthConnection.
func (c *orgClient) CreateAuthConnection(ctx context.Context, req *connect_go.Request[v0alpha.CreateAuthConnectionRequest]) (*connect_go.Response[v0alpha.CreateAuthConnectionResponse], error) {
	return c.createAuthConnection.CallUnary(ctx, req)
}

// GetAuthConnectionSettings calls api.v0alpha.Org.GetAuthConnectionSettings.
func (c *orgClient) GetAuthConnectionSettings(ctx context.Context, req *connect_go.Request[v0alpha.GetAuthConnectionSettingsRequest]) (*connect_go.Response[v0alpha.GetAuthConnectionSettingsResponse], error) {
	return c.getAuthConnectionSettings.CallUnary(ctx, req)
}

// UpdateAuthConnectionSettings calls api.v0alpha.Org.UpdateAuthConnectionSettings.
func (c *orgClient) UpdateAuthConnectionSettings(ctx context.Context, req *connect_go.Request[v0alpha.UpdateAuthConnectionSettingsRequest]) (*connect_go.Response[v0alpha.UpdateAuthConnectionSettingsResponse], error) {
	return c.updateAuthConnectionSettings.CallUnary(ctx, req)
}

// DeleteAuthConnection calls api.v0alpha.Org.DeleteAuthConnection.
func (c *orgClient) DeleteAuthConnection(ctx context.Context, req *connect_go.Request[v0alpha.DeleteAuthConnectionRequest]) (*connect_go.Response[v0alpha.DeleteAuthConnectionResponse], error) {
	return c.deleteAuthConnection.CallUnary(ctx, req)
}

// GetUserSubscription calls api.v0alpha.Org.GetUserSubscription.
func (c *orgClient) GetUserSubscription(ctx context.Context, req *connect_go.Request[v0alpha.GetUserSubscriptionRequest]) (*connect_go.Response[v0alpha.GetUserSubscriptionResponse], error) {
	return c.getUserSubscription.CallUnary(ctx, req)
}

// AddUserSubscription calls api.v0alpha.Org.AddUserSubscription.
func (c *orgClient) AddUserSubscription(ctx context.Context, req *connect_go.Request[v0alpha.AddUserSubscriptionRequest]) (*connect_go.Response[v0alpha.AddUserSubscriptionResponse], error) {
	return c.addUserSubscription.CallUnary(ctx, req)
}

// RemoveUserSubscription calls api.v0alpha.Org.RemoveUserSubscription.
func (c *orgClient) RemoveUserSubscription(ctx context.Context, req *connect_go.Request[v0alpha.RemoveUserSubscriptionRequest]) (*connect_go.Response[v0alpha.RemoveUserSubscriptionResponse], error) {
	return c.removeUserSubscription.CallUnary(ctx, req)
}

// UpdateUserSubscription calls api.v0alpha.Org.UpdateUserSubscription.
func (c *orgClient) UpdateUserSubscription(ctx context.Context, req *connect_go.Request[v0alpha.UpdateUserSubscriptionRequest]) (*connect_go.Response[v0alpha.UpdateUserSubscriptionResponse], error) {
	return c.updateUserSubscription.CallUnary(ctx, req)
}

// ListUserSubscriptions calls api.v0alpha.Org.ListUserSubscriptions.
func (c *orgClient) ListUserSubscriptions(ctx context.Context, req *connect_go.Request[v0alpha.ListUserSubscriptionsRequest]) (*connect_go.Response[v0alpha.ListUserSubscriptionsResponse], error) {
	return c.listUserSubscriptions.CallUnary(ctx, req)
}

// ListOrgSubscriptions calls api.v0alpha.Org.ListOrgSubscriptions.
func (c *orgClient) ListOrgSubscriptions(ctx context.Context, req *connect_go.Request[v0alpha.ListOrgSubscriptionsRequest]) (*connect_go.Response[v0alpha.ListOrgSubscriptionsResponse], error) {
	return c.listOrgSubscriptions.CallUnary(ctx, req)
}

// GetSystemEnvironmentDetails calls api.v0alpha.Org.GetSystemEnvironmentDetails.
func (c *orgClient) GetSystemEnvironmentDetails(ctx context.Context, req *connect_go.Request[v0alpha.GetSystemEnvironmentDetailsRequest]) (*connect_go.Response[v0alpha.GetSystemEnvironmentDetailsResponse], error) {
	return c.getSystemEnvironmentDetails.CallUnary(ctx, req)
}

// ListAgentStatisticsTemplates calls api.v0alpha.Org.ListAgentStatisticsTemplates.
func (c *orgClient) ListAgentStatisticsTemplates(ctx context.Context, req *connect_go.Request[v0alpha.ListAgentStatisticsTemplatesRequest]) (*connect_go.Response[v0alpha.ListAgentStatisticsTemplatesResponse], error) {
	return c.listAgentStatisticsTemplates.CallUnary(ctx, req)
}

// CreateAgentStatisticsTemplate calls api.v0alpha.Org.CreateAgentStatisticsTemplate.
func (c *orgClient) CreateAgentStatisticsTemplate(ctx context.Context, req *connect_go.Request[v0alpha.CreateAgentStatisticsTemplateRequest]) (*connect_go.Response[v0alpha.CreateAgentStatisticsTemplateResponse], error) {
	return c.createAgentStatisticsTemplate.CallUnary(ctx, req)
}

// UpdateAgentStatisticsTemplate calls api.v0alpha.Org.UpdateAgentStatisticsTemplate.
func (c *orgClient) UpdateAgentStatisticsTemplate(ctx context.Context, req *connect_go.Request[v0alpha.UpdateAgentStatisticsTemplateRequest]) (*connect_go.Response[v0alpha.UpdateAgentStatisticsTemplateResponse], error) {
	return c.updateAgentStatisticsTemplate.CallUnary(ctx, req)
}

// DeleteAgentStatisticsTemplate calls api.v0alpha.Org.DeleteAgentStatisticsTemplate.
func (c *orgClient) DeleteAgentStatisticsTemplate(ctx context.Context, req *connect_go.Request[v0alpha.DeleteAgentStatisticsTemplateRequest]) (*connect_go.Response[v0alpha.DeleteAgentStatisticsTemplateResponse], error) {
	return c.deleteAgentStatisticsTemplate.CallUnary(ctx, req)
}

// OrgHandler is an implementation of the api.v0alpha.Org service.
type OrgHandler interface {
	// Registers a new organization
	RegisterOrganization(context.Context, *connect_go.Request[v0alpha.RegisterOrganizationRequest]) (*connect_go.Response[v0alpha.RegisterOrganizationResponse], error)
	// Converts a standard organiztion to a manual one.
	// WARNING: this process cannot be reversed.
	ConvertOrgToManual(context.Context, *connect_go.Request[v0alpha.ConvertOrgToManualRequest]) (*connect_go.Response[v0alpha.ConvertOrgToManualResponse], error)
	// Updates an organization
	UpdateOrganization(context.Context, *connect_go.Request[v0alpha.UpdateOrganizationRequest]) (*connect_go.Response[v0alpha.UpdateOrganizationResponse], error)
	// Archives an organization. An archived organization effectively disappears, but isn't deleted.
	ArchiveOrganization(context.Context, *connect_go.Request[v0alpha.ArchiveOrganizationRequest]) (*connect_go.Response[v0alpha.ArchiveOrganizationResponse], error)
	// Restores an archived organization.
	UnArchiveOrganization(context.Context, *connect_go.Request[v0alpha.UnArchiveOrganizationRequest]) (*connect_go.Response[v0alpha.UnArchiveOrganizationResponse], error)
	// Returns the list of organizations that have been archived.
	ListArchivedOrganizations(context.Context, *connect_go.Request[v0alpha.ListArchivedOrganizationsRequest]) (*connect_go.Response[v0alpha.ListArchivedOrganizationsResponse], error)
	GetOrganizationProfile(context.Context, *connect_go.Request[v0alpha.GetOrganizationProfileRequest]) (*connect_go.Response[v0alpha.GetOrganizationProfileResponse], error)
	GetOrganizationProfileById(context.Context, *connect_go.Request[v0alpha.GetOrganizationProfileByIdRequest]) (*connect_go.Response[v0alpha.GetOrganizationProfileResponse], error)
	ListOrganizationDescriptions(context.Context, *connect_go.Request[v0alpha.ListOrganizationDescriptionsRequest]) (*connect_go.Response[v0alpha.ListOrganizationDescriptionsResponse], error)
	ListRegionalOrganizations(context.Context, *connect_go.Request[v0alpha.ListRegionalOrganizationsRequest]) (*connect_go.Response[v0alpha.ListRegionalOrganizationsResponse], error)
	// update an organizations owning organization.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	UpdateP3OwningOrg(context.Context, *connect_go.Request[v0alpha.UpdateP3OwningOrgRequest]) (*connect_go.Response[v0alpha.UpdateP3OwningOrgResponse], error)
	// gets the owning organiztion for the given org
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	GetP3OwningOrg(context.Context, *connect_go.Request[v0alpha.GetP3OwningOrgRequest]) (*connect_go.Response[v0alpha.GetP3OwningOrgResponse], error)
	ListOrganizationUserDescriptions(context.Context, *connect_go.Request[v0alpha.ListOrganizationUserDescriptionsRequest]) (*connect_go.Response[v0alpha.ListOrganizationUserDescriptionsResponse], error)
	ListUserDescriptions(context.Context, *connect_go.Request[v0alpha.ListUserDescriptionsRequest], *connect_go.ServerStream[v0alpha.ListUserDescriptionsResponse]) error
	GetUserDirectory(context.Context, *connect_go.Request[v0alpha.GetUserDirectoryRequest]) (*connect_go.Response[v0alpha.GetUserDirectoryResponse], error)
	// GetRegions takes nothing in the request and returns a list of all region names
	GetRegions(context.Context, *connect_go.Request[v0alpha.GetRegionsRequest]) (*connect_go.Response[v0alpha.GetRegionsResponse], error)
	GetUserDetails(context.Context, *connect_go.Request[v0alpha.GetUserDetailsRequest]) (*connect_go.Response[v0alpha.UserDetails], error)
	AdminGetUserDetails(context.Context, *connect_go.Request[v0alpha.AdminGetUserDetailsRequest]) (*connect_go.Response[v0alpha.UserDetails], error)
	GetAgentUsers(context.Context, *connect_go.Request[v0alpha.GetAgentUsersRequest]) (*connect_go.Response[v0alpha.GetAgentUsersResponse], error)
	// This is transitionary api. It will be removed when user api is available.
	// GetAgentSettings gets some agent settings as defined by the GetAgentSettingsRequest.
	// Required Permissions:
	// AGENT
	GetAgentSettings(context.Context, *connect_go.Request[v0alpha.GetAgentSettingsRequest]) (*connect_go.Response[v0alpha.GetAgentSettingsResponse], error)
	// GetAgentProfileGroup gets a single AgentProfileGroup by given ID
	// Required Permissions:
	// ORG_VIEW
	GetAgentProfileGroup(context.Context, *connect_go.Request[v0alpha.GetAgentProfileGroupRequest]) (*connect_go.Response[v0alpha.GetAgentProfileGroupResponse], error)
	// UpdateAgentProfileGroup updates an AgentProfileGroup. Can only update if user is in same org as AgentProfileGroup
	// Required Permissions:
	// ORG_EDIT
	UpdateAgentProfileGroup(context.Context, *connect_go.Request[v0alpha.UpdateAgentProfileGroupRequest]) (*connect_go.Response[v0alpha.UpdateAgentProfileGroupResponse], error)
	// CreateAgentProfileGroup creates an AgentProfileGroup. Can only create if user is in same org as AgentProfileGroup
	// Required Permissions:
	// ORG_EDIT
	CreateAgentProfileGroup(context.Context, *connect_go.Request[v0alpha.CreateAgentProfileGroupRequest]) (*connect_go.Response[v0alpha.CreateAgentProfileGroupResponse], error)
	// ListAgentProfileGroups lists all AgentProfileGroups for a given org
	// Required Permissions:
	// ORG_VIEW
	ListAgentProfileGroups(context.Context, *connect_go.Request[v0alpha.ListAgentProfileGroupsRequest]) (*connect_go.Response[v0alpha.ListAgentProfileGroupsResponse], error)
	// DeleteAgentProfileGroup deletes a single AgentProfileGroup by given ID. Can only delete if user is in same org as AgentProfileGroup
	// Required Permissions:
	// ORG_EDIT
	DeleteAgentProfileGroup(context.Context, *connect_go.Request[v0alpha.DeleteAgentProfileGroupRequest]) (*connect_go.Response[v0alpha.DeleteAgentProfileGroupResponse], error)
	// AssignAgentProfileGroups bulk assigns a list of users to a given AgentProfileGroup
	// Required Permissions:
	// ORG_EDIT
	AssignAgentProfileGroups(context.Context, *connect_go.Request[v0alpha.AssignAgentProfileGroupsRequest]) (*connect_go.Response[v0alpha.AssignAgentProfileGroupsResponse], error)
	// UpdateUser updates a user as defined by the UpdateUserRequest.
	// Required Permissions:
	// USER_EDIT if the user_id is given on the request.
	// NONE (TODO: create & use new perm) if the user_id is NOT given.
	//
	//	This will only the currently logged in user.
	//	Only some of the fields on the request message can be updated
	//	for the currently logged in user: time_zone, linkback_numbers,
	//	caller_ids, and default_app.
	UpdateUser(context.Context, *connect_go.Request[v0alpha.UpdateUserRequest]) (*connect_go.Response[v0alpha.UpdateUserResponse], error)
	// CreateUser creates a new user as defined by the CreateUserRequest
	// request message.
	// Required Permissions:
	// USER_CREATE, CUSTOMER_SUPPORT if adding to an org other than your own
	CreateUser(context.Context, *connect_go.Request[v0alpha.CreateUserRequest]) (*connect_go.Response[v0alpha.CreateUserResponse], error)
	// Creates a delegated user. This should only be called by an auth0 action.
	CreateDelegatedUser(context.Context, *connect_go.Request[v0alpha.CreateDelegatedUserRequest]) (*connect_go.Response[v0alpha.CreateDelegatedUserResponse], error)
	// UpdateUserPassword updates a users password to the
	// password given on the request message.
	// Required Permissions:
	// USER_EDIT if user_id was given on the request (Update another user's password)
	// USER_EDIT_PASSWORD if user_id is retrieved from token (Update your own password)
	UpdateUserPassword(context.Context, *connect_go.Request[v0alpha.UpdateUserPasswordRequest]) (*connect_go.Response[v0alpha.UpdateUserPasswordResponse], error)
	// updates the users PasswordResetRequired field to false.
	// this should only be called by an auth0 action.
	ResetUserRequirePasswordReset(context.Context, *connect_go.Request[v0alpha.ResetUserRequirePasswordResetRequest]) (*connect_go.Response[v0alpha.ResetUserRequirePasswordResetResponse], error)
	// Generate a password reset link for a user.
	// Required Permissions:
	//
	//	USER_EDIT_PASSWORD if user_id not given on request.
	//	USER_EDIT if user_id given on the request.
	//	CUSTOMER_SUPPORT if user_id & org_id given on request. User_id must be given if org_id is.
	GetUserPasswordResetLink(context.Context, *connect_go.Request[v0alpha.GetUserPasswordResetLinkRequest]) (*connect_go.Response[v0alpha.GetUserPasswordResetLinkResponse], error)
	// Returns whether or not the given user's email is verified.
	// Required Permissions:
	//
	//	USER_EDIT if org_id not given on request.
	//	CUSTOMER_SUPPORT if org_id given on request.
	GetUserEmailVerified(context.Context, *connect_go.Request[v0alpha.GetUserEmailVerifiedRequest]) (*connect_go.Response[v0alpha.GetUserEmailVerifiedResponse], error)
	// Sends a verfication email to the given users email.
	// Required Permissions:
	//
	//	USER_EDIT if org_id not given on request.
	//	CUSTOMER_SUPPORT if org_id given on request.
	SendUserVerificationEmail(context.Context, *connect_go.Request[v0alpha.SendUserVerificationEmailRequest]) (*connect_go.Response[v0alpha.SendUserVerificationEmailResponse], error)
	// Sets the given user's to verified without needing to send a verification email.
	// Required Permissions:
	//
	//	USER_EDIT if org_id not given on request.
	//	CUSTOMER_SUPPORT if org_id given on request.
	ManualUserEmailVerification(context.Context, *connect_go.Request[v0alpha.ManualUserEmailVerificationRequest]) (*connect_go.Response[v0alpha.ManualUserEmailVerificationResponse], error)
	// Authenticates impersonation and generates token to be used.
	// Required Permissions:
	// CUSTOMER_SUPPORT
	GetTempUserToken(context.Context, *connect_go.Request[v0alpha.GetTempUserTokenReq]) (*connect_go.Response[v0alpha.GetTempUserTokenRes], error)
	GetCountriesList(context.Context, *connect_go.Request[v0alpha.GetCountriesListRequest]) (*connect_go.Response[v0alpha.GetCountriesListResponse], error)
	GetAdminClientPreferences(context.Context, *connect_go.Request[v0alpha.GetAdminClientPreferencesRequest]) (*connect_go.Response[v0alpha.GetAdminClientPreferencesResponse], error)
	UpdateAdminClientPreferences(context.Context, *connect_go.Request[v0alpha.UpdateAdminClientPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateAdminClientPreferencesResponse], error)
	GetPermissions(context.Context, *connect_go.Request[v0alpha.GetPermissionsRequest]) (*connect_go.Response[v0alpha.GetPermissionsResponse], error)
	// RevokeAccountOwnerPermissionFromUser revokes the
	// account owner permission for the given user
	RevokeAccountOwnerPermissionFromUser(context.Context, *connect_go.Request[v0alpha.RevokeAccountOwnerPermissionFromUserRequest]) (*connect_go.Response[v0alpha.RevokeAccountOwnerPermissionFromUserResponse], error)
	// UpdateUserDisabled updates a specified user to disabled or enabled. A disabled user cannot log in.
	// Required Permissions:
	//   - USER_EDIT
	UpdateUserDisabled(context.Context, *connect_go.Request[v0alpha.UpdateUserDisabledRequest]) (*connect_go.Response[v0alpha.UpdateUserDisabledResponse], error)
	// UpdateBulkUsersDisabled updates every given user_id to be disabled or enabled. The returned list of updated_ids contains every id that was successfully updated.
	// Required Permissions:
	//   - USER_EDIT
	UpdateBulkUsersDisabled(context.Context, *connect_go.Request[v0alpha.UpdateBulkUsersDisabledRequest]) (*connect_go.Response[v0alpha.UpdateBulkUsersDisabledResponse], error)
	// Returns the billing data for the given org. Billing data
	// will only be included for countries present on the org's
	// allowed countries preference.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.InvalidArgument: The org_id on the request was invalid.
	//   - grpc.NotFound: The given org_id did not exist.
	//   - grpc.Internal: An unexpected error occurred while getting the orgs billing settings.
	GetOrgBillingSettings(context.Context, *connect_go.Request[v0alpha.GetOrgBillingSettingsRequest]) (*connect_go.Response[v0alpha.GetOrgBillingSettingsResponse], error)
	// Updates the given orgs billing settings as defined by the info
	// given on the request message. Only fields that are given on the
	// field mask will be updated.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.InvalidArgument: A field on the request was invalid.
	//   - grpc.NotFound: The given org_id did not exist.
	//   - grpc.Internal: An unexpected error occurred while updating the orgs billing settings.
	SetOrgBillingSettings(context.Context, *connect_go.Request[v0alpha.SetOrgBillingSettingsRequest]) (*connect_go.Response[v0alpha.SetOrgBillingSettingsResponse], error)
	// Adds a single billing region override for the given orgs billing settings.
	// If an override already exists for the given region it will be updated.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.InvalidArgument: A field on the request was invalid.
	//   - grpc.NotFound: The given org_id did not exist.
	//   - grpc.Internal: An unexpected error occurred while adding the override.
	AddOrgBillingOverride(context.Context, *connect_go.Request[v0alpha.AddOrgBillingOverrideRequest]) (*connect_go.Response[v0alpha.AddOrgBillingOverrideResponse], error)
	// Removes a single billing region override for the given orgs billing settings.
	// If the region override doesn't exist the rpcs will just do nothing.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.InvalidArgument: The given org_id was invalid.
	//   - grpc.NotFound: The given org_id did not exist.
	//   - grpc.Internal: An unexpected error occurred while removing the override.
	RemoveOrgBillingOverride(context.Context, *connect_go.Request[v0alpha.RemoveOrgBillingOverrideRequest]) (*connect_go.Response[v0alpha.RemoveOrgBillingOverrideResponse], error)
	// Returns the system default billing rates.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	GetSystemDefaultBillingRates(context.Context, *connect_go.Request[v0alpha.GetSystemDefaultBillingRatesRequest]) (*connect_go.Response[v0alpha.GetSystemDefaultBillingRatesResponse], error)
	// ListPermissionGroups returns the list of an org's permission groups.
	ListPermissionGroups(context.Context, *connect_go.Request[v0alpha.ListPermissionGroupsRequest]) (*connect_go.Response[v0alpha.ListPermissionGroupsResponse], error)
	// CreatePermissionGroup creates a new permission group for the caller's organization.
	CreatePermissionGroup(context.Context, *connect_go.Request[v0alpha.CreatePermissionGroupRequest]) (*connect_go.Response[v0alpha.CreatePermissionGroupResponse], error)
	// UpdatePermissionGroup updates a permission group by id for the caller's organization.
	UpdatePermissionGroup(context.Context, *connect_go.Request[v0alpha.UpdatePermissionGroupRequest]) (*connect_go.Response[v0alpha.UpdatePermissionGroupResponse], error)
	// DeletePermissionGroup deletes a permission group by id for the caller's organization.
	DeletePermissionGroup(context.Context, *connect_go.Request[v0alpha.DeletePermissionGroupRequest]) (*connect_go.Response[v0alpha.DeletePermissionGroupResponse], error)
	// Assigns a user to a acount owner permission group.
	AssignUserToAccountOwnerPermissionGroup(context.Context, *connect_go.Request[v0alpha.AssignUserToAccountOwnerPermissionGroupRequest]) (*connect_go.Response[v0alpha.AssignUserToAccountOwnerPermissionGroupResponse], error)
	// Assigns a permission group to another user.
	// Requires that all three of permission group, calling user, and user being assigned to be of the same organization.
	// Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
	AssignUserPermissionGroup(context.Context, *connect_go.Request[v0alpha.AssignUserPermissionGroupRequest]) (*connect_go.Response[v0alpha.AssignUserPermissionGroupResponse], error)
	// Assigns a permission group to multiple users.
	// Requires that all three of permission group, calling user, and user being assigned to be of the same organization.
	// Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
	AssignUsersPermissionGroup(context.Context, *connect_go.Request[v0alpha.AssignUsersPermissionGroupRequest]) (*connect_go.Response[v0alpha.AssignUsersPermissionGroupResponse], error)
	// Assigns permission group(s) to another user.
	// Requires that all three of permission group, calling user, and user being assigned to be of the same organization.
	// Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
	UpdateUserNeoPermissionGroups(context.Context, *connect_go.Request[v0alpha.UpdateUserNeoPermissionGroupsRequest]) (*connect_go.Response[v0alpha.UpdateUserNeoPermissionGroupsResponse], error)
	// Revokes a permission group from another user.
	// Requires that all three of permission group, calling user, and user being revoked to be of the same organization.
	// Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
	RevokeUserPermissionGroup(context.Context, *connect_go.Request[v0alpha.RevokeUserPermissionGroupRequest]) (*connect_go.Response[v0alpha.RevokeUserPermissionGroupResponse], error)
	// Revokes a permission group to multiple users.
	// Requires that all three of permission group, calling user, and user being revoked to be of the same organization.
	// Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
	RevokeUsersPermissionGroup(context.Context, *connect_go.Request[v0alpha.RevokeUsersPermissionGroupRequest]) (*connect_go.Response[v0alpha.RevokeUsersPermissionGroupResponse], error)
	// InitDefaultPermissionGroups initializes the default read only permission groups for the callers organization.
	// Idempotent call. Returns the default permission groups for the organization.
	InitDefaultPermissionGroups(context.Context, *connect_go.Request[v0alpha.InitDefaultPermissionGroupsRequest]) (*connect_go.Response[v0alpha.InitDefaultPermissionGroupsResponse], error)
	// Adds a single permission to an organization's Account Owner Group.
	AddPermissionToAccountOwnerPermissionGroup(context.Context, *connect_go.Request[v0alpha.AddPermissionToAccountOwnerPermissionGroupRequest]) (*connect_go.Response[v0alpha.AddPermissionToAccountOwnerPermissionGroupResponse], error)
	// Adds a single permission to an organization's Account Owner Group.
	RevokePermissionToAccountOwnerPermissionGroup(context.Context, *connect_go.Request[v0alpha.RevokePermissionToAccountOwnerPermissionGroupRequest]) (*connect_go.Response[v0alpha.RevokePermissionToAccountOwnerPermissionGroupResponse], error)
	// Adds a single permission to an organization's default Super User Group.
	// Required Permissions:
	//   - TCN_ADMIN_SETTINGS
	AddPermissionToOrgDefaultGroup(context.Context, *connect_go.Request[v0alpha.AddPermissionToOrgDefaultGroupRequest]) (*connect_go.Response[v0alpha.AddPermissionToOrgDefaultGroupResponse], error)
	// Removes a single permission from an organization's default Super User Group.
	// Required Permissions:
	//   - TCN_ADMIN_SETTINGS
	RemovePermissionFromOrgDefaultGroup(context.Context, *connect_go.Request[v0alpha.RemovePermissionFromOrgDefaultGroupRequest]) (*connect_go.Response[v0alpha.RemovePermissionFromOrgDefaultGroupResponse], error)
	// Returns an organization's default Super User Group.
	// Required Permissions:
	//   - TCN_ADMIN_SETTINGS
	GetOrgDefaultSuperUserGroup(context.Context, *connect_go.Request[v0alpha.GetOrgDefaultSuperUserGroupRequest]) (*connect_go.Response[v0alpha.GetOrgDefaultSuperUserGroupResponse], error)
	// ListP3PermissionGroups returns the list of an org's P3 permission groups.
	ListP3PermissionGroups(context.Context, *connect_go.Request[v0alpha.ListP3PermissionGroupsRequest]) (*connect_go.Response[v0alpha.ListP3PermissionGroupsResponse], error)
	// AddUserRegion to a Users Accessible Regions
	AddUserRegion(context.Context, *connect_go.Request[v0alpha.AddUserRegionRequest]) (*connect_go.Response[v0alpha.AddUserRegionResponse], error)
	// RemoveUserRegion from a Users Accessible Regions
	RemoveUserRegion(context.Context, *connect_go.Request[v0alpha.RemoveUserRegionRequest]) (*connect_go.Response[v0alpha.RemoveUserRegionResponse], error)
	// Creates new p3 permission group
	CreateP3PermissionGroup(context.Context, *connect_go.Request[v0alpha.CreateP3PermissionGroupRequest]) (*connect_go.Response[v0alpha.CreateP3PermissionGroupResponse], error)
	// Update p3 permission group
	UpdateP3PermissionGroup(context.Context, *connect_go.Request[v0alpha.UpdateP3PermissionGroupRequest]) (*connect_go.Response[v0alpha.UpdateP3PermissionGroupResponse], error)
	// Delete new p3 permission group
	DeleteP3PermissionGroup(context.Context, *connect_go.Request[v0alpha.DeleteP3PermissionGroupRequest]) (*connect_go.Response[v0alpha.DeleteP3PermissionGroupResponse], error)
	// Assign one or many users a p3 permission group
	AssignUsersP3PermissionGroup(context.Context, *connect_go.Request[v0alpha.AssignUsersP3PermissionGroupRequest]) (*connect_go.Response[v0alpha.AssignUsersP3PermissionGroupResponse], error)
	// AddLoginToUser Creates new login for a given user
	AddLoginToUser(context.Context, *connect_go.Request[v0alpha.AddLoginToUserRequest]) (*connect_go.Response[v0alpha.AddLoginToUserResponse], error)
	// Revoke a p3 permission group to another user(s).
	// Requires that permission group and user(s) being assigned to be of the same organization.
	// Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
	RevokeUsersP3PermissionGroup(context.Context, *connect_go.Request[v0alpha.RevokeUsersP3PermissionGroupRequest]) (*connect_go.Response[v0alpha.RevokeUsersP3PermissionGroupResponse], error)
	// GetContactPreferences returns all contact preferences for client TODO: will replace ContactList above
	GetContactPreferences(context.Context, *connect_go.Request[v0alpha.GetContactPreferencesRequest]) (*connect_go.Response[v0alpha.GetContactPreferencesResponse], error)
	// UpdateContactPreferences update fields for all contact preferences for client
	UpdateContactPreferences(context.Context, *connect_go.Request[v0alpha.UpdateContactPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateContactPreferencesResponse], error)
	// Returns all client compliance preferences
	GetCompliancePreferences(context.Context, *connect_go.Request[v0alpha.GetCompliancePreferencesRequest]) (*connect_go.Response[v0alpha.GetCompliancePreferencesResponse], error)
	// Updates all client Compliance preferences
	UpdateCompliancePreferences(context.Context, *connect_go.Request[v0alpha.UpdateCompliancePreferencesRequest]) (*connect_go.Response[v0alpha.UpdateCompliancePreferencesResponse], error)
	// GetAgentPreferences returns all client agent preferences
	GetAgentPreferences(context.Context, *connect_go.Request[v0alpha.GetAgentPreferencesRequest]) (*connect_go.Response[v0alpha.GetAgentPreferencesResponse], error)
	// UpdateAgentPreferences updates client agent preferences
	UpdateAgentPreferences(context.Context, *connect_go.Request[v0alpha.UpdateAgentPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateAgentPreferencesResponse], error)
	// GetOrganizationPreferences returns preferences for the organization tab
	GetOrganizationPreferences(context.Context, *connect_go.Request[v0alpha.GetOrganizationPreferencesRequest]) (*connect_go.Response[v0alpha.GetOrganizationPreferencesResponse], error)
	// UpdateOrganizationPreferences updates preferences for the organization tab
	UpdateOrganizationPreferences(context.Context, *connect_go.Request[v0alpha.UpdateOrganizationPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateOrganizationPreferencesResponse], error)
	// GetSchedulePreferences returns all schedule preferences for an org.
	GetSchedulePreferences(context.Context, *connect_go.Request[v0alpha.GetSchedulePreferencesRequest]) (*connect_go.Response[v0alpha.GetSchedulePreferencesResponse], error)
	// UpdateSchedulePreferences returns all schedule preferences for an org.
	UpdateSchedulePreferences(context.Context, *connect_go.Request[v0alpha.UpdateSchedulePreferencesRequest]) (*connect_go.Response[v0alpha.UpdateSchedulePreferencesResponse], error)
	// GetBusinessPreferences returns all business intelligence and associated analytic preferences
	GetBusinessPreferences(context.Context, *connect_go.Request[v0alpha.GetBusinessPreferencesRequest]) (*connect_go.Response[v0alpha.GetBusinessPreferencesResponse], error)
	// UpdateBusinessPreferences updates all business intelligence and associated analytic preferences
	UpdateBusinessPreferences(context.Context, *connect_go.Request[v0alpha.UpdateBusinessPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateBusinessPreferencesResponse], error)
	// GetEndOfDayPreferences returns a time (hour 1-24) for each day of the week.
	GetEndOfDayPreferences(context.Context, *connect_go.Request[v0alpha.GetEndOfDayPreferencesRequest]) (*connect_go.Response[v0alpha.GetEndOfDayPreferencesResponse], error)
	// UpdateEndOfDayPreferences update fields for a time (hour 1-24) for each day of the week.
	UpdateEndOfDayPreferences(context.Context, *connect_go.Request[v0alpha.UpdateEndOfDayPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateEndOfDayPreferencesResponse], error)
	// GetReportFilterPreferences returns preferences for the organization tab
	GetReportFilterPreferences(context.Context, *connect_go.Request[v0alpha.GetFilterPreferencesRequest]) (*connect_go.Response[v0alpha.GetFilterPreferencesResponse], error)
	// UpdateReportFilterPreferences updates preferences for the filter tab
	UpdateReportFilterPreferences(context.Context, *connect_go.Request[v0alpha.UpdateFilterPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateFilterPreferencesResponse], error)
	// GetPhonePreferences returns all phone and recording preferences for an org.
	GetPhonePreferences(context.Context, *connect_go.Request[v0alpha.GetPhonePreferencesRequest]) (*connect_go.Response[v0alpha.GetPhonePreferencesResponse], error)
	// UpdatePhonePreferences updates phone and recording preferences for an org.
	UpdatePhonePreferences(context.Context, *connect_go.Request[v0alpha.UpdatePhonePreferencesRequest]) (*connect_go.Response[v0alpha.UpdatePhonePreferencesResponse], error)
	// GetDashboardGeneralPreferences returns all dashboard general preferences for an org.
	GetDashboardGeneralPreferences(context.Context, *connect_go.Request[v0alpha.GetDashboardGeneralPreferencesRequest]) (*connect_go.Response[v0alpha.GetDashboardGeneralPreferencesResponse], error)
	// UpdateDashboardGeneralPreferences updates dashboard General preferences for an org.
	UpdateDashboardGeneralPreferences(context.Context, *connect_go.Request[v0alpha.UpdateDashboardGeneralPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateDashboardGeneralPreferencesResponse], error)
	// GetWebhookPreferences returns all webhook preferences for an org.
	GetWebhookPreferences(context.Context, *connect_go.Request[v0alpha.GetWebhookPreferencesRequest]) (*connect_go.Response[v0alpha.GetWebhookPreferencesResponse], error)
	// UpdateWebhookPreferences updates webhook preferences for an org.
	UpdateWebhookPreferences(context.Context, *connect_go.Request[v0alpha.UpdateWebhookPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateWebhookPreferencesResponse], error)
	// GetBroadcastPreferences returns all broadcast options for campaign preferences for an org.
	GetBroadcastPreferences(context.Context, *connect_go.Request[v0alpha.GetBroadcastPreferencesRequest]) (*connect_go.Response[v0alpha.GetBroadcastPreferencesResponse], error)
	// UpdateBroadcastPreferences updates broadcast options for campaign preferences for an org.
	UpdateBroadcastPreferences(context.Context, *connect_go.Request[v0alpha.UpdateBroadcastPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateBroadcastPreferencesResponse], error)
	// GetAuthenticationPreferences returns all authentication options for an org.
	GetAuthenticationPreferences(context.Context, *connect_go.Request[v0alpha.GetAuthenticationPreferencesRequest]) (*connect_go.Response[v0alpha.GetAuthenticationPreferencesResponse], error)
	// UpdateAuthenticationPreferences updates authentication preferences for an org.
	UpdateAuthenticationPreferences(context.Context, *connect_go.Request[v0alpha.UpdateAuthenticationPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateAuthenticationPreferencesResponse], error)
	// GetRecordingPreferences returns all recording options for an org.
	GetRecordingPreferences(context.Context, *connect_go.Request[v0alpha.GetRecordingPreferencesRequest]) (*connect_go.Response[v0alpha.GetRecordingPreferencesResponse], error)
	// UpdateRecordingPreferences updates Recording preferences for an org.
	UpdateRecordingPreferences(context.Context, *connect_go.Request[v0alpha.UpdateRecordingPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateRecordingPreferencesResponse], error)
	// GetDashboardQueuePreferences returns the Dashboard Queue table preferences.
	GetDashboardQueuePreferences(context.Context, *connect_go.Request[v0alpha.GetDashboardQueuePreferencesRequest]) (*connect_go.Response[v0alpha.GetDashboardQueuePreferencesResponse], error)
	// UpdateDashboardQueuePreferences updates the Dashboard Queue table preferences.
	UpdateDashboardQueuePreferences(context.Context, *connect_go.Request[v0alpha.UpdateDashboardQueuePreferencesRequest]) (*connect_go.Response[v0alpha.UpdateDashboardQueuePreferencesResponse], error)
	// GetAgentQuickViewPreferences returns the diplay templates for the client
	GetAgentQuickViewPreferences(context.Context, *connect_go.Request[v0alpha.GetAgentQuickViewPreferencesRequest]) (*connect_go.Response[v0alpha.GetAgentQuickViewPreferencesResponse], error)
	// GetVoiceAnalyticsPreferences returns the all preferences for voice analytics
	GetVoiceAnalyticsPreferences(context.Context, *connect_go.Request[v0alpha.GetVoiceAnalyticsPreferencesRequest]) (*connect_go.Response[v0alpha.GetVoiceAnalyticsPreferencesResponse], error)
	// GetVoiceAnalyticsPreferences updates the all preferences for voice analytics
	UpdateVoiceAnalyticsPreferences(context.Context, *connect_go.Request[v0alpha.UpdateVoiceAnalyticsPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateVoiceAnalyticsPreferencesResponse], error)
	// GetScorecardsPreferences returns the all preferences for scorecards
	GetScorecardsPreferences(context.Context, *connect_go.Request[v0alpha.GetScorecardsPreferencesRequest]) (*connect_go.Response[v0alpha.GetScorecardsPreferencesResponse], error)
	// GetScorecardsPreferences updates the all preferences for scorecards
	UpdateScorecardsPreferences(context.Context, *connect_go.Request[v0alpha.UpdateScorecardsPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateScorecardsPreferencesResponse], error)
	// GetEmailSmsPreferences returns the all preferences for email and sms
	GetEmailSmsPreferences(context.Context, *connect_go.Request[v0alpha.GetEmailSmsPreferencesRequest]) (*connect_go.Response[v0alpha.GetEmailSmsPreferencesResponse], error)
	// GetEmailSmsPreferences updates the all preferences for email and sms
	UpdateEmailSmsPreferences(context.Context, *connect_go.Request[v0alpha.UpdateEmailSmsPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateEmailSmsPreferencesResponse], error)
	// EditAgentQuickViewPreferences return nil,error
	EditAgentQuickViewPreferences(context.Context, *connect_go.Request[v0alpha.EditAgentQuickViewPreferencesRequest]) (*connect_go.Response[v0alpha.EditAgentQuickViewPreferencesResponse], error)
	// EditBackofficeThemePreference returns nil, error
	// changes the Client Skin client property
	EditBackofficeThemePreference(context.Context, *connect_go.Request[v0alpha.EditBackofficeThemePreferenceRequest]) (*connect_go.Response[v0alpha.EditBackofficeThemePreferenceResponse], error)
	GetBackofficeThemePreference(context.Context, *connect_go.Request[v0alpha.GetBackofficeThemePreferenceRequest]) (*connect_go.Response[v0alpha.GetBackofficeThemePreferenceResponse], error)
	// AcceptLinkbackRecordingTerms controls acknowledgement for linkback recording terms and conditions
	AcceptLinkbackRecordingTerms(context.Context, *connect_go.Request[v0alpha.AcceptLinkbackRecordingTermsRequest]) (*connect_go.Response[v0alpha.AcceptLinkbackRecordingTermsResponse], error)
	// LinkbackUpdateBroadcastTemplates updates broadcast template action parameters pertaining to linkback recording
	LinkbackUpdateBroadcastTemplates(context.Context, *connect_go.Request[v0alpha.LinkbackUpdateBroadcastTemplatesRequest]) (*connect_go.Response[v0alpha.LinkbackUpdateBroadcastTemplatesResponse], error)
	// RecordEmailUnsubscribeAcknowledgement inserts an activity log when the client acknowledges responsibility
	// for their own email unsubscribe links.
	RecordEmailUnsubscribeAcknowledgement(context.Context, *connect_go.Request[v0alpha.RecordEmailUnsubscribeAcknowledgementRequest]) (*connect_go.Response[v0alpha.RecordEmailUnsubscribeAcknowledgementResponse], error)
	// ClearEmailUnsubscribeAcknowledgement inserts an activity log when the client clears acknowledgement for
	// their own email unsubscribe links.
	ClearEmailUnsubscribeAcknowledgement(context.Context, *connect_go.Request[v0alpha.ClearEmailUnsubscribeAcknowledgementRequest]) (*connect_go.Response[v0alpha.ClearEmailUnsubscribeAcknowledgementResponse], error)
	// Creates a new WebLinkTemplate as defined by request message CreateWebLinkTemplateRequest.
	// Required Permissions:
	//
	//	ORG_EDIT
	CreateWebLinkTemplate(context.Context, *connect_go.Request[v0alpha.CreateWebLinkTemplateRequest]) (*connect_go.Response[v0alpha.CreateWebLinkTemplateResponse], error)
	// List every WebLinkTemplate.
	// Required Permissions:
	//
	//	ORG_VIEW
	ListWebLinkTemplates(context.Context, *connect_go.Request[v0alpha.ListWebLinkTemplatesRequest]) (*connect_go.Response[v0alpha.ListWebLinkTemplatesResponse], error)
	// Get one WebLinkTemplate with the given web_link_template_id.
	// Required Permissions:
	//
	//	ORG_VIEW
	GetWebLinkTemplate(context.Context, *connect_go.Request[v0alpha.GetWebLinkTemplateRequest]) (*connect_go.Response[v0alpha.GetWebLinkTemplateResponse], error)
	// Updates the WebLinkTemplate with the given web_link_template_id.
	// Required Permissions:
	//
	//	ORG_EDIT
	UpdateWebLinkTemplate(context.Context, *connect_go.Request[v0alpha.UpdateWebLinkTemplateRequest]) (*connect_go.Response[v0alpha.UpdateWebLinkTemplateResponse], error)
	// Deletes the WebLinkTemplate with the given web_link_template_id.
	// Required Permissions:
	//
	//	ORG_EDIT
	DeleteWebLinkTemplate(context.Context, *connect_go.Request[v0alpha.DeleteWebLinkTemplateRequest]) (*connect_go.Response[v0alpha.DeleteWebLinkTemplateResponse], error)
	// Creates a new AgentTriggerTemplate as defined by request message CreateAgentTriggerTemplateRequest.
	// The id field on the request message will be generated as part of
	// this method. If the id field is set it WILL be overwritten.
	// Required Permissions:
	//
	//	ORG_EDIT
	CreateAgentTriggerTemplate(context.Context, *connect_go.Request[v0alpha.CreateAgentTriggerTemplateRequest]) (*connect_go.Response[v0alpha.CreateAgentTriggerTemplateResponse], error)
	// Returns a list of every AgentTriggerTemplate for the given
	// hunt_group_sid on the request.
	// Requiree Permissions:
	//
	//	ORG_VIEW
	ListAgentTriggerTemplates(context.Context, *connect_go.Request[v0alpha.ListAgentTriggerTemplatesRequest]) (*connect_go.Response[v0alpha.ListAgentTriggerTemplatesResponse], error)
	// Returns one AgentTriggerTemplate with the id given on the request message.
	// Required Permissions:
	//
	//	ORG_VIEW
	GetAgentTriggerTemplate(context.Context, *connect_go.Request[v0alpha.GetAgentTriggerTemplateRequest]) (*connect_go.Response[v0alpha.GetAgentTriggerTemplateResponse], error)
	// Updates the AgentTriggerTemplate with the id given on the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	UpdateAgentTriggerTemplate(context.Context, *connect_go.Request[v0alpha.UpdateAgentTriggerTemplateRequest]) (*connect_go.Response[v0alpha.UpdateAgentTriggerTemplateResponse], error)
	// Deletes the AgentTriggerTemplate with the id given on the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	DeleteAgentTriggerTemplate(context.Context, *connect_go.Request[v0alpha.DeleteAgentTriggerTemplateRequest]) (*connect_go.Response[v0alpha.DeleteAgentTriggerTemplateResponse], error)
	// Creates a new ClientInfoDisplayTemplate as defined by request
	// message CreateClientInfoDisplayRequest.
	// Required Permissions:
	//
	//	ORG_EDIT
	CreateClientInfoDisplayTemplate(context.Context, *connect_go.Request[v0alpha.CreateClientInfoDisplayTemplateRequest]) (*connect_go.Response[v0alpha.CreateClientInfoDisplayTemplateResponse], error)
	// Returns a list of every ClientInfoDisplayTemplate.
	// Required Permissions:
	//
	//	ORG_EDIT
	ListClientInfoDisplayTemplates(context.Context, *connect_go.Request[v0alpha.ListClientInfoDisplayTemplatesRequest]) (*connect_go.Response[v0alpha.ListClientInfoDisplayTemplatesResponse], error)
	// Updates the ClientInfoDisplayTemplate as defined by request
	// message UpdateClientIntoDisplayTemplateRequest.
	// Required Permissions:
	//
	//	ORG_VIEW
	UpdateClientInfoDisplayTemplate(context.Context, *connect_go.Request[v0alpha.UpdateClientInfoDisplayTemplateRequest]) (*connect_go.Response[v0alpha.UpdateClientInfoDisplayTemplateResponse], error)
	// Deletes the ClientInfoDisplayTemplate with the id given on the request
	// message.
	// Required Permissions:
	//
	//	ORG_EDIT
	DeleteClientInfoDisplayTemplate(context.Context, *connect_go.Request[v0alpha.DeleteClientInfoDisplayTemplateRequest]) (*connect_go.Response[v0alpha.DeleteClientInfoDisplayTemplateResponse], error)
	// Returns one ClientInfoDisplayTemplate with the id given on the
	// request message.
	//
	//	Required Permissions:
	//	  ORG_VIEW
	GetClientInfoDisplayTemplate(context.Context, *connect_go.Request[v0alpha.GetClientInfoDisplayTemplateRequest]) (*connect_go.Response[v0alpha.GetClientInfoDisplayTemplateResponse], error)
	// Returns a slice of agent pause codes.
	ListAgentPauseCodes(context.Context, *connect_go.Request[v0alpha.ListAgentPauseCodesRequest]) (*connect_go.Response[v0alpha.ListAgentPauseCodesResponse], error)
	// Creates a new Agent Pause Code as defined by the request message.
	// Errors:
	//   - grpc.InvalidArgument: The pause_code field was not set, or the the pause_code.codes field is an empty list.
	//   - grpc.Internal: an error occurred while marshalling the pause_code into an xml string.
	CreateAgentPauseCode(context.Context, *connect_go.Request[v0alpha.CreateAgentPauseCodeRequest]) (*connect_go.Response[v0alpha.CreateAgentPauseCodeResponse], error)
	// Updates an Agent Pause Code with the xml_client_property_sid given on
	// the pause_code in the request message as defined by the other fields
	// on the pause_code message.
	// Required Permissions:
	//
	//	AGENT_MANAGEMENT
	//	Actual permission checked is ORG_EDIT??
	//
	// Errors:
	//   - grpc.InvalidArgument: The pause_code field was not set or the pause_code.codes field was an empty list.
	//   - grpc.Internal: an error occurred while marshalling the pause_code into an xml string.
	UpdateAgentPauseCode(context.Context, *connect_go.Request[v0alpha.UpdateAgentPauseCodeRequest]) (*connect_go.Response[v0alpha.UpdateAgentPauseCodeResponse], error)
	// Deletes an Agent Pause Code with the sid given on the request message.
	// Errors:
	//   - grpc.InvalidArgument: The xml_client_property_sid field is invalid.
	DeleteAgentPauseCode(context.Context, *connect_go.Request[v0alpha.DeleteAgentPauseCodeRequest]) (*connect_go.Response[v0alpha.DeleteAgentPauseCodeResponse], error)
	// Returns a slice of custom report filters belonging to client_sid.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.NotFound: There is no entry matching the requested client_sid.
	ListCustomReportFilters(context.Context, *connect_go.Request[v0alpha.ListCustomReportFiltersRequest]) (*connect_go.Response[v0alpha.ListCustomReportFiltersResponse], error)
	// Creates a new custom report filter as defined by the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.InvalidArgument: The custom report filter has an empty name or no filtering parameters.
	//   - grpc.Internal: An error occurred marshalling the custom report filter into an xml string.
	CreateCustomReportFilter(context.Context, *connect_go.Request[v0alpha.CreateCustomReportFilterRequest]) (*connect_go.Response[v0alpha.CreateCustomReportFilterResponse], error)
	// Updates a custom report filter with the requested xml_client_property_sid
	// with the report filter in the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.InvalidArgument: The pause_code field was not set or the pause_code.codes field was an empty list.
	//   - grpc.Internal: an error occurred while marshalling the pause_code into an xml string.
	UpdateCustomReportFilter(context.Context, *connect_go.Request[v0alpha.UpdateCustomReportFilterRequest]) (*connect_go.Response[v0alpha.UpdateCustomReportFilterResponse], error)
	// Deletes a custom report filter with the sid given on the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.InvalidArgument: The xml_client_property_sid field is invalid.
	DeleteCustomReportFilter(context.Context, *connect_go.Request[v0alpha.DeleteCustomReportFilterRequest]) (*connect_go.Response[v0alpha.DeleteCustomReportFilterResponse], error)
	// Returns a slice of hunt group scripts belonging to the client_sid.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.NotFound: There is no entry matching the requested client_sid.
	ListAgentResponseGroups(context.Context, *connect_go.Request[v0alpha.ListAgentResponseGroupsRequest]) (*connect_go.Response[v0alpha.ListAgentResponseGroupsResponse], error)
	// Returns a slice of last template element scripts belonging to the client_sid.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.NotFound: There is no entry matching the requested client_sid.
	ListLastTemplateElements(context.Context, *connect_go.Request[v0alpha.ListLastTemplateElementsRequest]) (*connect_go.Response[v0alpha.ListLastTemplateElementsResponse], error)
	// Lists the names of the custom queue configs.
	// Required Permissions:
	//
	//	ORG_VIEW (If @org_id is empty)
	//	CUSTOMER_SUPPORT (If @org_id is NOT empty)
	//
	// Errors:
	//   - grpc.Internal: An error occurred while getting the config names.
	//   - grpc.NotFound: The given @org_id was not found (if @org_id is NOT empty).
	ListQueueConfigs(context.Context, *connect_go.Request[v0alpha.ListQueueConfigsReq]) (*connect_go.Response[v0alpha.ListQueueConfigsRes], error)
	// Deletes a queue config with the given @client_sid and @config_name.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while removing the config.
	//   - grpc.InvalidArgument: the config_name was invalid.
	DeleteQueueConfig(context.Context, *connect_go.Request[v0alpha.DeleteQueueConfigReq]) (*connect_go.Response[v0alpha.DeleteQueueConfigRes], error)
	// Gets the details for the queue config for the given @client_sid with
	// the given @name. If @merge is true, the config data will be merged
	// with the default config data.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred getting the config data.
	//   - grpc.InvalidArgument: the given config name was invalid.
	GetQueueConfig(context.Context, *connect_go.Request[v0alpha.GetQueueConfigReq]) (*connect_go.Response[v0alpha.GetQueueConfigRes], error)
	// Creates a queue config as defined by the @config given
	// on the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while saving the config.
	//   - grpc.InvalidArgument: the given config was invalid.
	CreateQueueConfig(context.Context, *connect_go.Request[v0alpha.CreateQueueConfigReq]) (*connect_go.Response[v0alpha.CreateQueueConfigRes], error)
	// Updates a new queue config as defined by the @config given
	// on the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.NotFound: The name of the given config could not be found.
	//   - grpc.Internal: An unexpected error occurred while saving the config.
	//   - grpc.InvalidArgument: the given config was invalid.
	UpdateQueueConfig(context.Context, *connect_go.Request[v0alpha.UpdateQueueConfigReq]) (*connect_go.Response[v0alpha.UpdateQueueConfigRes], error)
	// Copies a queue config belonging to one organization to another.
	// The queue config with the @from_name will be copied from the
	// organization with the @from_org_id to the organization with the
	// @to_org_id under the new @to_name.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while copying the config.
	//   - grpc.InvalidArgument: A field on the request message was invalid.
	//   - grpc.NotFound: The @to_org_id, @from_org_id, or @from_name was not found.
	//   - grpc.AlreadyExists: The @to_name already exists for the @to_org_id.
	CopyQueueConfig(context.Context, *connect_go.Request[v0alpha.CopyQueueConfigReq]) (*connect_go.Response[v0alpha.CopyQueueConfigRes], error)
	// Returns the url of a downloadable zip file containing every
	// sound for the given queue config.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while zipping the files.
	//   - grpc.NotFound: The given queue config was not found.
	GetAllQueueConfigSounds(context.Context, *connect_go.Request[v0alpha.GetAllQueueConfigSoundsReq]) (*connect_go.Response[v0alpha.GetAllQueueConfigSoundsRes], error)
	// Returns the url of a downladable wav file for the given config's
	// sound matching the given sound enum. Leaving the config field empty
	// will look up the sound for the account default config.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurrec while getting the
	//     downloadable file url.
	//   - grpc.NotFound: The given queue config was not found or the sound
	//     was not found for the config.
	GetQueueConfigSound(context.Context, *connect_go.Request[v0alpha.GetQueueConfigSoundReq]) (*connect_go.Response[v0alpha.GetQueueConfigSoundRes], error)
	// Sets the given sound for the config to one of the uploaded
	// sound files in the clients upload folder matching the
	// given file_name on the request. Leaving the config field empty
	// will set the sound for the account default config.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while updating
	//     the configs sound.
	//   - gprc.NotFound: The given queue config was not found or the
	//     sound file was not found for the client.
	//   - grpc.InvalidArgument: The file_name on the request was invalid.
	SetQueueConfigSound(context.Context, *connect_go.Request[v0alpha.SetQueueConfigSoundReq]) (*connect_go.Response[v0alpha.SetQueueConfigSoundRes], error)
	// Sets every sound for a given config by copying them from
	// another config OR by copying them from a default sound set
	// identified by language and gender. Empty config names will be
	// treated as the account default config.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors
	//   - grpc.Internal: An unexpected error occurred while updating
	//     all sounds for the given to_config.
	//   - grpc.NotFound: The given to_config or from.config (if used)
	//     could not be found or the default sound set for the given
	//     gender/language identifier could not be found.
	//   - grpc.InvalidArgument: The to_config and from.config contained
	//     the same value. (If from.config was used)
	SetAllQueueConfigSoundsFromSource(context.Context, *connect_go.Request[v0alpha.SetAllQueueConfigSoundsFromSourceReq]) (*connect_go.Response[v0alpha.SetAllQueueConfigSoundsFromSourceRes], error)
	// Checks a user's blocked status.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while getting the user.
	//   - grpc.InvalidArgument: The user_id on the request was invalid.
	GetUserBlocked(context.Context, *connect_go.Request[v0alpha.GetUserBlockedRequest]) (*connect_go.Response[v0alpha.GetUserBlockedResponse], error)
	// Unblocks the given user.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while unblocking the user.
	//   - grpc.InvalidArgument: The user_id on the request was invalid.
	UnblockUser(context.Context, *connect_go.Request[v0alpha.UnblockUserRequest]) (*connect_go.Response[v0alpha.UnblockUserResponse], error)
	// List all users who only exist in skunk and have not yet been migrated
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	ListP3UnMigratedUsers(context.Context, *connect_go.Request[v0alpha.ListP3UnMigratedUsersRequest]) (*connect_go.Response[v0alpha.ListP3UnMigratedUsersResponse], error)
	// Migrates a login or agent from backoffice to firestore
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	MigrateP3User(context.Context, *connect_go.Request[v0alpha.MigrateP3UserRequest]) (*connect_go.Response[v0alpha.MigrateP3UserResponse], error)
	// Updates the username in skunk only for a agent or login
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	UpdateP3UserName(context.Context, *connect_go.Request[v0alpha.UpdateP3UserNameRequest]) (*connect_go.Response[v0alpha.UpdateP3UserNameResponse], error)
	// Gets all users under the p3 hierarchy
	// Required Permissions:
	//
	//	OWNING_ORG_IMITATION
	ListOwnedUsers(context.Context, *connect_go.Request[v0alpha.ListOwnedUsersRequest]) (*connect_go.Response[v0alpha.ListOwnedUsersResponse], error)
	// Gets all orgs under the p3 hierarchy
	// Required Permissions:
	// PERMISSION_ORG_VIEW
	ListOwnedOrgs(context.Context, *connect_go.Request[v0alpha.ListOwnedOrgsRequest]) (*connect_go.Response[v0alpha.ListOwnedOrgsResponse], error)
	// Removed login strike from list of given login_log_sids
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	RemoveLoginStrikes(context.Context, *connect_go.Request[v0alpha.RemoveLoginStrikesRequest]) (*connect_go.Response[v0alpha.RemoveLoginStrikesResponse], error)
	// Removed login strikes by user_id
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	RemoveUserLoginStrikes(context.Context, *connect_go.Request[v0alpha.RemoveUserLoginStrikesRequest]) (*connect_go.Response[v0alpha.RemoveUserLoginStrikesResponse], error)
	// Lists user login history by ip or user_id
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	ListLoginHistory(context.Context, *connect_go.Request[v0alpha.ListLoginHistoryRequest]) (*connect_go.Response[v0alpha.ListLoginHistoryResponse], error)
	// Updates a users agentsid and loginsid
	// Required Permissions:
	//
	//	TCN_ADMIN_SETTINGS
	UpdateP3UserSids(context.Context, *connect_go.Request[v0alpha.UpdateP3UserSidsRequest]) (*connect_go.Response[v0alpha.UpdateP3UserSidsResponse], error)
	// CreateAuthConnection creates a new auth0 connection.
	CreateAuthConnection(context.Context, *connect_go.Request[v0alpha.CreateAuthConnectionRequest]) (*connect_go.Response[v0alpha.CreateAuthConnectionResponse], error)
	// GetAuthConnectionSettings gets auth0 connection settings.
	GetAuthConnectionSettings(context.Context, *connect_go.Request[v0alpha.GetAuthConnectionSettingsRequest]) (*connect_go.Response[v0alpha.GetAuthConnectionSettingsResponse], error)
	// UpdateAuthConnectionSettings updates an existing auth0 connection settings.
	UpdateAuthConnectionSettings(context.Context, *connect_go.Request[v0alpha.UpdateAuthConnectionSettingsRequest]) (*connect_go.Response[v0alpha.UpdateAuthConnectionSettingsResponse], error)
	// DeleteAuthConnection removes the current orgs auth settings.
	DeleteAuthConnection(context.Context, *connect_go.Request[v0alpha.DeleteAuthConnectionRequest]) (*connect_go.Response[v0alpha.DeleteAuthConnectionResponse], error)
	// Gets a user subscription by id
	// Required Permissions:
	//
	//	ORG_VIEW if user id IS provided
	//	none if user id NOT provided
	GetUserSubscription(context.Context, *connect_go.Request[v0alpha.GetUserSubscriptionRequest]) (*connect_go.Response[v0alpha.GetUserSubscriptionResponse], error)
	// Adds a user subscription to users list of subscriptions
	// Required Permissions:
	//
	//	USER_EDIT if user id IS provided
	//	EDIT_USER_OPTIONS if user id NOT provided
	AddUserSubscription(context.Context, *connect_go.Request[v0alpha.AddUserSubscriptionRequest]) (*connect_go.Response[v0alpha.AddUserSubscriptionResponse], error)
	// Removes a user subscription from a users list of subscription
	// Required Permissions:
	//
	//	USER_EDIT if user id IS provided
	//	EDIT_USER_OPTIONS if user id NOT provided
	RemoveUserSubscription(context.Context, *connect_go.Request[v0alpha.RemoveUserSubscriptionRequest]) (*connect_go.Response[v0alpha.RemoveUserSubscriptionResponse], error)
	// Updates a user subscription
	// Required Permissions:
	//
	//	USER_EDIT if user id IS provided
	//	EDIT_USER_OPTIONS if user id NOT provided
	UpdateUserSubscription(context.Context, *connect_go.Request[v0alpha.UpdateUserSubscriptionRequest]) (*connect_go.Response[v0alpha.UpdateUserSubscriptionResponse], error)
	// Lists all of a users subscriptions
	// Required Permissions:
	//
	//	ORG_VIEW if user id IS provided
	//	none if user id NOT provided
	ListUserSubscriptions(context.Context, *connect_go.Request[v0alpha.ListUserSubscriptionsRequest]) (*connect_go.Response[v0alpha.ListUserSubscriptionsResponse], error)
	// Lists multiple users subscriptions by org. Optionally filters by event type.
	// Required Permissions:
	//
	//	ORG_VIEW
	ListOrgSubscriptions(context.Context, *connect_go.Request[v0alpha.ListOrgSubscriptionsRequest]) (*connect_go.Response[v0alpha.ListOrgSubscriptionsResponse], error)
	// Returns the systems current environment details
	// Required Permissions:
	//
	//	N/A
	GetSystemEnvironmentDetails(context.Context, *connect_go.Request[v0alpha.GetSystemEnvironmentDetailsRequest]) (*connect_go.Response[v0alpha.GetSystemEnvironmentDetailsResponse], error)
	// Returns a list of agent statistics templates belonging to client_sid.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.NotFound: There is no entry matching the requested client_sid.
	ListAgentStatisticsTemplates(context.Context, *connect_go.Request[v0alpha.ListAgentStatisticsTemplatesRequest]) (*connect_go.Response[v0alpha.ListAgentStatisticsTemplatesResponse], error)
	// Creates a new agent statistics template for the given client_sid.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.NotFound: The client_sid is not found.
	CreateAgentStatisticsTemplate(context.Context, *connect_go.Request[v0alpha.CreateAgentStatisticsTemplateRequest]) (*connect_go.Response[v0alpha.CreateAgentStatisticsTemplateResponse], error)
	// Updates an existing agent statistics template for the given client_sid.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.NotFound: The client_sid is not found.
	UpdateAgentStatisticsTemplate(context.Context, *connect_go.Request[v0alpha.UpdateAgentStatisticsTemplateRequest]) (*connect_go.Response[v0alpha.UpdateAgentStatisticsTemplateResponse], error)
	// Deletes an existing agent statistics template for the given client_sid.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.NotFound: The client_sid or agent statistics template is not found.
	DeleteAgentStatisticsTemplate(context.Context, *connect_go.Request[v0alpha.DeleteAgentStatisticsTemplateRequest]) (*connect_go.Response[v0alpha.DeleteAgentStatisticsTemplateResponse], error)
}

// NewOrgHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrgHandler(svc OrgHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(OrgRegisterOrganizationProcedure, connect_go.NewUnaryHandler(
		OrgRegisterOrganizationProcedure,
		svc.RegisterOrganization,
		opts...,
	))
	mux.Handle(OrgConvertOrgToManualProcedure, connect_go.NewUnaryHandler(
		OrgConvertOrgToManualProcedure,
		svc.ConvertOrgToManual,
		opts...,
	))
	mux.Handle(OrgUpdateOrganizationProcedure, connect_go.NewUnaryHandler(
		OrgUpdateOrganizationProcedure,
		svc.UpdateOrganization,
		opts...,
	))
	mux.Handle(OrgArchiveOrganizationProcedure, connect_go.NewUnaryHandler(
		OrgArchiveOrganizationProcedure,
		svc.ArchiveOrganization,
		opts...,
	))
	mux.Handle(OrgUnArchiveOrganizationProcedure, connect_go.NewUnaryHandler(
		OrgUnArchiveOrganizationProcedure,
		svc.UnArchiveOrganization,
		opts...,
	))
	mux.Handle(OrgListArchivedOrganizationsProcedure, connect_go.NewUnaryHandler(
		OrgListArchivedOrganizationsProcedure,
		svc.ListArchivedOrganizations,
		opts...,
	))
	mux.Handle(OrgGetOrganizationProfileProcedure, connect_go.NewUnaryHandler(
		OrgGetOrganizationProfileProcedure,
		svc.GetOrganizationProfile,
		opts...,
	))
	mux.Handle(OrgGetOrganizationProfileByIdProcedure, connect_go.NewUnaryHandler(
		OrgGetOrganizationProfileByIdProcedure,
		svc.GetOrganizationProfileById,
		opts...,
	))
	mux.Handle(OrgListOrganizationDescriptionsProcedure, connect_go.NewUnaryHandler(
		OrgListOrganizationDescriptionsProcedure,
		svc.ListOrganizationDescriptions,
		opts...,
	))
	mux.Handle(OrgListRegionalOrganizationsProcedure, connect_go.NewUnaryHandler(
		OrgListRegionalOrganizationsProcedure,
		svc.ListRegionalOrganizations,
		opts...,
	))
	mux.Handle(OrgUpdateP3OwningOrgProcedure, connect_go.NewUnaryHandler(
		OrgUpdateP3OwningOrgProcedure,
		svc.UpdateP3OwningOrg,
		opts...,
	))
	mux.Handle(OrgGetP3OwningOrgProcedure, connect_go.NewUnaryHandler(
		OrgGetP3OwningOrgProcedure,
		svc.GetP3OwningOrg,
		opts...,
	))
	mux.Handle(OrgListOrganizationUserDescriptionsProcedure, connect_go.NewUnaryHandler(
		OrgListOrganizationUserDescriptionsProcedure,
		svc.ListOrganizationUserDescriptions,
		opts...,
	))
	mux.Handle(OrgListUserDescriptionsProcedure, connect_go.NewServerStreamHandler(
		OrgListUserDescriptionsProcedure,
		svc.ListUserDescriptions,
		opts...,
	))
	mux.Handle(OrgGetUserDirectoryProcedure, connect_go.NewUnaryHandler(
		OrgGetUserDirectoryProcedure,
		svc.GetUserDirectory,
		opts...,
	))
	mux.Handle(OrgGetRegionsProcedure, connect_go.NewUnaryHandler(
		OrgGetRegionsProcedure,
		svc.GetRegions,
		opts...,
	))
	mux.Handle(OrgGetUserDetailsProcedure, connect_go.NewUnaryHandler(
		OrgGetUserDetailsProcedure,
		svc.GetUserDetails,
		opts...,
	))
	mux.Handle(OrgAdminGetUserDetailsProcedure, connect_go.NewUnaryHandler(
		OrgAdminGetUserDetailsProcedure,
		svc.AdminGetUserDetails,
		opts...,
	))
	mux.Handle(OrgGetAgentUsersProcedure, connect_go.NewUnaryHandler(
		OrgGetAgentUsersProcedure,
		svc.GetAgentUsers,
		opts...,
	))
	mux.Handle(OrgGetAgentSettingsProcedure, connect_go.NewUnaryHandler(
		OrgGetAgentSettingsProcedure,
		svc.GetAgentSettings,
		opts...,
	))
	mux.Handle(OrgGetAgentProfileGroupProcedure, connect_go.NewUnaryHandler(
		OrgGetAgentProfileGroupProcedure,
		svc.GetAgentProfileGroup,
		opts...,
	))
	mux.Handle(OrgUpdateAgentProfileGroupProcedure, connect_go.NewUnaryHandler(
		OrgUpdateAgentProfileGroupProcedure,
		svc.UpdateAgentProfileGroup,
		opts...,
	))
	mux.Handle(OrgCreateAgentProfileGroupProcedure, connect_go.NewUnaryHandler(
		OrgCreateAgentProfileGroupProcedure,
		svc.CreateAgentProfileGroup,
		opts...,
	))
	mux.Handle(OrgListAgentProfileGroupsProcedure, connect_go.NewUnaryHandler(
		OrgListAgentProfileGroupsProcedure,
		svc.ListAgentProfileGroups,
		opts...,
	))
	mux.Handle(OrgDeleteAgentProfileGroupProcedure, connect_go.NewUnaryHandler(
		OrgDeleteAgentProfileGroupProcedure,
		svc.DeleteAgentProfileGroup,
		opts...,
	))
	mux.Handle(OrgAssignAgentProfileGroupsProcedure, connect_go.NewUnaryHandler(
		OrgAssignAgentProfileGroupsProcedure,
		svc.AssignAgentProfileGroups,
		opts...,
	))
	mux.Handle(OrgUpdateUserProcedure, connect_go.NewUnaryHandler(
		OrgUpdateUserProcedure,
		svc.UpdateUser,
		opts...,
	))
	mux.Handle(OrgCreateUserProcedure, connect_go.NewUnaryHandler(
		OrgCreateUserProcedure,
		svc.CreateUser,
		opts...,
	))
	mux.Handle(OrgCreateDelegatedUserProcedure, connect_go.NewUnaryHandler(
		OrgCreateDelegatedUserProcedure,
		svc.CreateDelegatedUser,
		opts...,
	))
	mux.Handle(OrgUpdateUserPasswordProcedure, connect_go.NewUnaryHandler(
		OrgUpdateUserPasswordProcedure,
		svc.UpdateUserPassword,
		opts...,
	))
	mux.Handle(OrgResetUserRequirePasswordResetProcedure, connect_go.NewUnaryHandler(
		OrgResetUserRequirePasswordResetProcedure,
		svc.ResetUserRequirePasswordReset,
		opts...,
	))
	mux.Handle(OrgGetUserPasswordResetLinkProcedure, connect_go.NewUnaryHandler(
		OrgGetUserPasswordResetLinkProcedure,
		svc.GetUserPasswordResetLink,
		opts...,
	))
	mux.Handle(OrgGetUserEmailVerifiedProcedure, connect_go.NewUnaryHandler(
		OrgGetUserEmailVerifiedProcedure,
		svc.GetUserEmailVerified,
		opts...,
	))
	mux.Handle(OrgSendUserVerificationEmailProcedure, connect_go.NewUnaryHandler(
		OrgSendUserVerificationEmailProcedure,
		svc.SendUserVerificationEmail,
		opts...,
	))
	mux.Handle(OrgManualUserEmailVerificationProcedure, connect_go.NewUnaryHandler(
		OrgManualUserEmailVerificationProcedure,
		svc.ManualUserEmailVerification,
		opts...,
	))
	mux.Handle(OrgGetTempUserTokenProcedure, connect_go.NewUnaryHandler(
		OrgGetTempUserTokenProcedure,
		svc.GetTempUserToken,
		opts...,
	))
	mux.Handle(OrgGetCountriesListProcedure, connect_go.NewUnaryHandler(
		OrgGetCountriesListProcedure,
		svc.GetCountriesList,
		opts...,
	))
	mux.Handle(OrgGetAdminClientPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgGetAdminClientPreferencesProcedure,
		svc.GetAdminClientPreferences,
		opts...,
	))
	mux.Handle(OrgUpdateAdminClientPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgUpdateAdminClientPreferencesProcedure,
		svc.UpdateAdminClientPreferences,
		opts...,
	))
	mux.Handle(OrgGetPermissionsProcedure, connect_go.NewUnaryHandler(
		OrgGetPermissionsProcedure,
		svc.GetPermissions,
		opts...,
	))
	mux.Handle(OrgRevokeAccountOwnerPermissionFromUserProcedure, connect_go.NewUnaryHandler(
		OrgRevokeAccountOwnerPermissionFromUserProcedure,
		svc.RevokeAccountOwnerPermissionFromUser,
		opts...,
	))
	mux.Handle(OrgUpdateUserDisabledProcedure, connect_go.NewUnaryHandler(
		OrgUpdateUserDisabledProcedure,
		svc.UpdateUserDisabled,
		opts...,
	))
	mux.Handle(OrgUpdateBulkUsersDisabledProcedure, connect_go.NewUnaryHandler(
		OrgUpdateBulkUsersDisabledProcedure,
		svc.UpdateBulkUsersDisabled,
		opts...,
	))
	mux.Handle(OrgGetOrgBillingSettingsProcedure, connect_go.NewUnaryHandler(
		OrgGetOrgBillingSettingsProcedure,
		svc.GetOrgBillingSettings,
		opts...,
	))
	mux.Handle(OrgSetOrgBillingSettingsProcedure, connect_go.NewUnaryHandler(
		OrgSetOrgBillingSettingsProcedure,
		svc.SetOrgBillingSettings,
		opts...,
	))
	mux.Handle(OrgAddOrgBillingOverrideProcedure, connect_go.NewUnaryHandler(
		OrgAddOrgBillingOverrideProcedure,
		svc.AddOrgBillingOverride,
		opts...,
	))
	mux.Handle(OrgRemoveOrgBillingOverrideProcedure, connect_go.NewUnaryHandler(
		OrgRemoveOrgBillingOverrideProcedure,
		svc.RemoveOrgBillingOverride,
		opts...,
	))
	mux.Handle(OrgGetSystemDefaultBillingRatesProcedure, connect_go.NewUnaryHandler(
		OrgGetSystemDefaultBillingRatesProcedure,
		svc.GetSystemDefaultBillingRates,
		opts...,
	))
	mux.Handle(OrgListPermissionGroupsProcedure, connect_go.NewUnaryHandler(
		OrgListPermissionGroupsProcedure,
		svc.ListPermissionGroups,
		opts...,
	))
	mux.Handle(OrgCreatePermissionGroupProcedure, connect_go.NewUnaryHandler(
		OrgCreatePermissionGroupProcedure,
		svc.CreatePermissionGroup,
		opts...,
	))
	mux.Handle(OrgUpdatePermissionGroupProcedure, connect_go.NewUnaryHandler(
		OrgUpdatePermissionGroupProcedure,
		svc.UpdatePermissionGroup,
		opts...,
	))
	mux.Handle(OrgDeletePermissionGroupProcedure, connect_go.NewUnaryHandler(
		OrgDeletePermissionGroupProcedure,
		svc.DeletePermissionGroup,
		opts...,
	))
	mux.Handle(OrgAssignUserToAccountOwnerPermissionGroupProcedure, connect_go.NewUnaryHandler(
		OrgAssignUserToAccountOwnerPermissionGroupProcedure,
		svc.AssignUserToAccountOwnerPermissionGroup,
		opts...,
	))
	mux.Handle(OrgAssignUserPermissionGroupProcedure, connect_go.NewUnaryHandler(
		OrgAssignUserPermissionGroupProcedure,
		svc.AssignUserPermissionGroup,
		opts...,
	))
	mux.Handle(OrgAssignUsersPermissionGroupProcedure, connect_go.NewUnaryHandler(
		OrgAssignUsersPermissionGroupProcedure,
		svc.AssignUsersPermissionGroup,
		opts...,
	))
	mux.Handle(OrgUpdateUserNeoPermissionGroupsProcedure, connect_go.NewUnaryHandler(
		OrgUpdateUserNeoPermissionGroupsProcedure,
		svc.UpdateUserNeoPermissionGroups,
		opts...,
	))
	mux.Handle(OrgRevokeUserPermissionGroupProcedure, connect_go.NewUnaryHandler(
		OrgRevokeUserPermissionGroupProcedure,
		svc.RevokeUserPermissionGroup,
		opts...,
	))
	mux.Handle(OrgRevokeUsersPermissionGroupProcedure, connect_go.NewUnaryHandler(
		OrgRevokeUsersPermissionGroupProcedure,
		svc.RevokeUsersPermissionGroup,
		opts...,
	))
	mux.Handle(OrgInitDefaultPermissionGroupsProcedure, connect_go.NewUnaryHandler(
		OrgInitDefaultPermissionGroupsProcedure,
		svc.InitDefaultPermissionGroups,
		opts...,
	))
	mux.Handle(OrgAddPermissionToAccountOwnerPermissionGroupProcedure, connect_go.NewUnaryHandler(
		OrgAddPermissionToAccountOwnerPermissionGroupProcedure,
		svc.AddPermissionToAccountOwnerPermissionGroup,
		opts...,
	))
	mux.Handle(OrgRevokePermissionToAccountOwnerPermissionGroupProcedure, connect_go.NewUnaryHandler(
		OrgRevokePermissionToAccountOwnerPermissionGroupProcedure,
		svc.RevokePermissionToAccountOwnerPermissionGroup,
		opts...,
	))
	mux.Handle(OrgAddPermissionToOrgDefaultGroupProcedure, connect_go.NewUnaryHandler(
		OrgAddPermissionToOrgDefaultGroupProcedure,
		svc.AddPermissionToOrgDefaultGroup,
		opts...,
	))
	mux.Handle(OrgRemovePermissionFromOrgDefaultGroupProcedure, connect_go.NewUnaryHandler(
		OrgRemovePermissionFromOrgDefaultGroupProcedure,
		svc.RemovePermissionFromOrgDefaultGroup,
		opts...,
	))
	mux.Handle(OrgGetOrgDefaultSuperUserGroupProcedure, connect_go.NewUnaryHandler(
		OrgGetOrgDefaultSuperUserGroupProcedure,
		svc.GetOrgDefaultSuperUserGroup,
		opts...,
	))
	mux.Handle(OrgListP3PermissionGroupsProcedure, connect_go.NewUnaryHandler(
		OrgListP3PermissionGroupsProcedure,
		svc.ListP3PermissionGroups,
		opts...,
	))
	mux.Handle(OrgAddUserRegionProcedure, connect_go.NewUnaryHandler(
		OrgAddUserRegionProcedure,
		svc.AddUserRegion,
		opts...,
	))
	mux.Handle(OrgRemoveUserRegionProcedure, connect_go.NewUnaryHandler(
		OrgRemoveUserRegionProcedure,
		svc.RemoveUserRegion,
		opts...,
	))
	mux.Handle(OrgCreateP3PermissionGroupProcedure, connect_go.NewUnaryHandler(
		OrgCreateP3PermissionGroupProcedure,
		svc.CreateP3PermissionGroup,
		opts...,
	))
	mux.Handle(OrgUpdateP3PermissionGroupProcedure, connect_go.NewUnaryHandler(
		OrgUpdateP3PermissionGroupProcedure,
		svc.UpdateP3PermissionGroup,
		opts...,
	))
	mux.Handle(OrgDeleteP3PermissionGroupProcedure, connect_go.NewUnaryHandler(
		OrgDeleteP3PermissionGroupProcedure,
		svc.DeleteP3PermissionGroup,
		opts...,
	))
	mux.Handle(OrgAssignUsersP3PermissionGroupProcedure, connect_go.NewUnaryHandler(
		OrgAssignUsersP3PermissionGroupProcedure,
		svc.AssignUsersP3PermissionGroup,
		opts...,
	))
	mux.Handle(OrgAddLoginToUserProcedure, connect_go.NewUnaryHandler(
		OrgAddLoginToUserProcedure,
		svc.AddLoginToUser,
		opts...,
	))
	mux.Handle(OrgRevokeUsersP3PermissionGroupProcedure, connect_go.NewUnaryHandler(
		OrgRevokeUsersP3PermissionGroupProcedure,
		svc.RevokeUsersP3PermissionGroup,
		opts...,
	))
	mux.Handle(OrgGetContactPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgGetContactPreferencesProcedure,
		svc.GetContactPreferences,
		opts...,
	))
	mux.Handle(OrgUpdateContactPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgUpdateContactPreferencesProcedure,
		svc.UpdateContactPreferences,
		opts...,
	))
	mux.Handle(OrgGetCompliancePreferencesProcedure, connect_go.NewUnaryHandler(
		OrgGetCompliancePreferencesProcedure,
		svc.GetCompliancePreferences,
		opts...,
	))
	mux.Handle(OrgUpdateCompliancePreferencesProcedure, connect_go.NewUnaryHandler(
		OrgUpdateCompliancePreferencesProcedure,
		svc.UpdateCompliancePreferences,
		opts...,
	))
	mux.Handle(OrgGetAgentPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgGetAgentPreferencesProcedure,
		svc.GetAgentPreferences,
		opts...,
	))
	mux.Handle(OrgUpdateAgentPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgUpdateAgentPreferencesProcedure,
		svc.UpdateAgentPreferences,
		opts...,
	))
	mux.Handle(OrgGetOrganizationPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgGetOrganizationPreferencesProcedure,
		svc.GetOrganizationPreferences,
		opts...,
	))
	mux.Handle(OrgUpdateOrganizationPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgUpdateOrganizationPreferencesProcedure,
		svc.UpdateOrganizationPreferences,
		opts...,
	))
	mux.Handle(OrgGetSchedulePreferencesProcedure, connect_go.NewUnaryHandler(
		OrgGetSchedulePreferencesProcedure,
		svc.GetSchedulePreferences,
		opts...,
	))
	mux.Handle(OrgUpdateSchedulePreferencesProcedure, connect_go.NewUnaryHandler(
		OrgUpdateSchedulePreferencesProcedure,
		svc.UpdateSchedulePreferences,
		opts...,
	))
	mux.Handle(OrgGetBusinessPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgGetBusinessPreferencesProcedure,
		svc.GetBusinessPreferences,
		opts...,
	))
	mux.Handle(OrgUpdateBusinessPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgUpdateBusinessPreferencesProcedure,
		svc.UpdateBusinessPreferences,
		opts...,
	))
	mux.Handle(OrgGetEndOfDayPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgGetEndOfDayPreferencesProcedure,
		svc.GetEndOfDayPreferences,
		opts...,
	))
	mux.Handle(OrgUpdateEndOfDayPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgUpdateEndOfDayPreferencesProcedure,
		svc.UpdateEndOfDayPreferences,
		opts...,
	))
	mux.Handle(OrgGetReportFilterPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgGetReportFilterPreferencesProcedure,
		svc.GetReportFilterPreferences,
		opts...,
	))
	mux.Handle(OrgUpdateReportFilterPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgUpdateReportFilterPreferencesProcedure,
		svc.UpdateReportFilterPreferences,
		opts...,
	))
	mux.Handle(OrgGetPhonePreferencesProcedure, connect_go.NewUnaryHandler(
		OrgGetPhonePreferencesProcedure,
		svc.GetPhonePreferences,
		opts...,
	))
	mux.Handle(OrgUpdatePhonePreferencesProcedure, connect_go.NewUnaryHandler(
		OrgUpdatePhonePreferencesProcedure,
		svc.UpdatePhonePreferences,
		opts...,
	))
	mux.Handle(OrgGetDashboardGeneralPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgGetDashboardGeneralPreferencesProcedure,
		svc.GetDashboardGeneralPreferences,
		opts...,
	))
	mux.Handle(OrgUpdateDashboardGeneralPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgUpdateDashboardGeneralPreferencesProcedure,
		svc.UpdateDashboardGeneralPreferences,
		opts...,
	))
	mux.Handle(OrgGetWebhookPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgGetWebhookPreferencesProcedure,
		svc.GetWebhookPreferences,
		opts...,
	))
	mux.Handle(OrgUpdateWebhookPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgUpdateWebhookPreferencesProcedure,
		svc.UpdateWebhookPreferences,
		opts...,
	))
	mux.Handle(OrgGetBroadcastPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgGetBroadcastPreferencesProcedure,
		svc.GetBroadcastPreferences,
		opts...,
	))
	mux.Handle(OrgUpdateBroadcastPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgUpdateBroadcastPreferencesProcedure,
		svc.UpdateBroadcastPreferences,
		opts...,
	))
	mux.Handle(OrgGetAuthenticationPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgGetAuthenticationPreferencesProcedure,
		svc.GetAuthenticationPreferences,
		opts...,
	))
	mux.Handle(OrgUpdateAuthenticationPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgUpdateAuthenticationPreferencesProcedure,
		svc.UpdateAuthenticationPreferences,
		opts...,
	))
	mux.Handle(OrgGetRecordingPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgGetRecordingPreferencesProcedure,
		svc.GetRecordingPreferences,
		opts...,
	))
	mux.Handle(OrgUpdateRecordingPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgUpdateRecordingPreferencesProcedure,
		svc.UpdateRecordingPreferences,
		opts...,
	))
	mux.Handle(OrgGetDashboardQueuePreferencesProcedure, connect_go.NewUnaryHandler(
		OrgGetDashboardQueuePreferencesProcedure,
		svc.GetDashboardQueuePreferences,
		opts...,
	))
	mux.Handle(OrgUpdateDashboardQueuePreferencesProcedure, connect_go.NewUnaryHandler(
		OrgUpdateDashboardQueuePreferencesProcedure,
		svc.UpdateDashboardQueuePreferences,
		opts...,
	))
	mux.Handle(OrgGetAgentQuickViewPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgGetAgentQuickViewPreferencesProcedure,
		svc.GetAgentQuickViewPreferences,
		opts...,
	))
	mux.Handle(OrgGetVoiceAnalyticsPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgGetVoiceAnalyticsPreferencesProcedure,
		svc.GetVoiceAnalyticsPreferences,
		opts...,
	))
	mux.Handle(OrgUpdateVoiceAnalyticsPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgUpdateVoiceAnalyticsPreferencesProcedure,
		svc.UpdateVoiceAnalyticsPreferences,
		opts...,
	))
	mux.Handle(OrgGetScorecardsPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgGetScorecardsPreferencesProcedure,
		svc.GetScorecardsPreferences,
		opts...,
	))
	mux.Handle(OrgUpdateScorecardsPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgUpdateScorecardsPreferencesProcedure,
		svc.UpdateScorecardsPreferences,
		opts...,
	))
	mux.Handle(OrgGetEmailSmsPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgGetEmailSmsPreferencesProcedure,
		svc.GetEmailSmsPreferences,
		opts...,
	))
	mux.Handle(OrgUpdateEmailSmsPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgUpdateEmailSmsPreferencesProcedure,
		svc.UpdateEmailSmsPreferences,
		opts...,
	))
	mux.Handle(OrgEditAgentQuickViewPreferencesProcedure, connect_go.NewUnaryHandler(
		OrgEditAgentQuickViewPreferencesProcedure,
		svc.EditAgentQuickViewPreferences,
		opts...,
	))
	mux.Handle(OrgEditBackofficeThemePreferenceProcedure, connect_go.NewUnaryHandler(
		OrgEditBackofficeThemePreferenceProcedure,
		svc.EditBackofficeThemePreference,
		opts...,
	))
	mux.Handle(OrgGetBackofficeThemePreferenceProcedure, connect_go.NewUnaryHandler(
		OrgGetBackofficeThemePreferenceProcedure,
		svc.GetBackofficeThemePreference,
		opts...,
	))
	mux.Handle(OrgAcceptLinkbackRecordingTermsProcedure, connect_go.NewUnaryHandler(
		OrgAcceptLinkbackRecordingTermsProcedure,
		svc.AcceptLinkbackRecordingTerms,
		opts...,
	))
	mux.Handle(OrgLinkbackUpdateBroadcastTemplatesProcedure, connect_go.NewUnaryHandler(
		OrgLinkbackUpdateBroadcastTemplatesProcedure,
		svc.LinkbackUpdateBroadcastTemplates,
		opts...,
	))
	mux.Handle(OrgRecordEmailUnsubscribeAcknowledgementProcedure, connect_go.NewUnaryHandler(
		OrgRecordEmailUnsubscribeAcknowledgementProcedure,
		svc.RecordEmailUnsubscribeAcknowledgement,
		opts...,
	))
	mux.Handle(OrgClearEmailUnsubscribeAcknowledgementProcedure, connect_go.NewUnaryHandler(
		OrgClearEmailUnsubscribeAcknowledgementProcedure,
		svc.ClearEmailUnsubscribeAcknowledgement,
		opts...,
	))
	mux.Handle(OrgCreateWebLinkTemplateProcedure, connect_go.NewUnaryHandler(
		OrgCreateWebLinkTemplateProcedure,
		svc.CreateWebLinkTemplate,
		opts...,
	))
	mux.Handle(OrgListWebLinkTemplatesProcedure, connect_go.NewUnaryHandler(
		OrgListWebLinkTemplatesProcedure,
		svc.ListWebLinkTemplates,
		opts...,
	))
	mux.Handle(OrgGetWebLinkTemplateProcedure, connect_go.NewUnaryHandler(
		OrgGetWebLinkTemplateProcedure,
		svc.GetWebLinkTemplate,
		opts...,
	))
	mux.Handle(OrgUpdateWebLinkTemplateProcedure, connect_go.NewUnaryHandler(
		OrgUpdateWebLinkTemplateProcedure,
		svc.UpdateWebLinkTemplate,
		opts...,
	))
	mux.Handle(OrgDeleteWebLinkTemplateProcedure, connect_go.NewUnaryHandler(
		OrgDeleteWebLinkTemplateProcedure,
		svc.DeleteWebLinkTemplate,
		opts...,
	))
	mux.Handle(OrgCreateAgentTriggerTemplateProcedure, connect_go.NewUnaryHandler(
		OrgCreateAgentTriggerTemplateProcedure,
		svc.CreateAgentTriggerTemplate,
		opts...,
	))
	mux.Handle(OrgListAgentTriggerTemplatesProcedure, connect_go.NewUnaryHandler(
		OrgListAgentTriggerTemplatesProcedure,
		svc.ListAgentTriggerTemplates,
		opts...,
	))
	mux.Handle(OrgGetAgentTriggerTemplateProcedure, connect_go.NewUnaryHandler(
		OrgGetAgentTriggerTemplateProcedure,
		svc.GetAgentTriggerTemplate,
		opts...,
	))
	mux.Handle(OrgUpdateAgentTriggerTemplateProcedure, connect_go.NewUnaryHandler(
		OrgUpdateAgentTriggerTemplateProcedure,
		svc.UpdateAgentTriggerTemplate,
		opts...,
	))
	mux.Handle(OrgDeleteAgentTriggerTemplateProcedure, connect_go.NewUnaryHandler(
		OrgDeleteAgentTriggerTemplateProcedure,
		svc.DeleteAgentTriggerTemplate,
		opts...,
	))
	mux.Handle(OrgCreateClientInfoDisplayTemplateProcedure, connect_go.NewUnaryHandler(
		OrgCreateClientInfoDisplayTemplateProcedure,
		svc.CreateClientInfoDisplayTemplate,
		opts...,
	))
	mux.Handle(OrgListClientInfoDisplayTemplatesProcedure, connect_go.NewUnaryHandler(
		OrgListClientInfoDisplayTemplatesProcedure,
		svc.ListClientInfoDisplayTemplates,
		opts...,
	))
	mux.Handle(OrgUpdateClientInfoDisplayTemplateProcedure, connect_go.NewUnaryHandler(
		OrgUpdateClientInfoDisplayTemplateProcedure,
		svc.UpdateClientInfoDisplayTemplate,
		opts...,
	))
	mux.Handle(OrgDeleteClientInfoDisplayTemplateProcedure, connect_go.NewUnaryHandler(
		OrgDeleteClientInfoDisplayTemplateProcedure,
		svc.DeleteClientInfoDisplayTemplate,
		opts...,
	))
	mux.Handle(OrgGetClientInfoDisplayTemplateProcedure, connect_go.NewUnaryHandler(
		OrgGetClientInfoDisplayTemplateProcedure,
		svc.GetClientInfoDisplayTemplate,
		opts...,
	))
	mux.Handle(OrgListAgentPauseCodesProcedure, connect_go.NewUnaryHandler(
		OrgListAgentPauseCodesProcedure,
		svc.ListAgentPauseCodes,
		opts...,
	))
	mux.Handle(OrgCreateAgentPauseCodeProcedure, connect_go.NewUnaryHandler(
		OrgCreateAgentPauseCodeProcedure,
		svc.CreateAgentPauseCode,
		opts...,
	))
	mux.Handle(OrgUpdateAgentPauseCodeProcedure, connect_go.NewUnaryHandler(
		OrgUpdateAgentPauseCodeProcedure,
		svc.UpdateAgentPauseCode,
		opts...,
	))
	mux.Handle(OrgDeleteAgentPauseCodeProcedure, connect_go.NewUnaryHandler(
		OrgDeleteAgentPauseCodeProcedure,
		svc.DeleteAgentPauseCode,
		opts...,
	))
	mux.Handle(OrgListCustomReportFiltersProcedure, connect_go.NewUnaryHandler(
		OrgListCustomReportFiltersProcedure,
		svc.ListCustomReportFilters,
		opts...,
	))
	mux.Handle(OrgCreateCustomReportFilterProcedure, connect_go.NewUnaryHandler(
		OrgCreateCustomReportFilterProcedure,
		svc.CreateCustomReportFilter,
		opts...,
	))
	mux.Handle(OrgUpdateCustomReportFilterProcedure, connect_go.NewUnaryHandler(
		OrgUpdateCustomReportFilterProcedure,
		svc.UpdateCustomReportFilter,
		opts...,
	))
	mux.Handle(OrgDeleteCustomReportFilterProcedure, connect_go.NewUnaryHandler(
		OrgDeleteCustomReportFilterProcedure,
		svc.DeleteCustomReportFilter,
		opts...,
	))
	mux.Handle(OrgListAgentResponseGroupsProcedure, connect_go.NewUnaryHandler(
		OrgListAgentResponseGroupsProcedure,
		svc.ListAgentResponseGroups,
		opts...,
	))
	mux.Handle(OrgListLastTemplateElementsProcedure, connect_go.NewUnaryHandler(
		OrgListLastTemplateElementsProcedure,
		svc.ListLastTemplateElements,
		opts...,
	))
	mux.Handle(OrgListQueueConfigsProcedure, connect_go.NewUnaryHandler(
		OrgListQueueConfigsProcedure,
		svc.ListQueueConfigs,
		opts...,
	))
	mux.Handle(OrgDeleteQueueConfigProcedure, connect_go.NewUnaryHandler(
		OrgDeleteQueueConfigProcedure,
		svc.DeleteQueueConfig,
		opts...,
	))
	mux.Handle(OrgGetQueueConfigProcedure, connect_go.NewUnaryHandler(
		OrgGetQueueConfigProcedure,
		svc.GetQueueConfig,
		opts...,
	))
	mux.Handle(OrgCreateQueueConfigProcedure, connect_go.NewUnaryHandler(
		OrgCreateQueueConfigProcedure,
		svc.CreateQueueConfig,
		opts...,
	))
	mux.Handle(OrgUpdateQueueConfigProcedure, connect_go.NewUnaryHandler(
		OrgUpdateQueueConfigProcedure,
		svc.UpdateQueueConfig,
		opts...,
	))
	mux.Handle(OrgCopyQueueConfigProcedure, connect_go.NewUnaryHandler(
		OrgCopyQueueConfigProcedure,
		svc.CopyQueueConfig,
		opts...,
	))
	mux.Handle(OrgGetAllQueueConfigSoundsProcedure, connect_go.NewUnaryHandler(
		OrgGetAllQueueConfigSoundsProcedure,
		svc.GetAllQueueConfigSounds,
		opts...,
	))
	mux.Handle(OrgGetQueueConfigSoundProcedure, connect_go.NewUnaryHandler(
		OrgGetQueueConfigSoundProcedure,
		svc.GetQueueConfigSound,
		opts...,
	))
	mux.Handle(OrgSetQueueConfigSoundProcedure, connect_go.NewUnaryHandler(
		OrgSetQueueConfigSoundProcedure,
		svc.SetQueueConfigSound,
		opts...,
	))
	mux.Handle(OrgSetAllQueueConfigSoundsFromSourceProcedure, connect_go.NewUnaryHandler(
		OrgSetAllQueueConfigSoundsFromSourceProcedure,
		svc.SetAllQueueConfigSoundsFromSource,
		opts...,
	))
	mux.Handle(OrgGetUserBlockedProcedure, connect_go.NewUnaryHandler(
		OrgGetUserBlockedProcedure,
		svc.GetUserBlocked,
		opts...,
	))
	mux.Handle(OrgUnblockUserProcedure, connect_go.NewUnaryHandler(
		OrgUnblockUserProcedure,
		svc.UnblockUser,
		opts...,
	))
	mux.Handle(OrgListP3UnMigratedUsersProcedure, connect_go.NewUnaryHandler(
		OrgListP3UnMigratedUsersProcedure,
		svc.ListP3UnMigratedUsers,
		opts...,
	))
	mux.Handle(OrgMigrateP3UserProcedure, connect_go.NewUnaryHandler(
		OrgMigrateP3UserProcedure,
		svc.MigrateP3User,
		opts...,
	))
	mux.Handle(OrgUpdateP3UserNameProcedure, connect_go.NewUnaryHandler(
		OrgUpdateP3UserNameProcedure,
		svc.UpdateP3UserName,
		opts...,
	))
	mux.Handle(OrgListOwnedUsersProcedure, connect_go.NewUnaryHandler(
		OrgListOwnedUsersProcedure,
		svc.ListOwnedUsers,
		opts...,
	))
	mux.Handle(OrgListOwnedOrgsProcedure, connect_go.NewUnaryHandler(
		OrgListOwnedOrgsProcedure,
		svc.ListOwnedOrgs,
		opts...,
	))
	mux.Handle(OrgRemoveLoginStrikesProcedure, connect_go.NewUnaryHandler(
		OrgRemoveLoginStrikesProcedure,
		svc.RemoveLoginStrikes,
		opts...,
	))
	mux.Handle(OrgRemoveUserLoginStrikesProcedure, connect_go.NewUnaryHandler(
		OrgRemoveUserLoginStrikesProcedure,
		svc.RemoveUserLoginStrikes,
		opts...,
	))
	mux.Handle(OrgListLoginHistoryProcedure, connect_go.NewUnaryHandler(
		OrgListLoginHistoryProcedure,
		svc.ListLoginHistory,
		opts...,
	))
	mux.Handle(OrgUpdateP3UserSidsProcedure, connect_go.NewUnaryHandler(
		OrgUpdateP3UserSidsProcedure,
		svc.UpdateP3UserSids,
		opts...,
	))
	mux.Handle(OrgCreateAuthConnectionProcedure, connect_go.NewUnaryHandler(
		OrgCreateAuthConnectionProcedure,
		svc.CreateAuthConnection,
		opts...,
	))
	mux.Handle(OrgGetAuthConnectionSettingsProcedure, connect_go.NewUnaryHandler(
		OrgGetAuthConnectionSettingsProcedure,
		svc.GetAuthConnectionSettings,
		opts...,
	))
	mux.Handle(OrgUpdateAuthConnectionSettingsProcedure, connect_go.NewUnaryHandler(
		OrgUpdateAuthConnectionSettingsProcedure,
		svc.UpdateAuthConnectionSettings,
		opts...,
	))
	mux.Handle(OrgDeleteAuthConnectionProcedure, connect_go.NewUnaryHandler(
		OrgDeleteAuthConnectionProcedure,
		svc.DeleteAuthConnection,
		opts...,
	))
	mux.Handle(OrgGetUserSubscriptionProcedure, connect_go.NewUnaryHandler(
		OrgGetUserSubscriptionProcedure,
		svc.GetUserSubscription,
		opts...,
	))
	mux.Handle(OrgAddUserSubscriptionProcedure, connect_go.NewUnaryHandler(
		OrgAddUserSubscriptionProcedure,
		svc.AddUserSubscription,
		opts...,
	))
	mux.Handle(OrgRemoveUserSubscriptionProcedure, connect_go.NewUnaryHandler(
		OrgRemoveUserSubscriptionProcedure,
		svc.RemoveUserSubscription,
		opts...,
	))
	mux.Handle(OrgUpdateUserSubscriptionProcedure, connect_go.NewUnaryHandler(
		OrgUpdateUserSubscriptionProcedure,
		svc.UpdateUserSubscription,
		opts...,
	))
	mux.Handle(OrgListUserSubscriptionsProcedure, connect_go.NewUnaryHandler(
		OrgListUserSubscriptionsProcedure,
		svc.ListUserSubscriptions,
		opts...,
	))
	mux.Handle(OrgListOrgSubscriptionsProcedure, connect_go.NewUnaryHandler(
		OrgListOrgSubscriptionsProcedure,
		svc.ListOrgSubscriptions,
		opts...,
	))
	mux.Handle(OrgGetSystemEnvironmentDetailsProcedure, connect_go.NewUnaryHandler(
		OrgGetSystemEnvironmentDetailsProcedure,
		svc.GetSystemEnvironmentDetails,
		opts...,
	))
	mux.Handle(OrgListAgentStatisticsTemplatesProcedure, connect_go.NewUnaryHandler(
		OrgListAgentStatisticsTemplatesProcedure,
		svc.ListAgentStatisticsTemplates,
		opts...,
	))
	mux.Handle(OrgCreateAgentStatisticsTemplateProcedure, connect_go.NewUnaryHandler(
		OrgCreateAgentStatisticsTemplateProcedure,
		svc.CreateAgentStatisticsTemplate,
		opts...,
	))
	mux.Handle(OrgUpdateAgentStatisticsTemplateProcedure, connect_go.NewUnaryHandler(
		OrgUpdateAgentStatisticsTemplateProcedure,
		svc.UpdateAgentStatisticsTemplate,
		opts...,
	))
	mux.Handle(OrgDeleteAgentStatisticsTemplateProcedure, connect_go.NewUnaryHandler(
		OrgDeleteAgentStatisticsTemplateProcedure,
		svc.DeleteAgentStatisticsTemplate,
		opts...,
	))
	return "/api.v0alpha.Org/", mux
}

// UnimplementedOrgHandler returns CodeUnimplemented from all methods.
type UnimplementedOrgHandler struct{}

func (UnimplementedOrgHandler) RegisterOrganization(context.Context, *connect_go.Request[v0alpha.RegisterOrganizationRequest]) (*connect_go.Response[v0alpha.RegisterOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.RegisterOrganization is not implemented"))
}

func (UnimplementedOrgHandler) ConvertOrgToManual(context.Context, *connect_go.Request[v0alpha.ConvertOrgToManualRequest]) (*connect_go.Response[v0alpha.ConvertOrgToManualResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ConvertOrgToManual is not implemented"))
}

func (UnimplementedOrgHandler) UpdateOrganization(context.Context, *connect_go.Request[v0alpha.UpdateOrganizationRequest]) (*connect_go.Response[v0alpha.UpdateOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateOrganization is not implemented"))
}

func (UnimplementedOrgHandler) ArchiveOrganization(context.Context, *connect_go.Request[v0alpha.ArchiveOrganizationRequest]) (*connect_go.Response[v0alpha.ArchiveOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ArchiveOrganization is not implemented"))
}

func (UnimplementedOrgHandler) UnArchiveOrganization(context.Context, *connect_go.Request[v0alpha.UnArchiveOrganizationRequest]) (*connect_go.Response[v0alpha.UnArchiveOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UnArchiveOrganization is not implemented"))
}

func (UnimplementedOrgHandler) ListArchivedOrganizations(context.Context, *connect_go.Request[v0alpha.ListArchivedOrganizationsRequest]) (*connect_go.Response[v0alpha.ListArchivedOrganizationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ListArchivedOrganizations is not implemented"))
}

func (UnimplementedOrgHandler) GetOrganizationProfile(context.Context, *connect_go.Request[v0alpha.GetOrganizationProfileRequest]) (*connect_go.Response[v0alpha.GetOrganizationProfileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetOrganizationProfile is not implemented"))
}

func (UnimplementedOrgHandler) GetOrganizationProfileById(context.Context, *connect_go.Request[v0alpha.GetOrganizationProfileByIdRequest]) (*connect_go.Response[v0alpha.GetOrganizationProfileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetOrganizationProfileById is not implemented"))
}

func (UnimplementedOrgHandler) ListOrganizationDescriptions(context.Context, *connect_go.Request[v0alpha.ListOrganizationDescriptionsRequest]) (*connect_go.Response[v0alpha.ListOrganizationDescriptionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ListOrganizationDescriptions is not implemented"))
}

func (UnimplementedOrgHandler) ListRegionalOrganizations(context.Context, *connect_go.Request[v0alpha.ListRegionalOrganizationsRequest]) (*connect_go.Response[v0alpha.ListRegionalOrganizationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ListRegionalOrganizations is not implemented"))
}

func (UnimplementedOrgHandler) UpdateP3OwningOrg(context.Context, *connect_go.Request[v0alpha.UpdateP3OwningOrgRequest]) (*connect_go.Response[v0alpha.UpdateP3OwningOrgResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateP3OwningOrg is not implemented"))
}

func (UnimplementedOrgHandler) GetP3OwningOrg(context.Context, *connect_go.Request[v0alpha.GetP3OwningOrgRequest]) (*connect_go.Response[v0alpha.GetP3OwningOrgResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetP3OwningOrg is not implemented"))
}

func (UnimplementedOrgHandler) ListOrganizationUserDescriptions(context.Context, *connect_go.Request[v0alpha.ListOrganizationUserDescriptionsRequest]) (*connect_go.Response[v0alpha.ListOrganizationUserDescriptionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ListOrganizationUserDescriptions is not implemented"))
}

func (UnimplementedOrgHandler) ListUserDescriptions(context.Context, *connect_go.Request[v0alpha.ListUserDescriptionsRequest], *connect_go.ServerStream[v0alpha.ListUserDescriptionsResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ListUserDescriptions is not implemented"))
}

func (UnimplementedOrgHandler) GetUserDirectory(context.Context, *connect_go.Request[v0alpha.GetUserDirectoryRequest]) (*connect_go.Response[v0alpha.GetUserDirectoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetUserDirectory is not implemented"))
}

func (UnimplementedOrgHandler) GetRegions(context.Context, *connect_go.Request[v0alpha.GetRegionsRequest]) (*connect_go.Response[v0alpha.GetRegionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetRegions is not implemented"))
}

func (UnimplementedOrgHandler) GetUserDetails(context.Context, *connect_go.Request[v0alpha.GetUserDetailsRequest]) (*connect_go.Response[v0alpha.UserDetails], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetUserDetails is not implemented"))
}

func (UnimplementedOrgHandler) AdminGetUserDetails(context.Context, *connect_go.Request[v0alpha.AdminGetUserDetailsRequest]) (*connect_go.Response[v0alpha.UserDetails], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.AdminGetUserDetails is not implemented"))
}

func (UnimplementedOrgHandler) GetAgentUsers(context.Context, *connect_go.Request[v0alpha.GetAgentUsersRequest]) (*connect_go.Response[v0alpha.GetAgentUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetAgentUsers is not implemented"))
}

func (UnimplementedOrgHandler) GetAgentSettings(context.Context, *connect_go.Request[v0alpha.GetAgentSettingsRequest]) (*connect_go.Response[v0alpha.GetAgentSettingsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetAgentSettings is not implemented"))
}

func (UnimplementedOrgHandler) GetAgentProfileGroup(context.Context, *connect_go.Request[v0alpha.GetAgentProfileGroupRequest]) (*connect_go.Response[v0alpha.GetAgentProfileGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetAgentProfileGroup is not implemented"))
}

func (UnimplementedOrgHandler) UpdateAgentProfileGroup(context.Context, *connect_go.Request[v0alpha.UpdateAgentProfileGroupRequest]) (*connect_go.Response[v0alpha.UpdateAgentProfileGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateAgentProfileGroup is not implemented"))
}

func (UnimplementedOrgHandler) CreateAgentProfileGroup(context.Context, *connect_go.Request[v0alpha.CreateAgentProfileGroupRequest]) (*connect_go.Response[v0alpha.CreateAgentProfileGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.CreateAgentProfileGroup is not implemented"))
}

func (UnimplementedOrgHandler) ListAgentProfileGroups(context.Context, *connect_go.Request[v0alpha.ListAgentProfileGroupsRequest]) (*connect_go.Response[v0alpha.ListAgentProfileGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ListAgentProfileGroups is not implemented"))
}

func (UnimplementedOrgHandler) DeleteAgentProfileGroup(context.Context, *connect_go.Request[v0alpha.DeleteAgentProfileGroupRequest]) (*connect_go.Response[v0alpha.DeleteAgentProfileGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.DeleteAgentProfileGroup is not implemented"))
}

func (UnimplementedOrgHandler) AssignAgentProfileGroups(context.Context, *connect_go.Request[v0alpha.AssignAgentProfileGroupsRequest]) (*connect_go.Response[v0alpha.AssignAgentProfileGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.AssignAgentProfileGroups is not implemented"))
}

func (UnimplementedOrgHandler) UpdateUser(context.Context, *connect_go.Request[v0alpha.UpdateUserRequest]) (*connect_go.Response[v0alpha.UpdateUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateUser is not implemented"))
}

func (UnimplementedOrgHandler) CreateUser(context.Context, *connect_go.Request[v0alpha.CreateUserRequest]) (*connect_go.Response[v0alpha.CreateUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.CreateUser is not implemented"))
}

func (UnimplementedOrgHandler) CreateDelegatedUser(context.Context, *connect_go.Request[v0alpha.CreateDelegatedUserRequest]) (*connect_go.Response[v0alpha.CreateDelegatedUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.CreateDelegatedUser is not implemented"))
}

func (UnimplementedOrgHandler) UpdateUserPassword(context.Context, *connect_go.Request[v0alpha.UpdateUserPasswordRequest]) (*connect_go.Response[v0alpha.UpdateUserPasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateUserPassword is not implemented"))
}

func (UnimplementedOrgHandler) ResetUserRequirePasswordReset(context.Context, *connect_go.Request[v0alpha.ResetUserRequirePasswordResetRequest]) (*connect_go.Response[v0alpha.ResetUserRequirePasswordResetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ResetUserRequirePasswordReset is not implemented"))
}

func (UnimplementedOrgHandler) GetUserPasswordResetLink(context.Context, *connect_go.Request[v0alpha.GetUserPasswordResetLinkRequest]) (*connect_go.Response[v0alpha.GetUserPasswordResetLinkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetUserPasswordResetLink is not implemented"))
}

func (UnimplementedOrgHandler) GetUserEmailVerified(context.Context, *connect_go.Request[v0alpha.GetUserEmailVerifiedRequest]) (*connect_go.Response[v0alpha.GetUserEmailVerifiedResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetUserEmailVerified is not implemented"))
}

func (UnimplementedOrgHandler) SendUserVerificationEmail(context.Context, *connect_go.Request[v0alpha.SendUserVerificationEmailRequest]) (*connect_go.Response[v0alpha.SendUserVerificationEmailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.SendUserVerificationEmail is not implemented"))
}

func (UnimplementedOrgHandler) ManualUserEmailVerification(context.Context, *connect_go.Request[v0alpha.ManualUserEmailVerificationRequest]) (*connect_go.Response[v0alpha.ManualUserEmailVerificationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ManualUserEmailVerification is not implemented"))
}

func (UnimplementedOrgHandler) GetTempUserToken(context.Context, *connect_go.Request[v0alpha.GetTempUserTokenReq]) (*connect_go.Response[v0alpha.GetTempUserTokenRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetTempUserToken is not implemented"))
}

func (UnimplementedOrgHandler) GetCountriesList(context.Context, *connect_go.Request[v0alpha.GetCountriesListRequest]) (*connect_go.Response[v0alpha.GetCountriesListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetCountriesList is not implemented"))
}

func (UnimplementedOrgHandler) GetAdminClientPreferences(context.Context, *connect_go.Request[v0alpha.GetAdminClientPreferencesRequest]) (*connect_go.Response[v0alpha.GetAdminClientPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetAdminClientPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateAdminClientPreferences(context.Context, *connect_go.Request[v0alpha.UpdateAdminClientPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateAdminClientPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateAdminClientPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetPermissions(context.Context, *connect_go.Request[v0alpha.GetPermissionsRequest]) (*connect_go.Response[v0alpha.GetPermissionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetPermissions is not implemented"))
}

func (UnimplementedOrgHandler) RevokeAccountOwnerPermissionFromUser(context.Context, *connect_go.Request[v0alpha.RevokeAccountOwnerPermissionFromUserRequest]) (*connect_go.Response[v0alpha.RevokeAccountOwnerPermissionFromUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.RevokeAccountOwnerPermissionFromUser is not implemented"))
}

func (UnimplementedOrgHandler) UpdateUserDisabled(context.Context, *connect_go.Request[v0alpha.UpdateUserDisabledRequest]) (*connect_go.Response[v0alpha.UpdateUserDisabledResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateUserDisabled is not implemented"))
}

func (UnimplementedOrgHandler) UpdateBulkUsersDisabled(context.Context, *connect_go.Request[v0alpha.UpdateBulkUsersDisabledRequest]) (*connect_go.Response[v0alpha.UpdateBulkUsersDisabledResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateBulkUsersDisabled is not implemented"))
}

func (UnimplementedOrgHandler) GetOrgBillingSettings(context.Context, *connect_go.Request[v0alpha.GetOrgBillingSettingsRequest]) (*connect_go.Response[v0alpha.GetOrgBillingSettingsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetOrgBillingSettings is not implemented"))
}

func (UnimplementedOrgHandler) SetOrgBillingSettings(context.Context, *connect_go.Request[v0alpha.SetOrgBillingSettingsRequest]) (*connect_go.Response[v0alpha.SetOrgBillingSettingsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.SetOrgBillingSettings is not implemented"))
}

func (UnimplementedOrgHandler) AddOrgBillingOverride(context.Context, *connect_go.Request[v0alpha.AddOrgBillingOverrideRequest]) (*connect_go.Response[v0alpha.AddOrgBillingOverrideResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.AddOrgBillingOverride is not implemented"))
}

func (UnimplementedOrgHandler) RemoveOrgBillingOverride(context.Context, *connect_go.Request[v0alpha.RemoveOrgBillingOverrideRequest]) (*connect_go.Response[v0alpha.RemoveOrgBillingOverrideResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.RemoveOrgBillingOverride is not implemented"))
}

func (UnimplementedOrgHandler) GetSystemDefaultBillingRates(context.Context, *connect_go.Request[v0alpha.GetSystemDefaultBillingRatesRequest]) (*connect_go.Response[v0alpha.GetSystemDefaultBillingRatesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetSystemDefaultBillingRates is not implemented"))
}

func (UnimplementedOrgHandler) ListPermissionGroups(context.Context, *connect_go.Request[v0alpha.ListPermissionGroupsRequest]) (*connect_go.Response[v0alpha.ListPermissionGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ListPermissionGroups is not implemented"))
}

func (UnimplementedOrgHandler) CreatePermissionGroup(context.Context, *connect_go.Request[v0alpha.CreatePermissionGroupRequest]) (*connect_go.Response[v0alpha.CreatePermissionGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.CreatePermissionGroup is not implemented"))
}

func (UnimplementedOrgHandler) UpdatePermissionGroup(context.Context, *connect_go.Request[v0alpha.UpdatePermissionGroupRequest]) (*connect_go.Response[v0alpha.UpdatePermissionGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdatePermissionGroup is not implemented"))
}

func (UnimplementedOrgHandler) DeletePermissionGroup(context.Context, *connect_go.Request[v0alpha.DeletePermissionGroupRequest]) (*connect_go.Response[v0alpha.DeletePermissionGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.DeletePermissionGroup is not implemented"))
}

func (UnimplementedOrgHandler) AssignUserToAccountOwnerPermissionGroup(context.Context, *connect_go.Request[v0alpha.AssignUserToAccountOwnerPermissionGroupRequest]) (*connect_go.Response[v0alpha.AssignUserToAccountOwnerPermissionGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.AssignUserToAccountOwnerPermissionGroup is not implemented"))
}

func (UnimplementedOrgHandler) AssignUserPermissionGroup(context.Context, *connect_go.Request[v0alpha.AssignUserPermissionGroupRequest]) (*connect_go.Response[v0alpha.AssignUserPermissionGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.AssignUserPermissionGroup is not implemented"))
}

func (UnimplementedOrgHandler) AssignUsersPermissionGroup(context.Context, *connect_go.Request[v0alpha.AssignUsersPermissionGroupRequest]) (*connect_go.Response[v0alpha.AssignUsersPermissionGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.AssignUsersPermissionGroup is not implemented"))
}

func (UnimplementedOrgHandler) UpdateUserNeoPermissionGroups(context.Context, *connect_go.Request[v0alpha.UpdateUserNeoPermissionGroupsRequest]) (*connect_go.Response[v0alpha.UpdateUserNeoPermissionGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateUserNeoPermissionGroups is not implemented"))
}

func (UnimplementedOrgHandler) RevokeUserPermissionGroup(context.Context, *connect_go.Request[v0alpha.RevokeUserPermissionGroupRequest]) (*connect_go.Response[v0alpha.RevokeUserPermissionGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.RevokeUserPermissionGroup is not implemented"))
}

func (UnimplementedOrgHandler) RevokeUsersPermissionGroup(context.Context, *connect_go.Request[v0alpha.RevokeUsersPermissionGroupRequest]) (*connect_go.Response[v0alpha.RevokeUsersPermissionGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.RevokeUsersPermissionGroup is not implemented"))
}

func (UnimplementedOrgHandler) InitDefaultPermissionGroups(context.Context, *connect_go.Request[v0alpha.InitDefaultPermissionGroupsRequest]) (*connect_go.Response[v0alpha.InitDefaultPermissionGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.InitDefaultPermissionGroups is not implemented"))
}

func (UnimplementedOrgHandler) AddPermissionToAccountOwnerPermissionGroup(context.Context, *connect_go.Request[v0alpha.AddPermissionToAccountOwnerPermissionGroupRequest]) (*connect_go.Response[v0alpha.AddPermissionToAccountOwnerPermissionGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.AddPermissionToAccountOwnerPermissionGroup is not implemented"))
}

func (UnimplementedOrgHandler) RevokePermissionToAccountOwnerPermissionGroup(context.Context, *connect_go.Request[v0alpha.RevokePermissionToAccountOwnerPermissionGroupRequest]) (*connect_go.Response[v0alpha.RevokePermissionToAccountOwnerPermissionGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.RevokePermissionToAccountOwnerPermissionGroup is not implemented"))
}

func (UnimplementedOrgHandler) AddPermissionToOrgDefaultGroup(context.Context, *connect_go.Request[v0alpha.AddPermissionToOrgDefaultGroupRequest]) (*connect_go.Response[v0alpha.AddPermissionToOrgDefaultGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.AddPermissionToOrgDefaultGroup is not implemented"))
}

func (UnimplementedOrgHandler) RemovePermissionFromOrgDefaultGroup(context.Context, *connect_go.Request[v0alpha.RemovePermissionFromOrgDefaultGroupRequest]) (*connect_go.Response[v0alpha.RemovePermissionFromOrgDefaultGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.RemovePermissionFromOrgDefaultGroup is not implemented"))
}

func (UnimplementedOrgHandler) GetOrgDefaultSuperUserGroup(context.Context, *connect_go.Request[v0alpha.GetOrgDefaultSuperUserGroupRequest]) (*connect_go.Response[v0alpha.GetOrgDefaultSuperUserGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetOrgDefaultSuperUserGroup is not implemented"))
}

func (UnimplementedOrgHandler) ListP3PermissionGroups(context.Context, *connect_go.Request[v0alpha.ListP3PermissionGroupsRequest]) (*connect_go.Response[v0alpha.ListP3PermissionGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ListP3PermissionGroups is not implemented"))
}

func (UnimplementedOrgHandler) AddUserRegion(context.Context, *connect_go.Request[v0alpha.AddUserRegionRequest]) (*connect_go.Response[v0alpha.AddUserRegionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.AddUserRegion is not implemented"))
}

func (UnimplementedOrgHandler) RemoveUserRegion(context.Context, *connect_go.Request[v0alpha.RemoveUserRegionRequest]) (*connect_go.Response[v0alpha.RemoveUserRegionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.RemoveUserRegion is not implemented"))
}

func (UnimplementedOrgHandler) CreateP3PermissionGroup(context.Context, *connect_go.Request[v0alpha.CreateP3PermissionGroupRequest]) (*connect_go.Response[v0alpha.CreateP3PermissionGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.CreateP3PermissionGroup is not implemented"))
}

func (UnimplementedOrgHandler) UpdateP3PermissionGroup(context.Context, *connect_go.Request[v0alpha.UpdateP3PermissionGroupRequest]) (*connect_go.Response[v0alpha.UpdateP3PermissionGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateP3PermissionGroup is not implemented"))
}

func (UnimplementedOrgHandler) DeleteP3PermissionGroup(context.Context, *connect_go.Request[v0alpha.DeleteP3PermissionGroupRequest]) (*connect_go.Response[v0alpha.DeleteP3PermissionGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.DeleteP3PermissionGroup is not implemented"))
}

func (UnimplementedOrgHandler) AssignUsersP3PermissionGroup(context.Context, *connect_go.Request[v0alpha.AssignUsersP3PermissionGroupRequest]) (*connect_go.Response[v0alpha.AssignUsersP3PermissionGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.AssignUsersP3PermissionGroup is not implemented"))
}

func (UnimplementedOrgHandler) AddLoginToUser(context.Context, *connect_go.Request[v0alpha.AddLoginToUserRequest]) (*connect_go.Response[v0alpha.AddLoginToUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.AddLoginToUser is not implemented"))
}

func (UnimplementedOrgHandler) RevokeUsersP3PermissionGroup(context.Context, *connect_go.Request[v0alpha.RevokeUsersP3PermissionGroupRequest]) (*connect_go.Response[v0alpha.RevokeUsersP3PermissionGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.RevokeUsersP3PermissionGroup is not implemented"))
}

func (UnimplementedOrgHandler) GetContactPreferences(context.Context, *connect_go.Request[v0alpha.GetContactPreferencesRequest]) (*connect_go.Response[v0alpha.GetContactPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetContactPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateContactPreferences(context.Context, *connect_go.Request[v0alpha.UpdateContactPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateContactPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateContactPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetCompliancePreferences(context.Context, *connect_go.Request[v0alpha.GetCompliancePreferencesRequest]) (*connect_go.Response[v0alpha.GetCompliancePreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetCompliancePreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateCompliancePreferences(context.Context, *connect_go.Request[v0alpha.UpdateCompliancePreferencesRequest]) (*connect_go.Response[v0alpha.UpdateCompliancePreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateCompliancePreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetAgentPreferences(context.Context, *connect_go.Request[v0alpha.GetAgentPreferencesRequest]) (*connect_go.Response[v0alpha.GetAgentPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetAgentPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateAgentPreferences(context.Context, *connect_go.Request[v0alpha.UpdateAgentPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateAgentPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateAgentPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetOrganizationPreferences(context.Context, *connect_go.Request[v0alpha.GetOrganizationPreferencesRequest]) (*connect_go.Response[v0alpha.GetOrganizationPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetOrganizationPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateOrganizationPreferences(context.Context, *connect_go.Request[v0alpha.UpdateOrganizationPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateOrganizationPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateOrganizationPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetSchedulePreferences(context.Context, *connect_go.Request[v0alpha.GetSchedulePreferencesRequest]) (*connect_go.Response[v0alpha.GetSchedulePreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetSchedulePreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateSchedulePreferences(context.Context, *connect_go.Request[v0alpha.UpdateSchedulePreferencesRequest]) (*connect_go.Response[v0alpha.UpdateSchedulePreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateSchedulePreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetBusinessPreferences(context.Context, *connect_go.Request[v0alpha.GetBusinessPreferencesRequest]) (*connect_go.Response[v0alpha.GetBusinessPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetBusinessPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateBusinessPreferences(context.Context, *connect_go.Request[v0alpha.UpdateBusinessPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateBusinessPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateBusinessPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetEndOfDayPreferences(context.Context, *connect_go.Request[v0alpha.GetEndOfDayPreferencesRequest]) (*connect_go.Response[v0alpha.GetEndOfDayPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetEndOfDayPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateEndOfDayPreferences(context.Context, *connect_go.Request[v0alpha.UpdateEndOfDayPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateEndOfDayPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateEndOfDayPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetReportFilterPreferences(context.Context, *connect_go.Request[v0alpha.GetFilterPreferencesRequest]) (*connect_go.Response[v0alpha.GetFilterPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetReportFilterPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateReportFilterPreferences(context.Context, *connect_go.Request[v0alpha.UpdateFilterPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateFilterPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateReportFilterPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetPhonePreferences(context.Context, *connect_go.Request[v0alpha.GetPhonePreferencesRequest]) (*connect_go.Response[v0alpha.GetPhonePreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetPhonePreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdatePhonePreferences(context.Context, *connect_go.Request[v0alpha.UpdatePhonePreferencesRequest]) (*connect_go.Response[v0alpha.UpdatePhonePreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdatePhonePreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetDashboardGeneralPreferences(context.Context, *connect_go.Request[v0alpha.GetDashboardGeneralPreferencesRequest]) (*connect_go.Response[v0alpha.GetDashboardGeneralPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetDashboardGeneralPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateDashboardGeneralPreferences(context.Context, *connect_go.Request[v0alpha.UpdateDashboardGeneralPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateDashboardGeneralPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateDashboardGeneralPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetWebhookPreferences(context.Context, *connect_go.Request[v0alpha.GetWebhookPreferencesRequest]) (*connect_go.Response[v0alpha.GetWebhookPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetWebhookPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateWebhookPreferences(context.Context, *connect_go.Request[v0alpha.UpdateWebhookPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateWebhookPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateWebhookPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetBroadcastPreferences(context.Context, *connect_go.Request[v0alpha.GetBroadcastPreferencesRequest]) (*connect_go.Response[v0alpha.GetBroadcastPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetBroadcastPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateBroadcastPreferences(context.Context, *connect_go.Request[v0alpha.UpdateBroadcastPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateBroadcastPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateBroadcastPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetAuthenticationPreferences(context.Context, *connect_go.Request[v0alpha.GetAuthenticationPreferencesRequest]) (*connect_go.Response[v0alpha.GetAuthenticationPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetAuthenticationPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateAuthenticationPreferences(context.Context, *connect_go.Request[v0alpha.UpdateAuthenticationPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateAuthenticationPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateAuthenticationPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetRecordingPreferences(context.Context, *connect_go.Request[v0alpha.GetRecordingPreferencesRequest]) (*connect_go.Response[v0alpha.GetRecordingPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetRecordingPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateRecordingPreferences(context.Context, *connect_go.Request[v0alpha.UpdateRecordingPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateRecordingPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateRecordingPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetDashboardQueuePreferences(context.Context, *connect_go.Request[v0alpha.GetDashboardQueuePreferencesRequest]) (*connect_go.Response[v0alpha.GetDashboardQueuePreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetDashboardQueuePreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateDashboardQueuePreferences(context.Context, *connect_go.Request[v0alpha.UpdateDashboardQueuePreferencesRequest]) (*connect_go.Response[v0alpha.UpdateDashboardQueuePreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateDashboardQueuePreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetAgentQuickViewPreferences(context.Context, *connect_go.Request[v0alpha.GetAgentQuickViewPreferencesRequest]) (*connect_go.Response[v0alpha.GetAgentQuickViewPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetAgentQuickViewPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetVoiceAnalyticsPreferences(context.Context, *connect_go.Request[v0alpha.GetVoiceAnalyticsPreferencesRequest]) (*connect_go.Response[v0alpha.GetVoiceAnalyticsPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetVoiceAnalyticsPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateVoiceAnalyticsPreferences(context.Context, *connect_go.Request[v0alpha.UpdateVoiceAnalyticsPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateVoiceAnalyticsPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateVoiceAnalyticsPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetScorecardsPreferences(context.Context, *connect_go.Request[v0alpha.GetScorecardsPreferencesRequest]) (*connect_go.Response[v0alpha.GetScorecardsPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetScorecardsPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateScorecardsPreferences(context.Context, *connect_go.Request[v0alpha.UpdateScorecardsPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateScorecardsPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateScorecardsPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetEmailSmsPreferences(context.Context, *connect_go.Request[v0alpha.GetEmailSmsPreferencesRequest]) (*connect_go.Response[v0alpha.GetEmailSmsPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetEmailSmsPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateEmailSmsPreferences(context.Context, *connect_go.Request[v0alpha.UpdateEmailSmsPreferencesRequest]) (*connect_go.Response[v0alpha.UpdateEmailSmsPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateEmailSmsPreferences is not implemented"))
}

func (UnimplementedOrgHandler) EditAgentQuickViewPreferences(context.Context, *connect_go.Request[v0alpha.EditAgentQuickViewPreferencesRequest]) (*connect_go.Response[v0alpha.EditAgentQuickViewPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.EditAgentQuickViewPreferences is not implemented"))
}

func (UnimplementedOrgHandler) EditBackofficeThemePreference(context.Context, *connect_go.Request[v0alpha.EditBackofficeThemePreferenceRequest]) (*connect_go.Response[v0alpha.EditBackofficeThemePreferenceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.EditBackofficeThemePreference is not implemented"))
}

func (UnimplementedOrgHandler) GetBackofficeThemePreference(context.Context, *connect_go.Request[v0alpha.GetBackofficeThemePreferenceRequest]) (*connect_go.Response[v0alpha.GetBackofficeThemePreferenceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetBackofficeThemePreference is not implemented"))
}

func (UnimplementedOrgHandler) AcceptLinkbackRecordingTerms(context.Context, *connect_go.Request[v0alpha.AcceptLinkbackRecordingTermsRequest]) (*connect_go.Response[v0alpha.AcceptLinkbackRecordingTermsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.AcceptLinkbackRecordingTerms is not implemented"))
}

func (UnimplementedOrgHandler) LinkbackUpdateBroadcastTemplates(context.Context, *connect_go.Request[v0alpha.LinkbackUpdateBroadcastTemplatesRequest]) (*connect_go.Response[v0alpha.LinkbackUpdateBroadcastTemplatesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.LinkbackUpdateBroadcastTemplates is not implemented"))
}

func (UnimplementedOrgHandler) RecordEmailUnsubscribeAcknowledgement(context.Context, *connect_go.Request[v0alpha.RecordEmailUnsubscribeAcknowledgementRequest]) (*connect_go.Response[v0alpha.RecordEmailUnsubscribeAcknowledgementResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.RecordEmailUnsubscribeAcknowledgement is not implemented"))
}

func (UnimplementedOrgHandler) ClearEmailUnsubscribeAcknowledgement(context.Context, *connect_go.Request[v0alpha.ClearEmailUnsubscribeAcknowledgementRequest]) (*connect_go.Response[v0alpha.ClearEmailUnsubscribeAcknowledgementResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ClearEmailUnsubscribeAcknowledgement is not implemented"))
}

func (UnimplementedOrgHandler) CreateWebLinkTemplate(context.Context, *connect_go.Request[v0alpha.CreateWebLinkTemplateRequest]) (*connect_go.Response[v0alpha.CreateWebLinkTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.CreateWebLinkTemplate is not implemented"))
}

func (UnimplementedOrgHandler) ListWebLinkTemplates(context.Context, *connect_go.Request[v0alpha.ListWebLinkTemplatesRequest]) (*connect_go.Response[v0alpha.ListWebLinkTemplatesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ListWebLinkTemplates is not implemented"))
}

func (UnimplementedOrgHandler) GetWebLinkTemplate(context.Context, *connect_go.Request[v0alpha.GetWebLinkTemplateRequest]) (*connect_go.Response[v0alpha.GetWebLinkTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetWebLinkTemplate is not implemented"))
}

func (UnimplementedOrgHandler) UpdateWebLinkTemplate(context.Context, *connect_go.Request[v0alpha.UpdateWebLinkTemplateRequest]) (*connect_go.Response[v0alpha.UpdateWebLinkTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateWebLinkTemplate is not implemented"))
}

func (UnimplementedOrgHandler) DeleteWebLinkTemplate(context.Context, *connect_go.Request[v0alpha.DeleteWebLinkTemplateRequest]) (*connect_go.Response[v0alpha.DeleteWebLinkTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.DeleteWebLinkTemplate is not implemented"))
}

func (UnimplementedOrgHandler) CreateAgentTriggerTemplate(context.Context, *connect_go.Request[v0alpha.CreateAgentTriggerTemplateRequest]) (*connect_go.Response[v0alpha.CreateAgentTriggerTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.CreateAgentTriggerTemplate is not implemented"))
}

func (UnimplementedOrgHandler) ListAgentTriggerTemplates(context.Context, *connect_go.Request[v0alpha.ListAgentTriggerTemplatesRequest]) (*connect_go.Response[v0alpha.ListAgentTriggerTemplatesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ListAgentTriggerTemplates is not implemented"))
}

func (UnimplementedOrgHandler) GetAgentTriggerTemplate(context.Context, *connect_go.Request[v0alpha.GetAgentTriggerTemplateRequest]) (*connect_go.Response[v0alpha.GetAgentTriggerTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetAgentTriggerTemplate is not implemented"))
}

func (UnimplementedOrgHandler) UpdateAgentTriggerTemplate(context.Context, *connect_go.Request[v0alpha.UpdateAgentTriggerTemplateRequest]) (*connect_go.Response[v0alpha.UpdateAgentTriggerTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateAgentTriggerTemplate is not implemented"))
}

func (UnimplementedOrgHandler) DeleteAgentTriggerTemplate(context.Context, *connect_go.Request[v0alpha.DeleteAgentTriggerTemplateRequest]) (*connect_go.Response[v0alpha.DeleteAgentTriggerTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.DeleteAgentTriggerTemplate is not implemented"))
}

func (UnimplementedOrgHandler) CreateClientInfoDisplayTemplate(context.Context, *connect_go.Request[v0alpha.CreateClientInfoDisplayTemplateRequest]) (*connect_go.Response[v0alpha.CreateClientInfoDisplayTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.CreateClientInfoDisplayTemplate is not implemented"))
}

func (UnimplementedOrgHandler) ListClientInfoDisplayTemplates(context.Context, *connect_go.Request[v0alpha.ListClientInfoDisplayTemplatesRequest]) (*connect_go.Response[v0alpha.ListClientInfoDisplayTemplatesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ListClientInfoDisplayTemplates is not implemented"))
}

func (UnimplementedOrgHandler) UpdateClientInfoDisplayTemplate(context.Context, *connect_go.Request[v0alpha.UpdateClientInfoDisplayTemplateRequest]) (*connect_go.Response[v0alpha.UpdateClientInfoDisplayTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateClientInfoDisplayTemplate is not implemented"))
}

func (UnimplementedOrgHandler) DeleteClientInfoDisplayTemplate(context.Context, *connect_go.Request[v0alpha.DeleteClientInfoDisplayTemplateRequest]) (*connect_go.Response[v0alpha.DeleteClientInfoDisplayTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.DeleteClientInfoDisplayTemplate is not implemented"))
}

func (UnimplementedOrgHandler) GetClientInfoDisplayTemplate(context.Context, *connect_go.Request[v0alpha.GetClientInfoDisplayTemplateRequest]) (*connect_go.Response[v0alpha.GetClientInfoDisplayTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetClientInfoDisplayTemplate is not implemented"))
}

func (UnimplementedOrgHandler) ListAgentPauseCodes(context.Context, *connect_go.Request[v0alpha.ListAgentPauseCodesRequest]) (*connect_go.Response[v0alpha.ListAgentPauseCodesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ListAgentPauseCodes is not implemented"))
}

func (UnimplementedOrgHandler) CreateAgentPauseCode(context.Context, *connect_go.Request[v0alpha.CreateAgentPauseCodeRequest]) (*connect_go.Response[v0alpha.CreateAgentPauseCodeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.CreateAgentPauseCode is not implemented"))
}

func (UnimplementedOrgHandler) UpdateAgentPauseCode(context.Context, *connect_go.Request[v0alpha.UpdateAgentPauseCodeRequest]) (*connect_go.Response[v0alpha.UpdateAgentPauseCodeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateAgentPauseCode is not implemented"))
}

func (UnimplementedOrgHandler) DeleteAgentPauseCode(context.Context, *connect_go.Request[v0alpha.DeleteAgentPauseCodeRequest]) (*connect_go.Response[v0alpha.DeleteAgentPauseCodeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.DeleteAgentPauseCode is not implemented"))
}

func (UnimplementedOrgHandler) ListCustomReportFilters(context.Context, *connect_go.Request[v0alpha.ListCustomReportFiltersRequest]) (*connect_go.Response[v0alpha.ListCustomReportFiltersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ListCustomReportFilters is not implemented"))
}

func (UnimplementedOrgHandler) CreateCustomReportFilter(context.Context, *connect_go.Request[v0alpha.CreateCustomReportFilterRequest]) (*connect_go.Response[v0alpha.CreateCustomReportFilterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.CreateCustomReportFilter is not implemented"))
}

func (UnimplementedOrgHandler) UpdateCustomReportFilter(context.Context, *connect_go.Request[v0alpha.UpdateCustomReportFilterRequest]) (*connect_go.Response[v0alpha.UpdateCustomReportFilterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateCustomReportFilter is not implemented"))
}

func (UnimplementedOrgHandler) DeleteCustomReportFilter(context.Context, *connect_go.Request[v0alpha.DeleteCustomReportFilterRequest]) (*connect_go.Response[v0alpha.DeleteCustomReportFilterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.DeleteCustomReportFilter is not implemented"))
}

func (UnimplementedOrgHandler) ListAgentResponseGroups(context.Context, *connect_go.Request[v0alpha.ListAgentResponseGroupsRequest]) (*connect_go.Response[v0alpha.ListAgentResponseGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ListAgentResponseGroups is not implemented"))
}

func (UnimplementedOrgHandler) ListLastTemplateElements(context.Context, *connect_go.Request[v0alpha.ListLastTemplateElementsRequest]) (*connect_go.Response[v0alpha.ListLastTemplateElementsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ListLastTemplateElements is not implemented"))
}

func (UnimplementedOrgHandler) ListQueueConfigs(context.Context, *connect_go.Request[v0alpha.ListQueueConfigsReq]) (*connect_go.Response[v0alpha.ListQueueConfigsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ListQueueConfigs is not implemented"))
}

func (UnimplementedOrgHandler) DeleteQueueConfig(context.Context, *connect_go.Request[v0alpha.DeleteQueueConfigReq]) (*connect_go.Response[v0alpha.DeleteQueueConfigRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.DeleteQueueConfig is not implemented"))
}

func (UnimplementedOrgHandler) GetQueueConfig(context.Context, *connect_go.Request[v0alpha.GetQueueConfigReq]) (*connect_go.Response[v0alpha.GetQueueConfigRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetQueueConfig is not implemented"))
}

func (UnimplementedOrgHandler) CreateQueueConfig(context.Context, *connect_go.Request[v0alpha.CreateQueueConfigReq]) (*connect_go.Response[v0alpha.CreateQueueConfigRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.CreateQueueConfig is not implemented"))
}

func (UnimplementedOrgHandler) UpdateQueueConfig(context.Context, *connect_go.Request[v0alpha.UpdateQueueConfigReq]) (*connect_go.Response[v0alpha.UpdateQueueConfigRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateQueueConfig is not implemented"))
}

func (UnimplementedOrgHandler) CopyQueueConfig(context.Context, *connect_go.Request[v0alpha.CopyQueueConfigReq]) (*connect_go.Response[v0alpha.CopyQueueConfigRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.CopyQueueConfig is not implemented"))
}

func (UnimplementedOrgHandler) GetAllQueueConfigSounds(context.Context, *connect_go.Request[v0alpha.GetAllQueueConfigSoundsReq]) (*connect_go.Response[v0alpha.GetAllQueueConfigSoundsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetAllQueueConfigSounds is not implemented"))
}

func (UnimplementedOrgHandler) GetQueueConfigSound(context.Context, *connect_go.Request[v0alpha.GetQueueConfigSoundReq]) (*connect_go.Response[v0alpha.GetQueueConfigSoundRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetQueueConfigSound is not implemented"))
}

func (UnimplementedOrgHandler) SetQueueConfigSound(context.Context, *connect_go.Request[v0alpha.SetQueueConfigSoundReq]) (*connect_go.Response[v0alpha.SetQueueConfigSoundRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.SetQueueConfigSound is not implemented"))
}

func (UnimplementedOrgHandler) SetAllQueueConfigSoundsFromSource(context.Context, *connect_go.Request[v0alpha.SetAllQueueConfigSoundsFromSourceReq]) (*connect_go.Response[v0alpha.SetAllQueueConfigSoundsFromSourceRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.SetAllQueueConfigSoundsFromSource is not implemented"))
}

func (UnimplementedOrgHandler) GetUserBlocked(context.Context, *connect_go.Request[v0alpha.GetUserBlockedRequest]) (*connect_go.Response[v0alpha.GetUserBlockedResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetUserBlocked is not implemented"))
}

func (UnimplementedOrgHandler) UnblockUser(context.Context, *connect_go.Request[v0alpha.UnblockUserRequest]) (*connect_go.Response[v0alpha.UnblockUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UnblockUser is not implemented"))
}

func (UnimplementedOrgHandler) ListP3UnMigratedUsers(context.Context, *connect_go.Request[v0alpha.ListP3UnMigratedUsersRequest]) (*connect_go.Response[v0alpha.ListP3UnMigratedUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ListP3UnMigratedUsers is not implemented"))
}

func (UnimplementedOrgHandler) MigrateP3User(context.Context, *connect_go.Request[v0alpha.MigrateP3UserRequest]) (*connect_go.Response[v0alpha.MigrateP3UserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.MigrateP3User is not implemented"))
}

func (UnimplementedOrgHandler) UpdateP3UserName(context.Context, *connect_go.Request[v0alpha.UpdateP3UserNameRequest]) (*connect_go.Response[v0alpha.UpdateP3UserNameResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateP3UserName is not implemented"))
}

func (UnimplementedOrgHandler) ListOwnedUsers(context.Context, *connect_go.Request[v0alpha.ListOwnedUsersRequest]) (*connect_go.Response[v0alpha.ListOwnedUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ListOwnedUsers is not implemented"))
}

func (UnimplementedOrgHandler) ListOwnedOrgs(context.Context, *connect_go.Request[v0alpha.ListOwnedOrgsRequest]) (*connect_go.Response[v0alpha.ListOwnedOrgsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ListOwnedOrgs is not implemented"))
}

func (UnimplementedOrgHandler) RemoveLoginStrikes(context.Context, *connect_go.Request[v0alpha.RemoveLoginStrikesRequest]) (*connect_go.Response[v0alpha.RemoveLoginStrikesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.RemoveLoginStrikes is not implemented"))
}

func (UnimplementedOrgHandler) RemoveUserLoginStrikes(context.Context, *connect_go.Request[v0alpha.RemoveUserLoginStrikesRequest]) (*connect_go.Response[v0alpha.RemoveUserLoginStrikesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.RemoveUserLoginStrikes is not implemented"))
}

func (UnimplementedOrgHandler) ListLoginHistory(context.Context, *connect_go.Request[v0alpha.ListLoginHistoryRequest]) (*connect_go.Response[v0alpha.ListLoginHistoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ListLoginHistory is not implemented"))
}

func (UnimplementedOrgHandler) UpdateP3UserSids(context.Context, *connect_go.Request[v0alpha.UpdateP3UserSidsRequest]) (*connect_go.Response[v0alpha.UpdateP3UserSidsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateP3UserSids is not implemented"))
}

func (UnimplementedOrgHandler) CreateAuthConnection(context.Context, *connect_go.Request[v0alpha.CreateAuthConnectionRequest]) (*connect_go.Response[v0alpha.CreateAuthConnectionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.CreateAuthConnection is not implemented"))
}

func (UnimplementedOrgHandler) GetAuthConnectionSettings(context.Context, *connect_go.Request[v0alpha.GetAuthConnectionSettingsRequest]) (*connect_go.Response[v0alpha.GetAuthConnectionSettingsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetAuthConnectionSettings is not implemented"))
}

func (UnimplementedOrgHandler) UpdateAuthConnectionSettings(context.Context, *connect_go.Request[v0alpha.UpdateAuthConnectionSettingsRequest]) (*connect_go.Response[v0alpha.UpdateAuthConnectionSettingsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateAuthConnectionSettings is not implemented"))
}

func (UnimplementedOrgHandler) DeleteAuthConnection(context.Context, *connect_go.Request[v0alpha.DeleteAuthConnectionRequest]) (*connect_go.Response[v0alpha.DeleteAuthConnectionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.DeleteAuthConnection is not implemented"))
}

func (UnimplementedOrgHandler) GetUserSubscription(context.Context, *connect_go.Request[v0alpha.GetUserSubscriptionRequest]) (*connect_go.Response[v0alpha.GetUserSubscriptionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetUserSubscription is not implemented"))
}

func (UnimplementedOrgHandler) AddUserSubscription(context.Context, *connect_go.Request[v0alpha.AddUserSubscriptionRequest]) (*connect_go.Response[v0alpha.AddUserSubscriptionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.AddUserSubscription is not implemented"))
}

func (UnimplementedOrgHandler) RemoveUserSubscription(context.Context, *connect_go.Request[v0alpha.RemoveUserSubscriptionRequest]) (*connect_go.Response[v0alpha.RemoveUserSubscriptionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.RemoveUserSubscription is not implemented"))
}

func (UnimplementedOrgHandler) UpdateUserSubscription(context.Context, *connect_go.Request[v0alpha.UpdateUserSubscriptionRequest]) (*connect_go.Response[v0alpha.UpdateUserSubscriptionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateUserSubscription is not implemented"))
}

func (UnimplementedOrgHandler) ListUserSubscriptions(context.Context, *connect_go.Request[v0alpha.ListUserSubscriptionsRequest]) (*connect_go.Response[v0alpha.ListUserSubscriptionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ListUserSubscriptions is not implemented"))
}

func (UnimplementedOrgHandler) ListOrgSubscriptions(context.Context, *connect_go.Request[v0alpha.ListOrgSubscriptionsRequest]) (*connect_go.Response[v0alpha.ListOrgSubscriptionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ListOrgSubscriptions is not implemented"))
}

func (UnimplementedOrgHandler) GetSystemEnvironmentDetails(context.Context, *connect_go.Request[v0alpha.GetSystemEnvironmentDetailsRequest]) (*connect_go.Response[v0alpha.GetSystemEnvironmentDetailsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.GetSystemEnvironmentDetails is not implemented"))
}

func (UnimplementedOrgHandler) ListAgentStatisticsTemplates(context.Context, *connect_go.Request[v0alpha.ListAgentStatisticsTemplatesRequest]) (*connect_go.Response[v0alpha.ListAgentStatisticsTemplatesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.ListAgentStatisticsTemplates is not implemented"))
}

func (UnimplementedOrgHandler) CreateAgentStatisticsTemplate(context.Context, *connect_go.Request[v0alpha.CreateAgentStatisticsTemplateRequest]) (*connect_go.Response[v0alpha.CreateAgentStatisticsTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.CreateAgentStatisticsTemplate is not implemented"))
}

func (UnimplementedOrgHandler) UpdateAgentStatisticsTemplate(context.Context, *connect_go.Request[v0alpha.UpdateAgentStatisticsTemplateRequest]) (*connect_go.Response[v0alpha.UpdateAgentStatisticsTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.UpdateAgentStatisticsTemplate is not implemented"))
}

func (UnimplementedOrgHandler) DeleteAgentStatisticsTemplate(context.Context, *connect_go.Request[v0alpha.DeleteAgentStatisticsTemplateRequest]) (*connect_go.Response[v0alpha.DeleteAgentStatisticsTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Org.DeleteAgentStatisticsTemplate is not implemented"))
}
