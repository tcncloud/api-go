// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v0alpha/project.proto

package v0alphaconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v0alpha "github.com/tcncloud/api-go/api/v0alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ProjectApiName is the fully-qualified name of the ProjectApi service.
	ProjectApiName = "api.v0alpha.ProjectApi"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProjectApiCreateProjectProcedure is the fully-qualified name of the ProjectApi's CreateProject
	// RPC.
	ProjectApiCreateProjectProcedure = "/api.v0alpha.ProjectApi/CreateProject"
	// ProjectApiListProjectsProcedure is the fully-qualified name of the ProjectApi's ListProjects RPC.
	ProjectApiListProjectsProcedure = "/api.v0alpha.ProjectApi/ListProjects"
	// ProjectApiEditProjectByIdProcedure is the fully-qualified name of the ProjectApi's
	// EditProjectById RPC.
	ProjectApiEditProjectByIdProcedure = "/api.v0alpha.ProjectApi/EditProjectById"
	// ProjectApiCloseProjectByIdProcedure is the fully-qualified name of the ProjectApi's
	// CloseProjectById RPC.
	ProjectApiCloseProjectByIdProcedure = "/api.v0alpha.ProjectApi/CloseProjectById"
	// ProjectApiGetProjectByIdProcedure is the fully-qualified name of the ProjectApi's GetProjectById
	// RPC.
	ProjectApiGetProjectByIdProcedure = "/api.v0alpha.ProjectApi/GetProjectById"
	// ProjectApiCreateCannedMessageProcedure is the fully-qualified name of the ProjectApi's
	// CreateCannedMessage RPC.
	ProjectApiCreateCannedMessageProcedure = "/api.v0alpha.ProjectApi/CreateCannedMessage"
	// ProjectApiListCannedMessagesProcedure is the fully-qualified name of the ProjectApi's
	// ListCannedMessages RPC.
	ProjectApiListCannedMessagesProcedure = "/api.v0alpha.ProjectApi/ListCannedMessages"
	// ProjectApiUpdateCannedMessageProcedure is the fully-qualified name of the ProjectApi's
	// UpdateCannedMessage RPC.
	ProjectApiUpdateCannedMessageProcedure = "/api.v0alpha.ProjectApi/UpdateCannedMessage"
	// ProjectApiGetCannedMessageByIdProcedure is the fully-qualified name of the ProjectApi's
	// GetCannedMessageById RPC.
	ProjectApiGetCannedMessageByIdProcedure = "/api.v0alpha.ProjectApi/GetCannedMessageById"
	// ProjectApiDeleteCannedMessageByIdProcedure is the fully-qualified name of the ProjectApi's
	// DeleteCannedMessageById RPC.
	ProjectApiDeleteCannedMessageByIdProcedure = "/api.v0alpha.ProjectApi/DeleteCannedMessageById"
	// ProjectApiCreateCannedMessageGroupProcedure is the fully-qualified name of the ProjectApi's
	// CreateCannedMessageGroup RPC.
	ProjectApiCreateCannedMessageGroupProcedure = "/api.v0alpha.ProjectApi/CreateCannedMessageGroup"
	// ProjectApiListCannedMessageGroupsProcedure is the fully-qualified name of the ProjectApi's
	// ListCannedMessageGroups RPC.
	ProjectApiListCannedMessageGroupsProcedure = "/api.v0alpha.ProjectApi/ListCannedMessageGroups"
	// ProjectApiUpdateCannedMessageGroupProcedure is the fully-qualified name of the ProjectApi's
	// UpdateCannedMessageGroup RPC.
	ProjectApiUpdateCannedMessageGroupProcedure = "/api.v0alpha.ProjectApi/UpdateCannedMessageGroup"
	// ProjectApiDeleteCannedMessageGroupProcedure is the fully-qualified name of the ProjectApi's
	// DeleteCannedMessageGroup RPC.
	ProjectApiDeleteCannedMessageGroupProcedure = "/api.v0alpha.ProjectApi/DeleteCannedMessageGroup"
	// ProjectApiListCannedMessagesByGroupIdProcedure is the fully-qualified name of the ProjectApi's
	// ListCannedMessagesByGroupId RPC.
	ProjectApiListCannedMessagesByGroupIdProcedure = "/api.v0alpha.ProjectApi/ListCannedMessagesByGroupId"
	// ProjectApiGetCannedMessageGroupByIdProcedure is the fully-qualified name of the ProjectApi's
	// GetCannedMessageGroupById RPC.
	ProjectApiGetCannedMessageGroupByIdProcedure = "/api.v0alpha.ProjectApi/GetCannedMessageGroupById"
)

// ProjectApiClient is a client for the api.v0alpha.ProjectApi service.
type ProjectApiClient interface {
	// Create/Record project defined by CreateProjectReq message for a specified
	// name, description and status.
	// The method will return a Project message/entity that will
	// contain the newly created project_id value for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateProject(context.Context, *connect_go.Request[v0alpha.CreateProjectReq]) (*connect_go.Response[v0alpha.CreateProjectRes], error)
	// list projects for the current org
	// The method will return a list of Project messages/entities
	// Required permissions:
	//
	//	OMNI_BOSS
	ListProjects(context.Context, *connect_go.Request[v0alpha.ListProjectsReq]) (*connect_go.Response[v0alpha.ListProjectsRes], error)
	// Update project defined by EditProjectByIdReq message for a specified
	// project id.
	// The method will return a Project message/entity that will
	// contain the updated details for the project_id
	// Required permissions:
	//
	//	OMNI_BOSS
	EditProjectById(context.Context, *connect_go.Request[v0alpha.EditProjectByIdReq]) (*connect_go.Response[v0alpha.EditProjectByIdRes], error)
	// Closes project defined by CloseProjectByIdReq message for a specified
	// project id.
	// The method will stop all child campaigns and return a an empty response
	// if successful
	// Required permissions:
	//
	//	OMNI_BOSS
	CloseProjectById(context.Context, *connect_go.Request[v0alpha.CloseProjectByIdReq]) (*connect_go.Response[v0alpha.CloseProjectByIdRes], error)
	// Get project details defined by GetProjectByIdReq message for a specified
	// project id.
	// The method will return a GetProjectByIdRes message/entity that will
	// contain all the project details for the project_id
	// Required permissions:
	//
	//	OMNI_BOSS
	GetProjectById(context.Context, *connect_go.Request[v0alpha.GetProjectByIdReq]) (*connect_go.Response[v0alpha.Project], error)
	// Create/Record canned message defined by CreateCannedMessageReq message for a specified
	// name, description and message_body.
	// The method will return a CannedMessage message/entity that will
	// contain the newly created canned message details for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateCannedMessage(context.Context, *connect_go.Request[v0alpha.CreateCannedMessageReq]) (*connect_go.Response[v0alpha.CannedMessage], error)
	// list canned messages for the current org
	// The method will return a list of canned messages/entities
	// Required permissions:
	//
	//	OMNI_BOSS
	ListCannedMessages(context.Context, *connect_go.Request[v0alpha.ListCannedMessagesReq]) (*connect_go.Response[v0alpha.ListCannedMessagesRes], error)
	// Update canned message defined by UpdateCannedMessageReq message for a specified
	// name, description and message_body.
	// The method will return a CannedMessage message/entity that will
	// contain the updated canned message details for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateCannedMessage(context.Context, *connect_go.Request[v0alpha.UpdateCannedMessageReq]) (*connect_go.Response[v0alpha.CannedMessage], error)
	// Get canned message details for the canned_message_id
	// The method will return an canned message/entity
	// Required permissions:
	//
	//	OMNI_BOSS
	GetCannedMessageById(context.Context, *connect_go.Request[v0alpha.GetCannedMessageByIdReq]) (*connect_go.Response[v0alpha.CannedMessageWithGroup], error)
	// Delete canned message details for the canned_message_id
	// The method will delete an canned message/entity
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteCannedMessageById(context.Context, *connect_go.Request[v0alpha.DeleteCannedMessageByIdReq]) (*connect_go.Response[v0alpha.DeleteCannedMessageByIdRes], error)
	// Create/Record canned message group defined by CreateCannedMessageGroup Req message for a specified
	// name and description.
	// The method will return a CannedMessageGroup message/entity that will
	// contain the newly created canned message group details for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateCannedMessageGroup(context.Context, *connect_go.Request[v0alpha.CreateCannedMessageGroupReq]) (*connect_go.Response[v0alpha.CannedMessageGroup], error)
	// list canned message groups for the current org
	// The method will return a list of canned message groups/entities
	// Required permissions:
	//
	//	OMNI_BOSS
	ListCannedMessageGroups(context.Context, *connect_go.Request[v0alpha.ListCannedMessageGroupsReq]) (*connect_go.Response[v0alpha.ListCannedMessageGroupsRes], error)
	// Update canned message group defined by UpdateCannedMessageGroupReq message for a specified
	// name and description.
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateCannedMessageGroup(context.Context, *connect_go.Request[v0alpha.UpdateCannedMessageGroupReq]) (*connect_go.Response[v0alpha.UpdateCannedMessageGroupRes], error)
	// Delete canned message group and all the related messages for the canned_message_group_id
	// The method will delete an canned message group/entity
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteCannedMessageGroup(context.Context, *connect_go.Request[v0alpha.DeleteCannedMessageGroupReq]) (*connect_go.Response[v0alpha.DeleteCannedMessageGroupRes], error)
	// list canned messages for the group
	// The method will return a list of canned messages/entities
	// Required permissions:
	//
	//	OMNI_BOSS
	ListCannedMessagesByGroupId(context.Context, *connect_go.Request[v0alpha.ListCannedMessagesByGroupIdReq]) (*connect_go.Response[v0alpha.ListCannedMessagesByGroupIdRes], error)
	// Get canned message group details for the canned_message_group_id
	// The method will return an canned message group/entity
	// Required permissions:
	//
	//	OMNI_BOSS
	GetCannedMessageGroupById(context.Context, *connect_go.Request[v0alpha.GetCannedMessageGroupByIdReq]) (*connect_go.Response[v0alpha.CannedMessageGroup], error)
}

// NewProjectApiClient constructs a client for the api.v0alpha.ProjectApi service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProjectApiClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ProjectApiClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &projectApiClient{
		createProject: connect_go.NewClient[v0alpha.CreateProjectReq, v0alpha.CreateProjectRes](
			httpClient,
			baseURL+ProjectApiCreateProjectProcedure,
			opts...,
		),
		listProjects: connect_go.NewClient[v0alpha.ListProjectsReq, v0alpha.ListProjectsRes](
			httpClient,
			baseURL+ProjectApiListProjectsProcedure,
			opts...,
		),
		editProjectById: connect_go.NewClient[v0alpha.EditProjectByIdReq, v0alpha.EditProjectByIdRes](
			httpClient,
			baseURL+ProjectApiEditProjectByIdProcedure,
			opts...,
		),
		closeProjectById: connect_go.NewClient[v0alpha.CloseProjectByIdReq, v0alpha.CloseProjectByIdRes](
			httpClient,
			baseURL+ProjectApiCloseProjectByIdProcedure,
			opts...,
		),
		getProjectById: connect_go.NewClient[v0alpha.GetProjectByIdReq, v0alpha.Project](
			httpClient,
			baseURL+ProjectApiGetProjectByIdProcedure,
			opts...,
		),
		createCannedMessage: connect_go.NewClient[v0alpha.CreateCannedMessageReq, v0alpha.CannedMessage](
			httpClient,
			baseURL+ProjectApiCreateCannedMessageProcedure,
			opts...,
		),
		listCannedMessages: connect_go.NewClient[v0alpha.ListCannedMessagesReq, v0alpha.ListCannedMessagesRes](
			httpClient,
			baseURL+ProjectApiListCannedMessagesProcedure,
			opts...,
		),
		updateCannedMessage: connect_go.NewClient[v0alpha.UpdateCannedMessageReq, v0alpha.CannedMessage](
			httpClient,
			baseURL+ProjectApiUpdateCannedMessageProcedure,
			opts...,
		),
		getCannedMessageById: connect_go.NewClient[v0alpha.GetCannedMessageByIdReq, v0alpha.CannedMessageWithGroup](
			httpClient,
			baseURL+ProjectApiGetCannedMessageByIdProcedure,
			opts...,
		),
		deleteCannedMessageById: connect_go.NewClient[v0alpha.DeleteCannedMessageByIdReq, v0alpha.DeleteCannedMessageByIdRes](
			httpClient,
			baseURL+ProjectApiDeleteCannedMessageByIdProcedure,
			opts...,
		),
		createCannedMessageGroup: connect_go.NewClient[v0alpha.CreateCannedMessageGroupReq, v0alpha.CannedMessageGroup](
			httpClient,
			baseURL+ProjectApiCreateCannedMessageGroupProcedure,
			opts...,
		),
		listCannedMessageGroups: connect_go.NewClient[v0alpha.ListCannedMessageGroupsReq, v0alpha.ListCannedMessageGroupsRes](
			httpClient,
			baseURL+ProjectApiListCannedMessageGroupsProcedure,
			opts...,
		),
		updateCannedMessageGroup: connect_go.NewClient[v0alpha.UpdateCannedMessageGroupReq, v0alpha.UpdateCannedMessageGroupRes](
			httpClient,
			baseURL+ProjectApiUpdateCannedMessageGroupProcedure,
			opts...,
		),
		deleteCannedMessageGroup: connect_go.NewClient[v0alpha.DeleteCannedMessageGroupReq, v0alpha.DeleteCannedMessageGroupRes](
			httpClient,
			baseURL+ProjectApiDeleteCannedMessageGroupProcedure,
			opts...,
		),
		listCannedMessagesByGroupId: connect_go.NewClient[v0alpha.ListCannedMessagesByGroupIdReq, v0alpha.ListCannedMessagesByGroupIdRes](
			httpClient,
			baseURL+ProjectApiListCannedMessagesByGroupIdProcedure,
			opts...,
		),
		getCannedMessageGroupById: connect_go.NewClient[v0alpha.GetCannedMessageGroupByIdReq, v0alpha.CannedMessageGroup](
			httpClient,
			baseURL+ProjectApiGetCannedMessageGroupByIdProcedure,
			opts...,
		),
	}
}

// projectApiClient implements ProjectApiClient.
type projectApiClient struct {
	createProject               *connect_go.Client[v0alpha.CreateProjectReq, v0alpha.CreateProjectRes]
	listProjects                *connect_go.Client[v0alpha.ListProjectsReq, v0alpha.ListProjectsRes]
	editProjectById             *connect_go.Client[v0alpha.EditProjectByIdReq, v0alpha.EditProjectByIdRes]
	closeProjectById            *connect_go.Client[v0alpha.CloseProjectByIdReq, v0alpha.CloseProjectByIdRes]
	getProjectById              *connect_go.Client[v0alpha.GetProjectByIdReq, v0alpha.Project]
	createCannedMessage         *connect_go.Client[v0alpha.CreateCannedMessageReq, v0alpha.CannedMessage]
	listCannedMessages          *connect_go.Client[v0alpha.ListCannedMessagesReq, v0alpha.ListCannedMessagesRes]
	updateCannedMessage         *connect_go.Client[v0alpha.UpdateCannedMessageReq, v0alpha.CannedMessage]
	getCannedMessageById        *connect_go.Client[v0alpha.GetCannedMessageByIdReq, v0alpha.CannedMessageWithGroup]
	deleteCannedMessageById     *connect_go.Client[v0alpha.DeleteCannedMessageByIdReq, v0alpha.DeleteCannedMessageByIdRes]
	createCannedMessageGroup    *connect_go.Client[v0alpha.CreateCannedMessageGroupReq, v0alpha.CannedMessageGroup]
	listCannedMessageGroups     *connect_go.Client[v0alpha.ListCannedMessageGroupsReq, v0alpha.ListCannedMessageGroupsRes]
	updateCannedMessageGroup    *connect_go.Client[v0alpha.UpdateCannedMessageGroupReq, v0alpha.UpdateCannedMessageGroupRes]
	deleteCannedMessageGroup    *connect_go.Client[v0alpha.DeleteCannedMessageGroupReq, v0alpha.DeleteCannedMessageGroupRes]
	listCannedMessagesByGroupId *connect_go.Client[v0alpha.ListCannedMessagesByGroupIdReq, v0alpha.ListCannedMessagesByGroupIdRes]
	getCannedMessageGroupById   *connect_go.Client[v0alpha.GetCannedMessageGroupByIdReq, v0alpha.CannedMessageGroup]
}

// CreateProject calls api.v0alpha.ProjectApi.CreateProject.
func (c *projectApiClient) CreateProject(ctx context.Context, req *connect_go.Request[v0alpha.CreateProjectReq]) (*connect_go.Response[v0alpha.CreateProjectRes], error) {
	return c.createProject.CallUnary(ctx, req)
}

// ListProjects calls api.v0alpha.ProjectApi.ListProjects.
func (c *projectApiClient) ListProjects(ctx context.Context, req *connect_go.Request[v0alpha.ListProjectsReq]) (*connect_go.Response[v0alpha.ListProjectsRes], error) {
	return c.listProjects.CallUnary(ctx, req)
}

// EditProjectById calls api.v0alpha.ProjectApi.EditProjectById.
func (c *projectApiClient) EditProjectById(ctx context.Context, req *connect_go.Request[v0alpha.EditProjectByIdReq]) (*connect_go.Response[v0alpha.EditProjectByIdRes], error) {
	return c.editProjectById.CallUnary(ctx, req)
}

// CloseProjectById calls api.v0alpha.ProjectApi.CloseProjectById.
func (c *projectApiClient) CloseProjectById(ctx context.Context, req *connect_go.Request[v0alpha.CloseProjectByIdReq]) (*connect_go.Response[v0alpha.CloseProjectByIdRes], error) {
	return c.closeProjectById.CallUnary(ctx, req)
}

// GetProjectById calls api.v0alpha.ProjectApi.GetProjectById.
func (c *projectApiClient) GetProjectById(ctx context.Context, req *connect_go.Request[v0alpha.GetProjectByIdReq]) (*connect_go.Response[v0alpha.Project], error) {
	return c.getProjectById.CallUnary(ctx, req)
}

// CreateCannedMessage calls api.v0alpha.ProjectApi.CreateCannedMessage.
func (c *projectApiClient) CreateCannedMessage(ctx context.Context, req *connect_go.Request[v0alpha.CreateCannedMessageReq]) (*connect_go.Response[v0alpha.CannedMessage], error) {
	return c.createCannedMessage.CallUnary(ctx, req)
}

// ListCannedMessages calls api.v0alpha.ProjectApi.ListCannedMessages.
func (c *projectApiClient) ListCannedMessages(ctx context.Context, req *connect_go.Request[v0alpha.ListCannedMessagesReq]) (*connect_go.Response[v0alpha.ListCannedMessagesRes], error) {
	return c.listCannedMessages.CallUnary(ctx, req)
}

// UpdateCannedMessage calls api.v0alpha.ProjectApi.UpdateCannedMessage.
func (c *projectApiClient) UpdateCannedMessage(ctx context.Context, req *connect_go.Request[v0alpha.UpdateCannedMessageReq]) (*connect_go.Response[v0alpha.CannedMessage], error) {
	return c.updateCannedMessage.CallUnary(ctx, req)
}

// GetCannedMessageById calls api.v0alpha.ProjectApi.GetCannedMessageById.
func (c *projectApiClient) GetCannedMessageById(ctx context.Context, req *connect_go.Request[v0alpha.GetCannedMessageByIdReq]) (*connect_go.Response[v0alpha.CannedMessageWithGroup], error) {
	return c.getCannedMessageById.CallUnary(ctx, req)
}

// DeleteCannedMessageById calls api.v0alpha.ProjectApi.DeleteCannedMessageById.
func (c *projectApiClient) DeleteCannedMessageById(ctx context.Context, req *connect_go.Request[v0alpha.DeleteCannedMessageByIdReq]) (*connect_go.Response[v0alpha.DeleteCannedMessageByIdRes], error) {
	return c.deleteCannedMessageById.CallUnary(ctx, req)
}

// CreateCannedMessageGroup calls api.v0alpha.ProjectApi.CreateCannedMessageGroup.
func (c *projectApiClient) CreateCannedMessageGroup(ctx context.Context, req *connect_go.Request[v0alpha.CreateCannedMessageGroupReq]) (*connect_go.Response[v0alpha.CannedMessageGroup], error) {
	return c.createCannedMessageGroup.CallUnary(ctx, req)
}

// ListCannedMessageGroups calls api.v0alpha.ProjectApi.ListCannedMessageGroups.
func (c *projectApiClient) ListCannedMessageGroups(ctx context.Context, req *connect_go.Request[v0alpha.ListCannedMessageGroupsReq]) (*connect_go.Response[v0alpha.ListCannedMessageGroupsRes], error) {
	return c.listCannedMessageGroups.CallUnary(ctx, req)
}

// UpdateCannedMessageGroup calls api.v0alpha.ProjectApi.UpdateCannedMessageGroup.
func (c *projectApiClient) UpdateCannedMessageGroup(ctx context.Context, req *connect_go.Request[v0alpha.UpdateCannedMessageGroupReq]) (*connect_go.Response[v0alpha.UpdateCannedMessageGroupRes], error) {
	return c.updateCannedMessageGroup.CallUnary(ctx, req)
}

// DeleteCannedMessageGroup calls api.v0alpha.ProjectApi.DeleteCannedMessageGroup.
func (c *projectApiClient) DeleteCannedMessageGroup(ctx context.Context, req *connect_go.Request[v0alpha.DeleteCannedMessageGroupReq]) (*connect_go.Response[v0alpha.DeleteCannedMessageGroupRes], error) {
	return c.deleteCannedMessageGroup.CallUnary(ctx, req)
}

// ListCannedMessagesByGroupId calls api.v0alpha.ProjectApi.ListCannedMessagesByGroupId.
func (c *projectApiClient) ListCannedMessagesByGroupId(ctx context.Context, req *connect_go.Request[v0alpha.ListCannedMessagesByGroupIdReq]) (*connect_go.Response[v0alpha.ListCannedMessagesByGroupIdRes], error) {
	return c.listCannedMessagesByGroupId.CallUnary(ctx, req)
}

// GetCannedMessageGroupById calls api.v0alpha.ProjectApi.GetCannedMessageGroupById.
func (c *projectApiClient) GetCannedMessageGroupById(ctx context.Context, req *connect_go.Request[v0alpha.GetCannedMessageGroupByIdReq]) (*connect_go.Response[v0alpha.CannedMessageGroup], error) {
	return c.getCannedMessageGroupById.CallUnary(ctx, req)
}

// ProjectApiHandler is an implementation of the api.v0alpha.ProjectApi service.
type ProjectApiHandler interface {
	// Create/Record project defined by CreateProjectReq message for a specified
	// name, description and status.
	// The method will return a Project message/entity that will
	// contain the newly created project_id value for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateProject(context.Context, *connect_go.Request[v0alpha.CreateProjectReq]) (*connect_go.Response[v0alpha.CreateProjectRes], error)
	// list projects for the current org
	// The method will return a list of Project messages/entities
	// Required permissions:
	//
	//	OMNI_BOSS
	ListProjects(context.Context, *connect_go.Request[v0alpha.ListProjectsReq]) (*connect_go.Response[v0alpha.ListProjectsRes], error)
	// Update project defined by EditProjectByIdReq message for a specified
	// project id.
	// The method will return a Project message/entity that will
	// contain the updated details for the project_id
	// Required permissions:
	//
	//	OMNI_BOSS
	EditProjectById(context.Context, *connect_go.Request[v0alpha.EditProjectByIdReq]) (*connect_go.Response[v0alpha.EditProjectByIdRes], error)
	// Closes project defined by CloseProjectByIdReq message for a specified
	// project id.
	// The method will stop all child campaigns and return a an empty response
	// if successful
	// Required permissions:
	//
	//	OMNI_BOSS
	CloseProjectById(context.Context, *connect_go.Request[v0alpha.CloseProjectByIdReq]) (*connect_go.Response[v0alpha.CloseProjectByIdRes], error)
	// Get project details defined by GetProjectByIdReq message for a specified
	// project id.
	// The method will return a GetProjectByIdRes message/entity that will
	// contain all the project details for the project_id
	// Required permissions:
	//
	//	OMNI_BOSS
	GetProjectById(context.Context, *connect_go.Request[v0alpha.GetProjectByIdReq]) (*connect_go.Response[v0alpha.Project], error)
	// Create/Record canned message defined by CreateCannedMessageReq message for a specified
	// name, description and message_body.
	// The method will return a CannedMessage message/entity that will
	// contain the newly created canned message details for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateCannedMessage(context.Context, *connect_go.Request[v0alpha.CreateCannedMessageReq]) (*connect_go.Response[v0alpha.CannedMessage], error)
	// list canned messages for the current org
	// The method will return a list of canned messages/entities
	// Required permissions:
	//
	//	OMNI_BOSS
	ListCannedMessages(context.Context, *connect_go.Request[v0alpha.ListCannedMessagesReq]) (*connect_go.Response[v0alpha.ListCannedMessagesRes], error)
	// Update canned message defined by UpdateCannedMessageReq message for a specified
	// name, description and message_body.
	// The method will return a CannedMessage message/entity that will
	// contain the updated canned message details for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateCannedMessage(context.Context, *connect_go.Request[v0alpha.UpdateCannedMessageReq]) (*connect_go.Response[v0alpha.CannedMessage], error)
	// Get canned message details for the canned_message_id
	// The method will return an canned message/entity
	// Required permissions:
	//
	//	OMNI_BOSS
	GetCannedMessageById(context.Context, *connect_go.Request[v0alpha.GetCannedMessageByIdReq]) (*connect_go.Response[v0alpha.CannedMessageWithGroup], error)
	// Delete canned message details for the canned_message_id
	// The method will delete an canned message/entity
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteCannedMessageById(context.Context, *connect_go.Request[v0alpha.DeleteCannedMessageByIdReq]) (*connect_go.Response[v0alpha.DeleteCannedMessageByIdRes], error)
	// Create/Record canned message group defined by CreateCannedMessageGroup Req message for a specified
	// name and description.
	// The method will return a CannedMessageGroup message/entity that will
	// contain the newly created canned message group details for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateCannedMessageGroup(context.Context, *connect_go.Request[v0alpha.CreateCannedMessageGroupReq]) (*connect_go.Response[v0alpha.CannedMessageGroup], error)
	// list canned message groups for the current org
	// The method will return a list of canned message groups/entities
	// Required permissions:
	//
	//	OMNI_BOSS
	ListCannedMessageGroups(context.Context, *connect_go.Request[v0alpha.ListCannedMessageGroupsReq]) (*connect_go.Response[v0alpha.ListCannedMessageGroupsRes], error)
	// Update canned message group defined by UpdateCannedMessageGroupReq message for a specified
	// name and description.
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateCannedMessageGroup(context.Context, *connect_go.Request[v0alpha.UpdateCannedMessageGroupReq]) (*connect_go.Response[v0alpha.UpdateCannedMessageGroupRes], error)
	// Delete canned message group and all the related messages for the canned_message_group_id
	// The method will delete an canned message group/entity
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteCannedMessageGroup(context.Context, *connect_go.Request[v0alpha.DeleteCannedMessageGroupReq]) (*connect_go.Response[v0alpha.DeleteCannedMessageGroupRes], error)
	// list canned messages for the group
	// The method will return a list of canned messages/entities
	// Required permissions:
	//
	//	OMNI_BOSS
	ListCannedMessagesByGroupId(context.Context, *connect_go.Request[v0alpha.ListCannedMessagesByGroupIdReq]) (*connect_go.Response[v0alpha.ListCannedMessagesByGroupIdRes], error)
	// Get canned message group details for the canned_message_group_id
	// The method will return an canned message group/entity
	// Required permissions:
	//
	//	OMNI_BOSS
	GetCannedMessageGroupById(context.Context, *connect_go.Request[v0alpha.GetCannedMessageGroupByIdReq]) (*connect_go.Response[v0alpha.CannedMessageGroup], error)
}

// NewProjectApiHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProjectApiHandler(svc ProjectApiHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(ProjectApiCreateProjectProcedure, connect_go.NewUnaryHandler(
		ProjectApiCreateProjectProcedure,
		svc.CreateProject,
		opts...,
	))
	mux.Handle(ProjectApiListProjectsProcedure, connect_go.NewUnaryHandler(
		ProjectApiListProjectsProcedure,
		svc.ListProjects,
		opts...,
	))
	mux.Handle(ProjectApiEditProjectByIdProcedure, connect_go.NewUnaryHandler(
		ProjectApiEditProjectByIdProcedure,
		svc.EditProjectById,
		opts...,
	))
	mux.Handle(ProjectApiCloseProjectByIdProcedure, connect_go.NewUnaryHandler(
		ProjectApiCloseProjectByIdProcedure,
		svc.CloseProjectById,
		opts...,
	))
	mux.Handle(ProjectApiGetProjectByIdProcedure, connect_go.NewUnaryHandler(
		ProjectApiGetProjectByIdProcedure,
		svc.GetProjectById,
		opts...,
	))
	mux.Handle(ProjectApiCreateCannedMessageProcedure, connect_go.NewUnaryHandler(
		ProjectApiCreateCannedMessageProcedure,
		svc.CreateCannedMessage,
		opts...,
	))
	mux.Handle(ProjectApiListCannedMessagesProcedure, connect_go.NewUnaryHandler(
		ProjectApiListCannedMessagesProcedure,
		svc.ListCannedMessages,
		opts...,
	))
	mux.Handle(ProjectApiUpdateCannedMessageProcedure, connect_go.NewUnaryHandler(
		ProjectApiUpdateCannedMessageProcedure,
		svc.UpdateCannedMessage,
		opts...,
	))
	mux.Handle(ProjectApiGetCannedMessageByIdProcedure, connect_go.NewUnaryHandler(
		ProjectApiGetCannedMessageByIdProcedure,
		svc.GetCannedMessageById,
		opts...,
	))
	mux.Handle(ProjectApiDeleteCannedMessageByIdProcedure, connect_go.NewUnaryHandler(
		ProjectApiDeleteCannedMessageByIdProcedure,
		svc.DeleteCannedMessageById,
		opts...,
	))
	mux.Handle(ProjectApiCreateCannedMessageGroupProcedure, connect_go.NewUnaryHandler(
		ProjectApiCreateCannedMessageGroupProcedure,
		svc.CreateCannedMessageGroup,
		opts...,
	))
	mux.Handle(ProjectApiListCannedMessageGroupsProcedure, connect_go.NewUnaryHandler(
		ProjectApiListCannedMessageGroupsProcedure,
		svc.ListCannedMessageGroups,
		opts...,
	))
	mux.Handle(ProjectApiUpdateCannedMessageGroupProcedure, connect_go.NewUnaryHandler(
		ProjectApiUpdateCannedMessageGroupProcedure,
		svc.UpdateCannedMessageGroup,
		opts...,
	))
	mux.Handle(ProjectApiDeleteCannedMessageGroupProcedure, connect_go.NewUnaryHandler(
		ProjectApiDeleteCannedMessageGroupProcedure,
		svc.DeleteCannedMessageGroup,
		opts...,
	))
	mux.Handle(ProjectApiListCannedMessagesByGroupIdProcedure, connect_go.NewUnaryHandler(
		ProjectApiListCannedMessagesByGroupIdProcedure,
		svc.ListCannedMessagesByGroupId,
		opts...,
	))
	mux.Handle(ProjectApiGetCannedMessageGroupByIdProcedure, connect_go.NewUnaryHandler(
		ProjectApiGetCannedMessageGroupByIdProcedure,
		svc.GetCannedMessageGroupById,
		opts...,
	))
	return "/api.v0alpha.ProjectApi/", mux
}

// UnimplementedProjectApiHandler returns CodeUnimplemented from all methods.
type UnimplementedProjectApiHandler struct{}

func (UnimplementedProjectApiHandler) CreateProject(context.Context, *connect_go.Request[v0alpha.CreateProjectReq]) (*connect_go.Response[v0alpha.CreateProjectRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.ProjectApi.CreateProject is not implemented"))
}

func (UnimplementedProjectApiHandler) ListProjects(context.Context, *connect_go.Request[v0alpha.ListProjectsReq]) (*connect_go.Response[v0alpha.ListProjectsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.ProjectApi.ListProjects is not implemented"))
}

func (UnimplementedProjectApiHandler) EditProjectById(context.Context, *connect_go.Request[v0alpha.EditProjectByIdReq]) (*connect_go.Response[v0alpha.EditProjectByIdRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.ProjectApi.EditProjectById is not implemented"))
}

func (UnimplementedProjectApiHandler) CloseProjectById(context.Context, *connect_go.Request[v0alpha.CloseProjectByIdReq]) (*connect_go.Response[v0alpha.CloseProjectByIdRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.ProjectApi.CloseProjectById is not implemented"))
}

func (UnimplementedProjectApiHandler) GetProjectById(context.Context, *connect_go.Request[v0alpha.GetProjectByIdReq]) (*connect_go.Response[v0alpha.Project], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.ProjectApi.GetProjectById is not implemented"))
}

func (UnimplementedProjectApiHandler) CreateCannedMessage(context.Context, *connect_go.Request[v0alpha.CreateCannedMessageReq]) (*connect_go.Response[v0alpha.CannedMessage], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.ProjectApi.CreateCannedMessage is not implemented"))
}

func (UnimplementedProjectApiHandler) ListCannedMessages(context.Context, *connect_go.Request[v0alpha.ListCannedMessagesReq]) (*connect_go.Response[v0alpha.ListCannedMessagesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.ProjectApi.ListCannedMessages is not implemented"))
}

func (UnimplementedProjectApiHandler) UpdateCannedMessage(context.Context, *connect_go.Request[v0alpha.UpdateCannedMessageReq]) (*connect_go.Response[v0alpha.CannedMessage], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.ProjectApi.UpdateCannedMessage is not implemented"))
}

func (UnimplementedProjectApiHandler) GetCannedMessageById(context.Context, *connect_go.Request[v0alpha.GetCannedMessageByIdReq]) (*connect_go.Response[v0alpha.CannedMessageWithGroup], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.ProjectApi.GetCannedMessageById is not implemented"))
}

func (UnimplementedProjectApiHandler) DeleteCannedMessageById(context.Context, *connect_go.Request[v0alpha.DeleteCannedMessageByIdReq]) (*connect_go.Response[v0alpha.DeleteCannedMessageByIdRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.ProjectApi.DeleteCannedMessageById is not implemented"))
}

func (UnimplementedProjectApiHandler) CreateCannedMessageGroup(context.Context, *connect_go.Request[v0alpha.CreateCannedMessageGroupReq]) (*connect_go.Response[v0alpha.CannedMessageGroup], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.ProjectApi.CreateCannedMessageGroup is not implemented"))
}

func (UnimplementedProjectApiHandler) ListCannedMessageGroups(context.Context, *connect_go.Request[v0alpha.ListCannedMessageGroupsReq]) (*connect_go.Response[v0alpha.ListCannedMessageGroupsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.ProjectApi.ListCannedMessageGroups is not implemented"))
}

func (UnimplementedProjectApiHandler) UpdateCannedMessageGroup(context.Context, *connect_go.Request[v0alpha.UpdateCannedMessageGroupReq]) (*connect_go.Response[v0alpha.UpdateCannedMessageGroupRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.ProjectApi.UpdateCannedMessageGroup is not implemented"))
}

func (UnimplementedProjectApiHandler) DeleteCannedMessageGroup(context.Context, *connect_go.Request[v0alpha.DeleteCannedMessageGroupReq]) (*connect_go.Response[v0alpha.DeleteCannedMessageGroupRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.ProjectApi.DeleteCannedMessageGroup is not implemented"))
}

func (UnimplementedProjectApiHandler) ListCannedMessagesByGroupId(context.Context, *connect_go.Request[v0alpha.ListCannedMessagesByGroupIdReq]) (*connect_go.Response[v0alpha.ListCannedMessagesByGroupIdRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.ProjectApi.ListCannedMessagesByGroupId is not implemented"))
}

func (UnimplementedProjectApiHandler) GetCannedMessageGroupById(context.Context, *connect_go.Request[v0alpha.GetCannedMessageGroupByIdReq]) (*connect_go.Response[v0alpha.CannedMessageGroup], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.ProjectApi.GetCannedMessageGroupById is not implemented"))
}
