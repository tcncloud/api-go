// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v0alpha/ana.proto

package v0alphaconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v0alpha "github.com/tcncloud/api-go/api/v0alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AnaName is the fully-qualified name of the Ana service.
	AnaName = "api.v0alpha.Ana"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AnaGetSpecifiedVisualizationsProcedure is the fully-qualified name of the Ana's
	// GetSpecifiedVisualizations RPC.
	AnaGetSpecifiedVisualizationsProcedure = "/api.v0alpha.Ana/GetSpecifiedVisualizations"
	// AnaRegisterAccountProcedure is the fully-qualified name of the Ana's RegisterAccount RPC.
	AnaRegisterAccountProcedure = "/api.v0alpha.Ana/RegisterAccount"
	// AnaSetWeeksProcedure is the fully-qualified name of the Ana's SetWeeks RPC.
	AnaSetWeeksProcedure = "/api.v0alpha.Ana/SetWeeks"
	// AnaSetDefaultTimeFilterProcedure is the fully-qualified name of the Ana's SetDefaultTimeFilter
	// RPC.
	AnaSetDefaultTimeFilterProcedure = "/api.v0alpha.Ana/SetDefaultTimeFilter"
	// AnaSetDefaultDashboardProcedure is the fully-qualified name of the Ana's SetDefaultDashboard RPC.
	AnaSetDefaultDashboardProcedure = "/api.v0alpha.Ana/SetDefaultDashboard"
	// AnaGetAccountProcedure is the fully-qualified name of the Ana's GetAccount RPC.
	AnaGetAccountProcedure = "/api.v0alpha.Ana/GetAccount"
	// AnaGetSpecifiedAccountProcedure is the fully-qualified name of the Ana's GetSpecifiedAccount RPC.
	AnaGetSpecifiedAccountProcedure = "/api.v0alpha.Ana/GetSpecifiedAccount"
	// AnaGetAuthorizedAnalyticsLinkProcedure is the fully-qualified name of the Ana's
	// GetAuthorizedAnalyticsLink RPC.
	AnaGetAuthorizedAnalyticsLinkProcedure = "/api.v0alpha.Ana/GetAuthorizedAnalyticsLink"
	// AnaGenerateMonthlyBillingProcedure is the fully-qualified name of the Ana's
	// GenerateMonthlyBilling RPC.
	AnaGenerateMonthlyBillingProcedure = "/api.v0alpha.Ana/GenerateMonthlyBilling"
	// AnaGetTimeZoneProcedure is the fully-qualified name of the Ana's GetTimeZone RPC.
	AnaGetTimeZoneProcedure = "/api.v0alpha.Ana/GetTimeZone"
	// AnaSetTimeZoneProcedure is the fully-qualified name of the Ana's SetTimeZone RPC.
	AnaSetTimeZoneProcedure = "/api.v0alpha.Ana/SetTimeZone"
	// AnaCopyDashVizProcedure is the fully-qualified name of the Ana's CopyDashViz RPC.
	AnaCopyDashVizProcedure = "/api.v0alpha.Ana/CopyDashViz"
	// AnaGetSpecifiedBillingSummaryProcedure is the fully-qualified name of the Ana's
	// GetSpecifiedBillingSummary RPC.
	AnaGetSpecifiedBillingSummaryProcedure = "/api.v0alpha.Ana/GetSpecifiedBillingSummary"
	// AnaGetBillingSummaryProcedure is the fully-qualified name of the Ana's GetBillingSummary RPC.
	AnaGetBillingSummaryProcedure = "/api.v0alpha.Ana/GetBillingSummary"
	// AnaEnableCustomReportsProcedure is the fully-qualified name of the Ana's EnableCustomReports RPC.
	AnaEnableCustomReportsProcedure = "/api.v0alpha.Ana/EnableCustomReports"
	// AnaDisableCustomReportsProcedure is the fully-qualified name of the Ana's DisableCustomReports
	// RPC.
	AnaDisableCustomReportsProcedure = "/api.v0alpha.Ana/DisableCustomReports"
	// AnaMakeAdoptableProcedure is the fully-qualified name of the Ana's MakeAdoptable RPC.
	AnaMakeAdoptableProcedure = "/api.v0alpha.Ana/MakeAdoptable"
	// AnaMakeUnadoptableProcedure is the fully-qualified name of the Ana's MakeUnadoptable RPC.
	AnaMakeUnadoptableProcedure = "/api.v0alpha.Ana/MakeUnadoptable"
	// AnaAdoptAnaAccountProcedure is the fully-qualified name of the Ana's AdoptAnaAccount RPC.
	AnaAdoptAnaAccountProcedure = "/api.v0alpha.Ana/AdoptAnaAccount"
	// AnaDisownAnaAccountProcedure is the fully-qualified name of the Ana's DisownAnaAccount RPC.
	AnaDisownAnaAccountProcedure = "/api.v0alpha.Ana/DisownAnaAccount"
	// AnaGetAccessibleClientsProcedure is the fully-qualified name of the Ana's GetAccessibleClients
	// RPC.
	AnaGetAccessibleClientsProcedure = "/api.v0alpha.Ana/GetAccessibleClients"
	// AnaGetFamilyProcedure is the fully-qualified name of the Ana's GetFamily RPC.
	AnaGetFamilyProcedure = "/api.v0alpha.Ana/GetFamily"
	// AnaGetAllowedDataVisibilityProcedure is the fully-qualified name of the Ana's
	// GetAllowedDataVisibility RPC.
	AnaGetAllowedDataVisibilityProcedure = "/api.v0alpha.Ana/GetAllowedDataVisibility"
	// AnaGetCurrentDataVisibilityProcedure is the fully-qualified name of the Ana's
	// GetCurrentDataVisibility RPC.
	AnaGetCurrentDataVisibilityProcedure = "/api.v0alpha.Ana/GetCurrentDataVisibility"
	// AnaGetIndicesVisibilityProcedure is the fully-qualified name of the Ana's GetIndicesVisibility
	// RPC.
	AnaGetIndicesVisibilityProcedure = "/api.v0alpha.Ana/GetIndicesVisibility"
	// AnaGetAuditableDataVisibilityProcedure is the fully-qualified name of the Ana's
	// GetAuditableDataVisibility RPC.
	AnaGetAuditableDataVisibilityProcedure = "/api.v0alpha.Ana/GetAuditableDataVisibility"
	// AnaGetOrganizationNamesProcedure is the fully-qualified name of the Ana's GetOrganizationNames
	// RPC.
	AnaGetOrganizationNamesProcedure = "/api.v0alpha.Ana/GetOrganizationNames"
	// AnaGenerateVizDataByIdProcedure is the fully-qualified name of the Ana's GenerateVizDataById RPC.
	AnaGenerateVizDataByIdProcedure = "/api.v0alpha.Ana/GenerateVizDataById"
	// AnaGetClientStatusProcedure is the fully-qualified name of the Ana's GetClientStatus RPC.
	AnaGetClientStatusProcedure = "/api.v0alpha.Ana/GetClientStatus"
	// AnaReloadClientDataProcedure is the fully-qualified name of the Ana's ReloadClientData RPC.
	AnaReloadClientDataProcedure = "/api.v0alpha.Ana/ReloadClientData"
	// AnaListVisualizationsLegacyProcedure is the fully-qualified name of the Ana's
	// ListVisualizationsLegacy RPC.
	AnaListVisualizationsLegacyProcedure = "/api.v0alpha.Ana/ListVisualizationsLegacy"
)

// AnaClient is a client for the api.v0alpha.Ana service.
type AnaClient interface {
	// gets all visualizations for a specific client
	GetSpecifiedVisualizations(context.Context, *connect_go.Request[v0alpha.GetSpecifiedVisualizationsReq]) (*connect_go.Response[v0alpha.Visualizations], error)
	// Registers a new AnaAccoun based on org_id
	// The method will return the newly create AnaAccount
	// on the response message AnaAccount.
	// Required Permissions:
	//
	//	EDIT_ADMIN_CLIENT_PREFERENCES
	RegisterAccount(context.Context, *connect_go.Request[v0alpha.RegisterAccountReq]) (*connect_go.Response[v0alpha.AnaAccount], error)
	// sets the length of analytics history the client can view
	SetWeeks(context.Context, *connect_go.Request[v0alpha.SetWeeksReq]) (*connect_go.Response[v0alpha.SetWeeksRes], error)
	// set default time filter for given ana account
	// org.Permission_EDIT_CLIENT_PREFERENCES
	SetDefaultTimeFilter(context.Context, *connect_go.Request[v0alpha.SetDefaultTimeFilterReq]) (*connect_go.Response[v0alpha.SetDefaultTimeFilterRes], error)
	// sets the dashboard that is shown by default for neo
	// org.Permission_EDIT_CLIENT_PREFERENCES
	SetDefaultDashboard(context.Context, *connect_go.Request[v0alpha.SetDefaultDashboardReq]) (*connect_go.Response[v0alpha.SetDefaultDashboardRes], error)
	// gets account details for the client
	// org.Permission_VIEW_REPORTS
	GetAccount(context.Context, *connect_go.Request[v0alpha.GetAccountReq]) (*connect_go.Response[v0alpha.AnaAccount], error)
	// gets account details using the org_id provided
	GetSpecifiedAccount(context.Context, *connect_go.Request[v0alpha.GetSpecifiedAccountReq]) (*connect_go.Response[v0alpha.AnaAccount], error)
	// Gets an authorized url for the clients BI analytics page
	GetAuthorizedAnalyticsLink(context.Context, *connect_go.Request[v0alpha.GetAuthorizedAnalyticsLinkReq]) (*connect_go.Response[v0alpha.GetAuthorizedAnalyticsLinkRes], error)
	// creates and returns a url to download billing for the month provided or the previous month if none is provided
	// org.Permission_VIEW_BILLING
	GenerateMonthlyBilling(context.Context, *connect_go.Request[v0alpha.GenerateMonthlyBillingReq]) (*connect_go.Response[v0alpha.GenerateMonthlyBillingRes], error)
	// gets the ana_account timezone for the client
	// org.Permission_VIEW_REPORTS
	GetTimeZone(context.Context, *connect_go.Request[v0alpha.GetTimeZoneReq]) (*connect_go.Response[v0alpha.TimeZone], error)
	// updates the timezone for the account
	// org.Permission_VIEW_REPORTS
	SetTimeZone(context.Context, *connect_go.Request[v0alpha.SetTimeZoneReq]) (*connect_go.Response[v0alpha.SetTimeZoneRes], error)
	// copies the reports (dashboards legacy and visualizations legacy)
	// corresponding with the ids provided
	CopyDashViz(context.Context, *connect_go.Request[v0alpha.CopyDashVizReq]) (*connect_go.Response[v0alpha.CopyDashVizRes], error)
	// returns a summary of all billing factors for the specified client, whether client is pro, and which of those features contribute to making the client pro
	GetSpecifiedBillingSummary(context.Context, *connect_go.Request[v0alpha.GetSpecifiedBillingSummaryReq]) (*connect_go.Response[v0alpha.BillingSummary], error)
	// returns a summary of all billing factors for the client, whether client is
	// pro, and which of those features contribute to making the client pro
	GetBillingSummary(context.Context, *connect_go.Request[v0alpha.GetBillingSummaryReq]) (*connect_go.Response[v0alpha.BillingSummary], error)
	// enable custom report usage for the client
	// org.Permission_EDIT_CLIENT_PREFERENCES
	EnableCustomReports(context.Context, *connect_go.Request[v0alpha.SetCustomReportsEnabledReq]) (*connect_go.Response[v0alpha.SetCustomReportsEnabledRes], error)
	// disable custom report usage for the client
	// org.Permission_EDIT_CLIENT_PREFERENCES
	DisableCustomReports(context.Context, *connect_go.Request[v0alpha.SetCustomReportsEnabledReq]) (*connect_go.Response[v0alpha.SetCustomReportsEnabledRes], error)
	// allow the client to be adopted by another account
	// org.Permission_EDIT_CLIENT_PREFERENCES
	MakeAdoptable(context.Context, *connect_go.Request[v0alpha.MakeAdoptableReq]) (*connect_go.Response[v0alpha.MakeAdoptableRes], error)
	// disallow other accounts from adopting the client
	// org.Permission_EDIT_CLIENT_PREFERENCES
	MakeUnadoptable(context.Context, *connect_go.Request[v0alpha.MakeAdoptableReq]) (*connect_go.Response[v0alpha.MakeAdoptableRes], error)
	// allow the parent to view the data of the adoptable child
	AdoptAnaAccount(context.Context, *connect_go.Request[v0alpha.SetAnaAccountRelationReq]) (*connect_go.Response[v0alpha.SetAnaAccountRelationRes], error)
	// disallow the parent from viewing the data of the child
	DisownAnaAccount(context.Context, *connect_go.Request[v0alpha.SetAnaAccountRelationReq]) (*connect_go.Response[v0alpha.SetAnaAccountRelationRes], error)
	// gets all clients that can be viewed by the client including the client
	GetAccessibleClients(context.Context, *connect_go.Request[v0alpha.GetAccessibleClientsReq]) (*connect_go.Response[v0alpha.SimpleRelations], error)
	// gets all relations in which the client is involved grouped by whether the
	// client is the parent or child account
	GetFamily(context.Context, *connect_go.Request[v0alpha.GetFamilyReq]) (*connect_go.Response[v0alpha.Family], error)
	// gets the client's data visibility as defined in the database (source of
	// truth); internal use only
	GetAllowedDataVisibility(context.Context, *connect_go.Request[v0alpha.GetVisibilityReq]) (*connect_go.Response[v0alpha.DataVisibility], error)
	// gets the client's data visibility as is evident from the elasticsearch
	// indices structure; internal use only
	GetCurrentDataVisibility(context.Context, *connect_go.Request[v0alpha.GetVisibilityReq]) (*connect_go.Response[v0alpha.DataVisibility], error)
	// gets a visibility summary from the perspective of the elasticsearch
	// indices; internal use only
	GetIndicesVisibility(context.Context, *connect_go.Request[v0alpha.GetVisibilityReq]) (*connect_go.Response[v0alpha.IndicesVisibility], error)
	// gets the client's data visibility as exists in the elasticsearch data;
	// internal use only
	GetAuditableDataVisibility(context.Context, *connect_go.Request[v0alpha.GetVisibilityReq]) (*connect_go.Response[v0alpha.DataVisibility], error)
	// gets a map of client sids to organization names
	GetOrganizationNames(context.Context, *connect_go.Request[v0alpha.GetOrganizationNamesReq]) (*connect_go.Response[v0alpha.GetOrganizationNamesRes], error)
	// generate visualization data for the id
	GenerateVizDataById(context.Context, *connect_go.Request[v0alpha.GenerateVizDataByIdReq]) (*connect_go.Response[v0alpha.GenerateVizDataByIdRes], error)
	// Gets client's data status
	// Data status is the status of calls loaded in elasticsearch
	// against all calls in the database that are within the clients weeks of data setting
	// This method requires a client sid
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	GetClientStatus(context.Context, *connect_go.Request[v0alpha.GetClientStatusReq]) (*connect_go.Response[v0alpha.GetClientStatusResp], error)
	// Reloads client's data
	// This loads calls from the database into elasticsearch
	// This method requires a client sid
	// Required permissions:
	//
	//	WIP - DEV_OPS
	ReloadClientData(context.Context, *connect_go.Request[v0alpha.ReloadClientDataReq]) (*connect_go.Response[v0alpha.ReloadClientDataResp], error)
	// list all clients visualizations id and title
	ListVisualizationsLegacy(context.Context, *connect_go.Request[v0alpha.ListVisualizationsLegacyReq]) (*connect_go.Response[v0alpha.ListVisualizationsLegacyRes], error)
}

// NewAnaClient constructs a client for the api.v0alpha.Ana service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAnaClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AnaClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &anaClient{
		getSpecifiedVisualizations: connect_go.NewClient[v0alpha.GetSpecifiedVisualizationsReq, v0alpha.Visualizations](
			httpClient,
			baseURL+AnaGetSpecifiedVisualizationsProcedure,
			opts...,
		),
		registerAccount: connect_go.NewClient[v0alpha.RegisterAccountReq, v0alpha.AnaAccount](
			httpClient,
			baseURL+AnaRegisterAccountProcedure,
			opts...,
		),
		setWeeks: connect_go.NewClient[v0alpha.SetWeeksReq, v0alpha.SetWeeksRes](
			httpClient,
			baseURL+AnaSetWeeksProcedure,
			opts...,
		),
		setDefaultTimeFilter: connect_go.NewClient[v0alpha.SetDefaultTimeFilterReq, v0alpha.SetDefaultTimeFilterRes](
			httpClient,
			baseURL+AnaSetDefaultTimeFilterProcedure,
			opts...,
		),
		setDefaultDashboard: connect_go.NewClient[v0alpha.SetDefaultDashboardReq, v0alpha.SetDefaultDashboardRes](
			httpClient,
			baseURL+AnaSetDefaultDashboardProcedure,
			opts...,
		),
		getAccount: connect_go.NewClient[v0alpha.GetAccountReq, v0alpha.AnaAccount](
			httpClient,
			baseURL+AnaGetAccountProcedure,
			opts...,
		),
		getSpecifiedAccount: connect_go.NewClient[v0alpha.GetSpecifiedAccountReq, v0alpha.AnaAccount](
			httpClient,
			baseURL+AnaGetSpecifiedAccountProcedure,
			opts...,
		),
		getAuthorizedAnalyticsLink: connect_go.NewClient[v0alpha.GetAuthorizedAnalyticsLinkReq, v0alpha.GetAuthorizedAnalyticsLinkRes](
			httpClient,
			baseURL+AnaGetAuthorizedAnalyticsLinkProcedure,
			opts...,
		),
		generateMonthlyBilling: connect_go.NewClient[v0alpha.GenerateMonthlyBillingReq, v0alpha.GenerateMonthlyBillingRes](
			httpClient,
			baseURL+AnaGenerateMonthlyBillingProcedure,
			opts...,
		),
		getTimeZone: connect_go.NewClient[v0alpha.GetTimeZoneReq, v0alpha.TimeZone](
			httpClient,
			baseURL+AnaGetTimeZoneProcedure,
			opts...,
		),
		setTimeZone: connect_go.NewClient[v0alpha.SetTimeZoneReq, v0alpha.SetTimeZoneRes](
			httpClient,
			baseURL+AnaSetTimeZoneProcedure,
			opts...,
		),
		copyDashViz: connect_go.NewClient[v0alpha.CopyDashVizReq, v0alpha.CopyDashVizRes](
			httpClient,
			baseURL+AnaCopyDashVizProcedure,
			opts...,
		),
		getSpecifiedBillingSummary: connect_go.NewClient[v0alpha.GetSpecifiedBillingSummaryReq, v0alpha.BillingSummary](
			httpClient,
			baseURL+AnaGetSpecifiedBillingSummaryProcedure,
			opts...,
		),
		getBillingSummary: connect_go.NewClient[v0alpha.GetBillingSummaryReq, v0alpha.BillingSummary](
			httpClient,
			baseURL+AnaGetBillingSummaryProcedure,
			opts...,
		),
		enableCustomReports: connect_go.NewClient[v0alpha.SetCustomReportsEnabledReq, v0alpha.SetCustomReportsEnabledRes](
			httpClient,
			baseURL+AnaEnableCustomReportsProcedure,
			opts...,
		),
		disableCustomReports: connect_go.NewClient[v0alpha.SetCustomReportsEnabledReq, v0alpha.SetCustomReportsEnabledRes](
			httpClient,
			baseURL+AnaDisableCustomReportsProcedure,
			opts...,
		),
		makeAdoptable: connect_go.NewClient[v0alpha.MakeAdoptableReq, v0alpha.MakeAdoptableRes](
			httpClient,
			baseURL+AnaMakeAdoptableProcedure,
			opts...,
		),
		makeUnadoptable: connect_go.NewClient[v0alpha.MakeAdoptableReq, v0alpha.MakeAdoptableRes](
			httpClient,
			baseURL+AnaMakeUnadoptableProcedure,
			opts...,
		),
		adoptAnaAccount: connect_go.NewClient[v0alpha.SetAnaAccountRelationReq, v0alpha.SetAnaAccountRelationRes](
			httpClient,
			baseURL+AnaAdoptAnaAccountProcedure,
			opts...,
		),
		disownAnaAccount: connect_go.NewClient[v0alpha.SetAnaAccountRelationReq, v0alpha.SetAnaAccountRelationRes](
			httpClient,
			baseURL+AnaDisownAnaAccountProcedure,
			opts...,
		),
		getAccessibleClients: connect_go.NewClient[v0alpha.GetAccessibleClientsReq, v0alpha.SimpleRelations](
			httpClient,
			baseURL+AnaGetAccessibleClientsProcedure,
			opts...,
		),
		getFamily: connect_go.NewClient[v0alpha.GetFamilyReq, v0alpha.Family](
			httpClient,
			baseURL+AnaGetFamilyProcedure,
			opts...,
		),
		getAllowedDataVisibility: connect_go.NewClient[v0alpha.GetVisibilityReq, v0alpha.DataVisibility](
			httpClient,
			baseURL+AnaGetAllowedDataVisibilityProcedure,
			opts...,
		),
		getCurrentDataVisibility: connect_go.NewClient[v0alpha.GetVisibilityReq, v0alpha.DataVisibility](
			httpClient,
			baseURL+AnaGetCurrentDataVisibilityProcedure,
			opts...,
		),
		getIndicesVisibility: connect_go.NewClient[v0alpha.GetVisibilityReq, v0alpha.IndicesVisibility](
			httpClient,
			baseURL+AnaGetIndicesVisibilityProcedure,
			opts...,
		),
		getAuditableDataVisibility: connect_go.NewClient[v0alpha.GetVisibilityReq, v0alpha.DataVisibility](
			httpClient,
			baseURL+AnaGetAuditableDataVisibilityProcedure,
			opts...,
		),
		getOrganizationNames: connect_go.NewClient[v0alpha.GetOrganizationNamesReq, v0alpha.GetOrganizationNamesRes](
			httpClient,
			baseURL+AnaGetOrganizationNamesProcedure,
			opts...,
		),
		generateVizDataById: connect_go.NewClient[v0alpha.GenerateVizDataByIdReq, v0alpha.GenerateVizDataByIdRes](
			httpClient,
			baseURL+AnaGenerateVizDataByIdProcedure,
			opts...,
		),
		getClientStatus: connect_go.NewClient[v0alpha.GetClientStatusReq, v0alpha.GetClientStatusResp](
			httpClient,
			baseURL+AnaGetClientStatusProcedure,
			opts...,
		),
		reloadClientData: connect_go.NewClient[v0alpha.ReloadClientDataReq, v0alpha.ReloadClientDataResp](
			httpClient,
			baseURL+AnaReloadClientDataProcedure,
			opts...,
		),
		listVisualizationsLegacy: connect_go.NewClient[v0alpha.ListVisualizationsLegacyReq, v0alpha.ListVisualizationsLegacyRes](
			httpClient,
			baseURL+AnaListVisualizationsLegacyProcedure,
			opts...,
		),
	}
}

// anaClient implements AnaClient.
type anaClient struct {
	getSpecifiedVisualizations *connect_go.Client[v0alpha.GetSpecifiedVisualizationsReq, v0alpha.Visualizations]
	registerAccount            *connect_go.Client[v0alpha.RegisterAccountReq, v0alpha.AnaAccount]
	setWeeks                   *connect_go.Client[v0alpha.SetWeeksReq, v0alpha.SetWeeksRes]
	setDefaultTimeFilter       *connect_go.Client[v0alpha.SetDefaultTimeFilterReq, v0alpha.SetDefaultTimeFilterRes]
	setDefaultDashboard        *connect_go.Client[v0alpha.SetDefaultDashboardReq, v0alpha.SetDefaultDashboardRes]
	getAccount                 *connect_go.Client[v0alpha.GetAccountReq, v0alpha.AnaAccount]
	getSpecifiedAccount        *connect_go.Client[v0alpha.GetSpecifiedAccountReq, v0alpha.AnaAccount]
	getAuthorizedAnalyticsLink *connect_go.Client[v0alpha.GetAuthorizedAnalyticsLinkReq, v0alpha.GetAuthorizedAnalyticsLinkRes]
	generateMonthlyBilling     *connect_go.Client[v0alpha.GenerateMonthlyBillingReq, v0alpha.GenerateMonthlyBillingRes]
	getTimeZone                *connect_go.Client[v0alpha.GetTimeZoneReq, v0alpha.TimeZone]
	setTimeZone                *connect_go.Client[v0alpha.SetTimeZoneReq, v0alpha.SetTimeZoneRes]
	copyDashViz                *connect_go.Client[v0alpha.CopyDashVizReq, v0alpha.CopyDashVizRes]
	getSpecifiedBillingSummary *connect_go.Client[v0alpha.GetSpecifiedBillingSummaryReq, v0alpha.BillingSummary]
	getBillingSummary          *connect_go.Client[v0alpha.GetBillingSummaryReq, v0alpha.BillingSummary]
	enableCustomReports        *connect_go.Client[v0alpha.SetCustomReportsEnabledReq, v0alpha.SetCustomReportsEnabledRes]
	disableCustomReports       *connect_go.Client[v0alpha.SetCustomReportsEnabledReq, v0alpha.SetCustomReportsEnabledRes]
	makeAdoptable              *connect_go.Client[v0alpha.MakeAdoptableReq, v0alpha.MakeAdoptableRes]
	makeUnadoptable            *connect_go.Client[v0alpha.MakeAdoptableReq, v0alpha.MakeAdoptableRes]
	adoptAnaAccount            *connect_go.Client[v0alpha.SetAnaAccountRelationReq, v0alpha.SetAnaAccountRelationRes]
	disownAnaAccount           *connect_go.Client[v0alpha.SetAnaAccountRelationReq, v0alpha.SetAnaAccountRelationRes]
	getAccessibleClients       *connect_go.Client[v0alpha.GetAccessibleClientsReq, v0alpha.SimpleRelations]
	getFamily                  *connect_go.Client[v0alpha.GetFamilyReq, v0alpha.Family]
	getAllowedDataVisibility   *connect_go.Client[v0alpha.GetVisibilityReq, v0alpha.DataVisibility]
	getCurrentDataVisibility   *connect_go.Client[v0alpha.GetVisibilityReq, v0alpha.DataVisibility]
	getIndicesVisibility       *connect_go.Client[v0alpha.GetVisibilityReq, v0alpha.IndicesVisibility]
	getAuditableDataVisibility *connect_go.Client[v0alpha.GetVisibilityReq, v0alpha.DataVisibility]
	getOrganizationNames       *connect_go.Client[v0alpha.GetOrganizationNamesReq, v0alpha.GetOrganizationNamesRes]
	generateVizDataById        *connect_go.Client[v0alpha.GenerateVizDataByIdReq, v0alpha.GenerateVizDataByIdRes]
	getClientStatus            *connect_go.Client[v0alpha.GetClientStatusReq, v0alpha.GetClientStatusResp]
	reloadClientData           *connect_go.Client[v0alpha.ReloadClientDataReq, v0alpha.ReloadClientDataResp]
	listVisualizationsLegacy   *connect_go.Client[v0alpha.ListVisualizationsLegacyReq, v0alpha.ListVisualizationsLegacyRes]
}

// GetSpecifiedVisualizations calls api.v0alpha.Ana.GetSpecifiedVisualizations.
func (c *anaClient) GetSpecifiedVisualizations(ctx context.Context, req *connect_go.Request[v0alpha.GetSpecifiedVisualizationsReq]) (*connect_go.Response[v0alpha.Visualizations], error) {
	return c.getSpecifiedVisualizations.CallUnary(ctx, req)
}

// RegisterAccount calls api.v0alpha.Ana.RegisterAccount.
func (c *anaClient) RegisterAccount(ctx context.Context, req *connect_go.Request[v0alpha.RegisterAccountReq]) (*connect_go.Response[v0alpha.AnaAccount], error) {
	return c.registerAccount.CallUnary(ctx, req)
}

// SetWeeks calls api.v0alpha.Ana.SetWeeks.
func (c *anaClient) SetWeeks(ctx context.Context, req *connect_go.Request[v0alpha.SetWeeksReq]) (*connect_go.Response[v0alpha.SetWeeksRes], error) {
	return c.setWeeks.CallUnary(ctx, req)
}

// SetDefaultTimeFilter calls api.v0alpha.Ana.SetDefaultTimeFilter.
func (c *anaClient) SetDefaultTimeFilter(ctx context.Context, req *connect_go.Request[v0alpha.SetDefaultTimeFilterReq]) (*connect_go.Response[v0alpha.SetDefaultTimeFilterRes], error) {
	return c.setDefaultTimeFilter.CallUnary(ctx, req)
}

// SetDefaultDashboard calls api.v0alpha.Ana.SetDefaultDashboard.
func (c *anaClient) SetDefaultDashboard(ctx context.Context, req *connect_go.Request[v0alpha.SetDefaultDashboardReq]) (*connect_go.Response[v0alpha.SetDefaultDashboardRes], error) {
	return c.setDefaultDashboard.CallUnary(ctx, req)
}

// GetAccount calls api.v0alpha.Ana.GetAccount.
func (c *anaClient) GetAccount(ctx context.Context, req *connect_go.Request[v0alpha.GetAccountReq]) (*connect_go.Response[v0alpha.AnaAccount], error) {
	return c.getAccount.CallUnary(ctx, req)
}

// GetSpecifiedAccount calls api.v0alpha.Ana.GetSpecifiedAccount.
func (c *anaClient) GetSpecifiedAccount(ctx context.Context, req *connect_go.Request[v0alpha.GetSpecifiedAccountReq]) (*connect_go.Response[v0alpha.AnaAccount], error) {
	return c.getSpecifiedAccount.CallUnary(ctx, req)
}

// GetAuthorizedAnalyticsLink calls api.v0alpha.Ana.GetAuthorizedAnalyticsLink.
func (c *anaClient) GetAuthorizedAnalyticsLink(ctx context.Context, req *connect_go.Request[v0alpha.GetAuthorizedAnalyticsLinkReq]) (*connect_go.Response[v0alpha.GetAuthorizedAnalyticsLinkRes], error) {
	return c.getAuthorizedAnalyticsLink.CallUnary(ctx, req)
}

// GenerateMonthlyBilling calls api.v0alpha.Ana.GenerateMonthlyBilling.
func (c *anaClient) GenerateMonthlyBilling(ctx context.Context, req *connect_go.Request[v0alpha.GenerateMonthlyBillingReq]) (*connect_go.Response[v0alpha.GenerateMonthlyBillingRes], error) {
	return c.generateMonthlyBilling.CallUnary(ctx, req)
}

// GetTimeZone calls api.v0alpha.Ana.GetTimeZone.
func (c *anaClient) GetTimeZone(ctx context.Context, req *connect_go.Request[v0alpha.GetTimeZoneReq]) (*connect_go.Response[v0alpha.TimeZone], error) {
	return c.getTimeZone.CallUnary(ctx, req)
}

// SetTimeZone calls api.v0alpha.Ana.SetTimeZone.
func (c *anaClient) SetTimeZone(ctx context.Context, req *connect_go.Request[v0alpha.SetTimeZoneReq]) (*connect_go.Response[v0alpha.SetTimeZoneRes], error) {
	return c.setTimeZone.CallUnary(ctx, req)
}

// CopyDashViz calls api.v0alpha.Ana.CopyDashViz.
func (c *anaClient) CopyDashViz(ctx context.Context, req *connect_go.Request[v0alpha.CopyDashVizReq]) (*connect_go.Response[v0alpha.CopyDashVizRes], error) {
	return c.copyDashViz.CallUnary(ctx, req)
}

// GetSpecifiedBillingSummary calls api.v0alpha.Ana.GetSpecifiedBillingSummary.
func (c *anaClient) GetSpecifiedBillingSummary(ctx context.Context, req *connect_go.Request[v0alpha.GetSpecifiedBillingSummaryReq]) (*connect_go.Response[v0alpha.BillingSummary], error) {
	return c.getSpecifiedBillingSummary.CallUnary(ctx, req)
}

// GetBillingSummary calls api.v0alpha.Ana.GetBillingSummary.
func (c *anaClient) GetBillingSummary(ctx context.Context, req *connect_go.Request[v0alpha.GetBillingSummaryReq]) (*connect_go.Response[v0alpha.BillingSummary], error) {
	return c.getBillingSummary.CallUnary(ctx, req)
}

// EnableCustomReports calls api.v0alpha.Ana.EnableCustomReports.
func (c *anaClient) EnableCustomReports(ctx context.Context, req *connect_go.Request[v0alpha.SetCustomReportsEnabledReq]) (*connect_go.Response[v0alpha.SetCustomReportsEnabledRes], error) {
	return c.enableCustomReports.CallUnary(ctx, req)
}

// DisableCustomReports calls api.v0alpha.Ana.DisableCustomReports.
func (c *anaClient) DisableCustomReports(ctx context.Context, req *connect_go.Request[v0alpha.SetCustomReportsEnabledReq]) (*connect_go.Response[v0alpha.SetCustomReportsEnabledRes], error) {
	return c.disableCustomReports.CallUnary(ctx, req)
}

// MakeAdoptable calls api.v0alpha.Ana.MakeAdoptable.
func (c *anaClient) MakeAdoptable(ctx context.Context, req *connect_go.Request[v0alpha.MakeAdoptableReq]) (*connect_go.Response[v0alpha.MakeAdoptableRes], error) {
	return c.makeAdoptable.CallUnary(ctx, req)
}

// MakeUnadoptable calls api.v0alpha.Ana.MakeUnadoptable.
func (c *anaClient) MakeUnadoptable(ctx context.Context, req *connect_go.Request[v0alpha.MakeAdoptableReq]) (*connect_go.Response[v0alpha.MakeAdoptableRes], error) {
	return c.makeUnadoptable.CallUnary(ctx, req)
}

// AdoptAnaAccount calls api.v0alpha.Ana.AdoptAnaAccount.
func (c *anaClient) AdoptAnaAccount(ctx context.Context, req *connect_go.Request[v0alpha.SetAnaAccountRelationReq]) (*connect_go.Response[v0alpha.SetAnaAccountRelationRes], error) {
	return c.adoptAnaAccount.CallUnary(ctx, req)
}

// DisownAnaAccount calls api.v0alpha.Ana.DisownAnaAccount.
func (c *anaClient) DisownAnaAccount(ctx context.Context, req *connect_go.Request[v0alpha.SetAnaAccountRelationReq]) (*connect_go.Response[v0alpha.SetAnaAccountRelationRes], error) {
	return c.disownAnaAccount.CallUnary(ctx, req)
}

// GetAccessibleClients calls api.v0alpha.Ana.GetAccessibleClients.
func (c *anaClient) GetAccessibleClients(ctx context.Context, req *connect_go.Request[v0alpha.GetAccessibleClientsReq]) (*connect_go.Response[v0alpha.SimpleRelations], error) {
	return c.getAccessibleClients.CallUnary(ctx, req)
}

// GetFamily calls api.v0alpha.Ana.GetFamily.
func (c *anaClient) GetFamily(ctx context.Context, req *connect_go.Request[v0alpha.GetFamilyReq]) (*connect_go.Response[v0alpha.Family], error) {
	return c.getFamily.CallUnary(ctx, req)
}

// GetAllowedDataVisibility calls api.v0alpha.Ana.GetAllowedDataVisibility.
func (c *anaClient) GetAllowedDataVisibility(ctx context.Context, req *connect_go.Request[v0alpha.GetVisibilityReq]) (*connect_go.Response[v0alpha.DataVisibility], error) {
	return c.getAllowedDataVisibility.CallUnary(ctx, req)
}

// GetCurrentDataVisibility calls api.v0alpha.Ana.GetCurrentDataVisibility.
func (c *anaClient) GetCurrentDataVisibility(ctx context.Context, req *connect_go.Request[v0alpha.GetVisibilityReq]) (*connect_go.Response[v0alpha.DataVisibility], error) {
	return c.getCurrentDataVisibility.CallUnary(ctx, req)
}

// GetIndicesVisibility calls api.v0alpha.Ana.GetIndicesVisibility.
func (c *anaClient) GetIndicesVisibility(ctx context.Context, req *connect_go.Request[v0alpha.GetVisibilityReq]) (*connect_go.Response[v0alpha.IndicesVisibility], error) {
	return c.getIndicesVisibility.CallUnary(ctx, req)
}

// GetAuditableDataVisibility calls api.v0alpha.Ana.GetAuditableDataVisibility.
func (c *anaClient) GetAuditableDataVisibility(ctx context.Context, req *connect_go.Request[v0alpha.GetVisibilityReq]) (*connect_go.Response[v0alpha.DataVisibility], error) {
	return c.getAuditableDataVisibility.CallUnary(ctx, req)
}

// GetOrganizationNames calls api.v0alpha.Ana.GetOrganizationNames.
func (c *anaClient) GetOrganizationNames(ctx context.Context, req *connect_go.Request[v0alpha.GetOrganizationNamesReq]) (*connect_go.Response[v0alpha.GetOrganizationNamesRes], error) {
	return c.getOrganizationNames.CallUnary(ctx, req)
}

// GenerateVizDataById calls api.v0alpha.Ana.GenerateVizDataById.
func (c *anaClient) GenerateVizDataById(ctx context.Context, req *connect_go.Request[v0alpha.GenerateVizDataByIdReq]) (*connect_go.Response[v0alpha.GenerateVizDataByIdRes], error) {
	return c.generateVizDataById.CallUnary(ctx, req)
}

// GetClientStatus calls api.v0alpha.Ana.GetClientStatus.
func (c *anaClient) GetClientStatus(ctx context.Context, req *connect_go.Request[v0alpha.GetClientStatusReq]) (*connect_go.Response[v0alpha.GetClientStatusResp], error) {
	return c.getClientStatus.CallUnary(ctx, req)
}

// ReloadClientData calls api.v0alpha.Ana.ReloadClientData.
func (c *anaClient) ReloadClientData(ctx context.Context, req *connect_go.Request[v0alpha.ReloadClientDataReq]) (*connect_go.Response[v0alpha.ReloadClientDataResp], error) {
	return c.reloadClientData.CallUnary(ctx, req)
}

// ListVisualizationsLegacy calls api.v0alpha.Ana.ListVisualizationsLegacy.
func (c *anaClient) ListVisualizationsLegacy(ctx context.Context, req *connect_go.Request[v0alpha.ListVisualizationsLegacyReq]) (*connect_go.Response[v0alpha.ListVisualizationsLegacyRes], error) {
	return c.listVisualizationsLegacy.CallUnary(ctx, req)
}

// AnaHandler is an implementation of the api.v0alpha.Ana service.
type AnaHandler interface {
	// gets all visualizations for a specific client
	GetSpecifiedVisualizations(context.Context, *connect_go.Request[v0alpha.GetSpecifiedVisualizationsReq]) (*connect_go.Response[v0alpha.Visualizations], error)
	// Registers a new AnaAccoun based on org_id
	// The method will return the newly create AnaAccount
	// on the response message AnaAccount.
	// Required Permissions:
	//
	//	EDIT_ADMIN_CLIENT_PREFERENCES
	RegisterAccount(context.Context, *connect_go.Request[v0alpha.RegisterAccountReq]) (*connect_go.Response[v0alpha.AnaAccount], error)
	// sets the length of analytics history the client can view
	SetWeeks(context.Context, *connect_go.Request[v0alpha.SetWeeksReq]) (*connect_go.Response[v0alpha.SetWeeksRes], error)
	// set default time filter for given ana account
	// org.Permission_EDIT_CLIENT_PREFERENCES
	SetDefaultTimeFilter(context.Context, *connect_go.Request[v0alpha.SetDefaultTimeFilterReq]) (*connect_go.Response[v0alpha.SetDefaultTimeFilterRes], error)
	// sets the dashboard that is shown by default for neo
	// org.Permission_EDIT_CLIENT_PREFERENCES
	SetDefaultDashboard(context.Context, *connect_go.Request[v0alpha.SetDefaultDashboardReq]) (*connect_go.Response[v0alpha.SetDefaultDashboardRes], error)
	// gets account details for the client
	// org.Permission_VIEW_REPORTS
	GetAccount(context.Context, *connect_go.Request[v0alpha.GetAccountReq]) (*connect_go.Response[v0alpha.AnaAccount], error)
	// gets account details using the org_id provided
	GetSpecifiedAccount(context.Context, *connect_go.Request[v0alpha.GetSpecifiedAccountReq]) (*connect_go.Response[v0alpha.AnaAccount], error)
	// Gets an authorized url for the clients BI analytics page
	GetAuthorizedAnalyticsLink(context.Context, *connect_go.Request[v0alpha.GetAuthorizedAnalyticsLinkReq]) (*connect_go.Response[v0alpha.GetAuthorizedAnalyticsLinkRes], error)
	// creates and returns a url to download billing for the month provided or the previous month if none is provided
	// org.Permission_VIEW_BILLING
	GenerateMonthlyBilling(context.Context, *connect_go.Request[v0alpha.GenerateMonthlyBillingReq]) (*connect_go.Response[v0alpha.GenerateMonthlyBillingRes], error)
	// gets the ana_account timezone for the client
	// org.Permission_VIEW_REPORTS
	GetTimeZone(context.Context, *connect_go.Request[v0alpha.GetTimeZoneReq]) (*connect_go.Response[v0alpha.TimeZone], error)
	// updates the timezone for the account
	// org.Permission_VIEW_REPORTS
	SetTimeZone(context.Context, *connect_go.Request[v0alpha.SetTimeZoneReq]) (*connect_go.Response[v0alpha.SetTimeZoneRes], error)
	// copies the reports (dashboards legacy and visualizations legacy)
	// corresponding with the ids provided
	CopyDashViz(context.Context, *connect_go.Request[v0alpha.CopyDashVizReq]) (*connect_go.Response[v0alpha.CopyDashVizRes], error)
	// returns a summary of all billing factors for the specified client, whether client is pro, and which of those features contribute to making the client pro
	GetSpecifiedBillingSummary(context.Context, *connect_go.Request[v0alpha.GetSpecifiedBillingSummaryReq]) (*connect_go.Response[v0alpha.BillingSummary], error)
	// returns a summary of all billing factors for the client, whether client is
	// pro, and which of those features contribute to making the client pro
	GetBillingSummary(context.Context, *connect_go.Request[v0alpha.GetBillingSummaryReq]) (*connect_go.Response[v0alpha.BillingSummary], error)
	// enable custom report usage for the client
	// org.Permission_EDIT_CLIENT_PREFERENCES
	EnableCustomReports(context.Context, *connect_go.Request[v0alpha.SetCustomReportsEnabledReq]) (*connect_go.Response[v0alpha.SetCustomReportsEnabledRes], error)
	// disable custom report usage for the client
	// org.Permission_EDIT_CLIENT_PREFERENCES
	DisableCustomReports(context.Context, *connect_go.Request[v0alpha.SetCustomReportsEnabledReq]) (*connect_go.Response[v0alpha.SetCustomReportsEnabledRes], error)
	// allow the client to be adopted by another account
	// org.Permission_EDIT_CLIENT_PREFERENCES
	MakeAdoptable(context.Context, *connect_go.Request[v0alpha.MakeAdoptableReq]) (*connect_go.Response[v0alpha.MakeAdoptableRes], error)
	// disallow other accounts from adopting the client
	// org.Permission_EDIT_CLIENT_PREFERENCES
	MakeUnadoptable(context.Context, *connect_go.Request[v0alpha.MakeAdoptableReq]) (*connect_go.Response[v0alpha.MakeAdoptableRes], error)
	// allow the parent to view the data of the adoptable child
	AdoptAnaAccount(context.Context, *connect_go.Request[v0alpha.SetAnaAccountRelationReq]) (*connect_go.Response[v0alpha.SetAnaAccountRelationRes], error)
	// disallow the parent from viewing the data of the child
	DisownAnaAccount(context.Context, *connect_go.Request[v0alpha.SetAnaAccountRelationReq]) (*connect_go.Response[v0alpha.SetAnaAccountRelationRes], error)
	// gets all clients that can be viewed by the client including the client
	GetAccessibleClients(context.Context, *connect_go.Request[v0alpha.GetAccessibleClientsReq]) (*connect_go.Response[v0alpha.SimpleRelations], error)
	// gets all relations in which the client is involved grouped by whether the
	// client is the parent or child account
	GetFamily(context.Context, *connect_go.Request[v0alpha.GetFamilyReq]) (*connect_go.Response[v0alpha.Family], error)
	// gets the client's data visibility as defined in the database (source of
	// truth); internal use only
	GetAllowedDataVisibility(context.Context, *connect_go.Request[v0alpha.GetVisibilityReq]) (*connect_go.Response[v0alpha.DataVisibility], error)
	// gets the client's data visibility as is evident from the elasticsearch
	// indices structure; internal use only
	GetCurrentDataVisibility(context.Context, *connect_go.Request[v0alpha.GetVisibilityReq]) (*connect_go.Response[v0alpha.DataVisibility], error)
	// gets a visibility summary from the perspective of the elasticsearch
	// indices; internal use only
	GetIndicesVisibility(context.Context, *connect_go.Request[v0alpha.GetVisibilityReq]) (*connect_go.Response[v0alpha.IndicesVisibility], error)
	// gets the client's data visibility as exists in the elasticsearch data;
	// internal use only
	GetAuditableDataVisibility(context.Context, *connect_go.Request[v0alpha.GetVisibilityReq]) (*connect_go.Response[v0alpha.DataVisibility], error)
	// gets a map of client sids to organization names
	GetOrganizationNames(context.Context, *connect_go.Request[v0alpha.GetOrganizationNamesReq]) (*connect_go.Response[v0alpha.GetOrganizationNamesRes], error)
	// generate visualization data for the id
	GenerateVizDataById(context.Context, *connect_go.Request[v0alpha.GenerateVizDataByIdReq]) (*connect_go.Response[v0alpha.GenerateVizDataByIdRes], error)
	// Gets client's data status
	// Data status is the status of calls loaded in elasticsearch
	// against all calls in the database that are within the clients weeks of data setting
	// This method requires a client sid
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	GetClientStatus(context.Context, *connect_go.Request[v0alpha.GetClientStatusReq]) (*connect_go.Response[v0alpha.GetClientStatusResp], error)
	// Reloads client's data
	// This loads calls from the database into elasticsearch
	// This method requires a client sid
	// Required permissions:
	//
	//	WIP - DEV_OPS
	ReloadClientData(context.Context, *connect_go.Request[v0alpha.ReloadClientDataReq]) (*connect_go.Response[v0alpha.ReloadClientDataResp], error)
	// list all clients visualizations id and title
	ListVisualizationsLegacy(context.Context, *connect_go.Request[v0alpha.ListVisualizationsLegacyReq]) (*connect_go.Response[v0alpha.ListVisualizationsLegacyRes], error)
}

// NewAnaHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAnaHandler(svc AnaHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(AnaGetSpecifiedVisualizationsProcedure, connect_go.NewUnaryHandler(
		AnaGetSpecifiedVisualizationsProcedure,
		svc.GetSpecifiedVisualizations,
		opts...,
	))
	mux.Handle(AnaRegisterAccountProcedure, connect_go.NewUnaryHandler(
		AnaRegisterAccountProcedure,
		svc.RegisterAccount,
		opts...,
	))
	mux.Handle(AnaSetWeeksProcedure, connect_go.NewUnaryHandler(
		AnaSetWeeksProcedure,
		svc.SetWeeks,
		opts...,
	))
	mux.Handle(AnaSetDefaultTimeFilterProcedure, connect_go.NewUnaryHandler(
		AnaSetDefaultTimeFilterProcedure,
		svc.SetDefaultTimeFilter,
		opts...,
	))
	mux.Handle(AnaSetDefaultDashboardProcedure, connect_go.NewUnaryHandler(
		AnaSetDefaultDashboardProcedure,
		svc.SetDefaultDashboard,
		opts...,
	))
	mux.Handle(AnaGetAccountProcedure, connect_go.NewUnaryHandler(
		AnaGetAccountProcedure,
		svc.GetAccount,
		opts...,
	))
	mux.Handle(AnaGetSpecifiedAccountProcedure, connect_go.NewUnaryHandler(
		AnaGetSpecifiedAccountProcedure,
		svc.GetSpecifiedAccount,
		opts...,
	))
	mux.Handle(AnaGetAuthorizedAnalyticsLinkProcedure, connect_go.NewUnaryHandler(
		AnaGetAuthorizedAnalyticsLinkProcedure,
		svc.GetAuthorizedAnalyticsLink,
		opts...,
	))
	mux.Handle(AnaGenerateMonthlyBillingProcedure, connect_go.NewUnaryHandler(
		AnaGenerateMonthlyBillingProcedure,
		svc.GenerateMonthlyBilling,
		opts...,
	))
	mux.Handle(AnaGetTimeZoneProcedure, connect_go.NewUnaryHandler(
		AnaGetTimeZoneProcedure,
		svc.GetTimeZone,
		opts...,
	))
	mux.Handle(AnaSetTimeZoneProcedure, connect_go.NewUnaryHandler(
		AnaSetTimeZoneProcedure,
		svc.SetTimeZone,
		opts...,
	))
	mux.Handle(AnaCopyDashVizProcedure, connect_go.NewUnaryHandler(
		AnaCopyDashVizProcedure,
		svc.CopyDashViz,
		opts...,
	))
	mux.Handle(AnaGetSpecifiedBillingSummaryProcedure, connect_go.NewUnaryHandler(
		AnaGetSpecifiedBillingSummaryProcedure,
		svc.GetSpecifiedBillingSummary,
		opts...,
	))
	mux.Handle(AnaGetBillingSummaryProcedure, connect_go.NewUnaryHandler(
		AnaGetBillingSummaryProcedure,
		svc.GetBillingSummary,
		opts...,
	))
	mux.Handle(AnaEnableCustomReportsProcedure, connect_go.NewUnaryHandler(
		AnaEnableCustomReportsProcedure,
		svc.EnableCustomReports,
		opts...,
	))
	mux.Handle(AnaDisableCustomReportsProcedure, connect_go.NewUnaryHandler(
		AnaDisableCustomReportsProcedure,
		svc.DisableCustomReports,
		opts...,
	))
	mux.Handle(AnaMakeAdoptableProcedure, connect_go.NewUnaryHandler(
		AnaMakeAdoptableProcedure,
		svc.MakeAdoptable,
		opts...,
	))
	mux.Handle(AnaMakeUnadoptableProcedure, connect_go.NewUnaryHandler(
		AnaMakeUnadoptableProcedure,
		svc.MakeUnadoptable,
		opts...,
	))
	mux.Handle(AnaAdoptAnaAccountProcedure, connect_go.NewUnaryHandler(
		AnaAdoptAnaAccountProcedure,
		svc.AdoptAnaAccount,
		opts...,
	))
	mux.Handle(AnaDisownAnaAccountProcedure, connect_go.NewUnaryHandler(
		AnaDisownAnaAccountProcedure,
		svc.DisownAnaAccount,
		opts...,
	))
	mux.Handle(AnaGetAccessibleClientsProcedure, connect_go.NewUnaryHandler(
		AnaGetAccessibleClientsProcedure,
		svc.GetAccessibleClients,
		opts...,
	))
	mux.Handle(AnaGetFamilyProcedure, connect_go.NewUnaryHandler(
		AnaGetFamilyProcedure,
		svc.GetFamily,
		opts...,
	))
	mux.Handle(AnaGetAllowedDataVisibilityProcedure, connect_go.NewUnaryHandler(
		AnaGetAllowedDataVisibilityProcedure,
		svc.GetAllowedDataVisibility,
		opts...,
	))
	mux.Handle(AnaGetCurrentDataVisibilityProcedure, connect_go.NewUnaryHandler(
		AnaGetCurrentDataVisibilityProcedure,
		svc.GetCurrentDataVisibility,
		opts...,
	))
	mux.Handle(AnaGetIndicesVisibilityProcedure, connect_go.NewUnaryHandler(
		AnaGetIndicesVisibilityProcedure,
		svc.GetIndicesVisibility,
		opts...,
	))
	mux.Handle(AnaGetAuditableDataVisibilityProcedure, connect_go.NewUnaryHandler(
		AnaGetAuditableDataVisibilityProcedure,
		svc.GetAuditableDataVisibility,
		opts...,
	))
	mux.Handle(AnaGetOrganizationNamesProcedure, connect_go.NewUnaryHandler(
		AnaGetOrganizationNamesProcedure,
		svc.GetOrganizationNames,
		opts...,
	))
	mux.Handle(AnaGenerateVizDataByIdProcedure, connect_go.NewUnaryHandler(
		AnaGenerateVizDataByIdProcedure,
		svc.GenerateVizDataById,
		opts...,
	))
	mux.Handle(AnaGetClientStatusProcedure, connect_go.NewUnaryHandler(
		AnaGetClientStatusProcedure,
		svc.GetClientStatus,
		opts...,
	))
	mux.Handle(AnaReloadClientDataProcedure, connect_go.NewUnaryHandler(
		AnaReloadClientDataProcedure,
		svc.ReloadClientData,
		opts...,
	))
	mux.Handle(AnaListVisualizationsLegacyProcedure, connect_go.NewUnaryHandler(
		AnaListVisualizationsLegacyProcedure,
		svc.ListVisualizationsLegacy,
		opts...,
	))
	return "/api.v0alpha.Ana/", mux
}

// UnimplementedAnaHandler returns CodeUnimplemented from all methods.
type UnimplementedAnaHandler struct{}

func (UnimplementedAnaHandler) GetSpecifiedVisualizations(context.Context, *connect_go.Request[v0alpha.GetSpecifiedVisualizationsReq]) (*connect_go.Response[v0alpha.Visualizations], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.GetSpecifiedVisualizations is not implemented"))
}

func (UnimplementedAnaHandler) RegisterAccount(context.Context, *connect_go.Request[v0alpha.RegisterAccountReq]) (*connect_go.Response[v0alpha.AnaAccount], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.RegisterAccount is not implemented"))
}

func (UnimplementedAnaHandler) SetWeeks(context.Context, *connect_go.Request[v0alpha.SetWeeksReq]) (*connect_go.Response[v0alpha.SetWeeksRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.SetWeeks is not implemented"))
}

func (UnimplementedAnaHandler) SetDefaultTimeFilter(context.Context, *connect_go.Request[v0alpha.SetDefaultTimeFilterReq]) (*connect_go.Response[v0alpha.SetDefaultTimeFilterRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.SetDefaultTimeFilter is not implemented"))
}

func (UnimplementedAnaHandler) SetDefaultDashboard(context.Context, *connect_go.Request[v0alpha.SetDefaultDashboardReq]) (*connect_go.Response[v0alpha.SetDefaultDashboardRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.SetDefaultDashboard is not implemented"))
}

func (UnimplementedAnaHandler) GetAccount(context.Context, *connect_go.Request[v0alpha.GetAccountReq]) (*connect_go.Response[v0alpha.AnaAccount], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.GetAccount is not implemented"))
}

func (UnimplementedAnaHandler) GetSpecifiedAccount(context.Context, *connect_go.Request[v0alpha.GetSpecifiedAccountReq]) (*connect_go.Response[v0alpha.AnaAccount], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.GetSpecifiedAccount is not implemented"))
}

func (UnimplementedAnaHandler) GetAuthorizedAnalyticsLink(context.Context, *connect_go.Request[v0alpha.GetAuthorizedAnalyticsLinkReq]) (*connect_go.Response[v0alpha.GetAuthorizedAnalyticsLinkRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.GetAuthorizedAnalyticsLink is not implemented"))
}

func (UnimplementedAnaHandler) GenerateMonthlyBilling(context.Context, *connect_go.Request[v0alpha.GenerateMonthlyBillingReq]) (*connect_go.Response[v0alpha.GenerateMonthlyBillingRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.GenerateMonthlyBilling is not implemented"))
}

func (UnimplementedAnaHandler) GetTimeZone(context.Context, *connect_go.Request[v0alpha.GetTimeZoneReq]) (*connect_go.Response[v0alpha.TimeZone], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.GetTimeZone is not implemented"))
}

func (UnimplementedAnaHandler) SetTimeZone(context.Context, *connect_go.Request[v0alpha.SetTimeZoneReq]) (*connect_go.Response[v0alpha.SetTimeZoneRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.SetTimeZone is not implemented"))
}

func (UnimplementedAnaHandler) CopyDashViz(context.Context, *connect_go.Request[v0alpha.CopyDashVizReq]) (*connect_go.Response[v0alpha.CopyDashVizRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.CopyDashViz is not implemented"))
}

func (UnimplementedAnaHandler) GetSpecifiedBillingSummary(context.Context, *connect_go.Request[v0alpha.GetSpecifiedBillingSummaryReq]) (*connect_go.Response[v0alpha.BillingSummary], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.GetSpecifiedBillingSummary is not implemented"))
}

func (UnimplementedAnaHandler) GetBillingSummary(context.Context, *connect_go.Request[v0alpha.GetBillingSummaryReq]) (*connect_go.Response[v0alpha.BillingSummary], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.GetBillingSummary is not implemented"))
}

func (UnimplementedAnaHandler) EnableCustomReports(context.Context, *connect_go.Request[v0alpha.SetCustomReportsEnabledReq]) (*connect_go.Response[v0alpha.SetCustomReportsEnabledRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.EnableCustomReports is not implemented"))
}

func (UnimplementedAnaHandler) DisableCustomReports(context.Context, *connect_go.Request[v0alpha.SetCustomReportsEnabledReq]) (*connect_go.Response[v0alpha.SetCustomReportsEnabledRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.DisableCustomReports is not implemented"))
}

func (UnimplementedAnaHandler) MakeAdoptable(context.Context, *connect_go.Request[v0alpha.MakeAdoptableReq]) (*connect_go.Response[v0alpha.MakeAdoptableRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.MakeAdoptable is not implemented"))
}

func (UnimplementedAnaHandler) MakeUnadoptable(context.Context, *connect_go.Request[v0alpha.MakeAdoptableReq]) (*connect_go.Response[v0alpha.MakeAdoptableRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.MakeUnadoptable is not implemented"))
}

func (UnimplementedAnaHandler) AdoptAnaAccount(context.Context, *connect_go.Request[v0alpha.SetAnaAccountRelationReq]) (*connect_go.Response[v0alpha.SetAnaAccountRelationRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.AdoptAnaAccount is not implemented"))
}

func (UnimplementedAnaHandler) DisownAnaAccount(context.Context, *connect_go.Request[v0alpha.SetAnaAccountRelationReq]) (*connect_go.Response[v0alpha.SetAnaAccountRelationRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.DisownAnaAccount is not implemented"))
}

func (UnimplementedAnaHandler) GetAccessibleClients(context.Context, *connect_go.Request[v0alpha.GetAccessibleClientsReq]) (*connect_go.Response[v0alpha.SimpleRelations], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.GetAccessibleClients is not implemented"))
}

func (UnimplementedAnaHandler) GetFamily(context.Context, *connect_go.Request[v0alpha.GetFamilyReq]) (*connect_go.Response[v0alpha.Family], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.GetFamily is not implemented"))
}

func (UnimplementedAnaHandler) GetAllowedDataVisibility(context.Context, *connect_go.Request[v0alpha.GetVisibilityReq]) (*connect_go.Response[v0alpha.DataVisibility], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.GetAllowedDataVisibility is not implemented"))
}

func (UnimplementedAnaHandler) GetCurrentDataVisibility(context.Context, *connect_go.Request[v0alpha.GetVisibilityReq]) (*connect_go.Response[v0alpha.DataVisibility], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.GetCurrentDataVisibility is not implemented"))
}

func (UnimplementedAnaHandler) GetIndicesVisibility(context.Context, *connect_go.Request[v0alpha.GetVisibilityReq]) (*connect_go.Response[v0alpha.IndicesVisibility], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.GetIndicesVisibility is not implemented"))
}

func (UnimplementedAnaHandler) GetAuditableDataVisibility(context.Context, *connect_go.Request[v0alpha.GetVisibilityReq]) (*connect_go.Response[v0alpha.DataVisibility], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.GetAuditableDataVisibility is not implemented"))
}

func (UnimplementedAnaHandler) GetOrganizationNames(context.Context, *connect_go.Request[v0alpha.GetOrganizationNamesReq]) (*connect_go.Response[v0alpha.GetOrganizationNamesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.GetOrganizationNames is not implemented"))
}

func (UnimplementedAnaHandler) GenerateVizDataById(context.Context, *connect_go.Request[v0alpha.GenerateVizDataByIdReq]) (*connect_go.Response[v0alpha.GenerateVizDataByIdRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.GenerateVizDataById is not implemented"))
}

func (UnimplementedAnaHandler) GetClientStatus(context.Context, *connect_go.Request[v0alpha.GetClientStatusReq]) (*connect_go.Response[v0alpha.GetClientStatusResp], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.GetClientStatus is not implemented"))
}

func (UnimplementedAnaHandler) ReloadClientData(context.Context, *connect_go.Request[v0alpha.ReloadClientDataReq]) (*connect_go.Response[v0alpha.ReloadClientDataResp], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.ReloadClientData is not implemented"))
}

func (UnimplementedAnaHandler) ListVisualizationsLegacy(context.Context, *connect_go.Request[v0alpha.ListVisualizationsLegacyReq]) (*connect_go.Response[v0alpha.ListVisualizationsLegacyRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Ana.ListVisualizationsLegacy is not implemented"))
}
