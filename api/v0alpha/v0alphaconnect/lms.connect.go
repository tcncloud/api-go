// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v0alpha/lms.proto

package v0alphaconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v0alpha "github.com/tcncloud/api-go/api/v0alpha"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// LMSName is the fully-qualified name of the LMS service.
	LMSName = "api.v0alpha.LMS"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LMSGetPublicKeyProcedure is the fully-qualified name of the LMS's GetPublicKey RPC.
	LMSGetPublicKeyProcedure = "/api.v0alpha.LMS/GetPublicKey"
	// LMSCreateFileTemplateProcedure is the fully-qualified name of the LMS's CreateFileTemplate RPC.
	LMSCreateFileTemplateProcedure = "/api.v0alpha.LMS/CreateFileTemplate"
	// LMSListFileTemplatesProcedure is the fully-qualified name of the LMS's ListFileTemplates RPC.
	LMSListFileTemplatesProcedure = "/api.v0alpha.LMS/ListFileTemplates"
	// LMSUpdateFileTemplateProcedure is the fully-qualified name of the LMS's UpdateFileTemplate RPC.
	LMSUpdateFileTemplateProcedure = "/api.v0alpha.LMS/UpdateFileTemplate"
	// LMSDeleteFileTemplateProcedure is the fully-qualified name of the LMS's DeleteFileTemplate RPC.
	LMSDeleteFileTemplateProcedure = "/api.v0alpha.LMS/DeleteFileTemplate"
	// LMSGetFileTemplateProcedure is the fully-qualified name of the LMS's GetFileTemplate RPC.
	LMSGetFileTemplateProcedure = "/api.v0alpha.LMS/GetFileTemplate"
	// LMSCreateFieldProcedure is the fully-qualified name of the LMS's CreateField RPC.
	LMSCreateFieldProcedure = "/api.v0alpha.LMS/CreateField"
	// LMSListFieldsProcedure is the fully-qualified name of the LMS's ListFields RPC.
	LMSListFieldsProcedure = "/api.v0alpha.LMS/ListFields"
	// LMSGetFieldProcedure is the fully-qualified name of the LMS's GetField RPC.
	LMSGetFieldProcedure = "/api.v0alpha.LMS/GetField"
	// LMSUpdateFieldProcedure is the fully-qualified name of the LMS's UpdateField RPC.
	LMSUpdateFieldProcedure = "/api.v0alpha.LMS/UpdateField"
	// LMSDeleteFieldProcedure is the fully-qualified name of the LMS's DeleteField RPC.
	LMSDeleteFieldProcedure = "/api.v0alpha.LMS/DeleteField"
	// LMSListAvailableFieldsByElementIdProcedure is the fully-qualified name of the LMS's
	// ListAvailableFieldsByElementId RPC.
	LMSListAvailableFieldsByElementIdProcedure = "/api.v0alpha.LMS/ListAvailableFieldsByElementId"
	// LMSListFieldsForElementProcedure is the fully-qualified name of the LMS's ListFieldsForElement
	// RPC.
	LMSListFieldsForElementProcedure = "/api.v0alpha.LMS/ListFieldsForElement"
	// LMSListAutocompleteFieldsProcedure is the fully-qualified name of the LMS's
	// ListAutocompleteFields RPC.
	LMSListAutocompleteFieldsProcedure = "/api.v0alpha.LMS/ListAutocompleteFields"
	// LMSListCampaignLinksProcedure is the fully-qualified name of the LMS's ListCampaignLinks RPC.
	LMSListCampaignLinksProcedure = "/api.v0alpha.LMS/ListCampaignLinks"
	// LMSPeekListProcedure is the fully-qualified name of the LMS's PeekList RPC.
	LMSPeekListProcedure = "/api.v0alpha.LMS/PeekList"
	// LMSGetHistoryProcedure is the fully-qualified name of the LMS's GetHistory RPC.
	LMSGetHistoryProcedure = "/api.v0alpha.LMS/GetHistory"
	// LMSCreateElementProcedure is the fully-qualified name of the LMS's CreateElement RPC.
	LMSCreateElementProcedure = "/api.v0alpha.LMS/CreateElement"
	// LMSListElementsProcedure is the fully-qualified name of the LMS's ListElements RPC.
	LMSListElementsProcedure = "/api.v0alpha.LMS/ListElements"
	// LMSGetElementProcedure is the fully-qualified name of the LMS's GetElement RPC.
	LMSGetElementProcedure = "/api.v0alpha.LMS/GetElement"
	// LMSUpdateElementProcedure is the fully-qualified name of the LMS's UpdateElement RPC.
	LMSUpdateElementProcedure = "/api.v0alpha.LMS/UpdateElement"
	// LMSDeleteElementProcedure is the fully-qualified name of the LMS's DeleteElement RPC.
	LMSDeleteElementProcedure = "/api.v0alpha.LMS/DeleteElement"
	// LMSCopyPipelineUpstreamProcedure is the fully-qualified name of the LMS's CopyPipelineUpstream
	// RPC.
	LMSCopyPipelineUpstreamProcedure = "/api.v0alpha.LMS/CopyPipelineUpstream"
	// LMSCopyPipelineDownstreamProcedure is the fully-qualified name of the LMS's
	// CopyPipelineDownstream RPC.
	LMSCopyPipelineDownstreamProcedure = "/api.v0alpha.LMS/CopyPipelineDownstream"
	// LMSProcessElementProcedure is the fully-qualified name of the LMS's ProcessElement RPC.
	LMSProcessElementProcedure = "/api.v0alpha.LMS/ProcessElement"
	// LMSProcessListProcedure is the fully-qualified name of the LMS's ProcessList RPC.
	LMSProcessListProcedure = "/api.v0alpha.LMS/ProcessList"
	// LMSStreamListProcedure is the fully-qualified name of the LMS's StreamList RPC.
	LMSStreamListProcedure = "/api.v0alpha.LMS/StreamList"
	// LMSGetAvailableFieldsProcedure is the fully-qualified name of the LMS's GetAvailableFields RPC.
	LMSGetAvailableFieldsProcedure = "/api.v0alpha.LMS/GetAvailableFields"
	// LMSListNewEventsProcedure is the fully-qualified name of the LMS's ListNewEvents RPC.
	LMSListNewEventsProcedure = "/api.v0alpha.LMS/ListNewEvents"
	// LMSViewQueueProcedure is the fully-qualified name of the LMS's ViewQueue RPC.
	LMSViewQueueProcedure = "/api.v0alpha.LMS/ViewQueue"
	// LMSAutocompleteProcedure is the fully-qualified name of the LMS's Autocomplete RPC.
	LMSAutocompleteProcedure = "/api.v0alpha.LMS/Autocomplete"
	// LMSGetComplianceScrubListsProcedure is the fully-qualified name of the LMS's
	// GetComplianceScrubLists RPC.
	LMSGetComplianceScrubListsProcedure = "/api.v0alpha.LMS/GetComplianceScrubLists"
	// LMSFindFieldUsagesProcedure is the fully-qualified name of the LMS's FindFieldUsages RPC.
	LMSFindFieldUsagesProcedure = "/api.v0alpha.LMS/FindFieldUsages"
	// LMSFindInvalidElementsProcedure is the fully-qualified name of the LMS's FindInvalidElements RPC.
	LMSFindInvalidElementsProcedure = "/api.v0alpha.LMS/FindInvalidElements"
	// LMSCreateCollectionProcedure is the fully-qualified name of the LMS's CreateCollection RPC.
	LMSCreateCollectionProcedure = "/api.v0alpha.LMS/CreateCollection"
	// LMSGetCollectionProcedure is the fully-qualified name of the LMS's GetCollection RPC.
	LMSGetCollectionProcedure = "/api.v0alpha.LMS/GetCollection"
	// LMSUpdateCollectionProcedure is the fully-qualified name of the LMS's UpdateCollection RPC.
	LMSUpdateCollectionProcedure = "/api.v0alpha.LMS/UpdateCollection"
	// LMSRetypeCollectionProcedure is the fully-qualified name of the LMS's RetypeCollection RPC.
	LMSRetypeCollectionProcedure = "/api.v0alpha.LMS/RetypeCollection"
	// LMSDeleteCollectionProcedure is the fully-qualified name of the LMS's DeleteCollection RPC.
	LMSDeleteCollectionProcedure = "/api.v0alpha.LMS/DeleteCollection"
	// LMSListCollectionsProcedure is the fully-qualified name of the LMS's ListCollections RPC.
	LMSListCollectionsProcedure = "/api.v0alpha.LMS/ListCollections"
	// LMSResetCollectionProcedure is the fully-qualified name of the LMS's ResetCollection RPC.
	LMSResetCollectionProcedure = "/api.v0alpha.LMS/ResetCollection"
	// LMSAddCollectionEntryProcedure is the fully-qualified name of the LMS's AddCollectionEntry RPC.
	LMSAddCollectionEntryProcedure = "/api.v0alpha.LMS/AddCollectionEntry"
	// LMSDeleteCollectionEntryProcedure is the fully-qualified name of the LMS's DeleteCollectionEntry
	// RPC.
	LMSDeleteCollectionEntryProcedure = "/api.v0alpha.LMS/DeleteCollectionEntry"
	// LMSUpdateCollectionEntryProcedure is the fully-qualified name of the LMS's UpdateCollectionEntry
	// RPC.
	LMSUpdateCollectionEntryProcedure = "/api.v0alpha.LMS/UpdateCollectionEntry"
	// LMSStreamCollectionProcedure is the fully-qualified name of the LMS's StreamCollection RPC.
	LMSStreamCollectionProcedure = "/api.v0alpha.LMS/StreamCollection"
	// LMSSearchCollectionsPaginatedProcedure is the fully-qualified name of the LMS's
	// SearchCollectionsPaginated RPC.
	LMSSearchCollectionsPaginatedProcedure = "/api.v0alpha.LMS/SearchCollectionsPaginated"
	// LMSGetCollectionEntriesProcedure is the fully-qualified name of the LMS's GetCollectionEntries
	// RPC.
	LMSGetCollectionEntriesProcedure = "/api.v0alpha.LMS/GetCollectionEntries"
	// LMSCreateCjsSearchDefinitionProcedure is the fully-qualified name of the LMS's
	// CreateCjsSearchDefinition RPC.
	LMSCreateCjsSearchDefinitionProcedure = "/api.v0alpha.LMS/CreateCjsSearchDefinition"
	// LMSGetCjsSearchDefinitionProcedure is the fully-qualified name of the LMS's
	// GetCjsSearchDefinition RPC.
	LMSGetCjsSearchDefinitionProcedure = "/api.v0alpha.LMS/GetCjsSearchDefinition"
	// LMSUpdateCjsSearchDefinitionProcedure is the fully-qualified name of the LMS's
	// UpdateCjsSearchDefinition RPC.
	LMSUpdateCjsSearchDefinitionProcedure = "/api.v0alpha.LMS/UpdateCjsSearchDefinition"
	// LMSDeleteCjsSearchDefinitionProcedure is the fully-qualified name of the LMS's
	// DeleteCjsSearchDefinition RPC.
	LMSDeleteCjsSearchDefinitionProcedure = "/api.v0alpha.LMS/DeleteCjsSearchDefinition"
	// LMSListCjsSearchDefinitionsProcedure is the fully-qualified name of the LMS's
	// ListCjsSearchDefinitions RPC.
	LMSListCjsSearchDefinitionsProcedure = "/api.v0alpha.LMS/ListCjsSearchDefinitions"
	// LMSExecuteCjsSearchDefinitionProcedure is the fully-qualified name of the LMS's
	// ExecuteCjsSearchDefinition RPC.
	LMSExecuteCjsSearchDefinitionProcedure = "/api.v0alpha.LMS/ExecuteCjsSearchDefinition"
	// LMSGetCjsSecureSearchCriteriaProcedure is the fully-qualified name of the LMS's
	// GetCjsSecureSearchCriteria RPC.
	LMSGetCjsSecureSearchCriteriaProcedure = "/api.v0alpha.LMS/GetCjsSecureSearchCriteria"
	// LMSCreateCjsSecureSearchCriteriaProcedure is the fully-qualified name of the LMS's
	// CreateCjsSecureSearchCriteria RPC.
	LMSCreateCjsSecureSearchCriteriaProcedure = "/api.v0alpha.LMS/CreateCjsSecureSearchCriteria"
	// LMSUpdateCjsSecureSearchCriteriaProcedure is the fully-qualified name of the LMS's
	// UpdateCjsSecureSearchCriteria RPC.
	LMSUpdateCjsSecureSearchCriteriaProcedure = "/api.v0alpha.LMS/UpdateCjsSecureSearchCriteria"
	// LMSSampleEndpointProcedure is the fully-qualified name of the LMS's SampleEndpoint RPC.
	LMSSampleEndpointProcedure = "/api.v0alpha.LMS/SampleEndpoint"
	// LMSGetAvailableEHRFieldsProcedure is the fully-qualified name of the LMS's GetAvailableEHRFields
	// RPC.
	LMSGetAvailableEHRFieldsProcedure = "/api.v0alpha.LMS/GetAvailableEHRFields"
	// LMSGetQueuedEventsStatusByElementIdProcedure is the fully-qualified name of the LMS's
	// GetQueuedEventsStatusByElementId RPC.
	LMSGetQueuedEventsStatusByElementIdProcedure = "/api.v0alpha.LMS/GetQueuedEventsStatusByElementId"
	// LMSListPoolsProcedure is the fully-qualified name of the LMS's ListPools RPC.
	LMSListPoolsProcedure = "/api.v0alpha.LMS/ListPools"
)

// LMSClient is a client for the api.v0alpha.LMS service.
type LMSClient interface {
	GetPublicKey(context.Context, *connect_go.Request[v0alpha.GetPublicKeyReq]) (*connect_go.Response[v0alpha.PublicKey], error)
	CreateFileTemplate(context.Context, *connect_go.Request[v0alpha.FileTemplate]) (*connect_go.Response[v0alpha.FileTemplate], error)
	ListFileTemplates(context.Context, *connect_go.Request[v0alpha.GetFileTemplatesReq]) (*connect_go.ServerStreamForClient[v0alpha.FileTemplate], error)
	UpdateFileTemplate(context.Context, *connect_go.Request[v0alpha.FileTemplate]) (*connect_go.Response[v0alpha.FileTemplate], error)
	DeleteFileTemplate(context.Context, *connect_go.Request[v0alpha.FileTemplate]) (*connect_go.Response[v0alpha.FileTemplate], error)
	GetFileTemplate(context.Context, *connect_go.Request[v0alpha.FileTemplate]) (*connect_go.Response[v0alpha.FileTemplate], error)
	CreateField(context.Context, *connect_go.Request[v0alpha.Field]) (*connect_go.Response[v0alpha.Field], error)
	ListFields(context.Context, *connect_go.Request[v0alpha.ListFieldsReq]) (*connect_go.Response[v0alpha.Fields], error)
	GetField(context.Context, *connect_go.Request[v0alpha.Field]) (*connect_go.Response[v0alpha.Field], error)
	UpdateField(context.Context, *connect_go.Request[v0alpha.UpdateFieldReq]) (*connect_go.Response[v0alpha.Field], error)
	DeleteField(context.Context, *connect_go.Request[v0alpha.Field]) (*connect_go.Response[v0alpha.Field], error)
	ListAvailableFieldsByElementId(context.Context, *connect_go.Request[v0alpha.ListAvailableFieldsByElementIdReq]) (*connect_go.Response[v0alpha.ProcessFields], error)
	ListFieldsForElement(context.Context, *connect_go.Request[v0alpha.ListFieldsForElementReq]) (*connect_go.Response[v0alpha.ListFieldsForElementRes], error)
	ListAutocompleteFields(context.Context, *connect_go.Request[v0alpha.ListAutocompleteFieldsReq]) (*connect_go.Response[v0alpha.ListAutocompleteFieldsRes], error)
	// list campaign links and descriptions
	ListCampaignLinks(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v0alpha.ListCampaignLinksRes], error)
	PeekList(context.Context, *connect_go.Request[v0alpha.PeekListReq]) (*connect_go.Response[v0alpha.PeekListRes], error)
	GetHistory(context.Context, *connect_go.Request[v0alpha.GetHistoryReq]) (*connect_go.Response[v0alpha.GetHistoryRes], error)
	CreateElement(context.Context, *connect_go.Request[v0alpha.Element]) (*connect_go.Response[v0alpha.Element], error)
	ListElements(context.Context, *connect_go.Request[v0alpha.ListElementsReq]) (*connect_go.ServerStreamForClient[v0alpha.Element], error)
	GetElement(context.Context, *connect_go.Request[v0alpha.ElementPK]) (*connect_go.Response[v0alpha.Element], error)
	UpdateElement(context.Context, *connect_go.Request[v0alpha.Element]) (*connect_go.Response[v0alpha.Element], error)
	DeleteElement(context.Context, *connect_go.Request[v0alpha.Element]) (*connect_go.Response[v0alpha.Element], error)
	// CopyPipelineUpstream copies an Element and all of its' parents
	CopyPipelineUpstream(context.Context, *connect_go.Request[v0alpha.Element]) (*connect_go.ServerStreamForClient[v0alpha.Element], error)
	// CopyPipelineDownstream copies an Element and all of its' children
	CopyPipelineDownstream(context.Context, *connect_go.Request[v0alpha.Element]) (*connect_go.ServerStreamForClient[v0alpha.Element], error)
	ProcessElement(context.Context, *connect_go.Request[v0alpha.ProcessElementReq]) (*connect_go.Response[emptypb.Empty], error)
	ProcessList(context.Context, *connect_go.Request[v0alpha.ProcessListRequest]) (*connect_go.Response[v0alpha.ProcessListResponse], error)
	StreamList(context.Context) *connect_go.ClientStreamForClient[v0alpha.StreamListRequest, v0alpha.StreamListResponse]
	GetAvailableFields(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v0alpha.ProcessFields], error)
	// returns queue events for the last 30 minutes
	ListNewEvents(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v0alpha.Events], error)
	ViewQueue(context.Context, *connect_go.Request[v0alpha.ViewQueueReq]) (*connect_go.Response[v0alpha.Events], error)
	Autocomplete(context.Context, *connect_go.Request[v0alpha.ParseReq]) (*connect_go.Response[v0alpha.ParseRes], error)
	GetComplianceScrubLists(context.Context, *connect_go.Request[v0alpha.GetComplianceScrubListsReq]) (*connect_go.Response[v0alpha.GetComplianceScrubListsRes], error)
	FindFieldUsages(context.Context, *connect_go.Request[v0alpha.FindFieldUsagesReq]) (*connect_go.Response[v0alpha.FindFieldUsagesRes], error)
	FindInvalidElements(context.Context, *connect_go.Request[v0alpha.FindInvalidElementsReq]) (*connect_go.Response[v0alpha.FindInvalidElementsRes], error)
	// CJS calls
	CreateCollection(context.Context, *connect_go.Request[v0alpha.CollectionMetadata]) (*connect_go.Response[v0alpha.CollectionMetadata], error)
	GetCollection(context.Context, *connect_go.Request[v0alpha.GetCollectionReq]) (*connect_go.Response[v0alpha.CollectionMetadata], error)
	UpdateCollection(context.Context, *connect_go.Request[v0alpha.CollectionMetadata]) (*connect_go.Response[emptypb.Empty], error)
	RetypeCollection(context.Context, *connect_go.Request[v0alpha.RetypeCollectionReq]) (*connect_go.Response[v0alpha.RetypeCollectionRes], error)
	DeleteCollection(context.Context, *connect_go.Request[v0alpha.DeleteCollectionReq]) (*connect_go.Response[emptypb.Empty], error)
	ListCollections(context.Context, *connect_go.Request[v0alpha.ListCollectionsReq]) (*connect_go.Response[v0alpha.ListCollectionsRes], error)
	ResetCollection(context.Context, *connect_go.Request[v0alpha.ResetCollectionReq]) (*connect_go.Response[emptypb.Empty], error)
	AddCollectionEntry(context.Context, *connect_go.Request[v0alpha.CollectionEntry]) (*connect_go.Response[v0alpha.CollectionEntry], error)
	DeleteCollectionEntry(context.Context, *connect_go.Request[v0alpha.DeleteCollectionEntryReq]) (*connect_go.Response[emptypb.Empty], error)
	UpdateCollectionEntry(context.Context, *connect_go.Request[v0alpha.CollectionEntry]) (*connect_go.Response[v0alpha.CollectionEntry], error)
	// StreamCollection needs to be used in conjunction with GetCollection
	// to have the metadata associated with it
	StreamCollection(context.Context, *connect_go.Request[v0alpha.StreamCollectionReq]) (*connect_go.ServerStreamForClient[v0alpha.CollectionEntry], error)
	// SearchCollectionsWithQueryPaginated needs to be used in conjunction with GetCollection
	// to have the metadata associated with it
	SearchCollectionsPaginated(context.Context, *connect_go.Request[v0alpha.SearchCollectionsPaginatedReq]) (*connect_go.Response[v0alpha.PaginatedSearchRes], error)
	// GetCollectionEntries fetches a page (size specified by the page_size param) of entries for
	// the specified collection_id, org_id, region_id starting at location specified by from
	GetCollectionEntries(context.Context, *connect_go.Request[v0alpha.GetCollectionEntriesReq]) (*connect_go.Response[v0alpha.GetCollectionEntriesRes], error)
	// CreateCjsSearchDefinition creates a search definition
	CreateCjsSearchDefinition(context.Context, *connect_go.Request[v0alpha.CjsSearchDefinition]) (*connect_go.Response[v0alpha.CjsSearchDefinition], error)
	// GetCjsSearchDefinition gets the search definition specified by search_definition_id
	GetCjsSearchDefinition(context.Context, *connect_go.Request[v0alpha.GetCjsSearchDefinitionReq]) (*connect_go.Response[v0alpha.CjsSearchDefinition], error)
	// UpdateCjsSearchDefinition updates the search definition specified by search_definition_id
	UpdateCjsSearchDefinition(context.Context, *connect_go.Request[v0alpha.CjsSearchDefinition]) (*connect_go.Response[emptypb.Empty], error)
	// DeleteCjsSearchDefinition deletes the search definition specified by search_definition_id
	DeleteCjsSearchDefinition(context.Context, *connect_go.Request[v0alpha.DeleteCjsSearchDefinitionReq]) (*connect_go.Response[emptypb.Empty], error)
	// ListCjsSearchDefinitions lists the search definitions
	ListCjsSearchDefinitions(context.Context, *connect_go.Request[v0alpha.ListCjsSearchDefinitionsReq]) (*connect_go.Response[v0alpha.ListCjsSearchDefinitionsRes], error)
	// ExecuteCjsSearchDefinition executes the search definition specified by search_definition_id
	ExecuteCjsSearchDefinition(context.Context, *connect_go.Request[v0alpha.ExecuteCjsSearchDefinitionReq]) (*connect_go.Response[v0alpha.ExecuteCjsSearchDefinitionRes], error)
	// GetCjsSecureSearchCriteria gets the secure search criteria
	GetCjsSecureSearchCriteria(context.Context, *connect_go.Request[v0alpha.GetCjsSecureSearchCriteriaReq]) (*connect_go.Response[v0alpha.CjsSecureSearchCriteria], error)
	// CreateCjsSecureSearchCriteria creates a secure search criteria
	CreateCjsSecureSearchCriteria(context.Context, *connect_go.Request[v0alpha.CjsSecureSearchCriteria]) (*connect_go.Response[v0alpha.CjsSecureSearchCriteria], error)
	// UpdateCjsSecureSearchCriteria updates the secure search criteria
	UpdateCjsSecureSearchCriteria(context.Context, *connect_go.Request[v0alpha.CjsSecureSearchCriteria]) (*connect_go.Response[emptypb.Empty], error)
	// SampleEndpoint is to test that values come through to the api appropriately
	SampleEndpoint(context.Context, *connect_go.Request[v0alpha.SampleRequest]) (*connect_go.Response[emptypb.Empty], error)
	// returns all fields possible that an ehr entity type could return (that we know of)
	GetAvailableEHRFields(context.Context, *connect_go.Request[v0alpha.EHREntityType]) (*connect_go.Response[v0alpha.Fields], error)
	GetQueuedEventsStatusByElementId(context.Context, *connect_go.Request[v0alpha.ElementPK]) (*connect_go.Response[v0alpha.Events], error)
	// List pools is a unary call to show finvi pools through exile
	ListPools(context.Context, *connect_go.Request[v0alpha.ListPoolsRequest]) (*connect_go.Response[v0alpha.ListPoolsResponse], error)
}

// NewLMSClient constructs a client for the api.v0alpha.LMS service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLMSClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) LMSClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &lMSClient{
		getPublicKey: connect_go.NewClient[v0alpha.GetPublicKeyReq, v0alpha.PublicKey](
			httpClient,
			baseURL+LMSGetPublicKeyProcedure,
			opts...,
		),
		createFileTemplate: connect_go.NewClient[v0alpha.FileTemplate, v0alpha.FileTemplate](
			httpClient,
			baseURL+LMSCreateFileTemplateProcedure,
			opts...,
		),
		listFileTemplates: connect_go.NewClient[v0alpha.GetFileTemplatesReq, v0alpha.FileTemplate](
			httpClient,
			baseURL+LMSListFileTemplatesProcedure,
			opts...,
		),
		updateFileTemplate: connect_go.NewClient[v0alpha.FileTemplate, v0alpha.FileTemplate](
			httpClient,
			baseURL+LMSUpdateFileTemplateProcedure,
			opts...,
		),
		deleteFileTemplate: connect_go.NewClient[v0alpha.FileTemplate, v0alpha.FileTemplate](
			httpClient,
			baseURL+LMSDeleteFileTemplateProcedure,
			opts...,
		),
		getFileTemplate: connect_go.NewClient[v0alpha.FileTemplate, v0alpha.FileTemplate](
			httpClient,
			baseURL+LMSGetFileTemplateProcedure,
			opts...,
		),
		createField: connect_go.NewClient[v0alpha.Field, v0alpha.Field](
			httpClient,
			baseURL+LMSCreateFieldProcedure,
			opts...,
		),
		listFields: connect_go.NewClient[v0alpha.ListFieldsReq, v0alpha.Fields](
			httpClient,
			baseURL+LMSListFieldsProcedure,
			opts...,
		),
		getField: connect_go.NewClient[v0alpha.Field, v0alpha.Field](
			httpClient,
			baseURL+LMSGetFieldProcedure,
			opts...,
		),
		updateField: connect_go.NewClient[v0alpha.UpdateFieldReq, v0alpha.Field](
			httpClient,
			baseURL+LMSUpdateFieldProcedure,
			opts...,
		),
		deleteField: connect_go.NewClient[v0alpha.Field, v0alpha.Field](
			httpClient,
			baseURL+LMSDeleteFieldProcedure,
			opts...,
		),
		listAvailableFieldsByElementId: connect_go.NewClient[v0alpha.ListAvailableFieldsByElementIdReq, v0alpha.ProcessFields](
			httpClient,
			baseURL+LMSListAvailableFieldsByElementIdProcedure,
			opts...,
		),
		listFieldsForElement: connect_go.NewClient[v0alpha.ListFieldsForElementReq, v0alpha.ListFieldsForElementRes](
			httpClient,
			baseURL+LMSListFieldsForElementProcedure,
			opts...,
		),
		listAutocompleteFields: connect_go.NewClient[v0alpha.ListAutocompleteFieldsReq, v0alpha.ListAutocompleteFieldsRes](
			httpClient,
			baseURL+LMSListAutocompleteFieldsProcedure,
			opts...,
		),
		listCampaignLinks: connect_go.NewClient[emptypb.Empty, v0alpha.ListCampaignLinksRes](
			httpClient,
			baseURL+LMSListCampaignLinksProcedure,
			opts...,
		),
		peekList: connect_go.NewClient[v0alpha.PeekListReq, v0alpha.PeekListRes](
			httpClient,
			baseURL+LMSPeekListProcedure,
			opts...,
		),
		getHistory: connect_go.NewClient[v0alpha.GetHistoryReq, v0alpha.GetHistoryRes](
			httpClient,
			baseURL+LMSGetHistoryProcedure,
			opts...,
		),
		createElement: connect_go.NewClient[v0alpha.Element, v0alpha.Element](
			httpClient,
			baseURL+LMSCreateElementProcedure,
			opts...,
		),
		listElements: connect_go.NewClient[v0alpha.ListElementsReq, v0alpha.Element](
			httpClient,
			baseURL+LMSListElementsProcedure,
			opts...,
		),
		getElement: connect_go.NewClient[v0alpha.ElementPK, v0alpha.Element](
			httpClient,
			baseURL+LMSGetElementProcedure,
			opts...,
		),
		updateElement: connect_go.NewClient[v0alpha.Element, v0alpha.Element](
			httpClient,
			baseURL+LMSUpdateElementProcedure,
			opts...,
		),
		deleteElement: connect_go.NewClient[v0alpha.Element, v0alpha.Element](
			httpClient,
			baseURL+LMSDeleteElementProcedure,
			opts...,
		),
		copyPipelineUpstream: connect_go.NewClient[v0alpha.Element, v0alpha.Element](
			httpClient,
			baseURL+LMSCopyPipelineUpstreamProcedure,
			opts...,
		),
		copyPipelineDownstream: connect_go.NewClient[v0alpha.Element, v0alpha.Element](
			httpClient,
			baseURL+LMSCopyPipelineDownstreamProcedure,
			opts...,
		),
		processElement: connect_go.NewClient[v0alpha.ProcessElementReq, emptypb.Empty](
			httpClient,
			baseURL+LMSProcessElementProcedure,
			opts...,
		),
		processList: connect_go.NewClient[v0alpha.ProcessListRequest, v0alpha.ProcessListResponse](
			httpClient,
			baseURL+LMSProcessListProcedure,
			opts...,
		),
		streamList: connect_go.NewClient[v0alpha.StreamListRequest, v0alpha.StreamListResponse](
			httpClient,
			baseURL+LMSStreamListProcedure,
			opts...,
		),
		getAvailableFields: connect_go.NewClient[emptypb.Empty, v0alpha.ProcessFields](
			httpClient,
			baseURL+LMSGetAvailableFieldsProcedure,
			opts...,
		),
		listNewEvents: connect_go.NewClient[emptypb.Empty, v0alpha.Events](
			httpClient,
			baseURL+LMSListNewEventsProcedure,
			opts...,
		),
		viewQueue: connect_go.NewClient[v0alpha.ViewQueueReq, v0alpha.Events](
			httpClient,
			baseURL+LMSViewQueueProcedure,
			opts...,
		),
		autocomplete: connect_go.NewClient[v0alpha.ParseReq, v0alpha.ParseRes](
			httpClient,
			baseURL+LMSAutocompleteProcedure,
			opts...,
		),
		getComplianceScrubLists: connect_go.NewClient[v0alpha.GetComplianceScrubListsReq, v0alpha.GetComplianceScrubListsRes](
			httpClient,
			baseURL+LMSGetComplianceScrubListsProcedure,
			opts...,
		),
		findFieldUsages: connect_go.NewClient[v0alpha.FindFieldUsagesReq, v0alpha.FindFieldUsagesRes](
			httpClient,
			baseURL+LMSFindFieldUsagesProcedure,
			opts...,
		),
		findInvalidElements: connect_go.NewClient[v0alpha.FindInvalidElementsReq, v0alpha.FindInvalidElementsRes](
			httpClient,
			baseURL+LMSFindInvalidElementsProcedure,
			opts...,
		),
		createCollection: connect_go.NewClient[v0alpha.CollectionMetadata, v0alpha.CollectionMetadata](
			httpClient,
			baseURL+LMSCreateCollectionProcedure,
			opts...,
		),
		getCollection: connect_go.NewClient[v0alpha.GetCollectionReq, v0alpha.CollectionMetadata](
			httpClient,
			baseURL+LMSGetCollectionProcedure,
			opts...,
		),
		updateCollection: connect_go.NewClient[v0alpha.CollectionMetadata, emptypb.Empty](
			httpClient,
			baseURL+LMSUpdateCollectionProcedure,
			opts...,
		),
		retypeCollection: connect_go.NewClient[v0alpha.RetypeCollectionReq, v0alpha.RetypeCollectionRes](
			httpClient,
			baseURL+LMSRetypeCollectionProcedure,
			opts...,
		),
		deleteCollection: connect_go.NewClient[v0alpha.DeleteCollectionReq, emptypb.Empty](
			httpClient,
			baseURL+LMSDeleteCollectionProcedure,
			opts...,
		),
		listCollections: connect_go.NewClient[v0alpha.ListCollectionsReq, v0alpha.ListCollectionsRes](
			httpClient,
			baseURL+LMSListCollectionsProcedure,
			opts...,
		),
		resetCollection: connect_go.NewClient[v0alpha.ResetCollectionReq, emptypb.Empty](
			httpClient,
			baseURL+LMSResetCollectionProcedure,
			opts...,
		),
		addCollectionEntry: connect_go.NewClient[v0alpha.CollectionEntry, v0alpha.CollectionEntry](
			httpClient,
			baseURL+LMSAddCollectionEntryProcedure,
			opts...,
		),
		deleteCollectionEntry: connect_go.NewClient[v0alpha.DeleteCollectionEntryReq, emptypb.Empty](
			httpClient,
			baseURL+LMSDeleteCollectionEntryProcedure,
			opts...,
		),
		updateCollectionEntry: connect_go.NewClient[v0alpha.CollectionEntry, v0alpha.CollectionEntry](
			httpClient,
			baseURL+LMSUpdateCollectionEntryProcedure,
			opts...,
		),
		streamCollection: connect_go.NewClient[v0alpha.StreamCollectionReq, v0alpha.CollectionEntry](
			httpClient,
			baseURL+LMSStreamCollectionProcedure,
			opts...,
		),
		searchCollectionsPaginated: connect_go.NewClient[v0alpha.SearchCollectionsPaginatedReq, v0alpha.PaginatedSearchRes](
			httpClient,
			baseURL+LMSSearchCollectionsPaginatedProcedure,
			opts...,
		),
		getCollectionEntries: connect_go.NewClient[v0alpha.GetCollectionEntriesReq, v0alpha.GetCollectionEntriesRes](
			httpClient,
			baseURL+LMSGetCollectionEntriesProcedure,
			opts...,
		),
		createCjsSearchDefinition: connect_go.NewClient[v0alpha.CjsSearchDefinition, v0alpha.CjsSearchDefinition](
			httpClient,
			baseURL+LMSCreateCjsSearchDefinitionProcedure,
			opts...,
		),
		getCjsSearchDefinition: connect_go.NewClient[v0alpha.GetCjsSearchDefinitionReq, v0alpha.CjsSearchDefinition](
			httpClient,
			baseURL+LMSGetCjsSearchDefinitionProcedure,
			opts...,
		),
		updateCjsSearchDefinition: connect_go.NewClient[v0alpha.CjsSearchDefinition, emptypb.Empty](
			httpClient,
			baseURL+LMSUpdateCjsSearchDefinitionProcedure,
			opts...,
		),
		deleteCjsSearchDefinition: connect_go.NewClient[v0alpha.DeleteCjsSearchDefinitionReq, emptypb.Empty](
			httpClient,
			baseURL+LMSDeleteCjsSearchDefinitionProcedure,
			opts...,
		),
		listCjsSearchDefinitions: connect_go.NewClient[v0alpha.ListCjsSearchDefinitionsReq, v0alpha.ListCjsSearchDefinitionsRes](
			httpClient,
			baseURL+LMSListCjsSearchDefinitionsProcedure,
			opts...,
		),
		executeCjsSearchDefinition: connect_go.NewClient[v0alpha.ExecuteCjsSearchDefinitionReq, v0alpha.ExecuteCjsSearchDefinitionRes](
			httpClient,
			baseURL+LMSExecuteCjsSearchDefinitionProcedure,
			opts...,
		),
		getCjsSecureSearchCriteria: connect_go.NewClient[v0alpha.GetCjsSecureSearchCriteriaReq, v0alpha.CjsSecureSearchCriteria](
			httpClient,
			baseURL+LMSGetCjsSecureSearchCriteriaProcedure,
			opts...,
		),
		createCjsSecureSearchCriteria: connect_go.NewClient[v0alpha.CjsSecureSearchCriteria, v0alpha.CjsSecureSearchCriteria](
			httpClient,
			baseURL+LMSCreateCjsSecureSearchCriteriaProcedure,
			opts...,
		),
		updateCjsSecureSearchCriteria: connect_go.NewClient[v0alpha.CjsSecureSearchCriteria, emptypb.Empty](
			httpClient,
			baseURL+LMSUpdateCjsSecureSearchCriteriaProcedure,
			opts...,
		),
		sampleEndpoint: connect_go.NewClient[v0alpha.SampleRequest, emptypb.Empty](
			httpClient,
			baseURL+LMSSampleEndpointProcedure,
			opts...,
		),
		getAvailableEHRFields: connect_go.NewClient[v0alpha.EHREntityType, v0alpha.Fields](
			httpClient,
			baseURL+LMSGetAvailableEHRFieldsProcedure,
			opts...,
		),
		getQueuedEventsStatusByElementId: connect_go.NewClient[v0alpha.ElementPK, v0alpha.Events](
			httpClient,
			baseURL+LMSGetQueuedEventsStatusByElementIdProcedure,
			opts...,
		),
		listPools: connect_go.NewClient[v0alpha.ListPoolsRequest, v0alpha.ListPoolsResponse](
			httpClient,
			baseURL+LMSListPoolsProcedure,
			opts...,
		),
	}
}

// lMSClient implements LMSClient.
type lMSClient struct {
	getPublicKey                     *connect_go.Client[v0alpha.GetPublicKeyReq, v0alpha.PublicKey]
	createFileTemplate               *connect_go.Client[v0alpha.FileTemplate, v0alpha.FileTemplate]
	listFileTemplates                *connect_go.Client[v0alpha.GetFileTemplatesReq, v0alpha.FileTemplate]
	updateFileTemplate               *connect_go.Client[v0alpha.FileTemplate, v0alpha.FileTemplate]
	deleteFileTemplate               *connect_go.Client[v0alpha.FileTemplate, v0alpha.FileTemplate]
	getFileTemplate                  *connect_go.Client[v0alpha.FileTemplate, v0alpha.FileTemplate]
	createField                      *connect_go.Client[v0alpha.Field, v0alpha.Field]
	listFields                       *connect_go.Client[v0alpha.ListFieldsReq, v0alpha.Fields]
	getField                         *connect_go.Client[v0alpha.Field, v0alpha.Field]
	updateField                      *connect_go.Client[v0alpha.UpdateFieldReq, v0alpha.Field]
	deleteField                      *connect_go.Client[v0alpha.Field, v0alpha.Field]
	listAvailableFieldsByElementId   *connect_go.Client[v0alpha.ListAvailableFieldsByElementIdReq, v0alpha.ProcessFields]
	listFieldsForElement             *connect_go.Client[v0alpha.ListFieldsForElementReq, v0alpha.ListFieldsForElementRes]
	listAutocompleteFields           *connect_go.Client[v0alpha.ListAutocompleteFieldsReq, v0alpha.ListAutocompleteFieldsRes]
	listCampaignLinks                *connect_go.Client[emptypb.Empty, v0alpha.ListCampaignLinksRes]
	peekList                         *connect_go.Client[v0alpha.PeekListReq, v0alpha.PeekListRes]
	getHistory                       *connect_go.Client[v0alpha.GetHistoryReq, v0alpha.GetHistoryRes]
	createElement                    *connect_go.Client[v0alpha.Element, v0alpha.Element]
	listElements                     *connect_go.Client[v0alpha.ListElementsReq, v0alpha.Element]
	getElement                       *connect_go.Client[v0alpha.ElementPK, v0alpha.Element]
	updateElement                    *connect_go.Client[v0alpha.Element, v0alpha.Element]
	deleteElement                    *connect_go.Client[v0alpha.Element, v0alpha.Element]
	copyPipelineUpstream             *connect_go.Client[v0alpha.Element, v0alpha.Element]
	copyPipelineDownstream           *connect_go.Client[v0alpha.Element, v0alpha.Element]
	processElement                   *connect_go.Client[v0alpha.ProcessElementReq, emptypb.Empty]
	processList                      *connect_go.Client[v0alpha.ProcessListRequest, v0alpha.ProcessListResponse]
	streamList                       *connect_go.Client[v0alpha.StreamListRequest, v0alpha.StreamListResponse]
	getAvailableFields               *connect_go.Client[emptypb.Empty, v0alpha.ProcessFields]
	listNewEvents                    *connect_go.Client[emptypb.Empty, v0alpha.Events]
	viewQueue                        *connect_go.Client[v0alpha.ViewQueueReq, v0alpha.Events]
	autocomplete                     *connect_go.Client[v0alpha.ParseReq, v0alpha.ParseRes]
	getComplianceScrubLists          *connect_go.Client[v0alpha.GetComplianceScrubListsReq, v0alpha.GetComplianceScrubListsRes]
	findFieldUsages                  *connect_go.Client[v0alpha.FindFieldUsagesReq, v0alpha.FindFieldUsagesRes]
	findInvalidElements              *connect_go.Client[v0alpha.FindInvalidElementsReq, v0alpha.FindInvalidElementsRes]
	createCollection                 *connect_go.Client[v0alpha.CollectionMetadata, v0alpha.CollectionMetadata]
	getCollection                    *connect_go.Client[v0alpha.GetCollectionReq, v0alpha.CollectionMetadata]
	updateCollection                 *connect_go.Client[v0alpha.CollectionMetadata, emptypb.Empty]
	retypeCollection                 *connect_go.Client[v0alpha.RetypeCollectionReq, v0alpha.RetypeCollectionRes]
	deleteCollection                 *connect_go.Client[v0alpha.DeleteCollectionReq, emptypb.Empty]
	listCollections                  *connect_go.Client[v0alpha.ListCollectionsReq, v0alpha.ListCollectionsRes]
	resetCollection                  *connect_go.Client[v0alpha.ResetCollectionReq, emptypb.Empty]
	addCollectionEntry               *connect_go.Client[v0alpha.CollectionEntry, v0alpha.CollectionEntry]
	deleteCollectionEntry            *connect_go.Client[v0alpha.DeleteCollectionEntryReq, emptypb.Empty]
	updateCollectionEntry            *connect_go.Client[v0alpha.CollectionEntry, v0alpha.CollectionEntry]
	streamCollection                 *connect_go.Client[v0alpha.StreamCollectionReq, v0alpha.CollectionEntry]
	searchCollectionsPaginated       *connect_go.Client[v0alpha.SearchCollectionsPaginatedReq, v0alpha.PaginatedSearchRes]
	getCollectionEntries             *connect_go.Client[v0alpha.GetCollectionEntriesReq, v0alpha.GetCollectionEntriesRes]
	createCjsSearchDefinition        *connect_go.Client[v0alpha.CjsSearchDefinition, v0alpha.CjsSearchDefinition]
	getCjsSearchDefinition           *connect_go.Client[v0alpha.GetCjsSearchDefinitionReq, v0alpha.CjsSearchDefinition]
	updateCjsSearchDefinition        *connect_go.Client[v0alpha.CjsSearchDefinition, emptypb.Empty]
	deleteCjsSearchDefinition        *connect_go.Client[v0alpha.DeleteCjsSearchDefinitionReq, emptypb.Empty]
	listCjsSearchDefinitions         *connect_go.Client[v0alpha.ListCjsSearchDefinitionsReq, v0alpha.ListCjsSearchDefinitionsRes]
	executeCjsSearchDefinition       *connect_go.Client[v0alpha.ExecuteCjsSearchDefinitionReq, v0alpha.ExecuteCjsSearchDefinitionRes]
	getCjsSecureSearchCriteria       *connect_go.Client[v0alpha.GetCjsSecureSearchCriteriaReq, v0alpha.CjsSecureSearchCriteria]
	createCjsSecureSearchCriteria    *connect_go.Client[v0alpha.CjsSecureSearchCriteria, v0alpha.CjsSecureSearchCriteria]
	updateCjsSecureSearchCriteria    *connect_go.Client[v0alpha.CjsSecureSearchCriteria, emptypb.Empty]
	sampleEndpoint                   *connect_go.Client[v0alpha.SampleRequest, emptypb.Empty]
	getAvailableEHRFields            *connect_go.Client[v0alpha.EHREntityType, v0alpha.Fields]
	getQueuedEventsStatusByElementId *connect_go.Client[v0alpha.ElementPK, v0alpha.Events]
	listPools                        *connect_go.Client[v0alpha.ListPoolsRequest, v0alpha.ListPoolsResponse]
}

// GetPublicKey calls api.v0alpha.LMS.GetPublicKey.
func (c *lMSClient) GetPublicKey(ctx context.Context, req *connect_go.Request[v0alpha.GetPublicKeyReq]) (*connect_go.Response[v0alpha.PublicKey], error) {
	return c.getPublicKey.CallUnary(ctx, req)
}

// CreateFileTemplate calls api.v0alpha.LMS.CreateFileTemplate.
func (c *lMSClient) CreateFileTemplate(ctx context.Context, req *connect_go.Request[v0alpha.FileTemplate]) (*connect_go.Response[v0alpha.FileTemplate], error) {
	return c.createFileTemplate.CallUnary(ctx, req)
}

// ListFileTemplates calls api.v0alpha.LMS.ListFileTemplates.
func (c *lMSClient) ListFileTemplates(ctx context.Context, req *connect_go.Request[v0alpha.GetFileTemplatesReq]) (*connect_go.ServerStreamForClient[v0alpha.FileTemplate], error) {
	return c.listFileTemplates.CallServerStream(ctx, req)
}

// UpdateFileTemplate calls api.v0alpha.LMS.UpdateFileTemplate.
func (c *lMSClient) UpdateFileTemplate(ctx context.Context, req *connect_go.Request[v0alpha.FileTemplate]) (*connect_go.Response[v0alpha.FileTemplate], error) {
	return c.updateFileTemplate.CallUnary(ctx, req)
}

// DeleteFileTemplate calls api.v0alpha.LMS.DeleteFileTemplate.
func (c *lMSClient) DeleteFileTemplate(ctx context.Context, req *connect_go.Request[v0alpha.FileTemplate]) (*connect_go.Response[v0alpha.FileTemplate], error) {
	return c.deleteFileTemplate.CallUnary(ctx, req)
}

// GetFileTemplate calls api.v0alpha.LMS.GetFileTemplate.
func (c *lMSClient) GetFileTemplate(ctx context.Context, req *connect_go.Request[v0alpha.FileTemplate]) (*connect_go.Response[v0alpha.FileTemplate], error) {
	return c.getFileTemplate.CallUnary(ctx, req)
}

// CreateField calls api.v0alpha.LMS.CreateField.
func (c *lMSClient) CreateField(ctx context.Context, req *connect_go.Request[v0alpha.Field]) (*connect_go.Response[v0alpha.Field], error) {
	return c.createField.CallUnary(ctx, req)
}

// ListFields calls api.v0alpha.LMS.ListFields.
func (c *lMSClient) ListFields(ctx context.Context, req *connect_go.Request[v0alpha.ListFieldsReq]) (*connect_go.Response[v0alpha.Fields], error) {
	return c.listFields.CallUnary(ctx, req)
}

// GetField calls api.v0alpha.LMS.GetField.
func (c *lMSClient) GetField(ctx context.Context, req *connect_go.Request[v0alpha.Field]) (*connect_go.Response[v0alpha.Field], error) {
	return c.getField.CallUnary(ctx, req)
}

// UpdateField calls api.v0alpha.LMS.UpdateField.
func (c *lMSClient) UpdateField(ctx context.Context, req *connect_go.Request[v0alpha.UpdateFieldReq]) (*connect_go.Response[v0alpha.Field], error) {
	return c.updateField.CallUnary(ctx, req)
}

// DeleteField calls api.v0alpha.LMS.DeleteField.
func (c *lMSClient) DeleteField(ctx context.Context, req *connect_go.Request[v0alpha.Field]) (*connect_go.Response[v0alpha.Field], error) {
	return c.deleteField.CallUnary(ctx, req)
}

// ListAvailableFieldsByElementId calls api.v0alpha.LMS.ListAvailableFieldsByElementId.
func (c *lMSClient) ListAvailableFieldsByElementId(ctx context.Context, req *connect_go.Request[v0alpha.ListAvailableFieldsByElementIdReq]) (*connect_go.Response[v0alpha.ProcessFields], error) {
	return c.listAvailableFieldsByElementId.CallUnary(ctx, req)
}

// ListFieldsForElement calls api.v0alpha.LMS.ListFieldsForElement.
func (c *lMSClient) ListFieldsForElement(ctx context.Context, req *connect_go.Request[v0alpha.ListFieldsForElementReq]) (*connect_go.Response[v0alpha.ListFieldsForElementRes], error) {
	return c.listFieldsForElement.CallUnary(ctx, req)
}

// ListAutocompleteFields calls api.v0alpha.LMS.ListAutocompleteFields.
func (c *lMSClient) ListAutocompleteFields(ctx context.Context, req *connect_go.Request[v0alpha.ListAutocompleteFieldsReq]) (*connect_go.Response[v0alpha.ListAutocompleteFieldsRes], error) {
	return c.listAutocompleteFields.CallUnary(ctx, req)
}

// ListCampaignLinks calls api.v0alpha.LMS.ListCampaignLinks.
func (c *lMSClient) ListCampaignLinks(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v0alpha.ListCampaignLinksRes], error) {
	return c.listCampaignLinks.CallUnary(ctx, req)
}

// PeekList calls api.v0alpha.LMS.PeekList.
func (c *lMSClient) PeekList(ctx context.Context, req *connect_go.Request[v0alpha.PeekListReq]) (*connect_go.Response[v0alpha.PeekListRes], error) {
	return c.peekList.CallUnary(ctx, req)
}

// GetHistory calls api.v0alpha.LMS.GetHistory.
func (c *lMSClient) GetHistory(ctx context.Context, req *connect_go.Request[v0alpha.GetHistoryReq]) (*connect_go.Response[v0alpha.GetHistoryRes], error) {
	return c.getHistory.CallUnary(ctx, req)
}

// CreateElement calls api.v0alpha.LMS.CreateElement.
func (c *lMSClient) CreateElement(ctx context.Context, req *connect_go.Request[v0alpha.Element]) (*connect_go.Response[v0alpha.Element], error) {
	return c.createElement.CallUnary(ctx, req)
}

// ListElements calls api.v0alpha.LMS.ListElements.
func (c *lMSClient) ListElements(ctx context.Context, req *connect_go.Request[v0alpha.ListElementsReq]) (*connect_go.ServerStreamForClient[v0alpha.Element], error) {
	return c.listElements.CallServerStream(ctx, req)
}

// GetElement calls api.v0alpha.LMS.GetElement.
func (c *lMSClient) GetElement(ctx context.Context, req *connect_go.Request[v0alpha.ElementPK]) (*connect_go.Response[v0alpha.Element], error) {
	return c.getElement.CallUnary(ctx, req)
}

// UpdateElement calls api.v0alpha.LMS.UpdateElement.
func (c *lMSClient) UpdateElement(ctx context.Context, req *connect_go.Request[v0alpha.Element]) (*connect_go.Response[v0alpha.Element], error) {
	return c.updateElement.CallUnary(ctx, req)
}

// DeleteElement calls api.v0alpha.LMS.DeleteElement.
func (c *lMSClient) DeleteElement(ctx context.Context, req *connect_go.Request[v0alpha.Element]) (*connect_go.Response[v0alpha.Element], error) {
	return c.deleteElement.CallUnary(ctx, req)
}

// CopyPipelineUpstream calls api.v0alpha.LMS.CopyPipelineUpstream.
func (c *lMSClient) CopyPipelineUpstream(ctx context.Context, req *connect_go.Request[v0alpha.Element]) (*connect_go.ServerStreamForClient[v0alpha.Element], error) {
	return c.copyPipelineUpstream.CallServerStream(ctx, req)
}

// CopyPipelineDownstream calls api.v0alpha.LMS.CopyPipelineDownstream.
func (c *lMSClient) CopyPipelineDownstream(ctx context.Context, req *connect_go.Request[v0alpha.Element]) (*connect_go.ServerStreamForClient[v0alpha.Element], error) {
	return c.copyPipelineDownstream.CallServerStream(ctx, req)
}

// ProcessElement calls api.v0alpha.LMS.ProcessElement.
func (c *lMSClient) ProcessElement(ctx context.Context, req *connect_go.Request[v0alpha.ProcessElementReq]) (*connect_go.Response[emptypb.Empty], error) {
	return c.processElement.CallUnary(ctx, req)
}

// ProcessList calls api.v0alpha.LMS.ProcessList.
func (c *lMSClient) ProcessList(ctx context.Context, req *connect_go.Request[v0alpha.ProcessListRequest]) (*connect_go.Response[v0alpha.ProcessListResponse], error) {
	return c.processList.CallUnary(ctx, req)
}

// StreamList calls api.v0alpha.LMS.StreamList.
func (c *lMSClient) StreamList(ctx context.Context) *connect_go.ClientStreamForClient[v0alpha.StreamListRequest, v0alpha.StreamListResponse] {
	return c.streamList.CallClientStream(ctx)
}

// GetAvailableFields calls api.v0alpha.LMS.GetAvailableFields.
func (c *lMSClient) GetAvailableFields(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v0alpha.ProcessFields], error) {
	return c.getAvailableFields.CallUnary(ctx, req)
}

// ListNewEvents calls api.v0alpha.LMS.ListNewEvents.
func (c *lMSClient) ListNewEvents(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v0alpha.Events], error) {
	return c.listNewEvents.CallUnary(ctx, req)
}

// ViewQueue calls api.v0alpha.LMS.ViewQueue.
func (c *lMSClient) ViewQueue(ctx context.Context, req *connect_go.Request[v0alpha.ViewQueueReq]) (*connect_go.Response[v0alpha.Events], error) {
	return c.viewQueue.CallUnary(ctx, req)
}

// Autocomplete calls api.v0alpha.LMS.Autocomplete.
func (c *lMSClient) Autocomplete(ctx context.Context, req *connect_go.Request[v0alpha.ParseReq]) (*connect_go.Response[v0alpha.ParseRes], error) {
	return c.autocomplete.CallUnary(ctx, req)
}

// GetComplianceScrubLists calls api.v0alpha.LMS.GetComplianceScrubLists.
func (c *lMSClient) GetComplianceScrubLists(ctx context.Context, req *connect_go.Request[v0alpha.GetComplianceScrubListsReq]) (*connect_go.Response[v0alpha.GetComplianceScrubListsRes], error) {
	return c.getComplianceScrubLists.CallUnary(ctx, req)
}

// FindFieldUsages calls api.v0alpha.LMS.FindFieldUsages.
func (c *lMSClient) FindFieldUsages(ctx context.Context, req *connect_go.Request[v0alpha.FindFieldUsagesReq]) (*connect_go.Response[v0alpha.FindFieldUsagesRes], error) {
	return c.findFieldUsages.CallUnary(ctx, req)
}

// FindInvalidElements calls api.v0alpha.LMS.FindInvalidElements.
func (c *lMSClient) FindInvalidElements(ctx context.Context, req *connect_go.Request[v0alpha.FindInvalidElementsReq]) (*connect_go.Response[v0alpha.FindInvalidElementsRes], error) {
	return c.findInvalidElements.CallUnary(ctx, req)
}

// CreateCollection calls api.v0alpha.LMS.CreateCollection.
func (c *lMSClient) CreateCollection(ctx context.Context, req *connect_go.Request[v0alpha.CollectionMetadata]) (*connect_go.Response[v0alpha.CollectionMetadata], error) {
	return c.createCollection.CallUnary(ctx, req)
}

// GetCollection calls api.v0alpha.LMS.GetCollection.
func (c *lMSClient) GetCollection(ctx context.Context, req *connect_go.Request[v0alpha.GetCollectionReq]) (*connect_go.Response[v0alpha.CollectionMetadata], error) {
	return c.getCollection.CallUnary(ctx, req)
}

// UpdateCollection calls api.v0alpha.LMS.UpdateCollection.
func (c *lMSClient) UpdateCollection(ctx context.Context, req *connect_go.Request[v0alpha.CollectionMetadata]) (*connect_go.Response[emptypb.Empty], error) {
	return c.updateCollection.CallUnary(ctx, req)
}

// RetypeCollection calls api.v0alpha.LMS.RetypeCollection.
func (c *lMSClient) RetypeCollection(ctx context.Context, req *connect_go.Request[v0alpha.RetypeCollectionReq]) (*connect_go.Response[v0alpha.RetypeCollectionRes], error) {
	return c.retypeCollection.CallUnary(ctx, req)
}

// DeleteCollection calls api.v0alpha.LMS.DeleteCollection.
func (c *lMSClient) DeleteCollection(ctx context.Context, req *connect_go.Request[v0alpha.DeleteCollectionReq]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteCollection.CallUnary(ctx, req)
}

// ListCollections calls api.v0alpha.LMS.ListCollections.
func (c *lMSClient) ListCollections(ctx context.Context, req *connect_go.Request[v0alpha.ListCollectionsReq]) (*connect_go.Response[v0alpha.ListCollectionsRes], error) {
	return c.listCollections.CallUnary(ctx, req)
}

// ResetCollection calls api.v0alpha.LMS.ResetCollection.
func (c *lMSClient) ResetCollection(ctx context.Context, req *connect_go.Request[v0alpha.ResetCollectionReq]) (*connect_go.Response[emptypb.Empty], error) {
	return c.resetCollection.CallUnary(ctx, req)
}

// AddCollectionEntry calls api.v0alpha.LMS.AddCollectionEntry.
func (c *lMSClient) AddCollectionEntry(ctx context.Context, req *connect_go.Request[v0alpha.CollectionEntry]) (*connect_go.Response[v0alpha.CollectionEntry], error) {
	return c.addCollectionEntry.CallUnary(ctx, req)
}

// DeleteCollectionEntry calls api.v0alpha.LMS.DeleteCollectionEntry.
func (c *lMSClient) DeleteCollectionEntry(ctx context.Context, req *connect_go.Request[v0alpha.DeleteCollectionEntryReq]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteCollectionEntry.CallUnary(ctx, req)
}

// UpdateCollectionEntry calls api.v0alpha.LMS.UpdateCollectionEntry.
func (c *lMSClient) UpdateCollectionEntry(ctx context.Context, req *connect_go.Request[v0alpha.CollectionEntry]) (*connect_go.Response[v0alpha.CollectionEntry], error) {
	return c.updateCollectionEntry.CallUnary(ctx, req)
}

// StreamCollection calls api.v0alpha.LMS.StreamCollection.
func (c *lMSClient) StreamCollection(ctx context.Context, req *connect_go.Request[v0alpha.StreamCollectionReq]) (*connect_go.ServerStreamForClient[v0alpha.CollectionEntry], error) {
	return c.streamCollection.CallServerStream(ctx, req)
}

// SearchCollectionsPaginated calls api.v0alpha.LMS.SearchCollectionsPaginated.
func (c *lMSClient) SearchCollectionsPaginated(ctx context.Context, req *connect_go.Request[v0alpha.SearchCollectionsPaginatedReq]) (*connect_go.Response[v0alpha.PaginatedSearchRes], error) {
	return c.searchCollectionsPaginated.CallUnary(ctx, req)
}

// GetCollectionEntries calls api.v0alpha.LMS.GetCollectionEntries.
func (c *lMSClient) GetCollectionEntries(ctx context.Context, req *connect_go.Request[v0alpha.GetCollectionEntriesReq]) (*connect_go.Response[v0alpha.GetCollectionEntriesRes], error) {
	return c.getCollectionEntries.CallUnary(ctx, req)
}

// CreateCjsSearchDefinition calls api.v0alpha.LMS.CreateCjsSearchDefinition.
func (c *lMSClient) CreateCjsSearchDefinition(ctx context.Context, req *connect_go.Request[v0alpha.CjsSearchDefinition]) (*connect_go.Response[v0alpha.CjsSearchDefinition], error) {
	return c.createCjsSearchDefinition.CallUnary(ctx, req)
}

// GetCjsSearchDefinition calls api.v0alpha.LMS.GetCjsSearchDefinition.
func (c *lMSClient) GetCjsSearchDefinition(ctx context.Context, req *connect_go.Request[v0alpha.GetCjsSearchDefinitionReq]) (*connect_go.Response[v0alpha.CjsSearchDefinition], error) {
	return c.getCjsSearchDefinition.CallUnary(ctx, req)
}

// UpdateCjsSearchDefinition calls api.v0alpha.LMS.UpdateCjsSearchDefinition.
func (c *lMSClient) UpdateCjsSearchDefinition(ctx context.Context, req *connect_go.Request[v0alpha.CjsSearchDefinition]) (*connect_go.Response[emptypb.Empty], error) {
	return c.updateCjsSearchDefinition.CallUnary(ctx, req)
}

// DeleteCjsSearchDefinition calls api.v0alpha.LMS.DeleteCjsSearchDefinition.
func (c *lMSClient) DeleteCjsSearchDefinition(ctx context.Context, req *connect_go.Request[v0alpha.DeleteCjsSearchDefinitionReq]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteCjsSearchDefinition.CallUnary(ctx, req)
}

// ListCjsSearchDefinitions calls api.v0alpha.LMS.ListCjsSearchDefinitions.
func (c *lMSClient) ListCjsSearchDefinitions(ctx context.Context, req *connect_go.Request[v0alpha.ListCjsSearchDefinitionsReq]) (*connect_go.Response[v0alpha.ListCjsSearchDefinitionsRes], error) {
	return c.listCjsSearchDefinitions.CallUnary(ctx, req)
}

// ExecuteCjsSearchDefinition calls api.v0alpha.LMS.ExecuteCjsSearchDefinition.
func (c *lMSClient) ExecuteCjsSearchDefinition(ctx context.Context, req *connect_go.Request[v0alpha.ExecuteCjsSearchDefinitionReq]) (*connect_go.Response[v0alpha.ExecuteCjsSearchDefinitionRes], error) {
	return c.executeCjsSearchDefinition.CallUnary(ctx, req)
}

// GetCjsSecureSearchCriteria calls api.v0alpha.LMS.GetCjsSecureSearchCriteria.
func (c *lMSClient) GetCjsSecureSearchCriteria(ctx context.Context, req *connect_go.Request[v0alpha.GetCjsSecureSearchCriteriaReq]) (*connect_go.Response[v0alpha.CjsSecureSearchCriteria], error) {
	return c.getCjsSecureSearchCriteria.CallUnary(ctx, req)
}

// CreateCjsSecureSearchCriteria calls api.v0alpha.LMS.CreateCjsSecureSearchCriteria.
func (c *lMSClient) CreateCjsSecureSearchCriteria(ctx context.Context, req *connect_go.Request[v0alpha.CjsSecureSearchCriteria]) (*connect_go.Response[v0alpha.CjsSecureSearchCriteria], error) {
	return c.createCjsSecureSearchCriteria.CallUnary(ctx, req)
}

// UpdateCjsSecureSearchCriteria calls api.v0alpha.LMS.UpdateCjsSecureSearchCriteria.
func (c *lMSClient) UpdateCjsSecureSearchCriteria(ctx context.Context, req *connect_go.Request[v0alpha.CjsSecureSearchCriteria]) (*connect_go.Response[emptypb.Empty], error) {
	return c.updateCjsSecureSearchCriteria.CallUnary(ctx, req)
}

// SampleEndpoint calls api.v0alpha.LMS.SampleEndpoint.
func (c *lMSClient) SampleEndpoint(ctx context.Context, req *connect_go.Request[v0alpha.SampleRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.sampleEndpoint.CallUnary(ctx, req)
}

// GetAvailableEHRFields calls api.v0alpha.LMS.GetAvailableEHRFields.
func (c *lMSClient) GetAvailableEHRFields(ctx context.Context, req *connect_go.Request[v0alpha.EHREntityType]) (*connect_go.Response[v0alpha.Fields], error) {
	return c.getAvailableEHRFields.CallUnary(ctx, req)
}

// GetQueuedEventsStatusByElementId calls api.v0alpha.LMS.GetQueuedEventsStatusByElementId.
func (c *lMSClient) GetQueuedEventsStatusByElementId(ctx context.Context, req *connect_go.Request[v0alpha.ElementPK]) (*connect_go.Response[v0alpha.Events], error) {
	return c.getQueuedEventsStatusByElementId.CallUnary(ctx, req)
}

// ListPools calls api.v0alpha.LMS.ListPools.
func (c *lMSClient) ListPools(ctx context.Context, req *connect_go.Request[v0alpha.ListPoolsRequest]) (*connect_go.Response[v0alpha.ListPoolsResponse], error) {
	return c.listPools.CallUnary(ctx, req)
}

// LMSHandler is an implementation of the api.v0alpha.LMS service.
type LMSHandler interface {
	GetPublicKey(context.Context, *connect_go.Request[v0alpha.GetPublicKeyReq]) (*connect_go.Response[v0alpha.PublicKey], error)
	CreateFileTemplate(context.Context, *connect_go.Request[v0alpha.FileTemplate]) (*connect_go.Response[v0alpha.FileTemplate], error)
	ListFileTemplates(context.Context, *connect_go.Request[v0alpha.GetFileTemplatesReq], *connect_go.ServerStream[v0alpha.FileTemplate]) error
	UpdateFileTemplate(context.Context, *connect_go.Request[v0alpha.FileTemplate]) (*connect_go.Response[v0alpha.FileTemplate], error)
	DeleteFileTemplate(context.Context, *connect_go.Request[v0alpha.FileTemplate]) (*connect_go.Response[v0alpha.FileTemplate], error)
	GetFileTemplate(context.Context, *connect_go.Request[v0alpha.FileTemplate]) (*connect_go.Response[v0alpha.FileTemplate], error)
	CreateField(context.Context, *connect_go.Request[v0alpha.Field]) (*connect_go.Response[v0alpha.Field], error)
	ListFields(context.Context, *connect_go.Request[v0alpha.ListFieldsReq]) (*connect_go.Response[v0alpha.Fields], error)
	GetField(context.Context, *connect_go.Request[v0alpha.Field]) (*connect_go.Response[v0alpha.Field], error)
	UpdateField(context.Context, *connect_go.Request[v0alpha.UpdateFieldReq]) (*connect_go.Response[v0alpha.Field], error)
	DeleteField(context.Context, *connect_go.Request[v0alpha.Field]) (*connect_go.Response[v0alpha.Field], error)
	ListAvailableFieldsByElementId(context.Context, *connect_go.Request[v0alpha.ListAvailableFieldsByElementIdReq]) (*connect_go.Response[v0alpha.ProcessFields], error)
	ListFieldsForElement(context.Context, *connect_go.Request[v0alpha.ListFieldsForElementReq]) (*connect_go.Response[v0alpha.ListFieldsForElementRes], error)
	ListAutocompleteFields(context.Context, *connect_go.Request[v0alpha.ListAutocompleteFieldsReq]) (*connect_go.Response[v0alpha.ListAutocompleteFieldsRes], error)
	// list campaign links and descriptions
	ListCampaignLinks(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v0alpha.ListCampaignLinksRes], error)
	PeekList(context.Context, *connect_go.Request[v0alpha.PeekListReq]) (*connect_go.Response[v0alpha.PeekListRes], error)
	GetHistory(context.Context, *connect_go.Request[v0alpha.GetHistoryReq]) (*connect_go.Response[v0alpha.GetHistoryRes], error)
	CreateElement(context.Context, *connect_go.Request[v0alpha.Element]) (*connect_go.Response[v0alpha.Element], error)
	ListElements(context.Context, *connect_go.Request[v0alpha.ListElementsReq], *connect_go.ServerStream[v0alpha.Element]) error
	GetElement(context.Context, *connect_go.Request[v0alpha.ElementPK]) (*connect_go.Response[v0alpha.Element], error)
	UpdateElement(context.Context, *connect_go.Request[v0alpha.Element]) (*connect_go.Response[v0alpha.Element], error)
	DeleteElement(context.Context, *connect_go.Request[v0alpha.Element]) (*connect_go.Response[v0alpha.Element], error)
	// CopyPipelineUpstream copies an Element and all of its' parents
	CopyPipelineUpstream(context.Context, *connect_go.Request[v0alpha.Element], *connect_go.ServerStream[v0alpha.Element]) error
	// CopyPipelineDownstream copies an Element and all of its' children
	CopyPipelineDownstream(context.Context, *connect_go.Request[v0alpha.Element], *connect_go.ServerStream[v0alpha.Element]) error
	ProcessElement(context.Context, *connect_go.Request[v0alpha.ProcessElementReq]) (*connect_go.Response[emptypb.Empty], error)
	ProcessList(context.Context, *connect_go.Request[v0alpha.ProcessListRequest]) (*connect_go.Response[v0alpha.ProcessListResponse], error)
	StreamList(context.Context, *connect_go.ClientStream[v0alpha.StreamListRequest]) (*connect_go.Response[v0alpha.StreamListResponse], error)
	GetAvailableFields(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v0alpha.ProcessFields], error)
	// returns queue events for the last 30 minutes
	ListNewEvents(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v0alpha.Events], error)
	ViewQueue(context.Context, *connect_go.Request[v0alpha.ViewQueueReq]) (*connect_go.Response[v0alpha.Events], error)
	Autocomplete(context.Context, *connect_go.Request[v0alpha.ParseReq]) (*connect_go.Response[v0alpha.ParseRes], error)
	GetComplianceScrubLists(context.Context, *connect_go.Request[v0alpha.GetComplianceScrubListsReq]) (*connect_go.Response[v0alpha.GetComplianceScrubListsRes], error)
	FindFieldUsages(context.Context, *connect_go.Request[v0alpha.FindFieldUsagesReq]) (*connect_go.Response[v0alpha.FindFieldUsagesRes], error)
	FindInvalidElements(context.Context, *connect_go.Request[v0alpha.FindInvalidElementsReq]) (*connect_go.Response[v0alpha.FindInvalidElementsRes], error)
	// CJS calls
	CreateCollection(context.Context, *connect_go.Request[v0alpha.CollectionMetadata]) (*connect_go.Response[v0alpha.CollectionMetadata], error)
	GetCollection(context.Context, *connect_go.Request[v0alpha.GetCollectionReq]) (*connect_go.Response[v0alpha.CollectionMetadata], error)
	UpdateCollection(context.Context, *connect_go.Request[v0alpha.CollectionMetadata]) (*connect_go.Response[emptypb.Empty], error)
	RetypeCollection(context.Context, *connect_go.Request[v0alpha.RetypeCollectionReq]) (*connect_go.Response[v0alpha.RetypeCollectionRes], error)
	DeleteCollection(context.Context, *connect_go.Request[v0alpha.DeleteCollectionReq]) (*connect_go.Response[emptypb.Empty], error)
	ListCollections(context.Context, *connect_go.Request[v0alpha.ListCollectionsReq]) (*connect_go.Response[v0alpha.ListCollectionsRes], error)
	ResetCollection(context.Context, *connect_go.Request[v0alpha.ResetCollectionReq]) (*connect_go.Response[emptypb.Empty], error)
	AddCollectionEntry(context.Context, *connect_go.Request[v0alpha.CollectionEntry]) (*connect_go.Response[v0alpha.CollectionEntry], error)
	DeleteCollectionEntry(context.Context, *connect_go.Request[v0alpha.DeleteCollectionEntryReq]) (*connect_go.Response[emptypb.Empty], error)
	UpdateCollectionEntry(context.Context, *connect_go.Request[v0alpha.CollectionEntry]) (*connect_go.Response[v0alpha.CollectionEntry], error)
	// StreamCollection needs to be used in conjunction with GetCollection
	// to have the metadata associated with it
	StreamCollection(context.Context, *connect_go.Request[v0alpha.StreamCollectionReq], *connect_go.ServerStream[v0alpha.CollectionEntry]) error
	// SearchCollectionsWithQueryPaginated needs to be used in conjunction with GetCollection
	// to have the metadata associated with it
	SearchCollectionsPaginated(context.Context, *connect_go.Request[v0alpha.SearchCollectionsPaginatedReq]) (*connect_go.Response[v0alpha.PaginatedSearchRes], error)
	// GetCollectionEntries fetches a page (size specified by the page_size param) of entries for
	// the specified collection_id, org_id, region_id starting at location specified by from
	GetCollectionEntries(context.Context, *connect_go.Request[v0alpha.GetCollectionEntriesReq]) (*connect_go.Response[v0alpha.GetCollectionEntriesRes], error)
	// CreateCjsSearchDefinition creates a search definition
	CreateCjsSearchDefinition(context.Context, *connect_go.Request[v0alpha.CjsSearchDefinition]) (*connect_go.Response[v0alpha.CjsSearchDefinition], error)
	// GetCjsSearchDefinition gets the search definition specified by search_definition_id
	GetCjsSearchDefinition(context.Context, *connect_go.Request[v0alpha.GetCjsSearchDefinitionReq]) (*connect_go.Response[v0alpha.CjsSearchDefinition], error)
	// UpdateCjsSearchDefinition updates the search definition specified by search_definition_id
	UpdateCjsSearchDefinition(context.Context, *connect_go.Request[v0alpha.CjsSearchDefinition]) (*connect_go.Response[emptypb.Empty], error)
	// DeleteCjsSearchDefinition deletes the search definition specified by search_definition_id
	DeleteCjsSearchDefinition(context.Context, *connect_go.Request[v0alpha.DeleteCjsSearchDefinitionReq]) (*connect_go.Response[emptypb.Empty], error)
	// ListCjsSearchDefinitions lists the search definitions
	ListCjsSearchDefinitions(context.Context, *connect_go.Request[v0alpha.ListCjsSearchDefinitionsReq]) (*connect_go.Response[v0alpha.ListCjsSearchDefinitionsRes], error)
	// ExecuteCjsSearchDefinition executes the search definition specified by search_definition_id
	ExecuteCjsSearchDefinition(context.Context, *connect_go.Request[v0alpha.ExecuteCjsSearchDefinitionReq]) (*connect_go.Response[v0alpha.ExecuteCjsSearchDefinitionRes], error)
	// GetCjsSecureSearchCriteria gets the secure search criteria
	GetCjsSecureSearchCriteria(context.Context, *connect_go.Request[v0alpha.GetCjsSecureSearchCriteriaReq]) (*connect_go.Response[v0alpha.CjsSecureSearchCriteria], error)
	// CreateCjsSecureSearchCriteria creates a secure search criteria
	CreateCjsSecureSearchCriteria(context.Context, *connect_go.Request[v0alpha.CjsSecureSearchCriteria]) (*connect_go.Response[v0alpha.CjsSecureSearchCriteria], error)
	// UpdateCjsSecureSearchCriteria updates the secure search criteria
	UpdateCjsSecureSearchCriteria(context.Context, *connect_go.Request[v0alpha.CjsSecureSearchCriteria]) (*connect_go.Response[emptypb.Empty], error)
	// SampleEndpoint is to test that values come through to the api appropriately
	SampleEndpoint(context.Context, *connect_go.Request[v0alpha.SampleRequest]) (*connect_go.Response[emptypb.Empty], error)
	// returns all fields possible that an ehr entity type could return (that we know of)
	GetAvailableEHRFields(context.Context, *connect_go.Request[v0alpha.EHREntityType]) (*connect_go.Response[v0alpha.Fields], error)
	GetQueuedEventsStatusByElementId(context.Context, *connect_go.Request[v0alpha.ElementPK]) (*connect_go.Response[v0alpha.Events], error)
	// List pools is a unary call to show finvi pools through exile
	ListPools(context.Context, *connect_go.Request[v0alpha.ListPoolsRequest]) (*connect_go.Response[v0alpha.ListPoolsResponse], error)
}

// NewLMSHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLMSHandler(svc LMSHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	lMSGetPublicKeyHandler := connect_go.NewUnaryHandler(
		LMSGetPublicKeyProcedure,
		svc.GetPublicKey,
		opts...,
	)
	lMSCreateFileTemplateHandler := connect_go.NewUnaryHandler(
		LMSCreateFileTemplateProcedure,
		svc.CreateFileTemplate,
		opts...,
	)
	lMSListFileTemplatesHandler := connect_go.NewServerStreamHandler(
		LMSListFileTemplatesProcedure,
		svc.ListFileTemplates,
		opts...,
	)
	lMSUpdateFileTemplateHandler := connect_go.NewUnaryHandler(
		LMSUpdateFileTemplateProcedure,
		svc.UpdateFileTemplate,
		opts...,
	)
	lMSDeleteFileTemplateHandler := connect_go.NewUnaryHandler(
		LMSDeleteFileTemplateProcedure,
		svc.DeleteFileTemplate,
		opts...,
	)
	lMSGetFileTemplateHandler := connect_go.NewUnaryHandler(
		LMSGetFileTemplateProcedure,
		svc.GetFileTemplate,
		opts...,
	)
	lMSCreateFieldHandler := connect_go.NewUnaryHandler(
		LMSCreateFieldProcedure,
		svc.CreateField,
		opts...,
	)
	lMSListFieldsHandler := connect_go.NewUnaryHandler(
		LMSListFieldsProcedure,
		svc.ListFields,
		opts...,
	)
	lMSGetFieldHandler := connect_go.NewUnaryHandler(
		LMSGetFieldProcedure,
		svc.GetField,
		opts...,
	)
	lMSUpdateFieldHandler := connect_go.NewUnaryHandler(
		LMSUpdateFieldProcedure,
		svc.UpdateField,
		opts...,
	)
	lMSDeleteFieldHandler := connect_go.NewUnaryHandler(
		LMSDeleteFieldProcedure,
		svc.DeleteField,
		opts...,
	)
	lMSListAvailableFieldsByElementIdHandler := connect_go.NewUnaryHandler(
		LMSListAvailableFieldsByElementIdProcedure,
		svc.ListAvailableFieldsByElementId,
		opts...,
	)
	lMSListFieldsForElementHandler := connect_go.NewUnaryHandler(
		LMSListFieldsForElementProcedure,
		svc.ListFieldsForElement,
		opts...,
	)
	lMSListAutocompleteFieldsHandler := connect_go.NewUnaryHandler(
		LMSListAutocompleteFieldsProcedure,
		svc.ListAutocompleteFields,
		opts...,
	)
	lMSListCampaignLinksHandler := connect_go.NewUnaryHandler(
		LMSListCampaignLinksProcedure,
		svc.ListCampaignLinks,
		opts...,
	)
	lMSPeekListHandler := connect_go.NewUnaryHandler(
		LMSPeekListProcedure,
		svc.PeekList,
		opts...,
	)
	lMSGetHistoryHandler := connect_go.NewUnaryHandler(
		LMSGetHistoryProcedure,
		svc.GetHistory,
		opts...,
	)
	lMSCreateElementHandler := connect_go.NewUnaryHandler(
		LMSCreateElementProcedure,
		svc.CreateElement,
		opts...,
	)
	lMSListElementsHandler := connect_go.NewServerStreamHandler(
		LMSListElementsProcedure,
		svc.ListElements,
		opts...,
	)
	lMSGetElementHandler := connect_go.NewUnaryHandler(
		LMSGetElementProcedure,
		svc.GetElement,
		opts...,
	)
	lMSUpdateElementHandler := connect_go.NewUnaryHandler(
		LMSUpdateElementProcedure,
		svc.UpdateElement,
		opts...,
	)
	lMSDeleteElementHandler := connect_go.NewUnaryHandler(
		LMSDeleteElementProcedure,
		svc.DeleteElement,
		opts...,
	)
	lMSCopyPipelineUpstreamHandler := connect_go.NewServerStreamHandler(
		LMSCopyPipelineUpstreamProcedure,
		svc.CopyPipelineUpstream,
		opts...,
	)
	lMSCopyPipelineDownstreamHandler := connect_go.NewServerStreamHandler(
		LMSCopyPipelineDownstreamProcedure,
		svc.CopyPipelineDownstream,
		opts...,
	)
	lMSProcessElementHandler := connect_go.NewUnaryHandler(
		LMSProcessElementProcedure,
		svc.ProcessElement,
		opts...,
	)
	lMSProcessListHandler := connect_go.NewUnaryHandler(
		LMSProcessListProcedure,
		svc.ProcessList,
		opts...,
	)
	lMSStreamListHandler := connect_go.NewClientStreamHandler(
		LMSStreamListProcedure,
		svc.StreamList,
		opts...,
	)
	lMSGetAvailableFieldsHandler := connect_go.NewUnaryHandler(
		LMSGetAvailableFieldsProcedure,
		svc.GetAvailableFields,
		opts...,
	)
	lMSListNewEventsHandler := connect_go.NewUnaryHandler(
		LMSListNewEventsProcedure,
		svc.ListNewEvents,
		opts...,
	)
	lMSViewQueueHandler := connect_go.NewUnaryHandler(
		LMSViewQueueProcedure,
		svc.ViewQueue,
		opts...,
	)
	lMSAutocompleteHandler := connect_go.NewUnaryHandler(
		LMSAutocompleteProcedure,
		svc.Autocomplete,
		opts...,
	)
	lMSGetComplianceScrubListsHandler := connect_go.NewUnaryHandler(
		LMSGetComplianceScrubListsProcedure,
		svc.GetComplianceScrubLists,
		opts...,
	)
	lMSFindFieldUsagesHandler := connect_go.NewUnaryHandler(
		LMSFindFieldUsagesProcedure,
		svc.FindFieldUsages,
		opts...,
	)
	lMSFindInvalidElementsHandler := connect_go.NewUnaryHandler(
		LMSFindInvalidElementsProcedure,
		svc.FindInvalidElements,
		opts...,
	)
	lMSCreateCollectionHandler := connect_go.NewUnaryHandler(
		LMSCreateCollectionProcedure,
		svc.CreateCollection,
		opts...,
	)
	lMSGetCollectionHandler := connect_go.NewUnaryHandler(
		LMSGetCollectionProcedure,
		svc.GetCollection,
		opts...,
	)
	lMSUpdateCollectionHandler := connect_go.NewUnaryHandler(
		LMSUpdateCollectionProcedure,
		svc.UpdateCollection,
		opts...,
	)
	lMSRetypeCollectionHandler := connect_go.NewUnaryHandler(
		LMSRetypeCollectionProcedure,
		svc.RetypeCollection,
		opts...,
	)
	lMSDeleteCollectionHandler := connect_go.NewUnaryHandler(
		LMSDeleteCollectionProcedure,
		svc.DeleteCollection,
		opts...,
	)
	lMSListCollectionsHandler := connect_go.NewUnaryHandler(
		LMSListCollectionsProcedure,
		svc.ListCollections,
		opts...,
	)
	lMSResetCollectionHandler := connect_go.NewUnaryHandler(
		LMSResetCollectionProcedure,
		svc.ResetCollection,
		opts...,
	)
	lMSAddCollectionEntryHandler := connect_go.NewUnaryHandler(
		LMSAddCollectionEntryProcedure,
		svc.AddCollectionEntry,
		opts...,
	)
	lMSDeleteCollectionEntryHandler := connect_go.NewUnaryHandler(
		LMSDeleteCollectionEntryProcedure,
		svc.DeleteCollectionEntry,
		opts...,
	)
	lMSUpdateCollectionEntryHandler := connect_go.NewUnaryHandler(
		LMSUpdateCollectionEntryProcedure,
		svc.UpdateCollectionEntry,
		opts...,
	)
	lMSStreamCollectionHandler := connect_go.NewServerStreamHandler(
		LMSStreamCollectionProcedure,
		svc.StreamCollection,
		opts...,
	)
	lMSSearchCollectionsPaginatedHandler := connect_go.NewUnaryHandler(
		LMSSearchCollectionsPaginatedProcedure,
		svc.SearchCollectionsPaginated,
		opts...,
	)
	lMSGetCollectionEntriesHandler := connect_go.NewUnaryHandler(
		LMSGetCollectionEntriesProcedure,
		svc.GetCollectionEntries,
		opts...,
	)
	lMSCreateCjsSearchDefinitionHandler := connect_go.NewUnaryHandler(
		LMSCreateCjsSearchDefinitionProcedure,
		svc.CreateCjsSearchDefinition,
		opts...,
	)
	lMSGetCjsSearchDefinitionHandler := connect_go.NewUnaryHandler(
		LMSGetCjsSearchDefinitionProcedure,
		svc.GetCjsSearchDefinition,
		opts...,
	)
	lMSUpdateCjsSearchDefinitionHandler := connect_go.NewUnaryHandler(
		LMSUpdateCjsSearchDefinitionProcedure,
		svc.UpdateCjsSearchDefinition,
		opts...,
	)
	lMSDeleteCjsSearchDefinitionHandler := connect_go.NewUnaryHandler(
		LMSDeleteCjsSearchDefinitionProcedure,
		svc.DeleteCjsSearchDefinition,
		opts...,
	)
	lMSListCjsSearchDefinitionsHandler := connect_go.NewUnaryHandler(
		LMSListCjsSearchDefinitionsProcedure,
		svc.ListCjsSearchDefinitions,
		opts...,
	)
	lMSExecuteCjsSearchDefinitionHandler := connect_go.NewUnaryHandler(
		LMSExecuteCjsSearchDefinitionProcedure,
		svc.ExecuteCjsSearchDefinition,
		opts...,
	)
	lMSGetCjsSecureSearchCriteriaHandler := connect_go.NewUnaryHandler(
		LMSGetCjsSecureSearchCriteriaProcedure,
		svc.GetCjsSecureSearchCriteria,
		opts...,
	)
	lMSCreateCjsSecureSearchCriteriaHandler := connect_go.NewUnaryHandler(
		LMSCreateCjsSecureSearchCriteriaProcedure,
		svc.CreateCjsSecureSearchCriteria,
		opts...,
	)
	lMSUpdateCjsSecureSearchCriteriaHandler := connect_go.NewUnaryHandler(
		LMSUpdateCjsSecureSearchCriteriaProcedure,
		svc.UpdateCjsSecureSearchCriteria,
		opts...,
	)
	lMSSampleEndpointHandler := connect_go.NewUnaryHandler(
		LMSSampleEndpointProcedure,
		svc.SampleEndpoint,
		opts...,
	)
	lMSGetAvailableEHRFieldsHandler := connect_go.NewUnaryHandler(
		LMSGetAvailableEHRFieldsProcedure,
		svc.GetAvailableEHRFields,
		opts...,
	)
	lMSGetQueuedEventsStatusByElementIdHandler := connect_go.NewUnaryHandler(
		LMSGetQueuedEventsStatusByElementIdProcedure,
		svc.GetQueuedEventsStatusByElementId,
		opts...,
	)
	lMSListPoolsHandler := connect_go.NewUnaryHandler(
		LMSListPoolsProcedure,
		svc.ListPools,
		opts...,
	)
	return "/api.v0alpha.LMS/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LMSGetPublicKeyProcedure:
			lMSGetPublicKeyHandler.ServeHTTP(w, r)
		case LMSCreateFileTemplateProcedure:
			lMSCreateFileTemplateHandler.ServeHTTP(w, r)
		case LMSListFileTemplatesProcedure:
			lMSListFileTemplatesHandler.ServeHTTP(w, r)
		case LMSUpdateFileTemplateProcedure:
			lMSUpdateFileTemplateHandler.ServeHTTP(w, r)
		case LMSDeleteFileTemplateProcedure:
			lMSDeleteFileTemplateHandler.ServeHTTP(w, r)
		case LMSGetFileTemplateProcedure:
			lMSGetFileTemplateHandler.ServeHTTP(w, r)
		case LMSCreateFieldProcedure:
			lMSCreateFieldHandler.ServeHTTP(w, r)
		case LMSListFieldsProcedure:
			lMSListFieldsHandler.ServeHTTP(w, r)
		case LMSGetFieldProcedure:
			lMSGetFieldHandler.ServeHTTP(w, r)
		case LMSUpdateFieldProcedure:
			lMSUpdateFieldHandler.ServeHTTP(w, r)
		case LMSDeleteFieldProcedure:
			lMSDeleteFieldHandler.ServeHTTP(w, r)
		case LMSListAvailableFieldsByElementIdProcedure:
			lMSListAvailableFieldsByElementIdHandler.ServeHTTP(w, r)
		case LMSListFieldsForElementProcedure:
			lMSListFieldsForElementHandler.ServeHTTP(w, r)
		case LMSListAutocompleteFieldsProcedure:
			lMSListAutocompleteFieldsHandler.ServeHTTP(w, r)
		case LMSListCampaignLinksProcedure:
			lMSListCampaignLinksHandler.ServeHTTP(w, r)
		case LMSPeekListProcedure:
			lMSPeekListHandler.ServeHTTP(w, r)
		case LMSGetHistoryProcedure:
			lMSGetHistoryHandler.ServeHTTP(w, r)
		case LMSCreateElementProcedure:
			lMSCreateElementHandler.ServeHTTP(w, r)
		case LMSListElementsProcedure:
			lMSListElementsHandler.ServeHTTP(w, r)
		case LMSGetElementProcedure:
			lMSGetElementHandler.ServeHTTP(w, r)
		case LMSUpdateElementProcedure:
			lMSUpdateElementHandler.ServeHTTP(w, r)
		case LMSDeleteElementProcedure:
			lMSDeleteElementHandler.ServeHTTP(w, r)
		case LMSCopyPipelineUpstreamProcedure:
			lMSCopyPipelineUpstreamHandler.ServeHTTP(w, r)
		case LMSCopyPipelineDownstreamProcedure:
			lMSCopyPipelineDownstreamHandler.ServeHTTP(w, r)
		case LMSProcessElementProcedure:
			lMSProcessElementHandler.ServeHTTP(w, r)
		case LMSProcessListProcedure:
			lMSProcessListHandler.ServeHTTP(w, r)
		case LMSStreamListProcedure:
			lMSStreamListHandler.ServeHTTP(w, r)
		case LMSGetAvailableFieldsProcedure:
			lMSGetAvailableFieldsHandler.ServeHTTP(w, r)
		case LMSListNewEventsProcedure:
			lMSListNewEventsHandler.ServeHTTP(w, r)
		case LMSViewQueueProcedure:
			lMSViewQueueHandler.ServeHTTP(w, r)
		case LMSAutocompleteProcedure:
			lMSAutocompleteHandler.ServeHTTP(w, r)
		case LMSGetComplianceScrubListsProcedure:
			lMSGetComplianceScrubListsHandler.ServeHTTP(w, r)
		case LMSFindFieldUsagesProcedure:
			lMSFindFieldUsagesHandler.ServeHTTP(w, r)
		case LMSFindInvalidElementsProcedure:
			lMSFindInvalidElementsHandler.ServeHTTP(w, r)
		case LMSCreateCollectionProcedure:
			lMSCreateCollectionHandler.ServeHTTP(w, r)
		case LMSGetCollectionProcedure:
			lMSGetCollectionHandler.ServeHTTP(w, r)
		case LMSUpdateCollectionProcedure:
			lMSUpdateCollectionHandler.ServeHTTP(w, r)
		case LMSRetypeCollectionProcedure:
			lMSRetypeCollectionHandler.ServeHTTP(w, r)
		case LMSDeleteCollectionProcedure:
			lMSDeleteCollectionHandler.ServeHTTP(w, r)
		case LMSListCollectionsProcedure:
			lMSListCollectionsHandler.ServeHTTP(w, r)
		case LMSResetCollectionProcedure:
			lMSResetCollectionHandler.ServeHTTP(w, r)
		case LMSAddCollectionEntryProcedure:
			lMSAddCollectionEntryHandler.ServeHTTP(w, r)
		case LMSDeleteCollectionEntryProcedure:
			lMSDeleteCollectionEntryHandler.ServeHTTP(w, r)
		case LMSUpdateCollectionEntryProcedure:
			lMSUpdateCollectionEntryHandler.ServeHTTP(w, r)
		case LMSStreamCollectionProcedure:
			lMSStreamCollectionHandler.ServeHTTP(w, r)
		case LMSSearchCollectionsPaginatedProcedure:
			lMSSearchCollectionsPaginatedHandler.ServeHTTP(w, r)
		case LMSGetCollectionEntriesProcedure:
			lMSGetCollectionEntriesHandler.ServeHTTP(w, r)
		case LMSCreateCjsSearchDefinitionProcedure:
			lMSCreateCjsSearchDefinitionHandler.ServeHTTP(w, r)
		case LMSGetCjsSearchDefinitionProcedure:
			lMSGetCjsSearchDefinitionHandler.ServeHTTP(w, r)
		case LMSUpdateCjsSearchDefinitionProcedure:
			lMSUpdateCjsSearchDefinitionHandler.ServeHTTP(w, r)
		case LMSDeleteCjsSearchDefinitionProcedure:
			lMSDeleteCjsSearchDefinitionHandler.ServeHTTP(w, r)
		case LMSListCjsSearchDefinitionsProcedure:
			lMSListCjsSearchDefinitionsHandler.ServeHTTP(w, r)
		case LMSExecuteCjsSearchDefinitionProcedure:
			lMSExecuteCjsSearchDefinitionHandler.ServeHTTP(w, r)
		case LMSGetCjsSecureSearchCriteriaProcedure:
			lMSGetCjsSecureSearchCriteriaHandler.ServeHTTP(w, r)
		case LMSCreateCjsSecureSearchCriteriaProcedure:
			lMSCreateCjsSecureSearchCriteriaHandler.ServeHTTP(w, r)
		case LMSUpdateCjsSecureSearchCriteriaProcedure:
			lMSUpdateCjsSecureSearchCriteriaHandler.ServeHTTP(w, r)
		case LMSSampleEndpointProcedure:
			lMSSampleEndpointHandler.ServeHTTP(w, r)
		case LMSGetAvailableEHRFieldsProcedure:
			lMSGetAvailableEHRFieldsHandler.ServeHTTP(w, r)
		case LMSGetQueuedEventsStatusByElementIdProcedure:
			lMSGetQueuedEventsStatusByElementIdHandler.ServeHTTP(w, r)
		case LMSListPoolsProcedure:
			lMSListPoolsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLMSHandler returns CodeUnimplemented from all methods.
type UnimplementedLMSHandler struct{}

func (UnimplementedLMSHandler) GetPublicKey(context.Context, *connect_go.Request[v0alpha.GetPublicKeyReq]) (*connect_go.Response[v0alpha.PublicKey], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.GetPublicKey is not implemented"))
}

func (UnimplementedLMSHandler) CreateFileTemplate(context.Context, *connect_go.Request[v0alpha.FileTemplate]) (*connect_go.Response[v0alpha.FileTemplate], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.CreateFileTemplate is not implemented"))
}

func (UnimplementedLMSHandler) ListFileTemplates(context.Context, *connect_go.Request[v0alpha.GetFileTemplatesReq], *connect_go.ServerStream[v0alpha.FileTemplate]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.ListFileTemplates is not implemented"))
}

func (UnimplementedLMSHandler) UpdateFileTemplate(context.Context, *connect_go.Request[v0alpha.FileTemplate]) (*connect_go.Response[v0alpha.FileTemplate], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.UpdateFileTemplate is not implemented"))
}

func (UnimplementedLMSHandler) DeleteFileTemplate(context.Context, *connect_go.Request[v0alpha.FileTemplate]) (*connect_go.Response[v0alpha.FileTemplate], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.DeleteFileTemplate is not implemented"))
}

func (UnimplementedLMSHandler) GetFileTemplate(context.Context, *connect_go.Request[v0alpha.FileTemplate]) (*connect_go.Response[v0alpha.FileTemplate], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.GetFileTemplate is not implemented"))
}

func (UnimplementedLMSHandler) CreateField(context.Context, *connect_go.Request[v0alpha.Field]) (*connect_go.Response[v0alpha.Field], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.CreateField is not implemented"))
}

func (UnimplementedLMSHandler) ListFields(context.Context, *connect_go.Request[v0alpha.ListFieldsReq]) (*connect_go.Response[v0alpha.Fields], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.ListFields is not implemented"))
}

func (UnimplementedLMSHandler) GetField(context.Context, *connect_go.Request[v0alpha.Field]) (*connect_go.Response[v0alpha.Field], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.GetField is not implemented"))
}

func (UnimplementedLMSHandler) UpdateField(context.Context, *connect_go.Request[v0alpha.UpdateFieldReq]) (*connect_go.Response[v0alpha.Field], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.UpdateField is not implemented"))
}

func (UnimplementedLMSHandler) DeleteField(context.Context, *connect_go.Request[v0alpha.Field]) (*connect_go.Response[v0alpha.Field], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.DeleteField is not implemented"))
}

func (UnimplementedLMSHandler) ListAvailableFieldsByElementId(context.Context, *connect_go.Request[v0alpha.ListAvailableFieldsByElementIdReq]) (*connect_go.Response[v0alpha.ProcessFields], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.ListAvailableFieldsByElementId is not implemented"))
}

func (UnimplementedLMSHandler) ListFieldsForElement(context.Context, *connect_go.Request[v0alpha.ListFieldsForElementReq]) (*connect_go.Response[v0alpha.ListFieldsForElementRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.ListFieldsForElement is not implemented"))
}

func (UnimplementedLMSHandler) ListAutocompleteFields(context.Context, *connect_go.Request[v0alpha.ListAutocompleteFieldsReq]) (*connect_go.Response[v0alpha.ListAutocompleteFieldsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.ListAutocompleteFields is not implemented"))
}

func (UnimplementedLMSHandler) ListCampaignLinks(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v0alpha.ListCampaignLinksRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.ListCampaignLinks is not implemented"))
}

func (UnimplementedLMSHandler) PeekList(context.Context, *connect_go.Request[v0alpha.PeekListReq]) (*connect_go.Response[v0alpha.PeekListRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.PeekList is not implemented"))
}

func (UnimplementedLMSHandler) GetHistory(context.Context, *connect_go.Request[v0alpha.GetHistoryReq]) (*connect_go.Response[v0alpha.GetHistoryRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.GetHistory is not implemented"))
}

func (UnimplementedLMSHandler) CreateElement(context.Context, *connect_go.Request[v0alpha.Element]) (*connect_go.Response[v0alpha.Element], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.CreateElement is not implemented"))
}

func (UnimplementedLMSHandler) ListElements(context.Context, *connect_go.Request[v0alpha.ListElementsReq], *connect_go.ServerStream[v0alpha.Element]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.ListElements is not implemented"))
}

func (UnimplementedLMSHandler) GetElement(context.Context, *connect_go.Request[v0alpha.ElementPK]) (*connect_go.Response[v0alpha.Element], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.GetElement is not implemented"))
}

func (UnimplementedLMSHandler) UpdateElement(context.Context, *connect_go.Request[v0alpha.Element]) (*connect_go.Response[v0alpha.Element], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.UpdateElement is not implemented"))
}

func (UnimplementedLMSHandler) DeleteElement(context.Context, *connect_go.Request[v0alpha.Element]) (*connect_go.Response[v0alpha.Element], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.DeleteElement is not implemented"))
}

func (UnimplementedLMSHandler) CopyPipelineUpstream(context.Context, *connect_go.Request[v0alpha.Element], *connect_go.ServerStream[v0alpha.Element]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.CopyPipelineUpstream is not implemented"))
}

func (UnimplementedLMSHandler) CopyPipelineDownstream(context.Context, *connect_go.Request[v0alpha.Element], *connect_go.ServerStream[v0alpha.Element]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.CopyPipelineDownstream is not implemented"))
}

func (UnimplementedLMSHandler) ProcessElement(context.Context, *connect_go.Request[v0alpha.ProcessElementReq]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.ProcessElement is not implemented"))
}

func (UnimplementedLMSHandler) ProcessList(context.Context, *connect_go.Request[v0alpha.ProcessListRequest]) (*connect_go.Response[v0alpha.ProcessListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.ProcessList is not implemented"))
}

func (UnimplementedLMSHandler) StreamList(context.Context, *connect_go.ClientStream[v0alpha.StreamListRequest]) (*connect_go.Response[v0alpha.StreamListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.StreamList is not implemented"))
}

func (UnimplementedLMSHandler) GetAvailableFields(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v0alpha.ProcessFields], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.GetAvailableFields is not implemented"))
}

func (UnimplementedLMSHandler) ListNewEvents(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v0alpha.Events], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.ListNewEvents is not implemented"))
}

func (UnimplementedLMSHandler) ViewQueue(context.Context, *connect_go.Request[v0alpha.ViewQueueReq]) (*connect_go.Response[v0alpha.Events], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.ViewQueue is not implemented"))
}

func (UnimplementedLMSHandler) Autocomplete(context.Context, *connect_go.Request[v0alpha.ParseReq]) (*connect_go.Response[v0alpha.ParseRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.Autocomplete is not implemented"))
}

func (UnimplementedLMSHandler) GetComplianceScrubLists(context.Context, *connect_go.Request[v0alpha.GetComplianceScrubListsReq]) (*connect_go.Response[v0alpha.GetComplianceScrubListsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.GetComplianceScrubLists is not implemented"))
}

func (UnimplementedLMSHandler) FindFieldUsages(context.Context, *connect_go.Request[v0alpha.FindFieldUsagesReq]) (*connect_go.Response[v0alpha.FindFieldUsagesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.FindFieldUsages is not implemented"))
}

func (UnimplementedLMSHandler) FindInvalidElements(context.Context, *connect_go.Request[v0alpha.FindInvalidElementsReq]) (*connect_go.Response[v0alpha.FindInvalidElementsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.FindInvalidElements is not implemented"))
}

func (UnimplementedLMSHandler) CreateCollection(context.Context, *connect_go.Request[v0alpha.CollectionMetadata]) (*connect_go.Response[v0alpha.CollectionMetadata], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.CreateCollection is not implemented"))
}

func (UnimplementedLMSHandler) GetCollection(context.Context, *connect_go.Request[v0alpha.GetCollectionReq]) (*connect_go.Response[v0alpha.CollectionMetadata], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.GetCollection is not implemented"))
}

func (UnimplementedLMSHandler) UpdateCollection(context.Context, *connect_go.Request[v0alpha.CollectionMetadata]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.UpdateCollection is not implemented"))
}

func (UnimplementedLMSHandler) RetypeCollection(context.Context, *connect_go.Request[v0alpha.RetypeCollectionReq]) (*connect_go.Response[v0alpha.RetypeCollectionRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.RetypeCollection is not implemented"))
}

func (UnimplementedLMSHandler) DeleteCollection(context.Context, *connect_go.Request[v0alpha.DeleteCollectionReq]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.DeleteCollection is not implemented"))
}

func (UnimplementedLMSHandler) ListCollections(context.Context, *connect_go.Request[v0alpha.ListCollectionsReq]) (*connect_go.Response[v0alpha.ListCollectionsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.ListCollections is not implemented"))
}

func (UnimplementedLMSHandler) ResetCollection(context.Context, *connect_go.Request[v0alpha.ResetCollectionReq]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.ResetCollection is not implemented"))
}

func (UnimplementedLMSHandler) AddCollectionEntry(context.Context, *connect_go.Request[v0alpha.CollectionEntry]) (*connect_go.Response[v0alpha.CollectionEntry], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.AddCollectionEntry is not implemented"))
}

func (UnimplementedLMSHandler) DeleteCollectionEntry(context.Context, *connect_go.Request[v0alpha.DeleteCollectionEntryReq]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.DeleteCollectionEntry is not implemented"))
}

func (UnimplementedLMSHandler) UpdateCollectionEntry(context.Context, *connect_go.Request[v0alpha.CollectionEntry]) (*connect_go.Response[v0alpha.CollectionEntry], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.UpdateCollectionEntry is not implemented"))
}

func (UnimplementedLMSHandler) StreamCollection(context.Context, *connect_go.Request[v0alpha.StreamCollectionReq], *connect_go.ServerStream[v0alpha.CollectionEntry]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.StreamCollection is not implemented"))
}

func (UnimplementedLMSHandler) SearchCollectionsPaginated(context.Context, *connect_go.Request[v0alpha.SearchCollectionsPaginatedReq]) (*connect_go.Response[v0alpha.PaginatedSearchRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.SearchCollectionsPaginated is not implemented"))
}

func (UnimplementedLMSHandler) GetCollectionEntries(context.Context, *connect_go.Request[v0alpha.GetCollectionEntriesReq]) (*connect_go.Response[v0alpha.GetCollectionEntriesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.GetCollectionEntries is not implemented"))
}

func (UnimplementedLMSHandler) CreateCjsSearchDefinition(context.Context, *connect_go.Request[v0alpha.CjsSearchDefinition]) (*connect_go.Response[v0alpha.CjsSearchDefinition], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.CreateCjsSearchDefinition is not implemented"))
}

func (UnimplementedLMSHandler) GetCjsSearchDefinition(context.Context, *connect_go.Request[v0alpha.GetCjsSearchDefinitionReq]) (*connect_go.Response[v0alpha.CjsSearchDefinition], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.GetCjsSearchDefinition is not implemented"))
}

func (UnimplementedLMSHandler) UpdateCjsSearchDefinition(context.Context, *connect_go.Request[v0alpha.CjsSearchDefinition]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.UpdateCjsSearchDefinition is not implemented"))
}

func (UnimplementedLMSHandler) DeleteCjsSearchDefinition(context.Context, *connect_go.Request[v0alpha.DeleteCjsSearchDefinitionReq]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.DeleteCjsSearchDefinition is not implemented"))
}

func (UnimplementedLMSHandler) ListCjsSearchDefinitions(context.Context, *connect_go.Request[v0alpha.ListCjsSearchDefinitionsReq]) (*connect_go.Response[v0alpha.ListCjsSearchDefinitionsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.ListCjsSearchDefinitions is not implemented"))
}

func (UnimplementedLMSHandler) ExecuteCjsSearchDefinition(context.Context, *connect_go.Request[v0alpha.ExecuteCjsSearchDefinitionReq]) (*connect_go.Response[v0alpha.ExecuteCjsSearchDefinitionRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.ExecuteCjsSearchDefinition is not implemented"))
}

func (UnimplementedLMSHandler) GetCjsSecureSearchCriteria(context.Context, *connect_go.Request[v0alpha.GetCjsSecureSearchCriteriaReq]) (*connect_go.Response[v0alpha.CjsSecureSearchCriteria], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.GetCjsSecureSearchCriteria is not implemented"))
}

func (UnimplementedLMSHandler) CreateCjsSecureSearchCriteria(context.Context, *connect_go.Request[v0alpha.CjsSecureSearchCriteria]) (*connect_go.Response[v0alpha.CjsSecureSearchCriteria], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.CreateCjsSecureSearchCriteria is not implemented"))
}

func (UnimplementedLMSHandler) UpdateCjsSecureSearchCriteria(context.Context, *connect_go.Request[v0alpha.CjsSecureSearchCriteria]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.UpdateCjsSecureSearchCriteria is not implemented"))
}

func (UnimplementedLMSHandler) SampleEndpoint(context.Context, *connect_go.Request[v0alpha.SampleRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.SampleEndpoint is not implemented"))
}

func (UnimplementedLMSHandler) GetAvailableEHRFields(context.Context, *connect_go.Request[v0alpha.EHREntityType]) (*connect_go.Response[v0alpha.Fields], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.GetAvailableEHRFields is not implemented"))
}

func (UnimplementedLMSHandler) GetQueuedEventsStatusByElementId(context.Context, *connect_go.Request[v0alpha.ElementPK]) (*connect_go.Response[v0alpha.Events], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.GetQueuedEventsStatusByElementId is not implemented"))
}

func (UnimplementedLMSHandler) ListPools(context.Context, *connect_go.Request[v0alpha.ListPoolsRequest]) (*connect_go.Response[v0alpha.ListPoolsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.LMS.ListPools is not implemented"))
}
