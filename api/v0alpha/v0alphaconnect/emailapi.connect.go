// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v0alpha/emailapi.proto

package v0alphaconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v0alpha "github.com/tcncloud/api-go/api/v0alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// EmailApiName is the fully-qualified name of the EmailApi service.
	EmailApiName = "api.v0alpha.EmailApi"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EmailApiCreateEmailTemplateProcedure is the fully-qualified name of the EmailApi's
	// CreateEmailTemplate RPC.
	EmailApiCreateEmailTemplateProcedure = "/api.v0alpha.EmailApi/CreateEmailTemplate"
	// EmailApiUpdateEmailTemplateProcedure is the fully-qualified name of the EmailApi's
	// UpdateEmailTemplate RPC.
	EmailApiUpdateEmailTemplateProcedure = "/api.v0alpha.EmailApi/UpdateEmailTemplate"
	// EmailApiCreateEmailTemplateAttachmentProcedure is the fully-qualified name of the EmailApi's
	// CreateEmailTemplateAttachment RPC.
	EmailApiCreateEmailTemplateAttachmentProcedure = "/api.v0alpha.EmailApi/CreateEmailTemplateAttachment"
	// EmailApiCopyEmailTemplateWithAttachmentsProcedure is the fully-qualified name of the EmailApi's
	// CopyEmailTemplateWithAttachments RPC.
	EmailApiCopyEmailTemplateWithAttachmentsProcedure = "/api.v0alpha.EmailApi/CopyEmailTemplateWithAttachments"
	// EmailApiUpdateEmailTemplateAttachmentProcedure is the fully-qualified name of the EmailApi's
	// UpdateEmailTemplateAttachment RPC.
	EmailApiUpdateEmailTemplateAttachmentProcedure = "/api.v0alpha.EmailApi/UpdateEmailTemplateAttachment"
	// EmailApiGetEmailTemplateByTemplateSidProcedure is the fully-qualified name of the EmailApi's
	// GetEmailTemplateByTemplateSid RPC.
	EmailApiGetEmailTemplateByTemplateSidProcedure = "/api.v0alpha.EmailApi/GetEmailTemplateByTemplateSid"
	// EmailApiGetAllEmailTemplatesProcedure is the fully-qualified name of the EmailApi's
	// GetAllEmailTemplates RPC.
	EmailApiGetAllEmailTemplatesProcedure = "/api.v0alpha.EmailApi/GetAllEmailTemplates"
	// EmailApiDeleteEmailTemplateProcedure is the fully-qualified name of the EmailApi's
	// DeleteEmailTemplate RPC.
	EmailApiDeleteEmailTemplateProcedure = "/api.v0alpha.EmailApi/DeleteEmailTemplate"
	// EmailApiDeleteEmailTemplateAttachmentByIdProcedure is the fully-qualified name of the EmailApi's
	// DeleteEmailTemplateAttachmentById RPC.
	EmailApiDeleteEmailTemplateAttachmentByIdProcedure = "/api.v0alpha.EmailApi/DeleteEmailTemplateAttachmentById"
	// EmailApiDownloadInboundEmailAttachmentProcedure is the fully-qualified name of the EmailApi's
	// DownloadInboundEmailAttachment RPC.
	EmailApiDownloadInboundEmailAttachmentProcedure = "/api.v0alpha.EmailApi/DownloadInboundEmailAttachment"
	// EmailApiPureEmailGroupSearchProcedure is the fully-qualified name of the EmailApi's
	// PureEmailGroupSearch RPC.
	EmailApiPureEmailGroupSearchProcedure = "/api.v0alpha.EmailApi/PureEmailGroupSearch"
	// EmailApiManagerListNewEmailMessageRepliesProcedure is the fully-qualified name of the EmailApi's
	// ManagerListNewEmailMessageReplies RPC.
	EmailApiManagerListNewEmailMessageRepliesProcedure = "/api.v0alpha.EmailApi/ManagerListNewEmailMessageReplies"
	// EmailApiListNewEmailMessageRepliesProcedure is the fully-qualified name of the EmailApi's
	// ListNewEmailMessageReplies RPC.
	EmailApiListNewEmailMessageRepliesProcedure = "/api.v0alpha.EmailApi/ListNewEmailMessageReplies"
	// EmailApiGetEmailTasksByGroupSidsProcedure is the fully-qualified name of the EmailApi's
	// GetEmailTasksByGroupSids RPC.
	EmailApiGetEmailTasksByGroupSidsProcedure = "/api.v0alpha.EmailApi/GetEmailTasksByGroupSids"
	// EmailApiUpdateEmailGroupStatusProcedure is the fully-qualified name of the EmailApi's
	// UpdateEmailGroupStatus RPC.
	EmailApiUpdateEmailGroupStatusProcedure = "/api.v0alpha.EmailApi/UpdateEmailGroupStatus"
	// EmailApiGetEmailMessageDetailsProcedure is the fully-qualified name of the EmailApi's
	// GetEmailMessageDetails RPC.
	EmailApiGetEmailMessageDetailsProcedure = "/api.v0alpha.EmailApi/GetEmailMessageDetails"
	// EmailApiCreateInboundEmailTemplateProcedure is the fully-qualified name of the EmailApi's
	// CreateInboundEmailTemplate RPC.
	EmailApiCreateInboundEmailTemplateProcedure = "/api.v0alpha.EmailApi/CreateInboundEmailTemplate"
	// EmailApiUpdateInboundEmailTemplateProcedure is the fully-qualified name of the EmailApi's
	// UpdateInboundEmailTemplate RPC.
	EmailApiUpdateInboundEmailTemplateProcedure = "/api.v0alpha.EmailApi/UpdateInboundEmailTemplate"
	// EmailApiDeleteInboundEmailTemplateByIdProcedure is the fully-qualified name of the EmailApi's
	// DeleteInboundEmailTemplateById RPC.
	EmailApiDeleteInboundEmailTemplateByIdProcedure = "/api.v0alpha.EmailApi/DeleteInboundEmailTemplateById"
	// EmailApiListInboundEmailTemplatesProcedure is the fully-qualified name of the EmailApi's
	// ListInboundEmailTemplates RPC.
	EmailApiListInboundEmailTemplatesProcedure = "/api.v0alpha.EmailApi/ListInboundEmailTemplates"
	// EmailApiGetInboundEmailTemplateByIdProcedure is the fully-qualified name of the EmailApi's
	// GetInboundEmailTemplateById RPC.
	EmailApiGetInboundEmailTemplateByIdProcedure = "/api.v0alpha.EmailApi/GetInboundEmailTemplateById"
	// EmailApiUpdateInboundEmailGroupStatusProcedure is the fully-qualified name of the EmailApi's
	// UpdateInboundEmailGroupStatus RPC.
	EmailApiUpdateInboundEmailGroupStatusProcedure = "/api.v0alpha.EmailApi/UpdateInboundEmailGroupStatus"
	// EmailApiStopInboundEmailGroupProcedure is the fully-qualified name of the EmailApi's
	// StopInboundEmailGroup RPC.
	EmailApiStopInboundEmailGroupProcedure = "/api.v0alpha.EmailApi/StopInboundEmailGroup"
	// EmailApiStopAllInboundEmailGroupsProcedure is the fully-qualified name of the EmailApi's
	// StopAllInboundEmailGroups RPC.
	EmailApiStopAllInboundEmailGroupsProcedure = "/api.v0alpha.EmailApi/StopAllInboundEmailGroups"
	// EmailApiPureInboundEmailGroupSearchProcedure is the fully-qualified name of the EmailApi's
	// PureInboundEmailGroupSearch RPC.
	EmailApiPureInboundEmailGroupSearchProcedure = "/api.v0alpha.EmailApi/PureInboundEmailGroupSearch"
	// EmailApiInboundEmailGroupSearchProcedure is the fully-qualified name of the EmailApi's
	// InboundEmailGroupSearch RPC.
	EmailApiInboundEmailGroupSearchProcedure = "/api.v0alpha.EmailApi/InboundEmailGroupSearch"
	// EmailApiListInboundEmailGroupsByGroupIdsProcedure is the fully-qualified name of the EmailApi's
	// ListInboundEmailGroupsByGroupIds RPC.
	EmailApiListInboundEmailGroupsByGroupIdsProcedure = "/api.v0alpha.EmailApi/ListInboundEmailGroupsByGroupIds"
	// EmailApiListInboundEmailTasksByGroupIdsProcedure is the fully-qualified name of the EmailApi's
	// ListInboundEmailTasksByGroupIds RPC.
	EmailApiListInboundEmailTasksByGroupIdsProcedure = "/api.v0alpha.EmailApi/ListInboundEmailTasksByGroupIds"
	// EmailApiListActiveInboundEmailGroupsProcedure is the fully-qualified name of the EmailApi's
	// ListActiveInboundEmailGroups RPC.
	EmailApiListActiveInboundEmailGroupsProcedure = "/api.v0alpha.EmailApi/ListActiveInboundEmailGroups"
	// EmailApiScheduleProcedure is the fully-qualified name of the EmailApi's Schedule RPC.
	EmailApiScheduleProcedure = "/api.v0alpha.EmailApi/Schedule"
	// EmailApiScheduleOutboundEmailGroupProcedure is the fully-qualified name of the EmailApi's
	// ScheduleOutboundEmailGroup RPC.
	EmailApiScheduleOutboundEmailGroupProcedure = "/api.v0alpha.EmailApi/ScheduleOutboundEmailGroup"
	// EmailApiSchedulePureInboundEmailProcedure is the fully-qualified name of the EmailApi's
	// SchedulePureInboundEmail RPC.
	EmailApiSchedulePureInboundEmailProcedure = "/api.v0alpha.EmailApi/SchedulePureInboundEmail"
	// EmailApiCreateEmailMessageAgentReplyProcedure is the fully-qualified name of the EmailApi's
	// CreateEmailMessageAgentReply RPC.
	EmailApiCreateEmailMessageAgentReplyProcedure = "/api.v0alpha.EmailApi/CreateEmailMessageAgentReply"
	// EmailApiCreateEmailMessageAgentReplyAttachmentProcedure is the fully-qualified name of the
	// EmailApi's CreateEmailMessageAgentReplyAttachment RPC.
	EmailApiCreateEmailMessageAgentReplyAttachmentProcedure = "/api.v0alpha.EmailApi/CreateEmailMessageAgentReplyAttachment"
	// EmailApiSendReplyProcedure is the fully-qualified name of the EmailApi's SendReply RPC.
	EmailApiSendReplyProcedure = "/api.v0alpha.EmailApi/SendReply"
	// EmailApiGetEmailGroupsByGroupSidsProcedure is the fully-qualified name of the EmailApi's
	// GetEmailGroupsByGroupSids RPC.
	EmailApiGetEmailGroupsByGroupSidsProcedure = "/api.v0alpha.EmailApi/GetEmailGroupsByGroupSids"
	// EmailApiGetEmailGroupByGroupSidProcedure is the fully-qualified name of the EmailApi's
	// GetEmailGroupByGroupSid RPC.
	EmailApiGetEmailGroupByGroupSidProcedure = "/api.v0alpha.EmailApi/GetEmailGroupByGroupSid"
	// EmailApiGetEmailGroupByGroupIdProcedure is the fully-qualified name of the EmailApi's
	// GetEmailGroupByGroupId RPC.
	EmailApiGetEmailGroupByGroupIdProcedure = "/api.v0alpha.EmailApi/GetEmailGroupByGroupId"
	// EmailApiSchedulePureOmniLinkInboundEmailProcedure is the fully-qualified name of the EmailApi's
	// SchedulePureOmniLinkInboundEmail RPC.
	EmailApiSchedulePureOmniLinkInboundEmailProcedure = "/api.v0alpha.EmailApi/SchedulePureOmniLinkInboundEmail"
	// EmailApiUpdateInboundEmailGroupProcedure is the fully-qualified name of the EmailApi's
	// UpdateInboundEmailGroup RPC.
	EmailApiUpdateInboundEmailGroupProcedure = "/api.v0alpha.EmailApi/UpdateInboundEmailGroup"
	// EmailApiUpdateEmailGroupMstrSendsPerMinuteProcedure is the fully-qualified name of the EmailApi's
	// UpdateEmailGroupMstrSendsPerMinute RPC.
	EmailApiUpdateEmailGroupMstrSendsPerMinuteProcedure = "/api.v0alpha.EmailApi/UpdateEmailGroupMstrSendsPerMinute"
	// EmailApiUpdateOutboundEmailGroupProcedure is the fully-qualified name of the EmailApi's
	// UpdateOutboundEmailGroup RPC.
	EmailApiUpdateOutboundEmailGroupProcedure = "/api.v0alpha.EmailApi/UpdateOutboundEmailGroup"
	// EmailApiGetInboundEmailGroupByIdProcedure is the fully-qualified name of the EmailApi's
	// GetInboundEmailGroupById RPC.
	EmailApiGetInboundEmailGroupByIdProcedure = "/api.v0alpha.EmailApi/GetInboundEmailGroupById"
	// EmailApiCreateEmailMessageAttachmentProcedure is the fully-qualified name of the EmailApi's
	// CreateEmailMessageAttachment RPC.
	EmailApiCreateEmailMessageAttachmentProcedure = "/api.v0alpha.EmailApi/CreateEmailMessageAttachment"
	// EmailApiListEmailMessageAttachmentsProcedure is the fully-qualified name of the EmailApi's
	// ListEmailMessageAttachments RPC.
	EmailApiListEmailMessageAttachmentsProcedure = "/api.v0alpha.EmailApi/ListEmailMessageAttachments"
	// EmailApiUnassignCurrentUserFromEmailConversationProcedure is the fully-qualified name of the
	// EmailApi's UnassignCurrentUserFromEmailConversation RPC.
	EmailApiUnassignCurrentUserFromEmailConversationProcedure = "/api.v0alpha.EmailApi/UnassignCurrentUserFromEmailConversation"
	// EmailApiDashboardEmailConversationSearchProcedure is the fully-qualified name of the EmailApi's
	// DashboardEmailConversationSearch RPC.
	EmailApiDashboardEmailConversationSearchProcedure = "/api.v0alpha.EmailApi/DashboardEmailConversationSearch"
	// EmailApiReassignEmailConversationProcedure is the fully-qualified name of the EmailApi's
	// ReassignEmailConversation RPC.
	EmailApiReassignEmailConversationProcedure = "/api.v0alpha.EmailApi/ReassignEmailConversation"
	// EmailApiAssignEmailConversationProcedure is the fully-qualified name of the EmailApi's
	// AssignEmailConversation RPC.
	EmailApiAssignEmailConversationProcedure = "/api.v0alpha.EmailApi/AssignEmailConversation"
	// EmailApiSuspendEmailConversationProcedure is the fully-qualified name of the EmailApi's
	// SuspendEmailConversation RPC.
	EmailApiSuspendEmailConversationProcedure = "/api.v0alpha.EmailApi/SuspendEmailConversation"
	// EmailApiListCampaignsByConnectedInboxIdProcedure is the fully-qualified name of the EmailApi's
	// ListCampaignsByConnectedInboxId RPC.
	EmailApiListCampaignsByConnectedInboxIdProcedure = "/api.v0alpha.EmailApi/ListCampaignsByConnectedInboxId"
	// EmailApiCloseEmailConversationProcedure is the fully-qualified name of the EmailApi's
	// CloseEmailConversation RPC.
	EmailApiCloseEmailConversationProcedure = "/api.v0alpha.EmailApi/CloseEmailConversation"
)

// EmailApiClient is a client for the api.v0alpha.EmailApi service.
type EmailApiClient interface {
	// Create/Record email template details defined by CreateEmailTemplateReq message for a specified
	// email_subject, email_body.
	// The method will return a CreateEmailTemplateRes message/entity that will
	// contain the newly created email_template_sid value for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateEmailTemplate(context.Context, *connect_go.Request[v0alpha.CreateEmailTemplateReq]) (*connect_go.Response[v0alpha.CreateEmailTemplateRes], error)
	// Update email template details defined by UpdateEmailTemplateReq message for a specified
	// email_template_sid, email_subject, email_body.
	// The method will return a UpdateEmailTemplateRes message/entity that will
	// contain the true/false after updating template details for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateEmailTemplate(context.Context, *connect_go.Request[v0alpha.UpdateEmailTemplateReq]) (*connect_go.Response[v0alpha.UpdateEmailTemplateRes], error)
	// Create/Record email template attachment details defined by CreateEmailTemplateAttachmentReq message for a specified
	// email_template_sid, file_name, file_size, content_type, hash.
	// The method will return a CreateEmailTemplateAttachmentRes message/entity that will
	// contain the newly created email_template_attachment_sid, fts storage url and gs_path  for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateEmailTemplateAttachment(context.Context, *connect_go.Request[v0alpha.CreateEmailTemplateAttachmentReq]) (*connect_go.Response[v0alpha.CreateEmailTemplateAttachmentRes], error)
	// Copy/Record email template with attachment details defined by CopyEmailTemplateWithAttachmentsReq message for a specified
	// email_template_sid and email_body.
	// The method will return a CopyEmailTemplateWithAttachmentsRes message/entity that will
	// contain the newly copied email_template_sid value for this client along with attachments
	// Required permissions:
	//
	//	OMNI_BOSS
	CopyEmailTemplateWithAttachments(context.Context, *connect_go.Request[v0alpha.CopyEmailTemplateWithAttachmentsReq]) (*connect_go.Response[v0alpha.CopyEmailTemplateWithAttachmentsRes], error)
	// Update email template attachment details defined by UpdateEmailTemplateAttachmentReq message for a specified
	// email_template_sid, email_template_attachment_sid, file_name, file_size, content_type, hash.
	// The method will return a UpdateEmailTemplateAttachmentRes message/entity that will
	// contain the true/false after updating template attachment details for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateEmailTemplateAttachment(context.Context, *connect_go.Request[v0alpha.UpdateEmailTemplateAttachmentReq]) (*connect_go.Response[v0alpha.UpdateEmailTemplateAttachmentRes], error)
	// Gets email template along with attachment details defined by GetEmailTemplateByTemplateSidReq message for a specified
	// email_template_sid.
	// The method will return a EmailTemplateWithAttachments message/entity that will
	// contain the email_template_sid, email_subject, email_body, EmailTemplateAttachmentDetails for this client_sid and email_template_sid
	// Required permissions:
	//
	//	OMNI_BOSS
	GetEmailTemplateByTemplateSid(context.Context, *connect_go.Request[v0alpha.GetEmailTemplateByTemplateSidReq]) (*connect_go.Response[v0alpha.EmailTemplateWithAttachments], error)
	// List stream of email template along with attachment details defined by GetAllEmailTemplatesReq message.
	// The method will return a GetAllEmailTemplatesRes message/entity that will
	// contain the stream of email_template_sid, email_subject, email_body, EmailTemplateAttachmentDetails for this client_sid
	// Required permissions:
	//
	//	OMNI_BOSS
	GetAllEmailTemplates(context.Context, *connect_go.Request[v0alpha.GetAllEmailTemplatesReq]) (*connect_go.Response[v0alpha.GetAllEmailTemplatesRes], error)
	// Delete email template details defined by DeleteEmailTemplateReq message for a specified
	// email_template_sid.
	// The method will return a DeleteEmailTemplateRes message/entity that will
	// contain the true/false after deleting template details for this client_sid and email_template_sid
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteEmailTemplate(context.Context, *connect_go.Request[v0alpha.DeleteEmailTemplateReq]) (*connect_go.Response[v0alpha.DeleteEmailTemplateRes], error)
	// Delete email template attachments defined by DeleteEmailTemplateAttachmentByIdReq message for a specified
	// email_template_attachment_sid.
	// The method will return a DeleteEmailTemplateAttachmentByIdRes message/entity that will
	// contain the true/false after deleting template attachments for this client_sid and email_template_attachment_sid
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteEmailTemplateAttachmentById(context.Context, *connect_go.Request[v0alpha.DeleteEmailTemplateAttachmentByIdReq]) (*connect_go.Response[v0alpha.DeleteEmailTemplateAttachmentByIdRes], error)
	// Download local inbound file attachment file contents using FTS bucket
	// defined by DownloadInboundEmailAttachmentReq message for a specified
	// email_message_reply_id and email_message_reply_attachment_id.
	// The method will return a DownloadInboundEmailAttachmentRes message/entity that will
	// contain the url where attachment contents are stored
	// Required permissions:
	//
	//	OMNI_BOSS
	DownloadInboundEmailAttachment(context.Context, *connect_go.Request[v0alpha.DownloadInboundEmailAttachmentReq]) (*connect_go.Response[v0alpha.DownloadInboundEmailAttachmentRes], error)
	// List stream of pure email groups based on search criteria defined by EmailGroupSearchReq message for a specified
	// by search_from and search_to or by status or by name and any of these combinations
	// The method will return a EmailGroupSearchRes message/entity that will
	// contain the stream of EmailGroupSearchDetailsRes results
	// Required permissions:
	//
	//	OMNI_BOSS
	PureEmailGroupSearch(context.Context, *connect_go.Request[v0alpha.EmailGroupSearchReq]) (*connect_go.Response[v0alpha.EmailGroupSearchRes], error)
	// Retreives a list of email replies for a conversation that come after the given
	// timestamp. Can set a user_id to get conversations for any user.
	// Required permissions:
	//
	//	??????
	ManagerListNewEmailMessageReplies(context.Context, *connect_go.Request[v0alpha.ListNewEmailMessageRepliesReq]) (*connect_go.Response[v0alpha.ListNewEmailMessageRepliesRes], error)
	// Retreives a list of email replies for a conversation that come after the given
	// timestamp
	// Required permissions:
	//
	//	??????
	ListNewEmailMessageReplies(context.Context, *connect_go.Request[v0alpha.ListNewEmailMessageRepliesReq]) (*connect_go.Response[v0alpha.ListNewEmailMessageRepliesRes], error)
	// List stream of email tasks defined by GetEmailTasksByGroupSidsReq message for a specified
	// array of email_group_sids
	// The method will return a GetEmailTasksByGroupSidsRes message/entity that will
	// contain the stream of EmailTaskMstrDetails results
	// Required permissions:
	//
	//	OMNI_BOSS
	GetEmailTasksByGroupSids(context.Context, *connect_go.Request[v0alpha.GetEmailTasksByGroupSidsReq]) (*connect_go.Response[v0alpha.GetEmailTasksByGroupSidsRes], error)
	// Update email group status value defined by EmailGroupStatusReq message for a specified
	// email_group_sid and status_id.
	// The method will return a EmailGroupStatusRes message/entity that will
	// contain the true/false after updating status for this clients email_group_sid and status_id
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateEmailGroupStatus(context.Context, *connect_go.Request[v0alpha.EmailGroupStatusReq]) (*connect_go.Response[v0alpha.EmailGroupStatusRes], error)
	// Gets email message details defined by GetEmailMessageReq message for a specified
	// email_message_sid.
	// The method will return a GetEmailMessageRes message/entity that will
	// contains email_subject and email_body for the email_message_sid
	// Required permissions:
	//
	//	OMNI_BOSS
	GetEmailMessageDetails(context.Context, *connect_go.Request[v0alpha.GetEmailMessageReq]) (*connect_go.Response[v0alpha.GetEmailMessageRes], error)
	// Create/Record inbound email template defined by CreateInboundEmailTemplateReq message for a specified
	//
	//	connected_inbox_id, name.
	//
	// The method will return a CreateInboundEmailTemplateRes message/entity that will
	// contain the newly created inbound_email_template_id value for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateInboundEmailTemplate(context.Context, *connect_go.Request[v0alpha.CreateInboundEmailTemplateReq]) (*connect_go.Response[v0alpha.CreateInboundEmailTemplateRes], error)
	// Update inbound email template details defined by UpdateInboundEmailTemplateReq message for a specified
	//
	//	inbound_email_template_id, connected_inbox_id, name.
	//
	// The method will return a UpdateInboundEmailTemplateRes message/entity that will
	// contain the true/false after updating inbound email template details for inbound_email_template_id
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateInboundEmailTemplate(context.Context, *connect_go.Request[v0alpha.UpdateInboundEmailTemplateReq]) (*connect_go.Response[v0alpha.UpdateInboundEmailTemplateRes], error)
	// Delete inbound email template details defined by DeleteInboundEmailTemplateByIdReq message for a specified
	//
	//	inbound_email_template_id.
	//
	// The method will return a DeleteInboundEmailTemplateByIdRes message/entity that will
	// contain the true/false after deleting inbound email template details for inbound_email_template_id
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteInboundEmailTemplateById(context.Context, *connect_go.Request[v0alpha.DeleteInboundEmailTemplateByIdReq]) (*connect_go.Response[v0alpha.DeleteInboundEmailTemplateByIdRes], error)
	// List stream of inbound email template details defined by ListInboundEmailTemplatesReq message
	// The method will return a ListInboundEmailTemplatesRes message/entity that will
	// contain the stream of inbound_email_template_id, connected_inbox_id, name.
	// Required permissions:
	//
	//	OMNI_BOSS
	ListInboundEmailTemplates(context.Context, *connect_go.Request[v0alpha.ListInboundEmailTemplatesReq]) (*connect_go.Response[v0alpha.ListInboundEmailTemplatesRes], error)
	// Gets inbound email template details defined by GetInboundEmailTemplateByIdReq message for a specified
	// inbound_email_template_id.
	// The method will return a InboundEmailTemplate message/entity that will
	// contain the inbound email template details for inbound_email_template_id
	// Required permissions:
	//
	//	OMNI_BOSS
	GetInboundEmailTemplateById(context.Context, *connect_go.Request[v0alpha.GetInboundEmailTemplateByIdReq]) (*connect_go.Response[v0alpha.InboundEmailTemplate], error)
	// Update inbound email group status details defined by UpdateInboundEmailGroupStatusReq
	// status. The method will return a UpdateInboundEmailGroupStatusRes message/entity
	// that will contain the true/false after updating inbound email group details
	// for this org_id, region_id and inbound_email_group_id Required permissions:
	//
	//	OMNI_BOSS
	UpdateInboundEmailGroupStatus(context.Context, *connect_go.Request[v0alpha.UpdateInboundEmailGroupStatusReq]) (*connect_go.Response[v0alpha.UpdateInboundEmailGroupStatusRes], error)
	// Stop inbound email group defined by StopInboundEmailGroupReq message for a specified
	//
	//	inbound_email_group_id.
	//
	// The method will return a StopInboundEmailGroupRes message/entity that will
	// contain the true/false after updating inbound email group details for inbound_email_group_id
	// Required permissions:
	//
	//	OMNI_BOSS
	StopInboundEmailGroup(context.Context, *connect_go.Request[v0alpha.StopInboundEmailGroupReq]) (*connect_go.Response[v0alpha.StopInboundEmailGroupRes], error)
	// Stop all InboundEmail groups defined by StopAllInboundEmailGroupsReq message for the specified
	// array of inbound_email_group_ids
	// The method will mark the InboundEmail groups as completed.
	// Required permissions: VIEW_EMAIL
	StopAllInboundEmailGroups(context.Context, *connect_go.Request[v0alpha.StopAllInboundEmailGroupsReq]) (*connect_go.Response[v0alpha.StopInboundEmailGroupRes], error)
	// List stream of pure inbound email groups based on search criteria defined by PureInboundEmailGroupSearchReq message for a specified
	//
	//	by search_from and search_to or by status or by name and any of these combinations
	//
	// The method will return a PureInboundEmailGroupSearchRes message/entity that will
	// contain the stream of InboundEmailGroups
	// Required permissions:
	//
	//	OMNI_BOSS
	PureInboundEmailGroupSearch(context.Context, *connect_go.Request[v0alpha.PureInboundEmailGroupSearchReq]) (*connect_go.Response[v0alpha.PureInboundEmailGroupSearchRes], error)
	// List stream of inbound email groups based on search criteria defined by
	// InboundEmailGroupSearchReq message for a specified by
	// search_from and search_to or by status or by name and any of these
	// combinations The method will return a InboundEmailGroupSearchRes
	// message/entity that will contain the stream of InboundEmailGroups Required
	// permissions:
	//
	//	OMNI_BOSS
	InboundEmailGroupSearch(context.Context, *connect_go.Request[v0alpha.InboundEmailGroupSearchReq]) (*connect_go.Response[v0alpha.InboundEmailGroupSearchRes], error)
	// List stream of inbound email groups defined by ListInboundEmailGroupsByGroupIdsReq message for a specified
	// array of inbound email groups
	// The method will return a ListInboundEmailGroupsByGroupIdsRes message/entity that will
	// contain the stream of InboundEmailGroup
	// Required permissions:
	//
	//	OMNI_BOSS
	ListInboundEmailGroupsByGroupIds(context.Context, *connect_go.Request[v0alpha.ListInboundEmailGroupsByGroupIdsReq]) (*connect_go.Response[v0alpha.ListInboundEmailGroupsByGroupIdsRes], error)
	// List stream of inbound email tasks defined by ListInboundEmailTasksByGroupIdsReq message for a specified
	// array of inbound email groups
	// The method will return a ListInboundEmailTasksByGroupIdsRes message/entity that will
	// contain the stream of InboundEmailTaskDetails along with any file attachments
	// Required permissions:
	//
	//	OMNI_BOSS
	ListInboundEmailTasksByGroupIds(context.Context, *connect_go.Request[v0alpha.ListInboundEmailTasksByGroupIdsReq]) (*connect_go.Response[v0alpha.ListInboundEmailTasksByGroupIdsRes], error)
	// List stream of active/running inbound email groups defined by ListActiveInboundEmailGroupsReq message
	// The method will return a ListActiveInboundEmailGroupsRes message/entity that will
	// contain the stream of active/running InboundEmailGroups
	// Required permissions:
	//
	//	OMNI_BOSS
	ListActiveInboundEmailGroups(context.Context, *connect_go.Request[v0alpha.ListActiveInboundEmailGroupsReq]) (*connect_go.Response[v0alpha.ListActiveInboundEmailGroupsRes], error)
	// Schedule Outbound email campaign defined by ScheduleReq message for the specified
	// email_template_sid, initial_pace, selected_email_col, from_address,
	// allow_duplicates, group_name, contact_group_sid, start_time, stop_time
	// The method will return ScheduleRes message/entity that will
	// contain newly scheduled email_group_sid and email_group_id for this client
	// Required permissions:
	//
	//	EXECUTE_SEND_BROADCAST
	Schedule(context.Context, *connect_go.Request[v0alpha.ScheduleReq]) (*connect_go.Response[v0alpha.ScheduleRes], error)
	// Schedule Outbound email campaign defined by ScheduleOutboundEmailGroupReq message for the specified
	// subject, email message, initial_pace, selected_email_col, from_address,
	// allow_duplicates, group_name, contact_group_sid, start_time, stop_time
	// The method will return ScheduleOutboundEmailGroupRes message/entity that will
	// contain newly scheduled email_group_sid and email_group_id for this client
	// Required permissions:
	//
	//	EXECUTE_SEND_BROADCAST
	ScheduleOutboundEmailGroup(context.Context, *connect_go.Request[v0alpha.ScheduleOutboundEmailGroupReq]) (*connect_go.Response[v0alpha.ScheduleOutboundEmailGroupRes], error)
	// Schedule Pure Inbound email campaign defined by SchedulePureInboundEmailReq message for the specified
	// inbound_email_template_sid
	// The method will return SchedulePureInboundEmailRes message/entity that will
	// contain newly scheduled inbound_email_group_sid for this client
	// Required permissions:
	//
	//	EXECUTE_SEND_BROADCAST
	SchedulePureInboundEmail(context.Context, *connect_go.Request[v0alpha.SchedulePureInboundEmailReq]) (*connect_go.Response[v0alpha.SchedulePureInboundEmailRes], error)
	// Create/Record inbound agent email reply defined by CreateEmailMessageAgentReplyReq message for a specified
	// inbound_email_group_id, to_address, subject, email_conversation_id, agent_sid .
	// The method will return a EmailMessageReply message/entity that will
	// contain the newly created email_message_reply data
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateEmailMessageAgentReply(context.Context, *connect_go.Request[v0alpha.CreateEmailMessageAgentReplyReq]) (*connect_go.Response[v0alpha.EmailMessageReplyWithAttachments], error)
	// Create/Record inbound agent email reply attachment defined by CreateEmailMessageAgentReplyAttachmentReq message for a specified
	// file_name, file_size and file_type.
	// The method will return a CreateEmailMessageAgentReplyAttachmentRes message/entity that will
	// contain the newly created email_message_reply_attachment_id, url_path and gs_path for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateEmailMessageAgentReplyAttachment(context.Context, *connect_go.Request[v0alpha.CreateEmailMessageAgentReplyAttachmentReq]) (*connect_go.Response[v0alpha.CreateEmailMessageAgentReplyAttachmentRes], error)
	// Sends email message based on email details defined in SendReplyReq specified by
	// in_reply_to and email_reply_id
	// The method will return a EmailMessageReplyWithAttachments message/entity that will
	// contain the email_message_reply data
	// along with along with attachment details
	// Required permissions:
	//
	//	EXECUTE_SEND_BROADCAST
	SendReply(context.Context, *connect_go.Request[v0alpha.SendReplyReq]) (*connect_go.Response[v0alpha.EmailMessageReplyWithAttachments], error)
	// List stream of email groups defined by GetEmailGroupsByGroupSidsReq message for a specified
	// array of email_group_sids
	// The method will return a GetEmailGroupsByGroupSidsRes message/entity that will
	// contain the stream of EmailGroupSearchDetailsRes results
	// Required permissions:
	//
	//	OMNI_BOSS
	GetEmailGroupsByGroupSids(context.Context, *connect_go.Request[v0alpha.GetEmailGroupsByGroupSidsReq]) (*connect_go.Response[v0alpha.GetEmailGroupsByGroupSidsRes], error)
	// Get outbound email group details defined by GetEmailGroupByGroupSidReq message for a specified
	// email_group_sid
	// The method will return a EmailGroupDetailsWithAttachments message/entity that will
	// contain the outbound email group details
	// Required permissions:
	//
	//	OMNI_BOSS
	GetEmailGroupByGroupSid(context.Context, *connect_go.Request[v0alpha.GetEmailGroupByGroupSidReq]) (*connect_go.Response[v0alpha.EmailGroupDetailsWithAttachments], error)
	// Get outbound email group details defined by GetEmailGroupByGroupIdReq message for a specified
	// email_group_id
	// The method will return a EmailGroupDetailsWithAttachments message/entity that will
	// contain the outbound email group details
	// Required permissions:
	//
	//	OMNI_BOSS
	GetEmailGroupByGroupId(context.Context, *connect_go.Request[v0alpha.GetEmailGroupByGroupIdReq]) (*connect_go.Response[v0alpha.EmailGroupDetailsWithAttachments], error)
	// Schedule Pure OmniLink Inbound email campaign defined by SchedulePureOmniLinkInboundEmailReq message for the specified
	// connectedInbox and skills
	// The method will return SchedulePureOmniLinkInboundEmailRes message/entity that will
	// contain newly scheduled inbound_email_group_sid for this client
	// Required permissions:
	//
	//	EXECUTE_SEND_BROADCAST
	SchedulePureOmniLinkInboundEmail(context.Context, *connect_go.Request[v0alpha.SchedulePureOmniLinkInboundEmailReq]) (*connect_go.Response[v0alpha.SchedulePureOmniLinkInboundEmailRes], error)
	// Updates the name, skills, stop time for the inbound email group
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateInboundEmailGroup(context.Context, *connect_go.Request[v0alpha.UpdateInboundEmailGroupReq]) (*connect_go.Response[v0alpha.UpdateInboundEmailGroupRes], error)
	// Update email group sendsperminute defined by EmailGroupSendsPerMinuteReq
	// message for a specified email_group_sid and sends_per_minute.
	// The method will return a EmailGroupSendsPerMinuteRes message/entity that
	// will contain the true/false after updating sends_per_minute value for this
	// clients email_group_sid and sends_per_minute Required permissions:
	//
	//	OMNI_BOSS
	UpdateEmailGroupMstrSendsPerMinute(context.Context, *connect_go.Request[v0alpha.EmailGroupSendsPerMinuteReq]) (*connect_go.Response[v0alpha.EmailGroupSendsPerMinuteRes], error)
	// Updates the name, start and stop time for the outbound email group
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateOutboundEmailGroup(context.Context, *connect_go.Request[v0alpha.UpdateOutboundEmailGroupReq]) (*connect_go.Response[v0alpha.UpdateOutboundEmailGroupRes], error)
	// Gets a inbound email group details defined by InboundEmailGroupByIdReq
	// message for the specified inbound_email_group_id, org_id and region_id. The
	// method will return a InboundEmailGroup message/entity. Required
	// permissions:
	//
	//	OMNI_BOSS
	GetInboundEmailGroupById(context.Context, *connect_go.Request[v0alpha.InboundEmailGroupByIdReq]) (*connect_go.Response[v0alpha.InboundEmailGroup], error)
	// Create/Add email message attachment details defined by CreateEmailMessageAttachmentReq
	// message for the specified client.
	// This method will return a CreateEmailMessageAttachmentRes message/entity. Required
	// permissions:
	//
	//	OMNI_BOSS
	CreateEmailMessageAttachment(context.Context, *connect_go.Request[v0alpha.CreateEmailMessageAttachmentReq]) (*connect_go.Response[v0alpha.CreateEmailMessageAttachmentRes], error)
	// List all the email message attachments and their details defined by
	// ListEmailMessageAttachmentsReq for the specified client.
	// permissions:
	//
	//	OMNI_BOSS
	ListEmailMessageAttachments(context.Context, *connect_go.Request[v0alpha.ListEmailMessageAttachmentsReq]) (*connect_go.Response[v0alpha.ListEmailMessageAttachmentsRes], error)
	// Unassigns a conversation from the current user and puts it back into the matching pool
	// Required permissions:
	//
	//	OMNI_LINK
	UnassignCurrentUserFromEmailConversation(context.Context, *connect_go.Request[v0alpha.UnassignCurrentUserFromEmailConversationReq]) (*connect_go.Response[v0alpha.UnassignUserFromEmailConversationRes], error)
	// Listing all email conversations for the dashboard
	// Required Permissions:
	//
	//	OMNI_BOSS
	DashboardEmailConversationSearch(context.Context, *connect_go.Request[v0alpha.DashboardEmailConversationSearchReq]) (*connect_go.Response[v0alpha.DashboardEmailConversationSearchRes], error)
	// ReassignEmailConversation.  unassign current user and assign
	// new user.
	// This method will return a ReassignEmailConversationRes
	// Required permissions
	//
	//	OMNI_BOSS
	ReassignEmailConversation(context.Context, *connect_go.Request[v0alpha.ReassignEmailConversationReq]) (*connect_go.Response[v0alpha.ReassignEmailConversationRes], error)
	// AssignEmailConversation - allowing the manager from the dashboard to assing a email conversation
	// before the matcher assigns it.
	AssignEmailConversation(context.Context, *connect_go.Request[v0alpha.AssignEmailConversationReq]) (*connect_go.Response[v0alpha.AssignEmailConversationRes], error)
	// Suspends an email conversation
	SuspendEmailConversation(context.Context, *connect_go.Request[v0alpha.SuspendEmailConversationReq]) (*connect_go.Response[v0alpha.SuspendEmailConversationRes], error)
	// List stream of inbound and outbound campaigns defined by ListCampaignsByConnectedInboxIdReq message
	// The method will return a ListCampaignsByConnectedInboxIdRes message/entity that will
	// contain the stream of all campaigns along with project details.
	// Required permissions:
	//
	//	OMNI_BOSS
	ListCampaignsByConnectedInboxId(context.Context, *connect_go.Request[v0alpha.ListCampaignsByConnectedInboxIdReq]) (*connect_go.Response[v0alpha.ListCampaignsByConnectedInboxIdRes], error)
	// Close email conversation defined by CloseEmailConversationReq message
	// Required permissions:
	//
	//	OMNI_BOSS
	CloseEmailConversation(context.Context, *connect_go.Request[v0alpha.CloseEmailConversationReq]) (*connect_go.Response[v0alpha.CloseEmailConversationRes], error)
}

// NewEmailApiClient constructs a client for the api.v0alpha.EmailApi service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEmailApiClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) EmailApiClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &emailApiClient{
		createEmailTemplate: connect_go.NewClient[v0alpha.CreateEmailTemplateReq, v0alpha.CreateEmailTemplateRes](
			httpClient,
			baseURL+EmailApiCreateEmailTemplateProcedure,
			opts...,
		),
		updateEmailTemplate: connect_go.NewClient[v0alpha.UpdateEmailTemplateReq, v0alpha.UpdateEmailTemplateRes](
			httpClient,
			baseURL+EmailApiUpdateEmailTemplateProcedure,
			opts...,
		),
		createEmailTemplateAttachment: connect_go.NewClient[v0alpha.CreateEmailTemplateAttachmentReq, v0alpha.CreateEmailTemplateAttachmentRes](
			httpClient,
			baseURL+EmailApiCreateEmailTemplateAttachmentProcedure,
			opts...,
		),
		copyEmailTemplateWithAttachments: connect_go.NewClient[v0alpha.CopyEmailTemplateWithAttachmentsReq, v0alpha.CopyEmailTemplateWithAttachmentsRes](
			httpClient,
			baseURL+EmailApiCopyEmailTemplateWithAttachmentsProcedure,
			opts...,
		),
		updateEmailTemplateAttachment: connect_go.NewClient[v0alpha.UpdateEmailTemplateAttachmentReq, v0alpha.UpdateEmailTemplateAttachmentRes](
			httpClient,
			baseURL+EmailApiUpdateEmailTemplateAttachmentProcedure,
			opts...,
		),
		getEmailTemplateByTemplateSid: connect_go.NewClient[v0alpha.GetEmailTemplateByTemplateSidReq, v0alpha.EmailTemplateWithAttachments](
			httpClient,
			baseURL+EmailApiGetEmailTemplateByTemplateSidProcedure,
			opts...,
		),
		getAllEmailTemplates: connect_go.NewClient[v0alpha.GetAllEmailTemplatesReq, v0alpha.GetAllEmailTemplatesRes](
			httpClient,
			baseURL+EmailApiGetAllEmailTemplatesProcedure,
			opts...,
		),
		deleteEmailTemplate: connect_go.NewClient[v0alpha.DeleteEmailTemplateReq, v0alpha.DeleteEmailTemplateRes](
			httpClient,
			baseURL+EmailApiDeleteEmailTemplateProcedure,
			opts...,
		),
		deleteEmailTemplateAttachmentById: connect_go.NewClient[v0alpha.DeleteEmailTemplateAttachmentByIdReq, v0alpha.DeleteEmailTemplateAttachmentByIdRes](
			httpClient,
			baseURL+EmailApiDeleteEmailTemplateAttachmentByIdProcedure,
			opts...,
		),
		downloadInboundEmailAttachment: connect_go.NewClient[v0alpha.DownloadInboundEmailAttachmentReq, v0alpha.DownloadInboundEmailAttachmentRes](
			httpClient,
			baseURL+EmailApiDownloadInboundEmailAttachmentProcedure,
			opts...,
		),
		pureEmailGroupSearch: connect_go.NewClient[v0alpha.EmailGroupSearchReq, v0alpha.EmailGroupSearchRes](
			httpClient,
			baseURL+EmailApiPureEmailGroupSearchProcedure,
			opts...,
		),
		managerListNewEmailMessageReplies: connect_go.NewClient[v0alpha.ListNewEmailMessageRepliesReq, v0alpha.ListNewEmailMessageRepliesRes](
			httpClient,
			baseURL+EmailApiManagerListNewEmailMessageRepliesProcedure,
			opts...,
		),
		listNewEmailMessageReplies: connect_go.NewClient[v0alpha.ListNewEmailMessageRepliesReq, v0alpha.ListNewEmailMessageRepliesRes](
			httpClient,
			baseURL+EmailApiListNewEmailMessageRepliesProcedure,
			opts...,
		),
		getEmailTasksByGroupSids: connect_go.NewClient[v0alpha.GetEmailTasksByGroupSidsReq, v0alpha.GetEmailTasksByGroupSidsRes](
			httpClient,
			baseURL+EmailApiGetEmailTasksByGroupSidsProcedure,
			opts...,
		),
		updateEmailGroupStatus: connect_go.NewClient[v0alpha.EmailGroupStatusReq, v0alpha.EmailGroupStatusRes](
			httpClient,
			baseURL+EmailApiUpdateEmailGroupStatusProcedure,
			opts...,
		),
		getEmailMessageDetails: connect_go.NewClient[v0alpha.GetEmailMessageReq, v0alpha.GetEmailMessageRes](
			httpClient,
			baseURL+EmailApiGetEmailMessageDetailsProcedure,
			opts...,
		),
		createInboundEmailTemplate: connect_go.NewClient[v0alpha.CreateInboundEmailTemplateReq, v0alpha.CreateInboundEmailTemplateRes](
			httpClient,
			baseURL+EmailApiCreateInboundEmailTemplateProcedure,
			opts...,
		),
		updateInboundEmailTemplate: connect_go.NewClient[v0alpha.UpdateInboundEmailTemplateReq, v0alpha.UpdateInboundEmailTemplateRes](
			httpClient,
			baseURL+EmailApiUpdateInboundEmailTemplateProcedure,
			opts...,
		),
		deleteInboundEmailTemplateById: connect_go.NewClient[v0alpha.DeleteInboundEmailTemplateByIdReq, v0alpha.DeleteInboundEmailTemplateByIdRes](
			httpClient,
			baseURL+EmailApiDeleteInboundEmailTemplateByIdProcedure,
			opts...,
		),
		listInboundEmailTemplates: connect_go.NewClient[v0alpha.ListInboundEmailTemplatesReq, v0alpha.ListInboundEmailTemplatesRes](
			httpClient,
			baseURL+EmailApiListInboundEmailTemplatesProcedure,
			opts...,
		),
		getInboundEmailTemplateById: connect_go.NewClient[v0alpha.GetInboundEmailTemplateByIdReq, v0alpha.InboundEmailTemplate](
			httpClient,
			baseURL+EmailApiGetInboundEmailTemplateByIdProcedure,
			opts...,
		),
		updateInboundEmailGroupStatus: connect_go.NewClient[v0alpha.UpdateInboundEmailGroupStatusReq, v0alpha.UpdateInboundEmailGroupStatusRes](
			httpClient,
			baseURL+EmailApiUpdateInboundEmailGroupStatusProcedure,
			opts...,
		),
		stopInboundEmailGroup: connect_go.NewClient[v0alpha.StopInboundEmailGroupReq, v0alpha.StopInboundEmailGroupRes](
			httpClient,
			baseURL+EmailApiStopInboundEmailGroupProcedure,
			opts...,
		),
		stopAllInboundEmailGroups: connect_go.NewClient[v0alpha.StopAllInboundEmailGroupsReq, v0alpha.StopInboundEmailGroupRes](
			httpClient,
			baseURL+EmailApiStopAllInboundEmailGroupsProcedure,
			opts...,
		),
		pureInboundEmailGroupSearch: connect_go.NewClient[v0alpha.PureInboundEmailGroupSearchReq, v0alpha.PureInboundEmailGroupSearchRes](
			httpClient,
			baseURL+EmailApiPureInboundEmailGroupSearchProcedure,
			opts...,
		),
		inboundEmailGroupSearch: connect_go.NewClient[v0alpha.InboundEmailGroupSearchReq, v0alpha.InboundEmailGroupSearchRes](
			httpClient,
			baseURL+EmailApiInboundEmailGroupSearchProcedure,
			opts...,
		),
		listInboundEmailGroupsByGroupIds: connect_go.NewClient[v0alpha.ListInboundEmailGroupsByGroupIdsReq, v0alpha.ListInboundEmailGroupsByGroupIdsRes](
			httpClient,
			baseURL+EmailApiListInboundEmailGroupsByGroupIdsProcedure,
			opts...,
		),
		listInboundEmailTasksByGroupIds: connect_go.NewClient[v0alpha.ListInboundEmailTasksByGroupIdsReq, v0alpha.ListInboundEmailTasksByGroupIdsRes](
			httpClient,
			baseURL+EmailApiListInboundEmailTasksByGroupIdsProcedure,
			opts...,
		),
		listActiveInboundEmailGroups: connect_go.NewClient[v0alpha.ListActiveInboundEmailGroupsReq, v0alpha.ListActiveInboundEmailGroupsRes](
			httpClient,
			baseURL+EmailApiListActiveInboundEmailGroupsProcedure,
			opts...,
		),
		schedule: connect_go.NewClient[v0alpha.ScheduleReq, v0alpha.ScheduleRes](
			httpClient,
			baseURL+EmailApiScheduleProcedure,
			opts...,
		),
		scheduleOutboundEmailGroup: connect_go.NewClient[v0alpha.ScheduleOutboundEmailGroupReq, v0alpha.ScheduleOutboundEmailGroupRes](
			httpClient,
			baseURL+EmailApiScheduleOutboundEmailGroupProcedure,
			opts...,
		),
		schedulePureInboundEmail: connect_go.NewClient[v0alpha.SchedulePureInboundEmailReq, v0alpha.SchedulePureInboundEmailRes](
			httpClient,
			baseURL+EmailApiSchedulePureInboundEmailProcedure,
			opts...,
		),
		createEmailMessageAgentReply: connect_go.NewClient[v0alpha.CreateEmailMessageAgentReplyReq, v0alpha.EmailMessageReplyWithAttachments](
			httpClient,
			baseURL+EmailApiCreateEmailMessageAgentReplyProcedure,
			opts...,
		),
		createEmailMessageAgentReplyAttachment: connect_go.NewClient[v0alpha.CreateEmailMessageAgentReplyAttachmentReq, v0alpha.CreateEmailMessageAgentReplyAttachmentRes](
			httpClient,
			baseURL+EmailApiCreateEmailMessageAgentReplyAttachmentProcedure,
			opts...,
		),
		sendReply: connect_go.NewClient[v0alpha.SendReplyReq, v0alpha.EmailMessageReplyWithAttachments](
			httpClient,
			baseURL+EmailApiSendReplyProcedure,
			opts...,
		),
		getEmailGroupsByGroupSids: connect_go.NewClient[v0alpha.GetEmailGroupsByGroupSidsReq, v0alpha.GetEmailGroupsByGroupSidsRes](
			httpClient,
			baseURL+EmailApiGetEmailGroupsByGroupSidsProcedure,
			opts...,
		),
		getEmailGroupByGroupSid: connect_go.NewClient[v0alpha.GetEmailGroupByGroupSidReq, v0alpha.EmailGroupDetailsWithAttachments](
			httpClient,
			baseURL+EmailApiGetEmailGroupByGroupSidProcedure,
			opts...,
		),
		getEmailGroupByGroupId: connect_go.NewClient[v0alpha.GetEmailGroupByGroupIdReq, v0alpha.EmailGroupDetailsWithAttachments](
			httpClient,
			baseURL+EmailApiGetEmailGroupByGroupIdProcedure,
			opts...,
		),
		schedulePureOmniLinkInboundEmail: connect_go.NewClient[v0alpha.SchedulePureOmniLinkInboundEmailReq, v0alpha.SchedulePureOmniLinkInboundEmailRes](
			httpClient,
			baseURL+EmailApiSchedulePureOmniLinkInboundEmailProcedure,
			opts...,
		),
		updateInboundEmailGroup: connect_go.NewClient[v0alpha.UpdateInboundEmailGroupReq, v0alpha.UpdateInboundEmailGroupRes](
			httpClient,
			baseURL+EmailApiUpdateInboundEmailGroupProcedure,
			opts...,
		),
		updateEmailGroupMstrSendsPerMinute: connect_go.NewClient[v0alpha.EmailGroupSendsPerMinuteReq, v0alpha.EmailGroupSendsPerMinuteRes](
			httpClient,
			baseURL+EmailApiUpdateEmailGroupMstrSendsPerMinuteProcedure,
			opts...,
		),
		updateOutboundEmailGroup: connect_go.NewClient[v0alpha.UpdateOutboundEmailGroupReq, v0alpha.UpdateOutboundEmailGroupRes](
			httpClient,
			baseURL+EmailApiUpdateOutboundEmailGroupProcedure,
			opts...,
		),
		getInboundEmailGroupById: connect_go.NewClient[v0alpha.InboundEmailGroupByIdReq, v0alpha.InboundEmailGroup](
			httpClient,
			baseURL+EmailApiGetInboundEmailGroupByIdProcedure,
			opts...,
		),
		createEmailMessageAttachment: connect_go.NewClient[v0alpha.CreateEmailMessageAttachmentReq, v0alpha.CreateEmailMessageAttachmentRes](
			httpClient,
			baseURL+EmailApiCreateEmailMessageAttachmentProcedure,
			opts...,
		),
		listEmailMessageAttachments: connect_go.NewClient[v0alpha.ListEmailMessageAttachmentsReq, v0alpha.ListEmailMessageAttachmentsRes](
			httpClient,
			baseURL+EmailApiListEmailMessageAttachmentsProcedure,
			opts...,
		),
		unassignCurrentUserFromEmailConversation: connect_go.NewClient[v0alpha.UnassignCurrentUserFromEmailConversationReq, v0alpha.UnassignUserFromEmailConversationRes](
			httpClient,
			baseURL+EmailApiUnassignCurrentUserFromEmailConversationProcedure,
			opts...,
		),
		dashboardEmailConversationSearch: connect_go.NewClient[v0alpha.DashboardEmailConversationSearchReq, v0alpha.DashboardEmailConversationSearchRes](
			httpClient,
			baseURL+EmailApiDashboardEmailConversationSearchProcedure,
			opts...,
		),
		reassignEmailConversation: connect_go.NewClient[v0alpha.ReassignEmailConversationReq, v0alpha.ReassignEmailConversationRes](
			httpClient,
			baseURL+EmailApiReassignEmailConversationProcedure,
			opts...,
		),
		assignEmailConversation: connect_go.NewClient[v0alpha.AssignEmailConversationReq, v0alpha.AssignEmailConversationRes](
			httpClient,
			baseURL+EmailApiAssignEmailConversationProcedure,
			opts...,
		),
		suspendEmailConversation: connect_go.NewClient[v0alpha.SuspendEmailConversationReq, v0alpha.SuspendEmailConversationRes](
			httpClient,
			baseURL+EmailApiSuspendEmailConversationProcedure,
			opts...,
		),
		listCampaignsByConnectedInboxId: connect_go.NewClient[v0alpha.ListCampaignsByConnectedInboxIdReq, v0alpha.ListCampaignsByConnectedInboxIdRes](
			httpClient,
			baseURL+EmailApiListCampaignsByConnectedInboxIdProcedure,
			opts...,
		),
		closeEmailConversation: connect_go.NewClient[v0alpha.CloseEmailConversationReq, v0alpha.CloseEmailConversationRes](
			httpClient,
			baseURL+EmailApiCloseEmailConversationProcedure,
			opts...,
		),
	}
}

// emailApiClient implements EmailApiClient.
type emailApiClient struct {
	createEmailTemplate                      *connect_go.Client[v0alpha.CreateEmailTemplateReq, v0alpha.CreateEmailTemplateRes]
	updateEmailTemplate                      *connect_go.Client[v0alpha.UpdateEmailTemplateReq, v0alpha.UpdateEmailTemplateRes]
	createEmailTemplateAttachment            *connect_go.Client[v0alpha.CreateEmailTemplateAttachmentReq, v0alpha.CreateEmailTemplateAttachmentRes]
	copyEmailTemplateWithAttachments         *connect_go.Client[v0alpha.CopyEmailTemplateWithAttachmentsReq, v0alpha.CopyEmailTemplateWithAttachmentsRes]
	updateEmailTemplateAttachment            *connect_go.Client[v0alpha.UpdateEmailTemplateAttachmentReq, v0alpha.UpdateEmailTemplateAttachmentRes]
	getEmailTemplateByTemplateSid            *connect_go.Client[v0alpha.GetEmailTemplateByTemplateSidReq, v0alpha.EmailTemplateWithAttachments]
	getAllEmailTemplates                     *connect_go.Client[v0alpha.GetAllEmailTemplatesReq, v0alpha.GetAllEmailTemplatesRes]
	deleteEmailTemplate                      *connect_go.Client[v0alpha.DeleteEmailTemplateReq, v0alpha.DeleteEmailTemplateRes]
	deleteEmailTemplateAttachmentById        *connect_go.Client[v0alpha.DeleteEmailTemplateAttachmentByIdReq, v0alpha.DeleteEmailTemplateAttachmentByIdRes]
	downloadInboundEmailAttachment           *connect_go.Client[v0alpha.DownloadInboundEmailAttachmentReq, v0alpha.DownloadInboundEmailAttachmentRes]
	pureEmailGroupSearch                     *connect_go.Client[v0alpha.EmailGroupSearchReq, v0alpha.EmailGroupSearchRes]
	managerListNewEmailMessageReplies        *connect_go.Client[v0alpha.ListNewEmailMessageRepliesReq, v0alpha.ListNewEmailMessageRepliesRes]
	listNewEmailMessageReplies               *connect_go.Client[v0alpha.ListNewEmailMessageRepliesReq, v0alpha.ListNewEmailMessageRepliesRes]
	getEmailTasksByGroupSids                 *connect_go.Client[v0alpha.GetEmailTasksByGroupSidsReq, v0alpha.GetEmailTasksByGroupSidsRes]
	updateEmailGroupStatus                   *connect_go.Client[v0alpha.EmailGroupStatusReq, v0alpha.EmailGroupStatusRes]
	getEmailMessageDetails                   *connect_go.Client[v0alpha.GetEmailMessageReq, v0alpha.GetEmailMessageRes]
	createInboundEmailTemplate               *connect_go.Client[v0alpha.CreateInboundEmailTemplateReq, v0alpha.CreateInboundEmailTemplateRes]
	updateInboundEmailTemplate               *connect_go.Client[v0alpha.UpdateInboundEmailTemplateReq, v0alpha.UpdateInboundEmailTemplateRes]
	deleteInboundEmailTemplateById           *connect_go.Client[v0alpha.DeleteInboundEmailTemplateByIdReq, v0alpha.DeleteInboundEmailTemplateByIdRes]
	listInboundEmailTemplates                *connect_go.Client[v0alpha.ListInboundEmailTemplatesReq, v0alpha.ListInboundEmailTemplatesRes]
	getInboundEmailTemplateById              *connect_go.Client[v0alpha.GetInboundEmailTemplateByIdReq, v0alpha.InboundEmailTemplate]
	updateInboundEmailGroupStatus            *connect_go.Client[v0alpha.UpdateInboundEmailGroupStatusReq, v0alpha.UpdateInboundEmailGroupStatusRes]
	stopInboundEmailGroup                    *connect_go.Client[v0alpha.StopInboundEmailGroupReq, v0alpha.StopInboundEmailGroupRes]
	stopAllInboundEmailGroups                *connect_go.Client[v0alpha.StopAllInboundEmailGroupsReq, v0alpha.StopInboundEmailGroupRes]
	pureInboundEmailGroupSearch              *connect_go.Client[v0alpha.PureInboundEmailGroupSearchReq, v0alpha.PureInboundEmailGroupSearchRes]
	inboundEmailGroupSearch                  *connect_go.Client[v0alpha.InboundEmailGroupSearchReq, v0alpha.InboundEmailGroupSearchRes]
	listInboundEmailGroupsByGroupIds         *connect_go.Client[v0alpha.ListInboundEmailGroupsByGroupIdsReq, v0alpha.ListInboundEmailGroupsByGroupIdsRes]
	listInboundEmailTasksByGroupIds          *connect_go.Client[v0alpha.ListInboundEmailTasksByGroupIdsReq, v0alpha.ListInboundEmailTasksByGroupIdsRes]
	listActiveInboundEmailGroups             *connect_go.Client[v0alpha.ListActiveInboundEmailGroupsReq, v0alpha.ListActiveInboundEmailGroupsRes]
	schedule                                 *connect_go.Client[v0alpha.ScheduleReq, v0alpha.ScheduleRes]
	scheduleOutboundEmailGroup               *connect_go.Client[v0alpha.ScheduleOutboundEmailGroupReq, v0alpha.ScheduleOutboundEmailGroupRes]
	schedulePureInboundEmail                 *connect_go.Client[v0alpha.SchedulePureInboundEmailReq, v0alpha.SchedulePureInboundEmailRes]
	createEmailMessageAgentReply             *connect_go.Client[v0alpha.CreateEmailMessageAgentReplyReq, v0alpha.EmailMessageReplyWithAttachments]
	createEmailMessageAgentReplyAttachment   *connect_go.Client[v0alpha.CreateEmailMessageAgentReplyAttachmentReq, v0alpha.CreateEmailMessageAgentReplyAttachmentRes]
	sendReply                                *connect_go.Client[v0alpha.SendReplyReq, v0alpha.EmailMessageReplyWithAttachments]
	getEmailGroupsByGroupSids                *connect_go.Client[v0alpha.GetEmailGroupsByGroupSidsReq, v0alpha.GetEmailGroupsByGroupSidsRes]
	getEmailGroupByGroupSid                  *connect_go.Client[v0alpha.GetEmailGroupByGroupSidReq, v0alpha.EmailGroupDetailsWithAttachments]
	getEmailGroupByGroupId                   *connect_go.Client[v0alpha.GetEmailGroupByGroupIdReq, v0alpha.EmailGroupDetailsWithAttachments]
	schedulePureOmniLinkInboundEmail         *connect_go.Client[v0alpha.SchedulePureOmniLinkInboundEmailReq, v0alpha.SchedulePureOmniLinkInboundEmailRes]
	updateInboundEmailGroup                  *connect_go.Client[v0alpha.UpdateInboundEmailGroupReq, v0alpha.UpdateInboundEmailGroupRes]
	updateEmailGroupMstrSendsPerMinute       *connect_go.Client[v0alpha.EmailGroupSendsPerMinuteReq, v0alpha.EmailGroupSendsPerMinuteRes]
	updateOutboundEmailGroup                 *connect_go.Client[v0alpha.UpdateOutboundEmailGroupReq, v0alpha.UpdateOutboundEmailGroupRes]
	getInboundEmailGroupById                 *connect_go.Client[v0alpha.InboundEmailGroupByIdReq, v0alpha.InboundEmailGroup]
	createEmailMessageAttachment             *connect_go.Client[v0alpha.CreateEmailMessageAttachmentReq, v0alpha.CreateEmailMessageAttachmentRes]
	listEmailMessageAttachments              *connect_go.Client[v0alpha.ListEmailMessageAttachmentsReq, v0alpha.ListEmailMessageAttachmentsRes]
	unassignCurrentUserFromEmailConversation *connect_go.Client[v0alpha.UnassignCurrentUserFromEmailConversationReq, v0alpha.UnassignUserFromEmailConversationRes]
	dashboardEmailConversationSearch         *connect_go.Client[v0alpha.DashboardEmailConversationSearchReq, v0alpha.DashboardEmailConversationSearchRes]
	reassignEmailConversation                *connect_go.Client[v0alpha.ReassignEmailConversationReq, v0alpha.ReassignEmailConversationRes]
	assignEmailConversation                  *connect_go.Client[v0alpha.AssignEmailConversationReq, v0alpha.AssignEmailConversationRes]
	suspendEmailConversation                 *connect_go.Client[v0alpha.SuspendEmailConversationReq, v0alpha.SuspendEmailConversationRes]
	listCampaignsByConnectedInboxId          *connect_go.Client[v0alpha.ListCampaignsByConnectedInboxIdReq, v0alpha.ListCampaignsByConnectedInboxIdRes]
	closeEmailConversation                   *connect_go.Client[v0alpha.CloseEmailConversationReq, v0alpha.CloseEmailConversationRes]
}

// CreateEmailTemplate calls api.v0alpha.EmailApi.CreateEmailTemplate.
func (c *emailApiClient) CreateEmailTemplate(ctx context.Context, req *connect_go.Request[v0alpha.CreateEmailTemplateReq]) (*connect_go.Response[v0alpha.CreateEmailTemplateRes], error) {
	return c.createEmailTemplate.CallUnary(ctx, req)
}

// UpdateEmailTemplate calls api.v0alpha.EmailApi.UpdateEmailTemplate.
func (c *emailApiClient) UpdateEmailTemplate(ctx context.Context, req *connect_go.Request[v0alpha.UpdateEmailTemplateReq]) (*connect_go.Response[v0alpha.UpdateEmailTemplateRes], error) {
	return c.updateEmailTemplate.CallUnary(ctx, req)
}

// CreateEmailTemplateAttachment calls api.v0alpha.EmailApi.CreateEmailTemplateAttachment.
func (c *emailApiClient) CreateEmailTemplateAttachment(ctx context.Context, req *connect_go.Request[v0alpha.CreateEmailTemplateAttachmentReq]) (*connect_go.Response[v0alpha.CreateEmailTemplateAttachmentRes], error) {
	return c.createEmailTemplateAttachment.CallUnary(ctx, req)
}

// CopyEmailTemplateWithAttachments calls api.v0alpha.EmailApi.CopyEmailTemplateWithAttachments.
func (c *emailApiClient) CopyEmailTemplateWithAttachments(ctx context.Context, req *connect_go.Request[v0alpha.CopyEmailTemplateWithAttachmentsReq]) (*connect_go.Response[v0alpha.CopyEmailTemplateWithAttachmentsRes], error) {
	return c.copyEmailTemplateWithAttachments.CallUnary(ctx, req)
}

// UpdateEmailTemplateAttachment calls api.v0alpha.EmailApi.UpdateEmailTemplateAttachment.
func (c *emailApiClient) UpdateEmailTemplateAttachment(ctx context.Context, req *connect_go.Request[v0alpha.UpdateEmailTemplateAttachmentReq]) (*connect_go.Response[v0alpha.UpdateEmailTemplateAttachmentRes], error) {
	return c.updateEmailTemplateAttachment.CallUnary(ctx, req)
}

// GetEmailTemplateByTemplateSid calls api.v0alpha.EmailApi.GetEmailTemplateByTemplateSid.
func (c *emailApiClient) GetEmailTemplateByTemplateSid(ctx context.Context, req *connect_go.Request[v0alpha.GetEmailTemplateByTemplateSidReq]) (*connect_go.Response[v0alpha.EmailTemplateWithAttachments], error) {
	return c.getEmailTemplateByTemplateSid.CallUnary(ctx, req)
}

// GetAllEmailTemplates calls api.v0alpha.EmailApi.GetAllEmailTemplates.
func (c *emailApiClient) GetAllEmailTemplates(ctx context.Context, req *connect_go.Request[v0alpha.GetAllEmailTemplatesReq]) (*connect_go.Response[v0alpha.GetAllEmailTemplatesRes], error) {
	return c.getAllEmailTemplates.CallUnary(ctx, req)
}

// DeleteEmailTemplate calls api.v0alpha.EmailApi.DeleteEmailTemplate.
func (c *emailApiClient) DeleteEmailTemplate(ctx context.Context, req *connect_go.Request[v0alpha.DeleteEmailTemplateReq]) (*connect_go.Response[v0alpha.DeleteEmailTemplateRes], error) {
	return c.deleteEmailTemplate.CallUnary(ctx, req)
}

// DeleteEmailTemplateAttachmentById calls api.v0alpha.EmailApi.DeleteEmailTemplateAttachmentById.
func (c *emailApiClient) DeleteEmailTemplateAttachmentById(ctx context.Context, req *connect_go.Request[v0alpha.DeleteEmailTemplateAttachmentByIdReq]) (*connect_go.Response[v0alpha.DeleteEmailTemplateAttachmentByIdRes], error) {
	return c.deleteEmailTemplateAttachmentById.CallUnary(ctx, req)
}

// DownloadInboundEmailAttachment calls api.v0alpha.EmailApi.DownloadInboundEmailAttachment.
func (c *emailApiClient) DownloadInboundEmailAttachment(ctx context.Context, req *connect_go.Request[v0alpha.DownloadInboundEmailAttachmentReq]) (*connect_go.Response[v0alpha.DownloadInboundEmailAttachmentRes], error) {
	return c.downloadInboundEmailAttachment.CallUnary(ctx, req)
}

// PureEmailGroupSearch calls api.v0alpha.EmailApi.PureEmailGroupSearch.
func (c *emailApiClient) PureEmailGroupSearch(ctx context.Context, req *connect_go.Request[v0alpha.EmailGroupSearchReq]) (*connect_go.Response[v0alpha.EmailGroupSearchRes], error) {
	return c.pureEmailGroupSearch.CallUnary(ctx, req)
}

// ManagerListNewEmailMessageReplies calls api.v0alpha.EmailApi.ManagerListNewEmailMessageReplies.
func (c *emailApiClient) ManagerListNewEmailMessageReplies(ctx context.Context, req *connect_go.Request[v0alpha.ListNewEmailMessageRepliesReq]) (*connect_go.Response[v0alpha.ListNewEmailMessageRepliesRes], error) {
	return c.managerListNewEmailMessageReplies.CallUnary(ctx, req)
}

// ListNewEmailMessageReplies calls api.v0alpha.EmailApi.ListNewEmailMessageReplies.
func (c *emailApiClient) ListNewEmailMessageReplies(ctx context.Context, req *connect_go.Request[v0alpha.ListNewEmailMessageRepliesReq]) (*connect_go.Response[v0alpha.ListNewEmailMessageRepliesRes], error) {
	return c.listNewEmailMessageReplies.CallUnary(ctx, req)
}

// GetEmailTasksByGroupSids calls api.v0alpha.EmailApi.GetEmailTasksByGroupSids.
func (c *emailApiClient) GetEmailTasksByGroupSids(ctx context.Context, req *connect_go.Request[v0alpha.GetEmailTasksByGroupSidsReq]) (*connect_go.Response[v0alpha.GetEmailTasksByGroupSidsRes], error) {
	return c.getEmailTasksByGroupSids.CallUnary(ctx, req)
}

// UpdateEmailGroupStatus calls api.v0alpha.EmailApi.UpdateEmailGroupStatus.
func (c *emailApiClient) UpdateEmailGroupStatus(ctx context.Context, req *connect_go.Request[v0alpha.EmailGroupStatusReq]) (*connect_go.Response[v0alpha.EmailGroupStatusRes], error) {
	return c.updateEmailGroupStatus.CallUnary(ctx, req)
}

// GetEmailMessageDetails calls api.v0alpha.EmailApi.GetEmailMessageDetails.
func (c *emailApiClient) GetEmailMessageDetails(ctx context.Context, req *connect_go.Request[v0alpha.GetEmailMessageReq]) (*connect_go.Response[v0alpha.GetEmailMessageRes], error) {
	return c.getEmailMessageDetails.CallUnary(ctx, req)
}

// CreateInboundEmailTemplate calls api.v0alpha.EmailApi.CreateInboundEmailTemplate.
func (c *emailApiClient) CreateInboundEmailTemplate(ctx context.Context, req *connect_go.Request[v0alpha.CreateInboundEmailTemplateReq]) (*connect_go.Response[v0alpha.CreateInboundEmailTemplateRes], error) {
	return c.createInboundEmailTemplate.CallUnary(ctx, req)
}

// UpdateInboundEmailTemplate calls api.v0alpha.EmailApi.UpdateInboundEmailTemplate.
func (c *emailApiClient) UpdateInboundEmailTemplate(ctx context.Context, req *connect_go.Request[v0alpha.UpdateInboundEmailTemplateReq]) (*connect_go.Response[v0alpha.UpdateInboundEmailTemplateRes], error) {
	return c.updateInboundEmailTemplate.CallUnary(ctx, req)
}

// DeleteInboundEmailTemplateById calls api.v0alpha.EmailApi.DeleteInboundEmailTemplateById.
func (c *emailApiClient) DeleteInboundEmailTemplateById(ctx context.Context, req *connect_go.Request[v0alpha.DeleteInboundEmailTemplateByIdReq]) (*connect_go.Response[v0alpha.DeleteInboundEmailTemplateByIdRes], error) {
	return c.deleteInboundEmailTemplateById.CallUnary(ctx, req)
}

// ListInboundEmailTemplates calls api.v0alpha.EmailApi.ListInboundEmailTemplates.
func (c *emailApiClient) ListInboundEmailTemplates(ctx context.Context, req *connect_go.Request[v0alpha.ListInboundEmailTemplatesReq]) (*connect_go.Response[v0alpha.ListInboundEmailTemplatesRes], error) {
	return c.listInboundEmailTemplates.CallUnary(ctx, req)
}

// GetInboundEmailTemplateById calls api.v0alpha.EmailApi.GetInboundEmailTemplateById.
func (c *emailApiClient) GetInboundEmailTemplateById(ctx context.Context, req *connect_go.Request[v0alpha.GetInboundEmailTemplateByIdReq]) (*connect_go.Response[v0alpha.InboundEmailTemplate], error) {
	return c.getInboundEmailTemplateById.CallUnary(ctx, req)
}

// UpdateInboundEmailGroupStatus calls api.v0alpha.EmailApi.UpdateInboundEmailGroupStatus.
func (c *emailApiClient) UpdateInboundEmailGroupStatus(ctx context.Context, req *connect_go.Request[v0alpha.UpdateInboundEmailGroupStatusReq]) (*connect_go.Response[v0alpha.UpdateInboundEmailGroupStatusRes], error) {
	return c.updateInboundEmailGroupStatus.CallUnary(ctx, req)
}

// StopInboundEmailGroup calls api.v0alpha.EmailApi.StopInboundEmailGroup.
func (c *emailApiClient) StopInboundEmailGroup(ctx context.Context, req *connect_go.Request[v0alpha.StopInboundEmailGroupReq]) (*connect_go.Response[v0alpha.StopInboundEmailGroupRes], error) {
	return c.stopInboundEmailGroup.CallUnary(ctx, req)
}

// StopAllInboundEmailGroups calls api.v0alpha.EmailApi.StopAllInboundEmailGroups.
func (c *emailApiClient) StopAllInboundEmailGroups(ctx context.Context, req *connect_go.Request[v0alpha.StopAllInboundEmailGroupsReq]) (*connect_go.Response[v0alpha.StopInboundEmailGroupRes], error) {
	return c.stopAllInboundEmailGroups.CallUnary(ctx, req)
}

// PureInboundEmailGroupSearch calls api.v0alpha.EmailApi.PureInboundEmailGroupSearch.
func (c *emailApiClient) PureInboundEmailGroupSearch(ctx context.Context, req *connect_go.Request[v0alpha.PureInboundEmailGroupSearchReq]) (*connect_go.Response[v0alpha.PureInboundEmailGroupSearchRes], error) {
	return c.pureInboundEmailGroupSearch.CallUnary(ctx, req)
}

// InboundEmailGroupSearch calls api.v0alpha.EmailApi.InboundEmailGroupSearch.
func (c *emailApiClient) InboundEmailGroupSearch(ctx context.Context, req *connect_go.Request[v0alpha.InboundEmailGroupSearchReq]) (*connect_go.Response[v0alpha.InboundEmailGroupSearchRes], error) {
	return c.inboundEmailGroupSearch.CallUnary(ctx, req)
}

// ListInboundEmailGroupsByGroupIds calls api.v0alpha.EmailApi.ListInboundEmailGroupsByGroupIds.
func (c *emailApiClient) ListInboundEmailGroupsByGroupIds(ctx context.Context, req *connect_go.Request[v0alpha.ListInboundEmailGroupsByGroupIdsReq]) (*connect_go.Response[v0alpha.ListInboundEmailGroupsByGroupIdsRes], error) {
	return c.listInboundEmailGroupsByGroupIds.CallUnary(ctx, req)
}

// ListInboundEmailTasksByGroupIds calls api.v0alpha.EmailApi.ListInboundEmailTasksByGroupIds.
func (c *emailApiClient) ListInboundEmailTasksByGroupIds(ctx context.Context, req *connect_go.Request[v0alpha.ListInboundEmailTasksByGroupIdsReq]) (*connect_go.Response[v0alpha.ListInboundEmailTasksByGroupIdsRes], error) {
	return c.listInboundEmailTasksByGroupIds.CallUnary(ctx, req)
}

// ListActiveInboundEmailGroups calls api.v0alpha.EmailApi.ListActiveInboundEmailGroups.
func (c *emailApiClient) ListActiveInboundEmailGroups(ctx context.Context, req *connect_go.Request[v0alpha.ListActiveInboundEmailGroupsReq]) (*connect_go.Response[v0alpha.ListActiveInboundEmailGroupsRes], error) {
	return c.listActiveInboundEmailGroups.CallUnary(ctx, req)
}

// Schedule calls api.v0alpha.EmailApi.Schedule.
func (c *emailApiClient) Schedule(ctx context.Context, req *connect_go.Request[v0alpha.ScheduleReq]) (*connect_go.Response[v0alpha.ScheduleRes], error) {
	return c.schedule.CallUnary(ctx, req)
}

// ScheduleOutboundEmailGroup calls api.v0alpha.EmailApi.ScheduleOutboundEmailGroup.
func (c *emailApiClient) ScheduleOutboundEmailGroup(ctx context.Context, req *connect_go.Request[v0alpha.ScheduleOutboundEmailGroupReq]) (*connect_go.Response[v0alpha.ScheduleOutboundEmailGroupRes], error) {
	return c.scheduleOutboundEmailGroup.CallUnary(ctx, req)
}

// SchedulePureInboundEmail calls api.v0alpha.EmailApi.SchedulePureInboundEmail.
func (c *emailApiClient) SchedulePureInboundEmail(ctx context.Context, req *connect_go.Request[v0alpha.SchedulePureInboundEmailReq]) (*connect_go.Response[v0alpha.SchedulePureInboundEmailRes], error) {
	return c.schedulePureInboundEmail.CallUnary(ctx, req)
}

// CreateEmailMessageAgentReply calls api.v0alpha.EmailApi.CreateEmailMessageAgentReply.
func (c *emailApiClient) CreateEmailMessageAgentReply(ctx context.Context, req *connect_go.Request[v0alpha.CreateEmailMessageAgentReplyReq]) (*connect_go.Response[v0alpha.EmailMessageReplyWithAttachments], error) {
	return c.createEmailMessageAgentReply.CallUnary(ctx, req)
}

// CreateEmailMessageAgentReplyAttachment calls
// api.v0alpha.EmailApi.CreateEmailMessageAgentReplyAttachment.
func (c *emailApiClient) CreateEmailMessageAgentReplyAttachment(ctx context.Context, req *connect_go.Request[v0alpha.CreateEmailMessageAgentReplyAttachmentReq]) (*connect_go.Response[v0alpha.CreateEmailMessageAgentReplyAttachmentRes], error) {
	return c.createEmailMessageAgentReplyAttachment.CallUnary(ctx, req)
}

// SendReply calls api.v0alpha.EmailApi.SendReply.
func (c *emailApiClient) SendReply(ctx context.Context, req *connect_go.Request[v0alpha.SendReplyReq]) (*connect_go.Response[v0alpha.EmailMessageReplyWithAttachments], error) {
	return c.sendReply.CallUnary(ctx, req)
}

// GetEmailGroupsByGroupSids calls api.v0alpha.EmailApi.GetEmailGroupsByGroupSids.
func (c *emailApiClient) GetEmailGroupsByGroupSids(ctx context.Context, req *connect_go.Request[v0alpha.GetEmailGroupsByGroupSidsReq]) (*connect_go.Response[v0alpha.GetEmailGroupsByGroupSidsRes], error) {
	return c.getEmailGroupsByGroupSids.CallUnary(ctx, req)
}

// GetEmailGroupByGroupSid calls api.v0alpha.EmailApi.GetEmailGroupByGroupSid.
func (c *emailApiClient) GetEmailGroupByGroupSid(ctx context.Context, req *connect_go.Request[v0alpha.GetEmailGroupByGroupSidReq]) (*connect_go.Response[v0alpha.EmailGroupDetailsWithAttachments], error) {
	return c.getEmailGroupByGroupSid.CallUnary(ctx, req)
}

// GetEmailGroupByGroupId calls api.v0alpha.EmailApi.GetEmailGroupByGroupId.
func (c *emailApiClient) GetEmailGroupByGroupId(ctx context.Context, req *connect_go.Request[v0alpha.GetEmailGroupByGroupIdReq]) (*connect_go.Response[v0alpha.EmailGroupDetailsWithAttachments], error) {
	return c.getEmailGroupByGroupId.CallUnary(ctx, req)
}

// SchedulePureOmniLinkInboundEmail calls api.v0alpha.EmailApi.SchedulePureOmniLinkInboundEmail.
func (c *emailApiClient) SchedulePureOmniLinkInboundEmail(ctx context.Context, req *connect_go.Request[v0alpha.SchedulePureOmniLinkInboundEmailReq]) (*connect_go.Response[v0alpha.SchedulePureOmniLinkInboundEmailRes], error) {
	return c.schedulePureOmniLinkInboundEmail.CallUnary(ctx, req)
}

// UpdateInboundEmailGroup calls api.v0alpha.EmailApi.UpdateInboundEmailGroup.
func (c *emailApiClient) UpdateInboundEmailGroup(ctx context.Context, req *connect_go.Request[v0alpha.UpdateInboundEmailGroupReq]) (*connect_go.Response[v0alpha.UpdateInboundEmailGroupRes], error) {
	return c.updateInboundEmailGroup.CallUnary(ctx, req)
}

// UpdateEmailGroupMstrSendsPerMinute calls api.v0alpha.EmailApi.UpdateEmailGroupMstrSendsPerMinute.
func (c *emailApiClient) UpdateEmailGroupMstrSendsPerMinute(ctx context.Context, req *connect_go.Request[v0alpha.EmailGroupSendsPerMinuteReq]) (*connect_go.Response[v0alpha.EmailGroupSendsPerMinuteRes], error) {
	return c.updateEmailGroupMstrSendsPerMinute.CallUnary(ctx, req)
}

// UpdateOutboundEmailGroup calls api.v0alpha.EmailApi.UpdateOutboundEmailGroup.
func (c *emailApiClient) UpdateOutboundEmailGroup(ctx context.Context, req *connect_go.Request[v0alpha.UpdateOutboundEmailGroupReq]) (*connect_go.Response[v0alpha.UpdateOutboundEmailGroupRes], error) {
	return c.updateOutboundEmailGroup.CallUnary(ctx, req)
}

// GetInboundEmailGroupById calls api.v0alpha.EmailApi.GetInboundEmailGroupById.
func (c *emailApiClient) GetInboundEmailGroupById(ctx context.Context, req *connect_go.Request[v0alpha.InboundEmailGroupByIdReq]) (*connect_go.Response[v0alpha.InboundEmailGroup], error) {
	return c.getInboundEmailGroupById.CallUnary(ctx, req)
}

// CreateEmailMessageAttachment calls api.v0alpha.EmailApi.CreateEmailMessageAttachment.
func (c *emailApiClient) CreateEmailMessageAttachment(ctx context.Context, req *connect_go.Request[v0alpha.CreateEmailMessageAttachmentReq]) (*connect_go.Response[v0alpha.CreateEmailMessageAttachmentRes], error) {
	return c.createEmailMessageAttachment.CallUnary(ctx, req)
}

// ListEmailMessageAttachments calls api.v0alpha.EmailApi.ListEmailMessageAttachments.
func (c *emailApiClient) ListEmailMessageAttachments(ctx context.Context, req *connect_go.Request[v0alpha.ListEmailMessageAttachmentsReq]) (*connect_go.Response[v0alpha.ListEmailMessageAttachmentsRes], error) {
	return c.listEmailMessageAttachments.CallUnary(ctx, req)
}

// UnassignCurrentUserFromEmailConversation calls
// api.v0alpha.EmailApi.UnassignCurrentUserFromEmailConversation.
func (c *emailApiClient) UnassignCurrentUserFromEmailConversation(ctx context.Context, req *connect_go.Request[v0alpha.UnassignCurrentUserFromEmailConversationReq]) (*connect_go.Response[v0alpha.UnassignUserFromEmailConversationRes], error) {
	return c.unassignCurrentUserFromEmailConversation.CallUnary(ctx, req)
}

// DashboardEmailConversationSearch calls api.v0alpha.EmailApi.DashboardEmailConversationSearch.
func (c *emailApiClient) DashboardEmailConversationSearch(ctx context.Context, req *connect_go.Request[v0alpha.DashboardEmailConversationSearchReq]) (*connect_go.Response[v0alpha.DashboardEmailConversationSearchRes], error) {
	return c.dashboardEmailConversationSearch.CallUnary(ctx, req)
}

// ReassignEmailConversation calls api.v0alpha.EmailApi.ReassignEmailConversation.
func (c *emailApiClient) ReassignEmailConversation(ctx context.Context, req *connect_go.Request[v0alpha.ReassignEmailConversationReq]) (*connect_go.Response[v0alpha.ReassignEmailConversationRes], error) {
	return c.reassignEmailConversation.CallUnary(ctx, req)
}

// AssignEmailConversation calls api.v0alpha.EmailApi.AssignEmailConversation.
func (c *emailApiClient) AssignEmailConversation(ctx context.Context, req *connect_go.Request[v0alpha.AssignEmailConversationReq]) (*connect_go.Response[v0alpha.AssignEmailConversationRes], error) {
	return c.assignEmailConversation.CallUnary(ctx, req)
}

// SuspendEmailConversation calls api.v0alpha.EmailApi.SuspendEmailConversation.
func (c *emailApiClient) SuspendEmailConversation(ctx context.Context, req *connect_go.Request[v0alpha.SuspendEmailConversationReq]) (*connect_go.Response[v0alpha.SuspendEmailConversationRes], error) {
	return c.suspendEmailConversation.CallUnary(ctx, req)
}

// ListCampaignsByConnectedInboxId calls api.v0alpha.EmailApi.ListCampaignsByConnectedInboxId.
func (c *emailApiClient) ListCampaignsByConnectedInboxId(ctx context.Context, req *connect_go.Request[v0alpha.ListCampaignsByConnectedInboxIdReq]) (*connect_go.Response[v0alpha.ListCampaignsByConnectedInboxIdRes], error) {
	return c.listCampaignsByConnectedInboxId.CallUnary(ctx, req)
}

// CloseEmailConversation calls api.v0alpha.EmailApi.CloseEmailConversation.
func (c *emailApiClient) CloseEmailConversation(ctx context.Context, req *connect_go.Request[v0alpha.CloseEmailConversationReq]) (*connect_go.Response[v0alpha.CloseEmailConversationRes], error) {
	return c.closeEmailConversation.CallUnary(ctx, req)
}

// EmailApiHandler is an implementation of the api.v0alpha.EmailApi service.
type EmailApiHandler interface {
	// Create/Record email template details defined by CreateEmailTemplateReq message for a specified
	// email_subject, email_body.
	// The method will return a CreateEmailTemplateRes message/entity that will
	// contain the newly created email_template_sid value for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateEmailTemplate(context.Context, *connect_go.Request[v0alpha.CreateEmailTemplateReq]) (*connect_go.Response[v0alpha.CreateEmailTemplateRes], error)
	// Update email template details defined by UpdateEmailTemplateReq message for a specified
	// email_template_sid, email_subject, email_body.
	// The method will return a UpdateEmailTemplateRes message/entity that will
	// contain the true/false after updating template details for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateEmailTemplate(context.Context, *connect_go.Request[v0alpha.UpdateEmailTemplateReq]) (*connect_go.Response[v0alpha.UpdateEmailTemplateRes], error)
	// Create/Record email template attachment details defined by CreateEmailTemplateAttachmentReq message for a specified
	// email_template_sid, file_name, file_size, content_type, hash.
	// The method will return a CreateEmailTemplateAttachmentRes message/entity that will
	// contain the newly created email_template_attachment_sid, fts storage url and gs_path  for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateEmailTemplateAttachment(context.Context, *connect_go.Request[v0alpha.CreateEmailTemplateAttachmentReq]) (*connect_go.Response[v0alpha.CreateEmailTemplateAttachmentRes], error)
	// Copy/Record email template with attachment details defined by CopyEmailTemplateWithAttachmentsReq message for a specified
	// email_template_sid and email_body.
	// The method will return a CopyEmailTemplateWithAttachmentsRes message/entity that will
	// contain the newly copied email_template_sid value for this client along with attachments
	// Required permissions:
	//
	//	OMNI_BOSS
	CopyEmailTemplateWithAttachments(context.Context, *connect_go.Request[v0alpha.CopyEmailTemplateWithAttachmentsReq]) (*connect_go.Response[v0alpha.CopyEmailTemplateWithAttachmentsRes], error)
	// Update email template attachment details defined by UpdateEmailTemplateAttachmentReq message for a specified
	// email_template_sid, email_template_attachment_sid, file_name, file_size, content_type, hash.
	// The method will return a UpdateEmailTemplateAttachmentRes message/entity that will
	// contain the true/false after updating template attachment details for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateEmailTemplateAttachment(context.Context, *connect_go.Request[v0alpha.UpdateEmailTemplateAttachmentReq]) (*connect_go.Response[v0alpha.UpdateEmailTemplateAttachmentRes], error)
	// Gets email template along with attachment details defined by GetEmailTemplateByTemplateSidReq message for a specified
	// email_template_sid.
	// The method will return a EmailTemplateWithAttachments message/entity that will
	// contain the email_template_sid, email_subject, email_body, EmailTemplateAttachmentDetails for this client_sid and email_template_sid
	// Required permissions:
	//
	//	OMNI_BOSS
	GetEmailTemplateByTemplateSid(context.Context, *connect_go.Request[v0alpha.GetEmailTemplateByTemplateSidReq]) (*connect_go.Response[v0alpha.EmailTemplateWithAttachments], error)
	// List stream of email template along with attachment details defined by GetAllEmailTemplatesReq message.
	// The method will return a GetAllEmailTemplatesRes message/entity that will
	// contain the stream of email_template_sid, email_subject, email_body, EmailTemplateAttachmentDetails for this client_sid
	// Required permissions:
	//
	//	OMNI_BOSS
	GetAllEmailTemplates(context.Context, *connect_go.Request[v0alpha.GetAllEmailTemplatesReq]) (*connect_go.Response[v0alpha.GetAllEmailTemplatesRes], error)
	// Delete email template details defined by DeleteEmailTemplateReq message for a specified
	// email_template_sid.
	// The method will return a DeleteEmailTemplateRes message/entity that will
	// contain the true/false after deleting template details for this client_sid and email_template_sid
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteEmailTemplate(context.Context, *connect_go.Request[v0alpha.DeleteEmailTemplateReq]) (*connect_go.Response[v0alpha.DeleteEmailTemplateRes], error)
	// Delete email template attachments defined by DeleteEmailTemplateAttachmentByIdReq message for a specified
	// email_template_attachment_sid.
	// The method will return a DeleteEmailTemplateAttachmentByIdRes message/entity that will
	// contain the true/false after deleting template attachments for this client_sid and email_template_attachment_sid
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteEmailTemplateAttachmentById(context.Context, *connect_go.Request[v0alpha.DeleteEmailTemplateAttachmentByIdReq]) (*connect_go.Response[v0alpha.DeleteEmailTemplateAttachmentByIdRes], error)
	// Download local inbound file attachment file contents using FTS bucket
	// defined by DownloadInboundEmailAttachmentReq message for a specified
	// email_message_reply_id and email_message_reply_attachment_id.
	// The method will return a DownloadInboundEmailAttachmentRes message/entity that will
	// contain the url where attachment contents are stored
	// Required permissions:
	//
	//	OMNI_BOSS
	DownloadInboundEmailAttachment(context.Context, *connect_go.Request[v0alpha.DownloadInboundEmailAttachmentReq]) (*connect_go.Response[v0alpha.DownloadInboundEmailAttachmentRes], error)
	// List stream of pure email groups based on search criteria defined by EmailGroupSearchReq message for a specified
	// by search_from and search_to or by status or by name and any of these combinations
	// The method will return a EmailGroupSearchRes message/entity that will
	// contain the stream of EmailGroupSearchDetailsRes results
	// Required permissions:
	//
	//	OMNI_BOSS
	PureEmailGroupSearch(context.Context, *connect_go.Request[v0alpha.EmailGroupSearchReq]) (*connect_go.Response[v0alpha.EmailGroupSearchRes], error)
	// Retreives a list of email replies for a conversation that come after the given
	// timestamp. Can set a user_id to get conversations for any user.
	// Required permissions:
	//
	//	??????
	ManagerListNewEmailMessageReplies(context.Context, *connect_go.Request[v0alpha.ListNewEmailMessageRepliesReq]) (*connect_go.Response[v0alpha.ListNewEmailMessageRepliesRes], error)
	// Retreives a list of email replies for a conversation that come after the given
	// timestamp
	// Required permissions:
	//
	//	??????
	ListNewEmailMessageReplies(context.Context, *connect_go.Request[v0alpha.ListNewEmailMessageRepliesReq]) (*connect_go.Response[v0alpha.ListNewEmailMessageRepliesRes], error)
	// List stream of email tasks defined by GetEmailTasksByGroupSidsReq message for a specified
	// array of email_group_sids
	// The method will return a GetEmailTasksByGroupSidsRes message/entity that will
	// contain the stream of EmailTaskMstrDetails results
	// Required permissions:
	//
	//	OMNI_BOSS
	GetEmailTasksByGroupSids(context.Context, *connect_go.Request[v0alpha.GetEmailTasksByGroupSidsReq]) (*connect_go.Response[v0alpha.GetEmailTasksByGroupSidsRes], error)
	// Update email group status value defined by EmailGroupStatusReq message for a specified
	// email_group_sid and status_id.
	// The method will return a EmailGroupStatusRes message/entity that will
	// contain the true/false after updating status for this clients email_group_sid and status_id
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateEmailGroupStatus(context.Context, *connect_go.Request[v0alpha.EmailGroupStatusReq]) (*connect_go.Response[v0alpha.EmailGroupStatusRes], error)
	// Gets email message details defined by GetEmailMessageReq message for a specified
	// email_message_sid.
	// The method will return a GetEmailMessageRes message/entity that will
	// contains email_subject and email_body for the email_message_sid
	// Required permissions:
	//
	//	OMNI_BOSS
	GetEmailMessageDetails(context.Context, *connect_go.Request[v0alpha.GetEmailMessageReq]) (*connect_go.Response[v0alpha.GetEmailMessageRes], error)
	// Create/Record inbound email template defined by CreateInboundEmailTemplateReq message for a specified
	//
	//	connected_inbox_id, name.
	//
	// The method will return a CreateInboundEmailTemplateRes message/entity that will
	// contain the newly created inbound_email_template_id value for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateInboundEmailTemplate(context.Context, *connect_go.Request[v0alpha.CreateInboundEmailTemplateReq]) (*connect_go.Response[v0alpha.CreateInboundEmailTemplateRes], error)
	// Update inbound email template details defined by UpdateInboundEmailTemplateReq message for a specified
	//
	//	inbound_email_template_id, connected_inbox_id, name.
	//
	// The method will return a UpdateInboundEmailTemplateRes message/entity that will
	// contain the true/false after updating inbound email template details for inbound_email_template_id
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateInboundEmailTemplate(context.Context, *connect_go.Request[v0alpha.UpdateInboundEmailTemplateReq]) (*connect_go.Response[v0alpha.UpdateInboundEmailTemplateRes], error)
	// Delete inbound email template details defined by DeleteInboundEmailTemplateByIdReq message for a specified
	//
	//	inbound_email_template_id.
	//
	// The method will return a DeleteInboundEmailTemplateByIdRes message/entity that will
	// contain the true/false after deleting inbound email template details for inbound_email_template_id
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteInboundEmailTemplateById(context.Context, *connect_go.Request[v0alpha.DeleteInboundEmailTemplateByIdReq]) (*connect_go.Response[v0alpha.DeleteInboundEmailTemplateByIdRes], error)
	// List stream of inbound email template details defined by ListInboundEmailTemplatesReq message
	// The method will return a ListInboundEmailTemplatesRes message/entity that will
	// contain the stream of inbound_email_template_id, connected_inbox_id, name.
	// Required permissions:
	//
	//	OMNI_BOSS
	ListInboundEmailTemplates(context.Context, *connect_go.Request[v0alpha.ListInboundEmailTemplatesReq]) (*connect_go.Response[v0alpha.ListInboundEmailTemplatesRes], error)
	// Gets inbound email template details defined by GetInboundEmailTemplateByIdReq message for a specified
	// inbound_email_template_id.
	// The method will return a InboundEmailTemplate message/entity that will
	// contain the inbound email template details for inbound_email_template_id
	// Required permissions:
	//
	//	OMNI_BOSS
	GetInboundEmailTemplateById(context.Context, *connect_go.Request[v0alpha.GetInboundEmailTemplateByIdReq]) (*connect_go.Response[v0alpha.InboundEmailTemplate], error)
	// Update inbound email group status details defined by UpdateInboundEmailGroupStatusReq
	// status. The method will return a UpdateInboundEmailGroupStatusRes message/entity
	// that will contain the true/false after updating inbound email group details
	// for this org_id, region_id and inbound_email_group_id Required permissions:
	//
	//	OMNI_BOSS
	UpdateInboundEmailGroupStatus(context.Context, *connect_go.Request[v0alpha.UpdateInboundEmailGroupStatusReq]) (*connect_go.Response[v0alpha.UpdateInboundEmailGroupStatusRes], error)
	// Stop inbound email group defined by StopInboundEmailGroupReq message for a specified
	//
	//	inbound_email_group_id.
	//
	// The method will return a StopInboundEmailGroupRes message/entity that will
	// contain the true/false after updating inbound email group details for inbound_email_group_id
	// Required permissions:
	//
	//	OMNI_BOSS
	StopInboundEmailGroup(context.Context, *connect_go.Request[v0alpha.StopInboundEmailGroupReq]) (*connect_go.Response[v0alpha.StopInboundEmailGroupRes], error)
	// Stop all InboundEmail groups defined by StopAllInboundEmailGroupsReq message for the specified
	// array of inbound_email_group_ids
	// The method will mark the InboundEmail groups as completed.
	// Required permissions: VIEW_EMAIL
	StopAllInboundEmailGroups(context.Context, *connect_go.Request[v0alpha.StopAllInboundEmailGroupsReq]) (*connect_go.Response[v0alpha.StopInboundEmailGroupRes], error)
	// List stream of pure inbound email groups based on search criteria defined by PureInboundEmailGroupSearchReq message for a specified
	//
	//	by search_from and search_to or by status or by name and any of these combinations
	//
	// The method will return a PureInboundEmailGroupSearchRes message/entity that will
	// contain the stream of InboundEmailGroups
	// Required permissions:
	//
	//	OMNI_BOSS
	PureInboundEmailGroupSearch(context.Context, *connect_go.Request[v0alpha.PureInboundEmailGroupSearchReq]) (*connect_go.Response[v0alpha.PureInboundEmailGroupSearchRes], error)
	// List stream of inbound email groups based on search criteria defined by
	// InboundEmailGroupSearchReq message for a specified by
	// search_from and search_to or by status or by name and any of these
	// combinations The method will return a InboundEmailGroupSearchRes
	// message/entity that will contain the stream of InboundEmailGroups Required
	// permissions:
	//
	//	OMNI_BOSS
	InboundEmailGroupSearch(context.Context, *connect_go.Request[v0alpha.InboundEmailGroupSearchReq]) (*connect_go.Response[v0alpha.InboundEmailGroupSearchRes], error)
	// List stream of inbound email groups defined by ListInboundEmailGroupsByGroupIdsReq message for a specified
	// array of inbound email groups
	// The method will return a ListInboundEmailGroupsByGroupIdsRes message/entity that will
	// contain the stream of InboundEmailGroup
	// Required permissions:
	//
	//	OMNI_BOSS
	ListInboundEmailGroupsByGroupIds(context.Context, *connect_go.Request[v0alpha.ListInboundEmailGroupsByGroupIdsReq]) (*connect_go.Response[v0alpha.ListInboundEmailGroupsByGroupIdsRes], error)
	// List stream of inbound email tasks defined by ListInboundEmailTasksByGroupIdsReq message for a specified
	// array of inbound email groups
	// The method will return a ListInboundEmailTasksByGroupIdsRes message/entity that will
	// contain the stream of InboundEmailTaskDetails along with any file attachments
	// Required permissions:
	//
	//	OMNI_BOSS
	ListInboundEmailTasksByGroupIds(context.Context, *connect_go.Request[v0alpha.ListInboundEmailTasksByGroupIdsReq]) (*connect_go.Response[v0alpha.ListInboundEmailTasksByGroupIdsRes], error)
	// List stream of active/running inbound email groups defined by ListActiveInboundEmailGroupsReq message
	// The method will return a ListActiveInboundEmailGroupsRes message/entity that will
	// contain the stream of active/running InboundEmailGroups
	// Required permissions:
	//
	//	OMNI_BOSS
	ListActiveInboundEmailGroups(context.Context, *connect_go.Request[v0alpha.ListActiveInboundEmailGroupsReq]) (*connect_go.Response[v0alpha.ListActiveInboundEmailGroupsRes], error)
	// Schedule Outbound email campaign defined by ScheduleReq message for the specified
	// email_template_sid, initial_pace, selected_email_col, from_address,
	// allow_duplicates, group_name, contact_group_sid, start_time, stop_time
	// The method will return ScheduleRes message/entity that will
	// contain newly scheduled email_group_sid and email_group_id for this client
	// Required permissions:
	//
	//	EXECUTE_SEND_BROADCAST
	Schedule(context.Context, *connect_go.Request[v0alpha.ScheduleReq]) (*connect_go.Response[v0alpha.ScheduleRes], error)
	// Schedule Outbound email campaign defined by ScheduleOutboundEmailGroupReq message for the specified
	// subject, email message, initial_pace, selected_email_col, from_address,
	// allow_duplicates, group_name, contact_group_sid, start_time, stop_time
	// The method will return ScheduleOutboundEmailGroupRes message/entity that will
	// contain newly scheduled email_group_sid and email_group_id for this client
	// Required permissions:
	//
	//	EXECUTE_SEND_BROADCAST
	ScheduleOutboundEmailGroup(context.Context, *connect_go.Request[v0alpha.ScheduleOutboundEmailGroupReq]) (*connect_go.Response[v0alpha.ScheduleOutboundEmailGroupRes], error)
	// Schedule Pure Inbound email campaign defined by SchedulePureInboundEmailReq message for the specified
	// inbound_email_template_sid
	// The method will return SchedulePureInboundEmailRes message/entity that will
	// contain newly scheduled inbound_email_group_sid for this client
	// Required permissions:
	//
	//	EXECUTE_SEND_BROADCAST
	SchedulePureInboundEmail(context.Context, *connect_go.Request[v0alpha.SchedulePureInboundEmailReq]) (*connect_go.Response[v0alpha.SchedulePureInboundEmailRes], error)
	// Create/Record inbound agent email reply defined by CreateEmailMessageAgentReplyReq message for a specified
	// inbound_email_group_id, to_address, subject, email_conversation_id, agent_sid .
	// The method will return a EmailMessageReply message/entity that will
	// contain the newly created email_message_reply data
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateEmailMessageAgentReply(context.Context, *connect_go.Request[v0alpha.CreateEmailMessageAgentReplyReq]) (*connect_go.Response[v0alpha.EmailMessageReplyWithAttachments], error)
	// Create/Record inbound agent email reply attachment defined by CreateEmailMessageAgentReplyAttachmentReq message for a specified
	// file_name, file_size and file_type.
	// The method will return a CreateEmailMessageAgentReplyAttachmentRes message/entity that will
	// contain the newly created email_message_reply_attachment_id, url_path and gs_path for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateEmailMessageAgentReplyAttachment(context.Context, *connect_go.Request[v0alpha.CreateEmailMessageAgentReplyAttachmentReq]) (*connect_go.Response[v0alpha.CreateEmailMessageAgentReplyAttachmentRes], error)
	// Sends email message based on email details defined in SendReplyReq specified by
	// in_reply_to and email_reply_id
	// The method will return a EmailMessageReplyWithAttachments message/entity that will
	// contain the email_message_reply data
	// along with along with attachment details
	// Required permissions:
	//
	//	EXECUTE_SEND_BROADCAST
	SendReply(context.Context, *connect_go.Request[v0alpha.SendReplyReq]) (*connect_go.Response[v0alpha.EmailMessageReplyWithAttachments], error)
	// List stream of email groups defined by GetEmailGroupsByGroupSidsReq message for a specified
	// array of email_group_sids
	// The method will return a GetEmailGroupsByGroupSidsRes message/entity that will
	// contain the stream of EmailGroupSearchDetailsRes results
	// Required permissions:
	//
	//	OMNI_BOSS
	GetEmailGroupsByGroupSids(context.Context, *connect_go.Request[v0alpha.GetEmailGroupsByGroupSidsReq]) (*connect_go.Response[v0alpha.GetEmailGroupsByGroupSidsRes], error)
	// Get outbound email group details defined by GetEmailGroupByGroupSidReq message for a specified
	// email_group_sid
	// The method will return a EmailGroupDetailsWithAttachments message/entity that will
	// contain the outbound email group details
	// Required permissions:
	//
	//	OMNI_BOSS
	GetEmailGroupByGroupSid(context.Context, *connect_go.Request[v0alpha.GetEmailGroupByGroupSidReq]) (*connect_go.Response[v0alpha.EmailGroupDetailsWithAttachments], error)
	// Get outbound email group details defined by GetEmailGroupByGroupIdReq message for a specified
	// email_group_id
	// The method will return a EmailGroupDetailsWithAttachments message/entity that will
	// contain the outbound email group details
	// Required permissions:
	//
	//	OMNI_BOSS
	GetEmailGroupByGroupId(context.Context, *connect_go.Request[v0alpha.GetEmailGroupByGroupIdReq]) (*connect_go.Response[v0alpha.EmailGroupDetailsWithAttachments], error)
	// Schedule Pure OmniLink Inbound email campaign defined by SchedulePureOmniLinkInboundEmailReq message for the specified
	// connectedInbox and skills
	// The method will return SchedulePureOmniLinkInboundEmailRes message/entity that will
	// contain newly scheduled inbound_email_group_sid for this client
	// Required permissions:
	//
	//	EXECUTE_SEND_BROADCAST
	SchedulePureOmniLinkInboundEmail(context.Context, *connect_go.Request[v0alpha.SchedulePureOmniLinkInboundEmailReq]) (*connect_go.Response[v0alpha.SchedulePureOmniLinkInboundEmailRes], error)
	// Updates the name, skills, stop time for the inbound email group
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateInboundEmailGroup(context.Context, *connect_go.Request[v0alpha.UpdateInboundEmailGroupReq]) (*connect_go.Response[v0alpha.UpdateInboundEmailGroupRes], error)
	// Update email group sendsperminute defined by EmailGroupSendsPerMinuteReq
	// message for a specified email_group_sid and sends_per_minute.
	// The method will return a EmailGroupSendsPerMinuteRes message/entity that
	// will contain the true/false after updating sends_per_minute value for this
	// clients email_group_sid and sends_per_minute Required permissions:
	//
	//	OMNI_BOSS
	UpdateEmailGroupMstrSendsPerMinute(context.Context, *connect_go.Request[v0alpha.EmailGroupSendsPerMinuteReq]) (*connect_go.Response[v0alpha.EmailGroupSendsPerMinuteRes], error)
	// Updates the name, start and stop time for the outbound email group
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateOutboundEmailGroup(context.Context, *connect_go.Request[v0alpha.UpdateOutboundEmailGroupReq]) (*connect_go.Response[v0alpha.UpdateOutboundEmailGroupRes], error)
	// Gets a inbound email group details defined by InboundEmailGroupByIdReq
	// message for the specified inbound_email_group_id, org_id and region_id. The
	// method will return a InboundEmailGroup message/entity. Required
	// permissions:
	//
	//	OMNI_BOSS
	GetInboundEmailGroupById(context.Context, *connect_go.Request[v0alpha.InboundEmailGroupByIdReq]) (*connect_go.Response[v0alpha.InboundEmailGroup], error)
	// Create/Add email message attachment details defined by CreateEmailMessageAttachmentReq
	// message for the specified client.
	// This method will return a CreateEmailMessageAttachmentRes message/entity. Required
	// permissions:
	//
	//	OMNI_BOSS
	CreateEmailMessageAttachment(context.Context, *connect_go.Request[v0alpha.CreateEmailMessageAttachmentReq]) (*connect_go.Response[v0alpha.CreateEmailMessageAttachmentRes], error)
	// List all the email message attachments and their details defined by
	// ListEmailMessageAttachmentsReq for the specified client.
	// permissions:
	//
	//	OMNI_BOSS
	ListEmailMessageAttachments(context.Context, *connect_go.Request[v0alpha.ListEmailMessageAttachmentsReq]) (*connect_go.Response[v0alpha.ListEmailMessageAttachmentsRes], error)
	// Unassigns a conversation from the current user and puts it back into the matching pool
	// Required permissions:
	//
	//	OMNI_LINK
	UnassignCurrentUserFromEmailConversation(context.Context, *connect_go.Request[v0alpha.UnassignCurrentUserFromEmailConversationReq]) (*connect_go.Response[v0alpha.UnassignUserFromEmailConversationRes], error)
	// Listing all email conversations for the dashboard
	// Required Permissions:
	//
	//	OMNI_BOSS
	DashboardEmailConversationSearch(context.Context, *connect_go.Request[v0alpha.DashboardEmailConversationSearchReq]) (*connect_go.Response[v0alpha.DashboardEmailConversationSearchRes], error)
	// ReassignEmailConversation.  unassign current user and assign
	// new user.
	// This method will return a ReassignEmailConversationRes
	// Required permissions
	//
	//	OMNI_BOSS
	ReassignEmailConversation(context.Context, *connect_go.Request[v0alpha.ReassignEmailConversationReq]) (*connect_go.Response[v0alpha.ReassignEmailConversationRes], error)
	// AssignEmailConversation - allowing the manager from the dashboard to assing a email conversation
	// before the matcher assigns it.
	AssignEmailConversation(context.Context, *connect_go.Request[v0alpha.AssignEmailConversationReq]) (*connect_go.Response[v0alpha.AssignEmailConversationRes], error)
	// Suspends an email conversation
	SuspendEmailConversation(context.Context, *connect_go.Request[v0alpha.SuspendEmailConversationReq]) (*connect_go.Response[v0alpha.SuspendEmailConversationRes], error)
	// List stream of inbound and outbound campaigns defined by ListCampaignsByConnectedInboxIdReq message
	// The method will return a ListCampaignsByConnectedInboxIdRes message/entity that will
	// contain the stream of all campaigns along with project details.
	// Required permissions:
	//
	//	OMNI_BOSS
	ListCampaignsByConnectedInboxId(context.Context, *connect_go.Request[v0alpha.ListCampaignsByConnectedInboxIdReq]) (*connect_go.Response[v0alpha.ListCampaignsByConnectedInboxIdRes], error)
	// Close email conversation defined by CloseEmailConversationReq message
	// Required permissions:
	//
	//	OMNI_BOSS
	CloseEmailConversation(context.Context, *connect_go.Request[v0alpha.CloseEmailConversationReq]) (*connect_go.Response[v0alpha.CloseEmailConversationRes], error)
}

// NewEmailApiHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEmailApiHandler(svc EmailApiHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(EmailApiCreateEmailTemplateProcedure, connect_go.NewUnaryHandler(
		EmailApiCreateEmailTemplateProcedure,
		svc.CreateEmailTemplate,
		opts...,
	))
	mux.Handle(EmailApiUpdateEmailTemplateProcedure, connect_go.NewUnaryHandler(
		EmailApiUpdateEmailTemplateProcedure,
		svc.UpdateEmailTemplate,
		opts...,
	))
	mux.Handle(EmailApiCreateEmailTemplateAttachmentProcedure, connect_go.NewUnaryHandler(
		EmailApiCreateEmailTemplateAttachmentProcedure,
		svc.CreateEmailTemplateAttachment,
		opts...,
	))
	mux.Handle(EmailApiCopyEmailTemplateWithAttachmentsProcedure, connect_go.NewUnaryHandler(
		EmailApiCopyEmailTemplateWithAttachmentsProcedure,
		svc.CopyEmailTemplateWithAttachments,
		opts...,
	))
	mux.Handle(EmailApiUpdateEmailTemplateAttachmentProcedure, connect_go.NewUnaryHandler(
		EmailApiUpdateEmailTemplateAttachmentProcedure,
		svc.UpdateEmailTemplateAttachment,
		opts...,
	))
	mux.Handle(EmailApiGetEmailTemplateByTemplateSidProcedure, connect_go.NewUnaryHandler(
		EmailApiGetEmailTemplateByTemplateSidProcedure,
		svc.GetEmailTemplateByTemplateSid,
		opts...,
	))
	mux.Handle(EmailApiGetAllEmailTemplatesProcedure, connect_go.NewUnaryHandler(
		EmailApiGetAllEmailTemplatesProcedure,
		svc.GetAllEmailTemplates,
		opts...,
	))
	mux.Handle(EmailApiDeleteEmailTemplateProcedure, connect_go.NewUnaryHandler(
		EmailApiDeleteEmailTemplateProcedure,
		svc.DeleteEmailTemplate,
		opts...,
	))
	mux.Handle(EmailApiDeleteEmailTemplateAttachmentByIdProcedure, connect_go.NewUnaryHandler(
		EmailApiDeleteEmailTemplateAttachmentByIdProcedure,
		svc.DeleteEmailTemplateAttachmentById,
		opts...,
	))
	mux.Handle(EmailApiDownloadInboundEmailAttachmentProcedure, connect_go.NewUnaryHandler(
		EmailApiDownloadInboundEmailAttachmentProcedure,
		svc.DownloadInboundEmailAttachment,
		opts...,
	))
	mux.Handle(EmailApiPureEmailGroupSearchProcedure, connect_go.NewUnaryHandler(
		EmailApiPureEmailGroupSearchProcedure,
		svc.PureEmailGroupSearch,
		opts...,
	))
	mux.Handle(EmailApiManagerListNewEmailMessageRepliesProcedure, connect_go.NewUnaryHandler(
		EmailApiManagerListNewEmailMessageRepliesProcedure,
		svc.ManagerListNewEmailMessageReplies,
		opts...,
	))
	mux.Handle(EmailApiListNewEmailMessageRepliesProcedure, connect_go.NewUnaryHandler(
		EmailApiListNewEmailMessageRepliesProcedure,
		svc.ListNewEmailMessageReplies,
		opts...,
	))
	mux.Handle(EmailApiGetEmailTasksByGroupSidsProcedure, connect_go.NewUnaryHandler(
		EmailApiGetEmailTasksByGroupSidsProcedure,
		svc.GetEmailTasksByGroupSids,
		opts...,
	))
	mux.Handle(EmailApiUpdateEmailGroupStatusProcedure, connect_go.NewUnaryHandler(
		EmailApiUpdateEmailGroupStatusProcedure,
		svc.UpdateEmailGroupStatus,
		opts...,
	))
	mux.Handle(EmailApiGetEmailMessageDetailsProcedure, connect_go.NewUnaryHandler(
		EmailApiGetEmailMessageDetailsProcedure,
		svc.GetEmailMessageDetails,
		opts...,
	))
	mux.Handle(EmailApiCreateInboundEmailTemplateProcedure, connect_go.NewUnaryHandler(
		EmailApiCreateInboundEmailTemplateProcedure,
		svc.CreateInboundEmailTemplate,
		opts...,
	))
	mux.Handle(EmailApiUpdateInboundEmailTemplateProcedure, connect_go.NewUnaryHandler(
		EmailApiUpdateInboundEmailTemplateProcedure,
		svc.UpdateInboundEmailTemplate,
		opts...,
	))
	mux.Handle(EmailApiDeleteInboundEmailTemplateByIdProcedure, connect_go.NewUnaryHandler(
		EmailApiDeleteInboundEmailTemplateByIdProcedure,
		svc.DeleteInboundEmailTemplateById,
		opts...,
	))
	mux.Handle(EmailApiListInboundEmailTemplatesProcedure, connect_go.NewUnaryHandler(
		EmailApiListInboundEmailTemplatesProcedure,
		svc.ListInboundEmailTemplates,
		opts...,
	))
	mux.Handle(EmailApiGetInboundEmailTemplateByIdProcedure, connect_go.NewUnaryHandler(
		EmailApiGetInboundEmailTemplateByIdProcedure,
		svc.GetInboundEmailTemplateById,
		opts...,
	))
	mux.Handle(EmailApiUpdateInboundEmailGroupStatusProcedure, connect_go.NewUnaryHandler(
		EmailApiUpdateInboundEmailGroupStatusProcedure,
		svc.UpdateInboundEmailGroupStatus,
		opts...,
	))
	mux.Handle(EmailApiStopInboundEmailGroupProcedure, connect_go.NewUnaryHandler(
		EmailApiStopInboundEmailGroupProcedure,
		svc.StopInboundEmailGroup,
		opts...,
	))
	mux.Handle(EmailApiStopAllInboundEmailGroupsProcedure, connect_go.NewUnaryHandler(
		EmailApiStopAllInboundEmailGroupsProcedure,
		svc.StopAllInboundEmailGroups,
		opts...,
	))
	mux.Handle(EmailApiPureInboundEmailGroupSearchProcedure, connect_go.NewUnaryHandler(
		EmailApiPureInboundEmailGroupSearchProcedure,
		svc.PureInboundEmailGroupSearch,
		opts...,
	))
	mux.Handle(EmailApiInboundEmailGroupSearchProcedure, connect_go.NewUnaryHandler(
		EmailApiInboundEmailGroupSearchProcedure,
		svc.InboundEmailGroupSearch,
		opts...,
	))
	mux.Handle(EmailApiListInboundEmailGroupsByGroupIdsProcedure, connect_go.NewUnaryHandler(
		EmailApiListInboundEmailGroupsByGroupIdsProcedure,
		svc.ListInboundEmailGroupsByGroupIds,
		opts...,
	))
	mux.Handle(EmailApiListInboundEmailTasksByGroupIdsProcedure, connect_go.NewUnaryHandler(
		EmailApiListInboundEmailTasksByGroupIdsProcedure,
		svc.ListInboundEmailTasksByGroupIds,
		opts...,
	))
	mux.Handle(EmailApiListActiveInboundEmailGroupsProcedure, connect_go.NewUnaryHandler(
		EmailApiListActiveInboundEmailGroupsProcedure,
		svc.ListActiveInboundEmailGroups,
		opts...,
	))
	mux.Handle(EmailApiScheduleProcedure, connect_go.NewUnaryHandler(
		EmailApiScheduleProcedure,
		svc.Schedule,
		opts...,
	))
	mux.Handle(EmailApiScheduleOutboundEmailGroupProcedure, connect_go.NewUnaryHandler(
		EmailApiScheduleOutboundEmailGroupProcedure,
		svc.ScheduleOutboundEmailGroup,
		opts...,
	))
	mux.Handle(EmailApiSchedulePureInboundEmailProcedure, connect_go.NewUnaryHandler(
		EmailApiSchedulePureInboundEmailProcedure,
		svc.SchedulePureInboundEmail,
		opts...,
	))
	mux.Handle(EmailApiCreateEmailMessageAgentReplyProcedure, connect_go.NewUnaryHandler(
		EmailApiCreateEmailMessageAgentReplyProcedure,
		svc.CreateEmailMessageAgentReply,
		opts...,
	))
	mux.Handle(EmailApiCreateEmailMessageAgentReplyAttachmentProcedure, connect_go.NewUnaryHandler(
		EmailApiCreateEmailMessageAgentReplyAttachmentProcedure,
		svc.CreateEmailMessageAgentReplyAttachment,
		opts...,
	))
	mux.Handle(EmailApiSendReplyProcedure, connect_go.NewUnaryHandler(
		EmailApiSendReplyProcedure,
		svc.SendReply,
		opts...,
	))
	mux.Handle(EmailApiGetEmailGroupsByGroupSidsProcedure, connect_go.NewUnaryHandler(
		EmailApiGetEmailGroupsByGroupSidsProcedure,
		svc.GetEmailGroupsByGroupSids,
		opts...,
	))
	mux.Handle(EmailApiGetEmailGroupByGroupSidProcedure, connect_go.NewUnaryHandler(
		EmailApiGetEmailGroupByGroupSidProcedure,
		svc.GetEmailGroupByGroupSid,
		opts...,
	))
	mux.Handle(EmailApiGetEmailGroupByGroupIdProcedure, connect_go.NewUnaryHandler(
		EmailApiGetEmailGroupByGroupIdProcedure,
		svc.GetEmailGroupByGroupId,
		opts...,
	))
	mux.Handle(EmailApiSchedulePureOmniLinkInboundEmailProcedure, connect_go.NewUnaryHandler(
		EmailApiSchedulePureOmniLinkInboundEmailProcedure,
		svc.SchedulePureOmniLinkInboundEmail,
		opts...,
	))
	mux.Handle(EmailApiUpdateInboundEmailGroupProcedure, connect_go.NewUnaryHandler(
		EmailApiUpdateInboundEmailGroupProcedure,
		svc.UpdateInboundEmailGroup,
		opts...,
	))
	mux.Handle(EmailApiUpdateEmailGroupMstrSendsPerMinuteProcedure, connect_go.NewUnaryHandler(
		EmailApiUpdateEmailGroupMstrSendsPerMinuteProcedure,
		svc.UpdateEmailGroupMstrSendsPerMinute,
		opts...,
	))
	mux.Handle(EmailApiUpdateOutboundEmailGroupProcedure, connect_go.NewUnaryHandler(
		EmailApiUpdateOutboundEmailGroupProcedure,
		svc.UpdateOutboundEmailGroup,
		opts...,
	))
	mux.Handle(EmailApiGetInboundEmailGroupByIdProcedure, connect_go.NewUnaryHandler(
		EmailApiGetInboundEmailGroupByIdProcedure,
		svc.GetInboundEmailGroupById,
		opts...,
	))
	mux.Handle(EmailApiCreateEmailMessageAttachmentProcedure, connect_go.NewUnaryHandler(
		EmailApiCreateEmailMessageAttachmentProcedure,
		svc.CreateEmailMessageAttachment,
		opts...,
	))
	mux.Handle(EmailApiListEmailMessageAttachmentsProcedure, connect_go.NewUnaryHandler(
		EmailApiListEmailMessageAttachmentsProcedure,
		svc.ListEmailMessageAttachments,
		opts...,
	))
	mux.Handle(EmailApiUnassignCurrentUserFromEmailConversationProcedure, connect_go.NewUnaryHandler(
		EmailApiUnassignCurrentUserFromEmailConversationProcedure,
		svc.UnassignCurrentUserFromEmailConversation,
		opts...,
	))
	mux.Handle(EmailApiDashboardEmailConversationSearchProcedure, connect_go.NewUnaryHandler(
		EmailApiDashboardEmailConversationSearchProcedure,
		svc.DashboardEmailConversationSearch,
		opts...,
	))
	mux.Handle(EmailApiReassignEmailConversationProcedure, connect_go.NewUnaryHandler(
		EmailApiReassignEmailConversationProcedure,
		svc.ReassignEmailConversation,
		opts...,
	))
	mux.Handle(EmailApiAssignEmailConversationProcedure, connect_go.NewUnaryHandler(
		EmailApiAssignEmailConversationProcedure,
		svc.AssignEmailConversation,
		opts...,
	))
	mux.Handle(EmailApiSuspendEmailConversationProcedure, connect_go.NewUnaryHandler(
		EmailApiSuspendEmailConversationProcedure,
		svc.SuspendEmailConversation,
		opts...,
	))
	mux.Handle(EmailApiListCampaignsByConnectedInboxIdProcedure, connect_go.NewUnaryHandler(
		EmailApiListCampaignsByConnectedInboxIdProcedure,
		svc.ListCampaignsByConnectedInboxId,
		opts...,
	))
	mux.Handle(EmailApiCloseEmailConversationProcedure, connect_go.NewUnaryHandler(
		EmailApiCloseEmailConversationProcedure,
		svc.CloseEmailConversation,
		opts...,
	))
	return "/api.v0alpha.EmailApi/", mux
}

// UnimplementedEmailApiHandler returns CodeUnimplemented from all methods.
type UnimplementedEmailApiHandler struct{}

func (UnimplementedEmailApiHandler) CreateEmailTemplate(context.Context, *connect_go.Request[v0alpha.CreateEmailTemplateReq]) (*connect_go.Response[v0alpha.CreateEmailTemplateRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.CreateEmailTemplate is not implemented"))
}

func (UnimplementedEmailApiHandler) UpdateEmailTemplate(context.Context, *connect_go.Request[v0alpha.UpdateEmailTemplateReq]) (*connect_go.Response[v0alpha.UpdateEmailTemplateRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.UpdateEmailTemplate is not implemented"))
}

func (UnimplementedEmailApiHandler) CreateEmailTemplateAttachment(context.Context, *connect_go.Request[v0alpha.CreateEmailTemplateAttachmentReq]) (*connect_go.Response[v0alpha.CreateEmailTemplateAttachmentRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.CreateEmailTemplateAttachment is not implemented"))
}

func (UnimplementedEmailApiHandler) CopyEmailTemplateWithAttachments(context.Context, *connect_go.Request[v0alpha.CopyEmailTemplateWithAttachmentsReq]) (*connect_go.Response[v0alpha.CopyEmailTemplateWithAttachmentsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.CopyEmailTemplateWithAttachments is not implemented"))
}

func (UnimplementedEmailApiHandler) UpdateEmailTemplateAttachment(context.Context, *connect_go.Request[v0alpha.UpdateEmailTemplateAttachmentReq]) (*connect_go.Response[v0alpha.UpdateEmailTemplateAttachmentRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.UpdateEmailTemplateAttachment is not implemented"))
}

func (UnimplementedEmailApiHandler) GetEmailTemplateByTemplateSid(context.Context, *connect_go.Request[v0alpha.GetEmailTemplateByTemplateSidReq]) (*connect_go.Response[v0alpha.EmailTemplateWithAttachments], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.GetEmailTemplateByTemplateSid is not implemented"))
}

func (UnimplementedEmailApiHandler) GetAllEmailTemplates(context.Context, *connect_go.Request[v0alpha.GetAllEmailTemplatesReq]) (*connect_go.Response[v0alpha.GetAllEmailTemplatesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.GetAllEmailTemplates is not implemented"))
}

func (UnimplementedEmailApiHandler) DeleteEmailTemplate(context.Context, *connect_go.Request[v0alpha.DeleteEmailTemplateReq]) (*connect_go.Response[v0alpha.DeleteEmailTemplateRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.DeleteEmailTemplate is not implemented"))
}

func (UnimplementedEmailApiHandler) DeleteEmailTemplateAttachmentById(context.Context, *connect_go.Request[v0alpha.DeleteEmailTemplateAttachmentByIdReq]) (*connect_go.Response[v0alpha.DeleteEmailTemplateAttachmentByIdRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.DeleteEmailTemplateAttachmentById is not implemented"))
}

func (UnimplementedEmailApiHandler) DownloadInboundEmailAttachment(context.Context, *connect_go.Request[v0alpha.DownloadInboundEmailAttachmentReq]) (*connect_go.Response[v0alpha.DownloadInboundEmailAttachmentRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.DownloadInboundEmailAttachment is not implemented"))
}

func (UnimplementedEmailApiHandler) PureEmailGroupSearch(context.Context, *connect_go.Request[v0alpha.EmailGroupSearchReq]) (*connect_go.Response[v0alpha.EmailGroupSearchRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.PureEmailGroupSearch is not implemented"))
}

func (UnimplementedEmailApiHandler) ManagerListNewEmailMessageReplies(context.Context, *connect_go.Request[v0alpha.ListNewEmailMessageRepliesReq]) (*connect_go.Response[v0alpha.ListNewEmailMessageRepliesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.ManagerListNewEmailMessageReplies is not implemented"))
}

func (UnimplementedEmailApiHandler) ListNewEmailMessageReplies(context.Context, *connect_go.Request[v0alpha.ListNewEmailMessageRepliesReq]) (*connect_go.Response[v0alpha.ListNewEmailMessageRepliesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.ListNewEmailMessageReplies is not implemented"))
}

func (UnimplementedEmailApiHandler) GetEmailTasksByGroupSids(context.Context, *connect_go.Request[v0alpha.GetEmailTasksByGroupSidsReq]) (*connect_go.Response[v0alpha.GetEmailTasksByGroupSidsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.GetEmailTasksByGroupSids is not implemented"))
}

func (UnimplementedEmailApiHandler) UpdateEmailGroupStatus(context.Context, *connect_go.Request[v0alpha.EmailGroupStatusReq]) (*connect_go.Response[v0alpha.EmailGroupStatusRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.UpdateEmailGroupStatus is not implemented"))
}

func (UnimplementedEmailApiHandler) GetEmailMessageDetails(context.Context, *connect_go.Request[v0alpha.GetEmailMessageReq]) (*connect_go.Response[v0alpha.GetEmailMessageRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.GetEmailMessageDetails is not implemented"))
}

func (UnimplementedEmailApiHandler) CreateInboundEmailTemplate(context.Context, *connect_go.Request[v0alpha.CreateInboundEmailTemplateReq]) (*connect_go.Response[v0alpha.CreateInboundEmailTemplateRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.CreateInboundEmailTemplate is not implemented"))
}

func (UnimplementedEmailApiHandler) UpdateInboundEmailTemplate(context.Context, *connect_go.Request[v0alpha.UpdateInboundEmailTemplateReq]) (*connect_go.Response[v0alpha.UpdateInboundEmailTemplateRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.UpdateInboundEmailTemplate is not implemented"))
}

func (UnimplementedEmailApiHandler) DeleteInboundEmailTemplateById(context.Context, *connect_go.Request[v0alpha.DeleteInboundEmailTemplateByIdReq]) (*connect_go.Response[v0alpha.DeleteInboundEmailTemplateByIdRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.DeleteInboundEmailTemplateById is not implemented"))
}

func (UnimplementedEmailApiHandler) ListInboundEmailTemplates(context.Context, *connect_go.Request[v0alpha.ListInboundEmailTemplatesReq]) (*connect_go.Response[v0alpha.ListInboundEmailTemplatesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.ListInboundEmailTemplates is not implemented"))
}

func (UnimplementedEmailApiHandler) GetInboundEmailTemplateById(context.Context, *connect_go.Request[v0alpha.GetInboundEmailTemplateByIdReq]) (*connect_go.Response[v0alpha.InboundEmailTemplate], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.GetInboundEmailTemplateById is not implemented"))
}

func (UnimplementedEmailApiHandler) UpdateInboundEmailGroupStatus(context.Context, *connect_go.Request[v0alpha.UpdateInboundEmailGroupStatusReq]) (*connect_go.Response[v0alpha.UpdateInboundEmailGroupStatusRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.UpdateInboundEmailGroupStatus is not implemented"))
}

func (UnimplementedEmailApiHandler) StopInboundEmailGroup(context.Context, *connect_go.Request[v0alpha.StopInboundEmailGroupReq]) (*connect_go.Response[v0alpha.StopInboundEmailGroupRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.StopInboundEmailGroup is not implemented"))
}

func (UnimplementedEmailApiHandler) StopAllInboundEmailGroups(context.Context, *connect_go.Request[v0alpha.StopAllInboundEmailGroupsReq]) (*connect_go.Response[v0alpha.StopInboundEmailGroupRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.StopAllInboundEmailGroups is not implemented"))
}

func (UnimplementedEmailApiHandler) PureInboundEmailGroupSearch(context.Context, *connect_go.Request[v0alpha.PureInboundEmailGroupSearchReq]) (*connect_go.Response[v0alpha.PureInboundEmailGroupSearchRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.PureInboundEmailGroupSearch is not implemented"))
}

func (UnimplementedEmailApiHandler) InboundEmailGroupSearch(context.Context, *connect_go.Request[v0alpha.InboundEmailGroupSearchReq]) (*connect_go.Response[v0alpha.InboundEmailGroupSearchRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.InboundEmailGroupSearch is not implemented"))
}

func (UnimplementedEmailApiHandler) ListInboundEmailGroupsByGroupIds(context.Context, *connect_go.Request[v0alpha.ListInboundEmailGroupsByGroupIdsReq]) (*connect_go.Response[v0alpha.ListInboundEmailGroupsByGroupIdsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.ListInboundEmailGroupsByGroupIds is not implemented"))
}

func (UnimplementedEmailApiHandler) ListInboundEmailTasksByGroupIds(context.Context, *connect_go.Request[v0alpha.ListInboundEmailTasksByGroupIdsReq]) (*connect_go.Response[v0alpha.ListInboundEmailTasksByGroupIdsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.ListInboundEmailTasksByGroupIds is not implemented"))
}

func (UnimplementedEmailApiHandler) ListActiveInboundEmailGroups(context.Context, *connect_go.Request[v0alpha.ListActiveInboundEmailGroupsReq]) (*connect_go.Response[v0alpha.ListActiveInboundEmailGroupsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.ListActiveInboundEmailGroups is not implemented"))
}

func (UnimplementedEmailApiHandler) Schedule(context.Context, *connect_go.Request[v0alpha.ScheduleReq]) (*connect_go.Response[v0alpha.ScheduleRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.Schedule is not implemented"))
}

func (UnimplementedEmailApiHandler) ScheduleOutboundEmailGroup(context.Context, *connect_go.Request[v0alpha.ScheduleOutboundEmailGroupReq]) (*connect_go.Response[v0alpha.ScheduleOutboundEmailGroupRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.ScheduleOutboundEmailGroup is not implemented"))
}

func (UnimplementedEmailApiHandler) SchedulePureInboundEmail(context.Context, *connect_go.Request[v0alpha.SchedulePureInboundEmailReq]) (*connect_go.Response[v0alpha.SchedulePureInboundEmailRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.SchedulePureInboundEmail is not implemented"))
}

func (UnimplementedEmailApiHandler) CreateEmailMessageAgentReply(context.Context, *connect_go.Request[v0alpha.CreateEmailMessageAgentReplyReq]) (*connect_go.Response[v0alpha.EmailMessageReplyWithAttachments], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.CreateEmailMessageAgentReply is not implemented"))
}

func (UnimplementedEmailApiHandler) CreateEmailMessageAgentReplyAttachment(context.Context, *connect_go.Request[v0alpha.CreateEmailMessageAgentReplyAttachmentReq]) (*connect_go.Response[v0alpha.CreateEmailMessageAgentReplyAttachmentRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.CreateEmailMessageAgentReplyAttachment is not implemented"))
}

func (UnimplementedEmailApiHandler) SendReply(context.Context, *connect_go.Request[v0alpha.SendReplyReq]) (*connect_go.Response[v0alpha.EmailMessageReplyWithAttachments], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.SendReply is not implemented"))
}

func (UnimplementedEmailApiHandler) GetEmailGroupsByGroupSids(context.Context, *connect_go.Request[v0alpha.GetEmailGroupsByGroupSidsReq]) (*connect_go.Response[v0alpha.GetEmailGroupsByGroupSidsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.GetEmailGroupsByGroupSids is not implemented"))
}

func (UnimplementedEmailApiHandler) GetEmailGroupByGroupSid(context.Context, *connect_go.Request[v0alpha.GetEmailGroupByGroupSidReq]) (*connect_go.Response[v0alpha.EmailGroupDetailsWithAttachments], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.GetEmailGroupByGroupSid is not implemented"))
}

func (UnimplementedEmailApiHandler) GetEmailGroupByGroupId(context.Context, *connect_go.Request[v0alpha.GetEmailGroupByGroupIdReq]) (*connect_go.Response[v0alpha.EmailGroupDetailsWithAttachments], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.GetEmailGroupByGroupId is not implemented"))
}

func (UnimplementedEmailApiHandler) SchedulePureOmniLinkInboundEmail(context.Context, *connect_go.Request[v0alpha.SchedulePureOmniLinkInboundEmailReq]) (*connect_go.Response[v0alpha.SchedulePureOmniLinkInboundEmailRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.SchedulePureOmniLinkInboundEmail is not implemented"))
}

func (UnimplementedEmailApiHandler) UpdateInboundEmailGroup(context.Context, *connect_go.Request[v0alpha.UpdateInboundEmailGroupReq]) (*connect_go.Response[v0alpha.UpdateInboundEmailGroupRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.UpdateInboundEmailGroup is not implemented"))
}

func (UnimplementedEmailApiHandler) UpdateEmailGroupMstrSendsPerMinute(context.Context, *connect_go.Request[v0alpha.EmailGroupSendsPerMinuteReq]) (*connect_go.Response[v0alpha.EmailGroupSendsPerMinuteRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.UpdateEmailGroupMstrSendsPerMinute is not implemented"))
}

func (UnimplementedEmailApiHandler) UpdateOutboundEmailGroup(context.Context, *connect_go.Request[v0alpha.UpdateOutboundEmailGroupReq]) (*connect_go.Response[v0alpha.UpdateOutboundEmailGroupRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.UpdateOutboundEmailGroup is not implemented"))
}

func (UnimplementedEmailApiHandler) GetInboundEmailGroupById(context.Context, *connect_go.Request[v0alpha.InboundEmailGroupByIdReq]) (*connect_go.Response[v0alpha.InboundEmailGroup], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.GetInboundEmailGroupById is not implemented"))
}

func (UnimplementedEmailApiHandler) CreateEmailMessageAttachment(context.Context, *connect_go.Request[v0alpha.CreateEmailMessageAttachmentReq]) (*connect_go.Response[v0alpha.CreateEmailMessageAttachmentRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.CreateEmailMessageAttachment is not implemented"))
}

func (UnimplementedEmailApiHandler) ListEmailMessageAttachments(context.Context, *connect_go.Request[v0alpha.ListEmailMessageAttachmentsReq]) (*connect_go.Response[v0alpha.ListEmailMessageAttachmentsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.ListEmailMessageAttachments is not implemented"))
}

func (UnimplementedEmailApiHandler) UnassignCurrentUserFromEmailConversation(context.Context, *connect_go.Request[v0alpha.UnassignCurrentUserFromEmailConversationReq]) (*connect_go.Response[v0alpha.UnassignUserFromEmailConversationRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.UnassignCurrentUserFromEmailConversation is not implemented"))
}

func (UnimplementedEmailApiHandler) DashboardEmailConversationSearch(context.Context, *connect_go.Request[v0alpha.DashboardEmailConversationSearchReq]) (*connect_go.Response[v0alpha.DashboardEmailConversationSearchRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.DashboardEmailConversationSearch is not implemented"))
}

func (UnimplementedEmailApiHandler) ReassignEmailConversation(context.Context, *connect_go.Request[v0alpha.ReassignEmailConversationReq]) (*connect_go.Response[v0alpha.ReassignEmailConversationRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.ReassignEmailConversation is not implemented"))
}

func (UnimplementedEmailApiHandler) AssignEmailConversation(context.Context, *connect_go.Request[v0alpha.AssignEmailConversationReq]) (*connect_go.Response[v0alpha.AssignEmailConversationRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.AssignEmailConversation is not implemented"))
}

func (UnimplementedEmailApiHandler) SuspendEmailConversation(context.Context, *connect_go.Request[v0alpha.SuspendEmailConversationReq]) (*connect_go.Response[v0alpha.SuspendEmailConversationRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.SuspendEmailConversation is not implemented"))
}

func (UnimplementedEmailApiHandler) ListCampaignsByConnectedInboxId(context.Context, *connect_go.Request[v0alpha.ListCampaignsByConnectedInboxIdReq]) (*connect_go.Response[v0alpha.ListCampaignsByConnectedInboxIdRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.ListCampaignsByConnectedInboxId is not implemented"))
}

func (UnimplementedEmailApiHandler) CloseEmailConversation(context.Context, *connect_go.Request[v0alpha.CloseEmailConversationReq]) (*connect_go.Response[v0alpha.CloseEmailConversationRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.EmailApi.CloseEmailConversation is not implemented"))
}
