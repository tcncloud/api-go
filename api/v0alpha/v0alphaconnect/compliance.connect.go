// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v0alpha/compliance.proto

package v0alphaconnect

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v0alpha "github.com/tcncloud/api-go/api/v0alpha"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ComplianceName is the fully-qualified name of the Compliance service.
	ComplianceName = "api.v0alpha.Compliance"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ComplianceRuleAutoCompleteProcedure is the fully-qualified name of the Compliance's
	// RuleAutoComplete RPC.
	ComplianceRuleAutoCompleteProcedure = "/api.v0alpha.Compliance/RuleAutoComplete"
	// ComplianceCheckRuleSetProcedure is the fully-qualified name of the Compliance's CheckRuleSet RPC.
	ComplianceCheckRuleSetProcedure = "/api.v0alpha.Compliance/CheckRuleSet"
	// ComplianceAssignRuleSetProcedure is the fully-qualified name of the Compliance's AssignRuleSet
	// RPC.
	ComplianceAssignRuleSetProcedure = "/api.v0alpha.Compliance/AssignRuleSet"
	// ComplianceListRuleSetsProcedure is the fully-qualified name of the Compliance's ListRuleSets RPC.
	ComplianceListRuleSetsProcedure = "/api.v0alpha.Compliance/ListRuleSets"
	// ComplianceGetRuleSetProcedure is the fully-qualified name of the Compliance's GetRuleSet RPC.
	ComplianceGetRuleSetProcedure = "/api.v0alpha.Compliance/GetRuleSet"
	// ComplianceGetRuleSetByNameProcedure is the fully-qualified name of the Compliance's
	// GetRuleSetByName RPC.
	ComplianceGetRuleSetByNameProcedure = "/api.v0alpha.Compliance/GetRuleSetByName"
	// ComplianceCreateRuleSetProcedure is the fully-qualified name of the Compliance's CreateRuleSet
	// RPC.
	ComplianceCreateRuleSetProcedure = "/api.v0alpha.Compliance/CreateRuleSet"
	// ComplianceRenameRuleSetProcedure is the fully-qualified name of the Compliance's RenameRuleSet
	// RPC.
	ComplianceRenameRuleSetProcedure = "/api.v0alpha.Compliance/RenameRuleSet"
	// ComplianceEnableRuleSetProcedure is the fully-qualified name of the Compliance's EnableRuleSet
	// RPC.
	ComplianceEnableRuleSetProcedure = "/api.v0alpha.Compliance/EnableRuleSet"
	// ComplianceDisableRuleSetProcedure is the fully-qualified name of the Compliance's DisableRuleSet
	// RPC.
	ComplianceDisableRuleSetProcedure = "/api.v0alpha.Compliance/DisableRuleSet"
	// ComplianceCreateScrubListProcedure is the fully-qualified name of the Compliance's
	// CreateScrubList RPC.
	ComplianceCreateScrubListProcedure = "/api.v0alpha.Compliance/CreateScrubList"
	// ComplianceAddScrubListEntriesProcedure is the fully-qualified name of the Compliance's
	// AddScrubListEntries RPC.
	ComplianceAddScrubListEntriesProcedure = "/api.v0alpha.Compliance/AddScrubListEntries"
	// ComplianceUpdateScrubEntryProcedure is the fully-qualified name of the Compliance's
	// UpdateScrubEntry RPC.
	ComplianceUpdateScrubEntryProcedure = "/api.v0alpha.Compliance/UpdateScrubEntry"
	// ComplianceDeleteScrubListEntriesProcedure is the fully-qualified name of the Compliance's
	// DeleteScrubListEntries RPC.
	ComplianceDeleteScrubListEntriesProcedure = "/api.v0alpha.Compliance/DeleteScrubListEntries"
	// ComplianceGetScrubListProcedure is the fully-qualified name of the Compliance's GetScrubList RPC.
	ComplianceGetScrubListProcedure = "/api.v0alpha.Compliance/GetScrubList"
	// ComplianceDeleteScrubListProcedure is the fully-qualified name of the Compliance's
	// DeleteScrubList RPC.
	ComplianceDeleteScrubListProcedure = "/api.v0alpha.Compliance/DeleteScrubList"
	// ComplianceGetDefaultRulesProcedure is the fully-qualified name of the Compliance's
	// GetDefaultRules RPC.
	ComplianceGetDefaultRulesProcedure = "/api.v0alpha.Compliance/GetDefaultRules"
	// ComplianceGetScrubListsProcedure is the fully-qualified name of the Compliance's GetScrubLists
	// RPC.
	ComplianceGetScrubListsProcedure = "/api.v0alpha.Compliance/GetScrubLists"
	// ComplianceSearchScrubListProcedure is the fully-qualified name of the Compliance's
	// SearchScrubList RPC.
	ComplianceSearchScrubListProcedure = "/api.v0alpha.Compliance/SearchScrubList"
	// ComplianceGetScrubListUploadUrlProcedure is the fully-qualified name of the Compliance's
	// GetScrubListUploadUrl RPC.
	ComplianceGetScrubListUploadUrlProcedure = "/api.v0alpha.Compliance/GetScrubListUploadUrl"
	// ComplianceProcessScrubListUploadProcedure is the fully-qualified name of the Compliance's
	// ProcessScrubListUpload RPC.
	ComplianceProcessScrubListUploadProcedure = "/api.v0alpha.Compliance/ProcessScrubListUpload"
	// ComplianceProcessScrubListDeleteUploadProcedure is the fully-qualified name of the Compliance's
	// ProcessScrubListDeleteUpload RPC.
	ComplianceProcessScrubListDeleteUploadProcedure = "/api.v0alpha.Compliance/ProcessScrubListDeleteUpload"
	// ComplianceExportScrubListProcedure is the fully-qualified name of the Compliance's
	// ExportScrubList RPC.
	ComplianceExportScrubListProcedure = "/api.v0alpha.Compliance/ExportScrubList"
	// CompliancePurgeScrubListProcedure is the fully-qualified name of the Compliance's PurgeScrubList
	// RPC.
	CompliancePurgeScrubListProcedure = "/api.v0alpha.Compliance/PurgeScrubList"
	// ComplianceCreateScenarioProcedure is the fully-qualified name of the Compliance's CreateScenario
	// RPC.
	ComplianceCreateScenarioProcedure = "/api.v0alpha.Compliance/CreateScenario"
	// ComplianceGetScenarioProcedure is the fully-qualified name of the Compliance's GetScenario RPC.
	ComplianceGetScenarioProcedure = "/api.v0alpha.Compliance/GetScenario"
	// ComplianceUpdateScenarioProcedure is the fully-qualified name of the Compliance's UpdateScenario
	// RPC.
	ComplianceUpdateScenarioProcedure = "/api.v0alpha.Compliance/UpdateScenario"
	// ComplianceDeleteScenarioProcedure is the fully-qualified name of the Compliance's DeleteScenario
	// RPC.
	ComplianceDeleteScenarioProcedure = "/api.v0alpha.Compliance/DeleteScenario"
	// ComplianceRunAssignedScenariosProcedure is the fully-qualified name of the Compliance's
	// RunAssignedScenarios RPC.
	ComplianceRunAssignedScenariosProcedure = "/api.v0alpha.Compliance/RunAssignedScenarios"
	// ComplianceListAllScenariosProcedure is the fully-qualified name of the Compliance's
	// ListAllScenarios RPC.
	ComplianceListAllScenariosProcedure = "/api.v0alpha.Compliance/ListAllScenarios"
	// ComplianceListUnassignedScenariosProcedure is the fully-qualified name of the Compliance's
	// ListUnassignedScenarios RPC.
	ComplianceListUnassignedScenariosProcedure = "/api.v0alpha.Compliance/ListUnassignedScenarios"
	// ComplianceListAssignedRuleSetsProcedure is the fully-qualified name of the Compliance's
	// ListAssignedRuleSets RPC.
	ComplianceListAssignedRuleSetsProcedure = "/api.v0alpha.Compliance/ListAssignedRuleSets"
	// ComplianceListAssignedScenariosProcedure is the fully-qualified name of the Compliance's
	// ListAssignedScenarios RPC.
	ComplianceListAssignedScenariosProcedure = "/api.v0alpha.Compliance/ListAssignedScenarios"
	// ComplianceAssignScenarioProcedure is the fully-qualified name of the Compliance's AssignScenario
	// RPC.
	ComplianceAssignScenarioProcedure = "/api.v0alpha.Compliance/AssignScenario"
	// ComplianceUnassignScenarioProcedure is the fully-qualified name of the Compliance's
	// UnassignScenario RPC.
	ComplianceUnassignScenarioProcedure = "/api.v0alpha.Compliance/UnassignScenario"
	// ComplianceEnableScenarioProcedure is the fully-qualified name of the Compliance's EnableScenario
	// RPC.
	ComplianceEnableScenarioProcedure = "/api.v0alpha.Compliance/EnableScenario"
	// ComplianceDisableScenarioProcedure is the fully-qualified name of the Compliance's
	// DisableScenario RPC.
	ComplianceDisableScenarioProcedure = "/api.v0alpha.Compliance/DisableScenario"
	// ComplianceGetFieldNamesProcedure is the fully-qualified name of the Compliance's GetFieldNames
	// RPC.
	ComplianceGetFieldNamesProcedure = "/api.v0alpha.Compliance/GetFieldNames"
	// ComplianceGetResultDescriptionsProcedure is the fully-qualified name of the Compliance's
	// GetResultDescriptions RPC.
	ComplianceGetResultDescriptionsProcedure = "/api.v0alpha.Compliance/GetResultDescriptions"
	// ComplianceCreateConsentProfileProcedure is the fully-qualified name of the Compliance's
	// CreateConsentProfile RPC.
	ComplianceCreateConsentProfileProcedure = "/api.v0alpha.Compliance/CreateConsentProfile"
	// ComplianceCreateConsentProcedure is the fully-qualified name of the Compliance's CreateConsent
	// RPC.
	ComplianceCreateConsentProcedure = "/api.v0alpha.Compliance/CreateConsent"
	// ComplianceGetConsentProfileProcedure is the fully-qualified name of the Compliance's
	// GetConsentProfile RPC.
	ComplianceGetConsentProfileProcedure = "/api.v0alpha.Compliance/GetConsentProfile"
	// ComplianceGetConsentProcedure is the fully-qualified name of the Compliance's GetConsent RPC.
	ComplianceGetConsentProcedure = "/api.v0alpha.Compliance/GetConsent"
	// ComplianceGetConsentByProfileAndContentProcedure is the fully-qualified name of the Compliance's
	// GetConsentByProfileAndContent RPC.
	ComplianceGetConsentByProfileAndContentProcedure = "/api.v0alpha.Compliance/GetConsentByProfileAndContent"
	// ComplianceGetConsentByContentProcedure is the fully-qualified name of the Compliance's
	// GetConsentByContent RPC.
	ComplianceGetConsentByContentProcedure = "/api.v0alpha.Compliance/GetConsentByContent"
	// ComplianceSearchConsentByContentProcedure is the fully-qualified name of the Compliance's
	// SearchConsentByContent RPC.
	ComplianceSearchConsentByContentProcedure = "/api.v0alpha.Compliance/SearchConsentByContent"
	// ComplianceUpdateConsentProcedure is the fully-qualified name of the Compliance's UpdateConsent
	// RPC.
	ComplianceUpdateConsentProcedure = "/api.v0alpha.Compliance/UpdateConsent"
	// ComplianceExpireConsentProcedure is the fully-qualified name of the Compliance's ExpireConsent
	// RPC.
	ComplianceExpireConsentProcedure = "/api.v0alpha.Compliance/ExpireConsent"
	// ComplianceRevokeConsentProcedure is the fully-qualified name of the Compliance's RevokeConsent
	// RPC.
	ComplianceRevokeConsentProcedure = "/api.v0alpha.Compliance/RevokeConsent"
	// ComplianceDeleteConsentProcedure is the fully-qualified name of the Compliance's DeleteConsent
	// RPC.
	ComplianceDeleteConsentProcedure = "/api.v0alpha.Compliance/DeleteConsent"
	// ComplianceProcessConsentListDeleteUploadProcedure is the fully-qualified name of the Compliance's
	// ProcessConsentListDeleteUpload RPC.
	ComplianceProcessConsentListDeleteUploadProcedure = "/api.v0alpha.Compliance/ProcessConsentListDeleteUpload"
	// ComplianceEnableConsentProfileProcedure is the fully-qualified name of the Compliance's
	// EnableConsentProfile RPC.
	ComplianceEnableConsentProfileProcedure = "/api.v0alpha.Compliance/EnableConsentProfile"
	// ComplianceDisableConsentProfileProcedure is the fully-qualified name of the Compliance's
	// DisableConsentProfile RPC.
	ComplianceDisableConsentProfileProcedure = "/api.v0alpha.Compliance/DisableConsentProfile"
	// ComplianceListConsentProfilesProcedure is the fully-qualified name of the Compliance's
	// ListConsentProfiles RPC.
	ComplianceListConsentProfilesProcedure = "/api.v0alpha.Compliance/ListConsentProfiles"
	// ComplianceGetConsentUploadUrlProcedure is the fully-qualified name of the Compliance's
	// GetConsentUploadUrl RPC.
	ComplianceGetConsentUploadUrlProcedure = "/api.v0alpha.Compliance/GetConsentUploadUrl"
	// ComplianceProcessConsentUploadProcedure is the fully-qualified name of the Compliance's
	// ProcessConsentUpload RPC.
	ComplianceProcessConsentUploadProcedure = "/api.v0alpha.Compliance/ProcessConsentUpload"
	// ComplianceListConsentTopicsProcedure is the fully-qualified name of the Compliance's
	// ListConsentTopics RPC.
	ComplianceListConsentTopicsProcedure = "/api.v0alpha.Compliance/ListConsentTopics"
	// ComplianceGetConsentTopicProcedure is the fully-qualified name of the Compliance's
	// GetConsentTopic RPC.
	ComplianceGetConsentTopicProcedure = "/api.v0alpha.Compliance/GetConsentTopic"
	// ComplianceCreateConsentTopicProcedure is the fully-qualified name of the Compliance's
	// CreateConsentTopic RPC.
	ComplianceCreateConsentTopicProcedure = "/api.v0alpha.Compliance/CreateConsentTopic"
	// ComplianceDeleteConsentTopicProcedure is the fully-qualified name of the Compliance's
	// DeleteConsentTopic RPC.
	ComplianceDeleteConsentTopicProcedure = "/api.v0alpha.Compliance/DeleteConsentTopic"
	// ComplianceUpdateConsentTopicProcedure is the fully-qualified name of the Compliance's
	// UpdateConsentTopic RPC.
	ComplianceUpdateConsentTopicProcedure = "/api.v0alpha.Compliance/UpdateConsentTopic"
	// ComplianceProcessOutboundCallProcedure is the fully-qualified name of the Compliance's
	// ProcessOutboundCall RPC.
	ComplianceProcessOutboundCallProcedure = "/api.v0alpha.Compliance/ProcessOutboundCall"
)

// ComplianceClient is a client for the api.v0alpha.Compliance service.
type ComplianceClient interface {
	RuleAutoComplete(context.Context, *connect_go.Request[v0alpha.RuleAutoCompleteReq]) (*connect_go.Response[v0alpha.RuleAutoCompleteRes], error)
	CheckRuleSet(context.Context, *connect_go.Request[v0alpha.CheckRuleSetReq]) (*connect_go.Response[v0alpha.CheckRuleSetRes], error)
	AssignRuleSet(context.Context, *connect_go.Request[v0alpha.AssignRuleSetReq]) (*connect_go.Response[v0alpha.AssignRuleSetRes], error)
	ListRuleSets(context.Context, *connect_go.Request[v0alpha.ListRuleSetsReq]) (*connect_go.ServerStreamForClient[v0alpha.ListRuleSetsRes], error)
	GetRuleSet(context.Context, *connect_go.Request[v0alpha.GetRuleSetReq]) (*connect_go.Response[v0alpha.RuleSet], error)
	GetRuleSetByName(context.Context, *connect_go.Request[v0alpha.GetRuleSetByNameReq]) (*connect_go.Response[v0alpha.RuleSet], error)
	CreateRuleSet(context.Context, *connect_go.Request[v0alpha.CreateRuleSetReq]) (*connect_go.Response[v0alpha.RuleSet], error)
	RenameRuleSet(context.Context, *connect_go.Request[v0alpha.RenameRuleSetReq]) (*connect_go.Response[v0alpha.RenameRuleSetRes], error)
	EnableRuleSet(context.Context, *connect_go.Request[v0alpha.EnableRuleSetReq]) (*connect_go.Response[v0alpha.EnableRuleSetRes], error)
	DisableRuleSet(context.Context, *connect_go.Request[v0alpha.DisableRuleSetReq]) (*connect_go.Response[v0alpha.DisableRuleSetRes], error)
	CreateScrubList(context.Context, *connect_go.Request[v0alpha.CreateScrubListReq]) (*connect_go.Response[v0alpha.ScrubListRes], error)
	// Add entries to an existing scrub list defined by AddScrubListEntriesReq message.
	// The method will return a ScrubListRes message that will
	// contain the results.
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	AddScrubListEntries(context.Context, *connect_go.Request[v0alpha.AddScrubListEntriesReq]) (*connect_go.Response[v0alpha.ScrubListRes], error)
	// Update scrub list entry defined by UpdateScrubEntryReq message.
	// The method will update a scrub list entry with the specified fields
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	UpdateScrubEntry(context.Context, *connect_go.Request[v0alpha.UpdateScrubEntryReq]) (*connect_go.Response[v0alpha.UpdateScrubEntryRes], error)
	DeleteScrubListEntries(context.Context, *connect_go.Request[v0alpha.DeleteScrubListEntriesReq]) (*connect_go.Response[v0alpha.ScrubListRes], error)
	GetScrubList(context.Context, *connect_go.Request[v0alpha.GetScrubListReq]) (*connect_go.Response[v0alpha.ScrubListRes], error)
	DeleteScrubList(context.Context, *connect_go.Request[v0alpha.DeleteScrubListReq]) (*connect_go.Response[v0alpha.ScrubListRes], error)
	GetDefaultRules(context.Context, *connect_go.Request[v0alpha.GetDefaultRulesReq]) (*connect_go.Response[v0alpha.GetDefaultRulesRes], error)
	GetScrubLists(context.Context, *connect_go.Request[v0alpha.GetScrubListsReq]) (*connect_go.Response[v0alpha.ScrubListsRes], error)
	SearchScrubList(context.Context, *connect_go.Request[v0alpha.SearchScrubListReq]) (*connect_go.Response[v0alpha.ScrubList], error)
	GetScrubListUploadUrl(context.Context, *connect_go.Request[v0alpha.GetScrubListUploadUrlReq]) (*connect_go.Response[v0alpha.GetScrubListUploadUrlRes], error)
	ProcessScrubListUpload(context.Context, *connect_go.Request[v0alpha.ProcessScrubListUploadReq]) (*connect_go.Response[longrunningpb.Operation], error)
	ProcessScrubListDeleteUpload(context.Context, *connect_go.Request[v0alpha.ProcessScrubListDeleteUploadReq]) (*connect_go.Response[longrunningpb.Operation], error)
	ExportScrubList(context.Context, *connect_go.Request[v0alpha.ExportScrubListReq]) (*connect_go.Response[v0alpha.ExportScrubListRes], error)
	// Purge entries from a scrub list defined by PurgeScrubListReq message.
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	PurgeScrubList(context.Context, *connect_go.Request[v0alpha.PurgeScrubListReq]) (*connect_go.Response[v0alpha.PurgeScrubListRes], error)
	// Creates a new Scenario
	CreateScenario(context.Context, *connect_go.Request[v0alpha.CreateScenarioReq]) (*connect_go.Response[v0alpha.CreateScenarioRes], error)
	// Gets one Scenario
	GetScenario(context.Context, *connect_go.Request[v0alpha.GetScenarioReq]) (*connect_go.Response[v0alpha.GetScenarioRes], error)
	// Updates a Scenario
	UpdateScenario(context.Context, *connect_go.Request[v0alpha.UpdateScenarioReq]) (*connect_go.Response[v0alpha.UpdateScenarioRes], error)
	// Deletes a Scenario
	DeleteScenario(context.Context, *connect_go.Request[v0alpha.DeleteScenarioReq]) (*connect_go.Response[v0alpha.DeleteScenarioRes], error)
	// Run scenarios against ruleset
	RunAssignedScenarios(context.Context, *connect_go.Request[v0alpha.RunAssignedScenariosReq]) (*connect_go.Response[v0alpha.RunAssignedScenariosRes], error)
	// Lists all scenarios
	ListAllScenarios(context.Context, *connect_go.Request[v0alpha.ListAllScenariosReq]) (*connect_go.Response[v0alpha.ListAllScenariosRes], error)
	// List currently unassigned scenarios available to be assigned to a given ruleset
	ListUnassignedScenarios(context.Context, *connect_go.Request[v0alpha.ListUnassignedScenariosReq]) (*connect_go.Response[v0alpha.ListUnassignedScenariosRes], error)
	// List rule sets currently assigned to a given scenario
	ListAssignedRuleSets(context.Context, *connect_go.Request[v0alpha.ListAssignedRuleSetsReq]) (*connect_go.Response[v0alpha.ListAssignedRuleSetsRes], error)
	// List scenarios currently assigned to a given ruleset
	ListAssignedScenarios(context.Context, *connect_go.Request[v0alpha.ListAssignedScenariosReq]) (*connect_go.Response[v0alpha.ListAssignedScenariosRes], error)
	// Assign a scenario to a given ruleset
	AssignScenario(context.Context, *connect_go.Request[v0alpha.AssignScenarioReq]) (*connect_go.Response[emptypb.Empty], error)
	// Unassign a scenario from a given ruleset
	UnassignScenario(context.Context, *connect_go.Request[v0alpha.UnassignScenarioReq]) (*connect_go.Response[emptypb.Empty], error)
	// Enable an scenario
	EnableScenario(context.Context, *connect_go.Request[v0alpha.EnableScenarioReq]) (*connect_go.Response[emptypb.Empty], error)
	// Disable an scenario
	DisableScenario(context.Context, *connect_go.Request[v0alpha.DisableScenarioReq]) (*connect_go.Response[emptypb.Empty], error)
	// Frequency data calls
	// This will get all available Meta Fields
	GetFieldNames(context.Context, *connect_go.Request[v0alpha.GetFieldNamesReq]) (*connect_go.Response[v0alpha.FieldNames], error)
	// This will get all possible results (Answered, Answered Machine, Busy, etc.)
	GetResultDescriptions(context.Context, *connect_go.Request[v0alpha.GetResultDescriptionsReq]) (*connect_go.Response[v0alpha.FieldNames], error)
	// Create/Record a consent profile defined by CreateConsentProfileReq
	// message.  The method will return a CreateConsentProfileRes message
	// that will contain the newly created consent_profile_id.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	CreateConsentProfile(context.Context, *connect_go.Request[v0alpha.CreateConsentProfileReq]) (*connect_go.Response[v0alpha.CreateConsentProfileRes], error)
	// Create/Record a consent defined by CreateConsentReq message.
	// The method will return a CreateConsentRes message that will
	// contain the newly created consent_id.
	// Required permissions:
	//
	//	none
	CreateConsent(context.Context, *connect_go.Request[v0alpha.CreateConsentReq]) (*connect_go.Response[v0alpha.CreateConsentRes], error)
	// Gets a consent profile defined by GetConsentProfileReq message
	// for the specified consent_profile_id and org_id.
	// The method will return a ConsentProfile message/entity.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	GetConsentProfile(context.Context, *connect_go.Request[v0alpha.GetConsentProfileReq]) (*connect_go.Response[v0alpha.ConsentProfile], error)
	// Gets a consent defined by GetConsentReq message
	// for the specified consent_id and org_id.
	// The method will return a Consent entity.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	GetConsent(context.Context, *connect_go.Request[v0alpha.GetConsentReq]) (*connect_go.Response[v0alpha.Consent], error)
	// Gets a consent defined by GetConsentByProfileAndContentReq message
	// for the specified consent_profile_id and content.
	// The method will return a GetConsentByProfileAndContentRes message/entity.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	GetConsentByProfileAndContent(context.Context, *connect_go.Request[v0alpha.GetConsentByProfileAndContentReq]) (*connect_go.Response[v0alpha.GetConsentByProfileAndContentRes], error)
	// Gets a consent defined by GetConsentByContentReq message
	// for the specified consent_profile_id and content and channel_type.
	// The method will return a GetConsentByContentRes message/entity.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	GetConsentByContent(context.Context, *connect_go.Request[v0alpha.GetConsentByContentReq]) (*connect_go.Response[v0alpha.GetConsentByContentRes], error)
	// Searches for a consent defined by SearchConsentByContentReq message
	// for the specified content.
	// The method will return a SearchConsentByContentRes message/entity.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	SearchConsentByContent(context.Context, *connect_go.Request[v0alpha.SearchConsentByContentReq]) (*connect_go.Response[v0alpha.SearchConsentByContentRes], error)
	// Update a consent defined by UpdateConsentReq message for
	// the specified consent_id, and will update the following
	// consent fields:
	//
	//	Content
	//	Recorded
	//	Revoked
	//	Expire
	//	ReferringUrl
	//
	// The method will return a google.protobuf.Empty message.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	UpdateConsent(context.Context, *connect_go.Request[v0alpha.UpdateConsentReq]) (*connect_go.Response[emptypb.Empty], error)
	// Expire a consent defined by ExpireConsentReq message.
	// Set the expiration date for the specified consent_id field.
	// The method will return a google.protobuf.Empty message.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	ExpireConsent(context.Context, *connect_go.Request[v0alpha.ExpireConsentReq]) (*connect_go.Response[emptypb.Empty], error)
	// Revoke a consent defined by RevokeConsentReq message.
	// Set the revoked date for the specified consent_id and
	// consent_profile_id fields.
	// The method will return a google.protobuf.Empty message.
	// Required permissions:
	//
	//	none
	RevokeConsent(context.Context, *connect_go.Request[v0alpha.RevokeConsentReq]) (*connect_go.Response[emptypb.Empty], error)
	// Delete a consent defined by DeleteConsentReq message
	// The method will return a google.protobuf.Empty message
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	DeleteConsent(context.Context, *connect_go.Request[v0alpha.DeleteConsentReq]) (*connect_go.Response[emptypb.Empty], error)
	// Process a consent delete list defined by DeleteConsentReq message
	// The method will return a google.protobuf.Empty message
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	ProcessConsentListDeleteUpload(context.Context, *connect_go.Request[v0alpha.ProcessConsentListDeleteUploadReq]) (*connect_go.Response[longrunningpb.Operation], error)
	// Enable a consent profile defined by EnableConsentProfileReq message.
	// Set the disabled field to false for the specified
	// consent_profile_id field.
	// The method will return a google.protobuf.Empty message.
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	EnableConsentProfile(context.Context, *connect_go.Request[v0alpha.EnableConsentProfileReq]) (*connect_go.Response[emptypb.Empty], error)
	// Disable a consent profile defined by DisableConsentProfileReq message.
	// Set the disabled field to true for the specified
	// consent_profile_id field.
	// The method will return a google.protobuf.Empty message.
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	DisableConsentProfile(context.Context, *connect_go.Request[v0alpha.DisableConsentProfileReq]) (*connect_go.Response[emptypb.Empty], error)
	// List consent profiles defined by ListConsentProfilesReq message.
	// Gets all of the unique consent profiles.
	// The method will return a ListConsentProfilesRes message
	// containing consent_profile_id, profile_name, the number of consents
	// belonging to the profile, and disabled.
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	ListConsentProfiles(context.Context, *connect_go.Request[v0alpha.ListConsentProfilesReq]) (*connect_go.Response[v0alpha.ListConsentProfilesRes], error)
	// Get consent upload url defined by GetConsentUploadUrlReq message.
	// The method will return a GetConsentUploadUrlRes messages
	// containing a url with which to upload an import file.
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	GetConsentUploadUrl(context.Context, *connect_go.Request[v0alpha.GetConsentUploadUrlReq]) (*connect_go.Response[v0alpha.GetConsentUploadUrlRes], error)
	// Process consent upload defined by ProcessConsentUploadReq message.
	// The method will process an uploaded consent file.
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	ProcessConsentUpload(context.Context, *connect_go.Request[v0alpha.ProcessConsentUploadReq]) (*connect_go.Response[longrunningpb.Operation], error)
	// List consent topics defined by ListConsentTopicsReq message.
	// Gets all of the unique consent topics.
	// The method will return a ListConsentTopicsRes message
	// containing topic, org_id, and deleted.
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	ListConsentTopics(context.Context, *connect_go.Request[v0alpha.ListConsentTopicsReq]) (*connect_go.Response[v0alpha.ListConsentTopicsRes], error)
	// Gets a consent topic defined by GetConsentTopicReq message
	// for the specified topic and org_id.
	// The method will return a ConsentTopic message/entity.
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	GetConsentTopic(context.Context, *connect_go.Request[v0alpha.GetConsentTopicReq]) (*connect_go.Response[v0alpha.ConsentTopic], error)
	// Create a consent topic defined by ConsentTopic
	// message.  The method will return an Empty message.
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	CreateConsentTopic(context.Context, *connect_go.Request[v0alpha.ConsentTopic]) (*connect_go.Response[v0alpha.Empty], error)
	// Delete a consent topic defined by ConsentTopic message.
	// The method will return an Empty message.
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	DeleteConsentTopic(context.Context, *connect_go.Request[v0alpha.ConsentTopic]) (*connect_go.Response[v0alpha.Empty], error)
	// Update a consent topic defined by UpdateConsentTopicReq message.
	// The method will return an Empty message.
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	UpdateConsentTopic(context.Context, *connect_go.Request[v0alpha.UpdateConsentTopicReq]) (*connect_go.Response[v0alpha.Empty], error)
	// Process and Outbound Phone Number against a rule set.
	// The method will return a response indicating
	// if the call would be permited or not and the list
	// of rules checked against.
	// Required permissions:
	//
	//	AGENT
	ProcessOutboundCall(context.Context, *connect_go.Request[v0alpha.ProcessOutboundCallReq]) (*connect_go.Response[v0alpha.ProcessRes], error)
}

// NewComplianceClient constructs a client for the api.v0alpha.Compliance service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewComplianceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ComplianceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &complianceClient{
		ruleAutoComplete: connect_go.NewClient[v0alpha.RuleAutoCompleteReq, v0alpha.RuleAutoCompleteRes](
			httpClient,
			baseURL+ComplianceRuleAutoCompleteProcedure,
			opts...,
		),
		checkRuleSet: connect_go.NewClient[v0alpha.CheckRuleSetReq, v0alpha.CheckRuleSetRes](
			httpClient,
			baseURL+ComplianceCheckRuleSetProcedure,
			opts...,
		),
		assignRuleSet: connect_go.NewClient[v0alpha.AssignRuleSetReq, v0alpha.AssignRuleSetRes](
			httpClient,
			baseURL+ComplianceAssignRuleSetProcedure,
			opts...,
		),
		listRuleSets: connect_go.NewClient[v0alpha.ListRuleSetsReq, v0alpha.ListRuleSetsRes](
			httpClient,
			baseURL+ComplianceListRuleSetsProcedure,
			opts...,
		),
		getRuleSet: connect_go.NewClient[v0alpha.GetRuleSetReq, v0alpha.RuleSet](
			httpClient,
			baseURL+ComplianceGetRuleSetProcedure,
			opts...,
		),
		getRuleSetByName: connect_go.NewClient[v0alpha.GetRuleSetByNameReq, v0alpha.RuleSet](
			httpClient,
			baseURL+ComplianceGetRuleSetByNameProcedure,
			opts...,
		),
		createRuleSet: connect_go.NewClient[v0alpha.CreateRuleSetReq, v0alpha.RuleSet](
			httpClient,
			baseURL+ComplianceCreateRuleSetProcedure,
			opts...,
		),
		renameRuleSet: connect_go.NewClient[v0alpha.RenameRuleSetReq, v0alpha.RenameRuleSetRes](
			httpClient,
			baseURL+ComplianceRenameRuleSetProcedure,
			opts...,
		),
		enableRuleSet: connect_go.NewClient[v0alpha.EnableRuleSetReq, v0alpha.EnableRuleSetRes](
			httpClient,
			baseURL+ComplianceEnableRuleSetProcedure,
			opts...,
		),
		disableRuleSet: connect_go.NewClient[v0alpha.DisableRuleSetReq, v0alpha.DisableRuleSetRes](
			httpClient,
			baseURL+ComplianceDisableRuleSetProcedure,
			opts...,
		),
		createScrubList: connect_go.NewClient[v0alpha.CreateScrubListReq, v0alpha.ScrubListRes](
			httpClient,
			baseURL+ComplianceCreateScrubListProcedure,
			opts...,
		),
		addScrubListEntries: connect_go.NewClient[v0alpha.AddScrubListEntriesReq, v0alpha.ScrubListRes](
			httpClient,
			baseURL+ComplianceAddScrubListEntriesProcedure,
			opts...,
		),
		updateScrubEntry: connect_go.NewClient[v0alpha.UpdateScrubEntryReq, v0alpha.UpdateScrubEntryRes](
			httpClient,
			baseURL+ComplianceUpdateScrubEntryProcedure,
			opts...,
		),
		deleteScrubListEntries: connect_go.NewClient[v0alpha.DeleteScrubListEntriesReq, v0alpha.ScrubListRes](
			httpClient,
			baseURL+ComplianceDeleteScrubListEntriesProcedure,
			opts...,
		),
		getScrubList: connect_go.NewClient[v0alpha.GetScrubListReq, v0alpha.ScrubListRes](
			httpClient,
			baseURL+ComplianceGetScrubListProcedure,
			opts...,
		),
		deleteScrubList: connect_go.NewClient[v0alpha.DeleteScrubListReq, v0alpha.ScrubListRes](
			httpClient,
			baseURL+ComplianceDeleteScrubListProcedure,
			opts...,
		),
		getDefaultRules: connect_go.NewClient[v0alpha.GetDefaultRulesReq, v0alpha.GetDefaultRulesRes](
			httpClient,
			baseURL+ComplianceGetDefaultRulesProcedure,
			opts...,
		),
		getScrubLists: connect_go.NewClient[v0alpha.GetScrubListsReq, v0alpha.ScrubListsRes](
			httpClient,
			baseURL+ComplianceGetScrubListsProcedure,
			opts...,
		),
		searchScrubList: connect_go.NewClient[v0alpha.SearchScrubListReq, v0alpha.ScrubList](
			httpClient,
			baseURL+ComplianceSearchScrubListProcedure,
			opts...,
		),
		getScrubListUploadUrl: connect_go.NewClient[v0alpha.GetScrubListUploadUrlReq, v0alpha.GetScrubListUploadUrlRes](
			httpClient,
			baseURL+ComplianceGetScrubListUploadUrlProcedure,
			opts...,
		),
		processScrubListUpload: connect_go.NewClient[v0alpha.ProcessScrubListUploadReq, longrunningpb.Operation](
			httpClient,
			baseURL+ComplianceProcessScrubListUploadProcedure,
			opts...,
		),
		processScrubListDeleteUpload: connect_go.NewClient[v0alpha.ProcessScrubListDeleteUploadReq, longrunningpb.Operation](
			httpClient,
			baseURL+ComplianceProcessScrubListDeleteUploadProcedure,
			opts...,
		),
		exportScrubList: connect_go.NewClient[v0alpha.ExportScrubListReq, v0alpha.ExportScrubListRes](
			httpClient,
			baseURL+ComplianceExportScrubListProcedure,
			opts...,
		),
		purgeScrubList: connect_go.NewClient[v0alpha.PurgeScrubListReq, v0alpha.PurgeScrubListRes](
			httpClient,
			baseURL+CompliancePurgeScrubListProcedure,
			opts...,
		),
		createScenario: connect_go.NewClient[v0alpha.CreateScenarioReq, v0alpha.CreateScenarioRes](
			httpClient,
			baseURL+ComplianceCreateScenarioProcedure,
			opts...,
		),
		getScenario: connect_go.NewClient[v0alpha.GetScenarioReq, v0alpha.GetScenarioRes](
			httpClient,
			baseURL+ComplianceGetScenarioProcedure,
			opts...,
		),
		updateScenario: connect_go.NewClient[v0alpha.UpdateScenarioReq, v0alpha.UpdateScenarioRes](
			httpClient,
			baseURL+ComplianceUpdateScenarioProcedure,
			opts...,
		),
		deleteScenario: connect_go.NewClient[v0alpha.DeleteScenarioReq, v0alpha.DeleteScenarioRes](
			httpClient,
			baseURL+ComplianceDeleteScenarioProcedure,
			opts...,
		),
		runAssignedScenarios: connect_go.NewClient[v0alpha.RunAssignedScenariosReq, v0alpha.RunAssignedScenariosRes](
			httpClient,
			baseURL+ComplianceRunAssignedScenariosProcedure,
			opts...,
		),
		listAllScenarios: connect_go.NewClient[v0alpha.ListAllScenariosReq, v0alpha.ListAllScenariosRes](
			httpClient,
			baseURL+ComplianceListAllScenariosProcedure,
			opts...,
		),
		listUnassignedScenarios: connect_go.NewClient[v0alpha.ListUnassignedScenariosReq, v0alpha.ListUnassignedScenariosRes](
			httpClient,
			baseURL+ComplianceListUnassignedScenariosProcedure,
			opts...,
		),
		listAssignedRuleSets: connect_go.NewClient[v0alpha.ListAssignedRuleSetsReq, v0alpha.ListAssignedRuleSetsRes](
			httpClient,
			baseURL+ComplianceListAssignedRuleSetsProcedure,
			opts...,
		),
		listAssignedScenarios: connect_go.NewClient[v0alpha.ListAssignedScenariosReq, v0alpha.ListAssignedScenariosRes](
			httpClient,
			baseURL+ComplianceListAssignedScenariosProcedure,
			opts...,
		),
		assignScenario: connect_go.NewClient[v0alpha.AssignScenarioReq, emptypb.Empty](
			httpClient,
			baseURL+ComplianceAssignScenarioProcedure,
			opts...,
		),
		unassignScenario: connect_go.NewClient[v0alpha.UnassignScenarioReq, emptypb.Empty](
			httpClient,
			baseURL+ComplianceUnassignScenarioProcedure,
			opts...,
		),
		enableScenario: connect_go.NewClient[v0alpha.EnableScenarioReq, emptypb.Empty](
			httpClient,
			baseURL+ComplianceEnableScenarioProcedure,
			opts...,
		),
		disableScenario: connect_go.NewClient[v0alpha.DisableScenarioReq, emptypb.Empty](
			httpClient,
			baseURL+ComplianceDisableScenarioProcedure,
			opts...,
		),
		getFieldNames: connect_go.NewClient[v0alpha.GetFieldNamesReq, v0alpha.FieldNames](
			httpClient,
			baseURL+ComplianceGetFieldNamesProcedure,
			opts...,
		),
		getResultDescriptions: connect_go.NewClient[v0alpha.GetResultDescriptionsReq, v0alpha.FieldNames](
			httpClient,
			baseURL+ComplianceGetResultDescriptionsProcedure,
			opts...,
		),
		createConsentProfile: connect_go.NewClient[v0alpha.CreateConsentProfileReq, v0alpha.CreateConsentProfileRes](
			httpClient,
			baseURL+ComplianceCreateConsentProfileProcedure,
			opts...,
		),
		createConsent: connect_go.NewClient[v0alpha.CreateConsentReq, v0alpha.CreateConsentRes](
			httpClient,
			baseURL+ComplianceCreateConsentProcedure,
			opts...,
		),
		getConsentProfile: connect_go.NewClient[v0alpha.GetConsentProfileReq, v0alpha.ConsentProfile](
			httpClient,
			baseURL+ComplianceGetConsentProfileProcedure,
			opts...,
		),
		getConsent: connect_go.NewClient[v0alpha.GetConsentReq, v0alpha.Consent](
			httpClient,
			baseURL+ComplianceGetConsentProcedure,
			opts...,
		),
		getConsentByProfileAndContent: connect_go.NewClient[v0alpha.GetConsentByProfileAndContentReq, v0alpha.GetConsentByProfileAndContentRes](
			httpClient,
			baseURL+ComplianceGetConsentByProfileAndContentProcedure,
			opts...,
		),
		getConsentByContent: connect_go.NewClient[v0alpha.GetConsentByContentReq, v0alpha.GetConsentByContentRes](
			httpClient,
			baseURL+ComplianceGetConsentByContentProcedure,
			opts...,
		),
		searchConsentByContent: connect_go.NewClient[v0alpha.SearchConsentByContentReq, v0alpha.SearchConsentByContentRes](
			httpClient,
			baseURL+ComplianceSearchConsentByContentProcedure,
			opts...,
		),
		updateConsent: connect_go.NewClient[v0alpha.UpdateConsentReq, emptypb.Empty](
			httpClient,
			baseURL+ComplianceUpdateConsentProcedure,
			opts...,
		),
		expireConsent: connect_go.NewClient[v0alpha.ExpireConsentReq, emptypb.Empty](
			httpClient,
			baseURL+ComplianceExpireConsentProcedure,
			opts...,
		),
		revokeConsent: connect_go.NewClient[v0alpha.RevokeConsentReq, emptypb.Empty](
			httpClient,
			baseURL+ComplianceRevokeConsentProcedure,
			opts...,
		),
		deleteConsent: connect_go.NewClient[v0alpha.DeleteConsentReq, emptypb.Empty](
			httpClient,
			baseURL+ComplianceDeleteConsentProcedure,
			opts...,
		),
		processConsentListDeleteUpload: connect_go.NewClient[v0alpha.ProcessConsentListDeleteUploadReq, longrunningpb.Operation](
			httpClient,
			baseURL+ComplianceProcessConsentListDeleteUploadProcedure,
			opts...,
		),
		enableConsentProfile: connect_go.NewClient[v0alpha.EnableConsentProfileReq, emptypb.Empty](
			httpClient,
			baseURL+ComplianceEnableConsentProfileProcedure,
			opts...,
		),
		disableConsentProfile: connect_go.NewClient[v0alpha.DisableConsentProfileReq, emptypb.Empty](
			httpClient,
			baseURL+ComplianceDisableConsentProfileProcedure,
			opts...,
		),
		listConsentProfiles: connect_go.NewClient[v0alpha.ListConsentProfilesReq, v0alpha.ListConsentProfilesRes](
			httpClient,
			baseURL+ComplianceListConsentProfilesProcedure,
			opts...,
		),
		getConsentUploadUrl: connect_go.NewClient[v0alpha.GetConsentUploadUrlReq, v0alpha.GetConsentUploadUrlRes](
			httpClient,
			baseURL+ComplianceGetConsentUploadUrlProcedure,
			opts...,
		),
		processConsentUpload: connect_go.NewClient[v0alpha.ProcessConsentUploadReq, longrunningpb.Operation](
			httpClient,
			baseURL+ComplianceProcessConsentUploadProcedure,
			opts...,
		),
		listConsentTopics: connect_go.NewClient[v0alpha.ListConsentTopicsReq, v0alpha.ListConsentTopicsRes](
			httpClient,
			baseURL+ComplianceListConsentTopicsProcedure,
			opts...,
		),
		getConsentTopic: connect_go.NewClient[v0alpha.GetConsentTopicReq, v0alpha.ConsentTopic](
			httpClient,
			baseURL+ComplianceGetConsentTopicProcedure,
			opts...,
		),
		createConsentTopic: connect_go.NewClient[v0alpha.ConsentTopic, v0alpha.Empty](
			httpClient,
			baseURL+ComplianceCreateConsentTopicProcedure,
			opts...,
		),
		deleteConsentTopic: connect_go.NewClient[v0alpha.ConsentTopic, v0alpha.Empty](
			httpClient,
			baseURL+ComplianceDeleteConsentTopicProcedure,
			opts...,
		),
		updateConsentTopic: connect_go.NewClient[v0alpha.UpdateConsentTopicReq, v0alpha.Empty](
			httpClient,
			baseURL+ComplianceUpdateConsentTopicProcedure,
			opts...,
		),
		processOutboundCall: connect_go.NewClient[v0alpha.ProcessOutboundCallReq, v0alpha.ProcessRes](
			httpClient,
			baseURL+ComplianceProcessOutboundCallProcedure,
			opts...,
		),
	}
}

// complianceClient implements ComplianceClient.
type complianceClient struct {
	ruleAutoComplete               *connect_go.Client[v0alpha.RuleAutoCompleteReq, v0alpha.RuleAutoCompleteRes]
	checkRuleSet                   *connect_go.Client[v0alpha.CheckRuleSetReq, v0alpha.CheckRuleSetRes]
	assignRuleSet                  *connect_go.Client[v0alpha.AssignRuleSetReq, v0alpha.AssignRuleSetRes]
	listRuleSets                   *connect_go.Client[v0alpha.ListRuleSetsReq, v0alpha.ListRuleSetsRes]
	getRuleSet                     *connect_go.Client[v0alpha.GetRuleSetReq, v0alpha.RuleSet]
	getRuleSetByName               *connect_go.Client[v0alpha.GetRuleSetByNameReq, v0alpha.RuleSet]
	createRuleSet                  *connect_go.Client[v0alpha.CreateRuleSetReq, v0alpha.RuleSet]
	renameRuleSet                  *connect_go.Client[v0alpha.RenameRuleSetReq, v0alpha.RenameRuleSetRes]
	enableRuleSet                  *connect_go.Client[v0alpha.EnableRuleSetReq, v0alpha.EnableRuleSetRes]
	disableRuleSet                 *connect_go.Client[v0alpha.DisableRuleSetReq, v0alpha.DisableRuleSetRes]
	createScrubList                *connect_go.Client[v0alpha.CreateScrubListReq, v0alpha.ScrubListRes]
	addScrubListEntries            *connect_go.Client[v0alpha.AddScrubListEntriesReq, v0alpha.ScrubListRes]
	updateScrubEntry               *connect_go.Client[v0alpha.UpdateScrubEntryReq, v0alpha.UpdateScrubEntryRes]
	deleteScrubListEntries         *connect_go.Client[v0alpha.DeleteScrubListEntriesReq, v0alpha.ScrubListRes]
	getScrubList                   *connect_go.Client[v0alpha.GetScrubListReq, v0alpha.ScrubListRes]
	deleteScrubList                *connect_go.Client[v0alpha.DeleteScrubListReq, v0alpha.ScrubListRes]
	getDefaultRules                *connect_go.Client[v0alpha.GetDefaultRulesReq, v0alpha.GetDefaultRulesRes]
	getScrubLists                  *connect_go.Client[v0alpha.GetScrubListsReq, v0alpha.ScrubListsRes]
	searchScrubList                *connect_go.Client[v0alpha.SearchScrubListReq, v0alpha.ScrubList]
	getScrubListUploadUrl          *connect_go.Client[v0alpha.GetScrubListUploadUrlReq, v0alpha.GetScrubListUploadUrlRes]
	processScrubListUpload         *connect_go.Client[v0alpha.ProcessScrubListUploadReq, longrunningpb.Operation]
	processScrubListDeleteUpload   *connect_go.Client[v0alpha.ProcessScrubListDeleteUploadReq, longrunningpb.Operation]
	exportScrubList                *connect_go.Client[v0alpha.ExportScrubListReq, v0alpha.ExportScrubListRes]
	purgeScrubList                 *connect_go.Client[v0alpha.PurgeScrubListReq, v0alpha.PurgeScrubListRes]
	createScenario                 *connect_go.Client[v0alpha.CreateScenarioReq, v0alpha.CreateScenarioRes]
	getScenario                    *connect_go.Client[v0alpha.GetScenarioReq, v0alpha.GetScenarioRes]
	updateScenario                 *connect_go.Client[v0alpha.UpdateScenarioReq, v0alpha.UpdateScenarioRes]
	deleteScenario                 *connect_go.Client[v0alpha.DeleteScenarioReq, v0alpha.DeleteScenarioRes]
	runAssignedScenarios           *connect_go.Client[v0alpha.RunAssignedScenariosReq, v0alpha.RunAssignedScenariosRes]
	listAllScenarios               *connect_go.Client[v0alpha.ListAllScenariosReq, v0alpha.ListAllScenariosRes]
	listUnassignedScenarios        *connect_go.Client[v0alpha.ListUnassignedScenariosReq, v0alpha.ListUnassignedScenariosRes]
	listAssignedRuleSets           *connect_go.Client[v0alpha.ListAssignedRuleSetsReq, v0alpha.ListAssignedRuleSetsRes]
	listAssignedScenarios          *connect_go.Client[v0alpha.ListAssignedScenariosReq, v0alpha.ListAssignedScenariosRes]
	assignScenario                 *connect_go.Client[v0alpha.AssignScenarioReq, emptypb.Empty]
	unassignScenario               *connect_go.Client[v0alpha.UnassignScenarioReq, emptypb.Empty]
	enableScenario                 *connect_go.Client[v0alpha.EnableScenarioReq, emptypb.Empty]
	disableScenario                *connect_go.Client[v0alpha.DisableScenarioReq, emptypb.Empty]
	getFieldNames                  *connect_go.Client[v0alpha.GetFieldNamesReq, v0alpha.FieldNames]
	getResultDescriptions          *connect_go.Client[v0alpha.GetResultDescriptionsReq, v0alpha.FieldNames]
	createConsentProfile           *connect_go.Client[v0alpha.CreateConsentProfileReq, v0alpha.CreateConsentProfileRes]
	createConsent                  *connect_go.Client[v0alpha.CreateConsentReq, v0alpha.CreateConsentRes]
	getConsentProfile              *connect_go.Client[v0alpha.GetConsentProfileReq, v0alpha.ConsentProfile]
	getConsent                     *connect_go.Client[v0alpha.GetConsentReq, v0alpha.Consent]
	getConsentByProfileAndContent  *connect_go.Client[v0alpha.GetConsentByProfileAndContentReq, v0alpha.GetConsentByProfileAndContentRes]
	getConsentByContent            *connect_go.Client[v0alpha.GetConsentByContentReq, v0alpha.GetConsentByContentRes]
	searchConsentByContent         *connect_go.Client[v0alpha.SearchConsentByContentReq, v0alpha.SearchConsentByContentRes]
	updateConsent                  *connect_go.Client[v0alpha.UpdateConsentReq, emptypb.Empty]
	expireConsent                  *connect_go.Client[v0alpha.ExpireConsentReq, emptypb.Empty]
	revokeConsent                  *connect_go.Client[v0alpha.RevokeConsentReq, emptypb.Empty]
	deleteConsent                  *connect_go.Client[v0alpha.DeleteConsentReq, emptypb.Empty]
	processConsentListDeleteUpload *connect_go.Client[v0alpha.ProcessConsentListDeleteUploadReq, longrunningpb.Operation]
	enableConsentProfile           *connect_go.Client[v0alpha.EnableConsentProfileReq, emptypb.Empty]
	disableConsentProfile          *connect_go.Client[v0alpha.DisableConsentProfileReq, emptypb.Empty]
	listConsentProfiles            *connect_go.Client[v0alpha.ListConsentProfilesReq, v0alpha.ListConsentProfilesRes]
	getConsentUploadUrl            *connect_go.Client[v0alpha.GetConsentUploadUrlReq, v0alpha.GetConsentUploadUrlRes]
	processConsentUpload           *connect_go.Client[v0alpha.ProcessConsentUploadReq, longrunningpb.Operation]
	listConsentTopics              *connect_go.Client[v0alpha.ListConsentTopicsReq, v0alpha.ListConsentTopicsRes]
	getConsentTopic                *connect_go.Client[v0alpha.GetConsentTopicReq, v0alpha.ConsentTopic]
	createConsentTopic             *connect_go.Client[v0alpha.ConsentTopic, v0alpha.Empty]
	deleteConsentTopic             *connect_go.Client[v0alpha.ConsentTopic, v0alpha.Empty]
	updateConsentTopic             *connect_go.Client[v0alpha.UpdateConsentTopicReq, v0alpha.Empty]
	processOutboundCall            *connect_go.Client[v0alpha.ProcessOutboundCallReq, v0alpha.ProcessRes]
}

// RuleAutoComplete calls api.v0alpha.Compliance.RuleAutoComplete.
func (c *complianceClient) RuleAutoComplete(ctx context.Context, req *connect_go.Request[v0alpha.RuleAutoCompleteReq]) (*connect_go.Response[v0alpha.RuleAutoCompleteRes], error) {
	return c.ruleAutoComplete.CallUnary(ctx, req)
}

// CheckRuleSet calls api.v0alpha.Compliance.CheckRuleSet.
func (c *complianceClient) CheckRuleSet(ctx context.Context, req *connect_go.Request[v0alpha.CheckRuleSetReq]) (*connect_go.Response[v0alpha.CheckRuleSetRes], error) {
	return c.checkRuleSet.CallUnary(ctx, req)
}

// AssignRuleSet calls api.v0alpha.Compliance.AssignRuleSet.
func (c *complianceClient) AssignRuleSet(ctx context.Context, req *connect_go.Request[v0alpha.AssignRuleSetReq]) (*connect_go.Response[v0alpha.AssignRuleSetRes], error) {
	return c.assignRuleSet.CallUnary(ctx, req)
}

// ListRuleSets calls api.v0alpha.Compliance.ListRuleSets.
func (c *complianceClient) ListRuleSets(ctx context.Context, req *connect_go.Request[v0alpha.ListRuleSetsReq]) (*connect_go.ServerStreamForClient[v0alpha.ListRuleSetsRes], error) {
	return c.listRuleSets.CallServerStream(ctx, req)
}

// GetRuleSet calls api.v0alpha.Compliance.GetRuleSet.
func (c *complianceClient) GetRuleSet(ctx context.Context, req *connect_go.Request[v0alpha.GetRuleSetReq]) (*connect_go.Response[v0alpha.RuleSet], error) {
	return c.getRuleSet.CallUnary(ctx, req)
}

// GetRuleSetByName calls api.v0alpha.Compliance.GetRuleSetByName.
func (c *complianceClient) GetRuleSetByName(ctx context.Context, req *connect_go.Request[v0alpha.GetRuleSetByNameReq]) (*connect_go.Response[v0alpha.RuleSet], error) {
	return c.getRuleSetByName.CallUnary(ctx, req)
}

// CreateRuleSet calls api.v0alpha.Compliance.CreateRuleSet.
func (c *complianceClient) CreateRuleSet(ctx context.Context, req *connect_go.Request[v0alpha.CreateRuleSetReq]) (*connect_go.Response[v0alpha.RuleSet], error) {
	return c.createRuleSet.CallUnary(ctx, req)
}

// RenameRuleSet calls api.v0alpha.Compliance.RenameRuleSet.
func (c *complianceClient) RenameRuleSet(ctx context.Context, req *connect_go.Request[v0alpha.RenameRuleSetReq]) (*connect_go.Response[v0alpha.RenameRuleSetRes], error) {
	return c.renameRuleSet.CallUnary(ctx, req)
}

// EnableRuleSet calls api.v0alpha.Compliance.EnableRuleSet.
func (c *complianceClient) EnableRuleSet(ctx context.Context, req *connect_go.Request[v0alpha.EnableRuleSetReq]) (*connect_go.Response[v0alpha.EnableRuleSetRes], error) {
	return c.enableRuleSet.CallUnary(ctx, req)
}

// DisableRuleSet calls api.v0alpha.Compliance.DisableRuleSet.
func (c *complianceClient) DisableRuleSet(ctx context.Context, req *connect_go.Request[v0alpha.DisableRuleSetReq]) (*connect_go.Response[v0alpha.DisableRuleSetRes], error) {
	return c.disableRuleSet.CallUnary(ctx, req)
}

// CreateScrubList calls api.v0alpha.Compliance.CreateScrubList.
func (c *complianceClient) CreateScrubList(ctx context.Context, req *connect_go.Request[v0alpha.CreateScrubListReq]) (*connect_go.Response[v0alpha.ScrubListRes], error) {
	return c.createScrubList.CallUnary(ctx, req)
}

// AddScrubListEntries calls api.v0alpha.Compliance.AddScrubListEntries.
func (c *complianceClient) AddScrubListEntries(ctx context.Context, req *connect_go.Request[v0alpha.AddScrubListEntriesReq]) (*connect_go.Response[v0alpha.ScrubListRes], error) {
	return c.addScrubListEntries.CallUnary(ctx, req)
}

// UpdateScrubEntry calls api.v0alpha.Compliance.UpdateScrubEntry.
func (c *complianceClient) UpdateScrubEntry(ctx context.Context, req *connect_go.Request[v0alpha.UpdateScrubEntryReq]) (*connect_go.Response[v0alpha.UpdateScrubEntryRes], error) {
	return c.updateScrubEntry.CallUnary(ctx, req)
}

// DeleteScrubListEntries calls api.v0alpha.Compliance.DeleteScrubListEntries.
func (c *complianceClient) DeleteScrubListEntries(ctx context.Context, req *connect_go.Request[v0alpha.DeleteScrubListEntriesReq]) (*connect_go.Response[v0alpha.ScrubListRes], error) {
	return c.deleteScrubListEntries.CallUnary(ctx, req)
}

// GetScrubList calls api.v0alpha.Compliance.GetScrubList.
func (c *complianceClient) GetScrubList(ctx context.Context, req *connect_go.Request[v0alpha.GetScrubListReq]) (*connect_go.Response[v0alpha.ScrubListRes], error) {
	return c.getScrubList.CallUnary(ctx, req)
}

// DeleteScrubList calls api.v0alpha.Compliance.DeleteScrubList.
func (c *complianceClient) DeleteScrubList(ctx context.Context, req *connect_go.Request[v0alpha.DeleteScrubListReq]) (*connect_go.Response[v0alpha.ScrubListRes], error) {
	return c.deleteScrubList.CallUnary(ctx, req)
}

// GetDefaultRules calls api.v0alpha.Compliance.GetDefaultRules.
func (c *complianceClient) GetDefaultRules(ctx context.Context, req *connect_go.Request[v0alpha.GetDefaultRulesReq]) (*connect_go.Response[v0alpha.GetDefaultRulesRes], error) {
	return c.getDefaultRules.CallUnary(ctx, req)
}

// GetScrubLists calls api.v0alpha.Compliance.GetScrubLists.
func (c *complianceClient) GetScrubLists(ctx context.Context, req *connect_go.Request[v0alpha.GetScrubListsReq]) (*connect_go.Response[v0alpha.ScrubListsRes], error) {
	return c.getScrubLists.CallUnary(ctx, req)
}

// SearchScrubList calls api.v0alpha.Compliance.SearchScrubList.
func (c *complianceClient) SearchScrubList(ctx context.Context, req *connect_go.Request[v0alpha.SearchScrubListReq]) (*connect_go.Response[v0alpha.ScrubList], error) {
	return c.searchScrubList.CallUnary(ctx, req)
}

// GetScrubListUploadUrl calls api.v0alpha.Compliance.GetScrubListUploadUrl.
func (c *complianceClient) GetScrubListUploadUrl(ctx context.Context, req *connect_go.Request[v0alpha.GetScrubListUploadUrlReq]) (*connect_go.Response[v0alpha.GetScrubListUploadUrlRes], error) {
	return c.getScrubListUploadUrl.CallUnary(ctx, req)
}

// ProcessScrubListUpload calls api.v0alpha.Compliance.ProcessScrubListUpload.
func (c *complianceClient) ProcessScrubListUpload(ctx context.Context, req *connect_go.Request[v0alpha.ProcessScrubListUploadReq]) (*connect_go.Response[longrunningpb.Operation], error) {
	return c.processScrubListUpload.CallUnary(ctx, req)
}

// ProcessScrubListDeleteUpload calls api.v0alpha.Compliance.ProcessScrubListDeleteUpload.
func (c *complianceClient) ProcessScrubListDeleteUpload(ctx context.Context, req *connect_go.Request[v0alpha.ProcessScrubListDeleteUploadReq]) (*connect_go.Response[longrunningpb.Operation], error) {
	return c.processScrubListDeleteUpload.CallUnary(ctx, req)
}

// ExportScrubList calls api.v0alpha.Compliance.ExportScrubList.
func (c *complianceClient) ExportScrubList(ctx context.Context, req *connect_go.Request[v0alpha.ExportScrubListReq]) (*connect_go.Response[v0alpha.ExportScrubListRes], error) {
	return c.exportScrubList.CallUnary(ctx, req)
}

// PurgeScrubList calls api.v0alpha.Compliance.PurgeScrubList.
func (c *complianceClient) PurgeScrubList(ctx context.Context, req *connect_go.Request[v0alpha.PurgeScrubListReq]) (*connect_go.Response[v0alpha.PurgeScrubListRes], error) {
	return c.purgeScrubList.CallUnary(ctx, req)
}

// CreateScenario calls api.v0alpha.Compliance.CreateScenario.
func (c *complianceClient) CreateScenario(ctx context.Context, req *connect_go.Request[v0alpha.CreateScenarioReq]) (*connect_go.Response[v0alpha.CreateScenarioRes], error) {
	return c.createScenario.CallUnary(ctx, req)
}

// GetScenario calls api.v0alpha.Compliance.GetScenario.
func (c *complianceClient) GetScenario(ctx context.Context, req *connect_go.Request[v0alpha.GetScenarioReq]) (*connect_go.Response[v0alpha.GetScenarioRes], error) {
	return c.getScenario.CallUnary(ctx, req)
}

// UpdateScenario calls api.v0alpha.Compliance.UpdateScenario.
func (c *complianceClient) UpdateScenario(ctx context.Context, req *connect_go.Request[v0alpha.UpdateScenarioReq]) (*connect_go.Response[v0alpha.UpdateScenarioRes], error) {
	return c.updateScenario.CallUnary(ctx, req)
}

// DeleteScenario calls api.v0alpha.Compliance.DeleteScenario.
func (c *complianceClient) DeleteScenario(ctx context.Context, req *connect_go.Request[v0alpha.DeleteScenarioReq]) (*connect_go.Response[v0alpha.DeleteScenarioRes], error) {
	return c.deleteScenario.CallUnary(ctx, req)
}

// RunAssignedScenarios calls api.v0alpha.Compliance.RunAssignedScenarios.
func (c *complianceClient) RunAssignedScenarios(ctx context.Context, req *connect_go.Request[v0alpha.RunAssignedScenariosReq]) (*connect_go.Response[v0alpha.RunAssignedScenariosRes], error) {
	return c.runAssignedScenarios.CallUnary(ctx, req)
}

// ListAllScenarios calls api.v0alpha.Compliance.ListAllScenarios.
func (c *complianceClient) ListAllScenarios(ctx context.Context, req *connect_go.Request[v0alpha.ListAllScenariosReq]) (*connect_go.Response[v0alpha.ListAllScenariosRes], error) {
	return c.listAllScenarios.CallUnary(ctx, req)
}

// ListUnassignedScenarios calls api.v0alpha.Compliance.ListUnassignedScenarios.
func (c *complianceClient) ListUnassignedScenarios(ctx context.Context, req *connect_go.Request[v0alpha.ListUnassignedScenariosReq]) (*connect_go.Response[v0alpha.ListUnassignedScenariosRes], error) {
	return c.listUnassignedScenarios.CallUnary(ctx, req)
}

// ListAssignedRuleSets calls api.v0alpha.Compliance.ListAssignedRuleSets.
func (c *complianceClient) ListAssignedRuleSets(ctx context.Context, req *connect_go.Request[v0alpha.ListAssignedRuleSetsReq]) (*connect_go.Response[v0alpha.ListAssignedRuleSetsRes], error) {
	return c.listAssignedRuleSets.CallUnary(ctx, req)
}

// ListAssignedScenarios calls api.v0alpha.Compliance.ListAssignedScenarios.
func (c *complianceClient) ListAssignedScenarios(ctx context.Context, req *connect_go.Request[v0alpha.ListAssignedScenariosReq]) (*connect_go.Response[v0alpha.ListAssignedScenariosRes], error) {
	return c.listAssignedScenarios.CallUnary(ctx, req)
}

// AssignScenario calls api.v0alpha.Compliance.AssignScenario.
func (c *complianceClient) AssignScenario(ctx context.Context, req *connect_go.Request[v0alpha.AssignScenarioReq]) (*connect_go.Response[emptypb.Empty], error) {
	return c.assignScenario.CallUnary(ctx, req)
}

// UnassignScenario calls api.v0alpha.Compliance.UnassignScenario.
func (c *complianceClient) UnassignScenario(ctx context.Context, req *connect_go.Request[v0alpha.UnassignScenarioReq]) (*connect_go.Response[emptypb.Empty], error) {
	return c.unassignScenario.CallUnary(ctx, req)
}

// EnableScenario calls api.v0alpha.Compliance.EnableScenario.
func (c *complianceClient) EnableScenario(ctx context.Context, req *connect_go.Request[v0alpha.EnableScenarioReq]) (*connect_go.Response[emptypb.Empty], error) {
	return c.enableScenario.CallUnary(ctx, req)
}

// DisableScenario calls api.v0alpha.Compliance.DisableScenario.
func (c *complianceClient) DisableScenario(ctx context.Context, req *connect_go.Request[v0alpha.DisableScenarioReq]) (*connect_go.Response[emptypb.Empty], error) {
	return c.disableScenario.CallUnary(ctx, req)
}

// GetFieldNames calls api.v0alpha.Compliance.GetFieldNames.
func (c *complianceClient) GetFieldNames(ctx context.Context, req *connect_go.Request[v0alpha.GetFieldNamesReq]) (*connect_go.Response[v0alpha.FieldNames], error) {
	return c.getFieldNames.CallUnary(ctx, req)
}

// GetResultDescriptions calls api.v0alpha.Compliance.GetResultDescriptions.
func (c *complianceClient) GetResultDescriptions(ctx context.Context, req *connect_go.Request[v0alpha.GetResultDescriptionsReq]) (*connect_go.Response[v0alpha.FieldNames], error) {
	return c.getResultDescriptions.CallUnary(ctx, req)
}

// CreateConsentProfile calls api.v0alpha.Compliance.CreateConsentProfile.
func (c *complianceClient) CreateConsentProfile(ctx context.Context, req *connect_go.Request[v0alpha.CreateConsentProfileReq]) (*connect_go.Response[v0alpha.CreateConsentProfileRes], error) {
	return c.createConsentProfile.CallUnary(ctx, req)
}

// CreateConsent calls api.v0alpha.Compliance.CreateConsent.
func (c *complianceClient) CreateConsent(ctx context.Context, req *connect_go.Request[v0alpha.CreateConsentReq]) (*connect_go.Response[v0alpha.CreateConsentRes], error) {
	return c.createConsent.CallUnary(ctx, req)
}

// GetConsentProfile calls api.v0alpha.Compliance.GetConsentProfile.
func (c *complianceClient) GetConsentProfile(ctx context.Context, req *connect_go.Request[v0alpha.GetConsentProfileReq]) (*connect_go.Response[v0alpha.ConsentProfile], error) {
	return c.getConsentProfile.CallUnary(ctx, req)
}

// GetConsent calls api.v0alpha.Compliance.GetConsent.
func (c *complianceClient) GetConsent(ctx context.Context, req *connect_go.Request[v0alpha.GetConsentReq]) (*connect_go.Response[v0alpha.Consent], error) {
	return c.getConsent.CallUnary(ctx, req)
}

// GetConsentByProfileAndContent calls api.v0alpha.Compliance.GetConsentByProfileAndContent.
func (c *complianceClient) GetConsentByProfileAndContent(ctx context.Context, req *connect_go.Request[v0alpha.GetConsentByProfileAndContentReq]) (*connect_go.Response[v0alpha.GetConsentByProfileAndContentRes], error) {
	return c.getConsentByProfileAndContent.CallUnary(ctx, req)
}

// GetConsentByContent calls api.v0alpha.Compliance.GetConsentByContent.
func (c *complianceClient) GetConsentByContent(ctx context.Context, req *connect_go.Request[v0alpha.GetConsentByContentReq]) (*connect_go.Response[v0alpha.GetConsentByContentRes], error) {
	return c.getConsentByContent.CallUnary(ctx, req)
}

// SearchConsentByContent calls api.v0alpha.Compliance.SearchConsentByContent.
func (c *complianceClient) SearchConsentByContent(ctx context.Context, req *connect_go.Request[v0alpha.SearchConsentByContentReq]) (*connect_go.Response[v0alpha.SearchConsentByContentRes], error) {
	return c.searchConsentByContent.CallUnary(ctx, req)
}

// UpdateConsent calls api.v0alpha.Compliance.UpdateConsent.
func (c *complianceClient) UpdateConsent(ctx context.Context, req *connect_go.Request[v0alpha.UpdateConsentReq]) (*connect_go.Response[emptypb.Empty], error) {
	return c.updateConsent.CallUnary(ctx, req)
}

// ExpireConsent calls api.v0alpha.Compliance.ExpireConsent.
func (c *complianceClient) ExpireConsent(ctx context.Context, req *connect_go.Request[v0alpha.ExpireConsentReq]) (*connect_go.Response[emptypb.Empty], error) {
	return c.expireConsent.CallUnary(ctx, req)
}

// RevokeConsent calls api.v0alpha.Compliance.RevokeConsent.
func (c *complianceClient) RevokeConsent(ctx context.Context, req *connect_go.Request[v0alpha.RevokeConsentReq]) (*connect_go.Response[emptypb.Empty], error) {
	return c.revokeConsent.CallUnary(ctx, req)
}

// DeleteConsent calls api.v0alpha.Compliance.DeleteConsent.
func (c *complianceClient) DeleteConsent(ctx context.Context, req *connect_go.Request[v0alpha.DeleteConsentReq]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteConsent.CallUnary(ctx, req)
}

// ProcessConsentListDeleteUpload calls api.v0alpha.Compliance.ProcessConsentListDeleteUpload.
func (c *complianceClient) ProcessConsentListDeleteUpload(ctx context.Context, req *connect_go.Request[v0alpha.ProcessConsentListDeleteUploadReq]) (*connect_go.Response[longrunningpb.Operation], error) {
	return c.processConsentListDeleteUpload.CallUnary(ctx, req)
}

// EnableConsentProfile calls api.v0alpha.Compliance.EnableConsentProfile.
func (c *complianceClient) EnableConsentProfile(ctx context.Context, req *connect_go.Request[v0alpha.EnableConsentProfileReq]) (*connect_go.Response[emptypb.Empty], error) {
	return c.enableConsentProfile.CallUnary(ctx, req)
}

// DisableConsentProfile calls api.v0alpha.Compliance.DisableConsentProfile.
func (c *complianceClient) DisableConsentProfile(ctx context.Context, req *connect_go.Request[v0alpha.DisableConsentProfileReq]) (*connect_go.Response[emptypb.Empty], error) {
	return c.disableConsentProfile.CallUnary(ctx, req)
}

// ListConsentProfiles calls api.v0alpha.Compliance.ListConsentProfiles.
func (c *complianceClient) ListConsentProfiles(ctx context.Context, req *connect_go.Request[v0alpha.ListConsentProfilesReq]) (*connect_go.Response[v0alpha.ListConsentProfilesRes], error) {
	return c.listConsentProfiles.CallUnary(ctx, req)
}

// GetConsentUploadUrl calls api.v0alpha.Compliance.GetConsentUploadUrl.
func (c *complianceClient) GetConsentUploadUrl(ctx context.Context, req *connect_go.Request[v0alpha.GetConsentUploadUrlReq]) (*connect_go.Response[v0alpha.GetConsentUploadUrlRes], error) {
	return c.getConsentUploadUrl.CallUnary(ctx, req)
}

// ProcessConsentUpload calls api.v0alpha.Compliance.ProcessConsentUpload.
func (c *complianceClient) ProcessConsentUpload(ctx context.Context, req *connect_go.Request[v0alpha.ProcessConsentUploadReq]) (*connect_go.Response[longrunningpb.Operation], error) {
	return c.processConsentUpload.CallUnary(ctx, req)
}

// ListConsentTopics calls api.v0alpha.Compliance.ListConsentTopics.
func (c *complianceClient) ListConsentTopics(ctx context.Context, req *connect_go.Request[v0alpha.ListConsentTopicsReq]) (*connect_go.Response[v0alpha.ListConsentTopicsRes], error) {
	return c.listConsentTopics.CallUnary(ctx, req)
}

// GetConsentTopic calls api.v0alpha.Compliance.GetConsentTopic.
func (c *complianceClient) GetConsentTopic(ctx context.Context, req *connect_go.Request[v0alpha.GetConsentTopicReq]) (*connect_go.Response[v0alpha.ConsentTopic], error) {
	return c.getConsentTopic.CallUnary(ctx, req)
}

// CreateConsentTopic calls api.v0alpha.Compliance.CreateConsentTopic.
func (c *complianceClient) CreateConsentTopic(ctx context.Context, req *connect_go.Request[v0alpha.ConsentTopic]) (*connect_go.Response[v0alpha.Empty], error) {
	return c.createConsentTopic.CallUnary(ctx, req)
}

// DeleteConsentTopic calls api.v0alpha.Compliance.DeleteConsentTopic.
func (c *complianceClient) DeleteConsentTopic(ctx context.Context, req *connect_go.Request[v0alpha.ConsentTopic]) (*connect_go.Response[v0alpha.Empty], error) {
	return c.deleteConsentTopic.CallUnary(ctx, req)
}

// UpdateConsentTopic calls api.v0alpha.Compliance.UpdateConsentTopic.
func (c *complianceClient) UpdateConsentTopic(ctx context.Context, req *connect_go.Request[v0alpha.UpdateConsentTopicReq]) (*connect_go.Response[v0alpha.Empty], error) {
	return c.updateConsentTopic.CallUnary(ctx, req)
}

// ProcessOutboundCall calls api.v0alpha.Compliance.ProcessOutboundCall.
func (c *complianceClient) ProcessOutboundCall(ctx context.Context, req *connect_go.Request[v0alpha.ProcessOutboundCallReq]) (*connect_go.Response[v0alpha.ProcessRes], error) {
	return c.processOutboundCall.CallUnary(ctx, req)
}

// ComplianceHandler is an implementation of the api.v0alpha.Compliance service.
type ComplianceHandler interface {
	RuleAutoComplete(context.Context, *connect_go.Request[v0alpha.RuleAutoCompleteReq]) (*connect_go.Response[v0alpha.RuleAutoCompleteRes], error)
	CheckRuleSet(context.Context, *connect_go.Request[v0alpha.CheckRuleSetReq]) (*connect_go.Response[v0alpha.CheckRuleSetRes], error)
	AssignRuleSet(context.Context, *connect_go.Request[v0alpha.AssignRuleSetReq]) (*connect_go.Response[v0alpha.AssignRuleSetRes], error)
	ListRuleSets(context.Context, *connect_go.Request[v0alpha.ListRuleSetsReq], *connect_go.ServerStream[v0alpha.ListRuleSetsRes]) error
	GetRuleSet(context.Context, *connect_go.Request[v0alpha.GetRuleSetReq]) (*connect_go.Response[v0alpha.RuleSet], error)
	GetRuleSetByName(context.Context, *connect_go.Request[v0alpha.GetRuleSetByNameReq]) (*connect_go.Response[v0alpha.RuleSet], error)
	CreateRuleSet(context.Context, *connect_go.Request[v0alpha.CreateRuleSetReq]) (*connect_go.Response[v0alpha.RuleSet], error)
	RenameRuleSet(context.Context, *connect_go.Request[v0alpha.RenameRuleSetReq]) (*connect_go.Response[v0alpha.RenameRuleSetRes], error)
	EnableRuleSet(context.Context, *connect_go.Request[v0alpha.EnableRuleSetReq]) (*connect_go.Response[v0alpha.EnableRuleSetRes], error)
	DisableRuleSet(context.Context, *connect_go.Request[v0alpha.DisableRuleSetReq]) (*connect_go.Response[v0alpha.DisableRuleSetRes], error)
	CreateScrubList(context.Context, *connect_go.Request[v0alpha.CreateScrubListReq]) (*connect_go.Response[v0alpha.ScrubListRes], error)
	// Add entries to an existing scrub list defined by AddScrubListEntriesReq message.
	// The method will return a ScrubListRes message that will
	// contain the results.
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	AddScrubListEntries(context.Context, *connect_go.Request[v0alpha.AddScrubListEntriesReq]) (*connect_go.Response[v0alpha.ScrubListRes], error)
	// Update scrub list entry defined by UpdateScrubEntryReq message.
	// The method will update a scrub list entry with the specified fields
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	UpdateScrubEntry(context.Context, *connect_go.Request[v0alpha.UpdateScrubEntryReq]) (*connect_go.Response[v0alpha.UpdateScrubEntryRes], error)
	DeleteScrubListEntries(context.Context, *connect_go.Request[v0alpha.DeleteScrubListEntriesReq]) (*connect_go.Response[v0alpha.ScrubListRes], error)
	GetScrubList(context.Context, *connect_go.Request[v0alpha.GetScrubListReq]) (*connect_go.Response[v0alpha.ScrubListRes], error)
	DeleteScrubList(context.Context, *connect_go.Request[v0alpha.DeleteScrubListReq]) (*connect_go.Response[v0alpha.ScrubListRes], error)
	GetDefaultRules(context.Context, *connect_go.Request[v0alpha.GetDefaultRulesReq]) (*connect_go.Response[v0alpha.GetDefaultRulesRes], error)
	GetScrubLists(context.Context, *connect_go.Request[v0alpha.GetScrubListsReq]) (*connect_go.Response[v0alpha.ScrubListsRes], error)
	SearchScrubList(context.Context, *connect_go.Request[v0alpha.SearchScrubListReq]) (*connect_go.Response[v0alpha.ScrubList], error)
	GetScrubListUploadUrl(context.Context, *connect_go.Request[v0alpha.GetScrubListUploadUrlReq]) (*connect_go.Response[v0alpha.GetScrubListUploadUrlRes], error)
	ProcessScrubListUpload(context.Context, *connect_go.Request[v0alpha.ProcessScrubListUploadReq]) (*connect_go.Response[longrunningpb.Operation], error)
	ProcessScrubListDeleteUpload(context.Context, *connect_go.Request[v0alpha.ProcessScrubListDeleteUploadReq]) (*connect_go.Response[longrunningpb.Operation], error)
	ExportScrubList(context.Context, *connect_go.Request[v0alpha.ExportScrubListReq]) (*connect_go.Response[v0alpha.ExportScrubListRes], error)
	// Purge entries from a scrub list defined by PurgeScrubListReq message.
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	PurgeScrubList(context.Context, *connect_go.Request[v0alpha.PurgeScrubListReq]) (*connect_go.Response[v0alpha.PurgeScrubListRes], error)
	// Creates a new Scenario
	CreateScenario(context.Context, *connect_go.Request[v0alpha.CreateScenarioReq]) (*connect_go.Response[v0alpha.CreateScenarioRes], error)
	// Gets one Scenario
	GetScenario(context.Context, *connect_go.Request[v0alpha.GetScenarioReq]) (*connect_go.Response[v0alpha.GetScenarioRes], error)
	// Updates a Scenario
	UpdateScenario(context.Context, *connect_go.Request[v0alpha.UpdateScenarioReq]) (*connect_go.Response[v0alpha.UpdateScenarioRes], error)
	// Deletes a Scenario
	DeleteScenario(context.Context, *connect_go.Request[v0alpha.DeleteScenarioReq]) (*connect_go.Response[v0alpha.DeleteScenarioRes], error)
	// Run scenarios against ruleset
	RunAssignedScenarios(context.Context, *connect_go.Request[v0alpha.RunAssignedScenariosReq]) (*connect_go.Response[v0alpha.RunAssignedScenariosRes], error)
	// Lists all scenarios
	ListAllScenarios(context.Context, *connect_go.Request[v0alpha.ListAllScenariosReq]) (*connect_go.Response[v0alpha.ListAllScenariosRes], error)
	// List currently unassigned scenarios available to be assigned to a given ruleset
	ListUnassignedScenarios(context.Context, *connect_go.Request[v0alpha.ListUnassignedScenariosReq]) (*connect_go.Response[v0alpha.ListUnassignedScenariosRes], error)
	// List rule sets currently assigned to a given scenario
	ListAssignedRuleSets(context.Context, *connect_go.Request[v0alpha.ListAssignedRuleSetsReq]) (*connect_go.Response[v0alpha.ListAssignedRuleSetsRes], error)
	// List scenarios currently assigned to a given ruleset
	ListAssignedScenarios(context.Context, *connect_go.Request[v0alpha.ListAssignedScenariosReq]) (*connect_go.Response[v0alpha.ListAssignedScenariosRes], error)
	// Assign a scenario to a given ruleset
	AssignScenario(context.Context, *connect_go.Request[v0alpha.AssignScenarioReq]) (*connect_go.Response[emptypb.Empty], error)
	// Unassign a scenario from a given ruleset
	UnassignScenario(context.Context, *connect_go.Request[v0alpha.UnassignScenarioReq]) (*connect_go.Response[emptypb.Empty], error)
	// Enable an scenario
	EnableScenario(context.Context, *connect_go.Request[v0alpha.EnableScenarioReq]) (*connect_go.Response[emptypb.Empty], error)
	// Disable an scenario
	DisableScenario(context.Context, *connect_go.Request[v0alpha.DisableScenarioReq]) (*connect_go.Response[emptypb.Empty], error)
	// Frequency data calls
	// This will get all available Meta Fields
	GetFieldNames(context.Context, *connect_go.Request[v0alpha.GetFieldNamesReq]) (*connect_go.Response[v0alpha.FieldNames], error)
	// This will get all possible results (Answered, Answered Machine, Busy, etc.)
	GetResultDescriptions(context.Context, *connect_go.Request[v0alpha.GetResultDescriptionsReq]) (*connect_go.Response[v0alpha.FieldNames], error)
	// Create/Record a consent profile defined by CreateConsentProfileReq
	// message.  The method will return a CreateConsentProfileRes message
	// that will contain the newly created consent_profile_id.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	CreateConsentProfile(context.Context, *connect_go.Request[v0alpha.CreateConsentProfileReq]) (*connect_go.Response[v0alpha.CreateConsentProfileRes], error)
	// Create/Record a consent defined by CreateConsentReq message.
	// The method will return a CreateConsentRes message that will
	// contain the newly created consent_id.
	// Required permissions:
	//
	//	none
	CreateConsent(context.Context, *connect_go.Request[v0alpha.CreateConsentReq]) (*connect_go.Response[v0alpha.CreateConsentRes], error)
	// Gets a consent profile defined by GetConsentProfileReq message
	// for the specified consent_profile_id and org_id.
	// The method will return a ConsentProfile message/entity.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	GetConsentProfile(context.Context, *connect_go.Request[v0alpha.GetConsentProfileReq]) (*connect_go.Response[v0alpha.ConsentProfile], error)
	// Gets a consent defined by GetConsentReq message
	// for the specified consent_id and org_id.
	// The method will return a Consent entity.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	GetConsent(context.Context, *connect_go.Request[v0alpha.GetConsentReq]) (*connect_go.Response[v0alpha.Consent], error)
	// Gets a consent defined by GetConsentByProfileAndContentReq message
	// for the specified consent_profile_id and content.
	// The method will return a GetConsentByProfileAndContentRes message/entity.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	GetConsentByProfileAndContent(context.Context, *connect_go.Request[v0alpha.GetConsentByProfileAndContentReq]) (*connect_go.Response[v0alpha.GetConsentByProfileAndContentRes], error)
	// Gets a consent defined by GetConsentByContentReq message
	// for the specified consent_profile_id and content and channel_type.
	// The method will return a GetConsentByContentRes message/entity.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	GetConsentByContent(context.Context, *connect_go.Request[v0alpha.GetConsentByContentReq]) (*connect_go.Response[v0alpha.GetConsentByContentRes], error)
	// Searches for a consent defined by SearchConsentByContentReq message
	// for the specified content.
	// The method will return a SearchConsentByContentRes message/entity.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	SearchConsentByContent(context.Context, *connect_go.Request[v0alpha.SearchConsentByContentReq]) (*connect_go.Response[v0alpha.SearchConsentByContentRes], error)
	// Update a consent defined by UpdateConsentReq message for
	// the specified consent_id, and will update the following
	// consent fields:
	//
	//	Content
	//	Recorded
	//	Revoked
	//	Expire
	//	ReferringUrl
	//
	// The method will return a google.protobuf.Empty message.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	UpdateConsent(context.Context, *connect_go.Request[v0alpha.UpdateConsentReq]) (*connect_go.Response[emptypb.Empty], error)
	// Expire a consent defined by ExpireConsentReq message.
	// Set the expiration date for the specified consent_id field.
	// The method will return a google.protobuf.Empty message.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	ExpireConsent(context.Context, *connect_go.Request[v0alpha.ExpireConsentReq]) (*connect_go.Response[emptypb.Empty], error)
	// Revoke a consent defined by RevokeConsentReq message.
	// Set the revoked date for the specified consent_id and
	// consent_profile_id fields.
	// The method will return a google.protobuf.Empty message.
	// Required permissions:
	//
	//	none
	RevokeConsent(context.Context, *connect_go.Request[v0alpha.RevokeConsentReq]) (*connect_go.Response[emptypb.Empty], error)
	// Delete a consent defined by DeleteConsentReq message
	// The method will return a google.protobuf.Empty message
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	DeleteConsent(context.Context, *connect_go.Request[v0alpha.DeleteConsentReq]) (*connect_go.Response[emptypb.Empty], error)
	// Process a consent delete list defined by DeleteConsentReq message
	// The method will return a google.protobuf.Empty message
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	ProcessConsentListDeleteUpload(context.Context, *connect_go.Request[v0alpha.ProcessConsentListDeleteUploadReq]) (*connect_go.Response[longrunningpb.Operation], error)
	// Enable a consent profile defined by EnableConsentProfileReq message.
	// Set the disabled field to false for the specified
	// consent_profile_id field.
	// The method will return a google.protobuf.Empty message.
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	EnableConsentProfile(context.Context, *connect_go.Request[v0alpha.EnableConsentProfileReq]) (*connect_go.Response[emptypb.Empty], error)
	// Disable a consent profile defined by DisableConsentProfileReq message.
	// Set the disabled field to true for the specified
	// consent_profile_id field.
	// The method will return a google.protobuf.Empty message.
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	DisableConsentProfile(context.Context, *connect_go.Request[v0alpha.DisableConsentProfileReq]) (*connect_go.Response[emptypb.Empty], error)
	// List consent profiles defined by ListConsentProfilesReq message.
	// Gets all of the unique consent profiles.
	// The method will return a ListConsentProfilesRes message
	// containing consent_profile_id, profile_name, the number of consents
	// belonging to the profile, and disabled.
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	ListConsentProfiles(context.Context, *connect_go.Request[v0alpha.ListConsentProfilesReq]) (*connect_go.Response[v0alpha.ListConsentProfilesRes], error)
	// Get consent upload url defined by GetConsentUploadUrlReq message.
	// The method will return a GetConsentUploadUrlRes messages
	// containing a url with which to upload an import file.
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	GetConsentUploadUrl(context.Context, *connect_go.Request[v0alpha.GetConsentUploadUrlReq]) (*connect_go.Response[v0alpha.GetConsentUploadUrlRes], error)
	// Process consent upload defined by ProcessConsentUploadReq message.
	// The method will process an uploaded consent file.
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	ProcessConsentUpload(context.Context, *connect_go.Request[v0alpha.ProcessConsentUploadReq]) (*connect_go.Response[longrunningpb.Operation], error)
	// List consent topics defined by ListConsentTopicsReq message.
	// Gets all of the unique consent topics.
	// The method will return a ListConsentTopicsRes message
	// containing topic, org_id, and deleted.
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	ListConsentTopics(context.Context, *connect_go.Request[v0alpha.ListConsentTopicsReq]) (*connect_go.Response[v0alpha.ListConsentTopicsRes], error)
	// Gets a consent topic defined by GetConsentTopicReq message
	// for the specified topic and org_id.
	// The method will return a ConsentTopic message/entity.
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	GetConsentTopic(context.Context, *connect_go.Request[v0alpha.GetConsentTopicReq]) (*connect_go.Response[v0alpha.ConsentTopic], error)
	// Create a consent topic defined by ConsentTopic
	// message.  The method will return an Empty message.
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	CreateConsentTopic(context.Context, *connect_go.Request[v0alpha.ConsentTopic]) (*connect_go.Response[v0alpha.Empty], error)
	// Delete a consent topic defined by ConsentTopic message.
	// The method will return an Empty message.
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	DeleteConsentTopic(context.Context, *connect_go.Request[v0alpha.ConsentTopic]) (*connect_go.Response[v0alpha.Empty], error)
	// Update a consent topic defined by UpdateConsentTopicReq message.
	// The method will return an Empty message.
	// Required permissions:
	//
	//	EXECUTE_DO_NOT_CALL_LIST
	UpdateConsentTopic(context.Context, *connect_go.Request[v0alpha.UpdateConsentTopicReq]) (*connect_go.Response[v0alpha.Empty], error)
	// Process and Outbound Phone Number against a rule set.
	// The method will return a response indicating
	// if the call would be permited or not and the list
	// of rules checked against.
	// Required permissions:
	//
	//	AGENT
	ProcessOutboundCall(context.Context, *connect_go.Request[v0alpha.ProcessOutboundCallReq]) (*connect_go.Response[v0alpha.ProcessRes], error)
}

// NewComplianceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewComplianceHandler(svc ComplianceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(ComplianceRuleAutoCompleteProcedure, connect_go.NewUnaryHandler(
		ComplianceRuleAutoCompleteProcedure,
		svc.RuleAutoComplete,
		opts...,
	))
	mux.Handle(ComplianceCheckRuleSetProcedure, connect_go.NewUnaryHandler(
		ComplianceCheckRuleSetProcedure,
		svc.CheckRuleSet,
		opts...,
	))
	mux.Handle(ComplianceAssignRuleSetProcedure, connect_go.NewUnaryHandler(
		ComplianceAssignRuleSetProcedure,
		svc.AssignRuleSet,
		opts...,
	))
	mux.Handle(ComplianceListRuleSetsProcedure, connect_go.NewServerStreamHandler(
		ComplianceListRuleSetsProcedure,
		svc.ListRuleSets,
		opts...,
	))
	mux.Handle(ComplianceGetRuleSetProcedure, connect_go.NewUnaryHandler(
		ComplianceGetRuleSetProcedure,
		svc.GetRuleSet,
		opts...,
	))
	mux.Handle(ComplianceGetRuleSetByNameProcedure, connect_go.NewUnaryHandler(
		ComplianceGetRuleSetByNameProcedure,
		svc.GetRuleSetByName,
		opts...,
	))
	mux.Handle(ComplianceCreateRuleSetProcedure, connect_go.NewUnaryHandler(
		ComplianceCreateRuleSetProcedure,
		svc.CreateRuleSet,
		opts...,
	))
	mux.Handle(ComplianceRenameRuleSetProcedure, connect_go.NewUnaryHandler(
		ComplianceRenameRuleSetProcedure,
		svc.RenameRuleSet,
		opts...,
	))
	mux.Handle(ComplianceEnableRuleSetProcedure, connect_go.NewUnaryHandler(
		ComplianceEnableRuleSetProcedure,
		svc.EnableRuleSet,
		opts...,
	))
	mux.Handle(ComplianceDisableRuleSetProcedure, connect_go.NewUnaryHandler(
		ComplianceDisableRuleSetProcedure,
		svc.DisableRuleSet,
		opts...,
	))
	mux.Handle(ComplianceCreateScrubListProcedure, connect_go.NewUnaryHandler(
		ComplianceCreateScrubListProcedure,
		svc.CreateScrubList,
		opts...,
	))
	mux.Handle(ComplianceAddScrubListEntriesProcedure, connect_go.NewUnaryHandler(
		ComplianceAddScrubListEntriesProcedure,
		svc.AddScrubListEntries,
		opts...,
	))
	mux.Handle(ComplianceUpdateScrubEntryProcedure, connect_go.NewUnaryHandler(
		ComplianceUpdateScrubEntryProcedure,
		svc.UpdateScrubEntry,
		opts...,
	))
	mux.Handle(ComplianceDeleteScrubListEntriesProcedure, connect_go.NewUnaryHandler(
		ComplianceDeleteScrubListEntriesProcedure,
		svc.DeleteScrubListEntries,
		opts...,
	))
	mux.Handle(ComplianceGetScrubListProcedure, connect_go.NewUnaryHandler(
		ComplianceGetScrubListProcedure,
		svc.GetScrubList,
		opts...,
	))
	mux.Handle(ComplianceDeleteScrubListProcedure, connect_go.NewUnaryHandler(
		ComplianceDeleteScrubListProcedure,
		svc.DeleteScrubList,
		opts...,
	))
	mux.Handle(ComplianceGetDefaultRulesProcedure, connect_go.NewUnaryHandler(
		ComplianceGetDefaultRulesProcedure,
		svc.GetDefaultRules,
		opts...,
	))
	mux.Handle(ComplianceGetScrubListsProcedure, connect_go.NewUnaryHandler(
		ComplianceGetScrubListsProcedure,
		svc.GetScrubLists,
		opts...,
	))
	mux.Handle(ComplianceSearchScrubListProcedure, connect_go.NewUnaryHandler(
		ComplianceSearchScrubListProcedure,
		svc.SearchScrubList,
		opts...,
	))
	mux.Handle(ComplianceGetScrubListUploadUrlProcedure, connect_go.NewUnaryHandler(
		ComplianceGetScrubListUploadUrlProcedure,
		svc.GetScrubListUploadUrl,
		opts...,
	))
	mux.Handle(ComplianceProcessScrubListUploadProcedure, connect_go.NewUnaryHandler(
		ComplianceProcessScrubListUploadProcedure,
		svc.ProcessScrubListUpload,
		opts...,
	))
	mux.Handle(ComplianceProcessScrubListDeleteUploadProcedure, connect_go.NewUnaryHandler(
		ComplianceProcessScrubListDeleteUploadProcedure,
		svc.ProcessScrubListDeleteUpload,
		opts...,
	))
	mux.Handle(ComplianceExportScrubListProcedure, connect_go.NewUnaryHandler(
		ComplianceExportScrubListProcedure,
		svc.ExportScrubList,
		opts...,
	))
	mux.Handle(CompliancePurgeScrubListProcedure, connect_go.NewUnaryHandler(
		CompliancePurgeScrubListProcedure,
		svc.PurgeScrubList,
		opts...,
	))
	mux.Handle(ComplianceCreateScenarioProcedure, connect_go.NewUnaryHandler(
		ComplianceCreateScenarioProcedure,
		svc.CreateScenario,
		opts...,
	))
	mux.Handle(ComplianceGetScenarioProcedure, connect_go.NewUnaryHandler(
		ComplianceGetScenarioProcedure,
		svc.GetScenario,
		opts...,
	))
	mux.Handle(ComplianceUpdateScenarioProcedure, connect_go.NewUnaryHandler(
		ComplianceUpdateScenarioProcedure,
		svc.UpdateScenario,
		opts...,
	))
	mux.Handle(ComplianceDeleteScenarioProcedure, connect_go.NewUnaryHandler(
		ComplianceDeleteScenarioProcedure,
		svc.DeleteScenario,
		opts...,
	))
	mux.Handle(ComplianceRunAssignedScenariosProcedure, connect_go.NewUnaryHandler(
		ComplianceRunAssignedScenariosProcedure,
		svc.RunAssignedScenarios,
		opts...,
	))
	mux.Handle(ComplianceListAllScenariosProcedure, connect_go.NewUnaryHandler(
		ComplianceListAllScenariosProcedure,
		svc.ListAllScenarios,
		opts...,
	))
	mux.Handle(ComplianceListUnassignedScenariosProcedure, connect_go.NewUnaryHandler(
		ComplianceListUnassignedScenariosProcedure,
		svc.ListUnassignedScenarios,
		opts...,
	))
	mux.Handle(ComplianceListAssignedRuleSetsProcedure, connect_go.NewUnaryHandler(
		ComplianceListAssignedRuleSetsProcedure,
		svc.ListAssignedRuleSets,
		opts...,
	))
	mux.Handle(ComplianceListAssignedScenariosProcedure, connect_go.NewUnaryHandler(
		ComplianceListAssignedScenariosProcedure,
		svc.ListAssignedScenarios,
		opts...,
	))
	mux.Handle(ComplianceAssignScenarioProcedure, connect_go.NewUnaryHandler(
		ComplianceAssignScenarioProcedure,
		svc.AssignScenario,
		opts...,
	))
	mux.Handle(ComplianceUnassignScenarioProcedure, connect_go.NewUnaryHandler(
		ComplianceUnassignScenarioProcedure,
		svc.UnassignScenario,
		opts...,
	))
	mux.Handle(ComplianceEnableScenarioProcedure, connect_go.NewUnaryHandler(
		ComplianceEnableScenarioProcedure,
		svc.EnableScenario,
		opts...,
	))
	mux.Handle(ComplianceDisableScenarioProcedure, connect_go.NewUnaryHandler(
		ComplianceDisableScenarioProcedure,
		svc.DisableScenario,
		opts...,
	))
	mux.Handle(ComplianceGetFieldNamesProcedure, connect_go.NewUnaryHandler(
		ComplianceGetFieldNamesProcedure,
		svc.GetFieldNames,
		opts...,
	))
	mux.Handle(ComplianceGetResultDescriptionsProcedure, connect_go.NewUnaryHandler(
		ComplianceGetResultDescriptionsProcedure,
		svc.GetResultDescriptions,
		opts...,
	))
	mux.Handle(ComplianceCreateConsentProfileProcedure, connect_go.NewUnaryHandler(
		ComplianceCreateConsentProfileProcedure,
		svc.CreateConsentProfile,
		opts...,
	))
	mux.Handle(ComplianceCreateConsentProcedure, connect_go.NewUnaryHandler(
		ComplianceCreateConsentProcedure,
		svc.CreateConsent,
		opts...,
	))
	mux.Handle(ComplianceGetConsentProfileProcedure, connect_go.NewUnaryHandler(
		ComplianceGetConsentProfileProcedure,
		svc.GetConsentProfile,
		opts...,
	))
	mux.Handle(ComplianceGetConsentProcedure, connect_go.NewUnaryHandler(
		ComplianceGetConsentProcedure,
		svc.GetConsent,
		opts...,
	))
	mux.Handle(ComplianceGetConsentByProfileAndContentProcedure, connect_go.NewUnaryHandler(
		ComplianceGetConsentByProfileAndContentProcedure,
		svc.GetConsentByProfileAndContent,
		opts...,
	))
	mux.Handle(ComplianceGetConsentByContentProcedure, connect_go.NewUnaryHandler(
		ComplianceGetConsentByContentProcedure,
		svc.GetConsentByContent,
		opts...,
	))
	mux.Handle(ComplianceSearchConsentByContentProcedure, connect_go.NewUnaryHandler(
		ComplianceSearchConsentByContentProcedure,
		svc.SearchConsentByContent,
		opts...,
	))
	mux.Handle(ComplianceUpdateConsentProcedure, connect_go.NewUnaryHandler(
		ComplianceUpdateConsentProcedure,
		svc.UpdateConsent,
		opts...,
	))
	mux.Handle(ComplianceExpireConsentProcedure, connect_go.NewUnaryHandler(
		ComplianceExpireConsentProcedure,
		svc.ExpireConsent,
		opts...,
	))
	mux.Handle(ComplianceRevokeConsentProcedure, connect_go.NewUnaryHandler(
		ComplianceRevokeConsentProcedure,
		svc.RevokeConsent,
		opts...,
	))
	mux.Handle(ComplianceDeleteConsentProcedure, connect_go.NewUnaryHandler(
		ComplianceDeleteConsentProcedure,
		svc.DeleteConsent,
		opts...,
	))
	mux.Handle(ComplianceProcessConsentListDeleteUploadProcedure, connect_go.NewUnaryHandler(
		ComplianceProcessConsentListDeleteUploadProcedure,
		svc.ProcessConsentListDeleteUpload,
		opts...,
	))
	mux.Handle(ComplianceEnableConsentProfileProcedure, connect_go.NewUnaryHandler(
		ComplianceEnableConsentProfileProcedure,
		svc.EnableConsentProfile,
		opts...,
	))
	mux.Handle(ComplianceDisableConsentProfileProcedure, connect_go.NewUnaryHandler(
		ComplianceDisableConsentProfileProcedure,
		svc.DisableConsentProfile,
		opts...,
	))
	mux.Handle(ComplianceListConsentProfilesProcedure, connect_go.NewUnaryHandler(
		ComplianceListConsentProfilesProcedure,
		svc.ListConsentProfiles,
		opts...,
	))
	mux.Handle(ComplianceGetConsentUploadUrlProcedure, connect_go.NewUnaryHandler(
		ComplianceGetConsentUploadUrlProcedure,
		svc.GetConsentUploadUrl,
		opts...,
	))
	mux.Handle(ComplianceProcessConsentUploadProcedure, connect_go.NewUnaryHandler(
		ComplianceProcessConsentUploadProcedure,
		svc.ProcessConsentUpload,
		opts...,
	))
	mux.Handle(ComplianceListConsentTopicsProcedure, connect_go.NewUnaryHandler(
		ComplianceListConsentTopicsProcedure,
		svc.ListConsentTopics,
		opts...,
	))
	mux.Handle(ComplianceGetConsentTopicProcedure, connect_go.NewUnaryHandler(
		ComplianceGetConsentTopicProcedure,
		svc.GetConsentTopic,
		opts...,
	))
	mux.Handle(ComplianceCreateConsentTopicProcedure, connect_go.NewUnaryHandler(
		ComplianceCreateConsentTopicProcedure,
		svc.CreateConsentTopic,
		opts...,
	))
	mux.Handle(ComplianceDeleteConsentTopicProcedure, connect_go.NewUnaryHandler(
		ComplianceDeleteConsentTopicProcedure,
		svc.DeleteConsentTopic,
		opts...,
	))
	mux.Handle(ComplianceUpdateConsentTopicProcedure, connect_go.NewUnaryHandler(
		ComplianceUpdateConsentTopicProcedure,
		svc.UpdateConsentTopic,
		opts...,
	))
	mux.Handle(ComplianceProcessOutboundCallProcedure, connect_go.NewUnaryHandler(
		ComplianceProcessOutboundCallProcedure,
		svc.ProcessOutboundCall,
		opts...,
	))
	return "/api.v0alpha.Compliance/", mux
}

// UnimplementedComplianceHandler returns CodeUnimplemented from all methods.
type UnimplementedComplianceHandler struct{}

func (UnimplementedComplianceHandler) RuleAutoComplete(context.Context, *connect_go.Request[v0alpha.RuleAutoCompleteReq]) (*connect_go.Response[v0alpha.RuleAutoCompleteRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.RuleAutoComplete is not implemented"))
}

func (UnimplementedComplianceHandler) CheckRuleSet(context.Context, *connect_go.Request[v0alpha.CheckRuleSetReq]) (*connect_go.Response[v0alpha.CheckRuleSetRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.CheckRuleSet is not implemented"))
}

func (UnimplementedComplianceHandler) AssignRuleSet(context.Context, *connect_go.Request[v0alpha.AssignRuleSetReq]) (*connect_go.Response[v0alpha.AssignRuleSetRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.AssignRuleSet is not implemented"))
}

func (UnimplementedComplianceHandler) ListRuleSets(context.Context, *connect_go.Request[v0alpha.ListRuleSetsReq], *connect_go.ServerStream[v0alpha.ListRuleSetsRes]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.ListRuleSets is not implemented"))
}

func (UnimplementedComplianceHandler) GetRuleSet(context.Context, *connect_go.Request[v0alpha.GetRuleSetReq]) (*connect_go.Response[v0alpha.RuleSet], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.GetRuleSet is not implemented"))
}

func (UnimplementedComplianceHandler) GetRuleSetByName(context.Context, *connect_go.Request[v0alpha.GetRuleSetByNameReq]) (*connect_go.Response[v0alpha.RuleSet], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.GetRuleSetByName is not implemented"))
}

func (UnimplementedComplianceHandler) CreateRuleSet(context.Context, *connect_go.Request[v0alpha.CreateRuleSetReq]) (*connect_go.Response[v0alpha.RuleSet], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.CreateRuleSet is not implemented"))
}

func (UnimplementedComplianceHandler) RenameRuleSet(context.Context, *connect_go.Request[v0alpha.RenameRuleSetReq]) (*connect_go.Response[v0alpha.RenameRuleSetRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.RenameRuleSet is not implemented"))
}

func (UnimplementedComplianceHandler) EnableRuleSet(context.Context, *connect_go.Request[v0alpha.EnableRuleSetReq]) (*connect_go.Response[v0alpha.EnableRuleSetRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.EnableRuleSet is not implemented"))
}

func (UnimplementedComplianceHandler) DisableRuleSet(context.Context, *connect_go.Request[v0alpha.DisableRuleSetReq]) (*connect_go.Response[v0alpha.DisableRuleSetRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.DisableRuleSet is not implemented"))
}

func (UnimplementedComplianceHandler) CreateScrubList(context.Context, *connect_go.Request[v0alpha.CreateScrubListReq]) (*connect_go.Response[v0alpha.ScrubListRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.CreateScrubList is not implemented"))
}

func (UnimplementedComplianceHandler) AddScrubListEntries(context.Context, *connect_go.Request[v0alpha.AddScrubListEntriesReq]) (*connect_go.Response[v0alpha.ScrubListRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.AddScrubListEntries is not implemented"))
}

func (UnimplementedComplianceHandler) UpdateScrubEntry(context.Context, *connect_go.Request[v0alpha.UpdateScrubEntryReq]) (*connect_go.Response[v0alpha.UpdateScrubEntryRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.UpdateScrubEntry is not implemented"))
}

func (UnimplementedComplianceHandler) DeleteScrubListEntries(context.Context, *connect_go.Request[v0alpha.DeleteScrubListEntriesReq]) (*connect_go.Response[v0alpha.ScrubListRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.DeleteScrubListEntries is not implemented"))
}

func (UnimplementedComplianceHandler) GetScrubList(context.Context, *connect_go.Request[v0alpha.GetScrubListReq]) (*connect_go.Response[v0alpha.ScrubListRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.GetScrubList is not implemented"))
}

func (UnimplementedComplianceHandler) DeleteScrubList(context.Context, *connect_go.Request[v0alpha.DeleteScrubListReq]) (*connect_go.Response[v0alpha.ScrubListRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.DeleteScrubList is not implemented"))
}

func (UnimplementedComplianceHandler) GetDefaultRules(context.Context, *connect_go.Request[v0alpha.GetDefaultRulesReq]) (*connect_go.Response[v0alpha.GetDefaultRulesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.GetDefaultRules is not implemented"))
}

func (UnimplementedComplianceHandler) GetScrubLists(context.Context, *connect_go.Request[v0alpha.GetScrubListsReq]) (*connect_go.Response[v0alpha.ScrubListsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.GetScrubLists is not implemented"))
}

func (UnimplementedComplianceHandler) SearchScrubList(context.Context, *connect_go.Request[v0alpha.SearchScrubListReq]) (*connect_go.Response[v0alpha.ScrubList], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.SearchScrubList is not implemented"))
}

func (UnimplementedComplianceHandler) GetScrubListUploadUrl(context.Context, *connect_go.Request[v0alpha.GetScrubListUploadUrlReq]) (*connect_go.Response[v0alpha.GetScrubListUploadUrlRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.GetScrubListUploadUrl is not implemented"))
}

func (UnimplementedComplianceHandler) ProcessScrubListUpload(context.Context, *connect_go.Request[v0alpha.ProcessScrubListUploadReq]) (*connect_go.Response[longrunningpb.Operation], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.ProcessScrubListUpload is not implemented"))
}

func (UnimplementedComplianceHandler) ProcessScrubListDeleteUpload(context.Context, *connect_go.Request[v0alpha.ProcessScrubListDeleteUploadReq]) (*connect_go.Response[longrunningpb.Operation], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.ProcessScrubListDeleteUpload is not implemented"))
}

func (UnimplementedComplianceHandler) ExportScrubList(context.Context, *connect_go.Request[v0alpha.ExportScrubListReq]) (*connect_go.Response[v0alpha.ExportScrubListRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.ExportScrubList is not implemented"))
}

func (UnimplementedComplianceHandler) PurgeScrubList(context.Context, *connect_go.Request[v0alpha.PurgeScrubListReq]) (*connect_go.Response[v0alpha.PurgeScrubListRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.PurgeScrubList is not implemented"))
}

func (UnimplementedComplianceHandler) CreateScenario(context.Context, *connect_go.Request[v0alpha.CreateScenarioReq]) (*connect_go.Response[v0alpha.CreateScenarioRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.CreateScenario is not implemented"))
}

func (UnimplementedComplianceHandler) GetScenario(context.Context, *connect_go.Request[v0alpha.GetScenarioReq]) (*connect_go.Response[v0alpha.GetScenarioRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.GetScenario is not implemented"))
}

func (UnimplementedComplianceHandler) UpdateScenario(context.Context, *connect_go.Request[v0alpha.UpdateScenarioReq]) (*connect_go.Response[v0alpha.UpdateScenarioRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.UpdateScenario is not implemented"))
}

func (UnimplementedComplianceHandler) DeleteScenario(context.Context, *connect_go.Request[v0alpha.DeleteScenarioReq]) (*connect_go.Response[v0alpha.DeleteScenarioRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.DeleteScenario is not implemented"))
}

func (UnimplementedComplianceHandler) RunAssignedScenarios(context.Context, *connect_go.Request[v0alpha.RunAssignedScenariosReq]) (*connect_go.Response[v0alpha.RunAssignedScenariosRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.RunAssignedScenarios is not implemented"))
}

func (UnimplementedComplianceHandler) ListAllScenarios(context.Context, *connect_go.Request[v0alpha.ListAllScenariosReq]) (*connect_go.Response[v0alpha.ListAllScenariosRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.ListAllScenarios is not implemented"))
}

func (UnimplementedComplianceHandler) ListUnassignedScenarios(context.Context, *connect_go.Request[v0alpha.ListUnassignedScenariosReq]) (*connect_go.Response[v0alpha.ListUnassignedScenariosRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.ListUnassignedScenarios is not implemented"))
}

func (UnimplementedComplianceHandler) ListAssignedRuleSets(context.Context, *connect_go.Request[v0alpha.ListAssignedRuleSetsReq]) (*connect_go.Response[v0alpha.ListAssignedRuleSetsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.ListAssignedRuleSets is not implemented"))
}

func (UnimplementedComplianceHandler) ListAssignedScenarios(context.Context, *connect_go.Request[v0alpha.ListAssignedScenariosReq]) (*connect_go.Response[v0alpha.ListAssignedScenariosRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.ListAssignedScenarios is not implemented"))
}

func (UnimplementedComplianceHandler) AssignScenario(context.Context, *connect_go.Request[v0alpha.AssignScenarioReq]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.AssignScenario is not implemented"))
}

func (UnimplementedComplianceHandler) UnassignScenario(context.Context, *connect_go.Request[v0alpha.UnassignScenarioReq]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.UnassignScenario is not implemented"))
}

func (UnimplementedComplianceHandler) EnableScenario(context.Context, *connect_go.Request[v0alpha.EnableScenarioReq]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.EnableScenario is not implemented"))
}

func (UnimplementedComplianceHandler) DisableScenario(context.Context, *connect_go.Request[v0alpha.DisableScenarioReq]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.DisableScenario is not implemented"))
}

func (UnimplementedComplianceHandler) GetFieldNames(context.Context, *connect_go.Request[v0alpha.GetFieldNamesReq]) (*connect_go.Response[v0alpha.FieldNames], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.GetFieldNames is not implemented"))
}

func (UnimplementedComplianceHandler) GetResultDescriptions(context.Context, *connect_go.Request[v0alpha.GetResultDescriptionsReq]) (*connect_go.Response[v0alpha.FieldNames], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.GetResultDescriptions is not implemented"))
}

func (UnimplementedComplianceHandler) CreateConsentProfile(context.Context, *connect_go.Request[v0alpha.CreateConsentProfileReq]) (*connect_go.Response[v0alpha.CreateConsentProfileRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.CreateConsentProfile is not implemented"))
}

func (UnimplementedComplianceHandler) CreateConsent(context.Context, *connect_go.Request[v0alpha.CreateConsentReq]) (*connect_go.Response[v0alpha.CreateConsentRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.CreateConsent is not implemented"))
}

func (UnimplementedComplianceHandler) GetConsentProfile(context.Context, *connect_go.Request[v0alpha.GetConsentProfileReq]) (*connect_go.Response[v0alpha.ConsentProfile], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.GetConsentProfile is not implemented"))
}

func (UnimplementedComplianceHandler) GetConsent(context.Context, *connect_go.Request[v0alpha.GetConsentReq]) (*connect_go.Response[v0alpha.Consent], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.GetConsent is not implemented"))
}

func (UnimplementedComplianceHandler) GetConsentByProfileAndContent(context.Context, *connect_go.Request[v0alpha.GetConsentByProfileAndContentReq]) (*connect_go.Response[v0alpha.GetConsentByProfileAndContentRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.GetConsentByProfileAndContent is not implemented"))
}

func (UnimplementedComplianceHandler) GetConsentByContent(context.Context, *connect_go.Request[v0alpha.GetConsentByContentReq]) (*connect_go.Response[v0alpha.GetConsentByContentRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.GetConsentByContent is not implemented"))
}

func (UnimplementedComplianceHandler) SearchConsentByContent(context.Context, *connect_go.Request[v0alpha.SearchConsentByContentReq]) (*connect_go.Response[v0alpha.SearchConsentByContentRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.SearchConsentByContent is not implemented"))
}

func (UnimplementedComplianceHandler) UpdateConsent(context.Context, *connect_go.Request[v0alpha.UpdateConsentReq]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.UpdateConsent is not implemented"))
}

func (UnimplementedComplianceHandler) ExpireConsent(context.Context, *connect_go.Request[v0alpha.ExpireConsentReq]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.ExpireConsent is not implemented"))
}

func (UnimplementedComplianceHandler) RevokeConsent(context.Context, *connect_go.Request[v0alpha.RevokeConsentReq]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.RevokeConsent is not implemented"))
}

func (UnimplementedComplianceHandler) DeleteConsent(context.Context, *connect_go.Request[v0alpha.DeleteConsentReq]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.DeleteConsent is not implemented"))
}

func (UnimplementedComplianceHandler) ProcessConsentListDeleteUpload(context.Context, *connect_go.Request[v0alpha.ProcessConsentListDeleteUploadReq]) (*connect_go.Response[longrunningpb.Operation], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.ProcessConsentListDeleteUpload is not implemented"))
}

func (UnimplementedComplianceHandler) EnableConsentProfile(context.Context, *connect_go.Request[v0alpha.EnableConsentProfileReq]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.EnableConsentProfile is not implemented"))
}

func (UnimplementedComplianceHandler) DisableConsentProfile(context.Context, *connect_go.Request[v0alpha.DisableConsentProfileReq]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.DisableConsentProfile is not implemented"))
}

func (UnimplementedComplianceHandler) ListConsentProfiles(context.Context, *connect_go.Request[v0alpha.ListConsentProfilesReq]) (*connect_go.Response[v0alpha.ListConsentProfilesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.ListConsentProfiles is not implemented"))
}

func (UnimplementedComplianceHandler) GetConsentUploadUrl(context.Context, *connect_go.Request[v0alpha.GetConsentUploadUrlReq]) (*connect_go.Response[v0alpha.GetConsentUploadUrlRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.GetConsentUploadUrl is not implemented"))
}

func (UnimplementedComplianceHandler) ProcessConsentUpload(context.Context, *connect_go.Request[v0alpha.ProcessConsentUploadReq]) (*connect_go.Response[longrunningpb.Operation], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.ProcessConsentUpload is not implemented"))
}

func (UnimplementedComplianceHandler) ListConsentTopics(context.Context, *connect_go.Request[v0alpha.ListConsentTopicsReq]) (*connect_go.Response[v0alpha.ListConsentTopicsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.ListConsentTopics is not implemented"))
}

func (UnimplementedComplianceHandler) GetConsentTopic(context.Context, *connect_go.Request[v0alpha.GetConsentTopicReq]) (*connect_go.Response[v0alpha.ConsentTopic], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.GetConsentTopic is not implemented"))
}

func (UnimplementedComplianceHandler) CreateConsentTopic(context.Context, *connect_go.Request[v0alpha.ConsentTopic]) (*connect_go.Response[v0alpha.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.CreateConsentTopic is not implemented"))
}

func (UnimplementedComplianceHandler) DeleteConsentTopic(context.Context, *connect_go.Request[v0alpha.ConsentTopic]) (*connect_go.Response[v0alpha.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.DeleteConsentTopic is not implemented"))
}

func (UnimplementedComplianceHandler) UpdateConsentTopic(context.Context, *connect_go.Request[v0alpha.UpdateConsentTopicReq]) (*connect_go.Response[v0alpha.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.UpdateConsentTopic is not implemented"))
}

func (UnimplementedComplianceHandler) ProcessOutboundCall(context.Context, *connect_go.Request[v0alpha.ProcessOutboundCallReq]) (*connect_go.Response[v0alpha.ProcessRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Compliance.ProcessOutboundCall is not implemented"))
}
