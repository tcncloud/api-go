// Copyright (c) 2019, TCN Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v0alpha/learn.proto

package v0alphaconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v0alpha "github.com/tcncloud/api-go/api/v0alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// LearnName is the fully-qualified name of the Learn service.
	LearnName = "api.v0alpha.Learn"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LearnExistProcedure is the fully-qualified name of the Learn's Exist RPC.
	LearnExistProcedure = "/api.v0alpha.Learn/Exist"
	// LearnContentProcedure is the fully-qualified name of the Learn's Content RPC.
	LearnContentProcedure = "/api.v0alpha.Learn/Content"
	// LearnExportManyProcedure is the fully-qualified name of the Learn's ExportMany RPC.
	LearnExportManyProcedure = "/api.v0alpha.Learn/ExportMany"
	// LearnSearchContentProcedure is the fully-qualified name of the Learn's SearchContent RPC.
	LearnSearchContentProcedure = "/api.v0alpha.Learn/SearchContent"
	// LearnListSearchResultsProcedure is the fully-qualified name of the Learn's ListSearchResults RPC.
	LearnListSearchResultsProcedure = "/api.v0alpha.Learn/ListSearchResults"
	// LearnStandaloneProcedure is the fully-qualified name of the Learn's Standalone RPC.
	LearnStandaloneProcedure = "/api.v0alpha.Learn/Standalone"
	// LearnContentEditorDataProcedure is the fully-qualified name of the Learn's ContentEditorData RPC.
	LearnContentEditorDataProcedure = "/api.v0alpha.Learn/ContentEditorData"
	// LearnUpdateProcedure is the fully-qualified name of the Learn's Update RPC.
	LearnUpdateProcedure = "/api.v0alpha.Learn/Update"
	// LearnStoreStaticImageProcedure is the fully-qualified name of the Learn's StoreStaticImage RPC.
	LearnStoreStaticImageProcedure = "/api.v0alpha.Learn/StoreStaticImage"
	// LearnUploadDynamicScreenshotProcedure is the fully-qualified name of the Learn's
	// UploadDynamicScreenshot RPC.
	LearnUploadDynamicScreenshotProcedure = "/api.v0alpha.Learn/UploadDynamicScreenshot"
	// LearnDeleteStandaloneProcedure is the fully-qualified name of the Learn's DeleteStandalone RPC.
	LearnDeleteStandaloneProcedure = "/api.v0alpha.Learn/DeleteStandalone"
	// LearnSnippetProcedure is the fully-qualified name of the Learn's Snippet RPC.
	LearnSnippetProcedure = "/api.v0alpha.Learn/Snippet"
	// LearnDeleteLearnPagesProcedure is the fully-qualified name of the Learn's DeleteLearnPages RPC.
	LearnDeleteLearnPagesProcedure = "/api.v0alpha.Learn/DeleteLearnPages"
	// LearnCreateEditVersionProcedure is the fully-qualified name of the Learn's CreateEditVersion RPC.
	LearnCreateEditVersionProcedure = "/api.v0alpha.Learn/CreateEditVersion"
	// LearnPublishVersionProcedure is the fully-qualified name of the Learn's PublishVersion RPC.
	LearnPublishVersionProcedure = "/api.v0alpha.Learn/PublishVersion"
	// LearnContentByVersionProcedure is the fully-qualified name of the Learn's ContentByVersion RPC.
	LearnContentByVersionProcedure = "/api.v0alpha.Learn/ContentByVersion"
	// LearnUpdateByVersionProcedure is the fully-qualified name of the Learn's UpdateByVersion RPC.
	LearnUpdateByVersionProcedure = "/api.v0alpha.Learn/UpdateByVersion"
	// LearnListSearchResultsByVersionProcedure is the fully-qualified name of the Learn's
	// ListSearchResultsByVersion RPC.
	LearnListSearchResultsByVersionProcedure = "/api.v0alpha.Learn/ListSearchResultsByVersion"
	// LearnReviewFileVersionsProcedure is the fully-qualified name of the Learn's ReviewFileVersions
	// RPC.
	LearnReviewFileVersionsProcedure = "/api.v0alpha.Learn/ReviewFileVersions"
	// LearnReviewVersionProcedure is the fully-qualified name of the Learn's ReviewVersion RPC.
	LearnReviewVersionProcedure = "/api.v0alpha.Learn/ReviewVersion"
	// LearnExportManyStreamProcedure is the fully-qualified name of the Learn's ExportManyStream RPC.
	LearnExportManyStreamProcedure = "/api.v0alpha.Learn/ExportManyStream"
	// LearnListVersionsProcedure is the fully-qualified name of the Learn's ListVersions RPC.
	LearnListVersionsProcedure = "/api.v0alpha.Learn/ListVersions"
	// LearnReviewVersionStreamProcedure is the fully-qualified name of the Learn's ReviewVersionStream
	// RPC.
	LearnReviewVersionStreamProcedure = "/api.v0alpha.Learn/ReviewVersionStream"
	// LearnDeleteVersionProcedure is the fully-qualified name of the Learn's DeleteVersion RPC.
	LearnDeleteVersionProcedure = "/api.v0alpha.Learn/DeleteVersion"
	// LearnUploadStaticImageProcedure is the fully-qualified name of the Learn's UploadStaticImage RPC.
	LearnUploadStaticImageProcedure = "/api.v0alpha.Learn/UploadStaticImage"
	// LearnGetUpdateUrlProcedure is the fully-qualified name of the Learn's GetUpdateUrl RPC.
	LearnGetUpdateUrlProcedure = "/api.v0alpha.Learn/GetUpdateUrl"
)

// LearnClient is a client for the api.v0alpha.Learn service.
type LearnClient interface {
	// check if learning page already exists
	Exist(context.Context, *connect_go.Request[v0alpha.ExistReq]) (*connect_go.Response[v0alpha.ExistRes], error)
	// retreive content from learning pages
	Content(context.Context, *connect_go.Request[v0alpha.ContentReq]) (*connect_go.Response[v0alpha.ContentRes], error)
	// exports multiple pages of the learning center markdown as PDF
	ExportMany(context.Context, *connect_go.Request[v0alpha.ExportManyReq]) (*connect_go.Response[v0alpha.ExportRes], error)
	// search content in learning pages
	// we allow all the logged in agents/admins to view search content
	SearchContent(context.Context, *connect_go.Request[v0alpha.SearchContentReq]) (*connect_go.Response[v0alpha.SearchRes], error)
	// stream search content results in learning pages
	// we allow all the logged in agents/admins to view search content
	ListSearchResults(context.Context, *connect_go.Request[v0alpha.SearchContentReq]) (*connect_go.ServerStreamForClient[v0alpha.SearchRes], error)
	// get standalone articles from learning pages
	// we allow all the logged in agents/admins to view standalone articles
	Standalone(context.Context, *connect_go.Request[v0alpha.StandaloneReq]) (*connect_go.Response[v0alpha.StandaloneRes], error)
	// retrieve user who edited the content last
	ContentEditorData(context.Context, *connect_go.Request[v0alpha.ContentEditorDataReq]) (*connect_go.Response[v0alpha.ContentEditorDataRes], error)
	// update contents for learning pages
	Update(context.Context, *connect_go.Request[v0alpha.UpdateReq]) (*connect_go.Response[v0alpha.UpdateRes], error)
	// upload url for static images
	StoreStaticImage(context.Context, *connect_go.Request[v0alpha.StoreStaticImageReq]) (*connect_go.Response[v0alpha.StoreStaticImageRes], error)
	// upload dynamic learning image screenshot
	UploadDynamicScreenshot(context.Context, *connect_go.Request[v0alpha.UploadDynamicScreenshotReq]) (*connect_go.Response[v0alpha.UploadDynamicScreenshotRes], error)
	// delete standalone articles from learning pages
	DeleteStandalone(context.Context, *connect_go.Request[v0alpha.DeleteStandaloneReq]) (*connect_go.Response[v0alpha.DeleteStandaloneRes], error)
	// get snippet content from learning pages
	// we allow all the logged in agents/admins to view snippet content
	Snippet(context.Context, *connect_go.Request[v0alpha.SnippetReq]) (*connect_go.Response[v0alpha.SnippetRes], error)
	// delete learning pages
	DeleteLearnPages(context.Context, *connect_go.Request[v0alpha.DeleteLearnPagesReq]) (*connect_go.Response[v0alpha.DeleteLearnPagesRes], error)
	// create edit version
	CreateEditVersion(context.Context, *connect_go.Request[v0alpha.CreateEditVersionReq]) (*connect_go.Response[v0alpha.CreateEditVersionRes], error)
	// publish version
	PublishVersion(context.Context, *connect_go.Request[v0alpha.PublishVersionReq]) (*connect_go.Response[v0alpha.PublishVersionRes], error)
	// retrieve content from learning pages based on version
	ContentByVersion(context.Context, *connect_go.Request[v0alpha.ContentByVersionReq]) (*connect_go.Response[v0alpha.ContentRes], error)
	// update contents for learning pages by version
	UpdateByVersion(context.Context, *connect_go.Request[v0alpha.UpdateByVersionReq]) (*connect_go.Response[v0alpha.UpdateRes], error)
	// stream search content results in learning pages by version
	// we allow all the logged in agents/admins to view search content
	ListSearchResultsByVersion(context.Context, *connect_go.Request[v0alpha.SearchContentByVersionReq]) (*connect_go.ServerStreamForClient[v0alpha.SearchRes], error)
	// return diff by comparing file contens from any version
	ReviewFileVersions(context.Context, *connect_go.Request[v0alpha.ReviewFileVersionsReq]) (*connect_go.Response[v0alpha.ReviewFileVersionsRes], error)
	// returns list of file details after comparing different versions
	ReviewVersion(context.Context, *connect_go.Request[v0alpha.ReviewVersionReq]) (*connect_go.Response[v0alpha.ReviewVersionRes], error)
	// exports multiple pages of the learning center markdown as PDF file stream
	ExportManyStream(context.Context, *connect_go.Request[v0alpha.ExportManyReq]) (*connect_go.ServerStreamForClient[v0alpha.ExportRes], error)
	// list all the different versions
	ListVersions(context.Context, *connect_go.Request[v0alpha.ListVersionsReq]) (*connect_go.Response[v0alpha.ListVersionsRes], error)
	// returns urls as a stream after comparing version contents between both versions
	ReviewVersionStream(context.Context, *connect_go.Request[v0alpha.ReviewVersionReq]) (*connect_go.ServerStreamForClient[v0alpha.ReviewVersionRes], error)
	// delete version from learn
	DeleteVersion(context.Context, *connect_go.Request[v0alpha.DeleteVersionReq]) (*connect_go.Response[v0alpha.DeleteVersionRes], error)
	// upload image for learning articles
	UploadStaticImage(context.Context, *connect_go.Request[v0alpha.UploadStaticImageReq]) (*connect_go.Response[v0alpha.UploadStaticImageRes], error)
	// upload url for file updates
	GetUpdateUrl(context.Context, *connect_go.Request[v0alpha.GetUpdateUrlReq]) (*connect_go.Response[v0alpha.GetUpdateUrlRes], error)
}

// NewLearnClient constructs a client for the api.v0alpha.Learn service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLearnClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) LearnClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &learnClient{
		exist: connect_go.NewClient[v0alpha.ExistReq, v0alpha.ExistRes](
			httpClient,
			baseURL+LearnExistProcedure,
			opts...,
		),
		content: connect_go.NewClient[v0alpha.ContentReq, v0alpha.ContentRes](
			httpClient,
			baseURL+LearnContentProcedure,
			opts...,
		),
		exportMany: connect_go.NewClient[v0alpha.ExportManyReq, v0alpha.ExportRes](
			httpClient,
			baseURL+LearnExportManyProcedure,
			opts...,
		),
		searchContent: connect_go.NewClient[v0alpha.SearchContentReq, v0alpha.SearchRes](
			httpClient,
			baseURL+LearnSearchContentProcedure,
			opts...,
		),
		listSearchResults: connect_go.NewClient[v0alpha.SearchContentReq, v0alpha.SearchRes](
			httpClient,
			baseURL+LearnListSearchResultsProcedure,
			opts...,
		),
		standalone: connect_go.NewClient[v0alpha.StandaloneReq, v0alpha.StandaloneRes](
			httpClient,
			baseURL+LearnStandaloneProcedure,
			opts...,
		),
		contentEditorData: connect_go.NewClient[v0alpha.ContentEditorDataReq, v0alpha.ContentEditorDataRes](
			httpClient,
			baseURL+LearnContentEditorDataProcedure,
			opts...,
		),
		update: connect_go.NewClient[v0alpha.UpdateReq, v0alpha.UpdateRes](
			httpClient,
			baseURL+LearnUpdateProcedure,
			opts...,
		),
		storeStaticImage: connect_go.NewClient[v0alpha.StoreStaticImageReq, v0alpha.StoreStaticImageRes](
			httpClient,
			baseURL+LearnStoreStaticImageProcedure,
			opts...,
		),
		uploadDynamicScreenshot: connect_go.NewClient[v0alpha.UploadDynamicScreenshotReq, v0alpha.UploadDynamicScreenshotRes](
			httpClient,
			baseURL+LearnUploadDynamicScreenshotProcedure,
			opts...,
		),
		deleteStandalone: connect_go.NewClient[v0alpha.DeleteStandaloneReq, v0alpha.DeleteStandaloneRes](
			httpClient,
			baseURL+LearnDeleteStandaloneProcedure,
			opts...,
		),
		snippet: connect_go.NewClient[v0alpha.SnippetReq, v0alpha.SnippetRes](
			httpClient,
			baseURL+LearnSnippetProcedure,
			opts...,
		),
		deleteLearnPages: connect_go.NewClient[v0alpha.DeleteLearnPagesReq, v0alpha.DeleteLearnPagesRes](
			httpClient,
			baseURL+LearnDeleteLearnPagesProcedure,
			opts...,
		),
		createEditVersion: connect_go.NewClient[v0alpha.CreateEditVersionReq, v0alpha.CreateEditVersionRes](
			httpClient,
			baseURL+LearnCreateEditVersionProcedure,
			opts...,
		),
		publishVersion: connect_go.NewClient[v0alpha.PublishVersionReq, v0alpha.PublishVersionRes](
			httpClient,
			baseURL+LearnPublishVersionProcedure,
			opts...,
		),
		contentByVersion: connect_go.NewClient[v0alpha.ContentByVersionReq, v0alpha.ContentRes](
			httpClient,
			baseURL+LearnContentByVersionProcedure,
			opts...,
		),
		updateByVersion: connect_go.NewClient[v0alpha.UpdateByVersionReq, v0alpha.UpdateRes](
			httpClient,
			baseURL+LearnUpdateByVersionProcedure,
			opts...,
		),
		listSearchResultsByVersion: connect_go.NewClient[v0alpha.SearchContentByVersionReq, v0alpha.SearchRes](
			httpClient,
			baseURL+LearnListSearchResultsByVersionProcedure,
			opts...,
		),
		reviewFileVersions: connect_go.NewClient[v0alpha.ReviewFileVersionsReq, v0alpha.ReviewFileVersionsRes](
			httpClient,
			baseURL+LearnReviewFileVersionsProcedure,
			opts...,
		),
		reviewVersion: connect_go.NewClient[v0alpha.ReviewVersionReq, v0alpha.ReviewVersionRes](
			httpClient,
			baseURL+LearnReviewVersionProcedure,
			opts...,
		),
		exportManyStream: connect_go.NewClient[v0alpha.ExportManyReq, v0alpha.ExportRes](
			httpClient,
			baseURL+LearnExportManyStreamProcedure,
			opts...,
		),
		listVersions: connect_go.NewClient[v0alpha.ListVersionsReq, v0alpha.ListVersionsRes](
			httpClient,
			baseURL+LearnListVersionsProcedure,
			opts...,
		),
		reviewVersionStream: connect_go.NewClient[v0alpha.ReviewVersionReq, v0alpha.ReviewVersionRes](
			httpClient,
			baseURL+LearnReviewVersionStreamProcedure,
			opts...,
		),
		deleteVersion: connect_go.NewClient[v0alpha.DeleteVersionReq, v0alpha.DeleteVersionRes](
			httpClient,
			baseURL+LearnDeleteVersionProcedure,
			opts...,
		),
		uploadStaticImage: connect_go.NewClient[v0alpha.UploadStaticImageReq, v0alpha.UploadStaticImageRes](
			httpClient,
			baseURL+LearnUploadStaticImageProcedure,
			opts...,
		),
		getUpdateUrl: connect_go.NewClient[v0alpha.GetUpdateUrlReq, v0alpha.GetUpdateUrlRes](
			httpClient,
			baseURL+LearnGetUpdateUrlProcedure,
			opts...,
		),
	}
}

// learnClient implements LearnClient.
type learnClient struct {
	exist                      *connect_go.Client[v0alpha.ExistReq, v0alpha.ExistRes]
	content                    *connect_go.Client[v0alpha.ContentReq, v0alpha.ContentRes]
	exportMany                 *connect_go.Client[v0alpha.ExportManyReq, v0alpha.ExportRes]
	searchContent              *connect_go.Client[v0alpha.SearchContentReq, v0alpha.SearchRes]
	listSearchResults          *connect_go.Client[v0alpha.SearchContentReq, v0alpha.SearchRes]
	standalone                 *connect_go.Client[v0alpha.StandaloneReq, v0alpha.StandaloneRes]
	contentEditorData          *connect_go.Client[v0alpha.ContentEditorDataReq, v0alpha.ContentEditorDataRes]
	update                     *connect_go.Client[v0alpha.UpdateReq, v0alpha.UpdateRes]
	storeStaticImage           *connect_go.Client[v0alpha.StoreStaticImageReq, v0alpha.StoreStaticImageRes]
	uploadDynamicScreenshot    *connect_go.Client[v0alpha.UploadDynamicScreenshotReq, v0alpha.UploadDynamicScreenshotRes]
	deleteStandalone           *connect_go.Client[v0alpha.DeleteStandaloneReq, v0alpha.DeleteStandaloneRes]
	snippet                    *connect_go.Client[v0alpha.SnippetReq, v0alpha.SnippetRes]
	deleteLearnPages           *connect_go.Client[v0alpha.DeleteLearnPagesReq, v0alpha.DeleteLearnPagesRes]
	createEditVersion          *connect_go.Client[v0alpha.CreateEditVersionReq, v0alpha.CreateEditVersionRes]
	publishVersion             *connect_go.Client[v0alpha.PublishVersionReq, v0alpha.PublishVersionRes]
	contentByVersion           *connect_go.Client[v0alpha.ContentByVersionReq, v0alpha.ContentRes]
	updateByVersion            *connect_go.Client[v0alpha.UpdateByVersionReq, v0alpha.UpdateRes]
	listSearchResultsByVersion *connect_go.Client[v0alpha.SearchContentByVersionReq, v0alpha.SearchRes]
	reviewFileVersions         *connect_go.Client[v0alpha.ReviewFileVersionsReq, v0alpha.ReviewFileVersionsRes]
	reviewVersion              *connect_go.Client[v0alpha.ReviewVersionReq, v0alpha.ReviewVersionRes]
	exportManyStream           *connect_go.Client[v0alpha.ExportManyReq, v0alpha.ExportRes]
	listVersions               *connect_go.Client[v0alpha.ListVersionsReq, v0alpha.ListVersionsRes]
	reviewVersionStream        *connect_go.Client[v0alpha.ReviewVersionReq, v0alpha.ReviewVersionRes]
	deleteVersion              *connect_go.Client[v0alpha.DeleteVersionReq, v0alpha.DeleteVersionRes]
	uploadStaticImage          *connect_go.Client[v0alpha.UploadStaticImageReq, v0alpha.UploadStaticImageRes]
	getUpdateUrl               *connect_go.Client[v0alpha.GetUpdateUrlReq, v0alpha.GetUpdateUrlRes]
}

// Exist calls api.v0alpha.Learn.Exist.
func (c *learnClient) Exist(ctx context.Context, req *connect_go.Request[v0alpha.ExistReq]) (*connect_go.Response[v0alpha.ExistRes], error) {
	return c.exist.CallUnary(ctx, req)
}

// Content calls api.v0alpha.Learn.Content.
func (c *learnClient) Content(ctx context.Context, req *connect_go.Request[v0alpha.ContentReq]) (*connect_go.Response[v0alpha.ContentRes], error) {
	return c.content.CallUnary(ctx, req)
}

// ExportMany calls api.v0alpha.Learn.ExportMany.
func (c *learnClient) ExportMany(ctx context.Context, req *connect_go.Request[v0alpha.ExportManyReq]) (*connect_go.Response[v0alpha.ExportRes], error) {
	return c.exportMany.CallUnary(ctx, req)
}

// SearchContent calls api.v0alpha.Learn.SearchContent.
func (c *learnClient) SearchContent(ctx context.Context, req *connect_go.Request[v0alpha.SearchContentReq]) (*connect_go.Response[v0alpha.SearchRes], error) {
	return c.searchContent.CallUnary(ctx, req)
}

// ListSearchResults calls api.v0alpha.Learn.ListSearchResults.
func (c *learnClient) ListSearchResults(ctx context.Context, req *connect_go.Request[v0alpha.SearchContentReq]) (*connect_go.ServerStreamForClient[v0alpha.SearchRes], error) {
	return c.listSearchResults.CallServerStream(ctx, req)
}

// Standalone calls api.v0alpha.Learn.Standalone.
func (c *learnClient) Standalone(ctx context.Context, req *connect_go.Request[v0alpha.StandaloneReq]) (*connect_go.Response[v0alpha.StandaloneRes], error) {
	return c.standalone.CallUnary(ctx, req)
}

// ContentEditorData calls api.v0alpha.Learn.ContentEditorData.
func (c *learnClient) ContentEditorData(ctx context.Context, req *connect_go.Request[v0alpha.ContentEditorDataReq]) (*connect_go.Response[v0alpha.ContentEditorDataRes], error) {
	return c.contentEditorData.CallUnary(ctx, req)
}

// Update calls api.v0alpha.Learn.Update.
func (c *learnClient) Update(ctx context.Context, req *connect_go.Request[v0alpha.UpdateReq]) (*connect_go.Response[v0alpha.UpdateRes], error) {
	return c.update.CallUnary(ctx, req)
}

// StoreStaticImage calls api.v0alpha.Learn.StoreStaticImage.
func (c *learnClient) StoreStaticImage(ctx context.Context, req *connect_go.Request[v0alpha.StoreStaticImageReq]) (*connect_go.Response[v0alpha.StoreStaticImageRes], error) {
	return c.storeStaticImage.CallUnary(ctx, req)
}

// UploadDynamicScreenshot calls api.v0alpha.Learn.UploadDynamicScreenshot.
func (c *learnClient) UploadDynamicScreenshot(ctx context.Context, req *connect_go.Request[v0alpha.UploadDynamicScreenshotReq]) (*connect_go.Response[v0alpha.UploadDynamicScreenshotRes], error) {
	return c.uploadDynamicScreenshot.CallUnary(ctx, req)
}

// DeleteStandalone calls api.v0alpha.Learn.DeleteStandalone.
func (c *learnClient) DeleteStandalone(ctx context.Context, req *connect_go.Request[v0alpha.DeleteStandaloneReq]) (*connect_go.Response[v0alpha.DeleteStandaloneRes], error) {
	return c.deleteStandalone.CallUnary(ctx, req)
}

// Snippet calls api.v0alpha.Learn.Snippet.
func (c *learnClient) Snippet(ctx context.Context, req *connect_go.Request[v0alpha.SnippetReq]) (*connect_go.Response[v0alpha.SnippetRes], error) {
	return c.snippet.CallUnary(ctx, req)
}

// DeleteLearnPages calls api.v0alpha.Learn.DeleteLearnPages.
func (c *learnClient) DeleteLearnPages(ctx context.Context, req *connect_go.Request[v0alpha.DeleteLearnPagesReq]) (*connect_go.Response[v0alpha.DeleteLearnPagesRes], error) {
	return c.deleteLearnPages.CallUnary(ctx, req)
}

// CreateEditVersion calls api.v0alpha.Learn.CreateEditVersion.
func (c *learnClient) CreateEditVersion(ctx context.Context, req *connect_go.Request[v0alpha.CreateEditVersionReq]) (*connect_go.Response[v0alpha.CreateEditVersionRes], error) {
	return c.createEditVersion.CallUnary(ctx, req)
}

// PublishVersion calls api.v0alpha.Learn.PublishVersion.
func (c *learnClient) PublishVersion(ctx context.Context, req *connect_go.Request[v0alpha.PublishVersionReq]) (*connect_go.Response[v0alpha.PublishVersionRes], error) {
	return c.publishVersion.CallUnary(ctx, req)
}

// ContentByVersion calls api.v0alpha.Learn.ContentByVersion.
func (c *learnClient) ContentByVersion(ctx context.Context, req *connect_go.Request[v0alpha.ContentByVersionReq]) (*connect_go.Response[v0alpha.ContentRes], error) {
	return c.contentByVersion.CallUnary(ctx, req)
}

// UpdateByVersion calls api.v0alpha.Learn.UpdateByVersion.
func (c *learnClient) UpdateByVersion(ctx context.Context, req *connect_go.Request[v0alpha.UpdateByVersionReq]) (*connect_go.Response[v0alpha.UpdateRes], error) {
	return c.updateByVersion.CallUnary(ctx, req)
}

// ListSearchResultsByVersion calls api.v0alpha.Learn.ListSearchResultsByVersion.
func (c *learnClient) ListSearchResultsByVersion(ctx context.Context, req *connect_go.Request[v0alpha.SearchContentByVersionReq]) (*connect_go.ServerStreamForClient[v0alpha.SearchRes], error) {
	return c.listSearchResultsByVersion.CallServerStream(ctx, req)
}

// ReviewFileVersions calls api.v0alpha.Learn.ReviewFileVersions.
func (c *learnClient) ReviewFileVersions(ctx context.Context, req *connect_go.Request[v0alpha.ReviewFileVersionsReq]) (*connect_go.Response[v0alpha.ReviewFileVersionsRes], error) {
	return c.reviewFileVersions.CallUnary(ctx, req)
}

// ReviewVersion calls api.v0alpha.Learn.ReviewVersion.
func (c *learnClient) ReviewVersion(ctx context.Context, req *connect_go.Request[v0alpha.ReviewVersionReq]) (*connect_go.Response[v0alpha.ReviewVersionRes], error) {
	return c.reviewVersion.CallUnary(ctx, req)
}

// ExportManyStream calls api.v0alpha.Learn.ExportManyStream.
func (c *learnClient) ExportManyStream(ctx context.Context, req *connect_go.Request[v0alpha.ExportManyReq]) (*connect_go.ServerStreamForClient[v0alpha.ExportRes], error) {
	return c.exportManyStream.CallServerStream(ctx, req)
}

// ListVersions calls api.v0alpha.Learn.ListVersions.
func (c *learnClient) ListVersions(ctx context.Context, req *connect_go.Request[v0alpha.ListVersionsReq]) (*connect_go.Response[v0alpha.ListVersionsRes], error) {
	return c.listVersions.CallUnary(ctx, req)
}

// ReviewVersionStream calls api.v0alpha.Learn.ReviewVersionStream.
func (c *learnClient) ReviewVersionStream(ctx context.Context, req *connect_go.Request[v0alpha.ReviewVersionReq]) (*connect_go.ServerStreamForClient[v0alpha.ReviewVersionRes], error) {
	return c.reviewVersionStream.CallServerStream(ctx, req)
}

// DeleteVersion calls api.v0alpha.Learn.DeleteVersion.
func (c *learnClient) DeleteVersion(ctx context.Context, req *connect_go.Request[v0alpha.DeleteVersionReq]) (*connect_go.Response[v0alpha.DeleteVersionRes], error) {
	return c.deleteVersion.CallUnary(ctx, req)
}

// UploadStaticImage calls api.v0alpha.Learn.UploadStaticImage.
func (c *learnClient) UploadStaticImage(ctx context.Context, req *connect_go.Request[v0alpha.UploadStaticImageReq]) (*connect_go.Response[v0alpha.UploadStaticImageRes], error) {
	return c.uploadStaticImage.CallUnary(ctx, req)
}

// GetUpdateUrl calls api.v0alpha.Learn.GetUpdateUrl.
func (c *learnClient) GetUpdateUrl(ctx context.Context, req *connect_go.Request[v0alpha.GetUpdateUrlReq]) (*connect_go.Response[v0alpha.GetUpdateUrlRes], error) {
	return c.getUpdateUrl.CallUnary(ctx, req)
}

// LearnHandler is an implementation of the api.v0alpha.Learn service.
type LearnHandler interface {
	// check if learning page already exists
	Exist(context.Context, *connect_go.Request[v0alpha.ExistReq]) (*connect_go.Response[v0alpha.ExistRes], error)
	// retreive content from learning pages
	Content(context.Context, *connect_go.Request[v0alpha.ContentReq]) (*connect_go.Response[v0alpha.ContentRes], error)
	// exports multiple pages of the learning center markdown as PDF
	ExportMany(context.Context, *connect_go.Request[v0alpha.ExportManyReq]) (*connect_go.Response[v0alpha.ExportRes], error)
	// search content in learning pages
	// we allow all the logged in agents/admins to view search content
	SearchContent(context.Context, *connect_go.Request[v0alpha.SearchContentReq]) (*connect_go.Response[v0alpha.SearchRes], error)
	// stream search content results in learning pages
	// we allow all the logged in agents/admins to view search content
	ListSearchResults(context.Context, *connect_go.Request[v0alpha.SearchContentReq], *connect_go.ServerStream[v0alpha.SearchRes]) error
	// get standalone articles from learning pages
	// we allow all the logged in agents/admins to view standalone articles
	Standalone(context.Context, *connect_go.Request[v0alpha.StandaloneReq]) (*connect_go.Response[v0alpha.StandaloneRes], error)
	// retrieve user who edited the content last
	ContentEditorData(context.Context, *connect_go.Request[v0alpha.ContentEditorDataReq]) (*connect_go.Response[v0alpha.ContentEditorDataRes], error)
	// update contents for learning pages
	Update(context.Context, *connect_go.Request[v0alpha.UpdateReq]) (*connect_go.Response[v0alpha.UpdateRes], error)
	// upload url for static images
	StoreStaticImage(context.Context, *connect_go.Request[v0alpha.StoreStaticImageReq]) (*connect_go.Response[v0alpha.StoreStaticImageRes], error)
	// upload dynamic learning image screenshot
	UploadDynamicScreenshot(context.Context, *connect_go.Request[v0alpha.UploadDynamicScreenshotReq]) (*connect_go.Response[v0alpha.UploadDynamicScreenshotRes], error)
	// delete standalone articles from learning pages
	DeleteStandalone(context.Context, *connect_go.Request[v0alpha.DeleteStandaloneReq]) (*connect_go.Response[v0alpha.DeleteStandaloneRes], error)
	// get snippet content from learning pages
	// we allow all the logged in agents/admins to view snippet content
	Snippet(context.Context, *connect_go.Request[v0alpha.SnippetReq]) (*connect_go.Response[v0alpha.SnippetRes], error)
	// delete learning pages
	DeleteLearnPages(context.Context, *connect_go.Request[v0alpha.DeleteLearnPagesReq]) (*connect_go.Response[v0alpha.DeleteLearnPagesRes], error)
	// create edit version
	CreateEditVersion(context.Context, *connect_go.Request[v0alpha.CreateEditVersionReq]) (*connect_go.Response[v0alpha.CreateEditVersionRes], error)
	// publish version
	PublishVersion(context.Context, *connect_go.Request[v0alpha.PublishVersionReq]) (*connect_go.Response[v0alpha.PublishVersionRes], error)
	// retrieve content from learning pages based on version
	ContentByVersion(context.Context, *connect_go.Request[v0alpha.ContentByVersionReq]) (*connect_go.Response[v0alpha.ContentRes], error)
	// update contents for learning pages by version
	UpdateByVersion(context.Context, *connect_go.Request[v0alpha.UpdateByVersionReq]) (*connect_go.Response[v0alpha.UpdateRes], error)
	// stream search content results in learning pages by version
	// we allow all the logged in agents/admins to view search content
	ListSearchResultsByVersion(context.Context, *connect_go.Request[v0alpha.SearchContentByVersionReq], *connect_go.ServerStream[v0alpha.SearchRes]) error
	// return diff by comparing file contens from any version
	ReviewFileVersions(context.Context, *connect_go.Request[v0alpha.ReviewFileVersionsReq]) (*connect_go.Response[v0alpha.ReviewFileVersionsRes], error)
	// returns list of file details after comparing different versions
	ReviewVersion(context.Context, *connect_go.Request[v0alpha.ReviewVersionReq]) (*connect_go.Response[v0alpha.ReviewVersionRes], error)
	// exports multiple pages of the learning center markdown as PDF file stream
	ExportManyStream(context.Context, *connect_go.Request[v0alpha.ExportManyReq], *connect_go.ServerStream[v0alpha.ExportRes]) error
	// list all the different versions
	ListVersions(context.Context, *connect_go.Request[v0alpha.ListVersionsReq]) (*connect_go.Response[v0alpha.ListVersionsRes], error)
	// returns urls as a stream after comparing version contents between both versions
	ReviewVersionStream(context.Context, *connect_go.Request[v0alpha.ReviewVersionReq], *connect_go.ServerStream[v0alpha.ReviewVersionRes]) error
	// delete version from learn
	DeleteVersion(context.Context, *connect_go.Request[v0alpha.DeleteVersionReq]) (*connect_go.Response[v0alpha.DeleteVersionRes], error)
	// upload image for learning articles
	UploadStaticImage(context.Context, *connect_go.Request[v0alpha.UploadStaticImageReq]) (*connect_go.Response[v0alpha.UploadStaticImageRes], error)
	// upload url for file updates
	GetUpdateUrl(context.Context, *connect_go.Request[v0alpha.GetUpdateUrlReq]) (*connect_go.Response[v0alpha.GetUpdateUrlRes], error)
}

// NewLearnHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLearnHandler(svc LearnHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	learnExistHandler := connect_go.NewUnaryHandler(
		LearnExistProcedure,
		svc.Exist,
		opts...,
	)
	learnContentHandler := connect_go.NewUnaryHandler(
		LearnContentProcedure,
		svc.Content,
		opts...,
	)
	learnExportManyHandler := connect_go.NewUnaryHandler(
		LearnExportManyProcedure,
		svc.ExportMany,
		opts...,
	)
	learnSearchContentHandler := connect_go.NewUnaryHandler(
		LearnSearchContentProcedure,
		svc.SearchContent,
		opts...,
	)
	learnListSearchResultsHandler := connect_go.NewServerStreamHandler(
		LearnListSearchResultsProcedure,
		svc.ListSearchResults,
		opts...,
	)
	learnStandaloneHandler := connect_go.NewUnaryHandler(
		LearnStandaloneProcedure,
		svc.Standalone,
		opts...,
	)
	learnContentEditorDataHandler := connect_go.NewUnaryHandler(
		LearnContentEditorDataProcedure,
		svc.ContentEditorData,
		opts...,
	)
	learnUpdateHandler := connect_go.NewUnaryHandler(
		LearnUpdateProcedure,
		svc.Update,
		opts...,
	)
	learnStoreStaticImageHandler := connect_go.NewUnaryHandler(
		LearnStoreStaticImageProcedure,
		svc.StoreStaticImage,
		opts...,
	)
	learnUploadDynamicScreenshotHandler := connect_go.NewUnaryHandler(
		LearnUploadDynamicScreenshotProcedure,
		svc.UploadDynamicScreenshot,
		opts...,
	)
	learnDeleteStandaloneHandler := connect_go.NewUnaryHandler(
		LearnDeleteStandaloneProcedure,
		svc.DeleteStandalone,
		opts...,
	)
	learnSnippetHandler := connect_go.NewUnaryHandler(
		LearnSnippetProcedure,
		svc.Snippet,
		opts...,
	)
	learnDeleteLearnPagesHandler := connect_go.NewUnaryHandler(
		LearnDeleteLearnPagesProcedure,
		svc.DeleteLearnPages,
		opts...,
	)
	learnCreateEditVersionHandler := connect_go.NewUnaryHandler(
		LearnCreateEditVersionProcedure,
		svc.CreateEditVersion,
		opts...,
	)
	learnPublishVersionHandler := connect_go.NewUnaryHandler(
		LearnPublishVersionProcedure,
		svc.PublishVersion,
		opts...,
	)
	learnContentByVersionHandler := connect_go.NewUnaryHandler(
		LearnContentByVersionProcedure,
		svc.ContentByVersion,
		opts...,
	)
	learnUpdateByVersionHandler := connect_go.NewUnaryHandler(
		LearnUpdateByVersionProcedure,
		svc.UpdateByVersion,
		opts...,
	)
	learnListSearchResultsByVersionHandler := connect_go.NewServerStreamHandler(
		LearnListSearchResultsByVersionProcedure,
		svc.ListSearchResultsByVersion,
		opts...,
	)
	learnReviewFileVersionsHandler := connect_go.NewUnaryHandler(
		LearnReviewFileVersionsProcedure,
		svc.ReviewFileVersions,
		opts...,
	)
	learnReviewVersionHandler := connect_go.NewUnaryHandler(
		LearnReviewVersionProcedure,
		svc.ReviewVersion,
		opts...,
	)
	learnExportManyStreamHandler := connect_go.NewServerStreamHandler(
		LearnExportManyStreamProcedure,
		svc.ExportManyStream,
		opts...,
	)
	learnListVersionsHandler := connect_go.NewUnaryHandler(
		LearnListVersionsProcedure,
		svc.ListVersions,
		opts...,
	)
	learnReviewVersionStreamHandler := connect_go.NewServerStreamHandler(
		LearnReviewVersionStreamProcedure,
		svc.ReviewVersionStream,
		opts...,
	)
	learnDeleteVersionHandler := connect_go.NewUnaryHandler(
		LearnDeleteVersionProcedure,
		svc.DeleteVersion,
		opts...,
	)
	learnUploadStaticImageHandler := connect_go.NewUnaryHandler(
		LearnUploadStaticImageProcedure,
		svc.UploadStaticImage,
		opts...,
	)
	learnGetUpdateUrlHandler := connect_go.NewUnaryHandler(
		LearnGetUpdateUrlProcedure,
		svc.GetUpdateUrl,
		opts...,
	)
	return "/api.v0alpha.Learn/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LearnExistProcedure:
			learnExistHandler.ServeHTTP(w, r)
		case LearnContentProcedure:
			learnContentHandler.ServeHTTP(w, r)
		case LearnExportManyProcedure:
			learnExportManyHandler.ServeHTTP(w, r)
		case LearnSearchContentProcedure:
			learnSearchContentHandler.ServeHTTP(w, r)
		case LearnListSearchResultsProcedure:
			learnListSearchResultsHandler.ServeHTTP(w, r)
		case LearnStandaloneProcedure:
			learnStandaloneHandler.ServeHTTP(w, r)
		case LearnContentEditorDataProcedure:
			learnContentEditorDataHandler.ServeHTTP(w, r)
		case LearnUpdateProcedure:
			learnUpdateHandler.ServeHTTP(w, r)
		case LearnStoreStaticImageProcedure:
			learnStoreStaticImageHandler.ServeHTTP(w, r)
		case LearnUploadDynamicScreenshotProcedure:
			learnUploadDynamicScreenshotHandler.ServeHTTP(w, r)
		case LearnDeleteStandaloneProcedure:
			learnDeleteStandaloneHandler.ServeHTTP(w, r)
		case LearnSnippetProcedure:
			learnSnippetHandler.ServeHTTP(w, r)
		case LearnDeleteLearnPagesProcedure:
			learnDeleteLearnPagesHandler.ServeHTTP(w, r)
		case LearnCreateEditVersionProcedure:
			learnCreateEditVersionHandler.ServeHTTP(w, r)
		case LearnPublishVersionProcedure:
			learnPublishVersionHandler.ServeHTTP(w, r)
		case LearnContentByVersionProcedure:
			learnContentByVersionHandler.ServeHTTP(w, r)
		case LearnUpdateByVersionProcedure:
			learnUpdateByVersionHandler.ServeHTTP(w, r)
		case LearnListSearchResultsByVersionProcedure:
			learnListSearchResultsByVersionHandler.ServeHTTP(w, r)
		case LearnReviewFileVersionsProcedure:
			learnReviewFileVersionsHandler.ServeHTTP(w, r)
		case LearnReviewVersionProcedure:
			learnReviewVersionHandler.ServeHTTP(w, r)
		case LearnExportManyStreamProcedure:
			learnExportManyStreamHandler.ServeHTTP(w, r)
		case LearnListVersionsProcedure:
			learnListVersionsHandler.ServeHTTP(w, r)
		case LearnReviewVersionStreamProcedure:
			learnReviewVersionStreamHandler.ServeHTTP(w, r)
		case LearnDeleteVersionProcedure:
			learnDeleteVersionHandler.ServeHTTP(w, r)
		case LearnUploadStaticImageProcedure:
			learnUploadStaticImageHandler.ServeHTTP(w, r)
		case LearnGetUpdateUrlProcedure:
			learnGetUpdateUrlHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLearnHandler returns CodeUnimplemented from all methods.
type UnimplementedLearnHandler struct{}

func (UnimplementedLearnHandler) Exist(context.Context, *connect_go.Request[v0alpha.ExistReq]) (*connect_go.Response[v0alpha.ExistRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Learn.Exist is not implemented"))
}

func (UnimplementedLearnHandler) Content(context.Context, *connect_go.Request[v0alpha.ContentReq]) (*connect_go.Response[v0alpha.ContentRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Learn.Content is not implemented"))
}

func (UnimplementedLearnHandler) ExportMany(context.Context, *connect_go.Request[v0alpha.ExportManyReq]) (*connect_go.Response[v0alpha.ExportRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Learn.ExportMany is not implemented"))
}

func (UnimplementedLearnHandler) SearchContent(context.Context, *connect_go.Request[v0alpha.SearchContentReq]) (*connect_go.Response[v0alpha.SearchRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Learn.SearchContent is not implemented"))
}

func (UnimplementedLearnHandler) ListSearchResults(context.Context, *connect_go.Request[v0alpha.SearchContentReq], *connect_go.ServerStream[v0alpha.SearchRes]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Learn.ListSearchResults is not implemented"))
}

func (UnimplementedLearnHandler) Standalone(context.Context, *connect_go.Request[v0alpha.StandaloneReq]) (*connect_go.Response[v0alpha.StandaloneRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Learn.Standalone is not implemented"))
}

func (UnimplementedLearnHandler) ContentEditorData(context.Context, *connect_go.Request[v0alpha.ContentEditorDataReq]) (*connect_go.Response[v0alpha.ContentEditorDataRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Learn.ContentEditorData is not implemented"))
}

func (UnimplementedLearnHandler) Update(context.Context, *connect_go.Request[v0alpha.UpdateReq]) (*connect_go.Response[v0alpha.UpdateRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Learn.Update is not implemented"))
}

func (UnimplementedLearnHandler) StoreStaticImage(context.Context, *connect_go.Request[v0alpha.StoreStaticImageReq]) (*connect_go.Response[v0alpha.StoreStaticImageRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Learn.StoreStaticImage is not implemented"))
}

func (UnimplementedLearnHandler) UploadDynamicScreenshot(context.Context, *connect_go.Request[v0alpha.UploadDynamicScreenshotReq]) (*connect_go.Response[v0alpha.UploadDynamicScreenshotRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Learn.UploadDynamicScreenshot is not implemented"))
}

func (UnimplementedLearnHandler) DeleteStandalone(context.Context, *connect_go.Request[v0alpha.DeleteStandaloneReq]) (*connect_go.Response[v0alpha.DeleteStandaloneRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Learn.DeleteStandalone is not implemented"))
}

func (UnimplementedLearnHandler) Snippet(context.Context, *connect_go.Request[v0alpha.SnippetReq]) (*connect_go.Response[v0alpha.SnippetRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Learn.Snippet is not implemented"))
}

func (UnimplementedLearnHandler) DeleteLearnPages(context.Context, *connect_go.Request[v0alpha.DeleteLearnPagesReq]) (*connect_go.Response[v0alpha.DeleteLearnPagesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Learn.DeleteLearnPages is not implemented"))
}

func (UnimplementedLearnHandler) CreateEditVersion(context.Context, *connect_go.Request[v0alpha.CreateEditVersionReq]) (*connect_go.Response[v0alpha.CreateEditVersionRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Learn.CreateEditVersion is not implemented"))
}

func (UnimplementedLearnHandler) PublishVersion(context.Context, *connect_go.Request[v0alpha.PublishVersionReq]) (*connect_go.Response[v0alpha.PublishVersionRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Learn.PublishVersion is not implemented"))
}

func (UnimplementedLearnHandler) ContentByVersion(context.Context, *connect_go.Request[v0alpha.ContentByVersionReq]) (*connect_go.Response[v0alpha.ContentRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Learn.ContentByVersion is not implemented"))
}

func (UnimplementedLearnHandler) UpdateByVersion(context.Context, *connect_go.Request[v0alpha.UpdateByVersionReq]) (*connect_go.Response[v0alpha.UpdateRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Learn.UpdateByVersion is not implemented"))
}

func (UnimplementedLearnHandler) ListSearchResultsByVersion(context.Context, *connect_go.Request[v0alpha.SearchContentByVersionReq], *connect_go.ServerStream[v0alpha.SearchRes]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Learn.ListSearchResultsByVersion is not implemented"))
}

func (UnimplementedLearnHandler) ReviewFileVersions(context.Context, *connect_go.Request[v0alpha.ReviewFileVersionsReq]) (*connect_go.Response[v0alpha.ReviewFileVersionsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Learn.ReviewFileVersions is not implemented"))
}

func (UnimplementedLearnHandler) ReviewVersion(context.Context, *connect_go.Request[v0alpha.ReviewVersionReq]) (*connect_go.Response[v0alpha.ReviewVersionRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Learn.ReviewVersion is not implemented"))
}

func (UnimplementedLearnHandler) ExportManyStream(context.Context, *connect_go.Request[v0alpha.ExportManyReq], *connect_go.ServerStream[v0alpha.ExportRes]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Learn.ExportManyStream is not implemented"))
}

func (UnimplementedLearnHandler) ListVersions(context.Context, *connect_go.Request[v0alpha.ListVersionsReq]) (*connect_go.Response[v0alpha.ListVersionsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Learn.ListVersions is not implemented"))
}

func (UnimplementedLearnHandler) ReviewVersionStream(context.Context, *connect_go.Request[v0alpha.ReviewVersionReq], *connect_go.ServerStream[v0alpha.ReviewVersionRes]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Learn.ReviewVersionStream is not implemented"))
}

func (UnimplementedLearnHandler) DeleteVersion(context.Context, *connect_go.Request[v0alpha.DeleteVersionReq]) (*connect_go.Response[v0alpha.DeleteVersionRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Learn.DeleteVersion is not implemented"))
}

func (UnimplementedLearnHandler) UploadStaticImage(context.Context, *connect_go.Request[v0alpha.UploadStaticImageReq]) (*connect_go.Response[v0alpha.UploadStaticImageRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Learn.UploadStaticImage is not implemented"))
}

func (UnimplementedLearnHandler) GetUpdateUrl(context.Context, *connect_go.Request[v0alpha.GetUpdateUrlReq]) (*connect_go.Response[v0alpha.GetUpdateUrlRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v0alpha.Learn.GetUpdateUrl is not implemented"))
}
