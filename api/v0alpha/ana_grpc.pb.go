// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: api/v0alpha/ana.proto

package v0alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Ana_GetSpecifiedVisualizations_FullMethodName = "/api.v0alpha.Ana/GetSpecifiedVisualizations"
	Ana_RegisterAccount_FullMethodName            = "/api.v0alpha.Ana/RegisterAccount"
	Ana_SetWeeks_FullMethodName                   = "/api.v0alpha.Ana/SetWeeks"
	Ana_SetDefaultTimeFilter_FullMethodName       = "/api.v0alpha.Ana/SetDefaultTimeFilter"
	Ana_SetDefaultDashboard_FullMethodName        = "/api.v0alpha.Ana/SetDefaultDashboard"
	Ana_GetAccount_FullMethodName                 = "/api.v0alpha.Ana/GetAccount"
	Ana_GetSpecifiedAccount_FullMethodName        = "/api.v0alpha.Ana/GetSpecifiedAccount"
	Ana_GetAuthorizedAnalyticsLink_FullMethodName = "/api.v0alpha.Ana/GetAuthorizedAnalyticsLink"
	Ana_GenerateMonthlyBilling_FullMethodName     = "/api.v0alpha.Ana/GenerateMonthlyBilling"
	Ana_GetTimeZone_FullMethodName                = "/api.v0alpha.Ana/GetTimeZone"
	Ana_SetTimeZone_FullMethodName                = "/api.v0alpha.Ana/SetTimeZone"
	Ana_CopyDashViz_FullMethodName                = "/api.v0alpha.Ana/CopyDashViz"
	Ana_GetSpecifiedBillingSummary_FullMethodName = "/api.v0alpha.Ana/GetSpecifiedBillingSummary"
	Ana_GetBillingSummary_FullMethodName          = "/api.v0alpha.Ana/GetBillingSummary"
	Ana_EnableCustomReports_FullMethodName        = "/api.v0alpha.Ana/EnableCustomReports"
	Ana_DisableCustomReports_FullMethodName       = "/api.v0alpha.Ana/DisableCustomReports"
	Ana_MakeAdoptable_FullMethodName              = "/api.v0alpha.Ana/MakeAdoptable"
	Ana_MakeUnadoptable_FullMethodName            = "/api.v0alpha.Ana/MakeUnadoptable"
	Ana_AdoptAnaAccount_FullMethodName            = "/api.v0alpha.Ana/AdoptAnaAccount"
	Ana_DisownAnaAccount_FullMethodName           = "/api.v0alpha.Ana/DisownAnaAccount"
	Ana_GetAccessibleClients_FullMethodName       = "/api.v0alpha.Ana/GetAccessibleClients"
	Ana_GetFamily_FullMethodName                  = "/api.v0alpha.Ana/GetFamily"
	Ana_GetAllowedDataVisibility_FullMethodName   = "/api.v0alpha.Ana/GetAllowedDataVisibility"
	Ana_GetCurrentDataVisibility_FullMethodName   = "/api.v0alpha.Ana/GetCurrentDataVisibility"
	Ana_GetIndicesVisibility_FullMethodName       = "/api.v0alpha.Ana/GetIndicesVisibility"
	Ana_GetAuditableDataVisibility_FullMethodName = "/api.v0alpha.Ana/GetAuditableDataVisibility"
	Ana_GetOrganizationNames_FullMethodName       = "/api.v0alpha.Ana/GetOrganizationNames"
	Ana_GenerateVizDataById_FullMethodName        = "/api.v0alpha.Ana/GenerateVizDataById"
	Ana_GetClientStatus_FullMethodName            = "/api.v0alpha.Ana/GetClientStatus"
	Ana_ReloadClientData_FullMethodName           = "/api.v0alpha.Ana/ReloadClientData"
	Ana_ListVisualizationsLegacy_FullMethodName   = "/api.v0alpha.Ana/ListVisualizationsLegacy"
)

// AnaClient is the client API for Ana service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnaClient interface {
	// gets all visualizations for a specific client
	GetSpecifiedVisualizations(ctx context.Context, in *GetSpecifiedVisualizationsReq, opts ...grpc.CallOption) (*Visualizations, error)
	// Registers a new AnaAccoun based on org_id
	// The method will return the newly create AnaAccount
	// on the response message AnaAccount.
	// Required Permissions:
	//
	//	EDIT_ADMIN_CLIENT_PREFERENCES
	RegisterAccount(ctx context.Context, in *RegisterAccountReq, opts ...grpc.CallOption) (*AnaAccount, error)
	// sets the length of analytics history the client can view
	SetWeeks(ctx context.Context, in *SetWeeksReq, opts ...grpc.CallOption) (*SetWeeksRes, error)
	// set default time filter for given ana account
	// org.Permission_EDIT_CLIENT_PREFERENCES
	SetDefaultTimeFilter(ctx context.Context, in *SetDefaultTimeFilterReq, opts ...grpc.CallOption) (*SetDefaultTimeFilterRes, error)
	// sets the dashboard that is shown by default for neo
	// org.Permission_EDIT_CLIENT_PREFERENCES
	SetDefaultDashboard(ctx context.Context, in *SetDefaultDashboardReq, opts ...grpc.CallOption) (*SetDefaultDashboardRes, error)
	// gets account details for the client
	// org.Permission_VIEW_REPORTS
	GetAccount(ctx context.Context, in *GetAccountReq, opts ...grpc.CallOption) (*AnaAccount, error)
	// gets account details using the org_id provided
	GetSpecifiedAccount(ctx context.Context, in *GetSpecifiedAccountReq, opts ...grpc.CallOption) (*AnaAccount, error)
	// Gets an authorized url for the clients BI analytics page
	GetAuthorizedAnalyticsLink(ctx context.Context, in *GetAuthorizedAnalyticsLinkReq, opts ...grpc.CallOption) (*GetAuthorizedAnalyticsLinkRes, error)
	// creates and returns a url to download billing for the month provided or the previous month if none is provided
	// org.Permission_VIEW_BILLING
	GenerateMonthlyBilling(ctx context.Context, in *GenerateMonthlyBillingReq, opts ...grpc.CallOption) (*GenerateMonthlyBillingRes, error)
	// gets the ana_account timezone for the client
	// org.Permission_VIEW_REPORTS
	GetTimeZone(ctx context.Context, in *GetTimeZoneReq, opts ...grpc.CallOption) (*TimeZone, error)
	// updates the timezone for the account
	// org.Permission_VIEW_REPORTS
	SetTimeZone(ctx context.Context, in *SetTimeZoneReq, opts ...grpc.CallOption) (*SetTimeZoneRes, error)
	// copies the reports (dashboards legacy and visualizations legacy)
	// corresponding with the ids provided
	CopyDashViz(ctx context.Context, in *CopyDashVizReq, opts ...grpc.CallOption) (*CopyDashVizRes, error)
	// returns a summary of all billing factors for the specified client, whether client is pro, and which of those features contribute to making the client pro
	GetSpecifiedBillingSummary(ctx context.Context, in *GetSpecifiedBillingSummaryReq, opts ...grpc.CallOption) (*BillingSummary, error)
	// returns a summary of all billing factors for the client, whether client is
	// pro, and which of those features contribute to making the client pro
	GetBillingSummary(ctx context.Context, in *GetBillingSummaryReq, opts ...grpc.CallOption) (*BillingSummary, error)
	// enable custom report usage for the client
	// org.Permission_EDIT_CLIENT_PREFERENCES
	EnableCustomReports(ctx context.Context, in *SetCustomReportsEnabledReq, opts ...grpc.CallOption) (*SetCustomReportsEnabledRes, error)
	// disable custom report usage for the client
	// org.Permission_EDIT_CLIENT_PREFERENCES
	DisableCustomReports(ctx context.Context, in *SetCustomReportsEnabledReq, opts ...grpc.CallOption) (*SetCustomReportsEnabledRes, error)
	// allow the client to be adopted by another account
	// org.Permission_EDIT_CLIENT_PREFERENCES
	MakeAdoptable(ctx context.Context, in *MakeAdoptableReq, opts ...grpc.CallOption) (*MakeAdoptableRes, error)
	// disallow other accounts from adopting the client
	// org.Permission_EDIT_CLIENT_PREFERENCES
	MakeUnadoptable(ctx context.Context, in *MakeAdoptableReq, opts ...grpc.CallOption) (*MakeAdoptableRes, error)
	// allow the parent to view the data of the adoptable child
	AdoptAnaAccount(ctx context.Context, in *SetAnaAccountRelationReq, opts ...grpc.CallOption) (*SetAnaAccountRelationRes, error)
	// disallow the parent from viewing the data of the child
	DisownAnaAccount(ctx context.Context, in *SetAnaAccountRelationReq, opts ...grpc.CallOption) (*SetAnaAccountRelationRes, error)
	// gets all clients that can be viewed by the client including the client
	GetAccessibleClients(ctx context.Context, in *GetAccessibleClientsReq, opts ...grpc.CallOption) (*SimpleRelations, error)
	// gets all relations in which the client is involved grouped by whether the
	// client is the parent or child account
	GetFamily(ctx context.Context, in *GetFamilyReq, opts ...grpc.CallOption) (*Family, error)
	// gets the client's data visibility as defined in the database (source of
	// truth); internal use only
	GetAllowedDataVisibility(ctx context.Context, in *GetVisibilityReq, opts ...grpc.CallOption) (*DataVisibility, error)
	// gets the client's data visibility as is evident from the elasticsearch
	// indices structure; internal use only
	GetCurrentDataVisibility(ctx context.Context, in *GetVisibilityReq, opts ...grpc.CallOption) (*DataVisibility, error)
	// gets a visibility summary from the perspective of the elasticsearch
	// indices; internal use only
	GetIndicesVisibility(ctx context.Context, in *GetVisibilityReq, opts ...grpc.CallOption) (*IndicesVisibility, error)
	// gets the client's data visibility as exists in the elasticsearch data;
	// internal use only
	GetAuditableDataVisibility(ctx context.Context, in *GetVisibilityReq, opts ...grpc.CallOption) (*DataVisibility, error)
	// gets a map of client sids to organization names
	GetOrganizationNames(ctx context.Context, in *GetOrganizationNamesReq, opts ...grpc.CallOption) (*GetOrganizationNamesRes, error)
	// generate visualization data for the id
	GenerateVizDataById(ctx context.Context, in *GenerateVizDataByIdReq, opts ...grpc.CallOption) (*GenerateVizDataByIdRes, error)
	// Gets client's data status
	// Data status is the status of calls loaded in elasticsearch
	// against all calls in the database that are within the clients weeks of data setting
	// This method requires a client sid
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	GetClientStatus(ctx context.Context, in *GetClientStatusReq, opts ...grpc.CallOption) (*GetClientStatusResp, error)
	// Reloads client's data
	// This loads calls from the database into elasticsearch
	// This method requires a client sid
	// Required permissions:
	//
	//	WIP - DEV_OPS
	ReloadClientData(ctx context.Context, in *ReloadClientDataReq, opts ...grpc.CallOption) (*ReloadClientDataResp, error)
	// list all clients visualizations id and title
	ListVisualizationsLegacy(ctx context.Context, in *ListVisualizationsLegacyReq, opts ...grpc.CallOption) (*ListVisualizationsLegacyRes, error)
}

type anaClient struct {
	cc grpc.ClientConnInterface
}

func NewAnaClient(cc grpc.ClientConnInterface) AnaClient {
	return &anaClient{cc}
}

func (c *anaClient) GetSpecifiedVisualizations(ctx context.Context, in *GetSpecifiedVisualizationsReq, opts ...grpc.CallOption) (*Visualizations, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Visualizations)
	err := c.cc.Invoke(ctx, Ana_GetSpecifiedVisualizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) RegisterAccount(ctx context.Context, in *RegisterAccountReq, opts ...grpc.CallOption) (*AnaAccount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnaAccount)
	err := c.cc.Invoke(ctx, Ana_RegisterAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) SetWeeks(ctx context.Context, in *SetWeeksReq, opts ...grpc.CallOption) (*SetWeeksRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetWeeksRes)
	err := c.cc.Invoke(ctx, Ana_SetWeeks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) SetDefaultTimeFilter(ctx context.Context, in *SetDefaultTimeFilterReq, opts ...grpc.CallOption) (*SetDefaultTimeFilterRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDefaultTimeFilterRes)
	err := c.cc.Invoke(ctx, Ana_SetDefaultTimeFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) SetDefaultDashboard(ctx context.Context, in *SetDefaultDashboardReq, opts ...grpc.CallOption) (*SetDefaultDashboardRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDefaultDashboardRes)
	err := c.cc.Invoke(ctx, Ana_SetDefaultDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) GetAccount(ctx context.Context, in *GetAccountReq, opts ...grpc.CallOption) (*AnaAccount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnaAccount)
	err := c.cc.Invoke(ctx, Ana_GetAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) GetSpecifiedAccount(ctx context.Context, in *GetSpecifiedAccountReq, opts ...grpc.CallOption) (*AnaAccount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnaAccount)
	err := c.cc.Invoke(ctx, Ana_GetSpecifiedAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) GetAuthorizedAnalyticsLink(ctx context.Context, in *GetAuthorizedAnalyticsLinkReq, opts ...grpc.CallOption) (*GetAuthorizedAnalyticsLinkRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAuthorizedAnalyticsLinkRes)
	err := c.cc.Invoke(ctx, Ana_GetAuthorizedAnalyticsLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) GenerateMonthlyBilling(ctx context.Context, in *GenerateMonthlyBillingReq, opts ...grpc.CallOption) (*GenerateMonthlyBillingRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateMonthlyBillingRes)
	err := c.cc.Invoke(ctx, Ana_GenerateMonthlyBilling_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) GetTimeZone(ctx context.Context, in *GetTimeZoneReq, opts ...grpc.CallOption) (*TimeZone, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TimeZone)
	err := c.cc.Invoke(ctx, Ana_GetTimeZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) SetTimeZone(ctx context.Context, in *SetTimeZoneReq, opts ...grpc.CallOption) (*SetTimeZoneRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTimeZoneRes)
	err := c.cc.Invoke(ctx, Ana_SetTimeZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) CopyDashViz(ctx context.Context, in *CopyDashVizReq, opts ...grpc.CallOption) (*CopyDashVizRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CopyDashVizRes)
	err := c.cc.Invoke(ctx, Ana_CopyDashViz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) GetSpecifiedBillingSummary(ctx context.Context, in *GetSpecifiedBillingSummaryReq, opts ...grpc.CallOption) (*BillingSummary, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BillingSummary)
	err := c.cc.Invoke(ctx, Ana_GetSpecifiedBillingSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) GetBillingSummary(ctx context.Context, in *GetBillingSummaryReq, opts ...grpc.CallOption) (*BillingSummary, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BillingSummary)
	err := c.cc.Invoke(ctx, Ana_GetBillingSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) EnableCustomReports(ctx context.Context, in *SetCustomReportsEnabledReq, opts ...grpc.CallOption) (*SetCustomReportsEnabledRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetCustomReportsEnabledRes)
	err := c.cc.Invoke(ctx, Ana_EnableCustomReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) DisableCustomReports(ctx context.Context, in *SetCustomReportsEnabledReq, opts ...grpc.CallOption) (*SetCustomReportsEnabledRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetCustomReportsEnabledRes)
	err := c.cc.Invoke(ctx, Ana_DisableCustomReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) MakeAdoptable(ctx context.Context, in *MakeAdoptableReq, opts ...grpc.CallOption) (*MakeAdoptableRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MakeAdoptableRes)
	err := c.cc.Invoke(ctx, Ana_MakeAdoptable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) MakeUnadoptable(ctx context.Context, in *MakeAdoptableReq, opts ...grpc.CallOption) (*MakeAdoptableRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MakeAdoptableRes)
	err := c.cc.Invoke(ctx, Ana_MakeUnadoptable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) AdoptAnaAccount(ctx context.Context, in *SetAnaAccountRelationReq, opts ...grpc.CallOption) (*SetAnaAccountRelationRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAnaAccountRelationRes)
	err := c.cc.Invoke(ctx, Ana_AdoptAnaAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) DisownAnaAccount(ctx context.Context, in *SetAnaAccountRelationReq, opts ...grpc.CallOption) (*SetAnaAccountRelationRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAnaAccountRelationRes)
	err := c.cc.Invoke(ctx, Ana_DisownAnaAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) GetAccessibleClients(ctx context.Context, in *GetAccessibleClientsReq, opts ...grpc.CallOption) (*SimpleRelations, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleRelations)
	err := c.cc.Invoke(ctx, Ana_GetAccessibleClients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) GetFamily(ctx context.Context, in *GetFamilyReq, opts ...grpc.CallOption) (*Family, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Family)
	err := c.cc.Invoke(ctx, Ana_GetFamily_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) GetAllowedDataVisibility(ctx context.Context, in *GetVisibilityReq, opts ...grpc.CallOption) (*DataVisibility, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataVisibility)
	err := c.cc.Invoke(ctx, Ana_GetAllowedDataVisibility_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) GetCurrentDataVisibility(ctx context.Context, in *GetVisibilityReq, opts ...grpc.CallOption) (*DataVisibility, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataVisibility)
	err := c.cc.Invoke(ctx, Ana_GetCurrentDataVisibility_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) GetIndicesVisibility(ctx context.Context, in *GetVisibilityReq, opts ...grpc.CallOption) (*IndicesVisibility, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IndicesVisibility)
	err := c.cc.Invoke(ctx, Ana_GetIndicesVisibility_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) GetAuditableDataVisibility(ctx context.Context, in *GetVisibilityReq, opts ...grpc.CallOption) (*DataVisibility, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataVisibility)
	err := c.cc.Invoke(ctx, Ana_GetAuditableDataVisibility_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) GetOrganizationNames(ctx context.Context, in *GetOrganizationNamesReq, opts ...grpc.CallOption) (*GetOrganizationNamesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationNamesRes)
	err := c.cc.Invoke(ctx, Ana_GetOrganizationNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) GenerateVizDataById(ctx context.Context, in *GenerateVizDataByIdReq, opts ...grpc.CallOption) (*GenerateVizDataByIdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateVizDataByIdRes)
	err := c.cc.Invoke(ctx, Ana_GenerateVizDataById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) GetClientStatus(ctx context.Context, in *GetClientStatusReq, opts ...grpc.CallOption) (*GetClientStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClientStatusResp)
	err := c.cc.Invoke(ctx, Ana_GetClientStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) ReloadClientData(ctx context.Context, in *ReloadClientDataReq, opts ...grpc.CallOption) (*ReloadClientDataResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReloadClientDataResp)
	err := c.cc.Invoke(ctx, Ana_ReloadClientData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anaClient) ListVisualizationsLegacy(ctx context.Context, in *ListVisualizationsLegacyReq, opts ...grpc.CallOption) (*ListVisualizationsLegacyRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVisualizationsLegacyRes)
	err := c.cc.Invoke(ctx, Ana_ListVisualizationsLegacy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnaServer is the server API for Ana service.
// All implementations must embed UnimplementedAnaServer
// for forward compatibility
type AnaServer interface {
	// gets all visualizations for a specific client
	GetSpecifiedVisualizations(context.Context, *GetSpecifiedVisualizationsReq) (*Visualizations, error)
	// Registers a new AnaAccoun based on org_id
	// The method will return the newly create AnaAccount
	// on the response message AnaAccount.
	// Required Permissions:
	//
	//	EDIT_ADMIN_CLIENT_PREFERENCES
	RegisterAccount(context.Context, *RegisterAccountReq) (*AnaAccount, error)
	// sets the length of analytics history the client can view
	SetWeeks(context.Context, *SetWeeksReq) (*SetWeeksRes, error)
	// set default time filter for given ana account
	// org.Permission_EDIT_CLIENT_PREFERENCES
	SetDefaultTimeFilter(context.Context, *SetDefaultTimeFilterReq) (*SetDefaultTimeFilterRes, error)
	// sets the dashboard that is shown by default for neo
	// org.Permission_EDIT_CLIENT_PREFERENCES
	SetDefaultDashboard(context.Context, *SetDefaultDashboardReq) (*SetDefaultDashboardRes, error)
	// gets account details for the client
	// org.Permission_VIEW_REPORTS
	GetAccount(context.Context, *GetAccountReq) (*AnaAccount, error)
	// gets account details using the org_id provided
	GetSpecifiedAccount(context.Context, *GetSpecifiedAccountReq) (*AnaAccount, error)
	// Gets an authorized url for the clients BI analytics page
	GetAuthorizedAnalyticsLink(context.Context, *GetAuthorizedAnalyticsLinkReq) (*GetAuthorizedAnalyticsLinkRes, error)
	// creates and returns a url to download billing for the month provided or the previous month if none is provided
	// org.Permission_VIEW_BILLING
	GenerateMonthlyBilling(context.Context, *GenerateMonthlyBillingReq) (*GenerateMonthlyBillingRes, error)
	// gets the ana_account timezone for the client
	// org.Permission_VIEW_REPORTS
	GetTimeZone(context.Context, *GetTimeZoneReq) (*TimeZone, error)
	// updates the timezone for the account
	// org.Permission_VIEW_REPORTS
	SetTimeZone(context.Context, *SetTimeZoneReq) (*SetTimeZoneRes, error)
	// copies the reports (dashboards legacy and visualizations legacy)
	// corresponding with the ids provided
	CopyDashViz(context.Context, *CopyDashVizReq) (*CopyDashVizRes, error)
	// returns a summary of all billing factors for the specified client, whether client is pro, and which of those features contribute to making the client pro
	GetSpecifiedBillingSummary(context.Context, *GetSpecifiedBillingSummaryReq) (*BillingSummary, error)
	// returns a summary of all billing factors for the client, whether client is
	// pro, and which of those features contribute to making the client pro
	GetBillingSummary(context.Context, *GetBillingSummaryReq) (*BillingSummary, error)
	// enable custom report usage for the client
	// org.Permission_EDIT_CLIENT_PREFERENCES
	EnableCustomReports(context.Context, *SetCustomReportsEnabledReq) (*SetCustomReportsEnabledRes, error)
	// disable custom report usage for the client
	// org.Permission_EDIT_CLIENT_PREFERENCES
	DisableCustomReports(context.Context, *SetCustomReportsEnabledReq) (*SetCustomReportsEnabledRes, error)
	// allow the client to be adopted by another account
	// org.Permission_EDIT_CLIENT_PREFERENCES
	MakeAdoptable(context.Context, *MakeAdoptableReq) (*MakeAdoptableRes, error)
	// disallow other accounts from adopting the client
	// org.Permission_EDIT_CLIENT_PREFERENCES
	MakeUnadoptable(context.Context, *MakeAdoptableReq) (*MakeAdoptableRes, error)
	// allow the parent to view the data of the adoptable child
	AdoptAnaAccount(context.Context, *SetAnaAccountRelationReq) (*SetAnaAccountRelationRes, error)
	// disallow the parent from viewing the data of the child
	DisownAnaAccount(context.Context, *SetAnaAccountRelationReq) (*SetAnaAccountRelationRes, error)
	// gets all clients that can be viewed by the client including the client
	GetAccessibleClients(context.Context, *GetAccessibleClientsReq) (*SimpleRelations, error)
	// gets all relations in which the client is involved grouped by whether the
	// client is the parent or child account
	GetFamily(context.Context, *GetFamilyReq) (*Family, error)
	// gets the client's data visibility as defined in the database (source of
	// truth); internal use only
	GetAllowedDataVisibility(context.Context, *GetVisibilityReq) (*DataVisibility, error)
	// gets the client's data visibility as is evident from the elasticsearch
	// indices structure; internal use only
	GetCurrentDataVisibility(context.Context, *GetVisibilityReq) (*DataVisibility, error)
	// gets a visibility summary from the perspective of the elasticsearch
	// indices; internal use only
	GetIndicesVisibility(context.Context, *GetVisibilityReq) (*IndicesVisibility, error)
	// gets the client's data visibility as exists in the elasticsearch data;
	// internal use only
	GetAuditableDataVisibility(context.Context, *GetVisibilityReq) (*DataVisibility, error)
	// gets a map of client sids to organization names
	GetOrganizationNames(context.Context, *GetOrganizationNamesReq) (*GetOrganizationNamesRes, error)
	// generate visualization data for the id
	GenerateVizDataById(context.Context, *GenerateVizDataByIdReq) (*GenerateVizDataByIdRes, error)
	// Gets client's data status
	// Data status is the status of calls loaded in elasticsearch
	// against all calls in the database that are within the clients weeks of data setting
	// This method requires a client sid
	// Required permissions:
	//
	//	CUSTOMER_SUPPORT
	GetClientStatus(context.Context, *GetClientStatusReq) (*GetClientStatusResp, error)
	// Reloads client's data
	// This loads calls from the database into elasticsearch
	// This method requires a client sid
	// Required permissions:
	//
	//	WIP - DEV_OPS
	ReloadClientData(context.Context, *ReloadClientDataReq) (*ReloadClientDataResp, error)
	// list all clients visualizations id and title
	ListVisualizationsLegacy(context.Context, *ListVisualizationsLegacyReq) (*ListVisualizationsLegacyRes, error)
	mustEmbedUnimplementedAnaServer()
}

// UnimplementedAnaServer must be embedded to have forward compatible implementations.
type UnimplementedAnaServer struct {
}

func (UnimplementedAnaServer) GetSpecifiedVisualizations(context.Context, *GetSpecifiedVisualizationsReq) (*Visualizations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecifiedVisualizations not implemented")
}
func (UnimplementedAnaServer) RegisterAccount(context.Context, *RegisterAccountReq) (*AnaAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAccount not implemented")
}
func (UnimplementedAnaServer) SetWeeks(context.Context, *SetWeeksReq) (*SetWeeksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWeeks not implemented")
}
func (UnimplementedAnaServer) SetDefaultTimeFilter(context.Context, *SetDefaultTimeFilterReq) (*SetDefaultTimeFilterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultTimeFilter not implemented")
}
func (UnimplementedAnaServer) SetDefaultDashboard(context.Context, *SetDefaultDashboardReq) (*SetDefaultDashboardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultDashboard not implemented")
}
func (UnimplementedAnaServer) GetAccount(context.Context, *GetAccountReq) (*AnaAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedAnaServer) GetSpecifiedAccount(context.Context, *GetSpecifiedAccountReq) (*AnaAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecifiedAccount not implemented")
}
func (UnimplementedAnaServer) GetAuthorizedAnalyticsLink(context.Context, *GetAuthorizedAnalyticsLinkReq) (*GetAuthorizedAnalyticsLinkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorizedAnalyticsLink not implemented")
}
func (UnimplementedAnaServer) GenerateMonthlyBilling(context.Context, *GenerateMonthlyBillingReq) (*GenerateMonthlyBillingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMonthlyBilling not implemented")
}
func (UnimplementedAnaServer) GetTimeZone(context.Context, *GetTimeZoneReq) (*TimeZone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeZone not implemented")
}
func (UnimplementedAnaServer) SetTimeZone(context.Context, *SetTimeZoneReq) (*SetTimeZoneRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTimeZone not implemented")
}
func (UnimplementedAnaServer) CopyDashViz(context.Context, *CopyDashVizReq) (*CopyDashVizRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyDashViz not implemented")
}
func (UnimplementedAnaServer) GetSpecifiedBillingSummary(context.Context, *GetSpecifiedBillingSummaryReq) (*BillingSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecifiedBillingSummary not implemented")
}
func (UnimplementedAnaServer) GetBillingSummary(context.Context, *GetBillingSummaryReq) (*BillingSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingSummary not implemented")
}
func (UnimplementedAnaServer) EnableCustomReports(context.Context, *SetCustomReportsEnabledReq) (*SetCustomReportsEnabledRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableCustomReports not implemented")
}
func (UnimplementedAnaServer) DisableCustomReports(context.Context, *SetCustomReportsEnabledReq) (*SetCustomReportsEnabledRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableCustomReports not implemented")
}
func (UnimplementedAnaServer) MakeAdoptable(context.Context, *MakeAdoptableReq) (*MakeAdoptableRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeAdoptable not implemented")
}
func (UnimplementedAnaServer) MakeUnadoptable(context.Context, *MakeAdoptableReq) (*MakeAdoptableRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeUnadoptable not implemented")
}
func (UnimplementedAnaServer) AdoptAnaAccount(context.Context, *SetAnaAccountRelationReq) (*SetAnaAccountRelationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdoptAnaAccount not implemented")
}
func (UnimplementedAnaServer) DisownAnaAccount(context.Context, *SetAnaAccountRelationReq) (*SetAnaAccountRelationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisownAnaAccount not implemented")
}
func (UnimplementedAnaServer) GetAccessibleClients(context.Context, *GetAccessibleClientsReq) (*SimpleRelations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessibleClients not implemented")
}
func (UnimplementedAnaServer) GetFamily(context.Context, *GetFamilyReq) (*Family, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFamily not implemented")
}
func (UnimplementedAnaServer) GetAllowedDataVisibility(context.Context, *GetVisibilityReq) (*DataVisibility, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllowedDataVisibility not implemented")
}
func (UnimplementedAnaServer) GetCurrentDataVisibility(context.Context, *GetVisibilityReq) (*DataVisibility, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentDataVisibility not implemented")
}
func (UnimplementedAnaServer) GetIndicesVisibility(context.Context, *GetVisibilityReq) (*IndicesVisibility, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndicesVisibility not implemented")
}
func (UnimplementedAnaServer) GetAuditableDataVisibility(context.Context, *GetVisibilityReq) (*DataVisibility, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditableDataVisibility not implemented")
}
func (UnimplementedAnaServer) GetOrganizationNames(context.Context, *GetOrganizationNamesReq) (*GetOrganizationNamesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationNames not implemented")
}
func (UnimplementedAnaServer) GenerateVizDataById(context.Context, *GenerateVizDataByIdReq) (*GenerateVizDataByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateVizDataById not implemented")
}
func (UnimplementedAnaServer) GetClientStatus(context.Context, *GetClientStatusReq) (*GetClientStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientStatus not implemented")
}
func (UnimplementedAnaServer) ReloadClientData(context.Context, *ReloadClientDataReq) (*ReloadClientDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadClientData not implemented")
}
func (UnimplementedAnaServer) ListVisualizationsLegacy(context.Context, *ListVisualizationsLegacyReq) (*ListVisualizationsLegacyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVisualizationsLegacy not implemented")
}
func (UnimplementedAnaServer) mustEmbedUnimplementedAnaServer() {}

// UnsafeAnaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnaServer will
// result in compilation errors.
type UnsafeAnaServer interface {
	mustEmbedUnimplementedAnaServer()
}

func RegisterAnaServer(s grpc.ServiceRegistrar, srv AnaServer) {
	s.RegisterService(&Ana_ServiceDesc, srv)
}

func _Ana_GetSpecifiedVisualizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecifiedVisualizationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).GetSpecifiedVisualizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_GetSpecifiedVisualizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).GetSpecifiedVisualizations(ctx, req.(*GetSpecifiedVisualizationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_RegisterAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).RegisterAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_RegisterAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).RegisterAccount(ctx, req.(*RegisterAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_SetWeeks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWeeksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).SetWeeks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_SetWeeks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).SetWeeks(ctx, req.(*SetWeeksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_SetDefaultTimeFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultTimeFilterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).SetDefaultTimeFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_SetDefaultTimeFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).SetDefaultTimeFilter(ctx, req.(*SetDefaultTimeFilterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_SetDefaultDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultDashboardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).SetDefaultDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_SetDefaultDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).SetDefaultDashboard(ctx, req.(*SetDefaultDashboardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).GetAccount(ctx, req.(*GetAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_GetSpecifiedAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecifiedAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).GetSpecifiedAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_GetSpecifiedAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).GetSpecifiedAccount(ctx, req.(*GetSpecifiedAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_GetAuthorizedAnalyticsLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorizedAnalyticsLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).GetAuthorizedAnalyticsLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_GetAuthorizedAnalyticsLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).GetAuthorizedAnalyticsLink(ctx, req.(*GetAuthorizedAnalyticsLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_GenerateMonthlyBilling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateMonthlyBillingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).GenerateMonthlyBilling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_GenerateMonthlyBilling_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).GenerateMonthlyBilling(ctx, req.(*GenerateMonthlyBillingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_GetTimeZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimeZoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).GetTimeZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_GetTimeZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).GetTimeZone(ctx, req.(*GetTimeZoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_SetTimeZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTimeZoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).SetTimeZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_SetTimeZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).SetTimeZone(ctx, req.(*SetTimeZoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_CopyDashViz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyDashVizReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).CopyDashViz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_CopyDashViz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).CopyDashViz(ctx, req.(*CopyDashVizReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_GetSpecifiedBillingSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecifiedBillingSummaryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).GetSpecifiedBillingSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_GetSpecifiedBillingSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).GetSpecifiedBillingSummary(ctx, req.(*GetSpecifiedBillingSummaryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_GetBillingSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillingSummaryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).GetBillingSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_GetBillingSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).GetBillingSummary(ctx, req.(*GetBillingSummaryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_EnableCustomReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCustomReportsEnabledReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).EnableCustomReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_EnableCustomReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).EnableCustomReports(ctx, req.(*SetCustomReportsEnabledReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_DisableCustomReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCustomReportsEnabledReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).DisableCustomReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_DisableCustomReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).DisableCustomReports(ctx, req.(*SetCustomReportsEnabledReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_MakeAdoptable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeAdoptableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).MakeAdoptable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_MakeAdoptable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).MakeAdoptable(ctx, req.(*MakeAdoptableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_MakeUnadoptable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeAdoptableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).MakeUnadoptable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_MakeUnadoptable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).MakeUnadoptable(ctx, req.(*MakeAdoptableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_AdoptAnaAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAnaAccountRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).AdoptAnaAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_AdoptAnaAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).AdoptAnaAccount(ctx, req.(*SetAnaAccountRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_DisownAnaAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAnaAccountRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).DisownAnaAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_DisownAnaAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).DisownAnaAccount(ctx, req.(*SetAnaAccountRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_GetAccessibleClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessibleClientsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).GetAccessibleClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_GetAccessibleClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).GetAccessibleClients(ctx, req.(*GetAccessibleClientsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_GetFamily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFamilyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).GetFamily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_GetFamily_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).GetFamily(ctx, req.(*GetFamilyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_GetAllowedDataVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVisibilityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).GetAllowedDataVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_GetAllowedDataVisibility_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).GetAllowedDataVisibility(ctx, req.(*GetVisibilityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_GetCurrentDataVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVisibilityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).GetCurrentDataVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_GetCurrentDataVisibility_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).GetCurrentDataVisibility(ctx, req.(*GetVisibilityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_GetIndicesVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVisibilityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).GetIndicesVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_GetIndicesVisibility_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).GetIndicesVisibility(ctx, req.(*GetVisibilityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_GetAuditableDataVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVisibilityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).GetAuditableDataVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_GetAuditableDataVisibility_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).GetAuditableDataVisibility(ctx, req.(*GetVisibilityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_GetOrganizationNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationNamesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).GetOrganizationNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_GetOrganizationNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).GetOrganizationNames(ctx, req.(*GetOrganizationNamesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_GenerateVizDataById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateVizDataByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).GenerateVizDataById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_GenerateVizDataById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).GenerateVizDataById(ctx, req.(*GenerateVizDataByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_GetClientStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).GetClientStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_GetClientStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).GetClientStatus(ctx, req.(*GetClientStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_ReloadClientData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadClientDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).ReloadClientData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_ReloadClientData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).ReloadClientData(ctx, req.(*ReloadClientDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ana_ListVisualizationsLegacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVisualizationsLegacyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnaServer).ListVisualizationsLegacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ana_ListVisualizationsLegacy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnaServer).ListVisualizationsLegacy(ctx, req.(*ListVisualizationsLegacyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Ana_ServiceDesc is the grpc.ServiceDesc for Ana service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ana_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v0alpha.Ana",
	HandlerType: (*AnaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSpecifiedVisualizations",
			Handler:    _Ana_GetSpecifiedVisualizations_Handler,
		},
		{
			MethodName: "RegisterAccount",
			Handler:    _Ana_RegisterAccount_Handler,
		},
		{
			MethodName: "SetWeeks",
			Handler:    _Ana_SetWeeks_Handler,
		},
		{
			MethodName: "SetDefaultTimeFilter",
			Handler:    _Ana_SetDefaultTimeFilter_Handler,
		},
		{
			MethodName: "SetDefaultDashboard",
			Handler:    _Ana_SetDefaultDashboard_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _Ana_GetAccount_Handler,
		},
		{
			MethodName: "GetSpecifiedAccount",
			Handler:    _Ana_GetSpecifiedAccount_Handler,
		},
		{
			MethodName: "GetAuthorizedAnalyticsLink",
			Handler:    _Ana_GetAuthorizedAnalyticsLink_Handler,
		},
		{
			MethodName: "GenerateMonthlyBilling",
			Handler:    _Ana_GenerateMonthlyBilling_Handler,
		},
		{
			MethodName: "GetTimeZone",
			Handler:    _Ana_GetTimeZone_Handler,
		},
		{
			MethodName: "SetTimeZone",
			Handler:    _Ana_SetTimeZone_Handler,
		},
		{
			MethodName: "CopyDashViz",
			Handler:    _Ana_CopyDashViz_Handler,
		},
		{
			MethodName: "GetSpecifiedBillingSummary",
			Handler:    _Ana_GetSpecifiedBillingSummary_Handler,
		},
		{
			MethodName: "GetBillingSummary",
			Handler:    _Ana_GetBillingSummary_Handler,
		},
		{
			MethodName: "EnableCustomReports",
			Handler:    _Ana_EnableCustomReports_Handler,
		},
		{
			MethodName: "DisableCustomReports",
			Handler:    _Ana_DisableCustomReports_Handler,
		},
		{
			MethodName: "MakeAdoptable",
			Handler:    _Ana_MakeAdoptable_Handler,
		},
		{
			MethodName: "MakeUnadoptable",
			Handler:    _Ana_MakeUnadoptable_Handler,
		},
		{
			MethodName: "AdoptAnaAccount",
			Handler:    _Ana_AdoptAnaAccount_Handler,
		},
		{
			MethodName: "DisownAnaAccount",
			Handler:    _Ana_DisownAnaAccount_Handler,
		},
		{
			MethodName: "GetAccessibleClients",
			Handler:    _Ana_GetAccessibleClients_Handler,
		},
		{
			MethodName: "GetFamily",
			Handler:    _Ana_GetFamily_Handler,
		},
		{
			MethodName: "GetAllowedDataVisibility",
			Handler:    _Ana_GetAllowedDataVisibility_Handler,
		},
		{
			MethodName: "GetCurrentDataVisibility",
			Handler:    _Ana_GetCurrentDataVisibility_Handler,
		},
		{
			MethodName: "GetIndicesVisibility",
			Handler:    _Ana_GetIndicesVisibility_Handler,
		},
		{
			MethodName: "GetAuditableDataVisibility",
			Handler:    _Ana_GetAuditableDataVisibility_Handler,
		},
		{
			MethodName: "GetOrganizationNames",
			Handler:    _Ana_GetOrganizationNames_Handler,
		},
		{
			MethodName: "GenerateVizDataById",
			Handler:    _Ana_GenerateVizDataById_Handler,
		},
		{
			MethodName: "GetClientStatus",
			Handler:    _Ana_GetClientStatus_Handler,
		},
		{
			MethodName: "ReloadClientData",
			Handler:    _Ana_ReloadClientData_Handler,
		},
		{
			MethodName: "ListVisualizationsLegacy",
			Handler:    _Ana_ListVisualizationsLegacy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v0alpha/ana.proto",
}
