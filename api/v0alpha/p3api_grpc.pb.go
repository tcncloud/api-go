// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: api/v0alpha/p3api.proto

package v0alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	P3Api_GetAgentHuntGroup_FullMethodName                   = "/api.v0alpha.P3Api/GetAgentHuntGroup"
	P3Api_GetAgentSession_FullMethodName                     = "/api.v0alpha.P3Api/GetAgentSession"
	P3Api_GetAgentSkills_FullMethodName                      = "/api.v0alpha.P3Api/GetAgentSkills"
	P3Api_CreateAgentSkill_FullMethodName                    = "/api.v0alpha.P3Api/CreateAgentSkill"
	P3Api_UpdateAgentSkill_FullMethodName                    = "/api.v0alpha.P3Api/UpdateAgentSkill"
	P3Api_DeleteAgentSkill_FullMethodName                    = "/api.v0alpha.P3Api/DeleteAgentSkill"
	P3Api_ListAgentSkills_FullMethodName                     = "/api.v0alpha.P3Api/ListAgentSkills"
	P3Api_ListSkillsForCurrentAgent_FullMethodName           = "/api.v0alpha.P3Api/ListSkillsForCurrentAgent"
	P3Api_ListSkills_FullMethodName                          = "/api.v0alpha.P3Api/ListSkills"
	P3Api_UpdateAgentSkills_FullMethodName                   = "/api.v0alpha.P3Api/UpdateAgentSkills"
	P3Api_GetCurrentAgent_FullMethodName                     = "/api.v0alpha.P3Api/GetCurrentAgent"
	P3Api_GetClientInfoData_FullMethodName                   = "/api.v0alpha.P3Api/GetClientInfoData"
	P3Api_GetClientInfoDisplayTemplate_FullMethodName        = "/api.v0alpha.P3Api/GetClientInfoDisplayTemplate"
	P3Api_ListAgentStatisticsData_FullMethodName             = "/api.v0alpha.P3Api/ListAgentStatisticsData"
	P3Api_ListPBXExtensions_FullMethodName                   = "/api.v0alpha.P3Api/ListPBXExtensions"
	P3Api_ListAgentExtensions_FullMethodName                 = "/api.v0alpha.P3Api/ListAgentExtensions"
	P3Api_ListHuntGroupExtensions_FullMethodName             = "/api.v0alpha.P3Api/ListHuntGroupExtensions"
	P3Api_CreateExtension_FullMethodName                     = "/api.v0alpha.P3Api/CreateExtension"
	P3Api_DeleteExtension_FullMethodName                     = "/api.v0alpha.P3Api/DeleteExtension"
	P3Api_UpdateExtension_FullMethodName                     = "/api.v0alpha.P3Api/UpdateExtension"
	P3Api_UpdatePBXExtension_FullMethodName                  = "/api.v0alpha.P3Api/UpdatePBXExtension"
	P3Api_CreateDNCLNumbers_FullMethodName                   = "/api.v0alpha.P3Api/CreateDNCLNumbers"
	P3Api_GetScriptOrResponses_FullMethodName                = "/api.v0alpha.P3Api/GetScriptOrResponses"
	P3Api_GetHuntGroupAgentSettings_FullMethodName           = "/api.v0alpha.P3Api/GetHuntGroupAgentSettings"
	P3Api_ListHuntGroupWebLinks_FullMethodName               = "/api.v0alpha.P3Api/ListHuntGroupWebLinks"
	P3Api_GetHuntGroupPauseCodes_FullMethodName              = "/api.v0alpha.P3Api/GetHuntGroupPauseCodes"
	P3Api_ListAgentCallHistory_FullMethodName                = "/api.v0alpha.P3Api/ListAgentCallHistory"
	P3Api_ListClientPhoneBookEntries_FullMethodName          = "/api.v0alpha.P3Api/ListClientPhoneBookEntries"
	P3Api_ListHuntGroupPhoneBookEntries_FullMethodName       = "/api.v0alpha.P3Api/ListHuntGroupPhoneBookEntries"
	P3Api_CreatePhoneBookEntry_FullMethodName                = "/api.v0alpha.P3Api/CreatePhoneBookEntry"
	P3Api_UpdatePhoneBookEntry_FullMethodName                = "/api.v0alpha.P3Api/UpdatePhoneBookEntry"
	P3Api_DeletePhoneBookEntry_FullMethodName                = "/api.v0alpha.P3Api/DeletePhoneBookEntry"
	P3Api_ListPhoneBooks_FullMethodName                      = "/api.v0alpha.P3Api/ListPhoneBooks"
	P3Api_ListAgentTriggers_FullMethodName                   = "/api.v0alpha.P3Api/ListAgentTriggers"
	P3Api_GetCampaignCompletionStatus_FullMethodName         = "/api.v0alpha.P3Api/GetCampaignCompletionStatus"
	P3Api_GetLostPeerInfo_FullMethodName                     = "/api.v0alpha.P3Api/GetLostPeerInfo"
	P3Api_GetDispositionKeys_FullMethodName                  = "/api.v0alpha.P3Api/GetDispositionKeys"
	P3Api_GetReadyAgents_FullMethodName                      = "/api.v0alpha.P3Api/GetReadyAgents"
	P3Api_ListAgentQueueAndOnHoldCallData_FullMethodName     = "/api.v0alpha.P3Api/ListAgentQueueAndOnHoldCallData"
	P3Api_SaveAgentCallResponses_FullMethodName              = "/api.v0alpha.P3Api/SaveAgentCallResponses"
	P3Api_ListAgentTransferOptions_FullMethodName            = "/api.v0alpha.P3Api/ListAgentTransferOptions"
	P3Api_UpdateAgentCallResponseValue_FullMethodName        = "/api.v0alpha.P3Api/UpdateAgentCallResponseValue"
	P3Api_GetIntercomPeerInfo_FullMethodName                 = "/api.v0alpha.P3Api/GetIntercomPeerInfo"
	P3Api_ListOrgResponseEvaluators_FullMethodName           = "/api.v0alpha.P3Api/ListOrgResponseEvaluators"
	P3Api_GetQueueConfigurationOptionsArray_FullMethodName   = "/api.v0alpha.P3Api/GetQueueConfigurationOptionsArray"
	P3Api_GetConditionalDNCLRules_FullMethodName             = "/api.v0alpha.P3Api/GetConditionalDNCLRules"
	P3Api_ManualDialStart_FullMethodName                     = "/api.v0alpha.P3Api/ManualDialStart"
	P3Api_ListExtendedCallHistory_FullMethodName             = "/api.v0alpha.P3Api/ListExtendedCallHistory"
	P3Api_ListWhiteListPhoneBooks_FullMethodName             = "/api.v0alpha.P3Api/ListWhiteListPhoneBooks"
	P3Api_DownloadCallRecording_FullMethodName               = "/api.v0alpha.P3Api/DownloadCallRecording"
	P3Api_DownloadCallRecordings_FullMethodName              = "/api.v0alpha.P3Api/DownloadCallRecordings"
	P3Api_PlacePreviewDialCall_FullMethodName                = "/api.v0alpha.P3Api/PlacePreviewDialCall"
	P3Api_CancelPreviewDialCall_FullMethodName               = "/api.v0alpha.P3Api/CancelPreviewDialCall"
	P3Api_UpdateTaskStatus_FullMethodName                    = "/api.v0alpha.P3Api/UpdateTaskStatus"
	P3Api_ListCallbackRoutingAgents_FullMethodName           = "/api.v0alpha.P3Api/ListCallbackRoutingAgents"
	P3Api_ListCallbackRoutingSkills_FullMethodName           = "/api.v0alpha.P3Api/ListCallbackRoutingSkills"
	P3Api_HandleRecordingDelay_FullMethodName                = "/api.v0alpha.P3Api/HandleRecordingDelay"
	P3Api_UpdateAgentAssignedHuntGroup_FullMethodName        = "/api.v0alpha.P3Api/UpdateAgentAssignedHuntGroup"
	P3Api_GetCallData_FullMethodName                         = "/api.v0alpha.P3Api/GetCallData"
	P3Api_ListHuntGroups_FullMethodName                      = "/api.v0alpha.P3Api/ListHuntGroups"
	P3Api_ListReassignmentHuntGroups_FullMethodName          = "/api.v0alpha.P3Api/ListReassignmentHuntGroups"
	P3Api_GetOrgAgentSettings_FullMethodName                 = "/api.v0alpha.P3Api/GetOrgAgentSettings"
	P3Api_ListCallerIdsFromBucket_FullMethodName             = "/api.v0alpha.P3Api/ListCallerIdsFromBucket"
	P3Api_SaveLastCallResponse_FullMethodName                = "/api.v0alpha.P3Api/SaveLastCallResponse"
	P3Api_ListAgentCallLogsByCallSidAndType_FullMethodName   = "/api.v0alpha.P3Api/ListAgentCallLogsByCallSidAndType"
	P3Api_ListAgentCallResponseValues_FullMethodName         = "/api.v0alpha.P3Api/ListAgentCallResponseValues"
	P3Api_GetContactSchemaByContactGroup_FullMethodName      = "/api.v0alpha.P3Api/GetContactSchemaByContactGroup"
	P3Api_ListContactGroupDetailsByClientSid_FullMethodName  = "/api.v0alpha.P3Api/ListContactGroupDetailsByClientSid"
	P3Api_GetContactGroupDetails_FullMethodName              = "/api.v0alpha.P3Api/GetContactGroupDetails"
	P3Api_GetContactGroupSize_FullMethodName                 = "/api.v0alpha.P3Api/GetContactGroupSize"
	P3Api_CreateContactFieldDescription_FullMethodName       = "/api.v0alpha.P3Api/CreateContactFieldDescription"
	P3Api_UpdateContactFieldDescription_FullMethodName       = "/api.v0alpha.P3Api/UpdateContactFieldDescription"
	P3Api_DeleteContactFieldDescription_FullMethodName       = "/api.v0alpha.P3Api/DeleteContactFieldDescription"
	P3Api_ListContactFieldDescriptions_FullMethodName        = "/api.v0alpha.P3Api/ListContactFieldDescriptions"
	P3Api_ListContactFieldDescriptionsByCGSid_FullMethodName = "/api.v0alpha.P3Api/ListContactFieldDescriptionsByCGSid"
	P3Api_ListContactImportTemplates_FullMethodName          = "/api.v0alpha.P3Api/ListContactImportTemplates"
	P3Api_UpdatePreviewRecordToFinished_FullMethodName       = "/api.v0alpha.P3Api/UpdatePreviewRecordToFinished"
	P3Api_UpdateAgentHuntGroup_FullMethodName                = "/api.v0alpha.P3Api/UpdateAgentHuntGroup"
	P3Api_MultiAgentHuntGroupAssignment_FullMethodName       = "/api.v0alpha.P3Api/MultiAgentHuntGroupAssignment"
	P3Api_GetAgentProfile_FullMethodName                     = "/api.v0alpha.P3Api/GetAgentProfile"
	P3Api_RecalculateBilling_FullMethodName                  = "/api.v0alpha.P3Api/RecalculateBilling"
	P3Api_ListOutboundBroadcastTemplateData_FullMethodName   = "/api.v0alpha.P3Api/ListOutboundBroadcastTemplateData"
	P3Api_MultiAgentSkillAssignment_FullMethodName           = "/api.v0alpha.P3Api/MultiAgentSkillAssignment"
	P3Api_MultiAgentSkillUnassignment_FullMethodName         = "/api.v0alpha.P3Api/MultiAgentSkillUnassignment"
	P3Api_ListMAMAgentHuntGroupsByClientSid_FullMethodName   = "/api.v0alpha.P3Api/ListMAMAgentHuntGroupsByClientSid"
	P3Api_ListTtsVoices_FullMethodName                       = "/api.v0alpha.P3Api/ListTtsVoices"
	P3Api_CreateTtsVoice_FullMethodName                      = "/api.v0alpha.P3Api/CreateTtsVoice"
	P3Api_DeleteTtsVoice_FullMethodName                      = "/api.v0alpha.P3Api/DeleteTtsVoice"
	P3Api_ListCustomDataKeys_FullMethodName                  = "/api.v0alpha.P3Api/ListCustomDataKeys"
	P3Api_CreateCustomDataKey_FullMethodName                 = "/api.v0alpha.P3Api/CreateCustomDataKey"
	P3Api_DeleteCustomDataKey_FullMethodName                 = "/api.v0alpha.P3Api/DeleteCustomDataKey"
	P3Api_UpdateCustomDataKey_FullMethodName                 = "/api.v0alpha.P3Api/UpdateCustomDataKey"
	P3Api_GetActivityLogHistory_FullMethodName               = "/api.v0alpha.P3Api/GetActivityLogHistory"
	P3Api_ListTableTemplateProperties_FullMethodName         = "/api.v0alpha.P3Api/ListTableTemplateProperties"
	P3Api_ListAgentSkillsFilters_FullMethodName              = "/api.v0alpha.P3Api/ListAgentSkillsFilters"
	P3Api_ListScheduleRules_FullMethodName                   = "/api.v0alpha.P3Api/ListScheduleRules"
	P3Api_ListCustomReportFilters_FullMethodName             = "/api.v0alpha.P3Api/ListCustomReportFilters"
	P3Api_ListSmsNumbers_FullMethodName                      = "/api.v0alpha.P3Api/ListSmsNumbers"
)

// P3ApiClient is the client API for P3Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type P3ApiClient interface {
	GetAgentHuntGroup(ctx context.Context, in *GetAgentHuntGroupReq, opts ...grpc.CallOption) (*HuntGroup, error)
	GetAgentSession(ctx context.Context, in *GetAgentSessionReq, opts ...grpc.CallOption) (*AgentSession, error)
	// Gets the skills of the requesting agent. This includes agent skills, hunt group skills, and extension skills(PBX).
	// Skills will be returned as a value pair (name, level).
	// For agent skills, the name of each skill will be the agent_skill_sid.
	// All other skills' names (hunt group and PBX) will be given special formats.
	// The requesting agent and hunt_group_sid skills will be defaulted to the max level (1000 and 100 respectively).
	//
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the hunt_group_sid in the request in invalid.
	GetAgentSkills(ctx context.Context, in *GetAgentSkillsReq, opts ...grpc.CallOption) (*GetAgentSkillsRes, error)
	// Creates a new agent skill as defined by the request message.
	// Errors:
	//   - grpc.InvalidArgument: the client_sid or name in the request is invalid.
	CreateAgentSkill(ctx context.Context, in *CreateAgentSkillReq, opts ...grpc.CallOption) (*CreateAgentSkillRes, error)
	// Updates an agent skill as defined by the request message.
	// Errors:
	//   - grpc.InvalidArgument: the agent_skill_sid or name in the request is invalid.
	UpdateAgentSkill(ctx context.Context, in *UpdateAgentSkillReq, opts ...grpc.CallOption) (*UpdateAgentSkillRes, error)
	// Deletes the agent skill with the agent_skill_sid given on the request.
	// Errors:
	//   - grpc.InvalidArgument: the agent_skill_sid in the request is invalid.
	DeleteAgentSkill(ctx context.Context, in *DeleteAgentSkillReq, opts ...grpc.CallOption) (*DeleteAgentSkillRes, error)
	// Returns a list of agent skills for the given client sid.
	// DEPRECATED. Use ListSkills
	ListAgentSkills(ctx context.Context, in *ListAgentSkillsReq, opts ...grpc.CallOption) (*ListAgentSkillsRes, error)
	// Returns a list of skills for the current agent.
	ListSkillsForCurrentAgent(ctx context.Context, in *ListSkillsForCurrentAgentReq, opts ...grpc.CallOption) (*ListSkillsForCurrentAgentRes, error)
	// Returns a list of skills filtered by types given on
	// the request message field type_filter. Leaving the type_filter
	// field empty will return all types of skills.
	ListSkills(ctx context.Context, in *ListSkillsReq, opts ...grpc.CallOption) (*ListSkillsRes, error)
	// Updates an agents assigned skills as defined by the skills list on
	// the request message.
	// Errors:
	//   - grpc.InvalidArgument: the user_id on the request is invalid.
	UpdateAgentSkills(ctx context.Context, in *UpdateAgentSkillsReq, opts ...grpc.CallOption) (*UpdateAgentSkillsRes, error)
	GetCurrentAgent(ctx context.Context, in *GetCurrentAgentReq, opts ...grpc.CallOption) (*Agent, error)
	GetClientInfoData(ctx context.Context, in *GetClientInfoDataReq, opts ...grpc.CallOption) (*GetClientInfoDataRes, error)
	GetClientInfoDisplayTemplate(ctx context.Context, in *GetClientInfoDisplayTemplateReq, opts ...grpc.CallOption) (*GetClientInfoDisplayTemplateRes, error)
	ListAgentStatisticsData(ctx context.Context, in *ListAgentStatisticsDataReq, opts ...grpc.CallOption) (*ListAgentStatisticsDataRes, error)
	// Lists all agent and hunt group PBX extensions that the requested agent has.
	ListPBXExtensions(ctx context.Context, in *ListPBXExtensionsReq, opts ...grpc.CallOption) (*ListPBXExtensionsRes, error)
	// Lists every agent extension for the current client
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.Internal: unexpected error getting pbx_extensions
	ListAgentExtensions(ctx context.Context, in *ListAgentExtensionsReq, opts ...grpc.CallOption) (*ListAgentExtensionsRes, error)
	// Lists every hunt group extension for the current client
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.Internal: unexpected error getting pbx_extensions
	ListHuntGroupExtensions(ctx context.Context, in *ListHuntGroupExtensionsReq, opts ...grpc.CallOption) (*ListHuntGroupExtensionsRes, error)
	// Creates a new extension as defined by the request message
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request has missing or invalid fields.
	//   - grpc.Internal: An unexpected error occurred while saving the extension.
	CreateExtension(ctx context.Context, in *CreateExtensionReq, opts ...grpc.CallOption) (*CreateExtensionRes, error)
	// Deletes a pbx_extension with the given pbx_extension_sid.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request had invalid or missing fields.
	DeleteExtension(ctx context.Context, in *DeleteExtensionReq, opts ...grpc.CallOption) (*DeleteExtensionRes, error)
	// Updates an extension as defined by the request message.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request had invalid or missing fields.
	//   - grpc.Internal: An unexpected error occured updating the extension.
	UpdateExtension(ctx context.Context, in *UpdateExtensionReq, opts ...grpc.CallOption) (*UpdateExtensionRes, error)
	UpdatePBXExtension(ctx context.Context, in *UpdatePBXExtensionReq, opts ...grpc.CallOption) (*UpdatePBXExtensionRes, error)
	CreateDNCLNumbers(ctx context.Context, in *CreateDNCLNumbersReq, opts ...grpc.CallOption) (*CreateDNCLNumbersRes, error)
	// Gets the campaign or huntgroup script for the given agent's current hunt
	// group. If no script is found, it gets the hunt group responses for the
	// agent's current hunt group. It also does a mail merge with the found script
	// or responses (if able).
	GetScriptOrResponses(ctx context.Context, in *GetScriptOrResponsesReq, opts ...grpc.CallOption) (*GetScriptOrResponsesRes, error)
	GetHuntGroupAgentSettings(ctx context.Context, in *GetHuntGroupAgentSettingsReq, opts ...grpc.CallOption) (*HuntGroupAgentSettings, error)
	// Returns a list of weblinks for the hunt group in the request.
	// It replaces any parameters of a given weblink with the call data of the call sid and type from the request message or with the callback details (if a scheduled_callback_id is given).
	ListHuntGroupWebLinks(ctx context.Context, in *ListHuntGroupWebLinksReq, opts ...grpc.CallOption) (*ListHuntGroupWebLinksRes, error)
	GetHuntGroupPauseCodes(ctx context.Context, in *GetHuntGroupPauseCodesReq, opts ...grpc.CallOption) (*GetHuntGroupPauseCodesRes, error)
	// Lists the call history of the requested agent for the past day or
	// session_sid, depending on the filter parameter.
	ListAgentCallHistory(ctx context.Context, in *ListAgentCallHistoryReq, opts ...grpc.CallOption) (*ListAgentCallHistoryRes, error)
	// Lists all client phone book entries.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	ListClientPhoneBookEntries(ctx context.Context, in *ListClientPhoneBookEntriesReq, opts ...grpc.CallOption) (*ListClientPhoneBookEntriesRes, error)
	// Lists all hunt group phone book entries.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	ListHuntGroupPhoneBookEntries(ctx context.Context, in *ListHuntGroupPhoneBookEntriesReq, opts ...grpc.CallOption) (*ListHuntGroupPhoneBookEntriesRes, error)
	// Creates a new phone_book as defined by the request message.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: the fields on the request are missing or invalid.
	//   - grpc.Internal: unexpected error occurred when saving the phone book.
	CreatePhoneBookEntry(ctx context.Context, in *CreatePhoneBookEntryReq, opts ...grpc.CallOption) (*CreatePhoneBookEntryRes, error)
	// Updates an existing phone_book as defined by the request message.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: the fields on the request are missing or invalid.
	//   - grpc.Internal: unexpected error occurred when saving the phone book.
	UpdatePhoneBookEntry(ctx context.Context, in *UpdatePhoneBookEntryReq, opts ...grpc.CallOption) (*UpdatePhoneBookEntryRes, error)
	// Deletes the phone_book with the phone_book_sid given on the reques message.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	DeletePhoneBookEntry(ctx context.Context, in *DeletePhoneBookEntryReq, opts ...grpc.CallOption) (*DeletePhoneBookEntryRes, error)
	// Lists caller_id, outbound and transfer phone books for the requesting client and given hunt group sid.
	// Entries will be ordered by entry_name and phone_number.
	//
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the client_sid or hunt_group_sid in the request are invalid.
	//   - grpc.Internal: unexpected error occurred when retrieving the phone books.
	ListPhoneBooks(ctx context.Context, in *ListPhoneBooksReq, opts ...grpc.CallOption) (*ListPhoneBooksRes, error)
	ListAgentTriggers(ctx context.Context, in *ListAgentTriggersReq, opts ...grpc.CallOption) (*ListAgentTriggersRes, error)
	// Gets all running broadcasts (task groups) for the requesting agent and hunt_group_sid in the request.
	// Calculates the percentage of completed tasks for each of those task groups.
	// Calculates the overall task completion percentage of all matching task groups.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the hunt_group_sid in the request is invalid.
	GetCampaignCompletionStatus(ctx context.Context, in *GetCampaignCompletionStatusReq, opts ...grpc.CallOption) (*GetCampaignCompletionStatusRes, error)
	// Uses lost peer call sid and call type from the request to get information about lost call
	// gets the name and hunt group of the agent that was connected to that call and all types of skills the call has.
	//
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the call_sid in the request in invalid.
	//   - grpc.NotFound: the call sid provided wasn't previously connected to any agent.
	GetLostPeerInfo(ctx context.Context, in *GetLostPeerInfoReq, opts ...grpc.CallOption) (*GetLostPeerInfoRes, error)
	// Gets all the available Disposition Keys
	//
	// Required permissions:
	//
	//	NONE
	GetDispositionKeys(ctx context.Context, in *GetDispositionKeysReq, opts ...grpc.CallOption) (*GetDispositionKeysRes, error)
	GetReadyAgents(ctx context.Context, in *GetReadyAgentsReq, opts ...grpc.CallOption) (*GetReadyAgentsRes, error)
	// Returns lists with call data of calls that were:
	// Placed on multihold by the requesting agent.
	// Queued, are ready to be handled and require a subset of the agent_skills provided.
	// Placed in the Hold Queue Monitor, haven't been picked up yet and require a subset of the agent_skills provided.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the agent_session_sid provided in the request is invalid.
	ListAgentQueueAndOnHoldCallData(ctx context.Context, in *ListAgentQueueAndOnHoldCallDataReq, opts ...grpc.CallOption) (*ListAgentQueueAndOnHoldCallDataRes, error)
	SaveAgentCallResponses(ctx context.Context, in *SaveAgentCallResponsesReq, opts ...grpc.CallOption) (*SaveAgentCallResponsesRes, error)
	ListAgentTransferOptions(ctx context.Context, in *ListAgentTransferOptionsReq, opts ...grpc.CallOption) (*ListAgentTransferOptionsRes, error)
	UpdateAgentCallResponseValue(ctx context.Context, in *UpdateAgentCallResponseValueReq, opts ...grpc.CallOption) (*UpdateAgentCallResponseValueRes, error)
	GetIntercomPeerInfo(ctx context.Context, in *GetIntercomPeerInfoReq, opts ...grpc.CallOption) (*GetIntercomPeerInfoRes, error)
	// Lists the requesting user's org response evaluators.
	ListOrgResponseEvaluators(ctx context.Context, in *ListOrgResponseEvaluatorsReq, opts ...grpc.CallOption) (*ListOrgResponseEvaluatorsRes, error)
	GetQueueConfigurationOptionsArray(ctx context.Context, in *GetQueueConfigurationOptionsArrayReq, opts ...grpc.CallOption) (*GetQueueConfigurationOptionsArrayRes, error)
	// Get the rules for conditionally adding a number to the DNCL depending on
	// responses or scripts
	GetConditionalDNCLRules(ctx context.Context, in *GetConditionalDNCLRulesReq, opts ...grpc.CallOption) (*GetConditionalDNCLRulesRes, error)
	ManualDialStart(ctx context.Context, in *ManualDialStartReq, opts ...grpc.CallOption) (*ManualDialStartRes, error)
	ListExtendedCallHistory(ctx context.Context, in *ListExtendedCallHistoryReq, opts ...grpc.CallOption) (P3Api_ListExtendedCallHistoryClient, error)
	ListWhiteListPhoneBooks(ctx context.Context, in *ListWhiteListPhoneBooksReq, opts ...grpc.CallOption) (*ListWhiteListPhoneBooksRes, error)
	DownloadCallRecording(ctx context.Context, in *DownloadCallRecordingReq, opts ...grpc.CallOption) (*DownloadRecordingRes, error)
	DownloadCallRecordings(ctx context.Context, in *DownloadCallRecordingsReq, opts ...grpc.CallOption) (*DownloadRecordingRes, error)
	PlacePreviewDialCall(ctx context.Context, in *PlacePreviewDialCallReq, opts ...grpc.CallOption) (*PlacePreviewDialCallRes, error)
	CancelPreviewDialCall(ctx context.Context, in *CancelPreviewDialCallReq, opts ...grpc.CallOption) (*CancelPreviewDialCallRes, error)
	UpdateTaskStatus(ctx context.Context, in *UpdateTaskStatusReq, opts ...grpc.CallOption) (*Nil, error)
	// ListCallbackRoutingAgents returns a list of agents that are allowed to make a callback.
	ListCallbackRoutingAgents(ctx context.Context, in *ListCallbackRoutingAgentsReq, opts ...grpc.CallOption) (*ListCallbackRoutingAgentsRes, error)
	ListCallbackRoutingSkills(ctx context.Context, in *ListCallbackRoutingSkillsReq, opts ...grpc.CallOption) (*ListCallbackRoutingSkillsRes, error)
	HandleRecordingDelay(ctx context.Context, in *HandleRecordingDelayReq, opts ...grpc.CallOption) (*HandleRecordingDelayRes, error)
	UpdateAgentAssignedHuntGroup(ctx context.Context, in *UpdateAgentAssignedHuntGroupReq, opts ...grpc.CallOption) (*UpdateAgentAssignedHuntGroupRes, error)
	GetCallData(ctx context.Context, in *GetCallDataReq, opts ...grpc.CallOption) (*GetCallDataRes, error)
	ListHuntGroups(ctx context.Context, in *ListHuntGroupsReq, opts ...grpc.CallOption) (*ListHuntGroupsRes, error)
	// List the hunt groups an agent within a given hunt group can reassign
	// themselves to. The reassignment hunt groups can optionally be limited by a
	// hunt group setting. If a hunt group does not allow reassignment, the
	// returned list will be empty.
	ListReassignmentHuntGroups(ctx context.Context, in *ListReassignmentHuntGroupsReq, opts ...grpc.CallOption) (*ListReassignmentHuntGroupsRes, error)
	GetOrgAgentSettings(ctx context.Context, in *GetOrgAgentSettingsReq, opts ...grpc.CallOption) (*GetOrgAgentSettingsRes, error)
	// Lists caller id numbers with their associated region codes for the given
	// bucket
	ListCallerIdsFromBucket(ctx context.Context, in *ListCallerIdsFromBucketReq, opts ...grpc.CallOption) (*ListCallerIdsFromBucketRes, error)
	SaveLastCallResponse(ctx context.Context, in *SaveLastCallResponseReq, opts ...grpc.CallOption) (*SaveLastCallResponseRes, error)
	ListAgentCallLogsByCallSidAndType(ctx context.Context, in *ListAgentCallLogsByCallSidAndTypeReq, opts ...grpc.CallOption) (*ListAgentCallLogsByCallSidAndTypeRes, error)
	// Lists the keys and values of the latest responses for the given call_sid,
	// call_type and agent_sid
	ListAgentCallResponseValues(ctx context.Context, in *ListAgentCallResponseValuesReq, opts ...grpc.CallOption) (*ListAgentCallResponseValuesRes, error)
	// Get contact schema details based on contact group sid
	GetContactSchemaByContactGroup(ctx context.Context, in *GetContactSchemaByContactGroupReq, opts ...grpc.CallOption) (*ContactSchema, error)
	// List contact group details based on client sid from contact_group table
	ListContactGroupDetailsByClientSid(ctx context.Context, in *ListContactGroupDetailsByClientSidReq, opts ...grpc.CallOption) (*ListContactGroupDetailsByClientSidRes, error)
	// Get contact group details based on contact group sid from contact_group
	// table
	GetContactGroupDetails(ctx context.Context, in *GetContactGroupReq, opts ...grpc.CallOption) (*ContactGroup, error)
	// Get contact group size based on contacts size
	GetContactGroupSize(ctx context.Context, in *GetContactGroupReq, opts ...grpc.CallOption) (*GetContactGroupSizeRes, error)
	// Create contact field description details
	CreateContactFieldDescription(ctx context.Context, in *CreateContactFieldDescriptionReq, opts ...grpc.CallOption) (*CreateContactFieldDescriptionRes, error)
	// Update contact field description details
	UpdateContactFieldDescription(ctx context.Context, in *UpdateContactFieldDescriptionReq, opts ...grpc.CallOption) (*UpdateContactFieldDescriptionRes, error)
	// Delete contact field description details
	DeleteContactFieldDescription(ctx context.Context, in *DeleteContactFieldDescriptionReq, opts ...grpc.CallOption) (*DeleteContactFieldDescriptionRes, error)
	// List contact field desc details from contact_field_description table
	ListContactFieldDescriptions(ctx context.Context, in *ListContactFieldDescriptionsReq, opts ...grpc.CallOption) (*ListContactFieldDescriptionsRes, error)
	// List contact field description details based on contact group sid
	ListContactFieldDescriptionsByCGSid(ctx context.Context, in *ListContactFieldDescriptionsByCGSidReq, opts ...grpc.CallOption) (*ListContactFieldDescriptionsByCGSidRes, error)
	// List contactImportTemplates based on client_sid from
	// contact_import_template table
	ListContactImportTemplates(ctx context.Context, in *ListContactImportTemplatesReq, opts ...grpc.CallOption) (*ListContactImportTemplatesRes, error)
	// Updates task data for a preview record to finished and logs an agent
	// session event
	UpdatePreviewRecordToFinished(ctx context.Context, in *UpdatePreviewRecordToFinishedReq, opts ...grpc.CallOption) (*UpdatePreviewRecordToFinishedRes, error)
	// Updates the requesting agent's hunt_group_sid.
	UpdateAgentHuntGroup(ctx context.Context, in *UpdateAgentHuntGroupReq, opts ...grpc.CallOption) (*UpdateAgentHuntGroupRes, error)
	// Updates every given user's hunt_group_sid.
	// Required Permissions:
	//
	//	AGENT_MANAGEMENT
	//
	// Errors:
	//   - grpc.Internal: an error occurred while interacting with the database.
	//   - grpc.InvalidArgument: the hunt_group_sid or the user id list is empty or contains an invalid value.
	MultiAgentHuntGroupAssignment(ctx context.Context, in *MultiAgentHuntGroupAssignmentReq, opts ...grpc.CallOption) (*MultiAgentHuntGroupAssignmentRes, error)
	// GetAgentProfile returns an agent profile.
	GetAgentProfile(ctx context.Context, in *GetAgentProfileReq, opts ...grpc.CallOption) (*AgentProfile, error)
	// RecalculateBilling updates statuses for every billing type given on the
	// request message for either the current or previous month.
	// Only data that has already been summed for billing will have it's
	// status updated.
	// Required Permissions:
	//
	//	EDIT_BILLING
	RecalculateBilling(ctx context.Context, in *RecalculateBillingReq, opts ...grpc.CallOption) (*RecalculateBillingRes, error)
	// Gets information of the requesting client's broadcast templates (template_number, name, type, modify_date)
	// It reports if each found template is either STANDARD or LAYERED.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	NONE
	ListOutboundBroadcastTemplateData(ctx context.Context, in *ListOutboundBroadcastTemplateDataReq, opts ...grpc.CallOption) (*ListOutboundBroadcastTemplateDataRes, error)
	// Assign every skill to every agent with the given aptitude.
	// Errors:
	//   - grpc.Invalid: the aptitude field is invalid.
	MultiAgentSkillAssignment(ctx context.Context, in *MultiAgentSkillAssignmentReq, opts ...grpc.CallOption) (*MultiAgentSkillAssignmentRes, error)
	// Unassigns every given skill from every given user.
	// Errors:
	//   - grpc.InvalidArgument:
	//   - the user_ids list is empty or contains an empty string.
	//   - one or more of the user_ids does not belong to the client.
	//   - grpc.Internal: an error occurred while deleting the skill assignments.
	MultiAgentSkillUnassignment(ctx context.Context, in *MultiAgentSkillUnassignmentReq, opts ...grpc.CallOption) (*MultiAgentSkillUnassignmentRes, error)
	// List of agent hunt groups based on client sid
	// that have manually approved messages enabled
	ListMAMAgentHuntGroupsByClientSid(ctx context.Context, in *ListMAMAgentHuntGroupsByClientSidReq, opts ...grpc.CallOption) (*ListMAMAgentHuntGroupsByClientSidRes, error)
	// List every tts voice
	// Required Permissions:
	//
	//	TCN_ADMIN_SETTINGS
	//
	// Errors:
	//   - grpc.Internal: an error was returned while trying to retrieve the entity
	ListTtsVoices(ctx context.Context, in *ListTtsVoicesReq, opts ...grpc.CallOption) (*ListTtsVoicesRes, error)
	// Create a new tts voice
	// Required Permissions:
	//
	//	TCN_ADMIN_SETTINGS
	//
	// Errors:
	//   - grpc.InvalidArgument: the actual_name or port field on the request is invalid.
	//   - grpc.Internal: an error was returned while trying to insert the new tts voice.
	CreateTtsVoice(ctx context.Context, in *CreateTtsVoiceReq, opts ...grpc.CallOption) (*CreateTtsVoiceRes, error)
	// Delete a tts voice with the given tts_voice_sid.
	// Required Permissions:
	//
	//	TCN_ADMIN_SETTINGS
	//
	// Errors:
	//   - grpc.InvalidArgument: the tts_voice_sid field on the request is invalid.
	//   - grpc.Internal: an error was returned while trying to remove the tts voice.
	DeleteTtsVoice(ctx context.Context, in *DeleteTtsVoiceReq, opts ...grpc.CallOption) (*DeleteTtsVoiceRes, error)
	// List of account custom data keys based on client sid
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.Internal: an error was returned while trying to retrieve the entity
	ListCustomDataKeys(ctx context.Context, in *ListCustomDataKeysReq, opts ...grpc.CallOption) (*ListCustomDataKeysRes, error)
	// Creates a new Data Key as defined by the request message
	// the client_properties_sid should not be set, this is assigned on the backend
	// Required Permission:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.InvalidArgument: The custom_data_key field was not set
	//   - grpc.Internal: error creating custom data key
	CreateCustomDataKey(ctx context.Context, in *CreateCustomDataKeyReq, opts ...grpc.CallOption) (*CreateCustomDataKeyRes, error)
	// Deletes a Custom Data Key with the sid given on the request message.
	// Required Permission:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.InvalidArgument: The client_properties_sid field is invalid.
	//   - grpc.NotFound: no custom data key was deleted for the client_properties_sid.
	//   - grpc.Internal: an error occurred while trying to remove the custom data key.
	DeleteCustomDataKey(ctx context.Context, in *DeleteCustomDataKeyReq, opts ...grpc.CallOption) (*DeleteCustomDataKeyRes, error)
	// Updates a custom data key with the client_properties_sid and data key
	// given on the request
	// Required Permissions;
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.InvalidArgument: The client_properties_sid was empty or the data key was not set
	//   - grpc.Internal: error updating custom data key, more than 1 custom data key records affected
	//   - grpc.NotFound: no matching custom data key found
	UpdateCustomDataKey(ctx context.Context, in *UpdateCustomDataKeyReq, opts ...grpc.CallOption) (*UpdateCustomDataKeyRes, error)
	// Get Activity logs for given users and by specified time range
	// Required Permissions;
	//
	//	CUSTOMER_SUPPORT
	GetActivityLogHistory(ctx context.Context, in *GetActivityLogHistoryReq, opts ...grpc.CallOption) (P3Api_GetActivityLogHistoryClient, error)
	// List agent and queue table template properties by client sid
	ListTableTemplateProperties(ctx context.Context, in *ListTableTemplatePropertiesReq, opts ...grpc.CallOption) (*ListTableTemplatePropertiesRes, error)
	// List agent skills filters by client sid
	ListAgentSkillsFilters(ctx context.Context, in *ListAgentSkillsFiltersReq, opts ...grpc.CallOption) (*ListAgentSkillsFiltersRes, error)
	// List Schedule Rules
	ListScheduleRules(ctx context.Context, in *ListScheduleRulesRequest, opts ...grpc.CallOption) (*ListScheduleRulesResult, error)
	// List custom report filters by client sid
	ListCustomReportFilters(ctx context.Context, in *ListCustomReportFiltersReq, opts ...grpc.CallOption) (*ListCustomReportFiltersRes, error)
	// List sms numbers by client sid
	ListSmsNumbers(ctx context.Context, in *ListSmsNumbersReq, opts ...grpc.CallOption) (*ListSmsNumbersRes, error)
}

type p3ApiClient struct {
	cc grpc.ClientConnInterface
}

func NewP3ApiClient(cc grpc.ClientConnInterface) P3ApiClient {
	return &p3ApiClient{cc}
}

func (c *p3ApiClient) GetAgentHuntGroup(ctx context.Context, in *GetAgentHuntGroupReq, opts ...grpc.CallOption) (*HuntGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HuntGroup)
	err := c.cc.Invoke(ctx, P3Api_GetAgentHuntGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetAgentSession(ctx context.Context, in *GetAgentSessionReq, opts ...grpc.CallOption) (*AgentSession, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentSession)
	err := c.cc.Invoke(ctx, P3Api_GetAgentSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetAgentSkills(ctx context.Context, in *GetAgentSkillsReq, opts ...grpc.CallOption) (*GetAgentSkillsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentSkillsRes)
	err := c.cc.Invoke(ctx, P3Api_GetAgentSkills_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) CreateAgentSkill(ctx context.Context, in *CreateAgentSkillReq, opts ...grpc.CallOption) (*CreateAgentSkillRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAgentSkillRes)
	err := c.cc.Invoke(ctx, P3Api_CreateAgentSkill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) UpdateAgentSkill(ctx context.Context, in *UpdateAgentSkillReq, opts ...grpc.CallOption) (*UpdateAgentSkillRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAgentSkillRes)
	err := c.cc.Invoke(ctx, P3Api_UpdateAgentSkill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) DeleteAgentSkill(ctx context.Context, in *DeleteAgentSkillReq, opts ...grpc.CallOption) (*DeleteAgentSkillRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAgentSkillRes)
	err := c.cc.Invoke(ctx, P3Api_DeleteAgentSkill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListAgentSkills(ctx context.Context, in *ListAgentSkillsReq, opts ...grpc.CallOption) (*ListAgentSkillsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentSkillsRes)
	err := c.cc.Invoke(ctx, P3Api_ListAgentSkills_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListSkillsForCurrentAgent(ctx context.Context, in *ListSkillsForCurrentAgentReq, opts ...grpc.CallOption) (*ListSkillsForCurrentAgentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSkillsForCurrentAgentRes)
	err := c.cc.Invoke(ctx, P3Api_ListSkillsForCurrentAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListSkills(ctx context.Context, in *ListSkillsReq, opts ...grpc.CallOption) (*ListSkillsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSkillsRes)
	err := c.cc.Invoke(ctx, P3Api_ListSkills_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) UpdateAgentSkills(ctx context.Context, in *UpdateAgentSkillsReq, opts ...grpc.CallOption) (*UpdateAgentSkillsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAgentSkillsRes)
	err := c.cc.Invoke(ctx, P3Api_UpdateAgentSkills_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetCurrentAgent(ctx context.Context, in *GetCurrentAgentReq, opts ...grpc.CallOption) (*Agent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Agent)
	err := c.cc.Invoke(ctx, P3Api_GetCurrentAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetClientInfoData(ctx context.Context, in *GetClientInfoDataReq, opts ...grpc.CallOption) (*GetClientInfoDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClientInfoDataRes)
	err := c.cc.Invoke(ctx, P3Api_GetClientInfoData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetClientInfoDisplayTemplate(ctx context.Context, in *GetClientInfoDisplayTemplateReq, opts ...grpc.CallOption) (*GetClientInfoDisplayTemplateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClientInfoDisplayTemplateRes)
	err := c.cc.Invoke(ctx, P3Api_GetClientInfoDisplayTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListAgentStatisticsData(ctx context.Context, in *ListAgentStatisticsDataReq, opts ...grpc.CallOption) (*ListAgentStatisticsDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentStatisticsDataRes)
	err := c.cc.Invoke(ctx, P3Api_ListAgentStatisticsData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListPBXExtensions(ctx context.Context, in *ListPBXExtensionsReq, opts ...grpc.CallOption) (*ListPBXExtensionsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPBXExtensionsRes)
	err := c.cc.Invoke(ctx, P3Api_ListPBXExtensions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListAgentExtensions(ctx context.Context, in *ListAgentExtensionsReq, opts ...grpc.CallOption) (*ListAgentExtensionsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentExtensionsRes)
	err := c.cc.Invoke(ctx, P3Api_ListAgentExtensions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListHuntGroupExtensions(ctx context.Context, in *ListHuntGroupExtensionsReq, opts ...grpc.CallOption) (*ListHuntGroupExtensionsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHuntGroupExtensionsRes)
	err := c.cc.Invoke(ctx, P3Api_ListHuntGroupExtensions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) CreateExtension(ctx context.Context, in *CreateExtensionReq, opts ...grpc.CallOption) (*CreateExtensionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateExtensionRes)
	err := c.cc.Invoke(ctx, P3Api_CreateExtension_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) DeleteExtension(ctx context.Context, in *DeleteExtensionReq, opts ...grpc.CallOption) (*DeleteExtensionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteExtensionRes)
	err := c.cc.Invoke(ctx, P3Api_DeleteExtension_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) UpdateExtension(ctx context.Context, in *UpdateExtensionReq, opts ...grpc.CallOption) (*UpdateExtensionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateExtensionRes)
	err := c.cc.Invoke(ctx, P3Api_UpdateExtension_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) UpdatePBXExtension(ctx context.Context, in *UpdatePBXExtensionReq, opts ...grpc.CallOption) (*UpdatePBXExtensionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePBXExtensionRes)
	err := c.cc.Invoke(ctx, P3Api_UpdatePBXExtension_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) CreateDNCLNumbers(ctx context.Context, in *CreateDNCLNumbersReq, opts ...grpc.CallOption) (*CreateDNCLNumbersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDNCLNumbersRes)
	err := c.cc.Invoke(ctx, P3Api_CreateDNCLNumbers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetScriptOrResponses(ctx context.Context, in *GetScriptOrResponsesReq, opts ...grpc.CallOption) (*GetScriptOrResponsesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScriptOrResponsesRes)
	err := c.cc.Invoke(ctx, P3Api_GetScriptOrResponses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetHuntGroupAgentSettings(ctx context.Context, in *GetHuntGroupAgentSettingsReq, opts ...grpc.CallOption) (*HuntGroupAgentSettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HuntGroupAgentSettings)
	err := c.cc.Invoke(ctx, P3Api_GetHuntGroupAgentSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListHuntGroupWebLinks(ctx context.Context, in *ListHuntGroupWebLinksReq, opts ...grpc.CallOption) (*ListHuntGroupWebLinksRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHuntGroupWebLinksRes)
	err := c.cc.Invoke(ctx, P3Api_ListHuntGroupWebLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetHuntGroupPauseCodes(ctx context.Context, in *GetHuntGroupPauseCodesReq, opts ...grpc.CallOption) (*GetHuntGroupPauseCodesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHuntGroupPauseCodesRes)
	err := c.cc.Invoke(ctx, P3Api_GetHuntGroupPauseCodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListAgentCallHistory(ctx context.Context, in *ListAgentCallHistoryReq, opts ...grpc.CallOption) (*ListAgentCallHistoryRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentCallHistoryRes)
	err := c.cc.Invoke(ctx, P3Api_ListAgentCallHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListClientPhoneBookEntries(ctx context.Context, in *ListClientPhoneBookEntriesReq, opts ...grpc.CallOption) (*ListClientPhoneBookEntriesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClientPhoneBookEntriesRes)
	err := c.cc.Invoke(ctx, P3Api_ListClientPhoneBookEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListHuntGroupPhoneBookEntries(ctx context.Context, in *ListHuntGroupPhoneBookEntriesReq, opts ...grpc.CallOption) (*ListHuntGroupPhoneBookEntriesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHuntGroupPhoneBookEntriesRes)
	err := c.cc.Invoke(ctx, P3Api_ListHuntGroupPhoneBookEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) CreatePhoneBookEntry(ctx context.Context, in *CreatePhoneBookEntryReq, opts ...grpc.CallOption) (*CreatePhoneBookEntryRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePhoneBookEntryRes)
	err := c.cc.Invoke(ctx, P3Api_CreatePhoneBookEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) UpdatePhoneBookEntry(ctx context.Context, in *UpdatePhoneBookEntryReq, opts ...grpc.CallOption) (*UpdatePhoneBookEntryRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePhoneBookEntryRes)
	err := c.cc.Invoke(ctx, P3Api_UpdatePhoneBookEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) DeletePhoneBookEntry(ctx context.Context, in *DeletePhoneBookEntryReq, opts ...grpc.CallOption) (*DeletePhoneBookEntryRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePhoneBookEntryRes)
	err := c.cc.Invoke(ctx, P3Api_DeletePhoneBookEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListPhoneBooks(ctx context.Context, in *ListPhoneBooksReq, opts ...grpc.CallOption) (*ListPhoneBooksRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPhoneBooksRes)
	err := c.cc.Invoke(ctx, P3Api_ListPhoneBooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListAgentTriggers(ctx context.Context, in *ListAgentTriggersReq, opts ...grpc.CallOption) (*ListAgentTriggersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentTriggersRes)
	err := c.cc.Invoke(ctx, P3Api_ListAgentTriggers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetCampaignCompletionStatus(ctx context.Context, in *GetCampaignCompletionStatusReq, opts ...grpc.CallOption) (*GetCampaignCompletionStatusRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCampaignCompletionStatusRes)
	err := c.cc.Invoke(ctx, P3Api_GetCampaignCompletionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetLostPeerInfo(ctx context.Context, in *GetLostPeerInfoReq, opts ...grpc.CallOption) (*GetLostPeerInfoRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLostPeerInfoRes)
	err := c.cc.Invoke(ctx, P3Api_GetLostPeerInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetDispositionKeys(ctx context.Context, in *GetDispositionKeysReq, opts ...grpc.CallOption) (*GetDispositionKeysRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDispositionKeysRes)
	err := c.cc.Invoke(ctx, P3Api_GetDispositionKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetReadyAgents(ctx context.Context, in *GetReadyAgentsReq, opts ...grpc.CallOption) (*GetReadyAgentsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReadyAgentsRes)
	err := c.cc.Invoke(ctx, P3Api_GetReadyAgents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListAgentQueueAndOnHoldCallData(ctx context.Context, in *ListAgentQueueAndOnHoldCallDataReq, opts ...grpc.CallOption) (*ListAgentQueueAndOnHoldCallDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentQueueAndOnHoldCallDataRes)
	err := c.cc.Invoke(ctx, P3Api_ListAgentQueueAndOnHoldCallData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) SaveAgentCallResponses(ctx context.Context, in *SaveAgentCallResponsesReq, opts ...grpc.CallOption) (*SaveAgentCallResponsesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveAgentCallResponsesRes)
	err := c.cc.Invoke(ctx, P3Api_SaveAgentCallResponses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListAgentTransferOptions(ctx context.Context, in *ListAgentTransferOptionsReq, opts ...grpc.CallOption) (*ListAgentTransferOptionsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentTransferOptionsRes)
	err := c.cc.Invoke(ctx, P3Api_ListAgentTransferOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) UpdateAgentCallResponseValue(ctx context.Context, in *UpdateAgentCallResponseValueReq, opts ...grpc.CallOption) (*UpdateAgentCallResponseValueRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAgentCallResponseValueRes)
	err := c.cc.Invoke(ctx, P3Api_UpdateAgentCallResponseValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetIntercomPeerInfo(ctx context.Context, in *GetIntercomPeerInfoReq, opts ...grpc.CallOption) (*GetIntercomPeerInfoRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIntercomPeerInfoRes)
	err := c.cc.Invoke(ctx, P3Api_GetIntercomPeerInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListOrgResponseEvaluators(ctx context.Context, in *ListOrgResponseEvaluatorsReq, opts ...grpc.CallOption) (*ListOrgResponseEvaluatorsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrgResponseEvaluatorsRes)
	err := c.cc.Invoke(ctx, P3Api_ListOrgResponseEvaluators_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetQueueConfigurationOptionsArray(ctx context.Context, in *GetQueueConfigurationOptionsArrayReq, opts ...grpc.CallOption) (*GetQueueConfigurationOptionsArrayRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQueueConfigurationOptionsArrayRes)
	err := c.cc.Invoke(ctx, P3Api_GetQueueConfigurationOptionsArray_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetConditionalDNCLRules(ctx context.Context, in *GetConditionalDNCLRulesReq, opts ...grpc.CallOption) (*GetConditionalDNCLRulesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConditionalDNCLRulesRes)
	err := c.cc.Invoke(ctx, P3Api_GetConditionalDNCLRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ManualDialStart(ctx context.Context, in *ManualDialStartReq, opts ...grpc.CallOption) (*ManualDialStartRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ManualDialStartRes)
	err := c.cc.Invoke(ctx, P3Api_ManualDialStart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListExtendedCallHistory(ctx context.Context, in *ListExtendedCallHistoryReq, opts ...grpc.CallOption) (P3Api_ListExtendedCallHistoryClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &P3Api_ServiceDesc.Streams[0], P3Api_ListExtendedCallHistory_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &p3ApiListExtendedCallHistoryClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type P3Api_ListExtendedCallHistoryClient interface {
	Recv() (*ListExtendedCallHistoryRes, error)
	grpc.ClientStream
}

type p3ApiListExtendedCallHistoryClient struct {
	grpc.ClientStream
}

func (x *p3ApiListExtendedCallHistoryClient) Recv() (*ListExtendedCallHistoryRes, error) {
	m := new(ListExtendedCallHistoryRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *p3ApiClient) ListWhiteListPhoneBooks(ctx context.Context, in *ListWhiteListPhoneBooksReq, opts ...grpc.CallOption) (*ListWhiteListPhoneBooksRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWhiteListPhoneBooksRes)
	err := c.cc.Invoke(ctx, P3Api_ListWhiteListPhoneBooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) DownloadCallRecording(ctx context.Context, in *DownloadCallRecordingReq, opts ...grpc.CallOption) (*DownloadRecordingRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadRecordingRes)
	err := c.cc.Invoke(ctx, P3Api_DownloadCallRecording_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) DownloadCallRecordings(ctx context.Context, in *DownloadCallRecordingsReq, opts ...grpc.CallOption) (*DownloadRecordingRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadRecordingRes)
	err := c.cc.Invoke(ctx, P3Api_DownloadCallRecordings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) PlacePreviewDialCall(ctx context.Context, in *PlacePreviewDialCallReq, opts ...grpc.CallOption) (*PlacePreviewDialCallRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlacePreviewDialCallRes)
	err := c.cc.Invoke(ctx, P3Api_PlacePreviewDialCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) CancelPreviewDialCall(ctx context.Context, in *CancelPreviewDialCallReq, opts ...grpc.CallOption) (*CancelPreviewDialCallRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelPreviewDialCallRes)
	err := c.cc.Invoke(ctx, P3Api_CancelPreviewDialCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) UpdateTaskStatus(ctx context.Context, in *UpdateTaskStatusReq, opts ...grpc.CallOption) (*Nil, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Nil)
	err := c.cc.Invoke(ctx, P3Api_UpdateTaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListCallbackRoutingAgents(ctx context.Context, in *ListCallbackRoutingAgentsReq, opts ...grpc.CallOption) (*ListCallbackRoutingAgentsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCallbackRoutingAgentsRes)
	err := c.cc.Invoke(ctx, P3Api_ListCallbackRoutingAgents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListCallbackRoutingSkills(ctx context.Context, in *ListCallbackRoutingSkillsReq, opts ...grpc.CallOption) (*ListCallbackRoutingSkillsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCallbackRoutingSkillsRes)
	err := c.cc.Invoke(ctx, P3Api_ListCallbackRoutingSkills_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) HandleRecordingDelay(ctx context.Context, in *HandleRecordingDelayReq, opts ...grpc.CallOption) (*HandleRecordingDelayRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleRecordingDelayRes)
	err := c.cc.Invoke(ctx, P3Api_HandleRecordingDelay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) UpdateAgentAssignedHuntGroup(ctx context.Context, in *UpdateAgentAssignedHuntGroupReq, opts ...grpc.CallOption) (*UpdateAgentAssignedHuntGroupRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAgentAssignedHuntGroupRes)
	err := c.cc.Invoke(ctx, P3Api_UpdateAgentAssignedHuntGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetCallData(ctx context.Context, in *GetCallDataReq, opts ...grpc.CallOption) (*GetCallDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCallDataRes)
	err := c.cc.Invoke(ctx, P3Api_GetCallData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListHuntGroups(ctx context.Context, in *ListHuntGroupsReq, opts ...grpc.CallOption) (*ListHuntGroupsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHuntGroupsRes)
	err := c.cc.Invoke(ctx, P3Api_ListHuntGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListReassignmentHuntGroups(ctx context.Context, in *ListReassignmentHuntGroupsReq, opts ...grpc.CallOption) (*ListReassignmentHuntGroupsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReassignmentHuntGroupsRes)
	err := c.cc.Invoke(ctx, P3Api_ListReassignmentHuntGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetOrgAgentSettings(ctx context.Context, in *GetOrgAgentSettingsReq, opts ...grpc.CallOption) (*GetOrgAgentSettingsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrgAgentSettingsRes)
	err := c.cc.Invoke(ctx, P3Api_GetOrgAgentSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListCallerIdsFromBucket(ctx context.Context, in *ListCallerIdsFromBucketReq, opts ...grpc.CallOption) (*ListCallerIdsFromBucketRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCallerIdsFromBucketRes)
	err := c.cc.Invoke(ctx, P3Api_ListCallerIdsFromBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) SaveLastCallResponse(ctx context.Context, in *SaveLastCallResponseReq, opts ...grpc.CallOption) (*SaveLastCallResponseRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveLastCallResponseRes)
	err := c.cc.Invoke(ctx, P3Api_SaveLastCallResponse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListAgentCallLogsByCallSidAndType(ctx context.Context, in *ListAgentCallLogsByCallSidAndTypeReq, opts ...grpc.CallOption) (*ListAgentCallLogsByCallSidAndTypeRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentCallLogsByCallSidAndTypeRes)
	err := c.cc.Invoke(ctx, P3Api_ListAgentCallLogsByCallSidAndType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListAgentCallResponseValues(ctx context.Context, in *ListAgentCallResponseValuesReq, opts ...grpc.CallOption) (*ListAgentCallResponseValuesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentCallResponseValuesRes)
	err := c.cc.Invoke(ctx, P3Api_ListAgentCallResponseValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetContactSchemaByContactGroup(ctx context.Context, in *GetContactSchemaByContactGroupReq, opts ...grpc.CallOption) (*ContactSchema, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactSchema)
	err := c.cc.Invoke(ctx, P3Api_GetContactSchemaByContactGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListContactGroupDetailsByClientSid(ctx context.Context, in *ListContactGroupDetailsByClientSidReq, opts ...grpc.CallOption) (*ListContactGroupDetailsByClientSidRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListContactGroupDetailsByClientSidRes)
	err := c.cc.Invoke(ctx, P3Api_ListContactGroupDetailsByClientSid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetContactGroupDetails(ctx context.Context, in *GetContactGroupReq, opts ...grpc.CallOption) (*ContactGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactGroup)
	err := c.cc.Invoke(ctx, P3Api_GetContactGroupDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetContactGroupSize(ctx context.Context, in *GetContactGroupReq, opts ...grpc.CallOption) (*GetContactGroupSizeRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContactGroupSizeRes)
	err := c.cc.Invoke(ctx, P3Api_GetContactGroupSize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) CreateContactFieldDescription(ctx context.Context, in *CreateContactFieldDescriptionReq, opts ...grpc.CallOption) (*CreateContactFieldDescriptionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateContactFieldDescriptionRes)
	err := c.cc.Invoke(ctx, P3Api_CreateContactFieldDescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) UpdateContactFieldDescription(ctx context.Context, in *UpdateContactFieldDescriptionReq, opts ...grpc.CallOption) (*UpdateContactFieldDescriptionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateContactFieldDescriptionRes)
	err := c.cc.Invoke(ctx, P3Api_UpdateContactFieldDescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) DeleteContactFieldDescription(ctx context.Context, in *DeleteContactFieldDescriptionReq, opts ...grpc.CallOption) (*DeleteContactFieldDescriptionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteContactFieldDescriptionRes)
	err := c.cc.Invoke(ctx, P3Api_DeleteContactFieldDescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListContactFieldDescriptions(ctx context.Context, in *ListContactFieldDescriptionsReq, opts ...grpc.CallOption) (*ListContactFieldDescriptionsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListContactFieldDescriptionsRes)
	err := c.cc.Invoke(ctx, P3Api_ListContactFieldDescriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListContactFieldDescriptionsByCGSid(ctx context.Context, in *ListContactFieldDescriptionsByCGSidReq, opts ...grpc.CallOption) (*ListContactFieldDescriptionsByCGSidRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListContactFieldDescriptionsByCGSidRes)
	err := c.cc.Invoke(ctx, P3Api_ListContactFieldDescriptionsByCGSid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListContactImportTemplates(ctx context.Context, in *ListContactImportTemplatesReq, opts ...grpc.CallOption) (*ListContactImportTemplatesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListContactImportTemplatesRes)
	err := c.cc.Invoke(ctx, P3Api_ListContactImportTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) UpdatePreviewRecordToFinished(ctx context.Context, in *UpdatePreviewRecordToFinishedReq, opts ...grpc.CallOption) (*UpdatePreviewRecordToFinishedRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePreviewRecordToFinishedRes)
	err := c.cc.Invoke(ctx, P3Api_UpdatePreviewRecordToFinished_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) UpdateAgentHuntGroup(ctx context.Context, in *UpdateAgentHuntGroupReq, opts ...grpc.CallOption) (*UpdateAgentHuntGroupRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAgentHuntGroupRes)
	err := c.cc.Invoke(ctx, P3Api_UpdateAgentHuntGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) MultiAgentHuntGroupAssignment(ctx context.Context, in *MultiAgentHuntGroupAssignmentReq, opts ...grpc.CallOption) (*MultiAgentHuntGroupAssignmentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiAgentHuntGroupAssignmentRes)
	err := c.cc.Invoke(ctx, P3Api_MultiAgentHuntGroupAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetAgentProfile(ctx context.Context, in *GetAgentProfileReq, opts ...grpc.CallOption) (*AgentProfile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentProfile)
	err := c.cc.Invoke(ctx, P3Api_GetAgentProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) RecalculateBilling(ctx context.Context, in *RecalculateBillingReq, opts ...grpc.CallOption) (*RecalculateBillingRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecalculateBillingRes)
	err := c.cc.Invoke(ctx, P3Api_RecalculateBilling_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListOutboundBroadcastTemplateData(ctx context.Context, in *ListOutboundBroadcastTemplateDataReq, opts ...grpc.CallOption) (*ListOutboundBroadcastTemplateDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOutboundBroadcastTemplateDataRes)
	err := c.cc.Invoke(ctx, P3Api_ListOutboundBroadcastTemplateData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) MultiAgentSkillAssignment(ctx context.Context, in *MultiAgentSkillAssignmentReq, opts ...grpc.CallOption) (*MultiAgentSkillAssignmentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiAgentSkillAssignmentRes)
	err := c.cc.Invoke(ctx, P3Api_MultiAgentSkillAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) MultiAgentSkillUnassignment(ctx context.Context, in *MultiAgentSkillUnassignmentReq, opts ...grpc.CallOption) (*MultiAgentSkillUnassignmentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiAgentSkillUnassignmentRes)
	err := c.cc.Invoke(ctx, P3Api_MultiAgentSkillUnassignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListMAMAgentHuntGroupsByClientSid(ctx context.Context, in *ListMAMAgentHuntGroupsByClientSidReq, opts ...grpc.CallOption) (*ListMAMAgentHuntGroupsByClientSidRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMAMAgentHuntGroupsByClientSidRes)
	err := c.cc.Invoke(ctx, P3Api_ListMAMAgentHuntGroupsByClientSid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListTtsVoices(ctx context.Context, in *ListTtsVoicesReq, opts ...grpc.CallOption) (*ListTtsVoicesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTtsVoicesRes)
	err := c.cc.Invoke(ctx, P3Api_ListTtsVoices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) CreateTtsVoice(ctx context.Context, in *CreateTtsVoiceReq, opts ...grpc.CallOption) (*CreateTtsVoiceRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTtsVoiceRes)
	err := c.cc.Invoke(ctx, P3Api_CreateTtsVoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) DeleteTtsVoice(ctx context.Context, in *DeleteTtsVoiceReq, opts ...grpc.CallOption) (*DeleteTtsVoiceRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTtsVoiceRes)
	err := c.cc.Invoke(ctx, P3Api_DeleteTtsVoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListCustomDataKeys(ctx context.Context, in *ListCustomDataKeysReq, opts ...grpc.CallOption) (*ListCustomDataKeysRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCustomDataKeysRes)
	err := c.cc.Invoke(ctx, P3Api_ListCustomDataKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) CreateCustomDataKey(ctx context.Context, in *CreateCustomDataKeyReq, opts ...grpc.CallOption) (*CreateCustomDataKeyRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCustomDataKeyRes)
	err := c.cc.Invoke(ctx, P3Api_CreateCustomDataKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) DeleteCustomDataKey(ctx context.Context, in *DeleteCustomDataKeyReq, opts ...grpc.CallOption) (*DeleteCustomDataKeyRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCustomDataKeyRes)
	err := c.cc.Invoke(ctx, P3Api_DeleteCustomDataKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) UpdateCustomDataKey(ctx context.Context, in *UpdateCustomDataKeyReq, opts ...grpc.CallOption) (*UpdateCustomDataKeyRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCustomDataKeyRes)
	err := c.cc.Invoke(ctx, P3Api_UpdateCustomDataKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetActivityLogHistory(ctx context.Context, in *GetActivityLogHistoryReq, opts ...grpc.CallOption) (P3Api_GetActivityLogHistoryClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &P3Api_ServiceDesc.Streams[1], P3Api_GetActivityLogHistory_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &p3ApiGetActivityLogHistoryClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type P3Api_GetActivityLogHistoryClient interface {
	Recv() (*GetActivityLogHistoryRes, error)
	grpc.ClientStream
}

type p3ApiGetActivityLogHistoryClient struct {
	grpc.ClientStream
}

func (x *p3ApiGetActivityLogHistoryClient) Recv() (*GetActivityLogHistoryRes, error) {
	m := new(GetActivityLogHistoryRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *p3ApiClient) ListTableTemplateProperties(ctx context.Context, in *ListTableTemplatePropertiesReq, opts ...grpc.CallOption) (*ListTableTemplatePropertiesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTableTemplatePropertiesRes)
	err := c.cc.Invoke(ctx, P3Api_ListTableTemplateProperties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListAgentSkillsFilters(ctx context.Context, in *ListAgentSkillsFiltersReq, opts ...grpc.CallOption) (*ListAgentSkillsFiltersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentSkillsFiltersRes)
	err := c.cc.Invoke(ctx, P3Api_ListAgentSkillsFilters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListScheduleRules(ctx context.Context, in *ListScheduleRulesRequest, opts ...grpc.CallOption) (*ListScheduleRulesResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListScheduleRulesResult)
	err := c.cc.Invoke(ctx, P3Api_ListScheduleRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListCustomReportFilters(ctx context.Context, in *ListCustomReportFiltersReq, opts ...grpc.CallOption) (*ListCustomReportFiltersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCustomReportFiltersRes)
	err := c.cc.Invoke(ctx, P3Api_ListCustomReportFilters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListSmsNumbers(ctx context.Context, in *ListSmsNumbersReq, opts ...grpc.CallOption) (*ListSmsNumbersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSmsNumbersRes)
	err := c.cc.Invoke(ctx, P3Api_ListSmsNumbers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// P3ApiServer is the server API for P3Api service.
// All implementations must embed UnimplementedP3ApiServer
// for forward compatibility
type P3ApiServer interface {
	GetAgentHuntGroup(context.Context, *GetAgentHuntGroupReq) (*HuntGroup, error)
	GetAgentSession(context.Context, *GetAgentSessionReq) (*AgentSession, error)
	// Gets the skills of the requesting agent. This includes agent skills, hunt group skills, and extension skills(PBX).
	// Skills will be returned as a value pair (name, level).
	// For agent skills, the name of each skill will be the agent_skill_sid.
	// All other skills' names (hunt group and PBX) will be given special formats.
	// The requesting agent and hunt_group_sid skills will be defaulted to the max level (1000 and 100 respectively).
	//
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the hunt_group_sid in the request in invalid.
	GetAgentSkills(context.Context, *GetAgentSkillsReq) (*GetAgentSkillsRes, error)
	// Creates a new agent skill as defined by the request message.
	// Errors:
	//   - grpc.InvalidArgument: the client_sid or name in the request is invalid.
	CreateAgentSkill(context.Context, *CreateAgentSkillReq) (*CreateAgentSkillRes, error)
	// Updates an agent skill as defined by the request message.
	// Errors:
	//   - grpc.InvalidArgument: the agent_skill_sid or name in the request is invalid.
	UpdateAgentSkill(context.Context, *UpdateAgentSkillReq) (*UpdateAgentSkillRes, error)
	// Deletes the agent skill with the agent_skill_sid given on the request.
	// Errors:
	//   - grpc.InvalidArgument: the agent_skill_sid in the request is invalid.
	DeleteAgentSkill(context.Context, *DeleteAgentSkillReq) (*DeleteAgentSkillRes, error)
	// Returns a list of agent skills for the given client sid.
	// DEPRECATED. Use ListSkills
	ListAgentSkills(context.Context, *ListAgentSkillsReq) (*ListAgentSkillsRes, error)
	// Returns a list of skills for the current agent.
	ListSkillsForCurrentAgent(context.Context, *ListSkillsForCurrentAgentReq) (*ListSkillsForCurrentAgentRes, error)
	// Returns a list of skills filtered by types given on
	// the request message field type_filter. Leaving the type_filter
	// field empty will return all types of skills.
	ListSkills(context.Context, *ListSkillsReq) (*ListSkillsRes, error)
	// Updates an agents assigned skills as defined by the skills list on
	// the request message.
	// Errors:
	//   - grpc.InvalidArgument: the user_id on the request is invalid.
	UpdateAgentSkills(context.Context, *UpdateAgentSkillsReq) (*UpdateAgentSkillsRes, error)
	GetCurrentAgent(context.Context, *GetCurrentAgentReq) (*Agent, error)
	GetClientInfoData(context.Context, *GetClientInfoDataReq) (*GetClientInfoDataRes, error)
	GetClientInfoDisplayTemplate(context.Context, *GetClientInfoDisplayTemplateReq) (*GetClientInfoDisplayTemplateRes, error)
	ListAgentStatisticsData(context.Context, *ListAgentStatisticsDataReq) (*ListAgentStatisticsDataRes, error)
	// Lists all agent and hunt group PBX extensions that the requested agent has.
	ListPBXExtensions(context.Context, *ListPBXExtensionsReq) (*ListPBXExtensionsRes, error)
	// Lists every agent extension for the current client
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.Internal: unexpected error getting pbx_extensions
	ListAgentExtensions(context.Context, *ListAgentExtensionsReq) (*ListAgentExtensionsRes, error)
	// Lists every hunt group extension for the current client
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.Internal: unexpected error getting pbx_extensions
	ListHuntGroupExtensions(context.Context, *ListHuntGroupExtensionsReq) (*ListHuntGroupExtensionsRes, error)
	// Creates a new extension as defined by the request message
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request has missing or invalid fields.
	//   - grpc.Internal: An unexpected error occurred while saving the extension.
	CreateExtension(context.Context, *CreateExtensionReq) (*CreateExtensionRes, error)
	// Deletes a pbx_extension with the given pbx_extension_sid.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request had invalid or missing fields.
	DeleteExtension(context.Context, *DeleteExtensionReq) (*DeleteExtensionRes, error)
	// Updates an extension as defined by the request message.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request had invalid or missing fields.
	//   - grpc.Internal: An unexpected error occured updating the extension.
	UpdateExtension(context.Context, *UpdateExtensionReq) (*UpdateExtensionRes, error)
	UpdatePBXExtension(context.Context, *UpdatePBXExtensionReq) (*UpdatePBXExtensionRes, error)
	CreateDNCLNumbers(context.Context, *CreateDNCLNumbersReq) (*CreateDNCLNumbersRes, error)
	// Gets the campaign or huntgroup script for the given agent's current hunt
	// group. If no script is found, it gets the hunt group responses for the
	// agent's current hunt group. It also does a mail merge with the found script
	// or responses (if able).
	GetScriptOrResponses(context.Context, *GetScriptOrResponsesReq) (*GetScriptOrResponsesRes, error)
	GetHuntGroupAgentSettings(context.Context, *GetHuntGroupAgentSettingsReq) (*HuntGroupAgentSettings, error)
	// Returns a list of weblinks for the hunt group in the request.
	// It replaces any parameters of a given weblink with the call data of the call sid and type from the request message or with the callback details (if a scheduled_callback_id is given).
	ListHuntGroupWebLinks(context.Context, *ListHuntGroupWebLinksReq) (*ListHuntGroupWebLinksRes, error)
	GetHuntGroupPauseCodes(context.Context, *GetHuntGroupPauseCodesReq) (*GetHuntGroupPauseCodesRes, error)
	// Lists the call history of the requested agent for the past day or
	// session_sid, depending on the filter parameter.
	ListAgentCallHistory(context.Context, *ListAgentCallHistoryReq) (*ListAgentCallHistoryRes, error)
	// Lists all client phone book entries.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	ListClientPhoneBookEntries(context.Context, *ListClientPhoneBookEntriesReq) (*ListClientPhoneBookEntriesRes, error)
	// Lists all hunt group phone book entries.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	ListHuntGroupPhoneBookEntries(context.Context, *ListHuntGroupPhoneBookEntriesReq) (*ListHuntGroupPhoneBookEntriesRes, error)
	// Creates a new phone_book as defined by the request message.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: the fields on the request are missing or invalid.
	//   - grpc.Internal: unexpected error occurred when saving the phone book.
	CreatePhoneBookEntry(context.Context, *CreatePhoneBookEntryReq) (*CreatePhoneBookEntryRes, error)
	// Updates an existing phone_book as defined by the request message.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: the fields on the request are missing or invalid.
	//   - grpc.Internal: unexpected error occurred when saving the phone book.
	UpdatePhoneBookEntry(context.Context, *UpdatePhoneBookEntryReq) (*UpdatePhoneBookEntryRes, error)
	// Deletes the phone_book with the phone_book_sid given on the reques message.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	DeletePhoneBookEntry(context.Context, *DeletePhoneBookEntryReq) (*DeletePhoneBookEntryRes, error)
	// Lists caller_id, outbound and transfer phone books for the requesting client and given hunt group sid.
	// Entries will be ordered by entry_name and phone_number.
	//
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the client_sid or hunt_group_sid in the request are invalid.
	//   - grpc.Internal: unexpected error occurred when retrieving the phone books.
	ListPhoneBooks(context.Context, *ListPhoneBooksReq) (*ListPhoneBooksRes, error)
	ListAgentTriggers(context.Context, *ListAgentTriggersReq) (*ListAgentTriggersRes, error)
	// Gets all running broadcasts (task groups) for the requesting agent and hunt_group_sid in the request.
	// Calculates the percentage of completed tasks for each of those task groups.
	// Calculates the overall task completion percentage of all matching task groups.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the hunt_group_sid in the request is invalid.
	GetCampaignCompletionStatus(context.Context, *GetCampaignCompletionStatusReq) (*GetCampaignCompletionStatusRes, error)
	// Uses lost peer call sid and call type from the request to get information about lost call
	// gets the name and hunt group of the agent that was connected to that call and all types of skills the call has.
	//
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the call_sid in the request in invalid.
	//   - grpc.NotFound: the call sid provided wasn't previously connected to any agent.
	GetLostPeerInfo(context.Context, *GetLostPeerInfoReq) (*GetLostPeerInfoRes, error)
	// Gets all the available Disposition Keys
	//
	// Required permissions:
	//
	//	NONE
	GetDispositionKeys(context.Context, *GetDispositionKeysReq) (*GetDispositionKeysRes, error)
	GetReadyAgents(context.Context, *GetReadyAgentsReq) (*GetReadyAgentsRes, error)
	// Returns lists with call data of calls that were:
	// Placed on multihold by the requesting agent.
	// Queued, are ready to be handled and require a subset of the agent_skills provided.
	// Placed in the Hold Queue Monitor, haven't been picked up yet and require a subset of the agent_skills provided.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the agent_session_sid provided in the request is invalid.
	ListAgentQueueAndOnHoldCallData(context.Context, *ListAgentQueueAndOnHoldCallDataReq) (*ListAgentQueueAndOnHoldCallDataRes, error)
	SaveAgentCallResponses(context.Context, *SaveAgentCallResponsesReq) (*SaveAgentCallResponsesRes, error)
	ListAgentTransferOptions(context.Context, *ListAgentTransferOptionsReq) (*ListAgentTransferOptionsRes, error)
	UpdateAgentCallResponseValue(context.Context, *UpdateAgentCallResponseValueReq) (*UpdateAgentCallResponseValueRes, error)
	GetIntercomPeerInfo(context.Context, *GetIntercomPeerInfoReq) (*GetIntercomPeerInfoRes, error)
	// Lists the requesting user's org response evaluators.
	ListOrgResponseEvaluators(context.Context, *ListOrgResponseEvaluatorsReq) (*ListOrgResponseEvaluatorsRes, error)
	GetQueueConfigurationOptionsArray(context.Context, *GetQueueConfigurationOptionsArrayReq) (*GetQueueConfigurationOptionsArrayRes, error)
	// Get the rules for conditionally adding a number to the DNCL depending on
	// responses or scripts
	GetConditionalDNCLRules(context.Context, *GetConditionalDNCLRulesReq) (*GetConditionalDNCLRulesRes, error)
	ManualDialStart(context.Context, *ManualDialStartReq) (*ManualDialStartRes, error)
	ListExtendedCallHistory(*ListExtendedCallHistoryReq, P3Api_ListExtendedCallHistoryServer) error
	ListWhiteListPhoneBooks(context.Context, *ListWhiteListPhoneBooksReq) (*ListWhiteListPhoneBooksRes, error)
	DownloadCallRecording(context.Context, *DownloadCallRecordingReq) (*DownloadRecordingRes, error)
	DownloadCallRecordings(context.Context, *DownloadCallRecordingsReq) (*DownloadRecordingRes, error)
	PlacePreviewDialCall(context.Context, *PlacePreviewDialCallReq) (*PlacePreviewDialCallRes, error)
	CancelPreviewDialCall(context.Context, *CancelPreviewDialCallReq) (*CancelPreviewDialCallRes, error)
	UpdateTaskStatus(context.Context, *UpdateTaskStatusReq) (*Nil, error)
	// ListCallbackRoutingAgents returns a list of agents that are allowed to make a callback.
	ListCallbackRoutingAgents(context.Context, *ListCallbackRoutingAgentsReq) (*ListCallbackRoutingAgentsRes, error)
	ListCallbackRoutingSkills(context.Context, *ListCallbackRoutingSkillsReq) (*ListCallbackRoutingSkillsRes, error)
	HandleRecordingDelay(context.Context, *HandleRecordingDelayReq) (*HandleRecordingDelayRes, error)
	UpdateAgentAssignedHuntGroup(context.Context, *UpdateAgentAssignedHuntGroupReq) (*UpdateAgentAssignedHuntGroupRes, error)
	GetCallData(context.Context, *GetCallDataReq) (*GetCallDataRes, error)
	ListHuntGroups(context.Context, *ListHuntGroupsReq) (*ListHuntGroupsRes, error)
	// List the hunt groups an agent within a given hunt group can reassign
	// themselves to. The reassignment hunt groups can optionally be limited by a
	// hunt group setting. If a hunt group does not allow reassignment, the
	// returned list will be empty.
	ListReassignmentHuntGroups(context.Context, *ListReassignmentHuntGroupsReq) (*ListReassignmentHuntGroupsRes, error)
	GetOrgAgentSettings(context.Context, *GetOrgAgentSettingsReq) (*GetOrgAgentSettingsRes, error)
	// Lists caller id numbers with their associated region codes for the given
	// bucket
	ListCallerIdsFromBucket(context.Context, *ListCallerIdsFromBucketReq) (*ListCallerIdsFromBucketRes, error)
	SaveLastCallResponse(context.Context, *SaveLastCallResponseReq) (*SaveLastCallResponseRes, error)
	ListAgentCallLogsByCallSidAndType(context.Context, *ListAgentCallLogsByCallSidAndTypeReq) (*ListAgentCallLogsByCallSidAndTypeRes, error)
	// Lists the keys and values of the latest responses for the given call_sid,
	// call_type and agent_sid
	ListAgentCallResponseValues(context.Context, *ListAgentCallResponseValuesReq) (*ListAgentCallResponseValuesRes, error)
	// Get contact schema details based on contact group sid
	GetContactSchemaByContactGroup(context.Context, *GetContactSchemaByContactGroupReq) (*ContactSchema, error)
	// List contact group details based on client sid from contact_group table
	ListContactGroupDetailsByClientSid(context.Context, *ListContactGroupDetailsByClientSidReq) (*ListContactGroupDetailsByClientSidRes, error)
	// Get contact group details based on contact group sid from contact_group
	// table
	GetContactGroupDetails(context.Context, *GetContactGroupReq) (*ContactGroup, error)
	// Get contact group size based on contacts size
	GetContactGroupSize(context.Context, *GetContactGroupReq) (*GetContactGroupSizeRes, error)
	// Create contact field description details
	CreateContactFieldDescription(context.Context, *CreateContactFieldDescriptionReq) (*CreateContactFieldDescriptionRes, error)
	// Update contact field description details
	UpdateContactFieldDescription(context.Context, *UpdateContactFieldDescriptionReq) (*UpdateContactFieldDescriptionRes, error)
	// Delete contact field description details
	DeleteContactFieldDescription(context.Context, *DeleteContactFieldDescriptionReq) (*DeleteContactFieldDescriptionRes, error)
	// List contact field desc details from contact_field_description table
	ListContactFieldDescriptions(context.Context, *ListContactFieldDescriptionsReq) (*ListContactFieldDescriptionsRes, error)
	// List contact field description details based on contact group sid
	ListContactFieldDescriptionsByCGSid(context.Context, *ListContactFieldDescriptionsByCGSidReq) (*ListContactFieldDescriptionsByCGSidRes, error)
	// List contactImportTemplates based on client_sid from
	// contact_import_template table
	ListContactImportTemplates(context.Context, *ListContactImportTemplatesReq) (*ListContactImportTemplatesRes, error)
	// Updates task data for a preview record to finished and logs an agent
	// session event
	UpdatePreviewRecordToFinished(context.Context, *UpdatePreviewRecordToFinishedReq) (*UpdatePreviewRecordToFinishedRes, error)
	// Updates the requesting agent's hunt_group_sid.
	UpdateAgentHuntGroup(context.Context, *UpdateAgentHuntGroupReq) (*UpdateAgentHuntGroupRes, error)
	// Updates every given user's hunt_group_sid.
	// Required Permissions:
	//
	//	AGENT_MANAGEMENT
	//
	// Errors:
	//   - grpc.Internal: an error occurred while interacting with the database.
	//   - grpc.InvalidArgument: the hunt_group_sid or the user id list is empty or contains an invalid value.
	MultiAgentHuntGroupAssignment(context.Context, *MultiAgentHuntGroupAssignmentReq) (*MultiAgentHuntGroupAssignmentRes, error)
	// GetAgentProfile returns an agent profile.
	GetAgentProfile(context.Context, *GetAgentProfileReq) (*AgentProfile, error)
	// RecalculateBilling updates statuses for every billing type given on the
	// request message for either the current or previous month.
	// Only data that has already been summed for billing will have it's
	// status updated.
	// Required Permissions:
	//
	//	EDIT_BILLING
	RecalculateBilling(context.Context, *RecalculateBillingReq) (*RecalculateBillingRes, error)
	// Gets information of the requesting client's broadcast templates (template_number, name, type, modify_date)
	// It reports if each found template is either STANDARD or LAYERED.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	NONE
	ListOutboundBroadcastTemplateData(context.Context, *ListOutboundBroadcastTemplateDataReq) (*ListOutboundBroadcastTemplateDataRes, error)
	// Assign every skill to every agent with the given aptitude.
	// Errors:
	//   - grpc.Invalid: the aptitude field is invalid.
	MultiAgentSkillAssignment(context.Context, *MultiAgentSkillAssignmentReq) (*MultiAgentSkillAssignmentRes, error)
	// Unassigns every given skill from every given user.
	// Errors:
	//   - grpc.InvalidArgument:
	//   - the user_ids list is empty or contains an empty string.
	//   - one or more of the user_ids does not belong to the client.
	//   - grpc.Internal: an error occurred while deleting the skill assignments.
	MultiAgentSkillUnassignment(context.Context, *MultiAgentSkillUnassignmentReq) (*MultiAgentSkillUnassignmentRes, error)
	// List of agent hunt groups based on client sid
	// that have manually approved messages enabled
	ListMAMAgentHuntGroupsByClientSid(context.Context, *ListMAMAgentHuntGroupsByClientSidReq) (*ListMAMAgentHuntGroupsByClientSidRes, error)
	// List every tts voice
	// Required Permissions:
	//
	//	TCN_ADMIN_SETTINGS
	//
	// Errors:
	//   - grpc.Internal: an error was returned while trying to retrieve the entity
	ListTtsVoices(context.Context, *ListTtsVoicesReq) (*ListTtsVoicesRes, error)
	// Create a new tts voice
	// Required Permissions:
	//
	//	TCN_ADMIN_SETTINGS
	//
	// Errors:
	//   - grpc.InvalidArgument: the actual_name or port field on the request is invalid.
	//   - grpc.Internal: an error was returned while trying to insert the new tts voice.
	CreateTtsVoice(context.Context, *CreateTtsVoiceReq) (*CreateTtsVoiceRes, error)
	// Delete a tts voice with the given tts_voice_sid.
	// Required Permissions:
	//
	//	TCN_ADMIN_SETTINGS
	//
	// Errors:
	//   - grpc.InvalidArgument: the tts_voice_sid field on the request is invalid.
	//   - grpc.Internal: an error was returned while trying to remove the tts voice.
	DeleteTtsVoice(context.Context, *DeleteTtsVoiceReq) (*DeleteTtsVoiceRes, error)
	// List of account custom data keys based on client sid
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.Internal: an error was returned while trying to retrieve the entity
	ListCustomDataKeys(context.Context, *ListCustomDataKeysReq) (*ListCustomDataKeysRes, error)
	// Creates a new Data Key as defined by the request message
	// the client_properties_sid should not be set, this is assigned on the backend
	// Required Permission:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.InvalidArgument: The custom_data_key field was not set
	//   - grpc.Internal: error creating custom data key
	CreateCustomDataKey(context.Context, *CreateCustomDataKeyReq) (*CreateCustomDataKeyRes, error)
	// Deletes a Custom Data Key with the sid given on the request message.
	// Required Permission:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.InvalidArgument: The client_properties_sid field is invalid.
	//   - grpc.NotFound: no custom data key was deleted for the client_properties_sid.
	//   - grpc.Internal: an error occurred while trying to remove the custom data key.
	DeleteCustomDataKey(context.Context, *DeleteCustomDataKeyReq) (*DeleteCustomDataKeyRes, error)
	// Updates a custom data key with the client_properties_sid and data key
	// given on the request
	// Required Permissions;
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.InvalidArgument: The client_properties_sid was empty or the data key was not set
	//   - grpc.Internal: error updating custom data key, more than 1 custom data key records affected
	//   - grpc.NotFound: no matching custom data key found
	UpdateCustomDataKey(context.Context, *UpdateCustomDataKeyReq) (*UpdateCustomDataKeyRes, error)
	// Get Activity logs for given users and by specified time range
	// Required Permissions;
	//
	//	CUSTOMER_SUPPORT
	GetActivityLogHistory(*GetActivityLogHistoryReq, P3Api_GetActivityLogHistoryServer) error
	// List agent and queue table template properties by client sid
	ListTableTemplateProperties(context.Context, *ListTableTemplatePropertiesReq) (*ListTableTemplatePropertiesRes, error)
	// List agent skills filters by client sid
	ListAgentSkillsFilters(context.Context, *ListAgentSkillsFiltersReq) (*ListAgentSkillsFiltersRes, error)
	// List Schedule Rules
	ListScheduleRules(context.Context, *ListScheduleRulesRequest) (*ListScheduleRulesResult, error)
	// List custom report filters by client sid
	ListCustomReportFilters(context.Context, *ListCustomReportFiltersReq) (*ListCustomReportFiltersRes, error)
	// List sms numbers by client sid
	ListSmsNumbers(context.Context, *ListSmsNumbersReq) (*ListSmsNumbersRes, error)
	mustEmbedUnimplementedP3ApiServer()
}

// UnimplementedP3ApiServer must be embedded to have forward compatible implementations.
type UnimplementedP3ApiServer struct {
}

func (UnimplementedP3ApiServer) GetAgentHuntGroup(context.Context, *GetAgentHuntGroupReq) (*HuntGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentHuntGroup not implemented")
}
func (UnimplementedP3ApiServer) GetAgentSession(context.Context, *GetAgentSessionReq) (*AgentSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentSession not implemented")
}
func (UnimplementedP3ApiServer) GetAgentSkills(context.Context, *GetAgentSkillsReq) (*GetAgentSkillsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentSkills not implemented")
}
func (UnimplementedP3ApiServer) CreateAgentSkill(context.Context, *CreateAgentSkillReq) (*CreateAgentSkillRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgentSkill not implemented")
}
func (UnimplementedP3ApiServer) UpdateAgentSkill(context.Context, *UpdateAgentSkillReq) (*UpdateAgentSkillRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentSkill not implemented")
}
func (UnimplementedP3ApiServer) DeleteAgentSkill(context.Context, *DeleteAgentSkillReq) (*DeleteAgentSkillRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgentSkill not implemented")
}
func (UnimplementedP3ApiServer) ListAgentSkills(context.Context, *ListAgentSkillsReq) (*ListAgentSkillsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentSkills not implemented")
}
func (UnimplementedP3ApiServer) ListSkillsForCurrentAgent(context.Context, *ListSkillsForCurrentAgentReq) (*ListSkillsForCurrentAgentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSkillsForCurrentAgent not implemented")
}
func (UnimplementedP3ApiServer) ListSkills(context.Context, *ListSkillsReq) (*ListSkillsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSkills not implemented")
}
func (UnimplementedP3ApiServer) UpdateAgentSkills(context.Context, *UpdateAgentSkillsReq) (*UpdateAgentSkillsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentSkills not implemented")
}
func (UnimplementedP3ApiServer) GetCurrentAgent(context.Context, *GetCurrentAgentReq) (*Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentAgent not implemented")
}
func (UnimplementedP3ApiServer) GetClientInfoData(context.Context, *GetClientInfoDataReq) (*GetClientInfoDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientInfoData not implemented")
}
func (UnimplementedP3ApiServer) GetClientInfoDisplayTemplate(context.Context, *GetClientInfoDisplayTemplateReq) (*GetClientInfoDisplayTemplateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientInfoDisplayTemplate not implemented")
}
func (UnimplementedP3ApiServer) ListAgentStatisticsData(context.Context, *ListAgentStatisticsDataReq) (*ListAgentStatisticsDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentStatisticsData not implemented")
}
func (UnimplementedP3ApiServer) ListPBXExtensions(context.Context, *ListPBXExtensionsReq) (*ListPBXExtensionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPBXExtensions not implemented")
}
func (UnimplementedP3ApiServer) ListAgentExtensions(context.Context, *ListAgentExtensionsReq) (*ListAgentExtensionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentExtensions not implemented")
}
func (UnimplementedP3ApiServer) ListHuntGroupExtensions(context.Context, *ListHuntGroupExtensionsReq) (*ListHuntGroupExtensionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHuntGroupExtensions not implemented")
}
func (UnimplementedP3ApiServer) CreateExtension(context.Context, *CreateExtensionReq) (*CreateExtensionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExtension not implemented")
}
func (UnimplementedP3ApiServer) DeleteExtension(context.Context, *DeleteExtensionReq) (*DeleteExtensionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExtension not implemented")
}
func (UnimplementedP3ApiServer) UpdateExtension(context.Context, *UpdateExtensionReq) (*UpdateExtensionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExtension not implemented")
}
func (UnimplementedP3ApiServer) UpdatePBXExtension(context.Context, *UpdatePBXExtensionReq) (*UpdatePBXExtensionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePBXExtension not implemented")
}
func (UnimplementedP3ApiServer) CreateDNCLNumbers(context.Context, *CreateDNCLNumbersReq) (*CreateDNCLNumbersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDNCLNumbers not implemented")
}
func (UnimplementedP3ApiServer) GetScriptOrResponses(context.Context, *GetScriptOrResponsesReq) (*GetScriptOrResponsesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScriptOrResponses not implemented")
}
func (UnimplementedP3ApiServer) GetHuntGroupAgentSettings(context.Context, *GetHuntGroupAgentSettingsReq) (*HuntGroupAgentSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHuntGroupAgentSettings not implemented")
}
func (UnimplementedP3ApiServer) ListHuntGroupWebLinks(context.Context, *ListHuntGroupWebLinksReq) (*ListHuntGroupWebLinksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHuntGroupWebLinks not implemented")
}
func (UnimplementedP3ApiServer) GetHuntGroupPauseCodes(context.Context, *GetHuntGroupPauseCodesReq) (*GetHuntGroupPauseCodesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHuntGroupPauseCodes not implemented")
}
func (UnimplementedP3ApiServer) ListAgentCallHistory(context.Context, *ListAgentCallHistoryReq) (*ListAgentCallHistoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentCallHistory not implemented")
}
func (UnimplementedP3ApiServer) ListClientPhoneBookEntries(context.Context, *ListClientPhoneBookEntriesReq) (*ListClientPhoneBookEntriesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClientPhoneBookEntries not implemented")
}
func (UnimplementedP3ApiServer) ListHuntGroupPhoneBookEntries(context.Context, *ListHuntGroupPhoneBookEntriesReq) (*ListHuntGroupPhoneBookEntriesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHuntGroupPhoneBookEntries not implemented")
}
func (UnimplementedP3ApiServer) CreatePhoneBookEntry(context.Context, *CreatePhoneBookEntryReq) (*CreatePhoneBookEntryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePhoneBookEntry not implemented")
}
func (UnimplementedP3ApiServer) UpdatePhoneBookEntry(context.Context, *UpdatePhoneBookEntryReq) (*UpdatePhoneBookEntryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhoneBookEntry not implemented")
}
func (UnimplementedP3ApiServer) DeletePhoneBookEntry(context.Context, *DeletePhoneBookEntryReq) (*DeletePhoneBookEntryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhoneBookEntry not implemented")
}
func (UnimplementedP3ApiServer) ListPhoneBooks(context.Context, *ListPhoneBooksReq) (*ListPhoneBooksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPhoneBooks not implemented")
}
func (UnimplementedP3ApiServer) ListAgentTriggers(context.Context, *ListAgentTriggersReq) (*ListAgentTriggersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentTriggers not implemented")
}
func (UnimplementedP3ApiServer) GetCampaignCompletionStatus(context.Context, *GetCampaignCompletionStatusReq) (*GetCampaignCompletionStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaignCompletionStatus not implemented")
}
func (UnimplementedP3ApiServer) GetLostPeerInfo(context.Context, *GetLostPeerInfoReq) (*GetLostPeerInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLostPeerInfo not implemented")
}
func (UnimplementedP3ApiServer) GetDispositionKeys(context.Context, *GetDispositionKeysReq) (*GetDispositionKeysRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDispositionKeys not implemented")
}
func (UnimplementedP3ApiServer) GetReadyAgents(context.Context, *GetReadyAgentsReq) (*GetReadyAgentsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadyAgents not implemented")
}
func (UnimplementedP3ApiServer) ListAgentQueueAndOnHoldCallData(context.Context, *ListAgentQueueAndOnHoldCallDataReq) (*ListAgentQueueAndOnHoldCallDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentQueueAndOnHoldCallData not implemented")
}
func (UnimplementedP3ApiServer) SaveAgentCallResponses(context.Context, *SaveAgentCallResponsesReq) (*SaveAgentCallResponsesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAgentCallResponses not implemented")
}
func (UnimplementedP3ApiServer) ListAgentTransferOptions(context.Context, *ListAgentTransferOptionsReq) (*ListAgentTransferOptionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentTransferOptions not implemented")
}
func (UnimplementedP3ApiServer) UpdateAgentCallResponseValue(context.Context, *UpdateAgentCallResponseValueReq) (*UpdateAgentCallResponseValueRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentCallResponseValue not implemented")
}
func (UnimplementedP3ApiServer) GetIntercomPeerInfo(context.Context, *GetIntercomPeerInfoReq) (*GetIntercomPeerInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntercomPeerInfo not implemented")
}
func (UnimplementedP3ApiServer) ListOrgResponseEvaluators(context.Context, *ListOrgResponseEvaluatorsReq) (*ListOrgResponseEvaluatorsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgResponseEvaluators not implemented")
}
func (UnimplementedP3ApiServer) GetQueueConfigurationOptionsArray(context.Context, *GetQueueConfigurationOptionsArrayReq) (*GetQueueConfigurationOptionsArrayRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueueConfigurationOptionsArray not implemented")
}
func (UnimplementedP3ApiServer) GetConditionalDNCLRules(context.Context, *GetConditionalDNCLRulesReq) (*GetConditionalDNCLRulesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConditionalDNCLRules not implemented")
}
func (UnimplementedP3ApiServer) ManualDialStart(context.Context, *ManualDialStartReq) (*ManualDialStartRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManualDialStart not implemented")
}
func (UnimplementedP3ApiServer) ListExtendedCallHistory(*ListExtendedCallHistoryReq, P3Api_ListExtendedCallHistoryServer) error {
	return status.Errorf(codes.Unimplemented, "method ListExtendedCallHistory not implemented")
}
func (UnimplementedP3ApiServer) ListWhiteListPhoneBooks(context.Context, *ListWhiteListPhoneBooksReq) (*ListWhiteListPhoneBooksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWhiteListPhoneBooks not implemented")
}
func (UnimplementedP3ApiServer) DownloadCallRecording(context.Context, *DownloadCallRecordingReq) (*DownloadRecordingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadCallRecording not implemented")
}
func (UnimplementedP3ApiServer) DownloadCallRecordings(context.Context, *DownloadCallRecordingsReq) (*DownloadRecordingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadCallRecordings not implemented")
}
func (UnimplementedP3ApiServer) PlacePreviewDialCall(context.Context, *PlacePreviewDialCallReq) (*PlacePreviewDialCallRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlacePreviewDialCall not implemented")
}
func (UnimplementedP3ApiServer) CancelPreviewDialCall(context.Context, *CancelPreviewDialCallReq) (*CancelPreviewDialCallRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPreviewDialCall not implemented")
}
func (UnimplementedP3ApiServer) UpdateTaskStatus(context.Context, *UpdateTaskStatusReq) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskStatus not implemented")
}
func (UnimplementedP3ApiServer) ListCallbackRoutingAgents(context.Context, *ListCallbackRoutingAgentsReq) (*ListCallbackRoutingAgentsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCallbackRoutingAgents not implemented")
}
func (UnimplementedP3ApiServer) ListCallbackRoutingSkills(context.Context, *ListCallbackRoutingSkillsReq) (*ListCallbackRoutingSkillsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCallbackRoutingSkills not implemented")
}
func (UnimplementedP3ApiServer) HandleRecordingDelay(context.Context, *HandleRecordingDelayReq) (*HandleRecordingDelayRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleRecordingDelay not implemented")
}
func (UnimplementedP3ApiServer) UpdateAgentAssignedHuntGroup(context.Context, *UpdateAgentAssignedHuntGroupReq) (*UpdateAgentAssignedHuntGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentAssignedHuntGroup not implemented")
}
func (UnimplementedP3ApiServer) GetCallData(context.Context, *GetCallDataReq) (*GetCallDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCallData not implemented")
}
func (UnimplementedP3ApiServer) ListHuntGroups(context.Context, *ListHuntGroupsReq) (*ListHuntGroupsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHuntGroups not implemented")
}
func (UnimplementedP3ApiServer) ListReassignmentHuntGroups(context.Context, *ListReassignmentHuntGroupsReq) (*ListReassignmentHuntGroupsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReassignmentHuntGroups not implemented")
}
func (UnimplementedP3ApiServer) GetOrgAgentSettings(context.Context, *GetOrgAgentSettingsReq) (*GetOrgAgentSettingsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgAgentSettings not implemented")
}
func (UnimplementedP3ApiServer) ListCallerIdsFromBucket(context.Context, *ListCallerIdsFromBucketReq) (*ListCallerIdsFromBucketRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCallerIdsFromBucket not implemented")
}
func (UnimplementedP3ApiServer) SaveLastCallResponse(context.Context, *SaveLastCallResponseReq) (*SaveLastCallResponseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLastCallResponse not implemented")
}
func (UnimplementedP3ApiServer) ListAgentCallLogsByCallSidAndType(context.Context, *ListAgentCallLogsByCallSidAndTypeReq) (*ListAgentCallLogsByCallSidAndTypeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentCallLogsByCallSidAndType not implemented")
}
func (UnimplementedP3ApiServer) ListAgentCallResponseValues(context.Context, *ListAgentCallResponseValuesReq) (*ListAgentCallResponseValuesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentCallResponseValues not implemented")
}
func (UnimplementedP3ApiServer) GetContactSchemaByContactGroup(context.Context, *GetContactSchemaByContactGroupReq) (*ContactSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactSchemaByContactGroup not implemented")
}
func (UnimplementedP3ApiServer) ListContactGroupDetailsByClientSid(context.Context, *ListContactGroupDetailsByClientSidReq) (*ListContactGroupDetailsByClientSidRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContactGroupDetailsByClientSid not implemented")
}
func (UnimplementedP3ApiServer) GetContactGroupDetails(context.Context, *GetContactGroupReq) (*ContactGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactGroupDetails not implemented")
}
func (UnimplementedP3ApiServer) GetContactGroupSize(context.Context, *GetContactGroupReq) (*GetContactGroupSizeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactGroupSize not implemented")
}
func (UnimplementedP3ApiServer) CreateContactFieldDescription(context.Context, *CreateContactFieldDescriptionReq) (*CreateContactFieldDescriptionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContactFieldDescription not implemented")
}
func (UnimplementedP3ApiServer) UpdateContactFieldDescription(context.Context, *UpdateContactFieldDescriptionReq) (*UpdateContactFieldDescriptionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContactFieldDescription not implemented")
}
func (UnimplementedP3ApiServer) DeleteContactFieldDescription(context.Context, *DeleteContactFieldDescriptionReq) (*DeleteContactFieldDescriptionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContactFieldDescription not implemented")
}
func (UnimplementedP3ApiServer) ListContactFieldDescriptions(context.Context, *ListContactFieldDescriptionsReq) (*ListContactFieldDescriptionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContactFieldDescriptions not implemented")
}
func (UnimplementedP3ApiServer) ListContactFieldDescriptionsByCGSid(context.Context, *ListContactFieldDescriptionsByCGSidReq) (*ListContactFieldDescriptionsByCGSidRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContactFieldDescriptionsByCGSid not implemented")
}
func (UnimplementedP3ApiServer) ListContactImportTemplates(context.Context, *ListContactImportTemplatesReq) (*ListContactImportTemplatesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContactImportTemplates not implemented")
}
func (UnimplementedP3ApiServer) UpdatePreviewRecordToFinished(context.Context, *UpdatePreviewRecordToFinishedReq) (*UpdatePreviewRecordToFinishedRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePreviewRecordToFinished not implemented")
}
func (UnimplementedP3ApiServer) UpdateAgentHuntGroup(context.Context, *UpdateAgentHuntGroupReq) (*UpdateAgentHuntGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentHuntGroup not implemented")
}
func (UnimplementedP3ApiServer) MultiAgentHuntGroupAssignment(context.Context, *MultiAgentHuntGroupAssignmentReq) (*MultiAgentHuntGroupAssignmentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiAgentHuntGroupAssignment not implemented")
}
func (UnimplementedP3ApiServer) GetAgentProfile(context.Context, *GetAgentProfileReq) (*AgentProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentProfile not implemented")
}
func (UnimplementedP3ApiServer) RecalculateBilling(context.Context, *RecalculateBillingReq) (*RecalculateBillingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecalculateBilling not implemented")
}
func (UnimplementedP3ApiServer) ListOutboundBroadcastTemplateData(context.Context, *ListOutboundBroadcastTemplateDataReq) (*ListOutboundBroadcastTemplateDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOutboundBroadcastTemplateData not implemented")
}
func (UnimplementedP3ApiServer) MultiAgentSkillAssignment(context.Context, *MultiAgentSkillAssignmentReq) (*MultiAgentSkillAssignmentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiAgentSkillAssignment not implemented")
}
func (UnimplementedP3ApiServer) MultiAgentSkillUnassignment(context.Context, *MultiAgentSkillUnassignmentReq) (*MultiAgentSkillUnassignmentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiAgentSkillUnassignment not implemented")
}
func (UnimplementedP3ApiServer) ListMAMAgentHuntGroupsByClientSid(context.Context, *ListMAMAgentHuntGroupsByClientSidReq) (*ListMAMAgentHuntGroupsByClientSidRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMAMAgentHuntGroupsByClientSid not implemented")
}
func (UnimplementedP3ApiServer) ListTtsVoices(context.Context, *ListTtsVoicesReq) (*ListTtsVoicesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTtsVoices not implemented")
}
func (UnimplementedP3ApiServer) CreateTtsVoice(context.Context, *CreateTtsVoiceReq) (*CreateTtsVoiceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTtsVoice not implemented")
}
func (UnimplementedP3ApiServer) DeleteTtsVoice(context.Context, *DeleteTtsVoiceReq) (*DeleteTtsVoiceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTtsVoice not implemented")
}
func (UnimplementedP3ApiServer) ListCustomDataKeys(context.Context, *ListCustomDataKeysReq) (*ListCustomDataKeysRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomDataKeys not implemented")
}
func (UnimplementedP3ApiServer) CreateCustomDataKey(context.Context, *CreateCustomDataKeyReq) (*CreateCustomDataKeyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomDataKey not implemented")
}
func (UnimplementedP3ApiServer) DeleteCustomDataKey(context.Context, *DeleteCustomDataKeyReq) (*DeleteCustomDataKeyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomDataKey not implemented")
}
func (UnimplementedP3ApiServer) UpdateCustomDataKey(context.Context, *UpdateCustomDataKeyReq) (*UpdateCustomDataKeyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomDataKey not implemented")
}
func (UnimplementedP3ApiServer) GetActivityLogHistory(*GetActivityLogHistoryReq, P3Api_GetActivityLogHistoryServer) error {
	return status.Errorf(codes.Unimplemented, "method GetActivityLogHistory not implemented")
}
func (UnimplementedP3ApiServer) ListTableTemplateProperties(context.Context, *ListTableTemplatePropertiesReq) (*ListTableTemplatePropertiesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTableTemplateProperties not implemented")
}
func (UnimplementedP3ApiServer) ListAgentSkillsFilters(context.Context, *ListAgentSkillsFiltersReq) (*ListAgentSkillsFiltersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentSkillsFilters not implemented")
}
func (UnimplementedP3ApiServer) ListScheduleRules(context.Context, *ListScheduleRulesRequest) (*ListScheduleRulesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScheduleRules not implemented")
}
func (UnimplementedP3ApiServer) ListCustomReportFilters(context.Context, *ListCustomReportFiltersReq) (*ListCustomReportFiltersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomReportFilters not implemented")
}
func (UnimplementedP3ApiServer) ListSmsNumbers(context.Context, *ListSmsNumbersReq) (*ListSmsNumbersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSmsNumbers not implemented")
}
func (UnimplementedP3ApiServer) mustEmbedUnimplementedP3ApiServer() {}

// UnsafeP3ApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to P3ApiServer will
// result in compilation errors.
type UnsafeP3ApiServer interface {
	mustEmbedUnimplementedP3ApiServer()
}

func RegisterP3ApiServer(s grpc.ServiceRegistrar, srv P3ApiServer) {
	s.RegisterService(&P3Api_ServiceDesc, srv)
}

func _P3Api_GetAgentHuntGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentHuntGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetAgentHuntGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetAgentHuntGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetAgentHuntGroup(ctx, req.(*GetAgentHuntGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetAgentSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetAgentSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetAgentSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetAgentSession(ctx, req.(*GetAgentSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetAgentSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentSkillsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetAgentSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetAgentSkills_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetAgentSkills(ctx, req.(*GetAgentSkillsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_CreateAgentSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgentSkillReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).CreateAgentSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_CreateAgentSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).CreateAgentSkill(ctx, req.(*CreateAgentSkillReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_UpdateAgentSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentSkillReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).UpdateAgentSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_UpdateAgentSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).UpdateAgentSkill(ctx, req.(*UpdateAgentSkillReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_DeleteAgentSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAgentSkillReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).DeleteAgentSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_DeleteAgentSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).DeleteAgentSkill(ctx, req.(*DeleteAgentSkillReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListAgentSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentSkillsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListAgentSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListAgentSkills_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListAgentSkills(ctx, req.(*ListAgentSkillsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListSkillsForCurrentAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSkillsForCurrentAgentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListSkillsForCurrentAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListSkillsForCurrentAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListSkillsForCurrentAgent(ctx, req.(*ListSkillsForCurrentAgentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSkillsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListSkills_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListSkills(ctx, req.(*ListSkillsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_UpdateAgentSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentSkillsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).UpdateAgentSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_UpdateAgentSkills_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).UpdateAgentSkills(ctx, req.(*UpdateAgentSkillsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetCurrentAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentAgentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetCurrentAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetCurrentAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetCurrentAgent(ctx, req.(*GetCurrentAgentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetClientInfoData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientInfoDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetClientInfoData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetClientInfoData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetClientInfoData(ctx, req.(*GetClientInfoDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetClientInfoDisplayTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientInfoDisplayTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetClientInfoDisplayTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetClientInfoDisplayTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetClientInfoDisplayTemplate(ctx, req.(*GetClientInfoDisplayTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListAgentStatisticsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentStatisticsDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListAgentStatisticsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListAgentStatisticsData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListAgentStatisticsData(ctx, req.(*ListAgentStatisticsDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListPBXExtensions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPBXExtensionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListPBXExtensions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListPBXExtensions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListPBXExtensions(ctx, req.(*ListPBXExtensionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListAgentExtensions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentExtensionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListAgentExtensions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListAgentExtensions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListAgentExtensions(ctx, req.(*ListAgentExtensionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListHuntGroupExtensions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHuntGroupExtensionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListHuntGroupExtensions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListHuntGroupExtensions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListHuntGroupExtensions(ctx, req.(*ListHuntGroupExtensionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_CreateExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExtensionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).CreateExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_CreateExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).CreateExtension(ctx, req.(*CreateExtensionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_DeleteExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExtensionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).DeleteExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_DeleteExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).DeleteExtension(ctx, req.(*DeleteExtensionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_UpdateExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExtensionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).UpdateExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_UpdateExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).UpdateExtension(ctx, req.(*UpdateExtensionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_UpdatePBXExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePBXExtensionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).UpdatePBXExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_UpdatePBXExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).UpdatePBXExtension(ctx, req.(*UpdatePBXExtensionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_CreateDNCLNumbers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDNCLNumbersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).CreateDNCLNumbers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_CreateDNCLNumbers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).CreateDNCLNumbers(ctx, req.(*CreateDNCLNumbersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetScriptOrResponses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScriptOrResponsesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetScriptOrResponses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetScriptOrResponses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetScriptOrResponses(ctx, req.(*GetScriptOrResponsesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetHuntGroupAgentSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHuntGroupAgentSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetHuntGroupAgentSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetHuntGroupAgentSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetHuntGroupAgentSettings(ctx, req.(*GetHuntGroupAgentSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListHuntGroupWebLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHuntGroupWebLinksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListHuntGroupWebLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListHuntGroupWebLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListHuntGroupWebLinks(ctx, req.(*ListHuntGroupWebLinksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetHuntGroupPauseCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHuntGroupPauseCodesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetHuntGroupPauseCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetHuntGroupPauseCodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetHuntGroupPauseCodes(ctx, req.(*GetHuntGroupPauseCodesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListAgentCallHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentCallHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListAgentCallHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListAgentCallHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListAgentCallHistory(ctx, req.(*ListAgentCallHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListClientPhoneBookEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientPhoneBookEntriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListClientPhoneBookEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListClientPhoneBookEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListClientPhoneBookEntries(ctx, req.(*ListClientPhoneBookEntriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListHuntGroupPhoneBookEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHuntGroupPhoneBookEntriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListHuntGroupPhoneBookEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListHuntGroupPhoneBookEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListHuntGroupPhoneBookEntries(ctx, req.(*ListHuntGroupPhoneBookEntriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_CreatePhoneBookEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePhoneBookEntryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).CreatePhoneBookEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_CreatePhoneBookEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).CreatePhoneBookEntry(ctx, req.(*CreatePhoneBookEntryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_UpdatePhoneBookEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhoneBookEntryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).UpdatePhoneBookEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_UpdatePhoneBookEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).UpdatePhoneBookEntry(ctx, req.(*UpdatePhoneBookEntryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_DeletePhoneBookEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePhoneBookEntryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).DeletePhoneBookEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_DeletePhoneBookEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).DeletePhoneBookEntry(ctx, req.(*DeletePhoneBookEntryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListPhoneBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPhoneBooksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListPhoneBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListPhoneBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListPhoneBooks(ctx, req.(*ListPhoneBooksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListAgentTriggers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentTriggersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListAgentTriggers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListAgentTriggers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListAgentTriggers(ctx, req.(*ListAgentTriggersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetCampaignCompletionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCampaignCompletionStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetCampaignCompletionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetCampaignCompletionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetCampaignCompletionStatus(ctx, req.(*GetCampaignCompletionStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetLostPeerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLostPeerInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetLostPeerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetLostPeerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetLostPeerInfo(ctx, req.(*GetLostPeerInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetDispositionKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDispositionKeysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetDispositionKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetDispositionKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetDispositionKeys(ctx, req.(*GetDispositionKeysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetReadyAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadyAgentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetReadyAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetReadyAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetReadyAgents(ctx, req.(*GetReadyAgentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListAgentQueueAndOnHoldCallData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentQueueAndOnHoldCallDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListAgentQueueAndOnHoldCallData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListAgentQueueAndOnHoldCallData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListAgentQueueAndOnHoldCallData(ctx, req.(*ListAgentQueueAndOnHoldCallDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_SaveAgentCallResponses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAgentCallResponsesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).SaveAgentCallResponses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_SaveAgentCallResponses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).SaveAgentCallResponses(ctx, req.(*SaveAgentCallResponsesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListAgentTransferOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentTransferOptionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListAgentTransferOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListAgentTransferOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListAgentTransferOptions(ctx, req.(*ListAgentTransferOptionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_UpdateAgentCallResponseValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentCallResponseValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).UpdateAgentCallResponseValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_UpdateAgentCallResponseValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).UpdateAgentCallResponseValue(ctx, req.(*UpdateAgentCallResponseValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetIntercomPeerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntercomPeerInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetIntercomPeerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetIntercomPeerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetIntercomPeerInfo(ctx, req.(*GetIntercomPeerInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListOrgResponseEvaluators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgResponseEvaluatorsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListOrgResponseEvaluators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListOrgResponseEvaluators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListOrgResponseEvaluators(ctx, req.(*ListOrgResponseEvaluatorsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetQueueConfigurationOptionsArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueConfigurationOptionsArrayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetQueueConfigurationOptionsArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetQueueConfigurationOptionsArray_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetQueueConfigurationOptionsArray(ctx, req.(*GetQueueConfigurationOptionsArrayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetConditionalDNCLRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConditionalDNCLRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetConditionalDNCLRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetConditionalDNCLRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetConditionalDNCLRules(ctx, req.(*GetConditionalDNCLRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ManualDialStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManualDialStartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ManualDialStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ManualDialStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ManualDialStart(ctx, req.(*ManualDialStartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListExtendedCallHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListExtendedCallHistoryReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(P3ApiServer).ListExtendedCallHistory(m, &p3ApiListExtendedCallHistoryServer{ServerStream: stream})
}

type P3Api_ListExtendedCallHistoryServer interface {
	Send(*ListExtendedCallHistoryRes) error
	grpc.ServerStream
}

type p3ApiListExtendedCallHistoryServer struct {
	grpc.ServerStream
}

func (x *p3ApiListExtendedCallHistoryServer) Send(m *ListExtendedCallHistoryRes) error {
	return x.ServerStream.SendMsg(m)
}

func _P3Api_ListWhiteListPhoneBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWhiteListPhoneBooksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListWhiteListPhoneBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListWhiteListPhoneBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListWhiteListPhoneBooks(ctx, req.(*ListWhiteListPhoneBooksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_DownloadCallRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadCallRecordingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).DownloadCallRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_DownloadCallRecording_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).DownloadCallRecording(ctx, req.(*DownloadCallRecordingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_DownloadCallRecordings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadCallRecordingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).DownloadCallRecordings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_DownloadCallRecordings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).DownloadCallRecordings(ctx, req.(*DownloadCallRecordingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_PlacePreviewDialCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlacePreviewDialCallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).PlacePreviewDialCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_PlacePreviewDialCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).PlacePreviewDialCall(ctx, req.(*PlacePreviewDialCallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_CancelPreviewDialCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPreviewDialCallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).CancelPreviewDialCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_CancelPreviewDialCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).CancelPreviewDialCall(ctx, req.(*CancelPreviewDialCallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_UpdateTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).UpdateTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_UpdateTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).UpdateTaskStatus(ctx, req.(*UpdateTaskStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListCallbackRoutingAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCallbackRoutingAgentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListCallbackRoutingAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListCallbackRoutingAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListCallbackRoutingAgents(ctx, req.(*ListCallbackRoutingAgentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListCallbackRoutingSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCallbackRoutingSkillsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListCallbackRoutingSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListCallbackRoutingSkills_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListCallbackRoutingSkills(ctx, req.(*ListCallbackRoutingSkillsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_HandleRecordingDelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleRecordingDelayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).HandleRecordingDelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_HandleRecordingDelay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).HandleRecordingDelay(ctx, req.(*HandleRecordingDelayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_UpdateAgentAssignedHuntGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentAssignedHuntGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).UpdateAgentAssignedHuntGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_UpdateAgentAssignedHuntGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).UpdateAgentAssignedHuntGroup(ctx, req.(*UpdateAgentAssignedHuntGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetCallData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCallDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetCallData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetCallData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetCallData(ctx, req.(*GetCallDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListHuntGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHuntGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListHuntGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListHuntGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListHuntGroups(ctx, req.(*ListHuntGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListReassignmentHuntGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReassignmentHuntGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListReassignmentHuntGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListReassignmentHuntGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListReassignmentHuntGroups(ctx, req.(*ListReassignmentHuntGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetOrgAgentSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgAgentSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetOrgAgentSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetOrgAgentSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetOrgAgentSettings(ctx, req.(*GetOrgAgentSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListCallerIdsFromBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCallerIdsFromBucketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListCallerIdsFromBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListCallerIdsFromBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListCallerIdsFromBucket(ctx, req.(*ListCallerIdsFromBucketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_SaveLastCallResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveLastCallResponseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).SaveLastCallResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_SaveLastCallResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).SaveLastCallResponse(ctx, req.(*SaveLastCallResponseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListAgentCallLogsByCallSidAndType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentCallLogsByCallSidAndTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListAgentCallLogsByCallSidAndType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListAgentCallLogsByCallSidAndType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListAgentCallLogsByCallSidAndType(ctx, req.(*ListAgentCallLogsByCallSidAndTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListAgentCallResponseValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentCallResponseValuesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListAgentCallResponseValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListAgentCallResponseValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListAgentCallResponseValues(ctx, req.(*ListAgentCallResponseValuesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetContactSchemaByContactGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactSchemaByContactGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetContactSchemaByContactGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetContactSchemaByContactGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetContactSchemaByContactGroup(ctx, req.(*GetContactSchemaByContactGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListContactGroupDetailsByClientSid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContactGroupDetailsByClientSidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListContactGroupDetailsByClientSid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListContactGroupDetailsByClientSid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListContactGroupDetailsByClientSid(ctx, req.(*ListContactGroupDetailsByClientSidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetContactGroupDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetContactGroupDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetContactGroupDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetContactGroupDetails(ctx, req.(*GetContactGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetContactGroupSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetContactGroupSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetContactGroupSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetContactGroupSize(ctx, req.(*GetContactGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_CreateContactFieldDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContactFieldDescriptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).CreateContactFieldDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_CreateContactFieldDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).CreateContactFieldDescription(ctx, req.(*CreateContactFieldDescriptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_UpdateContactFieldDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContactFieldDescriptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).UpdateContactFieldDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_UpdateContactFieldDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).UpdateContactFieldDescription(ctx, req.(*UpdateContactFieldDescriptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_DeleteContactFieldDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactFieldDescriptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).DeleteContactFieldDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_DeleteContactFieldDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).DeleteContactFieldDescription(ctx, req.(*DeleteContactFieldDescriptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListContactFieldDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContactFieldDescriptionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListContactFieldDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListContactFieldDescriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListContactFieldDescriptions(ctx, req.(*ListContactFieldDescriptionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListContactFieldDescriptionsByCGSid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContactFieldDescriptionsByCGSidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListContactFieldDescriptionsByCGSid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListContactFieldDescriptionsByCGSid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListContactFieldDescriptionsByCGSid(ctx, req.(*ListContactFieldDescriptionsByCGSidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListContactImportTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContactImportTemplatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListContactImportTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListContactImportTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListContactImportTemplates(ctx, req.(*ListContactImportTemplatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_UpdatePreviewRecordToFinished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePreviewRecordToFinishedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).UpdatePreviewRecordToFinished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_UpdatePreviewRecordToFinished_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).UpdatePreviewRecordToFinished(ctx, req.(*UpdatePreviewRecordToFinishedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_UpdateAgentHuntGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentHuntGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).UpdateAgentHuntGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_UpdateAgentHuntGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).UpdateAgentHuntGroup(ctx, req.(*UpdateAgentHuntGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_MultiAgentHuntGroupAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiAgentHuntGroupAssignmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).MultiAgentHuntGroupAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_MultiAgentHuntGroupAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).MultiAgentHuntGroupAssignment(ctx, req.(*MultiAgentHuntGroupAssignmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetAgentProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetAgentProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetAgentProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetAgentProfile(ctx, req.(*GetAgentProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_RecalculateBilling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecalculateBillingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).RecalculateBilling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_RecalculateBilling_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).RecalculateBilling(ctx, req.(*RecalculateBillingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListOutboundBroadcastTemplateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOutboundBroadcastTemplateDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListOutboundBroadcastTemplateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListOutboundBroadcastTemplateData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListOutboundBroadcastTemplateData(ctx, req.(*ListOutboundBroadcastTemplateDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_MultiAgentSkillAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiAgentSkillAssignmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).MultiAgentSkillAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_MultiAgentSkillAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).MultiAgentSkillAssignment(ctx, req.(*MultiAgentSkillAssignmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_MultiAgentSkillUnassignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiAgentSkillUnassignmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).MultiAgentSkillUnassignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_MultiAgentSkillUnassignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).MultiAgentSkillUnassignment(ctx, req.(*MultiAgentSkillUnassignmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListMAMAgentHuntGroupsByClientSid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMAMAgentHuntGroupsByClientSidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListMAMAgentHuntGroupsByClientSid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListMAMAgentHuntGroupsByClientSid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListMAMAgentHuntGroupsByClientSid(ctx, req.(*ListMAMAgentHuntGroupsByClientSidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListTtsVoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTtsVoicesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListTtsVoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListTtsVoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListTtsVoices(ctx, req.(*ListTtsVoicesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_CreateTtsVoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTtsVoiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).CreateTtsVoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_CreateTtsVoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).CreateTtsVoice(ctx, req.(*CreateTtsVoiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_DeleteTtsVoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTtsVoiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).DeleteTtsVoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_DeleteTtsVoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).DeleteTtsVoice(ctx, req.(*DeleteTtsVoiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListCustomDataKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCustomDataKeysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListCustomDataKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListCustomDataKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListCustomDataKeys(ctx, req.(*ListCustomDataKeysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_CreateCustomDataKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomDataKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).CreateCustomDataKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_CreateCustomDataKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).CreateCustomDataKey(ctx, req.(*CreateCustomDataKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_DeleteCustomDataKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomDataKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).DeleteCustomDataKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_DeleteCustomDataKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).DeleteCustomDataKey(ctx, req.(*DeleteCustomDataKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_UpdateCustomDataKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomDataKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).UpdateCustomDataKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_UpdateCustomDataKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).UpdateCustomDataKey(ctx, req.(*UpdateCustomDataKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetActivityLogHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetActivityLogHistoryReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(P3ApiServer).GetActivityLogHistory(m, &p3ApiGetActivityLogHistoryServer{ServerStream: stream})
}

type P3Api_GetActivityLogHistoryServer interface {
	Send(*GetActivityLogHistoryRes) error
	grpc.ServerStream
}

type p3ApiGetActivityLogHistoryServer struct {
	grpc.ServerStream
}

func (x *p3ApiGetActivityLogHistoryServer) Send(m *GetActivityLogHistoryRes) error {
	return x.ServerStream.SendMsg(m)
}

func _P3Api_ListTableTemplateProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTableTemplatePropertiesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListTableTemplateProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListTableTemplateProperties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListTableTemplateProperties(ctx, req.(*ListTableTemplatePropertiesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListAgentSkillsFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentSkillsFiltersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListAgentSkillsFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListAgentSkillsFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListAgentSkillsFilters(ctx, req.(*ListAgentSkillsFiltersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListScheduleRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScheduleRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListScheduleRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListScheduleRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListScheduleRules(ctx, req.(*ListScheduleRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListCustomReportFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCustomReportFiltersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListCustomReportFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListCustomReportFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListCustomReportFilters(ctx, req.(*ListCustomReportFiltersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListSmsNumbers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSmsNumbersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListSmsNumbers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListSmsNumbers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListSmsNumbers(ctx, req.(*ListSmsNumbersReq))
	}
	return interceptor(ctx, in, info, handler)
}

// P3Api_ServiceDesc is the grpc.ServiceDesc for P3Api service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var P3Api_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v0alpha.P3Api",
	HandlerType: (*P3ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAgentHuntGroup",
			Handler:    _P3Api_GetAgentHuntGroup_Handler,
		},
		{
			MethodName: "GetAgentSession",
			Handler:    _P3Api_GetAgentSession_Handler,
		},
		{
			MethodName: "GetAgentSkills",
			Handler:    _P3Api_GetAgentSkills_Handler,
		},
		{
			MethodName: "CreateAgentSkill",
			Handler:    _P3Api_CreateAgentSkill_Handler,
		},
		{
			MethodName: "UpdateAgentSkill",
			Handler:    _P3Api_UpdateAgentSkill_Handler,
		},
		{
			MethodName: "DeleteAgentSkill",
			Handler:    _P3Api_DeleteAgentSkill_Handler,
		},
		{
			MethodName: "ListAgentSkills",
			Handler:    _P3Api_ListAgentSkills_Handler,
		},
		{
			MethodName: "ListSkillsForCurrentAgent",
			Handler:    _P3Api_ListSkillsForCurrentAgent_Handler,
		},
		{
			MethodName: "ListSkills",
			Handler:    _P3Api_ListSkills_Handler,
		},
		{
			MethodName: "UpdateAgentSkills",
			Handler:    _P3Api_UpdateAgentSkills_Handler,
		},
		{
			MethodName: "GetCurrentAgent",
			Handler:    _P3Api_GetCurrentAgent_Handler,
		},
		{
			MethodName: "GetClientInfoData",
			Handler:    _P3Api_GetClientInfoData_Handler,
		},
		{
			MethodName: "GetClientInfoDisplayTemplate",
			Handler:    _P3Api_GetClientInfoDisplayTemplate_Handler,
		},
		{
			MethodName: "ListAgentStatisticsData",
			Handler:    _P3Api_ListAgentStatisticsData_Handler,
		},
		{
			MethodName: "ListPBXExtensions",
			Handler:    _P3Api_ListPBXExtensions_Handler,
		},
		{
			MethodName: "ListAgentExtensions",
			Handler:    _P3Api_ListAgentExtensions_Handler,
		},
		{
			MethodName: "ListHuntGroupExtensions",
			Handler:    _P3Api_ListHuntGroupExtensions_Handler,
		},
		{
			MethodName: "CreateExtension",
			Handler:    _P3Api_CreateExtension_Handler,
		},
		{
			MethodName: "DeleteExtension",
			Handler:    _P3Api_DeleteExtension_Handler,
		},
		{
			MethodName: "UpdateExtension",
			Handler:    _P3Api_UpdateExtension_Handler,
		},
		{
			MethodName: "UpdatePBXExtension",
			Handler:    _P3Api_UpdatePBXExtension_Handler,
		},
		{
			MethodName: "CreateDNCLNumbers",
			Handler:    _P3Api_CreateDNCLNumbers_Handler,
		},
		{
			MethodName: "GetScriptOrResponses",
			Handler:    _P3Api_GetScriptOrResponses_Handler,
		},
		{
			MethodName: "GetHuntGroupAgentSettings",
			Handler:    _P3Api_GetHuntGroupAgentSettings_Handler,
		},
		{
			MethodName: "ListHuntGroupWebLinks",
			Handler:    _P3Api_ListHuntGroupWebLinks_Handler,
		},
		{
			MethodName: "GetHuntGroupPauseCodes",
			Handler:    _P3Api_GetHuntGroupPauseCodes_Handler,
		},
		{
			MethodName: "ListAgentCallHistory",
			Handler:    _P3Api_ListAgentCallHistory_Handler,
		},
		{
			MethodName: "ListClientPhoneBookEntries",
			Handler:    _P3Api_ListClientPhoneBookEntries_Handler,
		},
		{
			MethodName: "ListHuntGroupPhoneBookEntries",
			Handler:    _P3Api_ListHuntGroupPhoneBookEntries_Handler,
		},
		{
			MethodName: "CreatePhoneBookEntry",
			Handler:    _P3Api_CreatePhoneBookEntry_Handler,
		},
		{
			MethodName: "UpdatePhoneBookEntry",
			Handler:    _P3Api_UpdatePhoneBookEntry_Handler,
		},
		{
			MethodName: "DeletePhoneBookEntry",
			Handler:    _P3Api_DeletePhoneBookEntry_Handler,
		},
		{
			MethodName: "ListPhoneBooks",
			Handler:    _P3Api_ListPhoneBooks_Handler,
		},
		{
			MethodName: "ListAgentTriggers",
			Handler:    _P3Api_ListAgentTriggers_Handler,
		},
		{
			MethodName: "GetCampaignCompletionStatus",
			Handler:    _P3Api_GetCampaignCompletionStatus_Handler,
		},
		{
			MethodName: "GetLostPeerInfo",
			Handler:    _P3Api_GetLostPeerInfo_Handler,
		},
		{
			MethodName: "GetDispositionKeys",
			Handler:    _P3Api_GetDispositionKeys_Handler,
		},
		{
			MethodName: "GetReadyAgents",
			Handler:    _P3Api_GetReadyAgents_Handler,
		},
		{
			MethodName: "ListAgentQueueAndOnHoldCallData",
			Handler:    _P3Api_ListAgentQueueAndOnHoldCallData_Handler,
		},
		{
			MethodName: "SaveAgentCallResponses",
			Handler:    _P3Api_SaveAgentCallResponses_Handler,
		},
		{
			MethodName: "ListAgentTransferOptions",
			Handler:    _P3Api_ListAgentTransferOptions_Handler,
		},
		{
			MethodName: "UpdateAgentCallResponseValue",
			Handler:    _P3Api_UpdateAgentCallResponseValue_Handler,
		},
		{
			MethodName: "GetIntercomPeerInfo",
			Handler:    _P3Api_GetIntercomPeerInfo_Handler,
		},
		{
			MethodName: "ListOrgResponseEvaluators",
			Handler:    _P3Api_ListOrgResponseEvaluators_Handler,
		},
		{
			MethodName: "GetQueueConfigurationOptionsArray",
			Handler:    _P3Api_GetQueueConfigurationOptionsArray_Handler,
		},
		{
			MethodName: "GetConditionalDNCLRules",
			Handler:    _P3Api_GetConditionalDNCLRules_Handler,
		},
		{
			MethodName: "ManualDialStart",
			Handler:    _P3Api_ManualDialStart_Handler,
		},
		{
			MethodName: "ListWhiteListPhoneBooks",
			Handler:    _P3Api_ListWhiteListPhoneBooks_Handler,
		},
		{
			MethodName: "DownloadCallRecording",
			Handler:    _P3Api_DownloadCallRecording_Handler,
		},
		{
			MethodName: "DownloadCallRecordings",
			Handler:    _P3Api_DownloadCallRecordings_Handler,
		},
		{
			MethodName: "PlacePreviewDialCall",
			Handler:    _P3Api_PlacePreviewDialCall_Handler,
		},
		{
			MethodName: "CancelPreviewDialCall",
			Handler:    _P3Api_CancelPreviewDialCall_Handler,
		},
		{
			MethodName: "UpdateTaskStatus",
			Handler:    _P3Api_UpdateTaskStatus_Handler,
		},
		{
			MethodName: "ListCallbackRoutingAgents",
			Handler:    _P3Api_ListCallbackRoutingAgents_Handler,
		},
		{
			MethodName: "ListCallbackRoutingSkills",
			Handler:    _P3Api_ListCallbackRoutingSkills_Handler,
		},
		{
			MethodName: "HandleRecordingDelay",
			Handler:    _P3Api_HandleRecordingDelay_Handler,
		},
		{
			MethodName: "UpdateAgentAssignedHuntGroup",
			Handler:    _P3Api_UpdateAgentAssignedHuntGroup_Handler,
		},
		{
			MethodName: "GetCallData",
			Handler:    _P3Api_GetCallData_Handler,
		},
		{
			MethodName: "ListHuntGroups",
			Handler:    _P3Api_ListHuntGroups_Handler,
		},
		{
			MethodName: "ListReassignmentHuntGroups",
			Handler:    _P3Api_ListReassignmentHuntGroups_Handler,
		},
		{
			MethodName: "GetOrgAgentSettings",
			Handler:    _P3Api_GetOrgAgentSettings_Handler,
		},
		{
			MethodName: "ListCallerIdsFromBucket",
			Handler:    _P3Api_ListCallerIdsFromBucket_Handler,
		},
		{
			MethodName: "SaveLastCallResponse",
			Handler:    _P3Api_SaveLastCallResponse_Handler,
		},
		{
			MethodName: "ListAgentCallLogsByCallSidAndType",
			Handler:    _P3Api_ListAgentCallLogsByCallSidAndType_Handler,
		},
		{
			MethodName: "ListAgentCallResponseValues",
			Handler:    _P3Api_ListAgentCallResponseValues_Handler,
		},
		{
			MethodName: "GetContactSchemaByContactGroup",
			Handler:    _P3Api_GetContactSchemaByContactGroup_Handler,
		},
		{
			MethodName: "ListContactGroupDetailsByClientSid",
			Handler:    _P3Api_ListContactGroupDetailsByClientSid_Handler,
		},
		{
			MethodName: "GetContactGroupDetails",
			Handler:    _P3Api_GetContactGroupDetails_Handler,
		},
		{
			MethodName: "GetContactGroupSize",
			Handler:    _P3Api_GetContactGroupSize_Handler,
		},
		{
			MethodName: "CreateContactFieldDescription",
			Handler:    _P3Api_CreateContactFieldDescription_Handler,
		},
		{
			MethodName: "UpdateContactFieldDescription",
			Handler:    _P3Api_UpdateContactFieldDescription_Handler,
		},
		{
			MethodName: "DeleteContactFieldDescription",
			Handler:    _P3Api_DeleteContactFieldDescription_Handler,
		},
		{
			MethodName: "ListContactFieldDescriptions",
			Handler:    _P3Api_ListContactFieldDescriptions_Handler,
		},
		{
			MethodName: "ListContactFieldDescriptionsByCGSid",
			Handler:    _P3Api_ListContactFieldDescriptionsByCGSid_Handler,
		},
		{
			MethodName: "ListContactImportTemplates",
			Handler:    _P3Api_ListContactImportTemplates_Handler,
		},
		{
			MethodName: "UpdatePreviewRecordToFinished",
			Handler:    _P3Api_UpdatePreviewRecordToFinished_Handler,
		},
		{
			MethodName: "UpdateAgentHuntGroup",
			Handler:    _P3Api_UpdateAgentHuntGroup_Handler,
		},
		{
			MethodName: "MultiAgentHuntGroupAssignment",
			Handler:    _P3Api_MultiAgentHuntGroupAssignment_Handler,
		},
		{
			MethodName: "GetAgentProfile",
			Handler:    _P3Api_GetAgentProfile_Handler,
		},
		{
			MethodName: "RecalculateBilling",
			Handler:    _P3Api_RecalculateBilling_Handler,
		},
		{
			MethodName: "ListOutboundBroadcastTemplateData",
			Handler:    _P3Api_ListOutboundBroadcastTemplateData_Handler,
		},
		{
			MethodName: "MultiAgentSkillAssignment",
			Handler:    _P3Api_MultiAgentSkillAssignment_Handler,
		},
		{
			MethodName: "MultiAgentSkillUnassignment",
			Handler:    _P3Api_MultiAgentSkillUnassignment_Handler,
		},
		{
			MethodName: "ListMAMAgentHuntGroupsByClientSid",
			Handler:    _P3Api_ListMAMAgentHuntGroupsByClientSid_Handler,
		},
		{
			MethodName: "ListTtsVoices",
			Handler:    _P3Api_ListTtsVoices_Handler,
		},
		{
			MethodName: "CreateTtsVoice",
			Handler:    _P3Api_CreateTtsVoice_Handler,
		},
		{
			MethodName: "DeleteTtsVoice",
			Handler:    _P3Api_DeleteTtsVoice_Handler,
		},
		{
			MethodName: "ListCustomDataKeys",
			Handler:    _P3Api_ListCustomDataKeys_Handler,
		},
		{
			MethodName: "CreateCustomDataKey",
			Handler:    _P3Api_CreateCustomDataKey_Handler,
		},
		{
			MethodName: "DeleteCustomDataKey",
			Handler:    _P3Api_DeleteCustomDataKey_Handler,
		},
		{
			MethodName: "UpdateCustomDataKey",
			Handler:    _P3Api_UpdateCustomDataKey_Handler,
		},
		{
			MethodName: "ListTableTemplateProperties",
			Handler:    _P3Api_ListTableTemplateProperties_Handler,
		},
		{
			MethodName: "ListAgentSkillsFilters",
			Handler:    _P3Api_ListAgentSkillsFilters_Handler,
		},
		{
			MethodName: "ListScheduleRules",
			Handler:    _P3Api_ListScheduleRules_Handler,
		},
		{
			MethodName: "ListCustomReportFilters",
			Handler:    _P3Api_ListCustomReportFilters_Handler,
		},
		{
			MethodName: "ListSmsNumbers",
			Handler:    _P3Api_ListSmsNumbers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListExtendedCallHistory",
			Handler:       _P3Api_ListExtendedCallHistory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetActivityLogHistory",
			Handler:       _P3Api_GetActivityLogHistory_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v0alpha/p3api.proto",
}
