// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v0alpha/emailapi.proto

package v0alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EmailApi_CreateEmailTemplate_FullMethodName                      = "/api.v0alpha.EmailApi/CreateEmailTemplate"
	EmailApi_UpdateEmailTemplate_FullMethodName                      = "/api.v0alpha.EmailApi/UpdateEmailTemplate"
	EmailApi_CreateEmailTemplateAttachment_FullMethodName            = "/api.v0alpha.EmailApi/CreateEmailTemplateAttachment"
	EmailApi_CopyEmailTemplateWithAttachments_FullMethodName         = "/api.v0alpha.EmailApi/CopyEmailTemplateWithAttachments"
	EmailApi_UpdateEmailTemplateAttachment_FullMethodName            = "/api.v0alpha.EmailApi/UpdateEmailTemplateAttachment"
	EmailApi_GetEmailTemplateByTemplateSid_FullMethodName            = "/api.v0alpha.EmailApi/GetEmailTemplateByTemplateSid"
	EmailApi_GetAllEmailTemplates_FullMethodName                     = "/api.v0alpha.EmailApi/GetAllEmailTemplates"
	EmailApi_DeleteEmailTemplate_FullMethodName                      = "/api.v0alpha.EmailApi/DeleteEmailTemplate"
	EmailApi_DeleteEmailTemplateAttachmentById_FullMethodName        = "/api.v0alpha.EmailApi/DeleteEmailTemplateAttachmentById"
	EmailApi_DownloadInboundEmailAttachment_FullMethodName           = "/api.v0alpha.EmailApi/DownloadInboundEmailAttachment"
	EmailApi_PureEmailGroupSearch_FullMethodName                     = "/api.v0alpha.EmailApi/PureEmailGroupSearch"
	EmailApi_ManagerListNewEmailMessageReplies_FullMethodName        = "/api.v0alpha.EmailApi/ManagerListNewEmailMessageReplies"
	EmailApi_ListNewEmailMessageReplies_FullMethodName               = "/api.v0alpha.EmailApi/ListNewEmailMessageReplies"
	EmailApi_GetEmailTasksByGroupSids_FullMethodName                 = "/api.v0alpha.EmailApi/GetEmailTasksByGroupSids"
	EmailApi_UpdateEmailGroupStatus_FullMethodName                   = "/api.v0alpha.EmailApi/UpdateEmailGroupStatus"
	EmailApi_GetEmailMessageDetails_FullMethodName                   = "/api.v0alpha.EmailApi/GetEmailMessageDetails"
	EmailApi_CreateInboundEmailTemplate_FullMethodName               = "/api.v0alpha.EmailApi/CreateInboundEmailTemplate"
	EmailApi_UpdateInboundEmailTemplate_FullMethodName               = "/api.v0alpha.EmailApi/UpdateInboundEmailTemplate"
	EmailApi_DeleteInboundEmailTemplateById_FullMethodName           = "/api.v0alpha.EmailApi/DeleteInboundEmailTemplateById"
	EmailApi_ListInboundEmailTemplates_FullMethodName                = "/api.v0alpha.EmailApi/ListInboundEmailTemplates"
	EmailApi_GetInboundEmailTemplateById_FullMethodName              = "/api.v0alpha.EmailApi/GetInboundEmailTemplateById"
	EmailApi_UpdateInboundEmailGroupStatus_FullMethodName            = "/api.v0alpha.EmailApi/UpdateInboundEmailGroupStatus"
	EmailApi_StopInboundEmailGroup_FullMethodName                    = "/api.v0alpha.EmailApi/StopInboundEmailGroup"
	EmailApi_StopAllInboundEmailGroups_FullMethodName                = "/api.v0alpha.EmailApi/StopAllInboundEmailGroups"
	EmailApi_PureInboundEmailGroupSearch_FullMethodName              = "/api.v0alpha.EmailApi/PureInboundEmailGroupSearch"
	EmailApi_InboundEmailGroupSearch_FullMethodName                  = "/api.v0alpha.EmailApi/InboundEmailGroupSearch"
	EmailApi_ListInboundEmailGroupsByGroupIds_FullMethodName         = "/api.v0alpha.EmailApi/ListInboundEmailGroupsByGroupIds"
	EmailApi_ListInboundEmailTasksByGroupIds_FullMethodName          = "/api.v0alpha.EmailApi/ListInboundEmailTasksByGroupIds"
	EmailApi_ListActiveInboundEmailGroups_FullMethodName             = "/api.v0alpha.EmailApi/ListActiveInboundEmailGroups"
	EmailApi_Schedule_FullMethodName                                 = "/api.v0alpha.EmailApi/Schedule"
	EmailApi_ScheduleOutboundEmailGroup_FullMethodName               = "/api.v0alpha.EmailApi/ScheduleOutboundEmailGroup"
	EmailApi_SchedulePureInboundEmail_FullMethodName                 = "/api.v0alpha.EmailApi/SchedulePureInboundEmail"
	EmailApi_CreateEmailMessageAgentReply_FullMethodName             = "/api.v0alpha.EmailApi/CreateEmailMessageAgentReply"
	EmailApi_CreateEmailMessageAgentReplyAttachment_FullMethodName   = "/api.v0alpha.EmailApi/CreateEmailMessageAgentReplyAttachment"
	EmailApi_SendReply_FullMethodName                                = "/api.v0alpha.EmailApi/SendReply"
	EmailApi_GetEmailGroupsByGroupSids_FullMethodName                = "/api.v0alpha.EmailApi/GetEmailGroupsByGroupSids"
	EmailApi_GetEmailGroupByGroupSid_FullMethodName                  = "/api.v0alpha.EmailApi/GetEmailGroupByGroupSid"
	EmailApi_GetEmailGroupByGroupId_FullMethodName                   = "/api.v0alpha.EmailApi/GetEmailGroupByGroupId"
	EmailApi_SchedulePureOmniLinkInboundEmail_FullMethodName         = "/api.v0alpha.EmailApi/SchedulePureOmniLinkInboundEmail"
	EmailApi_UpdateInboundEmailGroup_FullMethodName                  = "/api.v0alpha.EmailApi/UpdateInboundEmailGroup"
	EmailApi_UpdateEmailGroupMstrSendsPerMinute_FullMethodName       = "/api.v0alpha.EmailApi/UpdateEmailGroupMstrSendsPerMinute"
	EmailApi_UpdateOutboundEmailGroup_FullMethodName                 = "/api.v0alpha.EmailApi/UpdateOutboundEmailGroup"
	EmailApi_GetInboundEmailGroupById_FullMethodName                 = "/api.v0alpha.EmailApi/GetInboundEmailGroupById"
	EmailApi_CreateEmailMessageAttachment_FullMethodName             = "/api.v0alpha.EmailApi/CreateEmailMessageAttachment"
	EmailApi_ListEmailMessageAttachments_FullMethodName              = "/api.v0alpha.EmailApi/ListEmailMessageAttachments"
	EmailApi_UnassignCurrentUserFromEmailConversation_FullMethodName = "/api.v0alpha.EmailApi/UnassignCurrentUserFromEmailConversation"
	EmailApi_DashboardEmailConversationSearch_FullMethodName         = "/api.v0alpha.EmailApi/DashboardEmailConversationSearch"
	EmailApi_ReassignEmailConversation_FullMethodName                = "/api.v0alpha.EmailApi/ReassignEmailConversation"
	EmailApi_AssignEmailConversation_FullMethodName                  = "/api.v0alpha.EmailApi/AssignEmailConversation"
	EmailApi_SuspendEmailConversation_FullMethodName                 = "/api.v0alpha.EmailApi/SuspendEmailConversation"
	EmailApi_ListCampaignsByConnectedInboxId_FullMethodName          = "/api.v0alpha.EmailApi/ListCampaignsByConnectedInboxId"
	EmailApi_CloseEmailConversation_FullMethodName                   = "/api.v0alpha.EmailApi/CloseEmailConversation"
)

// EmailApiClient is the client API for EmailApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailApiClient interface {
	// Create/Record email template details defined by CreateEmailTemplateReq message for a specified
	// email_subject, email_body.
	// The method will return a CreateEmailTemplateRes message/entity that will
	// contain the newly created email_template_sid value for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateEmailTemplate(ctx context.Context, in *CreateEmailTemplateReq, opts ...grpc.CallOption) (*CreateEmailTemplateRes, error)
	// Update email template details defined by UpdateEmailTemplateReq message for a specified
	// email_template_sid, email_subject, email_body.
	// The method will return a UpdateEmailTemplateRes message/entity that will
	// contain the true/false after updating template details for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateEmailTemplate(ctx context.Context, in *UpdateEmailTemplateReq, opts ...grpc.CallOption) (*UpdateEmailTemplateRes, error)
	// Create/Record email template attachment details defined by CreateEmailTemplateAttachmentReq message for a specified
	// email_template_sid, file_name, file_size, content_type, hash.
	// The method will return a CreateEmailTemplateAttachmentRes message/entity that will
	// contain the newly created email_template_attachment_sid, fts storage url and gs_path  for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateEmailTemplateAttachment(ctx context.Context, in *CreateEmailTemplateAttachmentReq, opts ...grpc.CallOption) (*CreateEmailTemplateAttachmentRes, error)
	// Copy/Record email template with attachment details defined by CopyEmailTemplateWithAttachmentsReq message for a specified
	// email_template_sid and email_body.
	// The method will return a CopyEmailTemplateWithAttachmentsRes message/entity that will
	// contain the newly copied email_template_sid value for this client along with attachments
	// Required permissions:
	//
	//	OMNI_BOSS
	CopyEmailTemplateWithAttachments(ctx context.Context, in *CopyEmailTemplateWithAttachmentsReq, opts ...grpc.CallOption) (*CopyEmailTemplateWithAttachmentsRes, error)
	// Update email template attachment details defined by UpdateEmailTemplateAttachmentReq message for a specified
	// email_template_sid, email_template_attachment_sid, file_name, file_size, content_type, hash.
	// The method will return a UpdateEmailTemplateAttachmentRes message/entity that will
	// contain the true/false after updating template attachment details for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateEmailTemplateAttachment(ctx context.Context, in *UpdateEmailTemplateAttachmentReq, opts ...grpc.CallOption) (*UpdateEmailTemplateAttachmentRes, error)
	// Gets email template along with attachment details defined by GetEmailTemplateByTemplateSidReq message for a specified
	// email_template_sid.
	// The method will return a EmailTemplateWithAttachments message/entity that will
	// contain the email_template_sid, email_subject, email_body, EmailTemplateAttachmentDetails for this client_sid and email_template_sid
	// Required permissions:
	//
	//	OMNI_BOSS
	GetEmailTemplateByTemplateSid(ctx context.Context, in *GetEmailTemplateByTemplateSidReq, opts ...grpc.CallOption) (*EmailTemplateWithAttachments, error)
	// List stream of email template along with attachment details defined by GetAllEmailTemplatesReq message.
	// The method will return a GetAllEmailTemplatesRes message/entity that will
	// contain the stream of email_template_sid, email_subject, email_body, EmailTemplateAttachmentDetails for this client_sid
	// Required permissions:
	//
	//	OMNI_BOSS
	GetAllEmailTemplates(ctx context.Context, in *GetAllEmailTemplatesReq, opts ...grpc.CallOption) (*GetAllEmailTemplatesRes, error)
	// Delete email template details defined by DeleteEmailTemplateReq message for a specified
	// email_template_sid.
	// The method will return a DeleteEmailTemplateRes message/entity that will
	// contain the true/false after deleting template details for this client_sid and email_template_sid
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteEmailTemplate(ctx context.Context, in *DeleteEmailTemplateReq, opts ...grpc.CallOption) (*DeleteEmailTemplateRes, error)
	// Delete email template attachments defined by DeleteEmailTemplateAttachmentByIdReq message for a specified
	// email_template_attachment_sid.
	// The method will return a DeleteEmailTemplateAttachmentByIdRes message/entity that will
	// contain the true/false after deleting template attachments for this client_sid and email_template_attachment_sid
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteEmailTemplateAttachmentById(ctx context.Context, in *DeleteEmailTemplateAttachmentByIdReq, opts ...grpc.CallOption) (*DeleteEmailTemplateAttachmentByIdRes, error)
	// Download local inbound file attachment file contents using FTS bucket
	// defined by DownloadInboundEmailAttachmentReq message for a specified
	// email_message_reply_id and email_message_reply_attachment_id.
	// The method will return a DownloadInboundEmailAttachmentRes message/entity that will
	// contain the url where attachment contents are stored
	// Required permissions:
	//
	//	OMNI_BOSS
	DownloadInboundEmailAttachment(ctx context.Context, in *DownloadInboundEmailAttachmentReq, opts ...grpc.CallOption) (*DownloadInboundEmailAttachmentRes, error)
	// List stream of pure email groups based on search criteria defined by EmailGroupSearchReq message for a specified
	// by search_from and search_to or by status or by name and any of these combinations
	// The method will return a EmailGroupSearchRes message/entity that will
	// contain the stream of EmailGroupSearchDetailsRes results
	// Required permissions:
	//
	//	OMNI_BOSS
	PureEmailGroupSearch(ctx context.Context, in *EmailGroupSearchReq, opts ...grpc.CallOption) (*EmailGroupSearchRes, error)
	// Retreives a list of email replies for a conversation that come after the given
	// timestamp. Can set a user_id to get conversations for any user.
	// Required permissions:
	//
	//	??????
	ManagerListNewEmailMessageReplies(ctx context.Context, in *ListNewEmailMessageRepliesReq, opts ...grpc.CallOption) (*ListNewEmailMessageRepliesRes, error)
	// Retreives a list of email replies for a conversation that come after the given
	// timestamp
	// Required permissions:
	//
	//	??????
	ListNewEmailMessageReplies(ctx context.Context, in *ListNewEmailMessageRepliesReq, opts ...grpc.CallOption) (*ListNewEmailMessageRepliesRes, error)
	// List stream of email tasks defined by GetEmailTasksByGroupSidsReq message for a specified
	// array of email_group_sids
	// The method will return a GetEmailTasksByGroupSidsRes message/entity that will
	// contain the stream of EmailTaskMstrDetails results
	// Required permissions:
	//
	//	OMNI_BOSS
	GetEmailTasksByGroupSids(ctx context.Context, in *GetEmailTasksByGroupSidsReq, opts ...grpc.CallOption) (*GetEmailTasksByGroupSidsRes, error)
	// Update email group status value defined by EmailGroupStatusReq message for a specified
	// email_group_sid and status_id.
	// The method will return a EmailGroupStatusRes message/entity that will
	// contain the true/false after updating status for this clients email_group_sid and status_id
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateEmailGroupStatus(ctx context.Context, in *EmailGroupStatusReq, opts ...grpc.CallOption) (*EmailGroupStatusRes, error)
	// Gets email message details defined by GetEmailMessageReq message for a specified
	// email_message_sid.
	// The method will return a GetEmailMessageRes message/entity that will
	// contains email_subject and email_body for the email_message_sid
	// Required permissions:
	//
	//	OMNI_BOSS
	GetEmailMessageDetails(ctx context.Context, in *GetEmailMessageReq, opts ...grpc.CallOption) (*GetEmailMessageRes, error)
	// Create/Record inbound email template defined by CreateInboundEmailTemplateReq message for a specified
	//
	//	connected_inbox_id, name.
	//
	// The method will return a CreateInboundEmailTemplateRes message/entity that will
	// contain the newly created inbound_email_template_id value for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateInboundEmailTemplate(ctx context.Context, in *CreateInboundEmailTemplateReq, opts ...grpc.CallOption) (*CreateInboundEmailTemplateRes, error)
	// Update inbound email template details defined by UpdateInboundEmailTemplateReq message for a specified
	//
	//	inbound_email_template_id, connected_inbox_id, name.
	//
	// The method will return a UpdateInboundEmailTemplateRes message/entity that will
	// contain the true/false after updating inbound email template details for inbound_email_template_id
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateInboundEmailTemplate(ctx context.Context, in *UpdateInboundEmailTemplateReq, opts ...grpc.CallOption) (*UpdateInboundEmailTemplateRes, error)
	// Delete inbound email template details defined by DeleteInboundEmailTemplateByIdReq message for a specified
	//
	//	inbound_email_template_id.
	//
	// The method will return a DeleteInboundEmailTemplateByIdRes message/entity that will
	// contain the true/false after deleting inbound email template details for inbound_email_template_id
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteInboundEmailTemplateById(ctx context.Context, in *DeleteInboundEmailTemplateByIdReq, opts ...grpc.CallOption) (*DeleteInboundEmailTemplateByIdRes, error)
	// List stream of inbound email template details defined by ListInboundEmailTemplatesReq message
	// The method will return a ListInboundEmailTemplatesRes message/entity that will
	// contain the stream of inbound_email_template_id, connected_inbox_id, name.
	// Required permissions:
	//
	//	OMNI_BOSS
	ListInboundEmailTemplates(ctx context.Context, in *ListInboundEmailTemplatesReq, opts ...grpc.CallOption) (*ListInboundEmailTemplatesRes, error)
	// Gets inbound email template details defined by GetInboundEmailTemplateByIdReq message for a specified
	// inbound_email_template_id.
	// The method will return a InboundEmailTemplate message/entity that will
	// contain the inbound email template details for inbound_email_template_id
	// Required permissions:
	//
	//	OMNI_BOSS
	GetInboundEmailTemplateById(ctx context.Context, in *GetInboundEmailTemplateByIdReq, opts ...grpc.CallOption) (*InboundEmailTemplate, error)
	// Update inbound email group status details defined by UpdateInboundEmailGroupStatusReq
	// status. The method will return a UpdateInboundEmailGroupStatusRes message/entity
	// that will contain the true/false after updating inbound email group details
	// for this org_id, region_id and inbound_email_group_id Required permissions:
	//
	//	OMNI_BOSS
	UpdateInboundEmailGroupStatus(ctx context.Context, in *UpdateInboundEmailGroupStatusReq, opts ...grpc.CallOption) (*UpdateInboundEmailGroupStatusRes, error)
	// Stop inbound email group defined by StopInboundEmailGroupReq message for a specified
	//
	//	inbound_email_group_id.
	//
	// The method will return a StopInboundEmailGroupRes message/entity that will
	// contain the true/false after updating inbound email group details for inbound_email_group_id
	// Required permissions:
	//
	//	OMNI_BOSS
	StopInboundEmailGroup(ctx context.Context, in *StopInboundEmailGroupReq, opts ...grpc.CallOption) (*StopInboundEmailGroupRes, error)
	// Stop all InboundEmail groups defined by StopAllInboundEmailGroupsReq message for the specified
	// array of inbound_email_group_ids
	// The method will mark the InboundEmail groups as completed.
	// Required permissions: VIEW_EMAIL
	StopAllInboundEmailGroups(ctx context.Context, in *StopAllInboundEmailGroupsReq, opts ...grpc.CallOption) (*StopInboundEmailGroupRes, error)
	// List stream of pure inbound email groups based on search criteria defined by PureInboundEmailGroupSearchReq message for a specified
	//
	//	by search_from and search_to or by status or by name and any of these combinations
	//
	// The method will return a PureInboundEmailGroupSearchRes message/entity that will
	// contain the stream of InboundEmailGroups
	// Required permissions:
	//
	//	OMNI_BOSS
	PureInboundEmailGroupSearch(ctx context.Context, in *PureInboundEmailGroupSearchReq, opts ...grpc.CallOption) (*PureInboundEmailGroupSearchRes, error)
	// List stream of inbound email groups based on search criteria defined by
	// InboundEmailGroupSearchReq message for a specified by
	// search_from and search_to or by status or by name and any of these
	// combinations The method will return a InboundEmailGroupSearchRes
	// message/entity that will contain the stream of InboundEmailGroups Required
	// permissions:
	//
	//	OMNI_BOSS
	InboundEmailGroupSearch(ctx context.Context, in *InboundEmailGroupSearchReq, opts ...grpc.CallOption) (*InboundEmailGroupSearchRes, error)
	// List stream of inbound email groups defined by ListInboundEmailGroupsByGroupIdsReq message for a specified
	// array of inbound email groups
	// The method will return a ListInboundEmailGroupsByGroupIdsRes message/entity that will
	// contain the stream of InboundEmailGroup
	// Required permissions:
	//
	//	OMNI_BOSS
	ListInboundEmailGroupsByGroupIds(ctx context.Context, in *ListInboundEmailGroupsByGroupIdsReq, opts ...grpc.CallOption) (*ListInboundEmailGroupsByGroupIdsRes, error)
	// List stream of inbound email tasks defined by ListInboundEmailTasksByGroupIdsReq message for a specified
	// array of inbound email groups
	// The method will return a ListInboundEmailTasksByGroupIdsRes message/entity that will
	// contain the stream of InboundEmailTaskDetails along with any file attachments
	// Required permissions:
	//
	//	OMNI_BOSS
	ListInboundEmailTasksByGroupIds(ctx context.Context, in *ListInboundEmailTasksByGroupIdsReq, opts ...grpc.CallOption) (*ListInboundEmailTasksByGroupIdsRes, error)
	// List stream of active/running inbound email groups defined by ListActiveInboundEmailGroupsReq message
	// The method will return a ListActiveInboundEmailGroupsRes message/entity that will
	// contain the stream of active/running InboundEmailGroups
	// Required permissions:
	//
	//	OMNI_BOSS
	ListActiveInboundEmailGroups(ctx context.Context, in *ListActiveInboundEmailGroupsReq, opts ...grpc.CallOption) (*ListActiveInboundEmailGroupsRes, error)
	// Schedule Outbound email campaign defined by ScheduleReq message for the specified
	// email_template_sid, initial_pace, selected_email_col, from_address,
	// allow_duplicates, group_name, contact_group_sid, start_time, stop_time
	// The method will return ScheduleRes message/entity that will
	// contain newly scheduled email_group_sid and email_group_id for this client
	// Required permissions:
	//
	//	EXECUTE_SEND_BROADCAST
	Schedule(ctx context.Context, in *ScheduleReq, opts ...grpc.CallOption) (*ScheduleRes, error)
	// Schedule Outbound email campaign defined by ScheduleOutboundEmailGroupReq message for the specified
	// subject, email message, initial_pace, selected_email_col, from_address,
	// allow_duplicates, group_name, contact_group_sid, start_time, stop_time
	// The method will return ScheduleOutboundEmailGroupRes message/entity that will
	// contain newly scheduled email_group_sid and email_group_id for this client
	// Required permissions:
	//
	//	EXECUTE_SEND_BROADCAST
	ScheduleOutboundEmailGroup(ctx context.Context, in *ScheduleOutboundEmailGroupReq, opts ...grpc.CallOption) (*ScheduleOutboundEmailGroupRes, error)
	// Schedule Pure Inbound email campaign defined by SchedulePureInboundEmailReq message for the specified
	// inbound_email_template_sid
	// The method will return SchedulePureInboundEmailRes message/entity that will
	// contain newly scheduled inbound_email_group_sid for this client
	// Required permissions:
	//
	//	EXECUTE_SEND_BROADCAST
	SchedulePureInboundEmail(ctx context.Context, in *SchedulePureInboundEmailReq, opts ...grpc.CallOption) (*SchedulePureInboundEmailRes, error)
	// Create/Record inbound agent email reply defined by CreateEmailMessageAgentReplyReq message for a specified
	// inbound_email_group_id, to_address, subject, email_conversation_id, agent_sid .
	// The method will return a EmailMessageReply message/entity that will
	// contain the newly created email_message_reply data
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateEmailMessageAgentReply(ctx context.Context, in *CreateEmailMessageAgentReplyReq, opts ...grpc.CallOption) (*EmailMessageReplyWithAttachments, error)
	// Create/Record inbound agent email reply attachment defined by CreateEmailMessageAgentReplyAttachmentReq message for a specified
	// file_name, file_size and file_type.
	// The method will return a CreateEmailMessageAgentReplyAttachmentRes message/entity that will
	// contain the newly created email_message_reply_attachment_id, url_path and gs_path for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateEmailMessageAgentReplyAttachment(ctx context.Context, in *CreateEmailMessageAgentReplyAttachmentReq, opts ...grpc.CallOption) (*CreateEmailMessageAgentReplyAttachmentRes, error)
	// Sends email message based on email details defined in SendReplyReq specified by
	// in_reply_to and email_reply_id
	// The method will return a EmailMessageReplyWithAttachments message/entity that will
	// contain the email_message_reply data
	// along with along with attachment details
	// Required permissions:
	//
	//	EXECUTE_SEND_BROADCAST
	SendReply(ctx context.Context, in *SendReplyReq, opts ...grpc.CallOption) (*EmailMessageReplyWithAttachments, error)
	// List stream of email groups defined by GetEmailGroupsByGroupSidsReq message for a specified
	// array of email_group_sids
	// The method will return a GetEmailGroupsByGroupSidsRes message/entity that will
	// contain the stream of EmailGroupSearchDetailsRes results
	// Required permissions:
	//
	//	OMNI_BOSS
	GetEmailGroupsByGroupSids(ctx context.Context, in *GetEmailGroupsByGroupSidsReq, opts ...grpc.CallOption) (*GetEmailGroupsByGroupSidsRes, error)
	// Get outbound email group details defined by GetEmailGroupByGroupSidReq message for a specified
	// email_group_sid
	// The method will return a EmailGroupDetailsWithAttachments message/entity that will
	// contain the outbound email group details
	// Required permissions:
	//
	//	OMNI_BOSS
	GetEmailGroupByGroupSid(ctx context.Context, in *GetEmailGroupByGroupSidReq, opts ...grpc.CallOption) (*EmailGroupDetailsWithAttachments, error)
	// Get outbound email group details defined by GetEmailGroupByGroupIdReq message for a specified
	// email_group_id
	// The method will return a EmailGroupDetailsWithAttachments message/entity that will
	// contain the outbound email group details
	// Required permissions:
	//
	//	OMNI_BOSS
	GetEmailGroupByGroupId(ctx context.Context, in *GetEmailGroupByGroupIdReq, opts ...grpc.CallOption) (*EmailGroupDetailsWithAttachments, error)
	// Schedule Pure OmniLink Inbound email campaign defined by SchedulePureOmniLinkInboundEmailReq message for the specified
	// connectedInbox and skills
	// The method will return SchedulePureOmniLinkInboundEmailRes message/entity that will
	// contain newly scheduled inbound_email_group_sid for this client
	// Required permissions:
	//
	//	EXECUTE_SEND_BROADCAST
	SchedulePureOmniLinkInboundEmail(ctx context.Context, in *SchedulePureOmniLinkInboundEmailReq, opts ...grpc.CallOption) (*SchedulePureOmniLinkInboundEmailRes, error)
	// Updates the name, skills, stop time for the inbound email group
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateInboundEmailGroup(ctx context.Context, in *UpdateInboundEmailGroupReq, opts ...grpc.CallOption) (*UpdateInboundEmailGroupRes, error)
	// Update email group sendsperminute defined by EmailGroupSendsPerMinuteReq
	// message for a specified email_group_sid and sends_per_minute.
	// The method will return a EmailGroupSendsPerMinuteRes message/entity that
	// will contain the true/false after updating sends_per_minute value for this
	// clients email_group_sid and sends_per_minute Required permissions:
	//
	//	OMNI_BOSS
	UpdateEmailGroupMstrSendsPerMinute(ctx context.Context, in *EmailGroupSendsPerMinuteReq, opts ...grpc.CallOption) (*EmailGroupSendsPerMinuteRes, error)
	// Updates the name, start and stop time for the outbound email group
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateOutboundEmailGroup(ctx context.Context, in *UpdateOutboundEmailGroupReq, opts ...grpc.CallOption) (*UpdateOutboundEmailGroupRes, error)
	// Gets a inbound email group details defined by InboundEmailGroupByIdReq
	// message for the specified inbound_email_group_id, org_id and region_id. The
	// method will return a InboundEmailGroup message/entity. Required
	// permissions:
	//
	//	OMNI_BOSS
	GetInboundEmailGroupById(ctx context.Context, in *InboundEmailGroupByIdReq, opts ...grpc.CallOption) (*InboundEmailGroup, error)
	// Create/Add email message attachment details defined by CreateEmailMessageAttachmentReq
	// message for the specified client.
	// This method will return a CreateEmailMessageAttachmentRes message/entity. Required
	// permissions:
	//
	//	OMNI_BOSS
	CreateEmailMessageAttachment(ctx context.Context, in *CreateEmailMessageAttachmentReq, opts ...grpc.CallOption) (*CreateEmailMessageAttachmentRes, error)
	// List all the email message attachments and their details defined by
	// ListEmailMessageAttachmentsReq for the specified client.
	// permissions:
	//
	//	OMNI_BOSS
	ListEmailMessageAttachments(ctx context.Context, in *ListEmailMessageAttachmentsReq, opts ...grpc.CallOption) (*ListEmailMessageAttachmentsRes, error)
	// Unassigns a conversation from the current user and puts it back into the matching pool
	// Required permissions:
	//
	//	OMNI_LINK
	UnassignCurrentUserFromEmailConversation(ctx context.Context, in *UnassignCurrentUserFromEmailConversationReq, opts ...grpc.CallOption) (*UnassignUserFromEmailConversationRes, error)
	// Listing all email conversations for the dashboard
	// Required Permissions:
	//
	//	OMNI_BOSS
	DashboardEmailConversationSearch(ctx context.Context, in *DashboardEmailConversationSearchReq, opts ...grpc.CallOption) (*DashboardEmailConversationSearchRes, error)
	// ReassignEmailConversation.  unassign current user and assign
	// new user.
	// This method will return a ReassignEmailConversationRes
	// Required permissions
	//
	//	OMNI_BOSS
	ReassignEmailConversation(ctx context.Context, in *ReassignEmailConversationReq, opts ...grpc.CallOption) (*ReassignEmailConversationRes, error)
	// AssignEmailConversation - allowing the manager from the dashboard to assing a email conversation
	// before the matcher assigns it.
	AssignEmailConversation(ctx context.Context, in *AssignEmailConversationReq, opts ...grpc.CallOption) (*AssignEmailConversationRes, error)
	// Suspends an email conversation
	SuspendEmailConversation(ctx context.Context, in *SuspendEmailConversationReq, opts ...grpc.CallOption) (*SuspendEmailConversationRes, error)
	// List stream of inbound and outbound campaigns defined by ListCampaignsByConnectedInboxIdReq message
	// The method will return a ListCampaignsByConnectedInboxIdRes message/entity that will
	// contain the stream of all campaigns along with project details.
	// Required permissions:
	//
	//	OMNI_BOSS
	ListCampaignsByConnectedInboxId(ctx context.Context, in *ListCampaignsByConnectedInboxIdReq, opts ...grpc.CallOption) (*ListCampaignsByConnectedInboxIdRes, error)
	// Close email conversation defined by CloseEmailConversationReq message
	// Required permissions:
	//
	//	OMNI_BOSS
	CloseEmailConversation(ctx context.Context, in *CloseEmailConversationReq, opts ...grpc.CallOption) (*CloseEmailConversationRes, error)
}

type emailApiClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailApiClient(cc grpc.ClientConnInterface) EmailApiClient {
	return &emailApiClient{cc}
}

func (c *emailApiClient) CreateEmailTemplate(ctx context.Context, in *CreateEmailTemplateReq, opts ...grpc.CallOption) (*CreateEmailTemplateRes, error) {
	out := new(CreateEmailTemplateRes)
	err := c.cc.Invoke(ctx, EmailApi_CreateEmailTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) UpdateEmailTemplate(ctx context.Context, in *UpdateEmailTemplateReq, opts ...grpc.CallOption) (*UpdateEmailTemplateRes, error) {
	out := new(UpdateEmailTemplateRes)
	err := c.cc.Invoke(ctx, EmailApi_UpdateEmailTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) CreateEmailTemplateAttachment(ctx context.Context, in *CreateEmailTemplateAttachmentReq, opts ...grpc.CallOption) (*CreateEmailTemplateAttachmentRes, error) {
	out := new(CreateEmailTemplateAttachmentRes)
	err := c.cc.Invoke(ctx, EmailApi_CreateEmailTemplateAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) CopyEmailTemplateWithAttachments(ctx context.Context, in *CopyEmailTemplateWithAttachmentsReq, opts ...grpc.CallOption) (*CopyEmailTemplateWithAttachmentsRes, error) {
	out := new(CopyEmailTemplateWithAttachmentsRes)
	err := c.cc.Invoke(ctx, EmailApi_CopyEmailTemplateWithAttachments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) UpdateEmailTemplateAttachment(ctx context.Context, in *UpdateEmailTemplateAttachmentReq, opts ...grpc.CallOption) (*UpdateEmailTemplateAttachmentRes, error) {
	out := new(UpdateEmailTemplateAttachmentRes)
	err := c.cc.Invoke(ctx, EmailApi_UpdateEmailTemplateAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) GetEmailTemplateByTemplateSid(ctx context.Context, in *GetEmailTemplateByTemplateSidReq, opts ...grpc.CallOption) (*EmailTemplateWithAttachments, error) {
	out := new(EmailTemplateWithAttachments)
	err := c.cc.Invoke(ctx, EmailApi_GetEmailTemplateByTemplateSid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) GetAllEmailTemplates(ctx context.Context, in *GetAllEmailTemplatesReq, opts ...grpc.CallOption) (*GetAllEmailTemplatesRes, error) {
	out := new(GetAllEmailTemplatesRes)
	err := c.cc.Invoke(ctx, EmailApi_GetAllEmailTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) DeleteEmailTemplate(ctx context.Context, in *DeleteEmailTemplateReq, opts ...grpc.CallOption) (*DeleteEmailTemplateRes, error) {
	out := new(DeleteEmailTemplateRes)
	err := c.cc.Invoke(ctx, EmailApi_DeleteEmailTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) DeleteEmailTemplateAttachmentById(ctx context.Context, in *DeleteEmailTemplateAttachmentByIdReq, opts ...grpc.CallOption) (*DeleteEmailTemplateAttachmentByIdRes, error) {
	out := new(DeleteEmailTemplateAttachmentByIdRes)
	err := c.cc.Invoke(ctx, EmailApi_DeleteEmailTemplateAttachmentById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) DownloadInboundEmailAttachment(ctx context.Context, in *DownloadInboundEmailAttachmentReq, opts ...grpc.CallOption) (*DownloadInboundEmailAttachmentRes, error) {
	out := new(DownloadInboundEmailAttachmentRes)
	err := c.cc.Invoke(ctx, EmailApi_DownloadInboundEmailAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) PureEmailGroupSearch(ctx context.Context, in *EmailGroupSearchReq, opts ...grpc.CallOption) (*EmailGroupSearchRes, error) {
	out := new(EmailGroupSearchRes)
	err := c.cc.Invoke(ctx, EmailApi_PureEmailGroupSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) ManagerListNewEmailMessageReplies(ctx context.Context, in *ListNewEmailMessageRepliesReq, opts ...grpc.CallOption) (*ListNewEmailMessageRepliesRes, error) {
	out := new(ListNewEmailMessageRepliesRes)
	err := c.cc.Invoke(ctx, EmailApi_ManagerListNewEmailMessageReplies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) ListNewEmailMessageReplies(ctx context.Context, in *ListNewEmailMessageRepliesReq, opts ...grpc.CallOption) (*ListNewEmailMessageRepliesRes, error) {
	out := new(ListNewEmailMessageRepliesRes)
	err := c.cc.Invoke(ctx, EmailApi_ListNewEmailMessageReplies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) GetEmailTasksByGroupSids(ctx context.Context, in *GetEmailTasksByGroupSidsReq, opts ...grpc.CallOption) (*GetEmailTasksByGroupSidsRes, error) {
	out := new(GetEmailTasksByGroupSidsRes)
	err := c.cc.Invoke(ctx, EmailApi_GetEmailTasksByGroupSids_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) UpdateEmailGroupStatus(ctx context.Context, in *EmailGroupStatusReq, opts ...grpc.CallOption) (*EmailGroupStatusRes, error) {
	out := new(EmailGroupStatusRes)
	err := c.cc.Invoke(ctx, EmailApi_UpdateEmailGroupStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) GetEmailMessageDetails(ctx context.Context, in *GetEmailMessageReq, opts ...grpc.CallOption) (*GetEmailMessageRes, error) {
	out := new(GetEmailMessageRes)
	err := c.cc.Invoke(ctx, EmailApi_GetEmailMessageDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) CreateInboundEmailTemplate(ctx context.Context, in *CreateInboundEmailTemplateReq, opts ...grpc.CallOption) (*CreateInboundEmailTemplateRes, error) {
	out := new(CreateInboundEmailTemplateRes)
	err := c.cc.Invoke(ctx, EmailApi_CreateInboundEmailTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) UpdateInboundEmailTemplate(ctx context.Context, in *UpdateInboundEmailTemplateReq, opts ...grpc.CallOption) (*UpdateInboundEmailTemplateRes, error) {
	out := new(UpdateInboundEmailTemplateRes)
	err := c.cc.Invoke(ctx, EmailApi_UpdateInboundEmailTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) DeleteInboundEmailTemplateById(ctx context.Context, in *DeleteInboundEmailTemplateByIdReq, opts ...grpc.CallOption) (*DeleteInboundEmailTemplateByIdRes, error) {
	out := new(DeleteInboundEmailTemplateByIdRes)
	err := c.cc.Invoke(ctx, EmailApi_DeleteInboundEmailTemplateById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) ListInboundEmailTemplates(ctx context.Context, in *ListInboundEmailTemplatesReq, opts ...grpc.CallOption) (*ListInboundEmailTemplatesRes, error) {
	out := new(ListInboundEmailTemplatesRes)
	err := c.cc.Invoke(ctx, EmailApi_ListInboundEmailTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) GetInboundEmailTemplateById(ctx context.Context, in *GetInboundEmailTemplateByIdReq, opts ...grpc.CallOption) (*InboundEmailTemplate, error) {
	out := new(InboundEmailTemplate)
	err := c.cc.Invoke(ctx, EmailApi_GetInboundEmailTemplateById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) UpdateInboundEmailGroupStatus(ctx context.Context, in *UpdateInboundEmailGroupStatusReq, opts ...grpc.CallOption) (*UpdateInboundEmailGroupStatusRes, error) {
	out := new(UpdateInboundEmailGroupStatusRes)
	err := c.cc.Invoke(ctx, EmailApi_UpdateInboundEmailGroupStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) StopInboundEmailGroup(ctx context.Context, in *StopInboundEmailGroupReq, opts ...grpc.CallOption) (*StopInboundEmailGroupRes, error) {
	out := new(StopInboundEmailGroupRes)
	err := c.cc.Invoke(ctx, EmailApi_StopInboundEmailGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) StopAllInboundEmailGroups(ctx context.Context, in *StopAllInboundEmailGroupsReq, opts ...grpc.CallOption) (*StopInboundEmailGroupRes, error) {
	out := new(StopInboundEmailGroupRes)
	err := c.cc.Invoke(ctx, EmailApi_StopAllInboundEmailGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) PureInboundEmailGroupSearch(ctx context.Context, in *PureInboundEmailGroupSearchReq, opts ...grpc.CallOption) (*PureInboundEmailGroupSearchRes, error) {
	out := new(PureInboundEmailGroupSearchRes)
	err := c.cc.Invoke(ctx, EmailApi_PureInboundEmailGroupSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) InboundEmailGroupSearch(ctx context.Context, in *InboundEmailGroupSearchReq, opts ...grpc.CallOption) (*InboundEmailGroupSearchRes, error) {
	out := new(InboundEmailGroupSearchRes)
	err := c.cc.Invoke(ctx, EmailApi_InboundEmailGroupSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) ListInboundEmailGroupsByGroupIds(ctx context.Context, in *ListInboundEmailGroupsByGroupIdsReq, opts ...grpc.CallOption) (*ListInboundEmailGroupsByGroupIdsRes, error) {
	out := new(ListInboundEmailGroupsByGroupIdsRes)
	err := c.cc.Invoke(ctx, EmailApi_ListInboundEmailGroupsByGroupIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) ListInboundEmailTasksByGroupIds(ctx context.Context, in *ListInboundEmailTasksByGroupIdsReq, opts ...grpc.CallOption) (*ListInboundEmailTasksByGroupIdsRes, error) {
	out := new(ListInboundEmailTasksByGroupIdsRes)
	err := c.cc.Invoke(ctx, EmailApi_ListInboundEmailTasksByGroupIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) ListActiveInboundEmailGroups(ctx context.Context, in *ListActiveInboundEmailGroupsReq, opts ...grpc.CallOption) (*ListActiveInboundEmailGroupsRes, error) {
	out := new(ListActiveInboundEmailGroupsRes)
	err := c.cc.Invoke(ctx, EmailApi_ListActiveInboundEmailGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) Schedule(ctx context.Context, in *ScheduleReq, opts ...grpc.CallOption) (*ScheduleRes, error) {
	out := new(ScheduleRes)
	err := c.cc.Invoke(ctx, EmailApi_Schedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) ScheduleOutboundEmailGroup(ctx context.Context, in *ScheduleOutboundEmailGroupReq, opts ...grpc.CallOption) (*ScheduleOutboundEmailGroupRes, error) {
	out := new(ScheduleOutboundEmailGroupRes)
	err := c.cc.Invoke(ctx, EmailApi_ScheduleOutboundEmailGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) SchedulePureInboundEmail(ctx context.Context, in *SchedulePureInboundEmailReq, opts ...grpc.CallOption) (*SchedulePureInboundEmailRes, error) {
	out := new(SchedulePureInboundEmailRes)
	err := c.cc.Invoke(ctx, EmailApi_SchedulePureInboundEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) CreateEmailMessageAgentReply(ctx context.Context, in *CreateEmailMessageAgentReplyReq, opts ...grpc.CallOption) (*EmailMessageReplyWithAttachments, error) {
	out := new(EmailMessageReplyWithAttachments)
	err := c.cc.Invoke(ctx, EmailApi_CreateEmailMessageAgentReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) CreateEmailMessageAgentReplyAttachment(ctx context.Context, in *CreateEmailMessageAgentReplyAttachmentReq, opts ...grpc.CallOption) (*CreateEmailMessageAgentReplyAttachmentRes, error) {
	out := new(CreateEmailMessageAgentReplyAttachmentRes)
	err := c.cc.Invoke(ctx, EmailApi_CreateEmailMessageAgentReplyAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) SendReply(ctx context.Context, in *SendReplyReq, opts ...grpc.CallOption) (*EmailMessageReplyWithAttachments, error) {
	out := new(EmailMessageReplyWithAttachments)
	err := c.cc.Invoke(ctx, EmailApi_SendReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) GetEmailGroupsByGroupSids(ctx context.Context, in *GetEmailGroupsByGroupSidsReq, opts ...grpc.CallOption) (*GetEmailGroupsByGroupSidsRes, error) {
	out := new(GetEmailGroupsByGroupSidsRes)
	err := c.cc.Invoke(ctx, EmailApi_GetEmailGroupsByGroupSids_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) GetEmailGroupByGroupSid(ctx context.Context, in *GetEmailGroupByGroupSidReq, opts ...grpc.CallOption) (*EmailGroupDetailsWithAttachments, error) {
	out := new(EmailGroupDetailsWithAttachments)
	err := c.cc.Invoke(ctx, EmailApi_GetEmailGroupByGroupSid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) GetEmailGroupByGroupId(ctx context.Context, in *GetEmailGroupByGroupIdReq, opts ...grpc.CallOption) (*EmailGroupDetailsWithAttachments, error) {
	out := new(EmailGroupDetailsWithAttachments)
	err := c.cc.Invoke(ctx, EmailApi_GetEmailGroupByGroupId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) SchedulePureOmniLinkInboundEmail(ctx context.Context, in *SchedulePureOmniLinkInboundEmailReq, opts ...grpc.CallOption) (*SchedulePureOmniLinkInboundEmailRes, error) {
	out := new(SchedulePureOmniLinkInboundEmailRes)
	err := c.cc.Invoke(ctx, EmailApi_SchedulePureOmniLinkInboundEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) UpdateInboundEmailGroup(ctx context.Context, in *UpdateInboundEmailGroupReq, opts ...grpc.CallOption) (*UpdateInboundEmailGroupRes, error) {
	out := new(UpdateInboundEmailGroupRes)
	err := c.cc.Invoke(ctx, EmailApi_UpdateInboundEmailGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) UpdateEmailGroupMstrSendsPerMinute(ctx context.Context, in *EmailGroupSendsPerMinuteReq, opts ...grpc.CallOption) (*EmailGroupSendsPerMinuteRes, error) {
	out := new(EmailGroupSendsPerMinuteRes)
	err := c.cc.Invoke(ctx, EmailApi_UpdateEmailGroupMstrSendsPerMinute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) UpdateOutboundEmailGroup(ctx context.Context, in *UpdateOutboundEmailGroupReq, opts ...grpc.CallOption) (*UpdateOutboundEmailGroupRes, error) {
	out := new(UpdateOutboundEmailGroupRes)
	err := c.cc.Invoke(ctx, EmailApi_UpdateOutboundEmailGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) GetInboundEmailGroupById(ctx context.Context, in *InboundEmailGroupByIdReq, opts ...grpc.CallOption) (*InboundEmailGroup, error) {
	out := new(InboundEmailGroup)
	err := c.cc.Invoke(ctx, EmailApi_GetInboundEmailGroupById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) CreateEmailMessageAttachment(ctx context.Context, in *CreateEmailMessageAttachmentReq, opts ...grpc.CallOption) (*CreateEmailMessageAttachmentRes, error) {
	out := new(CreateEmailMessageAttachmentRes)
	err := c.cc.Invoke(ctx, EmailApi_CreateEmailMessageAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) ListEmailMessageAttachments(ctx context.Context, in *ListEmailMessageAttachmentsReq, opts ...grpc.CallOption) (*ListEmailMessageAttachmentsRes, error) {
	out := new(ListEmailMessageAttachmentsRes)
	err := c.cc.Invoke(ctx, EmailApi_ListEmailMessageAttachments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) UnassignCurrentUserFromEmailConversation(ctx context.Context, in *UnassignCurrentUserFromEmailConversationReq, opts ...grpc.CallOption) (*UnassignUserFromEmailConversationRes, error) {
	out := new(UnassignUserFromEmailConversationRes)
	err := c.cc.Invoke(ctx, EmailApi_UnassignCurrentUserFromEmailConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) DashboardEmailConversationSearch(ctx context.Context, in *DashboardEmailConversationSearchReq, opts ...grpc.CallOption) (*DashboardEmailConversationSearchRes, error) {
	out := new(DashboardEmailConversationSearchRes)
	err := c.cc.Invoke(ctx, EmailApi_DashboardEmailConversationSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) ReassignEmailConversation(ctx context.Context, in *ReassignEmailConversationReq, opts ...grpc.CallOption) (*ReassignEmailConversationRes, error) {
	out := new(ReassignEmailConversationRes)
	err := c.cc.Invoke(ctx, EmailApi_ReassignEmailConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) AssignEmailConversation(ctx context.Context, in *AssignEmailConversationReq, opts ...grpc.CallOption) (*AssignEmailConversationRes, error) {
	out := new(AssignEmailConversationRes)
	err := c.cc.Invoke(ctx, EmailApi_AssignEmailConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) SuspendEmailConversation(ctx context.Context, in *SuspendEmailConversationReq, opts ...grpc.CallOption) (*SuspendEmailConversationRes, error) {
	out := new(SuspendEmailConversationRes)
	err := c.cc.Invoke(ctx, EmailApi_SuspendEmailConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) ListCampaignsByConnectedInboxId(ctx context.Context, in *ListCampaignsByConnectedInboxIdReq, opts ...grpc.CallOption) (*ListCampaignsByConnectedInboxIdRes, error) {
	out := new(ListCampaignsByConnectedInboxIdRes)
	err := c.cc.Invoke(ctx, EmailApi_ListCampaignsByConnectedInboxId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailApiClient) CloseEmailConversation(ctx context.Context, in *CloseEmailConversationReq, opts ...grpc.CallOption) (*CloseEmailConversationRes, error) {
	out := new(CloseEmailConversationRes)
	err := c.cc.Invoke(ctx, EmailApi_CloseEmailConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailApiServer is the server API for EmailApi service.
// All implementations must embed UnimplementedEmailApiServer
// for forward compatibility
type EmailApiServer interface {
	// Create/Record email template details defined by CreateEmailTemplateReq message for a specified
	// email_subject, email_body.
	// The method will return a CreateEmailTemplateRes message/entity that will
	// contain the newly created email_template_sid value for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateEmailTemplate(context.Context, *CreateEmailTemplateReq) (*CreateEmailTemplateRes, error)
	// Update email template details defined by UpdateEmailTemplateReq message for a specified
	// email_template_sid, email_subject, email_body.
	// The method will return a UpdateEmailTemplateRes message/entity that will
	// contain the true/false after updating template details for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateEmailTemplate(context.Context, *UpdateEmailTemplateReq) (*UpdateEmailTemplateRes, error)
	// Create/Record email template attachment details defined by CreateEmailTemplateAttachmentReq message for a specified
	// email_template_sid, file_name, file_size, content_type, hash.
	// The method will return a CreateEmailTemplateAttachmentRes message/entity that will
	// contain the newly created email_template_attachment_sid, fts storage url and gs_path  for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateEmailTemplateAttachment(context.Context, *CreateEmailTemplateAttachmentReq) (*CreateEmailTemplateAttachmentRes, error)
	// Copy/Record email template with attachment details defined by CopyEmailTemplateWithAttachmentsReq message for a specified
	// email_template_sid and email_body.
	// The method will return a CopyEmailTemplateWithAttachmentsRes message/entity that will
	// contain the newly copied email_template_sid value for this client along with attachments
	// Required permissions:
	//
	//	OMNI_BOSS
	CopyEmailTemplateWithAttachments(context.Context, *CopyEmailTemplateWithAttachmentsReq) (*CopyEmailTemplateWithAttachmentsRes, error)
	// Update email template attachment details defined by UpdateEmailTemplateAttachmentReq message for a specified
	// email_template_sid, email_template_attachment_sid, file_name, file_size, content_type, hash.
	// The method will return a UpdateEmailTemplateAttachmentRes message/entity that will
	// contain the true/false after updating template attachment details for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateEmailTemplateAttachment(context.Context, *UpdateEmailTemplateAttachmentReq) (*UpdateEmailTemplateAttachmentRes, error)
	// Gets email template along with attachment details defined by GetEmailTemplateByTemplateSidReq message for a specified
	// email_template_sid.
	// The method will return a EmailTemplateWithAttachments message/entity that will
	// contain the email_template_sid, email_subject, email_body, EmailTemplateAttachmentDetails for this client_sid and email_template_sid
	// Required permissions:
	//
	//	OMNI_BOSS
	GetEmailTemplateByTemplateSid(context.Context, *GetEmailTemplateByTemplateSidReq) (*EmailTemplateWithAttachments, error)
	// List stream of email template along with attachment details defined by GetAllEmailTemplatesReq message.
	// The method will return a GetAllEmailTemplatesRes message/entity that will
	// contain the stream of email_template_sid, email_subject, email_body, EmailTemplateAttachmentDetails for this client_sid
	// Required permissions:
	//
	//	OMNI_BOSS
	GetAllEmailTemplates(context.Context, *GetAllEmailTemplatesReq) (*GetAllEmailTemplatesRes, error)
	// Delete email template details defined by DeleteEmailTemplateReq message for a specified
	// email_template_sid.
	// The method will return a DeleteEmailTemplateRes message/entity that will
	// contain the true/false after deleting template details for this client_sid and email_template_sid
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteEmailTemplate(context.Context, *DeleteEmailTemplateReq) (*DeleteEmailTemplateRes, error)
	// Delete email template attachments defined by DeleteEmailTemplateAttachmentByIdReq message for a specified
	// email_template_attachment_sid.
	// The method will return a DeleteEmailTemplateAttachmentByIdRes message/entity that will
	// contain the true/false after deleting template attachments for this client_sid and email_template_attachment_sid
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteEmailTemplateAttachmentById(context.Context, *DeleteEmailTemplateAttachmentByIdReq) (*DeleteEmailTemplateAttachmentByIdRes, error)
	// Download local inbound file attachment file contents using FTS bucket
	// defined by DownloadInboundEmailAttachmentReq message for a specified
	// email_message_reply_id and email_message_reply_attachment_id.
	// The method will return a DownloadInboundEmailAttachmentRes message/entity that will
	// contain the url where attachment contents are stored
	// Required permissions:
	//
	//	OMNI_BOSS
	DownloadInboundEmailAttachment(context.Context, *DownloadInboundEmailAttachmentReq) (*DownloadInboundEmailAttachmentRes, error)
	// List stream of pure email groups based on search criteria defined by EmailGroupSearchReq message for a specified
	// by search_from and search_to or by status or by name and any of these combinations
	// The method will return a EmailGroupSearchRes message/entity that will
	// contain the stream of EmailGroupSearchDetailsRes results
	// Required permissions:
	//
	//	OMNI_BOSS
	PureEmailGroupSearch(context.Context, *EmailGroupSearchReq) (*EmailGroupSearchRes, error)
	// Retreives a list of email replies for a conversation that come after the given
	// timestamp. Can set a user_id to get conversations for any user.
	// Required permissions:
	//
	//	??????
	ManagerListNewEmailMessageReplies(context.Context, *ListNewEmailMessageRepliesReq) (*ListNewEmailMessageRepliesRes, error)
	// Retreives a list of email replies for a conversation that come after the given
	// timestamp
	// Required permissions:
	//
	//	??????
	ListNewEmailMessageReplies(context.Context, *ListNewEmailMessageRepliesReq) (*ListNewEmailMessageRepliesRes, error)
	// List stream of email tasks defined by GetEmailTasksByGroupSidsReq message for a specified
	// array of email_group_sids
	// The method will return a GetEmailTasksByGroupSidsRes message/entity that will
	// contain the stream of EmailTaskMstrDetails results
	// Required permissions:
	//
	//	OMNI_BOSS
	GetEmailTasksByGroupSids(context.Context, *GetEmailTasksByGroupSidsReq) (*GetEmailTasksByGroupSidsRes, error)
	// Update email group status value defined by EmailGroupStatusReq message for a specified
	// email_group_sid and status_id.
	// The method will return a EmailGroupStatusRes message/entity that will
	// contain the true/false after updating status for this clients email_group_sid and status_id
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateEmailGroupStatus(context.Context, *EmailGroupStatusReq) (*EmailGroupStatusRes, error)
	// Gets email message details defined by GetEmailMessageReq message for a specified
	// email_message_sid.
	// The method will return a GetEmailMessageRes message/entity that will
	// contains email_subject and email_body for the email_message_sid
	// Required permissions:
	//
	//	OMNI_BOSS
	GetEmailMessageDetails(context.Context, *GetEmailMessageReq) (*GetEmailMessageRes, error)
	// Create/Record inbound email template defined by CreateInboundEmailTemplateReq message for a specified
	//
	//	connected_inbox_id, name.
	//
	// The method will return a CreateInboundEmailTemplateRes message/entity that will
	// contain the newly created inbound_email_template_id value for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateInboundEmailTemplate(context.Context, *CreateInboundEmailTemplateReq) (*CreateInboundEmailTemplateRes, error)
	// Update inbound email template details defined by UpdateInboundEmailTemplateReq message for a specified
	//
	//	inbound_email_template_id, connected_inbox_id, name.
	//
	// The method will return a UpdateInboundEmailTemplateRes message/entity that will
	// contain the true/false after updating inbound email template details for inbound_email_template_id
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateInboundEmailTemplate(context.Context, *UpdateInboundEmailTemplateReq) (*UpdateInboundEmailTemplateRes, error)
	// Delete inbound email template details defined by DeleteInboundEmailTemplateByIdReq message for a specified
	//
	//	inbound_email_template_id.
	//
	// The method will return a DeleteInboundEmailTemplateByIdRes message/entity that will
	// contain the true/false after deleting inbound email template details for inbound_email_template_id
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteInboundEmailTemplateById(context.Context, *DeleteInboundEmailTemplateByIdReq) (*DeleteInboundEmailTemplateByIdRes, error)
	// List stream of inbound email template details defined by ListInboundEmailTemplatesReq message
	// The method will return a ListInboundEmailTemplatesRes message/entity that will
	// contain the stream of inbound_email_template_id, connected_inbox_id, name.
	// Required permissions:
	//
	//	OMNI_BOSS
	ListInboundEmailTemplates(context.Context, *ListInboundEmailTemplatesReq) (*ListInboundEmailTemplatesRes, error)
	// Gets inbound email template details defined by GetInboundEmailTemplateByIdReq message for a specified
	// inbound_email_template_id.
	// The method will return a InboundEmailTemplate message/entity that will
	// contain the inbound email template details for inbound_email_template_id
	// Required permissions:
	//
	//	OMNI_BOSS
	GetInboundEmailTemplateById(context.Context, *GetInboundEmailTemplateByIdReq) (*InboundEmailTemplate, error)
	// Update inbound email group status details defined by UpdateInboundEmailGroupStatusReq
	// status. The method will return a UpdateInboundEmailGroupStatusRes message/entity
	// that will contain the true/false after updating inbound email group details
	// for this org_id, region_id and inbound_email_group_id Required permissions:
	//
	//	OMNI_BOSS
	UpdateInboundEmailGroupStatus(context.Context, *UpdateInboundEmailGroupStatusReq) (*UpdateInboundEmailGroupStatusRes, error)
	// Stop inbound email group defined by StopInboundEmailGroupReq message for a specified
	//
	//	inbound_email_group_id.
	//
	// The method will return a StopInboundEmailGroupRes message/entity that will
	// contain the true/false after updating inbound email group details for inbound_email_group_id
	// Required permissions:
	//
	//	OMNI_BOSS
	StopInboundEmailGroup(context.Context, *StopInboundEmailGroupReq) (*StopInboundEmailGroupRes, error)
	// Stop all InboundEmail groups defined by StopAllInboundEmailGroupsReq message for the specified
	// array of inbound_email_group_ids
	// The method will mark the InboundEmail groups as completed.
	// Required permissions: VIEW_EMAIL
	StopAllInboundEmailGroups(context.Context, *StopAllInboundEmailGroupsReq) (*StopInboundEmailGroupRes, error)
	// List stream of pure inbound email groups based on search criteria defined by PureInboundEmailGroupSearchReq message for a specified
	//
	//	by search_from and search_to or by status or by name and any of these combinations
	//
	// The method will return a PureInboundEmailGroupSearchRes message/entity that will
	// contain the stream of InboundEmailGroups
	// Required permissions:
	//
	//	OMNI_BOSS
	PureInboundEmailGroupSearch(context.Context, *PureInboundEmailGroupSearchReq) (*PureInboundEmailGroupSearchRes, error)
	// List stream of inbound email groups based on search criteria defined by
	// InboundEmailGroupSearchReq message for a specified by
	// search_from and search_to or by status or by name and any of these
	// combinations The method will return a InboundEmailGroupSearchRes
	// message/entity that will contain the stream of InboundEmailGroups Required
	// permissions:
	//
	//	OMNI_BOSS
	InboundEmailGroupSearch(context.Context, *InboundEmailGroupSearchReq) (*InboundEmailGroupSearchRes, error)
	// List stream of inbound email groups defined by ListInboundEmailGroupsByGroupIdsReq message for a specified
	// array of inbound email groups
	// The method will return a ListInboundEmailGroupsByGroupIdsRes message/entity that will
	// contain the stream of InboundEmailGroup
	// Required permissions:
	//
	//	OMNI_BOSS
	ListInboundEmailGroupsByGroupIds(context.Context, *ListInboundEmailGroupsByGroupIdsReq) (*ListInboundEmailGroupsByGroupIdsRes, error)
	// List stream of inbound email tasks defined by ListInboundEmailTasksByGroupIdsReq message for a specified
	// array of inbound email groups
	// The method will return a ListInboundEmailTasksByGroupIdsRes message/entity that will
	// contain the stream of InboundEmailTaskDetails along with any file attachments
	// Required permissions:
	//
	//	OMNI_BOSS
	ListInboundEmailTasksByGroupIds(context.Context, *ListInboundEmailTasksByGroupIdsReq) (*ListInboundEmailTasksByGroupIdsRes, error)
	// List stream of active/running inbound email groups defined by ListActiveInboundEmailGroupsReq message
	// The method will return a ListActiveInboundEmailGroupsRes message/entity that will
	// contain the stream of active/running InboundEmailGroups
	// Required permissions:
	//
	//	OMNI_BOSS
	ListActiveInboundEmailGroups(context.Context, *ListActiveInboundEmailGroupsReq) (*ListActiveInboundEmailGroupsRes, error)
	// Schedule Outbound email campaign defined by ScheduleReq message for the specified
	// email_template_sid, initial_pace, selected_email_col, from_address,
	// allow_duplicates, group_name, contact_group_sid, start_time, stop_time
	// The method will return ScheduleRes message/entity that will
	// contain newly scheduled email_group_sid and email_group_id for this client
	// Required permissions:
	//
	//	EXECUTE_SEND_BROADCAST
	Schedule(context.Context, *ScheduleReq) (*ScheduleRes, error)
	// Schedule Outbound email campaign defined by ScheduleOutboundEmailGroupReq message for the specified
	// subject, email message, initial_pace, selected_email_col, from_address,
	// allow_duplicates, group_name, contact_group_sid, start_time, stop_time
	// The method will return ScheduleOutboundEmailGroupRes message/entity that will
	// contain newly scheduled email_group_sid and email_group_id for this client
	// Required permissions:
	//
	//	EXECUTE_SEND_BROADCAST
	ScheduleOutboundEmailGroup(context.Context, *ScheduleOutboundEmailGroupReq) (*ScheduleOutboundEmailGroupRes, error)
	// Schedule Pure Inbound email campaign defined by SchedulePureInboundEmailReq message for the specified
	// inbound_email_template_sid
	// The method will return SchedulePureInboundEmailRes message/entity that will
	// contain newly scheduled inbound_email_group_sid for this client
	// Required permissions:
	//
	//	EXECUTE_SEND_BROADCAST
	SchedulePureInboundEmail(context.Context, *SchedulePureInboundEmailReq) (*SchedulePureInboundEmailRes, error)
	// Create/Record inbound agent email reply defined by CreateEmailMessageAgentReplyReq message for a specified
	// inbound_email_group_id, to_address, subject, email_conversation_id, agent_sid .
	// The method will return a EmailMessageReply message/entity that will
	// contain the newly created email_message_reply data
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateEmailMessageAgentReply(context.Context, *CreateEmailMessageAgentReplyReq) (*EmailMessageReplyWithAttachments, error)
	// Create/Record inbound agent email reply attachment defined by CreateEmailMessageAgentReplyAttachmentReq message for a specified
	// file_name, file_size and file_type.
	// The method will return a CreateEmailMessageAgentReplyAttachmentRes message/entity that will
	// contain the newly created email_message_reply_attachment_id, url_path and gs_path for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateEmailMessageAgentReplyAttachment(context.Context, *CreateEmailMessageAgentReplyAttachmentReq) (*CreateEmailMessageAgentReplyAttachmentRes, error)
	// Sends email message based on email details defined in SendReplyReq specified by
	// in_reply_to and email_reply_id
	// The method will return a EmailMessageReplyWithAttachments message/entity that will
	// contain the email_message_reply data
	// along with along with attachment details
	// Required permissions:
	//
	//	EXECUTE_SEND_BROADCAST
	SendReply(context.Context, *SendReplyReq) (*EmailMessageReplyWithAttachments, error)
	// List stream of email groups defined by GetEmailGroupsByGroupSidsReq message for a specified
	// array of email_group_sids
	// The method will return a GetEmailGroupsByGroupSidsRes message/entity that will
	// contain the stream of EmailGroupSearchDetailsRes results
	// Required permissions:
	//
	//	OMNI_BOSS
	GetEmailGroupsByGroupSids(context.Context, *GetEmailGroupsByGroupSidsReq) (*GetEmailGroupsByGroupSidsRes, error)
	// Get outbound email group details defined by GetEmailGroupByGroupSidReq message for a specified
	// email_group_sid
	// The method will return a EmailGroupDetailsWithAttachments message/entity that will
	// contain the outbound email group details
	// Required permissions:
	//
	//	OMNI_BOSS
	GetEmailGroupByGroupSid(context.Context, *GetEmailGroupByGroupSidReq) (*EmailGroupDetailsWithAttachments, error)
	// Get outbound email group details defined by GetEmailGroupByGroupIdReq message for a specified
	// email_group_id
	// The method will return a EmailGroupDetailsWithAttachments message/entity that will
	// contain the outbound email group details
	// Required permissions:
	//
	//	OMNI_BOSS
	GetEmailGroupByGroupId(context.Context, *GetEmailGroupByGroupIdReq) (*EmailGroupDetailsWithAttachments, error)
	// Schedule Pure OmniLink Inbound email campaign defined by SchedulePureOmniLinkInboundEmailReq message for the specified
	// connectedInbox and skills
	// The method will return SchedulePureOmniLinkInboundEmailRes message/entity that will
	// contain newly scheduled inbound_email_group_sid for this client
	// Required permissions:
	//
	//	EXECUTE_SEND_BROADCAST
	SchedulePureOmniLinkInboundEmail(context.Context, *SchedulePureOmniLinkInboundEmailReq) (*SchedulePureOmniLinkInboundEmailRes, error)
	// Updates the name, skills, stop time for the inbound email group
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateInboundEmailGroup(context.Context, *UpdateInboundEmailGroupReq) (*UpdateInboundEmailGroupRes, error)
	// Update email group sendsperminute defined by EmailGroupSendsPerMinuteReq
	// message for a specified email_group_sid and sends_per_minute.
	// The method will return a EmailGroupSendsPerMinuteRes message/entity that
	// will contain the true/false after updating sends_per_minute value for this
	// clients email_group_sid and sends_per_minute Required permissions:
	//
	//	OMNI_BOSS
	UpdateEmailGroupMstrSendsPerMinute(context.Context, *EmailGroupSendsPerMinuteReq) (*EmailGroupSendsPerMinuteRes, error)
	// Updates the name, start and stop time for the outbound email group
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateOutboundEmailGroup(context.Context, *UpdateOutboundEmailGroupReq) (*UpdateOutboundEmailGroupRes, error)
	// Gets a inbound email group details defined by InboundEmailGroupByIdReq
	// message for the specified inbound_email_group_id, org_id and region_id. The
	// method will return a InboundEmailGroup message/entity. Required
	// permissions:
	//
	//	OMNI_BOSS
	GetInboundEmailGroupById(context.Context, *InboundEmailGroupByIdReq) (*InboundEmailGroup, error)
	// Create/Add email message attachment details defined by CreateEmailMessageAttachmentReq
	// message for the specified client.
	// This method will return a CreateEmailMessageAttachmentRes message/entity. Required
	// permissions:
	//
	//	OMNI_BOSS
	CreateEmailMessageAttachment(context.Context, *CreateEmailMessageAttachmentReq) (*CreateEmailMessageAttachmentRes, error)
	// List all the email message attachments and their details defined by
	// ListEmailMessageAttachmentsReq for the specified client.
	// permissions:
	//
	//	OMNI_BOSS
	ListEmailMessageAttachments(context.Context, *ListEmailMessageAttachmentsReq) (*ListEmailMessageAttachmentsRes, error)
	// Unassigns a conversation from the current user and puts it back into the matching pool
	// Required permissions:
	//
	//	OMNI_LINK
	UnassignCurrentUserFromEmailConversation(context.Context, *UnassignCurrentUserFromEmailConversationReq) (*UnassignUserFromEmailConversationRes, error)
	// Listing all email conversations for the dashboard
	// Required Permissions:
	//
	//	OMNI_BOSS
	DashboardEmailConversationSearch(context.Context, *DashboardEmailConversationSearchReq) (*DashboardEmailConversationSearchRes, error)
	// ReassignEmailConversation.  unassign current user and assign
	// new user.
	// This method will return a ReassignEmailConversationRes
	// Required permissions
	//
	//	OMNI_BOSS
	ReassignEmailConversation(context.Context, *ReassignEmailConversationReq) (*ReassignEmailConversationRes, error)
	// AssignEmailConversation - allowing the manager from the dashboard to assing a email conversation
	// before the matcher assigns it.
	AssignEmailConversation(context.Context, *AssignEmailConversationReq) (*AssignEmailConversationRes, error)
	// Suspends an email conversation
	SuspendEmailConversation(context.Context, *SuspendEmailConversationReq) (*SuspendEmailConversationRes, error)
	// List stream of inbound and outbound campaigns defined by ListCampaignsByConnectedInboxIdReq message
	// The method will return a ListCampaignsByConnectedInboxIdRes message/entity that will
	// contain the stream of all campaigns along with project details.
	// Required permissions:
	//
	//	OMNI_BOSS
	ListCampaignsByConnectedInboxId(context.Context, *ListCampaignsByConnectedInboxIdReq) (*ListCampaignsByConnectedInboxIdRes, error)
	// Close email conversation defined by CloseEmailConversationReq message
	// Required permissions:
	//
	//	OMNI_BOSS
	CloseEmailConversation(context.Context, *CloseEmailConversationReq) (*CloseEmailConversationRes, error)
	mustEmbedUnimplementedEmailApiServer()
}

// UnimplementedEmailApiServer must be embedded to have forward compatible implementations.
type UnimplementedEmailApiServer struct {
}

func (UnimplementedEmailApiServer) CreateEmailTemplate(context.Context, *CreateEmailTemplateReq) (*CreateEmailTemplateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmailTemplate not implemented")
}
func (UnimplementedEmailApiServer) UpdateEmailTemplate(context.Context, *UpdateEmailTemplateReq) (*UpdateEmailTemplateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailTemplate not implemented")
}
func (UnimplementedEmailApiServer) CreateEmailTemplateAttachment(context.Context, *CreateEmailTemplateAttachmentReq) (*CreateEmailTemplateAttachmentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmailTemplateAttachment not implemented")
}
func (UnimplementedEmailApiServer) CopyEmailTemplateWithAttachments(context.Context, *CopyEmailTemplateWithAttachmentsReq) (*CopyEmailTemplateWithAttachmentsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyEmailTemplateWithAttachments not implemented")
}
func (UnimplementedEmailApiServer) UpdateEmailTemplateAttachment(context.Context, *UpdateEmailTemplateAttachmentReq) (*UpdateEmailTemplateAttachmentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailTemplateAttachment not implemented")
}
func (UnimplementedEmailApiServer) GetEmailTemplateByTemplateSid(context.Context, *GetEmailTemplateByTemplateSidReq) (*EmailTemplateWithAttachments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailTemplateByTemplateSid not implemented")
}
func (UnimplementedEmailApiServer) GetAllEmailTemplates(context.Context, *GetAllEmailTemplatesReq) (*GetAllEmailTemplatesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEmailTemplates not implemented")
}
func (UnimplementedEmailApiServer) DeleteEmailTemplate(context.Context, *DeleteEmailTemplateReq) (*DeleteEmailTemplateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmailTemplate not implemented")
}
func (UnimplementedEmailApiServer) DeleteEmailTemplateAttachmentById(context.Context, *DeleteEmailTemplateAttachmentByIdReq) (*DeleteEmailTemplateAttachmentByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmailTemplateAttachmentById not implemented")
}
func (UnimplementedEmailApiServer) DownloadInboundEmailAttachment(context.Context, *DownloadInboundEmailAttachmentReq) (*DownloadInboundEmailAttachmentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadInboundEmailAttachment not implemented")
}
func (UnimplementedEmailApiServer) PureEmailGroupSearch(context.Context, *EmailGroupSearchReq) (*EmailGroupSearchRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PureEmailGroupSearch not implemented")
}
func (UnimplementedEmailApiServer) ManagerListNewEmailMessageReplies(context.Context, *ListNewEmailMessageRepliesReq) (*ListNewEmailMessageRepliesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManagerListNewEmailMessageReplies not implemented")
}
func (UnimplementedEmailApiServer) ListNewEmailMessageReplies(context.Context, *ListNewEmailMessageRepliesReq) (*ListNewEmailMessageRepliesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNewEmailMessageReplies not implemented")
}
func (UnimplementedEmailApiServer) GetEmailTasksByGroupSids(context.Context, *GetEmailTasksByGroupSidsReq) (*GetEmailTasksByGroupSidsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailTasksByGroupSids not implemented")
}
func (UnimplementedEmailApiServer) UpdateEmailGroupStatus(context.Context, *EmailGroupStatusReq) (*EmailGroupStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailGroupStatus not implemented")
}
func (UnimplementedEmailApiServer) GetEmailMessageDetails(context.Context, *GetEmailMessageReq) (*GetEmailMessageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailMessageDetails not implemented")
}
func (UnimplementedEmailApiServer) CreateInboundEmailTemplate(context.Context, *CreateInboundEmailTemplateReq) (*CreateInboundEmailTemplateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInboundEmailTemplate not implemented")
}
func (UnimplementedEmailApiServer) UpdateInboundEmailTemplate(context.Context, *UpdateInboundEmailTemplateReq) (*UpdateInboundEmailTemplateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInboundEmailTemplate not implemented")
}
func (UnimplementedEmailApiServer) DeleteInboundEmailTemplateById(context.Context, *DeleteInboundEmailTemplateByIdReq) (*DeleteInboundEmailTemplateByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInboundEmailTemplateById not implemented")
}
func (UnimplementedEmailApiServer) ListInboundEmailTemplates(context.Context, *ListInboundEmailTemplatesReq) (*ListInboundEmailTemplatesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInboundEmailTemplates not implemented")
}
func (UnimplementedEmailApiServer) GetInboundEmailTemplateById(context.Context, *GetInboundEmailTemplateByIdReq) (*InboundEmailTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInboundEmailTemplateById not implemented")
}
func (UnimplementedEmailApiServer) UpdateInboundEmailGroupStatus(context.Context, *UpdateInboundEmailGroupStatusReq) (*UpdateInboundEmailGroupStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInboundEmailGroupStatus not implemented")
}
func (UnimplementedEmailApiServer) StopInboundEmailGroup(context.Context, *StopInboundEmailGroupReq) (*StopInboundEmailGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopInboundEmailGroup not implemented")
}
func (UnimplementedEmailApiServer) StopAllInboundEmailGroups(context.Context, *StopAllInboundEmailGroupsReq) (*StopInboundEmailGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAllInboundEmailGroups not implemented")
}
func (UnimplementedEmailApiServer) PureInboundEmailGroupSearch(context.Context, *PureInboundEmailGroupSearchReq) (*PureInboundEmailGroupSearchRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PureInboundEmailGroupSearch not implemented")
}
func (UnimplementedEmailApiServer) InboundEmailGroupSearch(context.Context, *InboundEmailGroupSearchReq) (*InboundEmailGroupSearchRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboundEmailGroupSearch not implemented")
}
func (UnimplementedEmailApiServer) ListInboundEmailGroupsByGroupIds(context.Context, *ListInboundEmailGroupsByGroupIdsReq) (*ListInboundEmailGroupsByGroupIdsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInboundEmailGroupsByGroupIds not implemented")
}
func (UnimplementedEmailApiServer) ListInboundEmailTasksByGroupIds(context.Context, *ListInboundEmailTasksByGroupIdsReq) (*ListInboundEmailTasksByGroupIdsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInboundEmailTasksByGroupIds not implemented")
}
func (UnimplementedEmailApiServer) ListActiveInboundEmailGroups(context.Context, *ListActiveInboundEmailGroupsReq) (*ListActiveInboundEmailGroupsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActiveInboundEmailGroups not implemented")
}
func (UnimplementedEmailApiServer) Schedule(context.Context, *ScheduleReq) (*ScheduleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Schedule not implemented")
}
func (UnimplementedEmailApiServer) ScheduleOutboundEmailGroup(context.Context, *ScheduleOutboundEmailGroupReq) (*ScheduleOutboundEmailGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleOutboundEmailGroup not implemented")
}
func (UnimplementedEmailApiServer) SchedulePureInboundEmail(context.Context, *SchedulePureInboundEmailReq) (*SchedulePureInboundEmailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchedulePureInboundEmail not implemented")
}
func (UnimplementedEmailApiServer) CreateEmailMessageAgentReply(context.Context, *CreateEmailMessageAgentReplyReq) (*EmailMessageReplyWithAttachments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmailMessageAgentReply not implemented")
}
func (UnimplementedEmailApiServer) CreateEmailMessageAgentReplyAttachment(context.Context, *CreateEmailMessageAgentReplyAttachmentReq) (*CreateEmailMessageAgentReplyAttachmentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmailMessageAgentReplyAttachment not implemented")
}
func (UnimplementedEmailApiServer) SendReply(context.Context, *SendReplyReq) (*EmailMessageReplyWithAttachments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendReply not implemented")
}
func (UnimplementedEmailApiServer) GetEmailGroupsByGroupSids(context.Context, *GetEmailGroupsByGroupSidsReq) (*GetEmailGroupsByGroupSidsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailGroupsByGroupSids not implemented")
}
func (UnimplementedEmailApiServer) GetEmailGroupByGroupSid(context.Context, *GetEmailGroupByGroupSidReq) (*EmailGroupDetailsWithAttachments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailGroupByGroupSid not implemented")
}
func (UnimplementedEmailApiServer) GetEmailGroupByGroupId(context.Context, *GetEmailGroupByGroupIdReq) (*EmailGroupDetailsWithAttachments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailGroupByGroupId not implemented")
}
func (UnimplementedEmailApiServer) SchedulePureOmniLinkInboundEmail(context.Context, *SchedulePureOmniLinkInboundEmailReq) (*SchedulePureOmniLinkInboundEmailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchedulePureOmniLinkInboundEmail not implemented")
}
func (UnimplementedEmailApiServer) UpdateInboundEmailGroup(context.Context, *UpdateInboundEmailGroupReq) (*UpdateInboundEmailGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInboundEmailGroup not implemented")
}
func (UnimplementedEmailApiServer) UpdateEmailGroupMstrSendsPerMinute(context.Context, *EmailGroupSendsPerMinuteReq) (*EmailGroupSendsPerMinuteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailGroupMstrSendsPerMinute not implemented")
}
func (UnimplementedEmailApiServer) UpdateOutboundEmailGroup(context.Context, *UpdateOutboundEmailGroupReq) (*UpdateOutboundEmailGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOutboundEmailGroup not implemented")
}
func (UnimplementedEmailApiServer) GetInboundEmailGroupById(context.Context, *InboundEmailGroupByIdReq) (*InboundEmailGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInboundEmailGroupById not implemented")
}
func (UnimplementedEmailApiServer) CreateEmailMessageAttachment(context.Context, *CreateEmailMessageAttachmentReq) (*CreateEmailMessageAttachmentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmailMessageAttachment not implemented")
}
func (UnimplementedEmailApiServer) ListEmailMessageAttachments(context.Context, *ListEmailMessageAttachmentsReq) (*ListEmailMessageAttachmentsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmailMessageAttachments not implemented")
}
func (UnimplementedEmailApiServer) UnassignCurrentUserFromEmailConversation(context.Context, *UnassignCurrentUserFromEmailConversationReq) (*UnassignUserFromEmailConversationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignCurrentUserFromEmailConversation not implemented")
}
func (UnimplementedEmailApiServer) DashboardEmailConversationSearch(context.Context, *DashboardEmailConversationSearchReq) (*DashboardEmailConversationSearchRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DashboardEmailConversationSearch not implemented")
}
func (UnimplementedEmailApiServer) ReassignEmailConversation(context.Context, *ReassignEmailConversationReq) (*ReassignEmailConversationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReassignEmailConversation not implemented")
}
func (UnimplementedEmailApiServer) AssignEmailConversation(context.Context, *AssignEmailConversationReq) (*AssignEmailConversationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignEmailConversation not implemented")
}
func (UnimplementedEmailApiServer) SuspendEmailConversation(context.Context, *SuspendEmailConversationReq) (*SuspendEmailConversationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendEmailConversation not implemented")
}
func (UnimplementedEmailApiServer) ListCampaignsByConnectedInboxId(context.Context, *ListCampaignsByConnectedInboxIdReq) (*ListCampaignsByConnectedInboxIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCampaignsByConnectedInboxId not implemented")
}
func (UnimplementedEmailApiServer) CloseEmailConversation(context.Context, *CloseEmailConversationReq) (*CloseEmailConversationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseEmailConversation not implemented")
}
func (UnimplementedEmailApiServer) mustEmbedUnimplementedEmailApiServer() {}

// UnsafeEmailApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailApiServer will
// result in compilation errors.
type UnsafeEmailApiServer interface {
	mustEmbedUnimplementedEmailApiServer()
}

func RegisterEmailApiServer(s grpc.ServiceRegistrar, srv EmailApiServer) {
	s.RegisterService(&EmailApi_ServiceDesc, srv)
}

func _EmailApi_CreateEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmailTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).CreateEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_CreateEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).CreateEmailTemplate(ctx, req.(*CreateEmailTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_UpdateEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).UpdateEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_UpdateEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).UpdateEmailTemplate(ctx, req.(*UpdateEmailTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_CreateEmailTemplateAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmailTemplateAttachmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).CreateEmailTemplateAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_CreateEmailTemplateAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).CreateEmailTemplateAttachment(ctx, req.(*CreateEmailTemplateAttachmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_CopyEmailTemplateWithAttachments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyEmailTemplateWithAttachmentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).CopyEmailTemplateWithAttachments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_CopyEmailTemplateWithAttachments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).CopyEmailTemplateWithAttachments(ctx, req.(*CopyEmailTemplateWithAttachmentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_UpdateEmailTemplateAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailTemplateAttachmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).UpdateEmailTemplateAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_UpdateEmailTemplateAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).UpdateEmailTemplateAttachment(ctx, req.(*UpdateEmailTemplateAttachmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_GetEmailTemplateByTemplateSid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailTemplateByTemplateSidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).GetEmailTemplateByTemplateSid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_GetEmailTemplateByTemplateSid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).GetEmailTemplateByTemplateSid(ctx, req.(*GetEmailTemplateByTemplateSidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_GetAllEmailTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllEmailTemplatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).GetAllEmailTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_GetAllEmailTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).GetAllEmailTemplates(ctx, req.(*GetAllEmailTemplatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_DeleteEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmailTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).DeleteEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_DeleteEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).DeleteEmailTemplate(ctx, req.(*DeleteEmailTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_DeleteEmailTemplateAttachmentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmailTemplateAttachmentByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).DeleteEmailTemplateAttachmentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_DeleteEmailTemplateAttachmentById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).DeleteEmailTemplateAttachmentById(ctx, req.(*DeleteEmailTemplateAttachmentByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_DownloadInboundEmailAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadInboundEmailAttachmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).DownloadInboundEmailAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_DownloadInboundEmailAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).DownloadInboundEmailAttachment(ctx, req.(*DownloadInboundEmailAttachmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_PureEmailGroupSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailGroupSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).PureEmailGroupSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_PureEmailGroupSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).PureEmailGroupSearch(ctx, req.(*EmailGroupSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_ManagerListNewEmailMessageReplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNewEmailMessageRepliesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).ManagerListNewEmailMessageReplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_ManagerListNewEmailMessageReplies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).ManagerListNewEmailMessageReplies(ctx, req.(*ListNewEmailMessageRepliesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_ListNewEmailMessageReplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNewEmailMessageRepliesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).ListNewEmailMessageReplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_ListNewEmailMessageReplies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).ListNewEmailMessageReplies(ctx, req.(*ListNewEmailMessageRepliesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_GetEmailTasksByGroupSids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailTasksByGroupSidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).GetEmailTasksByGroupSids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_GetEmailTasksByGroupSids_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).GetEmailTasksByGroupSids(ctx, req.(*GetEmailTasksByGroupSidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_UpdateEmailGroupStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailGroupStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).UpdateEmailGroupStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_UpdateEmailGroupStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).UpdateEmailGroupStatus(ctx, req.(*EmailGroupStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_GetEmailMessageDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).GetEmailMessageDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_GetEmailMessageDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).GetEmailMessageDetails(ctx, req.(*GetEmailMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_CreateInboundEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInboundEmailTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).CreateInboundEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_CreateInboundEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).CreateInboundEmailTemplate(ctx, req.(*CreateInboundEmailTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_UpdateInboundEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInboundEmailTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).UpdateInboundEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_UpdateInboundEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).UpdateInboundEmailTemplate(ctx, req.(*UpdateInboundEmailTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_DeleteInboundEmailTemplateById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInboundEmailTemplateByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).DeleteInboundEmailTemplateById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_DeleteInboundEmailTemplateById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).DeleteInboundEmailTemplateById(ctx, req.(*DeleteInboundEmailTemplateByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_ListInboundEmailTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInboundEmailTemplatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).ListInboundEmailTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_ListInboundEmailTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).ListInboundEmailTemplates(ctx, req.(*ListInboundEmailTemplatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_GetInboundEmailTemplateById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInboundEmailTemplateByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).GetInboundEmailTemplateById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_GetInboundEmailTemplateById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).GetInboundEmailTemplateById(ctx, req.(*GetInboundEmailTemplateByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_UpdateInboundEmailGroupStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInboundEmailGroupStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).UpdateInboundEmailGroupStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_UpdateInboundEmailGroupStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).UpdateInboundEmailGroupStatus(ctx, req.(*UpdateInboundEmailGroupStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_StopInboundEmailGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopInboundEmailGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).StopInboundEmailGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_StopInboundEmailGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).StopInboundEmailGroup(ctx, req.(*StopInboundEmailGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_StopAllInboundEmailGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAllInboundEmailGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).StopAllInboundEmailGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_StopAllInboundEmailGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).StopAllInboundEmailGroups(ctx, req.(*StopAllInboundEmailGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_PureInboundEmailGroupSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PureInboundEmailGroupSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).PureInboundEmailGroupSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_PureInboundEmailGroupSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).PureInboundEmailGroupSearch(ctx, req.(*PureInboundEmailGroupSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_InboundEmailGroupSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InboundEmailGroupSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).InboundEmailGroupSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_InboundEmailGroupSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).InboundEmailGroupSearch(ctx, req.(*InboundEmailGroupSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_ListInboundEmailGroupsByGroupIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInboundEmailGroupsByGroupIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).ListInboundEmailGroupsByGroupIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_ListInboundEmailGroupsByGroupIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).ListInboundEmailGroupsByGroupIds(ctx, req.(*ListInboundEmailGroupsByGroupIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_ListInboundEmailTasksByGroupIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInboundEmailTasksByGroupIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).ListInboundEmailTasksByGroupIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_ListInboundEmailTasksByGroupIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).ListInboundEmailTasksByGroupIds(ctx, req.(*ListInboundEmailTasksByGroupIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_ListActiveInboundEmailGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActiveInboundEmailGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).ListActiveInboundEmailGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_ListActiveInboundEmailGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).ListActiveInboundEmailGroups(ctx, req.(*ListActiveInboundEmailGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_Schedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).Schedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_Schedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).Schedule(ctx, req.(*ScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_ScheduleOutboundEmailGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleOutboundEmailGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).ScheduleOutboundEmailGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_ScheduleOutboundEmailGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).ScheduleOutboundEmailGroup(ctx, req.(*ScheduleOutboundEmailGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_SchedulePureInboundEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulePureInboundEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).SchedulePureInboundEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_SchedulePureInboundEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).SchedulePureInboundEmail(ctx, req.(*SchedulePureInboundEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_CreateEmailMessageAgentReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmailMessageAgentReplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).CreateEmailMessageAgentReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_CreateEmailMessageAgentReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).CreateEmailMessageAgentReply(ctx, req.(*CreateEmailMessageAgentReplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_CreateEmailMessageAgentReplyAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmailMessageAgentReplyAttachmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).CreateEmailMessageAgentReplyAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_CreateEmailMessageAgentReplyAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).CreateEmailMessageAgentReplyAttachment(ctx, req.(*CreateEmailMessageAgentReplyAttachmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_SendReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendReplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).SendReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_SendReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).SendReply(ctx, req.(*SendReplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_GetEmailGroupsByGroupSids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailGroupsByGroupSidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).GetEmailGroupsByGroupSids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_GetEmailGroupsByGroupSids_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).GetEmailGroupsByGroupSids(ctx, req.(*GetEmailGroupsByGroupSidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_GetEmailGroupByGroupSid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailGroupByGroupSidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).GetEmailGroupByGroupSid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_GetEmailGroupByGroupSid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).GetEmailGroupByGroupSid(ctx, req.(*GetEmailGroupByGroupSidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_GetEmailGroupByGroupId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailGroupByGroupIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).GetEmailGroupByGroupId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_GetEmailGroupByGroupId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).GetEmailGroupByGroupId(ctx, req.(*GetEmailGroupByGroupIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_SchedulePureOmniLinkInboundEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulePureOmniLinkInboundEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).SchedulePureOmniLinkInboundEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_SchedulePureOmniLinkInboundEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).SchedulePureOmniLinkInboundEmail(ctx, req.(*SchedulePureOmniLinkInboundEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_UpdateInboundEmailGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInboundEmailGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).UpdateInboundEmailGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_UpdateInboundEmailGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).UpdateInboundEmailGroup(ctx, req.(*UpdateInboundEmailGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_UpdateEmailGroupMstrSendsPerMinute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailGroupSendsPerMinuteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).UpdateEmailGroupMstrSendsPerMinute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_UpdateEmailGroupMstrSendsPerMinute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).UpdateEmailGroupMstrSendsPerMinute(ctx, req.(*EmailGroupSendsPerMinuteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_UpdateOutboundEmailGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOutboundEmailGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).UpdateOutboundEmailGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_UpdateOutboundEmailGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).UpdateOutboundEmailGroup(ctx, req.(*UpdateOutboundEmailGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_GetInboundEmailGroupById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InboundEmailGroupByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).GetInboundEmailGroupById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_GetInboundEmailGroupById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).GetInboundEmailGroupById(ctx, req.(*InboundEmailGroupByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_CreateEmailMessageAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmailMessageAttachmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).CreateEmailMessageAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_CreateEmailMessageAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).CreateEmailMessageAttachment(ctx, req.(*CreateEmailMessageAttachmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_ListEmailMessageAttachments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmailMessageAttachmentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).ListEmailMessageAttachments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_ListEmailMessageAttachments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).ListEmailMessageAttachments(ctx, req.(*ListEmailMessageAttachmentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_UnassignCurrentUserFromEmailConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignCurrentUserFromEmailConversationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).UnassignCurrentUserFromEmailConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_UnassignCurrentUserFromEmailConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).UnassignCurrentUserFromEmailConversation(ctx, req.(*UnassignCurrentUserFromEmailConversationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_DashboardEmailConversationSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardEmailConversationSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).DashboardEmailConversationSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_DashboardEmailConversationSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).DashboardEmailConversationSearch(ctx, req.(*DashboardEmailConversationSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_ReassignEmailConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReassignEmailConversationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).ReassignEmailConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_ReassignEmailConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).ReassignEmailConversation(ctx, req.(*ReassignEmailConversationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_AssignEmailConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignEmailConversationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).AssignEmailConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_AssignEmailConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).AssignEmailConversation(ctx, req.(*AssignEmailConversationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_SuspendEmailConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendEmailConversationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).SuspendEmailConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_SuspendEmailConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).SuspendEmailConversation(ctx, req.(*SuspendEmailConversationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_ListCampaignsByConnectedInboxId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCampaignsByConnectedInboxIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).ListCampaignsByConnectedInboxId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_ListCampaignsByConnectedInboxId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).ListCampaignsByConnectedInboxId(ctx, req.(*ListCampaignsByConnectedInboxIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailApi_CloseEmailConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseEmailConversationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailApiServer).CloseEmailConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailApi_CloseEmailConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailApiServer).CloseEmailConversation(ctx, req.(*CloseEmailConversationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailApi_ServiceDesc is the grpc.ServiceDesc for EmailApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v0alpha.EmailApi",
	HandlerType: (*EmailApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEmailTemplate",
			Handler:    _EmailApi_CreateEmailTemplate_Handler,
		},
		{
			MethodName: "UpdateEmailTemplate",
			Handler:    _EmailApi_UpdateEmailTemplate_Handler,
		},
		{
			MethodName: "CreateEmailTemplateAttachment",
			Handler:    _EmailApi_CreateEmailTemplateAttachment_Handler,
		},
		{
			MethodName: "CopyEmailTemplateWithAttachments",
			Handler:    _EmailApi_CopyEmailTemplateWithAttachments_Handler,
		},
		{
			MethodName: "UpdateEmailTemplateAttachment",
			Handler:    _EmailApi_UpdateEmailTemplateAttachment_Handler,
		},
		{
			MethodName: "GetEmailTemplateByTemplateSid",
			Handler:    _EmailApi_GetEmailTemplateByTemplateSid_Handler,
		},
		{
			MethodName: "GetAllEmailTemplates",
			Handler:    _EmailApi_GetAllEmailTemplates_Handler,
		},
		{
			MethodName: "DeleteEmailTemplate",
			Handler:    _EmailApi_DeleteEmailTemplate_Handler,
		},
		{
			MethodName: "DeleteEmailTemplateAttachmentById",
			Handler:    _EmailApi_DeleteEmailTemplateAttachmentById_Handler,
		},
		{
			MethodName: "DownloadInboundEmailAttachment",
			Handler:    _EmailApi_DownloadInboundEmailAttachment_Handler,
		},
		{
			MethodName: "PureEmailGroupSearch",
			Handler:    _EmailApi_PureEmailGroupSearch_Handler,
		},
		{
			MethodName: "ManagerListNewEmailMessageReplies",
			Handler:    _EmailApi_ManagerListNewEmailMessageReplies_Handler,
		},
		{
			MethodName: "ListNewEmailMessageReplies",
			Handler:    _EmailApi_ListNewEmailMessageReplies_Handler,
		},
		{
			MethodName: "GetEmailTasksByGroupSids",
			Handler:    _EmailApi_GetEmailTasksByGroupSids_Handler,
		},
		{
			MethodName: "UpdateEmailGroupStatus",
			Handler:    _EmailApi_UpdateEmailGroupStatus_Handler,
		},
		{
			MethodName: "GetEmailMessageDetails",
			Handler:    _EmailApi_GetEmailMessageDetails_Handler,
		},
		{
			MethodName: "CreateInboundEmailTemplate",
			Handler:    _EmailApi_CreateInboundEmailTemplate_Handler,
		},
		{
			MethodName: "UpdateInboundEmailTemplate",
			Handler:    _EmailApi_UpdateInboundEmailTemplate_Handler,
		},
		{
			MethodName: "DeleteInboundEmailTemplateById",
			Handler:    _EmailApi_DeleteInboundEmailTemplateById_Handler,
		},
		{
			MethodName: "ListInboundEmailTemplates",
			Handler:    _EmailApi_ListInboundEmailTemplates_Handler,
		},
		{
			MethodName: "GetInboundEmailTemplateById",
			Handler:    _EmailApi_GetInboundEmailTemplateById_Handler,
		},
		{
			MethodName: "UpdateInboundEmailGroupStatus",
			Handler:    _EmailApi_UpdateInboundEmailGroupStatus_Handler,
		},
		{
			MethodName: "StopInboundEmailGroup",
			Handler:    _EmailApi_StopInboundEmailGroup_Handler,
		},
		{
			MethodName: "StopAllInboundEmailGroups",
			Handler:    _EmailApi_StopAllInboundEmailGroups_Handler,
		},
		{
			MethodName: "PureInboundEmailGroupSearch",
			Handler:    _EmailApi_PureInboundEmailGroupSearch_Handler,
		},
		{
			MethodName: "InboundEmailGroupSearch",
			Handler:    _EmailApi_InboundEmailGroupSearch_Handler,
		},
		{
			MethodName: "ListInboundEmailGroupsByGroupIds",
			Handler:    _EmailApi_ListInboundEmailGroupsByGroupIds_Handler,
		},
		{
			MethodName: "ListInboundEmailTasksByGroupIds",
			Handler:    _EmailApi_ListInboundEmailTasksByGroupIds_Handler,
		},
		{
			MethodName: "ListActiveInboundEmailGroups",
			Handler:    _EmailApi_ListActiveInboundEmailGroups_Handler,
		},
		{
			MethodName: "Schedule",
			Handler:    _EmailApi_Schedule_Handler,
		},
		{
			MethodName: "ScheduleOutboundEmailGroup",
			Handler:    _EmailApi_ScheduleOutboundEmailGroup_Handler,
		},
		{
			MethodName: "SchedulePureInboundEmail",
			Handler:    _EmailApi_SchedulePureInboundEmail_Handler,
		},
		{
			MethodName: "CreateEmailMessageAgentReply",
			Handler:    _EmailApi_CreateEmailMessageAgentReply_Handler,
		},
		{
			MethodName: "CreateEmailMessageAgentReplyAttachment",
			Handler:    _EmailApi_CreateEmailMessageAgentReplyAttachment_Handler,
		},
		{
			MethodName: "SendReply",
			Handler:    _EmailApi_SendReply_Handler,
		},
		{
			MethodName: "GetEmailGroupsByGroupSids",
			Handler:    _EmailApi_GetEmailGroupsByGroupSids_Handler,
		},
		{
			MethodName: "GetEmailGroupByGroupSid",
			Handler:    _EmailApi_GetEmailGroupByGroupSid_Handler,
		},
		{
			MethodName: "GetEmailGroupByGroupId",
			Handler:    _EmailApi_GetEmailGroupByGroupId_Handler,
		},
		{
			MethodName: "SchedulePureOmniLinkInboundEmail",
			Handler:    _EmailApi_SchedulePureOmniLinkInboundEmail_Handler,
		},
		{
			MethodName: "UpdateInboundEmailGroup",
			Handler:    _EmailApi_UpdateInboundEmailGroup_Handler,
		},
		{
			MethodName: "UpdateEmailGroupMstrSendsPerMinute",
			Handler:    _EmailApi_UpdateEmailGroupMstrSendsPerMinute_Handler,
		},
		{
			MethodName: "UpdateOutboundEmailGroup",
			Handler:    _EmailApi_UpdateOutboundEmailGroup_Handler,
		},
		{
			MethodName: "GetInboundEmailGroupById",
			Handler:    _EmailApi_GetInboundEmailGroupById_Handler,
		},
		{
			MethodName: "CreateEmailMessageAttachment",
			Handler:    _EmailApi_CreateEmailMessageAttachment_Handler,
		},
		{
			MethodName: "ListEmailMessageAttachments",
			Handler:    _EmailApi_ListEmailMessageAttachments_Handler,
		},
		{
			MethodName: "UnassignCurrentUserFromEmailConversation",
			Handler:    _EmailApi_UnassignCurrentUserFromEmailConversation_Handler,
		},
		{
			MethodName: "DashboardEmailConversationSearch",
			Handler:    _EmailApi_DashboardEmailConversationSearch_Handler,
		},
		{
			MethodName: "ReassignEmailConversation",
			Handler:    _EmailApi_ReassignEmailConversation_Handler,
		},
		{
			MethodName: "AssignEmailConversation",
			Handler:    _EmailApi_AssignEmailConversation_Handler,
		},
		{
			MethodName: "SuspendEmailConversation",
			Handler:    _EmailApi_SuspendEmailConversation_Handler,
		},
		{
			MethodName: "ListCampaignsByConnectedInboxId",
			Handler:    _EmailApi_ListCampaignsByConnectedInboxId_Handler,
		},
		{
			MethodName: "CloseEmailConversation",
			Handler:    _EmailApi_CloseEmailConversation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v0alpha/emailapi.proto",
}
