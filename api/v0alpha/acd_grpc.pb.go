// Copyright (c) 2019, TCN Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v0alpha/acd.proto

package v0alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Acd_AgentGetStatusStream_FullMethodName                  = "/api.v0alpha.Acd/AgentGetStatusStream"
	Acd_AgentGetStatus_FullMethodName                        = "/api.v0alpha.Acd/AgentGetStatus"
	Acd_AgentGetConnectedParty_FullMethodName                = "/api.v0alpha.Acd/AgentGetConnectedParty"
	Acd_AgentIntercom_FullMethodName                         = "/api.v0alpha.Acd/AgentIntercom"
	Acd_AgentIntercomAccept_FullMethodName                   = "/api.v0alpha.Acd/AgentIntercomAccept"
	Acd_AgentIntercomReject_FullMethodName                   = "/api.v0alpha.Acd/AgentIntercomReject"
	Acd_AgentIntercomCancel_FullMethodName                   = "/api.v0alpha.Acd/AgentIntercomCancel"
	Acd_DialManualPrepare_FullMethodName                     = "/api.v0alpha.Acd/DialManualPrepare"
	Acd_DialManualCancel_FullMethodName                      = "/api.v0alpha.Acd/DialManualCancel"
	Acd_DialPreviewPrepare_FullMethodName                    = "/api.v0alpha.Acd/DialPreviewPrepare"
	Acd_AgentPause_FullMethodName                            = "/api.v0alpha.Acd/AgentPause"
	Acd_AgentSetReady_FullMethodName                         = "/api.v0alpha.Acd/AgentSetReady"
	Acd_AgentGUIBusy_FullMethodName                          = "/api.v0alpha.Acd/AgentGUIBusy"
	Acd_ReportAgentSessionEvent_FullMethodName               = "/api.v0alpha.Acd/ReportAgentSessionEvent"
	Acd_CallerRequeue_FullMethodName                         = "/api.v0alpha.Acd/CallerRequeue"
	Acd_AgentDisconnect_FullMethodName                       = "/api.v0alpha.Acd/AgentDisconnect"
	Acd_TransferWarmToOutboundCancel_FullMethodName          = "/api.v0alpha.Acd/TransferWarmToOutboundCancel"
	Acd_TransferWarmToAgentCancel_FullMethodName             = "/api.v0alpha.Acd/TransferWarmToAgentCancel"
	Acd_TransferWarmToOutboundApprove_FullMethodName         = "/api.v0alpha.Acd/TransferWarmToOutboundApprove"
	Acd_TransferWarmToAgentApprove_FullMethodName            = "/api.v0alpha.Acd/TransferWarmToAgentApprove"
	Acd_CallerSendToVoicemail_FullMethodName                 = "/api.v0alpha.Acd/CallerSendToVoicemail"
	Acd_AgentInviteTransferCallerToConference_FullMethodName = "/api.v0alpha.Acd/AgentInviteTransferCallerToConference"
	Acd_AgentMonitorCalls_FullMethodName                     = "/api.v0alpha.Acd/AgentMonitorCalls"
	Acd_TransferColdToOutbound_FullMethodName                = "/api.v0alpha.Acd/TransferColdToOutbound"
	Acd_TransferColdToAgent_FullMethodName                   = "/api.v0alpha.Acd/TransferColdToAgent"
	Acd_TransferWarmToOutboundStart_FullMethodName           = "/api.v0alpha.Acd/TransferWarmToOutboundStart"
	Acd_CreateWarmOutboundTransferMember_FullMethodName      = "/api.v0alpha.Acd/CreateWarmOutboundTransferMember"
	Acd_RemoveTransferMember_FullMethodName                  = "/api.v0alpha.Acd/RemoveTransferMember"
	Acd_TransferWarmToAgentStart_FullMethodName              = "/api.v0alpha.Acd/TransferWarmToAgentStart"
	Acd_AgentGetCallFromHold_FullMethodName                  = "/api.v0alpha.Acd/AgentGetCallFromHold"
	Acd_AgentGetSpecificCallFromHold_FullMethodName          = "/api.v0alpha.Acd/AgentGetSpecificCallFromHold"
	Acd_ACDGetAllAgentsStatuses_FullMethodName               = "/api.v0alpha.Acd/ACDGetAllAgentsStatuses"
	Acd_AgentPutCallOnHold_FullMethodName                    = "/api.v0alpha.Acd/AgentPutCallOnHold"
	Acd_AgentReceiveMessage_FullMethodName                   = "/api.v0alpha.Acd/AgentReceiveMessage"
	Acd_AgentPBXApproveCall_FullMethodName                   = "/api.v0alpha.Acd/AgentPBXApproveCall"
	Acd_AgentPBXRejectCall_FullMethodName                    = "/api.v0alpha.Acd/AgentPBXRejectCall"
	Acd_GetCallerLostPeer_FullMethodName                     = "/api.v0alpha.Acd/GetCallerLostPeer"
	Acd_CallerGetRawEvent_FullMethodName                     = "/api.v0alpha.Acd/CallerGetRawEvent"
	Acd_PeerAgentWithCaller_FullMethodName                   = "/api.v0alpha.Acd/PeerAgentWithCaller"
	Acd_HoldTransferMember_FullMethodName                    = "/api.v0alpha.Acd/HoldTransferMember"
	Acd_UnholdTransferMember_FullMethodName                  = "/api.v0alpha.Acd/UnholdTransferMember"
	Acd_GetAgentCallCounts_FullMethodName                    = "/api.v0alpha.Acd/GetAgentCallCounts"
	Acd_WarmCallerTransferStart_FullMethodName               = "/api.v0alpha.Acd/WarmCallerTransferStart"
	Acd_WarmCallerTransferCancel_FullMethodName              = "/api.v0alpha.Acd/WarmCallerTransferCancel"
	Acd_WarmCallerTransferApprove_FullMethodName             = "/api.v0alpha.Acd/WarmCallerTransferApprove"
	Acd_PlaySoundboardEntity_FullMethodName                  = "/api.v0alpha.Acd/PlaySoundboardEntity"
	Acd_StopSoundboardEntity_FullMethodName                  = "/api.v0alpha.Acd/StopSoundboardEntity"
	Acd_UpdateAgentSkills_FullMethodName                     = "/api.v0alpha.Acd/UpdateAgentSkills"
	Acd_PlayDTMF_FullMethodName                              = "/api.v0alpha.Acd/PlayDTMF"
	Acd_AgentMute_FullMethodName                             = "/api.v0alpha.Acd/AgentMute"
	Acd_AgentUnmute_FullMethodName                           = "/api.v0alpha.Acd/AgentUnmute"
)

// AcdClient is the client API for Acd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AcdClient interface {
	AgentGetStatusStream(ctx context.Context, in *AgentGetStatusRequest, opts ...grpc.CallOption) (Acd_AgentGetStatusStreamClient, error)
	AgentGetStatus(ctx context.Context, in *AgentGetStatusRequest, opts ...grpc.CallOption) (*AgentGetStatusReply, error)
	AgentGetConnectedParty(ctx context.Context, in *AgentGetConnectedPartyRequest, opts ...grpc.CallOption) (*AgentGetConnectedPartyReply, error)
	AgentIntercom(ctx context.Context, in *AgentIntercomRequest, opts ...grpc.CallOption) (*AgentIntercomReply, error)
	AgentIntercomAccept(ctx context.Context, in *AgentIntercomAcceptRequest, opts ...grpc.CallOption) (*AgentIntercomAcceptReply, error)
	AgentIntercomReject(ctx context.Context, in *AgentIntercomRejectRequest, opts ...grpc.CallOption) (*AgentIntercomRejectReply, error)
	AgentIntercomCancel(ctx context.Context, in *AgentIntercomCancelRequest, opts ...grpc.CallOption) (*AgentIntercomCancelReply, error)
	DialManualPrepare(ctx context.Context, in *DialManualPrepareRequest, opts ...grpc.CallOption) (*DialManualPrepareReply, error)
	DialManualCancel(ctx context.Context, in *DialManualCancelRequest, opts ...grpc.CallOption) (*DialManualCancelReply, error)
	DialPreviewPrepare(ctx context.Context, in *DialPreviewPrepareRequest, opts ...grpc.CallOption) (*DialPreviewPrepareReply, error)
	AgentPause(ctx context.Context, in *AgentPauseRequest, opts ...grpc.CallOption) (*AgentPauseReply, error)
	AgentSetReady(ctx context.Context, in *AgentSetReadyRequest, opts ...grpc.CallOption) (*AgentSetReadyReply, error)
	AgentGUIBusy(ctx context.Context, in *AgentGUIBusyRequest, opts ...grpc.CallOption) (*AgentGUIBusyReply, error)
	ReportAgentSessionEvent(ctx context.Context, in *AgentSessionEventReq, opts ...grpc.CallOption) (*AgentSessionEventRes, error)
	CallerRequeue(ctx context.Context, in *CallerRequeueRequest, opts ...grpc.CallOption) (*CallerRequeueReply, error)
	AgentDisconnect(ctx context.Context, in *AgentDisconnectRequest, opts ...grpc.CallOption) (*AgentDisconnectReply, error)
	TransferWarmToOutboundCancel(ctx context.Context, in *TransferWarmToOutboundCancelRequest, opts ...grpc.CallOption) (*TransferWarmToOutboundCancelReply, error)
	TransferWarmToAgentCancel(ctx context.Context, in *TransferWarmToAgentCancelRequest, opts ...grpc.CallOption) (*TransferWarmToAgentCancelReply, error)
	TransferWarmToOutboundApprove(ctx context.Context, in *TransferWarmToOutboundApproveRequest, opts ...grpc.CallOption) (*TransferWarmToOutboundApproveReply, error)
	TransferWarmToAgentApprove(ctx context.Context, in *TransferWarmToAgentApproveRequest, opts ...grpc.CallOption) (*TransferWarmToAgentApproveReply, error)
	CallerSendToVoicemail(ctx context.Context, in *CallerSendToVoicemailRequest, opts ...grpc.CallOption) (*CallerSendToVoicemailReply, error)
	AgentInviteTransferCallerToConference(ctx context.Context, in *AgentInviteTransferCallerToConferenceRequest, opts ...grpc.CallOption) (*AgentInviteTransferCallerToConferenceReply, error)
	AgentMonitorCalls(ctx context.Context, in *AgentMonitorCallsRequest, opts ...grpc.CallOption) (*AgentMonitorCallsReply, error)
	TransferColdToOutbound(ctx context.Context, in *TransferColdToOutboundRequest, opts ...grpc.CallOption) (*TransferColdToOutboundReply, error)
	TransferColdToAgent(ctx context.Context, in *TransferColdToAgentRequest, opts ...grpc.CallOption) (*TransferColdToAgentReply, error)
	TransferWarmToOutboundStart(ctx context.Context, in *TransferWarmToOutboundStartRequest, opts ...grpc.CallOption) (*TransferWarmToOutboundStartReply, error)
	// creates a new outbound transfer member using the given src/dst numbers
	CreateWarmOutboundTransferMember(ctx context.Context, in *CreateWarmOutboundTransferMemberRequest, opts ...grpc.CallOption) (*CreateWarmOutboundTransferMemberReply, error)
	// hangups a transfer member using the given member identifier
	RemoveTransferMember(ctx context.Context, in *RemoveTransferMemberRequest, opts ...grpc.CallOption) (*RemoveTransferMemberReply, error)
	TransferWarmToAgentStart(ctx context.Context, in *TransferWarmToAgentStartRequest, opts ...grpc.CallOption) (*TransferWarmToAgentStartReply, error)
	AgentGetCallFromHold(ctx context.Context, in *AgentGetCallFromHoldRequest, opts ...grpc.CallOption) (*AgentGetCallFromHoldReply, error)
	AgentGetSpecificCallFromHold(ctx context.Context, in *AgentGetSpecificCallFromHoldRequest, opts ...grpc.CallOption) (*AgentGetSpecificCallFromHoldReply, error)
	ACDGetAllAgentsStatuses(ctx context.Context, in *ACDGetAllAgentsStatusesRequest, opts ...grpc.CallOption) (*ACDGetAllAgentsStatusesReply, error)
	AgentPutCallOnHold(ctx context.Context, in *AgentPutCallOnHoldRequest, opts ...grpc.CallOption) (*AgentPutCallOnHoldReply, error)
	AgentReceiveMessage(ctx context.Context, in *AgentReceiveMessageRequest, opts ...grpc.CallOption) (*AgentReceiveMessageReply, error)
	AgentPBXApproveCall(ctx context.Context, in *AgentPBXApproveCallRequest, opts ...grpc.CallOption) (*AgentPBXApproveCallReply, error)
	AgentPBXRejectCall(ctx context.Context, in *AgentPBXRejectCallRequest, opts ...grpc.CallOption) (*AgentPBXRejectCallReply, error)
	GetCallerLostPeer(ctx context.Context, in *GetCallerLostPeerRequest, opts ...grpc.CallOption) (*GetCallerLostPeerReply, error)
	CallerGetRawEvent(ctx context.Context, in *CallerGetRawEventRequest, opts ...grpc.CallOption) (*CallerGetRawEventReply, error)
	PeerAgentWithCaller(ctx context.Context, in *PeerAgentWithCallerRequest, opts ...grpc.CallOption) (*PeerAgentWithCallerReply, error)
	HoldTransferMember(ctx context.Context, in *HoldTransferMemberReq, opts ...grpc.CallOption) (*HoldTransferMemberRes, error)
	UnholdTransferMember(ctx context.Context, in *UnholdTransferMemberReq, opts ...grpc.CallOption) (*UnholdTransferMemberRes, error)
	GetAgentCallCounts(ctx context.Context, in *GetAgentCallCountsReq, opts ...grpc.CallOption) (*GetAgentCallCountsRes, error)
	// endpoint used to start a warm caller transfer
	WarmCallerTransferStart(ctx context.Context, in *WarmCallerTransferStartReq, opts ...grpc.CallOption) (*WarmCallerTransferStartRes, error)
	// endpoint used to cancel a warm caller transfer
	WarmCallerTransferCancel(ctx context.Context, in *WarmCallerTransferCancelReq, opts ...grpc.CallOption) (*WarmCallerTransferCancelRes, error)
	// endpoint used to approve a warm caller transfer
	WarmCallerTransferApprove(ctx context.Context, in *WarmCallerTransferApproveReq, opts ...grpc.CallOption) (*WarmCallerTransferApproveRes, error)
	// endpoint used to play a soundboard file for a customer
	PlaySoundboardEntity(ctx context.Context, in *PlaySoundboardEntityReq, opts ...grpc.CallOption) (*PlaySoundboardEntityRes, error)
	// endpoint used to stop a soundboard file for a customer
	StopSoundboardEntity(ctx context.Context, in *StopSoundboardEntityReq, opts ...grpc.CallOption) (*StopSoundboardEntityRes, error)
	// endpoint used to update an agent's skills
	UpdateAgentSkills(ctx context.Context, in *UpdateAgentSkillsRequest, opts ...grpc.CallOption) (*UpdateAgentSkillsReply, error)
	// endpoint used to play a dtmf tone to all members of a the agent's conference
	PlayDTMF(ctx context.Context, in *PlayDTMFRequest, opts ...grpc.CallOption) (*PlayDTMFReply, error)
	// endpoint used to mute and agent's mic
	AgentMute(ctx context.Context, in *AgentMuteRequest, opts ...grpc.CallOption) (*AgentMuteReply, error)
	// endpoint used to unmute and agent's mic
	AgentUnmute(ctx context.Context, in *AgentUnmuteRequest, opts ...grpc.CallOption) (*AgentUnmuteReply, error)
}

type acdClient struct {
	cc grpc.ClientConnInterface
}

func NewAcdClient(cc grpc.ClientConnInterface) AcdClient {
	return &acdClient{cc}
}

func (c *acdClient) AgentGetStatusStream(ctx context.Context, in *AgentGetStatusRequest, opts ...grpc.CallOption) (Acd_AgentGetStatusStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Acd_ServiceDesc.Streams[0], Acd_AgentGetStatusStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &acdAgentGetStatusStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Acd_AgentGetStatusStreamClient interface {
	Recv() (*AgentGetStatusReply, error)
	grpc.ClientStream
}

type acdAgentGetStatusStreamClient struct {
	grpc.ClientStream
}

func (x *acdAgentGetStatusStreamClient) Recv() (*AgentGetStatusReply, error) {
	m := new(AgentGetStatusReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *acdClient) AgentGetStatus(ctx context.Context, in *AgentGetStatusRequest, opts ...grpc.CallOption) (*AgentGetStatusReply, error) {
	out := new(AgentGetStatusReply)
	err := c.cc.Invoke(ctx, Acd_AgentGetStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) AgentGetConnectedParty(ctx context.Context, in *AgentGetConnectedPartyRequest, opts ...grpc.CallOption) (*AgentGetConnectedPartyReply, error) {
	out := new(AgentGetConnectedPartyReply)
	err := c.cc.Invoke(ctx, Acd_AgentGetConnectedParty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) AgentIntercom(ctx context.Context, in *AgentIntercomRequest, opts ...grpc.CallOption) (*AgentIntercomReply, error) {
	out := new(AgentIntercomReply)
	err := c.cc.Invoke(ctx, Acd_AgentIntercom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) AgentIntercomAccept(ctx context.Context, in *AgentIntercomAcceptRequest, opts ...grpc.CallOption) (*AgentIntercomAcceptReply, error) {
	out := new(AgentIntercomAcceptReply)
	err := c.cc.Invoke(ctx, Acd_AgentIntercomAccept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) AgentIntercomReject(ctx context.Context, in *AgentIntercomRejectRequest, opts ...grpc.CallOption) (*AgentIntercomRejectReply, error) {
	out := new(AgentIntercomRejectReply)
	err := c.cc.Invoke(ctx, Acd_AgentIntercomReject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) AgentIntercomCancel(ctx context.Context, in *AgentIntercomCancelRequest, opts ...grpc.CallOption) (*AgentIntercomCancelReply, error) {
	out := new(AgentIntercomCancelReply)
	err := c.cc.Invoke(ctx, Acd_AgentIntercomCancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) DialManualPrepare(ctx context.Context, in *DialManualPrepareRequest, opts ...grpc.CallOption) (*DialManualPrepareReply, error) {
	out := new(DialManualPrepareReply)
	err := c.cc.Invoke(ctx, Acd_DialManualPrepare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) DialManualCancel(ctx context.Context, in *DialManualCancelRequest, opts ...grpc.CallOption) (*DialManualCancelReply, error) {
	out := new(DialManualCancelReply)
	err := c.cc.Invoke(ctx, Acd_DialManualCancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) DialPreviewPrepare(ctx context.Context, in *DialPreviewPrepareRequest, opts ...grpc.CallOption) (*DialPreviewPrepareReply, error) {
	out := new(DialPreviewPrepareReply)
	err := c.cc.Invoke(ctx, Acd_DialPreviewPrepare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) AgentPause(ctx context.Context, in *AgentPauseRequest, opts ...grpc.CallOption) (*AgentPauseReply, error) {
	out := new(AgentPauseReply)
	err := c.cc.Invoke(ctx, Acd_AgentPause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) AgentSetReady(ctx context.Context, in *AgentSetReadyRequest, opts ...grpc.CallOption) (*AgentSetReadyReply, error) {
	out := new(AgentSetReadyReply)
	err := c.cc.Invoke(ctx, Acd_AgentSetReady_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) AgentGUIBusy(ctx context.Context, in *AgentGUIBusyRequest, opts ...grpc.CallOption) (*AgentGUIBusyReply, error) {
	out := new(AgentGUIBusyReply)
	err := c.cc.Invoke(ctx, Acd_AgentGUIBusy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) ReportAgentSessionEvent(ctx context.Context, in *AgentSessionEventReq, opts ...grpc.CallOption) (*AgentSessionEventRes, error) {
	out := new(AgentSessionEventRes)
	err := c.cc.Invoke(ctx, Acd_ReportAgentSessionEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) CallerRequeue(ctx context.Context, in *CallerRequeueRequest, opts ...grpc.CallOption) (*CallerRequeueReply, error) {
	out := new(CallerRequeueReply)
	err := c.cc.Invoke(ctx, Acd_CallerRequeue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) AgentDisconnect(ctx context.Context, in *AgentDisconnectRequest, opts ...grpc.CallOption) (*AgentDisconnectReply, error) {
	out := new(AgentDisconnectReply)
	err := c.cc.Invoke(ctx, Acd_AgentDisconnect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) TransferWarmToOutboundCancel(ctx context.Context, in *TransferWarmToOutboundCancelRequest, opts ...grpc.CallOption) (*TransferWarmToOutboundCancelReply, error) {
	out := new(TransferWarmToOutboundCancelReply)
	err := c.cc.Invoke(ctx, Acd_TransferWarmToOutboundCancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) TransferWarmToAgentCancel(ctx context.Context, in *TransferWarmToAgentCancelRequest, opts ...grpc.CallOption) (*TransferWarmToAgentCancelReply, error) {
	out := new(TransferWarmToAgentCancelReply)
	err := c.cc.Invoke(ctx, Acd_TransferWarmToAgentCancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) TransferWarmToOutboundApprove(ctx context.Context, in *TransferWarmToOutboundApproveRequest, opts ...grpc.CallOption) (*TransferWarmToOutboundApproveReply, error) {
	out := new(TransferWarmToOutboundApproveReply)
	err := c.cc.Invoke(ctx, Acd_TransferWarmToOutboundApprove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) TransferWarmToAgentApprove(ctx context.Context, in *TransferWarmToAgentApproveRequest, opts ...grpc.CallOption) (*TransferWarmToAgentApproveReply, error) {
	out := new(TransferWarmToAgentApproveReply)
	err := c.cc.Invoke(ctx, Acd_TransferWarmToAgentApprove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) CallerSendToVoicemail(ctx context.Context, in *CallerSendToVoicemailRequest, opts ...grpc.CallOption) (*CallerSendToVoicemailReply, error) {
	out := new(CallerSendToVoicemailReply)
	err := c.cc.Invoke(ctx, Acd_CallerSendToVoicemail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) AgentInviteTransferCallerToConference(ctx context.Context, in *AgentInviteTransferCallerToConferenceRequest, opts ...grpc.CallOption) (*AgentInviteTransferCallerToConferenceReply, error) {
	out := new(AgentInviteTransferCallerToConferenceReply)
	err := c.cc.Invoke(ctx, Acd_AgentInviteTransferCallerToConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) AgentMonitorCalls(ctx context.Context, in *AgentMonitorCallsRequest, opts ...grpc.CallOption) (*AgentMonitorCallsReply, error) {
	out := new(AgentMonitorCallsReply)
	err := c.cc.Invoke(ctx, Acd_AgentMonitorCalls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) TransferColdToOutbound(ctx context.Context, in *TransferColdToOutboundRequest, opts ...grpc.CallOption) (*TransferColdToOutboundReply, error) {
	out := new(TransferColdToOutboundReply)
	err := c.cc.Invoke(ctx, Acd_TransferColdToOutbound_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) TransferColdToAgent(ctx context.Context, in *TransferColdToAgentRequest, opts ...grpc.CallOption) (*TransferColdToAgentReply, error) {
	out := new(TransferColdToAgentReply)
	err := c.cc.Invoke(ctx, Acd_TransferColdToAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) TransferWarmToOutboundStart(ctx context.Context, in *TransferWarmToOutboundStartRequest, opts ...grpc.CallOption) (*TransferWarmToOutboundStartReply, error) {
	out := new(TransferWarmToOutboundStartReply)
	err := c.cc.Invoke(ctx, Acd_TransferWarmToOutboundStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) CreateWarmOutboundTransferMember(ctx context.Context, in *CreateWarmOutboundTransferMemberRequest, opts ...grpc.CallOption) (*CreateWarmOutboundTransferMemberReply, error) {
	out := new(CreateWarmOutboundTransferMemberReply)
	err := c.cc.Invoke(ctx, Acd_CreateWarmOutboundTransferMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) RemoveTransferMember(ctx context.Context, in *RemoveTransferMemberRequest, opts ...grpc.CallOption) (*RemoveTransferMemberReply, error) {
	out := new(RemoveTransferMemberReply)
	err := c.cc.Invoke(ctx, Acd_RemoveTransferMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) TransferWarmToAgentStart(ctx context.Context, in *TransferWarmToAgentStartRequest, opts ...grpc.CallOption) (*TransferWarmToAgentStartReply, error) {
	out := new(TransferWarmToAgentStartReply)
	err := c.cc.Invoke(ctx, Acd_TransferWarmToAgentStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) AgentGetCallFromHold(ctx context.Context, in *AgentGetCallFromHoldRequest, opts ...grpc.CallOption) (*AgentGetCallFromHoldReply, error) {
	out := new(AgentGetCallFromHoldReply)
	err := c.cc.Invoke(ctx, Acd_AgentGetCallFromHold_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) AgentGetSpecificCallFromHold(ctx context.Context, in *AgentGetSpecificCallFromHoldRequest, opts ...grpc.CallOption) (*AgentGetSpecificCallFromHoldReply, error) {
	out := new(AgentGetSpecificCallFromHoldReply)
	err := c.cc.Invoke(ctx, Acd_AgentGetSpecificCallFromHold_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) ACDGetAllAgentsStatuses(ctx context.Context, in *ACDGetAllAgentsStatusesRequest, opts ...grpc.CallOption) (*ACDGetAllAgentsStatusesReply, error) {
	out := new(ACDGetAllAgentsStatusesReply)
	err := c.cc.Invoke(ctx, Acd_ACDGetAllAgentsStatuses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) AgentPutCallOnHold(ctx context.Context, in *AgentPutCallOnHoldRequest, opts ...grpc.CallOption) (*AgentPutCallOnHoldReply, error) {
	out := new(AgentPutCallOnHoldReply)
	err := c.cc.Invoke(ctx, Acd_AgentPutCallOnHold_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) AgentReceiveMessage(ctx context.Context, in *AgentReceiveMessageRequest, opts ...grpc.CallOption) (*AgentReceiveMessageReply, error) {
	out := new(AgentReceiveMessageReply)
	err := c.cc.Invoke(ctx, Acd_AgentReceiveMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) AgentPBXApproveCall(ctx context.Context, in *AgentPBXApproveCallRequest, opts ...grpc.CallOption) (*AgentPBXApproveCallReply, error) {
	out := new(AgentPBXApproveCallReply)
	err := c.cc.Invoke(ctx, Acd_AgentPBXApproveCall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) AgentPBXRejectCall(ctx context.Context, in *AgentPBXRejectCallRequest, opts ...grpc.CallOption) (*AgentPBXRejectCallReply, error) {
	out := new(AgentPBXRejectCallReply)
	err := c.cc.Invoke(ctx, Acd_AgentPBXRejectCall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) GetCallerLostPeer(ctx context.Context, in *GetCallerLostPeerRequest, opts ...grpc.CallOption) (*GetCallerLostPeerReply, error) {
	out := new(GetCallerLostPeerReply)
	err := c.cc.Invoke(ctx, Acd_GetCallerLostPeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) CallerGetRawEvent(ctx context.Context, in *CallerGetRawEventRequest, opts ...grpc.CallOption) (*CallerGetRawEventReply, error) {
	out := new(CallerGetRawEventReply)
	err := c.cc.Invoke(ctx, Acd_CallerGetRawEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) PeerAgentWithCaller(ctx context.Context, in *PeerAgentWithCallerRequest, opts ...grpc.CallOption) (*PeerAgentWithCallerReply, error) {
	out := new(PeerAgentWithCallerReply)
	err := c.cc.Invoke(ctx, Acd_PeerAgentWithCaller_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) HoldTransferMember(ctx context.Context, in *HoldTransferMemberReq, opts ...grpc.CallOption) (*HoldTransferMemberRes, error) {
	out := new(HoldTransferMemberRes)
	err := c.cc.Invoke(ctx, Acd_HoldTransferMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) UnholdTransferMember(ctx context.Context, in *UnholdTransferMemberReq, opts ...grpc.CallOption) (*UnholdTransferMemberRes, error) {
	out := new(UnholdTransferMemberRes)
	err := c.cc.Invoke(ctx, Acd_UnholdTransferMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) GetAgentCallCounts(ctx context.Context, in *GetAgentCallCountsReq, opts ...grpc.CallOption) (*GetAgentCallCountsRes, error) {
	out := new(GetAgentCallCountsRes)
	err := c.cc.Invoke(ctx, Acd_GetAgentCallCounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) WarmCallerTransferStart(ctx context.Context, in *WarmCallerTransferStartReq, opts ...grpc.CallOption) (*WarmCallerTransferStartRes, error) {
	out := new(WarmCallerTransferStartRes)
	err := c.cc.Invoke(ctx, Acd_WarmCallerTransferStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) WarmCallerTransferCancel(ctx context.Context, in *WarmCallerTransferCancelReq, opts ...grpc.CallOption) (*WarmCallerTransferCancelRes, error) {
	out := new(WarmCallerTransferCancelRes)
	err := c.cc.Invoke(ctx, Acd_WarmCallerTransferCancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) WarmCallerTransferApprove(ctx context.Context, in *WarmCallerTransferApproveReq, opts ...grpc.CallOption) (*WarmCallerTransferApproveRes, error) {
	out := new(WarmCallerTransferApproveRes)
	err := c.cc.Invoke(ctx, Acd_WarmCallerTransferApprove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) PlaySoundboardEntity(ctx context.Context, in *PlaySoundboardEntityReq, opts ...grpc.CallOption) (*PlaySoundboardEntityRes, error) {
	out := new(PlaySoundboardEntityRes)
	err := c.cc.Invoke(ctx, Acd_PlaySoundboardEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) StopSoundboardEntity(ctx context.Context, in *StopSoundboardEntityReq, opts ...grpc.CallOption) (*StopSoundboardEntityRes, error) {
	out := new(StopSoundboardEntityRes)
	err := c.cc.Invoke(ctx, Acd_StopSoundboardEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) UpdateAgentSkills(ctx context.Context, in *UpdateAgentSkillsRequest, opts ...grpc.CallOption) (*UpdateAgentSkillsReply, error) {
	out := new(UpdateAgentSkillsReply)
	err := c.cc.Invoke(ctx, Acd_UpdateAgentSkills_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) PlayDTMF(ctx context.Context, in *PlayDTMFRequest, opts ...grpc.CallOption) (*PlayDTMFReply, error) {
	out := new(PlayDTMFReply)
	err := c.cc.Invoke(ctx, Acd_PlayDTMF_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) AgentMute(ctx context.Context, in *AgentMuteRequest, opts ...grpc.CallOption) (*AgentMuteReply, error) {
	out := new(AgentMuteReply)
	err := c.cc.Invoke(ctx, Acd_AgentMute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acdClient) AgentUnmute(ctx context.Context, in *AgentUnmuteRequest, opts ...grpc.CallOption) (*AgentUnmuteReply, error) {
	out := new(AgentUnmuteReply)
	err := c.cc.Invoke(ctx, Acd_AgentUnmute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AcdServer is the server API for Acd service.
// All implementations must embed UnimplementedAcdServer
// for forward compatibility
type AcdServer interface {
	AgentGetStatusStream(*AgentGetStatusRequest, Acd_AgentGetStatusStreamServer) error
	AgentGetStatus(context.Context, *AgentGetStatusRequest) (*AgentGetStatusReply, error)
	AgentGetConnectedParty(context.Context, *AgentGetConnectedPartyRequest) (*AgentGetConnectedPartyReply, error)
	AgentIntercom(context.Context, *AgentIntercomRequest) (*AgentIntercomReply, error)
	AgentIntercomAccept(context.Context, *AgentIntercomAcceptRequest) (*AgentIntercomAcceptReply, error)
	AgentIntercomReject(context.Context, *AgentIntercomRejectRequest) (*AgentIntercomRejectReply, error)
	AgentIntercomCancel(context.Context, *AgentIntercomCancelRequest) (*AgentIntercomCancelReply, error)
	DialManualPrepare(context.Context, *DialManualPrepareRequest) (*DialManualPrepareReply, error)
	DialManualCancel(context.Context, *DialManualCancelRequest) (*DialManualCancelReply, error)
	DialPreviewPrepare(context.Context, *DialPreviewPrepareRequest) (*DialPreviewPrepareReply, error)
	AgentPause(context.Context, *AgentPauseRequest) (*AgentPauseReply, error)
	AgentSetReady(context.Context, *AgentSetReadyRequest) (*AgentSetReadyReply, error)
	AgentGUIBusy(context.Context, *AgentGUIBusyRequest) (*AgentGUIBusyReply, error)
	ReportAgentSessionEvent(context.Context, *AgentSessionEventReq) (*AgentSessionEventRes, error)
	CallerRequeue(context.Context, *CallerRequeueRequest) (*CallerRequeueReply, error)
	AgentDisconnect(context.Context, *AgentDisconnectRequest) (*AgentDisconnectReply, error)
	TransferWarmToOutboundCancel(context.Context, *TransferWarmToOutboundCancelRequest) (*TransferWarmToOutboundCancelReply, error)
	TransferWarmToAgentCancel(context.Context, *TransferWarmToAgentCancelRequest) (*TransferWarmToAgentCancelReply, error)
	TransferWarmToOutboundApprove(context.Context, *TransferWarmToOutboundApproveRequest) (*TransferWarmToOutboundApproveReply, error)
	TransferWarmToAgentApprove(context.Context, *TransferWarmToAgentApproveRequest) (*TransferWarmToAgentApproveReply, error)
	CallerSendToVoicemail(context.Context, *CallerSendToVoicemailRequest) (*CallerSendToVoicemailReply, error)
	AgentInviteTransferCallerToConference(context.Context, *AgentInviteTransferCallerToConferenceRequest) (*AgentInviteTransferCallerToConferenceReply, error)
	AgentMonitorCalls(context.Context, *AgentMonitorCallsRequest) (*AgentMonitorCallsReply, error)
	TransferColdToOutbound(context.Context, *TransferColdToOutboundRequest) (*TransferColdToOutboundReply, error)
	TransferColdToAgent(context.Context, *TransferColdToAgentRequest) (*TransferColdToAgentReply, error)
	TransferWarmToOutboundStart(context.Context, *TransferWarmToOutboundStartRequest) (*TransferWarmToOutboundStartReply, error)
	// creates a new outbound transfer member using the given src/dst numbers
	CreateWarmOutboundTransferMember(context.Context, *CreateWarmOutboundTransferMemberRequest) (*CreateWarmOutboundTransferMemberReply, error)
	// hangups a transfer member using the given member identifier
	RemoveTransferMember(context.Context, *RemoveTransferMemberRequest) (*RemoveTransferMemberReply, error)
	TransferWarmToAgentStart(context.Context, *TransferWarmToAgentStartRequest) (*TransferWarmToAgentStartReply, error)
	AgentGetCallFromHold(context.Context, *AgentGetCallFromHoldRequest) (*AgentGetCallFromHoldReply, error)
	AgentGetSpecificCallFromHold(context.Context, *AgentGetSpecificCallFromHoldRequest) (*AgentGetSpecificCallFromHoldReply, error)
	ACDGetAllAgentsStatuses(context.Context, *ACDGetAllAgentsStatusesRequest) (*ACDGetAllAgentsStatusesReply, error)
	AgentPutCallOnHold(context.Context, *AgentPutCallOnHoldRequest) (*AgentPutCallOnHoldReply, error)
	AgentReceiveMessage(context.Context, *AgentReceiveMessageRequest) (*AgentReceiveMessageReply, error)
	AgentPBXApproveCall(context.Context, *AgentPBXApproveCallRequest) (*AgentPBXApproveCallReply, error)
	AgentPBXRejectCall(context.Context, *AgentPBXRejectCallRequest) (*AgentPBXRejectCallReply, error)
	GetCallerLostPeer(context.Context, *GetCallerLostPeerRequest) (*GetCallerLostPeerReply, error)
	CallerGetRawEvent(context.Context, *CallerGetRawEventRequest) (*CallerGetRawEventReply, error)
	PeerAgentWithCaller(context.Context, *PeerAgentWithCallerRequest) (*PeerAgentWithCallerReply, error)
	HoldTransferMember(context.Context, *HoldTransferMemberReq) (*HoldTransferMemberRes, error)
	UnholdTransferMember(context.Context, *UnholdTransferMemberReq) (*UnholdTransferMemberRes, error)
	GetAgentCallCounts(context.Context, *GetAgentCallCountsReq) (*GetAgentCallCountsRes, error)
	// endpoint used to start a warm caller transfer
	WarmCallerTransferStart(context.Context, *WarmCallerTransferStartReq) (*WarmCallerTransferStartRes, error)
	// endpoint used to cancel a warm caller transfer
	WarmCallerTransferCancel(context.Context, *WarmCallerTransferCancelReq) (*WarmCallerTransferCancelRes, error)
	// endpoint used to approve a warm caller transfer
	WarmCallerTransferApprove(context.Context, *WarmCallerTransferApproveReq) (*WarmCallerTransferApproveRes, error)
	// endpoint used to play a soundboard file for a customer
	PlaySoundboardEntity(context.Context, *PlaySoundboardEntityReq) (*PlaySoundboardEntityRes, error)
	// endpoint used to stop a soundboard file for a customer
	StopSoundboardEntity(context.Context, *StopSoundboardEntityReq) (*StopSoundboardEntityRes, error)
	// endpoint used to update an agent's skills
	UpdateAgentSkills(context.Context, *UpdateAgentSkillsRequest) (*UpdateAgentSkillsReply, error)
	// endpoint used to play a dtmf tone to all members of a the agent's conference
	PlayDTMF(context.Context, *PlayDTMFRequest) (*PlayDTMFReply, error)
	// endpoint used to mute and agent's mic
	AgentMute(context.Context, *AgentMuteRequest) (*AgentMuteReply, error)
	// endpoint used to unmute and agent's mic
	AgentUnmute(context.Context, *AgentUnmuteRequest) (*AgentUnmuteReply, error)
	mustEmbedUnimplementedAcdServer()
}

// UnimplementedAcdServer must be embedded to have forward compatible implementations.
type UnimplementedAcdServer struct {
}

func (UnimplementedAcdServer) AgentGetStatusStream(*AgentGetStatusRequest, Acd_AgentGetStatusStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AgentGetStatusStream not implemented")
}
func (UnimplementedAcdServer) AgentGetStatus(context.Context, *AgentGetStatusRequest) (*AgentGetStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentGetStatus not implemented")
}
func (UnimplementedAcdServer) AgentGetConnectedParty(context.Context, *AgentGetConnectedPartyRequest) (*AgentGetConnectedPartyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentGetConnectedParty not implemented")
}
func (UnimplementedAcdServer) AgentIntercom(context.Context, *AgentIntercomRequest) (*AgentIntercomReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentIntercom not implemented")
}
func (UnimplementedAcdServer) AgentIntercomAccept(context.Context, *AgentIntercomAcceptRequest) (*AgentIntercomAcceptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentIntercomAccept not implemented")
}
func (UnimplementedAcdServer) AgentIntercomReject(context.Context, *AgentIntercomRejectRequest) (*AgentIntercomRejectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentIntercomReject not implemented")
}
func (UnimplementedAcdServer) AgentIntercomCancel(context.Context, *AgentIntercomCancelRequest) (*AgentIntercomCancelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentIntercomCancel not implemented")
}
func (UnimplementedAcdServer) DialManualPrepare(context.Context, *DialManualPrepareRequest) (*DialManualPrepareReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialManualPrepare not implemented")
}
func (UnimplementedAcdServer) DialManualCancel(context.Context, *DialManualCancelRequest) (*DialManualCancelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialManualCancel not implemented")
}
func (UnimplementedAcdServer) DialPreviewPrepare(context.Context, *DialPreviewPrepareRequest) (*DialPreviewPrepareReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialPreviewPrepare not implemented")
}
func (UnimplementedAcdServer) AgentPause(context.Context, *AgentPauseRequest) (*AgentPauseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentPause not implemented")
}
func (UnimplementedAcdServer) AgentSetReady(context.Context, *AgentSetReadyRequest) (*AgentSetReadyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentSetReady not implemented")
}
func (UnimplementedAcdServer) AgentGUIBusy(context.Context, *AgentGUIBusyRequest) (*AgentGUIBusyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentGUIBusy not implemented")
}
func (UnimplementedAcdServer) ReportAgentSessionEvent(context.Context, *AgentSessionEventReq) (*AgentSessionEventRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportAgentSessionEvent not implemented")
}
func (UnimplementedAcdServer) CallerRequeue(context.Context, *CallerRequeueRequest) (*CallerRequeueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallerRequeue not implemented")
}
func (UnimplementedAcdServer) AgentDisconnect(context.Context, *AgentDisconnectRequest) (*AgentDisconnectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentDisconnect not implemented")
}
func (UnimplementedAcdServer) TransferWarmToOutboundCancel(context.Context, *TransferWarmToOutboundCancelRequest) (*TransferWarmToOutboundCancelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferWarmToOutboundCancel not implemented")
}
func (UnimplementedAcdServer) TransferWarmToAgentCancel(context.Context, *TransferWarmToAgentCancelRequest) (*TransferWarmToAgentCancelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferWarmToAgentCancel not implemented")
}
func (UnimplementedAcdServer) TransferWarmToOutboundApprove(context.Context, *TransferWarmToOutboundApproveRequest) (*TransferWarmToOutboundApproveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferWarmToOutboundApprove not implemented")
}
func (UnimplementedAcdServer) TransferWarmToAgentApprove(context.Context, *TransferWarmToAgentApproveRequest) (*TransferWarmToAgentApproveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferWarmToAgentApprove not implemented")
}
func (UnimplementedAcdServer) CallerSendToVoicemail(context.Context, *CallerSendToVoicemailRequest) (*CallerSendToVoicemailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallerSendToVoicemail not implemented")
}
func (UnimplementedAcdServer) AgentInviteTransferCallerToConference(context.Context, *AgentInviteTransferCallerToConferenceRequest) (*AgentInviteTransferCallerToConferenceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentInviteTransferCallerToConference not implemented")
}
func (UnimplementedAcdServer) AgentMonitorCalls(context.Context, *AgentMonitorCallsRequest) (*AgentMonitorCallsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentMonitorCalls not implemented")
}
func (UnimplementedAcdServer) TransferColdToOutbound(context.Context, *TransferColdToOutboundRequest) (*TransferColdToOutboundReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferColdToOutbound not implemented")
}
func (UnimplementedAcdServer) TransferColdToAgent(context.Context, *TransferColdToAgentRequest) (*TransferColdToAgentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferColdToAgent not implemented")
}
func (UnimplementedAcdServer) TransferWarmToOutboundStart(context.Context, *TransferWarmToOutboundStartRequest) (*TransferWarmToOutboundStartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferWarmToOutboundStart not implemented")
}
func (UnimplementedAcdServer) CreateWarmOutboundTransferMember(context.Context, *CreateWarmOutboundTransferMemberRequest) (*CreateWarmOutboundTransferMemberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWarmOutboundTransferMember not implemented")
}
func (UnimplementedAcdServer) RemoveTransferMember(context.Context, *RemoveTransferMemberRequest) (*RemoveTransferMemberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTransferMember not implemented")
}
func (UnimplementedAcdServer) TransferWarmToAgentStart(context.Context, *TransferWarmToAgentStartRequest) (*TransferWarmToAgentStartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferWarmToAgentStart not implemented")
}
func (UnimplementedAcdServer) AgentGetCallFromHold(context.Context, *AgentGetCallFromHoldRequest) (*AgentGetCallFromHoldReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentGetCallFromHold not implemented")
}
func (UnimplementedAcdServer) AgentGetSpecificCallFromHold(context.Context, *AgentGetSpecificCallFromHoldRequest) (*AgentGetSpecificCallFromHoldReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentGetSpecificCallFromHold not implemented")
}
func (UnimplementedAcdServer) ACDGetAllAgentsStatuses(context.Context, *ACDGetAllAgentsStatusesRequest) (*ACDGetAllAgentsStatusesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ACDGetAllAgentsStatuses not implemented")
}
func (UnimplementedAcdServer) AgentPutCallOnHold(context.Context, *AgentPutCallOnHoldRequest) (*AgentPutCallOnHoldReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentPutCallOnHold not implemented")
}
func (UnimplementedAcdServer) AgentReceiveMessage(context.Context, *AgentReceiveMessageRequest) (*AgentReceiveMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentReceiveMessage not implemented")
}
func (UnimplementedAcdServer) AgentPBXApproveCall(context.Context, *AgentPBXApproveCallRequest) (*AgentPBXApproveCallReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentPBXApproveCall not implemented")
}
func (UnimplementedAcdServer) AgentPBXRejectCall(context.Context, *AgentPBXRejectCallRequest) (*AgentPBXRejectCallReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentPBXRejectCall not implemented")
}
func (UnimplementedAcdServer) GetCallerLostPeer(context.Context, *GetCallerLostPeerRequest) (*GetCallerLostPeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCallerLostPeer not implemented")
}
func (UnimplementedAcdServer) CallerGetRawEvent(context.Context, *CallerGetRawEventRequest) (*CallerGetRawEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallerGetRawEvent not implemented")
}
func (UnimplementedAcdServer) PeerAgentWithCaller(context.Context, *PeerAgentWithCallerRequest) (*PeerAgentWithCallerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeerAgentWithCaller not implemented")
}
func (UnimplementedAcdServer) HoldTransferMember(context.Context, *HoldTransferMemberReq) (*HoldTransferMemberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HoldTransferMember not implemented")
}
func (UnimplementedAcdServer) UnholdTransferMember(context.Context, *UnholdTransferMemberReq) (*UnholdTransferMemberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnholdTransferMember not implemented")
}
func (UnimplementedAcdServer) GetAgentCallCounts(context.Context, *GetAgentCallCountsReq) (*GetAgentCallCountsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentCallCounts not implemented")
}
func (UnimplementedAcdServer) WarmCallerTransferStart(context.Context, *WarmCallerTransferStartReq) (*WarmCallerTransferStartRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WarmCallerTransferStart not implemented")
}
func (UnimplementedAcdServer) WarmCallerTransferCancel(context.Context, *WarmCallerTransferCancelReq) (*WarmCallerTransferCancelRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WarmCallerTransferCancel not implemented")
}
func (UnimplementedAcdServer) WarmCallerTransferApprove(context.Context, *WarmCallerTransferApproveReq) (*WarmCallerTransferApproveRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WarmCallerTransferApprove not implemented")
}
func (UnimplementedAcdServer) PlaySoundboardEntity(context.Context, *PlaySoundboardEntityReq) (*PlaySoundboardEntityRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaySoundboardEntity not implemented")
}
func (UnimplementedAcdServer) StopSoundboardEntity(context.Context, *StopSoundboardEntityReq) (*StopSoundboardEntityRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSoundboardEntity not implemented")
}
func (UnimplementedAcdServer) UpdateAgentSkills(context.Context, *UpdateAgentSkillsRequest) (*UpdateAgentSkillsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentSkills not implemented")
}
func (UnimplementedAcdServer) PlayDTMF(context.Context, *PlayDTMFRequest) (*PlayDTMFReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayDTMF not implemented")
}
func (UnimplementedAcdServer) AgentMute(context.Context, *AgentMuteRequest) (*AgentMuteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentMute not implemented")
}
func (UnimplementedAcdServer) AgentUnmute(context.Context, *AgentUnmuteRequest) (*AgentUnmuteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentUnmute not implemented")
}
func (UnimplementedAcdServer) mustEmbedUnimplementedAcdServer() {}

// UnsafeAcdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AcdServer will
// result in compilation errors.
type UnsafeAcdServer interface {
	mustEmbedUnimplementedAcdServer()
}

func RegisterAcdServer(s grpc.ServiceRegistrar, srv AcdServer) {
	s.RegisterService(&Acd_ServiceDesc, srv)
}

func _Acd_AgentGetStatusStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AgentGetStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AcdServer).AgentGetStatusStream(m, &acdAgentGetStatusStreamServer{stream})
}

type Acd_AgentGetStatusStreamServer interface {
	Send(*AgentGetStatusReply) error
	grpc.ServerStream
}

type acdAgentGetStatusStreamServer struct {
	grpc.ServerStream
}

func (x *acdAgentGetStatusStreamServer) Send(m *AgentGetStatusReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Acd_AgentGetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).AgentGetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_AgentGetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).AgentGetStatus(ctx, req.(*AgentGetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_AgentGetConnectedParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGetConnectedPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).AgentGetConnectedParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_AgentGetConnectedParty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).AgentGetConnectedParty(ctx, req.(*AgentGetConnectedPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_AgentIntercom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentIntercomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).AgentIntercom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_AgentIntercom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).AgentIntercom(ctx, req.(*AgentIntercomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_AgentIntercomAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentIntercomAcceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).AgentIntercomAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_AgentIntercomAccept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).AgentIntercomAccept(ctx, req.(*AgentIntercomAcceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_AgentIntercomReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentIntercomRejectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).AgentIntercomReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_AgentIntercomReject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).AgentIntercomReject(ctx, req.(*AgentIntercomRejectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_AgentIntercomCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentIntercomCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).AgentIntercomCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_AgentIntercomCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).AgentIntercomCancel(ctx, req.(*AgentIntercomCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_DialManualPrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DialManualPrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).DialManualPrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_DialManualPrepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).DialManualPrepare(ctx, req.(*DialManualPrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_DialManualCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DialManualCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).DialManualCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_DialManualCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).DialManualCancel(ctx, req.(*DialManualCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_DialPreviewPrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DialPreviewPrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).DialPreviewPrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_DialPreviewPrepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).DialPreviewPrepare(ctx, req.(*DialPreviewPrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_AgentPause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentPauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).AgentPause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_AgentPause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).AgentPause(ctx, req.(*AgentPauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_AgentSetReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentSetReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).AgentSetReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_AgentSetReady_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).AgentSetReady(ctx, req.(*AgentSetReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_AgentGUIBusy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGUIBusyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).AgentGUIBusy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_AgentGUIBusy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).AgentGUIBusy(ctx, req.(*AgentGUIBusyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_ReportAgentSessionEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentSessionEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).ReportAgentSessionEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_ReportAgentSessionEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).ReportAgentSessionEvent(ctx, req.(*AgentSessionEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_CallerRequeue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallerRequeueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).CallerRequeue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_CallerRequeue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).CallerRequeue(ctx, req.(*CallerRequeueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_AgentDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentDisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).AgentDisconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_AgentDisconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).AgentDisconnect(ctx, req.(*AgentDisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_TransferWarmToOutboundCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferWarmToOutboundCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).TransferWarmToOutboundCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_TransferWarmToOutboundCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).TransferWarmToOutboundCancel(ctx, req.(*TransferWarmToOutboundCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_TransferWarmToAgentCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferWarmToAgentCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).TransferWarmToAgentCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_TransferWarmToAgentCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).TransferWarmToAgentCancel(ctx, req.(*TransferWarmToAgentCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_TransferWarmToOutboundApprove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferWarmToOutboundApproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).TransferWarmToOutboundApprove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_TransferWarmToOutboundApprove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).TransferWarmToOutboundApprove(ctx, req.(*TransferWarmToOutboundApproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_TransferWarmToAgentApprove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferWarmToAgentApproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).TransferWarmToAgentApprove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_TransferWarmToAgentApprove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).TransferWarmToAgentApprove(ctx, req.(*TransferWarmToAgentApproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_CallerSendToVoicemail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallerSendToVoicemailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).CallerSendToVoicemail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_CallerSendToVoicemail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).CallerSendToVoicemail(ctx, req.(*CallerSendToVoicemailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_AgentInviteTransferCallerToConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentInviteTransferCallerToConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).AgentInviteTransferCallerToConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_AgentInviteTransferCallerToConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).AgentInviteTransferCallerToConference(ctx, req.(*AgentInviteTransferCallerToConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_AgentMonitorCalls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentMonitorCallsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).AgentMonitorCalls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_AgentMonitorCalls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).AgentMonitorCalls(ctx, req.(*AgentMonitorCallsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_TransferColdToOutbound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferColdToOutboundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).TransferColdToOutbound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_TransferColdToOutbound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).TransferColdToOutbound(ctx, req.(*TransferColdToOutboundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_TransferColdToAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferColdToAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).TransferColdToAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_TransferColdToAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).TransferColdToAgent(ctx, req.(*TransferColdToAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_TransferWarmToOutboundStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferWarmToOutboundStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).TransferWarmToOutboundStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_TransferWarmToOutboundStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).TransferWarmToOutboundStart(ctx, req.(*TransferWarmToOutboundStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_CreateWarmOutboundTransferMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWarmOutboundTransferMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).CreateWarmOutboundTransferMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_CreateWarmOutboundTransferMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).CreateWarmOutboundTransferMember(ctx, req.(*CreateWarmOutboundTransferMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_RemoveTransferMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTransferMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).RemoveTransferMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_RemoveTransferMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).RemoveTransferMember(ctx, req.(*RemoveTransferMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_TransferWarmToAgentStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferWarmToAgentStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).TransferWarmToAgentStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_TransferWarmToAgentStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).TransferWarmToAgentStart(ctx, req.(*TransferWarmToAgentStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_AgentGetCallFromHold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGetCallFromHoldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).AgentGetCallFromHold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_AgentGetCallFromHold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).AgentGetCallFromHold(ctx, req.(*AgentGetCallFromHoldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_AgentGetSpecificCallFromHold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGetSpecificCallFromHoldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).AgentGetSpecificCallFromHold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_AgentGetSpecificCallFromHold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).AgentGetSpecificCallFromHold(ctx, req.(*AgentGetSpecificCallFromHoldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_ACDGetAllAgentsStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACDGetAllAgentsStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).ACDGetAllAgentsStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_ACDGetAllAgentsStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).ACDGetAllAgentsStatuses(ctx, req.(*ACDGetAllAgentsStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_AgentPutCallOnHold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentPutCallOnHoldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).AgentPutCallOnHold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_AgentPutCallOnHold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).AgentPutCallOnHold(ctx, req.(*AgentPutCallOnHoldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_AgentReceiveMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentReceiveMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).AgentReceiveMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_AgentReceiveMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).AgentReceiveMessage(ctx, req.(*AgentReceiveMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_AgentPBXApproveCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentPBXApproveCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).AgentPBXApproveCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_AgentPBXApproveCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).AgentPBXApproveCall(ctx, req.(*AgentPBXApproveCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_AgentPBXRejectCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentPBXRejectCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).AgentPBXRejectCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_AgentPBXRejectCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).AgentPBXRejectCall(ctx, req.(*AgentPBXRejectCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_GetCallerLostPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCallerLostPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).GetCallerLostPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_GetCallerLostPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).GetCallerLostPeer(ctx, req.(*GetCallerLostPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_CallerGetRawEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallerGetRawEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).CallerGetRawEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_CallerGetRawEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).CallerGetRawEvent(ctx, req.(*CallerGetRawEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_PeerAgentWithCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerAgentWithCallerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).PeerAgentWithCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_PeerAgentWithCaller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).PeerAgentWithCaller(ctx, req.(*PeerAgentWithCallerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_HoldTransferMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HoldTransferMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).HoldTransferMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_HoldTransferMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).HoldTransferMember(ctx, req.(*HoldTransferMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_UnholdTransferMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnholdTransferMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).UnholdTransferMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_UnholdTransferMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).UnholdTransferMember(ctx, req.(*UnholdTransferMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_GetAgentCallCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentCallCountsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).GetAgentCallCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_GetAgentCallCounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).GetAgentCallCounts(ctx, req.(*GetAgentCallCountsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_WarmCallerTransferStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarmCallerTransferStartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).WarmCallerTransferStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_WarmCallerTransferStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).WarmCallerTransferStart(ctx, req.(*WarmCallerTransferStartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_WarmCallerTransferCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarmCallerTransferCancelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).WarmCallerTransferCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_WarmCallerTransferCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).WarmCallerTransferCancel(ctx, req.(*WarmCallerTransferCancelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_WarmCallerTransferApprove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarmCallerTransferApproveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).WarmCallerTransferApprove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_WarmCallerTransferApprove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).WarmCallerTransferApprove(ctx, req.(*WarmCallerTransferApproveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_PlaySoundboardEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaySoundboardEntityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).PlaySoundboardEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_PlaySoundboardEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).PlaySoundboardEntity(ctx, req.(*PlaySoundboardEntityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_StopSoundboardEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSoundboardEntityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).StopSoundboardEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_StopSoundboardEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).StopSoundboardEntity(ctx, req.(*StopSoundboardEntityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_UpdateAgentSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentSkillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).UpdateAgentSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_UpdateAgentSkills_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).UpdateAgentSkills(ctx, req.(*UpdateAgentSkillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_PlayDTMF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayDTMFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).PlayDTMF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_PlayDTMF_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).PlayDTMF(ctx, req.(*PlayDTMFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_AgentMute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentMuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).AgentMute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_AgentMute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).AgentMute(ctx, req.(*AgentMuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acd_AgentUnmute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentUnmuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcdServer).AgentUnmute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acd_AgentUnmute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcdServer).AgentUnmute(ctx, req.(*AgentUnmuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Acd_ServiceDesc is the grpc.ServiceDesc for Acd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Acd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v0alpha.Acd",
	HandlerType: (*AcdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AgentGetStatus",
			Handler:    _Acd_AgentGetStatus_Handler,
		},
		{
			MethodName: "AgentGetConnectedParty",
			Handler:    _Acd_AgentGetConnectedParty_Handler,
		},
		{
			MethodName: "AgentIntercom",
			Handler:    _Acd_AgentIntercom_Handler,
		},
		{
			MethodName: "AgentIntercomAccept",
			Handler:    _Acd_AgentIntercomAccept_Handler,
		},
		{
			MethodName: "AgentIntercomReject",
			Handler:    _Acd_AgentIntercomReject_Handler,
		},
		{
			MethodName: "AgentIntercomCancel",
			Handler:    _Acd_AgentIntercomCancel_Handler,
		},
		{
			MethodName: "DialManualPrepare",
			Handler:    _Acd_DialManualPrepare_Handler,
		},
		{
			MethodName: "DialManualCancel",
			Handler:    _Acd_DialManualCancel_Handler,
		},
		{
			MethodName: "DialPreviewPrepare",
			Handler:    _Acd_DialPreviewPrepare_Handler,
		},
		{
			MethodName: "AgentPause",
			Handler:    _Acd_AgentPause_Handler,
		},
		{
			MethodName: "AgentSetReady",
			Handler:    _Acd_AgentSetReady_Handler,
		},
		{
			MethodName: "AgentGUIBusy",
			Handler:    _Acd_AgentGUIBusy_Handler,
		},
		{
			MethodName: "ReportAgentSessionEvent",
			Handler:    _Acd_ReportAgentSessionEvent_Handler,
		},
		{
			MethodName: "CallerRequeue",
			Handler:    _Acd_CallerRequeue_Handler,
		},
		{
			MethodName: "AgentDisconnect",
			Handler:    _Acd_AgentDisconnect_Handler,
		},
		{
			MethodName: "TransferWarmToOutboundCancel",
			Handler:    _Acd_TransferWarmToOutboundCancel_Handler,
		},
		{
			MethodName: "TransferWarmToAgentCancel",
			Handler:    _Acd_TransferWarmToAgentCancel_Handler,
		},
		{
			MethodName: "TransferWarmToOutboundApprove",
			Handler:    _Acd_TransferWarmToOutboundApprove_Handler,
		},
		{
			MethodName: "TransferWarmToAgentApprove",
			Handler:    _Acd_TransferWarmToAgentApprove_Handler,
		},
		{
			MethodName: "CallerSendToVoicemail",
			Handler:    _Acd_CallerSendToVoicemail_Handler,
		},
		{
			MethodName: "AgentInviteTransferCallerToConference",
			Handler:    _Acd_AgentInviteTransferCallerToConference_Handler,
		},
		{
			MethodName: "AgentMonitorCalls",
			Handler:    _Acd_AgentMonitorCalls_Handler,
		},
		{
			MethodName: "TransferColdToOutbound",
			Handler:    _Acd_TransferColdToOutbound_Handler,
		},
		{
			MethodName: "TransferColdToAgent",
			Handler:    _Acd_TransferColdToAgent_Handler,
		},
		{
			MethodName: "TransferWarmToOutboundStart",
			Handler:    _Acd_TransferWarmToOutboundStart_Handler,
		},
		{
			MethodName: "CreateWarmOutboundTransferMember",
			Handler:    _Acd_CreateWarmOutboundTransferMember_Handler,
		},
		{
			MethodName: "RemoveTransferMember",
			Handler:    _Acd_RemoveTransferMember_Handler,
		},
		{
			MethodName: "TransferWarmToAgentStart",
			Handler:    _Acd_TransferWarmToAgentStart_Handler,
		},
		{
			MethodName: "AgentGetCallFromHold",
			Handler:    _Acd_AgentGetCallFromHold_Handler,
		},
		{
			MethodName: "AgentGetSpecificCallFromHold",
			Handler:    _Acd_AgentGetSpecificCallFromHold_Handler,
		},
		{
			MethodName: "ACDGetAllAgentsStatuses",
			Handler:    _Acd_ACDGetAllAgentsStatuses_Handler,
		},
		{
			MethodName: "AgentPutCallOnHold",
			Handler:    _Acd_AgentPutCallOnHold_Handler,
		},
		{
			MethodName: "AgentReceiveMessage",
			Handler:    _Acd_AgentReceiveMessage_Handler,
		},
		{
			MethodName: "AgentPBXApproveCall",
			Handler:    _Acd_AgentPBXApproveCall_Handler,
		},
		{
			MethodName: "AgentPBXRejectCall",
			Handler:    _Acd_AgentPBXRejectCall_Handler,
		},
		{
			MethodName: "GetCallerLostPeer",
			Handler:    _Acd_GetCallerLostPeer_Handler,
		},
		{
			MethodName: "CallerGetRawEvent",
			Handler:    _Acd_CallerGetRawEvent_Handler,
		},
		{
			MethodName: "PeerAgentWithCaller",
			Handler:    _Acd_PeerAgentWithCaller_Handler,
		},
		{
			MethodName: "HoldTransferMember",
			Handler:    _Acd_HoldTransferMember_Handler,
		},
		{
			MethodName: "UnholdTransferMember",
			Handler:    _Acd_UnholdTransferMember_Handler,
		},
		{
			MethodName: "GetAgentCallCounts",
			Handler:    _Acd_GetAgentCallCounts_Handler,
		},
		{
			MethodName: "WarmCallerTransferStart",
			Handler:    _Acd_WarmCallerTransferStart_Handler,
		},
		{
			MethodName: "WarmCallerTransferCancel",
			Handler:    _Acd_WarmCallerTransferCancel_Handler,
		},
		{
			MethodName: "WarmCallerTransferApprove",
			Handler:    _Acd_WarmCallerTransferApprove_Handler,
		},
		{
			MethodName: "PlaySoundboardEntity",
			Handler:    _Acd_PlaySoundboardEntity_Handler,
		},
		{
			MethodName: "StopSoundboardEntity",
			Handler:    _Acd_StopSoundboardEntity_Handler,
		},
		{
			MethodName: "UpdateAgentSkills",
			Handler:    _Acd_UpdateAgentSkills_Handler,
		},
		{
			MethodName: "PlayDTMF",
			Handler:    _Acd_PlayDTMF_Handler,
		},
		{
			MethodName: "AgentMute",
			Handler:    _Acd_AgentMute_Handler,
		},
		{
			MethodName: "AgentUnmute",
			Handler:    _Acd_AgentUnmute_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AgentGetStatusStream",
			Handler:       _Acd_AgentGetStatusStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v0alpha/acd.proto",
}
