// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v0alpha/omniapi.proto

package v0alpha

import (
	context "context"
	commons "github.com/tcncloud/api-go/api/commons"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OmniApi_ArchiveCampaign_FullMethodName              = "/api.v0alpha.OmniApi/ArchiveCampaign"
	OmniApi_CreateCampaign_FullMethodName               = "/api.v0alpha.OmniApi/CreateCampaign"
	OmniApi_GetCampaignById_FullMethodName              = "/api.v0alpha.OmniApi/GetCampaignById"
	OmniApi_ListCampaigns_FullMethodName                = "/api.v0alpha.OmniApi/ListCampaigns"
	OmniApi_PauseCampaign_FullMethodName                = "/api.v0alpha.OmniApi/PauseCampaign"
	OmniApi_ResumeCampaign_FullMethodName               = "/api.v0alpha.OmniApi/ResumeCampaign"
	OmniApi_UpdateCampaign_FullMethodName               = "/api.v0alpha.OmniApi/UpdateCampaign"
	OmniApi_UpdateCampaignPacingSpeed_FullMethodName    = "/api.v0alpha.OmniApi/UpdateCampaignPacingSpeed"
	OmniApi_GetOffLoadedTextMessage_FullMethodName      = "/api.v0alpha.OmniApi/GetOffLoadedTextMessage"
	OmniApi_ManagerListMessages_FullMethodName          = "/api.v0alpha.OmniApi/ManagerListMessages"
	OmniApi_ListMessages_FullMethodName                 = "/api.v0alpha.OmniApi/ListMessages"
	OmniApi_SendOmniMessage_FullMethodName              = "/api.v0alpha.OmniApi/SendOmniMessage"
	OmniApi_ManagerSendOmniMessage_FullMethodName       = "/api.v0alpha.OmniApi/ManagerSendOmniMessage"
	OmniApi_ManagerListConversations_FullMethodName     = "/api.v0alpha.OmniApi/ManagerListConversations"
	OmniApi_SuggestResponse_FullMethodName              = "/api.v0alpha.OmniApi/SuggestResponse"
	OmniApi_CreateDisposition_FullMethodName            = "/api.v0alpha.OmniApi/CreateDisposition"
	OmniApi_DeleteDisposition_FullMethodName            = "/api.v0alpha.OmniApi/DeleteDisposition"
	OmniApi_ListDispositions_FullMethodName             = "/api.v0alpha.OmniApi/ListDispositions"
	OmniApi_UpdateDisposition_FullMethodName            = "/api.v0alpha.OmniApi/UpdateDisposition"
	OmniApi_ListCustomUnsubscribeLinks_FullMethodName   = "/api.v0alpha.OmniApi/ListCustomUnsubscribeLinks"
	OmniApi_CreateCustomUnsubscribeLink_FullMethodName  = "/api.v0alpha.OmniApi/CreateCustomUnsubscribeLink"
	OmniApi_UpdateCustomUnsubscribeLink_FullMethodName  = "/api.v0alpha.OmniApi/UpdateCustomUnsubscribeLink"
	OmniApi_DeleteCustomUnsubscribeLink_FullMethodName  = "/api.v0alpha.OmniApi/DeleteCustomUnsubscribeLink"
	OmniApi_ListContactLists_FullMethodName             = "/api.v0alpha.OmniApi/ListContactLists"
	OmniApi_GetAvailableHeaders_FullMethodName          = "/api.v0alpha.OmniApi/GetAvailableHeaders"
	OmniApi_GetTask_FullMethodName                      = "/api.v0alpha.OmniApi/GetTask"
	OmniApi_ListTasks_FullMethodName                    = "/api.v0alpha.OmniApi/ListTasks"
	OmniApi_CreateConnectedInbox_FullMethodName         = "/api.v0alpha.OmniApi/CreateConnectedInbox"
	OmniApi_DeleteConnectedInboxBySid_FullMethodName    = "/api.v0alpha.OmniApi/DeleteConnectedInboxBySid"
	OmniApi_GetConnectedInboxBySid_FullMethodName       = "/api.v0alpha.OmniApi/GetConnectedInboxBySid"
	OmniApi_PerformSendgridAccountChecks_FullMethodName = "/api.v0alpha.OmniApi/PerformSendgridAccountChecks"
	OmniApi_ListConnectedInboxes_FullMethodName         = "/api.v0alpha.OmniApi/ListConnectedInboxes"
	OmniApi_TestConnectedInbox_FullMethodName           = "/api.v0alpha.OmniApi/TestConnectedInbox"
	OmniApi_UpdateConnectedInbox_FullMethodName         = "/api.v0alpha.OmniApi/UpdateConnectedInbox"
	OmniApi_CreateVerifiedEmail_FullMethodName          = "/api.v0alpha.OmniApi/CreateVerifiedEmail"
	OmniApi_SendEmailNotification_FullMethodName        = "/api.v0alpha.OmniApi/SendEmailNotification"
	OmniApi_DeleteVerifiedEmail_FullMethodName          = "/api.v0alpha.OmniApi/DeleteVerifiedEmail"
	OmniApi_GetVerifiedEmailBySid_FullMethodName        = "/api.v0alpha.OmniApi/GetVerifiedEmailBySid"
	OmniApi_ListVerifiedEmails_FullMethodName           = "/api.v0alpha.OmniApi/ListVerifiedEmails"
	OmniApi_ResendVerifiedEmail_FullMethodName          = "/api.v0alpha.OmniApi/ResendVerifiedEmail"
	OmniApi_UpdateVerifiedEmail_FullMethodName          = "/api.v0alpha.OmniApi/UpdateVerifiedEmail"
	OmniApi_GetPendingGoogleXOAuth2Data_FullMethodName  = "/api.v0alpha.OmniApi/GetPendingGoogleXOAuth2Data"
	OmniApi_SendFeedbackEmail_FullMethodName            = "/api.v0alpha.OmniApi/SendFeedbackEmail"
	OmniApi_GetOmniAttachment_FullMethodName            = "/api.v0alpha.OmniApi/GetOmniAttachment"
	OmniApi_CreateTasks_FullMethodName                  = "/api.v0alpha.OmniApi/CreateTasks"
	OmniApi_CreateSignature_FullMethodName              = "/api.v0alpha.OmniApi/CreateSignature"
	OmniApi_DeleteSignature_FullMethodName              = "/api.v0alpha.OmniApi/DeleteSignature"
	OmniApi_ListSignatures_FullMethodName               = "/api.v0alpha.OmniApi/ListSignatures"
	OmniApi_UpdateSignature_FullMethodName              = "/api.v0alpha.OmniApi/UpdateSignature"
)

// OmniApiClient is the client API for OmniApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OmniApiClient interface {
	// archive a campaign
	ArchiveCampaign(ctx context.Context, in *ArchiveCampaignReq, opts ...grpc.CallOption) (*ArchiveCampaignRes, error)
	// Create Omni Campaign defined by CreateOmniCampaign message
	// for the name, skill, Hours of operations, and description.
	// the method will return newly created OmniCampaign for this client
	// Required Permission:
	//
	//	OMNI_BOSS
	CreateCampaign(ctx context.Context, in *CreateCampaignReq, opts ...grpc.CallOption) (*commons.OmniCampaign, error)
	// Get campaign defined by GetChatCampaignById.
	GetCampaignById(ctx context.Context, in *GetCampaignByIdReq, opts ...grpc.CallOption) (*commons.OmniCampaign, error)
	// List campaigns defined by ListCampaignsReq.
	// The method will return a ListCampaignsReq entity that will contain
	// all the campaigns within the specified filter.
	ListCampaigns(ctx context.Context, in *ListCampaignsReq, opts ...grpc.CallOption) (*ListCampaignsRes, error)
	// pause a campaign
	PauseCampaign(ctx context.Context, in *PauseCampaignReq, opts ...grpc.CallOption) (*PauseCampaignRes, error)
	// resume a campaign
	ResumeCampaign(ctx context.Context, in *ResumeCampaignReq, opts ...grpc.CallOption) (*ResumeCampaignRes, error)
	// Updates a campaign
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateCampaign(ctx context.Context, in *UpdateCampaignReq, opts ...grpc.CallOption) (*UpdateCampaignRes, error)
	// update campaign pacing - speed up/slow down a campaign
	UpdateCampaignPacingSpeed(ctx context.Context, in *UpdateCampaignPacingSpeedReq, opts ...grpc.CallOption) (*UpdateCampaignPacingSpeedRes, error)
	// Get the text message for an off-loaded text message payload. Used
	// only for managers/agents/users. It is not for customers.
	GetOffLoadedTextMessage(ctx context.Context, in *GetOffLoadedTextMessageReq, opts ...grpc.CallOption) (*GetOffLoadedTextMessageRes, error)
	// Get a stream of new conversation message for a given conversation. Used
	// only for managers. It is not for customers.
	ManagerListMessages(ctx context.Context, in *ManagerListMessagesReq, opts ...grpc.CallOption) (OmniApi_ManagerListMessagesClient, error)
	// Get a stream of conversation message for a given conversation. Used
	// only for agents/users. It is not for customers.
	ListMessages(ctx context.Context, in *ListMessagesReq, opts ...grpc.CallOption) (OmniApi_ListMessagesClient, error)
	// Send a chat message
	SendOmniMessage(ctx context.Context, in *SendOmniMessageReq, opts ...grpc.CallOption) (*commons.Empty, error)
	// Send a chat message
	ManagerSendOmniMessage(ctx context.Context, in *SendOmniMessageReq, opts ...grpc.CallOption) (*commons.Empty, error)
	// lists all conversation and assigned users for a given date range.
	// Required permissions:
	//
	//	OMNI_BOSS
	ManagerListConversations(ctx context.Context, in *ListConversationsReq, opts ...grpc.CallOption) (*ListConversationsRes, error)
	// Experimental API
	SuggestResponse(ctx context.Context, in *SuggestResponseReq, opts ...grpc.CallOption) (*SuggestResponseRes, error)
	// Create a disposition
	CreateDisposition(ctx context.Context, in *CreateDispositionReq, opts ...grpc.CallOption) (*CreateDispositionRes, error)
	// DeleteDisposition - delete an existing disposition
	DeleteDisposition(ctx context.Context, in *DeleteDispositionReq, opts ...grpc.CallOption) (*commons.Empty, error)
	// ListDispositions - lists all dispositions
	ListDispositions(ctx context.Context, in *ListDispositionsReq, opts ...grpc.CallOption) (*ListDispositionsRes, error)
	// UpdateDisposition - update an existing disposition
	UpdateDisposition(ctx context.Context, in *UpdateDispositionReq, opts ...grpc.CallOption) (*commons.Empty, error)
	// ListCustomUnsubscribeLinks - retrieves all the custom unsubscribe links
	ListCustomUnsubscribeLinks(ctx context.Context, in *commons.Empty, opts ...grpc.CallOption) (*ListCustomUnsubscribeLinksRes, error)
	// CreateUnsubscribeLink - creates a new unsubscribe link
	CreateCustomUnsubscribeLink(ctx context.Context, in *commons.OmniCustomUnsubscribeLink, opts ...grpc.CallOption) (*CreateCustomUnsubscribeLinkRes, error)
	// UpdateCustomUnsubscribeLink - update custom unsubscribe link details
	UpdateCustomUnsubscribeLink(ctx context.Context, in *UpdateCustomUnsubscribeLinkReq, opts ...grpc.CallOption) (*UpdateCustomUnsubscribeLinkRes, error)
	// DeleteCustomUnsubscribeLink - deletes custom unsubscribe link details
	DeleteCustomUnsubscribeLink(ctx context.Context, in *DeleteCustomUnsubscribeLinkReq, opts ...grpc.CallOption) (*commons.Empty, error)
	// ListContactLists - retrieves all the contact lists
	ListContactLists(ctx context.Context, in *ListContactListsReq, opts ...grpc.CallOption) (*ListContactListsRes, error)
	// GetAvailableHeaders - retrieves all the available headers that could be present on a contact list
	// Required permissions:
	//
	//	OMNI_BOSS
	GetAvailableHeaders(ctx context.Context, in *GetAvailableHeadersReq, opts ...grpc.CallOption) (*GetAvailableHeadersRes, error)
	// GetTask - retrieves a task using the provided criteria
	// Required permissions:
	//
	//	OMNI_AGENT
	GetTask(ctx context.Context, in *GetTaskReq, opts ...grpc.CallOption) (*commons.OmniTask, error)
	// ListTasks - retrieves tasks using the provided criteria
	// Required permissions:
	//
	//	OMNI_BOSS
	ListTasks(ctx context.Context, in *ListTasksReq, opts ...grpc.CallOption) (*ListTasksRes, error)
	// CreateConnectedInbox - create a new connected inbox
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateConnectedInbox(ctx context.Context, in *commons.ConnectedInbox, opts ...grpc.CallOption) (*CreateConnectedInboxRes, error)
	// DeleteConnectedInboxBySid - deletes a connected inbox given it's identifier
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteConnectedInboxBySid(ctx context.Context, in *DeleteConnectedInboxBySidReq, opts ...grpc.CallOption) (*commons.Empty, error)
	// GetConnectedInboxBySid - retrieves a connected inbox given it's identifier
	// Required permissions:
	//
	//	OMNI_BOSS
	GetConnectedInboxBySid(ctx context.Context, in *GetConnectedInboxBySidReq, opts ...grpc.CallOption) (*commons.ConnectedInbox, error)
	// Perform sendgrid account check to make sure all the account settings are valid defined by SendgridAccountByClientReq message.
	// The method will return a SendgridAccountByClientRes message/entity that will
	// contain the result true/false verifying account settings with sendgrid for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	PerformSendgridAccountChecks(ctx context.Context, in *SendgridAccountByClientReq, opts ...grpc.CallOption) (*SendgridAccountByClientRes, error)
	// ListConnectedInboxes - retrieves all the connected inboxes for the organization
	// Required permissions:
	//
	//	OMNI_BOSS
	ListConnectedInboxes(ctx context.Context, in *ListConnectedInboxesReq, opts ...grpc.CallOption) (*ListConnectedInboxesRes, error)
	// TestConnectedInbox - check if connected inbox login works for a specified email_address,
	// username, password, server_name, and server_port (other fields from ConnectedInbox are ignored).
	// Required permissions:
	//
	//	OMNI_BOSS
	TestConnectedInbox(ctx context.Context, in *commons.ConnectedInbox, opts ...grpc.CallOption) (*TestConnectedInboxRes, error)
	// UpdateConnectedInbox - update a connected inbox
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateConnectedInbox(ctx context.Context, in *UpdateConnectedInboxReq, opts ...grpc.CallOption) (*commons.Empty, error)
	// CreateVerifiedEmail.  this will create a new verified email
	// Required permissions
	//
	//	OMNI_BOSS
	CreateVerifiedEmail(ctx context.Context, in *commons.VerifiedEmail, opts ...grpc.CallOption) (*CreateVerifiedEmailRes, error)
	// Send email notification defined by SendEmailNotificationReq message for the specified
	// subject, message and array of to email addresses.
	// The method will return a stream of SendEmailNotificationRes messages
	// containing result true/false after notified by email for the client_sid.
	// Required permissions:
	//
	//	OMNI_BOSS
	SendEmailNotification(ctx context.Context, in *SendEmailNotificationReq, opts ...grpc.CallOption) (*SendEmailNotificationRes, error)
	// Delete verify email record based on verified email id defined by
	// DeleteVerifiedEmailReq for the specified client.
	// This method will return a DeleteVerifiedEmailRes message/entity.
	// DeleteVerifiedEmail - deletes a verified email record using the given identifier
	// Required permissions
	//
	//	OMNI_BOSS
	DeleteVerifiedEmail(ctx context.Context, in *DeleteVerifiedEmailReq, opts ...grpc.CallOption) (*commons.Empty, error)
	// Get the verified email details based on verified email id defined by
	// GetVerifiedEmailByIdReq for the specified client.
	// This method will return an OmniVerifiedEmail message/entity.
	// Required permissions
	//
	//	OMNI_BOSS
	GetVerifiedEmailBySid(ctx context.Context, in *GetVerifiedEmailBySidReq, opts ...grpc.CallOption) (*commons.VerifiedEmail, error)
	// List all the verified emails and their details defined by
	// ListVerifiedEmailsReq for the specified client.
	// This method will return a ListVerifiedEmailsRes message/entity.
	// Required permissions
	//
	//	OMNI_BOSS
	ListVerifiedEmails(ctx context.Context, in *ListVerifiedEmailsReq, opts ...grpc.CallOption) (*ListVerifiedEmailsRes, error)
	// Resend verify email record based on verified email id defined by
	// ResendVerifiedEmailReq for the specified client.
	// This method will return a ResendVerifiedEmailRes message/entity.
	// Required permissions
	//
	//	OMNI_BOSS
	ResendVerifiedEmail(ctx context.Context, in *ResendVerifiedEmailReq, opts ...grpc.CallOption) (*ResendVerifiedEmailRes, error)
	// Updates verified email description
	UpdateVerifiedEmail(ctx context.Context, in *UpdateVerifiedEmailReq, opts ...grpc.CallOption) (*commons.Empty, error)
	// GetPendingGoogleXOAuth2Data - retrieves the pending oauth data required to finish creating a connected inbox
	// Required permissions:
	//
	//	OMNI_BOSS
	GetPendingGoogleXOAuth2Data(ctx context.Context, in *GetPendingGoogleXOAuth2DataReq, opts ...grpc.CallOption) (*GetPendingGoogleXOAuth2DataRes, error)
	// Send an email to our feedback system. The users email will be populated as the from address to open an email thread with our support.
	SendFeedbackEmail(ctx context.Context, in *SendFeedbackEmailReq, opts ...grpc.CallOption) (*SendFeedbackEmailRes, error)
	// GetOmniAttachment - retrieves the omni attachment details based on the request
	// Required permissions:
	//
	//	OMNI_BOSS
	GetOmniAttachment(ctx context.Context, in *GetOmniAttachmentReq, opts ...grpc.CallOption) (*commons.OmniAttachment, error)
	// Create a task with a given contat list .
	CreateTasks(ctx context.Context, in *CreateTasksReq, opts ...grpc.CallOption) (*CreateTasksRes, error)
	// CreateSignature - creates a new message signature
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateSignature(ctx context.Context, in *CreateSignatureReq, opts ...grpc.CallOption) (*CreateSignatureRes, error)
	// DeleteSignature - deletes a message signature
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteSignature(ctx context.Context, in *DeleteSignatureReq, opts ...grpc.CallOption) (*DeleteSignatureRes, error)
	// ListSignatures - retrieves the signatures created by the organization
	// Required permissions:
	//
	//	OMNI_BOSS
	ListSignatures(ctx context.Context, in *ListSignaturesReq, opts ...grpc.CallOption) (*ListSignaturesRes, error)
	// UpdateSignature - updates a message signature
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateSignature(ctx context.Context, in *UpdateSignatureReq, opts ...grpc.CallOption) (*UpdateSignatureRes, error)
}

type omniApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOmniApiClient(cc grpc.ClientConnInterface) OmniApiClient {
	return &omniApiClient{cc}
}

func (c *omniApiClient) ArchiveCampaign(ctx context.Context, in *ArchiveCampaignReq, opts ...grpc.CallOption) (*ArchiveCampaignRes, error) {
	out := new(ArchiveCampaignRes)
	err := c.cc.Invoke(ctx, OmniApi_ArchiveCampaign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) CreateCampaign(ctx context.Context, in *CreateCampaignReq, opts ...grpc.CallOption) (*commons.OmniCampaign, error) {
	out := new(commons.OmniCampaign)
	err := c.cc.Invoke(ctx, OmniApi_CreateCampaign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) GetCampaignById(ctx context.Context, in *GetCampaignByIdReq, opts ...grpc.CallOption) (*commons.OmniCampaign, error) {
	out := new(commons.OmniCampaign)
	err := c.cc.Invoke(ctx, OmniApi_GetCampaignById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) ListCampaigns(ctx context.Context, in *ListCampaignsReq, opts ...grpc.CallOption) (*ListCampaignsRes, error) {
	out := new(ListCampaignsRes)
	err := c.cc.Invoke(ctx, OmniApi_ListCampaigns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) PauseCampaign(ctx context.Context, in *PauseCampaignReq, opts ...grpc.CallOption) (*PauseCampaignRes, error) {
	out := new(PauseCampaignRes)
	err := c.cc.Invoke(ctx, OmniApi_PauseCampaign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) ResumeCampaign(ctx context.Context, in *ResumeCampaignReq, opts ...grpc.CallOption) (*ResumeCampaignRes, error) {
	out := new(ResumeCampaignRes)
	err := c.cc.Invoke(ctx, OmniApi_ResumeCampaign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) UpdateCampaign(ctx context.Context, in *UpdateCampaignReq, opts ...grpc.CallOption) (*UpdateCampaignRes, error) {
	out := new(UpdateCampaignRes)
	err := c.cc.Invoke(ctx, OmniApi_UpdateCampaign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) UpdateCampaignPacingSpeed(ctx context.Context, in *UpdateCampaignPacingSpeedReq, opts ...grpc.CallOption) (*UpdateCampaignPacingSpeedRes, error) {
	out := new(UpdateCampaignPacingSpeedRes)
	err := c.cc.Invoke(ctx, OmniApi_UpdateCampaignPacingSpeed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) GetOffLoadedTextMessage(ctx context.Context, in *GetOffLoadedTextMessageReq, opts ...grpc.CallOption) (*GetOffLoadedTextMessageRes, error) {
	out := new(GetOffLoadedTextMessageRes)
	err := c.cc.Invoke(ctx, OmniApi_GetOffLoadedTextMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) ManagerListMessages(ctx context.Context, in *ManagerListMessagesReq, opts ...grpc.CallOption) (OmniApi_ManagerListMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &OmniApi_ServiceDesc.Streams[0], OmniApi_ManagerListMessages_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &omniApiManagerListMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OmniApi_ManagerListMessagesClient interface {
	Recv() (*commons.OmniMessage, error)
	grpc.ClientStream
}

type omniApiManagerListMessagesClient struct {
	grpc.ClientStream
}

func (x *omniApiManagerListMessagesClient) Recv() (*commons.OmniMessage, error) {
	m := new(commons.OmniMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *omniApiClient) ListMessages(ctx context.Context, in *ListMessagesReq, opts ...grpc.CallOption) (OmniApi_ListMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &OmniApi_ServiceDesc.Streams[1], OmniApi_ListMessages_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &omniApiListMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OmniApi_ListMessagesClient interface {
	Recv() (*commons.OmniMessage, error)
	grpc.ClientStream
}

type omniApiListMessagesClient struct {
	grpc.ClientStream
}

func (x *omniApiListMessagesClient) Recv() (*commons.OmniMessage, error) {
	m := new(commons.OmniMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *omniApiClient) SendOmniMessage(ctx context.Context, in *SendOmniMessageReq, opts ...grpc.CallOption) (*commons.Empty, error) {
	out := new(commons.Empty)
	err := c.cc.Invoke(ctx, OmniApi_SendOmniMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) ManagerSendOmniMessage(ctx context.Context, in *SendOmniMessageReq, opts ...grpc.CallOption) (*commons.Empty, error) {
	out := new(commons.Empty)
	err := c.cc.Invoke(ctx, OmniApi_ManagerSendOmniMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) ManagerListConversations(ctx context.Context, in *ListConversationsReq, opts ...grpc.CallOption) (*ListConversationsRes, error) {
	out := new(ListConversationsRes)
	err := c.cc.Invoke(ctx, OmniApi_ManagerListConversations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) SuggestResponse(ctx context.Context, in *SuggestResponseReq, opts ...grpc.CallOption) (*SuggestResponseRes, error) {
	out := new(SuggestResponseRes)
	err := c.cc.Invoke(ctx, OmniApi_SuggestResponse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) CreateDisposition(ctx context.Context, in *CreateDispositionReq, opts ...grpc.CallOption) (*CreateDispositionRes, error) {
	out := new(CreateDispositionRes)
	err := c.cc.Invoke(ctx, OmniApi_CreateDisposition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) DeleteDisposition(ctx context.Context, in *DeleteDispositionReq, opts ...grpc.CallOption) (*commons.Empty, error) {
	out := new(commons.Empty)
	err := c.cc.Invoke(ctx, OmniApi_DeleteDisposition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) ListDispositions(ctx context.Context, in *ListDispositionsReq, opts ...grpc.CallOption) (*ListDispositionsRes, error) {
	out := new(ListDispositionsRes)
	err := c.cc.Invoke(ctx, OmniApi_ListDispositions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) UpdateDisposition(ctx context.Context, in *UpdateDispositionReq, opts ...grpc.CallOption) (*commons.Empty, error) {
	out := new(commons.Empty)
	err := c.cc.Invoke(ctx, OmniApi_UpdateDisposition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) ListCustomUnsubscribeLinks(ctx context.Context, in *commons.Empty, opts ...grpc.CallOption) (*ListCustomUnsubscribeLinksRes, error) {
	out := new(ListCustomUnsubscribeLinksRes)
	err := c.cc.Invoke(ctx, OmniApi_ListCustomUnsubscribeLinks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) CreateCustomUnsubscribeLink(ctx context.Context, in *commons.OmniCustomUnsubscribeLink, opts ...grpc.CallOption) (*CreateCustomUnsubscribeLinkRes, error) {
	out := new(CreateCustomUnsubscribeLinkRes)
	err := c.cc.Invoke(ctx, OmniApi_CreateCustomUnsubscribeLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) UpdateCustomUnsubscribeLink(ctx context.Context, in *UpdateCustomUnsubscribeLinkReq, opts ...grpc.CallOption) (*UpdateCustomUnsubscribeLinkRes, error) {
	out := new(UpdateCustomUnsubscribeLinkRes)
	err := c.cc.Invoke(ctx, OmniApi_UpdateCustomUnsubscribeLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) DeleteCustomUnsubscribeLink(ctx context.Context, in *DeleteCustomUnsubscribeLinkReq, opts ...grpc.CallOption) (*commons.Empty, error) {
	out := new(commons.Empty)
	err := c.cc.Invoke(ctx, OmniApi_DeleteCustomUnsubscribeLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) ListContactLists(ctx context.Context, in *ListContactListsReq, opts ...grpc.CallOption) (*ListContactListsRes, error) {
	out := new(ListContactListsRes)
	err := c.cc.Invoke(ctx, OmniApi_ListContactLists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) GetAvailableHeaders(ctx context.Context, in *GetAvailableHeadersReq, opts ...grpc.CallOption) (*GetAvailableHeadersRes, error) {
	out := new(GetAvailableHeadersRes)
	err := c.cc.Invoke(ctx, OmniApi_GetAvailableHeaders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) GetTask(ctx context.Context, in *GetTaskReq, opts ...grpc.CallOption) (*commons.OmniTask, error) {
	out := new(commons.OmniTask)
	err := c.cc.Invoke(ctx, OmniApi_GetTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) ListTasks(ctx context.Context, in *ListTasksReq, opts ...grpc.CallOption) (*ListTasksRes, error) {
	out := new(ListTasksRes)
	err := c.cc.Invoke(ctx, OmniApi_ListTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) CreateConnectedInbox(ctx context.Context, in *commons.ConnectedInbox, opts ...grpc.CallOption) (*CreateConnectedInboxRes, error) {
	out := new(CreateConnectedInboxRes)
	err := c.cc.Invoke(ctx, OmniApi_CreateConnectedInbox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) DeleteConnectedInboxBySid(ctx context.Context, in *DeleteConnectedInboxBySidReq, opts ...grpc.CallOption) (*commons.Empty, error) {
	out := new(commons.Empty)
	err := c.cc.Invoke(ctx, OmniApi_DeleteConnectedInboxBySid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) GetConnectedInboxBySid(ctx context.Context, in *GetConnectedInboxBySidReq, opts ...grpc.CallOption) (*commons.ConnectedInbox, error) {
	out := new(commons.ConnectedInbox)
	err := c.cc.Invoke(ctx, OmniApi_GetConnectedInboxBySid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) PerformSendgridAccountChecks(ctx context.Context, in *SendgridAccountByClientReq, opts ...grpc.CallOption) (*SendgridAccountByClientRes, error) {
	out := new(SendgridAccountByClientRes)
	err := c.cc.Invoke(ctx, OmniApi_PerformSendgridAccountChecks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) ListConnectedInboxes(ctx context.Context, in *ListConnectedInboxesReq, opts ...grpc.CallOption) (*ListConnectedInboxesRes, error) {
	out := new(ListConnectedInboxesRes)
	err := c.cc.Invoke(ctx, OmniApi_ListConnectedInboxes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) TestConnectedInbox(ctx context.Context, in *commons.ConnectedInbox, opts ...grpc.CallOption) (*TestConnectedInboxRes, error) {
	out := new(TestConnectedInboxRes)
	err := c.cc.Invoke(ctx, OmniApi_TestConnectedInbox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) UpdateConnectedInbox(ctx context.Context, in *UpdateConnectedInboxReq, opts ...grpc.CallOption) (*commons.Empty, error) {
	out := new(commons.Empty)
	err := c.cc.Invoke(ctx, OmniApi_UpdateConnectedInbox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) CreateVerifiedEmail(ctx context.Context, in *commons.VerifiedEmail, opts ...grpc.CallOption) (*CreateVerifiedEmailRes, error) {
	out := new(CreateVerifiedEmailRes)
	err := c.cc.Invoke(ctx, OmniApi_CreateVerifiedEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) SendEmailNotification(ctx context.Context, in *SendEmailNotificationReq, opts ...grpc.CallOption) (*SendEmailNotificationRes, error) {
	out := new(SendEmailNotificationRes)
	err := c.cc.Invoke(ctx, OmniApi_SendEmailNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) DeleteVerifiedEmail(ctx context.Context, in *DeleteVerifiedEmailReq, opts ...grpc.CallOption) (*commons.Empty, error) {
	out := new(commons.Empty)
	err := c.cc.Invoke(ctx, OmniApi_DeleteVerifiedEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) GetVerifiedEmailBySid(ctx context.Context, in *GetVerifiedEmailBySidReq, opts ...grpc.CallOption) (*commons.VerifiedEmail, error) {
	out := new(commons.VerifiedEmail)
	err := c.cc.Invoke(ctx, OmniApi_GetVerifiedEmailBySid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) ListVerifiedEmails(ctx context.Context, in *ListVerifiedEmailsReq, opts ...grpc.CallOption) (*ListVerifiedEmailsRes, error) {
	out := new(ListVerifiedEmailsRes)
	err := c.cc.Invoke(ctx, OmniApi_ListVerifiedEmails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) ResendVerifiedEmail(ctx context.Context, in *ResendVerifiedEmailReq, opts ...grpc.CallOption) (*ResendVerifiedEmailRes, error) {
	out := new(ResendVerifiedEmailRes)
	err := c.cc.Invoke(ctx, OmniApi_ResendVerifiedEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) UpdateVerifiedEmail(ctx context.Context, in *UpdateVerifiedEmailReq, opts ...grpc.CallOption) (*commons.Empty, error) {
	out := new(commons.Empty)
	err := c.cc.Invoke(ctx, OmniApi_UpdateVerifiedEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) GetPendingGoogleXOAuth2Data(ctx context.Context, in *GetPendingGoogleXOAuth2DataReq, opts ...grpc.CallOption) (*GetPendingGoogleXOAuth2DataRes, error) {
	out := new(GetPendingGoogleXOAuth2DataRes)
	err := c.cc.Invoke(ctx, OmniApi_GetPendingGoogleXOAuth2Data_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) SendFeedbackEmail(ctx context.Context, in *SendFeedbackEmailReq, opts ...grpc.CallOption) (*SendFeedbackEmailRes, error) {
	out := new(SendFeedbackEmailRes)
	err := c.cc.Invoke(ctx, OmniApi_SendFeedbackEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) GetOmniAttachment(ctx context.Context, in *GetOmniAttachmentReq, opts ...grpc.CallOption) (*commons.OmniAttachment, error) {
	out := new(commons.OmniAttachment)
	err := c.cc.Invoke(ctx, OmniApi_GetOmniAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) CreateTasks(ctx context.Context, in *CreateTasksReq, opts ...grpc.CallOption) (*CreateTasksRes, error) {
	out := new(CreateTasksRes)
	err := c.cc.Invoke(ctx, OmniApi_CreateTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) CreateSignature(ctx context.Context, in *CreateSignatureReq, opts ...grpc.CallOption) (*CreateSignatureRes, error) {
	out := new(CreateSignatureRes)
	err := c.cc.Invoke(ctx, OmniApi_CreateSignature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) DeleteSignature(ctx context.Context, in *DeleteSignatureReq, opts ...grpc.CallOption) (*DeleteSignatureRes, error) {
	out := new(DeleteSignatureRes)
	err := c.cc.Invoke(ctx, OmniApi_DeleteSignature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) ListSignatures(ctx context.Context, in *ListSignaturesReq, opts ...grpc.CallOption) (*ListSignaturesRes, error) {
	out := new(ListSignaturesRes)
	err := c.cc.Invoke(ctx, OmniApi_ListSignatures_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniApiClient) UpdateSignature(ctx context.Context, in *UpdateSignatureReq, opts ...grpc.CallOption) (*UpdateSignatureRes, error) {
	out := new(UpdateSignatureRes)
	err := c.cc.Invoke(ctx, OmniApi_UpdateSignature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OmniApiServer is the server API for OmniApi service.
// All implementations must embed UnimplementedOmniApiServer
// for forward compatibility
type OmniApiServer interface {
	// archive a campaign
	ArchiveCampaign(context.Context, *ArchiveCampaignReq) (*ArchiveCampaignRes, error)
	// Create Omni Campaign defined by CreateOmniCampaign message
	// for the name, skill, Hours of operations, and description.
	// the method will return newly created OmniCampaign for this client
	// Required Permission:
	//
	//	OMNI_BOSS
	CreateCampaign(context.Context, *CreateCampaignReq) (*commons.OmniCampaign, error)
	// Get campaign defined by GetChatCampaignById.
	GetCampaignById(context.Context, *GetCampaignByIdReq) (*commons.OmniCampaign, error)
	// List campaigns defined by ListCampaignsReq.
	// The method will return a ListCampaignsReq entity that will contain
	// all the campaigns within the specified filter.
	ListCampaigns(context.Context, *ListCampaignsReq) (*ListCampaignsRes, error)
	// pause a campaign
	PauseCampaign(context.Context, *PauseCampaignReq) (*PauseCampaignRes, error)
	// resume a campaign
	ResumeCampaign(context.Context, *ResumeCampaignReq) (*ResumeCampaignRes, error)
	// Updates a campaign
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateCampaign(context.Context, *UpdateCampaignReq) (*UpdateCampaignRes, error)
	// update campaign pacing - speed up/slow down a campaign
	UpdateCampaignPacingSpeed(context.Context, *UpdateCampaignPacingSpeedReq) (*UpdateCampaignPacingSpeedRes, error)
	// Get the text message for an off-loaded text message payload. Used
	// only for managers/agents/users. It is not for customers.
	GetOffLoadedTextMessage(context.Context, *GetOffLoadedTextMessageReq) (*GetOffLoadedTextMessageRes, error)
	// Get a stream of new conversation message for a given conversation. Used
	// only for managers. It is not for customers.
	ManagerListMessages(*ManagerListMessagesReq, OmniApi_ManagerListMessagesServer) error
	// Get a stream of conversation message for a given conversation. Used
	// only for agents/users. It is not for customers.
	ListMessages(*ListMessagesReq, OmniApi_ListMessagesServer) error
	// Send a chat message
	SendOmniMessage(context.Context, *SendOmniMessageReq) (*commons.Empty, error)
	// Send a chat message
	ManagerSendOmniMessage(context.Context, *SendOmniMessageReq) (*commons.Empty, error)
	// lists all conversation and assigned users for a given date range.
	// Required permissions:
	//
	//	OMNI_BOSS
	ManagerListConversations(context.Context, *ListConversationsReq) (*ListConversationsRes, error)
	// Experimental API
	SuggestResponse(context.Context, *SuggestResponseReq) (*SuggestResponseRes, error)
	// Create a disposition
	CreateDisposition(context.Context, *CreateDispositionReq) (*CreateDispositionRes, error)
	// DeleteDisposition - delete an existing disposition
	DeleteDisposition(context.Context, *DeleteDispositionReq) (*commons.Empty, error)
	// ListDispositions - lists all dispositions
	ListDispositions(context.Context, *ListDispositionsReq) (*ListDispositionsRes, error)
	// UpdateDisposition - update an existing disposition
	UpdateDisposition(context.Context, *UpdateDispositionReq) (*commons.Empty, error)
	// ListCustomUnsubscribeLinks - retrieves all the custom unsubscribe links
	ListCustomUnsubscribeLinks(context.Context, *commons.Empty) (*ListCustomUnsubscribeLinksRes, error)
	// CreateUnsubscribeLink - creates a new unsubscribe link
	CreateCustomUnsubscribeLink(context.Context, *commons.OmniCustomUnsubscribeLink) (*CreateCustomUnsubscribeLinkRes, error)
	// UpdateCustomUnsubscribeLink - update custom unsubscribe link details
	UpdateCustomUnsubscribeLink(context.Context, *UpdateCustomUnsubscribeLinkReq) (*UpdateCustomUnsubscribeLinkRes, error)
	// DeleteCustomUnsubscribeLink - deletes custom unsubscribe link details
	DeleteCustomUnsubscribeLink(context.Context, *DeleteCustomUnsubscribeLinkReq) (*commons.Empty, error)
	// ListContactLists - retrieves all the contact lists
	ListContactLists(context.Context, *ListContactListsReq) (*ListContactListsRes, error)
	// GetAvailableHeaders - retrieves all the available headers that could be present on a contact list
	// Required permissions:
	//
	//	OMNI_BOSS
	GetAvailableHeaders(context.Context, *GetAvailableHeadersReq) (*GetAvailableHeadersRes, error)
	// GetTask - retrieves a task using the provided criteria
	// Required permissions:
	//
	//	OMNI_AGENT
	GetTask(context.Context, *GetTaskReq) (*commons.OmniTask, error)
	// ListTasks - retrieves tasks using the provided criteria
	// Required permissions:
	//
	//	OMNI_BOSS
	ListTasks(context.Context, *ListTasksReq) (*ListTasksRes, error)
	// CreateConnectedInbox - create a new connected inbox
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateConnectedInbox(context.Context, *commons.ConnectedInbox) (*CreateConnectedInboxRes, error)
	// DeleteConnectedInboxBySid - deletes a connected inbox given it's identifier
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteConnectedInboxBySid(context.Context, *DeleteConnectedInboxBySidReq) (*commons.Empty, error)
	// GetConnectedInboxBySid - retrieves a connected inbox given it's identifier
	// Required permissions:
	//
	//	OMNI_BOSS
	GetConnectedInboxBySid(context.Context, *GetConnectedInboxBySidReq) (*commons.ConnectedInbox, error)
	// Perform sendgrid account check to make sure all the account settings are valid defined by SendgridAccountByClientReq message.
	// The method will return a SendgridAccountByClientRes message/entity that will
	// contain the result true/false verifying account settings with sendgrid for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	PerformSendgridAccountChecks(context.Context, *SendgridAccountByClientReq) (*SendgridAccountByClientRes, error)
	// ListConnectedInboxes - retrieves all the connected inboxes for the organization
	// Required permissions:
	//
	//	OMNI_BOSS
	ListConnectedInboxes(context.Context, *ListConnectedInboxesReq) (*ListConnectedInboxesRes, error)
	// TestConnectedInbox - check if connected inbox login works for a specified email_address,
	// username, password, server_name, and server_port (other fields from ConnectedInbox are ignored).
	// Required permissions:
	//
	//	OMNI_BOSS
	TestConnectedInbox(context.Context, *commons.ConnectedInbox) (*TestConnectedInboxRes, error)
	// UpdateConnectedInbox - update a connected inbox
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateConnectedInbox(context.Context, *UpdateConnectedInboxReq) (*commons.Empty, error)
	// CreateVerifiedEmail.  this will create a new verified email
	// Required permissions
	//
	//	OMNI_BOSS
	CreateVerifiedEmail(context.Context, *commons.VerifiedEmail) (*CreateVerifiedEmailRes, error)
	// Send email notification defined by SendEmailNotificationReq message for the specified
	// subject, message and array of to email addresses.
	// The method will return a stream of SendEmailNotificationRes messages
	// containing result true/false after notified by email for the client_sid.
	// Required permissions:
	//
	//	OMNI_BOSS
	SendEmailNotification(context.Context, *SendEmailNotificationReq) (*SendEmailNotificationRes, error)
	// Delete verify email record based on verified email id defined by
	// DeleteVerifiedEmailReq for the specified client.
	// This method will return a DeleteVerifiedEmailRes message/entity.
	// DeleteVerifiedEmail - deletes a verified email record using the given identifier
	// Required permissions
	//
	//	OMNI_BOSS
	DeleteVerifiedEmail(context.Context, *DeleteVerifiedEmailReq) (*commons.Empty, error)
	// Get the verified email details based on verified email id defined by
	// GetVerifiedEmailByIdReq for the specified client.
	// This method will return an OmniVerifiedEmail message/entity.
	// Required permissions
	//
	//	OMNI_BOSS
	GetVerifiedEmailBySid(context.Context, *GetVerifiedEmailBySidReq) (*commons.VerifiedEmail, error)
	// List all the verified emails and their details defined by
	// ListVerifiedEmailsReq for the specified client.
	// This method will return a ListVerifiedEmailsRes message/entity.
	// Required permissions
	//
	//	OMNI_BOSS
	ListVerifiedEmails(context.Context, *ListVerifiedEmailsReq) (*ListVerifiedEmailsRes, error)
	// Resend verify email record based on verified email id defined by
	// ResendVerifiedEmailReq for the specified client.
	// This method will return a ResendVerifiedEmailRes message/entity.
	// Required permissions
	//
	//	OMNI_BOSS
	ResendVerifiedEmail(context.Context, *ResendVerifiedEmailReq) (*ResendVerifiedEmailRes, error)
	// Updates verified email description
	UpdateVerifiedEmail(context.Context, *UpdateVerifiedEmailReq) (*commons.Empty, error)
	// GetPendingGoogleXOAuth2Data - retrieves the pending oauth data required to finish creating a connected inbox
	// Required permissions:
	//
	//	OMNI_BOSS
	GetPendingGoogleXOAuth2Data(context.Context, *GetPendingGoogleXOAuth2DataReq) (*GetPendingGoogleXOAuth2DataRes, error)
	// Send an email to our feedback system. The users email will be populated as the from address to open an email thread with our support.
	SendFeedbackEmail(context.Context, *SendFeedbackEmailReq) (*SendFeedbackEmailRes, error)
	// GetOmniAttachment - retrieves the omni attachment details based on the request
	// Required permissions:
	//
	//	OMNI_BOSS
	GetOmniAttachment(context.Context, *GetOmniAttachmentReq) (*commons.OmniAttachment, error)
	// Create a task with a given contat list .
	CreateTasks(context.Context, *CreateTasksReq) (*CreateTasksRes, error)
	// CreateSignature - creates a new message signature
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateSignature(context.Context, *CreateSignatureReq) (*CreateSignatureRes, error)
	// DeleteSignature - deletes a message signature
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteSignature(context.Context, *DeleteSignatureReq) (*DeleteSignatureRes, error)
	// ListSignatures - retrieves the signatures created by the organization
	// Required permissions:
	//
	//	OMNI_BOSS
	ListSignatures(context.Context, *ListSignaturesReq) (*ListSignaturesRes, error)
	// UpdateSignature - updates a message signature
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateSignature(context.Context, *UpdateSignatureReq) (*UpdateSignatureRes, error)
	mustEmbedUnimplementedOmniApiServer()
}

// UnimplementedOmniApiServer must be embedded to have forward compatible implementations.
type UnimplementedOmniApiServer struct {
}

func (UnimplementedOmniApiServer) ArchiveCampaign(context.Context, *ArchiveCampaignReq) (*ArchiveCampaignRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveCampaign not implemented")
}
func (UnimplementedOmniApiServer) CreateCampaign(context.Context, *CreateCampaignReq) (*commons.OmniCampaign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCampaign not implemented")
}
func (UnimplementedOmniApiServer) GetCampaignById(context.Context, *GetCampaignByIdReq) (*commons.OmniCampaign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaignById not implemented")
}
func (UnimplementedOmniApiServer) ListCampaigns(context.Context, *ListCampaignsReq) (*ListCampaignsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCampaigns not implemented")
}
func (UnimplementedOmniApiServer) PauseCampaign(context.Context, *PauseCampaignReq) (*PauseCampaignRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseCampaign not implemented")
}
func (UnimplementedOmniApiServer) ResumeCampaign(context.Context, *ResumeCampaignReq) (*ResumeCampaignRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeCampaign not implemented")
}
func (UnimplementedOmniApiServer) UpdateCampaign(context.Context, *UpdateCampaignReq) (*UpdateCampaignRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCampaign not implemented")
}
func (UnimplementedOmniApiServer) UpdateCampaignPacingSpeed(context.Context, *UpdateCampaignPacingSpeedReq) (*UpdateCampaignPacingSpeedRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCampaignPacingSpeed not implemented")
}
func (UnimplementedOmniApiServer) GetOffLoadedTextMessage(context.Context, *GetOffLoadedTextMessageReq) (*GetOffLoadedTextMessageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOffLoadedTextMessage not implemented")
}
func (UnimplementedOmniApiServer) ManagerListMessages(*ManagerListMessagesReq, OmniApi_ManagerListMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ManagerListMessages not implemented")
}
func (UnimplementedOmniApiServer) ListMessages(*ListMessagesReq, OmniApi_ListMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedOmniApiServer) SendOmniMessage(context.Context, *SendOmniMessageReq) (*commons.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOmniMessage not implemented")
}
func (UnimplementedOmniApiServer) ManagerSendOmniMessage(context.Context, *SendOmniMessageReq) (*commons.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManagerSendOmniMessage not implemented")
}
func (UnimplementedOmniApiServer) ManagerListConversations(context.Context, *ListConversationsReq) (*ListConversationsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManagerListConversations not implemented")
}
func (UnimplementedOmniApiServer) SuggestResponse(context.Context, *SuggestResponseReq) (*SuggestResponseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestResponse not implemented")
}
func (UnimplementedOmniApiServer) CreateDisposition(context.Context, *CreateDispositionReq) (*CreateDispositionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDisposition not implemented")
}
func (UnimplementedOmniApiServer) DeleteDisposition(context.Context, *DeleteDispositionReq) (*commons.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDisposition not implemented")
}
func (UnimplementedOmniApiServer) ListDispositions(context.Context, *ListDispositionsReq) (*ListDispositionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDispositions not implemented")
}
func (UnimplementedOmniApiServer) UpdateDisposition(context.Context, *UpdateDispositionReq) (*commons.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDisposition not implemented")
}
func (UnimplementedOmniApiServer) ListCustomUnsubscribeLinks(context.Context, *commons.Empty) (*ListCustomUnsubscribeLinksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomUnsubscribeLinks not implemented")
}
func (UnimplementedOmniApiServer) CreateCustomUnsubscribeLink(context.Context, *commons.OmniCustomUnsubscribeLink) (*CreateCustomUnsubscribeLinkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomUnsubscribeLink not implemented")
}
func (UnimplementedOmniApiServer) UpdateCustomUnsubscribeLink(context.Context, *UpdateCustomUnsubscribeLinkReq) (*UpdateCustomUnsubscribeLinkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomUnsubscribeLink not implemented")
}
func (UnimplementedOmniApiServer) DeleteCustomUnsubscribeLink(context.Context, *DeleteCustomUnsubscribeLinkReq) (*commons.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomUnsubscribeLink not implemented")
}
func (UnimplementedOmniApiServer) ListContactLists(context.Context, *ListContactListsReq) (*ListContactListsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContactLists not implemented")
}
func (UnimplementedOmniApiServer) GetAvailableHeaders(context.Context, *GetAvailableHeadersReq) (*GetAvailableHeadersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableHeaders not implemented")
}
func (UnimplementedOmniApiServer) GetTask(context.Context, *GetTaskReq) (*commons.OmniTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedOmniApiServer) ListTasks(context.Context, *ListTasksReq) (*ListTasksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedOmniApiServer) CreateConnectedInbox(context.Context, *commons.ConnectedInbox) (*CreateConnectedInboxRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnectedInbox not implemented")
}
func (UnimplementedOmniApiServer) DeleteConnectedInboxBySid(context.Context, *DeleteConnectedInboxBySidReq) (*commons.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnectedInboxBySid not implemented")
}
func (UnimplementedOmniApiServer) GetConnectedInboxBySid(context.Context, *GetConnectedInboxBySidReq) (*commons.ConnectedInbox, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectedInboxBySid not implemented")
}
func (UnimplementedOmniApiServer) PerformSendgridAccountChecks(context.Context, *SendgridAccountByClientReq) (*SendgridAccountByClientRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformSendgridAccountChecks not implemented")
}
func (UnimplementedOmniApiServer) ListConnectedInboxes(context.Context, *ListConnectedInboxesReq) (*ListConnectedInboxesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectedInboxes not implemented")
}
func (UnimplementedOmniApiServer) TestConnectedInbox(context.Context, *commons.ConnectedInbox) (*TestConnectedInboxRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestConnectedInbox not implemented")
}
func (UnimplementedOmniApiServer) UpdateConnectedInbox(context.Context, *UpdateConnectedInboxReq) (*commons.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnectedInbox not implemented")
}
func (UnimplementedOmniApiServer) CreateVerifiedEmail(context.Context, *commons.VerifiedEmail) (*CreateVerifiedEmailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVerifiedEmail not implemented")
}
func (UnimplementedOmniApiServer) SendEmailNotification(context.Context, *SendEmailNotificationReq) (*SendEmailNotificationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailNotification not implemented")
}
func (UnimplementedOmniApiServer) DeleteVerifiedEmail(context.Context, *DeleteVerifiedEmailReq) (*commons.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVerifiedEmail not implemented")
}
func (UnimplementedOmniApiServer) GetVerifiedEmailBySid(context.Context, *GetVerifiedEmailBySidReq) (*commons.VerifiedEmail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVerifiedEmailBySid not implemented")
}
func (UnimplementedOmniApiServer) ListVerifiedEmails(context.Context, *ListVerifiedEmailsReq) (*ListVerifiedEmailsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVerifiedEmails not implemented")
}
func (UnimplementedOmniApiServer) ResendVerifiedEmail(context.Context, *ResendVerifiedEmailReq) (*ResendVerifiedEmailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendVerifiedEmail not implemented")
}
func (UnimplementedOmniApiServer) UpdateVerifiedEmail(context.Context, *UpdateVerifiedEmailReq) (*commons.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVerifiedEmail not implemented")
}
func (UnimplementedOmniApiServer) GetPendingGoogleXOAuth2Data(context.Context, *GetPendingGoogleXOAuth2DataReq) (*GetPendingGoogleXOAuth2DataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingGoogleXOAuth2Data not implemented")
}
func (UnimplementedOmniApiServer) SendFeedbackEmail(context.Context, *SendFeedbackEmailReq) (*SendFeedbackEmailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFeedbackEmail not implemented")
}
func (UnimplementedOmniApiServer) GetOmniAttachment(context.Context, *GetOmniAttachmentReq) (*commons.OmniAttachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOmniAttachment not implemented")
}
func (UnimplementedOmniApiServer) CreateTasks(context.Context, *CreateTasksReq) (*CreateTasksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTasks not implemented")
}
func (UnimplementedOmniApiServer) CreateSignature(context.Context, *CreateSignatureReq) (*CreateSignatureRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSignature not implemented")
}
func (UnimplementedOmniApiServer) DeleteSignature(context.Context, *DeleteSignatureReq) (*DeleteSignatureRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSignature not implemented")
}
func (UnimplementedOmniApiServer) ListSignatures(context.Context, *ListSignaturesReq) (*ListSignaturesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSignatures not implemented")
}
func (UnimplementedOmniApiServer) UpdateSignature(context.Context, *UpdateSignatureReq) (*UpdateSignatureRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSignature not implemented")
}
func (UnimplementedOmniApiServer) mustEmbedUnimplementedOmniApiServer() {}

// UnsafeOmniApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OmniApiServer will
// result in compilation errors.
type UnsafeOmniApiServer interface {
	mustEmbedUnimplementedOmniApiServer()
}

func RegisterOmniApiServer(s grpc.ServiceRegistrar, srv OmniApiServer) {
	s.RegisterService(&OmniApi_ServiceDesc, srv)
}

func _OmniApi_ArchiveCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveCampaignReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).ArchiveCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_ArchiveCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).ArchiveCampaign(ctx, req.(*ArchiveCampaignReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_CreateCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCampaignReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).CreateCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_CreateCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).CreateCampaign(ctx, req.(*CreateCampaignReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_GetCampaignById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCampaignByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).GetCampaignById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_GetCampaignById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).GetCampaignById(ctx, req.(*GetCampaignByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_ListCampaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCampaignsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).ListCampaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_ListCampaigns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).ListCampaigns(ctx, req.(*ListCampaignsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_PauseCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseCampaignReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).PauseCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_PauseCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).PauseCampaign(ctx, req.(*PauseCampaignReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_ResumeCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeCampaignReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).ResumeCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_ResumeCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).ResumeCampaign(ctx, req.(*ResumeCampaignReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_UpdateCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCampaignReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).UpdateCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_UpdateCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).UpdateCampaign(ctx, req.(*UpdateCampaignReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_UpdateCampaignPacingSpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCampaignPacingSpeedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).UpdateCampaignPacingSpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_UpdateCampaignPacingSpeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).UpdateCampaignPacingSpeed(ctx, req.(*UpdateCampaignPacingSpeedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_GetOffLoadedTextMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOffLoadedTextMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).GetOffLoadedTextMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_GetOffLoadedTextMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).GetOffLoadedTextMessage(ctx, req.(*GetOffLoadedTextMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_ManagerListMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ManagerListMessagesReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OmniApiServer).ManagerListMessages(m, &omniApiManagerListMessagesServer{stream})
}

type OmniApi_ManagerListMessagesServer interface {
	Send(*commons.OmniMessage) error
	grpc.ServerStream
}

type omniApiManagerListMessagesServer struct {
	grpc.ServerStream
}

func (x *omniApiManagerListMessagesServer) Send(m *commons.OmniMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _OmniApi_ListMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListMessagesReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OmniApiServer).ListMessages(m, &omniApiListMessagesServer{stream})
}

type OmniApi_ListMessagesServer interface {
	Send(*commons.OmniMessage) error
	grpc.ServerStream
}

type omniApiListMessagesServer struct {
	grpc.ServerStream
}

func (x *omniApiListMessagesServer) Send(m *commons.OmniMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _OmniApi_SendOmniMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOmniMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).SendOmniMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_SendOmniMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).SendOmniMessage(ctx, req.(*SendOmniMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_ManagerSendOmniMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOmniMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).ManagerSendOmniMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_ManagerSendOmniMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).ManagerSendOmniMessage(ctx, req.(*SendOmniMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_ManagerListConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).ManagerListConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_ManagerListConversations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).ManagerListConversations(ctx, req.(*ListConversationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_SuggestResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestResponseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).SuggestResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_SuggestResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).SuggestResponse(ctx, req.(*SuggestResponseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_CreateDisposition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDispositionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).CreateDisposition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_CreateDisposition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).CreateDisposition(ctx, req.(*CreateDispositionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_DeleteDisposition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDispositionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).DeleteDisposition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_DeleteDisposition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).DeleteDisposition(ctx, req.(*DeleteDispositionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_ListDispositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDispositionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).ListDispositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_ListDispositions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).ListDispositions(ctx, req.(*ListDispositionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_UpdateDisposition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDispositionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).UpdateDisposition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_UpdateDisposition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).UpdateDisposition(ctx, req.(*UpdateDispositionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_ListCustomUnsubscribeLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commons.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).ListCustomUnsubscribeLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_ListCustomUnsubscribeLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).ListCustomUnsubscribeLinks(ctx, req.(*commons.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_CreateCustomUnsubscribeLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commons.OmniCustomUnsubscribeLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).CreateCustomUnsubscribeLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_CreateCustomUnsubscribeLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).CreateCustomUnsubscribeLink(ctx, req.(*commons.OmniCustomUnsubscribeLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_UpdateCustomUnsubscribeLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomUnsubscribeLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).UpdateCustomUnsubscribeLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_UpdateCustomUnsubscribeLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).UpdateCustomUnsubscribeLink(ctx, req.(*UpdateCustomUnsubscribeLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_DeleteCustomUnsubscribeLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomUnsubscribeLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).DeleteCustomUnsubscribeLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_DeleteCustomUnsubscribeLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).DeleteCustomUnsubscribeLink(ctx, req.(*DeleteCustomUnsubscribeLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_ListContactLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContactListsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).ListContactLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_ListContactLists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).ListContactLists(ctx, req.(*ListContactListsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_GetAvailableHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableHeadersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).GetAvailableHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_GetAvailableHeaders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).GetAvailableHeaders(ctx, req.(*GetAvailableHeadersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).GetTask(ctx, req.(*GetTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_ListTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).ListTasks(ctx, req.(*ListTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_CreateConnectedInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commons.ConnectedInbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).CreateConnectedInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_CreateConnectedInbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).CreateConnectedInbox(ctx, req.(*commons.ConnectedInbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_DeleteConnectedInboxBySid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectedInboxBySidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).DeleteConnectedInboxBySid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_DeleteConnectedInboxBySid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).DeleteConnectedInboxBySid(ctx, req.(*DeleteConnectedInboxBySidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_GetConnectedInboxBySid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectedInboxBySidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).GetConnectedInboxBySid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_GetConnectedInboxBySid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).GetConnectedInboxBySid(ctx, req.(*GetConnectedInboxBySidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_PerformSendgridAccountChecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendgridAccountByClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).PerformSendgridAccountChecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_PerformSendgridAccountChecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).PerformSendgridAccountChecks(ctx, req.(*SendgridAccountByClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_ListConnectedInboxes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectedInboxesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).ListConnectedInboxes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_ListConnectedInboxes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).ListConnectedInboxes(ctx, req.(*ListConnectedInboxesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_TestConnectedInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commons.ConnectedInbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).TestConnectedInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_TestConnectedInbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).TestConnectedInbox(ctx, req.(*commons.ConnectedInbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_UpdateConnectedInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectedInboxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).UpdateConnectedInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_UpdateConnectedInbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).UpdateConnectedInbox(ctx, req.(*UpdateConnectedInboxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_CreateVerifiedEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commons.VerifiedEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).CreateVerifiedEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_CreateVerifiedEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).CreateVerifiedEmail(ctx, req.(*commons.VerifiedEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_SendEmailNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailNotificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).SendEmailNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_SendEmailNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).SendEmailNotification(ctx, req.(*SendEmailNotificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_DeleteVerifiedEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVerifiedEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).DeleteVerifiedEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_DeleteVerifiedEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).DeleteVerifiedEmail(ctx, req.(*DeleteVerifiedEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_GetVerifiedEmailBySid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVerifiedEmailBySidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).GetVerifiedEmailBySid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_GetVerifiedEmailBySid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).GetVerifiedEmailBySid(ctx, req.(*GetVerifiedEmailBySidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_ListVerifiedEmails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVerifiedEmailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).ListVerifiedEmails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_ListVerifiedEmails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).ListVerifiedEmails(ctx, req.(*ListVerifiedEmailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_ResendVerifiedEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendVerifiedEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).ResendVerifiedEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_ResendVerifiedEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).ResendVerifiedEmail(ctx, req.(*ResendVerifiedEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_UpdateVerifiedEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVerifiedEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).UpdateVerifiedEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_UpdateVerifiedEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).UpdateVerifiedEmail(ctx, req.(*UpdateVerifiedEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_GetPendingGoogleXOAuth2Data_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPendingGoogleXOAuth2DataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).GetPendingGoogleXOAuth2Data(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_GetPendingGoogleXOAuth2Data_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).GetPendingGoogleXOAuth2Data(ctx, req.(*GetPendingGoogleXOAuth2DataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_SendFeedbackEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendFeedbackEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).SendFeedbackEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_SendFeedbackEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).SendFeedbackEmail(ctx, req.(*SendFeedbackEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_GetOmniAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOmniAttachmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).GetOmniAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_GetOmniAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).GetOmniAttachment(ctx, req.(*GetOmniAttachmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_CreateTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).CreateTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_CreateTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).CreateTasks(ctx, req.(*CreateTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_CreateSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSignatureReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).CreateSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_CreateSignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).CreateSignature(ctx, req.(*CreateSignatureReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_DeleteSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSignatureReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).DeleteSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_DeleteSignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).DeleteSignature(ctx, req.(*DeleteSignatureReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_ListSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSignaturesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).ListSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_ListSignatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).ListSignatures(ctx, req.(*ListSignaturesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniApi_UpdateSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSignatureReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniApiServer).UpdateSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniApi_UpdateSignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniApiServer).UpdateSignature(ctx, req.(*UpdateSignatureReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OmniApi_ServiceDesc is the grpc.ServiceDesc for OmniApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OmniApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v0alpha.OmniApi",
	HandlerType: (*OmniApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ArchiveCampaign",
			Handler:    _OmniApi_ArchiveCampaign_Handler,
		},
		{
			MethodName: "CreateCampaign",
			Handler:    _OmniApi_CreateCampaign_Handler,
		},
		{
			MethodName: "GetCampaignById",
			Handler:    _OmniApi_GetCampaignById_Handler,
		},
		{
			MethodName: "ListCampaigns",
			Handler:    _OmniApi_ListCampaigns_Handler,
		},
		{
			MethodName: "PauseCampaign",
			Handler:    _OmniApi_PauseCampaign_Handler,
		},
		{
			MethodName: "ResumeCampaign",
			Handler:    _OmniApi_ResumeCampaign_Handler,
		},
		{
			MethodName: "UpdateCampaign",
			Handler:    _OmniApi_UpdateCampaign_Handler,
		},
		{
			MethodName: "UpdateCampaignPacingSpeed",
			Handler:    _OmniApi_UpdateCampaignPacingSpeed_Handler,
		},
		{
			MethodName: "GetOffLoadedTextMessage",
			Handler:    _OmniApi_GetOffLoadedTextMessage_Handler,
		},
		{
			MethodName: "SendOmniMessage",
			Handler:    _OmniApi_SendOmniMessage_Handler,
		},
		{
			MethodName: "ManagerSendOmniMessage",
			Handler:    _OmniApi_ManagerSendOmniMessage_Handler,
		},
		{
			MethodName: "ManagerListConversations",
			Handler:    _OmniApi_ManagerListConversations_Handler,
		},
		{
			MethodName: "SuggestResponse",
			Handler:    _OmniApi_SuggestResponse_Handler,
		},
		{
			MethodName: "CreateDisposition",
			Handler:    _OmniApi_CreateDisposition_Handler,
		},
		{
			MethodName: "DeleteDisposition",
			Handler:    _OmniApi_DeleteDisposition_Handler,
		},
		{
			MethodName: "ListDispositions",
			Handler:    _OmniApi_ListDispositions_Handler,
		},
		{
			MethodName: "UpdateDisposition",
			Handler:    _OmniApi_UpdateDisposition_Handler,
		},
		{
			MethodName: "ListCustomUnsubscribeLinks",
			Handler:    _OmniApi_ListCustomUnsubscribeLinks_Handler,
		},
		{
			MethodName: "CreateCustomUnsubscribeLink",
			Handler:    _OmniApi_CreateCustomUnsubscribeLink_Handler,
		},
		{
			MethodName: "UpdateCustomUnsubscribeLink",
			Handler:    _OmniApi_UpdateCustomUnsubscribeLink_Handler,
		},
		{
			MethodName: "DeleteCustomUnsubscribeLink",
			Handler:    _OmniApi_DeleteCustomUnsubscribeLink_Handler,
		},
		{
			MethodName: "ListContactLists",
			Handler:    _OmniApi_ListContactLists_Handler,
		},
		{
			MethodName: "GetAvailableHeaders",
			Handler:    _OmniApi_GetAvailableHeaders_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _OmniApi_GetTask_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _OmniApi_ListTasks_Handler,
		},
		{
			MethodName: "CreateConnectedInbox",
			Handler:    _OmniApi_CreateConnectedInbox_Handler,
		},
		{
			MethodName: "DeleteConnectedInboxBySid",
			Handler:    _OmniApi_DeleteConnectedInboxBySid_Handler,
		},
		{
			MethodName: "GetConnectedInboxBySid",
			Handler:    _OmniApi_GetConnectedInboxBySid_Handler,
		},
		{
			MethodName: "PerformSendgridAccountChecks",
			Handler:    _OmniApi_PerformSendgridAccountChecks_Handler,
		},
		{
			MethodName: "ListConnectedInboxes",
			Handler:    _OmniApi_ListConnectedInboxes_Handler,
		},
		{
			MethodName: "TestConnectedInbox",
			Handler:    _OmniApi_TestConnectedInbox_Handler,
		},
		{
			MethodName: "UpdateConnectedInbox",
			Handler:    _OmniApi_UpdateConnectedInbox_Handler,
		},
		{
			MethodName: "CreateVerifiedEmail",
			Handler:    _OmniApi_CreateVerifiedEmail_Handler,
		},
		{
			MethodName: "SendEmailNotification",
			Handler:    _OmniApi_SendEmailNotification_Handler,
		},
		{
			MethodName: "DeleteVerifiedEmail",
			Handler:    _OmniApi_DeleteVerifiedEmail_Handler,
		},
		{
			MethodName: "GetVerifiedEmailBySid",
			Handler:    _OmniApi_GetVerifiedEmailBySid_Handler,
		},
		{
			MethodName: "ListVerifiedEmails",
			Handler:    _OmniApi_ListVerifiedEmails_Handler,
		},
		{
			MethodName: "ResendVerifiedEmail",
			Handler:    _OmniApi_ResendVerifiedEmail_Handler,
		},
		{
			MethodName: "UpdateVerifiedEmail",
			Handler:    _OmniApi_UpdateVerifiedEmail_Handler,
		},
		{
			MethodName: "GetPendingGoogleXOAuth2Data",
			Handler:    _OmniApi_GetPendingGoogleXOAuth2Data_Handler,
		},
		{
			MethodName: "SendFeedbackEmail",
			Handler:    _OmniApi_SendFeedbackEmail_Handler,
		},
		{
			MethodName: "GetOmniAttachment",
			Handler:    _OmniApi_GetOmniAttachment_Handler,
		},
		{
			MethodName: "CreateTasks",
			Handler:    _OmniApi_CreateTasks_Handler,
		},
		{
			MethodName: "CreateSignature",
			Handler:    _OmniApi_CreateSignature_Handler,
		},
		{
			MethodName: "DeleteSignature",
			Handler:    _OmniApi_DeleteSignature_Handler,
		},
		{
			MethodName: "ListSignatures",
			Handler:    _OmniApi_ListSignatures_Handler,
		},
		{
			MethodName: "UpdateSignature",
			Handler:    _OmniApi_UpdateSignature_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ManagerListMessages",
			Handler:       _OmniApi_ManagerListMessages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListMessages",
			Handler:       _OmniApi_ListMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v0alpha/omniapi.proto",
}
