// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v0alpha/sds.proto

package v0alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Sds_GetAgentResponseData_FullMethodName    = "/api.v0alpha.Sds/GetAgentResponseData"
	Sds_GetCall_FullMethodName                 = "/api.v0alpha.Sds/GetCall"
	Sds_UpdateAgentResponseData_FullMethodName = "/api.v0alpha.Sds/UpdateAgentResponseData"
	Sds_UpdateVoicemailBox_FullMethodName      = "/api.v0alpha.Sds/UpdateVoicemailBox"
)

// SdsClient is the client API for Sds service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SdsClient interface {
	// Gets the agent_response_data field for a document in the mongodb calls collection.
	GetAgentResponseData(ctx context.Context, in *GetAgentResponseDataReq, opts ...grpc.CallOption) (*GetAgentResponseDataRes, error)
	// Gets a document from the mongodb calls collection.
	GetCall(ctx context.Context, in *GetCallReq, opts ...grpc.CallOption) (*CallObject, error)
	// Updates the agent_response_data field for a document in the mongodb calls collection.
	UpdateAgentResponseData(ctx context.Context, in *UpdateAgentResponseDataReq, opts ...grpc.CallOption) (*UpdateAgentResponseDataRes, error)
	// Updates the voicemail_box field for a document in the mongodb calls collection.
	UpdateVoicemailBox(ctx context.Context, in *UpdateVoicemailBoxReq, opts ...grpc.CallOption) (*UpdateVoicemailBoxRes, error)
}

type sdsClient struct {
	cc grpc.ClientConnInterface
}

func NewSdsClient(cc grpc.ClientConnInterface) SdsClient {
	return &sdsClient{cc}
}

func (c *sdsClient) GetAgentResponseData(ctx context.Context, in *GetAgentResponseDataReq, opts ...grpc.CallOption) (*GetAgentResponseDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentResponseDataRes)
	err := c.cc.Invoke(ctx, Sds_GetAgentResponseData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdsClient) GetCall(ctx context.Context, in *GetCallReq, opts ...grpc.CallOption) (*CallObject, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CallObject)
	err := c.cc.Invoke(ctx, Sds_GetCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdsClient) UpdateAgentResponseData(ctx context.Context, in *UpdateAgentResponseDataReq, opts ...grpc.CallOption) (*UpdateAgentResponseDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAgentResponseDataRes)
	err := c.cc.Invoke(ctx, Sds_UpdateAgentResponseData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdsClient) UpdateVoicemailBox(ctx context.Context, in *UpdateVoicemailBoxReq, opts ...grpc.CallOption) (*UpdateVoicemailBoxRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVoicemailBoxRes)
	err := c.cc.Invoke(ctx, Sds_UpdateVoicemailBox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SdsServer is the server API for Sds service.
// All implementations must embed UnimplementedSdsServer
// for forward compatibility.
type SdsServer interface {
	// Gets the agent_response_data field for a document in the mongodb calls collection.
	GetAgentResponseData(context.Context, *GetAgentResponseDataReq) (*GetAgentResponseDataRes, error)
	// Gets a document from the mongodb calls collection.
	GetCall(context.Context, *GetCallReq) (*CallObject, error)
	// Updates the agent_response_data field for a document in the mongodb calls collection.
	UpdateAgentResponseData(context.Context, *UpdateAgentResponseDataReq) (*UpdateAgentResponseDataRes, error)
	// Updates the voicemail_box field for a document in the mongodb calls collection.
	UpdateVoicemailBox(context.Context, *UpdateVoicemailBoxReq) (*UpdateVoicemailBoxRes, error)
	mustEmbedUnimplementedSdsServer()
}

// UnimplementedSdsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSdsServer struct{}

func (UnimplementedSdsServer) GetAgentResponseData(context.Context, *GetAgentResponseDataReq) (*GetAgentResponseDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentResponseData not implemented")
}
func (UnimplementedSdsServer) GetCall(context.Context, *GetCallReq) (*CallObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCall not implemented")
}
func (UnimplementedSdsServer) UpdateAgentResponseData(context.Context, *UpdateAgentResponseDataReq) (*UpdateAgentResponseDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentResponseData not implemented")
}
func (UnimplementedSdsServer) UpdateVoicemailBox(context.Context, *UpdateVoicemailBoxReq) (*UpdateVoicemailBoxRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVoicemailBox not implemented")
}
func (UnimplementedSdsServer) mustEmbedUnimplementedSdsServer() {}
func (UnimplementedSdsServer) testEmbeddedByValue()             {}

// UnsafeSdsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SdsServer will
// result in compilation errors.
type UnsafeSdsServer interface {
	mustEmbedUnimplementedSdsServer()
}

func RegisterSdsServer(s grpc.ServiceRegistrar, srv SdsServer) {
	// If the following call pancis, it indicates UnimplementedSdsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Sds_ServiceDesc, srv)
}

func _Sds_GetAgentResponseData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentResponseDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdsServer).GetAgentResponseData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sds_GetAgentResponseData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdsServer).GetAgentResponseData(ctx, req.(*GetAgentResponseDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sds_GetCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdsServer).GetCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sds_GetCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdsServer).GetCall(ctx, req.(*GetCallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sds_UpdateAgentResponseData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentResponseDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdsServer).UpdateAgentResponseData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sds_UpdateAgentResponseData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdsServer).UpdateAgentResponseData(ctx, req.(*UpdateAgentResponseDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sds_UpdateVoicemailBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVoicemailBoxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdsServer).UpdateVoicemailBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sds_UpdateVoicemailBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdsServer).UpdateVoicemailBox(ctx, req.(*UpdateVoicemailBoxReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Sds_ServiceDesc is the grpc.ServiceDesc for Sds service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sds_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v0alpha.Sds",
	HandlerType: (*SdsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAgentResponseData",
			Handler:    _Sds_GetAgentResponseData_Handler,
		},
		{
			MethodName: "GetCall",
			Handler:    _Sds_GetCall_Handler,
		},
		{
			MethodName: "UpdateAgentResponseData",
			Handler:    _Sds_UpdateAgentResponseData_Handler,
		},
		{
			MethodName: "UpdateVoicemailBox",
			Handler:    _Sds_UpdateVoicemailBox_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v0alpha/sds.proto",
}
