// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: api/v0alpha/cbs.proto

package v0alpha

import (
	_ "github.com/tcncloud/api-go/annotations"
	commons "github.com/tcncloud/api-go/api/commons"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateServiceIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateServiceIdReq) Reset() {
	*x = CreateServiceIdReq{}
	mi := &file_api_v0alpha_cbs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateServiceIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceIdReq) ProtoMessage() {}

func (x *CreateServiceIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_cbs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceIdReq.ProtoReflect.Descriptor instead.
func (*CreateServiceIdReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_cbs_proto_rawDescGZIP(), []int{0}
}

type CreateServiceIdRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
}

func (x *CreateServiceIdRes) Reset() {
	*x = CreateServiceIdRes{}
	mi := &file_api_v0alpha_cbs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateServiceIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceIdRes) ProtoMessage() {}

func (x *CreateServiceIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_cbs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceIdRes.ProtoReflect.Descriptor instead.
func (*CreateServiceIdRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_cbs_proto_rawDescGZIP(), []int{1}
}

func (x *CreateServiceIdRes) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

type ScheduledCallback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduledCallbackId string                          `protobuf:"bytes,1,opt,name=scheduled_callback_id,json=scheduledCallbackId,proto3" json:"scheduled_callback_id,omitempty"`
	ServiceId           string                          `protobuf:"bytes,100,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Status              commons.ScheduledCallbackStatus `protobuf:"varint,101,opt,name=status,proto3,enum=api.commons.ScheduledCallbackStatus" json:"status,omitempty"`
	StartTime           *timestamppb.Timestamp          `protobuf:"bytes,102,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime             *timestamppb.Timestamp          `protobuf:"bytes,103,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	PhoneNumber         string                          `protobuf:"bytes,104,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	CallerId            string                          `protobuf:"bytes,105,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	Notes               string                          `protobuf:"bytes,107,opt,name=notes,proto3" json:"notes,omitempty"`
	CreateDate          *timestamppb.Timestamp          `protobuf:"bytes,108,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	LastUpdate          *timestamppb.Timestamp          `protobuf:"bytes,109,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	LastUpdatedBy       string                          `protobuf:"bytes,111,opt,name=last_updated_by,json=lastUpdatedBy,proto3" json:"last_updated_by,omitempty"`
	CallbackSkills      []string                        `protobuf:"bytes,112,rep,name=callback_skills,json=callbackSkills,proto3" json:"callback_skills,omitempty"`
}

func (x *ScheduledCallback) Reset() {
	*x = ScheduledCallback{}
	mi := &file_api_v0alpha_cbs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduledCallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledCallback) ProtoMessage() {}

func (x *ScheduledCallback) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_cbs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledCallback.ProtoReflect.Descriptor instead.
func (*ScheduledCallback) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_cbs_proto_rawDescGZIP(), []int{2}
}

func (x *ScheduledCallback) GetScheduledCallbackId() string {
	if x != nil {
		return x.ScheduledCallbackId
	}
	return ""
}

func (x *ScheduledCallback) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ScheduledCallback) GetStatus() commons.ScheduledCallbackStatus {
	if x != nil {
		return x.Status
	}
	return commons.ScheduledCallbackStatus(0)
}

func (x *ScheduledCallback) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ScheduledCallback) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ScheduledCallback) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *ScheduledCallback) GetCallerId() string {
	if x != nil {
		return x.CallerId
	}
	return ""
}

func (x *ScheduledCallback) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ScheduledCallback) GetCreateDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateDate
	}
	return nil
}

func (x *ScheduledCallback) GetLastUpdate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *ScheduledCallback) GetLastUpdatedBy() string {
	if x != nil {
		return x.LastUpdatedBy
	}
	return ""
}

func (x *ScheduledCallback) GetCallbackSkills() []string {
	if x != nil {
		return x.CallbackSkills
	}
	return nil
}

type ScheduledCallbackDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduledCallbackDetailId string `protobuf:"bytes,1,opt,name=scheduled_callback_detail_id,json=scheduledCallbackDetailId,proto3" json:"scheduled_callback_detail_id,omitempty"`
	ScheduledCallbackId       string `protobuf:"bytes,2,opt,name=scheduled_callback_id,json=scheduledCallbackId,proto3" json:"scheduled_callback_id,omitempty"`
	Key                       string `protobuf:"bytes,100,opt,name=key,proto3" json:"key,omitempty"`
	Value                     string `protobuf:"bytes,101,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ScheduledCallbackDetail) Reset() {
	*x = ScheduledCallbackDetail{}
	mi := &file_api_v0alpha_cbs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduledCallbackDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledCallbackDetail) ProtoMessage() {}

func (x *ScheduledCallbackDetail) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_cbs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledCallbackDetail.ProtoReflect.Descriptor instead.
func (*ScheduledCallbackDetail) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_cbs_proto_rawDescGZIP(), []int{3}
}

func (x *ScheduledCallbackDetail) GetScheduledCallbackDetailId() string {
	if x != nil {
		return x.ScheduledCallbackDetailId
	}
	return ""
}

func (x *ScheduledCallbackDetail) GetScheduledCallbackId() string {
	if x != nil {
		return x.ScheduledCallbackId
	}
	return ""
}

func (x *ScheduledCallbackDetail) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ScheduledCallbackDetail) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type UpdateScheduledCallbackToReadyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduledCallbackId string `protobuf:"bytes,2,opt,name=scheduled_callback_id,json=scheduledCallbackId,proto3" json:"scheduled_callback_id,omitempty"`
	IsAutoReturn        bool   `protobuf:"varint,3,opt,name=is_auto_return,json=isAutoReturn,proto3" json:"is_auto_return,omitempty"`
	ServiceId           string `protobuf:"bytes,4,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
}

func (x *UpdateScheduledCallbackToReadyReq) Reset() {
	*x = UpdateScheduledCallbackToReadyReq{}
	mi := &file_api_v0alpha_cbs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScheduledCallbackToReadyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheduledCallbackToReadyReq) ProtoMessage() {}

func (x *UpdateScheduledCallbackToReadyReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_cbs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheduledCallbackToReadyReq.ProtoReflect.Descriptor instead.
func (*UpdateScheduledCallbackToReadyReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_cbs_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateScheduledCallbackToReadyReq) GetScheduledCallbackId() string {
	if x != nil {
		return x.ScheduledCallbackId
	}
	return ""
}

func (x *UpdateScheduledCallbackToReadyReq) GetIsAutoReturn() bool {
	if x != nil {
		return x.IsAutoReturn
	}
	return false
}

func (x *UpdateScheduledCallbackToReadyReq) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

type UpdateScheduledCallbackToReadyRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateScheduledCallbackToReadyRes) Reset() {
	*x = UpdateScheduledCallbackToReadyRes{}
	mi := &file_api_v0alpha_cbs_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScheduledCallbackToReadyRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheduledCallbackToReadyRes) ProtoMessage() {}

func (x *UpdateScheduledCallbackToReadyRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_cbs_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheduledCallbackToReadyRes.ProtoReflect.Descriptor instead.
func (*UpdateScheduledCallbackToReadyRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_cbs_proto_rawDescGZIP(), []int{5}
}

type UpdateScheduledCallbackToCanceledReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduledCallbackId string `protobuf:"bytes,2,opt,name=scheduled_callback_id,json=scheduledCallbackId,proto3" json:"scheduled_callback_id,omitempty"`
	ServiceId           string `protobuf:"bytes,3,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
}

func (x *UpdateScheduledCallbackToCanceledReq) Reset() {
	*x = UpdateScheduledCallbackToCanceledReq{}
	mi := &file_api_v0alpha_cbs_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScheduledCallbackToCanceledReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheduledCallbackToCanceledReq) ProtoMessage() {}

func (x *UpdateScheduledCallbackToCanceledReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_cbs_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheduledCallbackToCanceledReq.ProtoReflect.Descriptor instead.
func (*UpdateScheduledCallbackToCanceledReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_cbs_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateScheduledCallbackToCanceledReq) GetScheduledCallbackId() string {
	if x != nil {
		return x.ScheduledCallbackId
	}
	return ""
}

func (x *UpdateScheduledCallbackToCanceledReq) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

type UpdateScheduledCallbackToCanceledRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateScheduledCallbackToCanceledRes) Reset() {
	*x = UpdateScheduledCallbackToCanceledRes{}
	mi := &file_api_v0alpha_cbs_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScheduledCallbackToCanceledRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheduledCallbackToCanceledRes) ProtoMessage() {}

func (x *UpdateScheduledCallbackToCanceledRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_cbs_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheduledCallbackToCanceledRes.ProtoReflect.Descriptor instead.
func (*UpdateScheduledCallbackToCanceledRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_cbs_proto_rawDescGZIP(), []int{7}
}

type UpdateScheduledCallbackToClosedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduledCallbackId string `protobuf:"bytes,2,opt,name=scheduled_callback_id,json=scheduledCallbackId,proto3" json:"scheduled_callback_id,omitempty"`
	ManualDialCallSid   int64  `protobuf:"varint,3,opt,name=manual_dial_call_sid,json=manualDialCallSid,proto3" json:"manual_dial_call_sid,omitempty"`
	ServiceId           string `protobuf:"bytes,4,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
}

func (x *UpdateScheduledCallbackToClosedReq) Reset() {
	*x = UpdateScheduledCallbackToClosedReq{}
	mi := &file_api_v0alpha_cbs_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScheduledCallbackToClosedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheduledCallbackToClosedReq) ProtoMessage() {}

func (x *UpdateScheduledCallbackToClosedReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_cbs_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheduledCallbackToClosedReq.ProtoReflect.Descriptor instead.
func (*UpdateScheduledCallbackToClosedReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_cbs_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateScheduledCallbackToClosedReq) GetScheduledCallbackId() string {
	if x != nil {
		return x.ScheduledCallbackId
	}
	return ""
}

func (x *UpdateScheduledCallbackToClosedReq) GetManualDialCallSid() int64 {
	if x != nil {
		return x.ManualDialCallSid
	}
	return 0
}

func (x *UpdateScheduledCallbackToClosedReq) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

type UpdateScheduledCallbackToClosedRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateScheduledCallbackToClosedRes) Reset() {
	*x = UpdateScheduledCallbackToClosedRes{}
	mi := &file_api_v0alpha_cbs_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScheduledCallbackToClosedRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheduledCallbackToClosedRes) ProtoMessage() {}

func (x *UpdateScheduledCallbackToClosedRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_cbs_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheduledCallbackToClosedRes.ProtoReflect.Descriptor instead.
func (*UpdateScheduledCallbackToClosedRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_cbs_proto_rawDescGZIP(), []int{9}
}

type CreateCallbackWithDetailsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Callback        *ScheduledCallback         `protobuf:"bytes,2,opt,name=callback,proto3" json:"callback,omitempty"`
	CallbackDetails []*ScheduledCallbackDetail `protobuf:"bytes,3,rep,name=callback_details,json=callbackDetails,proto3" json:"callback_details,omitempty"`
	Name            string                     `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	FormerCallType  commons.CallType_Enum      `protobuf:"varint,5,opt,name=former_call_type,json=formerCallType,proto3,enum=api.commons.CallType_Enum" json:"former_call_type,omitempty"`
	FormerCallSid   int64                      `protobuf:"varint,6,opt,name=former_call_sid,json=formerCallSid,proto3" json:"former_call_sid,omitempty"`
	CountrySid      *wrapperspb.Int64Value     `protobuf:"bytes,8,opt,name=country_sid,json=countrySid,proto3" json:"country_sid,omitempty"`
	ManagerLogin    bool                       `protobuf:"varint,9,opt,name=manager_login,json=managerLogin,proto3" json:"manager_login,omitempty"`
}

func (x *CreateCallbackWithDetailsReq) Reset() {
	*x = CreateCallbackWithDetailsReq{}
	mi := &file_api_v0alpha_cbs_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCallbackWithDetailsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCallbackWithDetailsReq) ProtoMessage() {}

func (x *CreateCallbackWithDetailsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_cbs_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCallbackWithDetailsReq.ProtoReflect.Descriptor instead.
func (*CreateCallbackWithDetailsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_cbs_proto_rawDescGZIP(), []int{10}
}

func (x *CreateCallbackWithDetailsReq) GetCallback() *ScheduledCallback {
	if x != nil {
		return x.Callback
	}
	return nil
}

func (x *CreateCallbackWithDetailsReq) GetCallbackDetails() []*ScheduledCallbackDetail {
	if x != nil {
		return x.CallbackDetails
	}
	return nil
}

func (x *CreateCallbackWithDetailsReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCallbackWithDetailsReq) GetFormerCallType() commons.CallType_Enum {
	if x != nil {
		return x.FormerCallType
	}
	return commons.CallType_Enum(0)
}

func (x *CreateCallbackWithDetailsReq) GetFormerCallSid() int64 {
	if x != nil {
		return x.FormerCallSid
	}
	return 0
}

func (x *CreateCallbackWithDetailsReq) GetCountrySid() *wrapperspb.Int64Value {
	if x != nil {
		return x.CountrySid
	}
	return nil
}

func (x *CreateCallbackWithDetailsReq) GetManagerLogin() bool {
	if x != nil {
		return x.ManagerLogin
	}
	return false
}

type CreateCallbackWithDetailsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduledCallbackId string `protobuf:"bytes,1,opt,name=scheduled_callback_id,json=scheduledCallbackId,proto3" json:"scheduled_callback_id,omitempty"`
}

func (x *CreateCallbackWithDetailsRes) Reset() {
	*x = CreateCallbackWithDetailsRes{}
	mi := &file_api_v0alpha_cbs_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCallbackWithDetailsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCallbackWithDetailsRes) ProtoMessage() {}

func (x *CreateCallbackWithDetailsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_cbs_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCallbackWithDetailsRes.ProtoReflect.Descriptor instead.
func (*CreateCallbackWithDetailsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_cbs_proto_rawDescGZIP(), []int{11}
}

func (x *CreateCallbackWithDetailsRes) GetScheduledCallbackId() string {
	if x != nil {
		return x.ScheduledCallbackId
	}
	return ""
}

type UpdateScheduledCallbackReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduledCallbackId string                          `protobuf:"bytes,2,opt,name=scheduled_callback_id,json=scheduledCallbackId,proto3" json:"scheduled_callback_id,omitempty"`
	NewStatus           commons.ScheduledCallbackStatus `protobuf:"varint,3,opt,name=new_status,json=newStatus,proto3,enum=api.commons.ScheduledCallbackStatus" json:"new_status,omitempty"`
	StartTime           *timestamppb.Timestamp          `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime             *timestamppb.Timestamp          `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	PhoneNumber         string                          `protobuf:"bytes,6,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	CallerId            string                          `protobuf:"bytes,7,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	Skills              []string                        `protobuf:"bytes,8,rep,name=skills,proto3" json:"skills,omitempty"`
	LastUpdatedBy       string                          `protobuf:"bytes,9,opt,name=last_updated_by,json=lastUpdatedBy,proto3" json:"last_updated_by,omitempty"`
	Notes               string                          `protobuf:"bytes,10,opt,name=notes,proto3" json:"notes,omitempty"`
	CallbackDetails     []*ScheduledCallbackDetail      `protobuf:"bytes,11,rep,name=callback_details,json=callbackDetails,proto3" json:"callback_details,omitempty"`
	Name                string                          `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateScheduledCallbackReq) Reset() {
	*x = UpdateScheduledCallbackReq{}
	mi := &file_api_v0alpha_cbs_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScheduledCallbackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheduledCallbackReq) ProtoMessage() {}

func (x *UpdateScheduledCallbackReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_cbs_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheduledCallbackReq.ProtoReflect.Descriptor instead.
func (*UpdateScheduledCallbackReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_cbs_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateScheduledCallbackReq) GetScheduledCallbackId() string {
	if x != nil {
		return x.ScheduledCallbackId
	}
	return ""
}

func (x *UpdateScheduledCallbackReq) GetNewStatus() commons.ScheduledCallbackStatus {
	if x != nil {
		return x.NewStatus
	}
	return commons.ScheduledCallbackStatus(0)
}

func (x *UpdateScheduledCallbackReq) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *UpdateScheduledCallbackReq) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *UpdateScheduledCallbackReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *UpdateScheduledCallbackReq) GetCallerId() string {
	if x != nil {
		return x.CallerId
	}
	return ""
}

func (x *UpdateScheduledCallbackReq) GetSkills() []string {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *UpdateScheduledCallbackReq) GetLastUpdatedBy() string {
	if x != nil {
		return x.LastUpdatedBy
	}
	return ""
}

func (x *UpdateScheduledCallbackReq) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *UpdateScheduledCallbackReq) GetCallbackDetails() []*ScheduledCallbackDetail {
	if x != nil {
		return x.CallbackDetails
	}
	return nil
}

func (x *UpdateScheduledCallbackReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateScheduledCallbackRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateScheduledCallbackRes) Reset() {
	*x = UpdateScheduledCallbackRes{}
	mi := &file_api_v0alpha_cbs_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScheduledCallbackRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheduledCallbackRes) ProtoMessage() {}

func (x *UpdateScheduledCallbackRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_cbs_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheduledCallbackRes.ProtoReflect.Descriptor instead.
func (*UpdateScheduledCallbackRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_cbs_proto_rawDescGZIP(), []int{13}
}

type ScheduledCallbackWithDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduledCallbackId string                          `protobuf:"bytes,1,opt,name=scheduled_callback_id,json=scheduledCallbackId,proto3" json:"scheduled_callback_id,omitempty"`
	ServiceId           string                          `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Status              commons.ScheduledCallbackStatus `protobuf:"varint,3,opt,name=status,proto3,enum=api.commons.ScheduledCallbackStatus" json:"status,omitempty"`
	StartTime           *timestamppb.Timestamp          `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime             *timestamppb.Timestamp          `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	PhoneNumber         string                          `protobuf:"bytes,6,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	CallerId            string                          `protobuf:"bytes,7,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	Skills              []string                        `protobuf:"bytes,8,rep,name=skills,proto3" json:"skills,omitempty"`
	Notes               string                          `protobuf:"bytes,9,opt,name=notes,proto3" json:"notes,omitempty"`
	CreateDate          *timestamppb.Timestamp          `protobuf:"bytes,10,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	LastUpdate          *timestamppb.Timestamp          `protobuf:"bytes,11,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	CreatedBy           string                          `protobuf:"bytes,12,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	LastUpdatedBy       string                          `protobuf:"bytes,13,opt,name=last_updated_by,json=lastUpdatedBy,proto3" json:"last_updated_by,omitempty"`
	Name                string                          `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`
	FormerCallSid       int64                           `protobuf:"varint,15,opt,name=former_call_sid,json=formerCallSid,proto3" json:"former_call_sid,omitempty"`
	FormerCallType      commons.CallType_Enum           `protobuf:"varint,16,opt,name=former_call_type,json=formerCallType,proto3,enum=api.commons.CallType_Enum" json:"former_call_type,omitempty"`
	CallbackDetails     []*ScheduledCallbackDetail      `protobuf:"bytes,17,rep,name=callback_details,json=callbackDetails,proto3" json:"callback_details,omitempty"`
	CountrySid          *wrapperspb.Int64Value          `protobuf:"bytes,18,opt,name=country_sid,json=countrySid,proto3" json:"country_sid,omitempty"`
}

func (x *ScheduledCallbackWithDetails) Reset() {
	*x = ScheduledCallbackWithDetails{}
	mi := &file_api_v0alpha_cbs_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduledCallbackWithDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledCallbackWithDetails) ProtoMessage() {}

func (x *ScheduledCallbackWithDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_cbs_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledCallbackWithDetails.ProtoReflect.Descriptor instead.
func (*ScheduledCallbackWithDetails) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_cbs_proto_rawDescGZIP(), []int{14}
}

func (x *ScheduledCallbackWithDetails) GetScheduledCallbackId() string {
	if x != nil {
		return x.ScheduledCallbackId
	}
	return ""
}

func (x *ScheduledCallbackWithDetails) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ScheduledCallbackWithDetails) GetStatus() commons.ScheduledCallbackStatus {
	if x != nil {
		return x.Status
	}
	return commons.ScheduledCallbackStatus(0)
}

func (x *ScheduledCallbackWithDetails) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ScheduledCallbackWithDetails) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ScheduledCallbackWithDetails) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *ScheduledCallbackWithDetails) GetCallerId() string {
	if x != nil {
		return x.CallerId
	}
	return ""
}

func (x *ScheduledCallbackWithDetails) GetSkills() []string {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *ScheduledCallbackWithDetails) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ScheduledCallbackWithDetails) GetCreateDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateDate
	}
	return nil
}

func (x *ScheduledCallbackWithDetails) GetLastUpdate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *ScheduledCallbackWithDetails) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ScheduledCallbackWithDetails) GetLastUpdatedBy() string {
	if x != nil {
		return x.LastUpdatedBy
	}
	return ""
}

func (x *ScheduledCallbackWithDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScheduledCallbackWithDetails) GetFormerCallSid() int64 {
	if x != nil {
		return x.FormerCallSid
	}
	return 0
}

func (x *ScheduledCallbackWithDetails) GetFormerCallType() commons.CallType_Enum {
	if x != nil {
		return x.FormerCallType
	}
	return commons.CallType_Enum(0)
}

func (x *ScheduledCallbackWithDetails) GetCallbackDetails() []*ScheduledCallbackDetail {
	if x != nil {
		return x.CallbackDetails
	}
	return nil
}

func (x *ScheduledCallbackWithDetails) GetCountrySid() *wrapperspb.Int64Value {
	if x != nil {
		return x.CountrySid
	}
	return nil
}

type GetScheduledCallbackWithDetailsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId           string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	ScheduledCallbackId string `protobuf:"bytes,2,opt,name=scheduled_callback_id,json=scheduledCallbackId,proto3" json:"scheduled_callback_id,omitempty"`
}

func (x *GetScheduledCallbackWithDetailsReq) Reset() {
	*x = GetScheduledCallbackWithDetailsReq{}
	mi := &file_api_v0alpha_cbs_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScheduledCallbackWithDetailsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduledCallbackWithDetailsReq) ProtoMessage() {}

func (x *GetScheduledCallbackWithDetailsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_cbs_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduledCallbackWithDetailsReq.ProtoReflect.Descriptor instead.
func (*GetScheduledCallbackWithDetailsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_cbs_proto_rawDescGZIP(), []int{15}
}

func (x *GetScheduledCallbackWithDetailsReq) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *GetScheduledCallbackWithDetailsReq) GetScheduledCallbackId() string {
	if x != nil {
		return x.ScheduledCallbackId
	}
	return ""
}

type GetScheduledCallbackWithDetailsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Callback *ScheduledCallbackWithDetails `protobuf:"bytes,1,opt,name=callback,proto3" json:"callback,omitempty"`
}

func (x *GetScheduledCallbackWithDetailsRes) Reset() {
	*x = GetScheduledCallbackWithDetailsRes{}
	mi := &file_api_v0alpha_cbs_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScheduledCallbackWithDetailsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduledCallbackWithDetailsRes) ProtoMessage() {}

func (x *GetScheduledCallbackWithDetailsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_cbs_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduledCallbackWithDetailsRes.ProtoReflect.Descriptor instead.
func (*GetScheduledCallbackWithDetailsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_cbs_proto_rawDescGZIP(), []int{16}
}

func (x *GetScheduledCallbackWithDetailsRes) GetCallback() *ScheduledCallbackWithDetails {
	if x != nil {
		return x.Callback
	}
	return nil
}

type ListScheduledCallbacksWithDetailsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Callbacks []*ScheduledCallbackWithDetails `protobuf:"bytes,1,rep,name=callbacks,proto3" json:"callbacks,omitempty"`
}

func (x *ListScheduledCallbacksWithDetailsRes) Reset() {
	*x = ListScheduledCallbacksWithDetailsRes{}
	mi := &file_api_v0alpha_cbs_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListScheduledCallbacksWithDetailsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScheduledCallbacksWithDetailsRes) ProtoMessage() {}

func (x *ListScheduledCallbacksWithDetailsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_cbs_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScheduledCallbacksWithDetailsRes.ProtoReflect.Descriptor instead.
func (*ListScheduledCallbacksWithDetailsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_cbs_proto_rawDescGZIP(), []int{17}
}

func (x *ListScheduledCallbacksWithDetailsRes) GetCallbacks() []*ScheduledCallbackWithDetails {
	if x != nil {
		return x.Callbacks
	}
	return nil
}

type GetNextScheduledCallbackWithDetailsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// service id that the callback will belong to.
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// list of agent_skills (skill names) that will be used to find a matching callback.
	AgentSkills []string `protobuf:"bytes,3,rep,name=agent_skills,json=agentSkills,proto3" json:"agent_skills,omitempty"`
}

func (x *GetNextScheduledCallbackWithDetailsReq) Reset() {
	*x = GetNextScheduledCallbackWithDetailsReq{}
	mi := &file_api_v0alpha_cbs_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNextScheduledCallbackWithDetailsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextScheduledCallbackWithDetailsReq) ProtoMessage() {}

func (x *GetNextScheduledCallbackWithDetailsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_cbs_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextScheduledCallbackWithDetailsReq.ProtoReflect.Descriptor instead.
func (*GetNextScheduledCallbackWithDetailsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_cbs_proto_rawDescGZIP(), []int{18}
}

func (x *GetNextScheduledCallbackWithDetailsReq) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *GetNextScheduledCallbackWithDetailsReq) GetAgentSkills() []string {
	if x != nil {
		return x.AgentSkills
	}
	return nil
}

type GetNextScheduledCallbackWithDetailsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduledCallback *ScheduledCallbackWithDetails `protobuf:"bytes,1,opt,name=scheduled_callback,json=scheduledCallback,proto3" json:"scheduled_callback,omitempty"`
}

func (x *GetNextScheduledCallbackWithDetailsRes) Reset() {
	*x = GetNextScheduledCallbackWithDetailsRes{}
	mi := &file_api_v0alpha_cbs_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNextScheduledCallbackWithDetailsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextScheduledCallbackWithDetailsRes) ProtoMessage() {}

func (x *GetNextScheduledCallbackWithDetailsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_cbs_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextScheduledCallbackWithDetailsRes.ProtoReflect.Descriptor instead.
func (*GetNextScheduledCallbackWithDetailsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_cbs_proto_rawDescGZIP(), []int{19}
}

func (x *GetNextScheduledCallbackWithDetailsRes) GetScheduledCallback() *ScheduledCallbackWithDetails {
	if x != nil {
		return x.ScheduledCallback
	}
	return nil
}

// ListScheduledCallbacksWithDetailsReq each of the following fields is applied as a filter phone_number, caller_id, or skills. The fields from_start_time and to_start_time need to be provided together.
type ListScheduledCallbacksWithDetailsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber   string                 `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	CallerId      string                 `protobuf:"bytes,3,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	FromStartTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=from_start_time,json=fromStartTime,proto3" json:"from_start_time,omitempty"`
	ToStartTime   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=to_start_time,json=toStartTime,proto3" json:"to_start_time,omitempty"`
	Skills        []string               `protobuf:"bytes,6,rep,name=skills,proto3" json:"skills,omitempty"`
}

func (x *ListScheduledCallbacksWithDetailsReq) Reset() {
	*x = ListScheduledCallbacksWithDetailsReq{}
	mi := &file_api_v0alpha_cbs_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListScheduledCallbacksWithDetailsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScheduledCallbacksWithDetailsReq) ProtoMessage() {}

func (x *ListScheduledCallbacksWithDetailsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_cbs_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScheduledCallbacksWithDetailsReq.ProtoReflect.Descriptor instead.
func (*ListScheduledCallbacksWithDetailsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_cbs_proto_rawDescGZIP(), []int{20}
}

func (x *ListScheduledCallbacksWithDetailsReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *ListScheduledCallbacksWithDetailsReq) GetCallerId() string {
	if x != nil {
		return x.CallerId
	}
	return ""
}

func (x *ListScheduledCallbacksWithDetailsReq) GetFromStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FromStartTime
	}
	return nil
}

func (x *ListScheduledCallbacksWithDetailsReq) GetToStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ToStartTime
	}
	return nil
}

func (x *ListScheduledCallbacksWithDetailsReq) GetSkills() []string {
	if x != nil {
		return x.Skills
	}
	return nil
}

// ListScheduledCallbacksWithDetailsBySkillsReq requests all the scheduled callbacks by a filter of skills.
type ListScheduledCallbacksWithDetailsBySkillsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the service id that the callback will belong to.
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// list of agent_skills (skill names) that will be used to find a matching callback.
	Skills []string `protobuf:"bytes,3,rep,name=skills,proto3" json:"skills,omitempty"`
}

func (x *ListScheduledCallbacksWithDetailsBySkillsReq) Reset() {
	*x = ListScheduledCallbacksWithDetailsBySkillsReq{}
	mi := &file_api_v0alpha_cbs_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListScheduledCallbacksWithDetailsBySkillsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScheduledCallbacksWithDetailsBySkillsReq) ProtoMessage() {}

func (x *ListScheduledCallbacksWithDetailsBySkillsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_cbs_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScheduledCallbacksWithDetailsBySkillsReq.ProtoReflect.Descriptor instead.
func (*ListScheduledCallbacksWithDetailsBySkillsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_cbs_proto_rawDescGZIP(), []int{21}
}

func (x *ListScheduledCallbacksWithDetailsBySkillsReq) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ListScheduledCallbacksWithDetailsBySkillsReq) GetSkills() []string {
	if x != nil {
		return x.Skills
	}
	return nil
}

var File_api_v0alpha_cbs_proto protoreflect.FileDescriptor

var file_api_v0alpha_cbs_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x62,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x1a, 0x17, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2f, 0x63, 0x62, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x22, 0x33, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xc3, 0x04, 0x0a, 0x11, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x15, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3c,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x68,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x69,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x70, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x4a,
	0x04, 0x08, 0x6e, 0x10, 0x6f, 0x4a, 0x04, 0x08, 0x6a, 0x10, 0x6b, 0x22, 0xb6, 0x01, 0x0a, 0x17,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x54, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x6f,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x22, 0x79, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x54, 0x6f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x22, 0x26, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x6f,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x22,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x5f, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c,
	0x43, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x65, 0x73, 0x22, 0x90, 0x03, 0x0a,
	0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x57,
	0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x3a, 0x0a,
	0x08, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52,
	0x08, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x4f, 0x0a, 0x10, 0x63, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44,
	0x0a, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x0b,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x22,
	0x52, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x49, 0x64, 0x22, 0x88, 0x04, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x09, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x1c,
	0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x22, 0xe1, 0x06, 0x0a,
	0x1c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x32, 0x0a,
	0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x3b,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x4f, 0x0a, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x69, 0x64,
	0x22, 0x77, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x22, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x45, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x08, 0x63, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x6f, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x12, 0x47,
	0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x09, 0x63, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x6a, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x78, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x12, 0x58,
	0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x82, 0x02, 0x0a, 0x24, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x42, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x22, 0x65, 0x0a,
	0x2c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x42, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x32, 0xcb, 0x0f, 0x0a, 0x03, 0x43, 0x42, 0x53, 0x12, 0x87, 0x01, 0x0a,
	0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x22, 0x32, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x63, 0x62, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x69, 0x64, 0x12, 0xb7, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x57, 0x69, 0x74, 0x68,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x22, 0x44, 0xba, 0xb8, 0x91, 0x02,
	0x0a, 0x0a, 0x03, 0x08, 0x90, 0x03, 0x0a, 0x03, 0x08, 0xac, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x63, 0x62, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x63, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0xc3, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x52, 0x65, 0x73, 0x22, 0x41, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x63, 0x62, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x74,
	0x6f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0xcf, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x54, 0x6f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x31, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x54, 0x6f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x22, 0x44, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x63, 0x62, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x6f,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0xd7, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x78, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x57, 0x69, 0x74, 0x68,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x22, 0x46, 0xba, 0xb8, 0x91, 0x02,
	0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x3a, 0x01, 0x2a, 0x22, 0x34, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x62, 0x73, 0x2f, 0x67,
	0x65, 0x74, 0x6e, 0x65, 0x78, 0x74, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x63,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0xc7, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x6f,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x65, 0x73, 0x22, 0x42, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x62, 0x73, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x63, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x74, 0x6f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0xaa, 0x01, 0x0a,
	0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0x90, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22,
	0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x62,
	0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0xcf, 0x01, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x4a, 0xba, 0xb8, 0x91, 0x02, 0x0a, 0x0a, 0x03, 0x08, 0x90, 0x03, 0x0a, 0x03, 0x08, 0xac, 0x02,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x62, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0xd4, 0x01, 0x0a, 0x21,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x22, 0x47, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0x90, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x62, 0x73, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x63, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x73, 0x77, 0x69, 0x74, 0x68, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x30, 0x01, 0x12, 0xed, 0x01, 0x0a, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x42, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x22, 0x52,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xac, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42,
	0x3a, 0x01, 0x2a, 0x22, 0x3d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x63, 0x62, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x62, 0x79, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x72,
	0x65, 0x71, 0x42, 0x90, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x08, 0x43, 0x62, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74,
	0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xa2, 0x02, 0x03, 0x41, 0x56, 0x58,
	0xaa, 0x02, 0x0b, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02,
	0x0b, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xe2, 0x02, 0x17, 0x41,
	0x70, 0x69, 0x5c, 0x56, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v0alpha_cbs_proto_rawDescOnce sync.Once
	file_api_v0alpha_cbs_proto_rawDescData = file_api_v0alpha_cbs_proto_rawDesc
)

func file_api_v0alpha_cbs_proto_rawDescGZIP() []byte {
	file_api_v0alpha_cbs_proto_rawDescOnce.Do(func() {
		file_api_v0alpha_cbs_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v0alpha_cbs_proto_rawDescData)
	})
	return file_api_v0alpha_cbs_proto_rawDescData
}

var file_api_v0alpha_cbs_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_api_v0alpha_cbs_proto_goTypes = []any{
	(*CreateServiceIdReq)(nil),                           // 0: api.v0alpha.CreateServiceIdReq
	(*CreateServiceIdRes)(nil),                           // 1: api.v0alpha.CreateServiceIdRes
	(*ScheduledCallback)(nil),                            // 2: api.v0alpha.ScheduledCallback
	(*ScheduledCallbackDetail)(nil),                      // 3: api.v0alpha.ScheduledCallbackDetail
	(*UpdateScheduledCallbackToReadyReq)(nil),            // 4: api.v0alpha.UpdateScheduledCallbackToReadyReq
	(*UpdateScheduledCallbackToReadyRes)(nil),            // 5: api.v0alpha.UpdateScheduledCallbackToReadyRes
	(*UpdateScheduledCallbackToCanceledReq)(nil),         // 6: api.v0alpha.UpdateScheduledCallbackToCanceledReq
	(*UpdateScheduledCallbackToCanceledRes)(nil),         // 7: api.v0alpha.UpdateScheduledCallbackToCanceledRes
	(*UpdateScheduledCallbackToClosedReq)(nil),           // 8: api.v0alpha.UpdateScheduledCallbackToClosedReq
	(*UpdateScheduledCallbackToClosedRes)(nil),           // 9: api.v0alpha.UpdateScheduledCallbackToClosedRes
	(*CreateCallbackWithDetailsReq)(nil),                 // 10: api.v0alpha.CreateCallbackWithDetailsReq
	(*CreateCallbackWithDetailsRes)(nil),                 // 11: api.v0alpha.CreateCallbackWithDetailsRes
	(*UpdateScheduledCallbackReq)(nil),                   // 12: api.v0alpha.UpdateScheduledCallbackReq
	(*UpdateScheduledCallbackRes)(nil),                   // 13: api.v0alpha.UpdateScheduledCallbackRes
	(*ScheduledCallbackWithDetails)(nil),                 // 14: api.v0alpha.ScheduledCallbackWithDetails
	(*GetScheduledCallbackWithDetailsReq)(nil),           // 15: api.v0alpha.GetScheduledCallbackWithDetailsReq
	(*GetScheduledCallbackWithDetailsRes)(nil),           // 16: api.v0alpha.GetScheduledCallbackWithDetailsRes
	(*ListScheduledCallbacksWithDetailsRes)(nil),         // 17: api.v0alpha.ListScheduledCallbacksWithDetailsRes
	(*GetNextScheduledCallbackWithDetailsReq)(nil),       // 18: api.v0alpha.GetNextScheduledCallbackWithDetailsReq
	(*GetNextScheduledCallbackWithDetailsRes)(nil),       // 19: api.v0alpha.GetNextScheduledCallbackWithDetailsRes
	(*ListScheduledCallbacksWithDetailsReq)(nil),         // 20: api.v0alpha.ListScheduledCallbacksWithDetailsReq
	(*ListScheduledCallbacksWithDetailsBySkillsReq)(nil), // 21: api.v0alpha.ListScheduledCallbacksWithDetailsBySkillsReq
	(commons.ScheduledCallbackStatus)(0),                 // 22: api.commons.ScheduledCallbackStatus
	(*timestamppb.Timestamp)(nil),                        // 23: google.protobuf.Timestamp
	(commons.CallType_Enum)(0),                           // 24: api.commons.CallType.Enum
	(*wrapperspb.Int64Value)(nil),                        // 25: google.protobuf.Int64Value
}
var file_api_v0alpha_cbs_proto_depIdxs = []int32{
	22, // 0: api.v0alpha.ScheduledCallback.status:type_name -> api.commons.ScheduledCallbackStatus
	23, // 1: api.v0alpha.ScheduledCallback.start_time:type_name -> google.protobuf.Timestamp
	23, // 2: api.v0alpha.ScheduledCallback.end_time:type_name -> google.protobuf.Timestamp
	23, // 3: api.v0alpha.ScheduledCallback.create_date:type_name -> google.protobuf.Timestamp
	23, // 4: api.v0alpha.ScheduledCallback.last_update:type_name -> google.protobuf.Timestamp
	2,  // 5: api.v0alpha.CreateCallbackWithDetailsReq.callback:type_name -> api.v0alpha.ScheduledCallback
	3,  // 6: api.v0alpha.CreateCallbackWithDetailsReq.callback_details:type_name -> api.v0alpha.ScheduledCallbackDetail
	24, // 7: api.v0alpha.CreateCallbackWithDetailsReq.former_call_type:type_name -> api.commons.CallType.Enum
	25, // 8: api.v0alpha.CreateCallbackWithDetailsReq.country_sid:type_name -> google.protobuf.Int64Value
	22, // 9: api.v0alpha.UpdateScheduledCallbackReq.new_status:type_name -> api.commons.ScheduledCallbackStatus
	23, // 10: api.v0alpha.UpdateScheduledCallbackReq.start_time:type_name -> google.protobuf.Timestamp
	23, // 11: api.v0alpha.UpdateScheduledCallbackReq.end_time:type_name -> google.protobuf.Timestamp
	3,  // 12: api.v0alpha.UpdateScheduledCallbackReq.callback_details:type_name -> api.v0alpha.ScheduledCallbackDetail
	22, // 13: api.v0alpha.ScheduledCallbackWithDetails.status:type_name -> api.commons.ScheduledCallbackStatus
	23, // 14: api.v0alpha.ScheduledCallbackWithDetails.start_time:type_name -> google.protobuf.Timestamp
	23, // 15: api.v0alpha.ScheduledCallbackWithDetails.end_time:type_name -> google.protobuf.Timestamp
	23, // 16: api.v0alpha.ScheduledCallbackWithDetails.create_date:type_name -> google.protobuf.Timestamp
	23, // 17: api.v0alpha.ScheduledCallbackWithDetails.last_update:type_name -> google.protobuf.Timestamp
	24, // 18: api.v0alpha.ScheduledCallbackWithDetails.former_call_type:type_name -> api.commons.CallType.Enum
	3,  // 19: api.v0alpha.ScheduledCallbackWithDetails.callback_details:type_name -> api.v0alpha.ScheduledCallbackDetail
	25, // 20: api.v0alpha.ScheduledCallbackWithDetails.country_sid:type_name -> google.protobuf.Int64Value
	14, // 21: api.v0alpha.GetScheduledCallbackWithDetailsRes.callback:type_name -> api.v0alpha.ScheduledCallbackWithDetails
	14, // 22: api.v0alpha.ListScheduledCallbacksWithDetailsRes.callbacks:type_name -> api.v0alpha.ScheduledCallbackWithDetails
	14, // 23: api.v0alpha.GetNextScheduledCallbackWithDetailsRes.scheduled_callback:type_name -> api.v0alpha.ScheduledCallbackWithDetails
	23, // 24: api.v0alpha.ListScheduledCallbacksWithDetailsReq.from_start_time:type_name -> google.protobuf.Timestamp
	23, // 25: api.v0alpha.ListScheduledCallbacksWithDetailsReq.to_start_time:type_name -> google.protobuf.Timestamp
	0,  // 26: api.v0alpha.CBS.CreateServiceId:input_type -> api.v0alpha.CreateServiceIdReq
	10, // 27: api.v0alpha.CBS.CreateCallbackWithDetails:input_type -> api.v0alpha.CreateCallbackWithDetailsReq
	4,  // 28: api.v0alpha.CBS.UpdateScheduledCallbackToReady:input_type -> api.v0alpha.UpdateScheduledCallbackToReadyReq
	6,  // 29: api.v0alpha.CBS.UpdateScheduledCallbackToCanceled:input_type -> api.v0alpha.UpdateScheduledCallbackToCanceledReq
	18, // 30: api.v0alpha.CBS.GetNextScheduledCallbackWithDetails:input_type -> api.v0alpha.GetNextScheduledCallbackWithDetailsReq
	8,  // 31: api.v0alpha.CBS.UpdateScheduledCallbackToClosed:input_type -> api.v0alpha.UpdateScheduledCallbackToClosedReq
	12, // 32: api.v0alpha.CBS.UpdateScheduledCallback:input_type -> api.v0alpha.UpdateScheduledCallbackReq
	15, // 33: api.v0alpha.CBS.GetScheduledCallbackWithDetails:input_type -> api.v0alpha.GetScheduledCallbackWithDetailsReq
	20, // 34: api.v0alpha.CBS.ListScheduledCallbacksWithDetails:input_type -> api.v0alpha.ListScheduledCallbacksWithDetailsReq
	21, // 35: api.v0alpha.CBS.ListScheduledCallbacksWithDetailsBySkills:input_type -> api.v0alpha.ListScheduledCallbacksWithDetailsBySkillsReq
	1,  // 36: api.v0alpha.CBS.CreateServiceId:output_type -> api.v0alpha.CreateServiceIdRes
	11, // 37: api.v0alpha.CBS.CreateCallbackWithDetails:output_type -> api.v0alpha.CreateCallbackWithDetailsRes
	5,  // 38: api.v0alpha.CBS.UpdateScheduledCallbackToReady:output_type -> api.v0alpha.UpdateScheduledCallbackToReadyRes
	7,  // 39: api.v0alpha.CBS.UpdateScheduledCallbackToCanceled:output_type -> api.v0alpha.UpdateScheduledCallbackToCanceledRes
	19, // 40: api.v0alpha.CBS.GetNextScheduledCallbackWithDetails:output_type -> api.v0alpha.GetNextScheduledCallbackWithDetailsRes
	9,  // 41: api.v0alpha.CBS.UpdateScheduledCallbackToClosed:output_type -> api.v0alpha.UpdateScheduledCallbackToClosedRes
	13, // 42: api.v0alpha.CBS.UpdateScheduledCallback:output_type -> api.v0alpha.UpdateScheduledCallbackRes
	16, // 43: api.v0alpha.CBS.GetScheduledCallbackWithDetails:output_type -> api.v0alpha.GetScheduledCallbackWithDetailsRes
	17, // 44: api.v0alpha.CBS.ListScheduledCallbacksWithDetails:output_type -> api.v0alpha.ListScheduledCallbacksWithDetailsRes
	17, // 45: api.v0alpha.CBS.ListScheduledCallbacksWithDetailsBySkills:output_type -> api.v0alpha.ListScheduledCallbacksWithDetailsRes
	36, // [36:46] is the sub-list for method output_type
	26, // [26:36] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_api_v0alpha_cbs_proto_init() }
func file_api_v0alpha_cbs_proto_init() {
	if File_api_v0alpha_cbs_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v0alpha_cbs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v0alpha_cbs_proto_goTypes,
		DependencyIndexes: file_api_v0alpha_cbs_proto_depIdxs,
		MessageInfos:      file_api_v0alpha_cbs_proto_msgTypes,
	}.Build()
	File_api_v0alpha_cbs_proto = out.File
	file_api_v0alpha_cbs_proto_rawDesc = nil
	file_api_v0alpha_cbs_proto_goTypes = nil
	file_api_v0alpha_cbs_proto_depIdxs = nil
}
