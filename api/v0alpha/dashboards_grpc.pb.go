// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v0alpha/dashboards.proto

package v0alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Dashboards_CreateDashboard_FullMethodName                    = "/api.v0alpha.Dashboards/CreateDashboard"
	Dashboards_GetDashboard_FullMethodName                       = "/api.v0alpha.Dashboards/GetDashboard"
	Dashboards_GetDefaultDashboard_FullMethodName                = "/api.v0alpha.Dashboards/GetDefaultDashboard"
	Dashboards_ListDashboards_FullMethodName                     = "/api.v0alpha.Dashboards/ListDashboards"
	Dashboards_ListProductTypes_FullMethodName                   = "/api.v0alpha.Dashboards/ListProductTypes"
	Dashboards_DeleteDashboard_FullMethodName                    = "/api.v0alpha.Dashboards/DeleteDashboard"
	Dashboards_SetDefaultDashboard_FullMethodName                = "/api.v0alpha.Dashboards/SetDefaultDashboard"
	Dashboards_UpdateDashboard_FullMethodName                    = "/api.v0alpha.Dashboards/UpdateDashboard"
	Dashboards_UpdateDashboardTitleAndDescription_FullMethodName = "/api.v0alpha.Dashboards/UpdateDashboardTitleAndDescription"
	Dashboards_UpdateDashboardView_FullMethodName                = "/api.v0alpha.Dashboards/UpdateDashboardView"
	Dashboards_UpdateDashboardLayout_FullMethodName              = "/api.v0alpha.Dashboards/UpdateDashboardLayout"
	Dashboards_PublishDashboard_FullMethodName                   = "/api.v0alpha.Dashboards/PublishDashboard"
	Dashboards_CreateApplicationDashboard_FullMethodName         = "/api.v0alpha.Dashboards/CreateApplicationDashboard"
	Dashboards_ListApplicationsDashboards_FullMethodName         = "/api.v0alpha.Dashboards/ListApplicationsDashboards"
	Dashboards_DeleteApplicationDashboard_FullMethodName         = "/api.v0alpha.Dashboards/DeleteApplicationDashboard"
)

// DashboardsClient is the client API for Dashboards service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DashboardsClient interface {
	// CreateDashboard creates a dashboard and associated panels
	CreateDashboard(ctx context.Context, in *CreateDashboardRequest, opts ...grpc.CallOption) (*CreateDashboardResponse, error)
	// GetDashboard retrieves a dashboard by the given ID and orgID and fetches its associated panels
	GetDashboard(ctx context.Context, in *GetDashboardRequest, opts ...grpc.CallOption) (*Dashboard, error)
	GetDefaultDashboard(ctx context.Context, in *GetDefaultDashboardRequest, opts ...grpc.CallOption) (*Dashboard, error)
	// ListDashboards retrieves all dashboard summaries for the given organization
	ListDashboards(ctx context.Context, in *ListDashboardsRequest, opts ...grpc.CallOption) (*ListDashboardsResponse, error)
	ListProductTypes(ctx context.Context, in *ListProductTypesRequest, opts ...grpc.CallOption) (*ListProductTypesResult, error)
	// Deletes a given dashboard
	DeleteDashboard(ctx context.Context, in *DeleteDashboardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Sets a dashboard as the user's default
	SetDefaultDashboard(ctx context.Context, in *SetDefaultDashboardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpdateDashboard updates a dashboard
	UpdateDashboard(ctx context.Context, in *UpdateDashboardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpdateDashboardTitleAndDescription updates a dashboards title and description
	UpdateDashboardTitleAndDescription(ctx context.Context, in *UpdateDashboardTitleAndDescriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpdateDashboardView updates a dashboards view with the given view
	UpdateDashboardView(ctx context.Context, in *UpdateDashboardViewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpdateDashboardLayout replaces a dashboards layout with a given layout
	UpdateDashboardLayout(ctx context.Context, in *UpdateDashboardLayoutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// PublishDashboard publishes a dashboard
	PublishDashboard(ctx context.Context, in *PublishDashboardRequest, opts ...grpc.CallOption) (*PublishDashboardResponse, error)
	// CreateApplicationDashboard assigns a dashboard to an application
	CreateApplicationDashboard(ctx context.Context, in *CreateApplicationDashboardRequest, opts ...grpc.CallOption) (*CreateApplicationDashboardResponse, error)
	// ListApplicationDashboards lists applications and their assigned dashboards
	ListApplicationsDashboards(ctx context.Context, in *ListApplicationsDashboardsRequest, opts ...grpc.CallOption) (*ListApplicationsDashboardsResponse, error)
	// DeleteApplicationDashboard removes a dashboard from an application
	DeleteApplicationDashboard(ctx context.Context, in *DeleteApplicationDashboardRequest, opts ...grpc.CallOption) (*DeleteApplicationDashboardResponse, error)
}

type dashboardsClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardsClient(cc grpc.ClientConnInterface) DashboardsClient {
	return &dashboardsClient{cc}
}

func (c *dashboardsClient) CreateDashboard(ctx context.Context, in *CreateDashboardRequest, opts ...grpc.CallOption) (*CreateDashboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDashboardResponse)
	err := c.cc.Invoke(ctx, Dashboards_CreateDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardsClient) GetDashboard(ctx context.Context, in *GetDashboardRequest, opts ...grpc.CallOption) (*Dashboard, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Dashboard)
	err := c.cc.Invoke(ctx, Dashboards_GetDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardsClient) GetDefaultDashboard(ctx context.Context, in *GetDefaultDashboardRequest, opts ...grpc.CallOption) (*Dashboard, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Dashboard)
	err := c.cc.Invoke(ctx, Dashboards_GetDefaultDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardsClient) ListDashboards(ctx context.Context, in *ListDashboardsRequest, opts ...grpc.CallOption) (*ListDashboardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDashboardsResponse)
	err := c.cc.Invoke(ctx, Dashboards_ListDashboards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardsClient) ListProductTypes(ctx context.Context, in *ListProductTypesRequest, opts ...grpc.CallOption) (*ListProductTypesResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProductTypesResult)
	err := c.cc.Invoke(ctx, Dashboards_ListProductTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardsClient) DeleteDashboard(ctx context.Context, in *DeleteDashboardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Dashboards_DeleteDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardsClient) SetDefaultDashboard(ctx context.Context, in *SetDefaultDashboardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Dashboards_SetDefaultDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardsClient) UpdateDashboard(ctx context.Context, in *UpdateDashboardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Dashboards_UpdateDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardsClient) UpdateDashboardTitleAndDescription(ctx context.Context, in *UpdateDashboardTitleAndDescriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Dashboards_UpdateDashboardTitleAndDescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardsClient) UpdateDashboardView(ctx context.Context, in *UpdateDashboardViewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Dashboards_UpdateDashboardView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardsClient) UpdateDashboardLayout(ctx context.Context, in *UpdateDashboardLayoutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Dashboards_UpdateDashboardLayout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardsClient) PublishDashboard(ctx context.Context, in *PublishDashboardRequest, opts ...grpc.CallOption) (*PublishDashboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishDashboardResponse)
	err := c.cc.Invoke(ctx, Dashboards_PublishDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardsClient) CreateApplicationDashboard(ctx context.Context, in *CreateApplicationDashboardRequest, opts ...grpc.CallOption) (*CreateApplicationDashboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateApplicationDashboardResponse)
	err := c.cc.Invoke(ctx, Dashboards_CreateApplicationDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardsClient) ListApplicationsDashboards(ctx context.Context, in *ListApplicationsDashboardsRequest, opts ...grpc.CallOption) (*ListApplicationsDashboardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListApplicationsDashboardsResponse)
	err := c.cc.Invoke(ctx, Dashboards_ListApplicationsDashboards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardsClient) DeleteApplicationDashboard(ctx context.Context, in *DeleteApplicationDashboardRequest, opts ...grpc.CallOption) (*DeleteApplicationDashboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteApplicationDashboardResponse)
	err := c.cc.Invoke(ctx, Dashboards_DeleteApplicationDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashboardsServer is the server API for Dashboards service.
// All implementations must embed UnimplementedDashboardsServer
// for forward compatibility.
type DashboardsServer interface {
	// CreateDashboard creates a dashboard and associated panels
	CreateDashboard(context.Context, *CreateDashboardRequest) (*CreateDashboardResponse, error)
	// GetDashboard retrieves a dashboard by the given ID and orgID and fetches its associated panels
	GetDashboard(context.Context, *GetDashboardRequest) (*Dashboard, error)
	GetDefaultDashboard(context.Context, *GetDefaultDashboardRequest) (*Dashboard, error)
	// ListDashboards retrieves all dashboard summaries for the given organization
	ListDashboards(context.Context, *ListDashboardsRequest) (*ListDashboardsResponse, error)
	ListProductTypes(context.Context, *ListProductTypesRequest) (*ListProductTypesResult, error)
	// Deletes a given dashboard
	DeleteDashboard(context.Context, *DeleteDashboardRequest) (*emptypb.Empty, error)
	// Sets a dashboard as the user's default
	SetDefaultDashboard(context.Context, *SetDefaultDashboardRequest) (*emptypb.Empty, error)
	// UpdateDashboard updates a dashboard
	UpdateDashboard(context.Context, *UpdateDashboardRequest) (*emptypb.Empty, error)
	// UpdateDashboardTitleAndDescription updates a dashboards title and description
	UpdateDashboardTitleAndDescription(context.Context, *UpdateDashboardTitleAndDescriptionRequest) (*emptypb.Empty, error)
	// UpdateDashboardView updates a dashboards view with the given view
	UpdateDashboardView(context.Context, *UpdateDashboardViewRequest) (*emptypb.Empty, error)
	// UpdateDashboardLayout replaces a dashboards layout with a given layout
	UpdateDashboardLayout(context.Context, *UpdateDashboardLayoutRequest) (*emptypb.Empty, error)
	// PublishDashboard publishes a dashboard
	PublishDashboard(context.Context, *PublishDashboardRequest) (*PublishDashboardResponse, error)
	// CreateApplicationDashboard assigns a dashboard to an application
	CreateApplicationDashboard(context.Context, *CreateApplicationDashboardRequest) (*CreateApplicationDashboardResponse, error)
	// ListApplicationDashboards lists applications and their assigned dashboards
	ListApplicationsDashboards(context.Context, *ListApplicationsDashboardsRequest) (*ListApplicationsDashboardsResponse, error)
	// DeleteApplicationDashboard removes a dashboard from an application
	DeleteApplicationDashboard(context.Context, *DeleteApplicationDashboardRequest) (*DeleteApplicationDashboardResponse, error)
	mustEmbedUnimplementedDashboardsServer()
}

// UnimplementedDashboardsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDashboardsServer struct{}

func (UnimplementedDashboardsServer) CreateDashboard(context.Context, *CreateDashboardRequest) (*CreateDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDashboard not implemented")
}
func (UnimplementedDashboardsServer) GetDashboard(context.Context, *GetDashboardRequest) (*Dashboard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboard not implemented")
}
func (UnimplementedDashboardsServer) GetDefaultDashboard(context.Context, *GetDefaultDashboardRequest) (*Dashboard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultDashboard not implemented")
}
func (UnimplementedDashboardsServer) ListDashboards(context.Context, *ListDashboardsRequest) (*ListDashboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDashboards not implemented")
}
func (UnimplementedDashboardsServer) ListProductTypes(context.Context, *ListProductTypesRequest) (*ListProductTypesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductTypes not implemented")
}
func (UnimplementedDashboardsServer) DeleteDashboard(context.Context, *DeleteDashboardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDashboard not implemented")
}
func (UnimplementedDashboardsServer) SetDefaultDashboard(context.Context, *SetDefaultDashboardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultDashboard not implemented")
}
func (UnimplementedDashboardsServer) UpdateDashboard(context.Context, *UpdateDashboardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDashboard not implemented")
}
func (UnimplementedDashboardsServer) UpdateDashboardTitleAndDescription(context.Context, *UpdateDashboardTitleAndDescriptionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDashboardTitleAndDescription not implemented")
}
func (UnimplementedDashboardsServer) UpdateDashboardView(context.Context, *UpdateDashboardViewRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDashboardView not implemented")
}
func (UnimplementedDashboardsServer) UpdateDashboardLayout(context.Context, *UpdateDashboardLayoutRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDashboardLayout not implemented")
}
func (UnimplementedDashboardsServer) PublishDashboard(context.Context, *PublishDashboardRequest) (*PublishDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishDashboard not implemented")
}
func (UnimplementedDashboardsServer) CreateApplicationDashboard(context.Context, *CreateApplicationDashboardRequest) (*CreateApplicationDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplicationDashboard not implemented")
}
func (UnimplementedDashboardsServer) ListApplicationsDashboards(context.Context, *ListApplicationsDashboardsRequest) (*ListApplicationsDashboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplicationsDashboards not implemented")
}
func (UnimplementedDashboardsServer) DeleteApplicationDashboard(context.Context, *DeleteApplicationDashboardRequest) (*DeleteApplicationDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplicationDashboard not implemented")
}
func (UnimplementedDashboardsServer) mustEmbedUnimplementedDashboardsServer() {}
func (UnimplementedDashboardsServer) testEmbeddedByValue()                    {}

// UnsafeDashboardsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashboardsServer will
// result in compilation errors.
type UnsafeDashboardsServer interface {
	mustEmbedUnimplementedDashboardsServer()
}

func RegisterDashboardsServer(s grpc.ServiceRegistrar, srv DashboardsServer) {
	// If the following call pancis, it indicates UnimplementedDashboardsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Dashboards_ServiceDesc, srv)
}

func _Dashboards_CreateDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsServer).CreateDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboards_CreateDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsServer).CreateDashboard(ctx, req.(*CreateDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboards_GetDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsServer).GetDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboards_GetDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsServer).GetDashboard(ctx, req.(*GetDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboards_GetDefaultDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsServer).GetDefaultDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboards_GetDefaultDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsServer).GetDefaultDashboard(ctx, req.(*GetDefaultDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboards_ListDashboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDashboardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsServer).ListDashboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboards_ListDashboards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsServer).ListDashboards(ctx, req.(*ListDashboardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboards_ListProductTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsServer).ListProductTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboards_ListProductTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsServer).ListProductTypes(ctx, req.(*ListProductTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboards_DeleteDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsServer).DeleteDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboards_DeleteDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsServer).DeleteDashboard(ctx, req.(*DeleteDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboards_SetDefaultDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsServer).SetDefaultDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboards_SetDefaultDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsServer).SetDefaultDashboard(ctx, req.(*SetDefaultDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboards_UpdateDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsServer).UpdateDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboards_UpdateDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsServer).UpdateDashboard(ctx, req.(*UpdateDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboards_UpdateDashboardTitleAndDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDashboardTitleAndDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsServer).UpdateDashboardTitleAndDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboards_UpdateDashboardTitleAndDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsServer).UpdateDashboardTitleAndDescription(ctx, req.(*UpdateDashboardTitleAndDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboards_UpdateDashboardView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDashboardViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsServer).UpdateDashboardView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboards_UpdateDashboardView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsServer).UpdateDashboardView(ctx, req.(*UpdateDashboardViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboards_UpdateDashboardLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDashboardLayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsServer).UpdateDashboardLayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboards_UpdateDashboardLayout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsServer).UpdateDashboardLayout(ctx, req.(*UpdateDashboardLayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboards_PublishDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsServer).PublishDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboards_PublishDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsServer).PublishDashboard(ctx, req.(*PublishDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboards_CreateApplicationDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsServer).CreateApplicationDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboards_CreateApplicationDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsServer).CreateApplicationDashboard(ctx, req.(*CreateApplicationDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboards_ListApplicationsDashboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationsDashboardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsServer).ListApplicationsDashboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboards_ListApplicationsDashboards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsServer).ListApplicationsDashboards(ctx, req.(*ListApplicationsDashboardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboards_DeleteApplicationDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsServer).DeleteApplicationDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboards_DeleteApplicationDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsServer).DeleteApplicationDashboard(ctx, req.(*DeleteApplicationDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dashboards_ServiceDesc is the grpc.ServiceDesc for Dashboards service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dashboards_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v0alpha.Dashboards",
	HandlerType: (*DashboardsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDashboard",
			Handler:    _Dashboards_CreateDashboard_Handler,
		},
		{
			MethodName: "GetDashboard",
			Handler:    _Dashboards_GetDashboard_Handler,
		},
		{
			MethodName: "GetDefaultDashboard",
			Handler:    _Dashboards_GetDefaultDashboard_Handler,
		},
		{
			MethodName: "ListDashboards",
			Handler:    _Dashboards_ListDashboards_Handler,
		},
		{
			MethodName: "ListProductTypes",
			Handler:    _Dashboards_ListProductTypes_Handler,
		},
		{
			MethodName: "DeleteDashboard",
			Handler:    _Dashboards_DeleteDashboard_Handler,
		},
		{
			MethodName: "SetDefaultDashboard",
			Handler:    _Dashboards_SetDefaultDashboard_Handler,
		},
		{
			MethodName: "UpdateDashboard",
			Handler:    _Dashboards_UpdateDashboard_Handler,
		},
		{
			MethodName: "UpdateDashboardTitleAndDescription",
			Handler:    _Dashboards_UpdateDashboardTitleAndDescription_Handler,
		},
		{
			MethodName: "UpdateDashboardView",
			Handler:    _Dashboards_UpdateDashboardView_Handler,
		},
		{
			MethodName: "UpdateDashboardLayout",
			Handler:    _Dashboards_UpdateDashboardLayout_Handler,
		},
		{
			MethodName: "PublishDashboard",
			Handler:    _Dashboards_PublishDashboard_Handler,
		},
		{
			MethodName: "CreateApplicationDashboard",
			Handler:    _Dashboards_CreateApplicationDashboard_Handler,
		},
		{
			MethodName: "ListApplicationsDashboards",
			Handler:    _Dashboards_ListApplicationsDashboards_Handler,
		},
		{
			MethodName: "DeleteApplicationDashboard",
			Handler:    _Dashboards_DeleteApplicationDashboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v0alpha/dashboards.proto",
}
