// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v0alpha/compliance.proto

package v0alpha

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Compliance_RuleAutoComplete_FullMethodName               = "/api.v0alpha.Compliance/RuleAutoComplete"
	Compliance_CheckRuleSet_FullMethodName                   = "/api.v0alpha.Compliance/CheckRuleSet"
	Compliance_AssignRuleSet_FullMethodName                  = "/api.v0alpha.Compliance/AssignRuleSet"
	Compliance_ListRuleSets_FullMethodName                   = "/api.v0alpha.Compliance/ListRuleSets"
	Compliance_GetRuleSet_FullMethodName                     = "/api.v0alpha.Compliance/GetRuleSet"
	Compliance_GetRuleSetByName_FullMethodName               = "/api.v0alpha.Compliance/GetRuleSetByName"
	Compliance_CreateRuleSet_FullMethodName                  = "/api.v0alpha.Compliance/CreateRuleSet"
	Compliance_RenameRuleSet_FullMethodName                  = "/api.v0alpha.Compliance/RenameRuleSet"
	Compliance_EnableRuleSet_FullMethodName                  = "/api.v0alpha.Compliance/EnableRuleSet"
	Compliance_DisableRuleSet_FullMethodName                 = "/api.v0alpha.Compliance/DisableRuleSet"
	Compliance_CreateScrubList_FullMethodName                = "/api.v0alpha.Compliance/CreateScrubList"
	Compliance_AddScrubListEntries_FullMethodName            = "/api.v0alpha.Compliance/AddScrubListEntries"
	Compliance_UpdateScrubEntry_FullMethodName               = "/api.v0alpha.Compliance/UpdateScrubEntry"
	Compliance_DeleteScrubListEntries_FullMethodName         = "/api.v0alpha.Compliance/DeleteScrubListEntries"
	Compliance_GetScrubList_FullMethodName                   = "/api.v0alpha.Compliance/GetScrubList"
	Compliance_DeleteScrubList_FullMethodName                = "/api.v0alpha.Compliance/DeleteScrubList"
	Compliance_GetDefaultRules_FullMethodName                = "/api.v0alpha.Compliance/GetDefaultRules"
	Compliance_GetScrubLists_FullMethodName                  = "/api.v0alpha.Compliance/GetScrubLists"
	Compliance_SearchScrubList_FullMethodName                = "/api.v0alpha.Compliance/SearchScrubList"
	Compliance_GetScrubListUploadUrl_FullMethodName          = "/api.v0alpha.Compliance/GetScrubListUploadUrl"
	Compliance_ProcessScrubListUpload_FullMethodName         = "/api.v0alpha.Compliance/ProcessScrubListUpload"
	Compliance_ScrubListDownload_FullMethodName              = "/api.v0alpha.Compliance/ScrubListDownload"
	Compliance_ProcessScrubListDeleteUpload_FullMethodName   = "/api.v0alpha.Compliance/ProcessScrubListDeleteUpload"
	Compliance_ExportScrubList_FullMethodName                = "/api.v0alpha.Compliance/ExportScrubList"
	Compliance_PurgeScrubList_FullMethodName                 = "/api.v0alpha.Compliance/PurgeScrubList"
	Compliance_CreateScenario_FullMethodName                 = "/api.v0alpha.Compliance/CreateScenario"
	Compliance_GetScenario_FullMethodName                    = "/api.v0alpha.Compliance/GetScenario"
	Compliance_UpdateScenario_FullMethodName                 = "/api.v0alpha.Compliance/UpdateScenario"
	Compliance_DeleteScenario_FullMethodName                 = "/api.v0alpha.Compliance/DeleteScenario"
	Compliance_RunAssignedScenarios_FullMethodName           = "/api.v0alpha.Compliance/RunAssignedScenarios"
	Compliance_ListAllScenarios_FullMethodName               = "/api.v0alpha.Compliance/ListAllScenarios"
	Compliance_ListUnassignedScenarios_FullMethodName        = "/api.v0alpha.Compliance/ListUnassignedScenarios"
	Compliance_ListAssignedRuleSets_FullMethodName           = "/api.v0alpha.Compliance/ListAssignedRuleSets"
	Compliance_ListAssignedScenarios_FullMethodName          = "/api.v0alpha.Compliance/ListAssignedScenarios"
	Compliance_AssignScenario_FullMethodName                 = "/api.v0alpha.Compliance/AssignScenario"
	Compliance_UnassignScenario_FullMethodName               = "/api.v0alpha.Compliance/UnassignScenario"
	Compliance_EnableScenario_FullMethodName                 = "/api.v0alpha.Compliance/EnableScenario"
	Compliance_DisableScenario_FullMethodName                = "/api.v0alpha.Compliance/DisableScenario"
	Compliance_GetFieldNames_FullMethodName                  = "/api.v0alpha.Compliance/GetFieldNames"
	Compliance_GetResultDescriptions_FullMethodName          = "/api.v0alpha.Compliance/GetResultDescriptions"
	Compliance_CreateConsentProfile_FullMethodName           = "/api.v0alpha.Compliance/CreateConsentProfile"
	Compliance_CreateConsent_FullMethodName                  = "/api.v0alpha.Compliance/CreateConsent"
	Compliance_GetConsentProfile_FullMethodName              = "/api.v0alpha.Compliance/GetConsentProfile"
	Compliance_GetConsent_FullMethodName                     = "/api.v0alpha.Compliance/GetConsent"
	Compliance_GetConsentByProfileAndContent_FullMethodName  = "/api.v0alpha.Compliance/GetConsentByProfileAndContent"
	Compliance_GetConsentByContent_FullMethodName            = "/api.v0alpha.Compliance/GetConsentByContent"
	Compliance_SearchConsentByContent_FullMethodName         = "/api.v0alpha.Compliance/SearchConsentByContent"
	Compliance_UpdateConsent_FullMethodName                  = "/api.v0alpha.Compliance/UpdateConsent"
	Compliance_ExpireConsent_FullMethodName                  = "/api.v0alpha.Compliance/ExpireConsent"
	Compliance_RevokeConsent_FullMethodName                  = "/api.v0alpha.Compliance/RevokeConsent"
	Compliance_DeleteConsent_FullMethodName                  = "/api.v0alpha.Compliance/DeleteConsent"
	Compliance_ProcessConsentListDeleteUpload_FullMethodName = "/api.v0alpha.Compliance/ProcessConsentListDeleteUpload"
	Compliance_ConsentListDownload_FullMethodName            = "/api.v0alpha.Compliance/ConsentListDownload"
	Compliance_EnableConsentProfile_FullMethodName           = "/api.v0alpha.Compliance/EnableConsentProfile"
	Compliance_DisableConsentProfile_FullMethodName          = "/api.v0alpha.Compliance/DisableConsentProfile"
	Compliance_ListConsentProfiles_FullMethodName            = "/api.v0alpha.Compliance/ListConsentProfiles"
	Compliance_GetConsentUploadUrl_FullMethodName            = "/api.v0alpha.Compliance/GetConsentUploadUrl"
	Compliance_ProcessConsentUpload_FullMethodName           = "/api.v0alpha.Compliance/ProcessConsentUpload"
	Compliance_ExportConsentList_FullMethodName              = "/api.v0alpha.Compliance/ExportConsentList"
	Compliance_ListConsentTopics_FullMethodName              = "/api.v0alpha.Compliance/ListConsentTopics"
	Compliance_GetConsentTopic_FullMethodName                = "/api.v0alpha.Compliance/GetConsentTopic"
	Compliance_CreateConsentTopic_FullMethodName             = "/api.v0alpha.Compliance/CreateConsentTopic"
	Compliance_DeleteConsentTopic_FullMethodName             = "/api.v0alpha.Compliance/DeleteConsentTopic"
	Compliance_UpdateConsentTopic_FullMethodName             = "/api.v0alpha.Compliance/UpdateConsentTopic"
	Compliance_ProcessOutboundCall_FullMethodName            = "/api.v0alpha.Compliance/ProcessOutboundCall"
	Compliance_QueryHolidays_FullMethodName                  = "/api.v0alpha.Compliance/QueryHolidays"
)

// ComplianceClient is the client API for Compliance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComplianceClient interface {
	RuleAutoComplete(ctx context.Context, in *RuleAutoCompleteReq, opts ...grpc.CallOption) (*RuleAutoCompleteRes, error)
	CheckRuleSet(ctx context.Context, in *CheckRuleSetReq, opts ...grpc.CallOption) (*CheckRuleSetRes, error)
	AssignRuleSet(ctx context.Context, in *AssignRuleSetReq, opts ...grpc.CallOption) (*AssignRuleSetRes, error)
	ListRuleSets(ctx context.Context, in *ListRuleSetsReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListRuleSetsRes], error)
	GetRuleSet(ctx context.Context, in *GetRuleSetReq, opts ...grpc.CallOption) (*RuleSet, error)
	GetRuleSetByName(ctx context.Context, in *GetRuleSetByNameReq, opts ...grpc.CallOption) (*RuleSet, error)
	CreateRuleSet(ctx context.Context, in *CreateRuleSetReq, opts ...grpc.CallOption) (*RuleSet, error)
	RenameRuleSet(ctx context.Context, in *RenameRuleSetReq, opts ...grpc.CallOption) (*RenameRuleSetRes, error)
	EnableRuleSet(ctx context.Context, in *EnableRuleSetReq, opts ...grpc.CallOption) (*EnableRuleSetRes, error)
	DisableRuleSet(ctx context.Context, in *DisableRuleSetReq, opts ...grpc.CallOption) (*DisableRuleSetRes, error)
	CreateScrubList(ctx context.Context, in *CreateScrubListReq, opts ...grpc.CallOption) (*ScrubListRes, error)
	// Add entries to an existing scrub list defined by AddScrubListEntriesReq message.
	// The method will return a ScrubListRes message that will
	// contain the results.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE or PERMISSION_AGENT_COMPLIANCE_SCRUBLIST_OPTIONS
	AddScrubListEntries(ctx context.Context, in *AddScrubListEntriesReq, opts ...grpc.CallOption) (*ScrubListRes, error)
	// Update scrub list entry defined by UpdateScrubEntryReq message.
	// The method will update a scrub list entry with the specified fields
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE
	UpdateScrubEntry(ctx context.Context, in *UpdateScrubEntryReq, opts ...grpc.CallOption) (*UpdateScrubEntryRes, error)
	DeleteScrubListEntries(ctx context.Context, in *DeleteScrubListEntriesReq, opts ...grpc.CallOption) (*ScrubListRes, error)
	GetScrubList(ctx context.Context, in *GetScrubListReq, opts ...grpc.CallOption) (*ScrubListRes, error)
	DeleteScrubList(ctx context.Context, in *DeleteScrubListReq, opts ...grpc.CallOption) (*ScrubListRes, error)
	GetDefaultRules(ctx context.Context, in *GetDefaultRulesReq, opts ...grpc.CallOption) (*GetDefaultRulesRes, error)
	GetScrubLists(ctx context.Context, in *GetScrubListsReq, opts ...grpc.CallOption) (*ScrubListsRes, error)
	SearchScrubList(ctx context.Context, in *SearchScrubListReq, opts ...grpc.CallOption) (*ScrubList, error)
	GetScrubListUploadUrl(ctx context.Context, in *GetScrubListUploadUrlReq, opts ...grpc.CallOption) (*GetScrubListUploadUrlRes, error)
	ProcessScrubListUpload(ctx context.Context, in *ProcessScrubListUploadReq, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Download a scrub list defined by ScrubListDownloadRequest message.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE
	ScrubListDownload(ctx context.Context, in *ScrubListDownloadRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	ProcessScrubListDeleteUpload(ctx context.Context, in *ProcessScrubListDeleteUploadReq, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	ExportScrubList(ctx context.Context, in *ExportScrubListReq, opts ...grpc.CallOption) (*ExportScrubListRes, error)
	// Purge entries from a scrub list defined by PurgeScrubListReq message.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE
	PurgeScrubList(ctx context.Context, in *PurgeScrubListReq, opts ...grpc.CallOption) (*PurgeScrubListRes, error)
	// Creates a new Scenario
	CreateScenario(ctx context.Context, in *CreateScenarioReq, opts ...grpc.CallOption) (*CreateScenarioRes, error)
	// Gets one Scenario
	GetScenario(ctx context.Context, in *GetScenarioReq, opts ...grpc.CallOption) (*GetScenarioRes, error)
	// Updates a Scenario
	UpdateScenario(ctx context.Context, in *UpdateScenarioReq, opts ...grpc.CallOption) (*UpdateScenarioRes, error)
	// Deletes a Scenario
	DeleteScenario(ctx context.Context, in *DeleteScenarioReq, opts ...grpc.CallOption) (*DeleteScenarioRes, error)
	// Run scenarios against ruleset
	RunAssignedScenarios(ctx context.Context, in *RunAssignedScenariosReq, opts ...grpc.CallOption) (*RunAssignedScenariosRes, error)
	// Lists all scenarios
	ListAllScenarios(ctx context.Context, in *ListAllScenariosReq, opts ...grpc.CallOption) (*ListAllScenariosRes, error)
	// List currently unassigned scenarios available to be assigned to a given ruleset
	ListUnassignedScenarios(ctx context.Context, in *ListUnassignedScenariosReq, opts ...grpc.CallOption) (*ListUnassignedScenariosRes, error)
	// List rule sets currently assigned to a given scenario
	ListAssignedRuleSets(ctx context.Context, in *ListAssignedRuleSetsReq, opts ...grpc.CallOption) (*ListAssignedRuleSetsRes, error)
	// List scenarios currently assigned to a given ruleset
	ListAssignedScenarios(ctx context.Context, in *ListAssignedScenariosReq, opts ...grpc.CallOption) (*ListAssignedScenariosRes, error)
	// Assign a scenario to a given ruleset
	AssignScenario(ctx context.Context, in *AssignScenarioReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Unassign a scenario from a given ruleset
	UnassignScenario(ctx context.Context, in *UnassignScenarioReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Enable an scenario
	EnableScenario(ctx context.Context, in *EnableScenarioReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Disable an scenario
	DisableScenario(ctx context.Context, in *DisableScenarioReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Frequency data calls
	// This will get all available Meta Fields
	GetFieldNames(ctx context.Context, in *GetFieldNamesReq, opts ...grpc.CallOption) (*FieldNames, error)
	// This will get all possible results (Answered, Answered Machine, Busy, etc.)
	GetResultDescriptions(ctx context.Context, in *GetResultDescriptionsReq, opts ...grpc.CallOption) (*FieldNames, error)
	// Create/Record a consent profile defined by CreateConsentProfileReq
	// message.  The method will return a CreateConsentProfileRes message
	// that will contain the newly created consent_profile_id.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	CreateConsentProfile(ctx context.Context, in *CreateConsentProfileReq, opts ...grpc.CallOption) (*CreateConsentProfileRes, error)
	// Create/Record a consent defined by CreateConsentReq message.
	// The method will return a CreateConsentRes message that will
	// contain the newly created consent_id.
	// Required permissions:
	//
	//	none
	CreateConsent(ctx context.Context, in *CreateConsentReq, opts ...grpc.CallOption) (*CreateConsentRes, error)
	// Gets a consent profile defined by GetConsentProfileReq message
	// for the specified consent_profile_id and org_id.
	// The method will return a ConsentProfile message/entity.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	GetConsentProfile(ctx context.Context, in *GetConsentProfileReq, opts ...grpc.CallOption) (*ConsentProfile, error)
	// Gets a consent defined by GetConsentReq message
	// for the specified consent_id and org_id.
	// The method will return a Consent entity.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	GetConsent(ctx context.Context, in *GetConsentReq, opts ...grpc.CallOption) (*Consent, error)
	// Gets a consent defined by GetConsentByProfileAndContentReq message
	// for the specified consent_profile_id and content.
	// The method will return a GetConsentByProfileAndContentRes message/entity.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	GetConsentByProfileAndContent(ctx context.Context, in *GetConsentByProfileAndContentReq, opts ...grpc.CallOption) (*GetConsentByProfileAndContentRes, error)
	// Gets a consent defined by GetConsentByContentReq message
	// for the specified consent_profile_id and content and channel_type.
	// The method will return a GetConsentByContentRes message/entity.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	GetConsentByContent(ctx context.Context, in *GetConsentByContentReq, opts ...grpc.CallOption) (*GetConsentByContentRes, error)
	// Searches for a consent defined by SearchConsentByContentReq message
	// for the specified content.
	// The method will return a SearchConsentByContentRes message/entity.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	SearchConsentByContent(ctx context.Context, in *SearchConsentByContentReq, opts ...grpc.CallOption) (*SearchConsentByContentRes, error)
	// Update a consent defined by UpdateConsentReq message for
	// the specified consent_id, and will update the following
	// consent fields:
	//
	//	Content
	//	Recorded
	//	Revoked
	//	Expire
	//	ReferringUrl
	//
	// The method will return a google.protobuf.Empty message.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	UpdateConsent(ctx context.Context, in *UpdateConsentReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Expire a consent defined by ExpireConsentReq message.
	// Set the expiration date for the specified consent_id field.
	// The method will return a google.protobuf.Empty message.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	ExpireConsent(ctx context.Context, in *ExpireConsentReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Revoke a consent defined by RevokeConsentReq message.
	// Set the revoked date for the specified consent_id and
	// consent_profile_id fields.
	// The method will return a google.protobuf.Empty message.
	// Required permissions:
	//
	//	none
	RevokeConsent(ctx context.Context, in *RevokeConsentReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete a consent defined by DeleteConsentReq message
	// The method will return a google.protobuf.Empty message
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	DeleteConsent(ctx context.Context, in *DeleteConsentReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Process a consent delete list defined by DeleteConsentReq message
	// The method will return a google.protobuf.Empty message
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	ProcessConsentListDeleteUpload(ctx context.Context, in *ProcessConsentListDeleteUploadReq, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Download a consent list defined by ConsentListDownloadRequest message
	// The method will return a google.longrunning.Operation message
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	ConsentListDownload(ctx context.Context, in *ConsentListDownloadRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Enable a consent profile defined by EnableConsentProfileReq message.
	// Set the disabled field to false for the specified
	// consent_profile_id field.
	// The method will return a google.protobuf.Empty message.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	EnableConsentProfile(ctx context.Context, in *EnableConsentProfileReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Disable a consent profile defined by DisableConsentProfileReq message.
	// Set the disabled field to true for the specified
	// consent_profile_id field.
	// The method will return a google.protobuf.Empty message.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	DisableConsentProfile(ctx context.Context, in *DisableConsentProfileReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List consent profiles defined by ListConsentProfilesReq message.
	// Gets all of the unique consent profiles.
	// The method will return a ListConsentProfilesRes message
	// containing consent_profile_id, profile_name, the number of consents
	// belonging to the profile, and disabled.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	ListConsentProfiles(ctx context.Context, in *ListConsentProfilesReq, opts ...grpc.CallOption) (*ListConsentProfilesRes, error)
	// Get consent upload url defined by GetConsentUploadUrlReq message.
	// The method will return a GetConsentUploadUrlRes messages
	// containing a url with which to upload an import file.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	GetConsentUploadUrl(ctx context.Context, in *GetConsentUploadUrlReq, opts ...grpc.CallOption) (*GetConsentUploadUrlRes, error)
	// Process consent upload defined by ProcessConsentUploadReq message.
	// The method will process an uploaded consent file.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	ProcessConsentUpload(ctx context.Context, in *ProcessConsentUploadReq, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Export consent list defined by ExportConsentListRequest message.
	// The method will create a consent download file in CSV format and return a URL for download.
	ExportConsentList(ctx context.Context, in *ExportConsentListRequest, opts ...grpc.CallOption) (*ExportConsentListResponse, error)
	// List consent topics defined by ListConsentTopicsReq message.
	// Gets all of the unique consent topics.
	// The method will return a ListConsentTopicsRes message
	// containing topic, org_id, and deleted.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	ListConsentTopics(ctx context.Context, in *ListConsentTopicsReq, opts ...grpc.CallOption) (*ListConsentTopicsRes, error)
	// Gets a consent topic defined by GetConsentTopicReq message
	// for the specified topic and org_id.
	// The method will return a ConsentTopic message/entity.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	GetConsentTopic(ctx context.Context, in *GetConsentTopicReq, opts ...grpc.CallOption) (*ConsentTopic, error)
	// Create a consent topic defined by ConsentTopic
	// message.  The method will return an Empty message.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	CreateConsentTopic(ctx context.Context, in *ConsentTopic, opts ...grpc.CallOption) (*Empty, error)
	// Delete a consent topic defined by ConsentTopic message.
	// The method will return an Empty message.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	DeleteConsentTopic(ctx context.Context, in *ConsentTopic, opts ...grpc.CallOption) (*Empty, error)
	// Update a consent topic defined by UpdateConsentTopicReq message.
	// The method will return an Empty message.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	UpdateConsentTopic(ctx context.Context, in *UpdateConsentTopicReq, opts ...grpc.CallOption) (*Empty, error)
	// Process and Outbound Phone Number against a rule set.
	// The method will return a response indicating
	// if the call would be permited or not and the list
	// of rules checked against.
	// Required permissions:
	//
	//	AGENT
	ProcessOutboundCall(ctx context.Context, in *ProcessOutboundCallReq, opts ...grpc.CallOption) (*ProcessRes, error)
	// Return the holidays that match the request.
	// The method will return a stream of the matching holidays.
	// Required permissions:
	//
	//	none
	QueryHolidays(ctx context.Context, in *QueryHolidaysRequest, opts ...grpc.CallOption) (*QueryHolidaysResponse, error)
}

type complianceClient struct {
	cc grpc.ClientConnInterface
}

func NewComplianceClient(cc grpc.ClientConnInterface) ComplianceClient {
	return &complianceClient{cc}
}

func (c *complianceClient) RuleAutoComplete(ctx context.Context, in *RuleAutoCompleteReq, opts ...grpc.CallOption) (*RuleAutoCompleteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RuleAutoCompleteRes)
	err := c.cc.Invoke(ctx, Compliance_RuleAutoComplete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) CheckRuleSet(ctx context.Context, in *CheckRuleSetReq, opts ...grpc.CallOption) (*CheckRuleSetRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckRuleSetRes)
	err := c.cc.Invoke(ctx, Compliance_CheckRuleSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) AssignRuleSet(ctx context.Context, in *AssignRuleSetReq, opts ...grpc.CallOption) (*AssignRuleSetRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignRuleSetRes)
	err := c.cc.Invoke(ctx, Compliance_AssignRuleSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) ListRuleSets(ctx context.Context, in *ListRuleSetsReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListRuleSetsRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Compliance_ServiceDesc.Streams[0], Compliance_ListRuleSets_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListRuleSetsReq, ListRuleSetsRes]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Compliance_ListRuleSetsClient = grpc.ServerStreamingClient[ListRuleSetsRes]

func (c *complianceClient) GetRuleSet(ctx context.Context, in *GetRuleSetReq, opts ...grpc.CallOption) (*RuleSet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RuleSet)
	err := c.cc.Invoke(ctx, Compliance_GetRuleSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) GetRuleSetByName(ctx context.Context, in *GetRuleSetByNameReq, opts ...grpc.CallOption) (*RuleSet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RuleSet)
	err := c.cc.Invoke(ctx, Compliance_GetRuleSetByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) CreateRuleSet(ctx context.Context, in *CreateRuleSetReq, opts ...grpc.CallOption) (*RuleSet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RuleSet)
	err := c.cc.Invoke(ctx, Compliance_CreateRuleSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) RenameRuleSet(ctx context.Context, in *RenameRuleSetReq, opts ...grpc.CallOption) (*RenameRuleSetRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenameRuleSetRes)
	err := c.cc.Invoke(ctx, Compliance_RenameRuleSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) EnableRuleSet(ctx context.Context, in *EnableRuleSetReq, opts ...grpc.CallOption) (*EnableRuleSetRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableRuleSetRes)
	err := c.cc.Invoke(ctx, Compliance_EnableRuleSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) DisableRuleSet(ctx context.Context, in *DisableRuleSetReq, opts ...grpc.CallOption) (*DisableRuleSetRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableRuleSetRes)
	err := c.cc.Invoke(ctx, Compliance_DisableRuleSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) CreateScrubList(ctx context.Context, in *CreateScrubListReq, opts ...grpc.CallOption) (*ScrubListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScrubListRes)
	err := c.cc.Invoke(ctx, Compliance_CreateScrubList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) AddScrubListEntries(ctx context.Context, in *AddScrubListEntriesReq, opts ...grpc.CallOption) (*ScrubListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScrubListRes)
	err := c.cc.Invoke(ctx, Compliance_AddScrubListEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) UpdateScrubEntry(ctx context.Context, in *UpdateScrubEntryReq, opts ...grpc.CallOption) (*UpdateScrubEntryRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateScrubEntryRes)
	err := c.cc.Invoke(ctx, Compliance_UpdateScrubEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) DeleteScrubListEntries(ctx context.Context, in *DeleteScrubListEntriesReq, opts ...grpc.CallOption) (*ScrubListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScrubListRes)
	err := c.cc.Invoke(ctx, Compliance_DeleteScrubListEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) GetScrubList(ctx context.Context, in *GetScrubListReq, opts ...grpc.CallOption) (*ScrubListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScrubListRes)
	err := c.cc.Invoke(ctx, Compliance_GetScrubList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) DeleteScrubList(ctx context.Context, in *DeleteScrubListReq, opts ...grpc.CallOption) (*ScrubListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScrubListRes)
	err := c.cc.Invoke(ctx, Compliance_DeleteScrubList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) GetDefaultRules(ctx context.Context, in *GetDefaultRulesReq, opts ...grpc.CallOption) (*GetDefaultRulesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDefaultRulesRes)
	err := c.cc.Invoke(ctx, Compliance_GetDefaultRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) GetScrubLists(ctx context.Context, in *GetScrubListsReq, opts ...grpc.CallOption) (*ScrubListsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScrubListsRes)
	err := c.cc.Invoke(ctx, Compliance_GetScrubLists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) SearchScrubList(ctx context.Context, in *SearchScrubListReq, opts ...grpc.CallOption) (*ScrubList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScrubList)
	err := c.cc.Invoke(ctx, Compliance_SearchScrubList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) GetScrubListUploadUrl(ctx context.Context, in *GetScrubListUploadUrlReq, opts ...grpc.CallOption) (*GetScrubListUploadUrlRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScrubListUploadUrlRes)
	err := c.cc.Invoke(ctx, Compliance_GetScrubListUploadUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) ProcessScrubListUpload(ctx context.Context, in *ProcessScrubListUploadReq, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Compliance_ProcessScrubListUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) ScrubListDownload(ctx context.Context, in *ScrubListDownloadRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Compliance_ScrubListDownload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) ProcessScrubListDeleteUpload(ctx context.Context, in *ProcessScrubListDeleteUploadReq, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Compliance_ProcessScrubListDeleteUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) ExportScrubList(ctx context.Context, in *ExportScrubListReq, opts ...grpc.CallOption) (*ExportScrubListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportScrubListRes)
	err := c.cc.Invoke(ctx, Compliance_ExportScrubList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) PurgeScrubList(ctx context.Context, in *PurgeScrubListReq, opts ...grpc.CallOption) (*PurgeScrubListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurgeScrubListRes)
	err := c.cc.Invoke(ctx, Compliance_PurgeScrubList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) CreateScenario(ctx context.Context, in *CreateScenarioReq, opts ...grpc.CallOption) (*CreateScenarioRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateScenarioRes)
	err := c.cc.Invoke(ctx, Compliance_CreateScenario_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) GetScenario(ctx context.Context, in *GetScenarioReq, opts ...grpc.CallOption) (*GetScenarioRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScenarioRes)
	err := c.cc.Invoke(ctx, Compliance_GetScenario_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) UpdateScenario(ctx context.Context, in *UpdateScenarioReq, opts ...grpc.CallOption) (*UpdateScenarioRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateScenarioRes)
	err := c.cc.Invoke(ctx, Compliance_UpdateScenario_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) DeleteScenario(ctx context.Context, in *DeleteScenarioReq, opts ...grpc.CallOption) (*DeleteScenarioRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteScenarioRes)
	err := c.cc.Invoke(ctx, Compliance_DeleteScenario_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) RunAssignedScenarios(ctx context.Context, in *RunAssignedScenariosReq, opts ...grpc.CallOption) (*RunAssignedScenariosRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunAssignedScenariosRes)
	err := c.cc.Invoke(ctx, Compliance_RunAssignedScenarios_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) ListAllScenarios(ctx context.Context, in *ListAllScenariosReq, opts ...grpc.CallOption) (*ListAllScenariosRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAllScenariosRes)
	err := c.cc.Invoke(ctx, Compliance_ListAllScenarios_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) ListUnassignedScenarios(ctx context.Context, in *ListUnassignedScenariosReq, opts ...grpc.CallOption) (*ListUnassignedScenariosRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUnassignedScenariosRes)
	err := c.cc.Invoke(ctx, Compliance_ListUnassignedScenarios_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) ListAssignedRuleSets(ctx context.Context, in *ListAssignedRuleSetsReq, opts ...grpc.CallOption) (*ListAssignedRuleSetsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAssignedRuleSetsRes)
	err := c.cc.Invoke(ctx, Compliance_ListAssignedRuleSets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) ListAssignedScenarios(ctx context.Context, in *ListAssignedScenariosReq, opts ...grpc.CallOption) (*ListAssignedScenariosRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAssignedScenariosRes)
	err := c.cc.Invoke(ctx, Compliance_ListAssignedScenarios_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) AssignScenario(ctx context.Context, in *AssignScenarioReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Compliance_AssignScenario_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) UnassignScenario(ctx context.Context, in *UnassignScenarioReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Compliance_UnassignScenario_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) EnableScenario(ctx context.Context, in *EnableScenarioReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Compliance_EnableScenario_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) DisableScenario(ctx context.Context, in *DisableScenarioReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Compliance_DisableScenario_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) GetFieldNames(ctx context.Context, in *GetFieldNamesReq, opts ...grpc.CallOption) (*FieldNames, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FieldNames)
	err := c.cc.Invoke(ctx, Compliance_GetFieldNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) GetResultDescriptions(ctx context.Context, in *GetResultDescriptionsReq, opts ...grpc.CallOption) (*FieldNames, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FieldNames)
	err := c.cc.Invoke(ctx, Compliance_GetResultDescriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) CreateConsentProfile(ctx context.Context, in *CreateConsentProfileReq, opts ...grpc.CallOption) (*CreateConsentProfileRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConsentProfileRes)
	err := c.cc.Invoke(ctx, Compliance_CreateConsentProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) CreateConsent(ctx context.Context, in *CreateConsentReq, opts ...grpc.CallOption) (*CreateConsentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConsentRes)
	err := c.cc.Invoke(ctx, Compliance_CreateConsent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) GetConsentProfile(ctx context.Context, in *GetConsentProfileReq, opts ...grpc.CallOption) (*ConsentProfile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsentProfile)
	err := c.cc.Invoke(ctx, Compliance_GetConsentProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) GetConsent(ctx context.Context, in *GetConsentReq, opts ...grpc.CallOption) (*Consent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Consent)
	err := c.cc.Invoke(ctx, Compliance_GetConsent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) GetConsentByProfileAndContent(ctx context.Context, in *GetConsentByProfileAndContentReq, opts ...grpc.CallOption) (*GetConsentByProfileAndContentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConsentByProfileAndContentRes)
	err := c.cc.Invoke(ctx, Compliance_GetConsentByProfileAndContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) GetConsentByContent(ctx context.Context, in *GetConsentByContentReq, opts ...grpc.CallOption) (*GetConsentByContentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConsentByContentRes)
	err := c.cc.Invoke(ctx, Compliance_GetConsentByContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) SearchConsentByContent(ctx context.Context, in *SearchConsentByContentReq, opts ...grpc.CallOption) (*SearchConsentByContentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchConsentByContentRes)
	err := c.cc.Invoke(ctx, Compliance_SearchConsentByContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) UpdateConsent(ctx context.Context, in *UpdateConsentReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Compliance_UpdateConsent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) ExpireConsent(ctx context.Context, in *ExpireConsentReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Compliance_ExpireConsent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) RevokeConsent(ctx context.Context, in *RevokeConsentReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Compliance_RevokeConsent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) DeleteConsent(ctx context.Context, in *DeleteConsentReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Compliance_DeleteConsent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) ProcessConsentListDeleteUpload(ctx context.Context, in *ProcessConsentListDeleteUploadReq, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Compliance_ProcessConsentListDeleteUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) ConsentListDownload(ctx context.Context, in *ConsentListDownloadRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Compliance_ConsentListDownload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) EnableConsentProfile(ctx context.Context, in *EnableConsentProfileReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Compliance_EnableConsentProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) DisableConsentProfile(ctx context.Context, in *DisableConsentProfileReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Compliance_DisableConsentProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) ListConsentProfiles(ctx context.Context, in *ListConsentProfilesReq, opts ...grpc.CallOption) (*ListConsentProfilesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConsentProfilesRes)
	err := c.cc.Invoke(ctx, Compliance_ListConsentProfiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) GetConsentUploadUrl(ctx context.Context, in *GetConsentUploadUrlReq, opts ...grpc.CallOption) (*GetConsentUploadUrlRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConsentUploadUrlRes)
	err := c.cc.Invoke(ctx, Compliance_GetConsentUploadUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) ProcessConsentUpload(ctx context.Context, in *ProcessConsentUploadReq, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Compliance_ProcessConsentUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) ExportConsentList(ctx context.Context, in *ExportConsentListRequest, opts ...grpc.CallOption) (*ExportConsentListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportConsentListResponse)
	err := c.cc.Invoke(ctx, Compliance_ExportConsentList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) ListConsentTopics(ctx context.Context, in *ListConsentTopicsReq, opts ...grpc.CallOption) (*ListConsentTopicsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConsentTopicsRes)
	err := c.cc.Invoke(ctx, Compliance_ListConsentTopics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) GetConsentTopic(ctx context.Context, in *GetConsentTopicReq, opts ...grpc.CallOption) (*ConsentTopic, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsentTopic)
	err := c.cc.Invoke(ctx, Compliance_GetConsentTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) CreateConsentTopic(ctx context.Context, in *ConsentTopic, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Compliance_CreateConsentTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) DeleteConsentTopic(ctx context.Context, in *ConsentTopic, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Compliance_DeleteConsentTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) UpdateConsentTopic(ctx context.Context, in *UpdateConsentTopicReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Compliance_UpdateConsentTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) ProcessOutboundCall(ctx context.Context, in *ProcessOutboundCallReq, opts ...grpc.CallOption) (*ProcessRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessRes)
	err := c.cc.Invoke(ctx, Compliance_ProcessOutboundCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) QueryHolidays(ctx context.Context, in *QueryHolidaysRequest, opts ...grpc.CallOption) (*QueryHolidaysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryHolidaysResponse)
	err := c.cc.Invoke(ctx, Compliance_QueryHolidays_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComplianceServer is the server API for Compliance service.
// All implementations must embed UnimplementedComplianceServer
// for forward compatibility.
type ComplianceServer interface {
	RuleAutoComplete(context.Context, *RuleAutoCompleteReq) (*RuleAutoCompleteRes, error)
	CheckRuleSet(context.Context, *CheckRuleSetReq) (*CheckRuleSetRes, error)
	AssignRuleSet(context.Context, *AssignRuleSetReq) (*AssignRuleSetRes, error)
	ListRuleSets(*ListRuleSetsReq, grpc.ServerStreamingServer[ListRuleSetsRes]) error
	GetRuleSet(context.Context, *GetRuleSetReq) (*RuleSet, error)
	GetRuleSetByName(context.Context, *GetRuleSetByNameReq) (*RuleSet, error)
	CreateRuleSet(context.Context, *CreateRuleSetReq) (*RuleSet, error)
	RenameRuleSet(context.Context, *RenameRuleSetReq) (*RenameRuleSetRes, error)
	EnableRuleSet(context.Context, *EnableRuleSetReq) (*EnableRuleSetRes, error)
	DisableRuleSet(context.Context, *DisableRuleSetReq) (*DisableRuleSetRes, error)
	CreateScrubList(context.Context, *CreateScrubListReq) (*ScrubListRes, error)
	// Add entries to an existing scrub list defined by AddScrubListEntriesReq message.
	// The method will return a ScrubListRes message that will
	// contain the results.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE or PERMISSION_AGENT_COMPLIANCE_SCRUBLIST_OPTIONS
	AddScrubListEntries(context.Context, *AddScrubListEntriesReq) (*ScrubListRes, error)
	// Update scrub list entry defined by UpdateScrubEntryReq message.
	// The method will update a scrub list entry with the specified fields
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE
	UpdateScrubEntry(context.Context, *UpdateScrubEntryReq) (*UpdateScrubEntryRes, error)
	DeleteScrubListEntries(context.Context, *DeleteScrubListEntriesReq) (*ScrubListRes, error)
	GetScrubList(context.Context, *GetScrubListReq) (*ScrubListRes, error)
	DeleteScrubList(context.Context, *DeleteScrubListReq) (*ScrubListRes, error)
	GetDefaultRules(context.Context, *GetDefaultRulesReq) (*GetDefaultRulesRes, error)
	GetScrubLists(context.Context, *GetScrubListsReq) (*ScrubListsRes, error)
	SearchScrubList(context.Context, *SearchScrubListReq) (*ScrubList, error)
	GetScrubListUploadUrl(context.Context, *GetScrubListUploadUrlReq) (*GetScrubListUploadUrlRes, error)
	ProcessScrubListUpload(context.Context, *ProcessScrubListUploadReq) (*longrunningpb.Operation, error)
	// Download a scrub list defined by ScrubListDownloadRequest message.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE
	ScrubListDownload(context.Context, *ScrubListDownloadRequest) (*longrunningpb.Operation, error)
	ProcessScrubListDeleteUpload(context.Context, *ProcessScrubListDeleteUploadReq) (*longrunningpb.Operation, error)
	ExportScrubList(context.Context, *ExportScrubListReq) (*ExportScrubListRes, error)
	// Purge entries from a scrub list defined by PurgeScrubListReq message.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE
	PurgeScrubList(context.Context, *PurgeScrubListReq) (*PurgeScrubListRes, error)
	// Creates a new Scenario
	CreateScenario(context.Context, *CreateScenarioReq) (*CreateScenarioRes, error)
	// Gets one Scenario
	GetScenario(context.Context, *GetScenarioReq) (*GetScenarioRes, error)
	// Updates a Scenario
	UpdateScenario(context.Context, *UpdateScenarioReq) (*UpdateScenarioRes, error)
	// Deletes a Scenario
	DeleteScenario(context.Context, *DeleteScenarioReq) (*DeleteScenarioRes, error)
	// Run scenarios against ruleset
	RunAssignedScenarios(context.Context, *RunAssignedScenariosReq) (*RunAssignedScenariosRes, error)
	// Lists all scenarios
	ListAllScenarios(context.Context, *ListAllScenariosReq) (*ListAllScenariosRes, error)
	// List currently unassigned scenarios available to be assigned to a given ruleset
	ListUnassignedScenarios(context.Context, *ListUnassignedScenariosReq) (*ListUnassignedScenariosRes, error)
	// List rule sets currently assigned to a given scenario
	ListAssignedRuleSets(context.Context, *ListAssignedRuleSetsReq) (*ListAssignedRuleSetsRes, error)
	// List scenarios currently assigned to a given ruleset
	ListAssignedScenarios(context.Context, *ListAssignedScenariosReq) (*ListAssignedScenariosRes, error)
	// Assign a scenario to a given ruleset
	AssignScenario(context.Context, *AssignScenarioReq) (*emptypb.Empty, error)
	// Unassign a scenario from a given ruleset
	UnassignScenario(context.Context, *UnassignScenarioReq) (*emptypb.Empty, error)
	// Enable an scenario
	EnableScenario(context.Context, *EnableScenarioReq) (*emptypb.Empty, error)
	// Disable an scenario
	DisableScenario(context.Context, *DisableScenarioReq) (*emptypb.Empty, error)
	// Frequency data calls
	// This will get all available Meta Fields
	GetFieldNames(context.Context, *GetFieldNamesReq) (*FieldNames, error)
	// This will get all possible results (Answered, Answered Machine, Busy, etc.)
	GetResultDescriptions(context.Context, *GetResultDescriptionsReq) (*FieldNames, error)
	// Create/Record a consent profile defined by CreateConsentProfileReq
	// message.  The method will return a CreateConsentProfileRes message
	// that will contain the newly created consent_profile_id.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	CreateConsentProfile(context.Context, *CreateConsentProfileReq) (*CreateConsentProfileRes, error)
	// Create/Record a consent defined by CreateConsentReq message.
	// The method will return a CreateConsentRes message that will
	// contain the newly created consent_id.
	// Required permissions:
	//
	//	none
	CreateConsent(context.Context, *CreateConsentReq) (*CreateConsentRes, error)
	// Gets a consent profile defined by GetConsentProfileReq message
	// for the specified consent_profile_id and org_id.
	// The method will return a ConsentProfile message/entity.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	GetConsentProfile(context.Context, *GetConsentProfileReq) (*ConsentProfile, error)
	// Gets a consent defined by GetConsentReq message
	// for the specified consent_id and org_id.
	// The method will return a Consent entity.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	GetConsent(context.Context, *GetConsentReq) (*Consent, error)
	// Gets a consent defined by GetConsentByProfileAndContentReq message
	// for the specified consent_profile_id and content.
	// The method will return a GetConsentByProfileAndContentRes message/entity.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	GetConsentByProfileAndContent(context.Context, *GetConsentByProfileAndContentReq) (*GetConsentByProfileAndContentRes, error)
	// Gets a consent defined by GetConsentByContentReq message
	// for the specified consent_profile_id and content and channel_type.
	// The method will return a GetConsentByContentRes message/entity.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	GetConsentByContent(context.Context, *GetConsentByContentReq) (*GetConsentByContentRes, error)
	// Searches for a consent defined by SearchConsentByContentReq message
	// for the specified content.
	// The method will return a SearchConsentByContentRes message/entity.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	SearchConsentByContent(context.Context, *SearchConsentByContentReq) (*SearchConsentByContentRes, error)
	// Update a consent defined by UpdateConsentReq message for
	// the specified consent_id, and will update the following
	// consent fields:
	//
	//	Content
	//	Recorded
	//	Revoked
	//	Expire
	//	ReferringUrl
	//
	// The method will return a google.protobuf.Empty message.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	UpdateConsent(context.Context, *UpdateConsentReq) (*emptypb.Empty, error)
	// Expire a consent defined by ExpireConsentReq message.
	// Set the expiration date for the specified consent_id field.
	// The method will return a google.protobuf.Empty message.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	ExpireConsent(context.Context, *ExpireConsentReq) (*emptypb.Empty, error)
	// Revoke a consent defined by RevokeConsentReq message.
	// Set the revoked date for the specified consent_id and
	// consent_profile_id fields.
	// The method will return a google.protobuf.Empty message.
	// Required permissions:
	//
	//	none
	RevokeConsent(context.Context, *RevokeConsentReq) (*emptypb.Empty, error)
	// Delete a consent defined by DeleteConsentReq message
	// The method will return a google.protobuf.Empty message
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	DeleteConsent(context.Context, *DeleteConsentReq) (*emptypb.Empty, error)
	// Process a consent delete list defined by DeleteConsentReq message
	// The method will return a google.protobuf.Empty message
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	ProcessConsentListDeleteUpload(context.Context, *ProcessConsentListDeleteUploadReq) (*longrunningpb.Operation, error)
	// Download a consent list defined by ConsentListDownloadRequest message
	// The method will return a google.longrunning.Operation message
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	ConsentListDownload(context.Context, *ConsentListDownloadRequest) (*longrunningpb.Operation, error)
	// Enable a consent profile defined by EnableConsentProfileReq message.
	// Set the disabled field to false for the specified
	// consent_profile_id field.
	// The method will return a google.protobuf.Empty message.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	EnableConsentProfile(context.Context, *EnableConsentProfileReq) (*emptypb.Empty, error)
	// Disable a consent profile defined by DisableConsentProfileReq message.
	// Set the disabled field to true for the specified
	// consent_profile_id field.
	// The method will return a google.protobuf.Empty message.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	DisableConsentProfile(context.Context, *DisableConsentProfileReq) (*emptypb.Empty, error)
	// List consent profiles defined by ListConsentProfilesReq message.
	// Gets all of the unique consent profiles.
	// The method will return a ListConsentProfilesRes message
	// containing consent_profile_id, profile_name, the number of consents
	// belonging to the profile, and disabled.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	ListConsentProfiles(context.Context, *ListConsentProfilesReq) (*ListConsentProfilesRes, error)
	// Get consent upload url defined by GetConsentUploadUrlReq message.
	// The method will return a GetConsentUploadUrlRes messages
	// containing a url with which to upload an import file.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	GetConsentUploadUrl(context.Context, *GetConsentUploadUrlReq) (*GetConsentUploadUrlRes, error)
	// Process consent upload defined by ProcessConsentUploadReq message.
	// The method will process an uploaded consent file.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	ProcessConsentUpload(context.Context, *ProcessConsentUploadReq) (*longrunningpb.Operation, error)
	// Export consent list defined by ExportConsentListRequest message.
	// The method will create a consent download file in CSV format and return a URL for download.
	ExportConsentList(context.Context, *ExportConsentListRequest) (*ExportConsentListResponse, error)
	// List consent topics defined by ListConsentTopicsReq message.
	// Gets all of the unique consent topics.
	// The method will return a ListConsentTopicsRes message
	// containing topic, org_id, and deleted.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	ListConsentTopics(context.Context, *ListConsentTopicsReq) (*ListConsentTopicsRes, error)
	// Gets a consent topic defined by GetConsentTopicReq message
	// for the specified topic and org_id.
	// The method will return a ConsentTopic message/entity.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	GetConsentTopic(context.Context, *GetConsentTopicReq) (*ConsentTopic, error)
	// Create a consent topic defined by ConsentTopic
	// message.  The method will return an Empty message.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	CreateConsentTopic(context.Context, *ConsentTopic) (*Empty, error)
	// Delete a consent topic defined by ConsentTopic message.
	// The method will return an Empty message.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	DeleteConsentTopic(context.Context, *ConsentTopic) (*Empty, error)
	// Update a consent topic defined by UpdateConsentTopicReq message.
	// The method will return an Empty message.
	// Required permissions:
	//
	//	PERMISSION_COMPLIANCE_CONSENT
	UpdateConsentTopic(context.Context, *UpdateConsentTopicReq) (*Empty, error)
	// Process and Outbound Phone Number against a rule set.
	// The method will return a response indicating
	// if the call would be permited or not and the list
	// of rules checked against.
	// Required permissions:
	//
	//	AGENT
	ProcessOutboundCall(context.Context, *ProcessOutboundCallReq) (*ProcessRes, error)
	// Return the holidays that match the request.
	// The method will return a stream of the matching holidays.
	// Required permissions:
	//
	//	none
	QueryHolidays(context.Context, *QueryHolidaysRequest) (*QueryHolidaysResponse, error)
	mustEmbedUnimplementedComplianceServer()
}

// UnimplementedComplianceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedComplianceServer struct{}

func (UnimplementedComplianceServer) RuleAutoComplete(context.Context, *RuleAutoCompleteReq) (*RuleAutoCompleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RuleAutoComplete not implemented")
}
func (UnimplementedComplianceServer) CheckRuleSet(context.Context, *CheckRuleSetReq) (*CheckRuleSetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRuleSet not implemented")
}
func (UnimplementedComplianceServer) AssignRuleSet(context.Context, *AssignRuleSetReq) (*AssignRuleSetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRuleSet not implemented")
}
func (UnimplementedComplianceServer) ListRuleSets(*ListRuleSetsReq, grpc.ServerStreamingServer[ListRuleSetsRes]) error {
	return status.Errorf(codes.Unimplemented, "method ListRuleSets not implemented")
}
func (UnimplementedComplianceServer) GetRuleSet(context.Context, *GetRuleSetReq) (*RuleSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuleSet not implemented")
}
func (UnimplementedComplianceServer) GetRuleSetByName(context.Context, *GetRuleSetByNameReq) (*RuleSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuleSetByName not implemented")
}
func (UnimplementedComplianceServer) CreateRuleSet(context.Context, *CreateRuleSetReq) (*RuleSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRuleSet not implemented")
}
func (UnimplementedComplianceServer) RenameRuleSet(context.Context, *RenameRuleSetReq) (*RenameRuleSetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameRuleSet not implemented")
}
func (UnimplementedComplianceServer) EnableRuleSet(context.Context, *EnableRuleSetReq) (*EnableRuleSetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableRuleSet not implemented")
}
func (UnimplementedComplianceServer) DisableRuleSet(context.Context, *DisableRuleSetReq) (*DisableRuleSetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableRuleSet not implemented")
}
func (UnimplementedComplianceServer) CreateScrubList(context.Context, *CreateScrubListReq) (*ScrubListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScrubList not implemented")
}
func (UnimplementedComplianceServer) AddScrubListEntries(context.Context, *AddScrubListEntriesReq) (*ScrubListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddScrubListEntries not implemented")
}
func (UnimplementedComplianceServer) UpdateScrubEntry(context.Context, *UpdateScrubEntryReq) (*UpdateScrubEntryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScrubEntry not implemented")
}
func (UnimplementedComplianceServer) DeleteScrubListEntries(context.Context, *DeleteScrubListEntriesReq) (*ScrubListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScrubListEntries not implemented")
}
func (UnimplementedComplianceServer) GetScrubList(context.Context, *GetScrubListReq) (*ScrubListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScrubList not implemented")
}
func (UnimplementedComplianceServer) DeleteScrubList(context.Context, *DeleteScrubListReq) (*ScrubListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScrubList not implemented")
}
func (UnimplementedComplianceServer) GetDefaultRules(context.Context, *GetDefaultRulesReq) (*GetDefaultRulesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultRules not implemented")
}
func (UnimplementedComplianceServer) GetScrubLists(context.Context, *GetScrubListsReq) (*ScrubListsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScrubLists not implemented")
}
func (UnimplementedComplianceServer) SearchScrubList(context.Context, *SearchScrubListReq) (*ScrubList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchScrubList not implemented")
}
func (UnimplementedComplianceServer) GetScrubListUploadUrl(context.Context, *GetScrubListUploadUrlReq) (*GetScrubListUploadUrlRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScrubListUploadUrl not implemented")
}
func (UnimplementedComplianceServer) ProcessScrubListUpload(context.Context, *ProcessScrubListUploadReq) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessScrubListUpload not implemented")
}
func (UnimplementedComplianceServer) ScrubListDownload(context.Context, *ScrubListDownloadRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScrubListDownload not implemented")
}
func (UnimplementedComplianceServer) ProcessScrubListDeleteUpload(context.Context, *ProcessScrubListDeleteUploadReq) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessScrubListDeleteUpload not implemented")
}
func (UnimplementedComplianceServer) ExportScrubList(context.Context, *ExportScrubListReq) (*ExportScrubListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportScrubList not implemented")
}
func (UnimplementedComplianceServer) PurgeScrubList(context.Context, *PurgeScrubListReq) (*PurgeScrubListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeScrubList not implemented")
}
func (UnimplementedComplianceServer) CreateScenario(context.Context, *CreateScenarioReq) (*CreateScenarioRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScenario not implemented")
}
func (UnimplementedComplianceServer) GetScenario(context.Context, *GetScenarioReq) (*GetScenarioRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScenario not implemented")
}
func (UnimplementedComplianceServer) UpdateScenario(context.Context, *UpdateScenarioReq) (*UpdateScenarioRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScenario not implemented")
}
func (UnimplementedComplianceServer) DeleteScenario(context.Context, *DeleteScenarioReq) (*DeleteScenarioRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScenario not implemented")
}
func (UnimplementedComplianceServer) RunAssignedScenarios(context.Context, *RunAssignedScenariosReq) (*RunAssignedScenariosRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunAssignedScenarios not implemented")
}
func (UnimplementedComplianceServer) ListAllScenarios(context.Context, *ListAllScenariosReq) (*ListAllScenariosRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllScenarios not implemented")
}
func (UnimplementedComplianceServer) ListUnassignedScenarios(context.Context, *ListUnassignedScenariosReq) (*ListUnassignedScenariosRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnassignedScenarios not implemented")
}
func (UnimplementedComplianceServer) ListAssignedRuleSets(context.Context, *ListAssignedRuleSetsReq) (*ListAssignedRuleSetsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssignedRuleSets not implemented")
}
func (UnimplementedComplianceServer) ListAssignedScenarios(context.Context, *ListAssignedScenariosReq) (*ListAssignedScenariosRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssignedScenarios not implemented")
}
func (UnimplementedComplianceServer) AssignScenario(context.Context, *AssignScenarioReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignScenario not implemented")
}
func (UnimplementedComplianceServer) UnassignScenario(context.Context, *UnassignScenarioReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignScenario not implemented")
}
func (UnimplementedComplianceServer) EnableScenario(context.Context, *EnableScenarioReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableScenario not implemented")
}
func (UnimplementedComplianceServer) DisableScenario(context.Context, *DisableScenarioReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableScenario not implemented")
}
func (UnimplementedComplianceServer) GetFieldNames(context.Context, *GetFieldNamesReq) (*FieldNames, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFieldNames not implemented")
}
func (UnimplementedComplianceServer) GetResultDescriptions(context.Context, *GetResultDescriptionsReq) (*FieldNames, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResultDescriptions not implemented")
}
func (UnimplementedComplianceServer) CreateConsentProfile(context.Context, *CreateConsentProfileReq) (*CreateConsentProfileRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsentProfile not implemented")
}
func (UnimplementedComplianceServer) CreateConsent(context.Context, *CreateConsentReq) (*CreateConsentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsent not implemented")
}
func (UnimplementedComplianceServer) GetConsentProfile(context.Context, *GetConsentProfileReq) (*ConsentProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsentProfile not implemented")
}
func (UnimplementedComplianceServer) GetConsent(context.Context, *GetConsentReq) (*Consent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsent not implemented")
}
func (UnimplementedComplianceServer) GetConsentByProfileAndContent(context.Context, *GetConsentByProfileAndContentReq) (*GetConsentByProfileAndContentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsentByProfileAndContent not implemented")
}
func (UnimplementedComplianceServer) GetConsentByContent(context.Context, *GetConsentByContentReq) (*GetConsentByContentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsentByContent not implemented")
}
func (UnimplementedComplianceServer) SearchConsentByContent(context.Context, *SearchConsentByContentReq) (*SearchConsentByContentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchConsentByContent not implemented")
}
func (UnimplementedComplianceServer) UpdateConsent(context.Context, *UpdateConsentReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConsent not implemented")
}
func (UnimplementedComplianceServer) ExpireConsent(context.Context, *ExpireConsentReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpireConsent not implemented")
}
func (UnimplementedComplianceServer) RevokeConsent(context.Context, *RevokeConsentReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeConsent not implemented")
}
func (UnimplementedComplianceServer) DeleteConsent(context.Context, *DeleteConsentReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConsent not implemented")
}
func (UnimplementedComplianceServer) ProcessConsentListDeleteUpload(context.Context, *ProcessConsentListDeleteUploadReq) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessConsentListDeleteUpload not implemented")
}
func (UnimplementedComplianceServer) ConsentListDownload(context.Context, *ConsentListDownloadRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsentListDownload not implemented")
}
func (UnimplementedComplianceServer) EnableConsentProfile(context.Context, *EnableConsentProfileReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableConsentProfile not implemented")
}
func (UnimplementedComplianceServer) DisableConsentProfile(context.Context, *DisableConsentProfileReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableConsentProfile not implemented")
}
func (UnimplementedComplianceServer) ListConsentProfiles(context.Context, *ListConsentProfilesReq) (*ListConsentProfilesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConsentProfiles not implemented")
}
func (UnimplementedComplianceServer) GetConsentUploadUrl(context.Context, *GetConsentUploadUrlReq) (*GetConsentUploadUrlRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsentUploadUrl not implemented")
}
func (UnimplementedComplianceServer) ProcessConsentUpload(context.Context, *ProcessConsentUploadReq) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessConsentUpload not implemented")
}
func (UnimplementedComplianceServer) ExportConsentList(context.Context, *ExportConsentListRequest) (*ExportConsentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportConsentList not implemented")
}
func (UnimplementedComplianceServer) ListConsentTopics(context.Context, *ListConsentTopicsReq) (*ListConsentTopicsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConsentTopics not implemented")
}
func (UnimplementedComplianceServer) GetConsentTopic(context.Context, *GetConsentTopicReq) (*ConsentTopic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsentTopic not implemented")
}
func (UnimplementedComplianceServer) CreateConsentTopic(context.Context, *ConsentTopic) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsentTopic not implemented")
}
func (UnimplementedComplianceServer) DeleteConsentTopic(context.Context, *ConsentTopic) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConsentTopic not implemented")
}
func (UnimplementedComplianceServer) UpdateConsentTopic(context.Context, *UpdateConsentTopicReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConsentTopic not implemented")
}
func (UnimplementedComplianceServer) ProcessOutboundCall(context.Context, *ProcessOutboundCallReq) (*ProcessRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessOutboundCall not implemented")
}
func (UnimplementedComplianceServer) QueryHolidays(context.Context, *QueryHolidaysRequest) (*QueryHolidaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHolidays not implemented")
}
func (UnimplementedComplianceServer) mustEmbedUnimplementedComplianceServer() {}
func (UnimplementedComplianceServer) testEmbeddedByValue()                    {}

// UnsafeComplianceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComplianceServer will
// result in compilation errors.
type UnsafeComplianceServer interface {
	mustEmbedUnimplementedComplianceServer()
}

func RegisterComplianceServer(s grpc.ServiceRegistrar, srv ComplianceServer) {
	// If the following call pancis, it indicates UnimplementedComplianceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Compliance_ServiceDesc, srv)
}

func _Compliance_RuleAutoComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleAutoCompleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).RuleAutoComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_RuleAutoComplete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).RuleAutoComplete(ctx, req.(*RuleAutoCompleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_CheckRuleSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRuleSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).CheckRuleSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_CheckRuleSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).CheckRuleSet(ctx, req.(*CheckRuleSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_AssignRuleSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRuleSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).AssignRuleSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_AssignRuleSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).AssignRuleSet(ctx, req.(*AssignRuleSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_ListRuleSets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRuleSetsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ComplianceServer).ListRuleSets(m, &grpc.GenericServerStream[ListRuleSetsReq, ListRuleSetsRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Compliance_ListRuleSetsServer = grpc.ServerStreamingServer[ListRuleSetsRes]

func _Compliance_GetRuleSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).GetRuleSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_GetRuleSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).GetRuleSet(ctx, req.(*GetRuleSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_GetRuleSetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleSetByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).GetRuleSetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_GetRuleSetByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).GetRuleSetByName(ctx, req.(*GetRuleSetByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_CreateRuleSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRuleSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).CreateRuleSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_CreateRuleSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).CreateRuleSet(ctx, req.(*CreateRuleSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_RenameRuleSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameRuleSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).RenameRuleSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_RenameRuleSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).RenameRuleSet(ctx, req.(*RenameRuleSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_EnableRuleSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableRuleSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).EnableRuleSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_EnableRuleSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).EnableRuleSet(ctx, req.(*EnableRuleSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_DisableRuleSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableRuleSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).DisableRuleSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_DisableRuleSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).DisableRuleSet(ctx, req.(*DisableRuleSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_CreateScrubList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScrubListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).CreateScrubList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_CreateScrubList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).CreateScrubList(ctx, req.(*CreateScrubListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_AddScrubListEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddScrubListEntriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).AddScrubListEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_AddScrubListEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).AddScrubListEntries(ctx, req.(*AddScrubListEntriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_UpdateScrubEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScrubEntryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).UpdateScrubEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_UpdateScrubEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).UpdateScrubEntry(ctx, req.(*UpdateScrubEntryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_DeleteScrubListEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScrubListEntriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).DeleteScrubListEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_DeleteScrubListEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).DeleteScrubListEntries(ctx, req.(*DeleteScrubListEntriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_GetScrubList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScrubListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).GetScrubList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_GetScrubList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).GetScrubList(ctx, req.(*GetScrubListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_DeleteScrubList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScrubListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).DeleteScrubList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_DeleteScrubList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).DeleteScrubList(ctx, req.(*DeleteScrubListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_GetDefaultRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).GetDefaultRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_GetDefaultRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).GetDefaultRules(ctx, req.(*GetDefaultRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_GetScrubLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScrubListsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).GetScrubLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_GetScrubLists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).GetScrubLists(ctx, req.(*GetScrubListsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_SearchScrubList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchScrubListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).SearchScrubList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_SearchScrubList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).SearchScrubList(ctx, req.(*SearchScrubListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_GetScrubListUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScrubListUploadUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).GetScrubListUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_GetScrubListUploadUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).GetScrubListUploadUrl(ctx, req.(*GetScrubListUploadUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_ProcessScrubListUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessScrubListUploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).ProcessScrubListUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_ProcessScrubListUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).ProcessScrubListUpload(ctx, req.(*ProcessScrubListUploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_ScrubListDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrubListDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).ScrubListDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_ScrubListDownload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).ScrubListDownload(ctx, req.(*ScrubListDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_ProcessScrubListDeleteUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessScrubListDeleteUploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).ProcessScrubListDeleteUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_ProcessScrubListDeleteUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).ProcessScrubListDeleteUpload(ctx, req.(*ProcessScrubListDeleteUploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_ExportScrubList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportScrubListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).ExportScrubList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_ExportScrubList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).ExportScrubList(ctx, req.(*ExportScrubListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_PurgeScrubList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeScrubListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).PurgeScrubList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_PurgeScrubList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).PurgeScrubList(ctx, req.(*PurgeScrubListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_CreateScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScenarioReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).CreateScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_CreateScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).CreateScenario(ctx, req.(*CreateScenarioReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_GetScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScenarioReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).GetScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_GetScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).GetScenario(ctx, req.(*GetScenarioReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_UpdateScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScenarioReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).UpdateScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_UpdateScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).UpdateScenario(ctx, req.(*UpdateScenarioReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_DeleteScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScenarioReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).DeleteScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_DeleteScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).DeleteScenario(ctx, req.(*DeleteScenarioReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_RunAssignedScenarios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunAssignedScenariosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).RunAssignedScenarios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_RunAssignedScenarios_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).RunAssignedScenarios(ctx, req.(*RunAssignedScenariosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_ListAllScenarios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllScenariosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).ListAllScenarios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_ListAllScenarios_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).ListAllScenarios(ctx, req.(*ListAllScenariosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_ListUnassignedScenarios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUnassignedScenariosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).ListUnassignedScenarios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_ListUnassignedScenarios_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).ListUnassignedScenarios(ctx, req.(*ListUnassignedScenariosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_ListAssignedRuleSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssignedRuleSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).ListAssignedRuleSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_ListAssignedRuleSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).ListAssignedRuleSets(ctx, req.(*ListAssignedRuleSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_ListAssignedScenarios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssignedScenariosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).ListAssignedScenarios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_ListAssignedScenarios_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).ListAssignedScenarios(ctx, req.(*ListAssignedScenariosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_AssignScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignScenarioReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).AssignScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_AssignScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).AssignScenario(ctx, req.(*AssignScenarioReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_UnassignScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignScenarioReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).UnassignScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_UnassignScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).UnassignScenario(ctx, req.(*UnassignScenarioReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_EnableScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableScenarioReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).EnableScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_EnableScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).EnableScenario(ctx, req.(*EnableScenarioReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_DisableScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableScenarioReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).DisableScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_DisableScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).DisableScenario(ctx, req.(*DisableScenarioReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_GetFieldNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFieldNamesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).GetFieldNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_GetFieldNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).GetFieldNames(ctx, req.(*GetFieldNamesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_GetResultDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultDescriptionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).GetResultDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_GetResultDescriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).GetResultDescriptions(ctx, req.(*GetResultDescriptionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_CreateConsentProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsentProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).CreateConsentProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_CreateConsentProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).CreateConsentProfile(ctx, req.(*CreateConsentProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_CreateConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).CreateConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_CreateConsent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).CreateConsent(ctx, req.(*CreateConsentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_GetConsentProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsentProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).GetConsentProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_GetConsentProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).GetConsentProfile(ctx, req.(*GetConsentProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_GetConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).GetConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_GetConsent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).GetConsent(ctx, req.(*GetConsentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_GetConsentByProfileAndContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsentByProfileAndContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).GetConsentByProfileAndContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_GetConsentByProfileAndContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).GetConsentByProfileAndContent(ctx, req.(*GetConsentByProfileAndContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_GetConsentByContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsentByContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).GetConsentByContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_GetConsentByContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).GetConsentByContent(ctx, req.(*GetConsentByContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_SearchConsentByContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchConsentByContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).SearchConsentByContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_SearchConsentByContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).SearchConsentByContent(ctx, req.(*SearchConsentByContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_UpdateConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConsentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).UpdateConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_UpdateConsent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).UpdateConsent(ctx, req.(*UpdateConsentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_ExpireConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpireConsentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).ExpireConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_ExpireConsent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).ExpireConsent(ctx, req.(*ExpireConsentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_RevokeConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeConsentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).RevokeConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_RevokeConsent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).RevokeConsent(ctx, req.(*RevokeConsentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_DeleteConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConsentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).DeleteConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_DeleteConsent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).DeleteConsent(ctx, req.(*DeleteConsentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_ProcessConsentListDeleteUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessConsentListDeleteUploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).ProcessConsentListDeleteUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_ProcessConsentListDeleteUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).ProcessConsentListDeleteUpload(ctx, req.(*ProcessConsentListDeleteUploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_ConsentListDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsentListDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).ConsentListDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_ConsentListDownload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).ConsentListDownload(ctx, req.(*ConsentListDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_EnableConsentProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableConsentProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).EnableConsentProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_EnableConsentProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).EnableConsentProfile(ctx, req.(*EnableConsentProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_DisableConsentProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableConsentProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).DisableConsentProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_DisableConsentProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).DisableConsentProfile(ctx, req.(*DisableConsentProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_ListConsentProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConsentProfilesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).ListConsentProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_ListConsentProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).ListConsentProfiles(ctx, req.(*ListConsentProfilesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_GetConsentUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsentUploadUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).GetConsentUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_GetConsentUploadUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).GetConsentUploadUrl(ctx, req.(*GetConsentUploadUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_ProcessConsentUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessConsentUploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).ProcessConsentUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_ProcessConsentUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).ProcessConsentUpload(ctx, req.(*ProcessConsentUploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_ExportConsentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportConsentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).ExportConsentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_ExportConsentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).ExportConsentList(ctx, req.(*ExportConsentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_ListConsentTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConsentTopicsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).ListConsentTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_ListConsentTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).ListConsentTopics(ctx, req.(*ListConsentTopicsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_GetConsentTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsentTopicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).GetConsentTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_GetConsentTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).GetConsentTopic(ctx, req.(*GetConsentTopicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_CreateConsentTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsentTopic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).CreateConsentTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_CreateConsentTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).CreateConsentTopic(ctx, req.(*ConsentTopic))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_DeleteConsentTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsentTopic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).DeleteConsentTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_DeleteConsentTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).DeleteConsentTopic(ctx, req.(*ConsentTopic))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_UpdateConsentTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConsentTopicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).UpdateConsentTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_UpdateConsentTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).UpdateConsentTopic(ctx, req.(*UpdateConsentTopicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_ProcessOutboundCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessOutboundCallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).ProcessOutboundCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_ProcessOutboundCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).ProcessOutboundCall(ctx, req.(*ProcessOutboundCallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_QueryHolidays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHolidaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).QueryHolidays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compliance_QueryHolidays_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).QueryHolidays(ctx, req.(*QueryHolidaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Compliance_ServiceDesc is the grpc.ServiceDesc for Compliance service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Compliance_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v0alpha.Compliance",
	HandlerType: (*ComplianceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RuleAutoComplete",
			Handler:    _Compliance_RuleAutoComplete_Handler,
		},
		{
			MethodName: "CheckRuleSet",
			Handler:    _Compliance_CheckRuleSet_Handler,
		},
		{
			MethodName: "AssignRuleSet",
			Handler:    _Compliance_AssignRuleSet_Handler,
		},
		{
			MethodName: "GetRuleSet",
			Handler:    _Compliance_GetRuleSet_Handler,
		},
		{
			MethodName: "GetRuleSetByName",
			Handler:    _Compliance_GetRuleSetByName_Handler,
		},
		{
			MethodName: "CreateRuleSet",
			Handler:    _Compliance_CreateRuleSet_Handler,
		},
		{
			MethodName: "RenameRuleSet",
			Handler:    _Compliance_RenameRuleSet_Handler,
		},
		{
			MethodName: "EnableRuleSet",
			Handler:    _Compliance_EnableRuleSet_Handler,
		},
		{
			MethodName: "DisableRuleSet",
			Handler:    _Compliance_DisableRuleSet_Handler,
		},
		{
			MethodName: "CreateScrubList",
			Handler:    _Compliance_CreateScrubList_Handler,
		},
		{
			MethodName: "AddScrubListEntries",
			Handler:    _Compliance_AddScrubListEntries_Handler,
		},
		{
			MethodName: "UpdateScrubEntry",
			Handler:    _Compliance_UpdateScrubEntry_Handler,
		},
		{
			MethodName: "DeleteScrubListEntries",
			Handler:    _Compliance_DeleteScrubListEntries_Handler,
		},
		{
			MethodName: "GetScrubList",
			Handler:    _Compliance_GetScrubList_Handler,
		},
		{
			MethodName: "DeleteScrubList",
			Handler:    _Compliance_DeleteScrubList_Handler,
		},
		{
			MethodName: "GetDefaultRules",
			Handler:    _Compliance_GetDefaultRules_Handler,
		},
		{
			MethodName: "GetScrubLists",
			Handler:    _Compliance_GetScrubLists_Handler,
		},
		{
			MethodName: "SearchScrubList",
			Handler:    _Compliance_SearchScrubList_Handler,
		},
		{
			MethodName: "GetScrubListUploadUrl",
			Handler:    _Compliance_GetScrubListUploadUrl_Handler,
		},
		{
			MethodName: "ProcessScrubListUpload",
			Handler:    _Compliance_ProcessScrubListUpload_Handler,
		},
		{
			MethodName: "ScrubListDownload",
			Handler:    _Compliance_ScrubListDownload_Handler,
		},
		{
			MethodName: "ProcessScrubListDeleteUpload",
			Handler:    _Compliance_ProcessScrubListDeleteUpload_Handler,
		},
		{
			MethodName: "ExportScrubList",
			Handler:    _Compliance_ExportScrubList_Handler,
		},
		{
			MethodName: "PurgeScrubList",
			Handler:    _Compliance_PurgeScrubList_Handler,
		},
		{
			MethodName: "CreateScenario",
			Handler:    _Compliance_CreateScenario_Handler,
		},
		{
			MethodName: "GetScenario",
			Handler:    _Compliance_GetScenario_Handler,
		},
		{
			MethodName: "UpdateScenario",
			Handler:    _Compliance_UpdateScenario_Handler,
		},
		{
			MethodName: "DeleteScenario",
			Handler:    _Compliance_DeleteScenario_Handler,
		},
		{
			MethodName: "RunAssignedScenarios",
			Handler:    _Compliance_RunAssignedScenarios_Handler,
		},
		{
			MethodName: "ListAllScenarios",
			Handler:    _Compliance_ListAllScenarios_Handler,
		},
		{
			MethodName: "ListUnassignedScenarios",
			Handler:    _Compliance_ListUnassignedScenarios_Handler,
		},
		{
			MethodName: "ListAssignedRuleSets",
			Handler:    _Compliance_ListAssignedRuleSets_Handler,
		},
		{
			MethodName: "ListAssignedScenarios",
			Handler:    _Compliance_ListAssignedScenarios_Handler,
		},
		{
			MethodName: "AssignScenario",
			Handler:    _Compliance_AssignScenario_Handler,
		},
		{
			MethodName: "UnassignScenario",
			Handler:    _Compliance_UnassignScenario_Handler,
		},
		{
			MethodName: "EnableScenario",
			Handler:    _Compliance_EnableScenario_Handler,
		},
		{
			MethodName: "DisableScenario",
			Handler:    _Compliance_DisableScenario_Handler,
		},
		{
			MethodName: "GetFieldNames",
			Handler:    _Compliance_GetFieldNames_Handler,
		},
		{
			MethodName: "GetResultDescriptions",
			Handler:    _Compliance_GetResultDescriptions_Handler,
		},
		{
			MethodName: "CreateConsentProfile",
			Handler:    _Compliance_CreateConsentProfile_Handler,
		},
		{
			MethodName: "CreateConsent",
			Handler:    _Compliance_CreateConsent_Handler,
		},
		{
			MethodName: "GetConsentProfile",
			Handler:    _Compliance_GetConsentProfile_Handler,
		},
		{
			MethodName: "GetConsent",
			Handler:    _Compliance_GetConsent_Handler,
		},
		{
			MethodName: "GetConsentByProfileAndContent",
			Handler:    _Compliance_GetConsentByProfileAndContent_Handler,
		},
		{
			MethodName: "GetConsentByContent",
			Handler:    _Compliance_GetConsentByContent_Handler,
		},
		{
			MethodName: "SearchConsentByContent",
			Handler:    _Compliance_SearchConsentByContent_Handler,
		},
		{
			MethodName: "UpdateConsent",
			Handler:    _Compliance_UpdateConsent_Handler,
		},
		{
			MethodName: "ExpireConsent",
			Handler:    _Compliance_ExpireConsent_Handler,
		},
		{
			MethodName: "RevokeConsent",
			Handler:    _Compliance_RevokeConsent_Handler,
		},
		{
			MethodName: "DeleteConsent",
			Handler:    _Compliance_DeleteConsent_Handler,
		},
		{
			MethodName: "ProcessConsentListDeleteUpload",
			Handler:    _Compliance_ProcessConsentListDeleteUpload_Handler,
		},
		{
			MethodName: "ConsentListDownload",
			Handler:    _Compliance_ConsentListDownload_Handler,
		},
		{
			MethodName: "EnableConsentProfile",
			Handler:    _Compliance_EnableConsentProfile_Handler,
		},
		{
			MethodName: "DisableConsentProfile",
			Handler:    _Compliance_DisableConsentProfile_Handler,
		},
		{
			MethodName: "ListConsentProfiles",
			Handler:    _Compliance_ListConsentProfiles_Handler,
		},
		{
			MethodName: "GetConsentUploadUrl",
			Handler:    _Compliance_GetConsentUploadUrl_Handler,
		},
		{
			MethodName: "ProcessConsentUpload",
			Handler:    _Compliance_ProcessConsentUpload_Handler,
		},
		{
			MethodName: "ExportConsentList",
			Handler:    _Compliance_ExportConsentList_Handler,
		},
		{
			MethodName: "ListConsentTopics",
			Handler:    _Compliance_ListConsentTopics_Handler,
		},
		{
			MethodName: "GetConsentTopic",
			Handler:    _Compliance_GetConsentTopic_Handler,
		},
		{
			MethodName: "CreateConsentTopic",
			Handler:    _Compliance_CreateConsentTopic_Handler,
		},
		{
			MethodName: "DeleteConsentTopic",
			Handler:    _Compliance_DeleteConsentTopic_Handler,
		},
		{
			MethodName: "UpdateConsentTopic",
			Handler:    _Compliance_UpdateConsentTopic_Handler,
		},
		{
			MethodName: "ProcessOutboundCall",
			Handler:    _Compliance_ProcessOutboundCall_Handler,
		},
		{
			MethodName: "QueryHolidays",
			Handler:    _Compliance_QueryHolidays_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListRuleSets",
			Handler:       _Compliance_ListRuleSets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v0alpha/compliance.proto",
}
