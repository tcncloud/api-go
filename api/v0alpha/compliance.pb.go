// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: api/v0alpha/compliance.proto

package v0alpha

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	_ "github.com/tcncloud/api-go/annotations"
	commons "github.com/tcncloud/api-go/api/commons"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// request used to process an outbound call against a rule set
type ProcessOutboundCallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the rule set to use for processing
	RuleSetName string `protobuf:"bytes,1,opt,name=rule_set_name,json=ruleSetName,proto3" json:"rule_set_name,omitempty"`
	// The country code of the phone number
	CountryCode string `protobuf:"bytes,2,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// The phone number to process
	PhoneNumber string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// Extra compliance metadata
	CallMetadata map[string]string `protobuf:"bytes,4,rep,name=call_metadata,json=callMetadata,proto3" json:"call_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The id of the caller associated with this process request
	SourceId int64 `protobuf:"varint,5,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// The call type of the caller associated with this process request
	SourceField commons.CallType_Enum `protobuf:"varint,6,opt,name=source_field,json=sourceField,proto3,enum=api.commons.CallType_Enum" json:"source_field,omitempty"`
	// The caller id being called from
	CallerId string `protobuf:"bytes,7,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
}

func (x *ProcessOutboundCallReq) Reset() {
	*x = ProcessOutboundCallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessOutboundCallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessOutboundCallReq) ProtoMessage() {}

func (x *ProcessOutboundCallReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessOutboundCallReq.ProtoReflect.Descriptor instead.
func (*ProcessOutboundCallReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{0}
}

func (x *ProcessOutboundCallReq) GetRuleSetName() string {
	if x != nil {
		return x.RuleSetName
	}
	return ""
}

func (x *ProcessOutboundCallReq) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *ProcessOutboundCallReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *ProcessOutboundCallReq) GetCallMetadata() map[string]string {
	if x != nil {
		return x.CallMetadata
	}
	return nil
}

func (x *ProcessOutboundCallReq) GetSourceId() int64 {
	if x != nil {
		return x.SourceId
	}
	return 0
}

func (x *ProcessOutboundCallReq) GetSourceField() commons.CallType_Enum {
	if x != nil {
		return x.SourceField
	}
	return commons.CallType_Enum(0)
}

func (x *ProcessOutboundCallReq) GetCallerId() string {
	if x != nil {
		return x.CallerId
	}
	return ""
}

type RuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the rule text
	RuleText string `protobuf:"bytes,1,opt,name=rule_text,json=ruleText,proto3" json:"rule_text,omitempty"`
	// indicates if the rule allowed or denied the request
	Permit bool `protobuf:"varint,2,opt,name=permit,proto3" json:"permit,omitempty"`
	// the response from the plugin
	PluginResponse string `protobuf:"bytes,3,opt,name=plugin_response,json=pluginResponse,proto3" json:"plugin_response,omitempty"`
}

func (x *RuleResponse) Reset() {
	*x = RuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleResponse) ProtoMessage() {}

func (x *RuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleResponse.ProtoReflect.Descriptor instead.
func (*RuleResponse) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{1}
}

func (x *RuleResponse) GetRuleText() string {
	if x != nil {
		return x.RuleText
	}
	return ""
}

func (x *RuleResponse) GetPermit() bool {
	if x != nil {
		return x.Permit
	}
	return false
}

func (x *RuleResponse) GetPluginResponse() string {
	if x != nil {
		return x.PluginResponse
	}
	return ""
}

// response given after processing something against a rule set
type ProcessRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// indicates if the process request was permitted or not
	Permit bool `protobuf:"varint,1,opt,name=permit,proto3" json:"permit,omitempty"`
	// the list of rules checked against
	RuleResponses []*RuleResponse `protobuf:"bytes,2,rep,name=rule_responses,json=ruleResponses,proto3" json:"rule_responses,omitempty"`
}

func (x *ProcessRes) Reset() {
	*x = ProcessRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessRes) ProtoMessage() {}

func (x *ProcessRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessRes.ProtoReflect.Descriptor instead.
func (*ProcessRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{2}
}

func (x *ProcessRes) GetPermit() bool {
	if x != nil {
		return x.Permit
	}
	return false
}

func (x *ProcessRes) GetRuleResponses() []*RuleResponse {
	if x != nil {
		return x.RuleResponses
	}
	return nil
}

type ScrubList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListId  string        `protobuf:"bytes,2,opt,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
	Entries []*ScrubEntry `protobuf:"bytes,3,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *ScrubList) Reset() {
	*x = ScrubList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrubList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrubList) ProtoMessage() {}

func (x *ScrubList) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrubList.ProtoReflect.Descriptor instead.
func (*ScrubList) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{3}
}

func (x *ScrubList) GetListId() string {
	if x != nil {
		return x.ListId
	}
	return ""
}

func (x *ScrubList) GetEntries() []*ScrubEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

// Scrub entry details information
type ScrubEntryDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// entry content (phone number, sms, email ...)
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// date when entry should expire
	ExpirationDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
}

func (x *ScrubEntryDetails) Reset() {
	*x = ScrubEntryDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrubEntryDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrubEntryDetails) ProtoMessage() {}

func (x *ScrubEntryDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrubEntryDetails.ProtoReflect.Descriptor instead.
func (*ScrubEntryDetails) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{4}
}

func (x *ScrubEntryDetails) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ScrubEntryDetails) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

type CreateScrubListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListId string `protobuf:"bytes,2,opt,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
	// payload
	List              []string             `protobuf:"bytes,10,rep,name=list,proto3" json:"list,omitempty"`
	ContentType       commons.ContentType  `protobuf:"varint,11,opt,name=content_type,json=contentType,proto3,enum=api.commons.ContentType" json:"content_type,omitempty"`
	CountryCode       string               `protobuf:"bytes,12,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	ScrubEntryDetails []*ScrubEntryDetails `protobuf:"bytes,13,rep,name=scrub_entry_details,json=scrubEntryDetails,proto3" json:"scrub_entry_details,omitempty"`
}

func (x *CreateScrubListReq) Reset() {
	*x = CreateScrubListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateScrubListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScrubListReq) ProtoMessage() {}

func (x *CreateScrubListReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScrubListReq.ProtoReflect.Descriptor instead.
func (*CreateScrubListReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{5}
}

func (x *CreateScrubListReq) GetListId() string {
	if x != nil {
		return x.ListId
	}
	return ""
}

func (x *CreateScrubListReq) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CreateScrubListReq) GetContentType() commons.ContentType {
	if x != nil {
		return x.ContentType
	}
	return commons.ContentType(0)
}

func (x *CreateScrubListReq) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *CreateScrubListReq) GetScrubEntryDetails() []*ScrubEntryDetails {
	if x != nil {
		return x.ScrubEntryDetails
	}
	return nil
}

// AddScrubListEntries request message
type AddScrubListEntriesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// scrub list id, this is can be obtained from a GetScrubLists method
	ListId string `protobuf:"bytes,2,opt,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
	// @deprecated
	// don't use it, it will be removed soon
	List []string `protobuf:"bytes,10,rep,name=list,proto3" json:"list,omitempty"`
	// content_type represents the type of entries are stored in scrub_entry_details field (phone number, sms, email ...)
	ContentType commons.ContentType `protobuf:"varint,11,opt,name=content_type,json=contentType,proto3,enum=api.commons.ContentType" json:"content_type,omitempty"`
	// country calling code defined by ITU-T in E.164 standard w/o the + sign in front
	// this field is relevant if the scrub_entry_details list contains phone numbers
	CountryCode string `protobuf:"bytes,12,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// the list of scrub entries that are sent in order to be added
	ScrubEntryDetails []*ScrubEntryDetails `protobuf:"bytes,13,rep,name=scrub_entry_details,json=scrubEntryDetails,proto3" json:"scrub_entry_details,omitempty"`
}

func (x *AddScrubListEntriesReq) Reset() {
	*x = AddScrubListEntriesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddScrubListEntriesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddScrubListEntriesReq) ProtoMessage() {}

func (x *AddScrubListEntriesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddScrubListEntriesReq.ProtoReflect.Descriptor instead.
func (*AddScrubListEntriesReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{6}
}

func (x *AddScrubListEntriesReq) GetListId() string {
	if x != nil {
		return x.ListId
	}
	return ""
}

func (x *AddScrubListEntriesReq) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *AddScrubListEntriesReq) GetContentType() commons.ContentType {
	if x != nil {
		return x.ContentType
	}
	return commons.ContentType(0)
}

func (x *AddScrubListEntriesReq) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *AddScrubListEntriesReq) GetScrubEntryDetails() []*ScrubEntryDetails {
	if x != nil {
		return x.ScrubEntryDetails
	}
	return nil
}

type UpdateScrubEntryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// keys
	ListId string `protobuf:"bytes,2,opt,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
	// updateable fields
	Notes          *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=notes,proto3" json:"notes,omitempty"`
	Content        *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=content,proto3" json:"content,omitempty"`
	ExpirationDate *timestamppb.Timestamp  `protobuf:"bytes,12,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	CountryCode    *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
}

func (x *UpdateScrubEntryReq) Reset() {
	*x = UpdateScrubEntryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateScrubEntryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScrubEntryReq) ProtoMessage() {}

func (x *UpdateScrubEntryReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScrubEntryReq.ProtoReflect.Descriptor instead.
func (*UpdateScrubEntryReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateScrubEntryReq) GetListId() string {
	if x != nil {
		return x.ListId
	}
	return ""
}

func (x *UpdateScrubEntryReq) GetNotes() *wrapperspb.StringValue {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *UpdateScrubEntryReq) GetContent() *wrapperspb.StringValue {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *UpdateScrubEntryReq) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *UpdateScrubEntryReq) GetCountryCode() *wrapperspb.StringValue {
	if x != nil {
		return x.CountryCode
	}
	return nil
}

type UpdateScrubEntryRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateScrubEntryRes) Reset() {
	*x = UpdateScrubEntryRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateScrubEntryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScrubEntryRes) ProtoMessage() {}

func (x *UpdateScrubEntryRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScrubEntryRes.ProtoReflect.Descriptor instead.
func (*UpdateScrubEntryRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{8}
}

type DeleteScrubListEntriesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListId string `protobuf:"bytes,2,opt,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
	// payload
	List []string `protobuf:"bytes,10,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *DeleteScrubListEntriesReq) Reset() {
	*x = DeleteScrubListEntriesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteScrubListEntriesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScrubListEntriesReq) ProtoMessage() {}

func (x *DeleteScrubListEntriesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScrubListEntriesReq.ProtoReflect.Descriptor instead.
func (*DeleteScrubListEntriesReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteScrubListEntriesReq) GetListId() string {
	if x != nil {
		return x.ListId
	}
	return ""
}

func (x *DeleteScrubListEntriesReq) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

type GetScrubListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListId string `protobuf:"bytes,2,opt,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
}

func (x *GetScrubListReq) Reset() {
	*x = GetScrubListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScrubListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScrubListReq) ProtoMessage() {}

func (x *GetScrubListReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScrubListReq.ProtoReflect.Descriptor instead.
func (*GetScrubListReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{10}
}

func (x *GetScrubListReq) GetListId() string {
	if x != nil {
		return x.ListId
	}
	return ""
}

type GetScrubListsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetScrubListsReq) Reset() {
	*x = GetScrubListsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScrubListsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScrubListsReq) ProtoMessage() {}

func (x *GetScrubListsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScrubListsReq.ProtoReflect.Descriptor instead.
func (*GetScrubListsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{11}
}

type ScrubListsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lists []*ScrubListRes `protobuf:"bytes,1,rep,name=lists,proto3" json:"lists,omitempty"`
}

func (x *ScrubListsRes) Reset() {
	*x = ScrubListsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrubListsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrubListsRes) ProtoMessage() {}

func (x *ScrubListsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrubListsRes.ProtoReflect.Descriptor instead.
func (*ScrubListsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{12}
}

func (x *ScrubListsRes) GetLists() []*ScrubListRes {
	if x != nil {
		return x.Lists
	}
	return nil
}

type ScrubListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListId         string              `protobuf:"bytes,1,opt,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
	ReadOnly       bool                `protobuf:"varint,2,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	ContentType    commons.ContentType `protobuf:"varint,3,opt,name=content_type,json=contentType,proto3,enum=api.commons.ContentType" json:"content_type,omitempty"`
	EntriesAdded   int64               `protobuf:"varint,4,opt,name=entries_added,json=entriesAdded,proto3" json:"entries_added,omitempty"`
	InvalidEntries []string            `protobuf:"bytes,5,rep,name=invalid_entries,json=invalidEntries,proto3" json:"invalid_entries,omitempty"`
}

func (x *ScrubListRes) Reset() {
	*x = ScrubListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrubListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrubListRes) ProtoMessage() {}

func (x *ScrubListRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrubListRes.ProtoReflect.Descriptor instead.
func (*ScrubListRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{13}
}

func (x *ScrubListRes) GetListId() string {
	if x != nil {
		return x.ListId
	}
	return ""
}

func (x *ScrubListRes) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *ScrubListRes) GetContentType() commons.ContentType {
	if x != nil {
		return x.ContentType
	}
	return commons.ContentType(0)
}

func (x *ScrubListRes) GetEntriesAdded() int64 {
	if x != nil {
		return x.EntriesAdded
	}
	return 0
}

func (x *ScrubListRes) GetInvalidEntries() []string {
	if x != nil {
		return x.InvalidEntries
	}
	return nil
}

type DeleteScrubListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListId string `protobuf:"bytes,2,opt,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
}

func (x *DeleteScrubListReq) Reset() {
	*x = DeleteScrubListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteScrubListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScrubListReq) ProtoMessage() {}

func (x *DeleteScrubListReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScrubListReq.ProtoReflect.Descriptor instead.
func (*DeleteScrubListReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteScrubListReq) GetListId() string {
	if x != nil {
		return x.ListId
	}
	return ""
}

type SearchScrubListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListId string `protobuf:"bytes,2,opt,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
	Term   string `protobuf:"bytes,3,opt,name=term,proto3" json:"term,omitempty"`
}

func (x *SearchScrubListReq) Reset() {
	*x = SearchScrubListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchScrubListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchScrubListReq) ProtoMessage() {}

func (x *SearchScrubListReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchScrubListReq.ProtoReflect.Descriptor instead.
func (*SearchScrubListReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{15}
}

func (x *SearchScrubListReq) GetListId() string {
	if x != nil {
		return x.ListId
	}
	return ""
}

func (x *SearchScrubListReq) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

type ScrubEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountrySid  int64  `protobuf:"varint,2,opt,name=country_sid,json=countrySid,proto3" json:"country_sid,omitempty"`
	ListId      string `protobuf:"bytes,6,opt,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
	SourceId    int64  `protobuf:"varint,7,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	SourceField string `protobuf:"bytes,8,opt,name=source_field,json=sourceField,proto3" json:"source_field,omitempty"`
	// payload
	Notes          *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=notes,proto3" json:"notes,omitempty"`
	Content        *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=content,proto3" json:"content,omitempty"`
	ExpirationDate *timestamppb.Timestamp  `protobuf:"bytes,12,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	Result         *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=result,proto3" json:"result,omitempty"`
	Type           commons.ContentType     `protobuf:"varint,14,opt,name=type,proto3,enum=api.commons.ContentType" json:"type,omitempty"`
	CountryCode    *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// audit
	CreatedOn *timestamppb.Timestamp  `protobuf:"bytes,200,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	CreatedBy *wrapperspb.StringValue `protobuf:"bytes,201,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
}

func (x *ScrubEntry) Reset() {
	*x = ScrubEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrubEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrubEntry) ProtoMessage() {}

func (x *ScrubEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrubEntry.ProtoReflect.Descriptor instead.
func (*ScrubEntry) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{16}
}

func (x *ScrubEntry) GetCountrySid() int64 {
	if x != nil {
		return x.CountrySid
	}
	return 0
}

func (x *ScrubEntry) GetListId() string {
	if x != nil {
		return x.ListId
	}
	return ""
}

func (x *ScrubEntry) GetSourceId() int64 {
	if x != nil {
		return x.SourceId
	}
	return 0
}

func (x *ScrubEntry) GetSourceField() string {
	if x != nil {
		return x.SourceField
	}
	return ""
}

func (x *ScrubEntry) GetNotes() *wrapperspb.StringValue {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *ScrubEntry) GetContent() *wrapperspb.StringValue {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ScrubEntry) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *ScrubEntry) GetResult() *wrapperspb.StringValue {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ScrubEntry) GetType() commons.ContentType {
	if x != nil {
		return x.Type
	}
	return commons.ContentType(0)
}

func (x *ScrubEntry) GetCountryCode() *wrapperspb.StringValue {
	if x != nil {
		return x.CountryCode
	}
	return nil
}

func (x *ScrubEntry) GetCreatedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedOn
	}
	return nil
}

func (x *ScrubEntry) GetCreatedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

type RuleAutoCompleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phrase string `protobuf:"bytes,1,opt,name=phrase,proto3" json:"phrase,omitempty"`
	Cursor int32  `protobuf:"varint,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *RuleAutoCompleteReq) Reset() {
	*x = RuleAutoCompleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleAutoCompleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleAutoCompleteReq) ProtoMessage() {}

func (x *RuleAutoCompleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleAutoCompleteReq.ProtoReflect.Descriptor instead.
func (*RuleAutoCompleteReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{17}
}

func (x *RuleAutoCompleteReq) GetPhrase() string {
	if x != nil {
		return x.Phrase
	}
	return ""
}

func (x *RuleAutoCompleteReq) GetCursor() int32 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

type RuleAutoCompleteRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options []string `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *RuleAutoCompleteRes) Reset() {
	*x = RuleAutoCompleteRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleAutoCompleteRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleAutoCompleteRes) ProtoMessage() {}

func (x *RuleAutoCompleteRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleAutoCompleteRes.ProtoReflect.Descriptor instead.
func (*RuleAutoCompleteRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{18}
}

func (x *RuleAutoCompleteRes) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

type CheckRuleSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phrase string `protobuf:"bytes,1,opt,name=phrase,proto3" json:"phrase,omitempty"`
}

func (x *CheckRuleSetReq) Reset() {
	*x = CheckRuleSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRuleSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRuleSetReq) ProtoMessage() {}

func (x *CheckRuleSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRuleSetReq.ProtoReflect.Descriptor instead.
func (*CheckRuleSetReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{19}
}

func (x *CheckRuleSetReq) GetPhrase() string {
	if x != nil {
		return x.Phrase
	}
	return ""
}

type CheckRuleSetRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules    []*Rule  `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	Warnings []string `protobuf:"bytes,2,rep,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *CheckRuleSetRes) Reset() {
	*x = CheckRuleSetRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRuleSetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRuleSetRes) ProtoMessage() {}

func (x *CheckRuleSetRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRuleSetRes.ProtoReflect.Descriptor instead.
func (*CheckRuleSetRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{20}
}

func (x *CheckRuleSetRes) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *CheckRuleSetRes) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

type ListRuleSetsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeDisabled bool `protobuf:"varint,2,opt,name=include_disabled,json=includeDisabled,proto3" json:"include_disabled,omitempty"`
}

func (x *ListRuleSetsReq) Reset() {
	*x = ListRuleSetsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRuleSetsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRuleSetsReq) ProtoMessage() {}

func (x *ListRuleSetsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRuleSetsReq.ProtoReflect.Descriptor instead.
func (*ListRuleSetsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{21}
}

func (x *ListRuleSetsReq) GetIncludeDisabled() bool {
	if x != nil {
		return x.IncludeDisabled
	}
	return false
}

type ListRuleSetsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleSetId string `protobuf:"bytes,1,opt,name=rule_set_id,json=ruleSetId,proto3" json:"rule_set_id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RuleCount int64  `protobuf:"varint,4,opt,name=rule_count,json=ruleCount,proto3" json:"rule_count,omitempty"`
	Disabled  bool   `protobuf:"varint,5,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *ListRuleSetsRes) Reset() {
	*x = ListRuleSetsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRuleSetsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRuleSetsRes) ProtoMessage() {}

func (x *ListRuleSetsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRuleSetsRes.ProtoReflect.Descriptor instead.
func (*ListRuleSetsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{22}
}

func (x *ListRuleSetsRes) GetRuleSetId() string {
	if x != nil {
		return x.RuleSetId
	}
	return ""
}

func (x *ListRuleSetsRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListRuleSetsRes) GetRuleCount() int64 {
	if x != nil {
		return x.RuleCount
	}
	return 0
}

func (x *ListRuleSetsRes) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

type GetRuleSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleSetId  string `protobuf:"bytes,1,opt,name=rule_set_id,json=ruleSetId,proto3" json:"rule_set_id,omitempty"`
	RuleSetSha string `protobuf:"bytes,2,opt,name=rule_set_sha,json=ruleSetSha,proto3" json:"rule_set_sha,omitempty"`
}

func (x *GetRuleSetReq) Reset() {
	*x = GetRuleSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRuleSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRuleSetReq) ProtoMessage() {}

func (x *GetRuleSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRuleSetReq.ProtoReflect.Descriptor instead.
func (*GetRuleSetReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{23}
}

func (x *GetRuleSetReq) GetRuleSetId() string {
	if x != nil {
		return x.RuleSetId
	}
	return ""
}

func (x *GetRuleSetReq) GetRuleSetSha() string {
	if x != nil {
		return x.RuleSetSha
	}
	return ""
}

type GetRuleSetByNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRuleSetByNameReq) Reset() {
	*x = GetRuleSetByNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRuleSetByNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRuleSetByNameReq) ProtoMessage() {}

func (x *GetRuleSetByNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRuleSetByNameReq.ProtoReflect.Descriptor instead.
func (*GetRuleSetByNameReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{24}
}

func (x *GetRuleSetByNameReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AssignRuleSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommType  *commons.CommType `protobuf:"bytes,1,opt,name=comm_type,json=commType,proto3" json:"comm_type,omitempty"`
	CommId    string            `protobuf:"bytes,2,opt,name=comm_id,json=commId,proto3" json:"comm_id,omitempty"`
	RuleSetId string            `protobuf:"bytes,3,opt,name=rule_set_id,json=ruleSetId,proto3" json:"rule_set_id,omitempty"`
}

func (x *AssignRuleSetReq) Reset() {
	*x = AssignRuleSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignRuleSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignRuleSetReq) ProtoMessage() {}

func (x *AssignRuleSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignRuleSetReq.ProtoReflect.Descriptor instead.
func (*AssignRuleSetReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{25}
}

func (x *AssignRuleSetReq) GetCommType() *commons.CommType {
	if x != nil {
		return x.CommType
	}
	return nil
}

func (x *AssignRuleSetReq) GetCommId() string {
	if x != nil {
		return x.CommId
	}
	return ""
}

func (x *AssignRuleSetReq) GetRuleSetId() string {
	if x != nil {
		return x.RuleSetId
	}
	return ""
}

type AssignRuleSetRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CplRuleSetAssignmentId string `protobuf:"bytes,1,opt,name=cpl_rule_set_assignment_id,json=cplRuleSetAssignmentId,proto3" json:"cpl_rule_set_assignment_id,omitempty"`
}

func (x *AssignRuleSetRes) Reset() {
	*x = AssignRuleSetRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignRuleSetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignRuleSetRes) ProtoMessage() {}

func (x *AssignRuleSetRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignRuleSetRes.ProtoReflect.Descriptor instead.
func (*AssignRuleSetRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{26}
}

func (x *AssignRuleSetRes) GetCplRuleSetAssignmentId() string {
	if x != nil {
		return x.CplRuleSetAssignmentId
	}
	return ""
}

type RenameRuleSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleSetId string `protobuf:"bytes,2,opt,name=rule_set_id,json=ruleSetId,proto3" json:"rule_set_id,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RenameRuleSetReq) Reset() {
	*x = RenameRuleSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameRuleSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameRuleSetReq) ProtoMessage() {}

func (x *RenameRuleSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameRuleSetReq.ProtoReflect.Descriptor instead.
func (*RenameRuleSetReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{27}
}

func (x *RenameRuleSetReq) GetRuleSetId() string {
	if x != nil {
		return x.RuleSetId
	}
	return ""
}

func (x *RenameRuleSetReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RenameRuleSetRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RenameRuleSetRes) Reset() {
	*x = RenameRuleSetRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameRuleSetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameRuleSetRes) ProtoMessage() {}

func (x *RenameRuleSetRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameRuleSetRes.ProtoReflect.Descriptor instead.
func (*RenameRuleSetRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{28}
}

type CreateRuleSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleSetId string  `protobuf:"bytes,1,opt,name=rule_set_id,json=ruleSetId,proto3" json:"rule_set_id,omitempty"`
	Name      string  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	RulesText string  `protobuf:"bytes,6,opt,name=rules_text,json=rulesText,proto3" json:"rules_text,omitempty"`
	Rules     []*Rule `protobuf:"bytes,7,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *CreateRuleSetReq) Reset() {
	*x = CreateRuleSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRuleSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRuleSetReq) ProtoMessage() {}

func (x *CreateRuleSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRuleSetReq.ProtoReflect.Descriptor instead.
func (*CreateRuleSetReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{29}
}

func (x *CreateRuleSetReq) GetRuleSetId() string {
	if x != nil {
		return x.RuleSetId
	}
	return ""
}

func (x *CreateRuleSetReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateRuleSetReq) GetRulesText() string {
	if x != nil {
		return x.RulesText
	}
	return ""
}

func (x *CreateRuleSetReq) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type EnableRuleSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleSetId  string `protobuf:"bytes,2,opt,name=rule_set_id,json=ruleSetId,proto3" json:"rule_set_id,omitempty"`
	RuleSetSha string `protobuf:"bytes,3,opt,name=rule_set_sha,json=ruleSetSha,proto3" json:"rule_set_sha,omitempty"`
}

func (x *EnableRuleSetReq) Reset() {
	*x = EnableRuleSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableRuleSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableRuleSetReq) ProtoMessage() {}

func (x *EnableRuleSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableRuleSetReq.ProtoReflect.Descriptor instead.
func (*EnableRuleSetReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{30}
}

func (x *EnableRuleSetReq) GetRuleSetId() string {
	if x != nil {
		return x.RuleSetId
	}
	return ""
}

func (x *EnableRuleSetReq) GetRuleSetSha() string {
	if x != nil {
		return x.RuleSetSha
	}
	return ""
}

type DisableRuleSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleSetId  string `protobuf:"bytes,2,opt,name=rule_set_id,json=ruleSetId,proto3" json:"rule_set_id,omitempty"`
	RuleSetSha string `protobuf:"bytes,3,opt,name=rule_set_sha,json=ruleSetSha,proto3" json:"rule_set_sha,omitempty"`
}

func (x *DisableRuleSetReq) Reset() {
	*x = DisableRuleSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableRuleSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableRuleSetReq) ProtoMessage() {}

func (x *DisableRuleSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableRuleSetReq.ProtoReflect.Descriptor instead.
func (*DisableRuleSetReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{31}
}

func (x *DisableRuleSetReq) GetRuleSetId() string {
	if x != nil {
		return x.RuleSetId
	}
	return ""
}

func (x *DisableRuleSetReq) GetRuleSetSha() string {
	if x != nil {
		return x.RuleSetSha
	}
	return ""
}

type EnableRuleSetRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnableRuleSetRes) Reset() {
	*x = EnableRuleSetRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableRuleSetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableRuleSetRes) ProtoMessage() {}

func (x *EnableRuleSetRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableRuleSetRes.ProtoReflect.Descriptor instead.
func (*EnableRuleSetRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{32}
}

type DisableRuleSetRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisableRuleSetRes) Reset() {
	*x = DisableRuleSetRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableRuleSetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableRuleSetRes) ProtoMessage() {}

func (x *DisableRuleSetRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableRuleSetRes.ProtoReflect.Descriptor instead.
func (*DisableRuleSetRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{33}
}

type EvaluationResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EvaluationResults) Reset() {
	*x = EvaluationResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluationResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluationResults) ProtoMessage() {}

func (x *EvaluationResults) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluationResults.ProtoReflect.Descriptor instead.
func (*EvaluationResults) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{34}
}

// RuleSet / Rule
type RuleSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleSetId string `protobuf:"bytes,1,opt,name=rule_set_id,json=ruleSetId,proto3" json:"rule_set_id,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Head      bool   `protobuf:"varint,5,opt,name=head,proto3" json:"head,omitempty"`
	Disabled  bool   `protobuf:"varint,6,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// original text from where we derived the rules
	RulesText string `protobuf:"bytes,9,opt,name=rules_text,json=rulesText,proto3" json:"rules_text,omitempty"`
	// sha256 for the input strings
	Sha   string  `protobuf:"bytes,10,opt,name=sha,proto3" json:"sha,omitempty"`
	Rules []*Rule `protobuf:"bytes,20,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *RuleSet) Reset() {
	*x = RuleSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleSet) ProtoMessage() {}

func (x *RuleSet) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleSet.ProtoReflect.Descriptor instead.
func (*RuleSet) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{35}
}

func (x *RuleSet) GetRuleSetId() string {
	if x != nil {
		return x.RuleSetId
	}
	return ""
}

func (x *RuleSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RuleSet) GetHead() bool {
	if x != nil {
		return x.Head
	}
	return false
}

func (x *RuleSet) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *RuleSet) GetRulesText() string {
	if x != nil {
		return x.RulesText
	}
	return ""
}

func (x *RuleSet) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *RuleSet) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verb      commons.Verb      `protobuf:"varint,1,opt,name=verb,proto3,enum=api.commons.Verb" json:"verb,omitempty"`
	Entity    commons.Entity    `protobuf:"varint,2,opt,name=entity,proto3,enum=api.commons.Entity" json:"entity,omitempty"`
	SubEntity commons.SubEntity `protobuf:"varint,3,opt,name=sub_entity,json=subEntity,proto3,enum=api.commons.SubEntity" json:"sub_entity,omitempty"`
	Selectors []*Selector       `protobuf:"bytes,4,rep,name=selectors,proto3" json:"selectors,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{36}
}

func (x *Rule) GetVerb() commons.Verb {
	if x != nil {
		return x.Verb
	}
	return commons.Verb(0)
}

func (x *Rule) GetEntity() commons.Entity {
	if x != nil {
		return x.Entity
	}
	return commons.Entity(0)
}

func (x *Rule) GetSubEntity() commons.SubEntity {
	if x != nil {
		return x.SubEntity
	}
	return commons.SubEntity(0)
}

func (x *Rule) GetSelectors() []*Selector {
	if x != nil {
		return x.Selectors
	}
	return nil
}

type Selector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SelectionRule:
	//
	//	*Selector_Time
	//	*Selector_Week
	//	*Selector_Dncl
	//	*Selector_Frequency
	//	*Selector_Location
	//	*Selector_PhoneType
	//	*Selector_Month
	//	*Selector_Holiday
	//	*Selector_Date
	//	*Selector_Meta
	//	*Selector_Plugin
	SelectionRule isSelector_SelectionRule `protobuf_oneof:"selection_rule"`
}

func (x *Selector) Reset() {
	*x = Selector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Selector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selector) ProtoMessage() {}

func (x *Selector) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selector.ProtoReflect.Descriptor instead.
func (*Selector) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{37}
}

func (m *Selector) GetSelectionRule() isSelector_SelectionRule {
	if m != nil {
		return m.SelectionRule
	}
	return nil
}

func (x *Selector) GetTime() *TimeExp {
	if x, ok := x.GetSelectionRule().(*Selector_Time); ok {
		return x.Time
	}
	return nil
}

func (x *Selector) GetWeek() *WeekdayExp {
	if x, ok := x.GetSelectionRule().(*Selector_Week); ok {
		return x.Week
	}
	return nil
}

func (x *Selector) GetDncl() *DnclExp {
	if x, ok := x.GetSelectionRule().(*Selector_Dncl); ok {
		return x.Dncl
	}
	return nil
}

func (x *Selector) GetFrequency() *FrequencyExp {
	if x, ok := x.GetSelectionRule().(*Selector_Frequency); ok {
		return x.Frequency
	}
	return nil
}

func (x *Selector) GetLocation() *LocationExp {
	if x, ok := x.GetSelectionRule().(*Selector_Location); ok {
		return x.Location
	}
	return nil
}

func (x *Selector) GetPhoneType() *PhoneTypeExp {
	if x, ok := x.GetSelectionRule().(*Selector_PhoneType); ok {
		return x.PhoneType
	}
	return nil
}

func (x *Selector) GetMonth() *MonthExp {
	if x, ok := x.GetSelectionRule().(*Selector_Month); ok {
		return x.Month
	}
	return nil
}

func (x *Selector) GetHoliday() *HolidayExp {
	if x, ok := x.GetSelectionRule().(*Selector_Holiday); ok {
		return x.Holiday
	}
	return nil
}

func (x *Selector) GetDate() *DateExp {
	if x, ok := x.GetSelectionRule().(*Selector_Date); ok {
		return x.Date
	}
	return nil
}

func (x *Selector) GetMeta() *MetaFieldExp {
	if x, ok := x.GetSelectionRule().(*Selector_Meta); ok {
		return x.Meta
	}
	return nil
}

func (x *Selector) GetPlugin() *PluginExp {
	if x, ok := x.GetSelectionRule().(*Selector_Plugin); ok {
		return x.Plugin
	}
	return nil
}

type isSelector_SelectionRule interface {
	isSelector_SelectionRule()
}

type Selector_Time struct {
	Time *TimeExp `protobuf:"bytes,1,opt,name=time,proto3,oneof"`
}

type Selector_Week struct {
	Week *WeekdayExp `protobuf:"bytes,2,opt,name=week,proto3,oneof"`
}

type Selector_Dncl struct {
	Dncl *DnclExp `protobuf:"bytes,3,opt,name=dncl,proto3,oneof"`
}

type Selector_Frequency struct {
	Frequency *FrequencyExp `protobuf:"bytes,4,opt,name=frequency,proto3,oneof"`
}

type Selector_Location struct {
	Location *LocationExp `protobuf:"bytes,5,opt,name=location,proto3,oneof"`
}

type Selector_PhoneType struct {
	PhoneType *PhoneTypeExp `protobuf:"bytes,6,opt,name=phone_type,json=phoneType,proto3,oneof"`
}

type Selector_Month struct {
	Month *MonthExp `protobuf:"bytes,7,opt,name=month,proto3,oneof"`
}

type Selector_Holiday struct {
	Holiday *HolidayExp `protobuf:"bytes,8,opt,name=holiday,proto3,oneof"`
}

type Selector_Date struct {
	Date *DateExp `protobuf:"bytes,9,opt,name=date,proto3,oneof"`
}

type Selector_Meta struct {
	Meta *MetaFieldExp `protobuf:"bytes,10,opt,name=meta,proto3,oneof"`
}

type Selector_Plugin struct {
	Plugin *PluginExp `protobuf:"bytes,11,opt,name=plugin,proto3,oneof"`
}

func (*Selector_Time) isSelector_SelectionRule() {}

func (*Selector_Week) isSelector_SelectionRule() {}

func (*Selector_Dncl) isSelector_SelectionRule() {}

func (*Selector_Frequency) isSelector_SelectionRule() {}

func (*Selector_Location) isSelector_SelectionRule() {}

func (*Selector_PhoneType) isSelector_SelectionRule() {}

func (*Selector_Month) isSelector_SelectionRule() {}

func (*Selector_Holiday) isSelector_SelectionRule() {}

func (*Selector_Date) isSelector_SelectionRule() {}

func (*Selector_Meta) isSelector_SelectionRule() {}

func (*Selector_Plugin) isSelector_SelectionRule() {}

// Expressions/Selectors
type HolidayExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month commons.Month `protobuf:"varint,1,opt,name=month,proto3,enum=api.commons.Month" json:"month,omitempty"`
	Day   int64         `protobuf:"varint,2,opt,name=day,proto3" json:"day,omitempty"`
	Name  string        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *HolidayExp) Reset() {
	*x = HolidayExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HolidayExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HolidayExp) ProtoMessage() {}

func (x *HolidayExp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HolidayExp.ProtoReflect.Descriptor instead.
func (*HolidayExp) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{38}
}

func (x *HolidayExp) GetMonth() commons.Month {
	if x != nil {
		return x.Month
	}
	return commons.Month(0)
}

func (x *HolidayExp) GetDay() int64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *HolidayExp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TimeExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartHour string `protobuf:"bytes,1,opt,name=start_hour,json=startHour,proto3" json:"start_hour,omitempty"`
	EndHour   string `protobuf:"bytes,2,opt,name=end_hour,json=endHour,proto3" json:"end_hour,omitempty"`
}

func (x *TimeExp) Reset() {
	*x = TimeExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeExp) ProtoMessage() {}

func (x *TimeExp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeExp.ProtoReflect.Descriptor instead.
func (*TimeExp) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{39}
}

func (x *TimeExp) GetStartHour() string {
	if x != nil {
		return x.StartHour
	}
	return ""
}

func (x *TimeExp) GetEndHour() string {
	if x != nil {
		return x.EndHour
	}
	return ""
}

type WeekdayExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day  commons.Weekday_Enum `protobuf:"varint,1,opt,name=day,proto3,enum=api.commons.Weekday_Enum" json:"day,omitempty"`
	Text string               `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *WeekdayExp) Reset() {
	*x = WeekdayExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeekdayExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeekdayExp) ProtoMessage() {}

func (x *WeekdayExp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeekdayExp.ProtoReflect.Descriptor instead.
func (*WeekdayExp) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{40}
}

func (x *WeekdayExp) GetDay() commons.Weekday_Enum {
	if x != nil {
		return x.Day
	}
	return commons.Weekday_Enum(0)
}

func (x *WeekdayExp) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type MonthExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month commons.Month `protobuf:"varint,1,opt,name=month,proto3,enum=api.commons.Month" json:"month,omitempty"`
	Text  string        `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *MonthExp) Reset() {
	*x = MonthExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthExp) ProtoMessage() {}

func (x *MonthExp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthExp.ProtoReflect.Descriptor instead.
func (*MonthExp) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{41}
}

func (x *MonthExp) GetMonth() commons.Month {
	if x != nil {
		return x.Month
	}
	return commons.Month(0)
}

func (x *MonthExp) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type DateExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month commons.Month `protobuf:"varint,1,opt,name=month,proto3,enum=api.commons.Month" json:"month,omitempty"`
	Day   int64         `protobuf:"varint,2,opt,name=day,proto3" json:"day,omitempty"`
	Year  int64         `protobuf:"varint,3,opt,name=year,proto3" json:"year,omitempty"`
}

func (x *DateExp) Reset() {
	*x = DateExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateExp) ProtoMessage() {}

func (x *DateExp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateExp.ProtoReflect.Descriptor instead.
func (*DateExp) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{42}
}

func (x *DateExp) GetMonth() commons.Month {
	if x != nil {
		return x.Month
	}
	return commons.Month(0)
}

func (x *DateExp) GetDay() int64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *DateExp) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

type DnclExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListName  string `protobuf:"bytes,1,opt,name=list_name,json=listName,proto3" json:"list_name,omitempty"`
	FieldName string `protobuf:"bytes,2,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
}

func (x *DnclExp) Reset() {
	*x = DnclExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnclExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnclExp) ProtoMessage() {}

func (x *DnclExp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnclExp.ProtoReflect.Descriptor instead.
func (*DnclExp) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{43}
}

func (x *DnclExp) GetListName() string {
	if x != nil {
		return x.ListName
	}
	return ""
}

func (x *DnclExp) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

type FrequencyExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`       // Maximum number of tries
	Duration int64 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"` // Measured in nanoseconds
}

func (x *FrequencyExp) Reset() {
	*x = FrequencyExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrequencyExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequencyExp) ProtoMessage() {}

func (x *FrequencyExp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequencyExp.ProtoReflect.Descriptor instead.
func (*FrequencyExp) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{44}
}

func (x *FrequencyExp) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FrequencyExp) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type LocationExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *LocationExp) Reset() {
	*x = LocationExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationExp) ProtoMessage() {}

func (x *LocationExp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationExp.ProtoReflect.Descriptor instead.
func (*LocationExp) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{45}
}

func (x *LocationExp) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type PhoneTypeExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneType commons.PhoneType `protobuf:"varint,1,opt,name=phone_type,json=phoneType,proto3,enum=api.commons.PhoneType" json:"phone_type,omitempty"`
}

func (x *PhoneTypeExp) Reset() {
	*x = PhoneTypeExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhoneTypeExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneTypeExp) ProtoMessage() {}

func (x *PhoneTypeExp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneTypeExp.ProtoReflect.Descriptor instead.
func (*PhoneTypeExp) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{46}
}

func (x *PhoneTypeExp) GetPhoneType() commons.PhoneType {
	if x != nil {
		return x.PhoneType
	}
	return commons.PhoneType(0)
}

type MetaFieldExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *MetaFieldExp) Reset() {
	*x = MetaFieldExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaFieldExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaFieldExp) ProtoMessage() {}

func (x *MetaFieldExp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaFieldExp.ProtoReflect.Descriptor instead.
func (*MetaFieldExp) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{47}
}

func (x *MetaFieldExp) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

type PluginExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      commons.PluginType `protobuf:"varint,1,opt,name=type,proto3,enum=api.commons.PluginType" json:"type,omitempty"`
	TcnStrict bool               `protobuf:"varint,4,opt,name=tcn_strict,json=tcnStrict,proto3" json:"tcn_strict,omitempty"` // true/false deny on errors
	// gryphon
	LicenseId    string              `protobuf:"bytes,2,opt,name=license_id,json=licenseId,proto3" json:"license_id,omitempty"`
	ReferenceKey string              `protobuf:"bytes,3,opt,name=reference_key,json=referenceKey,proto3" json:"reference_key,omitempty"`
	FromNumber   string              `protobuf:"bytes,5,opt,name=from_number,json=fromNumber,proto3" json:"from_number,omitempty"`
	Env          commons.Environment `protobuf:"varint,6,opt,name=env,proto3,enum=api.commons.Environment" json:"env,omitempty"`
	// tcn_consent
	Profile string `protobuf:"bytes,7,opt,name=profile,proto3" json:"profile,omitempty"`
	// field to use as content
	ContentField string `protobuf:"bytes,8,opt,name=content_field,json=contentField,proto3" json:"content_field,omitempty"`
	// consent topic
	Topic string `protobuf:"bytes,9,opt,name=topic,proto3" json:"topic,omitempty"`
	// consent absent action (deny/allow if consent doesn't exist)
	AbsentAction commons.ConsentAbsentAction `protobuf:"varint,11,opt,name=absent_action,json=absentAction,proto3,enum=api.commons.ConsentAbsentAction" json:"absent_action,omitempty"`
	// rnd
	// date of last contact
	DateLastContact string `protobuf:"bytes,10,opt,name=date_last_contact,json=dateLastContact,proto3" json:"date_last_contact,omitempty"`
}

func (x *PluginExp) Reset() {
	*x = PluginExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginExp) ProtoMessage() {}

func (x *PluginExp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginExp.ProtoReflect.Descriptor instead.
func (*PluginExp) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{48}
}

func (x *PluginExp) GetType() commons.PluginType {
	if x != nil {
		return x.Type
	}
	return commons.PluginType(0)
}

func (x *PluginExp) GetTcnStrict() bool {
	if x != nil {
		return x.TcnStrict
	}
	return false
}

func (x *PluginExp) GetLicenseId() string {
	if x != nil {
		return x.LicenseId
	}
	return ""
}

func (x *PluginExp) GetReferenceKey() string {
	if x != nil {
		return x.ReferenceKey
	}
	return ""
}

func (x *PluginExp) GetFromNumber() string {
	if x != nil {
		return x.FromNumber
	}
	return ""
}

func (x *PluginExp) GetEnv() commons.Environment {
	if x != nil {
		return x.Env
	}
	return commons.Environment(0)
}

func (x *PluginExp) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *PluginExp) GetContentField() string {
	if x != nil {
		return x.ContentField
	}
	return ""
}

func (x *PluginExp) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PluginExp) GetAbsentAction() commons.ConsentAbsentAction {
	if x != nil {
		return x.AbsentAction
	}
	return commons.ConsentAbsentAction(0)
}

func (x *PluginExp) GetDateLastContact() string {
	if x != nil {
		return x.DateLastContact
	}
	return ""
}

type GetDefaultRulesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDefaultRulesReq) Reset() {
	*x = GetDefaultRulesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultRulesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultRulesReq) ProtoMessage() {}

func (x *GetDefaultRulesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultRulesReq.ProtoReflect.Descriptor instead.
func (*GetDefaultRulesReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{49}
}

type GetDefaultRulesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []string `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *GetDefaultRulesRes) Reset() {
	*x = GetDefaultRulesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultRulesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultRulesRes) ProtoMessage() {}

func (x *GetDefaultRulesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultRulesRes.ProtoReflect.Descriptor instead.
func (*GetDefaultRulesRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{50}
}

func (x *GetDefaultRulesRes) GetRules() []string {
	if x != nil {
		return x.Rules
	}
	return nil
}

type GetScrubListUploadUrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *GetScrubListUploadUrlReq) Reset() {
	*x = GetScrubListUploadUrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScrubListUploadUrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScrubListUploadUrlReq) ProtoMessage() {}

func (x *GetScrubListUploadUrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScrubListUploadUrlReq.ProtoReflect.Descriptor instead.
func (*GetScrubListUploadUrlReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{51}
}

func (x *GetScrubListUploadUrlReq) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type GetScrubListUploadUrlRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	Bucket   string `protobuf:"bytes,3,opt,name=bucket,proto3" json:"bucket,omitempty"`
}

func (x *GetScrubListUploadUrlRes) Reset() {
	*x = GetScrubListUploadUrlRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScrubListUploadUrlRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScrubListUploadUrlRes) ProtoMessage() {}

func (x *GetScrubListUploadUrlRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScrubListUploadUrlRes.ProtoReflect.Descriptor instead.
func (*GetScrubListUploadUrlRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{52}
}

func (x *GetScrubListUploadUrlRes) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GetScrubListUploadUrlRes) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *GetScrubListUploadUrlRes) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

type ProcessScrubListUploadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	ListId   string `protobuf:"bytes,4,opt,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
	// payload
	ContentType         commons.ContentType `protobuf:"varint,10,opt,name=content_type,json=contentType,proto3,enum=api.commons.ContentType" json:"content_type,omitempty"`
	NotificationMessage string              `protobuf:"bytes,11,opt,name=notification_message,json=notificationMessage,proto3" json:"notification_message,omitempty"`
	CountryCode         string              `protobuf:"bytes,12,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
}

func (x *ProcessScrubListUploadReq) Reset() {
	*x = ProcessScrubListUploadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessScrubListUploadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessScrubListUploadReq) ProtoMessage() {}

func (x *ProcessScrubListUploadReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessScrubListUploadReq.ProtoReflect.Descriptor instead.
func (*ProcessScrubListUploadReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{53}
}

func (x *ProcessScrubListUploadReq) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ProcessScrubListUploadReq) GetListId() string {
	if x != nil {
		return x.ListId
	}
	return ""
}

func (x *ProcessScrubListUploadReq) GetContentType() commons.ContentType {
	if x != nil {
		return x.ContentType
	}
	return commons.ContentType(0)
}

func (x *ProcessScrubListUploadReq) GetNotificationMessage() string {
	if x != nil {
		return x.NotificationMessage
	}
	return ""
}

func (x *ProcessScrubListUploadReq) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

type ProcessScrubListUploadRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntriesAdded   int64    `protobuf:"varint,1,opt,name=entries_added,json=entriesAdded,proto3" json:"entries_added,omitempty"`
	InvalidEntries []string `protobuf:"bytes,2,rep,name=invalid_entries,json=invalidEntries,proto3" json:"invalid_entries,omitempty"`
}

func (x *ProcessScrubListUploadRes) Reset() {
	*x = ProcessScrubListUploadRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessScrubListUploadRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessScrubListUploadRes) ProtoMessage() {}

func (x *ProcessScrubListUploadRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessScrubListUploadRes.ProtoReflect.Descriptor instead.
func (*ProcessScrubListUploadRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{54}
}

func (x *ProcessScrubListUploadRes) GetEntriesAdded() int64 {
	if x != nil {
		return x.EntriesAdded
	}
	return 0
}

func (x *ProcessScrubListUploadRes) GetInvalidEntries() []string {
	if x != nil {
		return x.InvalidEntries
	}
	return nil
}

type ProcessScrubListDeleteUploadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// payload
	ListId              string `protobuf:"bytes,10,opt,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
	Filename            string `protobuf:"bytes,11,opt,name=filename,proto3" json:"filename,omitempty"`
	NotificationMessage string `protobuf:"bytes,12,opt,name=notification_message,json=notificationMessage,proto3" json:"notification_message,omitempty"`
}

func (x *ProcessScrubListDeleteUploadReq) Reset() {
	*x = ProcessScrubListDeleteUploadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessScrubListDeleteUploadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessScrubListDeleteUploadReq) ProtoMessage() {}

func (x *ProcessScrubListDeleteUploadReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessScrubListDeleteUploadReq.ProtoReflect.Descriptor instead.
func (*ProcessScrubListDeleteUploadReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{55}
}

func (x *ProcessScrubListDeleteUploadReq) GetListId() string {
	if x != nil {
		return x.ListId
	}
	return ""
}

func (x *ProcessScrubListDeleteUploadReq) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ProcessScrubListDeleteUploadReq) GetNotificationMessage() string {
	if x != nil {
		return x.NotificationMessage
	}
	return ""
}

type ProcessScrubListDeleteUploadRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProcessScrubListDeleteUploadRes) Reset() {
	*x = ProcessScrubListDeleteUploadRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessScrubListDeleteUploadRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessScrubListDeleteUploadRes) ProtoMessage() {}

func (x *ProcessScrubListDeleteUploadRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessScrubListDeleteUploadRes.ProtoReflect.Descriptor instead.
func (*ProcessScrubListDeleteUploadRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{56}
}

type ExportScrubListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListId string `protobuf:"bytes,1,opt,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
}

func (x *ExportScrubListReq) Reset() {
	*x = ExportScrubListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportScrubListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportScrubListReq) ProtoMessage() {}

func (x *ExportScrubListReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportScrubListReq.ProtoReflect.Descriptor instead.
func (*ExportScrubListReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{57}
}

func (x *ExportScrubListReq) GetListId() string {
	if x != nil {
		return x.ListId
	}
	return ""
}

type ExportScrubListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ExportScrubListRes) Reset() {
	*x = ExportScrubListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportScrubListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportScrubListRes) ProtoMessage() {}

func (x *ExportScrubListRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportScrubListRes.ProtoReflect.Descriptor instead.
func (*ExportScrubListRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{58}
}

func (x *ExportScrubListRes) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type CountryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryCode int64  `protobuf:"varint,1,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	CountryName string `protobuf:"bytes,2,opt,name=country_name,json=countryName,proto3" json:"country_name,omitempty"`
	CountryId   string `protobuf:"bytes,3,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
}

func (x *CountryCode) Reset() {
	*x = CountryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryCode) ProtoMessage() {}

func (x *CountryCode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryCode.ProtoReflect.Descriptor instead.
func (*CountryCode) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{59}
}

func (x *CountryCode) GetCountryCode() int64 {
	if x != nil {
		return x.CountryCode
	}
	return 0
}

func (x *CountryCode) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *CountryCode) GetCountryId() string {
	if x != nil {
		return x.CountryId
	}
	return ""
}

type Scenario struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CplScenarioId       int64           `protobuf:"varint,1,opt,name=cpl_scenario_id,json=cplScenarioId,proto3" json:"cpl_scenario_id,omitempty"`
	ShouldAllow         *ScenarioData   `protobuf:"bytes,3,opt,name=should_allow,json=shouldAllow,proto3" json:"should_allow,omitempty"`
	ShouldDeny          *ScenarioData   `protobuf:"bytes,4,opt,name=should_deny,json=shouldDeny,proto3" json:"should_deny,omitempty"`
	LastExecutionResult *ScenarioResult `protobuf:"bytes,5,opt,name=last_execution_result,json=lastExecutionResult,proto3" json:"last_execution_result,omitempty"`
	Name                string          `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Scenario) Reset() {
	*x = Scenario{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scenario) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scenario) ProtoMessage() {}

func (x *Scenario) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scenario.ProtoReflect.Descriptor instead.
func (*Scenario) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{60}
}

func (x *Scenario) GetCplScenarioId() int64 {
	if x != nil {
		return x.CplScenarioId
	}
	return 0
}

func (x *Scenario) GetShouldAllow() *ScenarioData {
	if x != nil {
		return x.ShouldAllow
	}
	return nil
}

func (x *Scenario) GetShouldDeny() *ScenarioData {
	if x != nil {
		return x.ShouldDeny
	}
	return nil
}

func (x *Scenario) GetLastExecutionResult() *ScenarioResult {
	if x != nil {
		return x.LastExecutionResult
	}
	return nil
}

func (x *Scenario) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ScenarioData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommType    *commons.CommType `protobuf:"bytes,1,opt,name=comm_type,json=commType,proto3" json:"comm_type,omitempty"`
	PhoneNumber string            `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
	CountryCode       string                 `protobuf:"bytes,3,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	Email             string                 `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	CallMetadata      map[string]string      `protobuf:"bytes,5,rep,name=call_metadata,json=callMetadata,proto3" json:"call_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TimeOfCall        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=time_of_call,json=timeOfCall,proto3" json:"time_of_call,omitempty"`
	FrequencyCount    int64                  `protobuf:"varint,7,opt,name=frequency_count,json=frequencyCount,proto3" json:"frequency_count,omitempty"`
	FrequencyDuration int64                  `protobuf:"varint,8,opt,name=frequency_duration,json=frequencyDuration,proto3" json:"frequency_duration,omitempty"`
	DnclBlocks        bool                   `protobuf:"varint,9,opt,name=dncl_blocks,json=dnclBlocks,proto3" json:"dncl_blocks,omitempty"`
	Country           string                 `protobuf:"bytes,10,opt,name=country,proto3" json:"country,omitempty"`
	State             string                 `protobuf:"bytes,11,opt,name=state,proto3" json:"state,omitempty"`
	County            string                 `protobuf:"bytes,12,opt,name=county,proto3" json:"county,omitempty"`
	City              string                 `protobuf:"bytes,13,opt,name=city,proto3" json:"city,omitempty"`
	Province          string                 `protobuf:"bytes,14,opt,name=province,proto3" json:"province,omitempty"`
	PhoneType         commons.PhoneType      `protobuf:"varint,15,opt,name=phone_type,json=phoneType,proto3,enum=api.commons.PhoneType" json:"phone_type,omitempty"`
	// time_zone uses the iana timezone format. Defaults to utc
	TimeZone        string       `protobuf:"bytes,16,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	Holidays        []string     `protobuf:"bytes,17,rep,name=holidays,proto3" json:"holidays,omitempty"`
	CountryCodeData *CountryCode `protobuf:"bytes,18,opt,name=country_code_data,json=countryCodeData,proto3" json:"country_code_data,omitempty"`
}

func (x *ScenarioData) Reset() {
	*x = ScenarioData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenarioData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenarioData) ProtoMessage() {}

func (x *ScenarioData) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenarioData.ProtoReflect.Descriptor instead.
func (*ScenarioData) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{61}
}

func (x *ScenarioData) GetCommType() *commons.CommType {
	if x != nil {
		return x.CommType
	}
	return nil
}

func (x *ScenarioData) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
func (x *ScenarioData) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *ScenarioData) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ScenarioData) GetCallMetadata() map[string]string {
	if x != nil {
		return x.CallMetadata
	}
	return nil
}

func (x *ScenarioData) GetTimeOfCall() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeOfCall
	}
	return nil
}

func (x *ScenarioData) GetFrequencyCount() int64 {
	if x != nil {
		return x.FrequencyCount
	}
	return 0
}

func (x *ScenarioData) GetFrequencyDuration() int64 {
	if x != nil {
		return x.FrequencyDuration
	}
	return 0
}

func (x *ScenarioData) GetDnclBlocks() bool {
	if x != nil {
		return x.DnclBlocks
	}
	return false
}

func (x *ScenarioData) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ScenarioData) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ScenarioData) GetCounty() string {
	if x != nil {
		return x.County
	}
	return ""
}

func (x *ScenarioData) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ScenarioData) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *ScenarioData) GetPhoneType() commons.PhoneType {
	if x != nil {
		return x.PhoneType
	}
	return commons.PhoneType(0)
}

func (x *ScenarioData) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *ScenarioData) GetHolidays() []string {
	if x != nil {
		return x.Holidays
	}
	return nil
}

func (x *ScenarioData) GetCountryCodeData() *CountryCode {
	if x != nil {
		return x.CountryCodeData
	}
	return nil
}

type CreateScenarioReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShouldAllow *ScenarioData `protobuf:"bytes,2,opt,name=should_allow,json=shouldAllow,proto3" json:"should_allow,omitempty"`
	ShouldDeny  *ScenarioData `protobuf:"bytes,3,opt,name=should_deny,json=shouldDeny,proto3" json:"should_deny,omitempty"`
	Name        string        `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateScenarioReq) Reset() {
	*x = CreateScenarioReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateScenarioReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScenarioReq) ProtoMessage() {}

func (x *CreateScenarioReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScenarioReq.ProtoReflect.Descriptor instead.
func (*CreateScenarioReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{62}
}

func (x *CreateScenarioReq) GetShouldAllow() *ScenarioData {
	if x != nil {
		return x.ShouldAllow
	}
	return nil
}

func (x *CreateScenarioReq) GetShouldDeny() *ScenarioData {
	if x != nil {
		return x.ShouldDeny
	}
	return nil
}

func (x *CreateScenarioReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateScenarioRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scenario *Scenario `protobuf:"bytes,1,opt,name=scenario,proto3" json:"scenario,omitempty"`
}

func (x *CreateScenarioRes) Reset() {
	*x = CreateScenarioRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateScenarioRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScenarioRes) ProtoMessage() {}

func (x *CreateScenarioRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScenarioRes.ProtoReflect.Descriptor instead.
func (*CreateScenarioRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{63}
}

func (x *CreateScenarioRes) GetScenario() *Scenario {
	if x != nil {
		return x.Scenario
	}
	return nil
}

type GetScenarioReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CplScenarioId int64 `protobuf:"varint,1,opt,name=cpl_scenario_id,json=cplScenarioId,proto3" json:"cpl_scenario_id,omitempty"`
}

func (x *GetScenarioReq) Reset() {
	*x = GetScenarioReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScenarioReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScenarioReq) ProtoMessage() {}

func (x *GetScenarioReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScenarioReq.ProtoReflect.Descriptor instead.
func (*GetScenarioReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{64}
}

func (x *GetScenarioReq) GetCplScenarioId() int64 {
	if x != nil {
		return x.CplScenarioId
	}
	return 0
}

type GetScenarioRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scenario *Scenario `protobuf:"bytes,1,opt,name=scenario,proto3" json:"scenario,omitempty"`
}

func (x *GetScenarioRes) Reset() {
	*x = GetScenarioRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScenarioRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScenarioRes) ProtoMessage() {}

func (x *GetScenarioRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScenarioRes.ProtoReflect.Descriptor instead.
func (*GetScenarioRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{65}
}

func (x *GetScenarioRes) GetScenario() *Scenario {
	if x != nil {
		return x.Scenario
	}
	return nil
}

type UpdateScenarioReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scenario *Scenario `protobuf:"bytes,1,opt,name=scenario,proto3" json:"scenario,omitempty"`
}

func (x *UpdateScenarioReq) Reset() {
	*x = UpdateScenarioReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateScenarioReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScenarioReq) ProtoMessage() {}

func (x *UpdateScenarioReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScenarioReq.ProtoReflect.Descriptor instead.
func (*UpdateScenarioReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{66}
}

func (x *UpdateScenarioReq) GetScenario() *Scenario {
	if x != nil {
		return x.Scenario
	}
	return nil
}

type UpdateScenarioRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scenario *Scenario `protobuf:"bytes,1,opt,name=scenario,proto3" json:"scenario,omitempty"`
}

func (x *UpdateScenarioRes) Reset() {
	*x = UpdateScenarioRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateScenarioRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScenarioRes) ProtoMessage() {}

func (x *UpdateScenarioRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScenarioRes.ProtoReflect.Descriptor instead.
func (*UpdateScenarioRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{67}
}

func (x *UpdateScenarioRes) GetScenario() *Scenario {
	if x != nil {
		return x.Scenario
	}
	return nil
}

type DeleteScenarioReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CplScenarioId int64 `protobuf:"varint,1,opt,name=cpl_scenario_id,json=cplScenarioId,proto3" json:"cpl_scenario_id,omitempty"`
}

func (x *DeleteScenarioReq) Reset() {
	*x = DeleteScenarioReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteScenarioReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScenarioReq) ProtoMessage() {}

func (x *DeleteScenarioReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScenarioReq.ProtoReflect.Descriptor instead.
func (*DeleteScenarioReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{68}
}

func (x *DeleteScenarioReq) GetCplScenarioId() int64 {
	if x != nil {
		return x.CplScenarioId
	}
	return 0
}

type DeleteScenarioRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteScenarioRes) Reset() {
	*x = DeleteScenarioRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteScenarioRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScenarioRes) ProtoMessage() {}

func (x *DeleteScenarioRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScenarioRes.ProtoReflect.Descriptor instead.
func (*DeleteScenarioRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{69}
}

type RunAssignedScenariosReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CplRuleSetId string `protobuf:"bytes,1,opt,name=cpl_rule_set_id,json=cplRuleSetId,proto3" json:"cpl_rule_set_id,omitempty"`
}

func (x *RunAssignedScenariosReq) Reset() {
	*x = RunAssignedScenariosReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunAssignedScenariosReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunAssignedScenariosReq) ProtoMessage() {}

func (x *RunAssignedScenariosReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunAssignedScenariosReq.ProtoReflect.Descriptor instead.
func (*RunAssignedScenariosReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{70}
}

func (x *RunAssignedScenariosReq) GetCplRuleSetId() string {
	if x != nil {
		return x.CplRuleSetId
	}
	return ""
}

type RunAssignedScenariosRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results        []*ScenarioResult `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	PassedValue    bool              `protobuf:"varint,4,opt,name=passed_value,json=passedValue,proto3" json:"passed_value,omitempty"`
	CplRuleSetName string            `protobuf:"bytes,3,opt,name=cpl_rule_set_name,json=cplRuleSetName,proto3" json:"cpl_rule_set_name,omitempty"`
}

func (x *RunAssignedScenariosRes) Reset() {
	*x = RunAssignedScenariosRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunAssignedScenariosRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunAssignedScenariosRes) ProtoMessage() {}

func (x *RunAssignedScenariosRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunAssignedScenariosRes.ProtoReflect.Descriptor instead.
func (*RunAssignedScenariosRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{71}
}

func (x *RunAssignedScenariosRes) GetResults() []*ScenarioResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RunAssignedScenariosRes) GetPassedValue() bool {
	if x != nil {
		return x.PassedValue
	}
	return false
}

func (x *RunAssignedScenariosRes) GetCplRuleSetName() string {
	if x != nil {
		return x.CplRuleSetName
	}
	return ""
}

type ScenarioResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassedValue          bool                    `protobuf:"varint,5,opt,name=passed_value,json=passedValue,proto3" json:"passed_value,omitempty"`
	ShouldAllowResponses []*ScenarioRuleResponse `protobuf:"bytes,2,rep,name=should_allow_responses,json=shouldAllowResponses,proto3" json:"should_allow_responses,omitempty"`
	ShouldDenyResponses  []*ScenarioRuleResponse `protobuf:"bytes,3,rep,name=should_deny_responses,json=shouldDenyResponses,proto3" json:"should_deny_responses,omitempty"`
	ScenarioName         string                  `protobuf:"bytes,4,opt,name=scenario_name,json=scenarioName,proto3" json:"scenario_name,omitempty"`
}

func (x *ScenarioResult) Reset() {
	*x = ScenarioResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenarioResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenarioResult) ProtoMessage() {}

func (x *ScenarioResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenarioResult.ProtoReflect.Descriptor instead.
func (*ScenarioResult) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{72}
}

func (x *ScenarioResult) GetPassedValue() bool {
	if x != nil {
		return x.PassedValue
	}
	return false
}

func (x *ScenarioResult) GetShouldAllowResponses() []*ScenarioRuleResponse {
	if x != nil {
		return x.ShouldAllowResponses
	}
	return nil
}

func (x *ScenarioResult) GetShouldDenyResponses() []*ScenarioRuleResponse {
	if x != nil {
		return x.ShouldDenyResponses
	}
	return nil
}

func (x *ScenarioResult) GetScenarioName() string {
	if x != nil {
		return x.ScenarioName
	}
	return ""
}

type ScenarioRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleText    string `protobuf:"bytes,1,opt,name=rule_text,json=ruleText,proto3" json:"rule_text,omitempty"`
	PermitValue bool   `protobuf:"varint,3,opt,name=permit_value,json=permitValue,proto3" json:"permit_value,omitempty"`
}

func (x *ScenarioRuleResponse) Reset() {
	*x = ScenarioRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenarioRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenarioRuleResponse) ProtoMessage() {}

func (x *ScenarioRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenarioRuleResponse.ProtoReflect.Descriptor instead.
func (*ScenarioRuleResponse) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{73}
}

func (x *ScenarioRuleResponse) GetRuleText() string {
	if x != nil {
		return x.RuleText
	}
	return ""
}

func (x *ScenarioRuleResponse) GetPermitValue() bool {
	if x != nil {
		return x.PermitValue
	}
	return false
}

type ListAllScenariosReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAllScenariosReq) Reset() {
	*x = ListAllScenariosReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllScenariosReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllScenariosReq) ProtoMessage() {}

func (x *ListAllScenariosReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllScenariosReq.ProtoReflect.Descriptor instead.
func (*ListAllScenariosReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{74}
}

type ListAllScenariosRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scenarios []*Scenario `protobuf:"bytes,1,rep,name=scenarios,proto3" json:"scenarios,omitempty"`
}

func (x *ListAllScenariosRes) Reset() {
	*x = ListAllScenariosRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllScenariosRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllScenariosRes) ProtoMessage() {}

func (x *ListAllScenariosRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllScenariosRes.ProtoReflect.Descriptor instead.
func (*ListAllScenariosRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{75}
}

func (x *ListAllScenariosRes) GetScenarios() []*Scenario {
	if x != nil {
		return x.Scenarios
	}
	return nil
}

type ListAssignedRuleSetsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CplScenarioId int64 `protobuf:"varint,3,opt,name=cpl_scenario_id,json=cplScenarioId,proto3" json:"cpl_scenario_id,omitempty"`
}

func (x *ListAssignedRuleSetsReq) Reset() {
	*x = ListAssignedRuleSetsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssignedRuleSetsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssignedRuleSetsReq) ProtoMessage() {}

func (x *ListAssignedRuleSetsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssignedRuleSetsReq.ProtoReflect.Descriptor instead.
func (*ListAssignedRuleSetsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{76}
}

func (x *ListAssignedRuleSetsReq) GetCplScenarioId() int64 {
	if x != nil {
		return x.CplScenarioId
	}
	return 0
}

type ListAssignedRuleSetsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleSets []*RuleSet `protobuf:"bytes,1,rep,name=rule_sets,json=ruleSets,proto3" json:"rule_sets,omitempty"`
}

func (x *ListAssignedRuleSetsRes) Reset() {
	*x = ListAssignedRuleSetsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssignedRuleSetsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssignedRuleSetsRes) ProtoMessage() {}

func (x *ListAssignedRuleSetsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssignedRuleSetsRes.ProtoReflect.Descriptor instead.
func (*ListAssignedRuleSetsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{77}
}

func (x *ListAssignedRuleSetsRes) GetRuleSets() []*RuleSet {
	if x != nil {
		return x.RuleSets
	}
	return nil
}

type ListAssignedScenariosReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CplRuleSetId string `protobuf:"bytes,3,opt,name=cpl_rule_set_id,json=cplRuleSetId,proto3" json:"cpl_rule_set_id,omitempty"`
}

func (x *ListAssignedScenariosReq) Reset() {
	*x = ListAssignedScenariosReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssignedScenariosReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssignedScenariosReq) ProtoMessage() {}

func (x *ListAssignedScenariosReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssignedScenariosReq.ProtoReflect.Descriptor instead.
func (*ListAssignedScenariosReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{78}
}

func (x *ListAssignedScenariosReq) GetCplRuleSetId() string {
	if x != nil {
		return x.CplRuleSetId
	}
	return ""
}

type AssignedScenario struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scenario            *Scenario       `protobuf:"bytes,1,opt,name=scenario,proto3" json:"scenario,omitempty"`
	Enabled             bool            `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	LastExecutionResult *ScenarioResult `protobuf:"bytes,3,opt,name=last_execution_result,json=lastExecutionResult,proto3" json:"last_execution_result,omitempty"`
}

func (x *AssignedScenario) Reset() {
	*x = AssignedScenario{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedScenario) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedScenario) ProtoMessage() {}

func (x *AssignedScenario) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedScenario.ProtoReflect.Descriptor instead.
func (*AssignedScenario) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{79}
}

func (x *AssignedScenario) GetScenario() *Scenario {
	if x != nil {
		return x.Scenario
	}
	return nil
}

func (x *AssignedScenario) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AssignedScenario) GetLastExecutionResult() *ScenarioResult {
	if x != nil {
		return x.LastExecutionResult
	}
	return nil
}

type ListAssignedScenariosRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssignedScenarios []*AssignedScenario `protobuf:"bytes,1,rep,name=assigned_scenarios,json=assignedScenarios,proto3" json:"assigned_scenarios,omitempty"`
}

func (x *ListAssignedScenariosRes) Reset() {
	*x = ListAssignedScenariosRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssignedScenariosRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssignedScenariosRes) ProtoMessage() {}

func (x *ListAssignedScenariosRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssignedScenariosRes.ProtoReflect.Descriptor instead.
func (*ListAssignedScenariosRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{80}
}

func (x *ListAssignedScenariosRes) GetAssignedScenarios() []*AssignedScenario {
	if x != nil {
		return x.AssignedScenarios
	}
	return nil
}

type ListUnassignedScenariosReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CplRuleSetId string `protobuf:"bytes,3,opt,name=cpl_rule_set_id,json=cplRuleSetId,proto3" json:"cpl_rule_set_id,omitempty"`
}

func (x *ListUnassignedScenariosReq) Reset() {
	*x = ListUnassignedScenariosReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUnassignedScenariosReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnassignedScenariosReq) ProtoMessage() {}

func (x *ListUnassignedScenariosReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnassignedScenariosReq.ProtoReflect.Descriptor instead.
func (*ListUnassignedScenariosReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{81}
}

func (x *ListUnassignedScenariosReq) GetCplRuleSetId() string {
	if x != nil {
		return x.CplRuleSetId
	}
	return ""
}

type ListUnassignedScenariosRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scenarios []*Scenario `protobuf:"bytes,1,rep,name=scenarios,proto3" json:"scenarios,omitempty"`
}

func (x *ListUnassignedScenariosRes) Reset() {
	*x = ListUnassignedScenariosRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUnassignedScenariosRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnassignedScenariosRes) ProtoMessage() {}

func (x *ListUnassignedScenariosRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnassignedScenariosRes.ProtoReflect.Descriptor instead.
func (*ListUnassignedScenariosRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{82}
}

func (x *ListUnassignedScenariosRes) GetScenarios() []*Scenario {
	if x != nil {
		return x.Scenarios
	}
	return nil
}

type AssignScenarioReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CplRuleSetId  string `protobuf:"bytes,3,opt,name=cpl_rule_set_id,json=cplRuleSetId,proto3" json:"cpl_rule_set_id,omitempty"`
	CplScenarioId int64  `protobuf:"varint,4,opt,name=cpl_scenario_id,json=cplScenarioId,proto3" json:"cpl_scenario_id,omitempty"`
}

func (x *AssignScenarioReq) Reset() {
	*x = AssignScenarioReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignScenarioReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignScenarioReq) ProtoMessage() {}

func (x *AssignScenarioReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignScenarioReq.ProtoReflect.Descriptor instead.
func (*AssignScenarioReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{83}
}

func (x *AssignScenarioReq) GetCplRuleSetId() string {
	if x != nil {
		return x.CplRuleSetId
	}
	return ""
}

func (x *AssignScenarioReq) GetCplScenarioId() int64 {
	if x != nil {
		return x.CplScenarioId
	}
	return 0
}

type UnassignScenarioReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CplRuleSetId  string `protobuf:"bytes,3,opt,name=cpl_rule_set_id,json=cplRuleSetId,proto3" json:"cpl_rule_set_id,omitempty"`
	CplScenarioId int64  `protobuf:"varint,4,opt,name=cpl_scenario_id,json=cplScenarioId,proto3" json:"cpl_scenario_id,omitempty"`
}

func (x *UnassignScenarioReq) Reset() {
	*x = UnassignScenarioReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnassignScenarioReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnassignScenarioReq) ProtoMessage() {}

func (x *UnassignScenarioReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnassignScenarioReq.ProtoReflect.Descriptor instead.
func (*UnassignScenarioReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{84}
}

func (x *UnassignScenarioReq) GetCplRuleSetId() string {
	if x != nil {
		return x.CplRuleSetId
	}
	return ""
}

func (x *UnassignScenarioReq) GetCplScenarioId() int64 {
	if x != nil {
		return x.CplScenarioId
	}
	return 0
}

type EnableScenarioReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CplRuleSetId  string `protobuf:"bytes,3,opt,name=cpl_rule_set_id,json=cplRuleSetId,proto3" json:"cpl_rule_set_id,omitempty"`
	CplScenarioId int64  `protobuf:"varint,4,opt,name=cpl_scenario_id,json=cplScenarioId,proto3" json:"cpl_scenario_id,omitempty"`
}

func (x *EnableScenarioReq) Reset() {
	*x = EnableScenarioReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableScenarioReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableScenarioReq) ProtoMessage() {}

func (x *EnableScenarioReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableScenarioReq.ProtoReflect.Descriptor instead.
func (*EnableScenarioReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{85}
}

func (x *EnableScenarioReq) GetCplRuleSetId() string {
	if x != nil {
		return x.CplRuleSetId
	}
	return ""
}

func (x *EnableScenarioReq) GetCplScenarioId() int64 {
	if x != nil {
		return x.CplScenarioId
	}
	return 0
}

type DisableScenarioReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CplRuleSetId  string `protobuf:"bytes,3,opt,name=cpl_rule_set_id,json=cplRuleSetId,proto3" json:"cpl_rule_set_id,omitempty"`
	CplScenarioId int64  `protobuf:"varint,4,opt,name=cpl_scenario_id,json=cplScenarioId,proto3" json:"cpl_scenario_id,omitempty"`
}

func (x *DisableScenarioReq) Reset() {
	*x = DisableScenarioReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableScenarioReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableScenarioReq) ProtoMessage() {}

func (x *DisableScenarioReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableScenarioReq.ProtoReflect.Descriptor instead.
func (*DisableScenarioReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{86}
}

func (x *DisableScenarioReq) GetCplRuleSetId() string {
	if x != nil {
		return x.CplRuleSetId
	}
	return ""
}

func (x *DisableScenarioReq) GetCplScenarioId() int64 {
	if x != nil {
		return x.CplScenarioId
	}
	return 0
}

type CreateConsentProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsentProfileId string `protobuf:"bytes,1,opt,name=consent_profile_id,json=consentProfileId,proto3" json:"consent_profile_id,omitempty"`
	// payload
	ProfileName string `protobuf:"bytes,10,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	Disabled    bool   `protobuf:"varint,11,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// channel (email, sms, phone, etc)
	//
	// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
	Channel *commons.CommType `protobuf:"bytes,12,opt,name=channel,proto3" json:"channel,omitempty"`
	// auditing
	CreatedBy string `protobuf:"bytes,50,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
}

func (x *CreateConsentProfileReq) Reset() {
	*x = CreateConsentProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConsentProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConsentProfileReq) ProtoMessage() {}

func (x *CreateConsentProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConsentProfileReq.ProtoReflect.Descriptor instead.
func (*CreateConsentProfileReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{87}
}

func (x *CreateConsentProfileReq) GetConsentProfileId() string {
	if x != nil {
		return x.ConsentProfileId
	}
	return ""
}

func (x *CreateConsentProfileReq) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *CreateConsentProfileReq) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
func (x *CreateConsentProfileReq) GetChannel() *commons.CommType {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *CreateConsentProfileReq) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type CreateConsentProfileRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsentProfileId string `protobuf:"bytes,1,opt,name=consent_profile_id,json=consentProfileId,proto3" json:"consent_profile_id,omitempty"`
}

func (x *CreateConsentProfileRes) Reset() {
	*x = CreateConsentProfileRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConsentProfileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConsentProfileRes) ProtoMessage() {}

func (x *CreateConsentProfileRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConsentProfileRes.ProtoReflect.Descriptor instead.
func (*CreateConsentProfileRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{88}
}

func (x *CreateConsentProfileRes) GetConsentProfileId() string {
	if x != nil {
		return x.ConsentProfileId
	}
	return ""
}

type GetConsentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsentId int64 `protobuf:"varint,1,opt,name=consent_id,json=consentId,proto3" json:"consent_id,omitempty"`
}

func (x *GetConsentReq) Reset() {
	*x = GetConsentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsentReq) ProtoMessage() {}

func (x *GetConsentReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsentReq.ProtoReflect.Descriptor instead.
func (*GetConsentReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{89}
}

func (x *GetConsentReq) GetConsentId() int64 {
	if x != nil {
		return x.ConsentId
	}
	return 0
}

type CreateConsentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsentProfileId string `protobuf:"bytes,2,opt,name=consent_profile_id,json=consentProfileId,proto3" json:"consent_profile_id,omitempty"`
	// payload
	Content      string                 `protobuf:"bytes,10,opt,name=content,proto3" json:"content,omitempty"`
	Recorded     *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=recorded,proto3" json:"recorded,omitempty"`
	Expire       *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=expire,proto3" json:"expire,omitempty"`
	ReferringUrl string                 `protobuf:"bytes,13,opt,name=referring_url,json=referringUrl,proto3" json:"referring_url,omitempty"`
	// channel (email, sms, phone, etc)
	//
	// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
	Channel *commons.CommType `protobuf:"bytes,15,opt,name=channel,proto3" json:"channel,omitempty"`
	// topic (future payment vs payment reminder vs account reminders vs receipts)
	Topic string `protobuf:"bytes,16,opt,name=topic,proto3" json:"topic,omitempty"`
	// notate revocation (reason)
	RevokedReason string `protobuf:"bytes,17,opt,name=revoked_reason,json=revokedReason,proto3" json:"revoked_reason,omitempty"`
	// notate grant reason
	GrantedReason string `protobuf:"bytes,18,opt,name=granted_reason,json=grantedReason,proto3" json:"granted_reason,omitempty"`
	// proof of consent (pdf, voice recording etc) this will be filename which can be retrieved via matrix-fts
	Proof string `protobuf:"bytes,19,opt,name=proof,proto3" json:"proof,omitempty"`
	// consent conditions
	ConditionDaysOfTheWeek []commons.Weekday_Enum `protobuf:"varint,20,rep,packed,name=condition_days_of_the_week,json=conditionDaysOfTheWeek,proto3,enum=api.commons.Weekday_Enum" json:"condition_days_of_the_week,omitempty"`
	ConditionTimeOfDayFrom string                 `protobuf:"bytes,21,opt,name=condition_time_of_day_from,json=conditionTimeOfDayFrom,proto3" json:"condition_time_of_day_from,omitempty"`
	ConditionTimeOfDayTo   string                 `protobuf:"bytes,22,opt,name=condition_time_of_day_to,json=conditionTimeOfDayTo,proto3" json:"condition_time_of_day_to,omitempty"`
	ConditionFrom          *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=condition_from,json=conditionFrom,proto3" json:"condition_from,omitempty"`
	ConditionTo            *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=condition_to,json=conditionTo,proto3" json:"condition_to,omitempty"`
	Notes                  string                 `protobuf:"bytes,25,opt,name=notes,proto3" json:"notes,omitempty"`
	// Consent Conditions
	Conditions []*ConsentCondition `protobuf:"bytes,26,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// content_type (call, email, sms, account number)
	ContentType commons.ContentType `protobuf:"varint,27,opt,name=content_type,json=contentType,proto3,enum=api.commons.ContentType" json:"content_type,omitempty"`
	ChannelType commons.Channel     `protobuf:"varint,28,opt,name=channel_type,json=channelType,proto3,enum=api.commons.Channel" json:"channel_type,omitempty"`
}

func (x *CreateConsentReq) Reset() {
	*x = CreateConsentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConsentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConsentReq) ProtoMessage() {}

func (x *CreateConsentReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConsentReq.ProtoReflect.Descriptor instead.
func (*CreateConsentReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{90}
}

func (x *CreateConsentReq) GetConsentProfileId() string {
	if x != nil {
		return x.ConsentProfileId
	}
	return ""
}

func (x *CreateConsentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateConsentReq) GetRecorded() *timestamppb.Timestamp {
	if x != nil {
		return x.Recorded
	}
	return nil
}

func (x *CreateConsentReq) GetExpire() *timestamppb.Timestamp {
	if x != nil {
		return x.Expire
	}
	return nil
}

func (x *CreateConsentReq) GetReferringUrl() string {
	if x != nil {
		return x.ReferringUrl
	}
	return ""
}

// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
func (x *CreateConsentReq) GetChannel() *commons.CommType {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *CreateConsentReq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *CreateConsentReq) GetRevokedReason() string {
	if x != nil {
		return x.RevokedReason
	}
	return ""
}

func (x *CreateConsentReq) GetGrantedReason() string {
	if x != nil {
		return x.GrantedReason
	}
	return ""
}

func (x *CreateConsentReq) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

func (x *CreateConsentReq) GetConditionDaysOfTheWeek() []commons.Weekday_Enum {
	if x != nil {
		return x.ConditionDaysOfTheWeek
	}
	return nil
}

func (x *CreateConsentReq) GetConditionTimeOfDayFrom() string {
	if x != nil {
		return x.ConditionTimeOfDayFrom
	}
	return ""
}

func (x *CreateConsentReq) GetConditionTimeOfDayTo() string {
	if x != nil {
		return x.ConditionTimeOfDayTo
	}
	return ""
}

func (x *CreateConsentReq) GetConditionFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.ConditionFrom
	}
	return nil
}

func (x *CreateConsentReq) GetConditionTo() *timestamppb.Timestamp {
	if x != nil {
		return x.ConditionTo
	}
	return nil
}

func (x *CreateConsentReq) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *CreateConsentReq) GetConditions() []*ConsentCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *CreateConsentReq) GetContentType() commons.ContentType {
	if x != nil {
		return x.ContentType
	}
	return commons.ContentType(0)
}

func (x *CreateConsentReq) GetChannelType() commons.Channel {
	if x != nil {
		return x.ChannelType
	}
	return commons.Channel(0)
}

type CreateConsentRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsentId int64 `protobuf:"varint,1,opt,name=consent_id,json=consentId,proto3" json:"consent_id,omitempty"`
}

func (x *CreateConsentRes) Reset() {
	*x = CreateConsentRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConsentRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConsentRes) ProtoMessage() {}

func (x *CreateConsentRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConsentRes.ProtoReflect.Descriptor instead.
func (*CreateConsentRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{91}
}

func (x *CreateConsentRes) GetConsentId() int64 {
	if x != nil {
		return x.ConsentId
	}
	return 0
}

type ConsentProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsentProfileId string `protobuf:"bytes,1,opt,name=consent_profile_id,json=consentProfileId,proto3" json:"consent_profile_id,omitempty"`
	// payload
	ProfileName string     `protobuf:"bytes,10,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	Disabled    bool       `protobuf:"varint,11,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Consents    []*Consent `protobuf:"bytes,12,rep,name=consents,proto3" json:"consents,omitempty"`
	// channel (email, sms, phone, etc)
	//
	// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
	Channel *commons.CommType `protobuf:"bytes,13,opt,name=channel,proto3" json:"channel,omitempty"`
	// auditing
	CreatedOn *timestamppb.Timestamp `protobuf:"bytes,50,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	CreatedBy string                 `protobuf:"bytes,51,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
}

func (x *ConsentProfile) Reset() {
	*x = ConsentProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentProfile) ProtoMessage() {}

func (x *ConsentProfile) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentProfile.ProtoReflect.Descriptor instead.
func (*ConsentProfile) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{92}
}

func (x *ConsentProfile) GetConsentProfileId() string {
	if x != nil {
		return x.ConsentProfileId
	}
	return ""
}

func (x *ConsentProfile) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *ConsentProfile) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *ConsentProfile) GetConsents() []*Consent {
	if x != nil {
		return x.Consents
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
func (x *ConsentProfile) GetChannel() *commons.CommType {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *ConsentProfile) GetCreatedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedOn
	}
	return nil
}

func (x *ConsentProfile) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type Consent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsentId        int64                  `protobuf:"varint,1,opt,name=consent_id,json=consentId,proto3" json:"consent_id,omitempty"`
	ConsentProfileId string                 `protobuf:"bytes,2,opt,name=consent_profile_id,json=consentProfileId,proto3" json:"consent_profile_id,omitempty"`
	Deleted          bool                   `protobuf:"varint,4,opt,name=deleted,proto3" json:"deleted,omitempty"`
	DeletedOn        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=deleted_on,json=deletedOn,proto3" json:"deleted_on,omitempty"`
	// payload
	Content string `protobuf:"bytes,10,opt,name=content,proto3" json:"content,omitempty"`
	// date consent granted
	Recorded *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=recorded,proto3" json:"recorded,omitempty"`
	// date consent revoked
	Revoked *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=revoked,proto3" json:"revoked,omitempty"`
	// expiration of consent
	Expire       *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=expire,proto3" json:"expire,omitempty"`
	ReferringUrl string                 `protobuf:"bytes,14,opt,name=referring_url,json=referringUrl,proto3" json:"referring_url,omitempty"`
	// channel (email, sms, phone, etc)
	//
	// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
	Channel *commons.CommType `protobuf:"bytes,15,opt,name=channel,proto3" json:"channel,omitempty"`
	// topic (future payment vs payment reminder vs account reminders vs receipts)
	Topic string `protobuf:"bytes,16,opt,name=topic,proto3" json:"topic,omitempty"`
	// notate revocation (reason)
	RevokedReason string `protobuf:"bytes,17,opt,name=revoked_reason,json=revokedReason,proto3" json:"revoked_reason,omitempty"`
	// notate grant reason
	GrantedReason string `protobuf:"bytes,18,opt,name=granted_reason,json=grantedReason,proto3" json:"granted_reason,omitempty"`
	// proof of consent (pdf, voice recording etc) this will be filename which can be retrieved via matrix-fts
	Proof string `protobuf:"bytes,19,opt,name=proof,proto3" json:"proof,omitempty"`
	// consent conditions
	//
	// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
	ConditionDaysOfTheWeek []commons.Weekday_Enum `protobuf:"varint,20,rep,packed,name=condition_days_of_the_week,json=conditionDaysOfTheWeek,proto3,enum=api.commons.Weekday_Enum" json:"condition_days_of_the_week,omitempty"`
	// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
	ConditionTimeOfDayFrom string `protobuf:"bytes,21,opt,name=condition_time_of_day_from,json=conditionTimeOfDayFrom,proto3" json:"condition_time_of_day_from,omitempty"`
	// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
	ConditionTimeOfDayTo string `protobuf:"bytes,22,opt,name=condition_time_of_day_to,json=conditionTimeOfDayTo,proto3" json:"condition_time_of_day_to,omitempty"`
	// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
	ConditionFrom *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=condition_from,json=conditionFrom,proto3" json:"condition_from,omitempty"`
	// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
	ConditionTo *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=condition_to,json=conditionTo,proto3" json:"condition_to,omitempty"`
	Notes       string                 `protobuf:"bytes,25,opt,name=notes,proto3" json:"notes,omitempty"`
	// Consent Conditions
	Conditions []*ConsentCondition `protobuf:"bytes,26,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// content_type (call, email, sms, account number)
	ContentType commons.ContentType `protobuf:"varint,27,opt,name=content_type,json=contentType,proto3,enum=api.commons.ContentType" json:"content_type,omitempty"`
	ChannelType commons.Channel     `protobuf:"varint,28,opt,name=channel_type,json=channelType,proto3,enum=api.commons.Channel" json:"channel_type,omitempty"`
}

func (x *Consent) Reset() {
	*x = Consent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consent) ProtoMessage() {}

func (x *Consent) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consent.ProtoReflect.Descriptor instead.
func (*Consent) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{93}
}

func (x *Consent) GetConsentId() int64 {
	if x != nil {
		return x.ConsentId
	}
	return 0
}

func (x *Consent) GetConsentProfileId() string {
	if x != nil {
		return x.ConsentProfileId
	}
	return ""
}

func (x *Consent) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *Consent) GetDeletedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedOn
	}
	return nil
}

func (x *Consent) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Consent) GetRecorded() *timestamppb.Timestamp {
	if x != nil {
		return x.Recorded
	}
	return nil
}

func (x *Consent) GetRevoked() *timestamppb.Timestamp {
	if x != nil {
		return x.Revoked
	}
	return nil
}

func (x *Consent) GetExpire() *timestamppb.Timestamp {
	if x != nil {
		return x.Expire
	}
	return nil
}

func (x *Consent) GetReferringUrl() string {
	if x != nil {
		return x.ReferringUrl
	}
	return ""
}

// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
func (x *Consent) GetChannel() *commons.CommType {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *Consent) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Consent) GetRevokedReason() string {
	if x != nil {
		return x.RevokedReason
	}
	return ""
}

func (x *Consent) GetGrantedReason() string {
	if x != nil {
		return x.GrantedReason
	}
	return ""
}

func (x *Consent) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
func (x *Consent) GetConditionDaysOfTheWeek() []commons.Weekday_Enum {
	if x != nil {
		return x.ConditionDaysOfTheWeek
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
func (x *Consent) GetConditionTimeOfDayFrom() string {
	if x != nil {
		return x.ConditionTimeOfDayFrom
	}
	return ""
}

// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
func (x *Consent) GetConditionTimeOfDayTo() string {
	if x != nil {
		return x.ConditionTimeOfDayTo
	}
	return ""
}

// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
func (x *Consent) GetConditionFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.ConditionFrom
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
func (x *Consent) GetConditionTo() *timestamppb.Timestamp {
	if x != nil {
		return x.ConditionTo
	}
	return nil
}

func (x *Consent) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Consent) GetConditions() []*ConsentCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *Consent) GetContentType() commons.ContentType {
	if x != nil {
		return x.ContentType
	}
	return commons.ContentType(0)
}

func (x *Consent) GetChannelType() commons.Channel {
	if x != nil {
		return x.ChannelType
	}
	return commons.Channel(0)
}

// ConsentCondition defines conditions
// required for a consent to take affect
type ConsentCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Condition id
	ConsentConditionId int64 `protobuf:"varint,1,opt,name=consent_condition_id,json=consentConditionId,proto3" json:"consent_condition_id,omitempty"`
	// Consent it belongs to
	ConsentId int64 `protobuf:"varint,2,opt,name=consent_id,json=consentId,proto3" json:"consent_id,omitempty"`
	// Days of week the condition is applicable to
	DaysOfTheWeek []commons.Weekday_Enum `protobuf:"varint,10,rep,packed,name=days_of_the_week,json=daysOfTheWeek,proto3,enum=api.commons.Weekday_Enum" json:"days_of_the_week,omitempty"`
	// Time of day condition starts
	TimeOfDayFrom string `protobuf:"bytes,11,opt,name=time_of_day_from,json=timeOfDayFrom,proto3" json:"time_of_day_from,omitempty"`
	// Time of day condition ends
	TimeOfDayTo string `protobuf:"bytes,12,opt,name=time_of_day_to,json=timeOfDayTo,proto3" json:"time_of_day_to,omitempty"`
	// Date condition starts
	FromDate *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	// Date condition ends
	ToDate *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
}

func (x *ConsentCondition) Reset() {
	*x = ConsentCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentCondition) ProtoMessage() {}

func (x *ConsentCondition) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentCondition.ProtoReflect.Descriptor instead.
func (*ConsentCondition) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{94}
}

func (x *ConsentCondition) GetConsentConditionId() int64 {
	if x != nil {
		return x.ConsentConditionId
	}
	return 0
}

func (x *ConsentCondition) GetConsentId() int64 {
	if x != nil {
		return x.ConsentId
	}
	return 0
}

func (x *ConsentCondition) GetDaysOfTheWeek() []commons.Weekday_Enum {
	if x != nil {
		return x.DaysOfTheWeek
	}
	return nil
}

func (x *ConsentCondition) GetTimeOfDayFrom() string {
	if x != nil {
		return x.TimeOfDayFrom
	}
	return ""
}

func (x *ConsentCondition) GetTimeOfDayTo() string {
	if x != nil {
		return x.TimeOfDayTo
	}
	return ""
}

func (x *ConsentCondition) GetFromDate() *timestamppb.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *ConsentCondition) GetToDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

type GetConsentProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsentProfileId string `protobuf:"bytes,1,opt,name=consent_profile_id,json=consentProfileId,proto3" json:"consent_profile_id,omitempty"`
}

func (x *GetConsentProfileReq) Reset() {
	*x = GetConsentProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsentProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsentProfileReq) ProtoMessage() {}

func (x *GetConsentProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsentProfileReq.ProtoReflect.Descriptor instead.
func (*GetConsentProfileReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{95}
}

func (x *GetConsentProfileReq) GetConsentProfileId() string {
	if x != nil {
		return x.ConsentProfileId
	}
	return ""
}

type UpdateConsentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsentId        int64  `protobuf:"varint,1,opt,name=consent_id,json=consentId,proto3" json:"consent_id,omitempty"`
	ConsentProfileId string `protobuf:"bytes,3,opt,name=consent_profile_id,json=consentProfileId,proto3" json:"consent_profile_id,omitempty"`
	// payload
	Content      string                 `protobuf:"bytes,10,opt,name=content,proto3" json:"content,omitempty"`
	Recorded     *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=recorded,proto3" json:"recorded,omitempty"`
	Revoked      *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Expire       *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=expire,proto3" json:"expire,omitempty"`
	ReferringUrl string                 `protobuf:"bytes,14,opt,name=referring_url,json=referringUrl,proto3" json:"referring_url,omitempty"`
	// channel (email, sms, phone, etc)
	//
	// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
	Channel *commons.CommType `protobuf:"bytes,15,opt,name=channel,proto3" json:"channel,omitempty"`
	// topic (future payment vs payment reminder vs account reminders vs receipts)
	Topic string `protobuf:"bytes,16,opt,name=topic,proto3" json:"topic,omitempty"`
	// notate revocation (reason)
	RevokedReason string `protobuf:"bytes,17,opt,name=revoked_reason,json=revokedReason,proto3" json:"revoked_reason,omitempty"`
	// notate grant reason
	GrantedReason string `protobuf:"bytes,18,opt,name=granted_reason,json=grantedReason,proto3" json:"granted_reason,omitempty"`
	// proof of consent (pdf, voice recording etc) this will be filename which can be retrieved via matrix-fts
	Proof string `protobuf:"bytes,19,opt,name=proof,proto3" json:"proof,omitempty"`
	// consent conditions
	ConditionDaysOfTheWeek []commons.Weekday_Enum `protobuf:"varint,20,rep,packed,name=condition_days_of_the_week,json=conditionDaysOfTheWeek,proto3,enum=api.commons.Weekday_Enum" json:"condition_days_of_the_week,omitempty"`
	ConditionTimeOfDayFrom string                 `protobuf:"bytes,21,opt,name=condition_time_of_day_from,json=conditionTimeOfDayFrom,proto3" json:"condition_time_of_day_from,omitempty"`
	ConditionTimeOfDayTo   string                 `protobuf:"bytes,22,opt,name=condition_time_of_day_to,json=conditionTimeOfDayTo,proto3" json:"condition_time_of_day_to,omitempty"`
	ConditionFrom          *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=condition_from,json=conditionFrom,proto3" json:"condition_from,omitempty"`
	ConditionTo            *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=condition_to,json=conditionTo,proto3" json:"condition_to,omitempty"`
	Notes                  string                 `protobuf:"bytes,25,opt,name=notes,proto3" json:"notes,omitempty"`
	// Consent Conditions
	Conditions []*ConsentCondition `protobuf:"bytes,26,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// content_type (call, email, sms, account number)
	ContentType commons.ContentType `protobuf:"varint,27,opt,name=content_type,json=contentType,proto3,enum=api.commons.ContentType" json:"content_type,omitempty"`
	ChannelType commons.Channel     `protobuf:"varint,28,opt,name=channel_type,json=channelType,proto3,enum=api.commons.Channel" json:"channel_type,omitempty"`
}

func (x *UpdateConsentReq) Reset() {
	*x = UpdateConsentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConsentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConsentReq) ProtoMessage() {}

func (x *UpdateConsentReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConsentReq.ProtoReflect.Descriptor instead.
func (*UpdateConsentReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{96}
}

func (x *UpdateConsentReq) GetConsentId() int64 {
	if x != nil {
		return x.ConsentId
	}
	return 0
}

func (x *UpdateConsentReq) GetConsentProfileId() string {
	if x != nil {
		return x.ConsentProfileId
	}
	return ""
}

func (x *UpdateConsentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateConsentReq) GetRecorded() *timestamppb.Timestamp {
	if x != nil {
		return x.Recorded
	}
	return nil
}

func (x *UpdateConsentReq) GetRevoked() *timestamppb.Timestamp {
	if x != nil {
		return x.Revoked
	}
	return nil
}

func (x *UpdateConsentReq) GetExpire() *timestamppb.Timestamp {
	if x != nil {
		return x.Expire
	}
	return nil
}

func (x *UpdateConsentReq) GetReferringUrl() string {
	if x != nil {
		return x.ReferringUrl
	}
	return ""
}

// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
func (x *UpdateConsentReq) GetChannel() *commons.CommType {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *UpdateConsentReq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *UpdateConsentReq) GetRevokedReason() string {
	if x != nil {
		return x.RevokedReason
	}
	return ""
}

func (x *UpdateConsentReq) GetGrantedReason() string {
	if x != nil {
		return x.GrantedReason
	}
	return ""
}

func (x *UpdateConsentReq) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

func (x *UpdateConsentReq) GetConditionDaysOfTheWeek() []commons.Weekday_Enum {
	if x != nil {
		return x.ConditionDaysOfTheWeek
	}
	return nil
}

func (x *UpdateConsentReq) GetConditionTimeOfDayFrom() string {
	if x != nil {
		return x.ConditionTimeOfDayFrom
	}
	return ""
}

func (x *UpdateConsentReq) GetConditionTimeOfDayTo() string {
	if x != nil {
		return x.ConditionTimeOfDayTo
	}
	return ""
}

func (x *UpdateConsentReq) GetConditionFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.ConditionFrom
	}
	return nil
}

func (x *UpdateConsentReq) GetConditionTo() *timestamppb.Timestamp {
	if x != nil {
		return x.ConditionTo
	}
	return nil
}

func (x *UpdateConsentReq) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *UpdateConsentReq) GetConditions() []*ConsentCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *UpdateConsentReq) GetContentType() commons.ContentType {
	if x != nil {
		return x.ContentType
	}
	return commons.ContentType(0)
}

func (x *UpdateConsentReq) GetChannelType() commons.Channel {
	if x != nil {
		return x.ChannelType
	}
	return commons.Channel(0)
}

type ExpireConsentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsentId int64                  `protobuf:"varint,1,opt,name=consent_id,json=consentId,proto3" json:"consent_id,omitempty"`
	Expire    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expire,proto3" json:"expire,omitempty"`
}

func (x *ExpireConsentReq) Reset() {
	*x = ExpireConsentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpireConsentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpireConsentReq) ProtoMessage() {}

func (x *ExpireConsentReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpireConsentReq.ProtoReflect.Descriptor instead.
func (*ExpireConsentReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{97}
}

func (x *ExpireConsentReq) GetConsentId() int64 {
	if x != nil {
		return x.ConsentId
	}
	return 0
}

func (x *ExpireConsentReq) GetExpire() *timestamppb.Timestamp {
	if x != nil {
		return x.Expire
	}
	return nil
}

type RevokeConsentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsentId        int64                  `protobuf:"varint,1,opt,name=consent_id,json=consentId,proto3" json:"consent_id,omitempty"`
	Revoked          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=revoked,proto3" json:"revoked,omitempty"`
	ConsentProfileId string                 `protobuf:"bytes,4,opt,name=consent_profile_id,json=consentProfileId,proto3" json:"consent_profile_id,omitempty"`
	Content          string                 `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	ChannelType      commons.Channel        `protobuf:"varint,6,opt,name=channel_type,json=channelType,proto3,enum=api.commons.Channel" json:"channel_type,omitempty"`
	RevokedReason    string                 `protobuf:"bytes,7,opt,name=revoked_reason,json=revokedReason,proto3" json:"revoked_reason,omitempty"`
	ContentType      commons.ContentType    `protobuf:"varint,8,opt,name=content_type,json=contentType,proto3,enum=api.commons.ContentType" json:"content_type,omitempty"`
}

func (x *RevokeConsentReq) Reset() {
	*x = RevokeConsentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeConsentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeConsentReq) ProtoMessage() {}

func (x *RevokeConsentReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeConsentReq.ProtoReflect.Descriptor instead.
func (*RevokeConsentReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{98}
}

func (x *RevokeConsentReq) GetConsentId() int64 {
	if x != nil {
		return x.ConsentId
	}
	return 0
}

func (x *RevokeConsentReq) GetRevoked() *timestamppb.Timestamp {
	if x != nil {
		return x.Revoked
	}
	return nil
}

func (x *RevokeConsentReq) GetConsentProfileId() string {
	if x != nil {
		return x.ConsentProfileId
	}
	return ""
}

func (x *RevokeConsentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *RevokeConsentReq) GetChannelType() commons.Channel {
	if x != nil {
		return x.ChannelType
	}
	return commons.Channel(0)
}

func (x *RevokeConsentReq) GetRevokedReason() string {
	if x != nil {
		return x.RevokedReason
	}
	return ""
}

func (x *RevokeConsentReq) GetContentType() commons.ContentType {
	if x != nil {
		return x.ContentType
	}
	return commons.ContentType(0)
}

type EnableConsentProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsentProfileId string `protobuf:"bytes,1,opt,name=consent_profile_id,json=consentProfileId,proto3" json:"consent_profile_id,omitempty"`
}

func (x *EnableConsentProfileReq) Reset() {
	*x = EnableConsentProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableConsentProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableConsentProfileReq) ProtoMessage() {}

func (x *EnableConsentProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableConsentProfileReq.ProtoReflect.Descriptor instead.
func (*EnableConsentProfileReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{99}
}

func (x *EnableConsentProfileReq) GetConsentProfileId() string {
	if x != nil {
		return x.ConsentProfileId
	}
	return ""
}

type DisableConsentProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsentProfileId string `protobuf:"bytes,1,opt,name=consent_profile_id,json=consentProfileId,proto3" json:"consent_profile_id,omitempty"`
}

func (x *DisableConsentProfileReq) Reset() {
	*x = DisableConsentProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableConsentProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableConsentProfileReq) ProtoMessage() {}

func (x *DisableConsentProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableConsentProfileReq.ProtoReflect.Descriptor instead.
func (*DisableConsentProfileReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{100}
}

func (x *DisableConsentProfileReq) GetConsentProfileId() string {
	if x != nil {
		return x.ConsentProfileId
	}
	return ""
}

type ListConsentProfilesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListConsentProfilesReq) Reset() {
	*x = ListConsentProfilesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConsentProfilesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConsentProfilesReq) ProtoMessage() {}

func (x *ListConsentProfilesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConsentProfilesReq.ProtoReflect.Descriptor instead.
func (*ListConsentProfilesReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{101}
}

type ListConsentProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsentProfileId string `protobuf:"bytes,1,opt,name=consent_profile_id,json=consentProfileId,proto3" json:"consent_profile_id,omitempty"`
	ProfileName      string `protobuf:"bytes,2,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	Count            int64  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Disabled         bool   `protobuf:"varint,4,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// channel (email, sms, phone, etc)
	//
	// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
	Channel *commons.CommType `protobuf:"bytes,5,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *ListConsentProfile) Reset() {
	*x = ListConsentProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConsentProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConsentProfile) ProtoMessage() {}

func (x *ListConsentProfile) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConsentProfile.ProtoReflect.Descriptor instead.
func (*ListConsentProfile) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{102}
}

func (x *ListConsentProfile) GetConsentProfileId() string {
	if x != nil {
		return x.ConsentProfileId
	}
	return ""
}

func (x *ListConsentProfile) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *ListConsentProfile) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListConsentProfile) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
func (x *ListConsentProfile) GetChannel() *commons.CommType {
	if x != nil {
		return x.Channel
	}
	return nil
}

type ListConsentProfilesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsentProfiles []*ListConsentProfile `protobuf:"bytes,1,rep,name=consent_profiles,json=consentProfiles,proto3" json:"consent_profiles,omitempty"`
}

func (x *ListConsentProfilesRes) Reset() {
	*x = ListConsentProfilesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConsentProfilesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConsentProfilesRes) ProtoMessage() {}

func (x *ListConsentProfilesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConsentProfilesRes.ProtoReflect.Descriptor instead.
func (*ListConsentProfilesRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{103}
}

func (x *ListConsentProfilesRes) GetConsentProfiles() []*ListConsentProfile {
	if x != nil {
		return x.ConsentProfiles
	}
	return nil
}

type GetConsentUploadUrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetConsentUploadUrlReq) Reset() {
	*x = GetConsentUploadUrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsentUploadUrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsentUploadUrlReq) ProtoMessage() {}

func (x *GetConsentUploadUrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsentUploadUrlReq.ProtoReflect.Descriptor instead.
func (*GetConsentUploadUrlReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{104}
}

type GetConsentUploadUrlRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	Bucket   string `protobuf:"bytes,3,opt,name=bucket,proto3" json:"bucket,omitempty"`
}

func (x *GetConsentUploadUrlRes) Reset() {
	*x = GetConsentUploadUrlRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsentUploadUrlRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsentUploadUrlRes) ProtoMessage() {}

func (x *GetConsentUploadUrlRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsentUploadUrlRes.ProtoReflect.Descriptor instead.
func (*GetConsentUploadUrlRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{105}
}

func (x *GetConsentUploadUrlRes) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GetConsentUploadUrlRes) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *GetConsentUploadUrlRes) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

type DeleteConsentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsentId int64 `protobuf:"varint,1,opt,name=consent_id,json=consentId,proto3" json:"consent_id,omitempty"`
}

func (x *DeleteConsentReq) Reset() {
	*x = DeleteConsentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConsentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConsentReq) ProtoMessage() {}

func (x *DeleteConsentReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConsentReq.ProtoReflect.Descriptor instead.
func (*DeleteConsentReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{106}
}

func (x *DeleteConsentReq) GetConsentId() int64 {
	if x != nil {
		return x.ConsentId
	}
	return 0
}

type ProcessConsentUploadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename         string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	ConsentProfileId string `protobuf:"bytes,3,opt,name=consent_profile_id,json=consentProfileId,proto3" json:"consent_profile_id,omitempty"`
	UserId           string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ProcessConsentUploadReq) Reset() {
	*x = ProcessConsentUploadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessConsentUploadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessConsentUploadReq) ProtoMessage() {}

func (x *ProcessConsentUploadReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessConsentUploadReq.ProtoReflect.Descriptor instead.
func (*ProcessConsentUploadReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{107}
}

func (x *ProcessConsentUploadReq) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ProcessConsentUploadReq) GetConsentProfileId() string {
	if x != nil {
		return x.ConsentProfileId
	}
	return ""
}

func (x *ProcessConsentUploadReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ProcessConsentUploadRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntriesAdded int64 `protobuf:"varint,1,opt,name=entries_added,json=entriesAdded,proto3" json:"entries_added,omitempty"`
}

func (x *ProcessConsentUploadRes) Reset() {
	*x = ProcessConsentUploadRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessConsentUploadRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessConsentUploadRes) ProtoMessage() {}

func (x *ProcessConsentUploadRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessConsentUploadRes.ProtoReflect.Descriptor instead.
func (*ProcessConsentUploadRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{108}
}

func (x *ProcessConsentUploadRes) GetEntriesAdded() int64 {
	if x != nil {
		return x.EntriesAdded
	}
	return 0
}

type GetFieldNamesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneOnly bool `protobuf:"varint,2,opt,name=phone_only,json=phoneOnly,proto3" json:"phone_only,omitempty"`
}

func (x *GetFieldNamesReq) Reset() {
	*x = GetFieldNamesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFieldNamesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFieldNamesReq) ProtoMessage() {}

func (x *GetFieldNamesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFieldNamesReq.ProtoReflect.Descriptor instead.
func (*GetFieldNamesReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{109}
}

func (x *GetFieldNamesReq) GetPhoneOnly() bool {
	if x != nil {
		return x.PhoneOnly
	}
	return false
}

type FieldNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *FieldNames) Reset() {
	*x = FieldNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldNames) ProtoMessage() {}

func (x *FieldNames) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldNames.ProtoReflect.Descriptor instead.
func (*FieldNames) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{110}
}

func (x *FieldNames) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type GetResultDescriptionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetResultDescriptionsReq) Reset() {
	*x = GetResultDescriptionsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResultDescriptionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultDescriptionsReq) ProtoMessage() {}

func (x *GetResultDescriptionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultDescriptionsReq.ProtoReflect.Descriptor instead.
func (*GetResultDescriptionsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{111}
}

type PurgeScrubListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListId string `protobuf:"bytes,1,opt,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
}

func (x *PurgeScrubListReq) Reset() {
	*x = PurgeScrubListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeScrubListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeScrubListReq) ProtoMessage() {}

func (x *PurgeScrubListReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeScrubListReq.ProtoReflect.Descriptor instead.
func (*PurgeScrubListReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{112}
}

func (x *PurgeScrubListReq) GetListId() string {
	if x != nil {
		return x.ListId
	}
	return ""
}

type PurgeScrubListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntriesFound int64 `protobuf:"varint,1,opt,name=entries_found,json=entriesFound,proto3" json:"entries_found,omitempty"`
}

func (x *PurgeScrubListRes) Reset() {
	*x = PurgeScrubListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeScrubListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeScrubListRes) ProtoMessage() {}

func (x *PurgeScrubListRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeScrubListRes.ProtoReflect.Descriptor instead.
func (*PurgeScrubListRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{113}
}

func (x *PurgeScrubListRes) GetEntriesFound() int64 {
	if x != nil {
		return x.EntriesFound
	}
	return 0
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{114}
}

type ConsentTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic   string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	OrgId   string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Deleted bool   `protobuf:"varint,3,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *ConsentTopic) Reset() {
	*x = ConsentTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentTopic) ProtoMessage() {}

func (x *ConsentTopic) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentTopic.ProtoReflect.Descriptor instead.
func (*ConsentTopic) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{115}
}

func (x *ConsentTopic) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ConsentTopic) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ConsentTopic) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

type ListConsentTopicsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListConsentTopicsReq) Reset() {
	*x = ListConsentTopicsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConsentTopicsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConsentTopicsReq) ProtoMessage() {}

func (x *ListConsentTopicsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConsentTopicsReq.ProtoReflect.Descriptor instead.
func (*ListConsentTopicsReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{116}
}

type ListConsentTopicsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topics []*ConsentTopic `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (x *ListConsentTopicsRes) Reset() {
	*x = ListConsentTopicsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConsentTopicsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConsentTopicsRes) ProtoMessage() {}

func (x *ListConsentTopicsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConsentTopicsRes.ProtoReflect.Descriptor instead.
func (*ListConsentTopicsRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{117}
}

func (x *ListConsentTopicsRes) GetTopics() []*ConsentTopic {
	if x != nil {
		return x.Topics
	}
	return nil
}

type GetConsentTopicReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *GetConsentTopicReq) Reset() {
	*x = GetConsentTopicReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsentTopicReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsentTopicReq) ProtoMessage() {}

func (x *GetConsentTopicReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsentTopicReq.ProtoReflect.Descriptor instead.
func (*GetConsentTopicReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{118}
}

func (x *GetConsentTopicReq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

type UpdateConsentTopicReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalTopic string `protobuf:"bytes,1,opt,name=original_topic,json=originalTopic,proto3" json:"original_topic,omitempty"`
	NewTopic      string `protobuf:"bytes,3,opt,name=new_topic,json=newTopic,proto3" json:"new_topic,omitempty"`
}

func (x *UpdateConsentTopicReq) Reset() {
	*x = UpdateConsentTopicReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConsentTopicReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConsentTopicReq) ProtoMessage() {}

func (x *UpdateConsentTopicReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConsentTopicReq.ProtoReflect.Descriptor instead.
func (*UpdateConsentTopicReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{119}
}

func (x *UpdateConsentTopicReq) GetOriginalTopic() string {
	if x != nil {
		return x.OriginalTopic
	}
	return ""
}

func (x *UpdateConsentTopicReq) GetNewTopic() string {
	if x != nil {
		return x.NewTopic
	}
	return ""
}

type SearchConsentByContentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	// optional field to also filter by consent_profile_id
	ConsentProfileId string `protobuf:"bytes,3,opt,name=consent_profile_id,json=consentProfileId,proto3" json:"consent_profile_id,omitempty"`
}

func (x *SearchConsentByContentReq) Reset() {
	*x = SearchConsentByContentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchConsentByContentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchConsentByContentReq) ProtoMessage() {}

func (x *SearchConsentByContentReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchConsentByContentReq.ProtoReflect.Descriptor instead.
func (*SearchConsentByContentReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{120}
}

func (x *SearchConsentByContentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SearchConsentByContentReq) GetConsentProfileId() string {
	if x != nil {
		return x.ConsentProfileId
	}
	return ""
}

type ConsentByContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId       string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	ProfileId   string `protobuf:"bytes,2,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	ProfileName string `protobuf:"bytes,3,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	ConsentId   int64  `protobuf:"varint,4,opt,name=consent_id,json=consentId,proto3" json:"consent_id,omitempty"`
	// consent content (phone number, email address, account number, etc.)
	Content  string                 `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Revoked  *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Expire   *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=expire,proto3" json:"expire,omitempty"`
	Disabled bool                   `protobuf:"varint,12,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// channel (email, sms, phone, etc)
	//
	// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
	Channel *commons.CommType `protobuf:"bytes,13,opt,name=channel,proto3" json:"channel,omitempty"`
	// topic (future payment vs payment reminder vs account reminders vs receipts)
	Topic string `protobuf:"bytes,14,opt,name=topic,proto3" json:"topic,omitempty"`
	// consent conditions
	ConditionDaysOfTheWeek []commons.Weekday_Enum `protobuf:"varint,15,rep,packed,name=condition_days_of_the_week,json=conditionDaysOfTheWeek,proto3,enum=api.commons.Weekday_Enum" json:"condition_days_of_the_week,omitempty"`
	ConditionTimeOfDayFrom string                 `protobuf:"bytes,16,opt,name=condition_time_of_day_from,json=conditionTimeOfDayFrom,proto3" json:"condition_time_of_day_from,omitempty"`
	ConditionTimeOfDayTo   string                 `protobuf:"bytes,17,opt,name=condition_time_of_day_to,json=conditionTimeOfDayTo,proto3" json:"condition_time_of_day_to,omitempty"`
	ConditionFrom          *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=condition_from,json=conditionFrom,proto3" json:"condition_from,omitempty"`
	ConditionTo            *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=condition_to,json=conditionTo,proto3" json:"condition_to,omitempty"`
	Notes                  string                 `protobuf:"bytes,20,opt,name=notes,proto3" json:"notes,omitempty"`
	// content_type (call, email, sms, account number)
	ContentType commons.ContentType `protobuf:"varint,21,opt,name=content_type,json=contentType,proto3,enum=api.commons.ContentType" json:"content_type,omitempty"`
	// Consent Conditions
	Conditions  []*ConsentCondition `protobuf:"bytes,22,rep,name=conditions,proto3" json:"conditions,omitempty"`
	ChannelType commons.Channel     `protobuf:"varint,23,opt,name=channel_type,json=channelType,proto3,enum=api.commons.Channel" json:"channel_type,omitempty"`
}

func (x *ConsentByContent) Reset() {
	*x = ConsentByContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentByContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentByContent) ProtoMessage() {}

func (x *ConsentByContent) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentByContent.ProtoReflect.Descriptor instead.
func (*ConsentByContent) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{121}
}

func (x *ConsentByContent) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ConsentByContent) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *ConsentByContent) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *ConsentByContent) GetConsentId() int64 {
	if x != nil {
		return x.ConsentId
	}
	return 0
}

func (x *ConsentByContent) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ConsentByContent) GetRevoked() *timestamppb.Timestamp {
	if x != nil {
		return x.Revoked
	}
	return nil
}

func (x *ConsentByContent) GetExpire() *timestamppb.Timestamp {
	if x != nil {
		return x.Expire
	}
	return nil
}

func (x *ConsentByContent) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
func (x *ConsentByContent) GetChannel() *commons.CommType {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *ConsentByContent) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ConsentByContent) GetConditionDaysOfTheWeek() []commons.Weekday_Enum {
	if x != nil {
		return x.ConditionDaysOfTheWeek
	}
	return nil
}

func (x *ConsentByContent) GetConditionTimeOfDayFrom() string {
	if x != nil {
		return x.ConditionTimeOfDayFrom
	}
	return ""
}

func (x *ConsentByContent) GetConditionTimeOfDayTo() string {
	if x != nil {
		return x.ConditionTimeOfDayTo
	}
	return ""
}

func (x *ConsentByContent) GetConditionFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.ConditionFrom
	}
	return nil
}

func (x *ConsentByContent) GetConditionTo() *timestamppb.Timestamp {
	if x != nil {
		return x.ConditionTo
	}
	return nil
}

func (x *ConsentByContent) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ConsentByContent) GetContentType() commons.ContentType {
	if x != nil {
		return x.ContentType
	}
	return commons.ContentType(0)
}

func (x *ConsentByContent) GetConditions() []*ConsentCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *ConsentByContent) GetChannelType() commons.Channel {
	if x != nil {
		return x.ChannelType
	}
	return commons.Channel(0)
}

type SearchConsentByContentRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consents []*ConsentByContent `protobuf:"bytes,1,rep,name=consents,proto3" json:"consents,omitempty"`
}

func (x *SearchConsentByContentRes) Reset() {
	*x = SearchConsentByContentRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchConsentByContentRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchConsentByContentRes) ProtoMessage() {}

func (x *SearchConsentByContentRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchConsentByContentRes.ProtoReflect.Descriptor instead.
func (*SearchConsentByContentRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{122}
}

func (x *SearchConsentByContentRes) GetConsents() []*ConsentByContent {
	if x != nil {
		return x.Consents
	}
	return nil
}

type GetConsentByProfileAndContentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileName string              `protobuf:"bytes,2,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	Content     string              `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	ProfileId   string              `protobuf:"bytes,4,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	ContentType commons.ContentType `protobuf:"varint,5,opt,name=content_type,json=contentType,proto3,enum=api.commons.ContentType" json:"content_type,omitempty"`
}

func (x *GetConsentByProfileAndContentReq) Reset() {
	*x = GetConsentByProfileAndContentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsentByProfileAndContentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsentByProfileAndContentReq) ProtoMessage() {}

func (x *GetConsentByProfileAndContentReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsentByProfileAndContentReq.ProtoReflect.Descriptor instead.
func (*GetConsentByProfileAndContentReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{123}
}

func (x *GetConsentByProfileAndContentReq) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *GetConsentByProfileAndContentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *GetConsentByProfileAndContentReq) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *GetConsentByProfileAndContentReq) GetContentType() commons.ContentType {
	if x != nil {
		return x.ContentType
	}
	return commons.ContentType(0)
}

type GetConsentByProfileAndContentRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId       string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	ProfileId   string `protobuf:"bytes,2,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	ProfileName string `protobuf:"bytes,3,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	// id of consent
	ConsentId int64                  `protobuf:"varint,4,opt,name=consent_id,json=consentId,proto3" json:"consent_id,omitempty"`
	Revoked   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Expire    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=expire,proto3" json:"expire,omitempty"`
	Disabled  bool                   `protobuf:"varint,12,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// channel (email, sms, phone, etc)
	//
	// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
	Channel *commons.CommType `protobuf:"bytes,13,opt,name=channel,proto3" json:"channel,omitempty"`
	// topic (future payment vs payment reminder vs account reminders vs receipts)
	Topic string `protobuf:"bytes,14,opt,name=topic,proto3" json:"topic,omitempty"`
	// consent conditions
	ConditionDaysOfTheWeek []commons.Weekday_Enum `protobuf:"varint,15,rep,packed,name=condition_days_of_the_week,json=conditionDaysOfTheWeek,proto3,enum=api.commons.Weekday_Enum" json:"condition_days_of_the_week,omitempty"`
	ConditionTimeOfDayFrom string                 `protobuf:"bytes,16,opt,name=condition_time_of_day_from,json=conditionTimeOfDayFrom,proto3" json:"condition_time_of_day_from,omitempty"`
	ConditionTimeOfDayTo   string                 `protobuf:"bytes,17,opt,name=condition_time_of_day_to,json=conditionTimeOfDayTo,proto3" json:"condition_time_of_day_to,omitempty"`
	ConditionFrom          *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=condition_from,json=conditionFrom,proto3" json:"condition_from,omitempty"`
	ConditionTo            *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=condition_to,json=conditionTo,proto3" json:"condition_to,omitempty"`
	Notes                  string                 `protobuf:"bytes,20,opt,name=notes,proto3" json:"notes,omitempty"`
	// content_type (call, email, sms, account number)
	ContentType commons.ContentType `protobuf:"varint,21,opt,name=content_type,json=contentType,proto3,enum=api.commons.ContentType" json:"content_type,omitempty"`
	// Consent Conditions
	Conditions  []*ConsentCondition `protobuf:"bytes,22,rep,name=conditions,proto3" json:"conditions,omitempty"`
	ChannelType commons.Channel     `protobuf:"varint,23,opt,name=channel_type,json=channelType,proto3,enum=api.commons.Channel" json:"channel_type,omitempty"`
	// notate revocation (reason)
	RevokedReason string `protobuf:"bytes,24,opt,name=revoked_reason,json=revokedReason,proto3" json:"revoked_reason,omitempty"`
	// notate grant reason
	GrantedReason string `protobuf:"bytes,25,opt,name=granted_reason,json=grantedReason,proto3" json:"granted_reason,omitempty"`
	// proof of consent (pdf, voice recording etc) this will be filename which can be retrieved via matrix-fts
	Proof string `protobuf:"bytes,26,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *GetConsentByProfileAndContentRes) Reset() {
	*x = GetConsentByProfileAndContentRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsentByProfileAndContentRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsentByProfileAndContentRes) ProtoMessage() {}

func (x *GetConsentByProfileAndContentRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsentByProfileAndContentRes.ProtoReflect.Descriptor instead.
func (*GetConsentByProfileAndContentRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{124}
}

func (x *GetConsentByProfileAndContentRes) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetConsentByProfileAndContentRes) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *GetConsentByProfileAndContentRes) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *GetConsentByProfileAndContentRes) GetConsentId() int64 {
	if x != nil {
		return x.ConsentId
	}
	return 0
}

func (x *GetConsentByProfileAndContentRes) GetRevoked() *timestamppb.Timestamp {
	if x != nil {
		return x.Revoked
	}
	return nil
}

func (x *GetConsentByProfileAndContentRes) GetExpire() *timestamppb.Timestamp {
	if x != nil {
		return x.Expire
	}
	return nil
}

func (x *GetConsentByProfileAndContentRes) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

// Deprecated: Marked as deprecated in api/v0alpha/compliance.proto.
func (x *GetConsentByProfileAndContentRes) GetChannel() *commons.CommType {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *GetConsentByProfileAndContentRes) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *GetConsentByProfileAndContentRes) GetConditionDaysOfTheWeek() []commons.Weekday_Enum {
	if x != nil {
		return x.ConditionDaysOfTheWeek
	}
	return nil
}

func (x *GetConsentByProfileAndContentRes) GetConditionTimeOfDayFrom() string {
	if x != nil {
		return x.ConditionTimeOfDayFrom
	}
	return ""
}

func (x *GetConsentByProfileAndContentRes) GetConditionTimeOfDayTo() string {
	if x != nil {
		return x.ConditionTimeOfDayTo
	}
	return ""
}

func (x *GetConsentByProfileAndContentRes) GetConditionFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.ConditionFrom
	}
	return nil
}

func (x *GetConsentByProfileAndContentRes) GetConditionTo() *timestamppb.Timestamp {
	if x != nil {
		return x.ConditionTo
	}
	return nil
}

func (x *GetConsentByProfileAndContentRes) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *GetConsentByProfileAndContentRes) GetContentType() commons.ContentType {
	if x != nil {
		return x.ContentType
	}
	return commons.ContentType(0)
}

func (x *GetConsentByProfileAndContentRes) GetConditions() []*ConsentCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *GetConsentByProfileAndContentRes) GetChannelType() commons.Channel {
	if x != nil {
		return x.ChannelType
	}
	return commons.Channel(0)
}

func (x *GetConsentByProfileAndContentRes) GetRevokedReason() string {
	if x != nil {
		return x.RevokedReason
	}
	return ""
}

func (x *GetConsentByProfileAndContentRes) GetGrantedReason() string {
	if x != nil {
		return x.GrantedReason
	}
	return ""
}

func (x *GetConsentByProfileAndContentRes) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

type GetConsentByContentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of consent profile
	ProfileName string `protobuf:"bytes,2,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	// consent content (phone_number, email, account number, etc.)
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	// id of consent profile
	ProfileId string `protobuf:"bytes,4,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	// consent channel
	ChannelType commons.Channel `protobuf:"varint,5,opt,name=channel_type,json=channelType,proto3,enum=api.commons.Channel" json:"channel_type,omitempty"`
}

func (x *GetConsentByContentReq) Reset() {
	*x = GetConsentByContentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsentByContentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsentByContentReq) ProtoMessage() {}

func (x *GetConsentByContentReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsentByContentReq.ProtoReflect.Descriptor instead.
func (*GetConsentByContentReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{125}
}

func (x *GetConsentByContentReq) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *GetConsentByContentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *GetConsentByContentReq) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *GetConsentByContentReq) GetChannelType() commons.Channel {
	if x != nil {
		return x.ChannelType
	}
	return commons.Channel(0)
}

type GetConsentByContentRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of assigned org
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// name of consent profile
	ProfileName string `protobuf:"bytes,2,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	// consent entity
	Consent *Consent `protobuf:"bytes,3,opt,name=consent,proto3" json:"consent,omitempty"`
	// consent profile disabled
	Disabled bool `protobuf:"varint,4,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *GetConsentByContentRes) Reset() {
	*x = GetConsentByContentRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsentByContentRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsentByContentRes) ProtoMessage() {}

func (x *GetConsentByContentRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsentByContentRes.ProtoReflect.Descriptor instead.
func (*GetConsentByContentRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{126}
}

func (x *GetConsentByContentRes) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetConsentByContentRes) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *GetConsentByContentRes) GetConsent() *Consent {
	if x != nil {
		return x.Consent
	}
	return nil
}

func (x *GetConsentByContentRes) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

type ProcessConsentListDeleteUploadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// payload
	ConsentProfileId    string `protobuf:"bytes,10,opt,name=consent_profile_id,json=consentProfileId,proto3" json:"consent_profile_id,omitempty"`
	Filename            string `protobuf:"bytes,11,opt,name=filename,proto3" json:"filename,omitempty"`
	NotificationMessage string `protobuf:"bytes,12,opt,name=notification_message,json=notificationMessage,proto3" json:"notification_message,omitempty"`
}

func (x *ProcessConsentListDeleteUploadReq) Reset() {
	*x = ProcessConsentListDeleteUploadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessConsentListDeleteUploadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessConsentListDeleteUploadReq) ProtoMessage() {}

func (x *ProcessConsentListDeleteUploadReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessConsentListDeleteUploadReq.ProtoReflect.Descriptor instead.
func (*ProcessConsentListDeleteUploadReq) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{127}
}

func (x *ProcessConsentListDeleteUploadReq) GetConsentProfileId() string {
	if x != nil {
		return x.ConsentProfileId
	}
	return ""
}

func (x *ProcessConsentListDeleteUploadReq) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ProcessConsentListDeleteUploadReq) GetNotificationMessage() string {
	if x != nil {
		return x.NotificationMessage
	}
	return ""
}

type ProcessConsentListDeleteUploadRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProcessConsentListDeleteUploadRes) Reset() {
	*x = ProcessConsentListDeleteUploadRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessConsentListDeleteUploadRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessConsentListDeleteUploadRes) ProtoMessage() {}

func (x *ProcessConsentListDeleteUploadRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessConsentListDeleteUploadRes.ProtoReflect.Descriptor instead.
func (*ProcessConsentListDeleteUploadRes) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{128}
}

type ProcessConsentListDeleteUploadMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStarted *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time_started,json=timeStarted,proto3" json:"time_started,omitempty"`
}

func (x *ProcessConsentListDeleteUploadMeta) Reset() {
	*x = ProcessConsentListDeleteUploadMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0alpha_compliance_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessConsentListDeleteUploadMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessConsentListDeleteUploadMeta) ProtoMessage() {}

func (x *ProcessConsentListDeleteUploadMeta) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0alpha_compliance_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessConsentListDeleteUploadMeta.ProtoReflect.Descriptor instead.
func (*ProcessConsentListDeleteUploadMeta) Descriptor() ([]byte, []int) {
	return file_api_v0alpha_compliance_proto_rawDescGZIP(), []int{129}
}

func (x *ProcessConsentListDeleteUploadMeta) GetTimeStarted() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeStarted
	}
	return nil
}

var File_api_v0alpha_compliance_proto protoreflect.FileDescriptor

var file_api_v0alpha_compliance_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x17, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x63, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x03, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x22, 0x0a, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x0d, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x3f,
	0x0a, 0x11, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x6c, 0x0a, 0x0c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x0a,
	0x0a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x57, 0x0a, 0x09, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x72, 0x75, 0x62,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x72,
	0x0a, 0x11, 0x53, 0x63, 0x72, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a,
	0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x22, 0xf1, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72,
	0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x13, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x11, 0x73, 0x63, 0x72, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xf5, 0x01, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x53, 0x63,
	0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x3b,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e,
	0x0a, 0x13, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x73, 0x63, 0x72,
	0x75, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xa0,
	0x02, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x15, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x22, 0x48, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x2a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x12,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x22, 0x40, 0x0a, 0x0d, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x52, 0x05, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x0c, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x2d, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53,
	0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x22, 0xd6, 0x04, 0x0a, 0x0a, 0x53, 0x63, 0x72,
	0x75, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x32, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a,
	0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x4f, 0x6e, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x22, 0x45, 0x0a, 0x13, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x72, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x2f, 0x0a, 0x13, 0x52, 0x75, 0x6c, 0x65,
	0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x29, 0x0a, 0x0f, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68,
	0x72, 0x61, 0x73, 0x65, 0x22, 0x56, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x3c, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x1e,
	0x0a, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x51, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e,
	0x0a, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x53, 0x68, 0x61,
	0x22, 0x29, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7f, 0x0a, 0x10, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x10,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x12, 0x3a, 0x0a, 0x1a, 0x63, 0x70, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x70, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x10,
	0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a,
	0x0b, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x27, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x10, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a,
	0x0b, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x53, 0x68, 0x61, 0x22,
	0x55, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x53,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x73, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x75, 0x6c, 0x65,
	0x53, 0x65, 0x74, 0x53, 0x68, 0x61, 0x22, 0x12, 0x0a, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x22,
	0x13, 0x0a, 0x11, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x07, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x68, 0x61, 0x12, 0x27, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xc6,
	0x01, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x65, 0x72, 0x62, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x62, 0x52, 0x04, 0x76, 0x65, 0x72, 0x62, 0x12, 0x2b,
	0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x0a, 0x73,
	0x75, 0x62, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x75,
	0x62, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x09, 0x73, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xc5, 0x04, 0x0a, 0x08, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x57, 0x65, 0x65,
	0x6b, 0x64, 0x61, 0x79, 0x45, 0x78, 0x70, 0x48, 0x00, 0x52, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x12,
	0x2a, 0x0a, 0x04, 0x64, 0x6e, 0x63, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x6e, 0x63, 0x6c,
	0x45, 0x78, 0x70, 0x48, 0x00, 0x52, 0x04, 0x64, 0x6e, 0x63, 0x6c, 0x12, 0x39, 0x0a, 0x09, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x78, 0x70, 0x48, 0x00, 0x52, 0x09, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x36, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x70, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a,
	0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x70, 0x48, 0x00, 0x52,
	0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x45, 0x78, 0x70,
	0x48, 0x00, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x33, 0x0a, 0x07, 0x68, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79,
	0x45, 0x78, 0x70, 0x48, 0x00, 0x52, 0x07, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x12, 0x2a,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x70, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x78, 0x70, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x06, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x45, 0x78, 0x70, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x10, 0x0a,
	0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x22,
	0x5c, 0x0a, 0x0a, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x45, 0x78, 0x70, 0x12, 0x28, 0x0a,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a,
	0x07, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x48, 0x6f,
	0x75, 0x72, 0x22, 0x4d, 0x0a, 0x0a, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x45, 0x78, 0x70,
	0x12, 0x2b, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x57, 0x65, 0x65, 0x6b,
	0x64, 0x61, 0x79, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x22, 0x48, 0x0a, 0x08, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x45, 0x78, 0x70, 0x12, 0x28, 0x0a,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x59, 0x0a, 0x07, 0x44,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x12, 0x28, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x64,
	0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x22, 0x45, 0x0a, 0x07, 0x44, 0x6e, 0x63, 0x6c, 0x45, 0x78,
	0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x40, 0x0a,
	0x0c, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x78, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x29, 0x0a, 0x0b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x0c, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x70, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x24, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xb0, 0x03, 0x0a, 0x09, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x45, 0x78, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x63, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x63, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x65,
	0x6e, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x45, 0x0a, 0x0d, 0x61, 0x62, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x11, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x22, 0x2a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x31, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22,
	0x60, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x22, 0xe3, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x72,
	0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x31, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x69, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63,
	0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x21,
	0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x22, 0x2d, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x72, 0x75, 0x62,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64,
	0x22, 0x26, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x72, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x22, 0x97, 0x02, 0x0a,
	0x08, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x70, 0x6c,
	0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x63, 0x70, 0x6c, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x49,
	0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12,
	0x3a, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x6e, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0a, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x44, 0x65, 0x6e, 0x79, 0x12, 0x4f, 0x0a, 0x15, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x9a, 0x06, 0x0a, 0x0c, 0x53, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x50, 0x0a, 0x0d, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a,
	0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6e, 0x63, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x6e, 0x63, 0x6c, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x0a,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x12, 0x44, 0x0a, 0x11,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x3f, 0x0a, 0x11, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xa7, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x3a, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x5f, 0x64, 0x65, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x44,
	0x65, 0x6e, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x46, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52,
	0x65, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x08, 0x73, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x22, 0x38, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x70, 0x6c, 0x5f, 0x73,
	0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x63, 0x70, 0x6c, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x49, 0x64, 0x22,
	0x43, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65,
	0x73, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x08, 0x73, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x22, 0x46, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x52, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x22, 0x46, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65,
	0x73, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x08, 0x73, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x70, 0x6c,
	0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x63, 0x70, 0x6c, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x49,
	0x64, 0x22, 0x13, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x17, 0x52, 0x75, 0x6e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x25, 0x0a, 0x0f, 0x63, 0x70, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x70, 0x6c, 0x52,
	0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x49, 0x64, 0x22, 0xa4, 0x01, 0x0a, 0x17, 0x52, 0x75, 0x6e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x73, 0x52, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29,
	0x0a, 0x11, 0x63, 0x70, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x70, 0x6c, 0x52, 0x75,
	0x6c, 0x65, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22,
	0x8e, 0x02, 0x0a, 0x0e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x57, 0x0a, 0x16, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x14, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x55,
	0x0a, 0x15, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x6e, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x13, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x44, 0x65, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02,
	0x22, 0x5c, 0x0a, 0x14, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x15,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x73, 0x52, 0x65, 0x71, 0x22, 0x4a, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x09,
	0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x73, 0x22, 0x41, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0f,
	0x63, 0x70, 0x6c, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x70, 0x6c, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x31, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x73, 0x22, 0x41, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x12, 0x25,
	0x0a, 0x0f, 0x63, 0x70, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x70, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x53, 0x65, 0x74, 0x49, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x52, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x68, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x73, 0x52, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x12, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52,
	0x11, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x73, 0x22, 0x43, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x25, 0x0a, 0x0f, 0x63, 0x70, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x70, 0x6c, 0x52, 0x75,
	0x6c, 0x65, 0x53, 0x65, 0x74, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x73, 0x52, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52,
	0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x22, 0x62, 0x0a, 0x11, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x12,
	0x25, 0x0a, 0x0f, 0x63, 0x70, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x70, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x70, 0x6c, 0x5f, 0x73, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x63, 0x70, 0x6c, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x49, 0x64, 0x22, 0x64,
	0x0a, 0x13, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x0f, 0x63, 0x70, 0x6c, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x70, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x63, 0x70, 0x6c, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x70, 0x6c, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x0f, 0x63, 0x70, 0x6c,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x70, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x70, 0x6c, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x70, 0x6c, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x25,
	0x0a, 0x0f, 0x63, 0x70, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x70, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x70, 0x6c, 0x5f, 0x73, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x63, 0x70, 0x6c, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x49, 0x64, 0x22, 0xda, 0x01,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x47, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0xb2, 0x07, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x72,
	0x6c, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x55, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x79, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x16, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x4f, 0x66,
	0x54, 0x68, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x3a, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x36, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x54, 0x6f, 0x12, 0x41, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x3d,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x37, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x31, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xbe, 0x02, 0x0a, 0x0e,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0xe7, 0x08, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07,
	0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x0e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x59, 0x0a, 0x1a, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66, 0x5f,
	0x74, 0x68, 0x65, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x57, 0x65, 0x65,
	0x6b, 0x64, 0x61, 0x79, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x16, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x54, 0x68,
	0x65, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x3e, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x16, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61,
	0x79, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x3a, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x74,
	0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x54,
	0x6f, 0x12, 0x45, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe3, 0x02, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x10,
	0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x77, 0x65, 0x65, 0x6b,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x0d, 0x64, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x57, 0x65, 0x65, 0x6b,
	0x12, 0x27, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x4f, 0x66, 0x44, 0x61, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x23, 0x0a, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x54, 0x6f, 0x12, 0x37,
	0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66,
	0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x22, 0x44, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x22, 0x87, 0x08, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x36,
	0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x06,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x12, 0x55, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x77, 0x65,
	0x65, 0x6b, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x79, 0x73, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x3a, 0x0a, 0x1a, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66,
	0x5f, 0x64, 0x61, 0x79, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66,
	0x44, 0x61, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x36, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79,
	0x5f, 0x74, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x54, 0x6f, 0x12,
	0x41, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x65, 0x0a, 0x10,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x22, 0xcc, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x47, 0x0a, 0x17, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x18, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x22,
	0xcc, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x64,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x22, 0x5e,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x31,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x7c, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x3e, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x22,
	0x31, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4f, 0x6e,
	0x6c, 0x79, 0x22, 0x22, 0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x22, 0x2c, 0x0a, 0x11, 0x50, 0x75, 0x72, 0x67, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64,
	0x22, 0x38, 0x0a, 0x11, 0x50, 0x75, 0x72, 0x67, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x55, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x22, 0x49, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x22, 0x2a, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x5b, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77,
	0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65,
	0x77, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x63, 0x0a, 0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x8d, 0x07, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x55, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x77, 0x65, 0x65,
	0x6b, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79,
	0x73, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x3a, 0x0a, 0x1a, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f,
	0x64, 0x61, 0x79, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44,
	0x61, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x36, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x5f,
	0x74, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x54, 0x6f, 0x12, 0x41,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x56, 0x0a, 0x19, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xe7, 0x07, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x42, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x72, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x55, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x79,
	0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x16,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x54,
	0x68, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x3a, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x36, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x54, 0x6f, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x3d, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37,
	0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0xad, 0x01, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xa0, 0x01, 0x0a,
	0x21, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x14,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x23, 0x0a, 0x21, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x22, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x32, 0xc2, 0x48, 0x0a, 0x0a, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x10, 0x52, 0x75, 0x6c,
	0x65, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x20, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x07, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f,
	0x72, 0x75, 0x6c, 0x65, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x85, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x22, 0x39, 0xba,
	0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a,
	0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x0d, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52,
	0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0x84, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x65, 0x74, 0x12, 0x87, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x22, 0x39, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x07, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x73, 0x30, 0x01, 0x12, 0x77,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x22, 0x37,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27,
	0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x74,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x53, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x07,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x62, 0x79, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0x84, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22,
	0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0x84, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x65, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x07, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12, 0x8d,
	0x01, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x07, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12, 0x8b,
	0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x3c,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c,
	0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x73, 0x63, 0x72, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x9c, 0x01, 0x0a,
	0x13, 0x41, 0x64, 0x64, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x22, 0x45, 0xba, 0xb8, 0x91, 0x02, 0x0a, 0x0a, 0x03, 0x08, 0x84, 0x07,
	0x0a, 0x03, 0x08, 0xca, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x61, 0x64, 0x64, 0x73, 0x63, 0x72, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x10,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x07,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x63, 0x72, 0x75, 0x62, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0xa5, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63,
	0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x26,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x22, 0x48, 0xba, 0xb8, 0x91, 0x02, 0x0a, 0x0a, 0x03, 0x08, 0x84, 0x07, 0x0a, 0x03, 0x08,
	0xca, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x63, 0x72, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63,
	0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x0a, 0x0a, 0x03, 0x08, 0x84,
	0x07, 0x0a, 0x03, 0x08, 0xca, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22,
	0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x53, 0x63, 0x72, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x8b, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63,
	0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84,
	0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x8e, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x39, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0x84, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x75,
	0x62, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x07, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f,
	0x67, 0x65, 0x74, 0x73, 0x63, 0x72, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x8d, 0x01,
	0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x41, 0xba, 0xb8, 0x91, 0x02,
	0x0a, 0x0a, 0x03, 0x08, 0x84, 0x07, 0x0a, 0x03, 0x08, 0xca, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x73, 0x63, 0x72, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xa9, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x25,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55,
	0x72, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x42, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84,
	0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x73, 0x63, 0x72, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x74,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x75, 0x72, 0x6c, 0x12, 0xa4, 0x01, 0x0a, 0x16, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a,
	0x22, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x73, 0x63, 0x72, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x74, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0xb6, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x72, 0x75,
	0x62, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x49,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39,
	0x3a, 0x01, 0x2a, 0x22, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x73, 0x63, 0x72, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x74, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x91, 0x01, 0x0a, 0x0f, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22,
	0x3c, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x72, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x8d, 0x01,
	0x0a, 0x0e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50,
	0x75, 0x72, 0x67, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50,
	0x75, 0x72, 0x67, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x07, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x70,
	0x75, 0x72, 0x67, 0x65, 0x73, 0x63, 0x72, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x8d, 0x01,
	0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71,
	0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x73,
	0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x07, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x7e, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x1b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x22, 0x35, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0x84, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x2f, 0x67, 0x65, 0x74, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x8d, 0x01,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71,
	0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x73,
	0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x07, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x8d, 0x01,
	0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71,
	0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x73,
	0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x07, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0xa5, 0x01,
	0x0a, 0x14, 0x52, 0x75, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x75, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x75, 0x6e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x52,
	0x65, 0x73, 0x22, 0x41, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x07, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x2f, 0x72, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x73, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c,
	0x6c, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x6c, 0x6c, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3d,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d,
	0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x6c, 0x69, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x12, 0xb1, 0x01,
	0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53,
	0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x22, 0x44, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a,
	0x22, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x75, 0x6e,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x73, 0x12, 0xa5, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x53,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x41, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0x84, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x52, 0x65,
	0x73, 0x22, 0x42, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x07, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x73, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x07, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x8b, 0x01,
	0x0a, 0x10, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3d, 0xba, 0xb8,
	0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01,
	0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x75, 0x6e, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x85, 0x01, 0x0a, 0x0e,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x1e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0x84, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x12, 0x88, 0x01, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x84, 0x07, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x83,
	0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0x84, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x3f,
	0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a,
	0x22, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0xa5, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x22, 0x41, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x8e, 0x07,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x12, 0x93, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0x8e, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x77, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0x8e, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12,
	0xc9, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22,
	0x4a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x8e, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3a, 0x3a, 0x01, 0x2a, 0x22, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x67, 0x65,
	0x74, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x62, 0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x61, 0x6e, 0x64, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0xa1, 0x01, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x40, 0xba,
	0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x8e, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a,
	0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x62, 0x79, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0xad, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x43, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0x8e, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x22,
	0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x62, 0x79, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x82, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0x8e, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3a, 0xba,
	0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x8e, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a,
	0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x7f, 0x0a, 0x0d, 0x52, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a,
	0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x8e, 0x07, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12,
	0xbc, 0x01, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x4b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x8e, 0x07, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3b, 0x3a, 0x01, 0x2a, 0x22, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x6c, 0x69,
	0x73, 0x74, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x97,
	0x01, 0x0a, 0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x41, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x8e,
	0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x15, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x42, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x8e, 0x07, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0x8e, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72,
	0x6c, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x40, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0x8e, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a,
	0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x75, 0x72, 0x6c, 0x12, 0x9e, 0x01,
	0x0a, 0x14, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x41, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0x8e, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a,
	0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x99,
	0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0x8e, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22,
	0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x1a,
	0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0x8e, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22,
	0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x84, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3f,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x8e, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f,
	0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x84, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x8e,
	0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x8d, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x22, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0x8e,
	0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x95, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x23,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x22, 0x40, 0xba, 0xb8,
	0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xac, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01,
	0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x42, 0x97,
	0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x42, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xa2, 0x02, 0x03,
	0x41, 0x56, 0x58, 0xaa, 0x02, 0x0b, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0xca, 0x02, 0x0b, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xe2,
	0x02, 0x17, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x41, 0x70, 0x69, 0x3a,
	0x3a, 0x56, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v0alpha_compliance_proto_rawDescOnce sync.Once
	file_api_v0alpha_compliance_proto_rawDescData = file_api_v0alpha_compliance_proto_rawDesc
)

func file_api_v0alpha_compliance_proto_rawDescGZIP() []byte {
	file_api_v0alpha_compliance_proto_rawDescOnce.Do(func() {
		file_api_v0alpha_compliance_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v0alpha_compliance_proto_rawDescData)
	})
	return file_api_v0alpha_compliance_proto_rawDescData
}

var file_api_v0alpha_compliance_proto_msgTypes = make([]protoimpl.MessageInfo, 132)
var file_api_v0alpha_compliance_proto_goTypes = []interface{}{
	(*ProcessOutboundCallReq)(nil),             // 0: api.v0alpha.ProcessOutboundCallReq
	(*RuleResponse)(nil),                       // 1: api.v0alpha.RuleResponse
	(*ProcessRes)(nil),                         // 2: api.v0alpha.ProcessRes
	(*ScrubList)(nil),                          // 3: api.v0alpha.ScrubList
	(*ScrubEntryDetails)(nil),                  // 4: api.v0alpha.ScrubEntryDetails
	(*CreateScrubListReq)(nil),                 // 5: api.v0alpha.CreateScrubListReq
	(*AddScrubListEntriesReq)(nil),             // 6: api.v0alpha.AddScrubListEntriesReq
	(*UpdateScrubEntryReq)(nil),                // 7: api.v0alpha.UpdateScrubEntryReq
	(*UpdateScrubEntryRes)(nil),                // 8: api.v0alpha.UpdateScrubEntryRes
	(*DeleteScrubListEntriesReq)(nil),          // 9: api.v0alpha.DeleteScrubListEntriesReq
	(*GetScrubListReq)(nil),                    // 10: api.v0alpha.GetScrubListReq
	(*GetScrubListsReq)(nil),                   // 11: api.v0alpha.GetScrubListsReq
	(*ScrubListsRes)(nil),                      // 12: api.v0alpha.ScrubListsRes
	(*ScrubListRes)(nil),                       // 13: api.v0alpha.ScrubListRes
	(*DeleteScrubListReq)(nil),                 // 14: api.v0alpha.DeleteScrubListReq
	(*SearchScrubListReq)(nil),                 // 15: api.v0alpha.SearchScrubListReq
	(*ScrubEntry)(nil),                         // 16: api.v0alpha.ScrubEntry
	(*RuleAutoCompleteReq)(nil),                // 17: api.v0alpha.RuleAutoCompleteReq
	(*RuleAutoCompleteRes)(nil),                // 18: api.v0alpha.RuleAutoCompleteRes
	(*CheckRuleSetReq)(nil),                    // 19: api.v0alpha.CheckRuleSetReq
	(*CheckRuleSetRes)(nil),                    // 20: api.v0alpha.CheckRuleSetRes
	(*ListRuleSetsReq)(nil),                    // 21: api.v0alpha.ListRuleSetsReq
	(*ListRuleSetsRes)(nil),                    // 22: api.v0alpha.ListRuleSetsRes
	(*GetRuleSetReq)(nil),                      // 23: api.v0alpha.GetRuleSetReq
	(*GetRuleSetByNameReq)(nil),                // 24: api.v0alpha.GetRuleSetByNameReq
	(*AssignRuleSetReq)(nil),                   // 25: api.v0alpha.AssignRuleSetReq
	(*AssignRuleSetRes)(nil),                   // 26: api.v0alpha.AssignRuleSetRes
	(*RenameRuleSetReq)(nil),                   // 27: api.v0alpha.RenameRuleSetReq
	(*RenameRuleSetRes)(nil),                   // 28: api.v0alpha.RenameRuleSetRes
	(*CreateRuleSetReq)(nil),                   // 29: api.v0alpha.CreateRuleSetReq
	(*EnableRuleSetReq)(nil),                   // 30: api.v0alpha.EnableRuleSetReq
	(*DisableRuleSetReq)(nil),                  // 31: api.v0alpha.DisableRuleSetReq
	(*EnableRuleSetRes)(nil),                   // 32: api.v0alpha.EnableRuleSetRes
	(*DisableRuleSetRes)(nil),                  // 33: api.v0alpha.DisableRuleSetRes
	(*EvaluationResults)(nil),                  // 34: api.v0alpha.EvaluationResults
	(*RuleSet)(nil),                            // 35: api.v0alpha.RuleSet
	(*Rule)(nil),                               // 36: api.v0alpha.Rule
	(*Selector)(nil),                           // 37: api.v0alpha.Selector
	(*HolidayExp)(nil),                         // 38: api.v0alpha.HolidayExp
	(*TimeExp)(nil),                            // 39: api.v0alpha.TimeExp
	(*WeekdayExp)(nil),                         // 40: api.v0alpha.WeekdayExp
	(*MonthExp)(nil),                           // 41: api.v0alpha.MonthExp
	(*DateExp)(nil),                            // 42: api.v0alpha.DateExp
	(*DnclExp)(nil),                            // 43: api.v0alpha.DnclExp
	(*FrequencyExp)(nil),                       // 44: api.v0alpha.FrequencyExp
	(*LocationExp)(nil),                        // 45: api.v0alpha.LocationExp
	(*PhoneTypeExp)(nil),                       // 46: api.v0alpha.PhoneTypeExp
	(*MetaFieldExp)(nil),                       // 47: api.v0alpha.MetaFieldExp
	(*PluginExp)(nil),                          // 48: api.v0alpha.PluginExp
	(*GetDefaultRulesReq)(nil),                 // 49: api.v0alpha.GetDefaultRulesReq
	(*GetDefaultRulesRes)(nil),                 // 50: api.v0alpha.GetDefaultRulesRes
	(*GetScrubListUploadUrlReq)(nil),           // 51: api.v0alpha.GetScrubListUploadUrlReq
	(*GetScrubListUploadUrlRes)(nil),           // 52: api.v0alpha.GetScrubListUploadUrlRes
	(*ProcessScrubListUploadReq)(nil),          // 53: api.v0alpha.ProcessScrubListUploadReq
	(*ProcessScrubListUploadRes)(nil),          // 54: api.v0alpha.ProcessScrubListUploadRes
	(*ProcessScrubListDeleteUploadReq)(nil),    // 55: api.v0alpha.ProcessScrubListDeleteUploadReq
	(*ProcessScrubListDeleteUploadRes)(nil),    // 56: api.v0alpha.ProcessScrubListDeleteUploadRes
	(*ExportScrubListReq)(nil),                 // 57: api.v0alpha.ExportScrubListReq
	(*ExportScrubListRes)(nil),                 // 58: api.v0alpha.ExportScrubListRes
	(*CountryCode)(nil),                        // 59: api.v0alpha.CountryCode
	(*Scenario)(nil),                           // 60: api.v0alpha.Scenario
	(*ScenarioData)(nil),                       // 61: api.v0alpha.ScenarioData
	(*CreateScenarioReq)(nil),                  // 62: api.v0alpha.CreateScenarioReq
	(*CreateScenarioRes)(nil),                  // 63: api.v0alpha.CreateScenarioRes
	(*GetScenarioReq)(nil),                     // 64: api.v0alpha.GetScenarioReq
	(*GetScenarioRes)(nil),                     // 65: api.v0alpha.GetScenarioRes
	(*UpdateScenarioReq)(nil),                  // 66: api.v0alpha.UpdateScenarioReq
	(*UpdateScenarioRes)(nil),                  // 67: api.v0alpha.UpdateScenarioRes
	(*DeleteScenarioReq)(nil),                  // 68: api.v0alpha.DeleteScenarioReq
	(*DeleteScenarioRes)(nil),                  // 69: api.v0alpha.DeleteScenarioRes
	(*RunAssignedScenariosReq)(nil),            // 70: api.v0alpha.RunAssignedScenariosReq
	(*RunAssignedScenariosRes)(nil),            // 71: api.v0alpha.RunAssignedScenariosRes
	(*ScenarioResult)(nil),                     // 72: api.v0alpha.ScenarioResult
	(*ScenarioRuleResponse)(nil),               // 73: api.v0alpha.ScenarioRuleResponse
	(*ListAllScenariosReq)(nil),                // 74: api.v0alpha.ListAllScenariosReq
	(*ListAllScenariosRes)(nil),                // 75: api.v0alpha.ListAllScenariosRes
	(*ListAssignedRuleSetsReq)(nil),            // 76: api.v0alpha.ListAssignedRuleSetsReq
	(*ListAssignedRuleSetsRes)(nil),            // 77: api.v0alpha.ListAssignedRuleSetsRes
	(*ListAssignedScenariosReq)(nil),           // 78: api.v0alpha.ListAssignedScenariosReq
	(*AssignedScenario)(nil),                   // 79: api.v0alpha.AssignedScenario
	(*ListAssignedScenariosRes)(nil),           // 80: api.v0alpha.ListAssignedScenariosRes
	(*ListUnassignedScenariosReq)(nil),         // 81: api.v0alpha.ListUnassignedScenariosReq
	(*ListUnassignedScenariosRes)(nil),         // 82: api.v0alpha.ListUnassignedScenariosRes
	(*AssignScenarioReq)(nil),                  // 83: api.v0alpha.AssignScenarioReq
	(*UnassignScenarioReq)(nil),                // 84: api.v0alpha.UnassignScenarioReq
	(*EnableScenarioReq)(nil),                  // 85: api.v0alpha.EnableScenarioReq
	(*DisableScenarioReq)(nil),                 // 86: api.v0alpha.DisableScenarioReq
	(*CreateConsentProfileReq)(nil),            // 87: api.v0alpha.CreateConsentProfileReq
	(*CreateConsentProfileRes)(nil),            // 88: api.v0alpha.CreateConsentProfileRes
	(*GetConsentReq)(nil),                      // 89: api.v0alpha.GetConsentReq
	(*CreateConsentReq)(nil),                   // 90: api.v0alpha.CreateConsentReq
	(*CreateConsentRes)(nil),                   // 91: api.v0alpha.CreateConsentRes
	(*ConsentProfile)(nil),                     // 92: api.v0alpha.ConsentProfile
	(*Consent)(nil),                            // 93: api.v0alpha.Consent
	(*ConsentCondition)(nil),                   // 94: api.v0alpha.ConsentCondition
	(*GetConsentProfileReq)(nil),               // 95: api.v0alpha.GetConsentProfileReq
	(*UpdateConsentReq)(nil),                   // 96: api.v0alpha.UpdateConsentReq
	(*ExpireConsentReq)(nil),                   // 97: api.v0alpha.ExpireConsentReq
	(*RevokeConsentReq)(nil),                   // 98: api.v0alpha.RevokeConsentReq
	(*EnableConsentProfileReq)(nil),            // 99: api.v0alpha.EnableConsentProfileReq
	(*DisableConsentProfileReq)(nil),           // 100: api.v0alpha.DisableConsentProfileReq
	(*ListConsentProfilesReq)(nil),             // 101: api.v0alpha.ListConsentProfilesReq
	(*ListConsentProfile)(nil),                 // 102: api.v0alpha.ListConsentProfile
	(*ListConsentProfilesRes)(nil),             // 103: api.v0alpha.ListConsentProfilesRes
	(*GetConsentUploadUrlReq)(nil),             // 104: api.v0alpha.GetConsentUploadUrlReq
	(*GetConsentUploadUrlRes)(nil),             // 105: api.v0alpha.GetConsentUploadUrlRes
	(*DeleteConsentReq)(nil),                   // 106: api.v0alpha.DeleteConsentReq
	(*ProcessConsentUploadReq)(nil),            // 107: api.v0alpha.ProcessConsentUploadReq
	(*ProcessConsentUploadRes)(nil),            // 108: api.v0alpha.ProcessConsentUploadRes
	(*GetFieldNamesReq)(nil),                   // 109: api.v0alpha.GetFieldNamesReq
	(*FieldNames)(nil),                         // 110: api.v0alpha.FieldNames
	(*GetResultDescriptionsReq)(nil),           // 111: api.v0alpha.GetResultDescriptionsReq
	(*PurgeScrubListReq)(nil),                  // 112: api.v0alpha.PurgeScrubListReq
	(*PurgeScrubListRes)(nil),                  // 113: api.v0alpha.PurgeScrubListRes
	(*Empty)(nil),                              // 114: api.v0alpha.Empty
	(*ConsentTopic)(nil),                       // 115: api.v0alpha.ConsentTopic
	(*ListConsentTopicsReq)(nil),               // 116: api.v0alpha.ListConsentTopicsReq
	(*ListConsentTopicsRes)(nil),               // 117: api.v0alpha.ListConsentTopicsRes
	(*GetConsentTopicReq)(nil),                 // 118: api.v0alpha.GetConsentTopicReq
	(*UpdateConsentTopicReq)(nil),              // 119: api.v0alpha.UpdateConsentTopicReq
	(*SearchConsentByContentReq)(nil),          // 120: api.v0alpha.SearchConsentByContentReq
	(*ConsentByContent)(nil),                   // 121: api.v0alpha.ConsentByContent
	(*SearchConsentByContentRes)(nil),          // 122: api.v0alpha.SearchConsentByContentRes
	(*GetConsentByProfileAndContentReq)(nil),   // 123: api.v0alpha.GetConsentByProfileAndContentReq
	(*GetConsentByProfileAndContentRes)(nil),   // 124: api.v0alpha.GetConsentByProfileAndContentRes
	(*GetConsentByContentReq)(nil),             // 125: api.v0alpha.GetConsentByContentReq
	(*GetConsentByContentRes)(nil),             // 126: api.v0alpha.GetConsentByContentRes
	(*ProcessConsentListDeleteUploadReq)(nil),  // 127: api.v0alpha.ProcessConsentListDeleteUploadReq
	(*ProcessConsentListDeleteUploadRes)(nil),  // 128: api.v0alpha.ProcessConsentListDeleteUploadRes
	(*ProcessConsentListDeleteUploadMeta)(nil), // 129: api.v0alpha.ProcessConsentListDeleteUploadMeta
	nil,                              // 130: api.v0alpha.ProcessOutboundCallReq.CallMetadataEntry
	nil,                              // 131: api.v0alpha.ScenarioData.CallMetadataEntry
	(commons.CallType_Enum)(0),       // 132: api.commons.CallType.Enum
	(*timestamppb.Timestamp)(nil),    // 133: google.protobuf.Timestamp
	(commons.ContentType)(0),         // 134: api.commons.ContentType
	(*wrapperspb.StringValue)(nil),   // 135: google.protobuf.StringValue
	(*commons.CommType)(nil),         // 136: api.commons.CommType
	(commons.Verb)(0),                // 137: api.commons.Verb
	(commons.Entity)(0),              // 138: api.commons.Entity
	(commons.SubEntity)(0),           // 139: api.commons.SubEntity
	(commons.Month)(0),               // 140: api.commons.Month
	(commons.Weekday_Enum)(0),        // 141: api.commons.Weekday.Enum
	(commons.PhoneType)(0),           // 142: api.commons.PhoneType
	(commons.PluginType)(0),          // 143: api.commons.PluginType
	(commons.Environment)(0),         // 144: api.commons.Environment
	(commons.ConsentAbsentAction)(0), // 145: api.commons.ConsentAbsentAction
	(commons.Channel)(0),             // 146: api.commons.Channel
	(*longrunningpb.Operation)(nil),  // 147: google.longrunning.Operation
	(*emptypb.Empty)(nil),            // 148: google.protobuf.Empty
}
var file_api_v0alpha_compliance_proto_depIdxs = []int32{
	130, // 0: api.v0alpha.ProcessOutboundCallReq.call_metadata:type_name -> api.v0alpha.ProcessOutboundCallReq.CallMetadataEntry
	132, // 1: api.v0alpha.ProcessOutboundCallReq.source_field:type_name -> api.commons.CallType.Enum
	1,   // 2: api.v0alpha.ProcessRes.rule_responses:type_name -> api.v0alpha.RuleResponse
	16,  // 3: api.v0alpha.ScrubList.entries:type_name -> api.v0alpha.ScrubEntry
	133, // 4: api.v0alpha.ScrubEntryDetails.expiration_date:type_name -> google.protobuf.Timestamp
	134, // 5: api.v0alpha.CreateScrubListReq.content_type:type_name -> api.commons.ContentType
	4,   // 6: api.v0alpha.CreateScrubListReq.scrub_entry_details:type_name -> api.v0alpha.ScrubEntryDetails
	134, // 7: api.v0alpha.AddScrubListEntriesReq.content_type:type_name -> api.commons.ContentType
	4,   // 8: api.v0alpha.AddScrubListEntriesReq.scrub_entry_details:type_name -> api.v0alpha.ScrubEntryDetails
	135, // 9: api.v0alpha.UpdateScrubEntryReq.notes:type_name -> google.protobuf.StringValue
	135, // 10: api.v0alpha.UpdateScrubEntryReq.content:type_name -> google.protobuf.StringValue
	133, // 11: api.v0alpha.UpdateScrubEntryReq.expiration_date:type_name -> google.protobuf.Timestamp
	135, // 12: api.v0alpha.UpdateScrubEntryReq.country_code:type_name -> google.protobuf.StringValue
	13,  // 13: api.v0alpha.ScrubListsRes.lists:type_name -> api.v0alpha.ScrubListRes
	134, // 14: api.v0alpha.ScrubListRes.content_type:type_name -> api.commons.ContentType
	135, // 15: api.v0alpha.ScrubEntry.notes:type_name -> google.protobuf.StringValue
	135, // 16: api.v0alpha.ScrubEntry.content:type_name -> google.protobuf.StringValue
	133, // 17: api.v0alpha.ScrubEntry.expiration_date:type_name -> google.protobuf.Timestamp
	135, // 18: api.v0alpha.ScrubEntry.result:type_name -> google.protobuf.StringValue
	134, // 19: api.v0alpha.ScrubEntry.type:type_name -> api.commons.ContentType
	135, // 20: api.v0alpha.ScrubEntry.country_code:type_name -> google.protobuf.StringValue
	133, // 21: api.v0alpha.ScrubEntry.created_on:type_name -> google.protobuf.Timestamp
	135, // 22: api.v0alpha.ScrubEntry.created_by:type_name -> google.protobuf.StringValue
	36,  // 23: api.v0alpha.CheckRuleSetRes.rules:type_name -> api.v0alpha.Rule
	136, // 24: api.v0alpha.AssignRuleSetReq.comm_type:type_name -> api.commons.CommType
	36,  // 25: api.v0alpha.CreateRuleSetReq.rules:type_name -> api.v0alpha.Rule
	36,  // 26: api.v0alpha.RuleSet.rules:type_name -> api.v0alpha.Rule
	137, // 27: api.v0alpha.Rule.verb:type_name -> api.commons.Verb
	138, // 28: api.v0alpha.Rule.entity:type_name -> api.commons.Entity
	139, // 29: api.v0alpha.Rule.sub_entity:type_name -> api.commons.SubEntity
	37,  // 30: api.v0alpha.Rule.selectors:type_name -> api.v0alpha.Selector
	39,  // 31: api.v0alpha.Selector.time:type_name -> api.v0alpha.TimeExp
	40,  // 32: api.v0alpha.Selector.week:type_name -> api.v0alpha.WeekdayExp
	43,  // 33: api.v0alpha.Selector.dncl:type_name -> api.v0alpha.DnclExp
	44,  // 34: api.v0alpha.Selector.frequency:type_name -> api.v0alpha.FrequencyExp
	45,  // 35: api.v0alpha.Selector.location:type_name -> api.v0alpha.LocationExp
	46,  // 36: api.v0alpha.Selector.phone_type:type_name -> api.v0alpha.PhoneTypeExp
	41,  // 37: api.v0alpha.Selector.month:type_name -> api.v0alpha.MonthExp
	38,  // 38: api.v0alpha.Selector.holiday:type_name -> api.v0alpha.HolidayExp
	42,  // 39: api.v0alpha.Selector.date:type_name -> api.v0alpha.DateExp
	47,  // 40: api.v0alpha.Selector.meta:type_name -> api.v0alpha.MetaFieldExp
	48,  // 41: api.v0alpha.Selector.plugin:type_name -> api.v0alpha.PluginExp
	140, // 42: api.v0alpha.HolidayExp.month:type_name -> api.commons.Month
	141, // 43: api.v0alpha.WeekdayExp.day:type_name -> api.commons.Weekday.Enum
	140, // 44: api.v0alpha.MonthExp.month:type_name -> api.commons.Month
	140, // 45: api.v0alpha.DateExp.month:type_name -> api.commons.Month
	142, // 46: api.v0alpha.PhoneTypeExp.phone_type:type_name -> api.commons.PhoneType
	143, // 47: api.v0alpha.PluginExp.type:type_name -> api.commons.PluginType
	144, // 48: api.v0alpha.PluginExp.env:type_name -> api.commons.Environment
	145, // 49: api.v0alpha.PluginExp.absent_action:type_name -> api.commons.ConsentAbsentAction
	134, // 50: api.v0alpha.ProcessScrubListUploadReq.content_type:type_name -> api.commons.ContentType
	61,  // 51: api.v0alpha.Scenario.should_allow:type_name -> api.v0alpha.ScenarioData
	61,  // 52: api.v0alpha.Scenario.should_deny:type_name -> api.v0alpha.ScenarioData
	72,  // 53: api.v0alpha.Scenario.last_execution_result:type_name -> api.v0alpha.ScenarioResult
	136, // 54: api.v0alpha.ScenarioData.comm_type:type_name -> api.commons.CommType
	131, // 55: api.v0alpha.ScenarioData.call_metadata:type_name -> api.v0alpha.ScenarioData.CallMetadataEntry
	133, // 56: api.v0alpha.ScenarioData.time_of_call:type_name -> google.protobuf.Timestamp
	142, // 57: api.v0alpha.ScenarioData.phone_type:type_name -> api.commons.PhoneType
	59,  // 58: api.v0alpha.ScenarioData.country_code_data:type_name -> api.v0alpha.CountryCode
	61,  // 59: api.v0alpha.CreateScenarioReq.should_allow:type_name -> api.v0alpha.ScenarioData
	61,  // 60: api.v0alpha.CreateScenarioReq.should_deny:type_name -> api.v0alpha.ScenarioData
	60,  // 61: api.v0alpha.CreateScenarioRes.scenario:type_name -> api.v0alpha.Scenario
	60,  // 62: api.v0alpha.GetScenarioRes.scenario:type_name -> api.v0alpha.Scenario
	60,  // 63: api.v0alpha.UpdateScenarioReq.scenario:type_name -> api.v0alpha.Scenario
	60,  // 64: api.v0alpha.UpdateScenarioRes.scenario:type_name -> api.v0alpha.Scenario
	72,  // 65: api.v0alpha.RunAssignedScenariosRes.results:type_name -> api.v0alpha.ScenarioResult
	73,  // 66: api.v0alpha.ScenarioResult.should_allow_responses:type_name -> api.v0alpha.ScenarioRuleResponse
	73,  // 67: api.v0alpha.ScenarioResult.should_deny_responses:type_name -> api.v0alpha.ScenarioRuleResponse
	60,  // 68: api.v0alpha.ListAllScenariosRes.scenarios:type_name -> api.v0alpha.Scenario
	35,  // 69: api.v0alpha.ListAssignedRuleSetsRes.rule_sets:type_name -> api.v0alpha.RuleSet
	60,  // 70: api.v0alpha.AssignedScenario.scenario:type_name -> api.v0alpha.Scenario
	72,  // 71: api.v0alpha.AssignedScenario.last_execution_result:type_name -> api.v0alpha.ScenarioResult
	79,  // 72: api.v0alpha.ListAssignedScenariosRes.assigned_scenarios:type_name -> api.v0alpha.AssignedScenario
	60,  // 73: api.v0alpha.ListUnassignedScenariosRes.scenarios:type_name -> api.v0alpha.Scenario
	136, // 74: api.v0alpha.CreateConsentProfileReq.channel:type_name -> api.commons.CommType
	133, // 75: api.v0alpha.CreateConsentReq.recorded:type_name -> google.protobuf.Timestamp
	133, // 76: api.v0alpha.CreateConsentReq.expire:type_name -> google.protobuf.Timestamp
	136, // 77: api.v0alpha.CreateConsentReq.channel:type_name -> api.commons.CommType
	141, // 78: api.v0alpha.CreateConsentReq.condition_days_of_the_week:type_name -> api.commons.Weekday.Enum
	133, // 79: api.v0alpha.CreateConsentReq.condition_from:type_name -> google.protobuf.Timestamp
	133, // 80: api.v0alpha.CreateConsentReq.condition_to:type_name -> google.protobuf.Timestamp
	94,  // 81: api.v0alpha.CreateConsentReq.conditions:type_name -> api.v0alpha.ConsentCondition
	134, // 82: api.v0alpha.CreateConsentReq.content_type:type_name -> api.commons.ContentType
	146, // 83: api.v0alpha.CreateConsentReq.channel_type:type_name -> api.commons.Channel
	93,  // 84: api.v0alpha.ConsentProfile.consents:type_name -> api.v0alpha.Consent
	136, // 85: api.v0alpha.ConsentProfile.channel:type_name -> api.commons.CommType
	133, // 86: api.v0alpha.ConsentProfile.created_on:type_name -> google.protobuf.Timestamp
	133, // 87: api.v0alpha.Consent.deleted_on:type_name -> google.protobuf.Timestamp
	133, // 88: api.v0alpha.Consent.recorded:type_name -> google.protobuf.Timestamp
	133, // 89: api.v0alpha.Consent.revoked:type_name -> google.protobuf.Timestamp
	133, // 90: api.v0alpha.Consent.expire:type_name -> google.protobuf.Timestamp
	136, // 91: api.v0alpha.Consent.channel:type_name -> api.commons.CommType
	141, // 92: api.v0alpha.Consent.condition_days_of_the_week:type_name -> api.commons.Weekday.Enum
	133, // 93: api.v0alpha.Consent.condition_from:type_name -> google.protobuf.Timestamp
	133, // 94: api.v0alpha.Consent.condition_to:type_name -> google.protobuf.Timestamp
	94,  // 95: api.v0alpha.Consent.conditions:type_name -> api.v0alpha.ConsentCondition
	134, // 96: api.v0alpha.Consent.content_type:type_name -> api.commons.ContentType
	146, // 97: api.v0alpha.Consent.channel_type:type_name -> api.commons.Channel
	141, // 98: api.v0alpha.ConsentCondition.days_of_the_week:type_name -> api.commons.Weekday.Enum
	133, // 99: api.v0alpha.ConsentCondition.from_date:type_name -> google.protobuf.Timestamp
	133, // 100: api.v0alpha.ConsentCondition.to_date:type_name -> google.protobuf.Timestamp
	133, // 101: api.v0alpha.UpdateConsentReq.recorded:type_name -> google.protobuf.Timestamp
	133, // 102: api.v0alpha.UpdateConsentReq.revoked:type_name -> google.protobuf.Timestamp
	133, // 103: api.v0alpha.UpdateConsentReq.expire:type_name -> google.protobuf.Timestamp
	136, // 104: api.v0alpha.UpdateConsentReq.channel:type_name -> api.commons.CommType
	141, // 105: api.v0alpha.UpdateConsentReq.condition_days_of_the_week:type_name -> api.commons.Weekday.Enum
	133, // 106: api.v0alpha.UpdateConsentReq.condition_from:type_name -> google.protobuf.Timestamp
	133, // 107: api.v0alpha.UpdateConsentReq.condition_to:type_name -> google.protobuf.Timestamp
	94,  // 108: api.v0alpha.UpdateConsentReq.conditions:type_name -> api.v0alpha.ConsentCondition
	134, // 109: api.v0alpha.UpdateConsentReq.content_type:type_name -> api.commons.ContentType
	146, // 110: api.v0alpha.UpdateConsentReq.channel_type:type_name -> api.commons.Channel
	133, // 111: api.v0alpha.ExpireConsentReq.expire:type_name -> google.protobuf.Timestamp
	133, // 112: api.v0alpha.RevokeConsentReq.revoked:type_name -> google.protobuf.Timestamp
	146, // 113: api.v0alpha.RevokeConsentReq.channel_type:type_name -> api.commons.Channel
	134, // 114: api.v0alpha.RevokeConsentReq.content_type:type_name -> api.commons.ContentType
	136, // 115: api.v0alpha.ListConsentProfile.channel:type_name -> api.commons.CommType
	102, // 116: api.v0alpha.ListConsentProfilesRes.consent_profiles:type_name -> api.v0alpha.ListConsentProfile
	115, // 117: api.v0alpha.ListConsentTopicsRes.topics:type_name -> api.v0alpha.ConsentTopic
	133, // 118: api.v0alpha.ConsentByContent.revoked:type_name -> google.protobuf.Timestamp
	133, // 119: api.v0alpha.ConsentByContent.expire:type_name -> google.protobuf.Timestamp
	136, // 120: api.v0alpha.ConsentByContent.channel:type_name -> api.commons.CommType
	141, // 121: api.v0alpha.ConsentByContent.condition_days_of_the_week:type_name -> api.commons.Weekday.Enum
	133, // 122: api.v0alpha.ConsentByContent.condition_from:type_name -> google.protobuf.Timestamp
	133, // 123: api.v0alpha.ConsentByContent.condition_to:type_name -> google.protobuf.Timestamp
	134, // 124: api.v0alpha.ConsentByContent.content_type:type_name -> api.commons.ContentType
	94,  // 125: api.v0alpha.ConsentByContent.conditions:type_name -> api.v0alpha.ConsentCondition
	146, // 126: api.v0alpha.ConsentByContent.channel_type:type_name -> api.commons.Channel
	121, // 127: api.v0alpha.SearchConsentByContentRes.consents:type_name -> api.v0alpha.ConsentByContent
	134, // 128: api.v0alpha.GetConsentByProfileAndContentReq.content_type:type_name -> api.commons.ContentType
	133, // 129: api.v0alpha.GetConsentByProfileAndContentRes.revoked:type_name -> google.protobuf.Timestamp
	133, // 130: api.v0alpha.GetConsentByProfileAndContentRes.expire:type_name -> google.protobuf.Timestamp
	136, // 131: api.v0alpha.GetConsentByProfileAndContentRes.channel:type_name -> api.commons.CommType
	141, // 132: api.v0alpha.GetConsentByProfileAndContentRes.condition_days_of_the_week:type_name -> api.commons.Weekday.Enum
	133, // 133: api.v0alpha.GetConsentByProfileAndContentRes.condition_from:type_name -> google.protobuf.Timestamp
	133, // 134: api.v0alpha.GetConsentByProfileAndContentRes.condition_to:type_name -> google.protobuf.Timestamp
	134, // 135: api.v0alpha.GetConsentByProfileAndContentRes.content_type:type_name -> api.commons.ContentType
	94,  // 136: api.v0alpha.GetConsentByProfileAndContentRes.conditions:type_name -> api.v0alpha.ConsentCondition
	146, // 137: api.v0alpha.GetConsentByProfileAndContentRes.channel_type:type_name -> api.commons.Channel
	146, // 138: api.v0alpha.GetConsentByContentReq.channel_type:type_name -> api.commons.Channel
	93,  // 139: api.v0alpha.GetConsentByContentRes.consent:type_name -> api.v0alpha.Consent
	133, // 140: api.v0alpha.ProcessConsentListDeleteUploadMeta.time_started:type_name -> google.protobuf.Timestamp
	17,  // 141: api.v0alpha.Compliance.RuleAutoComplete:input_type -> api.v0alpha.RuleAutoCompleteReq
	19,  // 142: api.v0alpha.Compliance.CheckRuleSet:input_type -> api.v0alpha.CheckRuleSetReq
	25,  // 143: api.v0alpha.Compliance.AssignRuleSet:input_type -> api.v0alpha.AssignRuleSetReq
	21,  // 144: api.v0alpha.Compliance.ListRuleSets:input_type -> api.v0alpha.ListRuleSetsReq
	23,  // 145: api.v0alpha.Compliance.GetRuleSet:input_type -> api.v0alpha.GetRuleSetReq
	24,  // 146: api.v0alpha.Compliance.GetRuleSetByName:input_type -> api.v0alpha.GetRuleSetByNameReq
	29,  // 147: api.v0alpha.Compliance.CreateRuleSet:input_type -> api.v0alpha.CreateRuleSetReq
	27,  // 148: api.v0alpha.Compliance.RenameRuleSet:input_type -> api.v0alpha.RenameRuleSetReq
	30,  // 149: api.v0alpha.Compliance.EnableRuleSet:input_type -> api.v0alpha.EnableRuleSetReq
	31,  // 150: api.v0alpha.Compliance.DisableRuleSet:input_type -> api.v0alpha.DisableRuleSetReq
	5,   // 151: api.v0alpha.Compliance.CreateScrubList:input_type -> api.v0alpha.CreateScrubListReq
	6,   // 152: api.v0alpha.Compliance.AddScrubListEntries:input_type -> api.v0alpha.AddScrubListEntriesReq
	7,   // 153: api.v0alpha.Compliance.UpdateScrubEntry:input_type -> api.v0alpha.UpdateScrubEntryReq
	9,   // 154: api.v0alpha.Compliance.DeleteScrubListEntries:input_type -> api.v0alpha.DeleteScrubListEntriesReq
	10,  // 155: api.v0alpha.Compliance.GetScrubList:input_type -> api.v0alpha.GetScrubListReq
	14,  // 156: api.v0alpha.Compliance.DeleteScrubList:input_type -> api.v0alpha.DeleteScrubListReq
	49,  // 157: api.v0alpha.Compliance.GetDefaultRules:input_type -> api.v0alpha.GetDefaultRulesReq
	11,  // 158: api.v0alpha.Compliance.GetScrubLists:input_type -> api.v0alpha.GetScrubListsReq
	15,  // 159: api.v0alpha.Compliance.SearchScrubList:input_type -> api.v0alpha.SearchScrubListReq
	51,  // 160: api.v0alpha.Compliance.GetScrubListUploadUrl:input_type -> api.v0alpha.GetScrubListUploadUrlReq
	53,  // 161: api.v0alpha.Compliance.ProcessScrubListUpload:input_type -> api.v0alpha.ProcessScrubListUploadReq
	55,  // 162: api.v0alpha.Compliance.ProcessScrubListDeleteUpload:input_type -> api.v0alpha.ProcessScrubListDeleteUploadReq
	57,  // 163: api.v0alpha.Compliance.ExportScrubList:input_type -> api.v0alpha.ExportScrubListReq
	112, // 164: api.v0alpha.Compliance.PurgeScrubList:input_type -> api.v0alpha.PurgeScrubListReq
	62,  // 165: api.v0alpha.Compliance.CreateScenario:input_type -> api.v0alpha.CreateScenarioReq
	64,  // 166: api.v0alpha.Compliance.GetScenario:input_type -> api.v0alpha.GetScenarioReq
	66,  // 167: api.v0alpha.Compliance.UpdateScenario:input_type -> api.v0alpha.UpdateScenarioReq
	68,  // 168: api.v0alpha.Compliance.DeleteScenario:input_type -> api.v0alpha.DeleteScenarioReq
	70,  // 169: api.v0alpha.Compliance.RunAssignedScenarios:input_type -> api.v0alpha.RunAssignedScenariosReq
	74,  // 170: api.v0alpha.Compliance.ListAllScenarios:input_type -> api.v0alpha.ListAllScenariosReq
	81,  // 171: api.v0alpha.Compliance.ListUnassignedScenarios:input_type -> api.v0alpha.ListUnassignedScenariosReq
	76,  // 172: api.v0alpha.Compliance.ListAssignedRuleSets:input_type -> api.v0alpha.ListAssignedRuleSetsReq
	78,  // 173: api.v0alpha.Compliance.ListAssignedScenarios:input_type -> api.v0alpha.ListAssignedScenariosReq
	83,  // 174: api.v0alpha.Compliance.AssignScenario:input_type -> api.v0alpha.AssignScenarioReq
	84,  // 175: api.v0alpha.Compliance.UnassignScenario:input_type -> api.v0alpha.UnassignScenarioReq
	85,  // 176: api.v0alpha.Compliance.EnableScenario:input_type -> api.v0alpha.EnableScenarioReq
	86,  // 177: api.v0alpha.Compliance.DisableScenario:input_type -> api.v0alpha.DisableScenarioReq
	109, // 178: api.v0alpha.Compliance.GetFieldNames:input_type -> api.v0alpha.GetFieldNamesReq
	111, // 179: api.v0alpha.Compliance.GetResultDescriptions:input_type -> api.v0alpha.GetResultDescriptionsReq
	87,  // 180: api.v0alpha.Compliance.CreateConsentProfile:input_type -> api.v0alpha.CreateConsentProfileReq
	90,  // 181: api.v0alpha.Compliance.CreateConsent:input_type -> api.v0alpha.CreateConsentReq
	95,  // 182: api.v0alpha.Compliance.GetConsentProfile:input_type -> api.v0alpha.GetConsentProfileReq
	89,  // 183: api.v0alpha.Compliance.GetConsent:input_type -> api.v0alpha.GetConsentReq
	123, // 184: api.v0alpha.Compliance.GetConsentByProfileAndContent:input_type -> api.v0alpha.GetConsentByProfileAndContentReq
	125, // 185: api.v0alpha.Compliance.GetConsentByContent:input_type -> api.v0alpha.GetConsentByContentReq
	120, // 186: api.v0alpha.Compliance.SearchConsentByContent:input_type -> api.v0alpha.SearchConsentByContentReq
	96,  // 187: api.v0alpha.Compliance.UpdateConsent:input_type -> api.v0alpha.UpdateConsentReq
	97,  // 188: api.v0alpha.Compliance.ExpireConsent:input_type -> api.v0alpha.ExpireConsentReq
	98,  // 189: api.v0alpha.Compliance.RevokeConsent:input_type -> api.v0alpha.RevokeConsentReq
	106, // 190: api.v0alpha.Compliance.DeleteConsent:input_type -> api.v0alpha.DeleteConsentReq
	127, // 191: api.v0alpha.Compliance.ProcessConsentListDeleteUpload:input_type -> api.v0alpha.ProcessConsentListDeleteUploadReq
	99,  // 192: api.v0alpha.Compliance.EnableConsentProfile:input_type -> api.v0alpha.EnableConsentProfileReq
	100, // 193: api.v0alpha.Compliance.DisableConsentProfile:input_type -> api.v0alpha.DisableConsentProfileReq
	101, // 194: api.v0alpha.Compliance.ListConsentProfiles:input_type -> api.v0alpha.ListConsentProfilesReq
	104, // 195: api.v0alpha.Compliance.GetConsentUploadUrl:input_type -> api.v0alpha.GetConsentUploadUrlReq
	107, // 196: api.v0alpha.Compliance.ProcessConsentUpload:input_type -> api.v0alpha.ProcessConsentUploadReq
	116, // 197: api.v0alpha.Compliance.ListConsentTopics:input_type -> api.v0alpha.ListConsentTopicsReq
	118, // 198: api.v0alpha.Compliance.GetConsentTopic:input_type -> api.v0alpha.GetConsentTopicReq
	115, // 199: api.v0alpha.Compliance.CreateConsentTopic:input_type -> api.v0alpha.ConsentTopic
	115, // 200: api.v0alpha.Compliance.DeleteConsentTopic:input_type -> api.v0alpha.ConsentTopic
	119, // 201: api.v0alpha.Compliance.UpdateConsentTopic:input_type -> api.v0alpha.UpdateConsentTopicReq
	0,   // 202: api.v0alpha.Compliance.ProcessOutboundCall:input_type -> api.v0alpha.ProcessOutboundCallReq
	18,  // 203: api.v0alpha.Compliance.RuleAutoComplete:output_type -> api.v0alpha.RuleAutoCompleteRes
	20,  // 204: api.v0alpha.Compliance.CheckRuleSet:output_type -> api.v0alpha.CheckRuleSetRes
	26,  // 205: api.v0alpha.Compliance.AssignRuleSet:output_type -> api.v0alpha.AssignRuleSetRes
	22,  // 206: api.v0alpha.Compliance.ListRuleSets:output_type -> api.v0alpha.ListRuleSetsRes
	35,  // 207: api.v0alpha.Compliance.GetRuleSet:output_type -> api.v0alpha.RuleSet
	35,  // 208: api.v0alpha.Compliance.GetRuleSetByName:output_type -> api.v0alpha.RuleSet
	35,  // 209: api.v0alpha.Compliance.CreateRuleSet:output_type -> api.v0alpha.RuleSet
	28,  // 210: api.v0alpha.Compliance.RenameRuleSet:output_type -> api.v0alpha.RenameRuleSetRes
	32,  // 211: api.v0alpha.Compliance.EnableRuleSet:output_type -> api.v0alpha.EnableRuleSetRes
	33,  // 212: api.v0alpha.Compliance.DisableRuleSet:output_type -> api.v0alpha.DisableRuleSetRes
	13,  // 213: api.v0alpha.Compliance.CreateScrubList:output_type -> api.v0alpha.ScrubListRes
	13,  // 214: api.v0alpha.Compliance.AddScrubListEntries:output_type -> api.v0alpha.ScrubListRes
	8,   // 215: api.v0alpha.Compliance.UpdateScrubEntry:output_type -> api.v0alpha.UpdateScrubEntryRes
	13,  // 216: api.v0alpha.Compliance.DeleteScrubListEntries:output_type -> api.v0alpha.ScrubListRes
	13,  // 217: api.v0alpha.Compliance.GetScrubList:output_type -> api.v0alpha.ScrubListRes
	13,  // 218: api.v0alpha.Compliance.DeleteScrubList:output_type -> api.v0alpha.ScrubListRes
	50,  // 219: api.v0alpha.Compliance.GetDefaultRules:output_type -> api.v0alpha.GetDefaultRulesRes
	12,  // 220: api.v0alpha.Compliance.GetScrubLists:output_type -> api.v0alpha.ScrubListsRes
	3,   // 221: api.v0alpha.Compliance.SearchScrubList:output_type -> api.v0alpha.ScrubList
	52,  // 222: api.v0alpha.Compliance.GetScrubListUploadUrl:output_type -> api.v0alpha.GetScrubListUploadUrlRes
	147, // 223: api.v0alpha.Compliance.ProcessScrubListUpload:output_type -> google.longrunning.Operation
	147, // 224: api.v0alpha.Compliance.ProcessScrubListDeleteUpload:output_type -> google.longrunning.Operation
	58,  // 225: api.v0alpha.Compliance.ExportScrubList:output_type -> api.v0alpha.ExportScrubListRes
	113, // 226: api.v0alpha.Compliance.PurgeScrubList:output_type -> api.v0alpha.PurgeScrubListRes
	63,  // 227: api.v0alpha.Compliance.CreateScenario:output_type -> api.v0alpha.CreateScenarioRes
	65,  // 228: api.v0alpha.Compliance.GetScenario:output_type -> api.v0alpha.GetScenarioRes
	67,  // 229: api.v0alpha.Compliance.UpdateScenario:output_type -> api.v0alpha.UpdateScenarioRes
	69,  // 230: api.v0alpha.Compliance.DeleteScenario:output_type -> api.v0alpha.DeleteScenarioRes
	71,  // 231: api.v0alpha.Compliance.RunAssignedScenarios:output_type -> api.v0alpha.RunAssignedScenariosRes
	75,  // 232: api.v0alpha.Compliance.ListAllScenarios:output_type -> api.v0alpha.ListAllScenariosRes
	82,  // 233: api.v0alpha.Compliance.ListUnassignedScenarios:output_type -> api.v0alpha.ListUnassignedScenariosRes
	77,  // 234: api.v0alpha.Compliance.ListAssignedRuleSets:output_type -> api.v0alpha.ListAssignedRuleSetsRes
	80,  // 235: api.v0alpha.Compliance.ListAssignedScenarios:output_type -> api.v0alpha.ListAssignedScenariosRes
	148, // 236: api.v0alpha.Compliance.AssignScenario:output_type -> google.protobuf.Empty
	148, // 237: api.v0alpha.Compliance.UnassignScenario:output_type -> google.protobuf.Empty
	148, // 238: api.v0alpha.Compliance.EnableScenario:output_type -> google.protobuf.Empty
	148, // 239: api.v0alpha.Compliance.DisableScenario:output_type -> google.protobuf.Empty
	110, // 240: api.v0alpha.Compliance.GetFieldNames:output_type -> api.v0alpha.FieldNames
	110, // 241: api.v0alpha.Compliance.GetResultDescriptions:output_type -> api.v0alpha.FieldNames
	88,  // 242: api.v0alpha.Compliance.CreateConsentProfile:output_type -> api.v0alpha.CreateConsentProfileRes
	91,  // 243: api.v0alpha.Compliance.CreateConsent:output_type -> api.v0alpha.CreateConsentRes
	92,  // 244: api.v0alpha.Compliance.GetConsentProfile:output_type -> api.v0alpha.ConsentProfile
	93,  // 245: api.v0alpha.Compliance.GetConsent:output_type -> api.v0alpha.Consent
	124, // 246: api.v0alpha.Compliance.GetConsentByProfileAndContent:output_type -> api.v0alpha.GetConsentByProfileAndContentRes
	126, // 247: api.v0alpha.Compliance.GetConsentByContent:output_type -> api.v0alpha.GetConsentByContentRes
	122, // 248: api.v0alpha.Compliance.SearchConsentByContent:output_type -> api.v0alpha.SearchConsentByContentRes
	148, // 249: api.v0alpha.Compliance.UpdateConsent:output_type -> google.protobuf.Empty
	148, // 250: api.v0alpha.Compliance.ExpireConsent:output_type -> google.protobuf.Empty
	148, // 251: api.v0alpha.Compliance.RevokeConsent:output_type -> google.protobuf.Empty
	148, // 252: api.v0alpha.Compliance.DeleteConsent:output_type -> google.protobuf.Empty
	147, // 253: api.v0alpha.Compliance.ProcessConsentListDeleteUpload:output_type -> google.longrunning.Operation
	148, // 254: api.v0alpha.Compliance.EnableConsentProfile:output_type -> google.protobuf.Empty
	148, // 255: api.v0alpha.Compliance.DisableConsentProfile:output_type -> google.protobuf.Empty
	103, // 256: api.v0alpha.Compliance.ListConsentProfiles:output_type -> api.v0alpha.ListConsentProfilesRes
	105, // 257: api.v0alpha.Compliance.GetConsentUploadUrl:output_type -> api.v0alpha.GetConsentUploadUrlRes
	147, // 258: api.v0alpha.Compliance.ProcessConsentUpload:output_type -> google.longrunning.Operation
	117, // 259: api.v0alpha.Compliance.ListConsentTopics:output_type -> api.v0alpha.ListConsentTopicsRes
	115, // 260: api.v0alpha.Compliance.GetConsentTopic:output_type -> api.v0alpha.ConsentTopic
	114, // 261: api.v0alpha.Compliance.CreateConsentTopic:output_type -> api.v0alpha.Empty
	114, // 262: api.v0alpha.Compliance.DeleteConsentTopic:output_type -> api.v0alpha.Empty
	114, // 263: api.v0alpha.Compliance.UpdateConsentTopic:output_type -> api.v0alpha.Empty
	2,   // 264: api.v0alpha.Compliance.ProcessOutboundCall:output_type -> api.v0alpha.ProcessRes
	203, // [203:265] is the sub-list for method output_type
	141, // [141:203] is the sub-list for method input_type
	141, // [141:141] is the sub-list for extension type_name
	141, // [141:141] is the sub-list for extension extendee
	0,   // [0:141] is the sub-list for field type_name
}

func init() { file_api_v0alpha_compliance_proto_init() }
func file_api_v0alpha_compliance_proto_init() {
	if File_api_v0alpha_compliance_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v0alpha_compliance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessOutboundCallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScrubList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScrubEntryDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateScrubListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddScrubListEntriesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateScrubEntryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateScrubEntryRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteScrubListEntriesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScrubListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScrubListsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScrubListsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScrubListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteScrubListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchScrubListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScrubEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleAutoCompleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleAutoCompleteRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRuleSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRuleSetRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRuleSetsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRuleSetsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRuleSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRuleSetByNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignRuleSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignRuleSetRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameRuleSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameRuleSetRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRuleSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableRuleSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableRuleSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableRuleSetRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableRuleSetRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluationResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Selector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HolidayExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeekdayExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnclExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrequencyExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhoneTypeExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaFieldExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultRulesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultRulesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScrubListUploadUrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScrubListUploadUrlRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessScrubListUploadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessScrubListUploadRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessScrubListDeleteUploadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessScrubListDeleteUploadRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportScrubListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportScrubListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scenario); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenarioData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateScenarioReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateScenarioRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScenarioReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScenarioRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateScenarioReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateScenarioRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteScenarioReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteScenarioRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunAssignedScenariosReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunAssignedScenariosRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenarioResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenarioRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllScenariosReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllScenariosRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssignedRuleSetsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssignedRuleSetsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssignedScenariosReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedScenario); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssignedScenariosRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUnassignedScenariosReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUnassignedScenariosRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignScenarioReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnassignScenarioReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableScenarioReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableScenarioReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConsentProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConsentProfileRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConsentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConsentRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Consent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsentProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConsentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpireConsentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeConsentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableConsentProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableConsentProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConsentProfilesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConsentProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConsentProfilesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsentUploadUrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsentUploadUrlRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConsentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessConsentUploadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessConsentUploadRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFieldNamesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResultDescriptionsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeScrubListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeScrubListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConsentTopicsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConsentTopicsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsentTopicReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConsentTopicReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchConsentByContentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentByContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchConsentByContentRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsentByProfileAndContentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsentByProfileAndContentRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsentByContentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsentByContentRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessConsentListDeleteUploadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessConsentListDeleteUploadRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0alpha_compliance_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessConsentListDeleteUploadMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v0alpha_compliance_proto_msgTypes[37].OneofWrappers = []interface{}{
		(*Selector_Time)(nil),
		(*Selector_Week)(nil),
		(*Selector_Dncl)(nil),
		(*Selector_Frequency)(nil),
		(*Selector_Location)(nil),
		(*Selector_PhoneType)(nil),
		(*Selector_Month)(nil),
		(*Selector_Holiday)(nil),
		(*Selector_Date)(nil),
		(*Selector_Meta)(nil),
		(*Selector_Plugin)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v0alpha_compliance_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   132,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v0alpha_compliance_proto_goTypes,
		DependencyIndexes: file_api_v0alpha_compliance_proto_depIdxs,
		MessageInfos:      file_api_v0alpha_compliance_proto_msgTypes,
	}.Build()
	File_api_v0alpha_compliance_proto = out.File
	file_api_v0alpha_compliance_proto_rawDesc = nil
	file_api_v0alpha_compliance_proto_goTypes = nil
	file_api_v0alpha_compliance_proto_depIdxs = nil
}
