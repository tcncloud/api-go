// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v0alpha/org.proto

package v0alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Org_RegisterOrganization_FullMethodName                          = "/api.v0alpha.Org/RegisterOrganization"
	Org_ConvertOrgToManual_FullMethodName                            = "/api.v0alpha.Org/ConvertOrgToManual"
	Org_UpdateOrganization_FullMethodName                            = "/api.v0alpha.Org/UpdateOrganization"
	Org_ArchiveOrganization_FullMethodName                           = "/api.v0alpha.Org/ArchiveOrganization"
	Org_UnArchiveOrganization_FullMethodName                         = "/api.v0alpha.Org/UnArchiveOrganization"
	Org_ListArchivedOrganizations_FullMethodName                     = "/api.v0alpha.Org/ListArchivedOrganizations"
	Org_GetOrganizationProfile_FullMethodName                        = "/api.v0alpha.Org/GetOrganizationProfile"
	Org_GetOrganizationProfileById_FullMethodName                    = "/api.v0alpha.Org/GetOrganizationProfileById"
	Org_ListOrganizationDescriptions_FullMethodName                  = "/api.v0alpha.Org/ListOrganizationDescriptions"
	Org_ListRegionalOrganizations_FullMethodName                     = "/api.v0alpha.Org/ListRegionalOrganizations"
	Org_UpdateP3OwningOrg_FullMethodName                             = "/api.v0alpha.Org/UpdateP3OwningOrg"
	Org_GetP3OwningOrg_FullMethodName                                = "/api.v0alpha.Org/GetP3OwningOrg"
	Org_ListOrganizationUserDescriptions_FullMethodName              = "/api.v0alpha.Org/ListOrganizationUserDescriptions"
	Org_AdminListUserDescriptions_FullMethodName                     = "/api.v0alpha.Org/AdminListUserDescriptions"
	Org_ListUserDescriptions_FullMethodName                          = "/api.v0alpha.Org/ListUserDescriptions"
	Org_GetUserDirectory_FullMethodName                              = "/api.v0alpha.Org/GetUserDirectory"
	Org_GetRegions_FullMethodName                                    = "/api.v0alpha.Org/GetRegions"
	Org_GetMyUserDetails_FullMethodName                              = "/api.v0alpha.Org/GetMyUserDetails"
	Org_GetUserDetails_FullMethodName                                = "/api.v0alpha.Org/GetUserDetails"
	Org_AdminGetUserDetails_FullMethodName                           = "/api.v0alpha.Org/AdminGetUserDetails"
	Org_GetAgentUsers_FullMethodName                                 = "/api.v0alpha.Org/GetAgentUsers"
	Org_GetAgentSettings_FullMethodName                              = "/api.v0alpha.Org/GetAgentSettings"
	Org_GetAgentProfileGroup_FullMethodName                          = "/api.v0alpha.Org/GetAgentProfileGroup"
	Org_UpdateAgentProfileGroup_FullMethodName                       = "/api.v0alpha.Org/UpdateAgentProfileGroup"
	Org_CreateAgentProfileGroup_FullMethodName                       = "/api.v0alpha.Org/CreateAgentProfileGroup"
	Org_ListAgentProfileGroups_FullMethodName                        = "/api.v0alpha.Org/ListAgentProfileGroups"
	Org_DeleteAgentProfileGroup_FullMethodName                       = "/api.v0alpha.Org/DeleteAgentProfileGroup"
	Org_AssignAgentProfileGroups_FullMethodName                      = "/api.v0alpha.Org/AssignAgentProfileGroups"
	Org_UpdateUser_FullMethodName                                    = "/api.v0alpha.Org/UpdateUser"
	Org_UpdateMyUser_FullMethodName                                  = "/api.v0alpha.Org/UpdateMyUser"
	Org_UpdateUserCallerId_FullMethodName                            = "/api.v0alpha.Org/UpdateUserCallerId"
	Org_CreateUser_FullMethodName                                    = "/api.v0alpha.Org/CreateUser"
	Org_CreateUserByOrgId_FullMethodName                             = "/api.v0alpha.Org/CreateUserByOrgId"
	Org_CreateDelegatedUser_FullMethodName                           = "/api.v0alpha.Org/CreateDelegatedUser"
	Org_UpdateUserPassword_FullMethodName                            = "/api.v0alpha.Org/UpdateUserPassword"
	Org_UpdateMyUserPassword_FullMethodName                          = "/api.v0alpha.Org/UpdateMyUserPassword"
	Org_UpdateUserPasswordByOrgId_FullMethodName                     = "/api.v0alpha.Org/UpdateUserPasswordByOrgId"
	Org_ResetUserRequirePasswordReset_FullMethodName                 = "/api.v0alpha.Org/ResetUserRequirePasswordReset"
	Org_GetUserPasswordResetLink_FullMethodName                      = "/api.v0alpha.Org/GetUserPasswordResetLink"
	Org_GetMyUserPasswordResetLink_FullMethodName                    = "/api.v0alpha.Org/GetMyUserPasswordResetLink"
	Org_GetUserPasswordResetLinkByOrgId_FullMethodName               = "/api.v0alpha.Org/GetUserPasswordResetLinkByOrgId"
	Org_GetUserEmailVerified_FullMethodName                          = "/api.v0alpha.Org/GetUserEmailVerified"
	Org_GetUserEmailVerifiedByOrgId_FullMethodName                   = "/api.v0alpha.Org/GetUserEmailVerifiedByOrgId"
	Org_SendUserVerificationEmailByOrgId_FullMethodName              = "/api.v0alpha.Org/SendUserVerificationEmailByOrgId"
	Org_SendUserVerificationEmail_FullMethodName                     = "/api.v0alpha.Org/SendUserVerificationEmail"
	Org_ManualUserEmailVerificationByOrgId_FullMethodName            = "/api.v0alpha.Org/ManualUserEmailVerificationByOrgId"
	Org_ManualUserEmailVerification_FullMethodName                   = "/api.v0alpha.Org/ManualUserEmailVerification"
	Org_GetTempUserToken_FullMethodName                              = "/api.v0alpha.Org/GetTempUserToken"
	Org_GetTempUserTokenByUserId_FullMethodName                      = "/api.v0alpha.Org/GetTempUserTokenByUserId"
	Org_GetCountriesList_FullMethodName                              = "/api.v0alpha.Org/GetCountriesList"
	Org_GetAdminClientPreferences_FullMethodName                     = "/api.v0alpha.Org/GetAdminClientPreferences"
	Org_UpdateAdminClientPreferences_FullMethodName                  = "/api.v0alpha.Org/UpdateAdminClientPreferences"
	Org_GetPermissions_FullMethodName                                = "/api.v0alpha.Org/GetPermissions"
	Org_RevokeAccountOwnerPermissionFromUser_FullMethodName          = "/api.v0alpha.Org/RevokeAccountOwnerPermissionFromUser"
	Org_UpdateUserDisabled_FullMethodName                            = "/api.v0alpha.Org/UpdateUserDisabled"
	Org_UpdateUserDisabledByOrgId_FullMethodName                     = "/api.v0alpha.Org/UpdateUserDisabledByOrgId"
	Org_UpdateBulkUsersDisabled_FullMethodName                       = "/api.v0alpha.Org/UpdateBulkUsersDisabled"
	Org_GetOrgBillingSettingsByOrgId_FullMethodName                  = "/api.v0alpha.Org/GetOrgBillingSettingsByOrgId"
	Org_GetOrgBillingSettings_FullMethodName                         = "/api.v0alpha.Org/GetOrgBillingSettings"
	Org_SetOrgBillingSettings_FullMethodName                         = "/api.v0alpha.Org/SetOrgBillingSettings"
	Org_AddOrgBillingOverride_FullMethodName                         = "/api.v0alpha.Org/AddOrgBillingOverride"
	Org_RemoveOrgBillingOverride_FullMethodName                      = "/api.v0alpha.Org/RemoveOrgBillingOverride"
	Org_GetSystemDefaultBillingRates_FullMethodName                  = "/api.v0alpha.Org/GetSystemDefaultBillingRates"
	Org_ListPermissionGroupsByOrgId_FullMethodName                   = "/api.v0alpha.Org/ListPermissionGroupsByOrgId"
	Org_ListPermissionGroups_FullMethodName                          = "/api.v0alpha.Org/ListPermissionGroups"
	Org_CreatePermissionGroup_FullMethodName                         = "/api.v0alpha.Org/CreatePermissionGroup"
	Org_UpdatePermissionGroup_FullMethodName                         = "/api.v0alpha.Org/UpdatePermissionGroup"
	Org_DeletePermissionGroup_FullMethodName                         = "/api.v0alpha.Org/DeletePermissionGroup"
	Org_AssignUserToAccountOwnerPermissionGroup_FullMethodName       = "/api.v0alpha.Org/AssignUserToAccountOwnerPermissionGroup"
	Org_AssignUserPermissionGroup_FullMethodName                     = "/api.v0alpha.Org/AssignUserPermissionGroup"
	Org_AssignUsersPermissionGroup_FullMethodName                    = "/api.v0alpha.Org/AssignUsersPermissionGroup"
	Org_UpdateUserNeoPermissionGroups_FullMethodName                 = "/api.v0alpha.Org/UpdateUserNeoPermissionGroups"
	Org_RevokeUserPermissionGroup_FullMethodName                     = "/api.v0alpha.Org/RevokeUserPermissionGroup"
	Org_RevokeUsersPermissionGroup_FullMethodName                    = "/api.v0alpha.Org/RevokeUsersPermissionGroup"
	Org_InitDefaultPermissionGroups_FullMethodName                   = "/api.v0alpha.Org/InitDefaultPermissionGroups"
	Org_AddPermissionToAccountOwnerPermissionGroup_FullMethodName    = "/api.v0alpha.Org/AddPermissionToAccountOwnerPermissionGroup"
	Org_RevokePermissionToAccountOwnerPermissionGroup_FullMethodName = "/api.v0alpha.Org/RevokePermissionToAccountOwnerPermissionGroup"
	Org_AddPermissionToOrgDefaultGroup_FullMethodName                = "/api.v0alpha.Org/AddPermissionToOrgDefaultGroup"
	Org_RemovePermissionFromOrgDefaultGroup_FullMethodName           = "/api.v0alpha.Org/RemovePermissionFromOrgDefaultGroup"
	Org_GetOrgDefaultSuperUserGroup_FullMethodName                   = "/api.v0alpha.Org/GetOrgDefaultSuperUserGroup"
	Org_ListP3PermissionGroupsByOrgId_FullMethodName                 = "/api.v0alpha.Org/ListP3PermissionGroupsByOrgId"
	Org_ListP3PermissionGroups_FullMethodName                        = "/api.v0alpha.Org/ListP3PermissionGroups"
	Org_AddUserRegion_FullMethodName                                 = "/api.v0alpha.Org/AddUserRegion"
	Org_RemoveUserRegion_FullMethodName                              = "/api.v0alpha.Org/RemoveUserRegion"
	Org_CreateP3PermissionGroup_FullMethodName                       = "/api.v0alpha.Org/CreateP3PermissionGroup"
	Org_UpdateP3PermissionGroupByOrgId_FullMethodName                = "/api.v0alpha.Org/UpdateP3PermissionGroupByOrgId"
	Org_UpdateP3PermissionGroup_FullMethodName                       = "/api.v0alpha.Org/UpdateP3PermissionGroup"
	Org_DeleteP3PermissionGroup_FullMethodName                       = "/api.v0alpha.Org/DeleteP3PermissionGroup"
	Org_AssignUsersP3PermissionGroup_FullMethodName                  = "/api.v0alpha.Org/AssignUsersP3PermissionGroup"
	Org_AddLoginToUser_FullMethodName                                = "/api.v0alpha.Org/AddLoginToUser"
	Org_RevokeUsersP3PermissionGroup_FullMethodName                  = "/api.v0alpha.Org/RevokeUsersP3PermissionGroup"
	Org_GetContactPreferences_FullMethodName                         = "/api.v0alpha.Org/GetContactPreferences"
	Org_UpdateContactPreferences_FullMethodName                      = "/api.v0alpha.Org/UpdateContactPreferences"
	Org_GetCompliancePreferences_FullMethodName                      = "/api.v0alpha.Org/GetCompliancePreferences"
	Org_UpdateCompliancePreferences_FullMethodName                   = "/api.v0alpha.Org/UpdateCompliancePreferences"
	Org_GetAgentPreferences_FullMethodName                           = "/api.v0alpha.Org/GetAgentPreferences"
	Org_UpdateAgentPreferences_FullMethodName                        = "/api.v0alpha.Org/UpdateAgentPreferences"
	Org_GetOrganizationPreferences_FullMethodName                    = "/api.v0alpha.Org/GetOrganizationPreferences"
	Org_UpdateOrganizationPreferences_FullMethodName                 = "/api.v0alpha.Org/UpdateOrganizationPreferences"
	Org_GetSchedulePreferences_FullMethodName                        = "/api.v0alpha.Org/GetSchedulePreferences"
	Org_UpdateSchedulePreferences_FullMethodName                     = "/api.v0alpha.Org/UpdateSchedulePreferences"
	Org_GetBusinessPreferences_FullMethodName                        = "/api.v0alpha.Org/GetBusinessPreferences"
	Org_UpdateBusinessPreferences_FullMethodName                     = "/api.v0alpha.Org/UpdateBusinessPreferences"
	Org_GetEndOfDayPreferences_FullMethodName                        = "/api.v0alpha.Org/GetEndOfDayPreferences"
	Org_UpdateEndOfDayPreferences_FullMethodName                     = "/api.v0alpha.Org/UpdateEndOfDayPreferences"
	Org_GetReportFilterPreferences_FullMethodName                    = "/api.v0alpha.Org/GetReportFilterPreferences"
	Org_UpdateReportFilterPreferences_FullMethodName                 = "/api.v0alpha.Org/UpdateReportFilterPreferences"
	Org_GetPhonePreferences_FullMethodName                           = "/api.v0alpha.Org/GetPhonePreferences"
	Org_UpdatePhonePreferences_FullMethodName                        = "/api.v0alpha.Org/UpdatePhonePreferences"
	Org_GetDashboardGeneralPreferences_FullMethodName                = "/api.v0alpha.Org/GetDashboardGeneralPreferences"
	Org_UpdateDashboardGeneralPreferences_FullMethodName             = "/api.v0alpha.Org/UpdateDashboardGeneralPreferences"
	Org_GetWebhookPreferences_FullMethodName                         = "/api.v0alpha.Org/GetWebhookPreferences"
	Org_UpdateWebhookPreferences_FullMethodName                      = "/api.v0alpha.Org/UpdateWebhookPreferences"
	Org_GetBroadcastPreferences_FullMethodName                       = "/api.v0alpha.Org/GetBroadcastPreferences"
	Org_UpdateBroadcastPreferences_FullMethodName                    = "/api.v0alpha.Org/UpdateBroadcastPreferences"
	Org_GetAuthenticationPreferences_FullMethodName                  = "/api.v0alpha.Org/GetAuthenticationPreferences"
	Org_UpdateAuthenticationPreferences_FullMethodName               = "/api.v0alpha.Org/UpdateAuthenticationPreferences"
	Org_GetRecordingPreferences_FullMethodName                       = "/api.v0alpha.Org/GetRecordingPreferences"
	Org_UpdateRecordingPreferences_FullMethodName                    = "/api.v0alpha.Org/UpdateRecordingPreferences"
	Org_GetDashboardQueuePreferences_FullMethodName                  = "/api.v0alpha.Org/GetDashboardQueuePreferences"
	Org_UpdateDashboardQueuePreferences_FullMethodName               = "/api.v0alpha.Org/UpdateDashboardQueuePreferences"
	Org_GetAgentQuickViewPreferences_FullMethodName                  = "/api.v0alpha.Org/GetAgentQuickViewPreferences"
	Org_GetVoiceAnalyticsPreferences_FullMethodName                  = "/api.v0alpha.Org/GetVoiceAnalyticsPreferences"
	Org_UpdateVoiceAnalyticsPreferences_FullMethodName               = "/api.v0alpha.Org/UpdateVoiceAnalyticsPreferences"
	Org_UpdateVoiceAnalyticsPreferencesEnabled_FullMethodName        = "/api.v0alpha.Org/UpdateVoiceAnalyticsPreferencesEnabled"
	Org_GetScorecardsPreferences_FullMethodName                      = "/api.v0alpha.Org/GetScorecardsPreferences"
	Org_UpdateScorecardsPreferences_FullMethodName                   = "/api.v0alpha.Org/UpdateScorecardsPreferences"
	Org_GetEmailSmsPreferences_FullMethodName                        = "/api.v0alpha.Org/GetEmailSmsPreferences"
	Org_UpdateEmailSmsPreferences_FullMethodName                     = "/api.v0alpha.Org/UpdateEmailSmsPreferences"
	Org_EditAgentQuickViewPreferences_FullMethodName                 = "/api.v0alpha.Org/EditAgentQuickViewPreferences"
	Org_EditBackofficeThemePreference_FullMethodName                 = "/api.v0alpha.Org/EditBackofficeThemePreference"
	Org_GetBackofficeThemePreference_FullMethodName                  = "/api.v0alpha.Org/GetBackofficeThemePreference"
	Org_AcceptLinkbackRecordingTerms_FullMethodName                  = "/api.v0alpha.Org/AcceptLinkbackRecordingTerms"
	Org_LinkbackUpdateBroadcastTemplates_FullMethodName              = "/api.v0alpha.Org/LinkbackUpdateBroadcastTemplates"
	Org_RecordEmailUnsubscribeAcknowledgement_FullMethodName         = "/api.v0alpha.Org/RecordEmailUnsubscribeAcknowledgement"
	Org_ClearEmailUnsubscribeAcknowledgement_FullMethodName          = "/api.v0alpha.Org/ClearEmailUnsubscribeAcknowledgement"
	Org_CreateWebLinkTemplate_FullMethodName                         = "/api.v0alpha.Org/CreateWebLinkTemplate"
	Org_ListWebLinkTemplates_FullMethodName                          = "/api.v0alpha.Org/ListWebLinkTemplates"
	Org_GetWebLinkTemplate_FullMethodName                            = "/api.v0alpha.Org/GetWebLinkTemplate"
	Org_UpdateWebLinkTemplate_FullMethodName                         = "/api.v0alpha.Org/UpdateWebLinkTemplate"
	Org_DeleteWebLinkTemplate_FullMethodName                         = "/api.v0alpha.Org/DeleteWebLinkTemplate"
	Org_CreateAgentTriggerTemplate_FullMethodName                    = "/api.v0alpha.Org/CreateAgentTriggerTemplate"
	Org_ListAgentTriggerTemplates_FullMethodName                     = "/api.v0alpha.Org/ListAgentTriggerTemplates"
	Org_GetAgentTriggerTemplate_FullMethodName                       = "/api.v0alpha.Org/GetAgentTriggerTemplate"
	Org_UpdateAgentTriggerTemplate_FullMethodName                    = "/api.v0alpha.Org/UpdateAgentTriggerTemplate"
	Org_DeleteAgentTriggerTemplate_FullMethodName                    = "/api.v0alpha.Org/DeleteAgentTriggerTemplate"
	Org_CreateClientInfoDisplayTemplate_FullMethodName               = "/api.v0alpha.Org/CreateClientInfoDisplayTemplate"
	Org_ListClientInfoDisplayTemplates_FullMethodName                = "/api.v0alpha.Org/ListClientInfoDisplayTemplates"
	Org_UpdateClientInfoDisplayTemplate_FullMethodName               = "/api.v0alpha.Org/UpdateClientInfoDisplayTemplate"
	Org_DeleteClientInfoDisplayTemplate_FullMethodName               = "/api.v0alpha.Org/DeleteClientInfoDisplayTemplate"
	Org_GetClientInfoDisplayTemplate_FullMethodName                  = "/api.v0alpha.Org/GetClientInfoDisplayTemplate"
	Org_ListAgentPauseCodes_FullMethodName                           = "/api.v0alpha.Org/ListAgentPauseCodes"
	Org_CreateAgentPauseCode_FullMethodName                          = "/api.v0alpha.Org/CreateAgentPauseCode"
	Org_UpdateAgentPauseCode_FullMethodName                          = "/api.v0alpha.Org/UpdateAgentPauseCode"
	Org_DeleteAgentPauseCode_FullMethodName                          = "/api.v0alpha.Org/DeleteAgentPauseCode"
	Org_ListCustomReportFilters_FullMethodName                       = "/api.v0alpha.Org/ListCustomReportFilters"
	Org_CreateCustomReportFilter_FullMethodName                      = "/api.v0alpha.Org/CreateCustomReportFilter"
	Org_UpdateCustomReportFilter_FullMethodName                      = "/api.v0alpha.Org/UpdateCustomReportFilter"
	Org_DeleteCustomReportFilter_FullMethodName                      = "/api.v0alpha.Org/DeleteCustomReportFilter"
	Org_ListAgentResponseGroups_FullMethodName                       = "/api.v0alpha.Org/ListAgentResponseGroups"
	Org_ListLastTemplateElements_FullMethodName                      = "/api.v0alpha.Org/ListLastTemplateElements"
	Org_ListQueueConfigs_FullMethodName                              = "/api.v0alpha.Org/ListQueueConfigs"
	Org_ListQueueConfigsByOrgId_FullMethodName                       = "/api.v0alpha.Org/ListQueueConfigsByOrgId"
	Org_DeleteQueueConfig_FullMethodName                             = "/api.v0alpha.Org/DeleteQueueConfig"
	Org_GetQueueConfig_FullMethodName                                = "/api.v0alpha.Org/GetQueueConfig"
	Org_CreateQueueConfig_FullMethodName                             = "/api.v0alpha.Org/CreateQueueConfig"
	Org_UpdateQueueConfig_FullMethodName                             = "/api.v0alpha.Org/UpdateQueueConfig"
	Org_CopyQueueConfig_FullMethodName                               = "/api.v0alpha.Org/CopyQueueConfig"
	Org_GetAllQueueConfigSounds_FullMethodName                       = "/api.v0alpha.Org/GetAllQueueConfigSounds"
	Org_GetQueueConfigSound_FullMethodName                           = "/api.v0alpha.Org/GetQueueConfigSound"
	Org_SetQueueConfigSound_FullMethodName                           = "/api.v0alpha.Org/SetQueueConfigSound"
	Org_SetAllQueueConfigSoundsFromSource_FullMethodName             = "/api.v0alpha.Org/SetAllQueueConfigSoundsFromSource"
	Org_GetUserBlocked_FullMethodName                                = "/api.v0alpha.Org/GetUserBlocked"
	Org_UnblockUser_FullMethodName                                   = "/api.v0alpha.Org/UnblockUser"
	Org_ListP3UnMigratedUsers_FullMethodName                         = "/api.v0alpha.Org/ListP3UnMigratedUsers"
	Org_MigrateP3User_FullMethodName                                 = "/api.v0alpha.Org/MigrateP3User"
	Org_UpdateP3UserName_FullMethodName                              = "/api.v0alpha.Org/UpdateP3UserName"
	Org_ListOwnedUsers_FullMethodName                                = "/api.v0alpha.Org/ListOwnedUsers"
	Org_ListOwnedOrgsByOrgId_FullMethodName                          = "/api.v0alpha.Org/ListOwnedOrgsByOrgId"
	Org_ListOwnedOrgs_FullMethodName                                 = "/api.v0alpha.Org/ListOwnedOrgs"
	Org_RemoveLoginStrikes_FullMethodName                            = "/api.v0alpha.Org/RemoveLoginStrikes"
	Org_RemoveUserLoginStrikes_FullMethodName                        = "/api.v0alpha.Org/RemoveUserLoginStrikes"
	Org_ListLoginHistory_FullMethodName                              = "/api.v0alpha.Org/ListLoginHistory"
	Org_UpdateP3UserSids_FullMethodName                              = "/api.v0alpha.Org/UpdateP3UserSids"
	Org_CreateAuthConnection_FullMethodName                          = "/api.v0alpha.Org/CreateAuthConnection"
	Org_GetAuthConnectionSettings_FullMethodName                     = "/api.v0alpha.Org/GetAuthConnectionSettings"
	Org_UpdateAuthConnectionSettings_FullMethodName                  = "/api.v0alpha.Org/UpdateAuthConnectionSettings"
	Org_DeleteAuthConnection_FullMethodName                          = "/api.v0alpha.Org/DeleteAuthConnection"
	Org_GetUserSubscription_FullMethodName                           = "/api.v0alpha.Org/GetUserSubscription"
	Org_GetMyUserSubscription_FullMethodName                         = "/api.v0alpha.Org/GetMyUserSubscription"
	Org_AddUserSubscription_FullMethodName                           = "/api.v0alpha.Org/AddUserSubscription"
	Org_AddMyUserSubscription_FullMethodName                         = "/api.v0alpha.Org/AddMyUserSubscription"
	Org_RemoveUserSubscription_FullMethodName                        = "/api.v0alpha.Org/RemoveUserSubscription"
	Org_RemoveMyUserSubscription_FullMethodName                      = "/api.v0alpha.Org/RemoveMyUserSubscription"
	Org_UpdateUserSubscription_FullMethodName                        = "/api.v0alpha.Org/UpdateUserSubscription"
	Org_UpdateMyUserSubscription_FullMethodName                      = "/api.v0alpha.Org/UpdateMyUserSubscription"
	Org_ListUserSubscriptions_FullMethodName                         = "/api.v0alpha.Org/ListUserSubscriptions"
	Org_ListMyUserSubscriptions_FullMethodName                       = "/api.v0alpha.Org/ListMyUserSubscriptions"
	Org_ListOrgSubscriptions_FullMethodName                          = "/api.v0alpha.Org/ListOrgSubscriptions"
	Org_GetSystemEnvironmentDetails_FullMethodName                   = "/api.v0alpha.Org/GetSystemEnvironmentDetails"
	Org_ListAgentStatisticsTemplates_FullMethodName                  = "/api.v0alpha.Org/ListAgentStatisticsTemplates"
	Org_CreateAgentStatisticsTemplate_FullMethodName                 = "/api.v0alpha.Org/CreateAgentStatisticsTemplate"
	Org_UpdateAgentStatisticsTemplate_FullMethodName                 = "/api.v0alpha.Org/UpdateAgentStatisticsTemplate"
	Org_DeleteAgentStatisticsTemplate_FullMethodName                 = "/api.v0alpha.Org/DeleteAgentStatisticsTemplate"
)

// OrgClient is the client API for Org service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrgClient interface {
	// Registers a new organization
	RegisterOrganization(ctx context.Context, in *RegisterOrganizationRequest, opts ...grpc.CallOption) (*RegisterOrganizationResponse, error)
	// Converts a standard organiztion to a manual one.
	// WARNING: this process cannot be reversed.
	ConvertOrgToManual(ctx context.Context, in *ConvertOrgToManualRequest, opts ...grpc.CallOption) (*ConvertOrgToManualResponse, error)
	// Updates an organization
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error)
	// Archives an organization. An archived organization effectively disappears, but isn't deleted.
	ArchiveOrganization(ctx context.Context, in *ArchiveOrganizationRequest, opts ...grpc.CallOption) (*ArchiveOrganizationResponse, error)
	// Restores an archived organization.
	UnArchiveOrganization(ctx context.Context, in *UnArchiveOrganizationRequest, opts ...grpc.CallOption) (*UnArchiveOrganizationResponse, error)
	// Returns the list of organizations that have been archived.
	ListArchivedOrganizations(ctx context.Context, in *ListArchivedOrganizationsRequest, opts ...grpc.CallOption) (*ListArchivedOrganizationsResponse, error)
	GetOrganizationProfile(ctx context.Context, in *GetOrganizationProfileRequest, opts ...grpc.CallOption) (*GetOrganizationProfileResponse, error)
	GetOrganizationProfileById(ctx context.Context, in *GetOrganizationProfileByIdRequest, opts ...grpc.CallOption) (*GetOrganizationProfileResponse, error)
	ListOrganizationDescriptions(ctx context.Context, in *ListOrganizationDescriptionsRequest, opts ...grpc.CallOption) (*ListOrganizationDescriptionsResponse, error)
	ListRegionalOrganizations(ctx context.Context, in *ListRegionalOrganizationsRequest, opts ...grpc.CallOption) (*ListRegionalOrganizationsResponse, error)
	// update an organizations owning organization.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	UpdateP3OwningOrg(ctx context.Context, in *UpdateP3OwningOrgRequest, opts ...grpc.CallOption) (*UpdateP3OwningOrgResponse, error)
	// gets the owning organiztion for the given org
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	GetP3OwningOrg(ctx context.Context, in *GetP3OwningOrgRequest, opts ...grpc.CallOption) (*GetP3OwningOrgResponse, error)
	ListOrganizationUserDescriptions(ctx context.Context, in *ListOrganizationUserDescriptionsRequest, opts ...grpc.CallOption) (*ListOrganizationUserDescriptionsResponse, error)
	AdminListUserDescriptions(ctx context.Context, in *AdminListUserDescriptionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AdminListUserDescriptionsResponse], error)
	ListUserDescriptions(ctx context.Context, in *ListUserDescriptionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListUserDescriptionsResponse], error)
	GetUserDirectory(ctx context.Context, in *GetUserDirectoryRequest, opts ...grpc.CallOption) (*GetUserDirectoryResponse, error)
	// GetRegions takes nothing in the request and returns a list of all region names
	GetRegions(ctx context.Context, in *GetRegionsRequest, opts ...grpc.CallOption) (*GetRegionsResponse, error)
	GetMyUserDetails(ctx context.Context, in *GetMyUserDetailsRequest, opts ...grpc.CallOption) (*UserDetails, error)
	GetUserDetails(ctx context.Context, in *GetUserDetailsRequest, opts ...grpc.CallOption) (*UserDetails, error)
	AdminGetUserDetails(ctx context.Context, in *AdminGetUserDetailsRequest, opts ...grpc.CallOption) (*UserDetails, error)
	GetAgentUsers(ctx context.Context, in *GetAgentUsersRequest, opts ...grpc.CallOption) (*GetAgentUsersResponse, error)
	// This is transitionary api. It will be removed when user api is available.
	// GetAgentSettings gets some agent settings as defined by the GetAgentSettingsRequest.
	// Required Permissions:
	// AGENT
	GetAgentSettings(ctx context.Context, in *GetAgentSettingsRequest, opts ...grpc.CallOption) (*GetAgentSettingsResponse, error)
	// GetAgentProfileGroup gets a single AgentProfileGroup by given ID
	// Required Permissions:
	// ORG_VIEW
	GetAgentProfileGroup(ctx context.Context, in *GetAgentProfileGroupRequest, opts ...grpc.CallOption) (*GetAgentProfileGroupResponse, error)
	// UpdateAgentProfileGroup updates an AgentProfileGroup. Can only update if user is in same org as AgentProfileGroup
	// Required Permissions:
	// ORG_EDIT
	UpdateAgentProfileGroup(ctx context.Context, in *UpdateAgentProfileGroupRequest, opts ...grpc.CallOption) (*UpdateAgentProfileGroupResponse, error)
	// CreateAgentProfileGroup creates an AgentProfileGroup. Can only create if user is in same org as AgentProfileGroup
	// Required Permissions:
	// ORG_EDIT
	CreateAgentProfileGroup(ctx context.Context, in *CreateAgentProfileGroupRequest, opts ...grpc.CallOption) (*CreateAgentProfileGroupResponse, error)
	// ListAgentProfileGroups lists all AgentProfileGroups for a given org
	// Required Permissions:
	// ORG_VIEW
	ListAgentProfileGroups(ctx context.Context, in *ListAgentProfileGroupsRequest, opts ...grpc.CallOption) (*ListAgentProfileGroupsResponse, error)
	// DeleteAgentProfileGroup deletes a single AgentProfileGroup by given ID. Can only delete if user is in same org as AgentProfileGroup
	// Required Permissions:
	// ORG_EDIT
	DeleteAgentProfileGroup(ctx context.Context, in *DeleteAgentProfileGroupRequest, opts ...grpc.CallOption) (*DeleteAgentProfileGroupResponse, error)
	// AssignAgentProfileGroups bulk assigns a list of users to a given AgentProfileGroup
	// Required Permissions:
	// ORG_EDIT
	AssignAgentProfileGroups(ctx context.Context, in *AssignAgentProfileGroupsRequest, opts ...grpc.CallOption) (*AssignAgentProfileGroupsResponse, error)
	// UpdateUser updates a user as defined by the UpdateUserRequest.
	// Required Permissions: USER_EDIT (default)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// UpdateMyUser updates the currently logged in user as defined by the UpdateMyUserRequest.
	// Required Permissions: USER_EDIT_OPTIONS
	// Only some of the fields on the request message can be updated
	// for the currently logged in user: time_zone, linkback_numbers,
	// caller_ids, and default_app.
	UpdateMyUser(ctx context.Context, in *UpdateMyUserRequest, opts ...grpc.CallOption) (*UpdateMyUserResponse, error)
	// UpdateUserCallerId updates a user's caller id as defined by the UpdateUserCallerIdRequest.
	// Required Permissions: USER_EDIT_AGENT_CALLER_ID
	UpdateUserCallerId(ctx context.Context, in *UpdateUserCallerIdRequest, opts ...grpc.CallOption) (*UpdateUserCallerIdResponse, error)
	// CreateUser creates a new user as defined by the CreateUserRequest
	// request message.
	// Required Permissions: USER_CREATE
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// CreateUserByOrgId creates a new user as defined by the CreateUserByOrgIdRequest
	// request message to a specific org.
	// Required Permissions: CUSTOMER_SUPPORT
	CreateUserByOrgId(ctx context.Context, in *CreateUserByOrgIdRequest, opts ...grpc.CallOption) (*CreateUserByOrgIdResponse, error)
	// Creates a delegated user. This should only be called by an auth0 action.
	CreateDelegatedUser(ctx context.Context, in *CreateDelegatedUserRequest, opts ...grpc.CallOption) (*CreateDelegatedUserResponse, error)
	// UpdateUserPassword updates a user's password (in the same org as the current user)
	// to the password given on the request message.
	// Required Permissions: USER_EDIT (Update another user's password in the same org)
	UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*UpdateUserPasswordResponse, error)
	// UpdateMyUserPassword updates the current user's password to the
	// password given on the request message.
	// Required Permissions: USER_EDIT_PASSWORD (Update your own password)
	UpdateMyUserPassword(ctx context.Context, in *UpdateMyUserPasswordRequest, opts ...grpc.CallOption) (*UpdateMyUserPasswordResponse, error)
	// UpdateUserPasswordByOrgId updates a specific user's password
	// from a specific org to the password given on the request message.
	// Required Permissions: CUSTOMER_SUPPORT (Update a user's password from an org)
	UpdateUserPasswordByOrgId(ctx context.Context, in *UpdateUserPasswordByOrgIdRequest, opts ...grpc.CallOption) (*UpdateUserPasswordByOrgIdResponse, error)
	// updates the users PasswordResetRequired field to false.
	// this should only be called by an auth0 action.
	ResetUserRequirePasswordReset(ctx context.Context, in *ResetUserRequirePasswordResetRequest, opts ...grpc.CallOption) (*ResetUserRequirePasswordResetResponse, error)
	// GetUserPasswordResetLink generates a password reset link for a user
	// in the same org as the current user.
	// Required Permissions: USER_EDIT
	//
	//	USER_EDIT if user_id given on the request.
	GetUserPasswordResetLink(ctx context.Context, in *GetUserPasswordResetLinkRequest, opts ...grpc.CallOption) (*GetUserPasswordResetLinkResponse, error)
	// GetMyUserPasswordResetLink generate a password reset link for the current user.
	// Required Permissions: USER_EDIT_PASSWORD
	GetMyUserPasswordResetLink(ctx context.Context, in *GetMyUserPasswordResetLinkRequest, opts ...grpc.CallOption) (*GetMyUserPasswordResetLinkResponse, error)
	// GetUserPasswordResetLinkByOrgId generates a password reset link
	// for a specific user in a specific org.
	// Required Permissions: CUSTOMER_SUPPORT
	GetUserPasswordResetLinkByOrgId(ctx context.Context, in *GetUserPasswordResetLinkByOrgIdRequest, opts ...grpc.CallOption) (*GetUserPasswordResetLinkByOrgIdResponse, error)
	// Returns whether or not the given user's email is verified.
	// Required Permissions: USER_EDIT
	GetUserEmailVerified(ctx context.Context, in *GetUserEmailVerifiedRequest, opts ...grpc.CallOption) (*GetUserEmailVerifiedResponse, error)
	// GetUserEmailVerifiedByOrgId returns whether or not the given user's email
	// from a specific org is verified.
	// Required Permissions: CUSTOMER_SUPPORT
	GetUserEmailVerifiedByOrgId(ctx context.Context, in *GetUserEmailVerifiedByOrgIdRequest, opts ...grpc.CallOption) (*GetUserEmailVerifiedByOrgIdResponse, error)
	// Sends a verfication email to the given users email.
	SendUserVerificationEmailByOrgId(ctx context.Context, in *SendUserVerificationEmailByOrgIdRequest, opts ...grpc.CallOption) (*SendUserVerificationEmailByOrgIdResponse, error)
	// Sends a verfication email to the given users email.
	SendUserVerificationEmail(ctx context.Context, in *SendUserVerificationEmailRequest, opts ...grpc.CallOption) (*SendUserVerificationEmailResponse, error)
	// Sets the given user's to verified without needing to send a verification email.
	ManualUserEmailVerificationByOrgId(ctx context.Context, in *ManualUserEmailVerificationByOrgIdRequest, opts ...grpc.CallOption) (*ManualUserEmailVerificationByOrgIdResponse, error)
	// Sets the given user's to verified without needing to send a verification email.
	ManualUserEmailVerification(ctx context.Context, in *ManualUserEmailVerificationRequest, opts ...grpc.CallOption) (*ManualUserEmailVerificationResponse, error)
	// GetTempUserToken authenticates impersonation and generates token
	// to be used for the current user.
	// Required Permissions: None, anyone authorized can use this
	GetTempUserToken(ctx context.Context, in *GetTempUserTokenReq, opts ...grpc.CallOption) (*GetTempUserTokenRes, error)
	// GetTempUserTokenByUserId authenticates impersonation and generates token
	// to be used for the user with the given user_id.
	// Required Permissions: CUSTOMER_SUPPORT
	GetTempUserTokenByUserId(ctx context.Context, in *GetTempUserTokenByUserIdReq, opts ...grpc.CallOption) (*GetTempUserTokenByUserIdRes, error)
	GetCountriesList(ctx context.Context, in *GetCountriesListRequest, opts ...grpc.CallOption) (*GetCountriesListResponse, error)
	GetAdminClientPreferences(ctx context.Context, in *GetAdminClientPreferencesRequest, opts ...grpc.CallOption) (*GetAdminClientPreferencesResponse, error)
	UpdateAdminClientPreferences(ctx context.Context, in *UpdateAdminClientPreferencesRequest, opts ...grpc.CallOption) (*UpdateAdminClientPreferencesResponse, error)
	GetPermissions(ctx context.Context, in *GetPermissionsRequest, opts ...grpc.CallOption) (*GetPermissionsResponse, error)
	// RevokeAccountOwnerPermissionFromUser revokes the
	// account owner permission for the given user
	RevokeAccountOwnerPermissionFromUser(ctx context.Context, in *RevokeAccountOwnerPermissionFromUserRequest, opts ...grpc.CallOption) (*RevokeAccountOwnerPermissionFromUserResponse, error)
	// UpdateUserDisabled updates a specified user to disabled or enabled. A disabled user cannot log in.
	UpdateUserDisabled(ctx context.Context, in *UpdateUserDisabledRequest, opts ...grpc.CallOption) (*UpdateUserDisabledResponse, error)
	// UpdateUserDisabledByOrgId updates a specified user in a specific organization to disabled or enabled.
	UpdateUserDisabledByOrgId(ctx context.Context, in *UpdateUserDisabledByOrgIdRequest, opts ...grpc.CallOption) (*UpdateUserDisabledByOrgIdResponse, error)
	// UpdateBulkUsersDisabled updates every given user_id to be disabled or enabled. The returned list of updated_ids contains every id that was successfully updated.
	// Required Permissions:
	//   - USER_EDIT
	UpdateBulkUsersDisabled(ctx context.Context, in *UpdateBulkUsersDisabledRequest, opts ...grpc.CallOption) (*UpdateBulkUsersDisabledResponse, error)
	// Returns the billing data for the given org. Billing data
	// will only be included for countries present on the org's
	// allowed countries preference.
	// Errors:
	//   - grpc.InvalidArgument: The org_id on the request was invalid.
	//   - grpc.NotFound: The given org_id did not exist.
	//   - grpc.Internal: An unexpected error occurred while getting the orgs billing settings.
	GetOrgBillingSettingsByOrgId(ctx context.Context, in *GetOrgBillingSettingsByOrgIdRequest, opts ...grpc.CallOption) (*GetOrgBillingSettingsByOrgIdResponse, error)
	// Returns the billing data for the current org. Billing data
	// will only be included for countries present on the org's
	// allowed countries preference.
	// Errors:
	//   - grpc.InvalidArgument: The org_id on the request was invalid.
	//   - grpc.NotFound: The given org_id did not exist.
	//   - grpc.Internal: An unexpected error occurred while getting the orgs billing settings.
	GetOrgBillingSettings(ctx context.Context, in *GetOrgBillingSettingsRequest, opts ...grpc.CallOption) (*GetOrgBillingSettingsResponse, error)
	// Updates the given orgs billing settings as defined by the info
	// given on the request message. Only fields that are given on the
	// field mask will be updated.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.InvalidArgument: A field on the request was invalid.
	//   - grpc.NotFound: The given org_id did not exist.
	//   - grpc.Internal: An unexpected error occurred while updating the orgs billing settings.
	SetOrgBillingSettings(ctx context.Context, in *SetOrgBillingSettingsRequest, opts ...grpc.CallOption) (*SetOrgBillingSettingsResponse, error)
	// Adds a single billing region override for the given orgs billing settings.
	// If an override already exists for the given region it will be updated.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.InvalidArgument: A field on the request was invalid.
	//   - grpc.NotFound: The given org_id did not exist.
	//   - grpc.Internal: An unexpected error occurred while adding the override.
	AddOrgBillingOverride(ctx context.Context, in *AddOrgBillingOverrideRequest, opts ...grpc.CallOption) (*AddOrgBillingOverrideResponse, error)
	// Removes a single billing region override for the given orgs billing settings.
	// If the region override doesn't exist the rpcs will just do nothing.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.InvalidArgument: The given org_id was invalid.
	//   - grpc.NotFound: The given org_id did not exist.
	//   - grpc.Internal: An unexpected error occurred while removing the override.
	RemoveOrgBillingOverride(ctx context.Context, in *RemoveOrgBillingOverrideRequest, opts ...grpc.CallOption) (*RemoveOrgBillingOverrideResponse, error)
	// Returns the system default billing rates.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	GetSystemDefaultBillingRates(ctx context.Context, in *GetSystemDefaultBillingRatesRequest, opts ...grpc.CallOption) (*GetSystemDefaultBillingRatesResponse, error)
	// ListPermissionGroupsByOrgId returns the list of an org's permission groups.
	ListPermissionGroupsByOrgId(ctx context.Context, in *ListPermissionGroupsByOrgIdRequest, opts ...grpc.CallOption) (*ListPermissionGroupsByOrgIdResponse, error)
	// ListPermissionGroups returns the list of an org's permission groups.
	ListPermissionGroups(ctx context.Context, in *ListPermissionGroupsRequest, opts ...grpc.CallOption) (*ListPermissionGroupsResponse, error)
	// CreatePermissionGroup creates a new permission group for the caller's organization.
	CreatePermissionGroup(ctx context.Context, in *CreatePermissionGroupRequest, opts ...grpc.CallOption) (*CreatePermissionGroupResponse, error)
	// UpdatePermissionGroup updates a permission group by id for the caller's organization.
	UpdatePermissionGroup(ctx context.Context, in *UpdatePermissionGroupRequest, opts ...grpc.CallOption) (*UpdatePermissionGroupResponse, error)
	// DeletePermissionGroup deletes a permission group by id for the caller's organization.
	DeletePermissionGroup(ctx context.Context, in *DeletePermissionGroupRequest, opts ...grpc.CallOption) (*DeletePermissionGroupResponse, error)
	// Assigns a user to a acount owner permission group.
	AssignUserToAccountOwnerPermissionGroup(ctx context.Context, in *AssignUserToAccountOwnerPermissionGroupRequest, opts ...grpc.CallOption) (*AssignUserToAccountOwnerPermissionGroupResponse, error)
	// Assigns a permission group to another user.
	// Requires that all three of permission group, calling user, and user being assigned to be of the same organization.
	// Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
	AssignUserPermissionGroup(ctx context.Context, in *AssignUserPermissionGroupRequest, opts ...grpc.CallOption) (*AssignUserPermissionGroupResponse, error)
	// Assigns a permission group to multiple users.
	// Requires that all three of permission group, calling user, and user being assigned to be of the same organization.
	// Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
	AssignUsersPermissionGroup(ctx context.Context, in *AssignUsersPermissionGroupRequest, opts ...grpc.CallOption) (*AssignUsersPermissionGroupResponse, error)
	// Assigns permission group(s) to another user.
	// Requires that all three of permission group, calling user, and user being assigned to be of the same organization.
	// Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
	UpdateUserNeoPermissionGroups(ctx context.Context, in *UpdateUserNeoPermissionGroupsRequest, opts ...grpc.CallOption) (*UpdateUserNeoPermissionGroupsResponse, error)
	// Revokes a permission group from another user.
	// Requires that all three of permission group, calling user, and user being revoked to be of the same organization.
	// Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
	RevokeUserPermissionGroup(ctx context.Context, in *RevokeUserPermissionGroupRequest, opts ...grpc.CallOption) (*RevokeUserPermissionGroupResponse, error)
	// Revokes a permission group to multiple users.
	// Requires that all three of permission group, calling user, and user being revoked to be of the same organization.
	// Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
	RevokeUsersPermissionGroup(ctx context.Context, in *RevokeUsersPermissionGroupRequest, opts ...grpc.CallOption) (*RevokeUsersPermissionGroupResponse, error)
	// InitDefaultPermissionGroups initializes the default read only permission groups for the callers organization.
	// Idempotent call. Returns the default permission groups for the organization.
	InitDefaultPermissionGroups(ctx context.Context, in *InitDefaultPermissionGroupsRequest, opts ...grpc.CallOption) (*InitDefaultPermissionGroupsResponse, error)
	// Adds a single permission to an organization's Account Owner Group.
	AddPermissionToAccountOwnerPermissionGroup(ctx context.Context, in *AddPermissionToAccountOwnerPermissionGroupRequest, opts ...grpc.CallOption) (*AddPermissionToAccountOwnerPermissionGroupResponse, error)
	// Adds a single permission to an organization's Account Owner Group.
	RevokePermissionToAccountOwnerPermissionGroup(ctx context.Context, in *RevokePermissionToAccountOwnerPermissionGroupRequest, opts ...grpc.CallOption) (*RevokePermissionToAccountOwnerPermissionGroupResponse, error)
	// Adds a single permission to an organization's default Super User Group.
	// Required Permissions:
	//   - TCN_ADMIN_SETTINGS
	AddPermissionToOrgDefaultGroup(ctx context.Context, in *AddPermissionToOrgDefaultGroupRequest, opts ...grpc.CallOption) (*AddPermissionToOrgDefaultGroupResponse, error)
	// Removes a single permission from an organization's default Super User Group.
	// Required Permissions:
	//   - TCN_ADMIN_SETTINGS
	RemovePermissionFromOrgDefaultGroup(ctx context.Context, in *RemovePermissionFromOrgDefaultGroupRequest, opts ...grpc.CallOption) (*RemovePermissionFromOrgDefaultGroupResponse, error)
	// Returns an organization's default Super User Group.
	// Required Permissions:
	//   - TCN_ADMIN_SETTINGS
	GetOrgDefaultSuperUserGroup(ctx context.Context, in *GetOrgDefaultSuperUserGroupRequest, opts ...grpc.CallOption) (*GetOrgDefaultSuperUserGroupResponse, error)
	// ListP3PermissionGroupsByOrgId returns the list of an org's P3 permission groups.
	ListP3PermissionGroupsByOrgId(ctx context.Context, in *ListP3PermissionGroupsByOrgIdRequest, opts ...grpc.CallOption) (*ListP3PermissionGroupsByOrgIdResponse, error)
	// ListP3PermissionGroups returns the list of an org's P3 permission groups.
	ListP3PermissionGroups(ctx context.Context, in *ListP3PermissionGroupsRequest, opts ...grpc.CallOption) (*ListP3PermissionGroupsResponse, error)
	// AddUserRegion to a Users Accessible Regions
	AddUserRegion(ctx context.Context, in *AddUserRegionRequest, opts ...grpc.CallOption) (*AddUserRegionResponse, error)
	// RemoveUserRegion from a Users Accessible Regions
	RemoveUserRegion(ctx context.Context, in *RemoveUserRegionRequest, opts ...grpc.CallOption) (*RemoveUserRegionResponse, error)
	// Creates new p3 permission group
	CreateP3PermissionGroup(ctx context.Context, in *CreateP3PermissionGroupRequest, opts ...grpc.CallOption) (*CreateP3PermissionGroupResponse, error)
	// Update p3 permission group
	UpdateP3PermissionGroupByOrgId(ctx context.Context, in *UpdateP3PermissionGroupByOrgIdRequest, opts ...grpc.CallOption) (*UpdateP3PermissionGroupByOrgIdResponse, error)
	// Update p3 permission group
	UpdateP3PermissionGroup(ctx context.Context, in *UpdateP3PermissionGroupRequest, opts ...grpc.CallOption) (*UpdateP3PermissionGroupResponse, error)
	// Delete new p3 permission group
	DeleteP3PermissionGroup(ctx context.Context, in *DeleteP3PermissionGroupRequest, opts ...grpc.CallOption) (*DeleteP3PermissionGroupResponse, error)
	// Assign one or many users a p3 permission group
	AssignUsersP3PermissionGroup(ctx context.Context, in *AssignUsersP3PermissionGroupRequest, opts ...grpc.CallOption) (*AssignUsersP3PermissionGroupResponse, error)
	// AddLoginToUser Creates new login for a given user
	AddLoginToUser(ctx context.Context, in *AddLoginToUserRequest, opts ...grpc.CallOption) (*AddLoginToUserResponse, error)
	// Revoke a p3 permission group to another user(s).
	// Requires that permission group and user(s) being assigned to be of the same organization.
	// Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
	RevokeUsersP3PermissionGroup(ctx context.Context, in *RevokeUsersP3PermissionGroupRequest, opts ...grpc.CallOption) (*RevokeUsersP3PermissionGroupResponse, error)
	// GetContactPreferences returns all contact preferences for client TODO: will replace ContactList above
	GetContactPreferences(ctx context.Context, in *GetContactPreferencesRequest, opts ...grpc.CallOption) (*GetContactPreferencesResponse, error)
	// UpdateContactPreferences update fields for all contact preferences for client
	UpdateContactPreferences(ctx context.Context, in *UpdateContactPreferencesRequest, opts ...grpc.CallOption) (*UpdateContactPreferencesResponse, error)
	// Returns all client compliance preferences
	GetCompliancePreferences(ctx context.Context, in *GetCompliancePreferencesRequest, opts ...grpc.CallOption) (*GetCompliancePreferencesResponse, error)
	// Updates all client Compliance preferences
	UpdateCompliancePreferences(ctx context.Context, in *UpdateCompliancePreferencesRequest, opts ...grpc.CallOption) (*UpdateCompliancePreferencesResponse, error)
	// GetAgentPreferences returns all client agent preferences
	GetAgentPreferences(ctx context.Context, in *GetAgentPreferencesRequest, opts ...grpc.CallOption) (*GetAgentPreferencesResponse, error)
	// UpdateAgentPreferences updates client agent preferences
	UpdateAgentPreferences(ctx context.Context, in *UpdateAgentPreferencesRequest, opts ...grpc.CallOption) (*UpdateAgentPreferencesResponse, error)
	// GetOrganizationPreferences returns preferences for the organization tab
	GetOrganizationPreferences(ctx context.Context, in *GetOrganizationPreferencesRequest, opts ...grpc.CallOption) (*GetOrganizationPreferencesResponse, error)
	// UpdateOrganizationPreferences updates preferences for the organization tab
	UpdateOrganizationPreferences(ctx context.Context, in *UpdateOrganizationPreferencesRequest, opts ...grpc.CallOption) (*UpdateOrganizationPreferencesResponse, error)
	// GetSchedulePreferences returns all schedule preferences for an org.
	GetSchedulePreferences(ctx context.Context, in *GetSchedulePreferencesRequest, opts ...grpc.CallOption) (*GetSchedulePreferencesResponse, error)
	// UpdateSchedulePreferences returns all schedule preferences for an org.
	UpdateSchedulePreferences(ctx context.Context, in *UpdateSchedulePreferencesRequest, opts ...grpc.CallOption) (*UpdateSchedulePreferencesResponse, error)
	// GetBusinessPreferences returns all business intelligence and associated analytic preferences
	GetBusinessPreferences(ctx context.Context, in *GetBusinessPreferencesRequest, opts ...grpc.CallOption) (*GetBusinessPreferencesResponse, error)
	// UpdateBusinessPreferences updates all business intelligence and associated analytic preferences
	UpdateBusinessPreferences(ctx context.Context, in *UpdateBusinessPreferencesRequest, opts ...grpc.CallOption) (*UpdateBusinessPreferencesResponse, error)
	// GetEndOfDayPreferences returns a time (hour 1-24) for each day of the week.
	GetEndOfDayPreferences(ctx context.Context, in *GetEndOfDayPreferencesRequest, opts ...grpc.CallOption) (*GetEndOfDayPreferencesResponse, error)
	// UpdateEndOfDayPreferences update fields for a time (hour 1-24) for each day of the week.
	UpdateEndOfDayPreferences(ctx context.Context, in *UpdateEndOfDayPreferencesRequest, opts ...grpc.CallOption) (*UpdateEndOfDayPreferencesResponse, error)
	// GetReportFilterPreferences returns preferences for the organization tab
	GetReportFilterPreferences(ctx context.Context, in *GetFilterPreferencesRequest, opts ...grpc.CallOption) (*GetFilterPreferencesResponse, error)
	// UpdateReportFilterPreferences updates preferences for the filter tab
	UpdateReportFilterPreferences(ctx context.Context, in *UpdateFilterPreferencesRequest, opts ...grpc.CallOption) (*UpdateFilterPreferencesResponse, error)
	// GetPhonePreferences returns all phone and recording preferences for an org.
	GetPhonePreferences(ctx context.Context, in *GetPhonePreferencesRequest, opts ...grpc.CallOption) (*GetPhonePreferencesResponse, error)
	// UpdatePhonePreferences updates phone and recording preferences for an org.
	UpdatePhonePreferences(ctx context.Context, in *UpdatePhonePreferencesRequest, opts ...grpc.CallOption) (*UpdatePhonePreferencesResponse, error)
	// GetDashboardGeneralPreferences returns all dashboard general preferences for an org.
	GetDashboardGeneralPreferences(ctx context.Context, in *GetDashboardGeneralPreferencesRequest, opts ...grpc.CallOption) (*GetDashboardGeneralPreferencesResponse, error)
	// UpdateDashboardGeneralPreferences updates dashboard General preferences for an org.
	UpdateDashboardGeneralPreferences(ctx context.Context, in *UpdateDashboardGeneralPreferencesRequest, opts ...grpc.CallOption) (*UpdateDashboardGeneralPreferencesResponse, error)
	// GetWebhookPreferences returns all webhook preferences for an org.
	GetWebhookPreferences(ctx context.Context, in *GetWebhookPreferencesRequest, opts ...grpc.CallOption) (*GetWebhookPreferencesResponse, error)
	// UpdateWebhookPreferences updates webhook preferences for an org.
	UpdateWebhookPreferences(ctx context.Context, in *UpdateWebhookPreferencesRequest, opts ...grpc.CallOption) (*UpdateWebhookPreferencesResponse, error)
	// GetBroadcastPreferences returns all broadcast options for campaign preferences for an org.
	GetBroadcastPreferences(ctx context.Context, in *GetBroadcastPreferencesRequest, opts ...grpc.CallOption) (*GetBroadcastPreferencesResponse, error)
	// UpdateBroadcastPreferences updates broadcast options for campaign preferences for an org.
	UpdateBroadcastPreferences(ctx context.Context, in *UpdateBroadcastPreferencesRequest, opts ...grpc.CallOption) (*UpdateBroadcastPreferencesResponse, error)
	// GetAuthenticationPreferences returns all authentication options for an org.
	GetAuthenticationPreferences(ctx context.Context, in *GetAuthenticationPreferencesRequest, opts ...grpc.CallOption) (*GetAuthenticationPreferencesResponse, error)
	// UpdateAuthenticationPreferences updates authentication preferences for an org.
	UpdateAuthenticationPreferences(ctx context.Context, in *UpdateAuthenticationPreferencesRequest, opts ...grpc.CallOption) (*UpdateAuthenticationPreferencesResponse, error)
	// GetRecordingPreferences returns all recording options for an org.
	GetRecordingPreferences(ctx context.Context, in *GetRecordingPreferencesRequest, opts ...grpc.CallOption) (*GetRecordingPreferencesResponse, error)
	// UpdateRecordingPreferences updates Recording preferences for an org.
	UpdateRecordingPreferences(ctx context.Context, in *UpdateRecordingPreferencesRequest, opts ...grpc.CallOption) (*UpdateRecordingPreferencesResponse, error)
	// GetDashboardQueuePreferences returns the Dashboard Queue table preferences.
	GetDashboardQueuePreferences(ctx context.Context, in *GetDashboardQueuePreferencesRequest, opts ...grpc.CallOption) (*GetDashboardQueuePreferencesResponse, error)
	// UpdateDashboardQueuePreferences updates the Dashboard Queue table preferences.
	UpdateDashboardQueuePreferences(ctx context.Context, in *UpdateDashboardQueuePreferencesRequest, opts ...grpc.CallOption) (*UpdateDashboardQueuePreferencesResponse, error)
	// GetAgentQuickViewPreferences returns the diplay templates for the client
	GetAgentQuickViewPreferences(ctx context.Context, in *GetAgentQuickViewPreferencesRequest, opts ...grpc.CallOption) (*GetAgentQuickViewPreferencesResponse, error)
	// GetVoiceAnalyticsPreferences returns the all preferences for voice analytics
	GetVoiceAnalyticsPreferences(ctx context.Context, in *GetVoiceAnalyticsPreferencesRequest, opts ...grpc.CallOption) (*GetVoiceAnalyticsPreferencesResponse, error)
	// UpdateVoiceAnalyticsPreferences updates the all preferences except for enabled for voice analytics
	UpdateVoiceAnalyticsPreferences(ctx context.Context, in *UpdateVoiceAnalyticsPreferencesRequest, opts ...grpc.CallOption) (*UpdateVoiceAnalyticsPreferencesResponse, error)
	// UpdateVoiceAnalyticsPreferencesEnabled updates the enabled preferences for voice analytics
	UpdateVoiceAnalyticsPreferencesEnabled(ctx context.Context, in *UpdateVoiceAnalyticsPreferencesEnabledRequest, opts ...grpc.CallOption) (*UpdateVoiceAnalyticsPreferencesEnabledResponse, error)
	// GetScorecardsPreferences returns the all preferences for scorecards
	GetScorecardsPreferences(ctx context.Context, in *GetScorecardsPreferencesRequest, opts ...grpc.CallOption) (*GetScorecardsPreferencesResponse, error)
	// GetScorecardsPreferences updates the all preferences for scorecards
	UpdateScorecardsPreferences(ctx context.Context, in *UpdateScorecardsPreferencesRequest, opts ...grpc.CallOption) (*UpdateScorecardsPreferencesResponse, error)
	// GetEmailSmsPreferences returns the all preferences for email and sms
	GetEmailSmsPreferences(ctx context.Context, in *GetEmailSmsPreferencesRequest, opts ...grpc.CallOption) (*GetEmailSmsPreferencesResponse, error)
	// GetEmailSmsPreferences updates the all preferences for email and sms
	UpdateEmailSmsPreferences(ctx context.Context, in *UpdateEmailSmsPreferencesRequest, opts ...grpc.CallOption) (*UpdateEmailSmsPreferencesResponse, error)
	// EditAgentQuickViewPreferences return nil,error
	EditAgentQuickViewPreferences(ctx context.Context, in *EditAgentQuickViewPreferencesRequest, opts ...grpc.CallOption) (*EditAgentQuickViewPreferencesResponse, error)
	// EditBackofficeThemePreference returns nil, error
	// changes the Client Skin client property
	EditBackofficeThemePreference(ctx context.Context, in *EditBackofficeThemePreferenceRequest, opts ...grpc.CallOption) (*EditBackofficeThemePreferenceResponse, error)
	GetBackofficeThemePreference(ctx context.Context, in *GetBackofficeThemePreferenceRequest, opts ...grpc.CallOption) (*GetBackofficeThemePreferenceResponse, error)
	// AcceptLinkbackRecordingTerms controls acknowledgement for linkback recording terms and conditions
	AcceptLinkbackRecordingTerms(ctx context.Context, in *AcceptLinkbackRecordingTermsRequest, opts ...grpc.CallOption) (*AcceptLinkbackRecordingTermsResponse, error)
	// LinkbackUpdateBroadcastTemplates updates broadcast template action parameters pertaining to linkback recording
	LinkbackUpdateBroadcastTemplates(ctx context.Context, in *LinkbackUpdateBroadcastTemplatesRequest, opts ...grpc.CallOption) (*LinkbackUpdateBroadcastTemplatesResponse, error)
	// RecordEmailUnsubscribeAcknowledgement inserts an activity log when the client acknowledges responsibility
	// for their own email unsubscribe links.
	RecordEmailUnsubscribeAcknowledgement(ctx context.Context, in *RecordEmailUnsubscribeAcknowledgementRequest, opts ...grpc.CallOption) (*RecordEmailUnsubscribeAcknowledgementResponse, error)
	// ClearEmailUnsubscribeAcknowledgement inserts an activity log when the client clears acknowledgement for
	// their own email unsubscribe links.
	ClearEmailUnsubscribeAcknowledgement(ctx context.Context, in *ClearEmailUnsubscribeAcknowledgementRequest, opts ...grpc.CallOption) (*ClearEmailUnsubscribeAcknowledgementResponse, error)
	// Creates a new WebLinkTemplate as defined by request message CreateWebLinkTemplateRequest.
	// Required Permissions:
	//
	//	ORG_EDIT
	CreateWebLinkTemplate(ctx context.Context, in *CreateWebLinkTemplateRequest, opts ...grpc.CallOption) (*CreateWebLinkTemplateResponse, error)
	// List every WebLinkTemplate.
	// Required Permissions:
	//
	//	ORG_VIEW
	ListWebLinkTemplates(ctx context.Context, in *ListWebLinkTemplatesRequest, opts ...grpc.CallOption) (*ListWebLinkTemplatesResponse, error)
	// Get one WebLinkTemplate with the given web_link_template_id.
	// Required Permissions:
	//
	//	ORG_VIEW
	GetWebLinkTemplate(ctx context.Context, in *GetWebLinkTemplateRequest, opts ...grpc.CallOption) (*GetWebLinkTemplateResponse, error)
	// Updates the WebLinkTemplate with the given web_link_template_id.
	// Required Permissions:
	//
	//	ORG_EDIT
	UpdateWebLinkTemplate(ctx context.Context, in *UpdateWebLinkTemplateRequest, opts ...grpc.CallOption) (*UpdateWebLinkTemplateResponse, error)
	// Deletes the WebLinkTemplate with the given web_link_template_id.
	// Required Permissions:
	//
	//	ORG_EDIT
	DeleteWebLinkTemplate(ctx context.Context, in *DeleteWebLinkTemplateRequest, opts ...grpc.CallOption) (*DeleteWebLinkTemplateResponse, error)
	// Creates a new AgentTriggerTemplate as defined by request message CreateAgentTriggerTemplateRequest.
	// The id field on the request message will be generated as part of
	// this method. If the id field is set it WILL be overwritten.
	// Required Permissions:
	//
	//	ORG_EDIT
	CreateAgentTriggerTemplate(ctx context.Context, in *CreateAgentTriggerTemplateRequest, opts ...grpc.CallOption) (*CreateAgentTriggerTemplateResponse, error)
	// Returns a list of every AgentTriggerTemplate for the given
	// hunt_group_sid on the request.
	// Requiree Permissions:
	//
	//	ORG_VIEW
	ListAgentTriggerTemplates(ctx context.Context, in *ListAgentTriggerTemplatesRequest, opts ...grpc.CallOption) (*ListAgentTriggerTemplatesResponse, error)
	// Returns one AgentTriggerTemplate with the id given on the request message.
	// Required Permissions:
	//
	//	ORG_VIEW
	GetAgentTriggerTemplate(ctx context.Context, in *GetAgentTriggerTemplateRequest, opts ...grpc.CallOption) (*GetAgentTriggerTemplateResponse, error)
	// Updates the AgentTriggerTemplate with the id given on the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	UpdateAgentTriggerTemplate(ctx context.Context, in *UpdateAgentTriggerTemplateRequest, opts ...grpc.CallOption) (*UpdateAgentTriggerTemplateResponse, error)
	// Deletes the AgentTriggerTemplate with the id given on the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	DeleteAgentTriggerTemplate(ctx context.Context, in *DeleteAgentTriggerTemplateRequest, opts ...grpc.CallOption) (*DeleteAgentTriggerTemplateResponse, error)
	// Creates a new ClientInfoDisplayTemplate as defined by request
	// message CreateClientInfoDisplayRequest.
	// Required Permissions:
	//
	//	ORG_EDIT
	CreateClientInfoDisplayTemplate(ctx context.Context, in *CreateClientInfoDisplayTemplateRequest, opts ...grpc.CallOption) (*CreateClientInfoDisplayTemplateResponse, error)
	// Returns a list of every ClientInfoDisplayTemplate.
	// Required Permissions:
	//
	//	ORG_EDIT
	ListClientInfoDisplayTemplates(ctx context.Context, in *ListClientInfoDisplayTemplatesRequest, opts ...grpc.CallOption) (*ListClientInfoDisplayTemplatesResponse, error)
	// Updates the ClientInfoDisplayTemplate as defined by request
	// message UpdateClientIntoDisplayTemplateRequest.
	// Required Permissions:
	//
	//	ORG_VIEW
	UpdateClientInfoDisplayTemplate(ctx context.Context, in *UpdateClientInfoDisplayTemplateRequest, opts ...grpc.CallOption) (*UpdateClientInfoDisplayTemplateResponse, error)
	// Deletes the ClientInfoDisplayTemplate with the id given on the request
	// message.
	// Required Permissions:
	//
	//	ORG_EDIT
	DeleteClientInfoDisplayTemplate(ctx context.Context, in *DeleteClientInfoDisplayTemplateRequest, opts ...grpc.CallOption) (*DeleteClientInfoDisplayTemplateResponse, error)
	// Returns one ClientInfoDisplayTemplate with the id given on the
	// request message.
	//
	//	Required Permissions:
	//	  ORG_VIEW
	GetClientInfoDisplayTemplate(ctx context.Context, in *GetClientInfoDisplayTemplateRequest, opts ...grpc.CallOption) (*GetClientInfoDisplayTemplateResponse, error)
	// Returns a slice of agent pause codes.
	ListAgentPauseCodes(ctx context.Context, in *ListAgentPauseCodesRequest, opts ...grpc.CallOption) (*ListAgentPauseCodesResponse, error)
	// Creates a new Agent Pause Code as defined by the request message.
	// Errors:
	//   - grpc.InvalidArgument: The pause_code field was not set, or the the pause_code.codes field is an empty list.
	//   - grpc.Internal: an error occurred while marshalling the pause_code into an xml string.
	CreateAgentPauseCode(ctx context.Context, in *CreateAgentPauseCodeRequest, opts ...grpc.CallOption) (*CreateAgentPauseCodeResponse, error)
	// Updates an Agent Pause Code with the xml_client_property_sid given on
	// the pause_code in the request message as defined by the other fields
	// on the pause_code message.
	// Required Permissions:
	//
	//	AGENT_MANAGEMENT
	//	Actual permission checked is ORG_EDIT??
	//
	// Errors:
	//   - grpc.InvalidArgument: The pause_code field was not set or the pause_code.codes field was an empty list.
	//   - grpc.Internal: an error occurred while marshalling the pause_code into an xml string.
	UpdateAgentPauseCode(ctx context.Context, in *UpdateAgentPauseCodeRequest, opts ...grpc.CallOption) (*UpdateAgentPauseCodeResponse, error)
	// Deletes an Agent Pause Code with the sid given on the request message.
	// Errors:
	//   - grpc.InvalidArgument: The xml_client_property_sid field is invalid.
	DeleteAgentPauseCode(ctx context.Context, in *DeleteAgentPauseCodeRequest, opts ...grpc.CallOption) (*DeleteAgentPauseCodeResponse, error)
	// Returns a slice of custom report filters belonging to client_sid.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.NotFound: There is no entry matching the requested client_sid.
	ListCustomReportFilters(ctx context.Context, in *ListCustomReportFiltersRequest, opts ...grpc.CallOption) (*ListCustomReportFiltersResponse, error)
	// Creates a new custom report filter as defined by the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.InvalidArgument: The custom report filter has an empty name or no filtering parameters.
	//   - grpc.Internal: An error occurred marshalling the custom report filter into an xml string.
	CreateCustomReportFilter(ctx context.Context, in *CreateCustomReportFilterRequest, opts ...grpc.CallOption) (*CreateCustomReportFilterResponse, error)
	// Updates a custom report filter with the requested xml_client_property_sid
	// with the report filter in the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.InvalidArgument: The pause_code field was not set or the pause_code.codes field was an empty list.
	//   - grpc.Internal: an error occurred while marshalling the pause_code into an xml string.
	UpdateCustomReportFilter(ctx context.Context, in *UpdateCustomReportFilterRequest, opts ...grpc.CallOption) (*UpdateCustomReportFilterResponse, error)
	// Deletes a custom report filter with the sid given on the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.InvalidArgument: The xml_client_property_sid field is invalid.
	DeleteCustomReportFilter(ctx context.Context, in *DeleteCustomReportFilterRequest, opts ...grpc.CallOption) (*DeleteCustomReportFilterResponse, error)
	// Returns a slice of hunt group scripts belonging to the client_sid.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.NotFound: There is no entry matching the requested client_sid.
	ListAgentResponseGroups(ctx context.Context, in *ListAgentResponseGroupsRequest, opts ...grpc.CallOption) (*ListAgentResponseGroupsResponse, error)
	// Returns a slice of last template element scripts belonging to the client_sid.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.NotFound: There is no entry matching the requested client_sid.
	ListLastTemplateElements(ctx context.Context, in *ListLastTemplateElementsRequest, opts ...grpc.CallOption) (*ListLastTemplateElementsResponse, error)
	// Lists the names of the custom queue configs.
	// Errors:
	//   - grpc.Internal: An error occurred while getting the config names.
	//   - grpc.NotFound: The given @org_id was not found (if @org_id is NOT empty).
	ListQueueConfigs(ctx context.Context, in *ListQueueConfigsReq, opts ...grpc.CallOption) (*ListQueueConfigsRes, error)
	// Lists the names of the custom queue configs.
	// Errors:
	//   - grpc.Internal: An error occurred while getting the config names.
	//   - grpc.NotFound: The given @org_id was not found (if @org_id is NOT empty).
	ListQueueConfigsByOrgId(ctx context.Context, in *ListQueueConfigsByOrgIdReq, opts ...grpc.CallOption) (*ListQueueConfigsByOrgIdRes, error)
	// Deletes a queue config with the given @client_sid and @config_name.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while removing the config.
	//   - grpc.InvalidArgument: the config_name was invalid.
	DeleteQueueConfig(ctx context.Context, in *DeleteQueueConfigReq, opts ...grpc.CallOption) (*DeleteQueueConfigRes, error)
	// Gets the details for the queue config for the given @client_sid with
	// the given @name. If @merge is true, the config data will be merged
	// with the default config data.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred getting the config data.
	//   - grpc.InvalidArgument: the given config name was invalid.
	GetQueueConfig(ctx context.Context, in *GetQueueConfigReq, opts ...grpc.CallOption) (*GetQueueConfigRes, error)
	// Creates a queue config as defined by the @config given
	// on the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while saving the config.
	//   - grpc.InvalidArgument: the given config was invalid.
	CreateQueueConfig(ctx context.Context, in *CreateQueueConfigReq, opts ...grpc.CallOption) (*CreateQueueConfigRes, error)
	// Updates a new queue config as defined by the @config given
	// on the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.NotFound: The name of the given config could not be found.
	//   - grpc.Internal: An unexpected error occurred while saving the config.
	//   - grpc.InvalidArgument: the given config was invalid.
	UpdateQueueConfig(ctx context.Context, in *UpdateQueueConfigReq, opts ...grpc.CallOption) (*UpdateQueueConfigRes, error)
	// Copies a queue config belonging to one organization to another.
	// The queue config with the @from_name will be copied from the
	// organization with the @from_org_id to the organization with the
	// @to_org_id under the new @to_name.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while copying the config.
	//   - grpc.InvalidArgument: A field on the request message was invalid.
	//   - grpc.NotFound: The @to_org_id, @from_org_id, or @from_name was not found.
	//   - grpc.AlreadyExists: The @to_name already exists for the @to_org_id.
	CopyQueueConfig(ctx context.Context, in *CopyQueueConfigReq, opts ...grpc.CallOption) (*CopyQueueConfigRes, error)
	// Returns the url of a downloadable zip file containing every
	// sound for the given queue config.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while zipping the files.
	//   - grpc.NotFound: The given queue config was not found.
	GetAllQueueConfigSounds(ctx context.Context, in *GetAllQueueConfigSoundsReq, opts ...grpc.CallOption) (*GetAllQueueConfigSoundsRes, error)
	// Returns the url of a downladable wav file for the given config's
	// sound matching the given sound enum. Leaving the config field empty
	// will look up the sound for the account default config.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurrec while getting the
	//     downloadable file url.
	//   - grpc.NotFound: The given queue config was not found or the sound
	//     was not found for the config.
	GetQueueConfigSound(ctx context.Context, in *GetQueueConfigSoundReq, opts ...grpc.CallOption) (*GetQueueConfigSoundRes, error)
	// Sets the given sound for the config to one of the uploaded
	// sound files in the clients upload folder matching the
	// given file_name on the request. Leaving the config field empty
	// will set the sound for the account default config.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while updating
	//     the configs sound.
	//   - gprc.NotFound: The given queue config was not found or the
	//     sound file was not found for the client.
	//   - grpc.InvalidArgument: The file_name on the request was invalid.
	SetQueueConfigSound(ctx context.Context, in *SetQueueConfigSoundReq, opts ...grpc.CallOption) (*SetQueueConfigSoundRes, error)
	// Sets every sound for a given config by copying them from
	// another config OR by copying them from a default sound set
	// identified by language and gender. Empty config names will be
	// treated as the account default config.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors
	//   - grpc.Internal: An unexpected error occurred while updating
	//     all sounds for the given to_config.
	//   - grpc.NotFound: The given to_config or from.config (if used)
	//     could not be found or the default sound set for the given
	//     gender/language identifier could not be found.
	//   - grpc.InvalidArgument: The to_config and from.config contained
	//     the same value. (If from.config was used)
	SetAllQueueConfigSoundsFromSource(ctx context.Context, in *SetAllQueueConfigSoundsFromSourceReq, opts ...grpc.CallOption) (*SetAllQueueConfigSoundsFromSourceRes, error)
	// Checks a user's blocked status.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while getting the user.
	//   - grpc.InvalidArgument: The user_id on the request was invalid.
	GetUserBlocked(ctx context.Context, in *GetUserBlockedRequest, opts ...grpc.CallOption) (*GetUserBlockedResponse, error)
	// Unblocks the given user.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while unblocking the user.
	//   - grpc.InvalidArgument: The user_id on the request was invalid.
	UnblockUser(ctx context.Context, in *UnblockUserRequest, opts ...grpc.CallOption) (*UnblockUserResponse, error)
	// List all users who only exist in skunk and have not yet been migrated
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	ListP3UnMigratedUsers(ctx context.Context, in *ListP3UnMigratedUsersRequest, opts ...grpc.CallOption) (*ListP3UnMigratedUsersResponse, error)
	// Migrates a login or agent from backoffice to firestore
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	MigrateP3User(ctx context.Context, in *MigrateP3UserRequest, opts ...grpc.CallOption) (*MigrateP3UserResponse, error)
	// Updates the username in skunk only for a agent or login
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	UpdateP3UserName(ctx context.Context, in *UpdateP3UserNameRequest, opts ...grpc.CallOption) (*UpdateP3UserNameResponse, error)
	// Gets all users under the p3 hierarchy
	// Required Permissions:
	//
	//	OWNING_ORG_IMITATION
	ListOwnedUsers(ctx context.Context, in *ListOwnedUsersRequest, opts ...grpc.CallOption) (*ListOwnedUsersResponse, error)
	// Gets all orgs under the p3 hierarchy
	ListOwnedOrgsByOrgId(ctx context.Context, in *ListOwnedOrgsByOrgIdRequest, opts ...grpc.CallOption) (*ListOwnedOrgsByOrgIdResponse, error)
	// Gets all orgs under the p3 hierarchy
	ListOwnedOrgs(ctx context.Context, in *ListOwnedOrgsRequest, opts ...grpc.CallOption) (*ListOwnedOrgsResponse, error)
	// Removed login strike from list of given login_log_sids
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	RemoveLoginStrikes(ctx context.Context, in *RemoveLoginStrikesRequest, opts ...grpc.CallOption) (*RemoveLoginStrikesResponse, error)
	// Removed login strikes by user_id
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	RemoveUserLoginStrikes(ctx context.Context, in *RemoveUserLoginStrikesRequest, opts ...grpc.CallOption) (*RemoveUserLoginStrikesResponse, error)
	// Lists user login history by ip or user_id
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	ListLoginHistory(ctx context.Context, in *ListLoginHistoryRequest, opts ...grpc.CallOption) (*ListLoginHistoryResponse, error)
	// Updates a users agentsid and loginsid
	// Required Permissions:
	//
	//	TCN_ADMIN_SETTINGS
	UpdateP3UserSids(ctx context.Context, in *UpdateP3UserSidsRequest, opts ...grpc.CallOption) (*UpdateP3UserSidsResponse, error)
	// CreateAuthConnection creates a new auth0 connection.
	CreateAuthConnection(ctx context.Context, in *CreateAuthConnectionRequest, opts ...grpc.CallOption) (*CreateAuthConnectionResponse, error)
	// GetAuthConnectionSettings gets auth0 connection settings.
	GetAuthConnectionSettings(ctx context.Context, in *GetAuthConnectionSettingsRequest, opts ...grpc.CallOption) (*GetAuthConnectionSettingsResponse, error)
	// UpdateAuthConnectionSettings updates an existing auth0 connection settings.
	UpdateAuthConnectionSettings(ctx context.Context, in *UpdateAuthConnectionSettingsRequest, opts ...grpc.CallOption) (*UpdateAuthConnectionSettingsResponse, error)
	// DeleteAuthConnection removes the current orgs auth settings.
	DeleteAuthConnection(ctx context.Context, in *DeleteAuthConnectionRequest, opts ...grpc.CallOption) (*DeleteAuthConnectionResponse, error)
	// Gets a user subscription by id
	GetUserSubscription(ctx context.Context, in *GetUserSubscriptionRequest, opts ...grpc.CallOption) (*GetUserSubscriptionResponse, error)
	// Gets a user subscription by id
	GetMyUserSubscription(ctx context.Context, in *GetMyUserSubscriptionRequest, opts ...grpc.CallOption) (*GetMyUserSubscriptionResponse, error)
	// Adds a user subscription to user's list of subscriptions
	AddUserSubscription(ctx context.Context, in *AddUserSubscriptionRequest, opts ...grpc.CallOption) (*AddUserSubscriptionResponse, error)
	// Adds a user subscription to user's list of subscriptions
	AddMyUserSubscription(ctx context.Context, in *AddMyUserSubscriptionRequest, opts ...grpc.CallOption) (*AddMyUserSubscriptionResponse, error)
	// Removes a user subscription from a specified user's list of subscriptions
	RemoveUserSubscription(ctx context.Context, in *RemoveUserSubscriptionRequest, opts ...grpc.CallOption) (*RemoveUserSubscriptionResponse, error)
	// Removes a user subscription from a user's list of subscriptions
	RemoveMyUserSubscription(ctx context.Context, in *RemoveMyUserSubscriptionRequest, opts ...grpc.CallOption) (*RemoveMyUserSubscriptionResponse, error)
	// Updates a user subscription
	UpdateUserSubscription(ctx context.Context, in *UpdateUserSubscriptionRequest, opts ...grpc.CallOption) (*UpdateUserSubscriptionResponse, error)
	// Updates a user subscription
	UpdateMyUserSubscription(ctx context.Context, in *UpdateMyUserSubscriptionRequest, opts ...grpc.CallOption) (*UpdateMyUserSubscriptionResponse, error)
	// Lists all of a users subscriptions
	ListUserSubscriptions(ctx context.Context, in *ListUserSubscriptionsRequest, opts ...grpc.CallOption) (*ListUserSubscriptionsResponse, error)
	// Lists all of a users subscriptions
	ListMyUserSubscriptions(ctx context.Context, in *ListMyUserSubscriptionsRequest, opts ...grpc.CallOption) (*ListMyUserSubscriptionsResponse, error)
	// Lists multiple users subscriptions by org. Optionally filters by event type.
	// Required Permissions:
	//
	//	ORG_VIEW
	ListOrgSubscriptions(ctx context.Context, in *ListOrgSubscriptionsRequest, opts ...grpc.CallOption) (*ListOrgSubscriptionsResponse, error)
	// Returns the systems current environment details
	// Required Permissions:
	//
	//	N/A
	GetSystemEnvironmentDetails(ctx context.Context, in *GetSystemEnvironmentDetailsRequest, opts ...grpc.CallOption) (*GetSystemEnvironmentDetailsResponse, error)
	// Returns a list of agent statistics templates belonging to client_sid.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.NotFound: There is no entry matching the requested client_sid.
	ListAgentStatisticsTemplates(ctx context.Context, in *ListAgentStatisticsTemplatesRequest, opts ...grpc.CallOption) (*ListAgentStatisticsTemplatesResponse, error)
	// Creates a new agent statistics template for the given client_sid.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.NotFound: The client_sid is not found.
	CreateAgentStatisticsTemplate(ctx context.Context, in *CreateAgentStatisticsTemplateRequest, opts ...grpc.CallOption) (*CreateAgentStatisticsTemplateResponse, error)
	// Updates an existing agent statistics template for the given client_sid.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.NotFound: The client_sid is not found.
	UpdateAgentStatisticsTemplate(ctx context.Context, in *UpdateAgentStatisticsTemplateRequest, opts ...grpc.CallOption) (*UpdateAgentStatisticsTemplateResponse, error)
	// Deletes an existing agent statistics template for the given client_sid.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.NotFound: The client_sid or agent statistics template is not found.
	DeleteAgentStatisticsTemplate(ctx context.Context, in *DeleteAgentStatisticsTemplateRequest, opts ...grpc.CallOption) (*DeleteAgentStatisticsTemplateResponse, error)
}

type orgClient struct {
	cc grpc.ClientConnInterface
}

func NewOrgClient(cc grpc.ClientConnInterface) OrgClient {
	return &orgClient{cc}
}

func (c *orgClient) RegisterOrganization(ctx context.Context, in *RegisterOrganizationRequest, opts ...grpc.CallOption) (*RegisterOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterOrganizationResponse)
	err := c.cc.Invoke(ctx, Org_RegisterOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ConvertOrgToManual(ctx context.Context, in *ConvertOrgToManualRequest, opts ...grpc.CallOption) (*ConvertOrgToManualResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConvertOrgToManualResponse)
	err := c.cc.Invoke(ctx, Org_ConvertOrgToManual_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationResponse)
	err := c.cc.Invoke(ctx, Org_UpdateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ArchiveOrganization(ctx context.Context, in *ArchiveOrganizationRequest, opts ...grpc.CallOption) (*ArchiveOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArchiveOrganizationResponse)
	err := c.cc.Invoke(ctx, Org_ArchiveOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UnArchiveOrganization(ctx context.Context, in *UnArchiveOrganizationRequest, opts ...grpc.CallOption) (*UnArchiveOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnArchiveOrganizationResponse)
	err := c.cc.Invoke(ctx, Org_UnArchiveOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListArchivedOrganizations(ctx context.Context, in *ListArchivedOrganizationsRequest, opts ...grpc.CallOption) (*ListArchivedOrganizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListArchivedOrganizationsResponse)
	err := c.cc.Invoke(ctx, Org_ListArchivedOrganizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetOrganizationProfile(ctx context.Context, in *GetOrganizationProfileRequest, opts ...grpc.CallOption) (*GetOrganizationProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationProfileResponse)
	err := c.cc.Invoke(ctx, Org_GetOrganizationProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetOrganizationProfileById(ctx context.Context, in *GetOrganizationProfileByIdRequest, opts ...grpc.CallOption) (*GetOrganizationProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationProfileResponse)
	err := c.cc.Invoke(ctx, Org_GetOrganizationProfileById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListOrganizationDescriptions(ctx context.Context, in *ListOrganizationDescriptionsRequest, opts ...grpc.CallOption) (*ListOrganizationDescriptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationDescriptionsResponse)
	err := c.cc.Invoke(ctx, Org_ListOrganizationDescriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListRegionalOrganizations(ctx context.Context, in *ListRegionalOrganizationsRequest, opts ...grpc.CallOption) (*ListRegionalOrganizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRegionalOrganizationsResponse)
	err := c.cc.Invoke(ctx, Org_ListRegionalOrganizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateP3OwningOrg(ctx context.Context, in *UpdateP3OwningOrgRequest, opts ...grpc.CallOption) (*UpdateP3OwningOrgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateP3OwningOrgResponse)
	err := c.cc.Invoke(ctx, Org_UpdateP3OwningOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetP3OwningOrg(ctx context.Context, in *GetP3OwningOrgRequest, opts ...grpc.CallOption) (*GetP3OwningOrgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetP3OwningOrgResponse)
	err := c.cc.Invoke(ctx, Org_GetP3OwningOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListOrganizationUserDescriptions(ctx context.Context, in *ListOrganizationUserDescriptionsRequest, opts ...grpc.CallOption) (*ListOrganizationUserDescriptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationUserDescriptionsResponse)
	err := c.cc.Invoke(ctx, Org_ListOrganizationUserDescriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AdminListUserDescriptions(ctx context.Context, in *AdminListUserDescriptionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AdminListUserDescriptionsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Org_ServiceDesc.Streams[0], Org_AdminListUserDescriptions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AdminListUserDescriptionsRequest, AdminListUserDescriptionsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Org_AdminListUserDescriptionsClient = grpc.ServerStreamingClient[AdminListUserDescriptionsResponse]

func (c *orgClient) ListUserDescriptions(ctx context.Context, in *ListUserDescriptionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListUserDescriptionsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Org_ServiceDesc.Streams[1], Org_ListUserDescriptions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListUserDescriptionsRequest, ListUserDescriptionsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Org_ListUserDescriptionsClient = grpc.ServerStreamingClient[ListUserDescriptionsResponse]

func (c *orgClient) GetUserDirectory(ctx context.Context, in *GetUserDirectoryRequest, opts ...grpc.CallOption) (*GetUserDirectoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserDirectoryResponse)
	err := c.cc.Invoke(ctx, Org_GetUserDirectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetRegions(ctx context.Context, in *GetRegionsRequest, opts ...grpc.CallOption) (*GetRegionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRegionsResponse)
	err := c.cc.Invoke(ctx, Org_GetRegions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetMyUserDetails(ctx context.Context, in *GetMyUserDetailsRequest, opts ...grpc.CallOption) (*UserDetails, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserDetails)
	err := c.cc.Invoke(ctx, Org_GetMyUserDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetUserDetails(ctx context.Context, in *GetUserDetailsRequest, opts ...grpc.CallOption) (*UserDetails, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserDetails)
	err := c.cc.Invoke(ctx, Org_GetUserDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AdminGetUserDetails(ctx context.Context, in *AdminGetUserDetailsRequest, opts ...grpc.CallOption) (*UserDetails, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserDetails)
	err := c.cc.Invoke(ctx, Org_AdminGetUserDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetAgentUsers(ctx context.Context, in *GetAgentUsersRequest, opts ...grpc.CallOption) (*GetAgentUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentUsersResponse)
	err := c.cc.Invoke(ctx, Org_GetAgentUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetAgentSettings(ctx context.Context, in *GetAgentSettingsRequest, opts ...grpc.CallOption) (*GetAgentSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentSettingsResponse)
	err := c.cc.Invoke(ctx, Org_GetAgentSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetAgentProfileGroup(ctx context.Context, in *GetAgentProfileGroupRequest, opts ...grpc.CallOption) (*GetAgentProfileGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentProfileGroupResponse)
	err := c.cc.Invoke(ctx, Org_GetAgentProfileGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateAgentProfileGroup(ctx context.Context, in *UpdateAgentProfileGroupRequest, opts ...grpc.CallOption) (*UpdateAgentProfileGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAgentProfileGroupResponse)
	err := c.cc.Invoke(ctx, Org_UpdateAgentProfileGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateAgentProfileGroup(ctx context.Context, in *CreateAgentProfileGroupRequest, opts ...grpc.CallOption) (*CreateAgentProfileGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAgentProfileGroupResponse)
	err := c.cc.Invoke(ctx, Org_CreateAgentProfileGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListAgentProfileGroups(ctx context.Context, in *ListAgentProfileGroupsRequest, opts ...grpc.CallOption) (*ListAgentProfileGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentProfileGroupsResponse)
	err := c.cc.Invoke(ctx, Org_ListAgentProfileGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteAgentProfileGroup(ctx context.Context, in *DeleteAgentProfileGroupRequest, opts ...grpc.CallOption) (*DeleteAgentProfileGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAgentProfileGroupResponse)
	err := c.cc.Invoke(ctx, Org_DeleteAgentProfileGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AssignAgentProfileGroups(ctx context.Context, in *AssignAgentProfileGroupsRequest, opts ...grpc.CallOption) (*AssignAgentProfileGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignAgentProfileGroupsResponse)
	err := c.cc.Invoke(ctx, Org_AssignAgentProfileGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, Org_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateMyUser(ctx context.Context, in *UpdateMyUserRequest, opts ...grpc.CallOption) (*UpdateMyUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMyUserResponse)
	err := c.cc.Invoke(ctx, Org_UpdateMyUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateUserCallerId(ctx context.Context, in *UpdateUserCallerIdRequest, opts ...grpc.CallOption) (*UpdateUserCallerIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserCallerIdResponse)
	err := c.cc.Invoke(ctx, Org_UpdateUserCallerId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, Org_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateUserByOrgId(ctx context.Context, in *CreateUserByOrgIdRequest, opts ...grpc.CallOption) (*CreateUserByOrgIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserByOrgIdResponse)
	err := c.cc.Invoke(ctx, Org_CreateUserByOrgId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateDelegatedUser(ctx context.Context, in *CreateDelegatedUserRequest, opts ...grpc.CallOption) (*CreateDelegatedUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDelegatedUserResponse)
	err := c.cc.Invoke(ctx, Org_CreateDelegatedUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*UpdateUserPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserPasswordResponse)
	err := c.cc.Invoke(ctx, Org_UpdateUserPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateMyUserPassword(ctx context.Context, in *UpdateMyUserPasswordRequest, opts ...grpc.CallOption) (*UpdateMyUserPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMyUserPasswordResponse)
	err := c.cc.Invoke(ctx, Org_UpdateMyUserPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateUserPasswordByOrgId(ctx context.Context, in *UpdateUserPasswordByOrgIdRequest, opts ...grpc.CallOption) (*UpdateUserPasswordByOrgIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserPasswordByOrgIdResponse)
	err := c.cc.Invoke(ctx, Org_UpdateUserPasswordByOrgId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ResetUserRequirePasswordReset(ctx context.Context, in *ResetUserRequirePasswordResetRequest, opts ...grpc.CallOption) (*ResetUserRequirePasswordResetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetUserRequirePasswordResetResponse)
	err := c.cc.Invoke(ctx, Org_ResetUserRequirePasswordReset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetUserPasswordResetLink(ctx context.Context, in *GetUserPasswordResetLinkRequest, opts ...grpc.CallOption) (*GetUserPasswordResetLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPasswordResetLinkResponse)
	err := c.cc.Invoke(ctx, Org_GetUserPasswordResetLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetMyUserPasswordResetLink(ctx context.Context, in *GetMyUserPasswordResetLinkRequest, opts ...grpc.CallOption) (*GetMyUserPasswordResetLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMyUserPasswordResetLinkResponse)
	err := c.cc.Invoke(ctx, Org_GetMyUserPasswordResetLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetUserPasswordResetLinkByOrgId(ctx context.Context, in *GetUserPasswordResetLinkByOrgIdRequest, opts ...grpc.CallOption) (*GetUserPasswordResetLinkByOrgIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPasswordResetLinkByOrgIdResponse)
	err := c.cc.Invoke(ctx, Org_GetUserPasswordResetLinkByOrgId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetUserEmailVerified(ctx context.Context, in *GetUserEmailVerifiedRequest, opts ...grpc.CallOption) (*GetUserEmailVerifiedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserEmailVerifiedResponse)
	err := c.cc.Invoke(ctx, Org_GetUserEmailVerified_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetUserEmailVerifiedByOrgId(ctx context.Context, in *GetUserEmailVerifiedByOrgIdRequest, opts ...grpc.CallOption) (*GetUserEmailVerifiedByOrgIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserEmailVerifiedByOrgIdResponse)
	err := c.cc.Invoke(ctx, Org_GetUserEmailVerifiedByOrgId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) SendUserVerificationEmailByOrgId(ctx context.Context, in *SendUserVerificationEmailByOrgIdRequest, opts ...grpc.CallOption) (*SendUserVerificationEmailByOrgIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendUserVerificationEmailByOrgIdResponse)
	err := c.cc.Invoke(ctx, Org_SendUserVerificationEmailByOrgId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) SendUserVerificationEmail(ctx context.Context, in *SendUserVerificationEmailRequest, opts ...grpc.CallOption) (*SendUserVerificationEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendUserVerificationEmailResponse)
	err := c.cc.Invoke(ctx, Org_SendUserVerificationEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ManualUserEmailVerificationByOrgId(ctx context.Context, in *ManualUserEmailVerificationByOrgIdRequest, opts ...grpc.CallOption) (*ManualUserEmailVerificationByOrgIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ManualUserEmailVerificationByOrgIdResponse)
	err := c.cc.Invoke(ctx, Org_ManualUserEmailVerificationByOrgId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ManualUserEmailVerification(ctx context.Context, in *ManualUserEmailVerificationRequest, opts ...grpc.CallOption) (*ManualUserEmailVerificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ManualUserEmailVerificationResponse)
	err := c.cc.Invoke(ctx, Org_ManualUserEmailVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetTempUserToken(ctx context.Context, in *GetTempUserTokenReq, opts ...grpc.CallOption) (*GetTempUserTokenRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTempUserTokenRes)
	err := c.cc.Invoke(ctx, Org_GetTempUserToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetTempUserTokenByUserId(ctx context.Context, in *GetTempUserTokenByUserIdReq, opts ...grpc.CallOption) (*GetTempUserTokenByUserIdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTempUserTokenByUserIdRes)
	err := c.cc.Invoke(ctx, Org_GetTempUserTokenByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetCountriesList(ctx context.Context, in *GetCountriesListRequest, opts ...grpc.CallOption) (*GetCountriesListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCountriesListResponse)
	err := c.cc.Invoke(ctx, Org_GetCountriesList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetAdminClientPreferences(ctx context.Context, in *GetAdminClientPreferencesRequest, opts ...grpc.CallOption) (*GetAdminClientPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAdminClientPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetAdminClientPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateAdminClientPreferences(ctx context.Context, in *UpdateAdminClientPreferencesRequest, opts ...grpc.CallOption) (*UpdateAdminClientPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAdminClientPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateAdminClientPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetPermissions(ctx context.Context, in *GetPermissionsRequest, opts ...grpc.CallOption) (*GetPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPermissionsResponse)
	err := c.cc.Invoke(ctx, Org_GetPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) RevokeAccountOwnerPermissionFromUser(ctx context.Context, in *RevokeAccountOwnerPermissionFromUserRequest, opts ...grpc.CallOption) (*RevokeAccountOwnerPermissionFromUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeAccountOwnerPermissionFromUserResponse)
	err := c.cc.Invoke(ctx, Org_RevokeAccountOwnerPermissionFromUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateUserDisabled(ctx context.Context, in *UpdateUserDisabledRequest, opts ...grpc.CallOption) (*UpdateUserDisabledResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserDisabledResponse)
	err := c.cc.Invoke(ctx, Org_UpdateUserDisabled_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateUserDisabledByOrgId(ctx context.Context, in *UpdateUserDisabledByOrgIdRequest, opts ...grpc.CallOption) (*UpdateUserDisabledByOrgIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserDisabledByOrgIdResponse)
	err := c.cc.Invoke(ctx, Org_UpdateUserDisabledByOrgId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateBulkUsersDisabled(ctx context.Context, in *UpdateBulkUsersDisabledRequest, opts ...grpc.CallOption) (*UpdateBulkUsersDisabledResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBulkUsersDisabledResponse)
	err := c.cc.Invoke(ctx, Org_UpdateBulkUsersDisabled_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetOrgBillingSettingsByOrgId(ctx context.Context, in *GetOrgBillingSettingsByOrgIdRequest, opts ...grpc.CallOption) (*GetOrgBillingSettingsByOrgIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrgBillingSettingsByOrgIdResponse)
	err := c.cc.Invoke(ctx, Org_GetOrgBillingSettingsByOrgId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetOrgBillingSettings(ctx context.Context, in *GetOrgBillingSettingsRequest, opts ...grpc.CallOption) (*GetOrgBillingSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrgBillingSettingsResponse)
	err := c.cc.Invoke(ctx, Org_GetOrgBillingSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) SetOrgBillingSettings(ctx context.Context, in *SetOrgBillingSettingsRequest, opts ...grpc.CallOption) (*SetOrgBillingSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetOrgBillingSettingsResponse)
	err := c.cc.Invoke(ctx, Org_SetOrgBillingSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AddOrgBillingOverride(ctx context.Context, in *AddOrgBillingOverrideRequest, opts ...grpc.CallOption) (*AddOrgBillingOverrideResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOrgBillingOverrideResponse)
	err := c.cc.Invoke(ctx, Org_AddOrgBillingOverride_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) RemoveOrgBillingOverride(ctx context.Context, in *RemoveOrgBillingOverrideRequest, opts ...grpc.CallOption) (*RemoveOrgBillingOverrideResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveOrgBillingOverrideResponse)
	err := c.cc.Invoke(ctx, Org_RemoveOrgBillingOverride_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetSystemDefaultBillingRates(ctx context.Context, in *GetSystemDefaultBillingRatesRequest, opts ...grpc.CallOption) (*GetSystemDefaultBillingRatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSystemDefaultBillingRatesResponse)
	err := c.cc.Invoke(ctx, Org_GetSystemDefaultBillingRates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListPermissionGroupsByOrgId(ctx context.Context, in *ListPermissionGroupsByOrgIdRequest, opts ...grpc.CallOption) (*ListPermissionGroupsByOrgIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPermissionGroupsByOrgIdResponse)
	err := c.cc.Invoke(ctx, Org_ListPermissionGroupsByOrgId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListPermissionGroups(ctx context.Context, in *ListPermissionGroupsRequest, opts ...grpc.CallOption) (*ListPermissionGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPermissionGroupsResponse)
	err := c.cc.Invoke(ctx, Org_ListPermissionGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreatePermissionGroup(ctx context.Context, in *CreatePermissionGroupRequest, opts ...grpc.CallOption) (*CreatePermissionGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePermissionGroupResponse)
	err := c.cc.Invoke(ctx, Org_CreatePermissionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdatePermissionGroup(ctx context.Context, in *UpdatePermissionGroupRequest, opts ...grpc.CallOption) (*UpdatePermissionGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePermissionGroupResponse)
	err := c.cc.Invoke(ctx, Org_UpdatePermissionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeletePermissionGroup(ctx context.Context, in *DeletePermissionGroupRequest, opts ...grpc.CallOption) (*DeletePermissionGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePermissionGroupResponse)
	err := c.cc.Invoke(ctx, Org_DeletePermissionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AssignUserToAccountOwnerPermissionGroup(ctx context.Context, in *AssignUserToAccountOwnerPermissionGroupRequest, opts ...grpc.CallOption) (*AssignUserToAccountOwnerPermissionGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignUserToAccountOwnerPermissionGroupResponse)
	err := c.cc.Invoke(ctx, Org_AssignUserToAccountOwnerPermissionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AssignUserPermissionGroup(ctx context.Context, in *AssignUserPermissionGroupRequest, opts ...grpc.CallOption) (*AssignUserPermissionGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignUserPermissionGroupResponse)
	err := c.cc.Invoke(ctx, Org_AssignUserPermissionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AssignUsersPermissionGroup(ctx context.Context, in *AssignUsersPermissionGroupRequest, opts ...grpc.CallOption) (*AssignUsersPermissionGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignUsersPermissionGroupResponse)
	err := c.cc.Invoke(ctx, Org_AssignUsersPermissionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateUserNeoPermissionGroups(ctx context.Context, in *UpdateUserNeoPermissionGroupsRequest, opts ...grpc.CallOption) (*UpdateUserNeoPermissionGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserNeoPermissionGroupsResponse)
	err := c.cc.Invoke(ctx, Org_UpdateUserNeoPermissionGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) RevokeUserPermissionGroup(ctx context.Context, in *RevokeUserPermissionGroupRequest, opts ...grpc.CallOption) (*RevokeUserPermissionGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeUserPermissionGroupResponse)
	err := c.cc.Invoke(ctx, Org_RevokeUserPermissionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) RevokeUsersPermissionGroup(ctx context.Context, in *RevokeUsersPermissionGroupRequest, opts ...grpc.CallOption) (*RevokeUsersPermissionGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeUsersPermissionGroupResponse)
	err := c.cc.Invoke(ctx, Org_RevokeUsersPermissionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) InitDefaultPermissionGroups(ctx context.Context, in *InitDefaultPermissionGroupsRequest, opts ...grpc.CallOption) (*InitDefaultPermissionGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitDefaultPermissionGroupsResponse)
	err := c.cc.Invoke(ctx, Org_InitDefaultPermissionGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AddPermissionToAccountOwnerPermissionGroup(ctx context.Context, in *AddPermissionToAccountOwnerPermissionGroupRequest, opts ...grpc.CallOption) (*AddPermissionToAccountOwnerPermissionGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPermissionToAccountOwnerPermissionGroupResponse)
	err := c.cc.Invoke(ctx, Org_AddPermissionToAccountOwnerPermissionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) RevokePermissionToAccountOwnerPermissionGroup(ctx context.Context, in *RevokePermissionToAccountOwnerPermissionGroupRequest, opts ...grpc.CallOption) (*RevokePermissionToAccountOwnerPermissionGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokePermissionToAccountOwnerPermissionGroupResponse)
	err := c.cc.Invoke(ctx, Org_RevokePermissionToAccountOwnerPermissionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AddPermissionToOrgDefaultGroup(ctx context.Context, in *AddPermissionToOrgDefaultGroupRequest, opts ...grpc.CallOption) (*AddPermissionToOrgDefaultGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPermissionToOrgDefaultGroupResponse)
	err := c.cc.Invoke(ctx, Org_AddPermissionToOrgDefaultGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) RemovePermissionFromOrgDefaultGroup(ctx context.Context, in *RemovePermissionFromOrgDefaultGroupRequest, opts ...grpc.CallOption) (*RemovePermissionFromOrgDefaultGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemovePermissionFromOrgDefaultGroupResponse)
	err := c.cc.Invoke(ctx, Org_RemovePermissionFromOrgDefaultGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetOrgDefaultSuperUserGroup(ctx context.Context, in *GetOrgDefaultSuperUserGroupRequest, opts ...grpc.CallOption) (*GetOrgDefaultSuperUserGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrgDefaultSuperUserGroupResponse)
	err := c.cc.Invoke(ctx, Org_GetOrgDefaultSuperUserGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListP3PermissionGroupsByOrgId(ctx context.Context, in *ListP3PermissionGroupsByOrgIdRequest, opts ...grpc.CallOption) (*ListP3PermissionGroupsByOrgIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListP3PermissionGroupsByOrgIdResponse)
	err := c.cc.Invoke(ctx, Org_ListP3PermissionGroupsByOrgId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListP3PermissionGroups(ctx context.Context, in *ListP3PermissionGroupsRequest, opts ...grpc.CallOption) (*ListP3PermissionGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListP3PermissionGroupsResponse)
	err := c.cc.Invoke(ctx, Org_ListP3PermissionGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AddUserRegion(ctx context.Context, in *AddUserRegionRequest, opts ...grpc.CallOption) (*AddUserRegionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserRegionResponse)
	err := c.cc.Invoke(ctx, Org_AddUserRegion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) RemoveUserRegion(ctx context.Context, in *RemoveUserRegionRequest, opts ...grpc.CallOption) (*RemoveUserRegionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUserRegionResponse)
	err := c.cc.Invoke(ctx, Org_RemoveUserRegion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateP3PermissionGroup(ctx context.Context, in *CreateP3PermissionGroupRequest, opts ...grpc.CallOption) (*CreateP3PermissionGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateP3PermissionGroupResponse)
	err := c.cc.Invoke(ctx, Org_CreateP3PermissionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateP3PermissionGroupByOrgId(ctx context.Context, in *UpdateP3PermissionGroupByOrgIdRequest, opts ...grpc.CallOption) (*UpdateP3PermissionGroupByOrgIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateP3PermissionGroupByOrgIdResponse)
	err := c.cc.Invoke(ctx, Org_UpdateP3PermissionGroupByOrgId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateP3PermissionGroup(ctx context.Context, in *UpdateP3PermissionGroupRequest, opts ...grpc.CallOption) (*UpdateP3PermissionGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateP3PermissionGroupResponse)
	err := c.cc.Invoke(ctx, Org_UpdateP3PermissionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteP3PermissionGroup(ctx context.Context, in *DeleteP3PermissionGroupRequest, opts ...grpc.CallOption) (*DeleteP3PermissionGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteP3PermissionGroupResponse)
	err := c.cc.Invoke(ctx, Org_DeleteP3PermissionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AssignUsersP3PermissionGroup(ctx context.Context, in *AssignUsersP3PermissionGroupRequest, opts ...grpc.CallOption) (*AssignUsersP3PermissionGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignUsersP3PermissionGroupResponse)
	err := c.cc.Invoke(ctx, Org_AssignUsersP3PermissionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AddLoginToUser(ctx context.Context, in *AddLoginToUserRequest, opts ...grpc.CallOption) (*AddLoginToUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddLoginToUserResponse)
	err := c.cc.Invoke(ctx, Org_AddLoginToUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) RevokeUsersP3PermissionGroup(ctx context.Context, in *RevokeUsersP3PermissionGroupRequest, opts ...grpc.CallOption) (*RevokeUsersP3PermissionGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeUsersP3PermissionGroupResponse)
	err := c.cc.Invoke(ctx, Org_RevokeUsersP3PermissionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetContactPreferences(ctx context.Context, in *GetContactPreferencesRequest, opts ...grpc.CallOption) (*GetContactPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContactPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetContactPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateContactPreferences(ctx context.Context, in *UpdateContactPreferencesRequest, opts ...grpc.CallOption) (*UpdateContactPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateContactPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateContactPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetCompliancePreferences(ctx context.Context, in *GetCompliancePreferencesRequest, opts ...grpc.CallOption) (*GetCompliancePreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCompliancePreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetCompliancePreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateCompliancePreferences(ctx context.Context, in *UpdateCompliancePreferencesRequest, opts ...grpc.CallOption) (*UpdateCompliancePreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCompliancePreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateCompliancePreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetAgentPreferences(ctx context.Context, in *GetAgentPreferencesRequest, opts ...grpc.CallOption) (*GetAgentPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetAgentPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateAgentPreferences(ctx context.Context, in *UpdateAgentPreferencesRequest, opts ...grpc.CallOption) (*UpdateAgentPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAgentPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateAgentPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetOrganizationPreferences(ctx context.Context, in *GetOrganizationPreferencesRequest, opts ...grpc.CallOption) (*GetOrganizationPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetOrganizationPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateOrganizationPreferences(ctx context.Context, in *UpdateOrganizationPreferencesRequest, opts ...grpc.CallOption) (*UpdateOrganizationPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateOrganizationPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetSchedulePreferences(ctx context.Context, in *GetSchedulePreferencesRequest, opts ...grpc.CallOption) (*GetSchedulePreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSchedulePreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetSchedulePreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateSchedulePreferences(ctx context.Context, in *UpdateSchedulePreferencesRequest, opts ...grpc.CallOption) (*UpdateSchedulePreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSchedulePreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateSchedulePreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetBusinessPreferences(ctx context.Context, in *GetBusinessPreferencesRequest, opts ...grpc.CallOption) (*GetBusinessPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBusinessPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetBusinessPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateBusinessPreferences(ctx context.Context, in *UpdateBusinessPreferencesRequest, opts ...grpc.CallOption) (*UpdateBusinessPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBusinessPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateBusinessPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetEndOfDayPreferences(ctx context.Context, in *GetEndOfDayPreferencesRequest, opts ...grpc.CallOption) (*GetEndOfDayPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEndOfDayPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetEndOfDayPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateEndOfDayPreferences(ctx context.Context, in *UpdateEndOfDayPreferencesRequest, opts ...grpc.CallOption) (*UpdateEndOfDayPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEndOfDayPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateEndOfDayPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetReportFilterPreferences(ctx context.Context, in *GetFilterPreferencesRequest, opts ...grpc.CallOption) (*GetFilterPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilterPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetReportFilterPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateReportFilterPreferences(ctx context.Context, in *UpdateFilterPreferencesRequest, opts ...grpc.CallOption) (*UpdateFilterPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFilterPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateReportFilterPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetPhonePreferences(ctx context.Context, in *GetPhonePreferencesRequest, opts ...grpc.CallOption) (*GetPhonePreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPhonePreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetPhonePreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdatePhonePreferences(ctx context.Context, in *UpdatePhonePreferencesRequest, opts ...grpc.CallOption) (*UpdatePhonePreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePhonePreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdatePhonePreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetDashboardGeneralPreferences(ctx context.Context, in *GetDashboardGeneralPreferencesRequest, opts ...grpc.CallOption) (*GetDashboardGeneralPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDashboardGeneralPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetDashboardGeneralPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateDashboardGeneralPreferences(ctx context.Context, in *UpdateDashboardGeneralPreferencesRequest, opts ...grpc.CallOption) (*UpdateDashboardGeneralPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDashboardGeneralPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateDashboardGeneralPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetWebhookPreferences(ctx context.Context, in *GetWebhookPreferencesRequest, opts ...grpc.CallOption) (*GetWebhookPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWebhookPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetWebhookPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateWebhookPreferences(ctx context.Context, in *UpdateWebhookPreferencesRequest, opts ...grpc.CallOption) (*UpdateWebhookPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWebhookPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateWebhookPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetBroadcastPreferences(ctx context.Context, in *GetBroadcastPreferencesRequest, opts ...grpc.CallOption) (*GetBroadcastPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBroadcastPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetBroadcastPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateBroadcastPreferences(ctx context.Context, in *UpdateBroadcastPreferencesRequest, opts ...grpc.CallOption) (*UpdateBroadcastPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBroadcastPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateBroadcastPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetAuthenticationPreferences(ctx context.Context, in *GetAuthenticationPreferencesRequest, opts ...grpc.CallOption) (*GetAuthenticationPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAuthenticationPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetAuthenticationPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateAuthenticationPreferences(ctx context.Context, in *UpdateAuthenticationPreferencesRequest, opts ...grpc.CallOption) (*UpdateAuthenticationPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAuthenticationPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateAuthenticationPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetRecordingPreferences(ctx context.Context, in *GetRecordingPreferencesRequest, opts ...grpc.CallOption) (*GetRecordingPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecordingPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetRecordingPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateRecordingPreferences(ctx context.Context, in *UpdateRecordingPreferencesRequest, opts ...grpc.CallOption) (*UpdateRecordingPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRecordingPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateRecordingPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetDashboardQueuePreferences(ctx context.Context, in *GetDashboardQueuePreferencesRequest, opts ...grpc.CallOption) (*GetDashboardQueuePreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDashboardQueuePreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetDashboardQueuePreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateDashboardQueuePreferences(ctx context.Context, in *UpdateDashboardQueuePreferencesRequest, opts ...grpc.CallOption) (*UpdateDashboardQueuePreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDashboardQueuePreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateDashboardQueuePreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetAgentQuickViewPreferences(ctx context.Context, in *GetAgentQuickViewPreferencesRequest, opts ...grpc.CallOption) (*GetAgentQuickViewPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentQuickViewPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetAgentQuickViewPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetVoiceAnalyticsPreferences(ctx context.Context, in *GetVoiceAnalyticsPreferencesRequest, opts ...grpc.CallOption) (*GetVoiceAnalyticsPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVoiceAnalyticsPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetVoiceAnalyticsPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateVoiceAnalyticsPreferences(ctx context.Context, in *UpdateVoiceAnalyticsPreferencesRequest, opts ...grpc.CallOption) (*UpdateVoiceAnalyticsPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVoiceAnalyticsPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateVoiceAnalyticsPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateVoiceAnalyticsPreferencesEnabled(ctx context.Context, in *UpdateVoiceAnalyticsPreferencesEnabledRequest, opts ...grpc.CallOption) (*UpdateVoiceAnalyticsPreferencesEnabledResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVoiceAnalyticsPreferencesEnabledResponse)
	err := c.cc.Invoke(ctx, Org_UpdateVoiceAnalyticsPreferencesEnabled_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetScorecardsPreferences(ctx context.Context, in *GetScorecardsPreferencesRequest, opts ...grpc.CallOption) (*GetScorecardsPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScorecardsPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetScorecardsPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateScorecardsPreferences(ctx context.Context, in *UpdateScorecardsPreferencesRequest, opts ...grpc.CallOption) (*UpdateScorecardsPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateScorecardsPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateScorecardsPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetEmailSmsPreferences(ctx context.Context, in *GetEmailSmsPreferencesRequest, opts ...grpc.CallOption) (*GetEmailSmsPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmailSmsPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetEmailSmsPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateEmailSmsPreferences(ctx context.Context, in *UpdateEmailSmsPreferencesRequest, opts ...grpc.CallOption) (*UpdateEmailSmsPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEmailSmsPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateEmailSmsPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) EditAgentQuickViewPreferences(ctx context.Context, in *EditAgentQuickViewPreferencesRequest, opts ...grpc.CallOption) (*EditAgentQuickViewPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditAgentQuickViewPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_EditAgentQuickViewPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) EditBackofficeThemePreference(ctx context.Context, in *EditBackofficeThemePreferenceRequest, opts ...grpc.CallOption) (*EditBackofficeThemePreferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditBackofficeThemePreferenceResponse)
	err := c.cc.Invoke(ctx, Org_EditBackofficeThemePreference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetBackofficeThemePreference(ctx context.Context, in *GetBackofficeThemePreferenceRequest, opts ...grpc.CallOption) (*GetBackofficeThemePreferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBackofficeThemePreferenceResponse)
	err := c.cc.Invoke(ctx, Org_GetBackofficeThemePreference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AcceptLinkbackRecordingTerms(ctx context.Context, in *AcceptLinkbackRecordingTermsRequest, opts ...grpc.CallOption) (*AcceptLinkbackRecordingTermsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptLinkbackRecordingTermsResponse)
	err := c.cc.Invoke(ctx, Org_AcceptLinkbackRecordingTerms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) LinkbackUpdateBroadcastTemplates(ctx context.Context, in *LinkbackUpdateBroadcastTemplatesRequest, opts ...grpc.CallOption) (*LinkbackUpdateBroadcastTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkbackUpdateBroadcastTemplatesResponse)
	err := c.cc.Invoke(ctx, Org_LinkbackUpdateBroadcastTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) RecordEmailUnsubscribeAcknowledgement(ctx context.Context, in *RecordEmailUnsubscribeAcknowledgementRequest, opts ...grpc.CallOption) (*RecordEmailUnsubscribeAcknowledgementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordEmailUnsubscribeAcknowledgementResponse)
	err := c.cc.Invoke(ctx, Org_RecordEmailUnsubscribeAcknowledgement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ClearEmailUnsubscribeAcknowledgement(ctx context.Context, in *ClearEmailUnsubscribeAcknowledgementRequest, opts ...grpc.CallOption) (*ClearEmailUnsubscribeAcknowledgementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearEmailUnsubscribeAcknowledgementResponse)
	err := c.cc.Invoke(ctx, Org_ClearEmailUnsubscribeAcknowledgement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateWebLinkTemplate(ctx context.Context, in *CreateWebLinkTemplateRequest, opts ...grpc.CallOption) (*CreateWebLinkTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWebLinkTemplateResponse)
	err := c.cc.Invoke(ctx, Org_CreateWebLinkTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListWebLinkTemplates(ctx context.Context, in *ListWebLinkTemplatesRequest, opts ...grpc.CallOption) (*ListWebLinkTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWebLinkTemplatesResponse)
	err := c.cc.Invoke(ctx, Org_ListWebLinkTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetWebLinkTemplate(ctx context.Context, in *GetWebLinkTemplateRequest, opts ...grpc.CallOption) (*GetWebLinkTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWebLinkTemplateResponse)
	err := c.cc.Invoke(ctx, Org_GetWebLinkTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateWebLinkTemplate(ctx context.Context, in *UpdateWebLinkTemplateRequest, opts ...grpc.CallOption) (*UpdateWebLinkTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWebLinkTemplateResponse)
	err := c.cc.Invoke(ctx, Org_UpdateWebLinkTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteWebLinkTemplate(ctx context.Context, in *DeleteWebLinkTemplateRequest, opts ...grpc.CallOption) (*DeleteWebLinkTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWebLinkTemplateResponse)
	err := c.cc.Invoke(ctx, Org_DeleteWebLinkTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateAgentTriggerTemplate(ctx context.Context, in *CreateAgentTriggerTemplateRequest, opts ...grpc.CallOption) (*CreateAgentTriggerTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAgentTriggerTemplateResponse)
	err := c.cc.Invoke(ctx, Org_CreateAgentTriggerTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListAgentTriggerTemplates(ctx context.Context, in *ListAgentTriggerTemplatesRequest, opts ...grpc.CallOption) (*ListAgentTriggerTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentTriggerTemplatesResponse)
	err := c.cc.Invoke(ctx, Org_ListAgentTriggerTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetAgentTriggerTemplate(ctx context.Context, in *GetAgentTriggerTemplateRequest, opts ...grpc.CallOption) (*GetAgentTriggerTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentTriggerTemplateResponse)
	err := c.cc.Invoke(ctx, Org_GetAgentTriggerTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateAgentTriggerTemplate(ctx context.Context, in *UpdateAgentTriggerTemplateRequest, opts ...grpc.CallOption) (*UpdateAgentTriggerTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAgentTriggerTemplateResponse)
	err := c.cc.Invoke(ctx, Org_UpdateAgentTriggerTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteAgentTriggerTemplate(ctx context.Context, in *DeleteAgentTriggerTemplateRequest, opts ...grpc.CallOption) (*DeleteAgentTriggerTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAgentTriggerTemplateResponse)
	err := c.cc.Invoke(ctx, Org_DeleteAgentTriggerTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateClientInfoDisplayTemplate(ctx context.Context, in *CreateClientInfoDisplayTemplateRequest, opts ...grpc.CallOption) (*CreateClientInfoDisplayTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateClientInfoDisplayTemplateResponse)
	err := c.cc.Invoke(ctx, Org_CreateClientInfoDisplayTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListClientInfoDisplayTemplates(ctx context.Context, in *ListClientInfoDisplayTemplatesRequest, opts ...grpc.CallOption) (*ListClientInfoDisplayTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClientInfoDisplayTemplatesResponse)
	err := c.cc.Invoke(ctx, Org_ListClientInfoDisplayTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateClientInfoDisplayTemplate(ctx context.Context, in *UpdateClientInfoDisplayTemplateRequest, opts ...grpc.CallOption) (*UpdateClientInfoDisplayTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateClientInfoDisplayTemplateResponse)
	err := c.cc.Invoke(ctx, Org_UpdateClientInfoDisplayTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteClientInfoDisplayTemplate(ctx context.Context, in *DeleteClientInfoDisplayTemplateRequest, opts ...grpc.CallOption) (*DeleteClientInfoDisplayTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteClientInfoDisplayTemplateResponse)
	err := c.cc.Invoke(ctx, Org_DeleteClientInfoDisplayTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetClientInfoDisplayTemplate(ctx context.Context, in *GetClientInfoDisplayTemplateRequest, opts ...grpc.CallOption) (*GetClientInfoDisplayTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClientInfoDisplayTemplateResponse)
	err := c.cc.Invoke(ctx, Org_GetClientInfoDisplayTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListAgentPauseCodes(ctx context.Context, in *ListAgentPauseCodesRequest, opts ...grpc.CallOption) (*ListAgentPauseCodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentPauseCodesResponse)
	err := c.cc.Invoke(ctx, Org_ListAgentPauseCodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateAgentPauseCode(ctx context.Context, in *CreateAgentPauseCodeRequest, opts ...grpc.CallOption) (*CreateAgentPauseCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAgentPauseCodeResponse)
	err := c.cc.Invoke(ctx, Org_CreateAgentPauseCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateAgentPauseCode(ctx context.Context, in *UpdateAgentPauseCodeRequest, opts ...grpc.CallOption) (*UpdateAgentPauseCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAgentPauseCodeResponse)
	err := c.cc.Invoke(ctx, Org_UpdateAgentPauseCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteAgentPauseCode(ctx context.Context, in *DeleteAgentPauseCodeRequest, opts ...grpc.CallOption) (*DeleteAgentPauseCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAgentPauseCodeResponse)
	err := c.cc.Invoke(ctx, Org_DeleteAgentPauseCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListCustomReportFilters(ctx context.Context, in *ListCustomReportFiltersRequest, opts ...grpc.CallOption) (*ListCustomReportFiltersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCustomReportFiltersResponse)
	err := c.cc.Invoke(ctx, Org_ListCustomReportFilters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateCustomReportFilter(ctx context.Context, in *CreateCustomReportFilterRequest, opts ...grpc.CallOption) (*CreateCustomReportFilterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCustomReportFilterResponse)
	err := c.cc.Invoke(ctx, Org_CreateCustomReportFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateCustomReportFilter(ctx context.Context, in *UpdateCustomReportFilterRequest, opts ...grpc.CallOption) (*UpdateCustomReportFilterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCustomReportFilterResponse)
	err := c.cc.Invoke(ctx, Org_UpdateCustomReportFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteCustomReportFilter(ctx context.Context, in *DeleteCustomReportFilterRequest, opts ...grpc.CallOption) (*DeleteCustomReportFilterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCustomReportFilterResponse)
	err := c.cc.Invoke(ctx, Org_DeleteCustomReportFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListAgentResponseGroups(ctx context.Context, in *ListAgentResponseGroupsRequest, opts ...grpc.CallOption) (*ListAgentResponseGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentResponseGroupsResponse)
	err := c.cc.Invoke(ctx, Org_ListAgentResponseGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListLastTemplateElements(ctx context.Context, in *ListLastTemplateElementsRequest, opts ...grpc.CallOption) (*ListLastTemplateElementsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLastTemplateElementsResponse)
	err := c.cc.Invoke(ctx, Org_ListLastTemplateElements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListQueueConfigs(ctx context.Context, in *ListQueueConfigsReq, opts ...grpc.CallOption) (*ListQueueConfigsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQueueConfigsRes)
	err := c.cc.Invoke(ctx, Org_ListQueueConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListQueueConfigsByOrgId(ctx context.Context, in *ListQueueConfigsByOrgIdReq, opts ...grpc.CallOption) (*ListQueueConfigsByOrgIdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQueueConfigsByOrgIdRes)
	err := c.cc.Invoke(ctx, Org_ListQueueConfigsByOrgId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteQueueConfig(ctx context.Context, in *DeleteQueueConfigReq, opts ...grpc.CallOption) (*DeleteQueueConfigRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteQueueConfigRes)
	err := c.cc.Invoke(ctx, Org_DeleteQueueConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetQueueConfig(ctx context.Context, in *GetQueueConfigReq, opts ...grpc.CallOption) (*GetQueueConfigRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQueueConfigRes)
	err := c.cc.Invoke(ctx, Org_GetQueueConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateQueueConfig(ctx context.Context, in *CreateQueueConfigReq, opts ...grpc.CallOption) (*CreateQueueConfigRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQueueConfigRes)
	err := c.cc.Invoke(ctx, Org_CreateQueueConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateQueueConfig(ctx context.Context, in *UpdateQueueConfigReq, opts ...grpc.CallOption) (*UpdateQueueConfigRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateQueueConfigRes)
	err := c.cc.Invoke(ctx, Org_UpdateQueueConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CopyQueueConfig(ctx context.Context, in *CopyQueueConfigReq, opts ...grpc.CallOption) (*CopyQueueConfigRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CopyQueueConfigRes)
	err := c.cc.Invoke(ctx, Org_CopyQueueConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetAllQueueConfigSounds(ctx context.Context, in *GetAllQueueConfigSoundsReq, opts ...grpc.CallOption) (*GetAllQueueConfigSoundsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllQueueConfigSoundsRes)
	err := c.cc.Invoke(ctx, Org_GetAllQueueConfigSounds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetQueueConfigSound(ctx context.Context, in *GetQueueConfigSoundReq, opts ...grpc.CallOption) (*GetQueueConfigSoundRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQueueConfigSoundRes)
	err := c.cc.Invoke(ctx, Org_GetQueueConfigSound_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) SetQueueConfigSound(ctx context.Context, in *SetQueueConfigSoundReq, opts ...grpc.CallOption) (*SetQueueConfigSoundRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetQueueConfigSoundRes)
	err := c.cc.Invoke(ctx, Org_SetQueueConfigSound_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) SetAllQueueConfigSoundsFromSource(ctx context.Context, in *SetAllQueueConfigSoundsFromSourceReq, opts ...grpc.CallOption) (*SetAllQueueConfigSoundsFromSourceRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAllQueueConfigSoundsFromSourceRes)
	err := c.cc.Invoke(ctx, Org_SetAllQueueConfigSoundsFromSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetUserBlocked(ctx context.Context, in *GetUserBlockedRequest, opts ...grpc.CallOption) (*GetUserBlockedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserBlockedResponse)
	err := c.cc.Invoke(ctx, Org_GetUserBlocked_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UnblockUser(ctx context.Context, in *UnblockUserRequest, opts ...grpc.CallOption) (*UnblockUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnblockUserResponse)
	err := c.cc.Invoke(ctx, Org_UnblockUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListP3UnMigratedUsers(ctx context.Context, in *ListP3UnMigratedUsersRequest, opts ...grpc.CallOption) (*ListP3UnMigratedUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListP3UnMigratedUsersResponse)
	err := c.cc.Invoke(ctx, Org_ListP3UnMigratedUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) MigrateP3User(ctx context.Context, in *MigrateP3UserRequest, opts ...grpc.CallOption) (*MigrateP3UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MigrateP3UserResponse)
	err := c.cc.Invoke(ctx, Org_MigrateP3User_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateP3UserName(ctx context.Context, in *UpdateP3UserNameRequest, opts ...grpc.CallOption) (*UpdateP3UserNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateP3UserNameResponse)
	err := c.cc.Invoke(ctx, Org_UpdateP3UserName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListOwnedUsers(ctx context.Context, in *ListOwnedUsersRequest, opts ...grpc.CallOption) (*ListOwnedUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOwnedUsersResponse)
	err := c.cc.Invoke(ctx, Org_ListOwnedUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListOwnedOrgsByOrgId(ctx context.Context, in *ListOwnedOrgsByOrgIdRequest, opts ...grpc.CallOption) (*ListOwnedOrgsByOrgIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOwnedOrgsByOrgIdResponse)
	err := c.cc.Invoke(ctx, Org_ListOwnedOrgsByOrgId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListOwnedOrgs(ctx context.Context, in *ListOwnedOrgsRequest, opts ...grpc.CallOption) (*ListOwnedOrgsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOwnedOrgsResponse)
	err := c.cc.Invoke(ctx, Org_ListOwnedOrgs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) RemoveLoginStrikes(ctx context.Context, in *RemoveLoginStrikesRequest, opts ...grpc.CallOption) (*RemoveLoginStrikesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveLoginStrikesResponse)
	err := c.cc.Invoke(ctx, Org_RemoveLoginStrikes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) RemoveUserLoginStrikes(ctx context.Context, in *RemoveUserLoginStrikesRequest, opts ...grpc.CallOption) (*RemoveUserLoginStrikesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUserLoginStrikesResponse)
	err := c.cc.Invoke(ctx, Org_RemoveUserLoginStrikes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListLoginHistory(ctx context.Context, in *ListLoginHistoryRequest, opts ...grpc.CallOption) (*ListLoginHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLoginHistoryResponse)
	err := c.cc.Invoke(ctx, Org_ListLoginHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateP3UserSids(ctx context.Context, in *UpdateP3UserSidsRequest, opts ...grpc.CallOption) (*UpdateP3UserSidsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateP3UserSidsResponse)
	err := c.cc.Invoke(ctx, Org_UpdateP3UserSids_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateAuthConnection(ctx context.Context, in *CreateAuthConnectionRequest, opts ...grpc.CallOption) (*CreateAuthConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAuthConnectionResponse)
	err := c.cc.Invoke(ctx, Org_CreateAuthConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetAuthConnectionSettings(ctx context.Context, in *GetAuthConnectionSettingsRequest, opts ...grpc.CallOption) (*GetAuthConnectionSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAuthConnectionSettingsResponse)
	err := c.cc.Invoke(ctx, Org_GetAuthConnectionSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateAuthConnectionSettings(ctx context.Context, in *UpdateAuthConnectionSettingsRequest, opts ...grpc.CallOption) (*UpdateAuthConnectionSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAuthConnectionSettingsResponse)
	err := c.cc.Invoke(ctx, Org_UpdateAuthConnectionSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteAuthConnection(ctx context.Context, in *DeleteAuthConnectionRequest, opts ...grpc.CallOption) (*DeleteAuthConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAuthConnectionResponse)
	err := c.cc.Invoke(ctx, Org_DeleteAuthConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetUserSubscription(ctx context.Context, in *GetUserSubscriptionRequest, opts ...grpc.CallOption) (*GetUserSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserSubscriptionResponse)
	err := c.cc.Invoke(ctx, Org_GetUserSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetMyUserSubscription(ctx context.Context, in *GetMyUserSubscriptionRequest, opts ...grpc.CallOption) (*GetMyUserSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMyUserSubscriptionResponse)
	err := c.cc.Invoke(ctx, Org_GetMyUserSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AddUserSubscription(ctx context.Context, in *AddUserSubscriptionRequest, opts ...grpc.CallOption) (*AddUserSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserSubscriptionResponse)
	err := c.cc.Invoke(ctx, Org_AddUserSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AddMyUserSubscription(ctx context.Context, in *AddMyUserSubscriptionRequest, opts ...grpc.CallOption) (*AddMyUserSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMyUserSubscriptionResponse)
	err := c.cc.Invoke(ctx, Org_AddMyUserSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) RemoveUserSubscription(ctx context.Context, in *RemoveUserSubscriptionRequest, opts ...grpc.CallOption) (*RemoveUserSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUserSubscriptionResponse)
	err := c.cc.Invoke(ctx, Org_RemoveUserSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) RemoveMyUserSubscription(ctx context.Context, in *RemoveMyUserSubscriptionRequest, opts ...grpc.CallOption) (*RemoveMyUserSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveMyUserSubscriptionResponse)
	err := c.cc.Invoke(ctx, Org_RemoveMyUserSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateUserSubscription(ctx context.Context, in *UpdateUserSubscriptionRequest, opts ...grpc.CallOption) (*UpdateUserSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserSubscriptionResponse)
	err := c.cc.Invoke(ctx, Org_UpdateUserSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateMyUserSubscription(ctx context.Context, in *UpdateMyUserSubscriptionRequest, opts ...grpc.CallOption) (*UpdateMyUserSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMyUserSubscriptionResponse)
	err := c.cc.Invoke(ctx, Org_UpdateMyUserSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListUserSubscriptions(ctx context.Context, in *ListUserSubscriptionsRequest, opts ...grpc.CallOption) (*ListUserSubscriptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserSubscriptionsResponse)
	err := c.cc.Invoke(ctx, Org_ListUserSubscriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListMyUserSubscriptions(ctx context.Context, in *ListMyUserSubscriptionsRequest, opts ...grpc.CallOption) (*ListMyUserSubscriptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMyUserSubscriptionsResponse)
	err := c.cc.Invoke(ctx, Org_ListMyUserSubscriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListOrgSubscriptions(ctx context.Context, in *ListOrgSubscriptionsRequest, opts ...grpc.CallOption) (*ListOrgSubscriptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrgSubscriptionsResponse)
	err := c.cc.Invoke(ctx, Org_ListOrgSubscriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetSystemEnvironmentDetails(ctx context.Context, in *GetSystemEnvironmentDetailsRequest, opts ...grpc.CallOption) (*GetSystemEnvironmentDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSystemEnvironmentDetailsResponse)
	err := c.cc.Invoke(ctx, Org_GetSystemEnvironmentDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListAgentStatisticsTemplates(ctx context.Context, in *ListAgentStatisticsTemplatesRequest, opts ...grpc.CallOption) (*ListAgentStatisticsTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentStatisticsTemplatesResponse)
	err := c.cc.Invoke(ctx, Org_ListAgentStatisticsTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateAgentStatisticsTemplate(ctx context.Context, in *CreateAgentStatisticsTemplateRequest, opts ...grpc.CallOption) (*CreateAgentStatisticsTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAgentStatisticsTemplateResponse)
	err := c.cc.Invoke(ctx, Org_CreateAgentStatisticsTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateAgentStatisticsTemplate(ctx context.Context, in *UpdateAgentStatisticsTemplateRequest, opts ...grpc.CallOption) (*UpdateAgentStatisticsTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAgentStatisticsTemplateResponse)
	err := c.cc.Invoke(ctx, Org_UpdateAgentStatisticsTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteAgentStatisticsTemplate(ctx context.Context, in *DeleteAgentStatisticsTemplateRequest, opts ...grpc.CallOption) (*DeleteAgentStatisticsTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAgentStatisticsTemplateResponse)
	err := c.cc.Invoke(ctx, Org_DeleteAgentStatisticsTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrgServer is the server API for Org service.
// All implementations must embed UnimplementedOrgServer
// for forward compatibility.
type OrgServer interface {
	// Registers a new organization
	RegisterOrganization(context.Context, *RegisterOrganizationRequest) (*RegisterOrganizationResponse, error)
	// Converts a standard organiztion to a manual one.
	// WARNING: this process cannot be reversed.
	ConvertOrgToManual(context.Context, *ConvertOrgToManualRequest) (*ConvertOrgToManualResponse, error)
	// Updates an organization
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error)
	// Archives an organization. An archived organization effectively disappears, but isn't deleted.
	ArchiveOrganization(context.Context, *ArchiveOrganizationRequest) (*ArchiveOrganizationResponse, error)
	// Restores an archived organization.
	UnArchiveOrganization(context.Context, *UnArchiveOrganizationRequest) (*UnArchiveOrganizationResponse, error)
	// Returns the list of organizations that have been archived.
	ListArchivedOrganizations(context.Context, *ListArchivedOrganizationsRequest) (*ListArchivedOrganizationsResponse, error)
	GetOrganizationProfile(context.Context, *GetOrganizationProfileRequest) (*GetOrganizationProfileResponse, error)
	GetOrganizationProfileById(context.Context, *GetOrganizationProfileByIdRequest) (*GetOrganizationProfileResponse, error)
	ListOrganizationDescriptions(context.Context, *ListOrganizationDescriptionsRequest) (*ListOrganizationDescriptionsResponse, error)
	ListRegionalOrganizations(context.Context, *ListRegionalOrganizationsRequest) (*ListRegionalOrganizationsResponse, error)
	// update an organizations owning organization.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	UpdateP3OwningOrg(context.Context, *UpdateP3OwningOrgRequest) (*UpdateP3OwningOrgResponse, error)
	// gets the owning organiztion for the given org
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	GetP3OwningOrg(context.Context, *GetP3OwningOrgRequest) (*GetP3OwningOrgResponse, error)
	ListOrganizationUserDescriptions(context.Context, *ListOrganizationUserDescriptionsRequest) (*ListOrganizationUserDescriptionsResponse, error)
	AdminListUserDescriptions(*AdminListUserDescriptionsRequest, grpc.ServerStreamingServer[AdminListUserDescriptionsResponse]) error
	ListUserDescriptions(*ListUserDescriptionsRequest, grpc.ServerStreamingServer[ListUserDescriptionsResponse]) error
	GetUserDirectory(context.Context, *GetUserDirectoryRequest) (*GetUserDirectoryResponse, error)
	// GetRegions takes nothing in the request and returns a list of all region names
	GetRegions(context.Context, *GetRegionsRequest) (*GetRegionsResponse, error)
	GetMyUserDetails(context.Context, *GetMyUserDetailsRequest) (*UserDetails, error)
	GetUserDetails(context.Context, *GetUserDetailsRequest) (*UserDetails, error)
	AdminGetUserDetails(context.Context, *AdminGetUserDetailsRequest) (*UserDetails, error)
	GetAgentUsers(context.Context, *GetAgentUsersRequest) (*GetAgentUsersResponse, error)
	// This is transitionary api. It will be removed when user api is available.
	// GetAgentSettings gets some agent settings as defined by the GetAgentSettingsRequest.
	// Required Permissions:
	// AGENT
	GetAgentSettings(context.Context, *GetAgentSettingsRequest) (*GetAgentSettingsResponse, error)
	// GetAgentProfileGroup gets a single AgentProfileGroup by given ID
	// Required Permissions:
	// ORG_VIEW
	GetAgentProfileGroup(context.Context, *GetAgentProfileGroupRequest) (*GetAgentProfileGroupResponse, error)
	// UpdateAgentProfileGroup updates an AgentProfileGroup. Can only update if user is in same org as AgentProfileGroup
	// Required Permissions:
	// ORG_EDIT
	UpdateAgentProfileGroup(context.Context, *UpdateAgentProfileGroupRequest) (*UpdateAgentProfileGroupResponse, error)
	// CreateAgentProfileGroup creates an AgentProfileGroup. Can only create if user is in same org as AgentProfileGroup
	// Required Permissions:
	// ORG_EDIT
	CreateAgentProfileGroup(context.Context, *CreateAgentProfileGroupRequest) (*CreateAgentProfileGroupResponse, error)
	// ListAgentProfileGroups lists all AgentProfileGroups for a given org
	// Required Permissions:
	// ORG_VIEW
	ListAgentProfileGroups(context.Context, *ListAgentProfileGroupsRequest) (*ListAgentProfileGroupsResponse, error)
	// DeleteAgentProfileGroup deletes a single AgentProfileGroup by given ID. Can only delete if user is in same org as AgentProfileGroup
	// Required Permissions:
	// ORG_EDIT
	DeleteAgentProfileGroup(context.Context, *DeleteAgentProfileGroupRequest) (*DeleteAgentProfileGroupResponse, error)
	// AssignAgentProfileGroups bulk assigns a list of users to a given AgentProfileGroup
	// Required Permissions:
	// ORG_EDIT
	AssignAgentProfileGroups(context.Context, *AssignAgentProfileGroupsRequest) (*AssignAgentProfileGroupsResponse, error)
	// UpdateUser updates a user as defined by the UpdateUserRequest.
	// Required Permissions: USER_EDIT (default)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// UpdateMyUser updates the currently logged in user as defined by the UpdateMyUserRequest.
	// Required Permissions: USER_EDIT_OPTIONS
	// Only some of the fields on the request message can be updated
	// for the currently logged in user: time_zone, linkback_numbers,
	// caller_ids, and default_app.
	UpdateMyUser(context.Context, *UpdateMyUserRequest) (*UpdateMyUserResponse, error)
	// UpdateUserCallerId updates a user's caller id as defined by the UpdateUserCallerIdRequest.
	// Required Permissions: USER_EDIT_AGENT_CALLER_ID
	UpdateUserCallerId(context.Context, *UpdateUserCallerIdRequest) (*UpdateUserCallerIdResponse, error)
	// CreateUser creates a new user as defined by the CreateUserRequest
	// request message.
	// Required Permissions: USER_CREATE
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// CreateUserByOrgId creates a new user as defined by the CreateUserByOrgIdRequest
	// request message to a specific org.
	// Required Permissions: CUSTOMER_SUPPORT
	CreateUserByOrgId(context.Context, *CreateUserByOrgIdRequest) (*CreateUserByOrgIdResponse, error)
	// Creates a delegated user. This should only be called by an auth0 action.
	CreateDelegatedUser(context.Context, *CreateDelegatedUserRequest) (*CreateDelegatedUserResponse, error)
	// UpdateUserPassword updates a user's password (in the same org as the current user)
	// to the password given on the request message.
	// Required Permissions: USER_EDIT (Update another user's password in the same org)
	UpdateUserPassword(context.Context, *UpdateUserPasswordRequest) (*UpdateUserPasswordResponse, error)
	// UpdateMyUserPassword updates the current user's password to the
	// password given on the request message.
	// Required Permissions: USER_EDIT_PASSWORD (Update your own password)
	UpdateMyUserPassword(context.Context, *UpdateMyUserPasswordRequest) (*UpdateMyUserPasswordResponse, error)
	// UpdateUserPasswordByOrgId updates a specific user's password
	// from a specific org to the password given on the request message.
	// Required Permissions: CUSTOMER_SUPPORT (Update a user's password from an org)
	UpdateUserPasswordByOrgId(context.Context, *UpdateUserPasswordByOrgIdRequest) (*UpdateUserPasswordByOrgIdResponse, error)
	// updates the users PasswordResetRequired field to false.
	// this should only be called by an auth0 action.
	ResetUserRequirePasswordReset(context.Context, *ResetUserRequirePasswordResetRequest) (*ResetUserRequirePasswordResetResponse, error)
	// GetUserPasswordResetLink generates a password reset link for a user
	// in the same org as the current user.
	// Required Permissions: USER_EDIT
	//
	//	USER_EDIT if user_id given on the request.
	GetUserPasswordResetLink(context.Context, *GetUserPasswordResetLinkRequest) (*GetUserPasswordResetLinkResponse, error)
	// GetMyUserPasswordResetLink generate a password reset link for the current user.
	// Required Permissions: USER_EDIT_PASSWORD
	GetMyUserPasswordResetLink(context.Context, *GetMyUserPasswordResetLinkRequest) (*GetMyUserPasswordResetLinkResponse, error)
	// GetUserPasswordResetLinkByOrgId generates a password reset link
	// for a specific user in a specific org.
	// Required Permissions: CUSTOMER_SUPPORT
	GetUserPasswordResetLinkByOrgId(context.Context, *GetUserPasswordResetLinkByOrgIdRequest) (*GetUserPasswordResetLinkByOrgIdResponse, error)
	// Returns whether or not the given user's email is verified.
	// Required Permissions: USER_EDIT
	GetUserEmailVerified(context.Context, *GetUserEmailVerifiedRequest) (*GetUserEmailVerifiedResponse, error)
	// GetUserEmailVerifiedByOrgId returns whether or not the given user's email
	// from a specific org is verified.
	// Required Permissions: CUSTOMER_SUPPORT
	GetUserEmailVerifiedByOrgId(context.Context, *GetUserEmailVerifiedByOrgIdRequest) (*GetUserEmailVerifiedByOrgIdResponse, error)
	// Sends a verfication email to the given users email.
	SendUserVerificationEmailByOrgId(context.Context, *SendUserVerificationEmailByOrgIdRequest) (*SendUserVerificationEmailByOrgIdResponse, error)
	// Sends a verfication email to the given users email.
	SendUserVerificationEmail(context.Context, *SendUserVerificationEmailRequest) (*SendUserVerificationEmailResponse, error)
	// Sets the given user's to verified without needing to send a verification email.
	ManualUserEmailVerificationByOrgId(context.Context, *ManualUserEmailVerificationByOrgIdRequest) (*ManualUserEmailVerificationByOrgIdResponse, error)
	// Sets the given user's to verified without needing to send a verification email.
	ManualUserEmailVerification(context.Context, *ManualUserEmailVerificationRequest) (*ManualUserEmailVerificationResponse, error)
	// GetTempUserToken authenticates impersonation and generates token
	// to be used for the current user.
	// Required Permissions: None, anyone authorized can use this
	GetTempUserToken(context.Context, *GetTempUserTokenReq) (*GetTempUserTokenRes, error)
	// GetTempUserTokenByUserId authenticates impersonation and generates token
	// to be used for the user with the given user_id.
	// Required Permissions: CUSTOMER_SUPPORT
	GetTempUserTokenByUserId(context.Context, *GetTempUserTokenByUserIdReq) (*GetTempUserTokenByUserIdRes, error)
	GetCountriesList(context.Context, *GetCountriesListRequest) (*GetCountriesListResponse, error)
	GetAdminClientPreferences(context.Context, *GetAdminClientPreferencesRequest) (*GetAdminClientPreferencesResponse, error)
	UpdateAdminClientPreferences(context.Context, *UpdateAdminClientPreferencesRequest) (*UpdateAdminClientPreferencesResponse, error)
	GetPermissions(context.Context, *GetPermissionsRequest) (*GetPermissionsResponse, error)
	// RevokeAccountOwnerPermissionFromUser revokes the
	// account owner permission for the given user
	RevokeAccountOwnerPermissionFromUser(context.Context, *RevokeAccountOwnerPermissionFromUserRequest) (*RevokeAccountOwnerPermissionFromUserResponse, error)
	// UpdateUserDisabled updates a specified user to disabled or enabled. A disabled user cannot log in.
	UpdateUserDisabled(context.Context, *UpdateUserDisabledRequest) (*UpdateUserDisabledResponse, error)
	// UpdateUserDisabledByOrgId updates a specified user in a specific organization to disabled or enabled.
	UpdateUserDisabledByOrgId(context.Context, *UpdateUserDisabledByOrgIdRequest) (*UpdateUserDisabledByOrgIdResponse, error)
	// UpdateBulkUsersDisabled updates every given user_id to be disabled or enabled. The returned list of updated_ids contains every id that was successfully updated.
	// Required Permissions:
	//   - USER_EDIT
	UpdateBulkUsersDisabled(context.Context, *UpdateBulkUsersDisabledRequest) (*UpdateBulkUsersDisabledResponse, error)
	// Returns the billing data for the given org. Billing data
	// will only be included for countries present on the org's
	// allowed countries preference.
	// Errors:
	//   - grpc.InvalidArgument: The org_id on the request was invalid.
	//   - grpc.NotFound: The given org_id did not exist.
	//   - grpc.Internal: An unexpected error occurred while getting the orgs billing settings.
	GetOrgBillingSettingsByOrgId(context.Context, *GetOrgBillingSettingsByOrgIdRequest) (*GetOrgBillingSettingsByOrgIdResponse, error)
	// Returns the billing data for the current org. Billing data
	// will only be included for countries present on the org's
	// allowed countries preference.
	// Errors:
	//   - grpc.InvalidArgument: The org_id on the request was invalid.
	//   - grpc.NotFound: The given org_id did not exist.
	//   - grpc.Internal: An unexpected error occurred while getting the orgs billing settings.
	GetOrgBillingSettings(context.Context, *GetOrgBillingSettingsRequest) (*GetOrgBillingSettingsResponse, error)
	// Updates the given orgs billing settings as defined by the info
	// given on the request message. Only fields that are given on the
	// field mask will be updated.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.InvalidArgument: A field on the request was invalid.
	//   - grpc.NotFound: The given org_id did not exist.
	//   - grpc.Internal: An unexpected error occurred while updating the orgs billing settings.
	SetOrgBillingSettings(context.Context, *SetOrgBillingSettingsRequest) (*SetOrgBillingSettingsResponse, error)
	// Adds a single billing region override for the given orgs billing settings.
	// If an override already exists for the given region it will be updated.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.InvalidArgument: A field on the request was invalid.
	//   - grpc.NotFound: The given org_id did not exist.
	//   - grpc.Internal: An unexpected error occurred while adding the override.
	AddOrgBillingOverride(context.Context, *AddOrgBillingOverrideRequest) (*AddOrgBillingOverrideResponse, error)
	// Removes a single billing region override for the given orgs billing settings.
	// If the region override doesn't exist the rpcs will just do nothing.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.InvalidArgument: The given org_id was invalid.
	//   - grpc.NotFound: The given org_id did not exist.
	//   - grpc.Internal: An unexpected error occurred while removing the override.
	RemoveOrgBillingOverride(context.Context, *RemoveOrgBillingOverrideRequest) (*RemoveOrgBillingOverrideResponse, error)
	// Returns the system default billing rates.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	GetSystemDefaultBillingRates(context.Context, *GetSystemDefaultBillingRatesRequest) (*GetSystemDefaultBillingRatesResponse, error)
	// ListPermissionGroupsByOrgId returns the list of an org's permission groups.
	ListPermissionGroupsByOrgId(context.Context, *ListPermissionGroupsByOrgIdRequest) (*ListPermissionGroupsByOrgIdResponse, error)
	// ListPermissionGroups returns the list of an org's permission groups.
	ListPermissionGroups(context.Context, *ListPermissionGroupsRequest) (*ListPermissionGroupsResponse, error)
	// CreatePermissionGroup creates a new permission group for the caller's organization.
	CreatePermissionGroup(context.Context, *CreatePermissionGroupRequest) (*CreatePermissionGroupResponse, error)
	// UpdatePermissionGroup updates a permission group by id for the caller's organization.
	UpdatePermissionGroup(context.Context, *UpdatePermissionGroupRequest) (*UpdatePermissionGroupResponse, error)
	// DeletePermissionGroup deletes a permission group by id for the caller's organization.
	DeletePermissionGroup(context.Context, *DeletePermissionGroupRequest) (*DeletePermissionGroupResponse, error)
	// Assigns a user to a acount owner permission group.
	AssignUserToAccountOwnerPermissionGroup(context.Context, *AssignUserToAccountOwnerPermissionGroupRequest) (*AssignUserToAccountOwnerPermissionGroupResponse, error)
	// Assigns a permission group to another user.
	// Requires that all three of permission group, calling user, and user being assigned to be of the same organization.
	// Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
	AssignUserPermissionGroup(context.Context, *AssignUserPermissionGroupRequest) (*AssignUserPermissionGroupResponse, error)
	// Assigns a permission group to multiple users.
	// Requires that all three of permission group, calling user, and user being assigned to be of the same organization.
	// Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
	AssignUsersPermissionGroup(context.Context, *AssignUsersPermissionGroupRequest) (*AssignUsersPermissionGroupResponse, error)
	// Assigns permission group(s) to another user.
	// Requires that all three of permission group, calling user, and user being assigned to be of the same organization.
	// Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
	UpdateUserNeoPermissionGroups(context.Context, *UpdateUserNeoPermissionGroupsRequest) (*UpdateUserNeoPermissionGroupsResponse, error)
	// Revokes a permission group from another user.
	// Requires that all three of permission group, calling user, and user being revoked to be of the same organization.
	// Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
	RevokeUserPermissionGroup(context.Context, *RevokeUserPermissionGroupRequest) (*RevokeUserPermissionGroupResponse, error)
	// Revokes a permission group to multiple users.
	// Requires that all three of permission group, calling user, and user being revoked to be of the same organization.
	// Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
	RevokeUsersPermissionGroup(context.Context, *RevokeUsersPermissionGroupRequest) (*RevokeUsersPermissionGroupResponse, error)
	// InitDefaultPermissionGroups initializes the default read only permission groups for the callers organization.
	// Idempotent call. Returns the default permission groups for the organization.
	InitDefaultPermissionGroups(context.Context, *InitDefaultPermissionGroupsRequest) (*InitDefaultPermissionGroupsResponse, error)
	// Adds a single permission to an organization's Account Owner Group.
	AddPermissionToAccountOwnerPermissionGroup(context.Context, *AddPermissionToAccountOwnerPermissionGroupRequest) (*AddPermissionToAccountOwnerPermissionGroupResponse, error)
	// Adds a single permission to an organization's Account Owner Group.
	RevokePermissionToAccountOwnerPermissionGroup(context.Context, *RevokePermissionToAccountOwnerPermissionGroupRequest) (*RevokePermissionToAccountOwnerPermissionGroupResponse, error)
	// Adds a single permission to an organization's default Super User Group.
	// Required Permissions:
	//   - TCN_ADMIN_SETTINGS
	AddPermissionToOrgDefaultGroup(context.Context, *AddPermissionToOrgDefaultGroupRequest) (*AddPermissionToOrgDefaultGroupResponse, error)
	// Removes a single permission from an organization's default Super User Group.
	// Required Permissions:
	//   - TCN_ADMIN_SETTINGS
	RemovePermissionFromOrgDefaultGroup(context.Context, *RemovePermissionFromOrgDefaultGroupRequest) (*RemovePermissionFromOrgDefaultGroupResponse, error)
	// Returns an organization's default Super User Group.
	// Required Permissions:
	//   - TCN_ADMIN_SETTINGS
	GetOrgDefaultSuperUserGroup(context.Context, *GetOrgDefaultSuperUserGroupRequest) (*GetOrgDefaultSuperUserGroupResponse, error)
	// ListP3PermissionGroupsByOrgId returns the list of an org's P3 permission groups.
	ListP3PermissionGroupsByOrgId(context.Context, *ListP3PermissionGroupsByOrgIdRequest) (*ListP3PermissionGroupsByOrgIdResponse, error)
	// ListP3PermissionGroups returns the list of an org's P3 permission groups.
	ListP3PermissionGroups(context.Context, *ListP3PermissionGroupsRequest) (*ListP3PermissionGroupsResponse, error)
	// AddUserRegion to a Users Accessible Regions
	AddUserRegion(context.Context, *AddUserRegionRequest) (*AddUserRegionResponse, error)
	// RemoveUserRegion from a Users Accessible Regions
	RemoveUserRegion(context.Context, *RemoveUserRegionRequest) (*RemoveUserRegionResponse, error)
	// Creates new p3 permission group
	CreateP3PermissionGroup(context.Context, *CreateP3PermissionGroupRequest) (*CreateP3PermissionGroupResponse, error)
	// Update p3 permission group
	UpdateP3PermissionGroupByOrgId(context.Context, *UpdateP3PermissionGroupByOrgIdRequest) (*UpdateP3PermissionGroupByOrgIdResponse, error)
	// Update p3 permission group
	UpdateP3PermissionGroup(context.Context, *UpdateP3PermissionGroupRequest) (*UpdateP3PermissionGroupResponse, error)
	// Delete new p3 permission group
	DeleteP3PermissionGroup(context.Context, *DeleteP3PermissionGroupRequest) (*DeleteP3PermissionGroupResponse, error)
	// Assign one or many users a p3 permission group
	AssignUsersP3PermissionGroup(context.Context, *AssignUsersP3PermissionGroupRequest) (*AssignUsersP3PermissionGroupResponse, error)
	// AddLoginToUser Creates new login for a given user
	AddLoginToUser(context.Context, *AddLoginToUserRequest) (*AddLoginToUserResponse, error)
	// Revoke a p3 permission group to another user(s).
	// Requires that permission group and user(s) being assigned to be of the same organization.
	// Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
	RevokeUsersP3PermissionGroup(context.Context, *RevokeUsersP3PermissionGroupRequest) (*RevokeUsersP3PermissionGroupResponse, error)
	// GetContactPreferences returns all contact preferences for client TODO: will replace ContactList above
	GetContactPreferences(context.Context, *GetContactPreferencesRequest) (*GetContactPreferencesResponse, error)
	// UpdateContactPreferences update fields for all contact preferences for client
	UpdateContactPreferences(context.Context, *UpdateContactPreferencesRequest) (*UpdateContactPreferencesResponse, error)
	// Returns all client compliance preferences
	GetCompliancePreferences(context.Context, *GetCompliancePreferencesRequest) (*GetCompliancePreferencesResponse, error)
	// Updates all client Compliance preferences
	UpdateCompliancePreferences(context.Context, *UpdateCompliancePreferencesRequest) (*UpdateCompliancePreferencesResponse, error)
	// GetAgentPreferences returns all client agent preferences
	GetAgentPreferences(context.Context, *GetAgentPreferencesRequest) (*GetAgentPreferencesResponse, error)
	// UpdateAgentPreferences updates client agent preferences
	UpdateAgentPreferences(context.Context, *UpdateAgentPreferencesRequest) (*UpdateAgentPreferencesResponse, error)
	// GetOrganizationPreferences returns preferences for the organization tab
	GetOrganizationPreferences(context.Context, *GetOrganizationPreferencesRequest) (*GetOrganizationPreferencesResponse, error)
	// UpdateOrganizationPreferences updates preferences for the organization tab
	UpdateOrganizationPreferences(context.Context, *UpdateOrganizationPreferencesRequest) (*UpdateOrganizationPreferencesResponse, error)
	// GetSchedulePreferences returns all schedule preferences for an org.
	GetSchedulePreferences(context.Context, *GetSchedulePreferencesRequest) (*GetSchedulePreferencesResponse, error)
	// UpdateSchedulePreferences returns all schedule preferences for an org.
	UpdateSchedulePreferences(context.Context, *UpdateSchedulePreferencesRequest) (*UpdateSchedulePreferencesResponse, error)
	// GetBusinessPreferences returns all business intelligence and associated analytic preferences
	GetBusinessPreferences(context.Context, *GetBusinessPreferencesRequest) (*GetBusinessPreferencesResponse, error)
	// UpdateBusinessPreferences updates all business intelligence and associated analytic preferences
	UpdateBusinessPreferences(context.Context, *UpdateBusinessPreferencesRequest) (*UpdateBusinessPreferencesResponse, error)
	// GetEndOfDayPreferences returns a time (hour 1-24) for each day of the week.
	GetEndOfDayPreferences(context.Context, *GetEndOfDayPreferencesRequest) (*GetEndOfDayPreferencesResponse, error)
	// UpdateEndOfDayPreferences update fields for a time (hour 1-24) for each day of the week.
	UpdateEndOfDayPreferences(context.Context, *UpdateEndOfDayPreferencesRequest) (*UpdateEndOfDayPreferencesResponse, error)
	// GetReportFilterPreferences returns preferences for the organization tab
	GetReportFilterPreferences(context.Context, *GetFilterPreferencesRequest) (*GetFilterPreferencesResponse, error)
	// UpdateReportFilterPreferences updates preferences for the filter tab
	UpdateReportFilterPreferences(context.Context, *UpdateFilterPreferencesRequest) (*UpdateFilterPreferencesResponse, error)
	// GetPhonePreferences returns all phone and recording preferences for an org.
	GetPhonePreferences(context.Context, *GetPhonePreferencesRequest) (*GetPhonePreferencesResponse, error)
	// UpdatePhonePreferences updates phone and recording preferences for an org.
	UpdatePhonePreferences(context.Context, *UpdatePhonePreferencesRequest) (*UpdatePhonePreferencesResponse, error)
	// GetDashboardGeneralPreferences returns all dashboard general preferences for an org.
	GetDashboardGeneralPreferences(context.Context, *GetDashboardGeneralPreferencesRequest) (*GetDashboardGeneralPreferencesResponse, error)
	// UpdateDashboardGeneralPreferences updates dashboard General preferences for an org.
	UpdateDashboardGeneralPreferences(context.Context, *UpdateDashboardGeneralPreferencesRequest) (*UpdateDashboardGeneralPreferencesResponse, error)
	// GetWebhookPreferences returns all webhook preferences for an org.
	GetWebhookPreferences(context.Context, *GetWebhookPreferencesRequest) (*GetWebhookPreferencesResponse, error)
	// UpdateWebhookPreferences updates webhook preferences for an org.
	UpdateWebhookPreferences(context.Context, *UpdateWebhookPreferencesRequest) (*UpdateWebhookPreferencesResponse, error)
	// GetBroadcastPreferences returns all broadcast options for campaign preferences for an org.
	GetBroadcastPreferences(context.Context, *GetBroadcastPreferencesRequest) (*GetBroadcastPreferencesResponse, error)
	// UpdateBroadcastPreferences updates broadcast options for campaign preferences for an org.
	UpdateBroadcastPreferences(context.Context, *UpdateBroadcastPreferencesRequest) (*UpdateBroadcastPreferencesResponse, error)
	// GetAuthenticationPreferences returns all authentication options for an org.
	GetAuthenticationPreferences(context.Context, *GetAuthenticationPreferencesRequest) (*GetAuthenticationPreferencesResponse, error)
	// UpdateAuthenticationPreferences updates authentication preferences for an org.
	UpdateAuthenticationPreferences(context.Context, *UpdateAuthenticationPreferencesRequest) (*UpdateAuthenticationPreferencesResponse, error)
	// GetRecordingPreferences returns all recording options for an org.
	GetRecordingPreferences(context.Context, *GetRecordingPreferencesRequest) (*GetRecordingPreferencesResponse, error)
	// UpdateRecordingPreferences updates Recording preferences for an org.
	UpdateRecordingPreferences(context.Context, *UpdateRecordingPreferencesRequest) (*UpdateRecordingPreferencesResponse, error)
	// GetDashboardQueuePreferences returns the Dashboard Queue table preferences.
	GetDashboardQueuePreferences(context.Context, *GetDashboardQueuePreferencesRequest) (*GetDashboardQueuePreferencesResponse, error)
	// UpdateDashboardQueuePreferences updates the Dashboard Queue table preferences.
	UpdateDashboardQueuePreferences(context.Context, *UpdateDashboardQueuePreferencesRequest) (*UpdateDashboardQueuePreferencesResponse, error)
	// GetAgentQuickViewPreferences returns the diplay templates for the client
	GetAgentQuickViewPreferences(context.Context, *GetAgentQuickViewPreferencesRequest) (*GetAgentQuickViewPreferencesResponse, error)
	// GetVoiceAnalyticsPreferences returns the all preferences for voice analytics
	GetVoiceAnalyticsPreferences(context.Context, *GetVoiceAnalyticsPreferencesRequest) (*GetVoiceAnalyticsPreferencesResponse, error)
	// UpdateVoiceAnalyticsPreferences updates the all preferences except for enabled for voice analytics
	UpdateVoiceAnalyticsPreferences(context.Context, *UpdateVoiceAnalyticsPreferencesRequest) (*UpdateVoiceAnalyticsPreferencesResponse, error)
	// UpdateVoiceAnalyticsPreferencesEnabled updates the enabled preferences for voice analytics
	UpdateVoiceAnalyticsPreferencesEnabled(context.Context, *UpdateVoiceAnalyticsPreferencesEnabledRequest) (*UpdateVoiceAnalyticsPreferencesEnabledResponse, error)
	// GetScorecardsPreferences returns the all preferences for scorecards
	GetScorecardsPreferences(context.Context, *GetScorecardsPreferencesRequest) (*GetScorecardsPreferencesResponse, error)
	// GetScorecardsPreferences updates the all preferences for scorecards
	UpdateScorecardsPreferences(context.Context, *UpdateScorecardsPreferencesRequest) (*UpdateScorecardsPreferencesResponse, error)
	// GetEmailSmsPreferences returns the all preferences for email and sms
	GetEmailSmsPreferences(context.Context, *GetEmailSmsPreferencesRequest) (*GetEmailSmsPreferencesResponse, error)
	// GetEmailSmsPreferences updates the all preferences for email and sms
	UpdateEmailSmsPreferences(context.Context, *UpdateEmailSmsPreferencesRequest) (*UpdateEmailSmsPreferencesResponse, error)
	// EditAgentQuickViewPreferences return nil,error
	EditAgentQuickViewPreferences(context.Context, *EditAgentQuickViewPreferencesRequest) (*EditAgentQuickViewPreferencesResponse, error)
	// EditBackofficeThemePreference returns nil, error
	// changes the Client Skin client property
	EditBackofficeThemePreference(context.Context, *EditBackofficeThemePreferenceRequest) (*EditBackofficeThemePreferenceResponse, error)
	GetBackofficeThemePreference(context.Context, *GetBackofficeThemePreferenceRequest) (*GetBackofficeThemePreferenceResponse, error)
	// AcceptLinkbackRecordingTerms controls acknowledgement for linkback recording terms and conditions
	AcceptLinkbackRecordingTerms(context.Context, *AcceptLinkbackRecordingTermsRequest) (*AcceptLinkbackRecordingTermsResponse, error)
	// LinkbackUpdateBroadcastTemplates updates broadcast template action parameters pertaining to linkback recording
	LinkbackUpdateBroadcastTemplates(context.Context, *LinkbackUpdateBroadcastTemplatesRequest) (*LinkbackUpdateBroadcastTemplatesResponse, error)
	// RecordEmailUnsubscribeAcknowledgement inserts an activity log when the client acknowledges responsibility
	// for their own email unsubscribe links.
	RecordEmailUnsubscribeAcknowledgement(context.Context, *RecordEmailUnsubscribeAcknowledgementRequest) (*RecordEmailUnsubscribeAcknowledgementResponse, error)
	// ClearEmailUnsubscribeAcknowledgement inserts an activity log when the client clears acknowledgement for
	// their own email unsubscribe links.
	ClearEmailUnsubscribeAcknowledgement(context.Context, *ClearEmailUnsubscribeAcknowledgementRequest) (*ClearEmailUnsubscribeAcknowledgementResponse, error)
	// Creates a new WebLinkTemplate as defined by request message CreateWebLinkTemplateRequest.
	// Required Permissions:
	//
	//	ORG_EDIT
	CreateWebLinkTemplate(context.Context, *CreateWebLinkTemplateRequest) (*CreateWebLinkTemplateResponse, error)
	// List every WebLinkTemplate.
	// Required Permissions:
	//
	//	ORG_VIEW
	ListWebLinkTemplates(context.Context, *ListWebLinkTemplatesRequest) (*ListWebLinkTemplatesResponse, error)
	// Get one WebLinkTemplate with the given web_link_template_id.
	// Required Permissions:
	//
	//	ORG_VIEW
	GetWebLinkTemplate(context.Context, *GetWebLinkTemplateRequest) (*GetWebLinkTemplateResponse, error)
	// Updates the WebLinkTemplate with the given web_link_template_id.
	// Required Permissions:
	//
	//	ORG_EDIT
	UpdateWebLinkTemplate(context.Context, *UpdateWebLinkTemplateRequest) (*UpdateWebLinkTemplateResponse, error)
	// Deletes the WebLinkTemplate with the given web_link_template_id.
	// Required Permissions:
	//
	//	ORG_EDIT
	DeleteWebLinkTemplate(context.Context, *DeleteWebLinkTemplateRequest) (*DeleteWebLinkTemplateResponse, error)
	// Creates a new AgentTriggerTemplate as defined by request message CreateAgentTriggerTemplateRequest.
	// The id field on the request message will be generated as part of
	// this method. If the id field is set it WILL be overwritten.
	// Required Permissions:
	//
	//	ORG_EDIT
	CreateAgentTriggerTemplate(context.Context, *CreateAgentTriggerTemplateRequest) (*CreateAgentTriggerTemplateResponse, error)
	// Returns a list of every AgentTriggerTemplate for the given
	// hunt_group_sid on the request.
	// Requiree Permissions:
	//
	//	ORG_VIEW
	ListAgentTriggerTemplates(context.Context, *ListAgentTriggerTemplatesRequest) (*ListAgentTriggerTemplatesResponse, error)
	// Returns one AgentTriggerTemplate with the id given on the request message.
	// Required Permissions:
	//
	//	ORG_VIEW
	GetAgentTriggerTemplate(context.Context, *GetAgentTriggerTemplateRequest) (*GetAgentTriggerTemplateResponse, error)
	// Updates the AgentTriggerTemplate with the id given on the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	UpdateAgentTriggerTemplate(context.Context, *UpdateAgentTriggerTemplateRequest) (*UpdateAgentTriggerTemplateResponse, error)
	// Deletes the AgentTriggerTemplate with the id given on the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	DeleteAgentTriggerTemplate(context.Context, *DeleteAgentTriggerTemplateRequest) (*DeleteAgentTriggerTemplateResponse, error)
	// Creates a new ClientInfoDisplayTemplate as defined by request
	// message CreateClientInfoDisplayRequest.
	// Required Permissions:
	//
	//	ORG_EDIT
	CreateClientInfoDisplayTemplate(context.Context, *CreateClientInfoDisplayTemplateRequest) (*CreateClientInfoDisplayTemplateResponse, error)
	// Returns a list of every ClientInfoDisplayTemplate.
	// Required Permissions:
	//
	//	ORG_EDIT
	ListClientInfoDisplayTemplates(context.Context, *ListClientInfoDisplayTemplatesRequest) (*ListClientInfoDisplayTemplatesResponse, error)
	// Updates the ClientInfoDisplayTemplate as defined by request
	// message UpdateClientIntoDisplayTemplateRequest.
	// Required Permissions:
	//
	//	ORG_VIEW
	UpdateClientInfoDisplayTemplate(context.Context, *UpdateClientInfoDisplayTemplateRequest) (*UpdateClientInfoDisplayTemplateResponse, error)
	// Deletes the ClientInfoDisplayTemplate with the id given on the request
	// message.
	// Required Permissions:
	//
	//	ORG_EDIT
	DeleteClientInfoDisplayTemplate(context.Context, *DeleteClientInfoDisplayTemplateRequest) (*DeleteClientInfoDisplayTemplateResponse, error)
	// Returns one ClientInfoDisplayTemplate with the id given on the
	// request message.
	//
	//	Required Permissions:
	//	  ORG_VIEW
	GetClientInfoDisplayTemplate(context.Context, *GetClientInfoDisplayTemplateRequest) (*GetClientInfoDisplayTemplateResponse, error)
	// Returns a slice of agent pause codes.
	ListAgentPauseCodes(context.Context, *ListAgentPauseCodesRequest) (*ListAgentPauseCodesResponse, error)
	// Creates a new Agent Pause Code as defined by the request message.
	// Errors:
	//   - grpc.InvalidArgument: The pause_code field was not set, or the the pause_code.codes field is an empty list.
	//   - grpc.Internal: an error occurred while marshalling the pause_code into an xml string.
	CreateAgentPauseCode(context.Context, *CreateAgentPauseCodeRequest) (*CreateAgentPauseCodeResponse, error)
	// Updates an Agent Pause Code with the xml_client_property_sid given on
	// the pause_code in the request message as defined by the other fields
	// on the pause_code message.
	// Required Permissions:
	//
	//	AGENT_MANAGEMENT
	//	Actual permission checked is ORG_EDIT??
	//
	// Errors:
	//   - grpc.InvalidArgument: The pause_code field was not set or the pause_code.codes field was an empty list.
	//   - grpc.Internal: an error occurred while marshalling the pause_code into an xml string.
	UpdateAgentPauseCode(context.Context, *UpdateAgentPauseCodeRequest) (*UpdateAgentPauseCodeResponse, error)
	// Deletes an Agent Pause Code with the sid given on the request message.
	// Errors:
	//   - grpc.InvalidArgument: The xml_client_property_sid field is invalid.
	DeleteAgentPauseCode(context.Context, *DeleteAgentPauseCodeRequest) (*DeleteAgentPauseCodeResponse, error)
	// Returns a slice of custom report filters belonging to client_sid.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.NotFound: There is no entry matching the requested client_sid.
	ListCustomReportFilters(context.Context, *ListCustomReportFiltersRequest) (*ListCustomReportFiltersResponse, error)
	// Creates a new custom report filter as defined by the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.InvalidArgument: The custom report filter has an empty name or no filtering parameters.
	//   - grpc.Internal: An error occurred marshalling the custom report filter into an xml string.
	CreateCustomReportFilter(context.Context, *CreateCustomReportFilterRequest) (*CreateCustomReportFilterResponse, error)
	// Updates a custom report filter with the requested xml_client_property_sid
	// with the report filter in the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.InvalidArgument: The pause_code field was not set or the pause_code.codes field was an empty list.
	//   - grpc.Internal: an error occurred while marshalling the pause_code into an xml string.
	UpdateCustomReportFilter(context.Context, *UpdateCustomReportFilterRequest) (*UpdateCustomReportFilterResponse, error)
	// Deletes a custom report filter with the sid given on the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.InvalidArgument: The xml_client_property_sid field is invalid.
	DeleteCustomReportFilter(context.Context, *DeleteCustomReportFilterRequest) (*DeleteCustomReportFilterResponse, error)
	// Returns a slice of hunt group scripts belonging to the client_sid.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.NotFound: There is no entry matching the requested client_sid.
	ListAgentResponseGroups(context.Context, *ListAgentResponseGroupsRequest) (*ListAgentResponseGroupsResponse, error)
	// Returns a slice of last template element scripts belonging to the client_sid.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.NotFound: There is no entry matching the requested client_sid.
	ListLastTemplateElements(context.Context, *ListLastTemplateElementsRequest) (*ListLastTemplateElementsResponse, error)
	// Lists the names of the custom queue configs.
	// Errors:
	//   - grpc.Internal: An error occurred while getting the config names.
	//   - grpc.NotFound: The given @org_id was not found (if @org_id is NOT empty).
	ListQueueConfigs(context.Context, *ListQueueConfigsReq) (*ListQueueConfigsRes, error)
	// Lists the names of the custom queue configs.
	// Errors:
	//   - grpc.Internal: An error occurred while getting the config names.
	//   - grpc.NotFound: The given @org_id was not found (if @org_id is NOT empty).
	ListQueueConfigsByOrgId(context.Context, *ListQueueConfigsByOrgIdReq) (*ListQueueConfigsByOrgIdRes, error)
	// Deletes a queue config with the given @client_sid and @config_name.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while removing the config.
	//   - grpc.InvalidArgument: the config_name was invalid.
	DeleteQueueConfig(context.Context, *DeleteQueueConfigReq) (*DeleteQueueConfigRes, error)
	// Gets the details for the queue config for the given @client_sid with
	// the given @name. If @merge is true, the config data will be merged
	// with the default config data.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred getting the config data.
	//   - grpc.InvalidArgument: the given config name was invalid.
	GetQueueConfig(context.Context, *GetQueueConfigReq) (*GetQueueConfigRes, error)
	// Creates a queue config as defined by the @config given
	// on the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while saving the config.
	//   - grpc.InvalidArgument: the given config was invalid.
	CreateQueueConfig(context.Context, *CreateQueueConfigReq) (*CreateQueueConfigRes, error)
	// Updates a new queue config as defined by the @config given
	// on the request message.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.NotFound: The name of the given config could not be found.
	//   - grpc.Internal: An unexpected error occurred while saving the config.
	//   - grpc.InvalidArgument: the given config was invalid.
	UpdateQueueConfig(context.Context, *UpdateQueueConfigReq) (*UpdateQueueConfigRes, error)
	// Copies a queue config belonging to one organization to another.
	// The queue config with the @from_name will be copied from the
	// organization with the @from_org_id to the organization with the
	// @to_org_id under the new @to_name.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while copying the config.
	//   - grpc.InvalidArgument: A field on the request message was invalid.
	//   - grpc.NotFound: The @to_org_id, @from_org_id, or @from_name was not found.
	//   - grpc.AlreadyExists: The @to_name already exists for the @to_org_id.
	CopyQueueConfig(context.Context, *CopyQueueConfigReq) (*CopyQueueConfigRes, error)
	// Returns the url of a downloadable zip file containing every
	// sound for the given queue config.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while zipping the files.
	//   - grpc.NotFound: The given queue config was not found.
	GetAllQueueConfigSounds(context.Context, *GetAllQueueConfigSoundsReq) (*GetAllQueueConfigSoundsRes, error)
	// Returns the url of a downladable wav file for the given config's
	// sound matching the given sound enum. Leaving the config field empty
	// will look up the sound for the account default config.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurrec while getting the
	//     downloadable file url.
	//   - grpc.NotFound: The given queue config was not found or the sound
	//     was not found for the config.
	GetQueueConfigSound(context.Context, *GetQueueConfigSoundReq) (*GetQueueConfigSoundRes, error)
	// Sets the given sound for the config to one of the uploaded
	// sound files in the clients upload folder matching the
	// given file_name on the request. Leaving the config field empty
	// will set the sound for the account default config.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while updating
	//     the configs sound.
	//   - gprc.NotFound: The given queue config was not found or the
	//     sound file was not found for the client.
	//   - grpc.InvalidArgument: The file_name on the request was invalid.
	SetQueueConfigSound(context.Context, *SetQueueConfigSoundReq) (*SetQueueConfigSoundRes, error)
	// Sets every sound for a given config by copying them from
	// another config OR by copying them from a default sound set
	// identified by language and gender. Empty config names will be
	// treated as the account default config.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors
	//   - grpc.Internal: An unexpected error occurred while updating
	//     all sounds for the given to_config.
	//   - grpc.NotFound: The given to_config or from.config (if used)
	//     could not be found or the default sound set for the given
	//     gender/language identifier could not be found.
	//   - grpc.InvalidArgument: The to_config and from.config contained
	//     the same value. (If from.config was used)
	SetAllQueueConfigSoundsFromSource(context.Context, *SetAllQueueConfigSoundsFromSourceReq) (*SetAllQueueConfigSoundsFromSourceRes, error)
	// Checks a user's blocked status.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while getting the user.
	//   - grpc.InvalidArgument: The user_id on the request was invalid.
	GetUserBlocked(context.Context, *GetUserBlockedRequest) (*GetUserBlockedResponse, error)
	// Unblocks the given user.
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	//
	// Errors:
	//   - grpc.Internal: An unexpected error occurred while unblocking the user.
	//   - grpc.InvalidArgument: The user_id on the request was invalid.
	UnblockUser(context.Context, *UnblockUserRequest) (*UnblockUserResponse, error)
	// List all users who only exist in skunk and have not yet been migrated
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	ListP3UnMigratedUsers(context.Context, *ListP3UnMigratedUsersRequest) (*ListP3UnMigratedUsersResponse, error)
	// Migrates a login or agent from backoffice to firestore
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	MigrateP3User(context.Context, *MigrateP3UserRequest) (*MigrateP3UserResponse, error)
	// Updates the username in skunk only for a agent or login
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	UpdateP3UserName(context.Context, *UpdateP3UserNameRequest) (*UpdateP3UserNameResponse, error)
	// Gets all users under the p3 hierarchy
	// Required Permissions:
	//
	//	OWNING_ORG_IMITATION
	ListOwnedUsers(context.Context, *ListOwnedUsersRequest) (*ListOwnedUsersResponse, error)
	// Gets all orgs under the p3 hierarchy
	ListOwnedOrgsByOrgId(context.Context, *ListOwnedOrgsByOrgIdRequest) (*ListOwnedOrgsByOrgIdResponse, error)
	// Gets all orgs under the p3 hierarchy
	ListOwnedOrgs(context.Context, *ListOwnedOrgsRequest) (*ListOwnedOrgsResponse, error)
	// Removed login strike from list of given login_log_sids
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	RemoveLoginStrikes(context.Context, *RemoveLoginStrikesRequest) (*RemoveLoginStrikesResponse, error)
	// Removed login strikes by user_id
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	RemoveUserLoginStrikes(context.Context, *RemoveUserLoginStrikesRequest) (*RemoveUserLoginStrikesResponse, error)
	// Lists user login history by ip or user_id
	// Required Permissions:
	//
	//	CUSTOMER_SUPPORT
	ListLoginHistory(context.Context, *ListLoginHistoryRequest) (*ListLoginHistoryResponse, error)
	// Updates a users agentsid and loginsid
	// Required Permissions:
	//
	//	TCN_ADMIN_SETTINGS
	UpdateP3UserSids(context.Context, *UpdateP3UserSidsRequest) (*UpdateP3UserSidsResponse, error)
	// CreateAuthConnection creates a new auth0 connection.
	CreateAuthConnection(context.Context, *CreateAuthConnectionRequest) (*CreateAuthConnectionResponse, error)
	// GetAuthConnectionSettings gets auth0 connection settings.
	GetAuthConnectionSettings(context.Context, *GetAuthConnectionSettingsRequest) (*GetAuthConnectionSettingsResponse, error)
	// UpdateAuthConnectionSettings updates an existing auth0 connection settings.
	UpdateAuthConnectionSettings(context.Context, *UpdateAuthConnectionSettingsRequest) (*UpdateAuthConnectionSettingsResponse, error)
	// DeleteAuthConnection removes the current orgs auth settings.
	DeleteAuthConnection(context.Context, *DeleteAuthConnectionRequest) (*DeleteAuthConnectionResponse, error)
	// Gets a user subscription by id
	GetUserSubscription(context.Context, *GetUserSubscriptionRequest) (*GetUserSubscriptionResponse, error)
	// Gets a user subscription by id
	GetMyUserSubscription(context.Context, *GetMyUserSubscriptionRequest) (*GetMyUserSubscriptionResponse, error)
	// Adds a user subscription to user's list of subscriptions
	AddUserSubscription(context.Context, *AddUserSubscriptionRequest) (*AddUserSubscriptionResponse, error)
	// Adds a user subscription to user's list of subscriptions
	AddMyUserSubscription(context.Context, *AddMyUserSubscriptionRequest) (*AddMyUserSubscriptionResponse, error)
	// Removes a user subscription from a specified user's list of subscriptions
	RemoveUserSubscription(context.Context, *RemoveUserSubscriptionRequest) (*RemoveUserSubscriptionResponse, error)
	// Removes a user subscription from a user's list of subscriptions
	RemoveMyUserSubscription(context.Context, *RemoveMyUserSubscriptionRequest) (*RemoveMyUserSubscriptionResponse, error)
	// Updates a user subscription
	UpdateUserSubscription(context.Context, *UpdateUserSubscriptionRequest) (*UpdateUserSubscriptionResponse, error)
	// Updates a user subscription
	UpdateMyUserSubscription(context.Context, *UpdateMyUserSubscriptionRequest) (*UpdateMyUserSubscriptionResponse, error)
	// Lists all of a users subscriptions
	ListUserSubscriptions(context.Context, *ListUserSubscriptionsRequest) (*ListUserSubscriptionsResponse, error)
	// Lists all of a users subscriptions
	ListMyUserSubscriptions(context.Context, *ListMyUserSubscriptionsRequest) (*ListMyUserSubscriptionsResponse, error)
	// Lists multiple users subscriptions by org. Optionally filters by event type.
	// Required Permissions:
	//
	//	ORG_VIEW
	ListOrgSubscriptions(context.Context, *ListOrgSubscriptionsRequest) (*ListOrgSubscriptionsResponse, error)
	// Returns the systems current environment details
	// Required Permissions:
	//
	//	N/A
	GetSystemEnvironmentDetails(context.Context, *GetSystemEnvironmentDetailsRequest) (*GetSystemEnvironmentDetailsResponse, error)
	// Returns a list of agent statistics templates belonging to client_sid.
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.NotFound: There is no entry matching the requested client_sid.
	ListAgentStatisticsTemplates(context.Context, *ListAgentStatisticsTemplatesRequest) (*ListAgentStatisticsTemplatesResponse, error)
	// Creates a new agent statistics template for the given client_sid.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.NotFound: The client_sid is not found.
	CreateAgentStatisticsTemplate(context.Context, *CreateAgentStatisticsTemplateRequest) (*CreateAgentStatisticsTemplateResponse, error)
	// Updates an existing agent statistics template for the given client_sid.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.NotFound: The client_sid is not found.
	UpdateAgentStatisticsTemplate(context.Context, *UpdateAgentStatisticsTemplateRequest) (*UpdateAgentStatisticsTemplateResponse, error)
	// Deletes an existing agent statistics template for the given client_sid.
	// Required Permissions:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.NotFound: The client_sid or agent statistics template is not found.
	DeleteAgentStatisticsTemplate(context.Context, *DeleteAgentStatisticsTemplateRequest) (*DeleteAgentStatisticsTemplateResponse, error)
	mustEmbedUnimplementedOrgServer()
}

// UnimplementedOrgServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrgServer struct{}

func (UnimplementedOrgServer) RegisterOrganization(context.Context, *RegisterOrganizationRequest) (*RegisterOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOrganization not implemented")
}
func (UnimplementedOrgServer) ConvertOrgToManual(context.Context, *ConvertOrgToManualRequest) (*ConvertOrgToManualResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertOrgToManual not implemented")
}
func (UnimplementedOrgServer) UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedOrgServer) ArchiveOrganization(context.Context, *ArchiveOrganizationRequest) (*ArchiveOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveOrganization not implemented")
}
func (UnimplementedOrgServer) UnArchiveOrganization(context.Context, *UnArchiveOrganizationRequest) (*UnArchiveOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnArchiveOrganization not implemented")
}
func (UnimplementedOrgServer) ListArchivedOrganizations(context.Context, *ListArchivedOrganizationsRequest) (*ListArchivedOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArchivedOrganizations not implemented")
}
func (UnimplementedOrgServer) GetOrganizationProfile(context.Context, *GetOrganizationProfileRequest) (*GetOrganizationProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationProfile not implemented")
}
func (UnimplementedOrgServer) GetOrganizationProfileById(context.Context, *GetOrganizationProfileByIdRequest) (*GetOrganizationProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationProfileById not implemented")
}
func (UnimplementedOrgServer) ListOrganizationDescriptions(context.Context, *ListOrganizationDescriptionsRequest) (*ListOrganizationDescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationDescriptions not implemented")
}
func (UnimplementedOrgServer) ListRegionalOrganizations(context.Context, *ListRegionalOrganizationsRequest) (*ListRegionalOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegionalOrganizations not implemented")
}
func (UnimplementedOrgServer) UpdateP3OwningOrg(context.Context, *UpdateP3OwningOrgRequest) (*UpdateP3OwningOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateP3OwningOrg not implemented")
}
func (UnimplementedOrgServer) GetP3OwningOrg(context.Context, *GetP3OwningOrgRequest) (*GetP3OwningOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetP3OwningOrg not implemented")
}
func (UnimplementedOrgServer) ListOrganizationUserDescriptions(context.Context, *ListOrganizationUserDescriptionsRequest) (*ListOrganizationUserDescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationUserDescriptions not implemented")
}
func (UnimplementedOrgServer) AdminListUserDescriptions(*AdminListUserDescriptionsRequest, grpc.ServerStreamingServer[AdminListUserDescriptionsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AdminListUserDescriptions not implemented")
}
func (UnimplementedOrgServer) ListUserDescriptions(*ListUserDescriptionsRequest, grpc.ServerStreamingServer[ListUserDescriptionsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListUserDescriptions not implemented")
}
func (UnimplementedOrgServer) GetUserDirectory(context.Context, *GetUserDirectoryRequest) (*GetUserDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDirectory not implemented")
}
func (UnimplementedOrgServer) GetRegions(context.Context, *GetRegionsRequest) (*GetRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegions not implemented")
}
func (UnimplementedOrgServer) GetMyUserDetails(context.Context, *GetMyUserDetailsRequest) (*UserDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyUserDetails not implemented")
}
func (UnimplementedOrgServer) GetUserDetails(context.Context, *GetUserDetailsRequest) (*UserDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDetails not implemented")
}
func (UnimplementedOrgServer) AdminGetUserDetails(context.Context, *AdminGetUserDetailsRequest) (*UserDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetUserDetails not implemented")
}
func (UnimplementedOrgServer) GetAgentUsers(context.Context, *GetAgentUsersRequest) (*GetAgentUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentUsers not implemented")
}
func (UnimplementedOrgServer) GetAgentSettings(context.Context, *GetAgentSettingsRequest) (*GetAgentSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentSettings not implemented")
}
func (UnimplementedOrgServer) GetAgentProfileGroup(context.Context, *GetAgentProfileGroupRequest) (*GetAgentProfileGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentProfileGroup not implemented")
}
func (UnimplementedOrgServer) UpdateAgentProfileGroup(context.Context, *UpdateAgentProfileGroupRequest) (*UpdateAgentProfileGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentProfileGroup not implemented")
}
func (UnimplementedOrgServer) CreateAgentProfileGroup(context.Context, *CreateAgentProfileGroupRequest) (*CreateAgentProfileGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgentProfileGroup not implemented")
}
func (UnimplementedOrgServer) ListAgentProfileGroups(context.Context, *ListAgentProfileGroupsRequest) (*ListAgentProfileGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentProfileGroups not implemented")
}
func (UnimplementedOrgServer) DeleteAgentProfileGroup(context.Context, *DeleteAgentProfileGroupRequest) (*DeleteAgentProfileGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgentProfileGroup not implemented")
}
func (UnimplementedOrgServer) AssignAgentProfileGroups(context.Context, *AssignAgentProfileGroupsRequest) (*AssignAgentProfileGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignAgentProfileGroups not implemented")
}
func (UnimplementedOrgServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedOrgServer) UpdateMyUser(context.Context, *UpdateMyUserRequest) (*UpdateMyUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMyUser not implemented")
}
func (UnimplementedOrgServer) UpdateUserCallerId(context.Context, *UpdateUserCallerIdRequest) (*UpdateUserCallerIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserCallerId not implemented")
}
func (UnimplementedOrgServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedOrgServer) CreateUserByOrgId(context.Context, *CreateUserByOrgIdRequest) (*CreateUserByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserByOrgId not implemented")
}
func (UnimplementedOrgServer) CreateDelegatedUser(context.Context, *CreateDelegatedUserRequest) (*CreateDelegatedUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDelegatedUser not implemented")
}
func (UnimplementedOrgServer) UpdateUserPassword(context.Context, *UpdateUserPasswordRequest) (*UpdateUserPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPassword not implemented")
}
func (UnimplementedOrgServer) UpdateMyUserPassword(context.Context, *UpdateMyUserPasswordRequest) (*UpdateMyUserPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMyUserPassword not implemented")
}
func (UnimplementedOrgServer) UpdateUserPasswordByOrgId(context.Context, *UpdateUserPasswordByOrgIdRequest) (*UpdateUserPasswordByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPasswordByOrgId not implemented")
}
func (UnimplementedOrgServer) ResetUserRequirePasswordReset(context.Context, *ResetUserRequirePasswordResetRequest) (*ResetUserRequirePasswordResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetUserRequirePasswordReset not implemented")
}
func (UnimplementedOrgServer) GetUserPasswordResetLink(context.Context, *GetUserPasswordResetLinkRequest) (*GetUserPasswordResetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPasswordResetLink not implemented")
}
func (UnimplementedOrgServer) GetMyUserPasswordResetLink(context.Context, *GetMyUserPasswordResetLinkRequest) (*GetMyUserPasswordResetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyUserPasswordResetLink not implemented")
}
func (UnimplementedOrgServer) GetUserPasswordResetLinkByOrgId(context.Context, *GetUserPasswordResetLinkByOrgIdRequest) (*GetUserPasswordResetLinkByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPasswordResetLinkByOrgId not implemented")
}
func (UnimplementedOrgServer) GetUserEmailVerified(context.Context, *GetUserEmailVerifiedRequest) (*GetUserEmailVerifiedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserEmailVerified not implemented")
}
func (UnimplementedOrgServer) GetUserEmailVerifiedByOrgId(context.Context, *GetUserEmailVerifiedByOrgIdRequest) (*GetUserEmailVerifiedByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserEmailVerifiedByOrgId not implemented")
}
func (UnimplementedOrgServer) SendUserVerificationEmailByOrgId(context.Context, *SendUserVerificationEmailByOrgIdRequest) (*SendUserVerificationEmailByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUserVerificationEmailByOrgId not implemented")
}
func (UnimplementedOrgServer) SendUserVerificationEmail(context.Context, *SendUserVerificationEmailRequest) (*SendUserVerificationEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUserVerificationEmail not implemented")
}
func (UnimplementedOrgServer) ManualUserEmailVerificationByOrgId(context.Context, *ManualUserEmailVerificationByOrgIdRequest) (*ManualUserEmailVerificationByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManualUserEmailVerificationByOrgId not implemented")
}
func (UnimplementedOrgServer) ManualUserEmailVerification(context.Context, *ManualUserEmailVerificationRequest) (*ManualUserEmailVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManualUserEmailVerification not implemented")
}
func (UnimplementedOrgServer) GetTempUserToken(context.Context, *GetTempUserTokenReq) (*GetTempUserTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTempUserToken not implemented")
}
func (UnimplementedOrgServer) GetTempUserTokenByUserId(context.Context, *GetTempUserTokenByUserIdReq) (*GetTempUserTokenByUserIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTempUserTokenByUserId not implemented")
}
func (UnimplementedOrgServer) GetCountriesList(context.Context, *GetCountriesListRequest) (*GetCountriesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountriesList not implemented")
}
func (UnimplementedOrgServer) GetAdminClientPreferences(context.Context, *GetAdminClientPreferencesRequest) (*GetAdminClientPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminClientPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateAdminClientPreferences(context.Context, *UpdateAdminClientPreferencesRequest) (*UpdateAdminClientPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdminClientPreferences not implemented")
}
func (UnimplementedOrgServer) GetPermissions(context.Context, *GetPermissionsRequest) (*GetPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissions not implemented")
}
func (UnimplementedOrgServer) RevokeAccountOwnerPermissionFromUser(context.Context, *RevokeAccountOwnerPermissionFromUserRequest) (*RevokeAccountOwnerPermissionFromUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAccountOwnerPermissionFromUser not implemented")
}
func (UnimplementedOrgServer) UpdateUserDisabled(context.Context, *UpdateUserDisabledRequest) (*UpdateUserDisabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserDisabled not implemented")
}
func (UnimplementedOrgServer) UpdateUserDisabledByOrgId(context.Context, *UpdateUserDisabledByOrgIdRequest) (*UpdateUserDisabledByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserDisabledByOrgId not implemented")
}
func (UnimplementedOrgServer) UpdateBulkUsersDisabled(context.Context, *UpdateBulkUsersDisabledRequest) (*UpdateBulkUsersDisabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBulkUsersDisabled not implemented")
}
func (UnimplementedOrgServer) GetOrgBillingSettingsByOrgId(context.Context, *GetOrgBillingSettingsByOrgIdRequest) (*GetOrgBillingSettingsByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgBillingSettingsByOrgId not implemented")
}
func (UnimplementedOrgServer) GetOrgBillingSettings(context.Context, *GetOrgBillingSettingsRequest) (*GetOrgBillingSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgBillingSettings not implemented")
}
func (UnimplementedOrgServer) SetOrgBillingSettings(context.Context, *SetOrgBillingSettingsRequest) (*SetOrgBillingSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrgBillingSettings not implemented")
}
func (UnimplementedOrgServer) AddOrgBillingOverride(context.Context, *AddOrgBillingOverrideRequest) (*AddOrgBillingOverrideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrgBillingOverride not implemented")
}
func (UnimplementedOrgServer) RemoveOrgBillingOverride(context.Context, *RemoveOrgBillingOverrideRequest) (*RemoveOrgBillingOverrideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrgBillingOverride not implemented")
}
func (UnimplementedOrgServer) GetSystemDefaultBillingRates(context.Context, *GetSystemDefaultBillingRatesRequest) (*GetSystemDefaultBillingRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemDefaultBillingRates not implemented")
}
func (UnimplementedOrgServer) ListPermissionGroupsByOrgId(context.Context, *ListPermissionGroupsByOrgIdRequest) (*ListPermissionGroupsByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissionGroupsByOrgId not implemented")
}
func (UnimplementedOrgServer) ListPermissionGroups(context.Context, *ListPermissionGroupsRequest) (*ListPermissionGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissionGroups not implemented")
}
func (UnimplementedOrgServer) CreatePermissionGroup(context.Context, *CreatePermissionGroupRequest) (*CreatePermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermissionGroup not implemented")
}
func (UnimplementedOrgServer) UpdatePermissionGroup(context.Context, *UpdatePermissionGroupRequest) (*UpdatePermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermissionGroup not implemented")
}
func (UnimplementedOrgServer) DeletePermissionGroup(context.Context, *DeletePermissionGroupRequest) (*DeletePermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermissionGroup not implemented")
}
func (UnimplementedOrgServer) AssignUserToAccountOwnerPermissionGroup(context.Context, *AssignUserToAccountOwnerPermissionGroupRequest) (*AssignUserToAccountOwnerPermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignUserToAccountOwnerPermissionGroup not implemented")
}
func (UnimplementedOrgServer) AssignUserPermissionGroup(context.Context, *AssignUserPermissionGroupRequest) (*AssignUserPermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignUserPermissionGroup not implemented")
}
func (UnimplementedOrgServer) AssignUsersPermissionGroup(context.Context, *AssignUsersPermissionGroupRequest) (*AssignUsersPermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignUsersPermissionGroup not implemented")
}
func (UnimplementedOrgServer) UpdateUserNeoPermissionGroups(context.Context, *UpdateUserNeoPermissionGroupsRequest) (*UpdateUserNeoPermissionGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserNeoPermissionGroups not implemented")
}
func (UnimplementedOrgServer) RevokeUserPermissionGroup(context.Context, *RevokeUserPermissionGroupRequest) (*RevokeUserPermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeUserPermissionGroup not implemented")
}
func (UnimplementedOrgServer) RevokeUsersPermissionGroup(context.Context, *RevokeUsersPermissionGroupRequest) (*RevokeUsersPermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeUsersPermissionGroup not implemented")
}
func (UnimplementedOrgServer) InitDefaultPermissionGroups(context.Context, *InitDefaultPermissionGroupsRequest) (*InitDefaultPermissionGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDefaultPermissionGroups not implemented")
}
func (UnimplementedOrgServer) AddPermissionToAccountOwnerPermissionGroup(context.Context, *AddPermissionToAccountOwnerPermissionGroupRequest) (*AddPermissionToAccountOwnerPermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermissionToAccountOwnerPermissionGroup not implemented")
}
func (UnimplementedOrgServer) RevokePermissionToAccountOwnerPermissionGroup(context.Context, *RevokePermissionToAccountOwnerPermissionGroupRequest) (*RevokePermissionToAccountOwnerPermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokePermissionToAccountOwnerPermissionGroup not implemented")
}
func (UnimplementedOrgServer) AddPermissionToOrgDefaultGroup(context.Context, *AddPermissionToOrgDefaultGroupRequest) (*AddPermissionToOrgDefaultGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermissionToOrgDefaultGroup not implemented")
}
func (UnimplementedOrgServer) RemovePermissionFromOrgDefaultGroup(context.Context, *RemovePermissionFromOrgDefaultGroupRequest) (*RemovePermissionFromOrgDefaultGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePermissionFromOrgDefaultGroup not implemented")
}
func (UnimplementedOrgServer) GetOrgDefaultSuperUserGroup(context.Context, *GetOrgDefaultSuperUserGroupRequest) (*GetOrgDefaultSuperUserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgDefaultSuperUserGroup not implemented")
}
func (UnimplementedOrgServer) ListP3PermissionGroupsByOrgId(context.Context, *ListP3PermissionGroupsByOrgIdRequest) (*ListP3PermissionGroupsByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListP3PermissionGroupsByOrgId not implemented")
}
func (UnimplementedOrgServer) ListP3PermissionGroups(context.Context, *ListP3PermissionGroupsRequest) (*ListP3PermissionGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListP3PermissionGroups not implemented")
}
func (UnimplementedOrgServer) AddUserRegion(context.Context, *AddUserRegionRequest) (*AddUserRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserRegion not implemented")
}
func (UnimplementedOrgServer) RemoveUserRegion(context.Context, *RemoveUserRegionRequest) (*RemoveUserRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserRegion not implemented")
}
func (UnimplementedOrgServer) CreateP3PermissionGroup(context.Context, *CreateP3PermissionGroupRequest) (*CreateP3PermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateP3PermissionGroup not implemented")
}
func (UnimplementedOrgServer) UpdateP3PermissionGroupByOrgId(context.Context, *UpdateP3PermissionGroupByOrgIdRequest) (*UpdateP3PermissionGroupByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateP3PermissionGroupByOrgId not implemented")
}
func (UnimplementedOrgServer) UpdateP3PermissionGroup(context.Context, *UpdateP3PermissionGroupRequest) (*UpdateP3PermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateP3PermissionGroup not implemented")
}
func (UnimplementedOrgServer) DeleteP3PermissionGroup(context.Context, *DeleteP3PermissionGroupRequest) (*DeleteP3PermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteP3PermissionGroup not implemented")
}
func (UnimplementedOrgServer) AssignUsersP3PermissionGroup(context.Context, *AssignUsersP3PermissionGroupRequest) (*AssignUsersP3PermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignUsersP3PermissionGroup not implemented")
}
func (UnimplementedOrgServer) AddLoginToUser(context.Context, *AddLoginToUserRequest) (*AddLoginToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLoginToUser not implemented")
}
func (UnimplementedOrgServer) RevokeUsersP3PermissionGroup(context.Context, *RevokeUsersP3PermissionGroupRequest) (*RevokeUsersP3PermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeUsersP3PermissionGroup not implemented")
}
func (UnimplementedOrgServer) GetContactPreferences(context.Context, *GetContactPreferencesRequest) (*GetContactPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateContactPreferences(context.Context, *UpdateContactPreferencesRequest) (*UpdateContactPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContactPreferences not implemented")
}
func (UnimplementedOrgServer) GetCompliancePreferences(context.Context, *GetCompliancePreferencesRequest) (*GetCompliancePreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompliancePreferences not implemented")
}
func (UnimplementedOrgServer) UpdateCompliancePreferences(context.Context, *UpdateCompliancePreferencesRequest) (*UpdateCompliancePreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompliancePreferences not implemented")
}
func (UnimplementedOrgServer) GetAgentPreferences(context.Context, *GetAgentPreferencesRequest) (*GetAgentPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateAgentPreferences(context.Context, *UpdateAgentPreferencesRequest) (*UpdateAgentPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentPreferences not implemented")
}
func (UnimplementedOrgServer) GetOrganizationPreferences(context.Context, *GetOrganizationPreferencesRequest) (*GetOrganizationPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateOrganizationPreferences(context.Context, *UpdateOrganizationPreferencesRequest) (*UpdateOrganizationPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationPreferences not implemented")
}
func (UnimplementedOrgServer) GetSchedulePreferences(context.Context, *GetSchedulePreferencesRequest) (*GetSchedulePreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedulePreferences not implemented")
}
func (UnimplementedOrgServer) UpdateSchedulePreferences(context.Context, *UpdateSchedulePreferencesRequest) (*UpdateSchedulePreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchedulePreferences not implemented")
}
func (UnimplementedOrgServer) GetBusinessPreferences(context.Context, *GetBusinessPreferencesRequest) (*GetBusinessPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateBusinessPreferences(context.Context, *UpdateBusinessPreferencesRequest) (*UpdateBusinessPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessPreferences not implemented")
}
func (UnimplementedOrgServer) GetEndOfDayPreferences(context.Context, *GetEndOfDayPreferencesRequest) (*GetEndOfDayPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndOfDayPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateEndOfDayPreferences(context.Context, *UpdateEndOfDayPreferencesRequest) (*UpdateEndOfDayPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEndOfDayPreferences not implemented")
}
func (UnimplementedOrgServer) GetReportFilterPreferences(context.Context, *GetFilterPreferencesRequest) (*GetFilterPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportFilterPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateReportFilterPreferences(context.Context, *UpdateFilterPreferencesRequest) (*UpdateFilterPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReportFilterPreferences not implemented")
}
func (UnimplementedOrgServer) GetPhonePreferences(context.Context, *GetPhonePreferencesRequest) (*GetPhonePreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhonePreferences not implemented")
}
func (UnimplementedOrgServer) UpdatePhonePreferences(context.Context, *UpdatePhonePreferencesRequest) (*UpdatePhonePreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhonePreferences not implemented")
}
func (UnimplementedOrgServer) GetDashboardGeneralPreferences(context.Context, *GetDashboardGeneralPreferencesRequest) (*GetDashboardGeneralPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardGeneralPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateDashboardGeneralPreferences(context.Context, *UpdateDashboardGeneralPreferencesRequest) (*UpdateDashboardGeneralPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDashboardGeneralPreferences not implemented")
}
func (UnimplementedOrgServer) GetWebhookPreferences(context.Context, *GetWebhookPreferencesRequest) (*GetWebhookPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebhookPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateWebhookPreferences(context.Context, *UpdateWebhookPreferencesRequest) (*UpdateWebhookPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebhookPreferences not implemented")
}
func (UnimplementedOrgServer) GetBroadcastPreferences(context.Context, *GetBroadcastPreferencesRequest) (*GetBroadcastPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBroadcastPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateBroadcastPreferences(context.Context, *UpdateBroadcastPreferencesRequest) (*UpdateBroadcastPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBroadcastPreferences not implemented")
}
func (UnimplementedOrgServer) GetAuthenticationPreferences(context.Context, *GetAuthenticationPreferencesRequest) (*GetAuthenticationPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthenticationPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateAuthenticationPreferences(context.Context, *UpdateAuthenticationPreferencesRequest) (*UpdateAuthenticationPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthenticationPreferences not implemented")
}
func (UnimplementedOrgServer) GetRecordingPreferences(context.Context, *GetRecordingPreferencesRequest) (*GetRecordingPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordingPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateRecordingPreferences(context.Context, *UpdateRecordingPreferencesRequest) (*UpdateRecordingPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecordingPreferences not implemented")
}
func (UnimplementedOrgServer) GetDashboardQueuePreferences(context.Context, *GetDashboardQueuePreferencesRequest) (*GetDashboardQueuePreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardQueuePreferences not implemented")
}
func (UnimplementedOrgServer) UpdateDashboardQueuePreferences(context.Context, *UpdateDashboardQueuePreferencesRequest) (*UpdateDashboardQueuePreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDashboardQueuePreferences not implemented")
}
func (UnimplementedOrgServer) GetAgentQuickViewPreferences(context.Context, *GetAgentQuickViewPreferencesRequest) (*GetAgentQuickViewPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentQuickViewPreferences not implemented")
}
func (UnimplementedOrgServer) GetVoiceAnalyticsPreferences(context.Context, *GetVoiceAnalyticsPreferencesRequest) (*GetVoiceAnalyticsPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoiceAnalyticsPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateVoiceAnalyticsPreferences(context.Context, *UpdateVoiceAnalyticsPreferencesRequest) (*UpdateVoiceAnalyticsPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVoiceAnalyticsPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateVoiceAnalyticsPreferencesEnabled(context.Context, *UpdateVoiceAnalyticsPreferencesEnabledRequest) (*UpdateVoiceAnalyticsPreferencesEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVoiceAnalyticsPreferencesEnabled not implemented")
}
func (UnimplementedOrgServer) GetScorecardsPreferences(context.Context, *GetScorecardsPreferencesRequest) (*GetScorecardsPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScorecardsPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateScorecardsPreferences(context.Context, *UpdateScorecardsPreferencesRequest) (*UpdateScorecardsPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScorecardsPreferences not implemented")
}
func (UnimplementedOrgServer) GetEmailSmsPreferences(context.Context, *GetEmailSmsPreferencesRequest) (*GetEmailSmsPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailSmsPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateEmailSmsPreferences(context.Context, *UpdateEmailSmsPreferencesRequest) (*UpdateEmailSmsPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailSmsPreferences not implemented")
}
func (UnimplementedOrgServer) EditAgentQuickViewPreferences(context.Context, *EditAgentQuickViewPreferencesRequest) (*EditAgentQuickViewPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditAgentQuickViewPreferences not implemented")
}
func (UnimplementedOrgServer) EditBackofficeThemePreference(context.Context, *EditBackofficeThemePreferenceRequest) (*EditBackofficeThemePreferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditBackofficeThemePreference not implemented")
}
func (UnimplementedOrgServer) GetBackofficeThemePreference(context.Context, *GetBackofficeThemePreferenceRequest) (*GetBackofficeThemePreferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackofficeThemePreference not implemented")
}
func (UnimplementedOrgServer) AcceptLinkbackRecordingTerms(context.Context, *AcceptLinkbackRecordingTermsRequest) (*AcceptLinkbackRecordingTermsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptLinkbackRecordingTerms not implemented")
}
func (UnimplementedOrgServer) LinkbackUpdateBroadcastTemplates(context.Context, *LinkbackUpdateBroadcastTemplatesRequest) (*LinkbackUpdateBroadcastTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkbackUpdateBroadcastTemplates not implemented")
}
func (UnimplementedOrgServer) RecordEmailUnsubscribeAcknowledgement(context.Context, *RecordEmailUnsubscribeAcknowledgementRequest) (*RecordEmailUnsubscribeAcknowledgementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordEmailUnsubscribeAcknowledgement not implemented")
}
func (UnimplementedOrgServer) ClearEmailUnsubscribeAcknowledgement(context.Context, *ClearEmailUnsubscribeAcknowledgementRequest) (*ClearEmailUnsubscribeAcknowledgementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearEmailUnsubscribeAcknowledgement not implemented")
}
func (UnimplementedOrgServer) CreateWebLinkTemplate(context.Context, *CreateWebLinkTemplateRequest) (*CreateWebLinkTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebLinkTemplate not implemented")
}
func (UnimplementedOrgServer) ListWebLinkTemplates(context.Context, *ListWebLinkTemplatesRequest) (*ListWebLinkTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebLinkTemplates not implemented")
}
func (UnimplementedOrgServer) GetWebLinkTemplate(context.Context, *GetWebLinkTemplateRequest) (*GetWebLinkTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebLinkTemplate not implemented")
}
func (UnimplementedOrgServer) UpdateWebLinkTemplate(context.Context, *UpdateWebLinkTemplateRequest) (*UpdateWebLinkTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebLinkTemplate not implemented")
}
func (UnimplementedOrgServer) DeleteWebLinkTemplate(context.Context, *DeleteWebLinkTemplateRequest) (*DeleteWebLinkTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebLinkTemplate not implemented")
}
func (UnimplementedOrgServer) CreateAgentTriggerTemplate(context.Context, *CreateAgentTriggerTemplateRequest) (*CreateAgentTriggerTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgentTriggerTemplate not implemented")
}
func (UnimplementedOrgServer) ListAgentTriggerTemplates(context.Context, *ListAgentTriggerTemplatesRequest) (*ListAgentTriggerTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentTriggerTemplates not implemented")
}
func (UnimplementedOrgServer) GetAgentTriggerTemplate(context.Context, *GetAgentTriggerTemplateRequest) (*GetAgentTriggerTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentTriggerTemplate not implemented")
}
func (UnimplementedOrgServer) UpdateAgentTriggerTemplate(context.Context, *UpdateAgentTriggerTemplateRequest) (*UpdateAgentTriggerTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentTriggerTemplate not implemented")
}
func (UnimplementedOrgServer) DeleteAgentTriggerTemplate(context.Context, *DeleteAgentTriggerTemplateRequest) (*DeleteAgentTriggerTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgentTriggerTemplate not implemented")
}
func (UnimplementedOrgServer) CreateClientInfoDisplayTemplate(context.Context, *CreateClientInfoDisplayTemplateRequest) (*CreateClientInfoDisplayTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClientInfoDisplayTemplate not implemented")
}
func (UnimplementedOrgServer) ListClientInfoDisplayTemplates(context.Context, *ListClientInfoDisplayTemplatesRequest) (*ListClientInfoDisplayTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClientInfoDisplayTemplates not implemented")
}
func (UnimplementedOrgServer) UpdateClientInfoDisplayTemplate(context.Context, *UpdateClientInfoDisplayTemplateRequest) (*UpdateClientInfoDisplayTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClientInfoDisplayTemplate not implemented")
}
func (UnimplementedOrgServer) DeleteClientInfoDisplayTemplate(context.Context, *DeleteClientInfoDisplayTemplateRequest) (*DeleteClientInfoDisplayTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClientInfoDisplayTemplate not implemented")
}
func (UnimplementedOrgServer) GetClientInfoDisplayTemplate(context.Context, *GetClientInfoDisplayTemplateRequest) (*GetClientInfoDisplayTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientInfoDisplayTemplate not implemented")
}
func (UnimplementedOrgServer) ListAgentPauseCodes(context.Context, *ListAgentPauseCodesRequest) (*ListAgentPauseCodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentPauseCodes not implemented")
}
func (UnimplementedOrgServer) CreateAgentPauseCode(context.Context, *CreateAgentPauseCodeRequest) (*CreateAgentPauseCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgentPauseCode not implemented")
}
func (UnimplementedOrgServer) UpdateAgentPauseCode(context.Context, *UpdateAgentPauseCodeRequest) (*UpdateAgentPauseCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentPauseCode not implemented")
}
func (UnimplementedOrgServer) DeleteAgentPauseCode(context.Context, *DeleteAgentPauseCodeRequest) (*DeleteAgentPauseCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgentPauseCode not implemented")
}
func (UnimplementedOrgServer) ListCustomReportFilters(context.Context, *ListCustomReportFiltersRequest) (*ListCustomReportFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomReportFilters not implemented")
}
func (UnimplementedOrgServer) CreateCustomReportFilter(context.Context, *CreateCustomReportFilterRequest) (*CreateCustomReportFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomReportFilter not implemented")
}
func (UnimplementedOrgServer) UpdateCustomReportFilter(context.Context, *UpdateCustomReportFilterRequest) (*UpdateCustomReportFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomReportFilter not implemented")
}
func (UnimplementedOrgServer) DeleteCustomReportFilter(context.Context, *DeleteCustomReportFilterRequest) (*DeleteCustomReportFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomReportFilter not implemented")
}
func (UnimplementedOrgServer) ListAgentResponseGroups(context.Context, *ListAgentResponseGroupsRequest) (*ListAgentResponseGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentResponseGroups not implemented")
}
func (UnimplementedOrgServer) ListLastTemplateElements(context.Context, *ListLastTemplateElementsRequest) (*ListLastTemplateElementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLastTemplateElements not implemented")
}
func (UnimplementedOrgServer) ListQueueConfigs(context.Context, *ListQueueConfigsReq) (*ListQueueConfigsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQueueConfigs not implemented")
}
func (UnimplementedOrgServer) ListQueueConfigsByOrgId(context.Context, *ListQueueConfigsByOrgIdReq) (*ListQueueConfigsByOrgIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQueueConfigsByOrgId not implemented")
}
func (UnimplementedOrgServer) DeleteQueueConfig(context.Context, *DeleteQueueConfigReq) (*DeleteQueueConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQueueConfig not implemented")
}
func (UnimplementedOrgServer) GetQueueConfig(context.Context, *GetQueueConfigReq) (*GetQueueConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueueConfig not implemented")
}
func (UnimplementedOrgServer) CreateQueueConfig(context.Context, *CreateQueueConfigReq) (*CreateQueueConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueueConfig not implemented")
}
func (UnimplementedOrgServer) UpdateQueueConfig(context.Context, *UpdateQueueConfigReq) (*UpdateQueueConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQueueConfig not implemented")
}
func (UnimplementedOrgServer) CopyQueueConfig(context.Context, *CopyQueueConfigReq) (*CopyQueueConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyQueueConfig not implemented")
}
func (UnimplementedOrgServer) GetAllQueueConfigSounds(context.Context, *GetAllQueueConfigSoundsReq) (*GetAllQueueConfigSoundsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllQueueConfigSounds not implemented")
}
func (UnimplementedOrgServer) GetQueueConfigSound(context.Context, *GetQueueConfigSoundReq) (*GetQueueConfigSoundRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueueConfigSound not implemented")
}
func (UnimplementedOrgServer) SetQueueConfigSound(context.Context, *SetQueueConfigSoundReq) (*SetQueueConfigSoundRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetQueueConfigSound not implemented")
}
func (UnimplementedOrgServer) SetAllQueueConfigSoundsFromSource(context.Context, *SetAllQueueConfigSoundsFromSourceReq) (*SetAllQueueConfigSoundsFromSourceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAllQueueConfigSoundsFromSource not implemented")
}
func (UnimplementedOrgServer) GetUserBlocked(context.Context, *GetUserBlockedRequest) (*GetUserBlockedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBlocked not implemented")
}
func (UnimplementedOrgServer) UnblockUser(context.Context, *UnblockUserRequest) (*UnblockUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockUser not implemented")
}
func (UnimplementedOrgServer) ListP3UnMigratedUsers(context.Context, *ListP3UnMigratedUsersRequest) (*ListP3UnMigratedUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListP3UnMigratedUsers not implemented")
}
func (UnimplementedOrgServer) MigrateP3User(context.Context, *MigrateP3UserRequest) (*MigrateP3UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateP3User not implemented")
}
func (UnimplementedOrgServer) UpdateP3UserName(context.Context, *UpdateP3UserNameRequest) (*UpdateP3UserNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateP3UserName not implemented")
}
func (UnimplementedOrgServer) ListOwnedUsers(context.Context, *ListOwnedUsersRequest) (*ListOwnedUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOwnedUsers not implemented")
}
func (UnimplementedOrgServer) ListOwnedOrgsByOrgId(context.Context, *ListOwnedOrgsByOrgIdRequest) (*ListOwnedOrgsByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOwnedOrgsByOrgId not implemented")
}
func (UnimplementedOrgServer) ListOwnedOrgs(context.Context, *ListOwnedOrgsRequest) (*ListOwnedOrgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOwnedOrgs not implemented")
}
func (UnimplementedOrgServer) RemoveLoginStrikes(context.Context, *RemoveLoginStrikesRequest) (*RemoveLoginStrikesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLoginStrikes not implemented")
}
func (UnimplementedOrgServer) RemoveUserLoginStrikes(context.Context, *RemoveUserLoginStrikesRequest) (*RemoveUserLoginStrikesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserLoginStrikes not implemented")
}
func (UnimplementedOrgServer) ListLoginHistory(context.Context, *ListLoginHistoryRequest) (*ListLoginHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoginHistory not implemented")
}
func (UnimplementedOrgServer) UpdateP3UserSids(context.Context, *UpdateP3UserSidsRequest) (*UpdateP3UserSidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateP3UserSids not implemented")
}
func (UnimplementedOrgServer) CreateAuthConnection(context.Context, *CreateAuthConnectionRequest) (*CreateAuthConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthConnection not implemented")
}
func (UnimplementedOrgServer) GetAuthConnectionSettings(context.Context, *GetAuthConnectionSettingsRequest) (*GetAuthConnectionSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthConnectionSettings not implemented")
}
func (UnimplementedOrgServer) UpdateAuthConnectionSettings(context.Context, *UpdateAuthConnectionSettingsRequest) (*UpdateAuthConnectionSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthConnectionSettings not implemented")
}
func (UnimplementedOrgServer) DeleteAuthConnection(context.Context, *DeleteAuthConnectionRequest) (*DeleteAuthConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthConnection not implemented")
}
func (UnimplementedOrgServer) GetUserSubscription(context.Context, *GetUserSubscriptionRequest) (*GetUserSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSubscription not implemented")
}
func (UnimplementedOrgServer) GetMyUserSubscription(context.Context, *GetMyUserSubscriptionRequest) (*GetMyUserSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyUserSubscription not implemented")
}
func (UnimplementedOrgServer) AddUserSubscription(context.Context, *AddUserSubscriptionRequest) (*AddUserSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserSubscription not implemented")
}
func (UnimplementedOrgServer) AddMyUserSubscription(context.Context, *AddMyUserSubscriptionRequest) (*AddMyUserSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMyUserSubscription not implemented")
}
func (UnimplementedOrgServer) RemoveUserSubscription(context.Context, *RemoveUserSubscriptionRequest) (*RemoveUserSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserSubscription not implemented")
}
func (UnimplementedOrgServer) RemoveMyUserSubscription(context.Context, *RemoveMyUserSubscriptionRequest) (*RemoveMyUserSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMyUserSubscription not implemented")
}
func (UnimplementedOrgServer) UpdateUserSubscription(context.Context, *UpdateUserSubscriptionRequest) (*UpdateUserSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserSubscription not implemented")
}
func (UnimplementedOrgServer) UpdateMyUserSubscription(context.Context, *UpdateMyUserSubscriptionRequest) (*UpdateMyUserSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMyUserSubscription not implemented")
}
func (UnimplementedOrgServer) ListUserSubscriptions(context.Context, *ListUserSubscriptionsRequest) (*ListUserSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserSubscriptions not implemented")
}
func (UnimplementedOrgServer) ListMyUserSubscriptions(context.Context, *ListMyUserSubscriptionsRequest) (*ListMyUserSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyUserSubscriptions not implemented")
}
func (UnimplementedOrgServer) ListOrgSubscriptions(context.Context, *ListOrgSubscriptionsRequest) (*ListOrgSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgSubscriptions not implemented")
}
func (UnimplementedOrgServer) GetSystemEnvironmentDetails(context.Context, *GetSystemEnvironmentDetailsRequest) (*GetSystemEnvironmentDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemEnvironmentDetails not implemented")
}
func (UnimplementedOrgServer) ListAgentStatisticsTemplates(context.Context, *ListAgentStatisticsTemplatesRequest) (*ListAgentStatisticsTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentStatisticsTemplates not implemented")
}
func (UnimplementedOrgServer) CreateAgentStatisticsTemplate(context.Context, *CreateAgentStatisticsTemplateRequest) (*CreateAgentStatisticsTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgentStatisticsTemplate not implemented")
}
func (UnimplementedOrgServer) UpdateAgentStatisticsTemplate(context.Context, *UpdateAgentStatisticsTemplateRequest) (*UpdateAgentStatisticsTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentStatisticsTemplate not implemented")
}
func (UnimplementedOrgServer) DeleteAgentStatisticsTemplate(context.Context, *DeleteAgentStatisticsTemplateRequest) (*DeleteAgentStatisticsTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgentStatisticsTemplate not implemented")
}
func (UnimplementedOrgServer) mustEmbedUnimplementedOrgServer() {}
func (UnimplementedOrgServer) testEmbeddedByValue()             {}

// UnsafeOrgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrgServer will
// result in compilation errors.
type UnsafeOrgServer interface {
	mustEmbedUnimplementedOrgServer()
}

func RegisterOrgServer(s grpc.ServiceRegistrar, srv OrgServer) {
	// If the following call pancis, it indicates UnimplementedOrgServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Org_ServiceDesc, srv)
}

func _Org_RegisterOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RegisterOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RegisterOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RegisterOrganization(ctx, req.(*RegisterOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ConvertOrgToManual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertOrgToManualRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ConvertOrgToManual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ConvertOrgToManual_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ConvertOrgToManual(ctx, req.(*ConvertOrgToManualRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ArchiveOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ArchiveOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ArchiveOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ArchiveOrganization(ctx, req.(*ArchiveOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UnArchiveOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnArchiveOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UnArchiveOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UnArchiveOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UnArchiveOrganization(ctx, req.(*UnArchiveOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListArchivedOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArchivedOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListArchivedOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListArchivedOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListArchivedOrganizations(ctx, req.(*ListArchivedOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetOrganizationProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetOrganizationProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetOrganizationProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetOrganizationProfile(ctx, req.(*GetOrganizationProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetOrganizationProfileById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationProfileByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetOrganizationProfileById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetOrganizationProfileById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetOrganizationProfileById(ctx, req.(*GetOrganizationProfileByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListOrganizationDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationDescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListOrganizationDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListOrganizationDescriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListOrganizationDescriptions(ctx, req.(*ListOrganizationDescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListRegionalOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegionalOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListRegionalOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListRegionalOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListRegionalOrganizations(ctx, req.(*ListRegionalOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateP3OwningOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateP3OwningOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateP3OwningOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateP3OwningOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateP3OwningOrg(ctx, req.(*UpdateP3OwningOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetP3OwningOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetP3OwningOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetP3OwningOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetP3OwningOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetP3OwningOrg(ctx, req.(*GetP3OwningOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListOrganizationUserDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationUserDescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListOrganizationUserDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListOrganizationUserDescriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListOrganizationUserDescriptions(ctx, req.(*ListOrganizationUserDescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AdminListUserDescriptions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AdminListUserDescriptionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrgServer).AdminListUserDescriptions(m, &grpc.GenericServerStream[AdminListUserDescriptionsRequest, AdminListUserDescriptionsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Org_AdminListUserDescriptionsServer = grpc.ServerStreamingServer[AdminListUserDescriptionsResponse]

func _Org_ListUserDescriptions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListUserDescriptionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrgServer).ListUserDescriptions(m, &grpc.GenericServerStream[ListUserDescriptionsRequest, ListUserDescriptionsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Org_ListUserDescriptionsServer = grpc.ServerStreamingServer[ListUserDescriptionsResponse]

func _Org_GetUserDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetUserDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetUserDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetUserDirectory(ctx, req.(*GetUserDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetRegions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetRegions(ctx, req.(*GetRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetMyUserDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyUserDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetMyUserDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetMyUserDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetMyUserDetails(ctx, req.(*GetMyUserDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetUserDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetUserDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetUserDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetUserDetails(ctx, req.(*GetUserDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AdminGetUserDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetUserDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AdminGetUserDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AdminGetUserDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AdminGetUserDetails(ctx, req.(*AdminGetUserDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetAgentUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetAgentUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetAgentUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetAgentUsers(ctx, req.(*GetAgentUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetAgentSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetAgentSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetAgentSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetAgentSettings(ctx, req.(*GetAgentSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetAgentProfileGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentProfileGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetAgentProfileGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetAgentProfileGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetAgentProfileGroup(ctx, req.(*GetAgentProfileGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateAgentProfileGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentProfileGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateAgentProfileGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateAgentProfileGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateAgentProfileGroup(ctx, req.(*UpdateAgentProfileGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateAgentProfileGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgentProfileGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateAgentProfileGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateAgentProfileGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateAgentProfileGroup(ctx, req.(*CreateAgentProfileGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListAgentProfileGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentProfileGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListAgentProfileGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListAgentProfileGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListAgentProfileGroups(ctx, req.(*ListAgentProfileGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteAgentProfileGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAgentProfileGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteAgentProfileGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteAgentProfileGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteAgentProfileGroup(ctx, req.(*DeleteAgentProfileGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AssignAgentProfileGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignAgentProfileGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AssignAgentProfileGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AssignAgentProfileGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AssignAgentProfileGroups(ctx, req.(*AssignAgentProfileGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateMyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateMyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateMyUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateMyUser(ctx, req.(*UpdateMyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateUserCallerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserCallerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateUserCallerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateUserCallerId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateUserCallerId(ctx, req.(*UpdateUserCallerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateUserByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateUserByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateUserByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateUserByOrgId(ctx, req.(*CreateUserByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateDelegatedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDelegatedUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateDelegatedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateDelegatedUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateDelegatedUser(ctx, req.(*CreateDelegatedUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateUserPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateUserPassword(ctx, req.(*UpdateUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateMyUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMyUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateMyUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateMyUserPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateMyUserPassword(ctx, req.(*UpdateMyUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateUserPasswordByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPasswordByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateUserPasswordByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateUserPasswordByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateUserPasswordByOrgId(ctx, req.(*UpdateUserPasswordByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ResetUserRequirePasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetUserRequirePasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ResetUserRequirePasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ResetUserRequirePasswordReset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ResetUserRequirePasswordReset(ctx, req.(*ResetUserRequirePasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetUserPasswordResetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPasswordResetLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetUserPasswordResetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetUserPasswordResetLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetUserPasswordResetLink(ctx, req.(*GetUserPasswordResetLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetMyUserPasswordResetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyUserPasswordResetLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetMyUserPasswordResetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetMyUserPasswordResetLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetMyUserPasswordResetLink(ctx, req.(*GetMyUserPasswordResetLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetUserPasswordResetLinkByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPasswordResetLinkByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetUserPasswordResetLinkByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetUserPasswordResetLinkByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetUserPasswordResetLinkByOrgId(ctx, req.(*GetUserPasswordResetLinkByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetUserEmailVerified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserEmailVerifiedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetUserEmailVerified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetUserEmailVerified_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetUserEmailVerified(ctx, req.(*GetUserEmailVerifiedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetUserEmailVerifiedByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserEmailVerifiedByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetUserEmailVerifiedByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetUserEmailVerifiedByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetUserEmailVerifiedByOrgId(ctx, req.(*GetUserEmailVerifiedByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_SendUserVerificationEmailByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendUserVerificationEmailByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).SendUserVerificationEmailByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_SendUserVerificationEmailByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).SendUserVerificationEmailByOrgId(ctx, req.(*SendUserVerificationEmailByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_SendUserVerificationEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendUserVerificationEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).SendUserVerificationEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_SendUserVerificationEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).SendUserVerificationEmail(ctx, req.(*SendUserVerificationEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ManualUserEmailVerificationByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManualUserEmailVerificationByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ManualUserEmailVerificationByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ManualUserEmailVerificationByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ManualUserEmailVerificationByOrgId(ctx, req.(*ManualUserEmailVerificationByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ManualUserEmailVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManualUserEmailVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ManualUserEmailVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ManualUserEmailVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ManualUserEmailVerification(ctx, req.(*ManualUserEmailVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetTempUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTempUserTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetTempUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetTempUserToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetTempUserToken(ctx, req.(*GetTempUserTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetTempUserTokenByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTempUserTokenByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetTempUserTokenByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetTempUserTokenByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetTempUserTokenByUserId(ctx, req.(*GetTempUserTokenByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetCountriesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountriesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetCountriesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetCountriesList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetCountriesList(ctx, req.(*GetCountriesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetAdminClientPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminClientPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetAdminClientPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetAdminClientPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetAdminClientPreferences(ctx, req.(*GetAdminClientPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateAdminClientPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdminClientPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateAdminClientPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateAdminClientPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateAdminClientPreferences(ctx, req.(*UpdateAdminClientPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetPermissions(ctx, req.(*GetPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_RevokeAccountOwnerPermissionFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeAccountOwnerPermissionFromUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RevokeAccountOwnerPermissionFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RevokeAccountOwnerPermissionFromUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RevokeAccountOwnerPermissionFromUser(ctx, req.(*RevokeAccountOwnerPermissionFromUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateUserDisabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDisabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateUserDisabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateUserDisabled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateUserDisabled(ctx, req.(*UpdateUserDisabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateUserDisabledByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDisabledByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateUserDisabledByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateUserDisabledByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateUserDisabledByOrgId(ctx, req.(*UpdateUserDisabledByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateBulkUsersDisabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBulkUsersDisabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateBulkUsersDisabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateBulkUsersDisabled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateBulkUsersDisabled(ctx, req.(*UpdateBulkUsersDisabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetOrgBillingSettingsByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgBillingSettingsByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetOrgBillingSettingsByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetOrgBillingSettingsByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetOrgBillingSettingsByOrgId(ctx, req.(*GetOrgBillingSettingsByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetOrgBillingSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgBillingSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetOrgBillingSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetOrgBillingSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetOrgBillingSettings(ctx, req.(*GetOrgBillingSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_SetOrgBillingSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrgBillingSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).SetOrgBillingSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_SetOrgBillingSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).SetOrgBillingSettings(ctx, req.(*SetOrgBillingSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AddOrgBillingOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrgBillingOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AddOrgBillingOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AddOrgBillingOverride_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AddOrgBillingOverride(ctx, req.(*AddOrgBillingOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_RemoveOrgBillingOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrgBillingOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RemoveOrgBillingOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RemoveOrgBillingOverride_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RemoveOrgBillingOverride(ctx, req.(*RemoveOrgBillingOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetSystemDefaultBillingRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemDefaultBillingRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetSystemDefaultBillingRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetSystemDefaultBillingRates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetSystemDefaultBillingRates(ctx, req.(*GetSystemDefaultBillingRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListPermissionGroupsByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionGroupsByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListPermissionGroupsByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListPermissionGroupsByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListPermissionGroupsByOrgId(ctx, req.(*ListPermissionGroupsByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListPermissionGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListPermissionGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListPermissionGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListPermissionGroups(ctx, req.(*ListPermissionGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreatePermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreatePermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreatePermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreatePermissionGroup(ctx, req.(*CreatePermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdatePermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdatePermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdatePermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdatePermissionGroup(ctx, req.(*UpdatePermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeletePermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeletePermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeletePermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeletePermissionGroup(ctx, req.(*DeletePermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AssignUserToAccountOwnerPermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignUserToAccountOwnerPermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AssignUserToAccountOwnerPermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AssignUserToAccountOwnerPermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AssignUserToAccountOwnerPermissionGroup(ctx, req.(*AssignUserToAccountOwnerPermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AssignUserPermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignUserPermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AssignUserPermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AssignUserPermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AssignUserPermissionGroup(ctx, req.(*AssignUserPermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AssignUsersPermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignUsersPermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AssignUsersPermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AssignUsersPermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AssignUsersPermissionGroup(ctx, req.(*AssignUsersPermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateUserNeoPermissionGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserNeoPermissionGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateUserNeoPermissionGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateUserNeoPermissionGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateUserNeoPermissionGroups(ctx, req.(*UpdateUserNeoPermissionGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_RevokeUserPermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeUserPermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RevokeUserPermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RevokeUserPermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RevokeUserPermissionGroup(ctx, req.(*RevokeUserPermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_RevokeUsersPermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeUsersPermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RevokeUsersPermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RevokeUsersPermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RevokeUsersPermissionGroup(ctx, req.(*RevokeUsersPermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_InitDefaultPermissionGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitDefaultPermissionGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).InitDefaultPermissionGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_InitDefaultPermissionGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).InitDefaultPermissionGroups(ctx, req.(*InitDefaultPermissionGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AddPermissionToAccountOwnerPermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPermissionToAccountOwnerPermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AddPermissionToAccountOwnerPermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AddPermissionToAccountOwnerPermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AddPermissionToAccountOwnerPermissionGroup(ctx, req.(*AddPermissionToAccountOwnerPermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_RevokePermissionToAccountOwnerPermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokePermissionToAccountOwnerPermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RevokePermissionToAccountOwnerPermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RevokePermissionToAccountOwnerPermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RevokePermissionToAccountOwnerPermissionGroup(ctx, req.(*RevokePermissionToAccountOwnerPermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AddPermissionToOrgDefaultGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPermissionToOrgDefaultGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AddPermissionToOrgDefaultGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AddPermissionToOrgDefaultGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AddPermissionToOrgDefaultGroup(ctx, req.(*AddPermissionToOrgDefaultGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_RemovePermissionFromOrgDefaultGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePermissionFromOrgDefaultGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RemovePermissionFromOrgDefaultGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RemovePermissionFromOrgDefaultGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RemovePermissionFromOrgDefaultGroup(ctx, req.(*RemovePermissionFromOrgDefaultGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetOrgDefaultSuperUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgDefaultSuperUserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetOrgDefaultSuperUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetOrgDefaultSuperUserGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetOrgDefaultSuperUserGroup(ctx, req.(*GetOrgDefaultSuperUserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListP3PermissionGroupsByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListP3PermissionGroupsByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListP3PermissionGroupsByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListP3PermissionGroupsByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListP3PermissionGroupsByOrgId(ctx, req.(*ListP3PermissionGroupsByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListP3PermissionGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListP3PermissionGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListP3PermissionGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListP3PermissionGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListP3PermissionGroups(ctx, req.(*ListP3PermissionGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AddUserRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AddUserRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AddUserRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AddUserRegion(ctx, req.(*AddUserRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_RemoveUserRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RemoveUserRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RemoveUserRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RemoveUserRegion(ctx, req.(*RemoveUserRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateP3PermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateP3PermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateP3PermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateP3PermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateP3PermissionGroup(ctx, req.(*CreateP3PermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateP3PermissionGroupByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateP3PermissionGroupByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateP3PermissionGroupByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateP3PermissionGroupByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateP3PermissionGroupByOrgId(ctx, req.(*UpdateP3PermissionGroupByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateP3PermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateP3PermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateP3PermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateP3PermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateP3PermissionGroup(ctx, req.(*UpdateP3PermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteP3PermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteP3PermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteP3PermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteP3PermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteP3PermissionGroup(ctx, req.(*DeleteP3PermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AssignUsersP3PermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignUsersP3PermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AssignUsersP3PermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AssignUsersP3PermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AssignUsersP3PermissionGroup(ctx, req.(*AssignUsersP3PermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AddLoginToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLoginToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AddLoginToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AddLoginToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AddLoginToUser(ctx, req.(*AddLoginToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_RevokeUsersP3PermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeUsersP3PermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RevokeUsersP3PermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RevokeUsersP3PermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RevokeUsersP3PermissionGroup(ctx, req.(*RevokeUsersP3PermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetContactPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetContactPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetContactPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetContactPreferences(ctx, req.(*GetContactPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateContactPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContactPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateContactPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateContactPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateContactPreferences(ctx, req.(*UpdateContactPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetCompliancePreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompliancePreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetCompliancePreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetCompliancePreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetCompliancePreferences(ctx, req.(*GetCompliancePreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateCompliancePreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompliancePreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateCompliancePreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateCompliancePreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateCompliancePreferences(ctx, req.(*UpdateCompliancePreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetAgentPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetAgentPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetAgentPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetAgentPreferences(ctx, req.(*GetAgentPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateAgentPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateAgentPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateAgentPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateAgentPreferences(ctx, req.(*UpdateAgentPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetOrganizationPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetOrganizationPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetOrganizationPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetOrganizationPreferences(ctx, req.(*GetOrganizationPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateOrganizationPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateOrganizationPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateOrganizationPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateOrganizationPreferences(ctx, req.(*UpdateOrganizationPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetSchedulePreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchedulePreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetSchedulePreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetSchedulePreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetSchedulePreferences(ctx, req.(*GetSchedulePreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateSchedulePreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSchedulePreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateSchedulePreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateSchedulePreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateSchedulePreferences(ctx, req.(*UpdateSchedulePreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetBusinessPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetBusinessPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetBusinessPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetBusinessPreferences(ctx, req.(*GetBusinessPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateBusinessPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateBusinessPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateBusinessPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateBusinessPreferences(ctx, req.(*UpdateBusinessPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetEndOfDayPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEndOfDayPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetEndOfDayPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetEndOfDayPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetEndOfDayPreferences(ctx, req.(*GetEndOfDayPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateEndOfDayPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEndOfDayPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateEndOfDayPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateEndOfDayPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateEndOfDayPreferences(ctx, req.(*UpdateEndOfDayPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetReportFilterPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilterPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetReportFilterPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetReportFilterPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetReportFilterPreferences(ctx, req.(*GetFilterPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateReportFilterPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFilterPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateReportFilterPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateReportFilterPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateReportFilterPreferences(ctx, req.(*UpdateFilterPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetPhonePreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhonePreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetPhonePreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetPhonePreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetPhonePreferences(ctx, req.(*GetPhonePreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdatePhonePreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhonePreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdatePhonePreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdatePhonePreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdatePhonePreferences(ctx, req.(*UpdatePhonePreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetDashboardGeneralPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardGeneralPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetDashboardGeneralPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetDashboardGeneralPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetDashboardGeneralPreferences(ctx, req.(*GetDashboardGeneralPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateDashboardGeneralPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDashboardGeneralPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateDashboardGeneralPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateDashboardGeneralPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateDashboardGeneralPreferences(ctx, req.(*UpdateDashboardGeneralPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetWebhookPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWebhookPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetWebhookPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetWebhookPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetWebhookPreferences(ctx, req.(*GetWebhookPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateWebhookPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebhookPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateWebhookPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateWebhookPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateWebhookPreferences(ctx, req.(*UpdateWebhookPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetBroadcastPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBroadcastPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetBroadcastPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetBroadcastPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetBroadcastPreferences(ctx, req.(*GetBroadcastPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateBroadcastPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBroadcastPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateBroadcastPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateBroadcastPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateBroadcastPreferences(ctx, req.(*UpdateBroadcastPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetAuthenticationPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthenticationPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetAuthenticationPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetAuthenticationPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetAuthenticationPreferences(ctx, req.(*GetAuthenticationPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateAuthenticationPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthenticationPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateAuthenticationPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateAuthenticationPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateAuthenticationPreferences(ctx, req.(*UpdateAuthenticationPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetRecordingPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordingPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetRecordingPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetRecordingPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetRecordingPreferences(ctx, req.(*GetRecordingPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateRecordingPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecordingPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateRecordingPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateRecordingPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateRecordingPreferences(ctx, req.(*UpdateRecordingPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetDashboardQueuePreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardQueuePreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetDashboardQueuePreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetDashboardQueuePreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetDashboardQueuePreferences(ctx, req.(*GetDashboardQueuePreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateDashboardQueuePreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDashboardQueuePreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateDashboardQueuePreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateDashboardQueuePreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateDashboardQueuePreferences(ctx, req.(*UpdateDashboardQueuePreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetAgentQuickViewPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentQuickViewPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetAgentQuickViewPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetAgentQuickViewPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetAgentQuickViewPreferences(ctx, req.(*GetAgentQuickViewPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetVoiceAnalyticsPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoiceAnalyticsPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetVoiceAnalyticsPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetVoiceAnalyticsPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetVoiceAnalyticsPreferences(ctx, req.(*GetVoiceAnalyticsPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateVoiceAnalyticsPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVoiceAnalyticsPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateVoiceAnalyticsPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateVoiceAnalyticsPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateVoiceAnalyticsPreferences(ctx, req.(*UpdateVoiceAnalyticsPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateVoiceAnalyticsPreferencesEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVoiceAnalyticsPreferencesEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateVoiceAnalyticsPreferencesEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateVoiceAnalyticsPreferencesEnabled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateVoiceAnalyticsPreferencesEnabled(ctx, req.(*UpdateVoiceAnalyticsPreferencesEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetScorecardsPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScorecardsPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetScorecardsPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetScorecardsPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetScorecardsPreferences(ctx, req.(*GetScorecardsPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateScorecardsPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScorecardsPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateScorecardsPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateScorecardsPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateScorecardsPreferences(ctx, req.(*UpdateScorecardsPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetEmailSmsPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailSmsPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetEmailSmsPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetEmailSmsPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetEmailSmsPreferences(ctx, req.(*GetEmailSmsPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateEmailSmsPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailSmsPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateEmailSmsPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateEmailSmsPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateEmailSmsPreferences(ctx, req.(*UpdateEmailSmsPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_EditAgentQuickViewPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditAgentQuickViewPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).EditAgentQuickViewPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_EditAgentQuickViewPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).EditAgentQuickViewPreferences(ctx, req.(*EditAgentQuickViewPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_EditBackofficeThemePreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditBackofficeThemePreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).EditBackofficeThemePreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_EditBackofficeThemePreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).EditBackofficeThemePreference(ctx, req.(*EditBackofficeThemePreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetBackofficeThemePreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackofficeThemePreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetBackofficeThemePreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetBackofficeThemePreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetBackofficeThemePreference(ctx, req.(*GetBackofficeThemePreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AcceptLinkbackRecordingTerms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptLinkbackRecordingTermsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AcceptLinkbackRecordingTerms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AcceptLinkbackRecordingTerms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AcceptLinkbackRecordingTerms(ctx, req.(*AcceptLinkbackRecordingTermsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_LinkbackUpdateBroadcastTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkbackUpdateBroadcastTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).LinkbackUpdateBroadcastTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_LinkbackUpdateBroadcastTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).LinkbackUpdateBroadcastTemplates(ctx, req.(*LinkbackUpdateBroadcastTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_RecordEmailUnsubscribeAcknowledgement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordEmailUnsubscribeAcknowledgementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RecordEmailUnsubscribeAcknowledgement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RecordEmailUnsubscribeAcknowledgement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RecordEmailUnsubscribeAcknowledgement(ctx, req.(*RecordEmailUnsubscribeAcknowledgementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ClearEmailUnsubscribeAcknowledgement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearEmailUnsubscribeAcknowledgementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ClearEmailUnsubscribeAcknowledgement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ClearEmailUnsubscribeAcknowledgement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ClearEmailUnsubscribeAcknowledgement(ctx, req.(*ClearEmailUnsubscribeAcknowledgementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateWebLinkTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebLinkTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateWebLinkTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateWebLinkTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateWebLinkTemplate(ctx, req.(*CreateWebLinkTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListWebLinkTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWebLinkTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListWebLinkTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListWebLinkTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListWebLinkTemplates(ctx, req.(*ListWebLinkTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetWebLinkTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWebLinkTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetWebLinkTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetWebLinkTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetWebLinkTemplate(ctx, req.(*GetWebLinkTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateWebLinkTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebLinkTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateWebLinkTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateWebLinkTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateWebLinkTemplate(ctx, req.(*UpdateWebLinkTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteWebLinkTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWebLinkTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteWebLinkTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteWebLinkTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteWebLinkTemplate(ctx, req.(*DeleteWebLinkTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateAgentTriggerTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgentTriggerTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateAgentTriggerTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateAgentTriggerTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateAgentTriggerTemplate(ctx, req.(*CreateAgentTriggerTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListAgentTriggerTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentTriggerTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListAgentTriggerTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListAgentTriggerTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListAgentTriggerTemplates(ctx, req.(*ListAgentTriggerTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetAgentTriggerTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentTriggerTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetAgentTriggerTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetAgentTriggerTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetAgentTriggerTemplate(ctx, req.(*GetAgentTriggerTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateAgentTriggerTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentTriggerTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateAgentTriggerTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateAgentTriggerTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateAgentTriggerTemplate(ctx, req.(*UpdateAgentTriggerTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteAgentTriggerTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAgentTriggerTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteAgentTriggerTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteAgentTriggerTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteAgentTriggerTemplate(ctx, req.(*DeleteAgentTriggerTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateClientInfoDisplayTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientInfoDisplayTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateClientInfoDisplayTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateClientInfoDisplayTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateClientInfoDisplayTemplate(ctx, req.(*CreateClientInfoDisplayTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListClientInfoDisplayTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientInfoDisplayTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListClientInfoDisplayTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListClientInfoDisplayTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListClientInfoDisplayTemplates(ctx, req.(*ListClientInfoDisplayTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateClientInfoDisplayTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientInfoDisplayTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateClientInfoDisplayTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateClientInfoDisplayTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateClientInfoDisplayTemplate(ctx, req.(*UpdateClientInfoDisplayTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteClientInfoDisplayTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClientInfoDisplayTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteClientInfoDisplayTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteClientInfoDisplayTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteClientInfoDisplayTemplate(ctx, req.(*DeleteClientInfoDisplayTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetClientInfoDisplayTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientInfoDisplayTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetClientInfoDisplayTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetClientInfoDisplayTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetClientInfoDisplayTemplate(ctx, req.(*GetClientInfoDisplayTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListAgentPauseCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentPauseCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListAgentPauseCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListAgentPauseCodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListAgentPauseCodes(ctx, req.(*ListAgentPauseCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateAgentPauseCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgentPauseCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateAgentPauseCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateAgentPauseCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateAgentPauseCode(ctx, req.(*CreateAgentPauseCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateAgentPauseCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentPauseCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateAgentPauseCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateAgentPauseCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateAgentPauseCode(ctx, req.(*UpdateAgentPauseCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteAgentPauseCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAgentPauseCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteAgentPauseCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteAgentPauseCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteAgentPauseCode(ctx, req.(*DeleteAgentPauseCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListCustomReportFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCustomReportFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListCustomReportFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListCustomReportFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListCustomReportFilters(ctx, req.(*ListCustomReportFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateCustomReportFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomReportFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateCustomReportFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateCustomReportFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateCustomReportFilter(ctx, req.(*CreateCustomReportFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateCustomReportFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomReportFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateCustomReportFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateCustomReportFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateCustomReportFilter(ctx, req.(*UpdateCustomReportFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteCustomReportFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomReportFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteCustomReportFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteCustomReportFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteCustomReportFilter(ctx, req.(*DeleteCustomReportFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListAgentResponseGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentResponseGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListAgentResponseGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListAgentResponseGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListAgentResponseGroups(ctx, req.(*ListAgentResponseGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListLastTemplateElements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLastTemplateElementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListLastTemplateElements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListLastTemplateElements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListLastTemplateElements(ctx, req.(*ListLastTemplateElementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListQueueConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQueueConfigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListQueueConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListQueueConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListQueueConfigs(ctx, req.(*ListQueueConfigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListQueueConfigsByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQueueConfigsByOrgIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListQueueConfigsByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListQueueConfigsByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListQueueConfigsByOrgId(ctx, req.(*ListQueueConfigsByOrgIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteQueueConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQueueConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteQueueConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteQueueConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteQueueConfig(ctx, req.(*DeleteQueueConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetQueueConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetQueueConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetQueueConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetQueueConfig(ctx, req.(*GetQueueConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateQueueConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueueConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateQueueConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateQueueConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateQueueConfig(ctx, req.(*CreateQueueConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateQueueConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQueueConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateQueueConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateQueueConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateQueueConfig(ctx, req.(*UpdateQueueConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CopyQueueConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyQueueConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CopyQueueConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CopyQueueConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CopyQueueConfig(ctx, req.(*CopyQueueConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetAllQueueConfigSounds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllQueueConfigSoundsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetAllQueueConfigSounds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetAllQueueConfigSounds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetAllQueueConfigSounds(ctx, req.(*GetAllQueueConfigSoundsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetQueueConfigSound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueConfigSoundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetQueueConfigSound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetQueueConfigSound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetQueueConfigSound(ctx, req.(*GetQueueConfigSoundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_SetQueueConfigSound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetQueueConfigSoundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).SetQueueConfigSound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_SetQueueConfigSound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).SetQueueConfigSound(ctx, req.(*SetQueueConfigSoundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_SetAllQueueConfigSoundsFromSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAllQueueConfigSoundsFromSourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).SetAllQueueConfigSoundsFromSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_SetAllQueueConfigSoundsFromSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).SetAllQueueConfigSoundsFromSource(ctx, req.(*SetAllQueueConfigSoundsFromSourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetUserBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBlockedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetUserBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetUserBlocked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetUserBlocked(ctx, req.(*GetUserBlockedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UnblockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnblockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UnblockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UnblockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UnblockUser(ctx, req.(*UnblockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListP3UnMigratedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListP3UnMigratedUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListP3UnMigratedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListP3UnMigratedUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListP3UnMigratedUsers(ctx, req.(*ListP3UnMigratedUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_MigrateP3User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateP3UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).MigrateP3User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_MigrateP3User_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).MigrateP3User(ctx, req.(*MigrateP3UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateP3UserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateP3UserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateP3UserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateP3UserName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateP3UserName(ctx, req.(*UpdateP3UserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListOwnedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOwnedUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListOwnedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListOwnedUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListOwnedUsers(ctx, req.(*ListOwnedUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListOwnedOrgsByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOwnedOrgsByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListOwnedOrgsByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListOwnedOrgsByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListOwnedOrgsByOrgId(ctx, req.(*ListOwnedOrgsByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListOwnedOrgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOwnedOrgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListOwnedOrgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListOwnedOrgs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListOwnedOrgs(ctx, req.(*ListOwnedOrgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_RemoveLoginStrikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLoginStrikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RemoveLoginStrikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RemoveLoginStrikes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RemoveLoginStrikes(ctx, req.(*RemoveLoginStrikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_RemoveUserLoginStrikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserLoginStrikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RemoveUserLoginStrikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RemoveUserLoginStrikes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RemoveUserLoginStrikes(ctx, req.(*RemoveUserLoginStrikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListLoginHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoginHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListLoginHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListLoginHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListLoginHistory(ctx, req.(*ListLoginHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateP3UserSids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateP3UserSidsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateP3UserSids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateP3UserSids_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateP3UserSids(ctx, req.(*UpdateP3UserSidsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateAuthConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateAuthConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateAuthConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateAuthConnection(ctx, req.(*CreateAuthConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetAuthConnectionSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthConnectionSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetAuthConnectionSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetAuthConnectionSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetAuthConnectionSettings(ctx, req.(*GetAuthConnectionSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateAuthConnectionSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthConnectionSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateAuthConnectionSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateAuthConnectionSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateAuthConnectionSettings(ctx, req.(*UpdateAuthConnectionSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteAuthConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteAuthConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteAuthConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteAuthConnection(ctx, req.(*DeleteAuthConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetUserSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetUserSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetUserSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetUserSubscription(ctx, req.(*GetUserSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetMyUserSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyUserSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetMyUserSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetMyUserSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetMyUserSubscription(ctx, req.(*GetMyUserSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AddUserSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AddUserSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AddUserSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AddUserSubscription(ctx, req.(*AddUserSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AddMyUserSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMyUserSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AddMyUserSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AddMyUserSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AddMyUserSubscription(ctx, req.(*AddMyUserSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_RemoveUserSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RemoveUserSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RemoveUserSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RemoveUserSubscription(ctx, req.(*RemoveUserSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_RemoveMyUserSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMyUserSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RemoveMyUserSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RemoveMyUserSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RemoveMyUserSubscription(ctx, req.(*RemoveMyUserSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateUserSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateUserSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateUserSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateUserSubscription(ctx, req.(*UpdateUserSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateMyUserSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMyUserSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateMyUserSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateMyUserSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateMyUserSubscription(ctx, req.(*UpdateMyUserSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListUserSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListUserSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListUserSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListUserSubscriptions(ctx, req.(*ListUserSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListMyUserSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyUserSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListMyUserSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListMyUserSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListMyUserSubscriptions(ctx, req.(*ListMyUserSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListOrgSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListOrgSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListOrgSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListOrgSubscriptions(ctx, req.(*ListOrgSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetSystemEnvironmentDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemEnvironmentDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetSystemEnvironmentDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetSystemEnvironmentDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetSystemEnvironmentDetails(ctx, req.(*GetSystemEnvironmentDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListAgentStatisticsTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentStatisticsTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListAgentStatisticsTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListAgentStatisticsTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListAgentStatisticsTemplates(ctx, req.(*ListAgentStatisticsTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateAgentStatisticsTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgentStatisticsTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateAgentStatisticsTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateAgentStatisticsTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateAgentStatisticsTemplate(ctx, req.(*CreateAgentStatisticsTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateAgentStatisticsTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentStatisticsTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateAgentStatisticsTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateAgentStatisticsTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateAgentStatisticsTemplate(ctx, req.(*UpdateAgentStatisticsTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteAgentStatisticsTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAgentStatisticsTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteAgentStatisticsTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteAgentStatisticsTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteAgentStatisticsTemplate(ctx, req.(*DeleteAgentStatisticsTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Org_ServiceDesc is the grpc.ServiceDesc for Org service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Org_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v0alpha.Org",
	HandlerType: (*OrgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterOrganization",
			Handler:    _Org_RegisterOrganization_Handler,
		},
		{
			MethodName: "ConvertOrgToManual",
			Handler:    _Org_ConvertOrgToManual_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _Org_UpdateOrganization_Handler,
		},
		{
			MethodName: "ArchiveOrganization",
			Handler:    _Org_ArchiveOrganization_Handler,
		},
		{
			MethodName: "UnArchiveOrganization",
			Handler:    _Org_UnArchiveOrganization_Handler,
		},
		{
			MethodName: "ListArchivedOrganizations",
			Handler:    _Org_ListArchivedOrganizations_Handler,
		},
		{
			MethodName: "GetOrganizationProfile",
			Handler:    _Org_GetOrganizationProfile_Handler,
		},
		{
			MethodName: "GetOrganizationProfileById",
			Handler:    _Org_GetOrganizationProfileById_Handler,
		},
		{
			MethodName: "ListOrganizationDescriptions",
			Handler:    _Org_ListOrganizationDescriptions_Handler,
		},
		{
			MethodName: "ListRegionalOrganizations",
			Handler:    _Org_ListRegionalOrganizations_Handler,
		},
		{
			MethodName: "UpdateP3OwningOrg",
			Handler:    _Org_UpdateP3OwningOrg_Handler,
		},
		{
			MethodName: "GetP3OwningOrg",
			Handler:    _Org_GetP3OwningOrg_Handler,
		},
		{
			MethodName: "ListOrganizationUserDescriptions",
			Handler:    _Org_ListOrganizationUserDescriptions_Handler,
		},
		{
			MethodName: "GetUserDirectory",
			Handler:    _Org_GetUserDirectory_Handler,
		},
		{
			MethodName: "GetRegions",
			Handler:    _Org_GetRegions_Handler,
		},
		{
			MethodName: "GetMyUserDetails",
			Handler:    _Org_GetMyUserDetails_Handler,
		},
		{
			MethodName: "GetUserDetails",
			Handler:    _Org_GetUserDetails_Handler,
		},
		{
			MethodName: "AdminGetUserDetails",
			Handler:    _Org_AdminGetUserDetails_Handler,
		},
		{
			MethodName: "GetAgentUsers",
			Handler:    _Org_GetAgentUsers_Handler,
		},
		{
			MethodName: "GetAgentSettings",
			Handler:    _Org_GetAgentSettings_Handler,
		},
		{
			MethodName: "GetAgentProfileGroup",
			Handler:    _Org_GetAgentProfileGroup_Handler,
		},
		{
			MethodName: "UpdateAgentProfileGroup",
			Handler:    _Org_UpdateAgentProfileGroup_Handler,
		},
		{
			MethodName: "CreateAgentProfileGroup",
			Handler:    _Org_CreateAgentProfileGroup_Handler,
		},
		{
			MethodName: "ListAgentProfileGroups",
			Handler:    _Org_ListAgentProfileGroups_Handler,
		},
		{
			MethodName: "DeleteAgentProfileGroup",
			Handler:    _Org_DeleteAgentProfileGroup_Handler,
		},
		{
			MethodName: "AssignAgentProfileGroups",
			Handler:    _Org_AssignAgentProfileGroups_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Org_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateMyUser",
			Handler:    _Org_UpdateMyUser_Handler,
		},
		{
			MethodName: "UpdateUserCallerId",
			Handler:    _Org_UpdateUserCallerId_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Org_CreateUser_Handler,
		},
		{
			MethodName: "CreateUserByOrgId",
			Handler:    _Org_CreateUserByOrgId_Handler,
		},
		{
			MethodName: "CreateDelegatedUser",
			Handler:    _Org_CreateDelegatedUser_Handler,
		},
		{
			MethodName: "UpdateUserPassword",
			Handler:    _Org_UpdateUserPassword_Handler,
		},
		{
			MethodName: "UpdateMyUserPassword",
			Handler:    _Org_UpdateMyUserPassword_Handler,
		},
		{
			MethodName: "UpdateUserPasswordByOrgId",
			Handler:    _Org_UpdateUserPasswordByOrgId_Handler,
		},
		{
			MethodName: "ResetUserRequirePasswordReset",
			Handler:    _Org_ResetUserRequirePasswordReset_Handler,
		},
		{
			MethodName: "GetUserPasswordResetLink",
			Handler:    _Org_GetUserPasswordResetLink_Handler,
		},
		{
			MethodName: "GetMyUserPasswordResetLink",
			Handler:    _Org_GetMyUserPasswordResetLink_Handler,
		},
		{
			MethodName: "GetUserPasswordResetLinkByOrgId",
			Handler:    _Org_GetUserPasswordResetLinkByOrgId_Handler,
		},
		{
			MethodName: "GetUserEmailVerified",
			Handler:    _Org_GetUserEmailVerified_Handler,
		},
		{
			MethodName: "GetUserEmailVerifiedByOrgId",
			Handler:    _Org_GetUserEmailVerifiedByOrgId_Handler,
		},
		{
			MethodName: "SendUserVerificationEmailByOrgId",
			Handler:    _Org_SendUserVerificationEmailByOrgId_Handler,
		},
		{
			MethodName: "SendUserVerificationEmail",
			Handler:    _Org_SendUserVerificationEmail_Handler,
		},
		{
			MethodName: "ManualUserEmailVerificationByOrgId",
			Handler:    _Org_ManualUserEmailVerificationByOrgId_Handler,
		},
		{
			MethodName: "ManualUserEmailVerification",
			Handler:    _Org_ManualUserEmailVerification_Handler,
		},
		{
			MethodName: "GetTempUserToken",
			Handler:    _Org_GetTempUserToken_Handler,
		},
		{
			MethodName: "GetTempUserTokenByUserId",
			Handler:    _Org_GetTempUserTokenByUserId_Handler,
		},
		{
			MethodName: "GetCountriesList",
			Handler:    _Org_GetCountriesList_Handler,
		},
		{
			MethodName: "GetAdminClientPreferences",
			Handler:    _Org_GetAdminClientPreferences_Handler,
		},
		{
			MethodName: "UpdateAdminClientPreferences",
			Handler:    _Org_UpdateAdminClientPreferences_Handler,
		},
		{
			MethodName: "GetPermissions",
			Handler:    _Org_GetPermissions_Handler,
		},
		{
			MethodName: "RevokeAccountOwnerPermissionFromUser",
			Handler:    _Org_RevokeAccountOwnerPermissionFromUser_Handler,
		},
		{
			MethodName: "UpdateUserDisabled",
			Handler:    _Org_UpdateUserDisabled_Handler,
		},
		{
			MethodName: "UpdateUserDisabledByOrgId",
			Handler:    _Org_UpdateUserDisabledByOrgId_Handler,
		},
		{
			MethodName: "UpdateBulkUsersDisabled",
			Handler:    _Org_UpdateBulkUsersDisabled_Handler,
		},
		{
			MethodName: "GetOrgBillingSettingsByOrgId",
			Handler:    _Org_GetOrgBillingSettingsByOrgId_Handler,
		},
		{
			MethodName: "GetOrgBillingSettings",
			Handler:    _Org_GetOrgBillingSettings_Handler,
		},
		{
			MethodName: "SetOrgBillingSettings",
			Handler:    _Org_SetOrgBillingSettings_Handler,
		},
		{
			MethodName: "AddOrgBillingOverride",
			Handler:    _Org_AddOrgBillingOverride_Handler,
		},
		{
			MethodName: "RemoveOrgBillingOverride",
			Handler:    _Org_RemoveOrgBillingOverride_Handler,
		},
		{
			MethodName: "GetSystemDefaultBillingRates",
			Handler:    _Org_GetSystemDefaultBillingRates_Handler,
		},
		{
			MethodName: "ListPermissionGroupsByOrgId",
			Handler:    _Org_ListPermissionGroupsByOrgId_Handler,
		},
		{
			MethodName: "ListPermissionGroups",
			Handler:    _Org_ListPermissionGroups_Handler,
		},
		{
			MethodName: "CreatePermissionGroup",
			Handler:    _Org_CreatePermissionGroup_Handler,
		},
		{
			MethodName: "UpdatePermissionGroup",
			Handler:    _Org_UpdatePermissionGroup_Handler,
		},
		{
			MethodName: "DeletePermissionGroup",
			Handler:    _Org_DeletePermissionGroup_Handler,
		},
		{
			MethodName: "AssignUserToAccountOwnerPermissionGroup",
			Handler:    _Org_AssignUserToAccountOwnerPermissionGroup_Handler,
		},
		{
			MethodName: "AssignUserPermissionGroup",
			Handler:    _Org_AssignUserPermissionGroup_Handler,
		},
		{
			MethodName: "AssignUsersPermissionGroup",
			Handler:    _Org_AssignUsersPermissionGroup_Handler,
		},
		{
			MethodName: "UpdateUserNeoPermissionGroups",
			Handler:    _Org_UpdateUserNeoPermissionGroups_Handler,
		},
		{
			MethodName: "RevokeUserPermissionGroup",
			Handler:    _Org_RevokeUserPermissionGroup_Handler,
		},
		{
			MethodName: "RevokeUsersPermissionGroup",
			Handler:    _Org_RevokeUsersPermissionGroup_Handler,
		},
		{
			MethodName: "InitDefaultPermissionGroups",
			Handler:    _Org_InitDefaultPermissionGroups_Handler,
		},
		{
			MethodName: "AddPermissionToAccountOwnerPermissionGroup",
			Handler:    _Org_AddPermissionToAccountOwnerPermissionGroup_Handler,
		},
		{
			MethodName: "RevokePermissionToAccountOwnerPermissionGroup",
			Handler:    _Org_RevokePermissionToAccountOwnerPermissionGroup_Handler,
		},
		{
			MethodName: "AddPermissionToOrgDefaultGroup",
			Handler:    _Org_AddPermissionToOrgDefaultGroup_Handler,
		},
		{
			MethodName: "RemovePermissionFromOrgDefaultGroup",
			Handler:    _Org_RemovePermissionFromOrgDefaultGroup_Handler,
		},
		{
			MethodName: "GetOrgDefaultSuperUserGroup",
			Handler:    _Org_GetOrgDefaultSuperUserGroup_Handler,
		},
		{
			MethodName: "ListP3PermissionGroupsByOrgId",
			Handler:    _Org_ListP3PermissionGroupsByOrgId_Handler,
		},
		{
			MethodName: "ListP3PermissionGroups",
			Handler:    _Org_ListP3PermissionGroups_Handler,
		},
		{
			MethodName: "AddUserRegion",
			Handler:    _Org_AddUserRegion_Handler,
		},
		{
			MethodName: "RemoveUserRegion",
			Handler:    _Org_RemoveUserRegion_Handler,
		},
		{
			MethodName: "CreateP3PermissionGroup",
			Handler:    _Org_CreateP3PermissionGroup_Handler,
		},
		{
			MethodName: "UpdateP3PermissionGroupByOrgId",
			Handler:    _Org_UpdateP3PermissionGroupByOrgId_Handler,
		},
		{
			MethodName: "UpdateP3PermissionGroup",
			Handler:    _Org_UpdateP3PermissionGroup_Handler,
		},
		{
			MethodName: "DeleteP3PermissionGroup",
			Handler:    _Org_DeleteP3PermissionGroup_Handler,
		},
		{
			MethodName: "AssignUsersP3PermissionGroup",
			Handler:    _Org_AssignUsersP3PermissionGroup_Handler,
		},
		{
			MethodName: "AddLoginToUser",
			Handler:    _Org_AddLoginToUser_Handler,
		},
		{
			MethodName: "RevokeUsersP3PermissionGroup",
			Handler:    _Org_RevokeUsersP3PermissionGroup_Handler,
		},
		{
			MethodName: "GetContactPreferences",
			Handler:    _Org_GetContactPreferences_Handler,
		},
		{
			MethodName: "UpdateContactPreferences",
			Handler:    _Org_UpdateContactPreferences_Handler,
		},
		{
			MethodName: "GetCompliancePreferences",
			Handler:    _Org_GetCompliancePreferences_Handler,
		},
		{
			MethodName: "UpdateCompliancePreferences",
			Handler:    _Org_UpdateCompliancePreferences_Handler,
		},
		{
			MethodName: "GetAgentPreferences",
			Handler:    _Org_GetAgentPreferences_Handler,
		},
		{
			MethodName: "UpdateAgentPreferences",
			Handler:    _Org_UpdateAgentPreferences_Handler,
		},
		{
			MethodName: "GetOrganizationPreferences",
			Handler:    _Org_GetOrganizationPreferences_Handler,
		},
		{
			MethodName: "UpdateOrganizationPreferences",
			Handler:    _Org_UpdateOrganizationPreferences_Handler,
		},
		{
			MethodName: "GetSchedulePreferences",
			Handler:    _Org_GetSchedulePreferences_Handler,
		},
		{
			MethodName: "UpdateSchedulePreferences",
			Handler:    _Org_UpdateSchedulePreferences_Handler,
		},
		{
			MethodName: "GetBusinessPreferences",
			Handler:    _Org_GetBusinessPreferences_Handler,
		},
		{
			MethodName: "UpdateBusinessPreferences",
			Handler:    _Org_UpdateBusinessPreferences_Handler,
		},
		{
			MethodName: "GetEndOfDayPreferences",
			Handler:    _Org_GetEndOfDayPreferences_Handler,
		},
		{
			MethodName: "UpdateEndOfDayPreferences",
			Handler:    _Org_UpdateEndOfDayPreferences_Handler,
		},
		{
			MethodName: "GetReportFilterPreferences",
			Handler:    _Org_GetReportFilterPreferences_Handler,
		},
		{
			MethodName: "UpdateReportFilterPreferences",
			Handler:    _Org_UpdateReportFilterPreferences_Handler,
		},
		{
			MethodName: "GetPhonePreferences",
			Handler:    _Org_GetPhonePreferences_Handler,
		},
		{
			MethodName: "UpdatePhonePreferences",
			Handler:    _Org_UpdatePhonePreferences_Handler,
		},
		{
			MethodName: "GetDashboardGeneralPreferences",
			Handler:    _Org_GetDashboardGeneralPreferences_Handler,
		},
		{
			MethodName: "UpdateDashboardGeneralPreferences",
			Handler:    _Org_UpdateDashboardGeneralPreferences_Handler,
		},
		{
			MethodName: "GetWebhookPreferences",
			Handler:    _Org_GetWebhookPreferences_Handler,
		},
		{
			MethodName: "UpdateWebhookPreferences",
			Handler:    _Org_UpdateWebhookPreferences_Handler,
		},
		{
			MethodName: "GetBroadcastPreferences",
			Handler:    _Org_GetBroadcastPreferences_Handler,
		},
		{
			MethodName: "UpdateBroadcastPreferences",
			Handler:    _Org_UpdateBroadcastPreferences_Handler,
		},
		{
			MethodName: "GetAuthenticationPreferences",
			Handler:    _Org_GetAuthenticationPreferences_Handler,
		},
		{
			MethodName: "UpdateAuthenticationPreferences",
			Handler:    _Org_UpdateAuthenticationPreferences_Handler,
		},
		{
			MethodName: "GetRecordingPreferences",
			Handler:    _Org_GetRecordingPreferences_Handler,
		},
		{
			MethodName: "UpdateRecordingPreferences",
			Handler:    _Org_UpdateRecordingPreferences_Handler,
		},
		{
			MethodName: "GetDashboardQueuePreferences",
			Handler:    _Org_GetDashboardQueuePreferences_Handler,
		},
		{
			MethodName: "UpdateDashboardQueuePreferences",
			Handler:    _Org_UpdateDashboardQueuePreferences_Handler,
		},
		{
			MethodName: "GetAgentQuickViewPreferences",
			Handler:    _Org_GetAgentQuickViewPreferences_Handler,
		},
		{
			MethodName: "GetVoiceAnalyticsPreferences",
			Handler:    _Org_GetVoiceAnalyticsPreferences_Handler,
		},
		{
			MethodName: "UpdateVoiceAnalyticsPreferences",
			Handler:    _Org_UpdateVoiceAnalyticsPreferences_Handler,
		},
		{
			MethodName: "UpdateVoiceAnalyticsPreferencesEnabled",
			Handler:    _Org_UpdateVoiceAnalyticsPreferencesEnabled_Handler,
		},
		{
			MethodName: "GetScorecardsPreferences",
			Handler:    _Org_GetScorecardsPreferences_Handler,
		},
		{
			MethodName: "UpdateScorecardsPreferences",
			Handler:    _Org_UpdateScorecardsPreferences_Handler,
		},
		{
			MethodName: "GetEmailSmsPreferences",
			Handler:    _Org_GetEmailSmsPreferences_Handler,
		},
		{
			MethodName: "UpdateEmailSmsPreferences",
			Handler:    _Org_UpdateEmailSmsPreferences_Handler,
		},
		{
			MethodName: "EditAgentQuickViewPreferences",
			Handler:    _Org_EditAgentQuickViewPreferences_Handler,
		},
		{
			MethodName: "EditBackofficeThemePreference",
			Handler:    _Org_EditBackofficeThemePreference_Handler,
		},
		{
			MethodName: "GetBackofficeThemePreference",
			Handler:    _Org_GetBackofficeThemePreference_Handler,
		},
		{
			MethodName: "AcceptLinkbackRecordingTerms",
			Handler:    _Org_AcceptLinkbackRecordingTerms_Handler,
		},
		{
			MethodName: "LinkbackUpdateBroadcastTemplates",
			Handler:    _Org_LinkbackUpdateBroadcastTemplates_Handler,
		},
		{
			MethodName: "RecordEmailUnsubscribeAcknowledgement",
			Handler:    _Org_RecordEmailUnsubscribeAcknowledgement_Handler,
		},
		{
			MethodName: "ClearEmailUnsubscribeAcknowledgement",
			Handler:    _Org_ClearEmailUnsubscribeAcknowledgement_Handler,
		},
		{
			MethodName: "CreateWebLinkTemplate",
			Handler:    _Org_CreateWebLinkTemplate_Handler,
		},
		{
			MethodName: "ListWebLinkTemplates",
			Handler:    _Org_ListWebLinkTemplates_Handler,
		},
		{
			MethodName: "GetWebLinkTemplate",
			Handler:    _Org_GetWebLinkTemplate_Handler,
		},
		{
			MethodName: "UpdateWebLinkTemplate",
			Handler:    _Org_UpdateWebLinkTemplate_Handler,
		},
		{
			MethodName: "DeleteWebLinkTemplate",
			Handler:    _Org_DeleteWebLinkTemplate_Handler,
		},
		{
			MethodName: "CreateAgentTriggerTemplate",
			Handler:    _Org_CreateAgentTriggerTemplate_Handler,
		},
		{
			MethodName: "ListAgentTriggerTemplates",
			Handler:    _Org_ListAgentTriggerTemplates_Handler,
		},
		{
			MethodName: "GetAgentTriggerTemplate",
			Handler:    _Org_GetAgentTriggerTemplate_Handler,
		},
		{
			MethodName: "UpdateAgentTriggerTemplate",
			Handler:    _Org_UpdateAgentTriggerTemplate_Handler,
		},
		{
			MethodName: "DeleteAgentTriggerTemplate",
			Handler:    _Org_DeleteAgentTriggerTemplate_Handler,
		},
		{
			MethodName: "CreateClientInfoDisplayTemplate",
			Handler:    _Org_CreateClientInfoDisplayTemplate_Handler,
		},
		{
			MethodName: "ListClientInfoDisplayTemplates",
			Handler:    _Org_ListClientInfoDisplayTemplates_Handler,
		},
		{
			MethodName: "UpdateClientInfoDisplayTemplate",
			Handler:    _Org_UpdateClientInfoDisplayTemplate_Handler,
		},
		{
			MethodName: "DeleteClientInfoDisplayTemplate",
			Handler:    _Org_DeleteClientInfoDisplayTemplate_Handler,
		},
		{
			MethodName: "GetClientInfoDisplayTemplate",
			Handler:    _Org_GetClientInfoDisplayTemplate_Handler,
		},
		{
			MethodName: "ListAgentPauseCodes",
			Handler:    _Org_ListAgentPauseCodes_Handler,
		},
		{
			MethodName: "CreateAgentPauseCode",
			Handler:    _Org_CreateAgentPauseCode_Handler,
		},
		{
			MethodName: "UpdateAgentPauseCode",
			Handler:    _Org_UpdateAgentPauseCode_Handler,
		},
		{
			MethodName: "DeleteAgentPauseCode",
			Handler:    _Org_DeleteAgentPauseCode_Handler,
		},
		{
			MethodName: "ListCustomReportFilters",
			Handler:    _Org_ListCustomReportFilters_Handler,
		},
		{
			MethodName: "CreateCustomReportFilter",
			Handler:    _Org_CreateCustomReportFilter_Handler,
		},
		{
			MethodName: "UpdateCustomReportFilter",
			Handler:    _Org_UpdateCustomReportFilter_Handler,
		},
		{
			MethodName: "DeleteCustomReportFilter",
			Handler:    _Org_DeleteCustomReportFilter_Handler,
		},
		{
			MethodName: "ListAgentResponseGroups",
			Handler:    _Org_ListAgentResponseGroups_Handler,
		},
		{
			MethodName: "ListLastTemplateElements",
			Handler:    _Org_ListLastTemplateElements_Handler,
		},
		{
			MethodName: "ListQueueConfigs",
			Handler:    _Org_ListQueueConfigs_Handler,
		},
		{
			MethodName: "ListQueueConfigsByOrgId",
			Handler:    _Org_ListQueueConfigsByOrgId_Handler,
		},
		{
			MethodName: "DeleteQueueConfig",
			Handler:    _Org_DeleteQueueConfig_Handler,
		},
		{
			MethodName: "GetQueueConfig",
			Handler:    _Org_GetQueueConfig_Handler,
		},
		{
			MethodName: "CreateQueueConfig",
			Handler:    _Org_CreateQueueConfig_Handler,
		},
		{
			MethodName: "UpdateQueueConfig",
			Handler:    _Org_UpdateQueueConfig_Handler,
		},
		{
			MethodName: "CopyQueueConfig",
			Handler:    _Org_CopyQueueConfig_Handler,
		},
		{
			MethodName: "GetAllQueueConfigSounds",
			Handler:    _Org_GetAllQueueConfigSounds_Handler,
		},
		{
			MethodName: "GetQueueConfigSound",
			Handler:    _Org_GetQueueConfigSound_Handler,
		},
		{
			MethodName: "SetQueueConfigSound",
			Handler:    _Org_SetQueueConfigSound_Handler,
		},
		{
			MethodName: "SetAllQueueConfigSoundsFromSource",
			Handler:    _Org_SetAllQueueConfigSoundsFromSource_Handler,
		},
		{
			MethodName: "GetUserBlocked",
			Handler:    _Org_GetUserBlocked_Handler,
		},
		{
			MethodName: "UnblockUser",
			Handler:    _Org_UnblockUser_Handler,
		},
		{
			MethodName: "ListP3UnMigratedUsers",
			Handler:    _Org_ListP3UnMigratedUsers_Handler,
		},
		{
			MethodName: "MigrateP3User",
			Handler:    _Org_MigrateP3User_Handler,
		},
		{
			MethodName: "UpdateP3UserName",
			Handler:    _Org_UpdateP3UserName_Handler,
		},
		{
			MethodName: "ListOwnedUsers",
			Handler:    _Org_ListOwnedUsers_Handler,
		},
		{
			MethodName: "ListOwnedOrgsByOrgId",
			Handler:    _Org_ListOwnedOrgsByOrgId_Handler,
		},
		{
			MethodName: "ListOwnedOrgs",
			Handler:    _Org_ListOwnedOrgs_Handler,
		},
		{
			MethodName: "RemoveLoginStrikes",
			Handler:    _Org_RemoveLoginStrikes_Handler,
		},
		{
			MethodName: "RemoveUserLoginStrikes",
			Handler:    _Org_RemoveUserLoginStrikes_Handler,
		},
		{
			MethodName: "ListLoginHistory",
			Handler:    _Org_ListLoginHistory_Handler,
		},
		{
			MethodName: "UpdateP3UserSids",
			Handler:    _Org_UpdateP3UserSids_Handler,
		},
		{
			MethodName: "CreateAuthConnection",
			Handler:    _Org_CreateAuthConnection_Handler,
		},
		{
			MethodName: "GetAuthConnectionSettings",
			Handler:    _Org_GetAuthConnectionSettings_Handler,
		},
		{
			MethodName: "UpdateAuthConnectionSettings",
			Handler:    _Org_UpdateAuthConnectionSettings_Handler,
		},
		{
			MethodName: "DeleteAuthConnection",
			Handler:    _Org_DeleteAuthConnection_Handler,
		},
		{
			MethodName: "GetUserSubscription",
			Handler:    _Org_GetUserSubscription_Handler,
		},
		{
			MethodName: "GetMyUserSubscription",
			Handler:    _Org_GetMyUserSubscription_Handler,
		},
		{
			MethodName: "AddUserSubscription",
			Handler:    _Org_AddUserSubscription_Handler,
		},
		{
			MethodName: "AddMyUserSubscription",
			Handler:    _Org_AddMyUserSubscription_Handler,
		},
		{
			MethodName: "RemoveUserSubscription",
			Handler:    _Org_RemoveUserSubscription_Handler,
		},
		{
			MethodName: "RemoveMyUserSubscription",
			Handler:    _Org_RemoveMyUserSubscription_Handler,
		},
		{
			MethodName: "UpdateUserSubscription",
			Handler:    _Org_UpdateUserSubscription_Handler,
		},
		{
			MethodName: "UpdateMyUserSubscription",
			Handler:    _Org_UpdateMyUserSubscription_Handler,
		},
		{
			MethodName: "ListUserSubscriptions",
			Handler:    _Org_ListUserSubscriptions_Handler,
		},
		{
			MethodName: "ListMyUserSubscriptions",
			Handler:    _Org_ListMyUserSubscriptions_Handler,
		},
		{
			MethodName: "ListOrgSubscriptions",
			Handler:    _Org_ListOrgSubscriptions_Handler,
		},
		{
			MethodName: "GetSystemEnvironmentDetails",
			Handler:    _Org_GetSystemEnvironmentDetails_Handler,
		},
		{
			MethodName: "ListAgentStatisticsTemplates",
			Handler:    _Org_ListAgentStatisticsTemplates_Handler,
		},
		{
			MethodName: "CreateAgentStatisticsTemplate",
			Handler:    _Org_CreateAgentStatisticsTemplate_Handler,
		},
		{
			MethodName: "UpdateAgentStatisticsTemplate",
			Handler:    _Org_UpdateAgentStatisticsTemplate_Handler,
		},
		{
			MethodName: "DeleteAgentStatisticsTemplate",
			Handler:    _Org_DeleteAgentStatisticsTemplate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AdminListUserDescriptions",
			Handler:       _Org_AdminListUserDescriptions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListUserDescriptions",
			Handler:       _Org_ListUserDescriptions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v0alpha/org.proto",
}
