// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: api/v0alpha/smsapi.proto

package v0alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SmsApi_ListSmsTemplates_FullMethodName                    = "/api.v0alpha.SmsApi/ListSmsTemplates"
	SmsApi_CreateSmsTemplate_FullMethodName                   = "/api.v0alpha.SmsApi/CreateSmsTemplate"
	SmsApi_UpdateSmsTemplate_FullMethodName                   = "/api.v0alpha.SmsApi/UpdateSmsTemplate"
	SmsApi_DeleteSmsTemplate_FullMethodName                   = "/api.v0alpha.SmsApi/DeleteSmsTemplate"
	SmsApi_GetSmsTemplateBySid_FullMethodName                 = "/api.v0alpha.SmsApi/GetSmsTemplateBySid"
	SmsApi_ListSmsIntentTemplates_FullMethodName              = "/api.v0alpha.SmsApi/ListSmsIntentTemplates"
	SmsApi_CreateSmsIntentTemplate_FullMethodName             = "/api.v0alpha.SmsApi/CreateSmsIntentTemplate"
	SmsApi_UpdateSmsIntentTemplate_FullMethodName             = "/api.v0alpha.SmsApi/UpdateSmsIntentTemplate"
	SmsApi_DeleteSmsIntentTemplate_FullMethodName             = "/api.v0alpha.SmsApi/DeleteSmsIntentTemplate"
	SmsApi_GetSmsIntentTemplateBySid_FullMethodName           = "/api.v0alpha.SmsApi/GetSmsIntentTemplateBySid"
	SmsApi_ListSmsSourceNumbers_FullMethodName                = "/api.v0alpha.SmsApi/ListSmsSourceNumbers"
	SmsApi_CreateSmsSourceNumber_FullMethodName               = "/api.v0alpha.SmsApi/CreateSmsSourceNumber"
	SmsApi_UpdateSmsSourceNumber_FullMethodName               = "/api.v0alpha.SmsApi/UpdateSmsSourceNumber"
	SmsApi_DeleteSmsSourceNumber_FullMethodName               = "/api.v0alpha.SmsApi/DeleteSmsSourceNumber"
	SmsApi_GetSmsSourceNumberBySid_FullMethodName             = "/api.v0alpha.SmsApi/GetSmsSourceNumberBySid"
	SmsApi_SendSmsNotification_FullMethodName                 = "/api.v0alpha.SmsApi/SendSmsNotification"
	SmsApi_ListSmsGroupByFilters_FullMethodName               = "/api.v0alpha.SmsApi/ListSmsGroupByFilters"
	SmsApi_ListSmsGroupsByGroupSids_FullMethodName            = "/api.v0alpha.SmsApi/ListSmsGroupsByGroupSids"
	SmsApi_ListSmsTasksByGroupSids_FullMethodName             = "/api.v0alpha.SmsApi/ListSmsTasksByGroupSids"
	SmsApi_ListSmsGroupByFiltersForAudit_FullMethodName       = "/api.v0alpha.SmsApi/ListSmsGroupByFiltersForAudit"
	SmsApi_ListSmsGroupsByGroupSidsForAudit_FullMethodName    = "/api.v0alpha.SmsApi/ListSmsGroupsByGroupSidsForAudit"
	SmsApi_ListSmsTasksByGroupSidsForAudit_FullMethodName     = "/api.v0alpha.SmsApi/ListSmsTasksByGroupSidsForAudit"
	SmsApi_ListSmsTasksWithDetailedStatus_FullMethodName      = "/api.v0alpha.SmsApi/ListSmsTasksWithDetailedStatus"
	SmsApi_UpdateSmsGroupStatus_FullMethodName                = "/api.v0alpha.SmsApi/UpdateSmsGroupStatus"
	SmsApi_UpdateSmsGroupSendsPerMinute_FullMethodName        = "/api.v0alpha.SmsApi/UpdateSmsGroupSendsPerMinute"
	SmsApi_UpdateSmsGroupScheduleTimes_FullMethodName         = "/api.v0alpha.SmsApi/UpdateSmsGroupScheduleTimes"
	SmsApi_ScheduleSms_FullMethodName                         = "/api.v0alpha.SmsApi/ScheduleSms"
	SmsApi_ResendUnconnectedSms_FullMethodName                = "/api.v0alpha.SmsApi/ResendUnconnectedSms"
	SmsApi_SmsActivitySearch_FullMethodName                   = "/api.v0alpha.SmsApi/SmsActivitySearch"
	SmsApi_CreateInboundSmsTemplate_FullMethodName            = "/api.v0alpha.SmsApi/CreateInboundSmsTemplate"
	SmsApi_UpdateInboundSmsTemplate_FullMethodName            = "/api.v0alpha.SmsApi/UpdateInboundSmsTemplate"
	SmsApi_DeleteInboundSmsTemplate_FullMethodName            = "/api.v0alpha.SmsApi/DeleteInboundSmsTemplate"
	SmsApi_ListInboundSmsTemplates_FullMethodName             = "/api.v0alpha.SmsApi/ListInboundSmsTemplates"
	SmsApi_GetInboundSmsTemplateById_FullMethodName           = "/api.v0alpha.SmsApi/GetInboundSmsTemplateById"
	SmsApi_CreateInboundSmsGroup_FullMethodName               = "/api.v0alpha.SmsApi/CreateInboundSmsGroup"
	SmsApi_UpdateInboundSmsGroup_FullMethodName               = "/api.v0alpha.SmsApi/UpdateInboundSmsGroup"
	SmsApi_DeleteInboundSmsGroup_FullMethodName               = "/api.v0alpha.SmsApi/DeleteInboundSmsGroup"
	SmsApi_ListInboundSmsGroups_FullMethodName                = "/api.v0alpha.SmsApi/ListInboundSmsGroups"
	SmsApi_ListActiveInboundSmsGroups_FullMethodName          = "/api.v0alpha.SmsApi/ListActiveInboundSmsGroups"
	SmsApi_ListInboundSmsGroupByFilters_FullMethodName        = "/api.v0alpha.SmsApi/ListInboundSmsGroupByFilters"
	SmsApi_GetInboundSmsGroupById_FullMethodName              = "/api.v0alpha.SmsApi/GetInboundSmsGroupById"
	SmsApi_ListInboundSmsGroupsByGroupIds_FullMethodName      = "/api.v0alpha.SmsApi/ListInboundSmsGroupsByGroupIds"
	SmsApi_StopInboundSmsGroup_FullMethodName                 = "/api.v0alpha.SmsApi/StopInboundSmsGroup"
	SmsApi_ScheduleInboundSms_FullMethodName                  = "/api.v0alpha.SmsApi/ScheduleInboundSms"
	SmsApi_CreateSmsConversation_FullMethodName               = "/api.v0alpha.SmsApi/CreateSmsConversation"
	SmsApi_UpdateSmsConversation_FullMethodName               = "/api.v0alpha.SmsApi/UpdateSmsConversation"
	SmsApi_DeleteSmsConversation_FullMethodName               = "/api.v0alpha.SmsApi/DeleteSmsConversation"
	SmsApi_ListSmsConversations_FullMethodName                = "/api.v0alpha.SmsApi/ListSmsConversations"
	SmsApi_GetSmsConversationById_FullMethodName              = "/api.v0alpha.SmsApi/GetSmsConversationById"
	SmsApi_GetSmsMessage_FullMethodName                       = "/api.v0alpha.SmsApi/GetSmsMessage"
	SmsApi_CreateSmsConversationAudit_FullMethodName          = "/api.v0alpha.SmsApi/CreateSmsConversationAudit"
	SmsApi_ListSmsConversationAudits_FullMethodName           = "/api.v0alpha.SmsApi/ListSmsConversationAudits"
	SmsApi_GetSmsConversationAuditById_FullMethodName         = "/api.v0alpha.SmsApi/GetSmsConversationAuditById"
	SmsApi_CreateSmsConversationAssignedAgent_FullMethodName  = "/api.v0alpha.SmsApi/CreateSmsConversationAssignedAgent"
	SmsApi_ListSmsConversationAssignedAgents_FullMethodName   = "/api.v0alpha.SmsApi/ListSmsConversationAssignedAgents"
	SmsApi_GetSmsConversationAssignedAgentById_FullMethodName = "/api.v0alpha.SmsApi/GetSmsConversationAssignedAgentById"
	SmsApi_ListInboundSmsTasksByGroupIds_FullMethodName       = "/api.v0alpha.SmsApi/ListInboundSmsTasksByGroupIds"
	SmsApi_StopAllOutboundSmsGroups_FullMethodName            = "/api.v0alpha.SmsApi/StopAllOutboundSmsGroups"
	SmsApi_StopAllInboundSmsGroups_FullMethodName             = "/api.v0alpha.SmsApi/StopAllInboundSmsGroups"
)

// SmsApiClient is the client API for SmsApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for interacting with TCN's SMS API system.
// Accessing all of the methods require an authenticated user with the correct
// permissions.
type SmsApiClient interface {
	// List Sms Templates  defined by ListSmsTemplatesReq message.
	// Gets all details belong to the clientsid
	// The method will return a stream of ListSmsTemplatesRes messages
	// containing SmsTemplates with SmsIntents
	// Required permissions: VIEW_SMS
	ListSmsTemplates(ctx context.Context, in *ListSmsTemplatesReq, opts ...grpc.CallOption) (*ListSmsTemplatesRes, error)
	// Create/Record a SmsTemplate defined by CreateSmsTemplateReq message.
	// The method will return a CreateSmsTemplateRes message that will
	// contain the newly created values of the sms_template_id
	// Required permissions: VIEW_SMS
	CreateSmsTemplate(ctx context.Context, in *CreateSmsTemplateReq, opts ...grpc.CallOption) (*CreateSmsTemplateRes, error)
	// Update a SmsTemplate defined by UpdateSmsTemplateReq message for
	// the specified sms_template_sid
	// will update the following
	// sms template fields:
	//
	//	MessageSid
	//	SmsTemplateIntentSid
	//
	// The method will return a UpdateSmsTemplateRes message with true or false .
	// Required permissions: VIEW_SMS
	UpdateSmsTemplate(ctx context.Context, in *UpdateSmsTemplateReq, opts ...grpc.CallOption) (*UpdateSmsTemplateRes, error)
	// Delete a SmsTemplate defined by DeleteSmsTemplateReq message for
	// the specified sms_template_id
	// The method will return a DeleteSmsTemplateRes message with true or false .
	// Required permissions: VIEW_SMS
	DeleteSmsTemplate(ctx context.Context, in *DeleteSmsTemplateReq, opts ...grpc.CallOption) (*DeleteSmsTemplateRes, error)
	// Gets an SmsTemplate defined by GetSmsTemplateBySidReq message for the specified
	// sms_template_sid.
	// The method will return a SmsTemplate group.
	// Required permissions: VIEW_SMS
	GetSmsTemplateBySid(ctx context.Context, in *GetSmsTemplateBySidReq, opts ...grpc.CallOption) (*GetSmsTemplateBySidRes, error)
	// List Sms IntentTemplates  defined by ListSmsIntentTemplatesReq message.
	// Gets all details belong to the clientsid
	// The method will return a stream of ListSmsIntentTemplatesRes messages
	// containing ActionKey, ActionDetails, ActionTriggers, ActionPriority
	// Required permissions: VIEW_SMS
	ListSmsIntentTemplates(ctx context.Context, in *ListSmsIntentTemplatesReq, opts ...grpc.CallOption) (*ListSmsIntentTemplatesRes, error)
	// Create/Record a SmsIntentTemplate defined by SmsIntentTemplate message.
	// The method will return a CreateSmsIntentTemplateRes message that will
	// contain the newly created values of the sms_intent_template_sid
	// Required permissions: VIEW_SMS
	CreateSmsIntentTemplate(ctx context.Context, in *SmsIntentTemplate, opts ...grpc.CallOption) (*CreateSmsIntentTemplateRes, error)
	// Update a SmsIntentTemplate defined by SmsIntentTemplate message for
	// the specified sms_intent_template_sid
	// will update the following
	// sms intent template fields:
	//
	//	ActionKey
	//	ActionDetails
	//	ActionTrigger
	//
	// The method will return a UpdateSmsIntentTemplateRes message with true or false .
	// Required permissions: VIEW_SMS
	UpdateSmsIntentTemplate(ctx context.Context, in *SmsIntentTemplate, opts ...grpc.CallOption) (*UpdateSmsIntentTemplateRes, error)
	// Delete a SmsIntentTemplate defined by DeleteSmsIntentTemplateReq message for
	// the specified sms_intent_template_id
	// The method will return a DeleteSmsIntentTemplateRes message with true or false .
	// Required permissions: VIEW_SMS
	DeleteSmsIntentTemplate(ctx context.Context, in *DeleteSmsIntentTemplateReq, opts ...grpc.CallOption) (*DeleteSmsIntentTemplateRes, error)
	// Gets an SmsIntentTemplate group defined by GetSmsIntentTemplateBySidReq message for the specified
	// sms_intent_template_sid.
	// The method will return a SmsIntentTemplate group.
	// Required permissions: VIEW_SMS
	GetSmsIntentTemplateBySid(ctx context.Context, in *GetSmsIntentTemplateBySidReq, opts ...grpc.CallOption) (*SmsIntentTemplate, error)
	// List Sms SourceNumbers  defined by ListSmsSourceNumbersReq message.
	// Gets all source numbers belong to the clientsid
	// The method will return a stream of ListSmsSourceNumbersRes messages
	// containing providername, providertype
	// Required permissions: VIEW_SMS
	ListSmsSourceNumbers(ctx context.Context, in *ListSmsSourceNumbersReq, opts ...grpc.CallOption) (*ListSmsSourceNumbersRes, error)
	// Create/Record a SmsSourceNumber defined by CreateSmsSourceNumberReq message.
	// The method will return a CreateSmsSourceNumberRes message that will
	// contain the newly created values of the sms_number_id
	// Required permissions: VIEW_SMS
	CreateSmsSourceNumber(ctx context.Context, in *CreateSmsSourceNumberReq, opts ...grpc.CallOption) (*CreateSmsSourceNumberRes, error)
	// Update a SmsSourceNumber defined by UpdateSmsSourceNumberReq message for
	// the specified sms_number_sid
	// will update the following
	// sms number fields:
	//
	//	CountrySid
	//	ProviderName
	//	NumberType
	//
	// The method will return a UpdateSmsSourceNumberRes message with true or false .
	// Required permissions: VIEW_SMS
	UpdateSmsSourceNumber(ctx context.Context, in *UpdateSmsSourceNumberReq, opts ...grpc.CallOption) (*UpdateSmsSourceNumberRes, error)
	// Delete a SmsSourceNumber defined by DeleteSmsSourceNumberReq message for
	// the specified sms_number_id
	// The method will return a DeleteSmsSourceNumberRes message with true or false .
	// Required permissions: VIEW_SMS
	DeleteSmsSourceNumber(ctx context.Context, in *DeleteSmsSourceNumberReq, opts ...grpc.CallOption) (*DeleteSmsSourceNumberRes, error)
	// get sms source number for the particular sid
	// Gets an SmsSource Number defined by GetSmsSourceNumberBySidReq message for the specified
	// sms_number_sid.
	// The method will return a SmsNumbers group.
	// Required permissions: VIEW_SMS
	GetSmsSourceNumberBySid(ctx context.Context, in *GetSmsSourceNumberBySidReq, opts ...grpc.CallOption) (*SmsNumbers, error)
	// Send sms notification defined by SendSmsNotificationReq message for the specified
	// message and array of phone num.
	// The method will return a stream of SendSmsNotificationRes messages
	// containing result true/false after notified by sms for the client.
	// Required permissions:
	//
	//	VIEW_SMS
	SendSmsNotification(ctx context.Context, in *SendSmsNotificationReq, opts ...grpc.CallOption) (*SendSmsNotificationRes, error)
	// List Sms Group defined by ListSmsGroupByFiltersReq message.
	// Gets all details belong to the clientsid  with filters
	// The method will return a stream of ListSmsGroupByFiltersRes messages
	// containing SmsGroup Info and SMSIntent
	// Required permissions: VIEW_SMS
	ListSmsGroupByFilters(ctx context.Context, in *ListSmsGroupByFiltersReq, opts ...grpc.CallOption) (*ListSmsGroupByFiltersRes, error)
	// List Sms Group defined by ListSmsGroupsByGroupSidsReq message.
	// Gets all details for the array of group sids
	// The method will return a stream of ListSmsGroupsByGroupSidsRes messages
	// containing SmsGroup Info and SMSIntent
	// Required permissions: VIEW_SMS
	ListSmsGroupsByGroupSids(ctx context.Context, in *ListSmsGroupsByGroupSidsReq, opts ...grpc.CallOption) (*ListSmsGroupsByGroupSidsRes, error)
	// List Sms Task  defined by ListSmsTasksByGroupSidsReq message.
	// Gets all details for the array of group sids
	// The method will return a stream of ListSmsTasksByGroupSidsRes messages
	// containing delivery status, msg_time, cost
	// belonging to the smsgroup.
	// Required permissions: VIEW_SMS
	ListSmsTasksByGroupSids(ctx context.Context, in *ListSmsTasksByGroupSidsReq, opts ...grpc.CallOption) (*ListSmsTasksByGroupSidsRes, error)
	// List Sms Group defined by ListSmsGroupByFiltersReq message.
	// Gets all details belong to the owner path with filters for audit
	// The method will return a stream of ListSmsGroupByFiltersRes messages
	// containing SmsGroup Info and SMSIntent
	// Required permissions: VIEW_SMS
	ListSmsGroupByFiltersForAudit(ctx context.Context, in *ListSmsGroupByFiltersReq, opts ...grpc.CallOption) (*ListSmsGroupByFiltersRes, error)
	// List Sms Group defined by ListSmsGroupsByGroupSidsReq message.
	// Gets all details for the array of group sids for audit
	// The method will return a stream of ListSmsGroupsByGroupSidsRes messages
	// containing SmsGroup Info and SMSIntent
	// Required permissions: VIEW_SMS
	ListSmsGroupsByGroupSidsForAudit(ctx context.Context, in *ListSmsGroupsByGroupSidsReq, opts ...grpc.CallOption) (*ListSmsGroupsByGroupSidsRes, error)
	// List Sms Task  defined by ListSmsTasksByGroupSidsReq message.
	// Gets all details for the array of group sids for audit
	// The method will return a stream of ListSmsTasksByGroupSidsRes messages
	// containing delivery status, msg_time, cost
	// belonging to the smsgroup.
	// Required permissions: VIEW_SMS
	ListSmsTasksByGroupSidsForAudit(ctx context.Context, in *ListSmsTasksByGroupSidsReq, opts ...grpc.CallOption) (*ListSmsTasksByGroupSidsRes, error)
	// List Sms Task  defined by ListSmsTasksWithDetailedStatusReq message.
	// Gets all details for the specified sms group sid.
	// The method will return a stream of ListSmsTasksWithDetailedStatusRes messages
	// containing delivery status, msg_time, cost
	// belonging to the smsgroup.
	// Required permissions: VIEW_SMS
	ListSmsTasksWithDetailedStatus(ctx context.Context, in *ListSmsTasksWithDetailedStatusReq, opts ...grpc.CallOption) (*ListSmsTasksWithDetailedStatusRes, error)
	// Update the Scheduled Sms group defined by SmsGroupInfo message for the specified
	// paused/unpaused/cancel status
	// The method will return a UpdateSmsGroupRes message with true or false .
	// Required permissions: EXECUTE_SEND_BROADCAST
	UpdateSmsGroupStatus(ctx context.Context, in *SmsGroupInfo, opts ...grpc.CallOption) (*UpdateSmsGroupRes, error)
	// Update the Scheduled Sms group defined by SmsGroupInfo message for the specified
	// pacing
	// The method will return a UpdateSmsGroupRes message with true or false .
	// Required permissions: EXECUTE_SEND_BROADCAST
	UpdateSmsGroupSendsPerMinute(ctx context.Context, in *SmsGroupInfo, opts ...grpc.CallOption) (*UpdateSmsGroupRes, error)
	// Update the Scheduled Sms group defined by SmsGroupInfo message for the specified
	// schedule_time
	// The method will return a UpdateSmsGroupRes message with true or false .
	// Required permissions: EXECUTE_SEND_BROADCAST
	UpdateSmsGroupScheduleTimes(ctx context.Context, in *SmsGroupInfo, opts ...grpc.CallOption) (*UpdateSmsGroupRes, error)
	// Schedule Sms group defined by ScheduleSmsReq message for the specified
	// sms_template_id with initialpace, sourcenumber, contactgroupsid
	// The method will return a Sms group.
	// Required permissions: EXECUTE_SEND_BROADCAST
	ScheduleSms(ctx context.Context, in *ScheduleSmsReq, opts ...grpc.CallOption) (*ScheduleSmsRes, error)
	// Re-Schedule Sms group defined by ResendUnconnectedSmsReq message for the specified
	// sms_group_id and start/stop time.
	// The method will return a Sms group.
	// Required permissions: EXECUTE_SEND_BROADCAST
	ResendUnconnectedSms(ctx context.Context, in *ResendUnconnectedSmsReq, opts ...grpc.CallOption) (*ResendUnconnectedSmsRes, error)
	// Search SMS activity defined by SmsActivitySearchReq message for
	// any of the following filters:
	// ClientSid, ToNumber and FromNumber, FromDate, ToDate, SentOnly
	// The method will return the Sms Group with Sms Task & Sms Intent Info
	// Required permissions: VIEW_SMS
	SmsActivitySearch(ctx context.Context, in *SmsActivitySearchReq, opts ...grpc.CallOption) (*SmsActivitySearchRes, error)
	// Create/Record a InboundSmsTemplate defined by CreateInboundSmsTemplateReq message.
	// The method will return a CreateInboundSmsTemplateRes message that will
	// contain the newly created values of the inbound_sms_template_id
	// Required permissions: VIEW_SMS
	CreateInboundSmsTemplate(ctx context.Context, in *CreateInboundSmsTemplateReq, opts ...grpc.CallOption) (*CreateInboundSmsTemplateRes, error)
	// Update a InboundSmsTemplate defined by UpdateInboundSmsTemplateReq message for
	// the specified sms_template_id, region_id and org_id
	// will update the following
	// inbound sms template fields:
	//
	//	TemplateId
	//	SmsTemplateIntentId
	//
	// The method will return a UpdateInboundSmsTemplateRes message with true or false .
	// Required permissions: VIEW_SMS
	UpdateInboundSmsTemplate(ctx context.Context, in *UpdateInboundSmsTemplateReq, opts ...grpc.CallOption) (*UpdateInboundSmsTemplateRes, error)
	// Delete a InboundSmsTemplate defined by DeleteInboundSmsTemplateReq message for
	// the specified inbound_sms_template_id, region_id and org_id
	// The method will return a DeleteInboundSmsTemplateRes message with true or false .
	// Required permissions: VIEW_SMS
	DeleteInboundSmsTemplate(ctx context.Context, in *DeleteInboundSmsTemplateReq, opts ...grpc.CallOption) (*DeleteInboundSmsTemplateRes, error)
	// List InboundSmsTemplate  defined by ListInboundSmsTemplatesReq message.
	// Gets all of the Inbound sms template specified according to the filters.
	// The method will return a stream of ListInboundSmsTemplatesRes messages
	// containing InboundSmsTemplate, and SMSIntent
	// belonging to the inbound smstemplate.
	// Required permissions: VIEW_SMS
	ListInboundSmsTemplates(ctx context.Context, in *ListInboundSmsTemplatesReq, opts ...grpc.CallOption) (*ListInboundSmsTemplatesRes, error)
	// Gets an InboundSmsTemplate group defined by GetInboundSmsTemplateByIdReq message for the specified
	// inbound_sms_template_id, region_id and org_id.
	// The method will return a InboundTemplate group.
	// Required permissions: VIEW_SMS
	GetInboundSmsTemplateById(ctx context.Context, in *GetInboundSmsTemplateByIdReq, opts ...grpc.CallOption) (*GetInboundSmsTemplateByIdRes, error)
	// Create/Record a InboundSmsGroup defined by CreateInboundSmsGroupReq message.
	// The method will return a CreateInboundSmsGroupRes message that will
	// contain the newly created values of the inbound_sms_group_id
	// Required permissions: VIEW_SMS
	CreateInboundSmsGroup(ctx context.Context, in *CreateInboundSmsGroupReq, opts ...grpc.CallOption) (*CreateInboundSmsGroupRes, error)
	// Update a InboundSmsGroup defined by UpdateInboundSmsGroupReq message for
	// the specified sms_group_id, region_id and org_id
	// will update the following
	// inbound sms group fields:
	//
	//	TemplateId
	//	SmsNumber
	//
	// The method will return a UpdateInboundSmsGroupRes message with true or false .
	// Required permissions: VIEW_SMS
	UpdateInboundSmsGroup(ctx context.Context, in *UpdateInboundSmsGroupReq, opts ...grpc.CallOption) (*UpdateInboundSmsGroupRes, error)
	// Delete a InboundSmsGroup defined by DeleteInboundSmsGroupReq message for
	// the specified inbound_sms_group_id, region_id and org_id
	// The method will return a DeleteInboundSmsGroupRes message with true or false .
	// Required permissions: VIEW_SMS
	DeleteInboundSmsGroup(ctx context.Context, in *DeleteInboundSmsGroupReq, opts ...grpc.CallOption) (*DeleteInboundSmsGroupRes, error)
	// List InboundSmsGroup  defined by ListInboundSmsGroupsReq message.
	// Gets all of the Inbound sms group specified according to the filters.
	// The method will return a stream of ListInboundSmsGroupsRes messages
	// containing InboundSmsGroup, and SMSIntent
	// belonging to the inbound smsgroup.
	// Required permissions: VIEW_SMS
	ListInboundSmsGroups(ctx context.Context, in *ListInboundSmsGroupsReq, opts ...grpc.CallOption) (*ListInboundSmsGroupsRes, error)
	// List Active InboundSmsGroup  defined by ListActiveInboundSmsGroupsReq message.
	// Gets active Inbound sms group specified according to the filters.
	// The method will return a stream of ListActiveInboundSmsGroupsRes messages
	// containing InboundSmsGroup, and SMSIntent
	// belonging to the inbound smsgroup.
	// Required permissions: VIEW_SMS
	ListActiveInboundSmsGroups(ctx context.Context, in *ListActiveInboundSmsGroupsReq, opts ...grpc.CallOption) (*ListActiveInboundSmsGroupsRes, error)
	// List InboundSmsGroup  defined by InboundSmsGroupByFiltersReq message.
	// Gets all of the Inbound sms group specified according to the filters.
	// The method will return a stream of InboundSmsGroupByFiltersRes messages
	// containing InboundSmsGroup, and SMSIntent
	// belonging to the inbound smsgroup.
	// Required permissions: VIEW_SMS
	ListInboundSmsGroupByFilters(ctx context.Context, in *ListInboundSmsGroupByFiltersReq, opts ...grpc.CallOption) (*ListInboundSmsGroupByFiltersRes, error)
	// Gets an InboundSms group defined by GetInboundSmsGroupByIdReq message for the specified
	// inbound_sms_group_id, region_id and org_id.
	// The method will return a InboundSms group.
	// Required permissions: VIEW_SMS
	GetInboundSmsGroupById(ctx context.Context, in *GetInboundSmsGroupByIdReq, opts ...grpc.CallOption) (*GetInboundSmsGroupByIdRes, error)
	// List InboundSmsGroup  defined by ListInboundSmsGroupsByGroupIdsReq message.
	// Gets all of the Inbound sms group specified for the groupids array.
	// The method will return a stream of ListInboundSmsGroupsByGroupIdsRes messages
	// containing InboundSmsGroup, and SMSIntent
	// belonging to the inbound smsgroup.
	// Required permissions: VIEW_SMS
	ListInboundSmsGroupsByGroupIds(ctx context.Context, in *ListInboundSmsGroupsByGroupIdsReq, opts ...grpc.CallOption) (*ListInboundSmsGroupsByGroupIdsRes, error)
	// Stop an InboundSms group defined by StopInboundSmsGroupReq message for the specified
	// inbound_sms_group_id, region_id and org_id.
	// The method will mark the InboundSms group completed.
	// Required permissions: VIEW_SMS
	StopInboundSmsGroup(ctx context.Context, in *StopInboundSmsGroupReq, opts ...grpc.CallOption) (*StopInboundSmsGroupRes, error)
	// Schedule InboundSms group defined by ScheduleInboundSmsReq message for the specified
	// inbound_sms_template_id and sms_number_sid.
	// The method will return a InboundSms group.
	// Required permissions: EXECUTE_SEND_BROADCAST
	ScheduleInboundSms(ctx context.Context, in *ScheduleInboundSmsReq, opts ...grpc.CallOption) (*ScheduleInboundSmsRes, error)
	// Create/Record a SmsConversation defined by CreateSmsConversationReq message.
	// The method will return a CreateSmsConversationRes message that will
	// contain the newly created values of the sms_conversation_id
	// Required permissions: VIEW_SMS
	CreateSmsConversation(ctx context.Context, in *CreateSmsConversationReq, opts ...grpc.CallOption) (*CreateSmsConversationRes, error)
	// Update a SmsConversation defined by UpdateSmsConversationReq message for
	// the specified sms_conversation_id, region_id and org_id
	// will update the following
	// conversation fields:
	//
	//	InboundSmsGroupId
	//	SmsTaskParent
	//
	// The method will return a UpdateSmsConversationRes message with true or false .
	// Required permissions: VIEW_SMS
	UpdateSmsConversation(ctx context.Context, in *UpdateSmsConversationReq, opts ...grpc.CallOption) (*UpdateSmsConversationRes, error)
	// Delete a SmsConversation defined by DeleteSmsConversationReq message for
	// the specified sms_conversation_id, region_id and org_id
	// The method will return a DeleteSmsConversationRes message with true or false .
	// Required permissions: VIEW_SMS
	DeleteSmsConversation(ctx context.Context, in *DeleteSmsConversationReq, opts ...grpc.CallOption) (*DeleteSmsConversationRes, error)
	// List SmsConversation profiles defined by ListSmsConversationsReq message.
	// Gets all of the unique sms conversations.
	// The method will return a stream of ListSmsConversationsRes messages
	// containing InboundSmsGroupId, and SmsTaskParent
	// belonging to the smsconversations.
	// Required permissions: VIEW_SMS
	ListSmsConversations(ctx context.Context, in *ListSmsConversationsReq, opts ...grpc.CallOption) (*ListSmsConversationsRes, error)
	// Gets a SmsConversation defined by GetSmsConversationByIdReq message for the specified
	// sms_conversation_id, region_id and org_id.
	// The method will return a SmsConversation.
	// Required permissions: VIEW_SMS
	GetSmsConversationById(ctx context.Context, in *GetSmsConversationByIdReq, opts ...grpc.CallOption) (*GetSmsConversationByIdRes, error)
	// Gets SmsMessage defined by GetSmsMessageReq message for the specified
	// sms_message_sid.
	// The method will return a SmsMessage.
	// Required permissions: VIEW_SMS
	GetSmsMessage(ctx context.Context, in *GetSmsMessageReq, opts ...grpc.CallOption) (*GetSmsMessageRes, error)
	// Create/Record a SmsConversationAudit defined by SmsConversationAudit message.
	// The method will return a CreateSmsConversationAuditRes message that will
	// contain the newly created values of the sms_conversation_audit_id
	// Required permissions: VIEW_SMS
	CreateSmsConversationAudit(ctx context.Context, in *SmsConversationAudit, opts ...grpc.CallOption) (*CreateSmsConversationAuditRes, error)
	// List SmsConversationAudit profiles defined by ListSmsConversationAuditsReq message.
	// Gets all of the values for sms conversations id.
	// The method will return a stream of ListSmsConversationAuditsRes messages
	// containing SmsTaskSid, SmsReceivedReplySid and AgentId
	// belonging to the smsconversationsaudit.
	// Required permissions: VIEW_SMS
	ListSmsConversationAudits(ctx context.Context, in *ListSmsConversationAuditsReq, opts ...grpc.CallOption) (*ListSmsConversationAuditsRes, error)
	// Gets a SmsConversationAudit defined by GetSmsConversationAuditByIdReq message for the specified
	// sms_conversation_audit_id.
	// The method will return a SmsConversationAudit.
	// Required permissions: VIEW_SMS
	GetSmsConversationAuditById(ctx context.Context, in *GetSmsConversationAuditByIdReq, opts ...grpc.CallOption) (*GetSmsConversationAuditByIdRes, error)
	// Create/Record a SmsConversationAssignedAgent defined by SmsConversationAssignedAgent message.
	// The method will return a CreateSmsConversationAssignedAgentRes message with true or false
	// Required permissions: VIEW_SMS
	CreateSmsConversationAssignedAgent(ctx context.Context, in *SmsConversationAssignedAgent, opts ...grpc.CallOption) (*CreateSmsConversationAssignedAgentRes, error)
	// List SmsConversationAssignedAgent profiles defined by ListSmsConversationAssignedAgentsReq message.
	// Gets all of the values for sms conversations id.
	// The method will return a stream of ListSmsConversationAssignedAgentsRes messages
	// containing Assigned AgentId, Primary Agent, and Notiify
	// belonging to the smsconversationassignedagent.
	// Required permissions: VIEW_SMS
	ListSmsConversationAssignedAgents(ctx context.Context, in *ListSmsConversationAssignedAgentsReq, opts ...grpc.CallOption) (*ListSmsConversationAssignedAgentsRes, error)
	// Gets a SmsConversationAssignedAgent defined by GetSmsConversationAssignedAgentByIdReq message for the specified
	// conversation_id & assigned_agent_id
	// The method will return a SmsConversationAssignedAgent.
	// Required permissions: VIEW_SMS
	GetSmsConversationAssignedAgentById(ctx context.Context, in *GetSmsConversationAssignedAgentByIdReq, opts ...grpc.CallOption) (*GetSmsConversationAssignedAgentByIdRes, error)
	// List InboundSmsTasks defined by ListInboundSmsTasksByGroupIdsReq message.
	// Gets all of the Inbound sms tasks for the groupids.
	// The method will return a stream of ListInboundSmsTasksByGroupIdsRes messages
	// containing InboundSmsTask
	// belonging to the inbound smsgroup.
	// Required permissions: VIEW_SMS
	ListInboundSmsTasksByGroupIds(ctx context.Context, in *ListInboundSmsTasksByGroupIdsReq, opts ...grpc.CallOption) (*ListInboundSmsTasksByGroupIdsRes, error)
	// Stop all OutboundSms groups defined by StopAllOutboundSmsGroupsReq message for the specified
	// array of outbound groups and client_sid.
	// The method will mark the OutboundSms groups as completed.
	// Required permissions: VIEW_SMS
	StopAllOutboundSmsGroups(ctx context.Context, in *StopAllOutboundSmsGroupsReq, opts ...grpc.CallOption) (*StopAllOutboundSmsGroupsRes, error)
	// Stop all InboundSms groups defined by StopAllInboundSmsGroupsReq message for the specified
	// array of inbound groups, region_id and org_id.
	// The method will mark the InboundSms groups as completed.
	// Required permissions: VIEW_SMS
	StopAllInboundSmsGroups(ctx context.Context, in *StopAllInboundSmsGroupsReq, opts ...grpc.CallOption) (*StopAllInboundSmsGroupsRes, error)
}

type smsApiClient struct {
	cc grpc.ClientConnInterface
}

func NewSmsApiClient(cc grpc.ClientConnInterface) SmsApiClient {
	return &smsApiClient{cc}
}

func (c *smsApiClient) ListSmsTemplates(ctx context.Context, in *ListSmsTemplatesReq, opts ...grpc.CallOption) (*ListSmsTemplatesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSmsTemplatesRes)
	err := c.cc.Invoke(ctx, SmsApi_ListSmsTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) CreateSmsTemplate(ctx context.Context, in *CreateSmsTemplateReq, opts ...grpc.CallOption) (*CreateSmsTemplateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSmsTemplateRes)
	err := c.cc.Invoke(ctx, SmsApi_CreateSmsTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) UpdateSmsTemplate(ctx context.Context, in *UpdateSmsTemplateReq, opts ...grpc.CallOption) (*UpdateSmsTemplateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSmsTemplateRes)
	err := c.cc.Invoke(ctx, SmsApi_UpdateSmsTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) DeleteSmsTemplate(ctx context.Context, in *DeleteSmsTemplateReq, opts ...grpc.CallOption) (*DeleteSmsTemplateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSmsTemplateRes)
	err := c.cc.Invoke(ctx, SmsApi_DeleteSmsTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) GetSmsTemplateBySid(ctx context.Context, in *GetSmsTemplateBySidReq, opts ...grpc.CallOption) (*GetSmsTemplateBySidRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSmsTemplateBySidRes)
	err := c.cc.Invoke(ctx, SmsApi_GetSmsTemplateBySid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) ListSmsIntentTemplates(ctx context.Context, in *ListSmsIntentTemplatesReq, opts ...grpc.CallOption) (*ListSmsIntentTemplatesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSmsIntentTemplatesRes)
	err := c.cc.Invoke(ctx, SmsApi_ListSmsIntentTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) CreateSmsIntentTemplate(ctx context.Context, in *SmsIntentTemplate, opts ...grpc.CallOption) (*CreateSmsIntentTemplateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSmsIntentTemplateRes)
	err := c.cc.Invoke(ctx, SmsApi_CreateSmsIntentTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) UpdateSmsIntentTemplate(ctx context.Context, in *SmsIntentTemplate, opts ...grpc.CallOption) (*UpdateSmsIntentTemplateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSmsIntentTemplateRes)
	err := c.cc.Invoke(ctx, SmsApi_UpdateSmsIntentTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) DeleteSmsIntentTemplate(ctx context.Context, in *DeleteSmsIntentTemplateReq, opts ...grpc.CallOption) (*DeleteSmsIntentTemplateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSmsIntentTemplateRes)
	err := c.cc.Invoke(ctx, SmsApi_DeleteSmsIntentTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) GetSmsIntentTemplateBySid(ctx context.Context, in *GetSmsIntentTemplateBySidReq, opts ...grpc.CallOption) (*SmsIntentTemplate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SmsIntentTemplate)
	err := c.cc.Invoke(ctx, SmsApi_GetSmsIntentTemplateBySid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) ListSmsSourceNumbers(ctx context.Context, in *ListSmsSourceNumbersReq, opts ...grpc.CallOption) (*ListSmsSourceNumbersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSmsSourceNumbersRes)
	err := c.cc.Invoke(ctx, SmsApi_ListSmsSourceNumbers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) CreateSmsSourceNumber(ctx context.Context, in *CreateSmsSourceNumberReq, opts ...grpc.CallOption) (*CreateSmsSourceNumberRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSmsSourceNumberRes)
	err := c.cc.Invoke(ctx, SmsApi_CreateSmsSourceNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) UpdateSmsSourceNumber(ctx context.Context, in *UpdateSmsSourceNumberReq, opts ...grpc.CallOption) (*UpdateSmsSourceNumberRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSmsSourceNumberRes)
	err := c.cc.Invoke(ctx, SmsApi_UpdateSmsSourceNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) DeleteSmsSourceNumber(ctx context.Context, in *DeleteSmsSourceNumberReq, opts ...grpc.CallOption) (*DeleteSmsSourceNumberRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSmsSourceNumberRes)
	err := c.cc.Invoke(ctx, SmsApi_DeleteSmsSourceNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) GetSmsSourceNumberBySid(ctx context.Context, in *GetSmsSourceNumberBySidReq, opts ...grpc.CallOption) (*SmsNumbers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SmsNumbers)
	err := c.cc.Invoke(ctx, SmsApi_GetSmsSourceNumberBySid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) SendSmsNotification(ctx context.Context, in *SendSmsNotificationReq, opts ...grpc.CallOption) (*SendSmsNotificationRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSmsNotificationRes)
	err := c.cc.Invoke(ctx, SmsApi_SendSmsNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) ListSmsGroupByFilters(ctx context.Context, in *ListSmsGroupByFiltersReq, opts ...grpc.CallOption) (*ListSmsGroupByFiltersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSmsGroupByFiltersRes)
	err := c.cc.Invoke(ctx, SmsApi_ListSmsGroupByFilters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) ListSmsGroupsByGroupSids(ctx context.Context, in *ListSmsGroupsByGroupSidsReq, opts ...grpc.CallOption) (*ListSmsGroupsByGroupSidsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSmsGroupsByGroupSidsRes)
	err := c.cc.Invoke(ctx, SmsApi_ListSmsGroupsByGroupSids_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) ListSmsTasksByGroupSids(ctx context.Context, in *ListSmsTasksByGroupSidsReq, opts ...grpc.CallOption) (*ListSmsTasksByGroupSidsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSmsTasksByGroupSidsRes)
	err := c.cc.Invoke(ctx, SmsApi_ListSmsTasksByGroupSids_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) ListSmsGroupByFiltersForAudit(ctx context.Context, in *ListSmsGroupByFiltersReq, opts ...grpc.CallOption) (*ListSmsGroupByFiltersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSmsGroupByFiltersRes)
	err := c.cc.Invoke(ctx, SmsApi_ListSmsGroupByFiltersForAudit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) ListSmsGroupsByGroupSidsForAudit(ctx context.Context, in *ListSmsGroupsByGroupSidsReq, opts ...grpc.CallOption) (*ListSmsGroupsByGroupSidsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSmsGroupsByGroupSidsRes)
	err := c.cc.Invoke(ctx, SmsApi_ListSmsGroupsByGroupSidsForAudit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) ListSmsTasksByGroupSidsForAudit(ctx context.Context, in *ListSmsTasksByGroupSidsReq, opts ...grpc.CallOption) (*ListSmsTasksByGroupSidsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSmsTasksByGroupSidsRes)
	err := c.cc.Invoke(ctx, SmsApi_ListSmsTasksByGroupSidsForAudit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) ListSmsTasksWithDetailedStatus(ctx context.Context, in *ListSmsTasksWithDetailedStatusReq, opts ...grpc.CallOption) (*ListSmsTasksWithDetailedStatusRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSmsTasksWithDetailedStatusRes)
	err := c.cc.Invoke(ctx, SmsApi_ListSmsTasksWithDetailedStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) UpdateSmsGroupStatus(ctx context.Context, in *SmsGroupInfo, opts ...grpc.CallOption) (*UpdateSmsGroupRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSmsGroupRes)
	err := c.cc.Invoke(ctx, SmsApi_UpdateSmsGroupStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) UpdateSmsGroupSendsPerMinute(ctx context.Context, in *SmsGroupInfo, opts ...grpc.CallOption) (*UpdateSmsGroupRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSmsGroupRes)
	err := c.cc.Invoke(ctx, SmsApi_UpdateSmsGroupSendsPerMinute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) UpdateSmsGroupScheduleTimes(ctx context.Context, in *SmsGroupInfo, opts ...grpc.CallOption) (*UpdateSmsGroupRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSmsGroupRes)
	err := c.cc.Invoke(ctx, SmsApi_UpdateSmsGroupScheduleTimes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) ScheduleSms(ctx context.Context, in *ScheduleSmsReq, opts ...grpc.CallOption) (*ScheduleSmsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduleSmsRes)
	err := c.cc.Invoke(ctx, SmsApi_ScheduleSms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) ResendUnconnectedSms(ctx context.Context, in *ResendUnconnectedSmsReq, opts ...grpc.CallOption) (*ResendUnconnectedSmsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResendUnconnectedSmsRes)
	err := c.cc.Invoke(ctx, SmsApi_ResendUnconnectedSms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) SmsActivitySearch(ctx context.Context, in *SmsActivitySearchReq, opts ...grpc.CallOption) (*SmsActivitySearchRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SmsActivitySearchRes)
	err := c.cc.Invoke(ctx, SmsApi_SmsActivitySearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) CreateInboundSmsTemplate(ctx context.Context, in *CreateInboundSmsTemplateReq, opts ...grpc.CallOption) (*CreateInboundSmsTemplateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInboundSmsTemplateRes)
	err := c.cc.Invoke(ctx, SmsApi_CreateInboundSmsTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) UpdateInboundSmsTemplate(ctx context.Context, in *UpdateInboundSmsTemplateReq, opts ...grpc.CallOption) (*UpdateInboundSmsTemplateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateInboundSmsTemplateRes)
	err := c.cc.Invoke(ctx, SmsApi_UpdateInboundSmsTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) DeleteInboundSmsTemplate(ctx context.Context, in *DeleteInboundSmsTemplateReq, opts ...grpc.CallOption) (*DeleteInboundSmsTemplateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteInboundSmsTemplateRes)
	err := c.cc.Invoke(ctx, SmsApi_DeleteInboundSmsTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) ListInboundSmsTemplates(ctx context.Context, in *ListInboundSmsTemplatesReq, opts ...grpc.CallOption) (*ListInboundSmsTemplatesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInboundSmsTemplatesRes)
	err := c.cc.Invoke(ctx, SmsApi_ListInboundSmsTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) GetInboundSmsTemplateById(ctx context.Context, in *GetInboundSmsTemplateByIdReq, opts ...grpc.CallOption) (*GetInboundSmsTemplateByIdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInboundSmsTemplateByIdRes)
	err := c.cc.Invoke(ctx, SmsApi_GetInboundSmsTemplateById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) CreateInboundSmsGroup(ctx context.Context, in *CreateInboundSmsGroupReq, opts ...grpc.CallOption) (*CreateInboundSmsGroupRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInboundSmsGroupRes)
	err := c.cc.Invoke(ctx, SmsApi_CreateInboundSmsGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) UpdateInboundSmsGroup(ctx context.Context, in *UpdateInboundSmsGroupReq, opts ...grpc.CallOption) (*UpdateInboundSmsGroupRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateInboundSmsGroupRes)
	err := c.cc.Invoke(ctx, SmsApi_UpdateInboundSmsGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) DeleteInboundSmsGroup(ctx context.Context, in *DeleteInboundSmsGroupReq, opts ...grpc.CallOption) (*DeleteInboundSmsGroupRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteInboundSmsGroupRes)
	err := c.cc.Invoke(ctx, SmsApi_DeleteInboundSmsGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) ListInboundSmsGroups(ctx context.Context, in *ListInboundSmsGroupsReq, opts ...grpc.CallOption) (*ListInboundSmsGroupsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInboundSmsGroupsRes)
	err := c.cc.Invoke(ctx, SmsApi_ListInboundSmsGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) ListActiveInboundSmsGroups(ctx context.Context, in *ListActiveInboundSmsGroupsReq, opts ...grpc.CallOption) (*ListActiveInboundSmsGroupsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListActiveInboundSmsGroupsRes)
	err := c.cc.Invoke(ctx, SmsApi_ListActiveInboundSmsGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) ListInboundSmsGroupByFilters(ctx context.Context, in *ListInboundSmsGroupByFiltersReq, opts ...grpc.CallOption) (*ListInboundSmsGroupByFiltersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInboundSmsGroupByFiltersRes)
	err := c.cc.Invoke(ctx, SmsApi_ListInboundSmsGroupByFilters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) GetInboundSmsGroupById(ctx context.Context, in *GetInboundSmsGroupByIdReq, opts ...grpc.CallOption) (*GetInboundSmsGroupByIdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInboundSmsGroupByIdRes)
	err := c.cc.Invoke(ctx, SmsApi_GetInboundSmsGroupById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) ListInboundSmsGroupsByGroupIds(ctx context.Context, in *ListInboundSmsGroupsByGroupIdsReq, opts ...grpc.CallOption) (*ListInboundSmsGroupsByGroupIdsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInboundSmsGroupsByGroupIdsRes)
	err := c.cc.Invoke(ctx, SmsApi_ListInboundSmsGroupsByGroupIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) StopInboundSmsGroup(ctx context.Context, in *StopInboundSmsGroupReq, opts ...grpc.CallOption) (*StopInboundSmsGroupRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopInboundSmsGroupRes)
	err := c.cc.Invoke(ctx, SmsApi_StopInboundSmsGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) ScheduleInboundSms(ctx context.Context, in *ScheduleInboundSmsReq, opts ...grpc.CallOption) (*ScheduleInboundSmsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduleInboundSmsRes)
	err := c.cc.Invoke(ctx, SmsApi_ScheduleInboundSms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) CreateSmsConversation(ctx context.Context, in *CreateSmsConversationReq, opts ...grpc.CallOption) (*CreateSmsConversationRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSmsConversationRes)
	err := c.cc.Invoke(ctx, SmsApi_CreateSmsConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) UpdateSmsConversation(ctx context.Context, in *UpdateSmsConversationReq, opts ...grpc.CallOption) (*UpdateSmsConversationRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSmsConversationRes)
	err := c.cc.Invoke(ctx, SmsApi_UpdateSmsConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) DeleteSmsConversation(ctx context.Context, in *DeleteSmsConversationReq, opts ...grpc.CallOption) (*DeleteSmsConversationRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSmsConversationRes)
	err := c.cc.Invoke(ctx, SmsApi_DeleteSmsConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) ListSmsConversations(ctx context.Context, in *ListSmsConversationsReq, opts ...grpc.CallOption) (*ListSmsConversationsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSmsConversationsRes)
	err := c.cc.Invoke(ctx, SmsApi_ListSmsConversations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) GetSmsConversationById(ctx context.Context, in *GetSmsConversationByIdReq, opts ...grpc.CallOption) (*GetSmsConversationByIdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSmsConversationByIdRes)
	err := c.cc.Invoke(ctx, SmsApi_GetSmsConversationById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) GetSmsMessage(ctx context.Context, in *GetSmsMessageReq, opts ...grpc.CallOption) (*GetSmsMessageRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSmsMessageRes)
	err := c.cc.Invoke(ctx, SmsApi_GetSmsMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) CreateSmsConversationAudit(ctx context.Context, in *SmsConversationAudit, opts ...grpc.CallOption) (*CreateSmsConversationAuditRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSmsConversationAuditRes)
	err := c.cc.Invoke(ctx, SmsApi_CreateSmsConversationAudit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) ListSmsConversationAudits(ctx context.Context, in *ListSmsConversationAuditsReq, opts ...grpc.CallOption) (*ListSmsConversationAuditsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSmsConversationAuditsRes)
	err := c.cc.Invoke(ctx, SmsApi_ListSmsConversationAudits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) GetSmsConversationAuditById(ctx context.Context, in *GetSmsConversationAuditByIdReq, opts ...grpc.CallOption) (*GetSmsConversationAuditByIdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSmsConversationAuditByIdRes)
	err := c.cc.Invoke(ctx, SmsApi_GetSmsConversationAuditById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) CreateSmsConversationAssignedAgent(ctx context.Context, in *SmsConversationAssignedAgent, opts ...grpc.CallOption) (*CreateSmsConversationAssignedAgentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSmsConversationAssignedAgentRes)
	err := c.cc.Invoke(ctx, SmsApi_CreateSmsConversationAssignedAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) ListSmsConversationAssignedAgents(ctx context.Context, in *ListSmsConversationAssignedAgentsReq, opts ...grpc.CallOption) (*ListSmsConversationAssignedAgentsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSmsConversationAssignedAgentsRes)
	err := c.cc.Invoke(ctx, SmsApi_ListSmsConversationAssignedAgents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) GetSmsConversationAssignedAgentById(ctx context.Context, in *GetSmsConversationAssignedAgentByIdReq, opts ...grpc.CallOption) (*GetSmsConversationAssignedAgentByIdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSmsConversationAssignedAgentByIdRes)
	err := c.cc.Invoke(ctx, SmsApi_GetSmsConversationAssignedAgentById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) ListInboundSmsTasksByGroupIds(ctx context.Context, in *ListInboundSmsTasksByGroupIdsReq, opts ...grpc.CallOption) (*ListInboundSmsTasksByGroupIdsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInboundSmsTasksByGroupIdsRes)
	err := c.cc.Invoke(ctx, SmsApi_ListInboundSmsTasksByGroupIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) StopAllOutboundSmsGroups(ctx context.Context, in *StopAllOutboundSmsGroupsReq, opts ...grpc.CallOption) (*StopAllOutboundSmsGroupsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopAllOutboundSmsGroupsRes)
	err := c.cc.Invoke(ctx, SmsApi_StopAllOutboundSmsGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsApiClient) StopAllInboundSmsGroups(ctx context.Context, in *StopAllInboundSmsGroupsReq, opts ...grpc.CallOption) (*StopAllInboundSmsGroupsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopAllInboundSmsGroupsRes)
	err := c.cc.Invoke(ctx, SmsApi_StopAllInboundSmsGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmsApiServer is the server API for SmsApi service.
// All implementations must embed UnimplementedSmsApiServer
// for forward compatibility
//
// Service for interacting with TCN's SMS API system.
// Accessing all of the methods require an authenticated user with the correct
// permissions.
type SmsApiServer interface {
	// List Sms Templates  defined by ListSmsTemplatesReq message.
	// Gets all details belong to the clientsid
	// The method will return a stream of ListSmsTemplatesRes messages
	// containing SmsTemplates with SmsIntents
	// Required permissions: VIEW_SMS
	ListSmsTemplates(context.Context, *ListSmsTemplatesReq) (*ListSmsTemplatesRes, error)
	// Create/Record a SmsTemplate defined by CreateSmsTemplateReq message.
	// The method will return a CreateSmsTemplateRes message that will
	// contain the newly created values of the sms_template_id
	// Required permissions: VIEW_SMS
	CreateSmsTemplate(context.Context, *CreateSmsTemplateReq) (*CreateSmsTemplateRes, error)
	// Update a SmsTemplate defined by UpdateSmsTemplateReq message for
	// the specified sms_template_sid
	// will update the following
	// sms template fields:
	//
	//	MessageSid
	//	SmsTemplateIntentSid
	//
	// The method will return a UpdateSmsTemplateRes message with true or false .
	// Required permissions: VIEW_SMS
	UpdateSmsTemplate(context.Context, *UpdateSmsTemplateReq) (*UpdateSmsTemplateRes, error)
	// Delete a SmsTemplate defined by DeleteSmsTemplateReq message for
	// the specified sms_template_id
	// The method will return a DeleteSmsTemplateRes message with true or false .
	// Required permissions: VIEW_SMS
	DeleteSmsTemplate(context.Context, *DeleteSmsTemplateReq) (*DeleteSmsTemplateRes, error)
	// Gets an SmsTemplate defined by GetSmsTemplateBySidReq message for the specified
	// sms_template_sid.
	// The method will return a SmsTemplate group.
	// Required permissions: VIEW_SMS
	GetSmsTemplateBySid(context.Context, *GetSmsTemplateBySidReq) (*GetSmsTemplateBySidRes, error)
	// List Sms IntentTemplates  defined by ListSmsIntentTemplatesReq message.
	// Gets all details belong to the clientsid
	// The method will return a stream of ListSmsIntentTemplatesRes messages
	// containing ActionKey, ActionDetails, ActionTriggers, ActionPriority
	// Required permissions: VIEW_SMS
	ListSmsIntentTemplates(context.Context, *ListSmsIntentTemplatesReq) (*ListSmsIntentTemplatesRes, error)
	// Create/Record a SmsIntentTemplate defined by SmsIntentTemplate message.
	// The method will return a CreateSmsIntentTemplateRes message that will
	// contain the newly created values of the sms_intent_template_sid
	// Required permissions: VIEW_SMS
	CreateSmsIntentTemplate(context.Context, *SmsIntentTemplate) (*CreateSmsIntentTemplateRes, error)
	// Update a SmsIntentTemplate defined by SmsIntentTemplate message for
	// the specified sms_intent_template_sid
	// will update the following
	// sms intent template fields:
	//
	//	ActionKey
	//	ActionDetails
	//	ActionTrigger
	//
	// The method will return a UpdateSmsIntentTemplateRes message with true or false .
	// Required permissions: VIEW_SMS
	UpdateSmsIntentTemplate(context.Context, *SmsIntentTemplate) (*UpdateSmsIntentTemplateRes, error)
	// Delete a SmsIntentTemplate defined by DeleteSmsIntentTemplateReq message for
	// the specified sms_intent_template_id
	// The method will return a DeleteSmsIntentTemplateRes message with true or false .
	// Required permissions: VIEW_SMS
	DeleteSmsIntentTemplate(context.Context, *DeleteSmsIntentTemplateReq) (*DeleteSmsIntentTemplateRes, error)
	// Gets an SmsIntentTemplate group defined by GetSmsIntentTemplateBySidReq message for the specified
	// sms_intent_template_sid.
	// The method will return a SmsIntentTemplate group.
	// Required permissions: VIEW_SMS
	GetSmsIntentTemplateBySid(context.Context, *GetSmsIntentTemplateBySidReq) (*SmsIntentTemplate, error)
	// List Sms SourceNumbers  defined by ListSmsSourceNumbersReq message.
	// Gets all source numbers belong to the clientsid
	// The method will return a stream of ListSmsSourceNumbersRes messages
	// containing providername, providertype
	// Required permissions: VIEW_SMS
	ListSmsSourceNumbers(context.Context, *ListSmsSourceNumbersReq) (*ListSmsSourceNumbersRes, error)
	// Create/Record a SmsSourceNumber defined by CreateSmsSourceNumberReq message.
	// The method will return a CreateSmsSourceNumberRes message that will
	// contain the newly created values of the sms_number_id
	// Required permissions: VIEW_SMS
	CreateSmsSourceNumber(context.Context, *CreateSmsSourceNumberReq) (*CreateSmsSourceNumberRes, error)
	// Update a SmsSourceNumber defined by UpdateSmsSourceNumberReq message for
	// the specified sms_number_sid
	// will update the following
	// sms number fields:
	//
	//	CountrySid
	//	ProviderName
	//	NumberType
	//
	// The method will return a UpdateSmsSourceNumberRes message with true or false .
	// Required permissions: VIEW_SMS
	UpdateSmsSourceNumber(context.Context, *UpdateSmsSourceNumberReq) (*UpdateSmsSourceNumberRes, error)
	// Delete a SmsSourceNumber defined by DeleteSmsSourceNumberReq message for
	// the specified sms_number_id
	// The method will return a DeleteSmsSourceNumberRes message with true or false .
	// Required permissions: VIEW_SMS
	DeleteSmsSourceNumber(context.Context, *DeleteSmsSourceNumberReq) (*DeleteSmsSourceNumberRes, error)
	// get sms source number for the particular sid
	// Gets an SmsSource Number defined by GetSmsSourceNumberBySidReq message for the specified
	// sms_number_sid.
	// The method will return a SmsNumbers group.
	// Required permissions: VIEW_SMS
	GetSmsSourceNumberBySid(context.Context, *GetSmsSourceNumberBySidReq) (*SmsNumbers, error)
	// Send sms notification defined by SendSmsNotificationReq message for the specified
	// message and array of phone num.
	// The method will return a stream of SendSmsNotificationRes messages
	// containing result true/false after notified by sms for the client.
	// Required permissions:
	//
	//	VIEW_SMS
	SendSmsNotification(context.Context, *SendSmsNotificationReq) (*SendSmsNotificationRes, error)
	// List Sms Group defined by ListSmsGroupByFiltersReq message.
	// Gets all details belong to the clientsid  with filters
	// The method will return a stream of ListSmsGroupByFiltersRes messages
	// containing SmsGroup Info and SMSIntent
	// Required permissions: VIEW_SMS
	ListSmsGroupByFilters(context.Context, *ListSmsGroupByFiltersReq) (*ListSmsGroupByFiltersRes, error)
	// List Sms Group defined by ListSmsGroupsByGroupSidsReq message.
	// Gets all details for the array of group sids
	// The method will return a stream of ListSmsGroupsByGroupSidsRes messages
	// containing SmsGroup Info and SMSIntent
	// Required permissions: VIEW_SMS
	ListSmsGroupsByGroupSids(context.Context, *ListSmsGroupsByGroupSidsReq) (*ListSmsGroupsByGroupSidsRes, error)
	// List Sms Task  defined by ListSmsTasksByGroupSidsReq message.
	// Gets all details for the array of group sids
	// The method will return a stream of ListSmsTasksByGroupSidsRes messages
	// containing delivery status, msg_time, cost
	// belonging to the smsgroup.
	// Required permissions: VIEW_SMS
	ListSmsTasksByGroupSids(context.Context, *ListSmsTasksByGroupSidsReq) (*ListSmsTasksByGroupSidsRes, error)
	// List Sms Group defined by ListSmsGroupByFiltersReq message.
	// Gets all details belong to the owner path with filters for audit
	// The method will return a stream of ListSmsGroupByFiltersRes messages
	// containing SmsGroup Info and SMSIntent
	// Required permissions: VIEW_SMS
	ListSmsGroupByFiltersForAudit(context.Context, *ListSmsGroupByFiltersReq) (*ListSmsGroupByFiltersRes, error)
	// List Sms Group defined by ListSmsGroupsByGroupSidsReq message.
	// Gets all details for the array of group sids for audit
	// The method will return a stream of ListSmsGroupsByGroupSidsRes messages
	// containing SmsGroup Info and SMSIntent
	// Required permissions: VIEW_SMS
	ListSmsGroupsByGroupSidsForAudit(context.Context, *ListSmsGroupsByGroupSidsReq) (*ListSmsGroupsByGroupSidsRes, error)
	// List Sms Task  defined by ListSmsTasksByGroupSidsReq message.
	// Gets all details for the array of group sids for audit
	// The method will return a stream of ListSmsTasksByGroupSidsRes messages
	// containing delivery status, msg_time, cost
	// belonging to the smsgroup.
	// Required permissions: VIEW_SMS
	ListSmsTasksByGroupSidsForAudit(context.Context, *ListSmsTasksByGroupSidsReq) (*ListSmsTasksByGroupSidsRes, error)
	// List Sms Task  defined by ListSmsTasksWithDetailedStatusReq message.
	// Gets all details for the specified sms group sid.
	// The method will return a stream of ListSmsTasksWithDetailedStatusRes messages
	// containing delivery status, msg_time, cost
	// belonging to the smsgroup.
	// Required permissions: VIEW_SMS
	ListSmsTasksWithDetailedStatus(context.Context, *ListSmsTasksWithDetailedStatusReq) (*ListSmsTasksWithDetailedStatusRes, error)
	// Update the Scheduled Sms group defined by SmsGroupInfo message for the specified
	// paused/unpaused/cancel status
	// The method will return a UpdateSmsGroupRes message with true or false .
	// Required permissions: EXECUTE_SEND_BROADCAST
	UpdateSmsGroupStatus(context.Context, *SmsGroupInfo) (*UpdateSmsGroupRes, error)
	// Update the Scheduled Sms group defined by SmsGroupInfo message for the specified
	// pacing
	// The method will return a UpdateSmsGroupRes message with true or false .
	// Required permissions: EXECUTE_SEND_BROADCAST
	UpdateSmsGroupSendsPerMinute(context.Context, *SmsGroupInfo) (*UpdateSmsGroupRes, error)
	// Update the Scheduled Sms group defined by SmsGroupInfo message for the specified
	// schedule_time
	// The method will return a UpdateSmsGroupRes message with true or false .
	// Required permissions: EXECUTE_SEND_BROADCAST
	UpdateSmsGroupScheduleTimes(context.Context, *SmsGroupInfo) (*UpdateSmsGroupRes, error)
	// Schedule Sms group defined by ScheduleSmsReq message for the specified
	// sms_template_id with initialpace, sourcenumber, contactgroupsid
	// The method will return a Sms group.
	// Required permissions: EXECUTE_SEND_BROADCAST
	ScheduleSms(context.Context, *ScheduleSmsReq) (*ScheduleSmsRes, error)
	// Re-Schedule Sms group defined by ResendUnconnectedSmsReq message for the specified
	// sms_group_id and start/stop time.
	// The method will return a Sms group.
	// Required permissions: EXECUTE_SEND_BROADCAST
	ResendUnconnectedSms(context.Context, *ResendUnconnectedSmsReq) (*ResendUnconnectedSmsRes, error)
	// Search SMS activity defined by SmsActivitySearchReq message for
	// any of the following filters:
	// ClientSid, ToNumber and FromNumber, FromDate, ToDate, SentOnly
	// The method will return the Sms Group with Sms Task & Sms Intent Info
	// Required permissions: VIEW_SMS
	SmsActivitySearch(context.Context, *SmsActivitySearchReq) (*SmsActivitySearchRes, error)
	// Create/Record a InboundSmsTemplate defined by CreateInboundSmsTemplateReq message.
	// The method will return a CreateInboundSmsTemplateRes message that will
	// contain the newly created values of the inbound_sms_template_id
	// Required permissions: VIEW_SMS
	CreateInboundSmsTemplate(context.Context, *CreateInboundSmsTemplateReq) (*CreateInboundSmsTemplateRes, error)
	// Update a InboundSmsTemplate defined by UpdateInboundSmsTemplateReq message for
	// the specified sms_template_id, region_id and org_id
	// will update the following
	// inbound sms template fields:
	//
	//	TemplateId
	//	SmsTemplateIntentId
	//
	// The method will return a UpdateInboundSmsTemplateRes message with true or false .
	// Required permissions: VIEW_SMS
	UpdateInboundSmsTemplate(context.Context, *UpdateInboundSmsTemplateReq) (*UpdateInboundSmsTemplateRes, error)
	// Delete a InboundSmsTemplate defined by DeleteInboundSmsTemplateReq message for
	// the specified inbound_sms_template_id, region_id and org_id
	// The method will return a DeleteInboundSmsTemplateRes message with true or false .
	// Required permissions: VIEW_SMS
	DeleteInboundSmsTemplate(context.Context, *DeleteInboundSmsTemplateReq) (*DeleteInboundSmsTemplateRes, error)
	// List InboundSmsTemplate  defined by ListInboundSmsTemplatesReq message.
	// Gets all of the Inbound sms template specified according to the filters.
	// The method will return a stream of ListInboundSmsTemplatesRes messages
	// containing InboundSmsTemplate, and SMSIntent
	// belonging to the inbound smstemplate.
	// Required permissions: VIEW_SMS
	ListInboundSmsTemplates(context.Context, *ListInboundSmsTemplatesReq) (*ListInboundSmsTemplatesRes, error)
	// Gets an InboundSmsTemplate group defined by GetInboundSmsTemplateByIdReq message for the specified
	// inbound_sms_template_id, region_id and org_id.
	// The method will return a InboundTemplate group.
	// Required permissions: VIEW_SMS
	GetInboundSmsTemplateById(context.Context, *GetInboundSmsTemplateByIdReq) (*GetInboundSmsTemplateByIdRes, error)
	// Create/Record a InboundSmsGroup defined by CreateInboundSmsGroupReq message.
	// The method will return a CreateInboundSmsGroupRes message that will
	// contain the newly created values of the inbound_sms_group_id
	// Required permissions: VIEW_SMS
	CreateInboundSmsGroup(context.Context, *CreateInboundSmsGroupReq) (*CreateInboundSmsGroupRes, error)
	// Update a InboundSmsGroup defined by UpdateInboundSmsGroupReq message for
	// the specified sms_group_id, region_id and org_id
	// will update the following
	// inbound sms group fields:
	//
	//	TemplateId
	//	SmsNumber
	//
	// The method will return a UpdateInboundSmsGroupRes message with true or false .
	// Required permissions: VIEW_SMS
	UpdateInboundSmsGroup(context.Context, *UpdateInboundSmsGroupReq) (*UpdateInboundSmsGroupRes, error)
	// Delete a InboundSmsGroup defined by DeleteInboundSmsGroupReq message for
	// the specified inbound_sms_group_id, region_id and org_id
	// The method will return a DeleteInboundSmsGroupRes message with true or false .
	// Required permissions: VIEW_SMS
	DeleteInboundSmsGroup(context.Context, *DeleteInboundSmsGroupReq) (*DeleteInboundSmsGroupRes, error)
	// List InboundSmsGroup  defined by ListInboundSmsGroupsReq message.
	// Gets all of the Inbound sms group specified according to the filters.
	// The method will return a stream of ListInboundSmsGroupsRes messages
	// containing InboundSmsGroup, and SMSIntent
	// belonging to the inbound smsgroup.
	// Required permissions: VIEW_SMS
	ListInboundSmsGroups(context.Context, *ListInboundSmsGroupsReq) (*ListInboundSmsGroupsRes, error)
	// List Active InboundSmsGroup  defined by ListActiveInboundSmsGroupsReq message.
	// Gets active Inbound sms group specified according to the filters.
	// The method will return a stream of ListActiveInboundSmsGroupsRes messages
	// containing InboundSmsGroup, and SMSIntent
	// belonging to the inbound smsgroup.
	// Required permissions: VIEW_SMS
	ListActiveInboundSmsGroups(context.Context, *ListActiveInboundSmsGroupsReq) (*ListActiveInboundSmsGroupsRes, error)
	// List InboundSmsGroup  defined by InboundSmsGroupByFiltersReq message.
	// Gets all of the Inbound sms group specified according to the filters.
	// The method will return a stream of InboundSmsGroupByFiltersRes messages
	// containing InboundSmsGroup, and SMSIntent
	// belonging to the inbound smsgroup.
	// Required permissions: VIEW_SMS
	ListInboundSmsGroupByFilters(context.Context, *ListInboundSmsGroupByFiltersReq) (*ListInboundSmsGroupByFiltersRes, error)
	// Gets an InboundSms group defined by GetInboundSmsGroupByIdReq message for the specified
	// inbound_sms_group_id, region_id and org_id.
	// The method will return a InboundSms group.
	// Required permissions: VIEW_SMS
	GetInboundSmsGroupById(context.Context, *GetInboundSmsGroupByIdReq) (*GetInboundSmsGroupByIdRes, error)
	// List InboundSmsGroup  defined by ListInboundSmsGroupsByGroupIdsReq message.
	// Gets all of the Inbound sms group specified for the groupids array.
	// The method will return a stream of ListInboundSmsGroupsByGroupIdsRes messages
	// containing InboundSmsGroup, and SMSIntent
	// belonging to the inbound smsgroup.
	// Required permissions: VIEW_SMS
	ListInboundSmsGroupsByGroupIds(context.Context, *ListInboundSmsGroupsByGroupIdsReq) (*ListInboundSmsGroupsByGroupIdsRes, error)
	// Stop an InboundSms group defined by StopInboundSmsGroupReq message for the specified
	// inbound_sms_group_id, region_id and org_id.
	// The method will mark the InboundSms group completed.
	// Required permissions: VIEW_SMS
	StopInboundSmsGroup(context.Context, *StopInboundSmsGroupReq) (*StopInboundSmsGroupRes, error)
	// Schedule InboundSms group defined by ScheduleInboundSmsReq message for the specified
	// inbound_sms_template_id and sms_number_sid.
	// The method will return a InboundSms group.
	// Required permissions: EXECUTE_SEND_BROADCAST
	ScheduleInboundSms(context.Context, *ScheduleInboundSmsReq) (*ScheduleInboundSmsRes, error)
	// Create/Record a SmsConversation defined by CreateSmsConversationReq message.
	// The method will return a CreateSmsConversationRes message that will
	// contain the newly created values of the sms_conversation_id
	// Required permissions: VIEW_SMS
	CreateSmsConversation(context.Context, *CreateSmsConversationReq) (*CreateSmsConversationRes, error)
	// Update a SmsConversation defined by UpdateSmsConversationReq message for
	// the specified sms_conversation_id, region_id and org_id
	// will update the following
	// conversation fields:
	//
	//	InboundSmsGroupId
	//	SmsTaskParent
	//
	// The method will return a UpdateSmsConversationRes message with true or false .
	// Required permissions: VIEW_SMS
	UpdateSmsConversation(context.Context, *UpdateSmsConversationReq) (*UpdateSmsConversationRes, error)
	// Delete a SmsConversation defined by DeleteSmsConversationReq message for
	// the specified sms_conversation_id, region_id and org_id
	// The method will return a DeleteSmsConversationRes message with true or false .
	// Required permissions: VIEW_SMS
	DeleteSmsConversation(context.Context, *DeleteSmsConversationReq) (*DeleteSmsConversationRes, error)
	// List SmsConversation profiles defined by ListSmsConversationsReq message.
	// Gets all of the unique sms conversations.
	// The method will return a stream of ListSmsConversationsRes messages
	// containing InboundSmsGroupId, and SmsTaskParent
	// belonging to the smsconversations.
	// Required permissions: VIEW_SMS
	ListSmsConversations(context.Context, *ListSmsConversationsReq) (*ListSmsConversationsRes, error)
	// Gets a SmsConversation defined by GetSmsConversationByIdReq message for the specified
	// sms_conversation_id, region_id and org_id.
	// The method will return a SmsConversation.
	// Required permissions: VIEW_SMS
	GetSmsConversationById(context.Context, *GetSmsConversationByIdReq) (*GetSmsConversationByIdRes, error)
	// Gets SmsMessage defined by GetSmsMessageReq message for the specified
	// sms_message_sid.
	// The method will return a SmsMessage.
	// Required permissions: VIEW_SMS
	GetSmsMessage(context.Context, *GetSmsMessageReq) (*GetSmsMessageRes, error)
	// Create/Record a SmsConversationAudit defined by SmsConversationAudit message.
	// The method will return a CreateSmsConversationAuditRes message that will
	// contain the newly created values of the sms_conversation_audit_id
	// Required permissions: VIEW_SMS
	CreateSmsConversationAudit(context.Context, *SmsConversationAudit) (*CreateSmsConversationAuditRes, error)
	// List SmsConversationAudit profiles defined by ListSmsConversationAuditsReq message.
	// Gets all of the values for sms conversations id.
	// The method will return a stream of ListSmsConversationAuditsRes messages
	// containing SmsTaskSid, SmsReceivedReplySid and AgentId
	// belonging to the smsconversationsaudit.
	// Required permissions: VIEW_SMS
	ListSmsConversationAudits(context.Context, *ListSmsConversationAuditsReq) (*ListSmsConversationAuditsRes, error)
	// Gets a SmsConversationAudit defined by GetSmsConversationAuditByIdReq message for the specified
	// sms_conversation_audit_id.
	// The method will return a SmsConversationAudit.
	// Required permissions: VIEW_SMS
	GetSmsConversationAuditById(context.Context, *GetSmsConversationAuditByIdReq) (*GetSmsConversationAuditByIdRes, error)
	// Create/Record a SmsConversationAssignedAgent defined by SmsConversationAssignedAgent message.
	// The method will return a CreateSmsConversationAssignedAgentRes message with true or false
	// Required permissions: VIEW_SMS
	CreateSmsConversationAssignedAgent(context.Context, *SmsConversationAssignedAgent) (*CreateSmsConversationAssignedAgentRes, error)
	// List SmsConversationAssignedAgent profiles defined by ListSmsConversationAssignedAgentsReq message.
	// Gets all of the values for sms conversations id.
	// The method will return a stream of ListSmsConversationAssignedAgentsRes messages
	// containing Assigned AgentId, Primary Agent, and Notiify
	// belonging to the smsconversationassignedagent.
	// Required permissions: VIEW_SMS
	ListSmsConversationAssignedAgents(context.Context, *ListSmsConversationAssignedAgentsReq) (*ListSmsConversationAssignedAgentsRes, error)
	// Gets a SmsConversationAssignedAgent defined by GetSmsConversationAssignedAgentByIdReq message for the specified
	// conversation_id & assigned_agent_id
	// The method will return a SmsConversationAssignedAgent.
	// Required permissions: VIEW_SMS
	GetSmsConversationAssignedAgentById(context.Context, *GetSmsConversationAssignedAgentByIdReq) (*GetSmsConversationAssignedAgentByIdRes, error)
	// List InboundSmsTasks defined by ListInboundSmsTasksByGroupIdsReq message.
	// Gets all of the Inbound sms tasks for the groupids.
	// The method will return a stream of ListInboundSmsTasksByGroupIdsRes messages
	// containing InboundSmsTask
	// belonging to the inbound smsgroup.
	// Required permissions: VIEW_SMS
	ListInboundSmsTasksByGroupIds(context.Context, *ListInboundSmsTasksByGroupIdsReq) (*ListInboundSmsTasksByGroupIdsRes, error)
	// Stop all OutboundSms groups defined by StopAllOutboundSmsGroupsReq message for the specified
	// array of outbound groups and client_sid.
	// The method will mark the OutboundSms groups as completed.
	// Required permissions: VIEW_SMS
	StopAllOutboundSmsGroups(context.Context, *StopAllOutboundSmsGroupsReq) (*StopAllOutboundSmsGroupsRes, error)
	// Stop all InboundSms groups defined by StopAllInboundSmsGroupsReq message for the specified
	// array of inbound groups, region_id and org_id.
	// The method will mark the InboundSms groups as completed.
	// Required permissions: VIEW_SMS
	StopAllInboundSmsGroups(context.Context, *StopAllInboundSmsGroupsReq) (*StopAllInboundSmsGroupsRes, error)
	mustEmbedUnimplementedSmsApiServer()
}

// UnimplementedSmsApiServer must be embedded to have forward compatible implementations.
type UnimplementedSmsApiServer struct {
}

func (UnimplementedSmsApiServer) ListSmsTemplates(context.Context, *ListSmsTemplatesReq) (*ListSmsTemplatesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSmsTemplates not implemented")
}
func (UnimplementedSmsApiServer) CreateSmsTemplate(context.Context, *CreateSmsTemplateReq) (*CreateSmsTemplateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSmsTemplate not implemented")
}
func (UnimplementedSmsApiServer) UpdateSmsTemplate(context.Context, *UpdateSmsTemplateReq) (*UpdateSmsTemplateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSmsTemplate not implemented")
}
func (UnimplementedSmsApiServer) DeleteSmsTemplate(context.Context, *DeleteSmsTemplateReq) (*DeleteSmsTemplateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSmsTemplate not implemented")
}
func (UnimplementedSmsApiServer) GetSmsTemplateBySid(context.Context, *GetSmsTemplateBySidReq) (*GetSmsTemplateBySidRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmsTemplateBySid not implemented")
}
func (UnimplementedSmsApiServer) ListSmsIntentTemplates(context.Context, *ListSmsIntentTemplatesReq) (*ListSmsIntentTemplatesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSmsIntentTemplates not implemented")
}
func (UnimplementedSmsApiServer) CreateSmsIntentTemplate(context.Context, *SmsIntentTemplate) (*CreateSmsIntentTemplateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSmsIntentTemplate not implemented")
}
func (UnimplementedSmsApiServer) UpdateSmsIntentTemplate(context.Context, *SmsIntentTemplate) (*UpdateSmsIntentTemplateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSmsIntentTemplate not implemented")
}
func (UnimplementedSmsApiServer) DeleteSmsIntentTemplate(context.Context, *DeleteSmsIntentTemplateReq) (*DeleteSmsIntentTemplateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSmsIntentTemplate not implemented")
}
func (UnimplementedSmsApiServer) GetSmsIntentTemplateBySid(context.Context, *GetSmsIntentTemplateBySidReq) (*SmsIntentTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmsIntentTemplateBySid not implemented")
}
func (UnimplementedSmsApiServer) ListSmsSourceNumbers(context.Context, *ListSmsSourceNumbersReq) (*ListSmsSourceNumbersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSmsSourceNumbers not implemented")
}
func (UnimplementedSmsApiServer) CreateSmsSourceNumber(context.Context, *CreateSmsSourceNumberReq) (*CreateSmsSourceNumberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSmsSourceNumber not implemented")
}
func (UnimplementedSmsApiServer) UpdateSmsSourceNumber(context.Context, *UpdateSmsSourceNumberReq) (*UpdateSmsSourceNumberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSmsSourceNumber not implemented")
}
func (UnimplementedSmsApiServer) DeleteSmsSourceNumber(context.Context, *DeleteSmsSourceNumberReq) (*DeleteSmsSourceNumberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSmsSourceNumber not implemented")
}
func (UnimplementedSmsApiServer) GetSmsSourceNumberBySid(context.Context, *GetSmsSourceNumberBySidReq) (*SmsNumbers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmsSourceNumberBySid not implemented")
}
func (UnimplementedSmsApiServer) SendSmsNotification(context.Context, *SendSmsNotificationReq) (*SendSmsNotificationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSmsNotification not implemented")
}
func (UnimplementedSmsApiServer) ListSmsGroupByFilters(context.Context, *ListSmsGroupByFiltersReq) (*ListSmsGroupByFiltersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSmsGroupByFilters not implemented")
}
func (UnimplementedSmsApiServer) ListSmsGroupsByGroupSids(context.Context, *ListSmsGroupsByGroupSidsReq) (*ListSmsGroupsByGroupSidsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSmsGroupsByGroupSids not implemented")
}
func (UnimplementedSmsApiServer) ListSmsTasksByGroupSids(context.Context, *ListSmsTasksByGroupSidsReq) (*ListSmsTasksByGroupSidsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSmsTasksByGroupSids not implemented")
}
func (UnimplementedSmsApiServer) ListSmsGroupByFiltersForAudit(context.Context, *ListSmsGroupByFiltersReq) (*ListSmsGroupByFiltersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSmsGroupByFiltersForAudit not implemented")
}
func (UnimplementedSmsApiServer) ListSmsGroupsByGroupSidsForAudit(context.Context, *ListSmsGroupsByGroupSidsReq) (*ListSmsGroupsByGroupSidsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSmsGroupsByGroupSidsForAudit not implemented")
}
func (UnimplementedSmsApiServer) ListSmsTasksByGroupSidsForAudit(context.Context, *ListSmsTasksByGroupSidsReq) (*ListSmsTasksByGroupSidsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSmsTasksByGroupSidsForAudit not implemented")
}
func (UnimplementedSmsApiServer) ListSmsTasksWithDetailedStatus(context.Context, *ListSmsTasksWithDetailedStatusReq) (*ListSmsTasksWithDetailedStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSmsTasksWithDetailedStatus not implemented")
}
func (UnimplementedSmsApiServer) UpdateSmsGroupStatus(context.Context, *SmsGroupInfo) (*UpdateSmsGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSmsGroupStatus not implemented")
}
func (UnimplementedSmsApiServer) UpdateSmsGroupSendsPerMinute(context.Context, *SmsGroupInfo) (*UpdateSmsGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSmsGroupSendsPerMinute not implemented")
}
func (UnimplementedSmsApiServer) UpdateSmsGroupScheduleTimes(context.Context, *SmsGroupInfo) (*UpdateSmsGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSmsGroupScheduleTimes not implemented")
}
func (UnimplementedSmsApiServer) ScheduleSms(context.Context, *ScheduleSmsReq) (*ScheduleSmsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleSms not implemented")
}
func (UnimplementedSmsApiServer) ResendUnconnectedSms(context.Context, *ResendUnconnectedSmsReq) (*ResendUnconnectedSmsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendUnconnectedSms not implemented")
}
func (UnimplementedSmsApiServer) SmsActivitySearch(context.Context, *SmsActivitySearchReq) (*SmsActivitySearchRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsActivitySearch not implemented")
}
func (UnimplementedSmsApiServer) CreateInboundSmsTemplate(context.Context, *CreateInboundSmsTemplateReq) (*CreateInboundSmsTemplateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInboundSmsTemplate not implemented")
}
func (UnimplementedSmsApiServer) UpdateInboundSmsTemplate(context.Context, *UpdateInboundSmsTemplateReq) (*UpdateInboundSmsTemplateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInboundSmsTemplate not implemented")
}
func (UnimplementedSmsApiServer) DeleteInboundSmsTemplate(context.Context, *DeleteInboundSmsTemplateReq) (*DeleteInboundSmsTemplateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInboundSmsTemplate not implemented")
}
func (UnimplementedSmsApiServer) ListInboundSmsTemplates(context.Context, *ListInboundSmsTemplatesReq) (*ListInboundSmsTemplatesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInboundSmsTemplates not implemented")
}
func (UnimplementedSmsApiServer) GetInboundSmsTemplateById(context.Context, *GetInboundSmsTemplateByIdReq) (*GetInboundSmsTemplateByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInboundSmsTemplateById not implemented")
}
func (UnimplementedSmsApiServer) CreateInboundSmsGroup(context.Context, *CreateInboundSmsGroupReq) (*CreateInboundSmsGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInboundSmsGroup not implemented")
}
func (UnimplementedSmsApiServer) UpdateInboundSmsGroup(context.Context, *UpdateInboundSmsGroupReq) (*UpdateInboundSmsGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInboundSmsGroup not implemented")
}
func (UnimplementedSmsApiServer) DeleteInboundSmsGroup(context.Context, *DeleteInboundSmsGroupReq) (*DeleteInboundSmsGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInboundSmsGroup not implemented")
}
func (UnimplementedSmsApiServer) ListInboundSmsGroups(context.Context, *ListInboundSmsGroupsReq) (*ListInboundSmsGroupsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInboundSmsGroups not implemented")
}
func (UnimplementedSmsApiServer) ListActiveInboundSmsGroups(context.Context, *ListActiveInboundSmsGroupsReq) (*ListActiveInboundSmsGroupsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActiveInboundSmsGroups not implemented")
}
func (UnimplementedSmsApiServer) ListInboundSmsGroupByFilters(context.Context, *ListInboundSmsGroupByFiltersReq) (*ListInboundSmsGroupByFiltersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInboundSmsGroupByFilters not implemented")
}
func (UnimplementedSmsApiServer) GetInboundSmsGroupById(context.Context, *GetInboundSmsGroupByIdReq) (*GetInboundSmsGroupByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInboundSmsGroupById not implemented")
}
func (UnimplementedSmsApiServer) ListInboundSmsGroupsByGroupIds(context.Context, *ListInboundSmsGroupsByGroupIdsReq) (*ListInboundSmsGroupsByGroupIdsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInboundSmsGroupsByGroupIds not implemented")
}
func (UnimplementedSmsApiServer) StopInboundSmsGroup(context.Context, *StopInboundSmsGroupReq) (*StopInboundSmsGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopInboundSmsGroup not implemented")
}
func (UnimplementedSmsApiServer) ScheduleInboundSms(context.Context, *ScheduleInboundSmsReq) (*ScheduleInboundSmsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleInboundSms not implemented")
}
func (UnimplementedSmsApiServer) CreateSmsConversation(context.Context, *CreateSmsConversationReq) (*CreateSmsConversationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSmsConversation not implemented")
}
func (UnimplementedSmsApiServer) UpdateSmsConversation(context.Context, *UpdateSmsConversationReq) (*UpdateSmsConversationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSmsConversation not implemented")
}
func (UnimplementedSmsApiServer) DeleteSmsConversation(context.Context, *DeleteSmsConversationReq) (*DeleteSmsConversationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSmsConversation not implemented")
}
func (UnimplementedSmsApiServer) ListSmsConversations(context.Context, *ListSmsConversationsReq) (*ListSmsConversationsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSmsConversations not implemented")
}
func (UnimplementedSmsApiServer) GetSmsConversationById(context.Context, *GetSmsConversationByIdReq) (*GetSmsConversationByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmsConversationById not implemented")
}
func (UnimplementedSmsApiServer) GetSmsMessage(context.Context, *GetSmsMessageReq) (*GetSmsMessageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmsMessage not implemented")
}
func (UnimplementedSmsApiServer) CreateSmsConversationAudit(context.Context, *SmsConversationAudit) (*CreateSmsConversationAuditRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSmsConversationAudit not implemented")
}
func (UnimplementedSmsApiServer) ListSmsConversationAudits(context.Context, *ListSmsConversationAuditsReq) (*ListSmsConversationAuditsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSmsConversationAudits not implemented")
}
func (UnimplementedSmsApiServer) GetSmsConversationAuditById(context.Context, *GetSmsConversationAuditByIdReq) (*GetSmsConversationAuditByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmsConversationAuditById not implemented")
}
func (UnimplementedSmsApiServer) CreateSmsConversationAssignedAgent(context.Context, *SmsConversationAssignedAgent) (*CreateSmsConversationAssignedAgentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSmsConversationAssignedAgent not implemented")
}
func (UnimplementedSmsApiServer) ListSmsConversationAssignedAgents(context.Context, *ListSmsConversationAssignedAgentsReq) (*ListSmsConversationAssignedAgentsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSmsConversationAssignedAgents not implemented")
}
func (UnimplementedSmsApiServer) GetSmsConversationAssignedAgentById(context.Context, *GetSmsConversationAssignedAgentByIdReq) (*GetSmsConversationAssignedAgentByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmsConversationAssignedAgentById not implemented")
}
func (UnimplementedSmsApiServer) ListInboundSmsTasksByGroupIds(context.Context, *ListInboundSmsTasksByGroupIdsReq) (*ListInboundSmsTasksByGroupIdsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInboundSmsTasksByGroupIds not implemented")
}
func (UnimplementedSmsApiServer) StopAllOutboundSmsGroups(context.Context, *StopAllOutboundSmsGroupsReq) (*StopAllOutboundSmsGroupsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAllOutboundSmsGroups not implemented")
}
func (UnimplementedSmsApiServer) StopAllInboundSmsGroups(context.Context, *StopAllInboundSmsGroupsReq) (*StopAllInboundSmsGroupsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAllInboundSmsGroups not implemented")
}
func (UnimplementedSmsApiServer) mustEmbedUnimplementedSmsApiServer() {}

// UnsafeSmsApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmsApiServer will
// result in compilation errors.
type UnsafeSmsApiServer interface {
	mustEmbedUnimplementedSmsApiServer()
}

func RegisterSmsApiServer(s grpc.ServiceRegistrar, srv SmsApiServer) {
	s.RegisterService(&SmsApi_ServiceDesc, srv)
}

func _SmsApi_ListSmsTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSmsTemplatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).ListSmsTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_ListSmsTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).ListSmsTemplates(ctx, req.(*ListSmsTemplatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_CreateSmsTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSmsTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).CreateSmsTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_CreateSmsTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).CreateSmsTemplate(ctx, req.(*CreateSmsTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_UpdateSmsTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSmsTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).UpdateSmsTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_UpdateSmsTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).UpdateSmsTemplate(ctx, req.(*UpdateSmsTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_DeleteSmsTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSmsTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).DeleteSmsTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_DeleteSmsTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).DeleteSmsTemplate(ctx, req.(*DeleteSmsTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_GetSmsTemplateBySid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSmsTemplateBySidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).GetSmsTemplateBySid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_GetSmsTemplateBySid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).GetSmsTemplateBySid(ctx, req.(*GetSmsTemplateBySidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_ListSmsIntentTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSmsIntentTemplatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).ListSmsIntentTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_ListSmsIntentTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).ListSmsIntentTemplates(ctx, req.(*ListSmsIntentTemplatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_CreateSmsIntentTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsIntentTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).CreateSmsIntentTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_CreateSmsIntentTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).CreateSmsIntentTemplate(ctx, req.(*SmsIntentTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_UpdateSmsIntentTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsIntentTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).UpdateSmsIntentTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_UpdateSmsIntentTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).UpdateSmsIntentTemplate(ctx, req.(*SmsIntentTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_DeleteSmsIntentTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSmsIntentTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).DeleteSmsIntentTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_DeleteSmsIntentTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).DeleteSmsIntentTemplate(ctx, req.(*DeleteSmsIntentTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_GetSmsIntentTemplateBySid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSmsIntentTemplateBySidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).GetSmsIntentTemplateBySid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_GetSmsIntentTemplateBySid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).GetSmsIntentTemplateBySid(ctx, req.(*GetSmsIntentTemplateBySidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_ListSmsSourceNumbers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSmsSourceNumbersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).ListSmsSourceNumbers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_ListSmsSourceNumbers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).ListSmsSourceNumbers(ctx, req.(*ListSmsSourceNumbersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_CreateSmsSourceNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSmsSourceNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).CreateSmsSourceNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_CreateSmsSourceNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).CreateSmsSourceNumber(ctx, req.(*CreateSmsSourceNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_UpdateSmsSourceNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSmsSourceNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).UpdateSmsSourceNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_UpdateSmsSourceNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).UpdateSmsSourceNumber(ctx, req.(*UpdateSmsSourceNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_DeleteSmsSourceNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSmsSourceNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).DeleteSmsSourceNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_DeleteSmsSourceNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).DeleteSmsSourceNumber(ctx, req.(*DeleteSmsSourceNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_GetSmsSourceNumberBySid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSmsSourceNumberBySidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).GetSmsSourceNumberBySid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_GetSmsSourceNumberBySid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).GetSmsSourceNumberBySid(ctx, req.(*GetSmsSourceNumberBySidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_SendSmsNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSmsNotificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).SendSmsNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_SendSmsNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).SendSmsNotification(ctx, req.(*SendSmsNotificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_ListSmsGroupByFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSmsGroupByFiltersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).ListSmsGroupByFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_ListSmsGroupByFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).ListSmsGroupByFilters(ctx, req.(*ListSmsGroupByFiltersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_ListSmsGroupsByGroupSids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSmsGroupsByGroupSidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).ListSmsGroupsByGroupSids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_ListSmsGroupsByGroupSids_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).ListSmsGroupsByGroupSids(ctx, req.(*ListSmsGroupsByGroupSidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_ListSmsTasksByGroupSids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSmsTasksByGroupSidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).ListSmsTasksByGroupSids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_ListSmsTasksByGroupSids_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).ListSmsTasksByGroupSids(ctx, req.(*ListSmsTasksByGroupSidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_ListSmsGroupByFiltersForAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSmsGroupByFiltersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).ListSmsGroupByFiltersForAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_ListSmsGroupByFiltersForAudit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).ListSmsGroupByFiltersForAudit(ctx, req.(*ListSmsGroupByFiltersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_ListSmsGroupsByGroupSidsForAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSmsGroupsByGroupSidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).ListSmsGroupsByGroupSidsForAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_ListSmsGroupsByGroupSidsForAudit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).ListSmsGroupsByGroupSidsForAudit(ctx, req.(*ListSmsGroupsByGroupSidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_ListSmsTasksByGroupSidsForAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSmsTasksByGroupSidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).ListSmsTasksByGroupSidsForAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_ListSmsTasksByGroupSidsForAudit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).ListSmsTasksByGroupSidsForAudit(ctx, req.(*ListSmsTasksByGroupSidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_ListSmsTasksWithDetailedStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSmsTasksWithDetailedStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).ListSmsTasksWithDetailedStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_ListSmsTasksWithDetailedStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).ListSmsTasksWithDetailedStatus(ctx, req.(*ListSmsTasksWithDetailedStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_UpdateSmsGroupStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsGroupInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).UpdateSmsGroupStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_UpdateSmsGroupStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).UpdateSmsGroupStatus(ctx, req.(*SmsGroupInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_UpdateSmsGroupSendsPerMinute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsGroupInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).UpdateSmsGroupSendsPerMinute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_UpdateSmsGroupSendsPerMinute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).UpdateSmsGroupSendsPerMinute(ctx, req.(*SmsGroupInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_UpdateSmsGroupScheduleTimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsGroupInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).UpdateSmsGroupScheduleTimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_UpdateSmsGroupScheduleTimes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).UpdateSmsGroupScheduleTimes(ctx, req.(*SmsGroupInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_ScheduleSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleSmsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).ScheduleSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_ScheduleSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).ScheduleSms(ctx, req.(*ScheduleSmsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_ResendUnconnectedSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendUnconnectedSmsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).ResendUnconnectedSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_ResendUnconnectedSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).ResendUnconnectedSms(ctx, req.(*ResendUnconnectedSmsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_SmsActivitySearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsActivitySearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).SmsActivitySearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_SmsActivitySearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).SmsActivitySearch(ctx, req.(*SmsActivitySearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_CreateInboundSmsTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInboundSmsTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).CreateInboundSmsTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_CreateInboundSmsTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).CreateInboundSmsTemplate(ctx, req.(*CreateInboundSmsTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_UpdateInboundSmsTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInboundSmsTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).UpdateInboundSmsTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_UpdateInboundSmsTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).UpdateInboundSmsTemplate(ctx, req.(*UpdateInboundSmsTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_DeleteInboundSmsTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInboundSmsTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).DeleteInboundSmsTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_DeleteInboundSmsTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).DeleteInboundSmsTemplate(ctx, req.(*DeleteInboundSmsTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_ListInboundSmsTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInboundSmsTemplatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).ListInboundSmsTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_ListInboundSmsTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).ListInboundSmsTemplates(ctx, req.(*ListInboundSmsTemplatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_GetInboundSmsTemplateById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInboundSmsTemplateByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).GetInboundSmsTemplateById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_GetInboundSmsTemplateById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).GetInboundSmsTemplateById(ctx, req.(*GetInboundSmsTemplateByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_CreateInboundSmsGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInboundSmsGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).CreateInboundSmsGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_CreateInboundSmsGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).CreateInboundSmsGroup(ctx, req.(*CreateInboundSmsGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_UpdateInboundSmsGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInboundSmsGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).UpdateInboundSmsGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_UpdateInboundSmsGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).UpdateInboundSmsGroup(ctx, req.(*UpdateInboundSmsGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_DeleteInboundSmsGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInboundSmsGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).DeleteInboundSmsGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_DeleteInboundSmsGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).DeleteInboundSmsGroup(ctx, req.(*DeleteInboundSmsGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_ListInboundSmsGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInboundSmsGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).ListInboundSmsGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_ListInboundSmsGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).ListInboundSmsGroups(ctx, req.(*ListInboundSmsGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_ListActiveInboundSmsGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActiveInboundSmsGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).ListActiveInboundSmsGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_ListActiveInboundSmsGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).ListActiveInboundSmsGroups(ctx, req.(*ListActiveInboundSmsGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_ListInboundSmsGroupByFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInboundSmsGroupByFiltersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).ListInboundSmsGroupByFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_ListInboundSmsGroupByFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).ListInboundSmsGroupByFilters(ctx, req.(*ListInboundSmsGroupByFiltersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_GetInboundSmsGroupById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInboundSmsGroupByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).GetInboundSmsGroupById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_GetInboundSmsGroupById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).GetInboundSmsGroupById(ctx, req.(*GetInboundSmsGroupByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_ListInboundSmsGroupsByGroupIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInboundSmsGroupsByGroupIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).ListInboundSmsGroupsByGroupIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_ListInboundSmsGroupsByGroupIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).ListInboundSmsGroupsByGroupIds(ctx, req.(*ListInboundSmsGroupsByGroupIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_StopInboundSmsGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopInboundSmsGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).StopInboundSmsGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_StopInboundSmsGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).StopInboundSmsGroup(ctx, req.(*StopInboundSmsGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_ScheduleInboundSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleInboundSmsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).ScheduleInboundSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_ScheduleInboundSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).ScheduleInboundSms(ctx, req.(*ScheduleInboundSmsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_CreateSmsConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSmsConversationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).CreateSmsConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_CreateSmsConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).CreateSmsConversation(ctx, req.(*CreateSmsConversationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_UpdateSmsConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSmsConversationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).UpdateSmsConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_UpdateSmsConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).UpdateSmsConversation(ctx, req.(*UpdateSmsConversationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_DeleteSmsConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSmsConversationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).DeleteSmsConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_DeleteSmsConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).DeleteSmsConversation(ctx, req.(*DeleteSmsConversationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_ListSmsConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSmsConversationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).ListSmsConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_ListSmsConversations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).ListSmsConversations(ctx, req.(*ListSmsConversationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_GetSmsConversationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSmsConversationByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).GetSmsConversationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_GetSmsConversationById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).GetSmsConversationById(ctx, req.(*GetSmsConversationByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_GetSmsMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSmsMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).GetSmsMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_GetSmsMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).GetSmsMessage(ctx, req.(*GetSmsMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_CreateSmsConversationAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsConversationAudit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).CreateSmsConversationAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_CreateSmsConversationAudit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).CreateSmsConversationAudit(ctx, req.(*SmsConversationAudit))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_ListSmsConversationAudits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSmsConversationAuditsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).ListSmsConversationAudits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_ListSmsConversationAudits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).ListSmsConversationAudits(ctx, req.(*ListSmsConversationAuditsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_GetSmsConversationAuditById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSmsConversationAuditByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).GetSmsConversationAuditById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_GetSmsConversationAuditById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).GetSmsConversationAuditById(ctx, req.(*GetSmsConversationAuditByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_CreateSmsConversationAssignedAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsConversationAssignedAgent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).CreateSmsConversationAssignedAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_CreateSmsConversationAssignedAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).CreateSmsConversationAssignedAgent(ctx, req.(*SmsConversationAssignedAgent))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_ListSmsConversationAssignedAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSmsConversationAssignedAgentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).ListSmsConversationAssignedAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_ListSmsConversationAssignedAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).ListSmsConversationAssignedAgents(ctx, req.(*ListSmsConversationAssignedAgentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_GetSmsConversationAssignedAgentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSmsConversationAssignedAgentByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).GetSmsConversationAssignedAgentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_GetSmsConversationAssignedAgentById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).GetSmsConversationAssignedAgentById(ctx, req.(*GetSmsConversationAssignedAgentByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_ListInboundSmsTasksByGroupIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInboundSmsTasksByGroupIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).ListInboundSmsTasksByGroupIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_ListInboundSmsTasksByGroupIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).ListInboundSmsTasksByGroupIds(ctx, req.(*ListInboundSmsTasksByGroupIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_StopAllOutboundSmsGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAllOutboundSmsGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).StopAllOutboundSmsGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_StopAllOutboundSmsGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).StopAllOutboundSmsGroups(ctx, req.(*StopAllOutboundSmsGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsApi_StopAllInboundSmsGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAllInboundSmsGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsApiServer).StopAllInboundSmsGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsApi_StopAllInboundSmsGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsApiServer).StopAllInboundSmsGroups(ctx, req.(*StopAllInboundSmsGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SmsApi_ServiceDesc is the grpc.ServiceDesc for SmsApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SmsApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v0alpha.SmsApi",
	HandlerType: (*SmsApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSmsTemplates",
			Handler:    _SmsApi_ListSmsTemplates_Handler,
		},
		{
			MethodName: "CreateSmsTemplate",
			Handler:    _SmsApi_CreateSmsTemplate_Handler,
		},
		{
			MethodName: "UpdateSmsTemplate",
			Handler:    _SmsApi_UpdateSmsTemplate_Handler,
		},
		{
			MethodName: "DeleteSmsTemplate",
			Handler:    _SmsApi_DeleteSmsTemplate_Handler,
		},
		{
			MethodName: "GetSmsTemplateBySid",
			Handler:    _SmsApi_GetSmsTemplateBySid_Handler,
		},
		{
			MethodName: "ListSmsIntentTemplates",
			Handler:    _SmsApi_ListSmsIntentTemplates_Handler,
		},
		{
			MethodName: "CreateSmsIntentTemplate",
			Handler:    _SmsApi_CreateSmsIntentTemplate_Handler,
		},
		{
			MethodName: "UpdateSmsIntentTemplate",
			Handler:    _SmsApi_UpdateSmsIntentTemplate_Handler,
		},
		{
			MethodName: "DeleteSmsIntentTemplate",
			Handler:    _SmsApi_DeleteSmsIntentTemplate_Handler,
		},
		{
			MethodName: "GetSmsIntentTemplateBySid",
			Handler:    _SmsApi_GetSmsIntentTemplateBySid_Handler,
		},
		{
			MethodName: "ListSmsSourceNumbers",
			Handler:    _SmsApi_ListSmsSourceNumbers_Handler,
		},
		{
			MethodName: "CreateSmsSourceNumber",
			Handler:    _SmsApi_CreateSmsSourceNumber_Handler,
		},
		{
			MethodName: "UpdateSmsSourceNumber",
			Handler:    _SmsApi_UpdateSmsSourceNumber_Handler,
		},
		{
			MethodName: "DeleteSmsSourceNumber",
			Handler:    _SmsApi_DeleteSmsSourceNumber_Handler,
		},
		{
			MethodName: "GetSmsSourceNumberBySid",
			Handler:    _SmsApi_GetSmsSourceNumberBySid_Handler,
		},
		{
			MethodName: "SendSmsNotification",
			Handler:    _SmsApi_SendSmsNotification_Handler,
		},
		{
			MethodName: "ListSmsGroupByFilters",
			Handler:    _SmsApi_ListSmsGroupByFilters_Handler,
		},
		{
			MethodName: "ListSmsGroupsByGroupSids",
			Handler:    _SmsApi_ListSmsGroupsByGroupSids_Handler,
		},
		{
			MethodName: "ListSmsTasksByGroupSids",
			Handler:    _SmsApi_ListSmsTasksByGroupSids_Handler,
		},
		{
			MethodName: "ListSmsGroupByFiltersForAudit",
			Handler:    _SmsApi_ListSmsGroupByFiltersForAudit_Handler,
		},
		{
			MethodName: "ListSmsGroupsByGroupSidsForAudit",
			Handler:    _SmsApi_ListSmsGroupsByGroupSidsForAudit_Handler,
		},
		{
			MethodName: "ListSmsTasksByGroupSidsForAudit",
			Handler:    _SmsApi_ListSmsTasksByGroupSidsForAudit_Handler,
		},
		{
			MethodName: "ListSmsTasksWithDetailedStatus",
			Handler:    _SmsApi_ListSmsTasksWithDetailedStatus_Handler,
		},
		{
			MethodName: "UpdateSmsGroupStatus",
			Handler:    _SmsApi_UpdateSmsGroupStatus_Handler,
		},
		{
			MethodName: "UpdateSmsGroupSendsPerMinute",
			Handler:    _SmsApi_UpdateSmsGroupSendsPerMinute_Handler,
		},
		{
			MethodName: "UpdateSmsGroupScheduleTimes",
			Handler:    _SmsApi_UpdateSmsGroupScheduleTimes_Handler,
		},
		{
			MethodName: "ScheduleSms",
			Handler:    _SmsApi_ScheduleSms_Handler,
		},
		{
			MethodName: "ResendUnconnectedSms",
			Handler:    _SmsApi_ResendUnconnectedSms_Handler,
		},
		{
			MethodName: "SmsActivitySearch",
			Handler:    _SmsApi_SmsActivitySearch_Handler,
		},
		{
			MethodName: "CreateInboundSmsTemplate",
			Handler:    _SmsApi_CreateInboundSmsTemplate_Handler,
		},
		{
			MethodName: "UpdateInboundSmsTemplate",
			Handler:    _SmsApi_UpdateInboundSmsTemplate_Handler,
		},
		{
			MethodName: "DeleteInboundSmsTemplate",
			Handler:    _SmsApi_DeleteInboundSmsTemplate_Handler,
		},
		{
			MethodName: "ListInboundSmsTemplates",
			Handler:    _SmsApi_ListInboundSmsTemplates_Handler,
		},
		{
			MethodName: "GetInboundSmsTemplateById",
			Handler:    _SmsApi_GetInboundSmsTemplateById_Handler,
		},
		{
			MethodName: "CreateInboundSmsGroup",
			Handler:    _SmsApi_CreateInboundSmsGroup_Handler,
		},
		{
			MethodName: "UpdateInboundSmsGroup",
			Handler:    _SmsApi_UpdateInboundSmsGroup_Handler,
		},
		{
			MethodName: "DeleteInboundSmsGroup",
			Handler:    _SmsApi_DeleteInboundSmsGroup_Handler,
		},
		{
			MethodName: "ListInboundSmsGroups",
			Handler:    _SmsApi_ListInboundSmsGroups_Handler,
		},
		{
			MethodName: "ListActiveInboundSmsGroups",
			Handler:    _SmsApi_ListActiveInboundSmsGroups_Handler,
		},
		{
			MethodName: "ListInboundSmsGroupByFilters",
			Handler:    _SmsApi_ListInboundSmsGroupByFilters_Handler,
		},
		{
			MethodName: "GetInboundSmsGroupById",
			Handler:    _SmsApi_GetInboundSmsGroupById_Handler,
		},
		{
			MethodName: "ListInboundSmsGroupsByGroupIds",
			Handler:    _SmsApi_ListInboundSmsGroupsByGroupIds_Handler,
		},
		{
			MethodName: "StopInboundSmsGroup",
			Handler:    _SmsApi_StopInboundSmsGroup_Handler,
		},
		{
			MethodName: "ScheduleInboundSms",
			Handler:    _SmsApi_ScheduleInboundSms_Handler,
		},
		{
			MethodName: "CreateSmsConversation",
			Handler:    _SmsApi_CreateSmsConversation_Handler,
		},
		{
			MethodName: "UpdateSmsConversation",
			Handler:    _SmsApi_UpdateSmsConversation_Handler,
		},
		{
			MethodName: "DeleteSmsConversation",
			Handler:    _SmsApi_DeleteSmsConversation_Handler,
		},
		{
			MethodName: "ListSmsConversations",
			Handler:    _SmsApi_ListSmsConversations_Handler,
		},
		{
			MethodName: "GetSmsConversationById",
			Handler:    _SmsApi_GetSmsConversationById_Handler,
		},
		{
			MethodName: "GetSmsMessage",
			Handler:    _SmsApi_GetSmsMessage_Handler,
		},
		{
			MethodName: "CreateSmsConversationAudit",
			Handler:    _SmsApi_CreateSmsConversationAudit_Handler,
		},
		{
			MethodName: "ListSmsConversationAudits",
			Handler:    _SmsApi_ListSmsConversationAudits_Handler,
		},
		{
			MethodName: "GetSmsConversationAuditById",
			Handler:    _SmsApi_GetSmsConversationAuditById_Handler,
		},
		{
			MethodName: "CreateSmsConversationAssignedAgent",
			Handler:    _SmsApi_CreateSmsConversationAssignedAgent_Handler,
		},
		{
			MethodName: "ListSmsConversationAssignedAgents",
			Handler:    _SmsApi_ListSmsConversationAssignedAgents_Handler,
		},
		{
			MethodName: "GetSmsConversationAssignedAgentById",
			Handler:    _SmsApi_GetSmsConversationAssignedAgentById_Handler,
		},
		{
			MethodName: "ListInboundSmsTasksByGroupIds",
			Handler:    _SmsApi_ListInboundSmsTasksByGroupIds_Handler,
		},
		{
			MethodName: "StopAllOutboundSmsGroups",
			Handler:    _SmsApi_StopAllOutboundSmsGroups_Handler,
		},
		{
			MethodName: "StopAllInboundSmsGroups",
			Handler:    _SmsApi_StopAllInboundSmsGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v0alpha/smsapi.proto",
}
