// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1alpha1/agentsmith/service.proto

package agentsmith

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgentSmith_FollowAgent_FullMethodName = "/api.v1alpha1.agentsmith.AgentSmith/FollowAgent"
)

// AgentSmithClient is the client API for AgentSmith service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AgentSmith is the Public API for the AgentSmith service. This service provides the methods for public integrations
// to follow agents and/or create virtual agents.
type AgentSmithClient interface {
	// FollowAgent method find an agent identified by user_id or asm_session_id and return a stream of events
	// associated with the current session of the user and long as the session lives regardless if the agent is
	// using the omni interface or neo interface.
	// When the agent is in a voice session one of the first messages received will be AgentVoiceStartEvent that
	// contains a sip dial url that can be used to connect to the agent's voice session.
	FollowAgent(ctx context.Context, in *FollowAgentReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FollowAgentRes], error)
}

type agentSmithClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentSmithClient(cc grpc.ClientConnInterface) AgentSmithClient {
	return &agentSmithClient{cc}
}

func (c *agentSmithClient) FollowAgent(ctx context.Context, in *FollowAgentReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FollowAgentRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentSmith_ServiceDesc.Streams[0], AgentSmith_FollowAgent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FollowAgentReq, FollowAgentRes]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentSmith_FollowAgentClient = grpc.ServerStreamingClient[FollowAgentRes]

// AgentSmithServer is the server API for AgentSmith service.
// All implementations must embed UnimplementedAgentSmithServer
// for forward compatibility.
//
// AgentSmith is the Public API for the AgentSmith service. This service provides the methods for public integrations
// to follow agents and/or create virtual agents.
type AgentSmithServer interface {
	// FollowAgent method find an agent identified by user_id or asm_session_id and return a stream of events
	// associated with the current session of the user and long as the session lives regardless if the agent is
	// using the omni interface or neo interface.
	// When the agent is in a voice session one of the first messages received will be AgentVoiceStartEvent that
	// contains a sip dial url that can be used to connect to the agent's voice session.
	FollowAgent(*FollowAgentReq, grpc.ServerStreamingServer[FollowAgentRes]) error
	mustEmbedUnimplementedAgentSmithServer()
}

// UnimplementedAgentSmithServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentSmithServer struct{}

func (UnimplementedAgentSmithServer) FollowAgent(*FollowAgentReq, grpc.ServerStreamingServer[FollowAgentRes]) error {
	return status.Errorf(codes.Unimplemented, "method FollowAgent not implemented")
}
func (UnimplementedAgentSmithServer) mustEmbedUnimplementedAgentSmithServer() {}
func (UnimplementedAgentSmithServer) testEmbeddedByValue()                    {}

// UnsafeAgentSmithServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentSmithServer will
// result in compilation errors.
type UnsafeAgentSmithServer interface {
	mustEmbedUnimplementedAgentSmithServer()
}

func RegisterAgentSmithServer(s grpc.ServiceRegistrar, srv AgentSmithServer) {
	// If the following call pancis, it indicates UnimplementedAgentSmithServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentSmith_ServiceDesc, srv)
}

func _AgentSmith_FollowAgent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FollowAgentReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentSmithServer).FollowAgent(m, &grpc.GenericServerStream[FollowAgentReq, FollowAgentRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentSmith_FollowAgentServer = grpc.ServerStreamingServer[FollowAgentRes]

// AgentSmith_ServiceDesc is the grpc.ServiceDesc for AgentSmith service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentSmith_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.agentsmith.AgentSmith",
	HandlerType: (*AgentSmithServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FollowAgent",
			Handler:       _AgentSmith_FollowAgent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1alpha1/agentsmith/service.proto",
}
