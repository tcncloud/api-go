// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1alpha1/agentsmith/service.proto

package agentsmithconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	agentsmith "github.com/tcncloud/api-go/v1alpha1/agentsmith"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AgentSmithName is the fully-qualified name of the AgentSmith service.
	AgentSmithName = "api.v1alpha1.agentsmith.AgentSmith"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AgentSmithFollowAgentProcedure is the fully-qualified name of the AgentSmith's FollowAgent RPC.
	AgentSmithFollowAgentProcedure = "/api.v1alpha1.agentsmith.AgentSmith/FollowAgent"
)

// AgentSmithClient is a client for the api.v1alpha1.agentsmith.AgentSmith service.
type AgentSmithClient interface {
	// FollowAgent method find an agent identified by user_id or asm_session_id and return a stream of events
	// associated with the current session of the user and long as the session lives regardless if the agent is
	// using the omni interface or neo interface.
	// When the agent is in a voice session one of the first messages received will be AgentVoiceStartEvent that
	// contains a sip dial url that can be used to connect to the agent's voice session.
	FollowAgent(context.Context, *connect_go.Request[agentsmith.FollowAgentReq]) (*connect_go.ServerStreamForClient[agentsmith.FollowAgentRes], error)
}

// NewAgentSmithClient constructs a client for the api.v1alpha1.agentsmith.AgentSmith service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAgentSmithClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AgentSmithClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &agentSmithClient{
		followAgent: connect_go.NewClient[agentsmith.FollowAgentReq, agentsmith.FollowAgentRes](
			httpClient,
			baseURL+AgentSmithFollowAgentProcedure,
			opts...,
		),
	}
}

// agentSmithClient implements AgentSmithClient.
type agentSmithClient struct {
	followAgent *connect_go.Client[agentsmith.FollowAgentReq, agentsmith.FollowAgentRes]
}

// FollowAgent calls api.v1alpha1.agentsmith.AgentSmith.FollowAgent.
func (c *agentSmithClient) FollowAgent(ctx context.Context, req *connect_go.Request[agentsmith.FollowAgentReq]) (*connect_go.ServerStreamForClient[agentsmith.FollowAgentRes], error) {
	return c.followAgent.CallServerStream(ctx, req)
}

// AgentSmithHandler is an implementation of the api.v1alpha1.agentsmith.AgentSmith service.
type AgentSmithHandler interface {
	// FollowAgent method find an agent identified by user_id or asm_session_id and return a stream of events
	// associated with the current session of the user and long as the session lives regardless if the agent is
	// using the omni interface or neo interface.
	// When the agent is in a voice session one of the first messages received will be AgentVoiceStartEvent that
	// contains a sip dial url that can be used to connect to the agent's voice session.
	FollowAgent(context.Context, *connect_go.Request[agentsmith.FollowAgentReq], *connect_go.ServerStream[agentsmith.FollowAgentRes]) error
}

// NewAgentSmithHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAgentSmithHandler(svc AgentSmithHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(AgentSmithFollowAgentProcedure, connect_go.NewServerStreamHandler(
		AgentSmithFollowAgentProcedure,
		svc.FollowAgent,
		opts...,
	))
	return "/api.v1alpha1.agentsmith.AgentSmith/", mux
}

// UnimplementedAgentSmithHandler returns CodeUnimplemented from all methods.
type UnimplementedAgentSmithHandler struct{}

func (UnimplementedAgentSmithHandler) FollowAgent(context.Context, *connect_go.Request[agentsmith.FollowAgentReq], *connect_go.ServerStream[agentsmith.FollowAgentRes]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.agentsmith.AgentSmith.FollowAgent is not implemented"))
}
