// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1alpha1/tickets/service.proto

package ticketsconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	tickets "github.com/tcncloud/api-go/api/v1alpha1/tickets"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TicketsName is the fully-qualified name of the Tickets service.
	TicketsName = "api.v1alpha1.tickets.Tickets"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TicketsCreateTicketProcedure is the fully-qualified name of the Tickets's CreateTicket RPC.
	TicketsCreateTicketProcedure = "/api.v1alpha1.tickets.Tickets/CreateTicket"
	// TicketsEditTicketProcedure is the fully-qualified name of the Tickets's EditTicket RPC.
	TicketsEditTicketProcedure = "/api.v1alpha1.tickets.Tickets/EditTicket"
	// TicketsListTicketsProcedure is the fully-qualified name of the Tickets's ListTickets RPC.
	TicketsListTicketsProcedure = "/api.v1alpha1.tickets.Tickets/ListTickets"
	// TicketsAssignTicketProcedure is the fully-qualified name of the Tickets's AssignTicket RPC.
	TicketsAssignTicketProcedure = "/api.v1alpha1.tickets.Tickets/AssignTicket"
	// TicketsCloseTicketProcedure is the fully-qualified name of the Tickets's CloseTicket RPC.
	TicketsCloseTicketProcedure = "/api.v1alpha1.tickets.Tickets/CloseTicket"
	// TicketsViewTicketProcedure is the fully-qualified name of the Tickets's ViewTicket RPC.
	TicketsViewTicketProcedure = "/api.v1alpha1.tickets.Tickets/ViewTicket"
	// TicketsCreateCommentProcedure is the fully-qualified name of the Tickets's CreateComment RPC.
	TicketsCreateCommentProcedure = "/api.v1alpha1.tickets.Tickets/CreateComment"
	// TicketsEnableProjectProcedure is the fully-qualified name of the Tickets's EnableProject RPC.
	TicketsEnableProjectProcedure = "/api.v1alpha1.tickets.Tickets/EnableProject"
	// TicketsListEnabledProjectsProcedure is the fully-qualified name of the Tickets's
	// ListEnabledProjects RPC.
	TicketsListEnabledProjectsProcedure = "/api.v1alpha1.tickets.Tickets/ListEnabledProjects"
	// TicketsCreateSLAProcedure is the fully-qualified name of the Tickets's CreateSLA RPC.
	TicketsCreateSLAProcedure = "/api.v1alpha1.tickets.Tickets/CreateSLA"
	// TicketsListSLAProcedure is the fully-qualified name of the Tickets's ListSLA RPC.
	TicketsListSLAProcedure = "/api.v1alpha1.tickets.Tickets/ListSLA"
	// TicketsUpdateSLAProcedure is the fully-qualified name of the Tickets's UpdateSLA RPC.
	TicketsUpdateSLAProcedure = "/api.v1alpha1.tickets.Tickets/UpdateSLA"
	// TicketsListSLAConditionProcedure is the fully-qualified name of the Tickets's ListSLACondition
	// RPC.
	TicketsListSLAConditionProcedure = "/api.v1alpha1.tickets.Tickets/ListSLACondition"
	// TicketsReplyCommentProcedure is the fully-qualified name of the Tickets's ReplyComment RPC.
	TicketsReplyCommentProcedure = "/api.v1alpha1.tickets.Tickets/ReplyComment"
	// TicketsListTicketAuditLogProcedure is the fully-qualified name of the Tickets's
	// ListTicketAuditLog RPC.
	TicketsListTicketAuditLogProcedure = "/api.v1alpha1.tickets.Tickets/ListTicketAuditLog"
	// TicketsAssignSelfProcedure is the fully-qualified name of the Tickets's AssignSelf RPC.
	TicketsAssignSelfProcedure = "/api.v1alpha1.tickets.Tickets/AssignSelf"
	// TicketsEditMaskTicketProcedure is the fully-qualified name of the Tickets's EditMaskTicket RPC.
	TicketsEditMaskTicketProcedure = "/api.v1alpha1.tickets.Tickets/EditMaskTicket"
	// TicketsListAllocatedTicketsProcedure is the fully-qualified name of the Tickets's
	// ListAllocatedTickets RPC.
	TicketsListAllocatedTicketsProcedure = "/api.v1alpha1.tickets.Tickets/ListAllocatedTickets"
	// TicketsListAvailableAgentTicketsProcedure is the fully-qualified name of the Tickets's
	// ListAvailableAgentTickets RPC.
	TicketsListAvailableAgentTicketsProcedure = "/api.v1alpha1.tickets.Tickets/ListAvailableAgentTickets"
	// TicketsListSkillsProcedure is the fully-qualified name of the Tickets's ListSkills RPC.
	TicketsListSkillsProcedure = "/api.v1alpha1.tickets.Tickets/ListSkills"
	// TicketsListUsersProcedure is the fully-qualified name of the Tickets's ListUsers RPC.
	TicketsListUsersProcedure = "/api.v1alpha1.tickets.Tickets/ListUsers"
	// TicketsCloseTicketActionProcedure is the fully-qualified name of the Tickets's CloseTicketAction
	// RPC.
	TicketsCloseTicketActionProcedure = "/api.v1alpha1.tickets.Tickets/CloseTicketAction"
	// TicketsAssignTicketActionProcedure is the fully-qualified name of the Tickets's
	// AssignTicketAction RPC.
	TicketsAssignTicketActionProcedure = "/api.v1alpha1.tickets.Tickets/AssignTicketAction"
	// TicketsCreateTicketActionProcedure is the fully-qualified name of the Tickets's
	// CreateTicketAction RPC.
	TicketsCreateTicketActionProcedure = "/api.v1alpha1.tickets.Tickets/CreateTicketAction"
	// TicketsChangeTicketStatusProcedure is the fully-qualified name of the Tickets's
	// ChangeTicketStatus RPC.
	TicketsChangeTicketStatusProcedure = "/api.v1alpha1.tickets.Tickets/ChangeTicketStatus"
	// TicketsCreateTicketTemplateProcedure is the fully-qualified name of the Tickets's
	// CreateTicketTemplate RPC.
	TicketsCreateTicketTemplateProcedure = "/api.v1alpha1.tickets.Tickets/CreateTicketTemplate"
	// TicketsEditTicketTemplateProcedure is the fully-qualified name of the Tickets's
	// EditTicketTemplate RPC.
	TicketsEditTicketTemplateProcedure = "/api.v1alpha1.tickets.Tickets/EditTicketTemplate"
	// TicketsListTicketTemplateProcedure is the fully-qualified name of the Tickets's
	// ListTicketTemplate RPC.
	TicketsListTicketTemplateProcedure = "/api.v1alpha1.tickets.Tickets/ListTicketTemplate"
	// TicketsAssignTicketTemplateProcedure is the fully-qualified name of the Tickets's
	// AssignTicketTemplate RPC.
	TicketsAssignTicketTemplateProcedure = "/api.v1alpha1.tickets.Tickets/AssignTicketTemplate"
	// TicketsGetAllActionTypeProcedure is the fully-qualified name of the Tickets's GetAllActionType
	// RPC.
	TicketsGetAllActionTypeProcedure = "/api.v1alpha1.tickets.Tickets/GetAllActionType"
	// TicketsGetPhoneNumberTypeProcedure is the fully-qualified name of the Tickets's
	// GetPhoneNumberType RPC.
	TicketsGetPhoneNumberTypeProcedure = "/api.v1alpha1.tickets.Tickets/GetPhoneNumberType"
)

// TicketsClient is a client for the api.v1alpha1.tickets.Tickets service.
type TicketsClient interface {
	// Public Method to create a ticket.
	CreateTicket(context.Context, *connect_go.Request[tickets.CreateTicketReq]) (*connect_go.Response[tickets.CreateTicketRes], error)
	// Public Method to edit a ticket.
	EditTicket(context.Context, *connect_go.Request[tickets.EditTicketReq]) (*connect_go.Response[tickets.EditTicketRes], error)
	// Public method to list tickets
	ListTickets(context.Context, *connect_go.Request[tickets.ListTicketsReq]) (*connect_go.Response[tickets.ListTicketsRes], error)
	// Public method to assign ticket
	// Would be deprecated
	AssignTicket(context.Context, *connect_go.Request[tickets.AssignTicketReq]) (*connect_go.Response[tickets.AssignTicketRes], error)
	// Public Method to Close a ticket
	// Any agent can close the ticket. No BE validation required
	CloseTicket(context.Context, *connect_go.Request[tickets.CloseTicketReq]) (*connect_go.Response[tickets.CloseTicketRes], error)
	// Public method to view ticket
	ViewTicket(context.Context, *connect_go.Request[tickets.ViewTicketReq]) (*connect_go.Response[tickets.ViewTicketRes], error)
	// Public Method to create a Comment.
	CreateComment(context.Context, *connect_go.Request[tickets.CreateCommentReq]) (*connect_go.Response[tickets.CreateCommentRes], error)
	// Public method to Enable Project for Ticketing system
	EnableProject(context.Context, *connect_go.Request[tickets.EnableProjectReq]) (*connect_go.Response[tickets.EnableProjectRes], error)
	// Public method to List projects enabled for Ticketing system
	ListEnabledProjects(context.Context, *connect_go.Request[tickets.ListEnabledProjectsReq]) (*connect_go.Response[tickets.ListEnabledProjectsRes], error)
	// Public Method to create a sla.
	CreateSLA(context.Context, *connect_go.Request[tickets.CreateSlaReq]) (*connect_go.Response[tickets.CreateSlaRes], error)
	// Public method to list sla
	ListSLA(context.Context, *connect_go.Request[tickets.ListSlaReq]) (*connect_go.Response[tickets.ListSlaRes], error)
	// Public method to update sla
	UpdateSLA(context.Context, *connect_go.Request[tickets.UpdateSlaReq]) (*connect_go.Response[tickets.UpdateSlaRes], error)
	// Public method to list sla_condition
	ListSLACondition(context.Context, *connect_go.Request[tickets.ListSlaConditionReq]) (*connect_go.Response[tickets.ListSlaConditionRes], error)
	// Public method to list sla_condition
	ReplyComment(context.Context, *connect_go.Request[tickets.ReplyCommentReq]) (*connect_go.Response[tickets.ReplyCommentRes], error)
	// Public method to List audit log for Ticketing system
	ListTicketAuditLog(context.Context, *connect_go.Request[tickets.ListTicketAuditLogReq]) (*connect_go.Response[tickets.ListTicketAuditLogRes], error)
	// Public method to assign a ticket
	AssignSelf(context.Context, *connect_go.Request[tickets.CreateSelfAssignReq]) (*connect_go.Response[tickets.CreateSelfAssignRes], error)
	// Public Method to edit a ticket.
	// EditTicket would be deprecated
	EditMaskTicket(context.Context, *connect_go.Request[tickets.EditMaskTicketReq]) (*connect_go.Response[tickets.EditMaskTicketRes], error)
	// Deprecated: do not use.
	ListAllocatedTickets(context.Context, *connect_go.Request[tickets.ListAllocatedTicketReq]) (*connect_go.Response[tickets.ListAllocatedTicketRes], error)
	// public method - to return list of available tickets to pick for an Agent
	ListAvailableAgentTickets(context.Context, *connect_go.Request[tickets.ListAvailableAgentTicketsRequest]) (*connect_go.Response[tickets.ListAvailableAgentTicketsResponse], error)
	// public method to fetch list of skills for a tickets user
	ListSkills(context.Context, *connect_go.Request[tickets.ListSkillsRequest]) (*connect_go.Response[tickets.ListSkillsResponse], error)
	// public method to fetch list of users for a tickets user
	ListUsers(context.Context, *connect_go.Request[tickets.ListUsersRequest]) (*connect_go.Response[tickets.ListUsersResponse], error)
	// Any agent can close the ticket. No BE validation required
	CloseTicketAction(context.Context, *connect_go.Request[tickets.CloseTicketActionRequest]) (*connect_go.Response[tickets.CloseTicketActionResponse], error)
	// Public method to assign a ticket action
	AssignTicketAction(context.Context, *connect_go.Request[tickets.AssignTicketActionRequest]) (*connect_go.Response[tickets.AssignTicketActionResponse], error)
	// Public method to assign a ticket
	CreateTicketAction(context.Context, *connect_go.Request[tickets.CreateTicketActionRequest]) (*connect_go.Response[tickets.CreateTicketActionResponse], error)
	// Public method to change the Status of a ticket
	ChangeTicketStatus(context.Context, *connect_go.Request[tickets.ChangeTicketStatusRequest]) (*connect_go.Response[tickets.ChangeTicketStatusResponse], error)
	// Public method to create a Ticket Template
	CreateTicketTemplate(context.Context, *connect_go.Request[tickets.CreateTicketTemplateRequest]) (*connect_go.Response[tickets.CreateTicketTemplateResponse], error)
	// Public method to Edit a Ticket Template
	EditTicketTemplate(context.Context, *connect_go.Request[tickets.EditTicketTemplateRequest]) (*connect_go.Response[tickets.EditTicketTemplateResponse], error)
	// Public method to all Ticket Templates
	ListTicketTemplate(context.Context, *connect_go.Request[tickets.ListTicketTemplateRequest]) (*connect_go.Response[tickets.ListTicketTemplateResponse], error)
	// Public method to assign a Template To a Project
	AssignTicketTemplate(context.Context, *connect_go.Request[tickets.AssignProjectTemplateRequest]) (*connect_go.Response[tickets.AssignProjectTemplateResponse], error)
	// Public method to list all Action Types
	GetAllActionType(context.Context, *connect_go.Request[tickets.GetActionTypeRequest]) (*connect_go.Response[tickets.GetActionTypeResponse], error)
	// Public method to list all Action Types
	GetPhoneNumberType(context.Context, *connect_go.Request[tickets.GetPhoneNumberTypeRequest]) (*connect_go.Response[tickets.GetPhoneNumberTypeResponse], error)
}

// NewTicketsClient constructs a client for the api.v1alpha1.tickets.Tickets service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTicketsClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TicketsClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &ticketsClient{
		createTicket: connect_go.NewClient[tickets.CreateTicketReq, tickets.CreateTicketRes](
			httpClient,
			baseURL+TicketsCreateTicketProcedure,
			opts...,
		),
		editTicket: connect_go.NewClient[tickets.EditTicketReq, tickets.EditTicketRes](
			httpClient,
			baseURL+TicketsEditTicketProcedure,
			opts...,
		),
		listTickets: connect_go.NewClient[tickets.ListTicketsReq, tickets.ListTicketsRes](
			httpClient,
			baseURL+TicketsListTicketsProcedure,
			opts...,
		),
		assignTicket: connect_go.NewClient[tickets.AssignTicketReq, tickets.AssignTicketRes](
			httpClient,
			baseURL+TicketsAssignTicketProcedure,
			opts...,
		),
		closeTicket: connect_go.NewClient[tickets.CloseTicketReq, tickets.CloseTicketRes](
			httpClient,
			baseURL+TicketsCloseTicketProcedure,
			opts...,
		),
		viewTicket: connect_go.NewClient[tickets.ViewTicketReq, tickets.ViewTicketRes](
			httpClient,
			baseURL+TicketsViewTicketProcedure,
			opts...,
		),
		createComment: connect_go.NewClient[tickets.CreateCommentReq, tickets.CreateCommentRes](
			httpClient,
			baseURL+TicketsCreateCommentProcedure,
			opts...,
		),
		enableProject: connect_go.NewClient[tickets.EnableProjectReq, tickets.EnableProjectRes](
			httpClient,
			baseURL+TicketsEnableProjectProcedure,
			opts...,
		),
		listEnabledProjects: connect_go.NewClient[tickets.ListEnabledProjectsReq, tickets.ListEnabledProjectsRes](
			httpClient,
			baseURL+TicketsListEnabledProjectsProcedure,
			opts...,
		),
		createSLA: connect_go.NewClient[tickets.CreateSlaReq, tickets.CreateSlaRes](
			httpClient,
			baseURL+TicketsCreateSLAProcedure,
			opts...,
		),
		listSLA: connect_go.NewClient[tickets.ListSlaReq, tickets.ListSlaRes](
			httpClient,
			baseURL+TicketsListSLAProcedure,
			opts...,
		),
		updateSLA: connect_go.NewClient[tickets.UpdateSlaReq, tickets.UpdateSlaRes](
			httpClient,
			baseURL+TicketsUpdateSLAProcedure,
			opts...,
		),
		listSLACondition: connect_go.NewClient[tickets.ListSlaConditionReq, tickets.ListSlaConditionRes](
			httpClient,
			baseURL+TicketsListSLAConditionProcedure,
			opts...,
		),
		replyComment: connect_go.NewClient[tickets.ReplyCommentReq, tickets.ReplyCommentRes](
			httpClient,
			baseURL+TicketsReplyCommentProcedure,
			opts...,
		),
		listTicketAuditLog: connect_go.NewClient[tickets.ListTicketAuditLogReq, tickets.ListTicketAuditLogRes](
			httpClient,
			baseURL+TicketsListTicketAuditLogProcedure,
			opts...,
		),
		assignSelf: connect_go.NewClient[tickets.CreateSelfAssignReq, tickets.CreateSelfAssignRes](
			httpClient,
			baseURL+TicketsAssignSelfProcedure,
			opts...,
		),
		editMaskTicket: connect_go.NewClient[tickets.EditMaskTicketReq, tickets.EditMaskTicketRes](
			httpClient,
			baseURL+TicketsEditMaskTicketProcedure,
			opts...,
		),
		listAllocatedTickets: connect_go.NewClient[tickets.ListAllocatedTicketReq, tickets.ListAllocatedTicketRes](
			httpClient,
			baseURL+TicketsListAllocatedTicketsProcedure,
			opts...,
		),
		listAvailableAgentTickets: connect_go.NewClient[tickets.ListAvailableAgentTicketsRequest, tickets.ListAvailableAgentTicketsResponse](
			httpClient,
			baseURL+TicketsListAvailableAgentTicketsProcedure,
			opts...,
		),
		listSkills: connect_go.NewClient[tickets.ListSkillsRequest, tickets.ListSkillsResponse](
			httpClient,
			baseURL+TicketsListSkillsProcedure,
			opts...,
		),
		listUsers: connect_go.NewClient[tickets.ListUsersRequest, tickets.ListUsersResponse](
			httpClient,
			baseURL+TicketsListUsersProcedure,
			opts...,
		),
		closeTicketAction: connect_go.NewClient[tickets.CloseTicketActionRequest, tickets.CloseTicketActionResponse](
			httpClient,
			baseURL+TicketsCloseTicketActionProcedure,
			opts...,
		),
		assignTicketAction: connect_go.NewClient[tickets.AssignTicketActionRequest, tickets.AssignTicketActionResponse](
			httpClient,
			baseURL+TicketsAssignTicketActionProcedure,
			opts...,
		),
		createTicketAction: connect_go.NewClient[tickets.CreateTicketActionRequest, tickets.CreateTicketActionResponse](
			httpClient,
			baseURL+TicketsCreateTicketActionProcedure,
			opts...,
		),
		changeTicketStatus: connect_go.NewClient[tickets.ChangeTicketStatusRequest, tickets.ChangeTicketStatusResponse](
			httpClient,
			baseURL+TicketsChangeTicketStatusProcedure,
			opts...,
		),
		createTicketTemplate: connect_go.NewClient[tickets.CreateTicketTemplateRequest, tickets.CreateTicketTemplateResponse](
			httpClient,
			baseURL+TicketsCreateTicketTemplateProcedure,
			opts...,
		),
		editTicketTemplate: connect_go.NewClient[tickets.EditTicketTemplateRequest, tickets.EditTicketTemplateResponse](
			httpClient,
			baseURL+TicketsEditTicketTemplateProcedure,
			opts...,
		),
		listTicketTemplate: connect_go.NewClient[tickets.ListTicketTemplateRequest, tickets.ListTicketTemplateResponse](
			httpClient,
			baseURL+TicketsListTicketTemplateProcedure,
			opts...,
		),
		assignTicketTemplate: connect_go.NewClient[tickets.AssignProjectTemplateRequest, tickets.AssignProjectTemplateResponse](
			httpClient,
			baseURL+TicketsAssignTicketTemplateProcedure,
			opts...,
		),
		getAllActionType: connect_go.NewClient[tickets.GetActionTypeRequest, tickets.GetActionTypeResponse](
			httpClient,
			baseURL+TicketsGetAllActionTypeProcedure,
			opts...,
		),
		getPhoneNumberType: connect_go.NewClient[tickets.GetPhoneNumberTypeRequest, tickets.GetPhoneNumberTypeResponse](
			httpClient,
			baseURL+TicketsGetPhoneNumberTypeProcedure,
			opts...,
		),
	}
}

// ticketsClient implements TicketsClient.
type ticketsClient struct {
	createTicket              *connect_go.Client[tickets.CreateTicketReq, tickets.CreateTicketRes]
	editTicket                *connect_go.Client[tickets.EditTicketReq, tickets.EditTicketRes]
	listTickets               *connect_go.Client[tickets.ListTicketsReq, tickets.ListTicketsRes]
	assignTicket              *connect_go.Client[tickets.AssignTicketReq, tickets.AssignTicketRes]
	closeTicket               *connect_go.Client[tickets.CloseTicketReq, tickets.CloseTicketRes]
	viewTicket                *connect_go.Client[tickets.ViewTicketReq, tickets.ViewTicketRes]
	createComment             *connect_go.Client[tickets.CreateCommentReq, tickets.CreateCommentRes]
	enableProject             *connect_go.Client[tickets.EnableProjectReq, tickets.EnableProjectRes]
	listEnabledProjects       *connect_go.Client[tickets.ListEnabledProjectsReq, tickets.ListEnabledProjectsRes]
	createSLA                 *connect_go.Client[tickets.CreateSlaReq, tickets.CreateSlaRes]
	listSLA                   *connect_go.Client[tickets.ListSlaReq, tickets.ListSlaRes]
	updateSLA                 *connect_go.Client[tickets.UpdateSlaReq, tickets.UpdateSlaRes]
	listSLACondition          *connect_go.Client[tickets.ListSlaConditionReq, tickets.ListSlaConditionRes]
	replyComment              *connect_go.Client[tickets.ReplyCommentReq, tickets.ReplyCommentRes]
	listTicketAuditLog        *connect_go.Client[tickets.ListTicketAuditLogReq, tickets.ListTicketAuditLogRes]
	assignSelf                *connect_go.Client[tickets.CreateSelfAssignReq, tickets.CreateSelfAssignRes]
	editMaskTicket            *connect_go.Client[tickets.EditMaskTicketReq, tickets.EditMaskTicketRes]
	listAllocatedTickets      *connect_go.Client[tickets.ListAllocatedTicketReq, tickets.ListAllocatedTicketRes]
	listAvailableAgentTickets *connect_go.Client[tickets.ListAvailableAgentTicketsRequest, tickets.ListAvailableAgentTicketsResponse]
	listSkills                *connect_go.Client[tickets.ListSkillsRequest, tickets.ListSkillsResponse]
	listUsers                 *connect_go.Client[tickets.ListUsersRequest, tickets.ListUsersResponse]
	closeTicketAction         *connect_go.Client[tickets.CloseTicketActionRequest, tickets.CloseTicketActionResponse]
	assignTicketAction        *connect_go.Client[tickets.AssignTicketActionRequest, tickets.AssignTicketActionResponse]
	createTicketAction        *connect_go.Client[tickets.CreateTicketActionRequest, tickets.CreateTicketActionResponse]
	changeTicketStatus        *connect_go.Client[tickets.ChangeTicketStatusRequest, tickets.ChangeTicketStatusResponse]
	createTicketTemplate      *connect_go.Client[tickets.CreateTicketTemplateRequest, tickets.CreateTicketTemplateResponse]
	editTicketTemplate        *connect_go.Client[tickets.EditTicketTemplateRequest, tickets.EditTicketTemplateResponse]
	listTicketTemplate        *connect_go.Client[tickets.ListTicketTemplateRequest, tickets.ListTicketTemplateResponse]
	assignTicketTemplate      *connect_go.Client[tickets.AssignProjectTemplateRequest, tickets.AssignProjectTemplateResponse]
	getAllActionType          *connect_go.Client[tickets.GetActionTypeRequest, tickets.GetActionTypeResponse]
	getPhoneNumberType        *connect_go.Client[tickets.GetPhoneNumberTypeRequest, tickets.GetPhoneNumberTypeResponse]
}

// CreateTicket calls api.v1alpha1.tickets.Tickets.CreateTicket.
func (c *ticketsClient) CreateTicket(ctx context.Context, req *connect_go.Request[tickets.CreateTicketReq]) (*connect_go.Response[tickets.CreateTicketRes], error) {
	return c.createTicket.CallUnary(ctx, req)
}

// EditTicket calls api.v1alpha1.tickets.Tickets.EditTicket.
func (c *ticketsClient) EditTicket(ctx context.Context, req *connect_go.Request[tickets.EditTicketReq]) (*connect_go.Response[tickets.EditTicketRes], error) {
	return c.editTicket.CallUnary(ctx, req)
}

// ListTickets calls api.v1alpha1.tickets.Tickets.ListTickets.
func (c *ticketsClient) ListTickets(ctx context.Context, req *connect_go.Request[tickets.ListTicketsReq]) (*connect_go.Response[tickets.ListTicketsRes], error) {
	return c.listTickets.CallUnary(ctx, req)
}

// AssignTicket calls api.v1alpha1.tickets.Tickets.AssignTicket.
func (c *ticketsClient) AssignTicket(ctx context.Context, req *connect_go.Request[tickets.AssignTicketReq]) (*connect_go.Response[tickets.AssignTicketRes], error) {
	return c.assignTicket.CallUnary(ctx, req)
}

// CloseTicket calls api.v1alpha1.tickets.Tickets.CloseTicket.
func (c *ticketsClient) CloseTicket(ctx context.Context, req *connect_go.Request[tickets.CloseTicketReq]) (*connect_go.Response[tickets.CloseTicketRes], error) {
	return c.closeTicket.CallUnary(ctx, req)
}

// ViewTicket calls api.v1alpha1.tickets.Tickets.ViewTicket.
func (c *ticketsClient) ViewTicket(ctx context.Context, req *connect_go.Request[tickets.ViewTicketReq]) (*connect_go.Response[tickets.ViewTicketRes], error) {
	return c.viewTicket.CallUnary(ctx, req)
}

// CreateComment calls api.v1alpha1.tickets.Tickets.CreateComment.
func (c *ticketsClient) CreateComment(ctx context.Context, req *connect_go.Request[tickets.CreateCommentReq]) (*connect_go.Response[tickets.CreateCommentRes], error) {
	return c.createComment.CallUnary(ctx, req)
}

// EnableProject calls api.v1alpha1.tickets.Tickets.EnableProject.
func (c *ticketsClient) EnableProject(ctx context.Context, req *connect_go.Request[tickets.EnableProjectReq]) (*connect_go.Response[tickets.EnableProjectRes], error) {
	return c.enableProject.CallUnary(ctx, req)
}

// ListEnabledProjects calls api.v1alpha1.tickets.Tickets.ListEnabledProjects.
func (c *ticketsClient) ListEnabledProjects(ctx context.Context, req *connect_go.Request[tickets.ListEnabledProjectsReq]) (*connect_go.Response[tickets.ListEnabledProjectsRes], error) {
	return c.listEnabledProjects.CallUnary(ctx, req)
}

// CreateSLA calls api.v1alpha1.tickets.Tickets.CreateSLA.
func (c *ticketsClient) CreateSLA(ctx context.Context, req *connect_go.Request[tickets.CreateSlaReq]) (*connect_go.Response[tickets.CreateSlaRes], error) {
	return c.createSLA.CallUnary(ctx, req)
}

// ListSLA calls api.v1alpha1.tickets.Tickets.ListSLA.
func (c *ticketsClient) ListSLA(ctx context.Context, req *connect_go.Request[tickets.ListSlaReq]) (*connect_go.Response[tickets.ListSlaRes], error) {
	return c.listSLA.CallUnary(ctx, req)
}

// UpdateSLA calls api.v1alpha1.tickets.Tickets.UpdateSLA.
func (c *ticketsClient) UpdateSLA(ctx context.Context, req *connect_go.Request[tickets.UpdateSlaReq]) (*connect_go.Response[tickets.UpdateSlaRes], error) {
	return c.updateSLA.CallUnary(ctx, req)
}

// ListSLACondition calls api.v1alpha1.tickets.Tickets.ListSLACondition.
func (c *ticketsClient) ListSLACondition(ctx context.Context, req *connect_go.Request[tickets.ListSlaConditionReq]) (*connect_go.Response[tickets.ListSlaConditionRes], error) {
	return c.listSLACondition.CallUnary(ctx, req)
}

// ReplyComment calls api.v1alpha1.tickets.Tickets.ReplyComment.
func (c *ticketsClient) ReplyComment(ctx context.Context, req *connect_go.Request[tickets.ReplyCommentReq]) (*connect_go.Response[tickets.ReplyCommentRes], error) {
	return c.replyComment.CallUnary(ctx, req)
}

// ListTicketAuditLog calls api.v1alpha1.tickets.Tickets.ListTicketAuditLog.
func (c *ticketsClient) ListTicketAuditLog(ctx context.Context, req *connect_go.Request[tickets.ListTicketAuditLogReq]) (*connect_go.Response[tickets.ListTicketAuditLogRes], error) {
	return c.listTicketAuditLog.CallUnary(ctx, req)
}

// AssignSelf calls api.v1alpha1.tickets.Tickets.AssignSelf.
func (c *ticketsClient) AssignSelf(ctx context.Context, req *connect_go.Request[tickets.CreateSelfAssignReq]) (*connect_go.Response[tickets.CreateSelfAssignRes], error) {
	return c.assignSelf.CallUnary(ctx, req)
}

// EditMaskTicket calls api.v1alpha1.tickets.Tickets.EditMaskTicket.
func (c *ticketsClient) EditMaskTicket(ctx context.Context, req *connect_go.Request[tickets.EditMaskTicketReq]) (*connect_go.Response[tickets.EditMaskTicketRes], error) {
	return c.editMaskTicket.CallUnary(ctx, req)
}

// ListAllocatedTickets calls api.v1alpha1.tickets.Tickets.ListAllocatedTickets.
//
// Deprecated: do not use.
func (c *ticketsClient) ListAllocatedTickets(ctx context.Context, req *connect_go.Request[tickets.ListAllocatedTicketReq]) (*connect_go.Response[tickets.ListAllocatedTicketRes], error) {
	return c.listAllocatedTickets.CallUnary(ctx, req)
}

// ListAvailableAgentTickets calls api.v1alpha1.tickets.Tickets.ListAvailableAgentTickets.
func (c *ticketsClient) ListAvailableAgentTickets(ctx context.Context, req *connect_go.Request[tickets.ListAvailableAgentTicketsRequest]) (*connect_go.Response[tickets.ListAvailableAgentTicketsResponse], error) {
	return c.listAvailableAgentTickets.CallUnary(ctx, req)
}

// ListSkills calls api.v1alpha1.tickets.Tickets.ListSkills.
func (c *ticketsClient) ListSkills(ctx context.Context, req *connect_go.Request[tickets.ListSkillsRequest]) (*connect_go.Response[tickets.ListSkillsResponse], error) {
	return c.listSkills.CallUnary(ctx, req)
}

// ListUsers calls api.v1alpha1.tickets.Tickets.ListUsers.
func (c *ticketsClient) ListUsers(ctx context.Context, req *connect_go.Request[tickets.ListUsersRequest]) (*connect_go.Response[tickets.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// CloseTicketAction calls api.v1alpha1.tickets.Tickets.CloseTicketAction.
func (c *ticketsClient) CloseTicketAction(ctx context.Context, req *connect_go.Request[tickets.CloseTicketActionRequest]) (*connect_go.Response[tickets.CloseTicketActionResponse], error) {
	return c.closeTicketAction.CallUnary(ctx, req)
}

// AssignTicketAction calls api.v1alpha1.tickets.Tickets.AssignTicketAction.
func (c *ticketsClient) AssignTicketAction(ctx context.Context, req *connect_go.Request[tickets.AssignTicketActionRequest]) (*connect_go.Response[tickets.AssignTicketActionResponse], error) {
	return c.assignTicketAction.CallUnary(ctx, req)
}

// CreateTicketAction calls api.v1alpha1.tickets.Tickets.CreateTicketAction.
func (c *ticketsClient) CreateTicketAction(ctx context.Context, req *connect_go.Request[tickets.CreateTicketActionRequest]) (*connect_go.Response[tickets.CreateTicketActionResponse], error) {
	return c.createTicketAction.CallUnary(ctx, req)
}

// ChangeTicketStatus calls api.v1alpha1.tickets.Tickets.ChangeTicketStatus.
func (c *ticketsClient) ChangeTicketStatus(ctx context.Context, req *connect_go.Request[tickets.ChangeTicketStatusRequest]) (*connect_go.Response[tickets.ChangeTicketStatusResponse], error) {
	return c.changeTicketStatus.CallUnary(ctx, req)
}

// CreateTicketTemplate calls api.v1alpha1.tickets.Tickets.CreateTicketTemplate.
func (c *ticketsClient) CreateTicketTemplate(ctx context.Context, req *connect_go.Request[tickets.CreateTicketTemplateRequest]) (*connect_go.Response[tickets.CreateTicketTemplateResponse], error) {
	return c.createTicketTemplate.CallUnary(ctx, req)
}

// EditTicketTemplate calls api.v1alpha1.tickets.Tickets.EditTicketTemplate.
func (c *ticketsClient) EditTicketTemplate(ctx context.Context, req *connect_go.Request[tickets.EditTicketTemplateRequest]) (*connect_go.Response[tickets.EditTicketTemplateResponse], error) {
	return c.editTicketTemplate.CallUnary(ctx, req)
}

// ListTicketTemplate calls api.v1alpha1.tickets.Tickets.ListTicketTemplate.
func (c *ticketsClient) ListTicketTemplate(ctx context.Context, req *connect_go.Request[tickets.ListTicketTemplateRequest]) (*connect_go.Response[tickets.ListTicketTemplateResponse], error) {
	return c.listTicketTemplate.CallUnary(ctx, req)
}

// AssignTicketTemplate calls api.v1alpha1.tickets.Tickets.AssignTicketTemplate.
func (c *ticketsClient) AssignTicketTemplate(ctx context.Context, req *connect_go.Request[tickets.AssignProjectTemplateRequest]) (*connect_go.Response[tickets.AssignProjectTemplateResponse], error) {
	return c.assignTicketTemplate.CallUnary(ctx, req)
}

// GetAllActionType calls api.v1alpha1.tickets.Tickets.GetAllActionType.
func (c *ticketsClient) GetAllActionType(ctx context.Context, req *connect_go.Request[tickets.GetActionTypeRequest]) (*connect_go.Response[tickets.GetActionTypeResponse], error) {
	return c.getAllActionType.CallUnary(ctx, req)
}

// GetPhoneNumberType calls api.v1alpha1.tickets.Tickets.GetPhoneNumberType.
func (c *ticketsClient) GetPhoneNumberType(ctx context.Context, req *connect_go.Request[tickets.GetPhoneNumberTypeRequest]) (*connect_go.Response[tickets.GetPhoneNumberTypeResponse], error) {
	return c.getPhoneNumberType.CallUnary(ctx, req)
}

// TicketsHandler is an implementation of the api.v1alpha1.tickets.Tickets service.
type TicketsHandler interface {
	// Public Method to create a ticket.
	CreateTicket(context.Context, *connect_go.Request[tickets.CreateTicketReq]) (*connect_go.Response[tickets.CreateTicketRes], error)
	// Public Method to edit a ticket.
	EditTicket(context.Context, *connect_go.Request[tickets.EditTicketReq]) (*connect_go.Response[tickets.EditTicketRes], error)
	// Public method to list tickets
	ListTickets(context.Context, *connect_go.Request[tickets.ListTicketsReq]) (*connect_go.Response[tickets.ListTicketsRes], error)
	// Public method to assign ticket
	// Would be deprecated
	AssignTicket(context.Context, *connect_go.Request[tickets.AssignTicketReq]) (*connect_go.Response[tickets.AssignTicketRes], error)
	// Public Method to Close a ticket
	// Any agent can close the ticket. No BE validation required
	CloseTicket(context.Context, *connect_go.Request[tickets.CloseTicketReq]) (*connect_go.Response[tickets.CloseTicketRes], error)
	// Public method to view ticket
	ViewTicket(context.Context, *connect_go.Request[tickets.ViewTicketReq]) (*connect_go.Response[tickets.ViewTicketRes], error)
	// Public Method to create a Comment.
	CreateComment(context.Context, *connect_go.Request[tickets.CreateCommentReq]) (*connect_go.Response[tickets.CreateCommentRes], error)
	// Public method to Enable Project for Ticketing system
	EnableProject(context.Context, *connect_go.Request[tickets.EnableProjectReq]) (*connect_go.Response[tickets.EnableProjectRes], error)
	// Public method to List projects enabled for Ticketing system
	ListEnabledProjects(context.Context, *connect_go.Request[tickets.ListEnabledProjectsReq]) (*connect_go.Response[tickets.ListEnabledProjectsRes], error)
	// Public Method to create a sla.
	CreateSLA(context.Context, *connect_go.Request[tickets.CreateSlaReq]) (*connect_go.Response[tickets.CreateSlaRes], error)
	// Public method to list sla
	ListSLA(context.Context, *connect_go.Request[tickets.ListSlaReq]) (*connect_go.Response[tickets.ListSlaRes], error)
	// Public method to update sla
	UpdateSLA(context.Context, *connect_go.Request[tickets.UpdateSlaReq]) (*connect_go.Response[tickets.UpdateSlaRes], error)
	// Public method to list sla_condition
	ListSLACondition(context.Context, *connect_go.Request[tickets.ListSlaConditionReq]) (*connect_go.Response[tickets.ListSlaConditionRes], error)
	// Public method to list sla_condition
	ReplyComment(context.Context, *connect_go.Request[tickets.ReplyCommentReq]) (*connect_go.Response[tickets.ReplyCommentRes], error)
	// Public method to List audit log for Ticketing system
	ListTicketAuditLog(context.Context, *connect_go.Request[tickets.ListTicketAuditLogReq]) (*connect_go.Response[tickets.ListTicketAuditLogRes], error)
	// Public method to assign a ticket
	AssignSelf(context.Context, *connect_go.Request[tickets.CreateSelfAssignReq]) (*connect_go.Response[tickets.CreateSelfAssignRes], error)
	// Public Method to edit a ticket.
	// EditTicket would be deprecated
	EditMaskTicket(context.Context, *connect_go.Request[tickets.EditMaskTicketReq]) (*connect_go.Response[tickets.EditMaskTicketRes], error)
	// Deprecated: do not use.
	ListAllocatedTickets(context.Context, *connect_go.Request[tickets.ListAllocatedTicketReq]) (*connect_go.Response[tickets.ListAllocatedTicketRes], error)
	// public method - to return list of available tickets to pick for an Agent
	ListAvailableAgentTickets(context.Context, *connect_go.Request[tickets.ListAvailableAgentTicketsRequest]) (*connect_go.Response[tickets.ListAvailableAgentTicketsResponse], error)
	// public method to fetch list of skills for a tickets user
	ListSkills(context.Context, *connect_go.Request[tickets.ListSkillsRequest]) (*connect_go.Response[tickets.ListSkillsResponse], error)
	// public method to fetch list of users for a tickets user
	ListUsers(context.Context, *connect_go.Request[tickets.ListUsersRequest]) (*connect_go.Response[tickets.ListUsersResponse], error)
	// Any agent can close the ticket. No BE validation required
	CloseTicketAction(context.Context, *connect_go.Request[tickets.CloseTicketActionRequest]) (*connect_go.Response[tickets.CloseTicketActionResponse], error)
	// Public method to assign a ticket action
	AssignTicketAction(context.Context, *connect_go.Request[tickets.AssignTicketActionRequest]) (*connect_go.Response[tickets.AssignTicketActionResponse], error)
	// Public method to assign a ticket
	CreateTicketAction(context.Context, *connect_go.Request[tickets.CreateTicketActionRequest]) (*connect_go.Response[tickets.CreateTicketActionResponse], error)
	// Public method to change the Status of a ticket
	ChangeTicketStatus(context.Context, *connect_go.Request[tickets.ChangeTicketStatusRequest]) (*connect_go.Response[tickets.ChangeTicketStatusResponse], error)
	// Public method to create a Ticket Template
	CreateTicketTemplate(context.Context, *connect_go.Request[tickets.CreateTicketTemplateRequest]) (*connect_go.Response[tickets.CreateTicketTemplateResponse], error)
	// Public method to Edit a Ticket Template
	EditTicketTemplate(context.Context, *connect_go.Request[tickets.EditTicketTemplateRequest]) (*connect_go.Response[tickets.EditTicketTemplateResponse], error)
	// Public method to all Ticket Templates
	ListTicketTemplate(context.Context, *connect_go.Request[tickets.ListTicketTemplateRequest]) (*connect_go.Response[tickets.ListTicketTemplateResponse], error)
	// Public method to assign a Template To a Project
	AssignTicketTemplate(context.Context, *connect_go.Request[tickets.AssignProjectTemplateRequest]) (*connect_go.Response[tickets.AssignProjectTemplateResponse], error)
	// Public method to list all Action Types
	GetAllActionType(context.Context, *connect_go.Request[tickets.GetActionTypeRequest]) (*connect_go.Response[tickets.GetActionTypeResponse], error)
	// Public method to list all Action Types
	GetPhoneNumberType(context.Context, *connect_go.Request[tickets.GetPhoneNumberTypeRequest]) (*connect_go.Response[tickets.GetPhoneNumberTypeResponse], error)
}

// NewTicketsHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTicketsHandler(svc TicketsHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	ticketsCreateTicketHandler := connect_go.NewUnaryHandler(
		TicketsCreateTicketProcedure,
		svc.CreateTicket,
		opts...,
	)
	ticketsEditTicketHandler := connect_go.NewUnaryHandler(
		TicketsEditTicketProcedure,
		svc.EditTicket,
		opts...,
	)
	ticketsListTicketsHandler := connect_go.NewUnaryHandler(
		TicketsListTicketsProcedure,
		svc.ListTickets,
		opts...,
	)
	ticketsAssignTicketHandler := connect_go.NewUnaryHandler(
		TicketsAssignTicketProcedure,
		svc.AssignTicket,
		opts...,
	)
	ticketsCloseTicketHandler := connect_go.NewUnaryHandler(
		TicketsCloseTicketProcedure,
		svc.CloseTicket,
		opts...,
	)
	ticketsViewTicketHandler := connect_go.NewUnaryHandler(
		TicketsViewTicketProcedure,
		svc.ViewTicket,
		opts...,
	)
	ticketsCreateCommentHandler := connect_go.NewUnaryHandler(
		TicketsCreateCommentProcedure,
		svc.CreateComment,
		opts...,
	)
	ticketsEnableProjectHandler := connect_go.NewUnaryHandler(
		TicketsEnableProjectProcedure,
		svc.EnableProject,
		opts...,
	)
	ticketsListEnabledProjectsHandler := connect_go.NewUnaryHandler(
		TicketsListEnabledProjectsProcedure,
		svc.ListEnabledProjects,
		opts...,
	)
	ticketsCreateSLAHandler := connect_go.NewUnaryHandler(
		TicketsCreateSLAProcedure,
		svc.CreateSLA,
		opts...,
	)
	ticketsListSLAHandler := connect_go.NewUnaryHandler(
		TicketsListSLAProcedure,
		svc.ListSLA,
		opts...,
	)
	ticketsUpdateSLAHandler := connect_go.NewUnaryHandler(
		TicketsUpdateSLAProcedure,
		svc.UpdateSLA,
		opts...,
	)
	ticketsListSLAConditionHandler := connect_go.NewUnaryHandler(
		TicketsListSLAConditionProcedure,
		svc.ListSLACondition,
		opts...,
	)
	ticketsReplyCommentHandler := connect_go.NewUnaryHandler(
		TicketsReplyCommentProcedure,
		svc.ReplyComment,
		opts...,
	)
	ticketsListTicketAuditLogHandler := connect_go.NewUnaryHandler(
		TicketsListTicketAuditLogProcedure,
		svc.ListTicketAuditLog,
		opts...,
	)
	ticketsAssignSelfHandler := connect_go.NewUnaryHandler(
		TicketsAssignSelfProcedure,
		svc.AssignSelf,
		opts...,
	)
	ticketsEditMaskTicketHandler := connect_go.NewUnaryHandler(
		TicketsEditMaskTicketProcedure,
		svc.EditMaskTicket,
		opts...,
	)
	ticketsListAllocatedTicketsHandler := connect_go.NewUnaryHandler(
		TicketsListAllocatedTicketsProcedure,
		svc.ListAllocatedTickets,
		opts...,
	)
	ticketsListAvailableAgentTicketsHandler := connect_go.NewUnaryHandler(
		TicketsListAvailableAgentTicketsProcedure,
		svc.ListAvailableAgentTickets,
		opts...,
	)
	ticketsListSkillsHandler := connect_go.NewUnaryHandler(
		TicketsListSkillsProcedure,
		svc.ListSkills,
		opts...,
	)
	ticketsListUsersHandler := connect_go.NewUnaryHandler(
		TicketsListUsersProcedure,
		svc.ListUsers,
		opts...,
	)
	ticketsCloseTicketActionHandler := connect_go.NewUnaryHandler(
		TicketsCloseTicketActionProcedure,
		svc.CloseTicketAction,
		opts...,
	)
	ticketsAssignTicketActionHandler := connect_go.NewUnaryHandler(
		TicketsAssignTicketActionProcedure,
		svc.AssignTicketAction,
		opts...,
	)
	ticketsCreateTicketActionHandler := connect_go.NewUnaryHandler(
		TicketsCreateTicketActionProcedure,
		svc.CreateTicketAction,
		opts...,
	)
	ticketsChangeTicketStatusHandler := connect_go.NewUnaryHandler(
		TicketsChangeTicketStatusProcedure,
		svc.ChangeTicketStatus,
		opts...,
	)
	ticketsCreateTicketTemplateHandler := connect_go.NewUnaryHandler(
		TicketsCreateTicketTemplateProcedure,
		svc.CreateTicketTemplate,
		opts...,
	)
	ticketsEditTicketTemplateHandler := connect_go.NewUnaryHandler(
		TicketsEditTicketTemplateProcedure,
		svc.EditTicketTemplate,
		opts...,
	)
	ticketsListTicketTemplateHandler := connect_go.NewUnaryHandler(
		TicketsListTicketTemplateProcedure,
		svc.ListTicketTemplate,
		opts...,
	)
	ticketsAssignTicketTemplateHandler := connect_go.NewUnaryHandler(
		TicketsAssignTicketTemplateProcedure,
		svc.AssignTicketTemplate,
		opts...,
	)
	ticketsGetAllActionTypeHandler := connect_go.NewUnaryHandler(
		TicketsGetAllActionTypeProcedure,
		svc.GetAllActionType,
		opts...,
	)
	ticketsGetPhoneNumberTypeHandler := connect_go.NewUnaryHandler(
		TicketsGetPhoneNumberTypeProcedure,
		svc.GetPhoneNumberType,
		opts...,
	)
	return "/api.v1alpha1.tickets.Tickets/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TicketsCreateTicketProcedure:
			ticketsCreateTicketHandler.ServeHTTP(w, r)
		case TicketsEditTicketProcedure:
			ticketsEditTicketHandler.ServeHTTP(w, r)
		case TicketsListTicketsProcedure:
			ticketsListTicketsHandler.ServeHTTP(w, r)
		case TicketsAssignTicketProcedure:
			ticketsAssignTicketHandler.ServeHTTP(w, r)
		case TicketsCloseTicketProcedure:
			ticketsCloseTicketHandler.ServeHTTP(w, r)
		case TicketsViewTicketProcedure:
			ticketsViewTicketHandler.ServeHTTP(w, r)
		case TicketsCreateCommentProcedure:
			ticketsCreateCommentHandler.ServeHTTP(w, r)
		case TicketsEnableProjectProcedure:
			ticketsEnableProjectHandler.ServeHTTP(w, r)
		case TicketsListEnabledProjectsProcedure:
			ticketsListEnabledProjectsHandler.ServeHTTP(w, r)
		case TicketsCreateSLAProcedure:
			ticketsCreateSLAHandler.ServeHTTP(w, r)
		case TicketsListSLAProcedure:
			ticketsListSLAHandler.ServeHTTP(w, r)
		case TicketsUpdateSLAProcedure:
			ticketsUpdateSLAHandler.ServeHTTP(w, r)
		case TicketsListSLAConditionProcedure:
			ticketsListSLAConditionHandler.ServeHTTP(w, r)
		case TicketsReplyCommentProcedure:
			ticketsReplyCommentHandler.ServeHTTP(w, r)
		case TicketsListTicketAuditLogProcedure:
			ticketsListTicketAuditLogHandler.ServeHTTP(w, r)
		case TicketsAssignSelfProcedure:
			ticketsAssignSelfHandler.ServeHTTP(w, r)
		case TicketsEditMaskTicketProcedure:
			ticketsEditMaskTicketHandler.ServeHTTP(w, r)
		case TicketsListAllocatedTicketsProcedure:
			ticketsListAllocatedTicketsHandler.ServeHTTP(w, r)
		case TicketsListAvailableAgentTicketsProcedure:
			ticketsListAvailableAgentTicketsHandler.ServeHTTP(w, r)
		case TicketsListSkillsProcedure:
			ticketsListSkillsHandler.ServeHTTP(w, r)
		case TicketsListUsersProcedure:
			ticketsListUsersHandler.ServeHTTP(w, r)
		case TicketsCloseTicketActionProcedure:
			ticketsCloseTicketActionHandler.ServeHTTP(w, r)
		case TicketsAssignTicketActionProcedure:
			ticketsAssignTicketActionHandler.ServeHTTP(w, r)
		case TicketsCreateTicketActionProcedure:
			ticketsCreateTicketActionHandler.ServeHTTP(w, r)
		case TicketsChangeTicketStatusProcedure:
			ticketsChangeTicketStatusHandler.ServeHTTP(w, r)
		case TicketsCreateTicketTemplateProcedure:
			ticketsCreateTicketTemplateHandler.ServeHTTP(w, r)
		case TicketsEditTicketTemplateProcedure:
			ticketsEditTicketTemplateHandler.ServeHTTP(w, r)
		case TicketsListTicketTemplateProcedure:
			ticketsListTicketTemplateHandler.ServeHTTP(w, r)
		case TicketsAssignTicketTemplateProcedure:
			ticketsAssignTicketTemplateHandler.ServeHTTP(w, r)
		case TicketsGetAllActionTypeProcedure:
			ticketsGetAllActionTypeHandler.ServeHTTP(w, r)
		case TicketsGetPhoneNumberTypeProcedure:
			ticketsGetPhoneNumberTypeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTicketsHandler returns CodeUnimplemented from all methods.
type UnimplementedTicketsHandler struct{}

func (UnimplementedTicketsHandler) CreateTicket(context.Context, *connect_go.Request[tickets.CreateTicketReq]) (*connect_go.Response[tickets.CreateTicketRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.CreateTicket is not implemented"))
}

func (UnimplementedTicketsHandler) EditTicket(context.Context, *connect_go.Request[tickets.EditTicketReq]) (*connect_go.Response[tickets.EditTicketRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.EditTicket is not implemented"))
}

func (UnimplementedTicketsHandler) ListTickets(context.Context, *connect_go.Request[tickets.ListTicketsReq]) (*connect_go.Response[tickets.ListTicketsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.ListTickets is not implemented"))
}

func (UnimplementedTicketsHandler) AssignTicket(context.Context, *connect_go.Request[tickets.AssignTicketReq]) (*connect_go.Response[tickets.AssignTicketRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.AssignTicket is not implemented"))
}

func (UnimplementedTicketsHandler) CloseTicket(context.Context, *connect_go.Request[tickets.CloseTicketReq]) (*connect_go.Response[tickets.CloseTicketRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.CloseTicket is not implemented"))
}

func (UnimplementedTicketsHandler) ViewTicket(context.Context, *connect_go.Request[tickets.ViewTicketReq]) (*connect_go.Response[tickets.ViewTicketRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.ViewTicket is not implemented"))
}

func (UnimplementedTicketsHandler) CreateComment(context.Context, *connect_go.Request[tickets.CreateCommentReq]) (*connect_go.Response[tickets.CreateCommentRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.CreateComment is not implemented"))
}

func (UnimplementedTicketsHandler) EnableProject(context.Context, *connect_go.Request[tickets.EnableProjectReq]) (*connect_go.Response[tickets.EnableProjectRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.EnableProject is not implemented"))
}

func (UnimplementedTicketsHandler) ListEnabledProjects(context.Context, *connect_go.Request[tickets.ListEnabledProjectsReq]) (*connect_go.Response[tickets.ListEnabledProjectsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.ListEnabledProjects is not implemented"))
}

func (UnimplementedTicketsHandler) CreateSLA(context.Context, *connect_go.Request[tickets.CreateSlaReq]) (*connect_go.Response[tickets.CreateSlaRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.CreateSLA is not implemented"))
}

func (UnimplementedTicketsHandler) ListSLA(context.Context, *connect_go.Request[tickets.ListSlaReq]) (*connect_go.Response[tickets.ListSlaRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.ListSLA is not implemented"))
}

func (UnimplementedTicketsHandler) UpdateSLA(context.Context, *connect_go.Request[tickets.UpdateSlaReq]) (*connect_go.Response[tickets.UpdateSlaRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.UpdateSLA is not implemented"))
}

func (UnimplementedTicketsHandler) ListSLACondition(context.Context, *connect_go.Request[tickets.ListSlaConditionReq]) (*connect_go.Response[tickets.ListSlaConditionRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.ListSLACondition is not implemented"))
}

func (UnimplementedTicketsHandler) ReplyComment(context.Context, *connect_go.Request[tickets.ReplyCommentReq]) (*connect_go.Response[tickets.ReplyCommentRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.ReplyComment is not implemented"))
}

func (UnimplementedTicketsHandler) ListTicketAuditLog(context.Context, *connect_go.Request[tickets.ListTicketAuditLogReq]) (*connect_go.Response[tickets.ListTicketAuditLogRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.ListTicketAuditLog is not implemented"))
}

func (UnimplementedTicketsHandler) AssignSelf(context.Context, *connect_go.Request[tickets.CreateSelfAssignReq]) (*connect_go.Response[tickets.CreateSelfAssignRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.AssignSelf is not implemented"))
}

func (UnimplementedTicketsHandler) EditMaskTicket(context.Context, *connect_go.Request[tickets.EditMaskTicketReq]) (*connect_go.Response[tickets.EditMaskTicketRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.EditMaskTicket is not implemented"))
}

func (UnimplementedTicketsHandler) ListAllocatedTickets(context.Context, *connect_go.Request[tickets.ListAllocatedTicketReq]) (*connect_go.Response[tickets.ListAllocatedTicketRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.ListAllocatedTickets is not implemented"))
}

func (UnimplementedTicketsHandler) ListAvailableAgentTickets(context.Context, *connect_go.Request[tickets.ListAvailableAgentTicketsRequest]) (*connect_go.Response[tickets.ListAvailableAgentTicketsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.ListAvailableAgentTickets is not implemented"))
}

func (UnimplementedTicketsHandler) ListSkills(context.Context, *connect_go.Request[tickets.ListSkillsRequest]) (*connect_go.Response[tickets.ListSkillsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.ListSkills is not implemented"))
}

func (UnimplementedTicketsHandler) ListUsers(context.Context, *connect_go.Request[tickets.ListUsersRequest]) (*connect_go.Response[tickets.ListUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.ListUsers is not implemented"))
}

func (UnimplementedTicketsHandler) CloseTicketAction(context.Context, *connect_go.Request[tickets.CloseTicketActionRequest]) (*connect_go.Response[tickets.CloseTicketActionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.CloseTicketAction is not implemented"))
}

func (UnimplementedTicketsHandler) AssignTicketAction(context.Context, *connect_go.Request[tickets.AssignTicketActionRequest]) (*connect_go.Response[tickets.AssignTicketActionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.AssignTicketAction is not implemented"))
}

func (UnimplementedTicketsHandler) CreateTicketAction(context.Context, *connect_go.Request[tickets.CreateTicketActionRequest]) (*connect_go.Response[tickets.CreateTicketActionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.CreateTicketAction is not implemented"))
}

func (UnimplementedTicketsHandler) ChangeTicketStatus(context.Context, *connect_go.Request[tickets.ChangeTicketStatusRequest]) (*connect_go.Response[tickets.ChangeTicketStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.ChangeTicketStatus is not implemented"))
}

func (UnimplementedTicketsHandler) CreateTicketTemplate(context.Context, *connect_go.Request[tickets.CreateTicketTemplateRequest]) (*connect_go.Response[tickets.CreateTicketTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.CreateTicketTemplate is not implemented"))
}

func (UnimplementedTicketsHandler) EditTicketTemplate(context.Context, *connect_go.Request[tickets.EditTicketTemplateRequest]) (*connect_go.Response[tickets.EditTicketTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.EditTicketTemplate is not implemented"))
}

func (UnimplementedTicketsHandler) ListTicketTemplate(context.Context, *connect_go.Request[tickets.ListTicketTemplateRequest]) (*connect_go.Response[tickets.ListTicketTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.ListTicketTemplate is not implemented"))
}

func (UnimplementedTicketsHandler) AssignTicketTemplate(context.Context, *connect_go.Request[tickets.AssignProjectTemplateRequest]) (*connect_go.Response[tickets.AssignProjectTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.AssignTicketTemplate is not implemented"))
}

func (UnimplementedTicketsHandler) GetAllActionType(context.Context, *connect_go.Request[tickets.GetActionTypeRequest]) (*connect_go.Response[tickets.GetActionTypeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.GetAllActionType is not implemented"))
}

func (UnimplementedTicketsHandler) GetPhoneNumberType(context.Context, *connect_go.Request[tickets.GetPhoneNumberTypeRequest]) (*connect_go.Response[tickets.GetPhoneNumberTypeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.GetPhoneNumberType is not implemented"))
}
