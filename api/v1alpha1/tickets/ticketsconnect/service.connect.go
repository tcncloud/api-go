// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1alpha1/tickets/service.proto

package ticketsconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	tickets "github.com/tcncloud/api-go/api/v1alpha1/tickets"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TicketsName is the fully-qualified name of the Tickets service.
	TicketsName = "api.v1alpha1.tickets.Tickets"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TicketsCreateTicketProcedure is the fully-qualified name of the Tickets's CreateTicket RPC.
	TicketsCreateTicketProcedure = "/api.v1alpha1.tickets.Tickets/CreateTicket"
	// TicketsEditTicketProcedure is the fully-qualified name of the Tickets's EditTicket RPC.
	TicketsEditTicketProcedure = "/api.v1alpha1.tickets.Tickets/EditTicket"
	// TicketsListTicketsProcedure is the fully-qualified name of the Tickets's ListTickets RPC.
	TicketsListTicketsProcedure = "/api.v1alpha1.tickets.Tickets/ListTickets"
	// TicketsAssignTicketProcedure is the fully-qualified name of the Tickets's AssignTicket RPC.
	TicketsAssignTicketProcedure = "/api.v1alpha1.tickets.Tickets/AssignTicket"
	// TicketsCloseTicketProcedure is the fully-qualified name of the Tickets's CloseTicket RPC.
	TicketsCloseTicketProcedure = "/api.v1alpha1.tickets.Tickets/CloseTicket"
	// TicketsViewTicketProcedure is the fully-qualified name of the Tickets's ViewTicket RPC.
	TicketsViewTicketProcedure = "/api.v1alpha1.tickets.Tickets/ViewTicket"
	// TicketsCreateCommentProcedure is the fully-qualified name of the Tickets's CreateComment RPC.
	TicketsCreateCommentProcedure = "/api.v1alpha1.tickets.Tickets/CreateComment"
	// TicketsEnableProjectProcedure is the fully-qualified name of the Tickets's EnableProject RPC.
	TicketsEnableProjectProcedure = "/api.v1alpha1.tickets.Tickets/EnableProject"
	// TicketsListEnabledProjectsProcedure is the fully-qualified name of the Tickets's
	// ListEnabledProjects RPC.
	TicketsListEnabledProjectsProcedure = "/api.v1alpha1.tickets.Tickets/ListEnabledProjects"
	// TicketsCreateSLAProcedure is the fully-qualified name of the Tickets's CreateSLA RPC.
	TicketsCreateSLAProcedure = "/api.v1alpha1.tickets.Tickets/CreateSLA"
	// TicketsListSLAProcedure is the fully-qualified name of the Tickets's ListSLA RPC.
	TicketsListSLAProcedure = "/api.v1alpha1.tickets.Tickets/ListSLA"
	// TicketsUpdateSLAProcedure is the fully-qualified name of the Tickets's UpdateSLA RPC.
	TicketsUpdateSLAProcedure = "/api.v1alpha1.tickets.Tickets/UpdateSLA"
	// TicketsListSLAConditionProcedure is the fully-qualified name of the Tickets's ListSLACondition
	// RPC.
	TicketsListSLAConditionProcedure = "/api.v1alpha1.tickets.Tickets/ListSLACondition"
	// TicketsReplyCommentProcedure is the fully-qualified name of the Tickets's ReplyComment RPC.
	TicketsReplyCommentProcedure = "/api.v1alpha1.tickets.Tickets/ReplyComment"
	// TicketsListTicketAuditLogProcedure is the fully-qualified name of the Tickets's
	// ListTicketAuditLog RPC.
	TicketsListTicketAuditLogProcedure = "/api.v1alpha1.tickets.Tickets/ListTicketAuditLog"
)

// TicketsClient is a client for the api.v1alpha1.tickets.Tickets service.
type TicketsClient interface {
	// Public Method to create a ticket.
	CreateTicket(context.Context, *connect_go.Request[tickets.CreateTicketReq]) (*connect_go.Response[tickets.CreateTicketRes], error)
	// Public Method to create a ticket.
	EditTicket(context.Context, *connect_go.Request[tickets.EditTicketReq]) (*connect_go.Response[tickets.EditTicketRes], error)
	// Public method to list tickets
	ListTickets(context.Context, *connect_go.Request[tickets.ListTicketsReq]) (*connect_go.Response[tickets.ListTicketsRes], error)
	// Public method to assign ticket
	AssignTicket(context.Context, *connect_go.Request[tickets.AssignTicketReq]) (*connect_go.Response[tickets.AssignTicketRes], error)
	// Closes the ticket
	CloseTicket(context.Context, *connect_go.Request[tickets.CloseTicketReq]) (*connect_go.Response[tickets.CloseTicketRes], error)
	// Public method to view ticket
	ViewTicket(context.Context, *connect_go.Request[tickets.ViewTicketReq]) (*connect_go.Response[tickets.ViewTicketRes], error)
	// Public Method to create a Comment.
	CreateComment(context.Context, *connect_go.Request[tickets.CreateCommentReq]) (*connect_go.Response[tickets.CreateCommentRes], error)
	// Public method to Enable Project for Ticketing system
	EnableProject(context.Context, *connect_go.Request[tickets.EnableProjectReq]) (*connect_go.Response[tickets.EnableProjectRes], error)
	// Public method to List projects enabled for Ticketing system
	ListEnabledProjects(context.Context, *connect_go.Request[tickets.ListEnabledProjectsReq]) (*connect_go.Response[tickets.ListEnabledProjectsRes], error)
	// Public Method to create a sla.
	CreateSLA(context.Context, *connect_go.Request[tickets.CreateSlaReq]) (*connect_go.Response[tickets.CreateSlaRes], error)
	// Public method to list sla
	ListSLA(context.Context, *connect_go.Request[tickets.ListSlaReq]) (*connect_go.Response[tickets.ListSlaRes], error)
	// Public method to update sla
	UpdateSLA(context.Context, *connect_go.Request[tickets.UpdateSlaReq]) (*connect_go.Response[tickets.UpdateSlaRes], error)
	// Public method to list sla_condition
	ListSLACondition(context.Context, *connect_go.Request[tickets.ListSlaConditionReq]) (*connect_go.Response[tickets.ListSlaConditionRes], error)
	// Public method to list sla_condition
	ReplyComment(context.Context, *connect_go.Request[tickets.ReplyCommentReq]) (*connect_go.Response[tickets.ReplyCommentRes], error)
	// Public method to List audit log for Ticketing system
	ListTicketAuditLog(context.Context, *connect_go.Request[tickets.ListTicketAuditLogReq]) (*connect_go.Response[tickets.ListTicketAuditLogRes], error)
}

// NewTicketsClient constructs a client for the api.v1alpha1.tickets.Tickets service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTicketsClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TicketsClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &ticketsClient{
		createTicket: connect_go.NewClient[tickets.CreateTicketReq, tickets.CreateTicketRes](
			httpClient,
			baseURL+TicketsCreateTicketProcedure,
			opts...,
		),
		editTicket: connect_go.NewClient[tickets.EditTicketReq, tickets.EditTicketRes](
			httpClient,
			baseURL+TicketsEditTicketProcedure,
			opts...,
		),
		listTickets: connect_go.NewClient[tickets.ListTicketsReq, tickets.ListTicketsRes](
			httpClient,
			baseURL+TicketsListTicketsProcedure,
			opts...,
		),
		assignTicket: connect_go.NewClient[tickets.AssignTicketReq, tickets.AssignTicketRes](
			httpClient,
			baseURL+TicketsAssignTicketProcedure,
			opts...,
		),
		closeTicket: connect_go.NewClient[tickets.CloseTicketReq, tickets.CloseTicketRes](
			httpClient,
			baseURL+TicketsCloseTicketProcedure,
			opts...,
		),
		viewTicket: connect_go.NewClient[tickets.ViewTicketReq, tickets.ViewTicketRes](
			httpClient,
			baseURL+TicketsViewTicketProcedure,
			opts...,
		),
		createComment: connect_go.NewClient[tickets.CreateCommentReq, tickets.CreateCommentRes](
			httpClient,
			baseURL+TicketsCreateCommentProcedure,
			opts...,
		),
		enableProject: connect_go.NewClient[tickets.EnableProjectReq, tickets.EnableProjectRes](
			httpClient,
			baseURL+TicketsEnableProjectProcedure,
			opts...,
		),
		listEnabledProjects: connect_go.NewClient[tickets.ListEnabledProjectsReq, tickets.ListEnabledProjectsRes](
			httpClient,
			baseURL+TicketsListEnabledProjectsProcedure,
			opts...,
		),
		createSLA: connect_go.NewClient[tickets.CreateSlaReq, tickets.CreateSlaRes](
			httpClient,
			baseURL+TicketsCreateSLAProcedure,
			opts...,
		),
		listSLA: connect_go.NewClient[tickets.ListSlaReq, tickets.ListSlaRes](
			httpClient,
			baseURL+TicketsListSLAProcedure,
			opts...,
		),
		updateSLA: connect_go.NewClient[tickets.UpdateSlaReq, tickets.UpdateSlaRes](
			httpClient,
			baseURL+TicketsUpdateSLAProcedure,
			opts...,
		),
		listSLACondition: connect_go.NewClient[tickets.ListSlaConditionReq, tickets.ListSlaConditionRes](
			httpClient,
			baseURL+TicketsListSLAConditionProcedure,
			opts...,
		),
		replyComment: connect_go.NewClient[tickets.ReplyCommentReq, tickets.ReplyCommentRes](
			httpClient,
			baseURL+TicketsReplyCommentProcedure,
			opts...,
		),
		listTicketAuditLog: connect_go.NewClient[tickets.ListTicketAuditLogReq, tickets.ListTicketAuditLogRes](
			httpClient,
			baseURL+TicketsListTicketAuditLogProcedure,
			opts...,
		),
	}
}

// ticketsClient implements TicketsClient.
type ticketsClient struct {
	createTicket        *connect_go.Client[tickets.CreateTicketReq, tickets.CreateTicketRes]
	editTicket          *connect_go.Client[tickets.EditTicketReq, tickets.EditTicketRes]
	listTickets         *connect_go.Client[tickets.ListTicketsReq, tickets.ListTicketsRes]
	assignTicket        *connect_go.Client[tickets.AssignTicketReq, tickets.AssignTicketRes]
	closeTicket         *connect_go.Client[tickets.CloseTicketReq, tickets.CloseTicketRes]
	viewTicket          *connect_go.Client[tickets.ViewTicketReq, tickets.ViewTicketRes]
	createComment       *connect_go.Client[tickets.CreateCommentReq, tickets.CreateCommentRes]
	enableProject       *connect_go.Client[tickets.EnableProjectReq, tickets.EnableProjectRes]
	listEnabledProjects *connect_go.Client[tickets.ListEnabledProjectsReq, tickets.ListEnabledProjectsRes]
	createSLA           *connect_go.Client[tickets.CreateSlaReq, tickets.CreateSlaRes]
	listSLA             *connect_go.Client[tickets.ListSlaReq, tickets.ListSlaRes]
	updateSLA           *connect_go.Client[tickets.UpdateSlaReq, tickets.UpdateSlaRes]
	listSLACondition    *connect_go.Client[tickets.ListSlaConditionReq, tickets.ListSlaConditionRes]
	replyComment        *connect_go.Client[tickets.ReplyCommentReq, tickets.ReplyCommentRes]
	listTicketAuditLog  *connect_go.Client[tickets.ListTicketAuditLogReq, tickets.ListTicketAuditLogRes]
}

// CreateTicket calls api.v1alpha1.tickets.Tickets.CreateTicket.
func (c *ticketsClient) CreateTicket(ctx context.Context, req *connect_go.Request[tickets.CreateTicketReq]) (*connect_go.Response[tickets.CreateTicketRes], error) {
	return c.createTicket.CallUnary(ctx, req)
}

// EditTicket calls api.v1alpha1.tickets.Tickets.EditTicket.
func (c *ticketsClient) EditTicket(ctx context.Context, req *connect_go.Request[tickets.EditTicketReq]) (*connect_go.Response[tickets.EditTicketRes], error) {
	return c.editTicket.CallUnary(ctx, req)
}

// ListTickets calls api.v1alpha1.tickets.Tickets.ListTickets.
func (c *ticketsClient) ListTickets(ctx context.Context, req *connect_go.Request[tickets.ListTicketsReq]) (*connect_go.Response[tickets.ListTicketsRes], error) {
	return c.listTickets.CallUnary(ctx, req)
}

// AssignTicket calls api.v1alpha1.tickets.Tickets.AssignTicket.
func (c *ticketsClient) AssignTicket(ctx context.Context, req *connect_go.Request[tickets.AssignTicketReq]) (*connect_go.Response[tickets.AssignTicketRes], error) {
	return c.assignTicket.CallUnary(ctx, req)
}

// CloseTicket calls api.v1alpha1.tickets.Tickets.CloseTicket.
func (c *ticketsClient) CloseTicket(ctx context.Context, req *connect_go.Request[tickets.CloseTicketReq]) (*connect_go.Response[tickets.CloseTicketRes], error) {
	return c.closeTicket.CallUnary(ctx, req)
}

// ViewTicket calls api.v1alpha1.tickets.Tickets.ViewTicket.
func (c *ticketsClient) ViewTicket(ctx context.Context, req *connect_go.Request[tickets.ViewTicketReq]) (*connect_go.Response[tickets.ViewTicketRes], error) {
	return c.viewTicket.CallUnary(ctx, req)
}

// CreateComment calls api.v1alpha1.tickets.Tickets.CreateComment.
func (c *ticketsClient) CreateComment(ctx context.Context, req *connect_go.Request[tickets.CreateCommentReq]) (*connect_go.Response[tickets.CreateCommentRes], error) {
	return c.createComment.CallUnary(ctx, req)
}

// EnableProject calls api.v1alpha1.tickets.Tickets.EnableProject.
func (c *ticketsClient) EnableProject(ctx context.Context, req *connect_go.Request[tickets.EnableProjectReq]) (*connect_go.Response[tickets.EnableProjectRes], error) {
	return c.enableProject.CallUnary(ctx, req)
}

// ListEnabledProjects calls api.v1alpha1.tickets.Tickets.ListEnabledProjects.
func (c *ticketsClient) ListEnabledProjects(ctx context.Context, req *connect_go.Request[tickets.ListEnabledProjectsReq]) (*connect_go.Response[tickets.ListEnabledProjectsRes], error) {
	return c.listEnabledProjects.CallUnary(ctx, req)
}

// CreateSLA calls api.v1alpha1.tickets.Tickets.CreateSLA.
func (c *ticketsClient) CreateSLA(ctx context.Context, req *connect_go.Request[tickets.CreateSlaReq]) (*connect_go.Response[tickets.CreateSlaRes], error) {
	return c.createSLA.CallUnary(ctx, req)
}

// ListSLA calls api.v1alpha1.tickets.Tickets.ListSLA.
func (c *ticketsClient) ListSLA(ctx context.Context, req *connect_go.Request[tickets.ListSlaReq]) (*connect_go.Response[tickets.ListSlaRes], error) {
	return c.listSLA.CallUnary(ctx, req)
}

// UpdateSLA calls api.v1alpha1.tickets.Tickets.UpdateSLA.
func (c *ticketsClient) UpdateSLA(ctx context.Context, req *connect_go.Request[tickets.UpdateSlaReq]) (*connect_go.Response[tickets.UpdateSlaRes], error) {
	return c.updateSLA.CallUnary(ctx, req)
}

// ListSLACondition calls api.v1alpha1.tickets.Tickets.ListSLACondition.
func (c *ticketsClient) ListSLACondition(ctx context.Context, req *connect_go.Request[tickets.ListSlaConditionReq]) (*connect_go.Response[tickets.ListSlaConditionRes], error) {
	return c.listSLACondition.CallUnary(ctx, req)
}

// ReplyComment calls api.v1alpha1.tickets.Tickets.ReplyComment.
func (c *ticketsClient) ReplyComment(ctx context.Context, req *connect_go.Request[tickets.ReplyCommentReq]) (*connect_go.Response[tickets.ReplyCommentRes], error) {
	return c.replyComment.CallUnary(ctx, req)
}

// ListTicketAuditLog calls api.v1alpha1.tickets.Tickets.ListTicketAuditLog.
func (c *ticketsClient) ListTicketAuditLog(ctx context.Context, req *connect_go.Request[tickets.ListTicketAuditLogReq]) (*connect_go.Response[tickets.ListTicketAuditLogRes], error) {
	return c.listTicketAuditLog.CallUnary(ctx, req)
}

// TicketsHandler is an implementation of the api.v1alpha1.tickets.Tickets service.
type TicketsHandler interface {
	// Public Method to create a ticket.
	CreateTicket(context.Context, *connect_go.Request[tickets.CreateTicketReq]) (*connect_go.Response[tickets.CreateTicketRes], error)
	// Public Method to create a ticket.
	EditTicket(context.Context, *connect_go.Request[tickets.EditTicketReq]) (*connect_go.Response[tickets.EditTicketRes], error)
	// Public method to list tickets
	ListTickets(context.Context, *connect_go.Request[tickets.ListTicketsReq]) (*connect_go.Response[tickets.ListTicketsRes], error)
	// Public method to assign ticket
	AssignTicket(context.Context, *connect_go.Request[tickets.AssignTicketReq]) (*connect_go.Response[tickets.AssignTicketRes], error)
	// Closes the ticket
	CloseTicket(context.Context, *connect_go.Request[tickets.CloseTicketReq]) (*connect_go.Response[tickets.CloseTicketRes], error)
	// Public method to view ticket
	ViewTicket(context.Context, *connect_go.Request[tickets.ViewTicketReq]) (*connect_go.Response[tickets.ViewTicketRes], error)
	// Public Method to create a Comment.
	CreateComment(context.Context, *connect_go.Request[tickets.CreateCommentReq]) (*connect_go.Response[tickets.CreateCommentRes], error)
	// Public method to Enable Project for Ticketing system
	EnableProject(context.Context, *connect_go.Request[tickets.EnableProjectReq]) (*connect_go.Response[tickets.EnableProjectRes], error)
	// Public method to List projects enabled for Ticketing system
	ListEnabledProjects(context.Context, *connect_go.Request[tickets.ListEnabledProjectsReq]) (*connect_go.Response[tickets.ListEnabledProjectsRes], error)
	// Public Method to create a sla.
	CreateSLA(context.Context, *connect_go.Request[tickets.CreateSlaReq]) (*connect_go.Response[tickets.CreateSlaRes], error)
	// Public method to list sla
	ListSLA(context.Context, *connect_go.Request[tickets.ListSlaReq]) (*connect_go.Response[tickets.ListSlaRes], error)
	// Public method to update sla
	UpdateSLA(context.Context, *connect_go.Request[tickets.UpdateSlaReq]) (*connect_go.Response[tickets.UpdateSlaRes], error)
	// Public method to list sla_condition
	ListSLACondition(context.Context, *connect_go.Request[tickets.ListSlaConditionReq]) (*connect_go.Response[tickets.ListSlaConditionRes], error)
	// Public method to list sla_condition
	ReplyComment(context.Context, *connect_go.Request[tickets.ReplyCommentReq]) (*connect_go.Response[tickets.ReplyCommentRes], error)
	// Public method to List audit log for Ticketing system
	ListTicketAuditLog(context.Context, *connect_go.Request[tickets.ListTicketAuditLogReq]) (*connect_go.Response[tickets.ListTicketAuditLogRes], error)
}

// NewTicketsHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTicketsHandler(svc TicketsHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(TicketsCreateTicketProcedure, connect_go.NewUnaryHandler(
		TicketsCreateTicketProcedure,
		svc.CreateTicket,
		opts...,
	))
	mux.Handle(TicketsEditTicketProcedure, connect_go.NewUnaryHandler(
		TicketsEditTicketProcedure,
		svc.EditTicket,
		opts...,
	))
	mux.Handle(TicketsListTicketsProcedure, connect_go.NewUnaryHandler(
		TicketsListTicketsProcedure,
		svc.ListTickets,
		opts...,
	))
	mux.Handle(TicketsAssignTicketProcedure, connect_go.NewUnaryHandler(
		TicketsAssignTicketProcedure,
		svc.AssignTicket,
		opts...,
	))
	mux.Handle(TicketsCloseTicketProcedure, connect_go.NewUnaryHandler(
		TicketsCloseTicketProcedure,
		svc.CloseTicket,
		opts...,
	))
	mux.Handle(TicketsViewTicketProcedure, connect_go.NewUnaryHandler(
		TicketsViewTicketProcedure,
		svc.ViewTicket,
		opts...,
	))
	mux.Handle(TicketsCreateCommentProcedure, connect_go.NewUnaryHandler(
		TicketsCreateCommentProcedure,
		svc.CreateComment,
		opts...,
	))
	mux.Handle(TicketsEnableProjectProcedure, connect_go.NewUnaryHandler(
		TicketsEnableProjectProcedure,
		svc.EnableProject,
		opts...,
	))
	mux.Handle(TicketsListEnabledProjectsProcedure, connect_go.NewUnaryHandler(
		TicketsListEnabledProjectsProcedure,
		svc.ListEnabledProjects,
		opts...,
	))
	mux.Handle(TicketsCreateSLAProcedure, connect_go.NewUnaryHandler(
		TicketsCreateSLAProcedure,
		svc.CreateSLA,
		opts...,
	))
	mux.Handle(TicketsListSLAProcedure, connect_go.NewUnaryHandler(
		TicketsListSLAProcedure,
		svc.ListSLA,
		opts...,
	))
	mux.Handle(TicketsUpdateSLAProcedure, connect_go.NewUnaryHandler(
		TicketsUpdateSLAProcedure,
		svc.UpdateSLA,
		opts...,
	))
	mux.Handle(TicketsListSLAConditionProcedure, connect_go.NewUnaryHandler(
		TicketsListSLAConditionProcedure,
		svc.ListSLACondition,
		opts...,
	))
	mux.Handle(TicketsReplyCommentProcedure, connect_go.NewUnaryHandler(
		TicketsReplyCommentProcedure,
		svc.ReplyComment,
		opts...,
	))
	mux.Handle(TicketsListTicketAuditLogProcedure, connect_go.NewUnaryHandler(
		TicketsListTicketAuditLogProcedure,
		svc.ListTicketAuditLog,
		opts...,
	))
	return "/api.v1alpha1.tickets.Tickets/", mux
}

// UnimplementedTicketsHandler returns CodeUnimplemented from all methods.
type UnimplementedTicketsHandler struct{}

func (UnimplementedTicketsHandler) CreateTicket(context.Context, *connect_go.Request[tickets.CreateTicketReq]) (*connect_go.Response[tickets.CreateTicketRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.CreateTicket is not implemented"))
}

func (UnimplementedTicketsHandler) EditTicket(context.Context, *connect_go.Request[tickets.EditTicketReq]) (*connect_go.Response[tickets.EditTicketRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.EditTicket is not implemented"))
}

func (UnimplementedTicketsHandler) ListTickets(context.Context, *connect_go.Request[tickets.ListTicketsReq]) (*connect_go.Response[tickets.ListTicketsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.ListTickets is not implemented"))
}

func (UnimplementedTicketsHandler) AssignTicket(context.Context, *connect_go.Request[tickets.AssignTicketReq]) (*connect_go.Response[tickets.AssignTicketRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.AssignTicket is not implemented"))
}

func (UnimplementedTicketsHandler) CloseTicket(context.Context, *connect_go.Request[tickets.CloseTicketReq]) (*connect_go.Response[tickets.CloseTicketRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.CloseTicket is not implemented"))
}

func (UnimplementedTicketsHandler) ViewTicket(context.Context, *connect_go.Request[tickets.ViewTicketReq]) (*connect_go.Response[tickets.ViewTicketRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.ViewTicket is not implemented"))
}

func (UnimplementedTicketsHandler) CreateComment(context.Context, *connect_go.Request[tickets.CreateCommentReq]) (*connect_go.Response[tickets.CreateCommentRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.CreateComment is not implemented"))
}

func (UnimplementedTicketsHandler) EnableProject(context.Context, *connect_go.Request[tickets.EnableProjectReq]) (*connect_go.Response[tickets.EnableProjectRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.EnableProject is not implemented"))
}

func (UnimplementedTicketsHandler) ListEnabledProjects(context.Context, *connect_go.Request[tickets.ListEnabledProjectsReq]) (*connect_go.Response[tickets.ListEnabledProjectsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.ListEnabledProjects is not implemented"))
}

func (UnimplementedTicketsHandler) CreateSLA(context.Context, *connect_go.Request[tickets.CreateSlaReq]) (*connect_go.Response[tickets.CreateSlaRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.CreateSLA is not implemented"))
}

func (UnimplementedTicketsHandler) ListSLA(context.Context, *connect_go.Request[tickets.ListSlaReq]) (*connect_go.Response[tickets.ListSlaRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.ListSLA is not implemented"))
}

func (UnimplementedTicketsHandler) UpdateSLA(context.Context, *connect_go.Request[tickets.UpdateSlaReq]) (*connect_go.Response[tickets.UpdateSlaRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.UpdateSLA is not implemented"))
}

func (UnimplementedTicketsHandler) ListSLACondition(context.Context, *connect_go.Request[tickets.ListSlaConditionReq]) (*connect_go.Response[tickets.ListSlaConditionRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.ListSLACondition is not implemented"))
}

func (UnimplementedTicketsHandler) ReplyComment(context.Context, *connect_go.Request[tickets.ReplyCommentReq]) (*connect_go.Response[tickets.ReplyCommentRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.ReplyComment is not implemented"))
}

func (UnimplementedTicketsHandler) ListTicketAuditLog(context.Context, *connect_go.Request[tickets.ListTicketAuditLogReq]) (*connect_go.Response[tickets.ListTicketAuditLogRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.tickets.Tickets.ListTicketAuditLog is not implemented"))
}
