// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: api/v1alpha1/tickets/service.proto

package tickets

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Tickets_CreateTicket_FullMethodName              = "/api.v1alpha1.tickets.Tickets/CreateTicket"
	Tickets_EditTicket_FullMethodName                = "/api.v1alpha1.tickets.Tickets/EditTicket"
	Tickets_ListTickets_FullMethodName               = "/api.v1alpha1.tickets.Tickets/ListTickets"
	Tickets_AssignTicket_FullMethodName              = "/api.v1alpha1.tickets.Tickets/AssignTicket"
	Tickets_CloseTicket_FullMethodName               = "/api.v1alpha1.tickets.Tickets/CloseTicket"
	Tickets_ViewTicket_FullMethodName                = "/api.v1alpha1.tickets.Tickets/ViewTicket"
	Tickets_CreateComment_FullMethodName             = "/api.v1alpha1.tickets.Tickets/CreateComment"
	Tickets_EnableProject_FullMethodName             = "/api.v1alpha1.tickets.Tickets/EnableProject"
	Tickets_ListEnabledProjects_FullMethodName       = "/api.v1alpha1.tickets.Tickets/ListEnabledProjects"
	Tickets_CreateSLA_FullMethodName                 = "/api.v1alpha1.tickets.Tickets/CreateSLA"
	Tickets_ListSLA_FullMethodName                   = "/api.v1alpha1.tickets.Tickets/ListSLA"
	Tickets_UpdateSLA_FullMethodName                 = "/api.v1alpha1.tickets.Tickets/UpdateSLA"
	Tickets_ListSLACondition_FullMethodName          = "/api.v1alpha1.tickets.Tickets/ListSLACondition"
	Tickets_ReplyComment_FullMethodName              = "/api.v1alpha1.tickets.Tickets/ReplyComment"
	Tickets_ListTicketAuditLog_FullMethodName        = "/api.v1alpha1.tickets.Tickets/ListTicketAuditLog"
	Tickets_AssignSelf_FullMethodName                = "/api.v1alpha1.tickets.Tickets/AssignSelf"
	Tickets_EditMaskTicket_FullMethodName            = "/api.v1alpha1.tickets.Tickets/EditMaskTicket"
	Tickets_ListAllocatedTickets_FullMethodName      = "/api.v1alpha1.tickets.Tickets/ListAllocatedTickets"
	Tickets_ListAvailableAgentTickets_FullMethodName = "/api.v1alpha1.tickets.Tickets/ListAvailableAgentTickets"
	Tickets_ListAgentTickets_FullMethodName          = "/api.v1alpha1.tickets.Tickets/ListAgentTickets"
	Tickets_ListSkills_FullMethodName                = "/api.v1alpha1.tickets.Tickets/ListSkills"
	Tickets_ListUsers_FullMethodName                 = "/api.v1alpha1.tickets.Tickets/ListUsers"
	Tickets_CloseTicketAction_FullMethodName         = "/api.v1alpha1.tickets.Tickets/CloseTicketAction"
	Tickets_AssignTicketAction_FullMethodName        = "/api.v1alpha1.tickets.Tickets/AssignTicketAction"
	Tickets_CreateTicketAction_FullMethodName        = "/api.v1alpha1.tickets.Tickets/CreateTicketAction"
	Tickets_ChangeTicketStatus_FullMethodName        = "/api.v1alpha1.tickets.Tickets/ChangeTicketStatus"
	Tickets_CreateTicketTemplate_FullMethodName      = "/api.v1alpha1.tickets.Tickets/CreateTicketTemplate"
	Tickets_EditTicketTemplate_FullMethodName        = "/api.v1alpha1.tickets.Tickets/EditTicketTemplate"
	Tickets_ListTicketTemplate_FullMethodName        = "/api.v1alpha1.tickets.Tickets/ListTicketTemplate"
	Tickets_AssignTicketTemplate_FullMethodName      = "/api.v1alpha1.tickets.Tickets/AssignTicketTemplate"
	Tickets_GetAllActionType_FullMethodName          = "/api.v1alpha1.tickets.Tickets/GetAllActionType"
	Tickets_GetPhoneNumberType_FullMethodName        = "/api.v1alpha1.tickets.Tickets/GetPhoneNumberType"
	Tickets_AddEntityRef_FullMethodName              = "/api.v1alpha1.tickets.Tickets/AddEntityRef"
	Tickets_ListTicketsByEntityRef_FullMethodName    = "/api.v1alpha1.tickets.Tickets/ListTicketsByEntityRef"
	Tickets_ListEntityRefsByTicket_FullMethodName    = "/api.v1alpha1.tickets.Tickets/ListEntityRefsByTicket"
)

// TicketsClient is the client API for Tickets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Tickets service is the public api for the tickets service., for public integrations to manage tickets / customer service requests. Can be used by any authorized frontend-app.
type TicketsClient interface {
	// Public Method to create a ticket.
	CreateTicket(ctx context.Context, in *CreateTicketReq, opts ...grpc.CallOption) (*CreateTicketRes, error)
	// Deprecated: Do not use.
	// Public Method to edit a ticket.
	EditTicket(ctx context.Context, in *EditTicketReq, opts ...grpc.CallOption) (*EditTicketRes, error)
	// Public method to list tickets
	ListTickets(ctx context.Context, in *ListTicketsReq, opts ...grpc.CallOption) (*ListTicketsRes, error)
	// Deprecated: Do not use.
	// Public method to assign ticket
	// Would be deprecated
	AssignTicket(ctx context.Context, in *AssignTicketReq, opts ...grpc.CallOption) (*AssignTicketRes, error)
	// Public Method to Close a ticket
	// Any agent can close the ticket. No BE validation required
	CloseTicket(ctx context.Context, in *CloseTicketReq, opts ...grpc.CallOption) (*CloseTicketRes, error)
	// Public method to view ticket
	ViewTicket(ctx context.Context, in *ViewTicketReq, opts ...grpc.CallOption) (*ViewTicketRes, error)
	// Public Method to create a Comment.
	CreateComment(ctx context.Context, in *CreateCommentReq, opts ...grpc.CallOption) (*CreateCommentRes, error)
	// Public method to Enable Project for Ticketing system
	EnableProject(ctx context.Context, in *EnableProjectReq, opts ...grpc.CallOption) (*EnableProjectRes, error)
	// Public method to List projects enabled for Ticketing system
	ListEnabledProjects(ctx context.Context, in *ListEnabledProjectsReq, opts ...grpc.CallOption) (*ListEnabledProjectsRes, error)
	// Public Method to create a sla.
	CreateSLA(ctx context.Context, in *CreateSlaReq, opts ...grpc.CallOption) (*CreateSlaRes, error)
	// Public method to list sla
	ListSLA(ctx context.Context, in *ListSlaReq, opts ...grpc.CallOption) (*ListSlaRes, error)
	// Public method to update sla
	UpdateSLA(ctx context.Context, in *UpdateSlaReq, opts ...grpc.CallOption) (*UpdateSlaRes, error)
	// Public method to list sla_condition
	ListSLACondition(ctx context.Context, in *ListSlaConditionReq, opts ...grpc.CallOption) (*ListSlaConditionRes, error)
	// Public method to list sla_condition
	ReplyComment(ctx context.Context, in *ReplyCommentReq, opts ...grpc.CallOption) (*ReplyCommentRes, error)
	// Public method to List audit log for Ticketing system
	ListTicketAuditLog(ctx context.Context, in *ListTicketAuditLogReq, opts ...grpc.CallOption) (*ListTicketAuditLogRes, error)
	// Deprecated: Do not use.
	// Public method to assign a ticket
	AssignSelf(ctx context.Context, in *CreateSelfAssignReq, opts ...grpc.CallOption) (*CreateSelfAssignRes, error)
	// Public Method to edit a ticket.
	// EditTicket would be deprecated
	EditMaskTicket(ctx context.Context, in *EditMaskTicketReq, opts ...grpc.CallOption) (*EditMaskTicketRes, error)
	// Deprecated: Do not use.
	ListAllocatedTickets(ctx context.Context, in *ListAllocatedTicketReq, opts ...grpc.CallOption) (*ListAllocatedTicketRes, error)
	// public method - to return list of available tickets to pick for an Agent
	ListAvailableAgentTickets(ctx context.Context, in *ListAvailableAgentTicketsRequest, opts ...grpc.CallOption) (*ListAvailableAgentTicketsResponse, error)
	// public method - to return list of available tickets to pick for an Agent
	ListAgentTickets(ctx context.Context, in *ListAgentTicketsRequest, opts ...grpc.CallOption) (*ListAgentTicketsResponse, error)
	// public method to fetch list of skills for a tickets user
	ListSkills(ctx context.Context, in *ListSkillsRequest, opts ...grpc.CallOption) (*ListSkillsResponse, error)
	// public method to fetch list of users for a tickets user
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// Any agent can close the ticket. No BE validation required
	CloseTicketAction(ctx context.Context, in *CloseTicketActionRequest, opts ...grpc.CallOption) (*CloseTicketActionResponse, error)
	// Deprecated: Do not use.
	// Public method to assign a ticket action
	AssignTicketAction(ctx context.Context, in *AssignTicketActionRequest, opts ...grpc.CallOption) (*AssignTicketActionResponse, error)
	// Public method to assign a ticket
	CreateTicketAction(ctx context.Context, in *CreateTicketActionRequest, opts ...grpc.CallOption) (*CreateTicketActionResponse, error)
	// Deprecated: Do not use.
	// Public method to change the Status of a ticket
	ChangeTicketStatus(ctx context.Context, in *ChangeTicketStatusRequest, opts ...grpc.CallOption) (*ChangeTicketStatusResponse, error)
	// Public method to create a Ticket Template
	CreateTicketTemplate(ctx context.Context, in *CreateTicketTemplateRequest, opts ...grpc.CallOption) (*CreateTicketTemplateResponse, error)
	// Public method to Edit a Ticket Template
	EditTicketTemplate(ctx context.Context, in *EditTicketTemplateRequest, opts ...grpc.CallOption) (*EditTicketTemplateResponse, error)
	// Public method to all Ticket Templates
	ListTicketTemplate(ctx context.Context, in *ListTicketTemplateRequest, opts ...grpc.CallOption) (*ListTicketTemplateResponse, error)
	// Public method to assign a Template To a Project
	AssignTicketTemplate(ctx context.Context, in *AssignProjectTemplateRequest, opts ...grpc.CallOption) (*AssignProjectTemplateResponse, error)
	// Public method to list all Action Types
	GetAllActionType(ctx context.Context, in *GetActionTypeRequest, opts ...grpc.CallOption) (*GetActionTypeResponse, error)
	// Deprecated: Do not use.
	// Public method to list all Action Types
	GetPhoneNumberType(ctx context.Context, in *GetPhoneNumberTypeRequest, opts ...grpc.CallOption) (*GetPhoneNumberTypeResponse, error)
	// Public method to addEntityRef
	AddEntityRef(ctx context.Context, in *AddEntityRefRequest, opts ...grpc.CallOption) (*AddEntityRefResponse, error)
	// Public method to listTicketsByEntityRef
	ListTicketsByEntityRef(ctx context.Context, in *ListTicketsByEntityRefRequest, opts ...grpc.CallOption) (*ListTicketsByEntityRefResponse, error)
	// Public method to listEntityRefsByTicket
	ListEntityRefsByTicket(ctx context.Context, in *ListEntityRefsByTicketRequest, opts ...grpc.CallOption) (*ListEntityRefsByTicketResponse, error)
}

type ticketsClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketsClient(cc grpc.ClientConnInterface) TicketsClient {
	return &ticketsClient{cc}
}

func (c *ticketsClient) CreateTicket(ctx context.Context, in *CreateTicketReq, opts ...grpc.CallOption) (*CreateTicketRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTicketRes)
	err := c.cc.Invoke(ctx, Tickets_CreateTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *ticketsClient) EditTicket(ctx context.Context, in *EditTicketReq, opts ...grpc.CallOption) (*EditTicketRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditTicketRes)
	err := c.cc.Invoke(ctx, Tickets_EditTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) ListTickets(ctx context.Context, in *ListTicketsReq, opts ...grpc.CallOption) (*ListTicketsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTicketsRes)
	err := c.cc.Invoke(ctx, Tickets_ListTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *ticketsClient) AssignTicket(ctx context.Context, in *AssignTicketReq, opts ...grpc.CallOption) (*AssignTicketRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignTicketRes)
	err := c.cc.Invoke(ctx, Tickets_AssignTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) CloseTicket(ctx context.Context, in *CloseTicketReq, opts ...grpc.CallOption) (*CloseTicketRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseTicketRes)
	err := c.cc.Invoke(ctx, Tickets_CloseTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) ViewTicket(ctx context.Context, in *ViewTicketReq, opts ...grpc.CallOption) (*ViewTicketRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ViewTicketRes)
	err := c.cc.Invoke(ctx, Tickets_ViewTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) CreateComment(ctx context.Context, in *CreateCommentReq, opts ...grpc.CallOption) (*CreateCommentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCommentRes)
	err := c.cc.Invoke(ctx, Tickets_CreateComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) EnableProject(ctx context.Context, in *EnableProjectReq, opts ...grpc.CallOption) (*EnableProjectRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableProjectRes)
	err := c.cc.Invoke(ctx, Tickets_EnableProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) ListEnabledProjects(ctx context.Context, in *ListEnabledProjectsReq, opts ...grpc.CallOption) (*ListEnabledProjectsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEnabledProjectsRes)
	err := c.cc.Invoke(ctx, Tickets_ListEnabledProjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) CreateSLA(ctx context.Context, in *CreateSlaReq, opts ...grpc.CallOption) (*CreateSlaRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSlaRes)
	err := c.cc.Invoke(ctx, Tickets_CreateSLA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) ListSLA(ctx context.Context, in *ListSlaReq, opts ...grpc.CallOption) (*ListSlaRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSlaRes)
	err := c.cc.Invoke(ctx, Tickets_ListSLA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) UpdateSLA(ctx context.Context, in *UpdateSlaReq, opts ...grpc.CallOption) (*UpdateSlaRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSlaRes)
	err := c.cc.Invoke(ctx, Tickets_UpdateSLA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) ListSLACondition(ctx context.Context, in *ListSlaConditionReq, opts ...grpc.CallOption) (*ListSlaConditionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSlaConditionRes)
	err := c.cc.Invoke(ctx, Tickets_ListSLACondition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) ReplyComment(ctx context.Context, in *ReplyCommentReq, opts ...grpc.CallOption) (*ReplyCommentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplyCommentRes)
	err := c.cc.Invoke(ctx, Tickets_ReplyComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) ListTicketAuditLog(ctx context.Context, in *ListTicketAuditLogReq, opts ...grpc.CallOption) (*ListTicketAuditLogRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTicketAuditLogRes)
	err := c.cc.Invoke(ctx, Tickets_ListTicketAuditLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *ticketsClient) AssignSelf(ctx context.Context, in *CreateSelfAssignReq, opts ...grpc.CallOption) (*CreateSelfAssignRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSelfAssignRes)
	err := c.cc.Invoke(ctx, Tickets_AssignSelf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) EditMaskTicket(ctx context.Context, in *EditMaskTicketReq, opts ...grpc.CallOption) (*EditMaskTicketRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditMaskTicketRes)
	err := c.cc.Invoke(ctx, Tickets_EditMaskTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *ticketsClient) ListAllocatedTickets(ctx context.Context, in *ListAllocatedTicketReq, opts ...grpc.CallOption) (*ListAllocatedTicketRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAllocatedTicketRes)
	err := c.cc.Invoke(ctx, Tickets_ListAllocatedTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) ListAvailableAgentTickets(ctx context.Context, in *ListAvailableAgentTicketsRequest, opts ...grpc.CallOption) (*ListAvailableAgentTicketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAvailableAgentTicketsResponse)
	err := c.cc.Invoke(ctx, Tickets_ListAvailableAgentTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) ListAgentTickets(ctx context.Context, in *ListAgentTicketsRequest, opts ...grpc.CallOption) (*ListAgentTicketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentTicketsResponse)
	err := c.cc.Invoke(ctx, Tickets_ListAgentTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) ListSkills(ctx context.Context, in *ListSkillsRequest, opts ...grpc.CallOption) (*ListSkillsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSkillsResponse)
	err := c.cc.Invoke(ctx, Tickets_ListSkills_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, Tickets_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) CloseTicketAction(ctx context.Context, in *CloseTicketActionRequest, opts ...grpc.CallOption) (*CloseTicketActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseTicketActionResponse)
	err := c.cc.Invoke(ctx, Tickets_CloseTicketAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *ticketsClient) AssignTicketAction(ctx context.Context, in *AssignTicketActionRequest, opts ...grpc.CallOption) (*AssignTicketActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignTicketActionResponse)
	err := c.cc.Invoke(ctx, Tickets_AssignTicketAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) CreateTicketAction(ctx context.Context, in *CreateTicketActionRequest, opts ...grpc.CallOption) (*CreateTicketActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTicketActionResponse)
	err := c.cc.Invoke(ctx, Tickets_CreateTicketAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *ticketsClient) ChangeTicketStatus(ctx context.Context, in *ChangeTicketStatusRequest, opts ...grpc.CallOption) (*ChangeTicketStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeTicketStatusResponse)
	err := c.cc.Invoke(ctx, Tickets_ChangeTicketStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) CreateTicketTemplate(ctx context.Context, in *CreateTicketTemplateRequest, opts ...grpc.CallOption) (*CreateTicketTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTicketTemplateResponse)
	err := c.cc.Invoke(ctx, Tickets_CreateTicketTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) EditTicketTemplate(ctx context.Context, in *EditTicketTemplateRequest, opts ...grpc.CallOption) (*EditTicketTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditTicketTemplateResponse)
	err := c.cc.Invoke(ctx, Tickets_EditTicketTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) ListTicketTemplate(ctx context.Context, in *ListTicketTemplateRequest, opts ...grpc.CallOption) (*ListTicketTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTicketTemplateResponse)
	err := c.cc.Invoke(ctx, Tickets_ListTicketTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) AssignTicketTemplate(ctx context.Context, in *AssignProjectTemplateRequest, opts ...grpc.CallOption) (*AssignProjectTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignProjectTemplateResponse)
	err := c.cc.Invoke(ctx, Tickets_AssignTicketTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) GetAllActionType(ctx context.Context, in *GetActionTypeRequest, opts ...grpc.CallOption) (*GetActionTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActionTypeResponse)
	err := c.cc.Invoke(ctx, Tickets_GetAllActionType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *ticketsClient) GetPhoneNumberType(ctx context.Context, in *GetPhoneNumberTypeRequest, opts ...grpc.CallOption) (*GetPhoneNumberTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPhoneNumberTypeResponse)
	err := c.cc.Invoke(ctx, Tickets_GetPhoneNumberType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) AddEntityRef(ctx context.Context, in *AddEntityRefRequest, opts ...grpc.CallOption) (*AddEntityRefResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddEntityRefResponse)
	err := c.cc.Invoke(ctx, Tickets_AddEntityRef_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) ListTicketsByEntityRef(ctx context.Context, in *ListTicketsByEntityRefRequest, opts ...grpc.CallOption) (*ListTicketsByEntityRefResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTicketsByEntityRefResponse)
	err := c.cc.Invoke(ctx, Tickets_ListTicketsByEntityRef_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) ListEntityRefsByTicket(ctx context.Context, in *ListEntityRefsByTicketRequest, opts ...grpc.CallOption) (*ListEntityRefsByTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEntityRefsByTicketResponse)
	err := c.cc.Invoke(ctx, Tickets_ListEntityRefsByTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketsServer is the server API for Tickets service.
// All implementations must embed UnimplementedTicketsServer
// for forward compatibility
//
// Tickets service is the public api for the tickets service., for public integrations to manage tickets / customer service requests. Can be used by any authorized frontend-app.
type TicketsServer interface {
	// Public Method to create a ticket.
	CreateTicket(context.Context, *CreateTicketReq) (*CreateTicketRes, error)
	// Deprecated: Do not use.
	// Public Method to edit a ticket.
	EditTicket(context.Context, *EditTicketReq) (*EditTicketRes, error)
	// Public method to list tickets
	ListTickets(context.Context, *ListTicketsReq) (*ListTicketsRes, error)
	// Deprecated: Do not use.
	// Public method to assign ticket
	// Would be deprecated
	AssignTicket(context.Context, *AssignTicketReq) (*AssignTicketRes, error)
	// Public Method to Close a ticket
	// Any agent can close the ticket. No BE validation required
	CloseTicket(context.Context, *CloseTicketReq) (*CloseTicketRes, error)
	// Public method to view ticket
	ViewTicket(context.Context, *ViewTicketReq) (*ViewTicketRes, error)
	// Public Method to create a Comment.
	CreateComment(context.Context, *CreateCommentReq) (*CreateCommentRes, error)
	// Public method to Enable Project for Ticketing system
	EnableProject(context.Context, *EnableProjectReq) (*EnableProjectRes, error)
	// Public method to List projects enabled for Ticketing system
	ListEnabledProjects(context.Context, *ListEnabledProjectsReq) (*ListEnabledProjectsRes, error)
	// Public Method to create a sla.
	CreateSLA(context.Context, *CreateSlaReq) (*CreateSlaRes, error)
	// Public method to list sla
	ListSLA(context.Context, *ListSlaReq) (*ListSlaRes, error)
	// Public method to update sla
	UpdateSLA(context.Context, *UpdateSlaReq) (*UpdateSlaRes, error)
	// Public method to list sla_condition
	ListSLACondition(context.Context, *ListSlaConditionReq) (*ListSlaConditionRes, error)
	// Public method to list sla_condition
	ReplyComment(context.Context, *ReplyCommentReq) (*ReplyCommentRes, error)
	// Public method to List audit log for Ticketing system
	ListTicketAuditLog(context.Context, *ListTicketAuditLogReq) (*ListTicketAuditLogRes, error)
	// Deprecated: Do not use.
	// Public method to assign a ticket
	AssignSelf(context.Context, *CreateSelfAssignReq) (*CreateSelfAssignRes, error)
	// Public Method to edit a ticket.
	// EditTicket would be deprecated
	EditMaskTicket(context.Context, *EditMaskTicketReq) (*EditMaskTicketRes, error)
	// Deprecated: Do not use.
	ListAllocatedTickets(context.Context, *ListAllocatedTicketReq) (*ListAllocatedTicketRes, error)
	// public method - to return list of available tickets to pick for an Agent
	ListAvailableAgentTickets(context.Context, *ListAvailableAgentTicketsRequest) (*ListAvailableAgentTicketsResponse, error)
	// public method - to return list of available tickets to pick for an Agent
	ListAgentTickets(context.Context, *ListAgentTicketsRequest) (*ListAgentTicketsResponse, error)
	// public method to fetch list of skills for a tickets user
	ListSkills(context.Context, *ListSkillsRequest) (*ListSkillsResponse, error)
	// public method to fetch list of users for a tickets user
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// Any agent can close the ticket. No BE validation required
	CloseTicketAction(context.Context, *CloseTicketActionRequest) (*CloseTicketActionResponse, error)
	// Deprecated: Do not use.
	// Public method to assign a ticket action
	AssignTicketAction(context.Context, *AssignTicketActionRequest) (*AssignTicketActionResponse, error)
	// Public method to assign a ticket
	CreateTicketAction(context.Context, *CreateTicketActionRequest) (*CreateTicketActionResponse, error)
	// Deprecated: Do not use.
	// Public method to change the Status of a ticket
	ChangeTicketStatus(context.Context, *ChangeTicketStatusRequest) (*ChangeTicketStatusResponse, error)
	// Public method to create a Ticket Template
	CreateTicketTemplate(context.Context, *CreateTicketTemplateRequest) (*CreateTicketTemplateResponse, error)
	// Public method to Edit a Ticket Template
	EditTicketTemplate(context.Context, *EditTicketTemplateRequest) (*EditTicketTemplateResponse, error)
	// Public method to all Ticket Templates
	ListTicketTemplate(context.Context, *ListTicketTemplateRequest) (*ListTicketTemplateResponse, error)
	// Public method to assign a Template To a Project
	AssignTicketTemplate(context.Context, *AssignProjectTemplateRequest) (*AssignProjectTemplateResponse, error)
	// Public method to list all Action Types
	GetAllActionType(context.Context, *GetActionTypeRequest) (*GetActionTypeResponse, error)
	// Deprecated: Do not use.
	// Public method to list all Action Types
	GetPhoneNumberType(context.Context, *GetPhoneNumberTypeRequest) (*GetPhoneNumberTypeResponse, error)
	// Public method to addEntityRef
	AddEntityRef(context.Context, *AddEntityRefRequest) (*AddEntityRefResponse, error)
	// Public method to listTicketsByEntityRef
	ListTicketsByEntityRef(context.Context, *ListTicketsByEntityRefRequest) (*ListTicketsByEntityRefResponse, error)
	// Public method to listEntityRefsByTicket
	ListEntityRefsByTicket(context.Context, *ListEntityRefsByTicketRequest) (*ListEntityRefsByTicketResponse, error)
	mustEmbedUnimplementedTicketsServer()
}

// UnimplementedTicketsServer must be embedded to have forward compatible implementations.
type UnimplementedTicketsServer struct {
}

func (UnimplementedTicketsServer) CreateTicket(context.Context, *CreateTicketReq) (*CreateTicketRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
}
func (UnimplementedTicketsServer) EditTicket(context.Context, *EditTicketReq) (*EditTicketRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTicket not implemented")
}
func (UnimplementedTicketsServer) ListTickets(context.Context, *ListTicketsReq) (*ListTicketsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTickets not implemented")
}
func (UnimplementedTicketsServer) AssignTicket(context.Context, *AssignTicketReq) (*AssignTicketRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignTicket not implemented")
}
func (UnimplementedTicketsServer) CloseTicket(context.Context, *CloseTicketReq) (*CloseTicketRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTicket not implemented")
}
func (UnimplementedTicketsServer) ViewTicket(context.Context, *ViewTicketReq) (*ViewTicketRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewTicket not implemented")
}
func (UnimplementedTicketsServer) CreateComment(context.Context, *CreateCommentReq) (*CreateCommentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedTicketsServer) EnableProject(context.Context, *EnableProjectReq) (*EnableProjectRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableProject not implemented")
}
func (UnimplementedTicketsServer) ListEnabledProjects(context.Context, *ListEnabledProjectsReq) (*ListEnabledProjectsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnabledProjects not implemented")
}
func (UnimplementedTicketsServer) CreateSLA(context.Context, *CreateSlaReq) (*CreateSlaRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSLA not implemented")
}
func (UnimplementedTicketsServer) ListSLA(context.Context, *ListSlaReq) (*ListSlaRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSLA not implemented")
}
func (UnimplementedTicketsServer) UpdateSLA(context.Context, *UpdateSlaReq) (*UpdateSlaRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSLA not implemented")
}
func (UnimplementedTicketsServer) ListSLACondition(context.Context, *ListSlaConditionReq) (*ListSlaConditionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSLACondition not implemented")
}
func (UnimplementedTicketsServer) ReplyComment(context.Context, *ReplyCommentReq) (*ReplyCommentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyComment not implemented")
}
func (UnimplementedTicketsServer) ListTicketAuditLog(context.Context, *ListTicketAuditLogReq) (*ListTicketAuditLogRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTicketAuditLog not implemented")
}
func (UnimplementedTicketsServer) AssignSelf(context.Context, *CreateSelfAssignReq) (*CreateSelfAssignRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignSelf not implemented")
}
func (UnimplementedTicketsServer) EditMaskTicket(context.Context, *EditMaskTicketReq) (*EditMaskTicketRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMaskTicket not implemented")
}
func (UnimplementedTicketsServer) ListAllocatedTickets(context.Context, *ListAllocatedTicketReq) (*ListAllocatedTicketRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllocatedTickets not implemented")
}
func (UnimplementedTicketsServer) ListAvailableAgentTickets(context.Context, *ListAvailableAgentTicketsRequest) (*ListAvailableAgentTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableAgentTickets not implemented")
}
func (UnimplementedTicketsServer) ListAgentTickets(context.Context, *ListAgentTicketsRequest) (*ListAgentTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentTickets not implemented")
}
func (UnimplementedTicketsServer) ListSkills(context.Context, *ListSkillsRequest) (*ListSkillsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSkills not implemented")
}
func (UnimplementedTicketsServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedTicketsServer) CloseTicketAction(context.Context, *CloseTicketActionRequest) (*CloseTicketActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTicketAction not implemented")
}
func (UnimplementedTicketsServer) AssignTicketAction(context.Context, *AssignTicketActionRequest) (*AssignTicketActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignTicketAction not implemented")
}
func (UnimplementedTicketsServer) CreateTicketAction(context.Context, *CreateTicketActionRequest) (*CreateTicketActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicketAction not implemented")
}
func (UnimplementedTicketsServer) ChangeTicketStatus(context.Context, *ChangeTicketStatusRequest) (*ChangeTicketStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeTicketStatus not implemented")
}
func (UnimplementedTicketsServer) CreateTicketTemplate(context.Context, *CreateTicketTemplateRequest) (*CreateTicketTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicketTemplate not implemented")
}
func (UnimplementedTicketsServer) EditTicketTemplate(context.Context, *EditTicketTemplateRequest) (*EditTicketTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTicketTemplate not implemented")
}
func (UnimplementedTicketsServer) ListTicketTemplate(context.Context, *ListTicketTemplateRequest) (*ListTicketTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTicketTemplate not implemented")
}
func (UnimplementedTicketsServer) AssignTicketTemplate(context.Context, *AssignProjectTemplateRequest) (*AssignProjectTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignTicketTemplate not implemented")
}
func (UnimplementedTicketsServer) GetAllActionType(context.Context, *GetActionTypeRequest) (*GetActionTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllActionType not implemented")
}
func (UnimplementedTicketsServer) GetPhoneNumberType(context.Context, *GetPhoneNumberTypeRequest) (*GetPhoneNumberTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhoneNumberType not implemented")
}
func (UnimplementedTicketsServer) AddEntityRef(context.Context, *AddEntityRefRequest) (*AddEntityRefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEntityRef not implemented")
}
func (UnimplementedTicketsServer) ListTicketsByEntityRef(context.Context, *ListTicketsByEntityRefRequest) (*ListTicketsByEntityRefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTicketsByEntityRef not implemented")
}
func (UnimplementedTicketsServer) ListEntityRefsByTicket(context.Context, *ListEntityRefsByTicketRequest) (*ListEntityRefsByTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntityRefsByTicket not implemented")
}
func (UnimplementedTicketsServer) mustEmbedUnimplementedTicketsServer() {}

// UnsafeTicketsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketsServer will
// result in compilation errors.
type UnsafeTicketsServer interface {
	mustEmbedUnimplementedTicketsServer()
}

func RegisterTicketsServer(s grpc.ServiceRegistrar, srv TicketsServer) {
	s.RegisterService(&Tickets_ServiceDesc, srv)
}

func _Tickets_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_CreateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).CreateTicket(ctx, req.(*CreateTicketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_EditTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditTicketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).EditTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_EditTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).EditTicket(ctx, req.(*EditTicketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_ListTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTicketsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).ListTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_ListTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).ListTickets(ctx, req.(*ListTicketsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_AssignTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignTicketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).AssignTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_AssignTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).AssignTicket(ctx, req.(*AssignTicketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_CloseTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseTicketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).CloseTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_CloseTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).CloseTicket(ctx, req.(*CloseTicketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_ViewTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewTicketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).ViewTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_ViewTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).ViewTicket(ctx, req.(*ViewTicketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).CreateComment(ctx, req.(*CreateCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_EnableProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).EnableProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_EnableProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).EnableProject(ctx, req.(*EnableProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_ListEnabledProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnabledProjectsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).ListEnabledProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_ListEnabledProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).ListEnabledProjects(ctx, req.(*ListEnabledProjectsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_CreateSLA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSlaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).CreateSLA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_CreateSLA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).CreateSLA(ctx, req.(*CreateSlaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_ListSLA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSlaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).ListSLA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_ListSLA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).ListSLA(ctx, req.(*ListSlaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_UpdateSLA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSlaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).UpdateSLA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_UpdateSLA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).UpdateSLA(ctx, req.(*UpdateSlaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_ListSLACondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSlaConditionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).ListSLACondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_ListSLACondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).ListSLACondition(ctx, req.(*ListSlaConditionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_ReplyComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).ReplyComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_ReplyComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).ReplyComment(ctx, req.(*ReplyCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_ListTicketAuditLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTicketAuditLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).ListTicketAuditLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_ListTicketAuditLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).ListTicketAuditLog(ctx, req.(*ListTicketAuditLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_AssignSelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSelfAssignReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).AssignSelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_AssignSelf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).AssignSelf(ctx, req.(*CreateSelfAssignReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_EditMaskTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditMaskTicketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).EditMaskTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_EditMaskTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).EditMaskTicket(ctx, req.(*EditMaskTicketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_ListAllocatedTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllocatedTicketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).ListAllocatedTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_ListAllocatedTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).ListAllocatedTickets(ctx, req.(*ListAllocatedTicketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_ListAvailableAgentTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvailableAgentTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).ListAvailableAgentTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_ListAvailableAgentTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).ListAvailableAgentTickets(ctx, req.(*ListAvailableAgentTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_ListAgentTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).ListAgentTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_ListAgentTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).ListAgentTickets(ctx, req.(*ListAgentTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_ListSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSkillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).ListSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_ListSkills_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).ListSkills(ctx, req.(*ListSkillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_CloseTicketAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseTicketActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).CloseTicketAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_CloseTicketAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).CloseTicketAction(ctx, req.(*CloseTicketActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_AssignTicketAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignTicketActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).AssignTicketAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_AssignTicketAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).AssignTicketAction(ctx, req.(*AssignTicketActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_CreateTicketAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).CreateTicketAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_CreateTicketAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).CreateTicketAction(ctx, req.(*CreateTicketActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_ChangeTicketStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeTicketStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).ChangeTicketStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_ChangeTicketStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).ChangeTicketStatus(ctx, req.(*ChangeTicketStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_CreateTicketTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).CreateTicketTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_CreateTicketTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).CreateTicketTemplate(ctx, req.(*CreateTicketTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_EditTicketTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditTicketTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).EditTicketTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_EditTicketTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).EditTicketTemplate(ctx, req.(*EditTicketTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_ListTicketTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTicketTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).ListTicketTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_ListTicketTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).ListTicketTemplate(ctx, req.(*ListTicketTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_AssignTicketTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignProjectTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).AssignTicketTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_AssignTicketTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).AssignTicketTemplate(ctx, req.(*AssignProjectTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_GetAllActionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).GetAllActionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_GetAllActionType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).GetAllActionType(ctx, req.(*GetActionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_GetPhoneNumberType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhoneNumberTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).GetPhoneNumberType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_GetPhoneNumberType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).GetPhoneNumberType(ctx, req.(*GetPhoneNumberTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_AddEntityRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEntityRefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).AddEntityRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_AddEntityRef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).AddEntityRef(ctx, req.(*AddEntityRefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_ListTicketsByEntityRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTicketsByEntityRefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).ListTicketsByEntityRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_ListTicketsByEntityRef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).ListTicketsByEntityRef(ctx, req.(*ListTicketsByEntityRefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_ListEntityRefsByTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntityRefsByTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).ListEntityRefsByTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tickets_ListEntityRefsByTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).ListEntityRefsByTicket(ctx, req.(*ListEntityRefsByTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tickets_ServiceDesc is the grpc.ServiceDesc for Tickets service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tickets_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.tickets.Tickets",
	HandlerType: (*TicketsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTicket",
			Handler:    _Tickets_CreateTicket_Handler,
		},
		{
			MethodName: "EditTicket",
			Handler:    _Tickets_EditTicket_Handler,
		},
		{
			MethodName: "ListTickets",
			Handler:    _Tickets_ListTickets_Handler,
		},
		{
			MethodName: "AssignTicket",
			Handler:    _Tickets_AssignTicket_Handler,
		},
		{
			MethodName: "CloseTicket",
			Handler:    _Tickets_CloseTicket_Handler,
		},
		{
			MethodName: "ViewTicket",
			Handler:    _Tickets_ViewTicket_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _Tickets_CreateComment_Handler,
		},
		{
			MethodName: "EnableProject",
			Handler:    _Tickets_EnableProject_Handler,
		},
		{
			MethodName: "ListEnabledProjects",
			Handler:    _Tickets_ListEnabledProjects_Handler,
		},
		{
			MethodName: "CreateSLA",
			Handler:    _Tickets_CreateSLA_Handler,
		},
		{
			MethodName: "ListSLA",
			Handler:    _Tickets_ListSLA_Handler,
		},
		{
			MethodName: "UpdateSLA",
			Handler:    _Tickets_UpdateSLA_Handler,
		},
		{
			MethodName: "ListSLACondition",
			Handler:    _Tickets_ListSLACondition_Handler,
		},
		{
			MethodName: "ReplyComment",
			Handler:    _Tickets_ReplyComment_Handler,
		},
		{
			MethodName: "ListTicketAuditLog",
			Handler:    _Tickets_ListTicketAuditLog_Handler,
		},
		{
			MethodName: "AssignSelf",
			Handler:    _Tickets_AssignSelf_Handler,
		},
		{
			MethodName: "EditMaskTicket",
			Handler:    _Tickets_EditMaskTicket_Handler,
		},
		{
			MethodName: "ListAllocatedTickets",
			Handler:    _Tickets_ListAllocatedTickets_Handler,
		},
		{
			MethodName: "ListAvailableAgentTickets",
			Handler:    _Tickets_ListAvailableAgentTickets_Handler,
		},
		{
			MethodName: "ListAgentTickets",
			Handler:    _Tickets_ListAgentTickets_Handler,
		},
		{
			MethodName: "ListSkills",
			Handler:    _Tickets_ListSkills_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Tickets_ListUsers_Handler,
		},
		{
			MethodName: "CloseTicketAction",
			Handler:    _Tickets_CloseTicketAction_Handler,
		},
		{
			MethodName: "AssignTicketAction",
			Handler:    _Tickets_AssignTicketAction_Handler,
		},
		{
			MethodName: "CreateTicketAction",
			Handler:    _Tickets_CreateTicketAction_Handler,
		},
		{
			MethodName: "ChangeTicketStatus",
			Handler:    _Tickets_ChangeTicketStatus_Handler,
		},
		{
			MethodName: "CreateTicketTemplate",
			Handler:    _Tickets_CreateTicketTemplate_Handler,
		},
		{
			MethodName: "EditTicketTemplate",
			Handler:    _Tickets_EditTicketTemplate_Handler,
		},
		{
			MethodName: "ListTicketTemplate",
			Handler:    _Tickets_ListTicketTemplate_Handler,
		},
		{
			MethodName: "AssignTicketTemplate",
			Handler:    _Tickets_AssignTicketTemplate_Handler,
		},
		{
			MethodName: "GetAllActionType",
			Handler:    _Tickets_GetAllActionType_Handler,
		},
		{
			MethodName: "GetPhoneNumberType",
			Handler:    _Tickets_GetPhoneNumberType_Handler,
		},
		{
			MethodName: "AddEntityRef",
			Handler:    _Tickets_AddEntityRef_Handler,
		},
		{
			MethodName: "ListTicketsByEntityRef",
			Handler:    _Tickets_ListTicketsByEntityRef_Handler,
		},
		{
			MethodName: "ListEntityRefsByTicket",
			Handler:    _Tickets_ListEntityRefsByTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1alpha1/tickets/service.proto",
}
