// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1alpha1/scorecards/service.proto

package scorecards

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Scorecards_CreateScorecard_FullMethodName          = "/api.v1alpha1.scorecards.Scorecards/CreateScorecard"
	Scorecards_ListScorecards_FullMethodName           = "/api.v1alpha1.scorecards.Scorecards/ListScorecards"
	Scorecards_UpdateScorecard_FullMethodName          = "/api.v1alpha1.scorecards.Scorecards/UpdateScorecard"
	Scorecards_DeleteScorecard_FullMethodName          = "/api.v1alpha1.scorecards.Scorecards/DeleteScorecard"
	Scorecards_GetScorecard_FullMethodName             = "/api.v1alpha1.scorecards.Scorecards/GetScorecard"
	Scorecards_CreateQuestion_FullMethodName           = "/api.v1alpha1.scorecards.Scorecards/CreateQuestion"
	Scorecards_ListQuestions_FullMethodName            = "/api.v1alpha1.scorecards.Scorecards/ListQuestions"
	Scorecards_UpdateQuestion_FullMethodName           = "/api.v1alpha1.scorecards.Scorecards/UpdateQuestion"
	Scorecards_DeleteQuestion_FullMethodName           = "/api.v1alpha1.scorecards.Scorecards/DeleteQuestion"
	Scorecards_GetQuestion_FullMethodName              = "/api.v1alpha1.scorecards.Scorecards/GetQuestion"
	Scorecards_BulkCreateQuestions_FullMethodName      = "/api.v1alpha1.scorecards.Scorecards/BulkCreateQuestions"
	Scorecards_CreateCategory_FullMethodName           = "/api.v1alpha1.scorecards.Scorecards/CreateCategory"
	Scorecards_ListCategories_FullMethodName           = "/api.v1alpha1.scorecards.Scorecards/ListCategories"
	Scorecards_UpdateCategory_FullMethodName           = "/api.v1alpha1.scorecards.Scorecards/UpdateCategory"
	Scorecards_DeleteCategory_FullMethodName           = "/api.v1alpha1.scorecards.Scorecards/DeleteCategory"
	Scorecards_GetCategory_FullMethodName              = "/api.v1alpha1.scorecards.Scorecards/GetCategory"
	Scorecards_CreateScorecardQuestion_FullMethodName  = "/api.v1alpha1.scorecards.Scorecards/CreateScorecardQuestion"
	Scorecards_UpdateScorecardQuestion_FullMethodName  = "/api.v1alpha1.scorecards.Scorecards/UpdateScorecardQuestion"
	Scorecards_DeleteScorecardQuestion_FullMethodName  = "/api.v1alpha1.scorecards.Scorecards/DeleteScorecardQuestion"
	Scorecards_GetScorecardQuestion_FullMethodName     = "/api.v1alpha1.scorecards.Scorecards/GetScorecardQuestion"
	Scorecards_CreateSection_FullMethodName            = "/api.v1alpha1.scorecards.Scorecards/CreateSection"
	Scorecards_ListSections_FullMethodName             = "/api.v1alpha1.scorecards.Scorecards/ListSections"
	Scorecards_UpdateSection_FullMethodName            = "/api.v1alpha1.scorecards.Scorecards/UpdateSection"
	Scorecards_GetSection_FullMethodName               = "/api.v1alpha1.scorecards.Scorecards/GetSection"
	Scorecards_DeleteSection_FullMethodName            = "/api.v1alpha1.scorecards.Scorecards/DeleteSection"
	Scorecards_CreateQuestionCategory_FullMethodName   = "/api.v1alpha1.scorecards.Scorecards/CreateQuestionCategory"
	Scorecards_DeleteQuestionCategory_FullMethodName   = "/api.v1alpha1.scorecards.Scorecards/DeleteQuestionCategory"
	Scorecards_CreateEvaluation_FullMethodName         = "/api.v1alpha1.scorecards.Scorecards/CreateEvaluation"
	Scorecards_DeleteEvaluation_FullMethodName         = "/api.v1alpha1.scorecards.Scorecards/DeleteEvaluation"
	Scorecards_ScoreEvaluation_FullMethodName          = "/api.v1alpha1.scorecards.Scorecards/ScoreEvaluation"
	Scorecards_UpdateEvaluation_FullMethodName         = "/api.v1alpha1.scorecards.Scorecards/UpdateEvaluation"
	Scorecards_GetEvaluation_FullMethodName            = "/api.v1alpha1.scorecards.Scorecards/GetEvaluation"
	Scorecards_ListEvaluations_FullMethodName          = "/api.v1alpha1.scorecards.Scorecards/ListEvaluations"
	Scorecards_CreateEvaluationQuestion_FullMethodName = "/api.v1alpha1.scorecards.Scorecards/CreateEvaluationQuestion"
	Scorecards_UpdateEvaluationQuestion_FullMethodName = "/api.v1alpha1.scorecards.Scorecards/UpdateEvaluationQuestion"
	Scorecards_DeleteEvaluationQuestion_FullMethodName = "/api.v1alpha1.scorecards.Scorecards/DeleteEvaluationQuestion"
	Scorecards_SampleCallsByCategory_FullMethodName    = "/api.v1alpha1.scorecards.Scorecards/SampleCallsByCategory"
	Scorecards_CreateAutoQuestion_FullMethodName       = "/api.v1alpha1.scorecards.Scorecards/CreateAutoQuestion"
	Scorecards_UpdateAutoQuestion_FullMethodName       = "/api.v1alpha1.scorecards.Scorecards/UpdateAutoQuestion"
	Scorecards_DeleteAutoQuestion_FullMethodName       = "/api.v1alpha1.scorecards.Scorecards/DeleteAutoQuestion"
	Scorecards_GetAutoQuestion_FullMethodName          = "/api.v1alpha1.scorecards.Scorecards/GetAutoQuestion"
	Scorecards_GetAutoEvaluation_FullMethodName        = "/api.v1alpha1.scorecards.Scorecards/GetAutoEvaluation"
	Scorecards_ListAutoEvaluations_FullMethodName      = "/api.v1alpha1.scorecards.Scorecards/ListAutoEvaluations"
	Scorecards_StreamAutoEvaluations_FullMethodName    = "/api.v1alpha1.scorecards.Scorecards/StreamAutoEvaluations"
	Scorecards_DeleteAutoEvaluation_FullMethodName     = "/api.v1alpha1.scorecards.Scorecards/DeleteAutoEvaluation"
	Scorecards_PreviewEvaluationScore_FullMethodName   = "/api.v1alpha1.scorecards.Scorecards/PreviewEvaluationScore"
	Scorecards_RestoreEvaluation_FullMethodName        = "/api.v1alpha1.scorecards.Scorecards/RestoreEvaluation"
	Scorecards_CreateSmartQuestion_FullMethodName      = "/api.v1alpha1.scorecards.Scorecards/CreateSmartQuestion"
	Scorecards_UpdateSmartQuestion_FullMethodName      = "/api.v1alpha1.scorecards.Scorecards/UpdateSmartQuestion"
	Scorecards_DeleteSmartQuestion_FullMethodName      = "/api.v1alpha1.scorecards.Scorecards/DeleteSmartQuestion"
	Scorecards_ListSmartEvaluations_FullMethodName     = "/api.v1alpha1.scorecards.Scorecards/ListSmartEvaluations"
	Scorecards_DeleteSmartEvaluation_FullMethodName    = "/api.v1alpha1.scorecards.Scorecards/DeleteSmartEvaluation"
	Scorecards_GetSmartEvaluation_FullMethodName       = "/api.v1alpha1.scorecards.Scorecards/GetSmartEvaluation"
)

// ScorecardsClient is the client API for Scorecards service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScorecardsClient interface {
	// CreateScorecard creates a new scorecard
	CreateScorecard(ctx context.Context, in *CreateScorecardRequest, opts ...grpc.CallOption) (*CreateScorecardResponse, error)
	// ListScorecards lists scorecards
	ListScorecards(ctx context.Context, in *ListScorecardsRequest, opts ...grpc.CallOption) (*ListScorecardsResponse, error)
	// UpdateScorecard updates an existing scorecard
	UpdateScorecard(ctx context.Context, in *UpdateScorecardRequest, opts ...grpc.CallOption) (*UpdateScorecardResponse, error)
	// DeleteScorecard deletes a scorecard
	DeleteScorecard(ctx context.Context, in *DeleteScorecardRequest, opts ...grpc.CallOption) (*DeleteScorecardResponse, error)
	// GetScorecard gets a scorecard by ID
	GetScorecard(ctx context.Context, in *GetScorecardRequest, opts ...grpc.CallOption) (*GetScorecardResponse, error)
	// CreateQuestion creates a new library question
	CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionResponse, error)
	// ListQuestions lists library questions
	ListQuestions(ctx context.Context, in *ListQuestionsRequest, opts ...grpc.CallOption) (*ListQuestionsResponse, error)
	// UpdateQuestion updates a library question
	UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*UpdateQuestionResponse, error)
	// DeleteQuestion deletes a library question
	DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*DeleteQuestionResponse, error)
	// GetQuestion gets a library question
	GetQuestion(ctx context.Context, in *GetQuestionRequest, opts ...grpc.CallOption) (*GetQuestionResponse, error)
	// BulkCreateQuestions creates library questions by a scorecard id
	BulkCreateQuestions(ctx context.Context, in *BulkCreateQuestionsRequest, opts ...grpc.CallOption) (*BulkCreateQuestionsResponse, error)
	// CreateCategory creates a new scorecards category
	CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error)
	// ListCategories lists scorecards categories
	ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error)
	// UpdateCategory updates a scorecard category
	UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error)
	// DeleteCategory deletes a scorecard category
	DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryResponse, error)
	// GetCategory gets a scorecard category
	GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryResponse, error)
	// CreateScorecardQuestion creates a scorecard scorecard question
	CreateScorecardQuestion(ctx context.Context, in *CreateScorecardQuestionRequest, opts ...grpc.CallOption) (*CreateScorecardQuestionResponse, error)
	// UpdateScorecardQuestion updates a scorecard question
	UpdateScorecardQuestion(ctx context.Context, in *UpdateScorecardQuestionRequest, opts ...grpc.CallOption) (*UpdateScorecardQuestionResponse, error)
	// DeleteScorecardQuestion deletes a scorecard question
	DeleteScorecardQuestion(ctx context.Context, in *DeleteScorecardQuestionRequest, opts ...grpc.CallOption) (*DeleteScorecardQuestionResponse, error)
	// GetScorecardQuestion gets a scorecard question
	GetScorecardQuestion(ctx context.Context, in *GetScorecardQuestionRequest, opts ...grpc.CallOption) (*GetScorecardQuestionResponse, error)
	// CreateSection creates a new scorecards section
	CreateSection(ctx context.Context, in *CreateSectionRequest, opts ...grpc.CallOption) (*CreateSectionResponse, error)
	// ListSections lists scorecards sections
	ListSections(ctx context.Context, in *ListSectionsRequest, opts ...grpc.CallOption) (*ListSectionsResponse, error)
	// UpdateSection updates a scorecard section
	UpdateSection(ctx context.Context, in *UpdateSectionRequest, opts ...grpc.CallOption) (*UpdateSectionResponse, error)
	// GetSection gets a scorecard section
	GetSection(ctx context.Context, in *GetSectionRequest, opts ...grpc.CallOption) (*GetSectionResponse, error)
	// DeleteSection deletes a scorecard section
	DeleteSection(ctx context.Context, in *DeleteSectionRequest, opts ...grpc.CallOption) (*DeleteSectionResponse, error)
	// CreateQuestionCategory links a scorecard question and category
	CreateQuestionCategory(ctx context.Context, in *CreateQuestionCategoryRequest, opts ...grpc.CallOption) (*CreateQuestionCategoryResponse, error)
	// DeleteQuestionCategory deletes link between a scorecard question and category
	DeleteQuestionCategory(ctx context.Context, in *DeleteQuestionCategoryRequest, opts ...grpc.CallOption) (*DeleteQuestionCategoryResponse, error)
	// CreateEvaluation creates a new evaluation
	CreateEvaluation(ctx context.Context, in *CreateEvaluationRequest, opts ...grpc.CallOption) (*CreateEvaluationResponse, error)
	// DeleteEvaluation gets an evaluation
	DeleteEvaluation(ctx context.Context, in *DeleteEvaluationRequest, opts ...grpc.CallOption) (*DeleteEvaluationResponse, error)
	// GetEvaluation gets an evaluation
	ScoreEvaluation(ctx context.Context, in *ScoreEvaluationRequest, opts ...grpc.CallOption) (*ScoreEvaluationResponse, error)
	// UpdateEvaluation updates an evaluation
	UpdateEvaluation(ctx context.Context, in *UpdateEvaluationRequest, opts ...grpc.CallOption) (*UpdateEvaluationResponse, error)
	// GetEvaluation gets an evaluation
	GetEvaluation(ctx context.Context, in *GetEvaluationRequest, opts ...grpc.CallOption) (*GetEvaluationResponse, error)
	// ListEvaluations gets a list of evaluations
	ListEvaluations(ctx context.Context, in *ListEvaluationsRequest, opts ...grpc.CallOption) (*ListEvaluationsResponse, error)
	// Deprecated: Do not use.
	// DEPRECATED. Use CreateEvaluation to create evaluation sub-entities.
	CreateEvaluationQuestion(ctx context.Context, in *CreateEvaluationQuestionRequest, opts ...grpc.CallOption) (*CreateEvaluationQuestionResponse, error)
	// UpdateEvaluationQuestion updates an existing evaluation question
	UpdateEvaluationQuestion(ctx context.Context, in *UpdateEvaluationQuestionRequest, opts ...grpc.CallOption) (*UpdateEvaluationQuestionResponse, error)
	// DeleteEvaluationQuestion creates an evaluation question
	DeleteEvaluationQuestion(ctx context.Context, in *DeleteEvaluationQuestionRequest, opts ...grpc.CallOption) (*DeleteEvaluationQuestionResponse, error)
	// SampleCallsByCategory
	SampleCallsByCategory(ctx context.Context, in *SampleCallsByCategoryRequest, opts ...grpc.CallOption) (*SampleCallsByCategoryResponse, error)
	// CreateAutoQuestion creates an auto question
	CreateAutoQuestion(ctx context.Context, in *CreateAutoQuestionRequest, opts ...grpc.CallOption) (*CreateAutoQuestionResponse, error)
	// UpdateAutoQuestion updates an auto question
	UpdateAutoQuestion(ctx context.Context, in *UpdateAutoQuestionRequest, opts ...grpc.CallOption) (*UpdateAutoQuestionResponse, error)
	// DeleteAutoQuestion deletes an auto question
	DeleteAutoQuestion(ctx context.Context, in *DeleteAutoQuestionRequest, opts ...grpc.CallOption) (*DeleteAutoQuestionResponse, error)
	// GetAutoQuestion gets an auto question
	GetAutoQuestion(ctx context.Context, in *GetAutoQuestionRequest, opts ...grpc.CallOption) (*GetAutoQuestionResponse, error)
	// GetAutoEvaluation gets an auto evaluation
	GetAutoEvaluation(ctx context.Context, in *GetAutoEvaluationRequest, opts ...grpc.CallOption) (*GetAutoEvaluationResponse, error)
	// ListAutoEvaluations gets a list of auto evaluations
	ListAutoEvaluations(ctx context.Context, in *ListAutoEvaluationsRequest, opts ...grpc.CallOption) (*ListAutoEvaluationsResponse, error)
	// StreamAutoEvaluations streams a list of auto evaluations
	StreamAutoEvaluations(ctx context.Context, in *StreamAutoEvaluationsRequest, opts ...grpc.CallOption) (Scorecards_StreamAutoEvaluationsClient, error)
	// DeleteAutoEvaluation deletes an auto evaluations
	DeleteAutoEvaluation(ctx context.Context, in *DeleteAutoEvaluationRequest, opts ...grpc.CallOption) (*DeleteAutoEvaluationResponse, error)
	// PreviewEvaluationScore previews the score for an evaluation
	PreviewEvaluationScore(ctx context.Context, in *PreviewEvaluationScoreRequest, opts ...grpc.CallOption) (*PreviewEvaluationScoreResponse, error)
	// RestoreEvaluation restores an evaluation previously deleted.
	RestoreEvaluation(ctx context.Context, in *RestoreEvaluationRequest, opts ...grpc.CallOption) (*RestoreEvaluationResponse, error)
	// CreateSmartQuestion creates a scorecard smart question.
	CreateSmartQuestion(ctx context.Context, in *CreateSmartQuestionRequest, opts ...grpc.CallOption) (*CreateSmartQuestionResponse, error)
	// UpdateSmartQuestion updates a smart question.
	UpdateSmartQuestion(ctx context.Context, in *UpdateSmartQuestionRequest, opts ...grpc.CallOption) (*UpdateSmartQuestionResponse, error)
	// DeleteSmartQuestion deletes a smart question.
	DeleteSmartQuestion(ctx context.Context, in *DeleteSmartQuestionRequest, opts ...grpc.CallOption) (*DeleteSmartQuestionResponse, error)
	// ListSmartEvaluations lists smart evaluations
	ListSmartEvaluations(ctx context.Context, in *ListSmartEvaluationsRequest, opts ...grpc.CallOption) (*ListSmartEvaluationsResponse, error)
	// DeleteSmartEvaluation deletes a smart evaluation
	DeleteSmartEvaluation(ctx context.Context, in *DeleteSmartEvaluationRequest, opts ...grpc.CallOption) (*DeleteSmartEvaluationResponse, error)
	// GetSmartEvaluation gets a smart evaluation
	GetSmartEvaluation(ctx context.Context, in *GetSmartEvaluationRequest, opts ...grpc.CallOption) (*GetSmartEvaluationResponse, error)
}

type scorecardsClient struct {
	cc grpc.ClientConnInterface
}

func NewScorecardsClient(cc grpc.ClientConnInterface) ScorecardsClient {
	return &scorecardsClient{cc}
}

func (c *scorecardsClient) CreateScorecard(ctx context.Context, in *CreateScorecardRequest, opts ...grpc.CallOption) (*CreateScorecardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateScorecardResponse)
	err := c.cc.Invoke(ctx, Scorecards_CreateScorecard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) ListScorecards(ctx context.Context, in *ListScorecardsRequest, opts ...grpc.CallOption) (*ListScorecardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListScorecardsResponse)
	err := c.cc.Invoke(ctx, Scorecards_ListScorecards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) UpdateScorecard(ctx context.Context, in *UpdateScorecardRequest, opts ...grpc.CallOption) (*UpdateScorecardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateScorecardResponse)
	err := c.cc.Invoke(ctx, Scorecards_UpdateScorecard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) DeleteScorecard(ctx context.Context, in *DeleteScorecardRequest, opts ...grpc.CallOption) (*DeleteScorecardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteScorecardResponse)
	err := c.cc.Invoke(ctx, Scorecards_DeleteScorecard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) GetScorecard(ctx context.Context, in *GetScorecardRequest, opts ...grpc.CallOption) (*GetScorecardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScorecardResponse)
	err := c.cc.Invoke(ctx, Scorecards_GetScorecard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQuestionResponse)
	err := c.cc.Invoke(ctx, Scorecards_CreateQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) ListQuestions(ctx context.Context, in *ListQuestionsRequest, opts ...grpc.CallOption) (*ListQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQuestionsResponse)
	err := c.cc.Invoke(ctx, Scorecards_ListQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*UpdateQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateQuestionResponse)
	err := c.cc.Invoke(ctx, Scorecards_UpdateQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*DeleteQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteQuestionResponse)
	err := c.cc.Invoke(ctx, Scorecards_DeleteQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) GetQuestion(ctx context.Context, in *GetQuestionRequest, opts ...grpc.CallOption) (*GetQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuestionResponse)
	err := c.cc.Invoke(ctx, Scorecards_GetQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) BulkCreateQuestions(ctx context.Context, in *BulkCreateQuestionsRequest, opts ...grpc.CallOption) (*BulkCreateQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkCreateQuestionsResponse)
	err := c.cc.Invoke(ctx, Scorecards_BulkCreateQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCategoryResponse)
	err := c.cc.Invoke(ctx, Scorecards_CreateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCategoriesResponse)
	err := c.cc.Invoke(ctx, Scorecards_ListCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCategoryResponse)
	err := c.cc.Invoke(ctx, Scorecards_UpdateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCategoryResponse)
	err := c.cc.Invoke(ctx, Scorecards_DeleteCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCategoryResponse)
	err := c.cc.Invoke(ctx, Scorecards_GetCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) CreateScorecardQuestion(ctx context.Context, in *CreateScorecardQuestionRequest, opts ...grpc.CallOption) (*CreateScorecardQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateScorecardQuestionResponse)
	err := c.cc.Invoke(ctx, Scorecards_CreateScorecardQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) UpdateScorecardQuestion(ctx context.Context, in *UpdateScorecardQuestionRequest, opts ...grpc.CallOption) (*UpdateScorecardQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateScorecardQuestionResponse)
	err := c.cc.Invoke(ctx, Scorecards_UpdateScorecardQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) DeleteScorecardQuestion(ctx context.Context, in *DeleteScorecardQuestionRequest, opts ...grpc.CallOption) (*DeleteScorecardQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteScorecardQuestionResponse)
	err := c.cc.Invoke(ctx, Scorecards_DeleteScorecardQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) GetScorecardQuestion(ctx context.Context, in *GetScorecardQuestionRequest, opts ...grpc.CallOption) (*GetScorecardQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScorecardQuestionResponse)
	err := c.cc.Invoke(ctx, Scorecards_GetScorecardQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) CreateSection(ctx context.Context, in *CreateSectionRequest, opts ...grpc.CallOption) (*CreateSectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSectionResponse)
	err := c.cc.Invoke(ctx, Scorecards_CreateSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) ListSections(ctx context.Context, in *ListSectionsRequest, opts ...grpc.CallOption) (*ListSectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSectionsResponse)
	err := c.cc.Invoke(ctx, Scorecards_ListSections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) UpdateSection(ctx context.Context, in *UpdateSectionRequest, opts ...grpc.CallOption) (*UpdateSectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSectionResponse)
	err := c.cc.Invoke(ctx, Scorecards_UpdateSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) GetSection(ctx context.Context, in *GetSectionRequest, opts ...grpc.CallOption) (*GetSectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSectionResponse)
	err := c.cc.Invoke(ctx, Scorecards_GetSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) DeleteSection(ctx context.Context, in *DeleteSectionRequest, opts ...grpc.CallOption) (*DeleteSectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSectionResponse)
	err := c.cc.Invoke(ctx, Scorecards_DeleteSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) CreateQuestionCategory(ctx context.Context, in *CreateQuestionCategoryRequest, opts ...grpc.CallOption) (*CreateQuestionCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQuestionCategoryResponse)
	err := c.cc.Invoke(ctx, Scorecards_CreateQuestionCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) DeleteQuestionCategory(ctx context.Context, in *DeleteQuestionCategoryRequest, opts ...grpc.CallOption) (*DeleteQuestionCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteQuestionCategoryResponse)
	err := c.cc.Invoke(ctx, Scorecards_DeleteQuestionCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) CreateEvaluation(ctx context.Context, in *CreateEvaluationRequest, opts ...grpc.CallOption) (*CreateEvaluationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEvaluationResponse)
	err := c.cc.Invoke(ctx, Scorecards_CreateEvaluation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) DeleteEvaluation(ctx context.Context, in *DeleteEvaluationRequest, opts ...grpc.CallOption) (*DeleteEvaluationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEvaluationResponse)
	err := c.cc.Invoke(ctx, Scorecards_DeleteEvaluation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) ScoreEvaluation(ctx context.Context, in *ScoreEvaluationRequest, opts ...grpc.CallOption) (*ScoreEvaluationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScoreEvaluationResponse)
	err := c.cc.Invoke(ctx, Scorecards_ScoreEvaluation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) UpdateEvaluation(ctx context.Context, in *UpdateEvaluationRequest, opts ...grpc.CallOption) (*UpdateEvaluationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEvaluationResponse)
	err := c.cc.Invoke(ctx, Scorecards_UpdateEvaluation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) GetEvaluation(ctx context.Context, in *GetEvaluationRequest, opts ...grpc.CallOption) (*GetEvaluationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEvaluationResponse)
	err := c.cc.Invoke(ctx, Scorecards_GetEvaluation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) ListEvaluations(ctx context.Context, in *ListEvaluationsRequest, opts ...grpc.CallOption) (*ListEvaluationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEvaluationsResponse)
	err := c.cc.Invoke(ctx, Scorecards_ListEvaluations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *scorecardsClient) CreateEvaluationQuestion(ctx context.Context, in *CreateEvaluationQuestionRequest, opts ...grpc.CallOption) (*CreateEvaluationQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEvaluationQuestionResponse)
	err := c.cc.Invoke(ctx, Scorecards_CreateEvaluationQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) UpdateEvaluationQuestion(ctx context.Context, in *UpdateEvaluationQuestionRequest, opts ...grpc.CallOption) (*UpdateEvaluationQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEvaluationQuestionResponse)
	err := c.cc.Invoke(ctx, Scorecards_UpdateEvaluationQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) DeleteEvaluationQuestion(ctx context.Context, in *DeleteEvaluationQuestionRequest, opts ...grpc.CallOption) (*DeleteEvaluationQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEvaluationQuestionResponse)
	err := c.cc.Invoke(ctx, Scorecards_DeleteEvaluationQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) SampleCallsByCategory(ctx context.Context, in *SampleCallsByCategoryRequest, opts ...grpc.CallOption) (*SampleCallsByCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SampleCallsByCategoryResponse)
	err := c.cc.Invoke(ctx, Scorecards_SampleCallsByCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) CreateAutoQuestion(ctx context.Context, in *CreateAutoQuestionRequest, opts ...grpc.CallOption) (*CreateAutoQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAutoQuestionResponse)
	err := c.cc.Invoke(ctx, Scorecards_CreateAutoQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) UpdateAutoQuestion(ctx context.Context, in *UpdateAutoQuestionRequest, opts ...grpc.CallOption) (*UpdateAutoQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAutoQuestionResponse)
	err := c.cc.Invoke(ctx, Scorecards_UpdateAutoQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) DeleteAutoQuestion(ctx context.Context, in *DeleteAutoQuestionRequest, opts ...grpc.CallOption) (*DeleteAutoQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAutoQuestionResponse)
	err := c.cc.Invoke(ctx, Scorecards_DeleteAutoQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) GetAutoQuestion(ctx context.Context, in *GetAutoQuestionRequest, opts ...grpc.CallOption) (*GetAutoQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAutoQuestionResponse)
	err := c.cc.Invoke(ctx, Scorecards_GetAutoQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) GetAutoEvaluation(ctx context.Context, in *GetAutoEvaluationRequest, opts ...grpc.CallOption) (*GetAutoEvaluationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAutoEvaluationResponse)
	err := c.cc.Invoke(ctx, Scorecards_GetAutoEvaluation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) ListAutoEvaluations(ctx context.Context, in *ListAutoEvaluationsRequest, opts ...grpc.CallOption) (*ListAutoEvaluationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAutoEvaluationsResponse)
	err := c.cc.Invoke(ctx, Scorecards_ListAutoEvaluations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) StreamAutoEvaluations(ctx context.Context, in *StreamAutoEvaluationsRequest, opts ...grpc.CallOption) (Scorecards_StreamAutoEvaluationsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Scorecards_ServiceDesc.Streams[0], Scorecards_StreamAutoEvaluations_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &scorecardsStreamAutoEvaluationsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Scorecards_StreamAutoEvaluationsClient interface {
	Recv() (*StreamAutoEvaluationsResponse, error)
	grpc.ClientStream
}

type scorecardsStreamAutoEvaluationsClient struct {
	grpc.ClientStream
}

func (x *scorecardsStreamAutoEvaluationsClient) Recv() (*StreamAutoEvaluationsResponse, error) {
	m := new(StreamAutoEvaluationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *scorecardsClient) DeleteAutoEvaluation(ctx context.Context, in *DeleteAutoEvaluationRequest, opts ...grpc.CallOption) (*DeleteAutoEvaluationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAutoEvaluationResponse)
	err := c.cc.Invoke(ctx, Scorecards_DeleteAutoEvaluation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) PreviewEvaluationScore(ctx context.Context, in *PreviewEvaluationScoreRequest, opts ...grpc.CallOption) (*PreviewEvaluationScoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PreviewEvaluationScoreResponse)
	err := c.cc.Invoke(ctx, Scorecards_PreviewEvaluationScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) RestoreEvaluation(ctx context.Context, in *RestoreEvaluationRequest, opts ...grpc.CallOption) (*RestoreEvaluationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoreEvaluationResponse)
	err := c.cc.Invoke(ctx, Scorecards_RestoreEvaluation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) CreateSmartQuestion(ctx context.Context, in *CreateSmartQuestionRequest, opts ...grpc.CallOption) (*CreateSmartQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSmartQuestionResponse)
	err := c.cc.Invoke(ctx, Scorecards_CreateSmartQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) UpdateSmartQuestion(ctx context.Context, in *UpdateSmartQuestionRequest, opts ...grpc.CallOption) (*UpdateSmartQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSmartQuestionResponse)
	err := c.cc.Invoke(ctx, Scorecards_UpdateSmartQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) DeleteSmartQuestion(ctx context.Context, in *DeleteSmartQuestionRequest, opts ...grpc.CallOption) (*DeleteSmartQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSmartQuestionResponse)
	err := c.cc.Invoke(ctx, Scorecards_DeleteSmartQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) ListSmartEvaluations(ctx context.Context, in *ListSmartEvaluationsRequest, opts ...grpc.CallOption) (*ListSmartEvaluationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSmartEvaluationsResponse)
	err := c.cc.Invoke(ctx, Scorecards_ListSmartEvaluations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) DeleteSmartEvaluation(ctx context.Context, in *DeleteSmartEvaluationRequest, opts ...grpc.CallOption) (*DeleteSmartEvaluationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSmartEvaluationResponse)
	err := c.cc.Invoke(ctx, Scorecards_DeleteSmartEvaluation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorecardsClient) GetSmartEvaluation(ctx context.Context, in *GetSmartEvaluationRequest, opts ...grpc.CallOption) (*GetSmartEvaluationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSmartEvaluationResponse)
	err := c.cc.Invoke(ctx, Scorecards_GetSmartEvaluation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScorecardsServer is the server API for Scorecards service.
// All implementations must embed UnimplementedScorecardsServer
// for forward compatibility.
type ScorecardsServer interface {
	// CreateScorecard creates a new scorecard
	CreateScorecard(context.Context, *CreateScorecardRequest) (*CreateScorecardResponse, error)
	// ListScorecards lists scorecards
	ListScorecards(context.Context, *ListScorecardsRequest) (*ListScorecardsResponse, error)
	// UpdateScorecard updates an existing scorecard
	UpdateScorecard(context.Context, *UpdateScorecardRequest) (*UpdateScorecardResponse, error)
	// DeleteScorecard deletes a scorecard
	DeleteScorecard(context.Context, *DeleteScorecardRequest) (*DeleteScorecardResponse, error)
	// GetScorecard gets a scorecard by ID
	GetScorecard(context.Context, *GetScorecardRequest) (*GetScorecardResponse, error)
	// CreateQuestion creates a new library question
	CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionResponse, error)
	// ListQuestions lists library questions
	ListQuestions(context.Context, *ListQuestionsRequest) (*ListQuestionsResponse, error)
	// UpdateQuestion updates a library question
	UpdateQuestion(context.Context, *UpdateQuestionRequest) (*UpdateQuestionResponse, error)
	// DeleteQuestion deletes a library question
	DeleteQuestion(context.Context, *DeleteQuestionRequest) (*DeleteQuestionResponse, error)
	// GetQuestion gets a library question
	GetQuestion(context.Context, *GetQuestionRequest) (*GetQuestionResponse, error)
	// BulkCreateQuestions creates library questions by a scorecard id
	BulkCreateQuestions(context.Context, *BulkCreateQuestionsRequest) (*BulkCreateQuestionsResponse, error)
	// CreateCategory creates a new scorecards category
	CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error)
	// ListCategories lists scorecards categories
	ListCategories(context.Context, *ListCategoriesRequest) (*ListCategoriesResponse, error)
	// UpdateCategory updates a scorecard category
	UpdateCategory(context.Context, *UpdateCategoryRequest) (*UpdateCategoryResponse, error)
	// DeleteCategory deletes a scorecard category
	DeleteCategory(context.Context, *DeleteCategoryRequest) (*DeleteCategoryResponse, error)
	// GetCategory gets a scorecard category
	GetCategory(context.Context, *GetCategoryRequest) (*GetCategoryResponse, error)
	// CreateScorecardQuestion creates a scorecard scorecard question
	CreateScorecardQuestion(context.Context, *CreateScorecardQuestionRequest) (*CreateScorecardQuestionResponse, error)
	// UpdateScorecardQuestion updates a scorecard question
	UpdateScorecardQuestion(context.Context, *UpdateScorecardQuestionRequest) (*UpdateScorecardQuestionResponse, error)
	// DeleteScorecardQuestion deletes a scorecard question
	DeleteScorecardQuestion(context.Context, *DeleteScorecardQuestionRequest) (*DeleteScorecardQuestionResponse, error)
	// GetScorecardQuestion gets a scorecard question
	GetScorecardQuestion(context.Context, *GetScorecardQuestionRequest) (*GetScorecardQuestionResponse, error)
	// CreateSection creates a new scorecards section
	CreateSection(context.Context, *CreateSectionRequest) (*CreateSectionResponse, error)
	// ListSections lists scorecards sections
	ListSections(context.Context, *ListSectionsRequest) (*ListSectionsResponse, error)
	// UpdateSection updates a scorecard section
	UpdateSection(context.Context, *UpdateSectionRequest) (*UpdateSectionResponse, error)
	// GetSection gets a scorecard section
	GetSection(context.Context, *GetSectionRequest) (*GetSectionResponse, error)
	// DeleteSection deletes a scorecard section
	DeleteSection(context.Context, *DeleteSectionRequest) (*DeleteSectionResponse, error)
	// CreateQuestionCategory links a scorecard question and category
	CreateQuestionCategory(context.Context, *CreateQuestionCategoryRequest) (*CreateQuestionCategoryResponse, error)
	// DeleteQuestionCategory deletes link between a scorecard question and category
	DeleteQuestionCategory(context.Context, *DeleteQuestionCategoryRequest) (*DeleteQuestionCategoryResponse, error)
	// CreateEvaluation creates a new evaluation
	CreateEvaluation(context.Context, *CreateEvaluationRequest) (*CreateEvaluationResponse, error)
	// DeleteEvaluation gets an evaluation
	DeleteEvaluation(context.Context, *DeleteEvaluationRequest) (*DeleteEvaluationResponse, error)
	// GetEvaluation gets an evaluation
	ScoreEvaluation(context.Context, *ScoreEvaluationRequest) (*ScoreEvaluationResponse, error)
	// UpdateEvaluation updates an evaluation
	UpdateEvaluation(context.Context, *UpdateEvaluationRequest) (*UpdateEvaluationResponse, error)
	// GetEvaluation gets an evaluation
	GetEvaluation(context.Context, *GetEvaluationRequest) (*GetEvaluationResponse, error)
	// ListEvaluations gets a list of evaluations
	ListEvaluations(context.Context, *ListEvaluationsRequest) (*ListEvaluationsResponse, error)
	// Deprecated: Do not use.
	// DEPRECATED. Use CreateEvaluation to create evaluation sub-entities.
	CreateEvaluationQuestion(context.Context, *CreateEvaluationQuestionRequest) (*CreateEvaluationQuestionResponse, error)
	// UpdateEvaluationQuestion updates an existing evaluation question
	UpdateEvaluationQuestion(context.Context, *UpdateEvaluationQuestionRequest) (*UpdateEvaluationQuestionResponse, error)
	// DeleteEvaluationQuestion creates an evaluation question
	DeleteEvaluationQuestion(context.Context, *DeleteEvaluationQuestionRequest) (*DeleteEvaluationQuestionResponse, error)
	// SampleCallsByCategory
	SampleCallsByCategory(context.Context, *SampleCallsByCategoryRequest) (*SampleCallsByCategoryResponse, error)
	// CreateAutoQuestion creates an auto question
	CreateAutoQuestion(context.Context, *CreateAutoQuestionRequest) (*CreateAutoQuestionResponse, error)
	// UpdateAutoQuestion updates an auto question
	UpdateAutoQuestion(context.Context, *UpdateAutoQuestionRequest) (*UpdateAutoQuestionResponse, error)
	// DeleteAutoQuestion deletes an auto question
	DeleteAutoQuestion(context.Context, *DeleteAutoQuestionRequest) (*DeleteAutoQuestionResponse, error)
	// GetAutoQuestion gets an auto question
	GetAutoQuestion(context.Context, *GetAutoQuestionRequest) (*GetAutoQuestionResponse, error)
	// GetAutoEvaluation gets an auto evaluation
	GetAutoEvaluation(context.Context, *GetAutoEvaluationRequest) (*GetAutoEvaluationResponse, error)
	// ListAutoEvaluations gets a list of auto evaluations
	ListAutoEvaluations(context.Context, *ListAutoEvaluationsRequest) (*ListAutoEvaluationsResponse, error)
	// StreamAutoEvaluations streams a list of auto evaluations
	StreamAutoEvaluations(*StreamAutoEvaluationsRequest, Scorecards_StreamAutoEvaluationsServer) error
	// DeleteAutoEvaluation deletes an auto evaluations
	DeleteAutoEvaluation(context.Context, *DeleteAutoEvaluationRequest) (*DeleteAutoEvaluationResponse, error)
	// PreviewEvaluationScore previews the score for an evaluation
	PreviewEvaluationScore(context.Context, *PreviewEvaluationScoreRequest) (*PreviewEvaluationScoreResponse, error)
	// RestoreEvaluation restores an evaluation previously deleted.
	RestoreEvaluation(context.Context, *RestoreEvaluationRequest) (*RestoreEvaluationResponse, error)
	// CreateSmartQuestion creates a scorecard smart question.
	CreateSmartQuestion(context.Context, *CreateSmartQuestionRequest) (*CreateSmartQuestionResponse, error)
	// UpdateSmartQuestion updates a smart question.
	UpdateSmartQuestion(context.Context, *UpdateSmartQuestionRequest) (*UpdateSmartQuestionResponse, error)
	// DeleteSmartQuestion deletes a smart question.
	DeleteSmartQuestion(context.Context, *DeleteSmartQuestionRequest) (*DeleteSmartQuestionResponse, error)
	// ListSmartEvaluations lists smart evaluations
	ListSmartEvaluations(context.Context, *ListSmartEvaluationsRequest) (*ListSmartEvaluationsResponse, error)
	// DeleteSmartEvaluation deletes a smart evaluation
	DeleteSmartEvaluation(context.Context, *DeleteSmartEvaluationRequest) (*DeleteSmartEvaluationResponse, error)
	// GetSmartEvaluation gets a smart evaluation
	GetSmartEvaluation(context.Context, *GetSmartEvaluationRequest) (*GetSmartEvaluationResponse, error)
	mustEmbedUnimplementedScorecardsServer()
}

// UnimplementedScorecardsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScorecardsServer struct{}

func (UnimplementedScorecardsServer) CreateScorecard(context.Context, *CreateScorecardRequest) (*CreateScorecardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScorecard not implemented")
}
func (UnimplementedScorecardsServer) ListScorecards(context.Context, *ListScorecardsRequest) (*ListScorecardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScorecards not implemented")
}
func (UnimplementedScorecardsServer) UpdateScorecard(context.Context, *UpdateScorecardRequest) (*UpdateScorecardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScorecard not implemented")
}
func (UnimplementedScorecardsServer) DeleteScorecard(context.Context, *DeleteScorecardRequest) (*DeleteScorecardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScorecard not implemented")
}
func (UnimplementedScorecardsServer) GetScorecard(context.Context, *GetScorecardRequest) (*GetScorecardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScorecard not implemented")
}
func (UnimplementedScorecardsServer) CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedScorecardsServer) ListQuestions(context.Context, *ListQuestionsRequest) (*ListQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuestions not implemented")
}
func (UnimplementedScorecardsServer) UpdateQuestion(context.Context, *UpdateQuestionRequest) (*UpdateQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestion not implemented")
}
func (UnimplementedScorecardsServer) DeleteQuestion(context.Context, *DeleteQuestionRequest) (*DeleteQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestion not implemented")
}
func (UnimplementedScorecardsServer) GetQuestion(context.Context, *GetQuestionRequest) (*GetQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestion not implemented")
}
func (UnimplementedScorecardsServer) BulkCreateQuestions(context.Context, *BulkCreateQuestionsRequest) (*BulkCreateQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateQuestions not implemented")
}
func (UnimplementedScorecardsServer) CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedScorecardsServer) ListCategories(context.Context, *ListCategoriesRequest) (*ListCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}
func (UnimplementedScorecardsServer) UpdateCategory(context.Context, *UpdateCategoryRequest) (*UpdateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedScorecardsServer) DeleteCategory(context.Context, *DeleteCategoryRequest) (*DeleteCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedScorecardsServer) GetCategory(context.Context, *GetCategoryRequest) (*GetCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (UnimplementedScorecardsServer) CreateScorecardQuestion(context.Context, *CreateScorecardQuestionRequest) (*CreateScorecardQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScorecardQuestion not implemented")
}
func (UnimplementedScorecardsServer) UpdateScorecardQuestion(context.Context, *UpdateScorecardQuestionRequest) (*UpdateScorecardQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScorecardQuestion not implemented")
}
func (UnimplementedScorecardsServer) DeleteScorecardQuestion(context.Context, *DeleteScorecardQuestionRequest) (*DeleteScorecardQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScorecardQuestion not implemented")
}
func (UnimplementedScorecardsServer) GetScorecardQuestion(context.Context, *GetScorecardQuestionRequest) (*GetScorecardQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScorecardQuestion not implemented")
}
func (UnimplementedScorecardsServer) CreateSection(context.Context, *CreateSectionRequest) (*CreateSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSection not implemented")
}
func (UnimplementedScorecardsServer) ListSections(context.Context, *ListSectionsRequest) (*ListSectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSections not implemented")
}
func (UnimplementedScorecardsServer) UpdateSection(context.Context, *UpdateSectionRequest) (*UpdateSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSection not implemented")
}
func (UnimplementedScorecardsServer) GetSection(context.Context, *GetSectionRequest) (*GetSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSection not implemented")
}
func (UnimplementedScorecardsServer) DeleteSection(context.Context, *DeleteSectionRequest) (*DeleteSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSection not implemented")
}
func (UnimplementedScorecardsServer) CreateQuestionCategory(context.Context, *CreateQuestionCategoryRequest) (*CreateQuestionCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestionCategory not implemented")
}
func (UnimplementedScorecardsServer) DeleteQuestionCategory(context.Context, *DeleteQuestionCategoryRequest) (*DeleteQuestionCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestionCategory not implemented")
}
func (UnimplementedScorecardsServer) CreateEvaluation(context.Context, *CreateEvaluationRequest) (*CreateEvaluationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvaluation not implemented")
}
func (UnimplementedScorecardsServer) DeleteEvaluation(context.Context, *DeleteEvaluationRequest) (*DeleteEvaluationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvaluation not implemented")
}
func (UnimplementedScorecardsServer) ScoreEvaluation(context.Context, *ScoreEvaluationRequest) (*ScoreEvaluationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScoreEvaluation not implemented")
}
func (UnimplementedScorecardsServer) UpdateEvaluation(context.Context, *UpdateEvaluationRequest) (*UpdateEvaluationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvaluation not implemented")
}
func (UnimplementedScorecardsServer) GetEvaluation(context.Context, *GetEvaluationRequest) (*GetEvaluationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvaluation not implemented")
}
func (UnimplementedScorecardsServer) ListEvaluations(context.Context, *ListEvaluationsRequest) (*ListEvaluationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvaluations not implemented")
}
func (UnimplementedScorecardsServer) CreateEvaluationQuestion(context.Context, *CreateEvaluationQuestionRequest) (*CreateEvaluationQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvaluationQuestion not implemented")
}
func (UnimplementedScorecardsServer) UpdateEvaluationQuestion(context.Context, *UpdateEvaluationQuestionRequest) (*UpdateEvaluationQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvaluationQuestion not implemented")
}
func (UnimplementedScorecardsServer) DeleteEvaluationQuestion(context.Context, *DeleteEvaluationQuestionRequest) (*DeleteEvaluationQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvaluationQuestion not implemented")
}
func (UnimplementedScorecardsServer) SampleCallsByCategory(context.Context, *SampleCallsByCategoryRequest) (*SampleCallsByCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SampleCallsByCategory not implemented")
}
func (UnimplementedScorecardsServer) CreateAutoQuestion(context.Context, *CreateAutoQuestionRequest) (*CreateAutoQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAutoQuestion not implemented")
}
func (UnimplementedScorecardsServer) UpdateAutoQuestion(context.Context, *UpdateAutoQuestionRequest) (*UpdateAutoQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutoQuestion not implemented")
}
func (UnimplementedScorecardsServer) DeleteAutoQuestion(context.Context, *DeleteAutoQuestionRequest) (*DeleteAutoQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAutoQuestion not implemented")
}
func (UnimplementedScorecardsServer) GetAutoQuestion(context.Context, *GetAutoQuestionRequest) (*GetAutoQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAutoQuestion not implemented")
}
func (UnimplementedScorecardsServer) GetAutoEvaluation(context.Context, *GetAutoEvaluationRequest) (*GetAutoEvaluationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAutoEvaluation not implemented")
}
func (UnimplementedScorecardsServer) ListAutoEvaluations(context.Context, *ListAutoEvaluationsRequest) (*ListAutoEvaluationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAutoEvaluations not implemented")
}
func (UnimplementedScorecardsServer) StreamAutoEvaluations(*StreamAutoEvaluationsRequest, Scorecards_StreamAutoEvaluationsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAutoEvaluations not implemented")
}
func (UnimplementedScorecardsServer) DeleteAutoEvaluation(context.Context, *DeleteAutoEvaluationRequest) (*DeleteAutoEvaluationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAutoEvaluation not implemented")
}
func (UnimplementedScorecardsServer) PreviewEvaluationScore(context.Context, *PreviewEvaluationScoreRequest) (*PreviewEvaluationScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewEvaluationScore not implemented")
}
func (UnimplementedScorecardsServer) RestoreEvaluation(context.Context, *RestoreEvaluationRequest) (*RestoreEvaluationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreEvaluation not implemented")
}
func (UnimplementedScorecardsServer) CreateSmartQuestion(context.Context, *CreateSmartQuestionRequest) (*CreateSmartQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSmartQuestion not implemented")
}
func (UnimplementedScorecardsServer) UpdateSmartQuestion(context.Context, *UpdateSmartQuestionRequest) (*UpdateSmartQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSmartQuestion not implemented")
}
func (UnimplementedScorecardsServer) DeleteSmartQuestion(context.Context, *DeleteSmartQuestionRequest) (*DeleteSmartQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSmartQuestion not implemented")
}
func (UnimplementedScorecardsServer) ListSmartEvaluations(context.Context, *ListSmartEvaluationsRequest) (*ListSmartEvaluationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSmartEvaluations not implemented")
}
func (UnimplementedScorecardsServer) DeleteSmartEvaluation(context.Context, *DeleteSmartEvaluationRequest) (*DeleteSmartEvaluationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSmartEvaluation not implemented")
}
func (UnimplementedScorecardsServer) GetSmartEvaluation(context.Context, *GetSmartEvaluationRequest) (*GetSmartEvaluationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmartEvaluation not implemented")
}
func (UnimplementedScorecardsServer) mustEmbedUnimplementedScorecardsServer() {}
func (UnimplementedScorecardsServer) testEmbeddedByValue()                    {}

// UnsafeScorecardsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScorecardsServer will
// result in compilation errors.
type UnsafeScorecardsServer interface {
	mustEmbedUnimplementedScorecardsServer()
}

func RegisterScorecardsServer(s grpc.ServiceRegistrar, srv ScorecardsServer) {
	// If the following call pancis, it indicates UnimplementedScorecardsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Scorecards_ServiceDesc, srv)
}

func _Scorecards_CreateScorecard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScorecardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).CreateScorecard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_CreateScorecard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).CreateScorecard(ctx, req.(*CreateScorecardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_ListScorecards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScorecardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).ListScorecards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_ListScorecards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).ListScorecards(ctx, req.(*ListScorecardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_UpdateScorecard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScorecardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).UpdateScorecard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_UpdateScorecard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).UpdateScorecard(ctx, req.(*UpdateScorecardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_DeleteScorecard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScorecardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).DeleteScorecard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_DeleteScorecard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).DeleteScorecard(ctx, req.(*DeleteScorecardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_GetScorecard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScorecardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).GetScorecard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_GetScorecard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).GetScorecard(ctx, req.(*GetScorecardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_CreateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).CreateQuestion(ctx, req.(*CreateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_ListQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).ListQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_ListQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).ListQuestions(ctx, req.(*ListQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_UpdateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).UpdateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_UpdateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).UpdateQuestion(ctx, req.(*UpdateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_DeleteQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).DeleteQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_DeleteQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).DeleteQuestion(ctx, req.(*DeleteQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_GetQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).GetQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_GetQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).GetQuestion(ctx, req.(*GetQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_BulkCreateQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).BulkCreateQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_BulkCreateQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).BulkCreateQuestions(ctx, req.(*BulkCreateQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).CreateCategory(ctx, req.(*CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_ListCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).ListCategories(ctx, req.(*ListCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).UpdateCategory(ctx, req.(*UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_DeleteCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).DeleteCategory(ctx, req.(*DeleteCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_GetCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).GetCategory(ctx, req.(*GetCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_CreateScorecardQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScorecardQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).CreateScorecardQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_CreateScorecardQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).CreateScorecardQuestion(ctx, req.(*CreateScorecardQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_UpdateScorecardQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScorecardQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).UpdateScorecardQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_UpdateScorecardQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).UpdateScorecardQuestion(ctx, req.(*UpdateScorecardQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_DeleteScorecardQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScorecardQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).DeleteScorecardQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_DeleteScorecardQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).DeleteScorecardQuestion(ctx, req.(*DeleteScorecardQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_GetScorecardQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScorecardQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).GetScorecardQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_GetScorecardQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).GetScorecardQuestion(ctx, req.(*GetScorecardQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_CreateSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).CreateSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_CreateSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).CreateSection(ctx, req.(*CreateSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_ListSections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).ListSections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_ListSections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).ListSections(ctx, req.(*ListSectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_UpdateSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).UpdateSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_UpdateSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).UpdateSection(ctx, req.(*UpdateSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_GetSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).GetSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_GetSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).GetSection(ctx, req.(*GetSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_DeleteSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).DeleteSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_DeleteSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).DeleteSection(ctx, req.(*DeleteSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_CreateQuestionCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).CreateQuestionCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_CreateQuestionCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).CreateQuestionCategory(ctx, req.(*CreateQuestionCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_DeleteQuestionCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).DeleteQuestionCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_DeleteQuestionCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).DeleteQuestionCategory(ctx, req.(*DeleteQuestionCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_CreateEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).CreateEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_CreateEvaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).CreateEvaluation(ctx, req.(*CreateEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_DeleteEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).DeleteEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_DeleteEvaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).DeleteEvaluation(ctx, req.(*DeleteEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_ScoreEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).ScoreEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_ScoreEvaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).ScoreEvaluation(ctx, req.(*ScoreEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_UpdateEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).UpdateEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_UpdateEvaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).UpdateEvaluation(ctx, req.(*UpdateEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_GetEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).GetEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_GetEvaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).GetEvaluation(ctx, req.(*GetEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_ListEvaluations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEvaluationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).ListEvaluations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_ListEvaluations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).ListEvaluations(ctx, req.(*ListEvaluationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_CreateEvaluationQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEvaluationQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).CreateEvaluationQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_CreateEvaluationQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).CreateEvaluationQuestion(ctx, req.(*CreateEvaluationQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_UpdateEvaluationQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEvaluationQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).UpdateEvaluationQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_UpdateEvaluationQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).UpdateEvaluationQuestion(ctx, req.(*UpdateEvaluationQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_DeleteEvaluationQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEvaluationQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).DeleteEvaluationQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_DeleteEvaluationQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).DeleteEvaluationQuestion(ctx, req.(*DeleteEvaluationQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_SampleCallsByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SampleCallsByCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).SampleCallsByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_SampleCallsByCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).SampleCallsByCategory(ctx, req.(*SampleCallsByCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_CreateAutoQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAutoQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).CreateAutoQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_CreateAutoQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).CreateAutoQuestion(ctx, req.(*CreateAutoQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_UpdateAutoQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAutoQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).UpdateAutoQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_UpdateAutoQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).UpdateAutoQuestion(ctx, req.(*UpdateAutoQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_DeleteAutoQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAutoQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).DeleteAutoQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_DeleteAutoQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).DeleteAutoQuestion(ctx, req.(*DeleteAutoQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_GetAutoQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAutoQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).GetAutoQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_GetAutoQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).GetAutoQuestion(ctx, req.(*GetAutoQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_GetAutoEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAutoEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).GetAutoEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_GetAutoEvaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).GetAutoEvaluation(ctx, req.(*GetAutoEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_ListAutoEvaluations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAutoEvaluationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).ListAutoEvaluations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_ListAutoEvaluations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).ListAutoEvaluations(ctx, req.(*ListAutoEvaluationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_StreamAutoEvaluations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamAutoEvaluationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ScorecardsServer).StreamAutoEvaluations(m, &scorecardsStreamAutoEvaluationsServer{ServerStream: stream})
}

type Scorecards_StreamAutoEvaluationsServer interface {
	Send(*StreamAutoEvaluationsResponse) error
	grpc.ServerStream
}

type scorecardsStreamAutoEvaluationsServer struct {
	grpc.ServerStream
}

func (x *scorecardsStreamAutoEvaluationsServer) Send(m *StreamAutoEvaluationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Scorecards_DeleteAutoEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAutoEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).DeleteAutoEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_DeleteAutoEvaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).DeleteAutoEvaluation(ctx, req.(*DeleteAutoEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_PreviewEvaluationScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviewEvaluationScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).PreviewEvaluationScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_PreviewEvaluationScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).PreviewEvaluationScore(ctx, req.(*PreviewEvaluationScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_RestoreEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).RestoreEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_RestoreEvaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).RestoreEvaluation(ctx, req.(*RestoreEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_CreateSmartQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSmartQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).CreateSmartQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_CreateSmartQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).CreateSmartQuestion(ctx, req.(*CreateSmartQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_UpdateSmartQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSmartQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).UpdateSmartQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_UpdateSmartQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).UpdateSmartQuestion(ctx, req.(*UpdateSmartQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_DeleteSmartQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSmartQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).DeleteSmartQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_DeleteSmartQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).DeleteSmartQuestion(ctx, req.(*DeleteSmartQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_ListSmartEvaluations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSmartEvaluationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).ListSmartEvaluations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_ListSmartEvaluations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).ListSmartEvaluations(ctx, req.(*ListSmartEvaluationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_DeleteSmartEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSmartEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).DeleteSmartEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_DeleteSmartEvaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).DeleteSmartEvaluation(ctx, req.(*DeleteSmartEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorecards_GetSmartEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSmartEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorecardsServer).GetSmartEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scorecards_GetSmartEvaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorecardsServer).GetSmartEvaluation(ctx, req.(*GetSmartEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Scorecards_ServiceDesc is the grpc.ServiceDesc for Scorecards service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scorecards_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.scorecards.Scorecards",
	HandlerType: (*ScorecardsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateScorecard",
			Handler:    _Scorecards_CreateScorecard_Handler,
		},
		{
			MethodName: "ListScorecards",
			Handler:    _Scorecards_ListScorecards_Handler,
		},
		{
			MethodName: "UpdateScorecard",
			Handler:    _Scorecards_UpdateScorecard_Handler,
		},
		{
			MethodName: "DeleteScorecard",
			Handler:    _Scorecards_DeleteScorecard_Handler,
		},
		{
			MethodName: "GetScorecard",
			Handler:    _Scorecards_GetScorecard_Handler,
		},
		{
			MethodName: "CreateQuestion",
			Handler:    _Scorecards_CreateQuestion_Handler,
		},
		{
			MethodName: "ListQuestions",
			Handler:    _Scorecards_ListQuestions_Handler,
		},
		{
			MethodName: "UpdateQuestion",
			Handler:    _Scorecards_UpdateQuestion_Handler,
		},
		{
			MethodName: "DeleteQuestion",
			Handler:    _Scorecards_DeleteQuestion_Handler,
		},
		{
			MethodName: "GetQuestion",
			Handler:    _Scorecards_GetQuestion_Handler,
		},
		{
			MethodName: "BulkCreateQuestions",
			Handler:    _Scorecards_BulkCreateQuestions_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _Scorecards_CreateCategory_Handler,
		},
		{
			MethodName: "ListCategories",
			Handler:    _Scorecards_ListCategories_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _Scorecards_UpdateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _Scorecards_DeleteCategory_Handler,
		},
		{
			MethodName: "GetCategory",
			Handler:    _Scorecards_GetCategory_Handler,
		},
		{
			MethodName: "CreateScorecardQuestion",
			Handler:    _Scorecards_CreateScorecardQuestion_Handler,
		},
		{
			MethodName: "UpdateScorecardQuestion",
			Handler:    _Scorecards_UpdateScorecardQuestion_Handler,
		},
		{
			MethodName: "DeleteScorecardQuestion",
			Handler:    _Scorecards_DeleteScorecardQuestion_Handler,
		},
		{
			MethodName: "GetScorecardQuestion",
			Handler:    _Scorecards_GetScorecardQuestion_Handler,
		},
		{
			MethodName: "CreateSection",
			Handler:    _Scorecards_CreateSection_Handler,
		},
		{
			MethodName: "ListSections",
			Handler:    _Scorecards_ListSections_Handler,
		},
		{
			MethodName: "UpdateSection",
			Handler:    _Scorecards_UpdateSection_Handler,
		},
		{
			MethodName: "GetSection",
			Handler:    _Scorecards_GetSection_Handler,
		},
		{
			MethodName: "DeleteSection",
			Handler:    _Scorecards_DeleteSection_Handler,
		},
		{
			MethodName: "CreateQuestionCategory",
			Handler:    _Scorecards_CreateQuestionCategory_Handler,
		},
		{
			MethodName: "DeleteQuestionCategory",
			Handler:    _Scorecards_DeleteQuestionCategory_Handler,
		},
		{
			MethodName: "CreateEvaluation",
			Handler:    _Scorecards_CreateEvaluation_Handler,
		},
		{
			MethodName: "DeleteEvaluation",
			Handler:    _Scorecards_DeleteEvaluation_Handler,
		},
		{
			MethodName: "ScoreEvaluation",
			Handler:    _Scorecards_ScoreEvaluation_Handler,
		},
		{
			MethodName: "UpdateEvaluation",
			Handler:    _Scorecards_UpdateEvaluation_Handler,
		},
		{
			MethodName: "GetEvaluation",
			Handler:    _Scorecards_GetEvaluation_Handler,
		},
		{
			MethodName: "ListEvaluations",
			Handler:    _Scorecards_ListEvaluations_Handler,
		},
		{
			MethodName: "CreateEvaluationQuestion",
			Handler:    _Scorecards_CreateEvaluationQuestion_Handler,
		},
		{
			MethodName: "UpdateEvaluationQuestion",
			Handler:    _Scorecards_UpdateEvaluationQuestion_Handler,
		},
		{
			MethodName: "DeleteEvaluationQuestion",
			Handler:    _Scorecards_DeleteEvaluationQuestion_Handler,
		},
		{
			MethodName: "SampleCallsByCategory",
			Handler:    _Scorecards_SampleCallsByCategory_Handler,
		},
		{
			MethodName: "CreateAutoQuestion",
			Handler:    _Scorecards_CreateAutoQuestion_Handler,
		},
		{
			MethodName: "UpdateAutoQuestion",
			Handler:    _Scorecards_UpdateAutoQuestion_Handler,
		},
		{
			MethodName: "DeleteAutoQuestion",
			Handler:    _Scorecards_DeleteAutoQuestion_Handler,
		},
		{
			MethodName: "GetAutoQuestion",
			Handler:    _Scorecards_GetAutoQuestion_Handler,
		},
		{
			MethodName: "GetAutoEvaluation",
			Handler:    _Scorecards_GetAutoEvaluation_Handler,
		},
		{
			MethodName: "ListAutoEvaluations",
			Handler:    _Scorecards_ListAutoEvaluations_Handler,
		},
		{
			MethodName: "DeleteAutoEvaluation",
			Handler:    _Scorecards_DeleteAutoEvaluation_Handler,
		},
		{
			MethodName: "PreviewEvaluationScore",
			Handler:    _Scorecards_PreviewEvaluationScore_Handler,
		},
		{
			MethodName: "RestoreEvaluation",
			Handler:    _Scorecards_RestoreEvaluation_Handler,
		},
		{
			MethodName: "CreateSmartQuestion",
			Handler:    _Scorecards_CreateSmartQuestion_Handler,
		},
		{
			MethodName: "UpdateSmartQuestion",
			Handler:    _Scorecards_UpdateSmartQuestion_Handler,
		},
		{
			MethodName: "DeleteSmartQuestion",
			Handler:    _Scorecards_DeleteSmartQuestion_Handler,
		},
		{
			MethodName: "ListSmartEvaluations",
			Handler:    _Scorecards_ListSmartEvaluations_Handler,
		},
		{
			MethodName: "DeleteSmartEvaluation",
			Handler:    _Scorecards_DeleteSmartEvaluation_Handler,
		},
		{
			MethodName: "GetSmartEvaluation",
			Handler:    _Scorecards_GetSmartEvaluation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAutoEvaluations",
			Handler:       _Scorecards_StreamAutoEvaluations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1alpha1/scorecards/service.proto",
}
