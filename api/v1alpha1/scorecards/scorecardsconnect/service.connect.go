// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1alpha1/scorecards/service.proto

package scorecardsconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	scorecards "github.com/tcncloud/api-go/api/v1alpha1/scorecards"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ScorecardsName is the fully-qualified name of the Scorecards service.
	ScorecardsName = "api.v1alpha1.scorecards.Scorecards"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ScorecardsCreateScorecardProcedure is the fully-qualified name of the Scorecards's
	// CreateScorecard RPC.
	ScorecardsCreateScorecardProcedure = "/api.v1alpha1.scorecards.Scorecards/CreateScorecard"
	// ScorecardsListScorecardsProcedure is the fully-qualified name of the Scorecards's ListScorecards
	// RPC.
	ScorecardsListScorecardsProcedure = "/api.v1alpha1.scorecards.Scorecards/ListScorecards"
	// ScorecardsUpdateScorecardProcedure is the fully-qualified name of the Scorecards's
	// UpdateScorecard RPC.
	ScorecardsUpdateScorecardProcedure = "/api.v1alpha1.scorecards.Scorecards/UpdateScorecard"
	// ScorecardsDeleteScorecardProcedure is the fully-qualified name of the Scorecards's
	// DeleteScorecard RPC.
	ScorecardsDeleteScorecardProcedure = "/api.v1alpha1.scorecards.Scorecards/DeleteScorecard"
	// ScorecardsGetScorecardProcedure is the fully-qualified name of the Scorecards's GetScorecard RPC.
	ScorecardsGetScorecardProcedure = "/api.v1alpha1.scorecards.Scorecards/GetScorecard"
	// ScorecardsCreateQuestionProcedure is the fully-qualified name of the Scorecards's CreateQuestion
	// RPC.
	ScorecardsCreateQuestionProcedure = "/api.v1alpha1.scorecards.Scorecards/CreateQuestion"
	// ScorecardsListQuestionsProcedure is the fully-qualified name of the Scorecards's ListQuestions
	// RPC.
	ScorecardsListQuestionsProcedure = "/api.v1alpha1.scorecards.Scorecards/ListQuestions"
	// ScorecardsUpdateQuestionProcedure is the fully-qualified name of the Scorecards's UpdateQuestion
	// RPC.
	ScorecardsUpdateQuestionProcedure = "/api.v1alpha1.scorecards.Scorecards/UpdateQuestion"
	// ScorecardsDeleteQuestionProcedure is the fully-qualified name of the Scorecards's DeleteQuestion
	// RPC.
	ScorecardsDeleteQuestionProcedure = "/api.v1alpha1.scorecards.Scorecards/DeleteQuestion"
	// ScorecardsGetQuestionProcedure is the fully-qualified name of the Scorecards's GetQuestion RPC.
	ScorecardsGetQuestionProcedure = "/api.v1alpha1.scorecards.Scorecards/GetQuestion"
	// ScorecardsBulkCreateQuestionsProcedure is the fully-qualified name of the Scorecards's
	// BulkCreateQuestions RPC.
	ScorecardsBulkCreateQuestionsProcedure = "/api.v1alpha1.scorecards.Scorecards/BulkCreateQuestions"
	// ScorecardsCreateCategoryProcedure is the fully-qualified name of the Scorecards's CreateCategory
	// RPC.
	ScorecardsCreateCategoryProcedure = "/api.v1alpha1.scorecards.Scorecards/CreateCategory"
	// ScorecardsListCategoriesProcedure is the fully-qualified name of the Scorecards's ListCategories
	// RPC.
	ScorecardsListCategoriesProcedure = "/api.v1alpha1.scorecards.Scorecards/ListCategories"
	// ScorecardsUpdateCategoryProcedure is the fully-qualified name of the Scorecards's UpdateCategory
	// RPC.
	ScorecardsUpdateCategoryProcedure = "/api.v1alpha1.scorecards.Scorecards/UpdateCategory"
	// ScorecardsDeleteCategoryProcedure is the fully-qualified name of the Scorecards's DeleteCategory
	// RPC.
	ScorecardsDeleteCategoryProcedure = "/api.v1alpha1.scorecards.Scorecards/DeleteCategory"
	// ScorecardsGetCategoryProcedure is the fully-qualified name of the Scorecards's GetCategory RPC.
	ScorecardsGetCategoryProcedure = "/api.v1alpha1.scorecards.Scorecards/GetCategory"
	// ScorecardsCreateScorecardQuestionProcedure is the fully-qualified name of the Scorecards's
	// CreateScorecardQuestion RPC.
	ScorecardsCreateScorecardQuestionProcedure = "/api.v1alpha1.scorecards.Scorecards/CreateScorecardQuestion"
	// ScorecardsUpdateScorecardQuestionProcedure is the fully-qualified name of the Scorecards's
	// UpdateScorecardQuestion RPC.
	ScorecardsUpdateScorecardQuestionProcedure = "/api.v1alpha1.scorecards.Scorecards/UpdateScorecardQuestion"
	// ScorecardsDeleteScorecardQuestionProcedure is the fully-qualified name of the Scorecards's
	// DeleteScorecardQuestion RPC.
	ScorecardsDeleteScorecardQuestionProcedure = "/api.v1alpha1.scorecards.Scorecards/DeleteScorecardQuestion"
	// ScorecardsGetScorecardQuestionProcedure is the fully-qualified name of the Scorecards's
	// GetScorecardQuestion RPC.
	ScorecardsGetScorecardQuestionProcedure = "/api.v1alpha1.scorecards.Scorecards/GetScorecardQuestion"
	// ScorecardsCreateSectionProcedure is the fully-qualified name of the Scorecards's CreateSection
	// RPC.
	ScorecardsCreateSectionProcedure = "/api.v1alpha1.scorecards.Scorecards/CreateSection"
	// ScorecardsListSectionsProcedure is the fully-qualified name of the Scorecards's ListSections RPC.
	ScorecardsListSectionsProcedure = "/api.v1alpha1.scorecards.Scorecards/ListSections"
	// ScorecardsUpdateSectionProcedure is the fully-qualified name of the Scorecards's UpdateSection
	// RPC.
	ScorecardsUpdateSectionProcedure = "/api.v1alpha1.scorecards.Scorecards/UpdateSection"
	// ScorecardsGetSectionProcedure is the fully-qualified name of the Scorecards's GetSection RPC.
	ScorecardsGetSectionProcedure = "/api.v1alpha1.scorecards.Scorecards/GetSection"
	// ScorecardsDeleteSectionProcedure is the fully-qualified name of the Scorecards's DeleteSection
	// RPC.
	ScorecardsDeleteSectionProcedure = "/api.v1alpha1.scorecards.Scorecards/DeleteSection"
	// ScorecardsCreateQuestionCategoryProcedure is the fully-qualified name of the Scorecards's
	// CreateQuestionCategory RPC.
	ScorecardsCreateQuestionCategoryProcedure = "/api.v1alpha1.scorecards.Scorecards/CreateQuestionCategory"
	// ScorecardsDeleteQuestionCategoryProcedure is the fully-qualified name of the Scorecards's
	// DeleteQuestionCategory RPC.
	ScorecardsDeleteQuestionCategoryProcedure = "/api.v1alpha1.scorecards.Scorecards/DeleteQuestionCategory"
	// ScorecardsCreateEvaluationProcedure is the fully-qualified name of the Scorecards's
	// CreateEvaluation RPC.
	ScorecardsCreateEvaluationProcedure = "/api.v1alpha1.scorecards.Scorecards/CreateEvaluation"
	// ScorecardsDeleteEvaluationProcedure is the fully-qualified name of the Scorecards's
	// DeleteEvaluation RPC.
	ScorecardsDeleteEvaluationProcedure = "/api.v1alpha1.scorecards.Scorecards/DeleteEvaluation"
	// ScorecardsScoreEvaluationProcedure is the fully-qualified name of the Scorecards's
	// ScoreEvaluation RPC.
	ScorecardsScoreEvaluationProcedure = "/api.v1alpha1.scorecards.Scorecards/ScoreEvaluation"
	// ScorecardsUpdateEvaluationProcedure is the fully-qualified name of the Scorecards's
	// UpdateEvaluation RPC.
	ScorecardsUpdateEvaluationProcedure = "/api.v1alpha1.scorecards.Scorecards/UpdateEvaluation"
	// ScorecardsGetEvaluationProcedure is the fully-qualified name of the Scorecards's GetEvaluation
	// RPC.
	ScorecardsGetEvaluationProcedure = "/api.v1alpha1.scorecards.Scorecards/GetEvaluation"
	// ScorecardsListEvaluationsProcedure is the fully-qualified name of the Scorecards's
	// ListEvaluations RPC.
	ScorecardsListEvaluationsProcedure = "/api.v1alpha1.scorecards.Scorecards/ListEvaluations"
	// ScorecardsCreateEvaluationQuestionProcedure is the fully-qualified name of the Scorecards's
	// CreateEvaluationQuestion RPC.
	ScorecardsCreateEvaluationQuestionProcedure = "/api.v1alpha1.scorecards.Scorecards/CreateEvaluationQuestion"
	// ScorecardsUpdateEvaluationQuestionProcedure is the fully-qualified name of the Scorecards's
	// UpdateEvaluationQuestion RPC.
	ScorecardsUpdateEvaluationQuestionProcedure = "/api.v1alpha1.scorecards.Scorecards/UpdateEvaluationQuestion"
	// ScorecardsDeleteEvaluationQuestionProcedure is the fully-qualified name of the Scorecards's
	// DeleteEvaluationQuestion RPC.
	ScorecardsDeleteEvaluationQuestionProcedure = "/api.v1alpha1.scorecards.Scorecards/DeleteEvaluationQuestion"
	// ScorecardsSampleCallsByCategoryProcedure is the fully-qualified name of the Scorecards's
	// SampleCallsByCategory RPC.
	ScorecardsSampleCallsByCategoryProcedure = "/api.v1alpha1.scorecards.Scorecards/SampleCallsByCategory"
	// ScorecardsSampleAgentConversationsProcedure is the fully-qualified name of the Scorecards's
	// SampleAgentConversations RPC.
	ScorecardsSampleAgentConversationsProcedure = "/api.v1alpha1.scorecards.Scorecards/SampleAgentConversations"
	// ScorecardsCreateAutoQuestionProcedure is the fully-qualified name of the Scorecards's
	// CreateAutoQuestion RPC.
	ScorecardsCreateAutoQuestionProcedure = "/api.v1alpha1.scorecards.Scorecards/CreateAutoQuestion"
	// ScorecardsUpdateAutoQuestionProcedure is the fully-qualified name of the Scorecards's
	// UpdateAutoQuestion RPC.
	ScorecardsUpdateAutoQuestionProcedure = "/api.v1alpha1.scorecards.Scorecards/UpdateAutoQuestion"
	// ScorecardsDeleteAutoQuestionProcedure is the fully-qualified name of the Scorecards's
	// DeleteAutoQuestion RPC.
	ScorecardsDeleteAutoQuestionProcedure = "/api.v1alpha1.scorecards.Scorecards/DeleteAutoQuestion"
	// ScorecardsGetAutoQuestionProcedure is the fully-qualified name of the Scorecards's
	// GetAutoQuestion RPC.
	ScorecardsGetAutoQuestionProcedure = "/api.v1alpha1.scorecards.Scorecards/GetAutoQuestion"
	// ScorecardsGetAutoEvaluationProcedure is the fully-qualified name of the Scorecards's
	// GetAutoEvaluation RPC.
	ScorecardsGetAutoEvaluationProcedure = "/api.v1alpha1.scorecards.Scorecards/GetAutoEvaluation"
	// ScorecardsListAutoEvaluationsProcedure is the fully-qualified name of the Scorecards's
	// ListAutoEvaluations RPC.
	ScorecardsListAutoEvaluationsProcedure = "/api.v1alpha1.scorecards.Scorecards/ListAutoEvaluations"
	// ScorecardsStreamAutoEvaluationsProcedure is the fully-qualified name of the Scorecards's
	// StreamAutoEvaluations RPC.
	ScorecardsStreamAutoEvaluationsProcedure = "/api.v1alpha1.scorecards.Scorecards/StreamAutoEvaluations"
	// ScorecardsDeleteAutoEvaluationProcedure is the fully-qualified name of the Scorecards's
	// DeleteAutoEvaluation RPC.
	ScorecardsDeleteAutoEvaluationProcedure = "/api.v1alpha1.scorecards.Scorecards/DeleteAutoEvaluation"
	// ScorecardsPreviewEvaluationScoreProcedure is the fully-qualified name of the Scorecards's
	// PreviewEvaluationScore RPC.
	ScorecardsPreviewEvaluationScoreProcedure = "/api.v1alpha1.scorecards.Scorecards/PreviewEvaluationScore"
	// ScorecardsRestoreEvaluationProcedure is the fully-qualified name of the Scorecards's
	// RestoreEvaluation RPC.
	ScorecardsRestoreEvaluationProcedure = "/api.v1alpha1.scorecards.Scorecards/RestoreEvaluation"
	// ScorecardsCreateSmartQuestionProcedure is the fully-qualified name of the Scorecards's
	// CreateSmartQuestion RPC.
	ScorecardsCreateSmartQuestionProcedure = "/api.v1alpha1.scorecards.Scorecards/CreateSmartQuestion"
	// ScorecardsUpdateSmartQuestionProcedure is the fully-qualified name of the Scorecards's
	// UpdateSmartQuestion RPC.
	ScorecardsUpdateSmartQuestionProcedure = "/api.v1alpha1.scorecards.Scorecards/UpdateSmartQuestion"
	// ScorecardsDeleteSmartQuestionProcedure is the fully-qualified name of the Scorecards's
	// DeleteSmartQuestion RPC.
	ScorecardsDeleteSmartQuestionProcedure = "/api.v1alpha1.scorecards.Scorecards/DeleteSmartQuestion"
	// ScorecardsListSmartEvaluationsProcedure is the fully-qualified name of the Scorecards's
	// ListSmartEvaluations RPC.
	ScorecardsListSmartEvaluationsProcedure = "/api.v1alpha1.scorecards.Scorecards/ListSmartEvaluations"
	// ScorecardsDeleteSmartEvaluationProcedure is the fully-qualified name of the Scorecards's
	// DeleteSmartEvaluation RPC.
	ScorecardsDeleteSmartEvaluationProcedure = "/api.v1alpha1.scorecards.Scorecards/DeleteSmartEvaluation"
	// ScorecardsGetSmartEvaluationProcedure is the fully-qualified name of the Scorecards's
	// GetSmartEvaluation RPC.
	ScorecardsGetSmartEvaluationProcedure = "/api.v1alpha1.scorecards.Scorecards/GetSmartEvaluation"
)

// ScorecardsClient is a client for the api.v1alpha1.scorecards.Scorecards service.
type ScorecardsClient interface {
	// CreateScorecard creates a new scorecard
	CreateScorecard(context.Context, *connect_go.Request[scorecards.CreateScorecardRequest]) (*connect_go.Response[scorecards.CreateScorecardResponse], error)
	// ListScorecards lists scorecards
	ListScorecards(context.Context, *connect_go.Request[scorecards.ListScorecardsRequest]) (*connect_go.Response[scorecards.ListScorecardsResponse], error)
	// UpdateScorecard updates an existing scorecard
	UpdateScorecard(context.Context, *connect_go.Request[scorecards.UpdateScorecardRequest]) (*connect_go.Response[scorecards.UpdateScorecardResponse], error)
	// DeleteScorecard deletes a scorecard
	DeleteScorecard(context.Context, *connect_go.Request[scorecards.DeleteScorecardRequest]) (*connect_go.Response[scorecards.DeleteScorecardResponse], error)
	// GetScorecard gets a scorecard by ID
	GetScorecard(context.Context, *connect_go.Request[scorecards.GetScorecardRequest]) (*connect_go.Response[scorecards.GetScorecardResponse], error)
	// CreateQuestion creates a new library question
	CreateQuestion(context.Context, *connect_go.Request[scorecards.CreateQuestionRequest]) (*connect_go.Response[scorecards.CreateQuestionResponse], error)
	// ListQuestions lists library questions
	ListQuestions(context.Context, *connect_go.Request[scorecards.ListQuestionsRequest]) (*connect_go.Response[scorecards.ListQuestionsResponse], error)
	// UpdateQuestion updates a library question
	UpdateQuestion(context.Context, *connect_go.Request[scorecards.UpdateQuestionRequest]) (*connect_go.Response[scorecards.UpdateQuestionResponse], error)
	// DeleteQuestion deletes a library question
	DeleteQuestion(context.Context, *connect_go.Request[scorecards.DeleteQuestionRequest]) (*connect_go.Response[scorecards.DeleteQuestionResponse], error)
	// GetQuestion gets a library question
	GetQuestion(context.Context, *connect_go.Request[scorecards.GetQuestionRequest]) (*connect_go.Response[scorecards.GetQuestionResponse], error)
	// BulkCreateQuestions creates library questions by a scorecard id
	BulkCreateQuestions(context.Context, *connect_go.Request[scorecards.BulkCreateQuestionsRequest]) (*connect_go.Response[scorecards.BulkCreateQuestionsResponse], error)
	// CreateCategory creates a new scorecards category
	CreateCategory(context.Context, *connect_go.Request[scorecards.CreateCategoryRequest]) (*connect_go.Response[scorecards.CreateCategoryResponse], error)
	// ListCategories lists scorecards categories
	ListCategories(context.Context, *connect_go.Request[scorecards.ListCategoriesRequest]) (*connect_go.Response[scorecards.ListCategoriesResponse], error)
	// UpdateCategory updates a scorecard category
	UpdateCategory(context.Context, *connect_go.Request[scorecards.UpdateCategoryRequest]) (*connect_go.Response[scorecards.UpdateCategoryResponse], error)
	// DeleteCategory deletes a scorecard category
	DeleteCategory(context.Context, *connect_go.Request[scorecards.DeleteCategoryRequest]) (*connect_go.Response[scorecards.DeleteCategoryResponse], error)
	// GetCategory gets a scorecard category
	GetCategory(context.Context, *connect_go.Request[scorecards.GetCategoryRequest]) (*connect_go.Response[scorecards.GetCategoryResponse], error)
	// CreateScorecardQuestion creates a scorecard scorecard question
	CreateScorecardQuestion(context.Context, *connect_go.Request[scorecards.CreateScorecardQuestionRequest]) (*connect_go.Response[scorecards.CreateScorecardQuestionResponse], error)
	// UpdateScorecardQuestion updates a scorecard question
	UpdateScorecardQuestion(context.Context, *connect_go.Request[scorecards.UpdateScorecardQuestionRequest]) (*connect_go.Response[scorecards.UpdateScorecardQuestionResponse], error)
	// DeleteScorecardQuestion deletes a scorecard question
	DeleteScorecardQuestion(context.Context, *connect_go.Request[scorecards.DeleteScorecardQuestionRequest]) (*connect_go.Response[scorecards.DeleteScorecardQuestionResponse], error)
	// GetScorecardQuestion gets a scorecard question
	GetScorecardQuestion(context.Context, *connect_go.Request[scorecards.GetScorecardQuestionRequest]) (*connect_go.Response[scorecards.GetScorecardQuestionResponse], error)
	// CreateSection creates a new scorecards section
	CreateSection(context.Context, *connect_go.Request[scorecards.CreateSectionRequest]) (*connect_go.Response[scorecards.CreateSectionResponse], error)
	// ListSections lists scorecards sections
	ListSections(context.Context, *connect_go.Request[scorecards.ListSectionsRequest]) (*connect_go.Response[scorecards.ListSectionsResponse], error)
	// UpdateSection updates a scorecard section
	UpdateSection(context.Context, *connect_go.Request[scorecards.UpdateSectionRequest]) (*connect_go.Response[scorecards.UpdateSectionResponse], error)
	// GetSection gets a scorecard section
	GetSection(context.Context, *connect_go.Request[scorecards.GetSectionRequest]) (*connect_go.Response[scorecards.GetSectionResponse], error)
	// DeleteSection deletes a scorecard section
	DeleteSection(context.Context, *connect_go.Request[scorecards.DeleteSectionRequest]) (*connect_go.Response[scorecards.DeleteSectionResponse], error)
	// CreateQuestionCategory links a scorecard question and category
	CreateQuestionCategory(context.Context, *connect_go.Request[scorecards.CreateQuestionCategoryRequest]) (*connect_go.Response[scorecards.CreateQuestionCategoryResponse], error)
	// DeleteQuestionCategory deletes link between a scorecard question and category
	DeleteQuestionCategory(context.Context, *connect_go.Request[scorecards.DeleteQuestionCategoryRequest]) (*connect_go.Response[scorecards.DeleteQuestionCategoryResponse], error)
	// CreateEvaluation creates a new evaluation
	CreateEvaluation(context.Context, *connect_go.Request[scorecards.CreateEvaluationRequest]) (*connect_go.Response[scorecards.CreateEvaluationResponse], error)
	// DeleteEvaluation gets an evaluation
	DeleteEvaluation(context.Context, *connect_go.Request[scorecards.DeleteEvaluationRequest]) (*connect_go.Response[scorecards.DeleteEvaluationResponse], error)
	// GetEvaluation gets an evaluation
	ScoreEvaluation(context.Context, *connect_go.Request[scorecards.ScoreEvaluationRequest]) (*connect_go.Response[scorecards.ScoreEvaluationResponse], error)
	// UpdateEvaluation updates an evaluation
	UpdateEvaluation(context.Context, *connect_go.Request[scorecards.UpdateEvaluationRequest]) (*connect_go.Response[scorecards.UpdateEvaluationResponse], error)
	// GetEvaluation gets an evaluation
	GetEvaluation(context.Context, *connect_go.Request[scorecards.GetEvaluationRequest]) (*connect_go.Response[scorecards.GetEvaluationResponse], error)
	// ListEvaluations gets a list of evaluations
	ListEvaluations(context.Context, *connect_go.Request[scorecards.ListEvaluationsRequest]) (*connect_go.Response[scorecards.ListEvaluationsResponse], error)
	// DEPRECATED. Use CreateEvaluation to create evaluation sub-entities.
	//
	// Deprecated: do not use.
	CreateEvaluationQuestion(context.Context, *connect_go.Request[scorecards.CreateEvaluationQuestionRequest]) (*connect_go.Response[scorecards.CreateEvaluationQuestionResponse], error)
	// UpdateEvaluationQuestion updates an existing evaluation question
	UpdateEvaluationQuestion(context.Context, *connect_go.Request[scorecards.UpdateEvaluationQuestionRequest]) (*connect_go.Response[scorecards.UpdateEvaluationQuestionResponse], error)
	// DeleteEvaluationQuestion creates an evaluation question
	DeleteEvaluationQuestion(context.Context, *connect_go.Request[scorecards.DeleteEvaluationQuestionRequest]) (*connect_go.Response[scorecards.DeleteEvaluationQuestionResponse], error)
	// SampleCallsByCategory
	SampleCallsByCategory(context.Context, *connect_go.Request[scorecards.SampleCallsByCategoryRequest]) (*connect_go.Response[scorecards.SampleCallsByCategoryResponse], error)
	// SampleAgentConversations
	SampleAgentConversations(context.Context, *connect_go.Request[scorecards.SampleAgentConversationsRequest]) (*connect_go.Response[scorecards.SampleAgentConversationsResponse], error)
	// CreateAutoQuestion creates an auto question
	CreateAutoQuestion(context.Context, *connect_go.Request[scorecards.CreateAutoQuestionRequest]) (*connect_go.Response[scorecards.CreateAutoQuestionResponse], error)
	// UpdateAutoQuestion updates an auto question
	UpdateAutoQuestion(context.Context, *connect_go.Request[scorecards.UpdateAutoQuestionRequest]) (*connect_go.Response[scorecards.UpdateAutoQuestionResponse], error)
	// DeleteAutoQuestion deletes an auto question
	DeleteAutoQuestion(context.Context, *connect_go.Request[scorecards.DeleteAutoQuestionRequest]) (*connect_go.Response[scorecards.DeleteAutoQuestionResponse], error)
	// GetAutoQuestion gets an auto question
	GetAutoQuestion(context.Context, *connect_go.Request[scorecards.GetAutoQuestionRequest]) (*connect_go.Response[scorecards.GetAutoQuestionResponse], error)
	// GetAutoEvaluation gets an auto evaluation
	GetAutoEvaluation(context.Context, *connect_go.Request[scorecards.GetAutoEvaluationRequest]) (*connect_go.Response[scorecards.GetAutoEvaluationResponse], error)
	// ListAutoEvaluations gets a list of auto evaluations
	ListAutoEvaluations(context.Context, *connect_go.Request[scorecards.ListAutoEvaluationsRequest]) (*connect_go.Response[scorecards.ListAutoEvaluationsResponse], error)
	// DEPRECATED. Use ListAutoEvaluations.
	//
	// Deprecated: do not use.
	StreamAutoEvaluations(context.Context, *connect_go.Request[scorecards.StreamAutoEvaluationsRequest]) (*connect_go.ServerStreamForClient[scorecards.StreamAutoEvaluationsResponse], error)
	// DeleteAutoEvaluation deletes an auto evaluations
	DeleteAutoEvaluation(context.Context, *connect_go.Request[scorecards.DeleteAutoEvaluationRequest]) (*connect_go.Response[scorecards.DeleteAutoEvaluationResponse], error)
	// PreviewEvaluationScore previews the score for an evaluation
	PreviewEvaluationScore(context.Context, *connect_go.Request[scorecards.PreviewEvaluationScoreRequest]) (*connect_go.Response[scorecards.PreviewEvaluationScoreResponse], error)
	// RestoreEvaluation restores an evaluation previously deleted.
	RestoreEvaluation(context.Context, *connect_go.Request[scorecards.RestoreEvaluationRequest]) (*connect_go.Response[scorecards.RestoreEvaluationResponse], error)
	// CreateSmartQuestion creates a scorecard smart question.
	CreateSmartQuestion(context.Context, *connect_go.Request[scorecards.CreateSmartQuestionRequest]) (*connect_go.Response[scorecards.CreateSmartQuestionResponse], error)
	// UpdateSmartQuestion updates a smart question.
	UpdateSmartQuestion(context.Context, *connect_go.Request[scorecards.UpdateSmartQuestionRequest]) (*connect_go.Response[scorecards.UpdateSmartQuestionResponse], error)
	// DeleteSmartQuestion deletes a smart question.
	DeleteSmartQuestion(context.Context, *connect_go.Request[scorecards.DeleteSmartQuestionRequest]) (*connect_go.Response[scorecards.DeleteSmartQuestionResponse], error)
	// ListSmartEvaluations lists smart evaluations
	ListSmartEvaluations(context.Context, *connect_go.Request[scorecards.ListSmartEvaluationsRequest]) (*connect_go.Response[scorecards.ListSmartEvaluationsResponse], error)
	// DeleteSmartEvaluation deletes a smart evaluation
	DeleteSmartEvaluation(context.Context, *connect_go.Request[scorecards.DeleteSmartEvaluationRequest]) (*connect_go.Response[scorecards.DeleteSmartEvaluationResponse], error)
	// GetSmartEvaluation gets a smart evaluation
	GetSmartEvaluation(context.Context, *connect_go.Request[scorecards.GetSmartEvaluationRequest]) (*connect_go.Response[scorecards.GetSmartEvaluationResponse], error)
}

// NewScorecardsClient constructs a client for the api.v1alpha1.scorecards.Scorecards service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewScorecardsClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ScorecardsClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &scorecardsClient{
		createScorecard: connect_go.NewClient[scorecards.CreateScorecardRequest, scorecards.CreateScorecardResponse](
			httpClient,
			baseURL+ScorecardsCreateScorecardProcedure,
			opts...,
		),
		listScorecards: connect_go.NewClient[scorecards.ListScorecardsRequest, scorecards.ListScorecardsResponse](
			httpClient,
			baseURL+ScorecardsListScorecardsProcedure,
			opts...,
		),
		updateScorecard: connect_go.NewClient[scorecards.UpdateScorecardRequest, scorecards.UpdateScorecardResponse](
			httpClient,
			baseURL+ScorecardsUpdateScorecardProcedure,
			opts...,
		),
		deleteScorecard: connect_go.NewClient[scorecards.DeleteScorecardRequest, scorecards.DeleteScorecardResponse](
			httpClient,
			baseURL+ScorecardsDeleteScorecardProcedure,
			opts...,
		),
		getScorecard: connect_go.NewClient[scorecards.GetScorecardRequest, scorecards.GetScorecardResponse](
			httpClient,
			baseURL+ScorecardsGetScorecardProcedure,
			opts...,
		),
		createQuestion: connect_go.NewClient[scorecards.CreateQuestionRequest, scorecards.CreateQuestionResponse](
			httpClient,
			baseURL+ScorecardsCreateQuestionProcedure,
			opts...,
		),
		listQuestions: connect_go.NewClient[scorecards.ListQuestionsRequest, scorecards.ListQuestionsResponse](
			httpClient,
			baseURL+ScorecardsListQuestionsProcedure,
			opts...,
		),
		updateQuestion: connect_go.NewClient[scorecards.UpdateQuestionRequest, scorecards.UpdateQuestionResponse](
			httpClient,
			baseURL+ScorecardsUpdateQuestionProcedure,
			opts...,
		),
		deleteQuestion: connect_go.NewClient[scorecards.DeleteQuestionRequest, scorecards.DeleteQuestionResponse](
			httpClient,
			baseURL+ScorecardsDeleteQuestionProcedure,
			opts...,
		),
		getQuestion: connect_go.NewClient[scorecards.GetQuestionRequest, scorecards.GetQuestionResponse](
			httpClient,
			baseURL+ScorecardsGetQuestionProcedure,
			opts...,
		),
		bulkCreateQuestions: connect_go.NewClient[scorecards.BulkCreateQuestionsRequest, scorecards.BulkCreateQuestionsResponse](
			httpClient,
			baseURL+ScorecardsBulkCreateQuestionsProcedure,
			opts...,
		),
		createCategory: connect_go.NewClient[scorecards.CreateCategoryRequest, scorecards.CreateCategoryResponse](
			httpClient,
			baseURL+ScorecardsCreateCategoryProcedure,
			opts...,
		),
		listCategories: connect_go.NewClient[scorecards.ListCategoriesRequest, scorecards.ListCategoriesResponse](
			httpClient,
			baseURL+ScorecardsListCategoriesProcedure,
			opts...,
		),
		updateCategory: connect_go.NewClient[scorecards.UpdateCategoryRequest, scorecards.UpdateCategoryResponse](
			httpClient,
			baseURL+ScorecardsUpdateCategoryProcedure,
			opts...,
		),
		deleteCategory: connect_go.NewClient[scorecards.DeleteCategoryRequest, scorecards.DeleteCategoryResponse](
			httpClient,
			baseURL+ScorecardsDeleteCategoryProcedure,
			opts...,
		),
		getCategory: connect_go.NewClient[scorecards.GetCategoryRequest, scorecards.GetCategoryResponse](
			httpClient,
			baseURL+ScorecardsGetCategoryProcedure,
			opts...,
		),
		createScorecardQuestion: connect_go.NewClient[scorecards.CreateScorecardQuestionRequest, scorecards.CreateScorecardQuestionResponse](
			httpClient,
			baseURL+ScorecardsCreateScorecardQuestionProcedure,
			opts...,
		),
		updateScorecardQuestion: connect_go.NewClient[scorecards.UpdateScorecardQuestionRequest, scorecards.UpdateScorecardQuestionResponse](
			httpClient,
			baseURL+ScorecardsUpdateScorecardQuestionProcedure,
			opts...,
		),
		deleteScorecardQuestion: connect_go.NewClient[scorecards.DeleteScorecardQuestionRequest, scorecards.DeleteScorecardQuestionResponse](
			httpClient,
			baseURL+ScorecardsDeleteScorecardQuestionProcedure,
			opts...,
		),
		getScorecardQuestion: connect_go.NewClient[scorecards.GetScorecardQuestionRequest, scorecards.GetScorecardQuestionResponse](
			httpClient,
			baseURL+ScorecardsGetScorecardQuestionProcedure,
			opts...,
		),
		createSection: connect_go.NewClient[scorecards.CreateSectionRequest, scorecards.CreateSectionResponse](
			httpClient,
			baseURL+ScorecardsCreateSectionProcedure,
			opts...,
		),
		listSections: connect_go.NewClient[scorecards.ListSectionsRequest, scorecards.ListSectionsResponse](
			httpClient,
			baseURL+ScorecardsListSectionsProcedure,
			opts...,
		),
		updateSection: connect_go.NewClient[scorecards.UpdateSectionRequest, scorecards.UpdateSectionResponse](
			httpClient,
			baseURL+ScorecardsUpdateSectionProcedure,
			opts...,
		),
		getSection: connect_go.NewClient[scorecards.GetSectionRequest, scorecards.GetSectionResponse](
			httpClient,
			baseURL+ScorecardsGetSectionProcedure,
			opts...,
		),
		deleteSection: connect_go.NewClient[scorecards.DeleteSectionRequest, scorecards.DeleteSectionResponse](
			httpClient,
			baseURL+ScorecardsDeleteSectionProcedure,
			opts...,
		),
		createQuestionCategory: connect_go.NewClient[scorecards.CreateQuestionCategoryRequest, scorecards.CreateQuestionCategoryResponse](
			httpClient,
			baseURL+ScorecardsCreateQuestionCategoryProcedure,
			opts...,
		),
		deleteQuestionCategory: connect_go.NewClient[scorecards.DeleteQuestionCategoryRequest, scorecards.DeleteQuestionCategoryResponse](
			httpClient,
			baseURL+ScorecardsDeleteQuestionCategoryProcedure,
			opts...,
		),
		createEvaluation: connect_go.NewClient[scorecards.CreateEvaluationRequest, scorecards.CreateEvaluationResponse](
			httpClient,
			baseURL+ScorecardsCreateEvaluationProcedure,
			opts...,
		),
		deleteEvaluation: connect_go.NewClient[scorecards.DeleteEvaluationRequest, scorecards.DeleteEvaluationResponse](
			httpClient,
			baseURL+ScorecardsDeleteEvaluationProcedure,
			opts...,
		),
		scoreEvaluation: connect_go.NewClient[scorecards.ScoreEvaluationRequest, scorecards.ScoreEvaluationResponse](
			httpClient,
			baseURL+ScorecardsScoreEvaluationProcedure,
			opts...,
		),
		updateEvaluation: connect_go.NewClient[scorecards.UpdateEvaluationRequest, scorecards.UpdateEvaluationResponse](
			httpClient,
			baseURL+ScorecardsUpdateEvaluationProcedure,
			opts...,
		),
		getEvaluation: connect_go.NewClient[scorecards.GetEvaluationRequest, scorecards.GetEvaluationResponse](
			httpClient,
			baseURL+ScorecardsGetEvaluationProcedure,
			opts...,
		),
		listEvaluations: connect_go.NewClient[scorecards.ListEvaluationsRequest, scorecards.ListEvaluationsResponse](
			httpClient,
			baseURL+ScorecardsListEvaluationsProcedure,
			opts...,
		),
		createEvaluationQuestion: connect_go.NewClient[scorecards.CreateEvaluationQuestionRequest, scorecards.CreateEvaluationQuestionResponse](
			httpClient,
			baseURL+ScorecardsCreateEvaluationQuestionProcedure,
			opts...,
		),
		updateEvaluationQuestion: connect_go.NewClient[scorecards.UpdateEvaluationQuestionRequest, scorecards.UpdateEvaluationQuestionResponse](
			httpClient,
			baseURL+ScorecardsUpdateEvaluationQuestionProcedure,
			opts...,
		),
		deleteEvaluationQuestion: connect_go.NewClient[scorecards.DeleteEvaluationQuestionRequest, scorecards.DeleteEvaluationQuestionResponse](
			httpClient,
			baseURL+ScorecardsDeleteEvaluationQuestionProcedure,
			opts...,
		),
		sampleCallsByCategory: connect_go.NewClient[scorecards.SampleCallsByCategoryRequest, scorecards.SampleCallsByCategoryResponse](
			httpClient,
			baseURL+ScorecardsSampleCallsByCategoryProcedure,
			opts...,
		),
		sampleAgentConversations: connect_go.NewClient[scorecards.SampleAgentConversationsRequest, scorecards.SampleAgentConversationsResponse](
			httpClient,
			baseURL+ScorecardsSampleAgentConversationsProcedure,
			opts...,
		),
		createAutoQuestion: connect_go.NewClient[scorecards.CreateAutoQuestionRequest, scorecards.CreateAutoQuestionResponse](
			httpClient,
			baseURL+ScorecardsCreateAutoQuestionProcedure,
			opts...,
		),
		updateAutoQuestion: connect_go.NewClient[scorecards.UpdateAutoQuestionRequest, scorecards.UpdateAutoQuestionResponse](
			httpClient,
			baseURL+ScorecardsUpdateAutoQuestionProcedure,
			opts...,
		),
		deleteAutoQuestion: connect_go.NewClient[scorecards.DeleteAutoQuestionRequest, scorecards.DeleteAutoQuestionResponse](
			httpClient,
			baseURL+ScorecardsDeleteAutoQuestionProcedure,
			opts...,
		),
		getAutoQuestion: connect_go.NewClient[scorecards.GetAutoQuestionRequest, scorecards.GetAutoQuestionResponse](
			httpClient,
			baseURL+ScorecardsGetAutoQuestionProcedure,
			opts...,
		),
		getAutoEvaluation: connect_go.NewClient[scorecards.GetAutoEvaluationRequest, scorecards.GetAutoEvaluationResponse](
			httpClient,
			baseURL+ScorecardsGetAutoEvaluationProcedure,
			opts...,
		),
		listAutoEvaluations: connect_go.NewClient[scorecards.ListAutoEvaluationsRequest, scorecards.ListAutoEvaluationsResponse](
			httpClient,
			baseURL+ScorecardsListAutoEvaluationsProcedure,
			opts...,
		),
		streamAutoEvaluations: connect_go.NewClient[scorecards.StreamAutoEvaluationsRequest, scorecards.StreamAutoEvaluationsResponse](
			httpClient,
			baseURL+ScorecardsStreamAutoEvaluationsProcedure,
			opts...,
		),
		deleteAutoEvaluation: connect_go.NewClient[scorecards.DeleteAutoEvaluationRequest, scorecards.DeleteAutoEvaluationResponse](
			httpClient,
			baseURL+ScorecardsDeleteAutoEvaluationProcedure,
			opts...,
		),
		previewEvaluationScore: connect_go.NewClient[scorecards.PreviewEvaluationScoreRequest, scorecards.PreviewEvaluationScoreResponse](
			httpClient,
			baseURL+ScorecardsPreviewEvaluationScoreProcedure,
			opts...,
		),
		restoreEvaluation: connect_go.NewClient[scorecards.RestoreEvaluationRequest, scorecards.RestoreEvaluationResponse](
			httpClient,
			baseURL+ScorecardsRestoreEvaluationProcedure,
			opts...,
		),
		createSmartQuestion: connect_go.NewClient[scorecards.CreateSmartQuestionRequest, scorecards.CreateSmartQuestionResponse](
			httpClient,
			baseURL+ScorecardsCreateSmartQuestionProcedure,
			opts...,
		),
		updateSmartQuestion: connect_go.NewClient[scorecards.UpdateSmartQuestionRequest, scorecards.UpdateSmartQuestionResponse](
			httpClient,
			baseURL+ScorecardsUpdateSmartQuestionProcedure,
			opts...,
		),
		deleteSmartQuestion: connect_go.NewClient[scorecards.DeleteSmartQuestionRequest, scorecards.DeleteSmartQuestionResponse](
			httpClient,
			baseURL+ScorecardsDeleteSmartQuestionProcedure,
			opts...,
		),
		listSmartEvaluations: connect_go.NewClient[scorecards.ListSmartEvaluationsRequest, scorecards.ListSmartEvaluationsResponse](
			httpClient,
			baseURL+ScorecardsListSmartEvaluationsProcedure,
			opts...,
		),
		deleteSmartEvaluation: connect_go.NewClient[scorecards.DeleteSmartEvaluationRequest, scorecards.DeleteSmartEvaluationResponse](
			httpClient,
			baseURL+ScorecardsDeleteSmartEvaluationProcedure,
			opts...,
		),
		getSmartEvaluation: connect_go.NewClient[scorecards.GetSmartEvaluationRequest, scorecards.GetSmartEvaluationResponse](
			httpClient,
			baseURL+ScorecardsGetSmartEvaluationProcedure,
			opts...,
		),
	}
}

// scorecardsClient implements ScorecardsClient.
type scorecardsClient struct {
	createScorecard          *connect_go.Client[scorecards.CreateScorecardRequest, scorecards.CreateScorecardResponse]
	listScorecards           *connect_go.Client[scorecards.ListScorecardsRequest, scorecards.ListScorecardsResponse]
	updateScorecard          *connect_go.Client[scorecards.UpdateScorecardRequest, scorecards.UpdateScorecardResponse]
	deleteScorecard          *connect_go.Client[scorecards.DeleteScorecardRequest, scorecards.DeleteScorecardResponse]
	getScorecard             *connect_go.Client[scorecards.GetScorecardRequest, scorecards.GetScorecardResponse]
	createQuestion           *connect_go.Client[scorecards.CreateQuestionRequest, scorecards.CreateQuestionResponse]
	listQuestions            *connect_go.Client[scorecards.ListQuestionsRequest, scorecards.ListQuestionsResponse]
	updateQuestion           *connect_go.Client[scorecards.UpdateQuestionRequest, scorecards.UpdateQuestionResponse]
	deleteQuestion           *connect_go.Client[scorecards.DeleteQuestionRequest, scorecards.DeleteQuestionResponse]
	getQuestion              *connect_go.Client[scorecards.GetQuestionRequest, scorecards.GetQuestionResponse]
	bulkCreateQuestions      *connect_go.Client[scorecards.BulkCreateQuestionsRequest, scorecards.BulkCreateQuestionsResponse]
	createCategory           *connect_go.Client[scorecards.CreateCategoryRequest, scorecards.CreateCategoryResponse]
	listCategories           *connect_go.Client[scorecards.ListCategoriesRequest, scorecards.ListCategoriesResponse]
	updateCategory           *connect_go.Client[scorecards.UpdateCategoryRequest, scorecards.UpdateCategoryResponse]
	deleteCategory           *connect_go.Client[scorecards.DeleteCategoryRequest, scorecards.DeleteCategoryResponse]
	getCategory              *connect_go.Client[scorecards.GetCategoryRequest, scorecards.GetCategoryResponse]
	createScorecardQuestion  *connect_go.Client[scorecards.CreateScorecardQuestionRequest, scorecards.CreateScorecardQuestionResponse]
	updateScorecardQuestion  *connect_go.Client[scorecards.UpdateScorecardQuestionRequest, scorecards.UpdateScorecardQuestionResponse]
	deleteScorecardQuestion  *connect_go.Client[scorecards.DeleteScorecardQuestionRequest, scorecards.DeleteScorecardQuestionResponse]
	getScorecardQuestion     *connect_go.Client[scorecards.GetScorecardQuestionRequest, scorecards.GetScorecardQuestionResponse]
	createSection            *connect_go.Client[scorecards.CreateSectionRequest, scorecards.CreateSectionResponse]
	listSections             *connect_go.Client[scorecards.ListSectionsRequest, scorecards.ListSectionsResponse]
	updateSection            *connect_go.Client[scorecards.UpdateSectionRequest, scorecards.UpdateSectionResponse]
	getSection               *connect_go.Client[scorecards.GetSectionRequest, scorecards.GetSectionResponse]
	deleteSection            *connect_go.Client[scorecards.DeleteSectionRequest, scorecards.DeleteSectionResponse]
	createQuestionCategory   *connect_go.Client[scorecards.CreateQuestionCategoryRequest, scorecards.CreateQuestionCategoryResponse]
	deleteQuestionCategory   *connect_go.Client[scorecards.DeleteQuestionCategoryRequest, scorecards.DeleteQuestionCategoryResponse]
	createEvaluation         *connect_go.Client[scorecards.CreateEvaluationRequest, scorecards.CreateEvaluationResponse]
	deleteEvaluation         *connect_go.Client[scorecards.DeleteEvaluationRequest, scorecards.DeleteEvaluationResponse]
	scoreEvaluation          *connect_go.Client[scorecards.ScoreEvaluationRequest, scorecards.ScoreEvaluationResponse]
	updateEvaluation         *connect_go.Client[scorecards.UpdateEvaluationRequest, scorecards.UpdateEvaluationResponse]
	getEvaluation            *connect_go.Client[scorecards.GetEvaluationRequest, scorecards.GetEvaluationResponse]
	listEvaluations          *connect_go.Client[scorecards.ListEvaluationsRequest, scorecards.ListEvaluationsResponse]
	createEvaluationQuestion *connect_go.Client[scorecards.CreateEvaluationQuestionRequest, scorecards.CreateEvaluationQuestionResponse]
	updateEvaluationQuestion *connect_go.Client[scorecards.UpdateEvaluationQuestionRequest, scorecards.UpdateEvaluationQuestionResponse]
	deleteEvaluationQuestion *connect_go.Client[scorecards.DeleteEvaluationQuestionRequest, scorecards.DeleteEvaluationQuestionResponse]
	sampleCallsByCategory    *connect_go.Client[scorecards.SampleCallsByCategoryRequest, scorecards.SampleCallsByCategoryResponse]
	sampleAgentConversations *connect_go.Client[scorecards.SampleAgentConversationsRequest, scorecards.SampleAgentConversationsResponse]
	createAutoQuestion       *connect_go.Client[scorecards.CreateAutoQuestionRequest, scorecards.CreateAutoQuestionResponse]
	updateAutoQuestion       *connect_go.Client[scorecards.UpdateAutoQuestionRequest, scorecards.UpdateAutoQuestionResponse]
	deleteAutoQuestion       *connect_go.Client[scorecards.DeleteAutoQuestionRequest, scorecards.DeleteAutoQuestionResponse]
	getAutoQuestion          *connect_go.Client[scorecards.GetAutoQuestionRequest, scorecards.GetAutoQuestionResponse]
	getAutoEvaluation        *connect_go.Client[scorecards.GetAutoEvaluationRequest, scorecards.GetAutoEvaluationResponse]
	listAutoEvaluations      *connect_go.Client[scorecards.ListAutoEvaluationsRequest, scorecards.ListAutoEvaluationsResponse]
	streamAutoEvaluations    *connect_go.Client[scorecards.StreamAutoEvaluationsRequest, scorecards.StreamAutoEvaluationsResponse]
	deleteAutoEvaluation     *connect_go.Client[scorecards.DeleteAutoEvaluationRequest, scorecards.DeleteAutoEvaluationResponse]
	previewEvaluationScore   *connect_go.Client[scorecards.PreviewEvaluationScoreRequest, scorecards.PreviewEvaluationScoreResponse]
	restoreEvaluation        *connect_go.Client[scorecards.RestoreEvaluationRequest, scorecards.RestoreEvaluationResponse]
	createSmartQuestion      *connect_go.Client[scorecards.CreateSmartQuestionRequest, scorecards.CreateSmartQuestionResponse]
	updateSmartQuestion      *connect_go.Client[scorecards.UpdateSmartQuestionRequest, scorecards.UpdateSmartQuestionResponse]
	deleteSmartQuestion      *connect_go.Client[scorecards.DeleteSmartQuestionRequest, scorecards.DeleteSmartQuestionResponse]
	listSmartEvaluations     *connect_go.Client[scorecards.ListSmartEvaluationsRequest, scorecards.ListSmartEvaluationsResponse]
	deleteSmartEvaluation    *connect_go.Client[scorecards.DeleteSmartEvaluationRequest, scorecards.DeleteSmartEvaluationResponse]
	getSmartEvaluation       *connect_go.Client[scorecards.GetSmartEvaluationRequest, scorecards.GetSmartEvaluationResponse]
}

// CreateScorecard calls api.v1alpha1.scorecards.Scorecards.CreateScorecard.
func (c *scorecardsClient) CreateScorecard(ctx context.Context, req *connect_go.Request[scorecards.CreateScorecardRequest]) (*connect_go.Response[scorecards.CreateScorecardResponse], error) {
	return c.createScorecard.CallUnary(ctx, req)
}

// ListScorecards calls api.v1alpha1.scorecards.Scorecards.ListScorecards.
func (c *scorecardsClient) ListScorecards(ctx context.Context, req *connect_go.Request[scorecards.ListScorecardsRequest]) (*connect_go.Response[scorecards.ListScorecardsResponse], error) {
	return c.listScorecards.CallUnary(ctx, req)
}

// UpdateScorecard calls api.v1alpha1.scorecards.Scorecards.UpdateScorecard.
func (c *scorecardsClient) UpdateScorecard(ctx context.Context, req *connect_go.Request[scorecards.UpdateScorecardRequest]) (*connect_go.Response[scorecards.UpdateScorecardResponse], error) {
	return c.updateScorecard.CallUnary(ctx, req)
}

// DeleteScorecard calls api.v1alpha1.scorecards.Scorecards.DeleteScorecard.
func (c *scorecardsClient) DeleteScorecard(ctx context.Context, req *connect_go.Request[scorecards.DeleteScorecardRequest]) (*connect_go.Response[scorecards.DeleteScorecardResponse], error) {
	return c.deleteScorecard.CallUnary(ctx, req)
}

// GetScorecard calls api.v1alpha1.scorecards.Scorecards.GetScorecard.
func (c *scorecardsClient) GetScorecard(ctx context.Context, req *connect_go.Request[scorecards.GetScorecardRequest]) (*connect_go.Response[scorecards.GetScorecardResponse], error) {
	return c.getScorecard.CallUnary(ctx, req)
}

// CreateQuestion calls api.v1alpha1.scorecards.Scorecards.CreateQuestion.
func (c *scorecardsClient) CreateQuestion(ctx context.Context, req *connect_go.Request[scorecards.CreateQuestionRequest]) (*connect_go.Response[scorecards.CreateQuestionResponse], error) {
	return c.createQuestion.CallUnary(ctx, req)
}

// ListQuestions calls api.v1alpha1.scorecards.Scorecards.ListQuestions.
func (c *scorecardsClient) ListQuestions(ctx context.Context, req *connect_go.Request[scorecards.ListQuestionsRequest]) (*connect_go.Response[scorecards.ListQuestionsResponse], error) {
	return c.listQuestions.CallUnary(ctx, req)
}

// UpdateQuestion calls api.v1alpha1.scorecards.Scorecards.UpdateQuestion.
func (c *scorecardsClient) UpdateQuestion(ctx context.Context, req *connect_go.Request[scorecards.UpdateQuestionRequest]) (*connect_go.Response[scorecards.UpdateQuestionResponse], error) {
	return c.updateQuestion.CallUnary(ctx, req)
}

// DeleteQuestion calls api.v1alpha1.scorecards.Scorecards.DeleteQuestion.
func (c *scorecardsClient) DeleteQuestion(ctx context.Context, req *connect_go.Request[scorecards.DeleteQuestionRequest]) (*connect_go.Response[scorecards.DeleteQuestionResponse], error) {
	return c.deleteQuestion.CallUnary(ctx, req)
}

// GetQuestion calls api.v1alpha1.scorecards.Scorecards.GetQuestion.
func (c *scorecardsClient) GetQuestion(ctx context.Context, req *connect_go.Request[scorecards.GetQuestionRequest]) (*connect_go.Response[scorecards.GetQuestionResponse], error) {
	return c.getQuestion.CallUnary(ctx, req)
}

// BulkCreateQuestions calls api.v1alpha1.scorecards.Scorecards.BulkCreateQuestions.
func (c *scorecardsClient) BulkCreateQuestions(ctx context.Context, req *connect_go.Request[scorecards.BulkCreateQuestionsRequest]) (*connect_go.Response[scorecards.BulkCreateQuestionsResponse], error) {
	return c.bulkCreateQuestions.CallUnary(ctx, req)
}

// CreateCategory calls api.v1alpha1.scorecards.Scorecards.CreateCategory.
func (c *scorecardsClient) CreateCategory(ctx context.Context, req *connect_go.Request[scorecards.CreateCategoryRequest]) (*connect_go.Response[scorecards.CreateCategoryResponse], error) {
	return c.createCategory.CallUnary(ctx, req)
}

// ListCategories calls api.v1alpha1.scorecards.Scorecards.ListCategories.
func (c *scorecardsClient) ListCategories(ctx context.Context, req *connect_go.Request[scorecards.ListCategoriesRequest]) (*connect_go.Response[scorecards.ListCategoriesResponse], error) {
	return c.listCategories.CallUnary(ctx, req)
}

// UpdateCategory calls api.v1alpha1.scorecards.Scorecards.UpdateCategory.
func (c *scorecardsClient) UpdateCategory(ctx context.Context, req *connect_go.Request[scorecards.UpdateCategoryRequest]) (*connect_go.Response[scorecards.UpdateCategoryResponse], error) {
	return c.updateCategory.CallUnary(ctx, req)
}

// DeleteCategory calls api.v1alpha1.scorecards.Scorecards.DeleteCategory.
func (c *scorecardsClient) DeleteCategory(ctx context.Context, req *connect_go.Request[scorecards.DeleteCategoryRequest]) (*connect_go.Response[scorecards.DeleteCategoryResponse], error) {
	return c.deleteCategory.CallUnary(ctx, req)
}

// GetCategory calls api.v1alpha1.scorecards.Scorecards.GetCategory.
func (c *scorecardsClient) GetCategory(ctx context.Context, req *connect_go.Request[scorecards.GetCategoryRequest]) (*connect_go.Response[scorecards.GetCategoryResponse], error) {
	return c.getCategory.CallUnary(ctx, req)
}

// CreateScorecardQuestion calls api.v1alpha1.scorecards.Scorecards.CreateScorecardQuestion.
func (c *scorecardsClient) CreateScorecardQuestion(ctx context.Context, req *connect_go.Request[scorecards.CreateScorecardQuestionRequest]) (*connect_go.Response[scorecards.CreateScorecardQuestionResponse], error) {
	return c.createScorecardQuestion.CallUnary(ctx, req)
}

// UpdateScorecardQuestion calls api.v1alpha1.scorecards.Scorecards.UpdateScorecardQuestion.
func (c *scorecardsClient) UpdateScorecardQuestion(ctx context.Context, req *connect_go.Request[scorecards.UpdateScorecardQuestionRequest]) (*connect_go.Response[scorecards.UpdateScorecardQuestionResponse], error) {
	return c.updateScorecardQuestion.CallUnary(ctx, req)
}

// DeleteScorecardQuestion calls api.v1alpha1.scorecards.Scorecards.DeleteScorecardQuestion.
func (c *scorecardsClient) DeleteScorecardQuestion(ctx context.Context, req *connect_go.Request[scorecards.DeleteScorecardQuestionRequest]) (*connect_go.Response[scorecards.DeleteScorecardQuestionResponse], error) {
	return c.deleteScorecardQuestion.CallUnary(ctx, req)
}

// GetScorecardQuestion calls api.v1alpha1.scorecards.Scorecards.GetScorecardQuestion.
func (c *scorecardsClient) GetScorecardQuestion(ctx context.Context, req *connect_go.Request[scorecards.GetScorecardQuestionRequest]) (*connect_go.Response[scorecards.GetScorecardQuestionResponse], error) {
	return c.getScorecardQuestion.CallUnary(ctx, req)
}

// CreateSection calls api.v1alpha1.scorecards.Scorecards.CreateSection.
func (c *scorecardsClient) CreateSection(ctx context.Context, req *connect_go.Request[scorecards.CreateSectionRequest]) (*connect_go.Response[scorecards.CreateSectionResponse], error) {
	return c.createSection.CallUnary(ctx, req)
}

// ListSections calls api.v1alpha1.scorecards.Scorecards.ListSections.
func (c *scorecardsClient) ListSections(ctx context.Context, req *connect_go.Request[scorecards.ListSectionsRequest]) (*connect_go.Response[scorecards.ListSectionsResponse], error) {
	return c.listSections.CallUnary(ctx, req)
}

// UpdateSection calls api.v1alpha1.scorecards.Scorecards.UpdateSection.
func (c *scorecardsClient) UpdateSection(ctx context.Context, req *connect_go.Request[scorecards.UpdateSectionRequest]) (*connect_go.Response[scorecards.UpdateSectionResponse], error) {
	return c.updateSection.CallUnary(ctx, req)
}

// GetSection calls api.v1alpha1.scorecards.Scorecards.GetSection.
func (c *scorecardsClient) GetSection(ctx context.Context, req *connect_go.Request[scorecards.GetSectionRequest]) (*connect_go.Response[scorecards.GetSectionResponse], error) {
	return c.getSection.CallUnary(ctx, req)
}

// DeleteSection calls api.v1alpha1.scorecards.Scorecards.DeleteSection.
func (c *scorecardsClient) DeleteSection(ctx context.Context, req *connect_go.Request[scorecards.DeleteSectionRequest]) (*connect_go.Response[scorecards.DeleteSectionResponse], error) {
	return c.deleteSection.CallUnary(ctx, req)
}

// CreateQuestionCategory calls api.v1alpha1.scorecards.Scorecards.CreateQuestionCategory.
func (c *scorecardsClient) CreateQuestionCategory(ctx context.Context, req *connect_go.Request[scorecards.CreateQuestionCategoryRequest]) (*connect_go.Response[scorecards.CreateQuestionCategoryResponse], error) {
	return c.createQuestionCategory.CallUnary(ctx, req)
}

// DeleteQuestionCategory calls api.v1alpha1.scorecards.Scorecards.DeleteQuestionCategory.
func (c *scorecardsClient) DeleteQuestionCategory(ctx context.Context, req *connect_go.Request[scorecards.DeleteQuestionCategoryRequest]) (*connect_go.Response[scorecards.DeleteQuestionCategoryResponse], error) {
	return c.deleteQuestionCategory.CallUnary(ctx, req)
}

// CreateEvaluation calls api.v1alpha1.scorecards.Scorecards.CreateEvaluation.
func (c *scorecardsClient) CreateEvaluation(ctx context.Context, req *connect_go.Request[scorecards.CreateEvaluationRequest]) (*connect_go.Response[scorecards.CreateEvaluationResponse], error) {
	return c.createEvaluation.CallUnary(ctx, req)
}

// DeleteEvaluation calls api.v1alpha1.scorecards.Scorecards.DeleteEvaluation.
func (c *scorecardsClient) DeleteEvaluation(ctx context.Context, req *connect_go.Request[scorecards.DeleteEvaluationRequest]) (*connect_go.Response[scorecards.DeleteEvaluationResponse], error) {
	return c.deleteEvaluation.CallUnary(ctx, req)
}

// ScoreEvaluation calls api.v1alpha1.scorecards.Scorecards.ScoreEvaluation.
func (c *scorecardsClient) ScoreEvaluation(ctx context.Context, req *connect_go.Request[scorecards.ScoreEvaluationRequest]) (*connect_go.Response[scorecards.ScoreEvaluationResponse], error) {
	return c.scoreEvaluation.CallUnary(ctx, req)
}

// UpdateEvaluation calls api.v1alpha1.scorecards.Scorecards.UpdateEvaluation.
func (c *scorecardsClient) UpdateEvaluation(ctx context.Context, req *connect_go.Request[scorecards.UpdateEvaluationRequest]) (*connect_go.Response[scorecards.UpdateEvaluationResponse], error) {
	return c.updateEvaluation.CallUnary(ctx, req)
}

// GetEvaluation calls api.v1alpha1.scorecards.Scorecards.GetEvaluation.
func (c *scorecardsClient) GetEvaluation(ctx context.Context, req *connect_go.Request[scorecards.GetEvaluationRequest]) (*connect_go.Response[scorecards.GetEvaluationResponse], error) {
	return c.getEvaluation.CallUnary(ctx, req)
}

// ListEvaluations calls api.v1alpha1.scorecards.Scorecards.ListEvaluations.
func (c *scorecardsClient) ListEvaluations(ctx context.Context, req *connect_go.Request[scorecards.ListEvaluationsRequest]) (*connect_go.Response[scorecards.ListEvaluationsResponse], error) {
	return c.listEvaluations.CallUnary(ctx, req)
}

// CreateEvaluationQuestion calls api.v1alpha1.scorecards.Scorecards.CreateEvaluationQuestion.
//
// Deprecated: do not use.
func (c *scorecardsClient) CreateEvaluationQuestion(ctx context.Context, req *connect_go.Request[scorecards.CreateEvaluationQuestionRequest]) (*connect_go.Response[scorecards.CreateEvaluationQuestionResponse], error) {
	return c.createEvaluationQuestion.CallUnary(ctx, req)
}

// UpdateEvaluationQuestion calls api.v1alpha1.scorecards.Scorecards.UpdateEvaluationQuestion.
func (c *scorecardsClient) UpdateEvaluationQuestion(ctx context.Context, req *connect_go.Request[scorecards.UpdateEvaluationQuestionRequest]) (*connect_go.Response[scorecards.UpdateEvaluationQuestionResponse], error) {
	return c.updateEvaluationQuestion.CallUnary(ctx, req)
}

// DeleteEvaluationQuestion calls api.v1alpha1.scorecards.Scorecards.DeleteEvaluationQuestion.
func (c *scorecardsClient) DeleteEvaluationQuestion(ctx context.Context, req *connect_go.Request[scorecards.DeleteEvaluationQuestionRequest]) (*connect_go.Response[scorecards.DeleteEvaluationQuestionResponse], error) {
	return c.deleteEvaluationQuestion.CallUnary(ctx, req)
}

// SampleCallsByCategory calls api.v1alpha1.scorecards.Scorecards.SampleCallsByCategory.
func (c *scorecardsClient) SampleCallsByCategory(ctx context.Context, req *connect_go.Request[scorecards.SampleCallsByCategoryRequest]) (*connect_go.Response[scorecards.SampleCallsByCategoryResponse], error) {
	return c.sampleCallsByCategory.CallUnary(ctx, req)
}

// SampleAgentConversations calls api.v1alpha1.scorecards.Scorecards.SampleAgentConversations.
func (c *scorecardsClient) SampleAgentConversations(ctx context.Context, req *connect_go.Request[scorecards.SampleAgentConversationsRequest]) (*connect_go.Response[scorecards.SampleAgentConversationsResponse], error) {
	return c.sampleAgentConversations.CallUnary(ctx, req)
}

// CreateAutoQuestion calls api.v1alpha1.scorecards.Scorecards.CreateAutoQuestion.
func (c *scorecardsClient) CreateAutoQuestion(ctx context.Context, req *connect_go.Request[scorecards.CreateAutoQuestionRequest]) (*connect_go.Response[scorecards.CreateAutoQuestionResponse], error) {
	return c.createAutoQuestion.CallUnary(ctx, req)
}

// UpdateAutoQuestion calls api.v1alpha1.scorecards.Scorecards.UpdateAutoQuestion.
func (c *scorecardsClient) UpdateAutoQuestion(ctx context.Context, req *connect_go.Request[scorecards.UpdateAutoQuestionRequest]) (*connect_go.Response[scorecards.UpdateAutoQuestionResponse], error) {
	return c.updateAutoQuestion.CallUnary(ctx, req)
}

// DeleteAutoQuestion calls api.v1alpha1.scorecards.Scorecards.DeleteAutoQuestion.
func (c *scorecardsClient) DeleteAutoQuestion(ctx context.Context, req *connect_go.Request[scorecards.DeleteAutoQuestionRequest]) (*connect_go.Response[scorecards.DeleteAutoQuestionResponse], error) {
	return c.deleteAutoQuestion.CallUnary(ctx, req)
}

// GetAutoQuestion calls api.v1alpha1.scorecards.Scorecards.GetAutoQuestion.
func (c *scorecardsClient) GetAutoQuestion(ctx context.Context, req *connect_go.Request[scorecards.GetAutoQuestionRequest]) (*connect_go.Response[scorecards.GetAutoQuestionResponse], error) {
	return c.getAutoQuestion.CallUnary(ctx, req)
}

// GetAutoEvaluation calls api.v1alpha1.scorecards.Scorecards.GetAutoEvaluation.
func (c *scorecardsClient) GetAutoEvaluation(ctx context.Context, req *connect_go.Request[scorecards.GetAutoEvaluationRequest]) (*connect_go.Response[scorecards.GetAutoEvaluationResponse], error) {
	return c.getAutoEvaluation.CallUnary(ctx, req)
}

// ListAutoEvaluations calls api.v1alpha1.scorecards.Scorecards.ListAutoEvaluations.
func (c *scorecardsClient) ListAutoEvaluations(ctx context.Context, req *connect_go.Request[scorecards.ListAutoEvaluationsRequest]) (*connect_go.Response[scorecards.ListAutoEvaluationsResponse], error) {
	return c.listAutoEvaluations.CallUnary(ctx, req)
}

// StreamAutoEvaluations calls api.v1alpha1.scorecards.Scorecards.StreamAutoEvaluations.
//
// Deprecated: do not use.
func (c *scorecardsClient) StreamAutoEvaluations(ctx context.Context, req *connect_go.Request[scorecards.StreamAutoEvaluationsRequest]) (*connect_go.ServerStreamForClient[scorecards.StreamAutoEvaluationsResponse], error) {
	return c.streamAutoEvaluations.CallServerStream(ctx, req)
}

// DeleteAutoEvaluation calls api.v1alpha1.scorecards.Scorecards.DeleteAutoEvaluation.
func (c *scorecardsClient) DeleteAutoEvaluation(ctx context.Context, req *connect_go.Request[scorecards.DeleteAutoEvaluationRequest]) (*connect_go.Response[scorecards.DeleteAutoEvaluationResponse], error) {
	return c.deleteAutoEvaluation.CallUnary(ctx, req)
}

// PreviewEvaluationScore calls api.v1alpha1.scorecards.Scorecards.PreviewEvaluationScore.
func (c *scorecardsClient) PreviewEvaluationScore(ctx context.Context, req *connect_go.Request[scorecards.PreviewEvaluationScoreRequest]) (*connect_go.Response[scorecards.PreviewEvaluationScoreResponse], error) {
	return c.previewEvaluationScore.CallUnary(ctx, req)
}

// RestoreEvaluation calls api.v1alpha1.scorecards.Scorecards.RestoreEvaluation.
func (c *scorecardsClient) RestoreEvaluation(ctx context.Context, req *connect_go.Request[scorecards.RestoreEvaluationRequest]) (*connect_go.Response[scorecards.RestoreEvaluationResponse], error) {
	return c.restoreEvaluation.CallUnary(ctx, req)
}

// CreateSmartQuestion calls api.v1alpha1.scorecards.Scorecards.CreateSmartQuestion.
func (c *scorecardsClient) CreateSmartQuestion(ctx context.Context, req *connect_go.Request[scorecards.CreateSmartQuestionRequest]) (*connect_go.Response[scorecards.CreateSmartQuestionResponse], error) {
	return c.createSmartQuestion.CallUnary(ctx, req)
}

// UpdateSmartQuestion calls api.v1alpha1.scorecards.Scorecards.UpdateSmartQuestion.
func (c *scorecardsClient) UpdateSmartQuestion(ctx context.Context, req *connect_go.Request[scorecards.UpdateSmartQuestionRequest]) (*connect_go.Response[scorecards.UpdateSmartQuestionResponse], error) {
	return c.updateSmartQuestion.CallUnary(ctx, req)
}

// DeleteSmartQuestion calls api.v1alpha1.scorecards.Scorecards.DeleteSmartQuestion.
func (c *scorecardsClient) DeleteSmartQuestion(ctx context.Context, req *connect_go.Request[scorecards.DeleteSmartQuestionRequest]) (*connect_go.Response[scorecards.DeleteSmartQuestionResponse], error) {
	return c.deleteSmartQuestion.CallUnary(ctx, req)
}

// ListSmartEvaluations calls api.v1alpha1.scorecards.Scorecards.ListSmartEvaluations.
func (c *scorecardsClient) ListSmartEvaluations(ctx context.Context, req *connect_go.Request[scorecards.ListSmartEvaluationsRequest]) (*connect_go.Response[scorecards.ListSmartEvaluationsResponse], error) {
	return c.listSmartEvaluations.CallUnary(ctx, req)
}

// DeleteSmartEvaluation calls api.v1alpha1.scorecards.Scorecards.DeleteSmartEvaluation.
func (c *scorecardsClient) DeleteSmartEvaluation(ctx context.Context, req *connect_go.Request[scorecards.DeleteSmartEvaluationRequest]) (*connect_go.Response[scorecards.DeleteSmartEvaluationResponse], error) {
	return c.deleteSmartEvaluation.CallUnary(ctx, req)
}

// GetSmartEvaluation calls api.v1alpha1.scorecards.Scorecards.GetSmartEvaluation.
func (c *scorecardsClient) GetSmartEvaluation(ctx context.Context, req *connect_go.Request[scorecards.GetSmartEvaluationRequest]) (*connect_go.Response[scorecards.GetSmartEvaluationResponse], error) {
	return c.getSmartEvaluation.CallUnary(ctx, req)
}

// ScorecardsHandler is an implementation of the api.v1alpha1.scorecards.Scorecards service.
type ScorecardsHandler interface {
	// CreateScorecard creates a new scorecard
	CreateScorecard(context.Context, *connect_go.Request[scorecards.CreateScorecardRequest]) (*connect_go.Response[scorecards.CreateScorecardResponse], error)
	// ListScorecards lists scorecards
	ListScorecards(context.Context, *connect_go.Request[scorecards.ListScorecardsRequest]) (*connect_go.Response[scorecards.ListScorecardsResponse], error)
	// UpdateScorecard updates an existing scorecard
	UpdateScorecard(context.Context, *connect_go.Request[scorecards.UpdateScorecardRequest]) (*connect_go.Response[scorecards.UpdateScorecardResponse], error)
	// DeleteScorecard deletes a scorecard
	DeleteScorecard(context.Context, *connect_go.Request[scorecards.DeleteScorecardRequest]) (*connect_go.Response[scorecards.DeleteScorecardResponse], error)
	// GetScorecard gets a scorecard by ID
	GetScorecard(context.Context, *connect_go.Request[scorecards.GetScorecardRequest]) (*connect_go.Response[scorecards.GetScorecardResponse], error)
	// CreateQuestion creates a new library question
	CreateQuestion(context.Context, *connect_go.Request[scorecards.CreateQuestionRequest]) (*connect_go.Response[scorecards.CreateQuestionResponse], error)
	// ListQuestions lists library questions
	ListQuestions(context.Context, *connect_go.Request[scorecards.ListQuestionsRequest]) (*connect_go.Response[scorecards.ListQuestionsResponse], error)
	// UpdateQuestion updates a library question
	UpdateQuestion(context.Context, *connect_go.Request[scorecards.UpdateQuestionRequest]) (*connect_go.Response[scorecards.UpdateQuestionResponse], error)
	// DeleteQuestion deletes a library question
	DeleteQuestion(context.Context, *connect_go.Request[scorecards.DeleteQuestionRequest]) (*connect_go.Response[scorecards.DeleteQuestionResponse], error)
	// GetQuestion gets a library question
	GetQuestion(context.Context, *connect_go.Request[scorecards.GetQuestionRequest]) (*connect_go.Response[scorecards.GetQuestionResponse], error)
	// BulkCreateQuestions creates library questions by a scorecard id
	BulkCreateQuestions(context.Context, *connect_go.Request[scorecards.BulkCreateQuestionsRequest]) (*connect_go.Response[scorecards.BulkCreateQuestionsResponse], error)
	// CreateCategory creates a new scorecards category
	CreateCategory(context.Context, *connect_go.Request[scorecards.CreateCategoryRequest]) (*connect_go.Response[scorecards.CreateCategoryResponse], error)
	// ListCategories lists scorecards categories
	ListCategories(context.Context, *connect_go.Request[scorecards.ListCategoriesRequest]) (*connect_go.Response[scorecards.ListCategoriesResponse], error)
	// UpdateCategory updates a scorecard category
	UpdateCategory(context.Context, *connect_go.Request[scorecards.UpdateCategoryRequest]) (*connect_go.Response[scorecards.UpdateCategoryResponse], error)
	// DeleteCategory deletes a scorecard category
	DeleteCategory(context.Context, *connect_go.Request[scorecards.DeleteCategoryRequest]) (*connect_go.Response[scorecards.DeleteCategoryResponse], error)
	// GetCategory gets a scorecard category
	GetCategory(context.Context, *connect_go.Request[scorecards.GetCategoryRequest]) (*connect_go.Response[scorecards.GetCategoryResponse], error)
	// CreateScorecardQuestion creates a scorecard scorecard question
	CreateScorecardQuestion(context.Context, *connect_go.Request[scorecards.CreateScorecardQuestionRequest]) (*connect_go.Response[scorecards.CreateScorecardQuestionResponse], error)
	// UpdateScorecardQuestion updates a scorecard question
	UpdateScorecardQuestion(context.Context, *connect_go.Request[scorecards.UpdateScorecardQuestionRequest]) (*connect_go.Response[scorecards.UpdateScorecardQuestionResponse], error)
	// DeleteScorecardQuestion deletes a scorecard question
	DeleteScorecardQuestion(context.Context, *connect_go.Request[scorecards.DeleteScorecardQuestionRequest]) (*connect_go.Response[scorecards.DeleteScorecardQuestionResponse], error)
	// GetScorecardQuestion gets a scorecard question
	GetScorecardQuestion(context.Context, *connect_go.Request[scorecards.GetScorecardQuestionRequest]) (*connect_go.Response[scorecards.GetScorecardQuestionResponse], error)
	// CreateSection creates a new scorecards section
	CreateSection(context.Context, *connect_go.Request[scorecards.CreateSectionRequest]) (*connect_go.Response[scorecards.CreateSectionResponse], error)
	// ListSections lists scorecards sections
	ListSections(context.Context, *connect_go.Request[scorecards.ListSectionsRequest]) (*connect_go.Response[scorecards.ListSectionsResponse], error)
	// UpdateSection updates a scorecard section
	UpdateSection(context.Context, *connect_go.Request[scorecards.UpdateSectionRequest]) (*connect_go.Response[scorecards.UpdateSectionResponse], error)
	// GetSection gets a scorecard section
	GetSection(context.Context, *connect_go.Request[scorecards.GetSectionRequest]) (*connect_go.Response[scorecards.GetSectionResponse], error)
	// DeleteSection deletes a scorecard section
	DeleteSection(context.Context, *connect_go.Request[scorecards.DeleteSectionRequest]) (*connect_go.Response[scorecards.DeleteSectionResponse], error)
	// CreateQuestionCategory links a scorecard question and category
	CreateQuestionCategory(context.Context, *connect_go.Request[scorecards.CreateQuestionCategoryRequest]) (*connect_go.Response[scorecards.CreateQuestionCategoryResponse], error)
	// DeleteQuestionCategory deletes link between a scorecard question and category
	DeleteQuestionCategory(context.Context, *connect_go.Request[scorecards.DeleteQuestionCategoryRequest]) (*connect_go.Response[scorecards.DeleteQuestionCategoryResponse], error)
	// CreateEvaluation creates a new evaluation
	CreateEvaluation(context.Context, *connect_go.Request[scorecards.CreateEvaluationRequest]) (*connect_go.Response[scorecards.CreateEvaluationResponse], error)
	// DeleteEvaluation gets an evaluation
	DeleteEvaluation(context.Context, *connect_go.Request[scorecards.DeleteEvaluationRequest]) (*connect_go.Response[scorecards.DeleteEvaluationResponse], error)
	// GetEvaluation gets an evaluation
	ScoreEvaluation(context.Context, *connect_go.Request[scorecards.ScoreEvaluationRequest]) (*connect_go.Response[scorecards.ScoreEvaluationResponse], error)
	// UpdateEvaluation updates an evaluation
	UpdateEvaluation(context.Context, *connect_go.Request[scorecards.UpdateEvaluationRequest]) (*connect_go.Response[scorecards.UpdateEvaluationResponse], error)
	// GetEvaluation gets an evaluation
	GetEvaluation(context.Context, *connect_go.Request[scorecards.GetEvaluationRequest]) (*connect_go.Response[scorecards.GetEvaluationResponse], error)
	// ListEvaluations gets a list of evaluations
	ListEvaluations(context.Context, *connect_go.Request[scorecards.ListEvaluationsRequest]) (*connect_go.Response[scorecards.ListEvaluationsResponse], error)
	// DEPRECATED. Use CreateEvaluation to create evaluation sub-entities.
	//
	// Deprecated: do not use.
	CreateEvaluationQuestion(context.Context, *connect_go.Request[scorecards.CreateEvaluationQuestionRequest]) (*connect_go.Response[scorecards.CreateEvaluationQuestionResponse], error)
	// UpdateEvaluationQuestion updates an existing evaluation question
	UpdateEvaluationQuestion(context.Context, *connect_go.Request[scorecards.UpdateEvaluationQuestionRequest]) (*connect_go.Response[scorecards.UpdateEvaluationQuestionResponse], error)
	// DeleteEvaluationQuestion creates an evaluation question
	DeleteEvaluationQuestion(context.Context, *connect_go.Request[scorecards.DeleteEvaluationQuestionRequest]) (*connect_go.Response[scorecards.DeleteEvaluationQuestionResponse], error)
	// SampleCallsByCategory
	SampleCallsByCategory(context.Context, *connect_go.Request[scorecards.SampleCallsByCategoryRequest]) (*connect_go.Response[scorecards.SampleCallsByCategoryResponse], error)
	// SampleAgentConversations
	SampleAgentConversations(context.Context, *connect_go.Request[scorecards.SampleAgentConversationsRequest]) (*connect_go.Response[scorecards.SampleAgentConversationsResponse], error)
	// CreateAutoQuestion creates an auto question
	CreateAutoQuestion(context.Context, *connect_go.Request[scorecards.CreateAutoQuestionRequest]) (*connect_go.Response[scorecards.CreateAutoQuestionResponse], error)
	// UpdateAutoQuestion updates an auto question
	UpdateAutoQuestion(context.Context, *connect_go.Request[scorecards.UpdateAutoQuestionRequest]) (*connect_go.Response[scorecards.UpdateAutoQuestionResponse], error)
	// DeleteAutoQuestion deletes an auto question
	DeleteAutoQuestion(context.Context, *connect_go.Request[scorecards.DeleteAutoQuestionRequest]) (*connect_go.Response[scorecards.DeleteAutoQuestionResponse], error)
	// GetAutoQuestion gets an auto question
	GetAutoQuestion(context.Context, *connect_go.Request[scorecards.GetAutoQuestionRequest]) (*connect_go.Response[scorecards.GetAutoQuestionResponse], error)
	// GetAutoEvaluation gets an auto evaluation
	GetAutoEvaluation(context.Context, *connect_go.Request[scorecards.GetAutoEvaluationRequest]) (*connect_go.Response[scorecards.GetAutoEvaluationResponse], error)
	// ListAutoEvaluations gets a list of auto evaluations
	ListAutoEvaluations(context.Context, *connect_go.Request[scorecards.ListAutoEvaluationsRequest]) (*connect_go.Response[scorecards.ListAutoEvaluationsResponse], error)
	// DEPRECATED. Use ListAutoEvaluations.
	//
	// Deprecated: do not use.
	StreamAutoEvaluations(context.Context, *connect_go.Request[scorecards.StreamAutoEvaluationsRequest], *connect_go.ServerStream[scorecards.StreamAutoEvaluationsResponse]) error
	// DeleteAutoEvaluation deletes an auto evaluations
	DeleteAutoEvaluation(context.Context, *connect_go.Request[scorecards.DeleteAutoEvaluationRequest]) (*connect_go.Response[scorecards.DeleteAutoEvaluationResponse], error)
	// PreviewEvaluationScore previews the score for an evaluation
	PreviewEvaluationScore(context.Context, *connect_go.Request[scorecards.PreviewEvaluationScoreRequest]) (*connect_go.Response[scorecards.PreviewEvaluationScoreResponse], error)
	// RestoreEvaluation restores an evaluation previously deleted.
	RestoreEvaluation(context.Context, *connect_go.Request[scorecards.RestoreEvaluationRequest]) (*connect_go.Response[scorecards.RestoreEvaluationResponse], error)
	// CreateSmartQuestion creates a scorecard smart question.
	CreateSmartQuestion(context.Context, *connect_go.Request[scorecards.CreateSmartQuestionRequest]) (*connect_go.Response[scorecards.CreateSmartQuestionResponse], error)
	// UpdateSmartQuestion updates a smart question.
	UpdateSmartQuestion(context.Context, *connect_go.Request[scorecards.UpdateSmartQuestionRequest]) (*connect_go.Response[scorecards.UpdateSmartQuestionResponse], error)
	// DeleteSmartQuestion deletes a smart question.
	DeleteSmartQuestion(context.Context, *connect_go.Request[scorecards.DeleteSmartQuestionRequest]) (*connect_go.Response[scorecards.DeleteSmartQuestionResponse], error)
	// ListSmartEvaluations lists smart evaluations
	ListSmartEvaluations(context.Context, *connect_go.Request[scorecards.ListSmartEvaluationsRequest]) (*connect_go.Response[scorecards.ListSmartEvaluationsResponse], error)
	// DeleteSmartEvaluation deletes a smart evaluation
	DeleteSmartEvaluation(context.Context, *connect_go.Request[scorecards.DeleteSmartEvaluationRequest]) (*connect_go.Response[scorecards.DeleteSmartEvaluationResponse], error)
	// GetSmartEvaluation gets a smart evaluation
	GetSmartEvaluation(context.Context, *connect_go.Request[scorecards.GetSmartEvaluationRequest]) (*connect_go.Response[scorecards.GetSmartEvaluationResponse], error)
}

// NewScorecardsHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewScorecardsHandler(svc ScorecardsHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	scorecardsCreateScorecardHandler := connect_go.NewUnaryHandler(
		ScorecardsCreateScorecardProcedure,
		svc.CreateScorecard,
		opts...,
	)
	scorecardsListScorecardsHandler := connect_go.NewUnaryHandler(
		ScorecardsListScorecardsProcedure,
		svc.ListScorecards,
		opts...,
	)
	scorecardsUpdateScorecardHandler := connect_go.NewUnaryHandler(
		ScorecardsUpdateScorecardProcedure,
		svc.UpdateScorecard,
		opts...,
	)
	scorecardsDeleteScorecardHandler := connect_go.NewUnaryHandler(
		ScorecardsDeleteScorecardProcedure,
		svc.DeleteScorecard,
		opts...,
	)
	scorecardsGetScorecardHandler := connect_go.NewUnaryHandler(
		ScorecardsGetScorecardProcedure,
		svc.GetScorecard,
		opts...,
	)
	scorecardsCreateQuestionHandler := connect_go.NewUnaryHandler(
		ScorecardsCreateQuestionProcedure,
		svc.CreateQuestion,
		opts...,
	)
	scorecardsListQuestionsHandler := connect_go.NewUnaryHandler(
		ScorecardsListQuestionsProcedure,
		svc.ListQuestions,
		opts...,
	)
	scorecardsUpdateQuestionHandler := connect_go.NewUnaryHandler(
		ScorecardsUpdateQuestionProcedure,
		svc.UpdateQuestion,
		opts...,
	)
	scorecardsDeleteQuestionHandler := connect_go.NewUnaryHandler(
		ScorecardsDeleteQuestionProcedure,
		svc.DeleteQuestion,
		opts...,
	)
	scorecardsGetQuestionHandler := connect_go.NewUnaryHandler(
		ScorecardsGetQuestionProcedure,
		svc.GetQuestion,
		opts...,
	)
	scorecardsBulkCreateQuestionsHandler := connect_go.NewUnaryHandler(
		ScorecardsBulkCreateQuestionsProcedure,
		svc.BulkCreateQuestions,
		opts...,
	)
	scorecardsCreateCategoryHandler := connect_go.NewUnaryHandler(
		ScorecardsCreateCategoryProcedure,
		svc.CreateCategory,
		opts...,
	)
	scorecardsListCategoriesHandler := connect_go.NewUnaryHandler(
		ScorecardsListCategoriesProcedure,
		svc.ListCategories,
		opts...,
	)
	scorecardsUpdateCategoryHandler := connect_go.NewUnaryHandler(
		ScorecardsUpdateCategoryProcedure,
		svc.UpdateCategory,
		opts...,
	)
	scorecardsDeleteCategoryHandler := connect_go.NewUnaryHandler(
		ScorecardsDeleteCategoryProcedure,
		svc.DeleteCategory,
		opts...,
	)
	scorecardsGetCategoryHandler := connect_go.NewUnaryHandler(
		ScorecardsGetCategoryProcedure,
		svc.GetCategory,
		opts...,
	)
	scorecardsCreateScorecardQuestionHandler := connect_go.NewUnaryHandler(
		ScorecardsCreateScorecardQuestionProcedure,
		svc.CreateScorecardQuestion,
		opts...,
	)
	scorecardsUpdateScorecardQuestionHandler := connect_go.NewUnaryHandler(
		ScorecardsUpdateScorecardQuestionProcedure,
		svc.UpdateScorecardQuestion,
		opts...,
	)
	scorecardsDeleteScorecardQuestionHandler := connect_go.NewUnaryHandler(
		ScorecardsDeleteScorecardQuestionProcedure,
		svc.DeleteScorecardQuestion,
		opts...,
	)
	scorecardsGetScorecardQuestionHandler := connect_go.NewUnaryHandler(
		ScorecardsGetScorecardQuestionProcedure,
		svc.GetScorecardQuestion,
		opts...,
	)
	scorecardsCreateSectionHandler := connect_go.NewUnaryHandler(
		ScorecardsCreateSectionProcedure,
		svc.CreateSection,
		opts...,
	)
	scorecardsListSectionsHandler := connect_go.NewUnaryHandler(
		ScorecardsListSectionsProcedure,
		svc.ListSections,
		opts...,
	)
	scorecardsUpdateSectionHandler := connect_go.NewUnaryHandler(
		ScorecardsUpdateSectionProcedure,
		svc.UpdateSection,
		opts...,
	)
	scorecardsGetSectionHandler := connect_go.NewUnaryHandler(
		ScorecardsGetSectionProcedure,
		svc.GetSection,
		opts...,
	)
	scorecardsDeleteSectionHandler := connect_go.NewUnaryHandler(
		ScorecardsDeleteSectionProcedure,
		svc.DeleteSection,
		opts...,
	)
	scorecardsCreateQuestionCategoryHandler := connect_go.NewUnaryHandler(
		ScorecardsCreateQuestionCategoryProcedure,
		svc.CreateQuestionCategory,
		opts...,
	)
	scorecardsDeleteQuestionCategoryHandler := connect_go.NewUnaryHandler(
		ScorecardsDeleteQuestionCategoryProcedure,
		svc.DeleteQuestionCategory,
		opts...,
	)
	scorecardsCreateEvaluationHandler := connect_go.NewUnaryHandler(
		ScorecardsCreateEvaluationProcedure,
		svc.CreateEvaluation,
		opts...,
	)
	scorecardsDeleteEvaluationHandler := connect_go.NewUnaryHandler(
		ScorecardsDeleteEvaluationProcedure,
		svc.DeleteEvaluation,
		opts...,
	)
	scorecardsScoreEvaluationHandler := connect_go.NewUnaryHandler(
		ScorecardsScoreEvaluationProcedure,
		svc.ScoreEvaluation,
		opts...,
	)
	scorecardsUpdateEvaluationHandler := connect_go.NewUnaryHandler(
		ScorecardsUpdateEvaluationProcedure,
		svc.UpdateEvaluation,
		opts...,
	)
	scorecardsGetEvaluationHandler := connect_go.NewUnaryHandler(
		ScorecardsGetEvaluationProcedure,
		svc.GetEvaluation,
		opts...,
	)
	scorecardsListEvaluationsHandler := connect_go.NewUnaryHandler(
		ScorecardsListEvaluationsProcedure,
		svc.ListEvaluations,
		opts...,
	)
	scorecardsCreateEvaluationQuestionHandler := connect_go.NewUnaryHandler(
		ScorecardsCreateEvaluationQuestionProcedure,
		svc.CreateEvaluationQuestion,
		opts...,
	)
	scorecardsUpdateEvaluationQuestionHandler := connect_go.NewUnaryHandler(
		ScorecardsUpdateEvaluationQuestionProcedure,
		svc.UpdateEvaluationQuestion,
		opts...,
	)
	scorecardsDeleteEvaluationQuestionHandler := connect_go.NewUnaryHandler(
		ScorecardsDeleteEvaluationQuestionProcedure,
		svc.DeleteEvaluationQuestion,
		opts...,
	)
	scorecardsSampleCallsByCategoryHandler := connect_go.NewUnaryHandler(
		ScorecardsSampleCallsByCategoryProcedure,
		svc.SampleCallsByCategory,
		opts...,
	)
	scorecardsSampleAgentConversationsHandler := connect_go.NewUnaryHandler(
		ScorecardsSampleAgentConversationsProcedure,
		svc.SampleAgentConversations,
		opts...,
	)
	scorecardsCreateAutoQuestionHandler := connect_go.NewUnaryHandler(
		ScorecardsCreateAutoQuestionProcedure,
		svc.CreateAutoQuestion,
		opts...,
	)
	scorecardsUpdateAutoQuestionHandler := connect_go.NewUnaryHandler(
		ScorecardsUpdateAutoQuestionProcedure,
		svc.UpdateAutoQuestion,
		opts...,
	)
	scorecardsDeleteAutoQuestionHandler := connect_go.NewUnaryHandler(
		ScorecardsDeleteAutoQuestionProcedure,
		svc.DeleteAutoQuestion,
		opts...,
	)
	scorecardsGetAutoQuestionHandler := connect_go.NewUnaryHandler(
		ScorecardsGetAutoQuestionProcedure,
		svc.GetAutoQuestion,
		opts...,
	)
	scorecardsGetAutoEvaluationHandler := connect_go.NewUnaryHandler(
		ScorecardsGetAutoEvaluationProcedure,
		svc.GetAutoEvaluation,
		opts...,
	)
	scorecardsListAutoEvaluationsHandler := connect_go.NewUnaryHandler(
		ScorecardsListAutoEvaluationsProcedure,
		svc.ListAutoEvaluations,
		opts...,
	)
	scorecardsStreamAutoEvaluationsHandler := connect_go.NewServerStreamHandler(
		ScorecardsStreamAutoEvaluationsProcedure,
		svc.StreamAutoEvaluations,
		opts...,
	)
	scorecardsDeleteAutoEvaluationHandler := connect_go.NewUnaryHandler(
		ScorecardsDeleteAutoEvaluationProcedure,
		svc.DeleteAutoEvaluation,
		opts...,
	)
	scorecardsPreviewEvaluationScoreHandler := connect_go.NewUnaryHandler(
		ScorecardsPreviewEvaluationScoreProcedure,
		svc.PreviewEvaluationScore,
		opts...,
	)
	scorecardsRestoreEvaluationHandler := connect_go.NewUnaryHandler(
		ScorecardsRestoreEvaluationProcedure,
		svc.RestoreEvaluation,
		opts...,
	)
	scorecardsCreateSmartQuestionHandler := connect_go.NewUnaryHandler(
		ScorecardsCreateSmartQuestionProcedure,
		svc.CreateSmartQuestion,
		opts...,
	)
	scorecardsUpdateSmartQuestionHandler := connect_go.NewUnaryHandler(
		ScorecardsUpdateSmartQuestionProcedure,
		svc.UpdateSmartQuestion,
		opts...,
	)
	scorecardsDeleteSmartQuestionHandler := connect_go.NewUnaryHandler(
		ScorecardsDeleteSmartQuestionProcedure,
		svc.DeleteSmartQuestion,
		opts...,
	)
	scorecardsListSmartEvaluationsHandler := connect_go.NewUnaryHandler(
		ScorecardsListSmartEvaluationsProcedure,
		svc.ListSmartEvaluations,
		opts...,
	)
	scorecardsDeleteSmartEvaluationHandler := connect_go.NewUnaryHandler(
		ScorecardsDeleteSmartEvaluationProcedure,
		svc.DeleteSmartEvaluation,
		opts...,
	)
	scorecardsGetSmartEvaluationHandler := connect_go.NewUnaryHandler(
		ScorecardsGetSmartEvaluationProcedure,
		svc.GetSmartEvaluation,
		opts...,
	)
	return "/api.v1alpha1.scorecards.Scorecards/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ScorecardsCreateScorecardProcedure:
			scorecardsCreateScorecardHandler.ServeHTTP(w, r)
		case ScorecardsListScorecardsProcedure:
			scorecardsListScorecardsHandler.ServeHTTP(w, r)
		case ScorecardsUpdateScorecardProcedure:
			scorecardsUpdateScorecardHandler.ServeHTTP(w, r)
		case ScorecardsDeleteScorecardProcedure:
			scorecardsDeleteScorecardHandler.ServeHTTP(w, r)
		case ScorecardsGetScorecardProcedure:
			scorecardsGetScorecardHandler.ServeHTTP(w, r)
		case ScorecardsCreateQuestionProcedure:
			scorecardsCreateQuestionHandler.ServeHTTP(w, r)
		case ScorecardsListQuestionsProcedure:
			scorecardsListQuestionsHandler.ServeHTTP(w, r)
		case ScorecardsUpdateQuestionProcedure:
			scorecardsUpdateQuestionHandler.ServeHTTP(w, r)
		case ScorecardsDeleteQuestionProcedure:
			scorecardsDeleteQuestionHandler.ServeHTTP(w, r)
		case ScorecardsGetQuestionProcedure:
			scorecardsGetQuestionHandler.ServeHTTP(w, r)
		case ScorecardsBulkCreateQuestionsProcedure:
			scorecardsBulkCreateQuestionsHandler.ServeHTTP(w, r)
		case ScorecardsCreateCategoryProcedure:
			scorecardsCreateCategoryHandler.ServeHTTP(w, r)
		case ScorecardsListCategoriesProcedure:
			scorecardsListCategoriesHandler.ServeHTTP(w, r)
		case ScorecardsUpdateCategoryProcedure:
			scorecardsUpdateCategoryHandler.ServeHTTP(w, r)
		case ScorecardsDeleteCategoryProcedure:
			scorecardsDeleteCategoryHandler.ServeHTTP(w, r)
		case ScorecardsGetCategoryProcedure:
			scorecardsGetCategoryHandler.ServeHTTP(w, r)
		case ScorecardsCreateScorecardQuestionProcedure:
			scorecardsCreateScorecardQuestionHandler.ServeHTTP(w, r)
		case ScorecardsUpdateScorecardQuestionProcedure:
			scorecardsUpdateScorecardQuestionHandler.ServeHTTP(w, r)
		case ScorecardsDeleteScorecardQuestionProcedure:
			scorecardsDeleteScorecardQuestionHandler.ServeHTTP(w, r)
		case ScorecardsGetScorecardQuestionProcedure:
			scorecardsGetScorecardQuestionHandler.ServeHTTP(w, r)
		case ScorecardsCreateSectionProcedure:
			scorecardsCreateSectionHandler.ServeHTTP(w, r)
		case ScorecardsListSectionsProcedure:
			scorecardsListSectionsHandler.ServeHTTP(w, r)
		case ScorecardsUpdateSectionProcedure:
			scorecardsUpdateSectionHandler.ServeHTTP(w, r)
		case ScorecardsGetSectionProcedure:
			scorecardsGetSectionHandler.ServeHTTP(w, r)
		case ScorecardsDeleteSectionProcedure:
			scorecardsDeleteSectionHandler.ServeHTTP(w, r)
		case ScorecardsCreateQuestionCategoryProcedure:
			scorecardsCreateQuestionCategoryHandler.ServeHTTP(w, r)
		case ScorecardsDeleteQuestionCategoryProcedure:
			scorecardsDeleteQuestionCategoryHandler.ServeHTTP(w, r)
		case ScorecardsCreateEvaluationProcedure:
			scorecardsCreateEvaluationHandler.ServeHTTP(w, r)
		case ScorecardsDeleteEvaluationProcedure:
			scorecardsDeleteEvaluationHandler.ServeHTTP(w, r)
		case ScorecardsScoreEvaluationProcedure:
			scorecardsScoreEvaluationHandler.ServeHTTP(w, r)
		case ScorecardsUpdateEvaluationProcedure:
			scorecardsUpdateEvaluationHandler.ServeHTTP(w, r)
		case ScorecardsGetEvaluationProcedure:
			scorecardsGetEvaluationHandler.ServeHTTP(w, r)
		case ScorecardsListEvaluationsProcedure:
			scorecardsListEvaluationsHandler.ServeHTTP(w, r)
		case ScorecardsCreateEvaluationQuestionProcedure:
			scorecardsCreateEvaluationQuestionHandler.ServeHTTP(w, r)
		case ScorecardsUpdateEvaluationQuestionProcedure:
			scorecardsUpdateEvaluationQuestionHandler.ServeHTTP(w, r)
		case ScorecardsDeleteEvaluationQuestionProcedure:
			scorecardsDeleteEvaluationQuestionHandler.ServeHTTP(w, r)
		case ScorecardsSampleCallsByCategoryProcedure:
			scorecardsSampleCallsByCategoryHandler.ServeHTTP(w, r)
		case ScorecardsSampleAgentConversationsProcedure:
			scorecardsSampleAgentConversationsHandler.ServeHTTP(w, r)
		case ScorecardsCreateAutoQuestionProcedure:
			scorecardsCreateAutoQuestionHandler.ServeHTTP(w, r)
		case ScorecardsUpdateAutoQuestionProcedure:
			scorecardsUpdateAutoQuestionHandler.ServeHTTP(w, r)
		case ScorecardsDeleteAutoQuestionProcedure:
			scorecardsDeleteAutoQuestionHandler.ServeHTTP(w, r)
		case ScorecardsGetAutoQuestionProcedure:
			scorecardsGetAutoQuestionHandler.ServeHTTP(w, r)
		case ScorecardsGetAutoEvaluationProcedure:
			scorecardsGetAutoEvaluationHandler.ServeHTTP(w, r)
		case ScorecardsListAutoEvaluationsProcedure:
			scorecardsListAutoEvaluationsHandler.ServeHTTP(w, r)
		case ScorecardsStreamAutoEvaluationsProcedure:
			scorecardsStreamAutoEvaluationsHandler.ServeHTTP(w, r)
		case ScorecardsDeleteAutoEvaluationProcedure:
			scorecardsDeleteAutoEvaluationHandler.ServeHTTP(w, r)
		case ScorecardsPreviewEvaluationScoreProcedure:
			scorecardsPreviewEvaluationScoreHandler.ServeHTTP(w, r)
		case ScorecardsRestoreEvaluationProcedure:
			scorecardsRestoreEvaluationHandler.ServeHTTP(w, r)
		case ScorecardsCreateSmartQuestionProcedure:
			scorecardsCreateSmartQuestionHandler.ServeHTTP(w, r)
		case ScorecardsUpdateSmartQuestionProcedure:
			scorecardsUpdateSmartQuestionHandler.ServeHTTP(w, r)
		case ScorecardsDeleteSmartQuestionProcedure:
			scorecardsDeleteSmartQuestionHandler.ServeHTTP(w, r)
		case ScorecardsListSmartEvaluationsProcedure:
			scorecardsListSmartEvaluationsHandler.ServeHTTP(w, r)
		case ScorecardsDeleteSmartEvaluationProcedure:
			scorecardsDeleteSmartEvaluationHandler.ServeHTTP(w, r)
		case ScorecardsGetSmartEvaluationProcedure:
			scorecardsGetSmartEvaluationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedScorecardsHandler returns CodeUnimplemented from all methods.
type UnimplementedScorecardsHandler struct{}

func (UnimplementedScorecardsHandler) CreateScorecard(context.Context, *connect_go.Request[scorecards.CreateScorecardRequest]) (*connect_go.Response[scorecards.CreateScorecardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.CreateScorecard is not implemented"))
}

func (UnimplementedScorecardsHandler) ListScorecards(context.Context, *connect_go.Request[scorecards.ListScorecardsRequest]) (*connect_go.Response[scorecards.ListScorecardsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.ListScorecards is not implemented"))
}

func (UnimplementedScorecardsHandler) UpdateScorecard(context.Context, *connect_go.Request[scorecards.UpdateScorecardRequest]) (*connect_go.Response[scorecards.UpdateScorecardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.UpdateScorecard is not implemented"))
}

func (UnimplementedScorecardsHandler) DeleteScorecard(context.Context, *connect_go.Request[scorecards.DeleteScorecardRequest]) (*connect_go.Response[scorecards.DeleteScorecardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.DeleteScorecard is not implemented"))
}

func (UnimplementedScorecardsHandler) GetScorecard(context.Context, *connect_go.Request[scorecards.GetScorecardRequest]) (*connect_go.Response[scorecards.GetScorecardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.GetScorecard is not implemented"))
}

func (UnimplementedScorecardsHandler) CreateQuestion(context.Context, *connect_go.Request[scorecards.CreateQuestionRequest]) (*connect_go.Response[scorecards.CreateQuestionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.CreateQuestion is not implemented"))
}

func (UnimplementedScorecardsHandler) ListQuestions(context.Context, *connect_go.Request[scorecards.ListQuestionsRequest]) (*connect_go.Response[scorecards.ListQuestionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.ListQuestions is not implemented"))
}

func (UnimplementedScorecardsHandler) UpdateQuestion(context.Context, *connect_go.Request[scorecards.UpdateQuestionRequest]) (*connect_go.Response[scorecards.UpdateQuestionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.UpdateQuestion is not implemented"))
}

func (UnimplementedScorecardsHandler) DeleteQuestion(context.Context, *connect_go.Request[scorecards.DeleteQuestionRequest]) (*connect_go.Response[scorecards.DeleteQuestionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.DeleteQuestion is not implemented"))
}

func (UnimplementedScorecardsHandler) GetQuestion(context.Context, *connect_go.Request[scorecards.GetQuestionRequest]) (*connect_go.Response[scorecards.GetQuestionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.GetQuestion is not implemented"))
}

func (UnimplementedScorecardsHandler) BulkCreateQuestions(context.Context, *connect_go.Request[scorecards.BulkCreateQuestionsRequest]) (*connect_go.Response[scorecards.BulkCreateQuestionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.BulkCreateQuestions is not implemented"))
}

func (UnimplementedScorecardsHandler) CreateCategory(context.Context, *connect_go.Request[scorecards.CreateCategoryRequest]) (*connect_go.Response[scorecards.CreateCategoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.CreateCategory is not implemented"))
}

func (UnimplementedScorecardsHandler) ListCategories(context.Context, *connect_go.Request[scorecards.ListCategoriesRequest]) (*connect_go.Response[scorecards.ListCategoriesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.ListCategories is not implemented"))
}

func (UnimplementedScorecardsHandler) UpdateCategory(context.Context, *connect_go.Request[scorecards.UpdateCategoryRequest]) (*connect_go.Response[scorecards.UpdateCategoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.UpdateCategory is not implemented"))
}

func (UnimplementedScorecardsHandler) DeleteCategory(context.Context, *connect_go.Request[scorecards.DeleteCategoryRequest]) (*connect_go.Response[scorecards.DeleteCategoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.DeleteCategory is not implemented"))
}

func (UnimplementedScorecardsHandler) GetCategory(context.Context, *connect_go.Request[scorecards.GetCategoryRequest]) (*connect_go.Response[scorecards.GetCategoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.GetCategory is not implemented"))
}

func (UnimplementedScorecardsHandler) CreateScorecardQuestion(context.Context, *connect_go.Request[scorecards.CreateScorecardQuestionRequest]) (*connect_go.Response[scorecards.CreateScorecardQuestionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.CreateScorecardQuestion is not implemented"))
}

func (UnimplementedScorecardsHandler) UpdateScorecardQuestion(context.Context, *connect_go.Request[scorecards.UpdateScorecardQuestionRequest]) (*connect_go.Response[scorecards.UpdateScorecardQuestionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.UpdateScorecardQuestion is not implemented"))
}

func (UnimplementedScorecardsHandler) DeleteScorecardQuestion(context.Context, *connect_go.Request[scorecards.DeleteScorecardQuestionRequest]) (*connect_go.Response[scorecards.DeleteScorecardQuestionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.DeleteScorecardQuestion is not implemented"))
}

func (UnimplementedScorecardsHandler) GetScorecardQuestion(context.Context, *connect_go.Request[scorecards.GetScorecardQuestionRequest]) (*connect_go.Response[scorecards.GetScorecardQuestionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.GetScorecardQuestion is not implemented"))
}

func (UnimplementedScorecardsHandler) CreateSection(context.Context, *connect_go.Request[scorecards.CreateSectionRequest]) (*connect_go.Response[scorecards.CreateSectionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.CreateSection is not implemented"))
}

func (UnimplementedScorecardsHandler) ListSections(context.Context, *connect_go.Request[scorecards.ListSectionsRequest]) (*connect_go.Response[scorecards.ListSectionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.ListSections is not implemented"))
}

func (UnimplementedScorecardsHandler) UpdateSection(context.Context, *connect_go.Request[scorecards.UpdateSectionRequest]) (*connect_go.Response[scorecards.UpdateSectionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.UpdateSection is not implemented"))
}

func (UnimplementedScorecardsHandler) GetSection(context.Context, *connect_go.Request[scorecards.GetSectionRequest]) (*connect_go.Response[scorecards.GetSectionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.GetSection is not implemented"))
}

func (UnimplementedScorecardsHandler) DeleteSection(context.Context, *connect_go.Request[scorecards.DeleteSectionRequest]) (*connect_go.Response[scorecards.DeleteSectionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.DeleteSection is not implemented"))
}

func (UnimplementedScorecardsHandler) CreateQuestionCategory(context.Context, *connect_go.Request[scorecards.CreateQuestionCategoryRequest]) (*connect_go.Response[scorecards.CreateQuestionCategoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.CreateQuestionCategory is not implemented"))
}

func (UnimplementedScorecardsHandler) DeleteQuestionCategory(context.Context, *connect_go.Request[scorecards.DeleteQuestionCategoryRequest]) (*connect_go.Response[scorecards.DeleteQuestionCategoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.DeleteQuestionCategory is not implemented"))
}

func (UnimplementedScorecardsHandler) CreateEvaluation(context.Context, *connect_go.Request[scorecards.CreateEvaluationRequest]) (*connect_go.Response[scorecards.CreateEvaluationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.CreateEvaluation is not implemented"))
}

func (UnimplementedScorecardsHandler) DeleteEvaluation(context.Context, *connect_go.Request[scorecards.DeleteEvaluationRequest]) (*connect_go.Response[scorecards.DeleteEvaluationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.DeleteEvaluation is not implemented"))
}

func (UnimplementedScorecardsHandler) ScoreEvaluation(context.Context, *connect_go.Request[scorecards.ScoreEvaluationRequest]) (*connect_go.Response[scorecards.ScoreEvaluationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.ScoreEvaluation is not implemented"))
}

func (UnimplementedScorecardsHandler) UpdateEvaluation(context.Context, *connect_go.Request[scorecards.UpdateEvaluationRequest]) (*connect_go.Response[scorecards.UpdateEvaluationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.UpdateEvaluation is not implemented"))
}

func (UnimplementedScorecardsHandler) GetEvaluation(context.Context, *connect_go.Request[scorecards.GetEvaluationRequest]) (*connect_go.Response[scorecards.GetEvaluationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.GetEvaluation is not implemented"))
}

func (UnimplementedScorecardsHandler) ListEvaluations(context.Context, *connect_go.Request[scorecards.ListEvaluationsRequest]) (*connect_go.Response[scorecards.ListEvaluationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.ListEvaluations is not implemented"))
}

func (UnimplementedScorecardsHandler) CreateEvaluationQuestion(context.Context, *connect_go.Request[scorecards.CreateEvaluationQuestionRequest]) (*connect_go.Response[scorecards.CreateEvaluationQuestionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.CreateEvaluationQuestion is not implemented"))
}

func (UnimplementedScorecardsHandler) UpdateEvaluationQuestion(context.Context, *connect_go.Request[scorecards.UpdateEvaluationQuestionRequest]) (*connect_go.Response[scorecards.UpdateEvaluationQuestionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.UpdateEvaluationQuestion is not implemented"))
}

func (UnimplementedScorecardsHandler) DeleteEvaluationQuestion(context.Context, *connect_go.Request[scorecards.DeleteEvaluationQuestionRequest]) (*connect_go.Response[scorecards.DeleteEvaluationQuestionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.DeleteEvaluationQuestion is not implemented"))
}

func (UnimplementedScorecardsHandler) SampleCallsByCategory(context.Context, *connect_go.Request[scorecards.SampleCallsByCategoryRequest]) (*connect_go.Response[scorecards.SampleCallsByCategoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.SampleCallsByCategory is not implemented"))
}

func (UnimplementedScorecardsHandler) SampleAgentConversations(context.Context, *connect_go.Request[scorecards.SampleAgentConversationsRequest]) (*connect_go.Response[scorecards.SampleAgentConversationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.SampleAgentConversations is not implemented"))
}

func (UnimplementedScorecardsHandler) CreateAutoQuestion(context.Context, *connect_go.Request[scorecards.CreateAutoQuestionRequest]) (*connect_go.Response[scorecards.CreateAutoQuestionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.CreateAutoQuestion is not implemented"))
}

func (UnimplementedScorecardsHandler) UpdateAutoQuestion(context.Context, *connect_go.Request[scorecards.UpdateAutoQuestionRequest]) (*connect_go.Response[scorecards.UpdateAutoQuestionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.UpdateAutoQuestion is not implemented"))
}

func (UnimplementedScorecardsHandler) DeleteAutoQuestion(context.Context, *connect_go.Request[scorecards.DeleteAutoQuestionRequest]) (*connect_go.Response[scorecards.DeleteAutoQuestionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.DeleteAutoQuestion is not implemented"))
}

func (UnimplementedScorecardsHandler) GetAutoQuestion(context.Context, *connect_go.Request[scorecards.GetAutoQuestionRequest]) (*connect_go.Response[scorecards.GetAutoQuestionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.GetAutoQuestion is not implemented"))
}

func (UnimplementedScorecardsHandler) GetAutoEvaluation(context.Context, *connect_go.Request[scorecards.GetAutoEvaluationRequest]) (*connect_go.Response[scorecards.GetAutoEvaluationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.GetAutoEvaluation is not implemented"))
}

func (UnimplementedScorecardsHandler) ListAutoEvaluations(context.Context, *connect_go.Request[scorecards.ListAutoEvaluationsRequest]) (*connect_go.Response[scorecards.ListAutoEvaluationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.ListAutoEvaluations is not implemented"))
}

func (UnimplementedScorecardsHandler) StreamAutoEvaluations(context.Context, *connect_go.Request[scorecards.StreamAutoEvaluationsRequest], *connect_go.ServerStream[scorecards.StreamAutoEvaluationsResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.StreamAutoEvaluations is not implemented"))
}

func (UnimplementedScorecardsHandler) DeleteAutoEvaluation(context.Context, *connect_go.Request[scorecards.DeleteAutoEvaluationRequest]) (*connect_go.Response[scorecards.DeleteAutoEvaluationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.DeleteAutoEvaluation is not implemented"))
}

func (UnimplementedScorecardsHandler) PreviewEvaluationScore(context.Context, *connect_go.Request[scorecards.PreviewEvaluationScoreRequest]) (*connect_go.Response[scorecards.PreviewEvaluationScoreResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.PreviewEvaluationScore is not implemented"))
}

func (UnimplementedScorecardsHandler) RestoreEvaluation(context.Context, *connect_go.Request[scorecards.RestoreEvaluationRequest]) (*connect_go.Response[scorecards.RestoreEvaluationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.RestoreEvaluation is not implemented"))
}

func (UnimplementedScorecardsHandler) CreateSmartQuestion(context.Context, *connect_go.Request[scorecards.CreateSmartQuestionRequest]) (*connect_go.Response[scorecards.CreateSmartQuestionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.CreateSmartQuestion is not implemented"))
}

func (UnimplementedScorecardsHandler) UpdateSmartQuestion(context.Context, *connect_go.Request[scorecards.UpdateSmartQuestionRequest]) (*connect_go.Response[scorecards.UpdateSmartQuestionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.UpdateSmartQuestion is not implemented"))
}

func (UnimplementedScorecardsHandler) DeleteSmartQuestion(context.Context, *connect_go.Request[scorecards.DeleteSmartQuestionRequest]) (*connect_go.Response[scorecards.DeleteSmartQuestionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.DeleteSmartQuestion is not implemented"))
}

func (UnimplementedScorecardsHandler) ListSmartEvaluations(context.Context, *connect_go.Request[scorecards.ListSmartEvaluationsRequest]) (*connect_go.Response[scorecards.ListSmartEvaluationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.ListSmartEvaluations is not implemented"))
}

func (UnimplementedScorecardsHandler) DeleteSmartEvaluation(context.Context, *connect_go.Request[scorecards.DeleteSmartEvaluationRequest]) (*connect_go.Response[scorecards.DeleteSmartEvaluationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.DeleteSmartEvaluation is not implemented"))
}

func (UnimplementedScorecardsHandler) GetSmartEvaluation(context.Context, *connect_go.Request[scorecards.GetSmartEvaluationRequest]) (*connect_go.Response[scorecards.GetSmartEvaluationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.scorecards.Scorecards.GetSmartEvaluation is not implemented"))
}
