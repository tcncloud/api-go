// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1alpha1/vanalytics/service.proto

package vanalytics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Vanalytics_Audit_FullMethodName                     = "/api.v1alpha1.vanalytics.Vanalytics/Audit"
	Vanalytics_GetRecordingUrl_FullMethodName           = "/api.v1alpha1.vanalytics.Vanalytics/GetRecordingUrl"
	Vanalytics_ListBillingSpan_FullMethodName           = "/api.v1alpha1.vanalytics.Vanalytics/ListBillingSpan"
	Vanalytics_Search_FullMethodName                    = "/api.v1alpha1.vanalytics.Vanalytics/Search"
	Vanalytics_ListTranscriptGroupNames_FullMethodName  = "/api.v1alpha1.vanalytics.Vanalytics/ListTranscriptGroupNames"
	Vanalytics_BulkDeleteTranscripts_FullMethodName     = "/api.v1alpha1.vanalytics.Vanalytics/BulkDeleteTranscripts"
	Vanalytics_BulkRestoreTranscripts_FullMethodName    = "/api.v1alpha1.vanalytics.Vanalytics/BulkRestoreTranscripts"
	Vanalytics_ListAgentResponseValues_FullMethodName   = "/api.v1alpha1.vanalytics.Vanalytics/ListAgentResponseValues"
	Vanalytics_GetTranscriptSummary_FullMethodName      = "/api.v1alpha1.vanalytics.Vanalytics/GetTranscriptSummary"
	Vanalytics_CreateFilter_FullMethodName              = "/api.v1alpha1.vanalytics.Vanalytics/CreateFilter"
	Vanalytics_ListFilters_FullMethodName               = "/api.v1alpha1.vanalytics.Vanalytics/ListFilters"
	Vanalytics_UpdateFilter_FullMethodName              = "/api.v1alpha1.vanalytics.Vanalytics/UpdateFilter"
	Vanalytics_DeleteFilter_FullMethodName              = "/api.v1alpha1.vanalytics.Vanalytics/DeleteFilter"
	Vanalytics_GetFilter_FullMethodName                 = "/api.v1alpha1.vanalytics.Vanalytics/GetFilter"
	Vanalytics_GetFlag_FullMethodName                   = "/api.v1alpha1.vanalytics.Vanalytics/GetFlag"
	Vanalytics_CreateFlag_FullMethodName                = "/api.v1alpha1.vanalytics.Vanalytics/CreateFlag"
	Vanalytics_ListFlags_FullMethodName                 = "/api.v1alpha1.vanalytics.Vanalytics/ListFlags"
	Vanalytics_UpdateFlag_FullMethodName                = "/api.v1alpha1.vanalytics.Vanalytics/UpdateFlag"
	Vanalytics_DeleteFlag_FullMethodName                = "/api.v1alpha1.vanalytics.Vanalytics/DeleteFlag"
	Vanalytics_CreateFlagReview_FullMethodName          = "/api.v1alpha1.vanalytics.Vanalytics/CreateFlagReview"
	Vanalytics_BulkCreateFlagReview_FullMethodName      = "/api.v1alpha1.vanalytics.Vanalytics/BulkCreateFlagReview"
	Vanalytics_ListFlagReviews_FullMethodName           = "/api.v1alpha1.vanalytics.Vanalytics/ListFlagReviews"
	Vanalytics_CreateFlagTranscript_FullMethodName      = "/api.v1alpha1.vanalytics.Vanalytics/CreateFlagTranscript"
	Vanalytics_SearchFlagTranscripts_FullMethodName     = "/api.v1alpha1.vanalytics.Vanalytics/SearchFlagTranscripts"
	Vanalytics_CreateFlagFilter_FullMethodName          = "/api.v1alpha1.vanalytics.Vanalytics/CreateFlagFilter"
	Vanalytics_ListFlagFilters_FullMethodName           = "/api.v1alpha1.vanalytics.Vanalytics/ListFlagFilters"
	Vanalytics_DeleteFlagFilter_FullMethodName          = "/api.v1alpha1.vanalytics.Vanalytics/DeleteFlagFilter"
	Vanalytics_ListFlagSnapshots_FullMethodName         = "/api.v1alpha1.vanalytics.Vanalytics/ListFlagSnapshots"
	Vanalytics_ListFlagTranscriptFilters_FullMethodName = "/api.v1alpha1.vanalytics.Vanalytics/ListFlagTranscriptFilters"
	Vanalytics_CreateCorrection_FullMethodName          = "/api.v1alpha1.vanalytics.Vanalytics/CreateCorrection"
	Vanalytics_GetCorrection_FullMethodName             = "/api.v1alpha1.vanalytics.Vanalytics/GetCorrection"
	Vanalytics_DeleteCorrection_FullMethodName          = "/api.v1alpha1.vanalytics.Vanalytics/DeleteCorrection"
	Vanalytics_ListCorrections_FullMethodName           = "/api.v1alpha1.vanalytics.Vanalytics/ListCorrections"
	Vanalytics_UpdateCorrection_FullMethodName          = "/api.v1alpha1.vanalytics.Vanalytics/UpdateCorrection"
)

// VanalyticsClient is the client API for Vanalytics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VanalyticsClient interface {
	// Audit audits the used transcription audio time for a client. The window
	// of time to audit can be widened or narrowed using the request since and
	// until fields.
	Audit(ctx context.Context, in *AuditRequest, opts ...grpc.CallOption) (*AuditResponse, error)
	// GetRecordingUrl gets a signed url to download a transcript recording.
	GetRecordingUrl(ctx context.Context, in *GetRecordingUrlRequest, opts ...grpc.CallOption) (*GetRecordingUrlResponse, error)
	// ListBillingSpan lists billing spans.
	ListBillingSpan(ctx context.Context, in *ListBillingSpanRequest, opts ...grpc.CallOption) (*ListBillingSpanResponse, error)
	// Search searches transcripts by search criteria. The search response
	// contains one page of transcript hits. Traversing the paginated hits is
	// achieved through subsequent requests using the response sort field.
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// ListTranscriptGroupNames lists transcript group names.
	ListTranscriptGroupNames(ctx context.Context, in *ListTranscriptGroupNamesRequest, opts ...grpc.CallOption) (*ListTranscriptGroupNamesResponse, error)
	// BulkDeleteTranscripts bulk deletes transcripts matching the provided query.
	BulkDeleteTranscripts(ctx context.Context, in *BulkDeleteTranscriptsRequest, opts ...grpc.CallOption) (*BulkDeleteTranscriptsResponse, error)
	// BulkRestoreTranscripts bulk restores transcripts matching the provided query.
	BulkRestoreTranscripts(ctx context.Context, in *BulkRestoreTranscriptsRequest, opts ...grpc.CallOption) (*BulkRestoreTranscriptsResponse, error)
	// ListAgentResponseValues lists transcript agent response values.
	ListAgentResponseValues(ctx context.Context, in *ListAgentResponseValuesRequest, opts ...grpc.CallOption) (*ListAgentResponseValuesResponse, error)
	// GetTranscriptSummary gets a transcript summary for a provided transcript.
	GetTranscriptSummary(ctx context.Context, in *GetTranscriptSummaryRequest, opts ...grpc.CallOption) (*GetTranscriptSummaryResponse, error)
	// CreateFilter creates a new filter. The filter contains a search request
	// to filter transcripts.
	CreateFilter(ctx context.Context, in *CreateFilterRequest, opts ...grpc.CallOption) (*Filter, error)
	// ListFilters lists filters.
	ListFilters(ctx context.Context, in *ListFiltersRequest, opts ...grpc.CallOption) (*ListFiltersResponse, error)
	// UpdateFilter updates a filter search request and/or name.
	UpdateFilter(ctx context.Context, in *UpdateFilterRequest, opts ...grpc.CallOption) (*Filter, error)
	// DeleteFilter deletes filter given a filter_sid.
	DeleteFilter(ctx context.Context, in *DeleteFilterRequest, opts ...grpc.CallOption) (*DeleteFilterResponse, error)
	// GetFilter gets filter given a filter_sid, name or search request.
	GetFilter(ctx context.Context, in *GetFilterRequest, opts ...grpc.CallOption) (*Filter, error)
	// GetFlag gets a flag.
	GetFlag(ctx context.Context, in *GetFlagRequest, opts ...grpc.CallOption) (*Flag, error)
	// CreateFlag creates a new flag.
	CreateFlag(ctx context.Context, in *CreateFlagRequest, opts ...grpc.CallOption) (*Flag, error)
	// ListFlags lists flags in an organization.
	ListFlags(ctx context.Context, in *ListFlagsRequest, opts ...grpc.CallOption) (*ListFlagsResponse, error)
	// UpdateFlag updates a flag.
	UpdateFlag(ctx context.Context, in *UpdateFlagRequest, opts ...grpc.CallOption) (*Flag, error)
	// DeleteFlag deletes the flag identified by the given flag_sid.
	DeleteFlag(ctx context.Context, in *DeleteFlagRequest, opts ...grpc.CallOption) (*DeleteFlagResponse, error)
	// CreateFlagReview creates a flag review.
	CreateFlagReview(ctx context.Context, in *CreateFlagReviewRequest, opts ...grpc.CallOption) (*FlagReview, error)
	// BulkCreateFlagReview creates flag reviews.
	BulkCreateFlagReview(ctx context.Context, in *BulkCreateFlagReviewRequest, opts ...grpc.CallOption) (*BulkCreateFlagReviewResponse, error)
	// ListFlagReviews lists reviews in an organization.
	ListFlagReviews(ctx context.Context, in *ListFlagReviewsRequest, opts ...grpc.CallOption) (*ListFlagReviewsResponse, error)
	// CreateFlagTranscript creates a flag transcript.
	CreateFlagTranscript(ctx context.Context, in *CreateFlagTranscriptRequest, opts ...grpc.CallOption) (*CreateFlagTranscriptResponse, error)
	// SearchFlagTranscripts searches flag transcripts.
	SearchFlagTranscripts(ctx context.Context, in *SearchFlagTranscriptsRequest, opts ...grpc.CallOption) (*SearchFlagTranscriptsResponse, error)
	// DEPRECATED.
	CreateFlagFilter(ctx context.Context, in *CreateFlagFilterRequest, opts ...grpc.CallOption) (*FlagFilter, error)
	// ListFlagFilters lists flag filter associations.
	ListFlagFilters(ctx context.Context, in *ListFlagFiltersRequest, opts ...grpc.CallOption) (*ListFlagFiltersResponse, error)
	// DEPRECATED.
	DeleteFlagFilter(ctx context.Context, in *DeleteFlagFilterRequest, opts ...grpc.CallOption) (*DeleteFlagFilterResponse, error)
	// ListFlagSnapshots lists flag snapshots in an organization.
	ListFlagSnapshots(ctx context.Context, in *ListFlagSnapshotsRequest, opts ...grpc.CallOption) (*ListFlagSnapshotsResponse, error)
	// ListFlagTranscriptFilters lists flag transcript filters in an organization.
	ListFlagTranscriptFilters(ctx context.Context, in *ListFlagTranscriptFiltersRequest, opts ...grpc.CallOption) (*ListFlagTranscriptFiltersResponse, error)
	// CreateCorrection creates a correction.
	CreateCorrection(ctx context.Context, in *CreateCorrectionRequest, opts ...grpc.CallOption) (*CreateCorrectionResponse, error)
	// GetCorrection gets a correction.
	GetCorrection(ctx context.Context, in *GetCorrectionRequest, opts ...grpc.CallOption) (*Correction, error)
	// DeleteCorrection deletes a correction.
	DeleteCorrection(ctx context.Context, in *DeleteCorrectionRequest, opts ...grpc.CallOption) (*DeleteCorrectionResponse, error)
	// ListCorrections lists corrections.
	ListCorrections(ctx context.Context, in *ListCorrectionsRequest, opts ...grpc.CallOption) (*ListCorrectionsResponse, error)
	// UpdateCorrection updates a correction.
	UpdateCorrection(ctx context.Context, in *UpdateCorrectionRequest, opts ...grpc.CallOption) (*UpdateCorrectionResponse, error)
}

type vanalyticsClient struct {
	cc grpc.ClientConnInterface
}

func NewVanalyticsClient(cc grpc.ClientConnInterface) VanalyticsClient {
	return &vanalyticsClient{cc}
}

func (c *vanalyticsClient) Audit(ctx context.Context, in *AuditRequest, opts ...grpc.CallOption) (*AuditResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuditResponse)
	err := c.cc.Invoke(ctx, Vanalytics_Audit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) GetRecordingUrl(ctx context.Context, in *GetRecordingUrlRequest, opts ...grpc.CallOption) (*GetRecordingUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecordingUrlResponse)
	err := c.cc.Invoke(ctx, Vanalytics_GetRecordingUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) ListBillingSpan(ctx context.Context, in *ListBillingSpanRequest, opts ...grpc.CallOption) (*ListBillingSpanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBillingSpanResponse)
	err := c.cc.Invoke(ctx, Vanalytics_ListBillingSpan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, Vanalytics_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) ListTranscriptGroupNames(ctx context.Context, in *ListTranscriptGroupNamesRequest, opts ...grpc.CallOption) (*ListTranscriptGroupNamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTranscriptGroupNamesResponse)
	err := c.cc.Invoke(ctx, Vanalytics_ListTranscriptGroupNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) BulkDeleteTranscripts(ctx context.Context, in *BulkDeleteTranscriptsRequest, opts ...grpc.CallOption) (*BulkDeleteTranscriptsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkDeleteTranscriptsResponse)
	err := c.cc.Invoke(ctx, Vanalytics_BulkDeleteTranscripts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) BulkRestoreTranscripts(ctx context.Context, in *BulkRestoreTranscriptsRequest, opts ...grpc.CallOption) (*BulkRestoreTranscriptsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkRestoreTranscriptsResponse)
	err := c.cc.Invoke(ctx, Vanalytics_BulkRestoreTranscripts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) ListAgentResponseValues(ctx context.Context, in *ListAgentResponseValuesRequest, opts ...grpc.CallOption) (*ListAgentResponseValuesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentResponseValuesResponse)
	err := c.cc.Invoke(ctx, Vanalytics_ListAgentResponseValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) GetTranscriptSummary(ctx context.Context, in *GetTranscriptSummaryRequest, opts ...grpc.CallOption) (*GetTranscriptSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTranscriptSummaryResponse)
	err := c.cc.Invoke(ctx, Vanalytics_GetTranscriptSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) CreateFilter(ctx context.Context, in *CreateFilterRequest, opts ...grpc.CallOption) (*Filter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Filter)
	err := c.cc.Invoke(ctx, Vanalytics_CreateFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) ListFilters(ctx context.Context, in *ListFiltersRequest, opts ...grpc.CallOption) (*ListFiltersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFiltersResponse)
	err := c.cc.Invoke(ctx, Vanalytics_ListFilters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) UpdateFilter(ctx context.Context, in *UpdateFilterRequest, opts ...grpc.CallOption) (*Filter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Filter)
	err := c.cc.Invoke(ctx, Vanalytics_UpdateFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) DeleteFilter(ctx context.Context, in *DeleteFilterRequest, opts ...grpc.CallOption) (*DeleteFilterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFilterResponse)
	err := c.cc.Invoke(ctx, Vanalytics_DeleteFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) GetFilter(ctx context.Context, in *GetFilterRequest, opts ...grpc.CallOption) (*Filter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Filter)
	err := c.cc.Invoke(ctx, Vanalytics_GetFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) GetFlag(ctx context.Context, in *GetFlagRequest, opts ...grpc.CallOption) (*Flag, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Flag)
	err := c.cc.Invoke(ctx, Vanalytics_GetFlag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) CreateFlag(ctx context.Context, in *CreateFlagRequest, opts ...grpc.CallOption) (*Flag, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Flag)
	err := c.cc.Invoke(ctx, Vanalytics_CreateFlag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) ListFlags(ctx context.Context, in *ListFlagsRequest, opts ...grpc.CallOption) (*ListFlagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFlagsResponse)
	err := c.cc.Invoke(ctx, Vanalytics_ListFlags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) UpdateFlag(ctx context.Context, in *UpdateFlagRequest, opts ...grpc.CallOption) (*Flag, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Flag)
	err := c.cc.Invoke(ctx, Vanalytics_UpdateFlag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) DeleteFlag(ctx context.Context, in *DeleteFlagRequest, opts ...grpc.CallOption) (*DeleteFlagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFlagResponse)
	err := c.cc.Invoke(ctx, Vanalytics_DeleteFlag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) CreateFlagReview(ctx context.Context, in *CreateFlagReviewRequest, opts ...grpc.CallOption) (*FlagReview, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlagReview)
	err := c.cc.Invoke(ctx, Vanalytics_CreateFlagReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) BulkCreateFlagReview(ctx context.Context, in *BulkCreateFlagReviewRequest, opts ...grpc.CallOption) (*BulkCreateFlagReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkCreateFlagReviewResponse)
	err := c.cc.Invoke(ctx, Vanalytics_BulkCreateFlagReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) ListFlagReviews(ctx context.Context, in *ListFlagReviewsRequest, opts ...grpc.CallOption) (*ListFlagReviewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFlagReviewsResponse)
	err := c.cc.Invoke(ctx, Vanalytics_ListFlagReviews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) CreateFlagTranscript(ctx context.Context, in *CreateFlagTranscriptRequest, opts ...grpc.CallOption) (*CreateFlagTranscriptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFlagTranscriptResponse)
	err := c.cc.Invoke(ctx, Vanalytics_CreateFlagTranscript_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) SearchFlagTranscripts(ctx context.Context, in *SearchFlagTranscriptsRequest, opts ...grpc.CallOption) (*SearchFlagTranscriptsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchFlagTranscriptsResponse)
	err := c.cc.Invoke(ctx, Vanalytics_SearchFlagTranscripts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) CreateFlagFilter(ctx context.Context, in *CreateFlagFilterRequest, opts ...grpc.CallOption) (*FlagFilter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlagFilter)
	err := c.cc.Invoke(ctx, Vanalytics_CreateFlagFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) ListFlagFilters(ctx context.Context, in *ListFlagFiltersRequest, opts ...grpc.CallOption) (*ListFlagFiltersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFlagFiltersResponse)
	err := c.cc.Invoke(ctx, Vanalytics_ListFlagFilters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) DeleteFlagFilter(ctx context.Context, in *DeleteFlagFilterRequest, opts ...grpc.CallOption) (*DeleteFlagFilterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFlagFilterResponse)
	err := c.cc.Invoke(ctx, Vanalytics_DeleteFlagFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) ListFlagSnapshots(ctx context.Context, in *ListFlagSnapshotsRequest, opts ...grpc.CallOption) (*ListFlagSnapshotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFlagSnapshotsResponse)
	err := c.cc.Invoke(ctx, Vanalytics_ListFlagSnapshots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) ListFlagTranscriptFilters(ctx context.Context, in *ListFlagTranscriptFiltersRequest, opts ...grpc.CallOption) (*ListFlagTranscriptFiltersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFlagTranscriptFiltersResponse)
	err := c.cc.Invoke(ctx, Vanalytics_ListFlagTranscriptFilters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) CreateCorrection(ctx context.Context, in *CreateCorrectionRequest, opts ...grpc.CallOption) (*CreateCorrectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCorrectionResponse)
	err := c.cc.Invoke(ctx, Vanalytics_CreateCorrection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) GetCorrection(ctx context.Context, in *GetCorrectionRequest, opts ...grpc.CallOption) (*Correction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Correction)
	err := c.cc.Invoke(ctx, Vanalytics_GetCorrection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) DeleteCorrection(ctx context.Context, in *DeleteCorrectionRequest, opts ...grpc.CallOption) (*DeleteCorrectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCorrectionResponse)
	err := c.cc.Invoke(ctx, Vanalytics_DeleteCorrection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) ListCorrections(ctx context.Context, in *ListCorrectionsRequest, opts ...grpc.CallOption) (*ListCorrectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCorrectionsResponse)
	err := c.cc.Invoke(ctx, Vanalytics_ListCorrections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanalyticsClient) UpdateCorrection(ctx context.Context, in *UpdateCorrectionRequest, opts ...grpc.CallOption) (*UpdateCorrectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCorrectionResponse)
	err := c.cc.Invoke(ctx, Vanalytics_UpdateCorrection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VanalyticsServer is the server API for Vanalytics service.
// All implementations must embed UnimplementedVanalyticsServer
// for forward compatibility.
type VanalyticsServer interface {
	// Audit audits the used transcription audio time for a client. The window
	// of time to audit can be widened or narrowed using the request since and
	// until fields.
	Audit(context.Context, *AuditRequest) (*AuditResponse, error)
	// GetRecordingUrl gets a signed url to download a transcript recording.
	GetRecordingUrl(context.Context, *GetRecordingUrlRequest) (*GetRecordingUrlResponse, error)
	// ListBillingSpan lists billing spans.
	ListBillingSpan(context.Context, *ListBillingSpanRequest) (*ListBillingSpanResponse, error)
	// Search searches transcripts by search criteria. The search response
	// contains one page of transcript hits. Traversing the paginated hits is
	// achieved through subsequent requests using the response sort field.
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// ListTranscriptGroupNames lists transcript group names.
	ListTranscriptGroupNames(context.Context, *ListTranscriptGroupNamesRequest) (*ListTranscriptGroupNamesResponse, error)
	// BulkDeleteTranscripts bulk deletes transcripts matching the provided query.
	BulkDeleteTranscripts(context.Context, *BulkDeleteTranscriptsRequest) (*BulkDeleteTranscriptsResponse, error)
	// BulkRestoreTranscripts bulk restores transcripts matching the provided query.
	BulkRestoreTranscripts(context.Context, *BulkRestoreTranscriptsRequest) (*BulkRestoreTranscriptsResponse, error)
	// ListAgentResponseValues lists transcript agent response values.
	ListAgentResponseValues(context.Context, *ListAgentResponseValuesRequest) (*ListAgentResponseValuesResponse, error)
	// GetTranscriptSummary gets a transcript summary for a provided transcript.
	GetTranscriptSummary(context.Context, *GetTranscriptSummaryRequest) (*GetTranscriptSummaryResponse, error)
	// CreateFilter creates a new filter. The filter contains a search request
	// to filter transcripts.
	CreateFilter(context.Context, *CreateFilterRequest) (*Filter, error)
	// ListFilters lists filters.
	ListFilters(context.Context, *ListFiltersRequest) (*ListFiltersResponse, error)
	// UpdateFilter updates a filter search request and/or name.
	UpdateFilter(context.Context, *UpdateFilterRequest) (*Filter, error)
	// DeleteFilter deletes filter given a filter_sid.
	DeleteFilter(context.Context, *DeleteFilterRequest) (*DeleteFilterResponse, error)
	// GetFilter gets filter given a filter_sid, name or search request.
	GetFilter(context.Context, *GetFilterRequest) (*Filter, error)
	// GetFlag gets a flag.
	GetFlag(context.Context, *GetFlagRequest) (*Flag, error)
	// CreateFlag creates a new flag.
	CreateFlag(context.Context, *CreateFlagRequest) (*Flag, error)
	// ListFlags lists flags in an organization.
	ListFlags(context.Context, *ListFlagsRequest) (*ListFlagsResponse, error)
	// UpdateFlag updates a flag.
	UpdateFlag(context.Context, *UpdateFlagRequest) (*Flag, error)
	// DeleteFlag deletes the flag identified by the given flag_sid.
	DeleteFlag(context.Context, *DeleteFlagRequest) (*DeleteFlagResponse, error)
	// CreateFlagReview creates a flag review.
	CreateFlagReview(context.Context, *CreateFlagReviewRequest) (*FlagReview, error)
	// BulkCreateFlagReview creates flag reviews.
	BulkCreateFlagReview(context.Context, *BulkCreateFlagReviewRequest) (*BulkCreateFlagReviewResponse, error)
	// ListFlagReviews lists reviews in an organization.
	ListFlagReviews(context.Context, *ListFlagReviewsRequest) (*ListFlagReviewsResponse, error)
	// CreateFlagTranscript creates a flag transcript.
	CreateFlagTranscript(context.Context, *CreateFlagTranscriptRequest) (*CreateFlagTranscriptResponse, error)
	// SearchFlagTranscripts searches flag transcripts.
	SearchFlagTranscripts(context.Context, *SearchFlagTranscriptsRequest) (*SearchFlagTranscriptsResponse, error)
	// DEPRECATED.
	CreateFlagFilter(context.Context, *CreateFlagFilterRequest) (*FlagFilter, error)
	// ListFlagFilters lists flag filter associations.
	ListFlagFilters(context.Context, *ListFlagFiltersRequest) (*ListFlagFiltersResponse, error)
	// DEPRECATED.
	DeleteFlagFilter(context.Context, *DeleteFlagFilterRequest) (*DeleteFlagFilterResponse, error)
	// ListFlagSnapshots lists flag snapshots in an organization.
	ListFlagSnapshots(context.Context, *ListFlagSnapshotsRequest) (*ListFlagSnapshotsResponse, error)
	// ListFlagTranscriptFilters lists flag transcript filters in an organization.
	ListFlagTranscriptFilters(context.Context, *ListFlagTranscriptFiltersRequest) (*ListFlagTranscriptFiltersResponse, error)
	// CreateCorrection creates a correction.
	CreateCorrection(context.Context, *CreateCorrectionRequest) (*CreateCorrectionResponse, error)
	// GetCorrection gets a correction.
	GetCorrection(context.Context, *GetCorrectionRequest) (*Correction, error)
	// DeleteCorrection deletes a correction.
	DeleteCorrection(context.Context, *DeleteCorrectionRequest) (*DeleteCorrectionResponse, error)
	// ListCorrections lists corrections.
	ListCorrections(context.Context, *ListCorrectionsRequest) (*ListCorrectionsResponse, error)
	// UpdateCorrection updates a correction.
	UpdateCorrection(context.Context, *UpdateCorrectionRequest) (*UpdateCorrectionResponse, error)
	mustEmbedUnimplementedVanalyticsServer()
}

// UnimplementedVanalyticsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVanalyticsServer struct{}

func (UnimplementedVanalyticsServer) Audit(context.Context, *AuditRequest) (*AuditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Audit not implemented")
}
func (UnimplementedVanalyticsServer) GetRecordingUrl(context.Context, *GetRecordingUrlRequest) (*GetRecordingUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordingUrl not implemented")
}
func (UnimplementedVanalyticsServer) ListBillingSpan(context.Context, *ListBillingSpanRequest) (*ListBillingSpanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBillingSpan not implemented")
}
func (UnimplementedVanalyticsServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedVanalyticsServer) ListTranscriptGroupNames(context.Context, *ListTranscriptGroupNamesRequest) (*ListTranscriptGroupNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTranscriptGroupNames not implemented")
}
func (UnimplementedVanalyticsServer) BulkDeleteTranscripts(context.Context, *BulkDeleteTranscriptsRequest) (*BulkDeleteTranscriptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkDeleteTranscripts not implemented")
}
func (UnimplementedVanalyticsServer) BulkRestoreTranscripts(context.Context, *BulkRestoreTranscriptsRequest) (*BulkRestoreTranscriptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkRestoreTranscripts not implemented")
}
func (UnimplementedVanalyticsServer) ListAgentResponseValues(context.Context, *ListAgentResponseValuesRequest) (*ListAgentResponseValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentResponseValues not implemented")
}
func (UnimplementedVanalyticsServer) GetTranscriptSummary(context.Context, *GetTranscriptSummaryRequest) (*GetTranscriptSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTranscriptSummary not implemented")
}
func (UnimplementedVanalyticsServer) CreateFilter(context.Context, *CreateFilterRequest) (*Filter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFilter not implemented")
}
func (UnimplementedVanalyticsServer) ListFilters(context.Context, *ListFiltersRequest) (*ListFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFilters not implemented")
}
func (UnimplementedVanalyticsServer) UpdateFilter(context.Context, *UpdateFilterRequest) (*Filter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFilter not implemented")
}
func (UnimplementedVanalyticsServer) DeleteFilter(context.Context, *DeleteFilterRequest) (*DeleteFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFilter not implemented")
}
func (UnimplementedVanalyticsServer) GetFilter(context.Context, *GetFilterRequest) (*Filter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilter not implemented")
}
func (UnimplementedVanalyticsServer) GetFlag(context.Context, *GetFlagRequest) (*Flag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlag not implemented")
}
func (UnimplementedVanalyticsServer) CreateFlag(context.Context, *CreateFlagRequest) (*Flag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlag not implemented")
}
func (UnimplementedVanalyticsServer) ListFlags(context.Context, *ListFlagsRequest) (*ListFlagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlags not implemented")
}
func (UnimplementedVanalyticsServer) UpdateFlag(context.Context, *UpdateFlagRequest) (*Flag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlag not implemented")
}
func (UnimplementedVanalyticsServer) DeleteFlag(context.Context, *DeleteFlagRequest) (*DeleteFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlag not implemented")
}
func (UnimplementedVanalyticsServer) CreateFlagReview(context.Context, *CreateFlagReviewRequest) (*FlagReview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlagReview not implemented")
}
func (UnimplementedVanalyticsServer) BulkCreateFlagReview(context.Context, *BulkCreateFlagReviewRequest) (*BulkCreateFlagReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateFlagReview not implemented")
}
func (UnimplementedVanalyticsServer) ListFlagReviews(context.Context, *ListFlagReviewsRequest) (*ListFlagReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlagReviews not implemented")
}
func (UnimplementedVanalyticsServer) CreateFlagTranscript(context.Context, *CreateFlagTranscriptRequest) (*CreateFlagTranscriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlagTranscript not implemented")
}
func (UnimplementedVanalyticsServer) SearchFlagTranscripts(context.Context, *SearchFlagTranscriptsRequest) (*SearchFlagTranscriptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFlagTranscripts not implemented")
}
func (UnimplementedVanalyticsServer) CreateFlagFilter(context.Context, *CreateFlagFilterRequest) (*FlagFilter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlagFilter not implemented")
}
func (UnimplementedVanalyticsServer) ListFlagFilters(context.Context, *ListFlagFiltersRequest) (*ListFlagFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlagFilters not implemented")
}
func (UnimplementedVanalyticsServer) DeleteFlagFilter(context.Context, *DeleteFlagFilterRequest) (*DeleteFlagFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlagFilter not implemented")
}
func (UnimplementedVanalyticsServer) ListFlagSnapshots(context.Context, *ListFlagSnapshotsRequest) (*ListFlagSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlagSnapshots not implemented")
}
func (UnimplementedVanalyticsServer) ListFlagTranscriptFilters(context.Context, *ListFlagTranscriptFiltersRequest) (*ListFlagTranscriptFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlagTranscriptFilters not implemented")
}
func (UnimplementedVanalyticsServer) CreateCorrection(context.Context, *CreateCorrectionRequest) (*CreateCorrectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCorrection not implemented")
}
func (UnimplementedVanalyticsServer) GetCorrection(context.Context, *GetCorrectionRequest) (*Correction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCorrection not implemented")
}
func (UnimplementedVanalyticsServer) DeleteCorrection(context.Context, *DeleteCorrectionRequest) (*DeleteCorrectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCorrection not implemented")
}
func (UnimplementedVanalyticsServer) ListCorrections(context.Context, *ListCorrectionsRequest) (*ListCorrectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCorrections not implemented")
}
func (UnimplementedVanalyticsServer) UpdateCorrection(context.Context, *UpdateCorrectionRequest) (*UpdateCorrectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCorrection not implemented")
}
func (UnimplementedVanalyticsServer) mustEmbedUnimplementedVanalyticsServer() {}
func (UnimplementedVanalyticsServer) testEmbeddedByValue()                    {}

// UnsafeVanalyticsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VanalyticsServer will
// result in compilation errors.
type UnsafeVanalyticsServer interface {
	mustEmbedUnimplementedVanalyticsServer()
}

func RegisterVanalyticsServer(s grpc.ServiceRegistrar, srv VanalyticsServer) {
	// If the following call pancis, it indicates UnimplementedVanalyticsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Vanalytics_ServiceDesc, srv)
}

func _Vanalytics_Audit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).Audit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_Audit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).Audit(ctx, req.(*AuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_GetRecordingUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordingUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).GetRecordingUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_GetRecordingUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).GetRecordingUrl(ctx, req.(*GetRecordingUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_ListBillingSpan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBillingSpanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).ListBillingSpan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_ListBillingSpan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).ListBillingSpan(ctx, req.(*ListBillingSpanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_ListTranscriptGroupNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTranscriptGroupNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).ListTranscriptGroupNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_ListTranscriptGroupNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).ListTranscriptGroupNames(ctx, req.(*ListTranscriptGroupNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_BulkDeleteTranscripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkDeleteTranscriptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).BulkDeleteTranscripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_BulkDeleteTranscripts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).BulkDeleteTranscripts(ctx, req.(*BulkDeleteTranscriptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_BulkRestoreTranscripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkRestoreTranscriptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).BulkRestoreTranscripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_BulkRestoreTranscripts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).BulkRestoreTranscripts(ctx, req.(*BulkRestoreTranscriptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_ListAgentResponseValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentResponseValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).ListAgentResponseValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_ListAgentResponseValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).ListAgentResponseValues(ctx, req.(*ListAgentResponseValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_GetTranscriptSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTranscriptSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).GetTranscriptSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_GetTranscriptSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).GetTranscriptSummary(ctx, req.(*GetTranscriptSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_CreateFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).CreateFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_CreateFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).CreateFilter(ctx, req.(*CreateFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_ListFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).ListFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_ListFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).ListFilters(ctx, req.(*ListFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_UpdateFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).UpdateFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_UpdateFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).UpdateFilter(ctx, req.(*UpdateFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_DeleteFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).DeleteFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_DeleteFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).DeleteFilter(ctx, req.(*DeleteFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_GetFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).GetFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_GetFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).GetFilter(ctx, req.(*GetFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_GetFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).GetFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_GetFlag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).GetFlag(ctx, req.(*GetFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_CreateFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).CreateFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_CreateFlag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).CreateFlag(ctx, req.(*CreateFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_ListFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).ListFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_ListFlags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).ListFlags(ctx, req.(*ListFlagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_UpdateFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).UpdateFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_UpdateFlag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).UpdateFlag(ctx, req.(*UpdateFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_DeleteFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).DeleteFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_DeleteFlag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).DeleteFlag(ctx, req.(*DeleteFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_CreateFlagReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlagReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).CreateFlagReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_CreateFlagReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).CreateFlagReview(ctx, req.(*CreateFlagReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_BulkCreateFlagReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateFlagReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).BulkCreateFlagReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_BulkCreateFlagReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).BulkCreateFlagReview(ctx, req.(*BulkCreateFlagReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_ListFlagReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlagReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).ListFlagReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_ListFlagReviews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).ListFlagReviews(ctx, req.(*ListFlagReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_CreateFlagTranscript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlagTranscriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).CreateFlagTranscript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_CreateFlagTranscript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).CreateFlagTranscript(ctx, req.(*CreateFlagTranscriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_SearchFlagTranscripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFlagTranscriptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).SearchFlagTranscripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_SearchFlagTranscripts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).SearchFlagTranscripts(ctx, req.(*SearchFlagTranscriptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_CreateFlagFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlagFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).CreateFlagFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_CreateFlagFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).CreateFlagFilter(ctx, req.(*CreateFlagFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_ListFlagFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlagFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).ListFlagFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_ListFlagFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).ListFlagFilters(ctx, req.(*ListFlagFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_DeleteFlagFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFlagFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).DeleteFlagFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_DeleteFlagFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).DeleteFlagFilter(ctx, req.(*DeleteFlagFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_ListFlagSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlagSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).ListFlagSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_ListFlagSnapshots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).ListFlagSnapshots(ctx, req.(*ListFlagSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_ListFlagTranscriptFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlagTranscriptFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).ListFlagTranscriptFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_ListFlagTranscriptFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).ListFlagTranscriptFilters(ctx, req.(*ListFlagTranscriptFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_CreateCorrection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCorrectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).CreateCorrection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_CreateCorrection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).CreateCorrection(ctx, req.(*CreateCorrectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_GetCorrection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCorrectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).GetCorrection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_GetCorrection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).GetCorrection(ctx, req.(*GetCorrectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_DeleteCorrection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCorrectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).DeleteCorrection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_DeleteCorrection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).DeleteCorrection(ctx, req.(*DeleteCorrectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_ListCorrections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCorrectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).ListCorrections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_ListCorrections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).ListCorrections(ctx, req.(*ListCorrectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanalytics_UpdateCorrection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCorrectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanalyticsServer).UpdateCorrection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vanalytics_UpdateCorrection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanalyticsServer).UpdateCorrection(ctx, req.(*UpdateCorrectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Vanalytics_ServiceDesc is the grpc.ServiceDesc for Vanalytics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vanalytics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.vanalytics.Vanalytics",
	HandlerType: (*VanalyticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Audit",
			Handler:    _Vanalytics_Audit_Handler,
		},
		{
			MethodName: "GetRecordingUrl",
			Handler:    _Vanalytics_GetRecordingUrl_Handler,
		},
		{
			MethodName: "ListBillingSpan",
			Handler:    _Vanalytics_ListBillingSpan_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Vanalytics_Search_Handler,
		},
		{
			MethodName: "ListTranscriptGroupNames",
			Handler:    _Vanalytics_ListTranscriptGroupNames_Handler,
		},
		{
			MethodName: "BulkDeleteTranscripts",
			Handler:    _Vanalytics_BulkDeleteTranscripts_Handler,
		},
		{
			MethodName: "BulkRestoreTranscripts",
			Handler:    _Vanalytics_BulkRestoreTranscripts_Handler,
		},
		{
			MethodName: "ListAgentResponseValues",
			Handler:    _Vanalytics_ListAgentResponseValues_Handler,
		},
		{
			MethodName: "GetTranscriptSummary",
			Handler:    _Vanalytics_GetTranscriptSummary_Handler,
		},
		{
			MethodName: "CreateFilter",
			Handler:    _Vanalytics_CreateFilter_Handler,
		},
		{
			MethodName: "ListFilters",
			Handler:    _Vanalytics_ListFilters_Handler,
		},
		{
			MethodName: "UpdateFilter",
			Handler:    _Vanalytics_UpdateFilter_Handler,
		},
		{
			MethodName: "DeleteFilter",
			Handler:    _Vanalytics_DeleteFilter_Handler,
		},
		{
			MethodName: "GetFilter",
			Handler:    _Vanalytics_GetFilter_Handler,
		},
		{
			MethodName: "GetFlag",
			Handler:    _Vanalytics_GetFlag_Handler,
		},
		{
			MethodName: "CreateFlag",
			Handler:    _Vanalytics_CreateFlag_Handler,
		},
		{
			MethodName: "ListFlags",
			Handler:    _Vanalytics_ListFlags_Handler,
		},
		{
			MethodName: "UpdateFlag",
			Handler:    _Vanalytics_UpdateFlag_Handler,
		},
		{
			MethodName: "DeleteFlag",
			Handler:    _Vanalytics_DeleteFlag_Handler,
		},
		{
			MethodName: "CreateFlagReview",
			Handler:    _Vanalytics_CreateFlagReview_Handler,
		},
		{
			MethodName: "BulkCreateFlagReview",
			Handler:    _Vanalytics_BulkCreateFlagReview_Handler,
		},
		{
			MethodName: "ListFlagReviews",
			Handler:    _Vanalytics_ListFlagReviews_Handler,
		},
		{
			MethodName: "CreateFlagTranscript",
			Handler:    _Vanalytics_CreateFlagTranscript_Handler,
		},
		{
			MethodName: "SearchFlagTranscripts",
			Handler:    _Vanalytics_SearchFlagTranscripts_Handler,
		},
		{
			MethodName: "CreateFlagFilter",
			Handler:    _Vanalytics_CreateFlagFilter_Handler,
		},
		{
			MethodName: "ListFlagFilters",
			Handler:    _Vanalytics_ListFlagFilters_Handler,
		},
		{
			MethodName: "DeleteFlagFilter",
			Handler:    _Vanalytics_DeleteFlagFilter_Handler,
		},
		{
			MethodName: "ListFlagSnapshots",
			Handler:    _Vanalytics_ListFlagSnapshots_Handler,
		},
		{
			MethodName: "ListFlagTranscriptFilters",
			Handler:    _Vanalytics_ListFlagTranscriptFilters_Handler,
		},
		{
			MethodName: "CreateCorrection",
			Handler:    _Vanalytics_CreateCorrection_Handler,
		},
		{
			MethodName: "GetCorrection",
			Handler:    _Vanalytics_GetCorrection_Handler,
		},
		{
			MethodName: "DeleteCorrection",
			Handler:    _Vanalytics_DeleteCorrection_Handler,
		},
		{
			MethodName: "ListCorrections",
			Handler:    _Vanalytics_ListCorrections_Handler,
		},
		{
			MethodName: "UpdateCorrection",
			Handler:    _Vanalytics_UpdateCorrection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1alpha1/vanalytics/service.proto",
}
