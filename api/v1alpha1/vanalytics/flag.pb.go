// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: api/v1alpha1/vanalytics/flag.proto

package vanalytics

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CreateFlagRequest is a request for creating a flag.
type CreateFlagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The flag resource to create.
	Flag *Flag `protobuf:"bytes,1,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *CreateFlagRequest) Reset() {
	*x = CreateFlagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_vanalytics_flag_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlagRequest) ProtoMessage() {}

func (x *CreateFlagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_flag_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlagRequest.ProtoReflect.Descriptor instead.
func (*CreateFlagRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_flag_proto_rawDescGZIP(), []int{0}
}

func (x *CreateFlagRequest) GetFlag() *Flag {
	if x != nil {
		return x.Flag
	}
	return nil
}

// ListFlagsRequest is a request for listing flags.
type ListFlagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The number of flags to include in a single response. When not
	// provided this defaults to 100.
	PageSize uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. The order by which flags will be listed. Follows sql order by
	// syntax. When not provided the order defaults to "name".
	// Supported order by includes:
	//   - (name)
	//   - (name desc)
	OrderBy string `protobuf:"bytes,3,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Optional. The next_page_token returned from a previous List request, if any.
	// When provided all other request fields are ignored.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Types that are assignable to Where:
	//
	//	*ListFlagsRequest_FilterSid
	Where isListFlagsRequest_Where `protobuf_oneof:"where"`
	// Optional. Lists flags which have given flag sids.
	FlagSids []int64 `protobuf:"varint,6,rep,packed,name=flag_sids,json=flagSids,proto3" json:"flag_sids,omitempty"`
	// Optional. Field mask which determines which flag reads will be read and
	// included in the response.
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,7,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// Optional. Listed flags must have one of the provided names.
	Names []string `protobuf:"bytes,8,rep,name=names,proto3" json:"names,omitempty"`
	// Optional. Listed flags must have one of the provided priorities.
	Priorities []int32 `protobuf:"varint,9,rep,packed,name=priorities,proto3" json:"priorities,omitempty"`
	// Optional. Filter by flags that require a review. This does not mean
	// that the flag has/hasn't been reviewed. This is whether it requires one.
	MustReview []bool `protobuf:"varint,10,rep,packed,name=must_review,json=mustReview,proto3" json:"must_review,omitempty"`
	// Optional. Filter by flags that send notifications.
	MustNotify []bool `protobuf:"varint,11,rep,packed,name=must_notify,json=mustNotify,proto3" json:"must_notify,omitempty"`
}

func (x *ListFlagsRequest) Reset() {
	*x = ListFlagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_vanalytics_flag_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFlagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlagsRequest) ProtoMessage() {}

func (x *ListFlagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_flag_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlagsRequest.ProtoReflect.Descriptor instead.
func (*ListFlagsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_flag_proto_rawDescGZIP(), []int{1}
}

func (x *ListFlagsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListFlagsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListFlagsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (m *ListFlagsRequest) GetWhere() isListFlagsRequest_Where {
	if m != nil {
		return m.Where
	}
	return nil
}

func (x *ListFlagsRequest) GetFilterSid() int64 {
	if x, ok := x.GetWhere().(*ListFlagsRequest_FilterSid); ok {
		return x.FilterSid
	}
	return 0
}

func (x *ListFlagsRequest) GetFlagSids() []int64 {
	if x != nil {
		return x.FlagSids
	}
	return nil
}

func (x *ListFlagsRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *ListFlagsRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *ListFlagsRequest) GetPriorities() []int32 {
	if x != nil {
		return x.Priorities
	}
	return nil
}

func (x *ListFlagsRequest) GetMustReview() []bool {
	if x != nil {
		return x.MustReview
	}
	return nil
}

func (x *ListFlagsRequest) GetMustNotify() []bool {
	if x != nil {
		return x.MustNotify
	}
	return nil
}

type isListFlagsRequest_Where interface {
	isListFlagsRequest_Where()
}

type ListFlagsRequest_FilterSid struct {
	// Optional. Lists flags which are associated with given filter sid.
	FilterSid int64 `protobuf:"varint,5,opt,name=filter_sid,json=filterSid,proto3,oneof"`
}

func (*ListFlagsRequest_FilterSid) isListFlagsRequest_Where() {}

// ListFlagsResponse is a response for listing flags.
type ListFlagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token to retrieve the next page of flags, or empty if there are no
	// more flags in the list.
	NextPageToken string `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// List of flags which contains at most one request page_size.
	Flags []*Flag `protobuf:"bytes,2,rep,name=flags,proto3" json:"flags,omitempty"`
	// Total number of flags.
	Total uint64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListFlagsResponse) Reset() {
	*x = ListFlagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_vanalytics_flag_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFlagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlagsResponse) ProtoMessage() {}

func (x *ListFlagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_flag_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlagsResponse.ProtoReflect.Descriptor instead.
func (*ListFlagsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_flag_proto_rawDescGZIP(), []int{2}
}

func (x *ListFlagsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListFlagsResponse) GetFlags() []*Flag {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *ListFlagsResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// UpdateFlagRequest is a request for updating a flag.
type UpdateFlagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the flag to be updated.
	FlagSid int64 `protobuf:"varint,1,opt,name=flag_sid,json=flagSid,proto3" json:"flag_sid,omitempty"`
	// The flag resource to update.
	Flag *Flag `protobuf:"bytes,2,opt,name=flag,proto3" json:"flag,omitempty"`
	// Optional. update_mask contains a list of paths to be updated. Possible paths include
	// name, review_group_id, notify_group_id, and priority. If no update_mask
	// is provided it defaults to using all paths.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateFlagRequest) Reset() {
	*x = UpdateFlagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_vanalytics_flag_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlagRequest) ProtoMessage() {}

func (x *UpdateFlagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_flag_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlagRequest.ProtoReflect.Descriptor instead.
func (*UpdateFlagRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_flag_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateFlagRequest) GetFlagSid() int64 {
	if x != nil {
		return x.FlagSid
	}
	return 0
}

func (x *UpdateFlagRequest) GetFlag() *Flag {
	if x != nil {
		return x.Flag
	}
	return nil
}

func (x *UpdateFlagRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// DeleteFlagRequest is a request for deleting a flag.
type DeleteFlagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The unique id of the flag to be deleted.
	FlagSid int64 `protobuf:"varint,1,opt,name=flag_sid,json=flagSid,proto3" json:"flag_sid,omitempty"`
	// Optional. Return the flag that was deleted.
	Return bool `protobuf:"varint,3,opt,name=return,proto3" json:"return,omitempty"`
}

func (x *DeleteFlagRequest) Reset() {
	*x = DeleteFlagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_vanalytics_flag_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFlagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFlagRequest) ProtoMessage() {}

func (x *DeleteFlagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_flag_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFlagRequest.ProtoReflect.Descriptor instead.
func (*DeleteFlagRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_flag_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteFlagRequest) GetFlagSid() int64 {
	if x != nil {
		return x.FlagSid
	}
	return 0
}

func (x *DeleteFlagRequest) GetReturn() bool {
	if x != nil {
		return x.Return
	}
	return false
}

// DeleteFlagResponse is a response for deleting a flag.
type DeleteFlagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The flag that was deleted.
	Flag *Flag `protobuf:"bytes,1,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *DeleteFlagResponse) Reset() {
	*x = DeleteFlagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_vanalytics_flag_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFlagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFlagResponse) ProtoMessage() {}

func (x *DeleteFlagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_flag_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFlagResponse.ProtoReflect.Descriptor instead.
func (*DeleteFlagResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_flag_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteFlagResponse) GetFlag() *Flag {
	if x != nil {
		return x.Flag
	}
	return nil
}

// GetFlagRequest is a request for getting a flag.
type GetFlagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Where:
	//
	//	*GetFlagRequest_Name
	//	*GetFlagRequest_FlagSid
	Where isGetFlagRequest_Where `protobuf_oneof:"where"`
}

func (x *GetFlagRequest) Reset() {
	*x = GetFlagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_vanalytics_flag_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlagRequest) ProtoMessage() {}

func (x *GetFlagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_flag_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlagRequest.ProtoReflect.Descriptor instead.
func (*GetFlagRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_flag_proto_rawDescGZIP(), []int{6}
}

func (m *GetFlagRequest) GetWhere() isGetFlagRequest_Where {
	if m != nil {
		return m.Where
	}
	return nil
}

func (x *GetFlagRequest) GetName() string {
	if x, ok := x.GetWhere().(*GetFlagRequest_Name); ok {
		return x.Name
	}
	return ""
}

func (x *GetFlagRequest) GetFlagSid() int64 {
	if x, ok := x.GetWhere().(*GetFlagRequest_FlagSid); ok {
		return x.FlagSid
	}
	return 0
}

type isGetFlagRequest_Where interface {
	isGetFlagRequest_Where()
}

type GetFlagRequest_Name struct {
	// The name of the flag.
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

type GetFlagRequest_FlagSid struct {
	// The unique id of the flag.
	FlagSid int64 `protobuf:"varint,3,opt,name=flag_sid,json=flagSid,proto3,oneof"`
}

func (*GetFlagRequest_Name) isGetFlagRequest_Where() {}

func (*GetFlagRequest_FlagSid) isGetFlagRequest_Where() {}

// Flag is a resource in the Vanalytics API.
type Flag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The unique id of this flag.
	FlagSid int64 `protobuf:"varint,1,opt,name=flag_sid,json=flagSid,proto3" json:"flag_sid,omitempty"`
	// Required. The name of this flag. Must be non empty and unique across all
	// flags within an organization.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. The org permission group id which users must have in order to
	// to review flagged transcripts. When not provided flagged transcripts will
	// not require review.
	ReviewGroupId string `protobuf:"bytes,4,opt,name=review_group_id,json=reviewGroupId,proto3" json:"review_group_id,omitempty"`
	// Optional. The notify group id for this flag.
	NotifyGroupId string `protobuf:"bytes,5,opt,name=notify_group_id,json=notifyGroupId,proto3" json:"notify_group_id,omitempty"`
	// Optional. The priority of the flag. Defaults to 0.
	Priority int32 `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	// Output only. The version of this flag.
	Version int64 `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
	// Output only. Filters associated with this flag.
	Filters []*Filter `protobuf:"bytes,8,rep,name=filters,proto3" json:"filters,omitempty"`
	// Output only. Determines whether this flag must be reviewed.
	MustReview bool `protobuf:"varint,9,opt,name=must_review,json=mustReview,proto3" json:"must_review,omitempty"`
	// Output only. Determines whether this flag must be notified.
	MustNotify bool `protobuf:"varint,10,opt,name=must_notify,json=mustNotify,proto3" json:"must_notify,omitempty"`
	// Required. Boolean expression of filters which a transcript must match
	// for this flag to be applied.
	BoolExpr *Flag_BoolExpr `protobuf:"bytes,11,opt,name=bool_expr,json=boolExpr,proto3" json:"bool_expr,omitempty"`
	// Optional. Specifies dncl lists to update
	// if a transcript is flagged.
	DnclList []*DnclList `protobuf:"bytes,12,rep,name=dncl_list,json=dnclList,proto3" json:"dncl_list,omitempty"`
}

func (x *Flag) Reset() {
	*x = Flag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_vanalytics_flag_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag) ProtoMessage() {}

func (x *Flag) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_flag_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag.ProtoReflect.Descriptor instead.
func (*Flag) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_flag_proto_rawDescGZIP(), []int{7}
}

func (x *Flag) GetFlagSid() int64 {
	if x != nil {
		return x.FlagSid
	}
	return 0
}

func (x *Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Flag) GetReviewGroupId() string {
	if x != nil {
		return x.ReviewGroupId
	}
	return ""
}

func (x *Flag) GetNotifyGroupId() string {
	if x != nil {
		return x.NotifyGroupId
	}
	return ""
}

func (x *Flag) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Flag) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Flag) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *Flag) GetMustReview() bool {
	if x != nil {
		return x.MustReview
	}
	return false
}

func (x *Flag) GetMustNotify() bool {
	if x != nil {
		return x.MustNotify
	}
	return false
}

func (x *Flag) GetBoolExpr() *Flag_BoolExpr {
	if x != nil {
		return x.BoolExpr
	}
	return nil
}

func (x *Flag) GetDnclList() []*DnclList {
	if x != nil {
		return x.DnclList
	}
	return nil
}

// BoolExpr defines a boolean expression of filters.
type Flag_BoolExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Boolean and operator.
	And []*Flag_BoolExpr `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty"`
	// Optional. Boolean or operator.
	Or []*Flag_BoolExpr `protobuf:"bytes,2,rep,name=or,proto3" json:"or,omitempty"`
	// Optional. Filter to match.
	Filter *Flag_BoolExpr_Filter `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional. Boolean not operator.
	Not *Flag_BoolExpr `protobuf:"bytes,4,opt,name=not,proto3" json:"not,omitempty"`
}

func (x *Flag_BoolExpr) Reset() {
	*x = Flag_BoolExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_vanalytics_flag_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flag_BoolExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag_BoolExpr) ProtoMessage() {}

func (x *Flag_BoolExpr) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_flag_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag_BoolExpr.ProtoReflect.Descriptor instead.
func (*Flag_BoolExpr) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_flag_proto_rawDescGZIP(), []int{7, 0}
}

func (x *Flag_BoolExpr) GetAnd() []*Flag_BoolExpr {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *Flag_BoolExpr) GetOr() []*Flag_BoolExpr {
	if x != nil {
		return x.Or
	}
	return nil
}

func (x *Flag_BoolExpr) GetFilter() *Flag_BoolExpr_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *Flag_BoolExpr) GetNot() *Flag_BoolExpr {
	if x != nil {
		return x.Not
	}
	return nil
}

// Filter defines a filter.
type Flag_BoolExpr_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Filter sid.
	FilterSid int64 `protobuf:"varint,1,opt,name=filter_sid,json=filterSid,proto3" json:"filter_sid,omitempty"`
}

func (x *Flag_BoolExpr_Filter) Reset() {
	*x = Flag_BoolExpr_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_vanalytics_flag_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flag_BoolExpr_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag_BoolExpr_Filter) ProtoMessage() {}

func (x *Flag_BoolExpr_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_flag_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag_BoolExpr_Filter.ProtoReflect.Descriptor instead.
func (*Flag_BoolExpr_Filter) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_flag_proto_rawDescGZIP(), []int{7, 0, 0}
}

func (x *Flag_BoolExpr_Filter) GetFilterSid() int64 {
	if x != nil {
		return x.FilterSid
	}
	return 0
}

var File_api_v1alpha1_vanalytics_flag_proto protoreflect.FileDescriptor

var file_api_v1alpha1_vanalytics_flag_proto_rawDesc = []byte{
	0x0a, 0x22, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x76,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x27, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x76, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x64, 0x6e, 0x63, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0xe1, 0x02, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x53, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x69, 0x64, 0x73,
	0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x75, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x42, 0x07, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x33, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0x9e, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6c, 0x61,
	0x67, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x6c, 0x61,
	0x67, 0x53, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x6c, 0x61,
	0x67, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x22, 0x46, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6c, 0x61,
	0x67, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x6c, 0x61,
	0x67, 0x53, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x22, 0x47, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52,
	0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x4c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x08, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x22, 0xe6, 0x05, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x19, 0x0a, 0x08,
	0x66, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x66, 0x6c, 0x61, 0x67, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x39, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x75, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x6d, 0x75, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x6d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x43,
	0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x45,
	0x78, 0x70, 0x72, 0x12, 0x3e, 0x0a, 0x09, 0x64, 0x6e, 0x63, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x44, 0x6e, 0x63, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x64, 0x6e, 0x63, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x1a, 0xa6, 0x02, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x78, 0x70, 0x72,
	0x12, 0x38, 0x0a, 0x03, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x45, 0x78, 0x70, 0x72, 0x52, 0x03, 0x61, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x02, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x46, 0x6c, 0x61, 0x67, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x52, 0x02,
	0x6f, 0x72, 0x12, 0x45, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x6c, 0x61,
	0x67, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x03, 0x6e, 0x6f, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x46, 0x6c, 0x61, 0x67, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x52, 0x03,
	0x6e, 0x6f, 0x74, 0x1a, 0x27, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x64, 0x42, 0xda, 0x01, 0x0a,
	0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x42, 0x09, 0x46, 0x6c,
	0x61, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61,
	0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0xa2, 0x02, 0x03,
	0x41, 0x56, 0x56, 0xaa, 0x02, 0x17, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x56, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0xca, 0x02, 0x17,
	0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x56, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0xe2, 0x02, 0x23, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x56, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19,
	0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3a, 0x3a, 0x56,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_api_v1alpha1_vanalytics_flag_proto_rawDescOnce sync.Once
	file_api_v1alpha1_vanalytics_flag_proto_rawDescData = file_api_v1alpha1_vanalytics_flag_proto_rawDesc
)

func file_api_v1alpha1_vanalytics_flag_proto_rawDescGZIP() []byte {
	file_api_v1alpha1_vanalytics_flag_proto_rawDescOnce.Do(func() {
		file_api_v1alpha1_vanalytics_flag_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1alpha1_vanalytics_flag_proto_rawDescData)
	})
	return file_api_v1alpha1_vanalytics_flag_proto_rawDescData
}

var file_api_v1alpha1_vanalytics_flag_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_api_v1alpha1_vanalytics_flag_proto_goTypes = []interface{}{
	(*CreateFlagRequest)(nil),     // 0: api.v1alpha1.vanalytics.CreateFlagRequest
	(*ListFlagsRequest)(nil),      // 1: api.v1alpha1.vanalytics.ListFlagsRequest
	(*ListFlagsResponse)(nil),     // 2: api.v1alpha1.vanalytics.ListFlagsResponse
	(*UpdateFlagRequest)(nil),     // 3: api.v1alpha1.vanalytics.UpdateFlagRequest
	(*DeleteFlagRequest)(nil),     // 4: api.v1alpha1.vanalytics.DeleteFlagRequest
	(*DeleteFlagResponse)(nil),    // 5: api.v1alpha1.vanalytics.DeleteFlagResponse
	(*GetFlagRequest)(nil),        // 6: api.v1alpha1.vanalytics.GetFlagRequest
	(*Flag)(nil),                  // 7: api.v1alpha1.vanalytics.Flag
	(*Flag_BoolExpr)(nil),         // 8: api.v1alpha1.vanalytics.Flag.BoolExpr
	(*Flag_BoolExpr_Filter)(nil),  // 9: api.v1alpha1.vanalytics.Flag.BoolExpr.Filter
	(*fieldmaskpb.FieldMask)(nil), // 10: google.protobuf.FieldMask
	(*Filter)(nil),                // 11: api.v1alpha1.vanalytics.Filter
	(*DnclList)(nil),              // 12: api.v1alpha1.vanalytics.DnclList
}
var file_api_v1alpha1_vanalytics_flag_proto_depIdxs = []int32{
	7,  // 0: api.v1alpha1.vanalytics.CreateFlagRequest.flag:type_name -> api.v1alpha1.vanalytics.Flag
	10, // 1: api.v1alpha1.vanalytics.ListFlagsRequest.read_mask:type_name -> google.protobuf.FieldMask
	7,  // 2: api.v1alpha1.vanalytics.ListFlagsResponse.flags:type_name -> api.v1alpha1.vanalytics.Flag
	7,  // 3: api.v1alpha1.vanalytics.UpdateFlagRequest.flag:type_name -> api.v1alpha1.vanalytics.Flag
	10, // 4: api.v1alpha1.vanalytics.UpdateFlagRequest.update_mask:type_name -> google.protobuf.FieldMask
	7,  // 5: api.v1alpha1.vanalytics.DeleteFlagResponse.flag:type_name -> api.v1alpha1.vanalytics.Flag
	11, // 6: api.v1alpha1.vanalytics.Flag.filters:type_name -> api.v1alpha1.vanalytics.Filter
	8,  // 7: api.v1alpha1.vanalytics.Flag.bool_expr:type_name -> api.v1alpha1.vanalytics.Flag.BoolExpr
	12, // 8: api.v1alpha1.vanalytics.Flag.dncl_list:type_name -> api.v1alpha1.vanalytics.DnclList
	8,  // 9: api.v1alpha1.vanalytics.Flag.BoolExpr.and:type_name -> api.v1alpha1.vanalytics.Flag.BoolExpr
	8,  // 10: api.v1alpha1.vanalytics.Flag.BoolExpr.or:type_name -> api.v1alpha1.vanalytics.Flag.BoolExpr
	9,  // 11: api.v1alpha1.vanalytics.Flag.BoolExpr.filter:type_name -> api.v1alpha1.vanalytics.Flag.BoolExpr.Filter
	8,  // 12: api.v1alpha1.vanalytics.Flag.BoolExpr.not:type_name -> api.v1alpha1.vanalytics.Flag.BoolExpr
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_api_v1alpha1_vanalytics_flag_proto_init() }
func file_api_v1alpha1_vanalytics_flag_proto_init() {
	if File_api_v1alpha1_vanalytics_flag_proto != nil {
		return
	}
	file_api_v1alpha1_vanalytics_dncl_list_proto_init()
	file_api_v1alpha1_vanalytics_filter_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_v1alpha1_vanalytics_flag_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_vanalytics_flag_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFlagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_vanalytics_flag_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFlagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_vanalytics_flag_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_vanalytics_flag_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFlagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_vanalytics_flag_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFlagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_vanalytics_flag_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_vanalytics_flag_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_vanalytics_flag_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flag_BoolExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_vanalytics_flag_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flag_BoolExpr_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v1alpha1_vanalytics_flag_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ListFlagsRequest_FilterSid)(nil),
	}
	file_api_v1alpha1_vanalytics_flag_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*GetFlagRequest_Name)(nil),
		(*GetFlagRequest_FlagSid)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1alpha1_vanalytics_flag_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_v1alpha1_vanalytics_flag_proto_goTypes,
		DependencyIndexes: file_api_v1alpha1_vanalytics_flag_proto_depIdxs,
		MessageInfos:      file_api_v1alpha1_vanalytics_flag_proto_msgTypes,
	}.Build()
	File_api_v1alpha1_vanalytics_flag_proto = out.File
	file_api_v1alpha1_vanalytics_flag_proto_rawDesc = nil
	file_api_v1alpha1_vanalytics_flag_proto_goTypes = nil
	file_api_v1alpha1_vanalytics_flag_proto_depIdxs = nil
}
