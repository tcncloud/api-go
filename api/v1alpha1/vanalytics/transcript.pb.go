// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: api/v1alpha1/vanalytics/transcript.proto

package vanalytics

import (
	commons "github.com/tcncloud/api-go/api/commons"
	aclpb "github.com/tcncloud/api-go/api/v1alpha1/vanalytics/aclpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TranscriptReviewStatus is an enumeration of a flagged transcripts review
// statuses. Todo means there are flags that need review and have not been
// reviewed. Done means every flag that needs review has been reviewed. None
// means zero flags require review.
type TranscriptReviewStatus int32

const (
	TranscriptReviewStatus_TRANSCRIPT_REVIEW_STATUS_TODO TranscriptReviewStatus = 0
	TranscriptReviewStatus_TRANSCRIPT_REVIEW_STATUS_DONE TranscriptReviewStatus = 1
	TranscriptReviewStatus_TRANSCRIPT_REVIEW_STATUS_NONE TranscriptReviewStatus = 2
)

// Enum value maps for TranscriptReviewStatus.
var (
	TranscriptReviewStatus_name = map[int32]string{
		0: "TRANSCRIPT_REVIEW_STATUS_TODO",
		1: "TRANSCRIPT_REVIEW_STATUS_DONE",
		2: "TRANSCRIPT_REVIEW_STATUS_NONE",
	}
	TranscriptReviewStatus_value = map[string]int32{
		"TRANSCRIPT_REVIEW_STATUS_TODO": 0,
		"TRANSCRIPT_REVIEW_STATUS_DONE": 1,
		"TRANSCRIPT_REVIEW_STATUS_NONE": 2,
	}
)

func (x TranscriptReviewStatus) Enum() *TranscriptReviewStatus {
	p := new(TranscriptReviewStatus)
	*p = x
	return p
}

func (x TranscriptReviewStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TranscriptReviewStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1alpha1_vanalytics_transcript_proto_enumTypes[0].Descriptor()
}

func (TranscriptReviewStatus) Type() protoreflect.EnumType {
	return &file_api_v1alpha1_vanalytics_transcript_proto_enumTypes[0]
}

func (x TranscriptReviewStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TranscriptReviewStatus.Descriptor instead.
func (TranscriptReviewStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{0}
}

// BulkDeleteTranscriptsRequest defines the bulk delete transcripts request.
type BulkDeleteTranscriptsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. A query which determines which transcripts to delete.
	Query         *SearchRequest `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BulkDeleteTranscriptsRequest) Reset() {
	*x = BulkDeleteTranscriptsRequest{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BulkDeleteTranscriptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkDeleteTranscriptsRequest) ProtoMessage() {}

func (x *BulkDeleteTranscriptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkDeleteTranscriptsRequest.ProtoReflect.Descriptor instead.
func (*BulkDeleteTranscriptsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{0}
}

func (x *BulkDeleteTranscriptsRequest) GetQuery() *SearchRequest {
	if x != nil {
		return x.Query
	}
	return nil
}

// BulkDeleteTranscriptsResponse defines the bulk delete transcripts response.
type BulkDeleteTranscriptsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of transcripts deleted.
	Total         uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BulkDeleteTranscriptsResponse) Reset() {
	*x = BulkDeleteTranscriptsResponse{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BulkDeleteTranscriptsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkDeleteTranscriptsResponse) ProtoMessage() {}

func (x *BulkDeleteTranscriptsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkDeleteTranscriptsResponse.ProtoReflect.Descriptor instead.
func (*BulkDeleteTranscriptsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{1}
}

func (x *BulkDeleteTranscriptsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// BulkRestoreTranscriptsRequest defines the bulk restore transcripts request.
type BulkRestoreTranscriptsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. A query which determines which transcripts to restore.
	Query         *SearchRequest `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BulkRestoreTranscriptsRequest) Reset() {
	*x = BulkRestoreTranscriptsRequest{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BulkRestoreTranscriptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkRestoreTranscriptsRequest) ProtoMessage() {}

func (x *BulkRestoreTranscriptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkRestoreTranscriptsRequest.ProtoReflect.Descriptor instead.
func (*BulkRestoreTranscriptsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{2}
}

func (x *BulkRestoreTranscriptsRequest) GetQuery() *SearchRequest {
	if x != nil {
		return x.Query
	}
	return nil
}

// BulkRestoreTranscriptsResponse defines the bulk restore transcripts response.
type BulkRestoreTranscriptsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of transcripts restored.
	Total         uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BulkRestoreTranscriptsResponse) Reset() {
	*x = BulkRestoreTranscriptsResponse{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BulkRestoreTranscriptsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkRestoreTranscriptsResponse) ProtoMessage() {}

func (x *BulkRestoreTranscriptsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkRestoreTranscriptsResponse.ProtoReflect.Descriptor instead.
func (*BulkRestoreTranscriptsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{3}
}

func (x *BulkRestoreTranscriptsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SearchRequest struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Silence *SearchRequest_Silence `protobuf:"bytes,2,opt,name=silence,proto3" json:"silence,omitempty"`
	// talk time in milliseconds
	TalkTime *Uint32Expr `protobuf:"bytes,3,opt,name=talk_time,json=talkTime,proto3" json:"talk_time,omitempty"`
	// agent defines query constraints on agent specific fields
	Agent *SearchRequest_Agent `protobuf:"bytes,4,opt,name=agent,proto3" json:"agent,omitempty"`
	// number of hits included in response
	PageSize   uint32                  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Sort       *Sort                   `protobuf:"bytes,6,opt,name=sort,proto3" json:"sort,omitempty"`
	CreateTime *TimestampExpr          `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	TalkOver   *SearchRequest_TalkOver `protobuf:"bytes,8,opt,name=talk_over,json=talkOver,proto3" json:"talk_over,omitempty"`
	Terms      *SearchRequest_Terms    `protobuf:"bytes,9,opt,name=terms,proto3" json:"terms,omitempty"`
	// channel when set requires search terms to be matched on a specific channel
	Channel uint32 `protobuf:"varint,10,opt,name=channel,proto3" json:"channel,omitempty"`
	// phrase is words to search for that are close together
	Phrase *SearchRequest_Phrase `protobuf:"bytes,11,opt,name=phrase,proto3" json:"phrase,omitempty"`
	// Optional. transcript_mask contains a list of transcript fields to be returned.
	// If no transcript_mask is provided it defaults to returning all fields.
	TranscriptMask *fieldmaskpb.FieldMask `protobuf:"bytes,12,opt,name=transcript_mask,json=transcriptMask,proto3" json:"transcript_mask,omitempty"`
	// Optional. When not zero filter on transcript_sid.
	TranscriptSid int64 `protobuf:"varint,13,opt,name=transcript_sid,json=transcriptSid,proto3" json:"transcript_sid,omitempty"`
	// Optional. Phone number to search for.
	PhoneNumber string `protobuf:"bytes,14,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// Optional. Caller id to search for.
	CallerId string `protobuf:"bytes,15,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	// Optional. When not empty filter on transcript_sids.
	TranscriptSids []int64 `protobuf:"varint,16,rep,packed,name=transcript_sids,json=transcriptSids,proto3" json:"transcript_sids,omitempty"`
	// Optional. Call start time to filter on.
	CallStartTime *TimestampExpr `protobuf:"bytes,17,opt,name=call_start_time,json=callStartTime,proto3" json:"call_start_time,omitempty"`
	// Optional. Call types to filter on. Possible call types are INBOUND, OUTBOUND,
	// PREVIEW, and MANUAL.
	CallTypes []commons.CallType_Enum `protobuf:"varint,18,rep,packed,name=call_types,json=callTypes,proto3,enum=api.commons.CallType_Enum" json:"call_types,omitempty"`
	// Optional. Call sids to filter on.
	CallSids []int64 `protobuf:"varint,19,rep,packed,name=call_sids,json=callSids,proto3" json:"call_sids,omitempty"`
	// Optional. Hunt group sids to filter on.
	HuntGroupSids []int64 `protobuf:"varint,20,rep,packed,name=hunt_group_sids,json=huntGroupSids,proto3" json:"hunt_group_sids,omitempty"`
	// Optional. Group names to filter on.
	GroupNames []string `protobuf:"bytes,21,rep,name=group_names,json=groupNames,proto3" json:"group_names,omitempty"`
	// Optional. Agent call log to filter on.
	AgentCallLog *AgentCallLogQuery `protobuf:"bytes,22,opt,name=agent_call_log,json=agentCallLog,proto3" json:"agent_call_log,omitempty"`
	// Optional. Query on transcript fields.
	Where *SearchQuery `protobuf:"bytes,23,opt,name=where,proto3" json:"where,omitempty"`
	// Optional. Time frame to filter on in milliseconds. For example, this can be used to
	// filter for a term or phrase that is within the first 500 milliseconds of a transcript.
	TimeFrame     *Uint32Range `protobuf:"bytes,24,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{4}
}

func (x *SearchRequest) GetSilence() *SearchRequest_Silence {
	if x != nil {
		return x.Silence
	}
	return nil
}

func (x *SearchRequest) GetTalkTime() *Uint32Expr {
	if x != nil {
		return x.TalkTime
	}
	return nil
}

func (x *SearchRequest) GetAgent() *SearchRequest_Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *SearchRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchRequest) GetSort() *Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *SearchRequest) GetCreateTime() *TimestampExpr {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *SearchRequest) GetTalkOver() *SearchRequest_TalkOver {
	if x != nil {
		return x.TalkOver
	}
	return nil
}

func (x *SearchRequest) GetTerms() *SearchRequest_Terms {
	if x != nil {
		return x.Terms
	}
	return nil
}

func (x *SearchRequest) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *SearchRequest) GetPhrase() *SearchRequest_Phrase {
	if x != nil {
		return x.Phrase
	}
	return nil
}

func (x *SearchRequest) GetTranscriptMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.TranscriptMask
	}
	return nil
}

func (x *SearchRequest) GetTranscriptSid() int64 {
	if x != nil {
		return x.TranscriptSid
	}
	return 0
}

func (x *SearchRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SearchRequest) GetCallerId() string {
	if x != nil {
		return x.CallerId
	}
	return ""
}

func (x *SearchRequest) GetTranscriptSids() []int64 {
	if x != nil {
		return x.TranscriptSids
	}
	return nil
}

func (x *SearchRequest) GetCallStartTime() *TimestampExpr {
	if x != nil {
		return x.CallStartTime
	}
	return nil
}

func (x *SearchRequest) GetCallTypes() []commons.CallType_Enum {
	if x != nil {
		return x.CallTypes
	}
	return nil
}

func (x *SearchRequest) GetCallSids() []int64 {
	if x != nil {
		return x.CallSids
	}
	return nil
}

func (x *SearchRequest) GetHuntGroupSids() []int64 {
	if x != nil {
		return x.HuntGroupSids
	}
	return nil
}

func (x *SearchRequest) GetGroupNames() []string {
	if x != nil {
		return x.GroupNames
	}
	return nil
}

func (x *SearchRequest) GetAgentCallLog() *AgentCallLogQuery {
	if x != nil {
		return x.AgentCallLog
	}
	return nil
}

func (x *SearchRequest) GetWhere() *SearchQuery {
	if x != nil {
		return x.Where
	}
	return nil
}

func (x *SearchRequest) GetTimeFrame() *Uint32Range {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

// SearchQuery defines a query on transcript fields.
type SearchQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Queries transcript sid.
	TranscriptSid *SearchQuery_TranscriptSid `protobuf:"bytes,1,opt,name=transcript_sid,json=transcriptSid,proto3" json:"transcript_sid,omitempty"`
	// Optional. Queries flag summary.
	FlagSummary *SearchQuery_FlagSummary `protobuf:"bytes,2,opt,name=flag_summary,json=flagSummary,proto3" json:"flag_summary,omitempty"`
	// Optional. Groups query conditions with logical or.
	Or []*SearchQuery `protobuf:"bytes,3,rep,name=or,proto3" json:"or,omitempty"`
	// Optional. Groups query conditions with logical and.
	And []*SearchQuery `protobuf:"bytes,4,rep,name=and,proto3" json:"and,omitempty"`
	// Optional. Queries on audio time.
	AudioTime *SearchQuery_AudioTime `protobuf:"bytes,5,opt,name=audio_time,json=audioTime,proto3" json:"audio_time,omitempty"`
	// Optional. By default all transcripts (including deleted) will be shown.
	DeleteTime *SearchQuery_DeleteTime `protobuf:"bytes,6,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Optional. Queries for what does not match the query.
	Not     *SearchQuery         `protobuf:"bytes,7,opt,name=not,proto3" json:"not,omitempty"`
	Results *SearchQuery_Results `protobuf:"bytes,8,opt,name=results,proto3" json:"results,omitempty"`
	// Optional. Queries on agent responses.
	AgentResponse *SearchQuery_AgentResponse `protobuf:"bytes,9,opt,name=agent_response,json=agentResponse,proto3" json:"agent_response,omitempty"`
	// Optional. Queries on agent call log.
	AgentCallLog *SearchQuery_AgentCallLog `protobuf:"bytes,10,opt,name=agent_call_log,json=agentCallLog,proto3" json:"agent_call_log,omitempty"`
	// Optional. Queries on phone.
	Phone         *SearchQuery_Phone `protobuf:"bytes,11,opt,name=phone,proto3" json:"phone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery) Reset() {
	*x = SearchQuery{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery) ProtoMessage() {}

func (x *SearchQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery.ProtoReflect.Descriptor instead.
func (*SearchQuery) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5}
}

func (x *SearchQuery) GetTranscriptSid() *SearchQuery_TranscriptSid {
	if x != nil {
		return x.TranscriptSid
	}
	return nil
}

func (x *SearchQuery) GetFlagSummary() *SearchQuery_FlagSummary {
	if x != nil {
		return x.FlagSummary
	}
	return nil
}

func (x *SearchQuery) GetOr() []*SearchQuery {
	if x != nil {
		return x.Or
	}
	return nil
}

func (x *SearchQuery) GetAnd() []*SearchQuery {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *SearchQuery) GetAudioTime() *SearchQuery_AudioTime {
	if x != nil {
		return x.AudioTime
	}
	return nil
}

func (x *SearchQuery) GetDeleteTime() *SearchQuery_DeleteTime {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *SearchQuery) GetNot() *SearchQuery {
	if x != nil {
		return x.Not
	}
	return nil
}

func (x *SearchQuery) GetResults() *SearchQuery_Results {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchQuery) GetAgentResponse() *SearchQuery_AgentResponse {
	if x != nil {
		return x.AgentResponse
	}
	return nil
}

func (x *SearchQuery) GetAgentCallLog() *SearchQuery_AgentCallLog {
	if x != nil {
		return x.AgentCallLog
	}
	return nil
}

func (x *SearchQuery) GetPhone() *SearchQuery_Phone {
	if x != nil {
		return x.Phone
	}
	return nil
}

type SearchResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// total number of hits in query
	Total uint64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// one page of hits
	Hits []*SearchResponse_Hit `protobuf:"bytes,4,rep,name=hits,proto3" json:"hits,omitempty"`
	// Sort is the original sort but also includes after values of last search
	// hit. This is intended to be used on a subsequent search request to get the
	// next page of search hits.
	Sort          *Sort `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{6}
}

func (x *SearchResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchResponse) GetHits() []*SearchResponse_Hit {
	if x != nil {
		return x.Hits
	}
	return nil
}

func (x *SearchResponse) GetSort() *Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

// AgentCallLogQuery is a query for the agent call log.
type AgentCallLogQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// call skills initial will query the initial call skills.
	CallSkillsInitial *CallSkillsInitialQuery `protobuf:"bytes,1,opt,name=call_skills_initial,json=callSkillsInitial,proto3" json:"call_skills_initial,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AgentCallLogQuery) Reset() {
	*x = AgentCallLogQuery{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentCallLogQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentCallLogQuery) ProtoMessage() {}

func (x *AgentCallLogQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentCallLogQuery.ProtoReflect.Descriptor instead.
func (*AgentCallLogQuery) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{7}
}

func (x *AgentCallLogQuery) GetCallSkillsInitial() *CallSkillsInitialQuery {
	if x != nil {
		return x.CallSkillsInitial
	}
	return nil
}

// CallSkillsInitialQuery is a query for the initial call skills.
type CallSkillsInitialQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Needed initial call skills to filter on.
	Need []*VanaTermsQuery `protobuf:"bytes,1,rep,name=need,proto3" json:"need,omitempty"`
	// Optional. Wanted initial call skills to filter on.
	Want          []*VanaTermsQuery `protobuf:"bytes,2,rep,name=want,proto3" json:"want,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CallSkillsInitialQuery) Reset() {
	*x = CallSkillsInitialQuery{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallSkillsInitialQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallSkillsInitialQuery) ProtoMessage() {}

func (x *CallSkillsInitialQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallSkillsInitialQuery.ProtoReflect.Descriptor instead.
func (*CallSkillsInitialQuery) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{8}
}

func (x *CallSkillsInitialQuery) GetNeed() []*VanaTermsQuery {
	if x != nil {
		return x.Need
	}
	return nil
}

func (x *CallSkillsInitialQuery) GetWant() []*VanaTermsQuery {
	if x != nil {
		return x.Want
	}
	return nil
}

// VanaTermsQuery is a query for none, all, or any terms.
type VanaTermsQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The terms to be filtered on.
	Terms []string `protobuf:"bytes,1,rep,name=terms,proto3" json:"terms,omitempty"`
	// Optional. If true then filters out where terms match.
	Lacks bool `protobuf:"varint,2,opt,name=lacks,proto3" json:"lacks,omitempty"`
	// Optional. If true then all terms must match.
	All           bool `protobuf:"varint,3,opt,name=all,proto3" json:"all,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VanaTermsQuery) Reset() {
	*x = VanaTermsQuery{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VanaTermsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VanaTermsQuery) ProtoMessage() {}

func (x *VanaTermsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VanaTermsQuery.ProtoReflect.Descriptor instead.
func (*VanaTermsQuery) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{9}
}

func (x *VanaTermsQuery) GetTerms() []string {
	if x != nil {
		return x.Terms
	}
	return nil
}

func (x *VanaTermsQuery) GetLacks() bool {
	if x != nil {
		return x.Lacks
	}
	return false
}

func (x *VanaTermsQuery) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type Sort struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fields to sort by with names in json notation. i.e.
	// audio_time, silence.duration.total, result.text
	Fields []*Sort_Field `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// After values define the starting offset of response hits. i.e.
	// given sort {"fields":[{"name":"silence.duration.total"}],"after":["3200"]}
	// then the search response is sorted by ascending silence duration where
	// silence duration total is greater than 3200. The after values are used
	// to scroll through the paginated search hits.
	After         []string `protobuf:"bytes,2,rep,name=after,proto3" json:"after,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sort) Reset() {
	*x = Sort{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sort) ProtoMessage() {}

func (x *Sort) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sort.ProtoReflect.Descriptor instead.
func (*Sort) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{10}
}

func (x *Sort) GetFields() []*Sort_Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Sort) GetAfter() []string {
	if x != nil {
		return x.After
	}
	return nil
}

// ListTranscriptGroupNamesRequest is a request for listing group names.
type ListTranscriptGroupNamesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTranscriptGroupNamesRequest) Reset() {
	*x = ListTranscriptGroupNamesRequest{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTranscriptGroupNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTranscriptGroupNamesRequest) ProtoMessage() {}

func (x *ListTranscriptGroupNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTranscriptGroupNamesRequest.ProtoReflect.Descriptor instead.
func (*ListTranscriptGroupNamesRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{11}
}

// ListTranscriptGroupNamesResponse is a response for listing group names.
type ListTranscriptGroupNamesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Group names are the transcript group names.
	GroupNames    []*TranscriptGroupName `protobuf:"bytes,1,rep,name=group_names,json=groupNames,proto3" json:"group_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTranscriptGroupNamesResponse) Reset() {
	*x = ListTranscriptGroupNamesResponse{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTranscriptGroupNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTranscriptGroupNamesResponse) ProtoMessage() {}

func (x *ListTranscriptGroupNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTranscriptGroupNamesResponse.ProtoReflect.Descriptor instead.
func (*ListTranscriptGroupNamesResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{12}
}

func (x *ListTranscriptGroupNamesResponse) GetGroupNames() []*TranscriptGroupName {
	if x != nil {
		return x.GroupNames
	}
	return nil
}

// TranscriptGroupName is the transcript group name.
type TranscriptGroupName struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// value is a group name value.
	Value         string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TranscriptGroupName) Reset() {
	*x = TranscriptGroupName{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TranscriptGroupName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptGroupName) ProtoMessage() {}

func (x *TranscriptGroupName) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptGroupName.ProtoReflect.Descriptor instead.
func (*TranscriptGroupName) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{13}
}

func (x *TranscriptGroupName) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// ListAgentResponseValuesRequest is a request for listing agent reponse values.
type ListAgentResponseValuesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAgentResponseValuesRequest) Reset() {
	*x = ListAgentResponseValuesRequest{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentResponseValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentResponseValuesRequest) ProtoMessage() {}

func (x *ListAgentResponseValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentResponseValuesRequest.ProtoReflect.Descriptor instead.
func (*ListAgentResponseValuesRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{14}
}

func (x *ListAgentResponseValuesRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// ListAgentResponseValuesResponse is a response for listing agent response values.
type ListAgentResponseValuesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Values are the transcript agent response values.
	Values        []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAgentResponseValuesResponse) Reset() {
	*x = ListAgentResponseValuesResponse{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentResponseValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentResponseValuesResponse) ProtoMessage() {}

func (x *ListAgentResponseValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentResponseValuesResponse.ProtoReflect.Descriptor instead.
func (*ListAgentResponseValuesResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{15}
}

func (x *ListAgentResponseValuesResponse) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type Transcript struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TranscriptSid int64                  `protobuf:"varint,1,opt,name=transcript_sid,json=transcriptSid,proto3" json:"transcript_sid,omitempty"`
	CallSid       int64                  `protobuf:"varint,3,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	CallType      commons.CallType_Enum  `protobuf:"varint,4,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
	Results       []*Result              `protobuf:"bytes,5,rep,name=results,proto3" json:"results,omitempty"`
	Silence       *Silence               `protobuf:"bytes,6,opt,name=silence,proto3" json:"silence,omitempty"`
	// talk time in milliseconds
	TalkTime      uint32                 `protobuf:"varint,7,opt,name=talk_time,json=talkTime,proto3" json:"talk_time,omitempty"`
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	CallStartTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=call_start_time,json=callStartTime,proto3" json:"call_start_time,omitempty"`
	TalkOver      *TalkOver              `protobuf:"bytes,11,opt,name=talk_over,json=talkOver,proto3" json:"talk_over,omitempty"`
	CallerId      string                 `protobuf:"bytes,12,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	PhoneNumber   string                 `protobuf:"bytes,13,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// audio time in milliseconds
	AudioTime    uint32              `protobuf:"varint,14,opt,name=audio_time,json=audioTime,proto3" json:"audio_time,omitempty"`
	AudioBytes   int64               `protobuf:"varint,15,opt,name=audio_bytes,json=audioBytes,proto3" json:"audio_bytes,omitempty"`
	GroupName    string              `protobuf:"bytes,17,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	AgentCallLog *aclpb.AgentCallLog `protobuf:"bytes,18,opt,name=agent_call_log,json=agentCallLog,proto3" json:"agent_call_log,omitempty"`
	FlagSummary  *FlagSummary        `protobuf:"bytes,19,opt,name=flag_summary,json=flagSummary,proto3" json:"flag_summary,omitempty"`
	// delete time is the time the transcript was marked as deleted.
	DeleteTime    *timestamppb.Timestamp    `protobuf:"bytes,20,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	NumberFormat  string                    `protobuf:"bytes,21,opt,name=number_format,json=numberFormat,proto3" json:"number_format,omitempty"`
	AgentResponse map[string]*AgentResponse `protobuf:"bytes,22,rep,name=agent_response,json=agentResponse,proto3" json:"agent_response,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Summary       *TranscriptSummary        `protobuf:"bytes,24,opt,name=summary,proto3" json:"summary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Transcript) Reset() {
	*x = Transcript{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transcript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transcript) ProtoMessage() {}

func (x *Transcript) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transcript.ProtoReflect.Descriptor instead.
func (*Transcript) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{16}
}

func (x *Transcript) GetTranscriptSid() int64 {
	if x != nil {
		return x.TranscriptSid
	}
	return 0
}

func (x *Transcript) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *Transcript) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

func (x *Transcript) GetResults() []*Result {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *Transcript) GetSilence() *Silence {
	if x != nil {
		return x.Silence
	}
	return nil
}

func (x *Transcript) GetTalkTime() uint32 {
	if x != nil {
		return x.TalkTime
	}
	return 0
}

func (x *Transcript) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Transcript) GetCallStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CallStartTime
	}
	return nil
}

func (x *Transcript) GetTalkOver() *TalkOver {
	if x != nil {
		return x.TalkOver
	}
	return nil
}

func (x *Transcript) GetCallerId() string {
	if x != nil {
		return x.CallerId
	}
	return ""
}

func (x *Transcript) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *Transcript) GetAudioTime() uint32 {
	if x != nil {
		return x.AudioTime
	}
	return 0
}

func (x *Transcript) GetAudioBytes() int64 {
	if x != nil {
		return x.AudioBytes
	}
	return 0
}

func (x *Transcript) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *Transcript) GetAgentCallLog() *aclpb.AgentCallLog {
	if x != nil {
		return x.AgentCallLog
	}
	return nil
}

func (x *Transcript) GetFlagSummary() *FlagSummary {
	if x != nil {
		return x.FlagSummary
	}
	return nil
}

func (x *Transcript) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *Transcript) GetNumberFormat() string {
	if x != nil {
		return x.NumberFormat
	}
	return ""
}

func (x *Transcript) GetAgentResponse() map[string]*AgentResponse {
	if x != nil {
		return x.AgentResponse
	}
	return nil
}

func (x *Transcript) GetSummary() *TranscriptSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type Result struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Channel        int32                  `protobuf:"varint,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Segments       []*Segment             `protobuf:"bytes,2,rep,name=segments,proto3" json:"segments,omitempty"`
	AgentFirstName string                 `protobuf:"bytes,5,opt,name=agent_first_name,json=agentFirstName,proto3" json:"agent_first_name,omitempty"`
	AgentLastName  string                 `protobuf:"bytes,6,opt,name=agent_last_name,json=agentLastName,proto3" json:"agent_last_name,omitempty"`
	AgentUserName  string                 `protobuf:"bytes,7,opt,name=agent_user_name,json=agentUserName,proto3" json:"agent_user_name,omitempty"`
	BeginTime      uint32                 `protobuf:"varint,8,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	Duration       uint32                 `protobuf:"varint,9,opt,name=duration,proto3" json:"duration,omitempty"`
	Text           string                 `protobuf:"bytes,10,opt,name=text,proto3" json:"text,omitempty"`
	HuntGroupSid   int64                  `protobuf:"varint,11,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	Sentiment      *Sentiment             `protobuf:"bytes,12,opt,name=sentiment,proto3" json:"sentiment,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Result) Reset() {
	*x = Result{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{17}
}

func (x *Result) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *Result) GetSegments() []*Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *Result) GetAgentFirstName() string {
	if x != nil {
		return x.AgentFirstName
	}
	return ""
}

func (x *Result) GetAgentLastName() string {
	if x != nil {
		return x.AgentLastName
	}
	return ""
}

func (x *Result) GetAgentUserName() string {
	if x != nil {
		return x.AgentUserName
	}
	return ""
}

func (x *Result) GetBeginTime() uint32 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *Result) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Result) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Result) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *Result) GetSentiment() *Sentiment {
	if x != nil {
		return x.Sentiment
	}
	return nil
}

// The sentiment of a thread.
type Sentiment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Overall sentiment estimate for the thread.
	Overall *Sentiment_Estimate `protobuf:"bytes,1,opt,name=overall,proto3" json:"overall,omitempty"`
	// Worst dominating tone across thread samples.
	Worst commons.TranscriptSentimentTone `protobuf:"varint,2,opt,name=worst,proto3,enum=api.commons.TranscriptSentimentTone" json:"worst,omitempty"`
	// Dominant tone across thread samples.
	Dominant commons.TranscriptSentimentTone `protobuf:"varint,3,opt,name=dominant,proto3,enum=api.commons.TranscriptSentimentTone" json:"dominant,omitempty"`
	// Last dominating tone of the thread samples.
	Last commons.TranscriptSentimentTone `protobuf:"varint,4,opt,name=last,proto3,enum=api.commons.TranscriptSentimentTone" json:"last,omitempty"`
	// Samples of the thread, split by offset and duration.
	Samples       []*Sentiment_Sample `protobuf:"bytes,5,rep,name=samples,proto3" json:"samples,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sentiment) Reset() {
	*x = Sentiment{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sentiment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sentiment) ProtoMessage() {}

func (x *Sentiment) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sentiment.ProtoReflect.Descriptor instead.
func (*Sentiment) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{18}
}

func (x *Sentiment) GetOverall() *Sentiment_Estimate {
	if x != nil {
		return x.Overall
	}
	return nil
}

func (x *Sentiment) GetWorst() commons.TranscriptSentimentTone {
	if x != nil {
		return x.Worst
	}
	return commons.TranscriptSentimentTone(0)
}

func (x *Sentiment) GetDominant() commons.TranscriptSentimentTone {
	if x != nil {
		return x.Dominant
	}
	return commons.TranscriptSentimentTone(0)
}

func (x *Sentiment) GetLast() commons.TranscriptSentimentTone {
	if x != nil {
		return x.Last
	}
	return commons.TranscriptSentimentTone(0)
}

func (x *Sentiment) GetSamples() []*Sentiment_Sample {
	if x != nil {
		return x.Samples
	}
	return nil
}

type Segment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// begin time in milliseconds
	BeginTime uint32 `protobuf:"varint,1,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	// confidence from 0 to 100
	Confidence uint32 `protobuf:"varint,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
	// duration in milliseconds
	Duration      uint32  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Text          string  `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	Words         []*Word `protobuf:"bytes,5,rep,name=words,proto3" json:"words,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Segment) Reset() {
	*x = Segment{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment) ProtoMessage() {}

func (x *Segment) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment.ProtoReflect.Descriptor instead.
func (*Segment) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{19}
}

func (x *Segment) GetBeginTime() uint32 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *Segment) GetConfidence() uint32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *Segment) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Segment) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Segment) GetWords() []*Word {
	if x != nil {
		return x.Words
	}
	return nil
}

type Word struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// begin time in milliseconds
	BeginTime uint32 `protobuf:"varint,1,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	// confidence from 0 to 100
	Confidence uint32 `protobuf:"varint,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
	// duration in milliseconds
	Duration      uint32 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Spoken        string `protobuf:"bytes,4,opt,name=spoken,proto3" json:"spoken,omitempty"`
	Redacted      bool   `protobuf:"varint,5,opt,name=redacted,proto3" json:"redacted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Word) Reset() {
	*x = Word{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Word) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Word) ProtoMessage() {}

func (x *Word) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Word.ProtoReflect.Descriptor instead.
func (*Word) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{20}
}

func (x *Word) GetBeginTime() uint32 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *Word) GetConfidence() uint32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *Word) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Word) GetSpoken() string {
	if x != nil {
		return x.Spoken
	}
	return ""
}

func (x *Word) GetRedacted() bool {
	if x != nil {
		return x.Redacted
	}
	return false
}

type Silence struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Duration   *Silence_Duration      `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	Segments   []*Silence_Segment     `protobuf:"bytes,2,rep,name=segments,proto3" json:"segments,omitempty"`
	Occurrence *Silence_Occurrence    `protobuf:"bytes,3,opt,name=occurrence,proto3" json:"occurrence,omitempty"`
	// threshold in milliseconds is the minimum duration of silence
	// to be counted as silence in a transcript
	Threshold     uint32 `protobuf:"varint,4,opt,name=threshold,proto3" json:"threshold,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Silence) Reset() {
	*x = Silence{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Silence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Silence) ProtoMessage() {}

func (x *Silence) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Silence.ProtoReflect.Descriptor instead.
func (*Silence) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{21}
}

func (x *Silence) GetDuration() *Silence_Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Silence) GetSegments() []*Silence_Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *Silence) GetOccurrence() *Silence_Occurrence {
	if x != nil {
		return x.Occurrence
	}
	return nil
}

func (x *Silence) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

type TalkOver struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Occurrence *TalkOver_Occurrence   `protobuf:"bytes,1,opt,name=occurrence,proto3" json:"occurrence,omitempty"`
	Duration   *TalkOver_Duration     `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Results    []*TalkOver_Result     `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	// threshold in milliseconds is the minimum duration of talk over
	// to be counted as talk over in a transcript
	Threshold     uint32 `protobuf:"varint,4,opt,name=threshold,proto3" json:"threshold,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TalkOver) Reset() {
	*x = TalkOver{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TalkOver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkOver) ProtoMessage() {}

func (x *TalkOver) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkOver.ProtoReflect.Descriptor instead.
func (*TalkOver) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{22}
}

func (x *TalkOver) GetOccurrence() *TalkOver_Occurrence {
	if x != nil {
		return x.Occurrence
	}
	return nil
}

func (x *TalkOver) GetDuration() *TalkOver_Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *TalkOver) GetResults() []*TalkOver_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *TalkOver) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

// FlagSummary defines a summary of flags which were applied to a transcript.
type FlagSummary struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of flags associated with the transcript.
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// The sum of the priorities of the flags associated with the transcript.
	PrioritySum int32 `protobuf:"varint,2,opt,name=priority_sum,json=prioritySum,proto3" json:"priority_sum,omitempty"`
	// The highest priority of the flags associated with the transcript.
	PriorityMax int32 `protobuf:"varint,3,opt,name=priority_max,json=priorityMax,proto3" json:"priority_max,omitempty"`
	// Need Review provides info on the flags that need review.
	NeedReview *FlagSummary_NeedReview `protobuf:"bytes,4,opt,name=need_review,json=needReview,proto3" json:"need_review,omitempty"`
	// Flags contain the flags and filters that are associated with the transcript.
	Flags []*FlagSummary_Flag `protobuf:"bytes,5,rep,name=flags,proto3" json:"flags,omitempty"`
	// The review status of the flagged transcript.
	ReviewStatus  TranscriptReviewStatus `protobuf:"varint,6,opt,name=review_status,json=reviewStatus,proto3,enum=api.v1alpha1.vanalytics.TranscriptReviewStatus" json:"review_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlagSummary) Reset() {
	*x = FlagSummary{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlagSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagSummary) ProtoMessage() {}

func (x *FlagSummary) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagSummary.ProtoReflect.Descriptor instead.
func (*FlagSummary) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{23}
}

func (x *FlagSummary) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FlagSummary) GetPrioritySum() int32 {
	if x != nil {
		return x.PrioritySum
	}
	return 0
}

func (x *FlagSummary) GetPriorityMax() int32 {
	if x != nil {
		return x.PriorityMax
	}
	return 0
}

func (x *FlagSummary) GetNeedReview() *FlagSummary_NeedReview {
	if x != nil {
		return x.NeedReview
	}
	return nil
}

func (x *FlagSummary) GetFlags() []*FlagSummary_Flag {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *FlagSummary) GetReviewStatus() TranscriptReviewStatus {
	if x != nil {
		return x.ReviewStatus
	}
	return TranscriptReviewStatus_TRANSCRIPT_REVIEW_STATUS_TODO
}

// AgentResponse contains the agent responses aka dispositions.
type AgentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []string               `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentResponse) Reset() {
	*x = AgentResponse{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentResponse) ProtoMessage() {}

func (x *AgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentResponse.ProtoReflect.Descriptor instead.
func (*AgentResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{24}
}

func (x *AgentResponse) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// SearchByOrgIdRequest is a support-only request for searching transcripts by org id.
type SearchByOrgIdRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The organization id to search by.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Optional. The number of hits included in response.
	// Will default to 10 if not provided
	PageSize uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. The sort order.
	Sort *Sort `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	// Optional. Transcript mask contains a list of transcript fields to be returned.
	// If no transcript mask is provided it defaults to returning all fields.
	TranscriptMask *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=transcript_mask,json=transcriptMask,proto3" json:"transcript_mask,omitempty"`
	// Optional. Defines a query on flag summary.
	FlagSummary *SearchQuery_FlagSummary `protobuf:"bytes,5,opt,name=flag_summary,json=flagSummary,proto3" json:"flag_summary,omitempty"`
	// Optional. The standard list filter as described in https://google.aip.dev/160.
	// Multiple comparisons can be provided when separated with a logical AND
	// operator. Supported fields, operators and functions are listed below.
	//
	// +----------------------------+-----------+--------------+-----------+
	// |                      field |      type |    operators | functions |
	// +----------------------------+-----------+--------------+-----------+
	// |             transcript_sid |   integer |            = |       any |
	// |                 start_time | timestamp | >=, <=, >, < | timestamp |
	// |         flag_summary.count |   integer | >=, <=, >, < |           |
	// | flag_summary.review_status |      enum |            = |       any |
	// +----------------------------+-----------+--------------+-----------+
	//
	// Examples:
	// transcript_sid = any(1, 2, 3)
	//
	// flag_summary.count > 0 AND
	// flag_summary.review_status = any(done, none) AND
	// start_time >= timestamp('2012-04-21T11:30:00-04:00')
	Filter        string `protobuf:"bytes,6,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchByOrgIdRequest) Reset() {
	*x = SearchByOrgIdRequest{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchByOrgIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchByOrgIdRequest) ProtoMessage() {}

func (x *SearchByOrgIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchByOrgIdRequest.ProtoReflect.Descriptor instead.
func (*SearchByOrgIdRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{25}
}

func (x *SearchByOrgIdRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *SearchByOrgIdRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchByOrgIdRequest) GetSort() *Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *SearchByOrgIdRequest) GetTranscriptMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.TranscriptMask
	}
	return nil
}

func (x *SearchByOrgIdRequest) GetFlagSummary() *SearchQuery_FlagSummary {
	if x != nil {
		return x.FlagSummary
	}
	return nil
}

func (x *SearchByOrgIdRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type SearchRequest_Phrase struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// words that will be searched for
	Words []*SearchRequest_Phrase_Word `protobuf:"bytes,1,rep,name=words,proto3" json:"words,omitempty"`
	// slop is the number of extra terms that can be in the query that
	// are not being searched for. For example: slop of 2 when searching for
	// "This is my dog" would allow "This is my quick brown dog".
	Slop uint32 `protobuf:"varint,2,opt,name=slop,proto3" json:"slop,omitempty"`
	// when in_order is true then the terms must be found in the order given.
	InOrder bool `protobuf:"varint,3,opt,name=in_order,json=inOrder,proto3" json:"in_order,omitempty"`
	// highlight contains settings for highlighting the words in the response
	Highlight *SearchRequest_Phrase_Highlight `protobuf:"bytes,4,opt,name=highlight,proto3" json:"highlight,omitempty"`
	// When true the phrase must not be matched.
	Not bool `protobuf:"varint,5,opt,name=not,proto3" json:"not,omitempty"`
	// When set, phrase must be spoken during agent session.
	// Use with channel to target (a) speaker(s).
	//   - e.g. caller spoke phrase to this specific agent
	Agent *SearchRequest_Agent `protobuf:"bytes,6,opt,name=agent,proto3" json:"agent,omitempty"`
	// When set, targets side of call (caller or agent).
	// Use 1 for caller, 2 for agent.
	// Use with agent to target (a) speaker(s).
	//   - e.g. caller spoke phrase to this specific agent
	Channel uint32 `protobuf:"varint,7,opt,name=channel,proto3" json:"channel,omitempty"`
	// PositionOffset defines where a phrase will be searched for
	// in a transcript. For example:
	// [  0,   0] match anywhere
	// [ 30,  60] match between (start + 30) and (start + 60)
	// [  0,  30] match between  (start + 0) and (start + 30)
	// [  0, -30] match between  (start + 0) and (stop - 30)
	// [-60, -30] match between  (stop - 60) and (stop - 30)
	// [-30,   0] match between  (stop - 30) and (stop - 0)
	PositionOffset *SearchRequest_PositionOffset `protobuf:"bytes,8,opt,name=position_offset,json=positionOffset,proto3" json:"position_offset,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SearchRequest_Phrase) Reset() {
	*x = SearchRequest_Phrase{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchRequest_Phrase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest_Phrase) ProtoMessage() {}

func (x *SearchRequest_Phrase) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest_Phrase.ProtoReflect.Descriptor instead.
func (*SearchRequest_Phrase) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{4, 0}
}

func (x *SearchRequest_Phrase) GetWords() []*SearchRequest_Phrase_Word {
	if x != nil {
		return x.Words
	}
	return nil
}

func (x *SearchRequest_Phrase) GetSlop() uint32 {
	if x != nil {
		return x.Slop
	}
	return 0
}

func (x *SearchRequest_Phrase) GetInOrder() bool {
	if x != nil {
		return x.InOrder
	}
	return false
}

func (x *SearchRequest_Phrase) GetHighlight() *SearchRequest_Phrase_Highlight {
	if x != nil {
		return x.Highlight
	}
	return nil
}

func (x *SearchRequest_Phrase) GetNot() bool {
	if x != nil {
		return x.Not
	}
	return false
}

func (x *SearchRequest_Phrase) GetAgent() *SearchRequest_Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *SearchRequest_Phrase) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *SearchRequest_Phrase) GetPositionOffset() *SearchRequest_PositionOffset {
	if x != nil {
		return x.PositionOffset
	}
	return nil
}

type SearchRequest_PositionOffset struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         *durationpb.Duration   `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	Stop          *durationpb.Duration   `protobuf:"bytes,2,opt,name=stop,proto3" json:"stop,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchRequest_PositionOffset) Reset() {
	*x = SearchRequest_PositionOffset{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchRequest_PositionOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest_PositionOffset) ProtoMessage() {}

func (x *SearchRequest_PositionOffset) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest_PositionOffset.ProtoReflect.Descriptor instead.
func (*SearchRequest_PositionOffset) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{4, 1}
}

func (x *SearchRequest_PositionOffset) GetStart() *durationpb.Duration {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *SearchRequest_PositionOffset) GetStop() *durationpb.Duration {
	if x != nil {
		return x.Stop
	}
	return nil
}

type SearchRequest_Silence struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// duration_total is the total silence duration within a transcript in milliseconds
	DurationTotal *Uint32Expr `protobuf:"bytes,1,opt,name=duration_total,json=durationTotal,proto3" json:"duration_total,omitempty"`
	// duration_max is the max individual duration of silence within a transcript in milliseconds
	DurationMax     *Uint32Expr `protobuf:"bytes,2,opt,name=duration_max,json=durationMax,proto3" json:"duration_max,omitempty"`
	OccurrenceTotal *Uint32Expr `protobuf:"bytes,3,opt,name=occurrence_total,json=occurrenceTotal,proto3" json:"occurrence_total,omitempty"`
	// duration_percentage is a number from 0-100 representing the percent
	// of the transcript that is silence
	DurationPercentage *Uint32Expr `protobuf:"bytes,4,opt,name=duration_percentage,json=durationPercentage,proto3" json:"duration_percentage,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SearchRequest_Silence) Reset() {
	*x = SearchRequest_Silence{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchRequest_Silence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest_Silence) ProtoMessage() {}

func (x *SearchRequest_Silence) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest_Silence.ProtoReflect.Descriptor instead.
func (*SearchRequest_Silence) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{4, 2}
}

func (x *SearchRequest_Silence) GetDurationTotal() *Uint32Expr {
	if x != nil {
		return x.DurationTotal
	}
	return nil
}

func (x *SearchRequest_Silence) GetDurationMax() *Uint32Expr {
	if x != nil {
		return x.DurationMax
	}
	return nil
}

func (x *SearchRequest_Silence) GetOccurrenceTotal() *Uint32Expr {
	if x != nil {
		return x.OccurrenceTotal
	}
	return nil
}

func (x *SearchRequest_Silence) GetDurationPercentage() *Uint32Expr {
	if x != nil {
		return x.DurationPercentage
	}
	return nil
}

type SearchRequest_TalkOver struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// duration_total is the total talkover duration within a transcript in milliseconds
	DurationTotal *Uint32Expr `protobuf:"bytes,1,opt,name=duration_total,json=durationTotal,proto3" json:"duration_total,omitempty"`
	// duration_max is the max individual duration of talkover within a transcript in milliseconds
	DurationMax     *Uint32Expr `protobuf:"bytes,2,opt,name=duration_max,json=durationMax,proto3" json:"duration_max,omitempty"`
	OccurrenceTotal *Uint32Expr `protobuf:"bytes,3,opt,name=occurrence_total,json=occurrenceTotal,proto3" json:"occurrence_total,omitempty"`
	// duration_percentage is a number from 0-100 representing the percent
	// of the transcript that is talkover
	DurationPercentage *Uint32Expr `protobuf:"bytes,4,opt,name=duration_percentage,json=durationPercentage,proto3" json:"duration_percentage,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SearchRequest_TalkOver) Reset() {
	*x = SearchRequest_TalkOver{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchRequest_TalkOver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest_TalkOver) ProtoMessage() {}

func (x *SearchRequest_TalkOver) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest_TalkOver.ProtoReflect.Descriptor instead.
func (*SearchRequest_TalkOver) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{4, 3}
}

func (x *SearchRequest_TalkOver) GetDurationTotal() *Uint32Expr {
	if x != nil {
		return x.DurationTotal
	}
	return nil
}

func (x *SearchRequest_TalkOver) GetDurationMax() *Uint32Expr {
	if x != nil {
		return x.DurationMax
	}
	return nil
}

func (x *SearchRequest_TalkOver) GetOccurrenceTotal() *Uint32Expr {
	if x != nil {
		return x.OccurrenceTotal
	}
	return nil
}

func (x *SearchRequest_TalkOver) GetDurationPercentage() *Uint32Expr {
	if x != nil {
		return x.DurationPercentage
	}
	return nil
}

type SearchRequest_Terms struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// any is a set of terms which the transcript must contain at least one of
	Any []string `protobuf:"bytes,1,rep,name=any,proto3" json:"any,omitempty"`
	// all is a set of terms which the transcript must contain
	All []string `protobuf:"bytes,2,rep,name=all,proto3" json:"all,omitempty"`
	// When true the terms must not be matched.
	Not bool `protobuf:"varint,3,opt,name=not,proto3" json:"not,omitempty"`
	// When set, terms must be spoken during agent session.
	// Use with channel to target (a) speaker(s).
	//   - e.g. caller spoke terms to this specific agent
	Agent *SearchRequest_Agent `protobuf:"bytes,4,opt,name=agent,proto3" json:"agent,omitempty"`
	// When set, targets side of call (caller or agent).
	// Use 1 for caller, 2 for agent.
	// Use with agent to target (a) speaker(s).
	//   - e.g. caller spoke terms to this specific agent
	Channel uint32 `protobuf:"varint,5,opt,name=channel,proto3" json:"channel,omitempty"`
	// PositionOffset defines where terms will be searched for
	// in a transcript. For example:
	// [  0,   0] match anywhere
	// [ 30,  60] match between (start + 30) and (start + 60)
	// [  0,  30] match between  (start + 0) and (start + 30)
	// [  0, -30] match between  (start + 0) and (stop - 30)
	// [-60, -30] match between  (stop - 60) and (stop - 30)
	// [-30,   0] match between  (stop - 30) and (stop - 0)
	PositionOffset *SearchRequest_PositionOffset `protobuf:"bytes,6,opt,name=position_offset,json=positionOffset,proto3" json:"position_offset,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SearchRequest_Terms) Reset() {
	*x = SearchRequest_Terms{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchRequest_Terms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest_Terms) ProtoMessage() {}

func (x *SearchRequest_Terms) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest_Terms.ProtoReflect.Descriptor instead.
func (*SearchRequest_Terms) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{4, 4}
}

func (x *SearchRequest_Terms) GetAny() []string {
	if x != nil {
		return x.Any
	}
	return nil
}

func (x *SearchRequest_Terms) GetAll() []string {
	if x != nil {
		return x.All
	}
	return nil
}

func (x *SearchRequest_Terms) GetNot() bool {
	if x != nil {
		return x.Not
	}
	return false
}

func (x *SearchRequest_Terms) GetAgent() *SearchRequest_Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *SearchRequest_Terms) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *SearchRequest_Terms) GetPositionOffset() *SearchRequest_PositionOffset {
	if x != nil {
		return x.PositionOffset
	}
	return nil
}

type SearchRequest_Agent struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	UserName      *SearchRequest_Agent_UserName `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchRequest_Agent) Reset() {
	*x = SearchRequest_Agent{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchRequest_Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest_Agent) ProtoMessage() {}

func (x *SearchRequest_Agent) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest_Agent.ProtoReflect.Descriptor instead.
func (*SearchRequest_Agent) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{4, 5}
}

func (x *SearchRequest_Agent) GetUserName() *SearchRequest_Agent_UserName {
	if x != nil {
		return x.UserName
	}
	return nil
}

type SearchRequest_Phrase_Word struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// value is a word to search for
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// fuzziness allows the term to be spelled slightly incorrect and still
	// match. Fuzziness can have the values 0, 1, 2, or "AUTO"; 0 would require
	// that the term matches exactly, 2 would allow 2 letter differences, and
	// AUTO would automatically pick a number based on the word length.
	Fuzziness     string `protobuf:"bytes,2,opt,name=fuzziness,proto3" json:"fuzziness,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchRequest_Phrase_Word) Reset() {
	*x = SearchRequest_Phrase_Word{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchRequest_Phrase_Word) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest_Phrase_Word) ProtoMessage() {}

func (x *SearchRequest_Phrase_Word) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest_Phrase_Word.ProtoReflect.Descriptor instead.
func (*SearchRequest_Phrase_Word) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *SearchRequest_Phrase_Word) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SearchRequest_Phrase_Word) GetFuzziness() string {
	if x != nil {
		return x.Fuzziness
	}
	return ""
}

type SearchRequest_Phrase_Highlight struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// pre_tags are tags that will come before any highlighted word
	// to show it is highlighted. Defaults to ["<em>"]
	PreTags []string `protobuf:"bytes,1,rep,name=pre_tags,json=preTags,proto3" json:"pre_tags,omitempty"`
	// post_tags are tags that will come after any highlighted word
	// to show it is highlighted. Defaults to ["</em>"]
	PostTags      []string `protobuf:"bytes,2,rep,name=post_tags,json=postTags,proto3" json:"post_tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchRequest_Phrase_Highlight) Reset() {
	*x = SearchRequest_Phrase_Highlight{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchRequest_Phrase_Highlight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest_Phrase_Highlight) ProtoMessage() {}

func (x *SearchRequest_Phrase_Highlight) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest_Phrase_Highlight.ProtoReflect.Descriptor instead.
func (*SearchRequest_Phrase_Highlight) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{4, 0, 1}
}

func (x *SearchRequest_Phrase_Highlight) GetPreTags() []string {
	if x != nil {
		return x.PreTags
	}
	return nil
}

func (x *SearchRequest_Phrase_Highlight) GetPostTags() []string {
	if x != nil {
		return x.PostTags
	}
	return nil
}

type SearchRequest_Agent_UserName struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// any is a set of agent user names which the transcript must contain at least one of
	Any []string `protobuf:"bytes,1,rep,name=any,proto3" json:"any,omitempty"`
	// all is a set of agent user names which the transcript must contain
	All           []string `protobuf:"bytes,2,rep,name=all,proto3" json:"all,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchRequest_Agent_UserName) Reset() {
	*x = SearchRequest_Agent_UserName{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchRequest_Agent_UserName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest_Agent_UserName) ProtoMessage() {}

func (x *SearchRequest_Agent_UserName) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest_Agent_UserName.ProtoReflect.Descriptor instead.
func (*SearchRequest_Agent_UserName) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{4, 5, 0}
}

func (x *SearchRequest_Agent_UserName) GetAny() []string {
	if x != nil {
		return x.Any
	}
	return nil
}

func (x *SearchRequest_Agent_UserName) GetAll() []string {
	if x != nil {
		return x.All
	}
	return nil
}

// Phone defines a query on the phone.
type SearchQuery_Phone struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Queries on phone country code.
	Cc *SearchQuery_Cc `protobuf:"bytes,1,opt,name=cc,proto3" json:"cc,omitempty"`
	// Optional. Queries on phone ndc (area code).
	Ndc *SearchQuery_Ndc `protobuf:"bytes,2,opt,name=ndc,proto3" json:"ndc,omitempty"`
	// Optional. Queries on phone subscriber number prefix.
	Prefix *SearchQuery_Prefix `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Optional. Queries on phone city.
	City *SearchQuery_City `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	// Optional. Queries on phone iso2 country code.
	Iso2 *SearchQuery_Iso2 `protobuf:"bytes,5,opt,name=iso2,proto3" json:"iso2,omitempty"`
	// Optional. Queries on phone region code.
	RegionCode *SearchQuery_RegionCode `protobuf:"bytes,6,opt,name=region_code,json=regionCode,proto3" json:"region_code,omitempty"`
	// Optional. Queries on phone region name.
	RegionName *SearchQuery_RegionName `protobuf:"bytes,7,opt,name=region_name,json=regionName,proto3" json:"region_name,omitempty"`
	// Optional. Queries on phone time zone.
	TimeZone *SearchQuery_TimeZone `protobuf:"bytes,8,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	// Optional. Queries on phone number type.
	Type *SearchQuery_Type `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	// Optional. Queries on phone number utc.
	Utc *SearchQuery_Utc `protobuf:"bytes,10,opt,name=utc,proto3" json:"utc,omitempty"`
	// Optional. Queries on phone number location.
	Location      *SearchQuery_Location `protobuf:"bytes,11,opt,name=location,proto3" json:"location,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_Phone) Reset() {
	*x = SearchQuery_Phone{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_Phone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_Phone) ProtoMessage() {}

func (x *SearchQuery_Phone) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_Phone.ProtoReflect.Descriptor instead.
func (*SearchQuery_Phone) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 0}
}

func (x *SearchQuery_Phone) GetCc() *SearchQuery_Cc {
	if x != nil {
		return x.Cc
	}
	return nil
}

func (x *SearchQuery_Phone) GetNdc() *SearchQuery_Ndc {
	if x != nil {
		return x.Ndc
	}
	return nil
}

func (x *SearchQuery_Phone) GetPrefix() *SearchQuery_Prefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *SearchQuery_Phone) GetCity() *SearchQuery_City {
	if x != nil {
		return x.City
	}
	return nil
}

func (x *SearchQuery_Phone) GetIso2() *SearchQuery_Iso2 {
	if x != nil {
		return x.Iso2
	}
	return nil
}

func (x *SearchQuery_Phone) GetRegionCode() *SearchQuery_RegionCode {
	if x != nil {
		return x.RegionCode
	}
	return nil
}

func (x *SearchQuery_Phone) GetRegionName() *SearchQuery_RegionName {
	if x != nil {
		return x.RegionName
	}
	return nil
}

func (x *SearchQuery_Phone) GetTimeZone() *SearchQuery_TimeZone {
	if x != nil {
		return x.TimeZone
	}
	return nil
}

func (x *SearchQuery_Phone) GetType() *SearchQuery_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SearchQuery_Phone) GetUtc() *SearchQuery_Utc {
	if x != nil {
		return x.Utc
	}
	return nil
}

func (x *SearchQuery_Phone) GetLocation() *SearchQuery_Location {
	if x != nil {
		return x.Location
	}
	return nil
}

// Cc defines a query on the phone country code.
type SearchQuery_Cc struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Queries where cc in list provided.
	In            []string `protobuf:"bytes,1,rep,name=in,proto3" json:"in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_Cc) Reset() {
	*x = SearchQuery_Cc{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_Cc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_Cc) ProtoMessage() {}

func (x *SearchQuery_Cc) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_Cc.ProtoReflect.Descriptor instead.
func (*SearchQuery_Cc) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 1}
}

func (x *SearchQuery_Cc) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

// Ndc defines a query on the phone ndc.
type SearchQuery_Ndc struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Queries where ndc in list provided.
	In            []string `protobuf:"bytes,1,rep,name=in,proto3" json:"in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_Ndc) Reset() {
	*x = SearchQuery_Ndc{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_Ndc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_Ndc) ProtoMessage() {}

func (x *SearchQuery_Ndc) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_Ndc.ProtoReflect.Descriptor instead.
func (*SearchQuery_Ndc) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 2}
}

func (x *SearchQuery_Ndc) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

// Prefix defines a query on the phone prefix.
type SearchQuery_Prefix struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Queries where prefix in list provided.
	In            []string `protobuf:"bytes,1,rep,name=in,proto3" json:"in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_Prefix) Reset() {
	*x = SearchQuery_Prefix{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_Prefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_Prefix) ProtoMessage() {}

func (x *SearchQuery_Prefix) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_Prefix.ProtoReflect.Descriptor instead.
func (*SearchQuery_Prefix) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 3}
}

func (x *SearchQuery_Prefix) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

// City defines a query on the phone city.
type SearchQuery_City struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Queries where city in list provided.
	In            []string `protobuf:"bytes,1,rep,name=in,proto3" json:"in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_City) Reset() {
	*x = SearchQuery_City{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_City) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_City) ProtoMessage() {}

func (x *SearchQuery_City) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_City.ProtoReflect.Descriptor instead.
func (*SearchQuery_City) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 4}
}

func (x *SearchQuery_City) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

// Iso2 defines a query on the phone Iso2.
type SearchQuery_Iso2 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Queries where iso2 in list provided.
	In            []string `protobuf:"bytes,1,rep,name=in,proto3" json:"in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_Iso2) Reset() {
	*x = SearchQuery_Iso2{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_Iso2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_Iso2) ProtoMessage() {}

func (x *SearchQuery_Iso2) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_Iso2.ProtoReflect.Descriptor instead.
func (*SearchQuery_Iso2) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 5}
}

func (x *SearchQuery_Iso2) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

// RegionCode defines a query on the phone region code.
type SearchQuery_RegionCode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Queries where region code in list provided.
	In            []string `protobuf:"bytes,1,rep,name=in,proto3" json:"in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_RegionCode) Reset() {
	*x = SearchQuery_RegionCode{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_RegionCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_RegionCode) ProtoMessage() {}

func (x *SearchQuery_RegionCode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_RegionCode.ProtoReflect.Descriptor instead.
func (*SearchQuery_RegionCode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 6}
}

func (x *SearchQuery_RegionCode) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

// RegionName defines a query on the phone region name.
type SearchQuery_RegionName struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Queries where region name in list provided.
	In            []string `protobuf:"bytes,1,rep,name=in,proto3" json:"in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_RegionName) Reset() {
	*x = SearchQuery_RegionName{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_RegionName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_RegionName) ProtoMessage() {}

func (x *SearchQuery_RegionName) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_RegionName.ProtoReflect.Descriptor instead.
func (*SearchQuery_RegionName) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 7}
}

func (x *SearchQuery_RegionName) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

// TimeZone defines a query on the phone time zone.
type SearchQuery_TimeZone struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Queries where time zone in list provided.
	In            []string `protobuf:"bytes,1,rep,name=in,proto3" json:"in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_TimeZone) Reset() {
	*x = SearchQuery_TimeZone{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_TimeZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_TimeZone) ProtoMessage() {}

func (x *SearchQuery_TimeZone) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_TimeZone.ProtoReflect.Descriptor instead.
func (*SearchQuery_TimeZone) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 8}
}

func (x *SearchQuery_TimeZone) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

// Type defines a query on the phone type.
type SearchQuery_Type struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Queries where type in list provided.
	In            []string `protobuf:"bytes,1,rep,name=in,proto3" json:"in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_Type) Reset() {
	*x = SearchQuery_Type{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_Type) ProtoMessage() {}

func (x *SearchQuery_Type) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_Type.ProtoReflect.Descriptor instead.
func (*SearchQuery_Type) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 9}
}

func (x *SearchQuery_Type) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

// Utc defines a query on the phone utc.
type SearchQuery_Utc struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Queries where utc in list provided.
	In            []float32 `protobuf:"fixed32,1,rep,packed,name=in,proto3" json:"in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_Utc) Reset() {
	*x = SearchQuery_Utc{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_Utc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_Utc) ProtoMessage() {}

func (x *SearchQuery_Utc) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_Utc.ProtoReflect.Descriptor instead.
func (*SearchQuery_Utc) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 10}
}

func (x *SearchQuery_Utc) GetIn() []float32 {
	if x != nil {
		return x.In
	}
	return nil
}

// Location defines a query on the phone location.
type SearchQuery_Location struct {
	state            protoimpl.MessageState                 `protogen:"open.v1"`
	ZipCodeProximity *SearchQuery_Location_ZipCodeProximity `protobuf:"bytes,1,opt,name=zip_code_proximity,json=zipCodeProximity,proto3" json:"zip_code_proximity,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SearchQuery_Location) Reset() {
	*x = SearchQuery_Location{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_Location) ProtoMessage() {}

func (x *SearchQuery_Location) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_Location.ProtoReflect.Descriptor instead.
func (*SearchQuery_Location) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 11}
}

func (x *SearchQuery_Location) GetZipCodeProximity() *SearchQuery_Location_ZipCodeProximity {
	if x != nil {
		return x.ZipCodeProximity
	}
	return nil
}

// AgentCallLog is a query for the agent call log.
type SearchQuery_AgentCallLog struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Call skills initial will query the initial call skills.
	CallSkillsInitial *SearchQuery_CallSkillsInitial `protobuf:"bytes,1,opt,name=call_skills_initial,json=callSkillsInitial,proto3" json:"call_skills_initial,omitempty"`
	// Optional. Call ended will query on the reason the call ended.
	CallEnded     *SearchQuery_CallEnded `protobuf:"bytes,2,opt,name=call_ended,json=callEnded,proto3" json:"call_ended,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_AgentCallLog) Reset() {
	*x = SearchQuery_AgentCallLog{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_AgentCallLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_AgentCallLog) ProtoMessage() {}

func (x *SearchQuery_AgentCallLog) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_AgentCallLog.ProtoReflect.Descriptor instead.
func (*SearchQuery_AgentCallLog) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 12}
}

func (x *SearchQuery_AgentCallLog) GetCallSkillsInitial() *SearchQuery_CallSkillsInitial {
	if x != nil {
		return x.CallSkillsInitial
	}
	return nil
}

func (x *SearchQuery_AgentCallLog) GetCallEnded() *SearchQuery_CallEnded {
	if x != nil {
		return x.CallEnded
	}
	return nil
}

// CallEnded is a query for the call ended.
type SearchQuery_CallEnded struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The reasons to be filtered on.
	Reasons       []commons.AgentCallLogCallEnded `protobuf:"varint,1,rep,packed,name=reasons,proto3,enum=api.commons.AgentCallLogCallEnded" json:"reasons,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_CallEnded) Reset() {
	*x = SearchQuery_CallEnded{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_CallEnded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_CallEnded) ProtoMessage() {}

func (x *SearchQuery_CallEnded) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_CallEnded.ProtoReflect.Descriptor instead.
func (*SearchQuery_CallEnded) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 13}
}

func (x *SearchQuery_CallEnded) GetReasons() []commons.AgentCallLogCallEnded {
	if x != nil {
		return x.Reasons
	}
	return nil
}

// CallSkillsInitial is a query for the initial call skills.
type SearchQuery_CallSkillsInitial struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Needed initial call skills to filter on.
	Need []string `protobuf:"bytes,1,rep,name=need,proto3" json:"need,omitempty"`
	// Optional. Wanted initial call skills to filter on.
	Want          []string `protobuf:"bytes,2,rep,name=want,proto3" json:"want,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_CallSkillsInitial) Reset() {
	*x = SearchQuery_CallSkillsInitial{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_CallSkillsInitial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_CallSkillsInitial) ProtoMessage() {}

func (x *SearchQuery_CallSkillsInitial) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_CallSkillsInitial.ProtoReflect.Descriptor instead.
func (*SearchQuery_CallSkillsInitial) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 14}
}

func (x *SearchQuery_CallSkillsInitial) GetNeed() []string {
	if x != nil {
		return x.Need
	}
	return nil
}

func (x *SearchQuery_CallSkillsInitial) GetWant() []string {
	if x != nil {
		return x.Want
	}
	return nil
}

// AgentResponse defines a query on agent responses.
type SearchQuery_AgentResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Key to query on.
	Key *SearchQuery_AgentResponse_Key `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Optional. Queries values for the given keys. If no keys are provided then
	// it will run the query on all values.
	Values *SearchQuery_AgentResponse_Values `protobuf:"bytes,2,opt,name=values,proto3" json:"values,omitempty"`
	// Optional. Queries values as numbers for the given keys.
	Numbers       *SearchQuery_AgentResponse_Numbers `protobuf:"bytes,3,opt,name=numbers,proto3" json:"numbers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_AgentResponse) Reset() {
	*x = SearchQuery_AgentResponse{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_AgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_AgentResponse) ProtoMessage() {}

func (x *SearchQuery_AgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_AgentResponse.ProtoReflect.Descriptor instead.
func (*SearchQuery_AgentResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 15}
}

func (x *SearchQuery_AgentResponse) GetKey() *SearchQuery_AgentResponse_Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SearchQuery_AgentResponse) GetValues() *SearchQuery_AgentResponse_Values {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *SearchQuery_AgentResponse) GetNumbers() *SearchQuery_AgentResponse_Numbers {
	if x != nil {
		return x.Numbers
	}
	return nil
}

type SearchQuery_Results struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Channel       *SearchQuery_Results_Channel       `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	AgentUserName *SearchQuery_Results_AgentUserName `protobuf:"bytes,2,opt,name=agent_user_name,json=agentUserName,proto3" json:"agent_user_name,omitempty"`
	Segments      *SearchQuery_Results_Segments      `protobuf:"bytes,3,opt,name=segments,proto3" json:"segments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_Results) Reset() {
	*x = SearchQuery_Results{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_Results) ProtoMessage() {}

func (x *SearchQuery_Results) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_Results.ProtoReflect.Descriptor instead.
func (*SearchQuery_Results) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 16}
}

func (x *SearchQuery_Results) GetChannel() *SearchQuery_Results_Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *SearchQuery_Results) GetAgentUserName() *SearchQuery_Results_AgentUserName {
	if x != nil {
		return x.AgentUserName
	}
	return nil
}

func (x *SearchQuery_Results) GetSegments() *SearchQuery_Results_Segments {
	if x != nil {
		return x.Segments
	}
	return nil
}

// DeleteTime defines a query on delete time.
type SearchQuery_DeleteTime struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Queries on if delete time field exists.
	// If value is true then only deleted transcripts are returned.
	// If value is false then only non-deleted transcripted are returned.
	Exists        *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=exists,proto3" json:"exists,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_DeleteTime) Reset() {
	*x = SearchQuery_DeleteTime{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_DeleteTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_DeleteTime) ProtoMessage() {}

func (x *SearchQuery_DeleteTime) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_DeleteTime.ProtoReflect.Descriptor instead.
func (*SearchQuery_DeleteTime) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 17}
}

func (x *SearchQuery_DeleteTime) GetExists() *wrapperspb.BoolValue {
	if x != nil {
		return x.Exists
	}
	return nil
}

// TranscriptSid defines a query on transcript sid.
type SearchQuery_TranscriptSid struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Must have any provided transcript sid.
	Any []int64 `protobuf:"varint,1,rep,packed,name=any,proto3" json:"any,omitempty"`
	// Optional. Queries where greater than or equal.
	Gte           *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=gte,proto3" json:"gte,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_TranscriptSid) Reset() {
	*x = SearchQuery_TranscriptSid{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_TranscriptSid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_TranscriptSid) ProtoMessage() {}

func (x *SearchQuery_TranscriptSid) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_TranscriptSid.ProtoReflect.Descriptor instead.
func (*SearchQuery_TranscriptSid) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 18}
}

func (x *SearchQuery_TranscriptSid) GetAny() []int64 {
	if x != nil {
		return x.Any
	}
	return nil
}

func (x *SearchQuery_TranscriptSid) GetGte() *wrapperspb.Int64Value {
	if x != nil {
		return x.Gte
	}
	return nil
}

// AudioTime defines a query on audio_time.
type SearchQuery_AudioTime struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Queries where greater than or equal.
	Gte *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=gte,proto3" json:"gte,omitempty"`
	// Optional. Queries where less than or equal.
	Lte *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=lte,proto3" json:"lte,omitempty"`
	// Optional. Queries where greater than.
	Gt *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=gt,proto3" json:"gt,omitempty"`
	// Optional. Queries where less than.
	Lt            *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=lt,proto3" json:"lt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_AudioTime) Reset() {
	*x = SearchQuery_AudioTime{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_AudioTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_AudioTime) ProtoMessage() {}

func (x *SearchQuery_AudioTime) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_AudioTime.ProtoReflect.Descriptor instead.
func (*SearchQuery_AudioTime) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 19}
}

func (x *SearchQuery_AudioTime) GetGte() *wrapperspb.Int32Value {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *SearchQuery_AudioTime) GetLte() *wrapperspb.Int32Value {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *SearchQuery_AudioTime) GetGt() *wrapperspb.Int32Value {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *SearchQuery_AudioTime) GetLt() *wrapperspb.Int32Value {
	if x != nil {
		return x.Lt
	}
	return nil
}

// FlagSummary defines a query on flag summary fields.
type SearchQuery_FlagSummary struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Queries need review.
	NeedReview *SearchQuery_FlagSummary_NeedReview `protobuf:"bytes,1,opt,name=need_review,json=needReview,proto3" json:"need_review,omitempty"`
	// Optional. Queries review status.
	ReviewStatus *SearchQuery_FlagSummary_ReviewStatus `protobuf:"bytes,2,opt,name=review_status,json=reviewStatus,proto3" json:"review_status,omitempty"`
	// Optional. Queries flags.
	Flags *SearchQuery_FlagSummary_Flags `protobuf:"bytes,3,opt,name=flags,proto3" json:"flags,omitempty"`
	// Optional. Queries count.
	Count         *SearchQuery_FlagSummary_Count `protobuf:"bytes,4,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_FlagSummary) Reset() {
	*x = SearchQuery_FlagSummary{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_FlagSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_FlagSummary) ProtoMessage() {}

func (x *SearchQuery_FlagSummary) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_FlagSummary.ProtoReflect.Descriptor instead.
func (*SearchQuery_FlagSummary) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 20}
}

func (x *SearchQuery_FlagSummary) GetNeedReview() *SearchQuery_FlagSummary_NeedReview {
	if x != nil {
		return x.NeedReview
	}
	return nil
}

func (x *SearchQuery_FlagSummary) GetReviewStatus() *SearchQuery_FlagSummary_ReviewStatus {
	if x != nil {
		return x.ReviewStatus
	}
	return nil
}

func (x *SearchQuery_FlagSummary) GetFlags() *SearchQuery_FlagSummary_Flags {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *SearchQuery_FlagSummary) GetCount() *SearchQuery_FlagSummary_Count {
	if x != nil {
		return x.Count
	}
	return nil
}

type SearchQuery_Location_ZipCodeProximity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. Queries on phone number country code.
	CountryCode string `protobuf:"bytes,1,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// Required. Queries where phone location is within distance of zipcode.
	ZipCode string `protobuf:"bytes,2,opt,name=zip_code,json=zipCode,proto3" json:"zip_code,omitempty"`
	// Required. Queries where phone location is within distance (km or mi) of zipcode. For example: 100km.
	Distance      string `protobuf:"bytes,3,opt,name=distance,proto3" json:"distance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_Location_ZipCodeProximity) Reset() {
	*x = SearchQuery_Location_ZipCodeProximity{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_Location_ZipCodeProximity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_Location_ZipCodeProximity) ProtoMessage() {}

func (x *SearchQuery_Location_ZipCodeProximity) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_Location_ZipCodeProximity.ProtoReflect.Descriptor instead.
func (*SearchQuery_Location_ZipCodeProximity) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 11, 0}
}

func (x *SearchQuery_Location_ZipCodeProximity) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *SearchQuery_Location_ZipCodeProximity) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *SearchQuery_Location_ZipCodeProximity) GetDistance() string {
	if x != nil {
		return x.Distance
	}
	return ""
}

// Values defines a query on values.
type SearchQuery_AgentResponse_Values struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Queries where value in list provided.
	In []string `protobuf:"bytes,1,rep,name=in,proto3" json:"in,omitempty"`
	// Optional. Queries where value for key starts with given string.
	StartsWith string `protobuf:"bytes,2,opt,name=starts_with,json=startsWith,proto3" json:"starts_with,omitempty"`
	// Optional. Queries where value for key contains given string.
	Contains      string `protobuf:"bytes,3,opt,name=contains,proto3" json:"contains,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_AgentResponse_Values) Reset() {
	*x = SearchQuery_AgentResponse_Values{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_AgentResponse_Values) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_AgentResponse_Values) ProtoMessage() {}

func (x *SearchQuery_AgentResponse_Values) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_AgentResponse_Values.ProtoReflect.Descriptor instead.
func (*SearchQuery_AgentResponse_Values) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 15, 0}
}

func (x *SearchQuery_AgentResponse_Values) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *SearchQuery_AgentResponse_Values) GetStartsWith() string {
	if x != nil {
		return x.StartsWith
	}
	return ""
}

func (x *SearchQuery_AgentResponse_Values) GetContains() string {
	if x != nil {
		return x.Contains
	}
	return ""
}

// Numbers defines a query on values as numbers.
type SearchQuery_AgentResponse_Numbers struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Queries where value in list provided.
	In []float64 `protobuf:"fixed64,1,rep,packed,name=in,proto3" json:"in,omitempty"`
	// Optional. Queries where greater than or equal.
	Gte *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=gte,proto3" json:"gte,omitempty"`
	// Optional. Queries where less than or equal.
	Lte *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Optional. Queries where greater than.
	Gt *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Optional. Queries where less than.
	Lt *wrapperspb.DoubleValue `protobuf:"bytes,5,opt,name=lt,proto3" json:"lt,omitempty"`
	// Optional. Queries where equal to.
	Eq            *wrapperspb.DoubleValue `protobuf:"bytes,6,opt,name=eq,proto3" json:"eq,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_AgentResponse_Numbers) Reset() {
	*x = SearchQuery_AgentResponse_Numbers{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_AgentResponse_Numbers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_AgentResponse_Numbers) ProtoMessage() {}

func (x *SearchQuery_AgentResponse_Numbers) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_AgentResponse_Numbers.ProtoReflect.Descriptor instead.
func (*SearchQuery_AgentResponse_Numbers) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 15, 1}
}

func (x *SearchQuery_AgentResponse_Numbers) GetIn() []float64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *SearchQuery_AgentResponse_Numbers) GetGte() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *SearchQuery_AgentResponse_Numbers) GetLte() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *SearchQuery_AgentResponse_Numbers) GetGt() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *SearchQuery_AgentResponse_Numbers) GetLt() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Lt
	}
	return nil
}

func (x *SearchQuery_AgentResponse_Numbers) GetEq() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Eq
	}
	return nil
}

// Key defines a query on keys.
type SearchQuery_AgentResponse_Key struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Queries where key in list provided.
	In []string `protobuf:"bytes,1,rep,name=in,proto3" json:"in,omitempty"`
	// Optional. Queries where key starts with given string.
	StartsWith string `protobuf:"bytes,2,opt,name=starts_with,json=startsWith,proto3" json:"starts_with,omitempty"`
	// Optional. Queries where key contains given string.
	Contains      string `protobuf:"bytes,3,opt,name=contains,proto3" json:"contains,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_AgentResponse_Key) Reset() {
	*x = SearchQuery_AgentResponse_Key{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_AgentResponse_Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_AgentResponse_Key) ProtoMessage() {}

func (x *SearchQuery_AgentResponse_Key) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_AgentResponse_Key.ProtoReflect.Descriptor instead.
func (*SearchQuery_AgentResponse_Key) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 15, 2}
}

func (x *SearchQuery_AgentResponse_Key) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *SearchQuery_AgentResponse_Key) GetStartsWith() string {
	if x != nil {
		return x.StartsWith
	}
	return ""
}

func (x *SearchQuery_AgentResponse_Key) GetContains() string {
	if x != nil {
		return x.Contains
	}
	return ""
}

type SearchQuery_Results_Channel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Eq            uint32                 `protobuf:"varint,1,opt,name=eq,proto3" json:"eq,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_Results_Channel) Reset() {
	*x = SearchQuery_Results_Channel{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_Results_Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_Results_Channel) ProtoMessage() {}

func (x *SearchQuery_Results_Channel) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_Results_Channel.ProtoReflect.Descriptor instead.
func (*SearchQuery_Results_Channel) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 16, 0}
}

func (x *SearchQuery_Results_Channel) GetEq() uint32 {
	if x != nil {
		return x.Eq
	}
	return 0
}

type SearchQuery_Results_AgentUserName struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Any           []string               `protobuf:"bytes,1,rep,name=any,proto3" json:"any,omitempty"`
	All           []string               `protobuf:"bytes,2,rep,name=all,proto3" json:"all,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_Results_AgentUserName) Reset() {
	*x = SearchQuery_Results_AgentUserName{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_Results_AgentUserName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_Results_AgentUserName) ProtoMessage() {}

func (x *SearchQuery_Results_AgentUserName) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_Results_AgentUserName.ProtoReflect.Descriptor instead.
func (*SearchQuery_Results_AgentUserName) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 16, 1}
}

func (x *SearchQuery_Results_AgentUserName) GetAny() []string {
	if x != nil {
		return x.Any
	}
	return nil
}

func (x *SearchQuery_Results_AgentUserName) GetAll() []string {
	if x != nil {
		return x.All
	}
	return nil
}

type SearchQuery_Results_Segments struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Text          *SearchQuery_Results_Segments_Text `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_Results_Segments) Reset() {
	*x = SearchQuery_Results_Segments{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_Results_Segments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_Results_Segments) ProtoMessage() {}

func (x *SearchQuery_Results_Segments) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_Results_Segments.ProtoReflect.Descriptor instead.
func (*SearchQuery_Results_Segments) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 16, 2}
}

func (x *SearchQuery_Results_Segments) GetText() *SearchQuery_Results_Segments_Text {
	if x != nil {
		return x.Text
	}
	return nil
}

type SearchQuery_Results_Segments_Text struct {
	state         protoimpl.MessageState                    `protogen:"open.v1"`
	Phrase        *SearchQuery_Results_Segments_Text_Phrase `protobuf:"bytes,1,opt,name=phrase,proto3" json:"phrase,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_Results_Segments_Text) Reset() {
	*x = SearchQuery_Results_Segments_Text{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_Results_Segments_Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_Results_Segments_Text) ProtoMessage() {}

func (x *SearchQuery_Results_Segments_Text) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_Results_Segments_Text.ProtoReflect.Descriptor instead.
func (*SearchQuery_Results_Segments_Text) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 16, 2, 0}
}

func (x *SearchQuery_Results_Segments_Text) GetPhrase() *SearchQuery_Results_Segments_Text_Phrase {
	if x != nil {
		return x.Phrase
	}
	return nil
}

type SearchQuery_Results_Segments_Text_Phrase struct {
	state         protoimpl.MessageState                           `protogen:"open.v1"`
	Words         []*SearchQuery_Results_Segments_Text_Phrase_Word `protobuf:"bytes,1,rep,name=words,proto3" json:"words,omitempty"`
	Slop          uint32                                           `protobuf:"varint,2,opt,name=slop,proto3" json:"slop,omitempty"`
	InOrder       bool                                             `protobuf:"varint,3,opt,name=in_order,json=inOrder,proto3" json:"in_order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_Results_Segments_Text_Phrase) Reset() {
	*x = SearchQuery_Results_Segments_Text_Phrase{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_Results_Segments_Text_Phrase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_Results_Segments_Text_Phrase) ProtoMessage() {}

func (x *SearchQuery_Results_Segments_Text_Phrase) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_Results_Segments_Text_Phrase.ProtoReflect.Descriptor instead.
func (*SearchQuery_Results_Segments_Text_Phrase) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 16, 2, 0, 0}
}

func (x *SearchQuery_Results_Segments_Text_Phrase) GetWords() []*SearchQuery_Results_Segments_Text_Phrase_Word {
	if x != nil {
		return x.Words
	}
	return nil
}

func (x *SearchQuery_Results_Segments_Text_Phrase) GetSlop() uint32 {
	if x != nil {
		return x.Slop
	}
	return 0
}

func (x *SearchQuery_Results_Segments_Text_Phrase) GetInOrder() bool {
	if x != nil {
		return x.InOrder
	}
	return false
}

type SearchQuery_Results_Segments_Text_Phrase_Word struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Fuzziness     string                 `protobuf:"bytes,2,opt,name=fuzziness,proto3" json:"fuzziness,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_Results_Segments_Text_Phrase_Word) Reset() {
	*x = SearchQuery_Results_Segments_Text_Phrase_Word{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_Results_Segments_Text_Phrase_Word) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_Results_Segments_Text_Phrase_Word) ProtoMessage() {}

func (x *SearchQuery_Results_Segments_Text_Phrase_Word) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_Results_Segments_Text_Phrase_Word.ProtoReflect.Descriptor instead.
func (*SearchQuery_Results_Segments_Text_Phrase_Word) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 16, 2, 0, 0, 0}
}

func (x *SearchQuery_Results_Segments_Text_Phrase_Word) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SearchQuery_Results_Segments_Text_Phrase_Word) GetFuzziness() string {
	if x != nil {
		return x.Fuzziness
	}
	return ""
}

// NeedReview defines a query on need review fields.
type SearchQuery_FlagSummary_NeedReview struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Queries flag sids. If no flag sids are given then
	// it will filer on need review count > 0.
	FlagSids      *SearchQuery_FlagSummary_NeedReview_FlagSids `protobuf:"bytes,1,opt,name=flag_sids,json=flagSids,proto3" json:"flag_sids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_FlagSummary_NeedReview) Reset() {
	*x = SearchQuery_FlagSummary_NeedReview{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_FlagSummary_NeedReview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_FlagSummary_NeedReview) ProtoMessage() {}

func (x *SearchQuery_FlagSummary_NeedReview) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_FlagSummary_NeedReview.ProtoReflect.Descriptor instead.
func (*SearchQuery_FlagSummary_NeedReview) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 20, 0}
}

func (x *SearchQuery_FlagSummary_NeedReview) GetFlagSids() *SearchQuery_FlagSummary_NeedReview_FlagSids {
	if x != nil {
		return x.FlagSids
	}
	return nil
}

// ReviewStatus defines a query on review status.
type SearchQuery_FlagSummary_ReviewStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Must have any provided review status.
	Any           []TranscriptReviewStatus `protobuf:"varint,1,rep,packed,name=any,proto3,enum=api.v1alpha1.vanalytics.TranscriptReviewStatus" json:"any,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_FlagSummary_ReviewStatus) Reset() {
	*x = SearchQuery_FlagSummary_ReviewStatus{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_FlagSummary_ReviewStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_FlagSummary_ReviewStatus) ProtoMessage() {}

func (x *SearchQuery_FlagSummary_ReviewStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_FlagSummary_ReviewStatus.ProtoReflect.Descriptor instead.
func (*SearchQuery_FlagSummary_ReviewStatus) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 20, 1}
}

func (x *SearchQuery_FlagSummary_ReviewStatus) GetAny() []TranscriptReviewStatus {
	if x != nil {
		return x.Any
	}
	return nil
}

// Flags defines a query on flags.
type SearchQuery_FlagSummary_Flags struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Queries flag sid.
	FlagSid       *SearchQuery_FlagSummary_Flags_FlagSid `protobuf:"bytes,1,opt,name=flag_sid,json=flagSid,proto3" json:"flag_sid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_FlagSummary_Flags) Reset() {
	*x = SearchQuery_FlagSummary_Flags{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_FlagSummary_Flags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_FlagSummary_Flags) ProtoMessage() {}

func (x *SearchQuery_FlagSummary_Flags) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_FlagSummary_Flags.ProtoReflect.Descriptor instead.
func (*SearchQuery_FlagSummary_Flags) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 20, 2}
}

func (x *SearchQuery_FlagSummary_Flags) GetFlagSid() *SearchQuery_FlagSummary_Flags_FlagSid {
	if x != nil {
		return x.FlagSid
	}
	return nil
}

// Count defines a query on count.
type SearchQuery_FlagSummary_Count struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Queries count greater than or equal.
	Gte *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=gte,proto3" json:"gte,omitempty"`
	// Optional. Queries count less than or equal.
	Lte *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=lte,proto3" json:"lte,omitempty"`
	// Optional. Queries count greater than.
	Gt *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=gt,proto3" json:"gt,omitempty"`
	// Optional. Queries count less than.
	Lt *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=lt,proto3" json:"lt,omitempty"`
	// Optional. Queries count equal to.
	Eq            *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=eq,proto3" json:"eq,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_FlagSummary_Count) Reset() {
	*x = SearchQuery_FlagSummary_Count{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_FlagSummary_Count) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_FlagSummary_Count) ProtoMessage() {}

func (x *SearchQuery_FlagSummary_Count) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_FlagSummary_Count.ProtoReflect.Descriptor instead.
func (*SearchQuery_FlagSummary_Count) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 20, 3}
}

func (x *SearchQuery_FlagSummary_Count) GetGte() *wrapperspb.Int32Value {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *SearchQuery_FlagSummary_Count) GetLte() *wrapperspb.Int32Value {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *SearchQuery_FlagSummary_Count) GetGt() *wrapperspb.Int32Value {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *SearchQuery_FlagSummary_Count) GetLt() *wrapperspb.Int32Value {
	if x != nil {
		return x.Lt
	}
	return nil
}

func (x *SearchQuery_FlagSummary_Count) GetEq() *wrapperspb.Int32Value {
	if x != nil {
		return x.Eq
	}
	return nil
}

// FlagSids defines a query on flag sids.
type SearchQuery_FlagSummary_NeedReview_FlagSids struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Must have any provided flag sids.
	Any           []int64 `protobuf:"varint,1,rep,packed,name=any,proto3" json:"any,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_FlagSummary_NeedReview_FlagSids) Reset() {
	*x = SearchQuery_FlagSummary_NeedReview_FlagSids{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_FlagSummary_NeedReview_FlagSids) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_FlagSummary_NeedReview_FlagSids) ProtoMessage() {}

func (x *SearchQuery_FlagSummary_NeedReview_FlagSids) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_FlagSummary_NeedReview_FlagSids.ProtoReflect.Descriptor instead.
func (*SearchQuery_FlagSummary_NeedReview_FlagSids) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 20, 0, 0}
}

func (x *SearchQuery_FlagSummary_NeedReview_FlagSids) GetAny() []int64 {
	if x != nil {
		return x.Any
	}
	return nil
}

// FlagSid defines a query on flag sid.
type SearchQuery_FlagSummary_Flags_FlagSid struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Must have any of the provided flag sids.
	Any []int64 `protobuf:"varint,1,rep,packed,name=any,proto3" json:"any,omitempty"`
	// Optional. Must have all of the provided flag sids.
	All           []int64 `protobuf:"varint,2,rep,packed,name=all,proto3" json:"all,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery_FlagSummary_Flags_FlagSid) Reset() {
	*x = SearchQuery_FlagSummary_Flags_FlagSid{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery_FlagSummary_Flags_FlagSid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery_FlagSummary_Flags_FlagSid) ProtoMessage() {}

func (x *SearchQuery_FlagSummary_Flags_FlagSid) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery_FlagSummary_Flags_FlagSid.ProtoReflect.Descriptor instead.
func (*SearchQuery_FlagSummary_Flags_FlagSid) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{5, 20, 2, 0}
}

func (x *SearchQuery_FlagSummary_Flags_FlagSid) GetAny() []int64 {
	if x != nil {
		return x.Any
	}
	return nil
}

func (x *SearchQuery_FlagSummary_Flags_FlagSid) GetAll() []int64 {
	if x != nil {
		return x.All
	}
	return nil
}

type SearchResponse_Hit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Transcript    *Transcript            `protobuf:"bytes,1,opt,name=transcript,proto3" json:"transcript,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchResponse_Hit) Reset() {
	*x = SearchResponse_Hit{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchResponse_Hit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse_Hit) ProtoMessage() {}

func (x *SearchResponse_Hit) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse_Hit.ProtoReflect.Descriptor instead.
func (*SearchResponse_Hit) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{6, 0}
}

func (x *SearchResponse_Hit) GetTranscript() *Transcript {
	if x != nil {
		return x.Transcript
	}
	return nil
}

type Sort_Field struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Desc          bool                   `protobuf:"varint,2,opt,name=desc,proto3" json:"desc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sort_Field) Reset() {
	*x = Sort_Field{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sort_Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sort_Field) ProtoMessage() {}

func (x *Sort_Field) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sort_Field.ProtoReflect.Descriptor instead.
func (*Sort_Field) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{10, 0}
}

func (x *Sort_Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sort_Field) GetDesc() bool {
	if x != nil {
		return x.Desc
	}
	return false
}

// A sentiment sample.
type Sentiment_Sample struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Estimate for the sample.
	Estimate *Sentiment_Estimate `protobuf:"bytes,1,opt,name=estimate,proto3" json:"estimate,omitempty"`
	// Offset of the sample.
	Offset *durationpb.Duration `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// Duration of the sample (may be empty for certain transcript kinds).
	Duration      *durationpb.Duration `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sentiment_Sample) Reset() {
	*x = Sentiment_Sample{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sentiment_Sample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sentiment_Sample) ProtoMessage() {}

func (x *Sentiment_Sample) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sentiment_Sample.ProtoReflect.Descriptor instead.
func (*Sentiment_Sample) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{18, 0}
}

func (x *Sentiment_Sample) GetEstimate() *Sentiment_Estimate {
	if x != nil {
		return x.Estimate
	}
	return nil
}

func (x *Sentiment_Sample) GetOffset() *durationpb.Duration {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *Sentiment_Sample) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

// A sentiment estimate.
type Sentiment_Estimate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Portion of text deemed positive.
	Positive float32 `protobuf:"fixed32,1,opt,name=positive,proto3" json:"positive,omitempty"`
	// Portion of text deemed neutral.
	Neutral float32 `protobuf:"fixed32,2,opt,name=neutral,proto3" json:"neutral,omitempty"`
	// Portion of text deemed negative.
	Negative      float32 `protobuf:"fixed32,3,opt,name=negative,proto3" json:"negative,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sentiment_Estimate) Reset() {
	*x = Sentiment_Estimate{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sentiment_Estimate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sentiment_Estimate) ProtoMessage() {}

func (x *Sentiment_Estimate) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sentiment_Estimate.ProtoReflect.Descriptor instead.
func (*Sentiment_Estimate) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{18, 1}
}

func (x *Sentiment_Estimate) GetPositive() float32 {
	if x != nil {
		return x.Positive
	}
	return 0
}

func (x *Sentiment_Estimate) GetNeutral() float32 {
	if x != nil {
		return x.Neutral
	}
	return 0
}

func (x *Sentiment_Estimate) GetNegative() float32 {
	if x != nil {
		return x.Negative
	}
	return 0
}

type Silence_Duration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// total in milliseconds
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// max in milliseconds
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// percentage of silence in transcript from 0-100
	Percentage    uint32 `protobuf:"varint,3,opt,name=percentage,proto3" json:"percentage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Silence_Duration) Reset() {
	*x = Silence_Duration{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Silence_Duration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Silence_Duration) ProtoMessage() {}

func (x *Silence_Duration) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Silence_Duration.ProtoReflect.Descriptor instead.
func (*Silence_Duration) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{21, 0}
}

func (x *Silence_Duration) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Silence_Duration) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *Silence_Duration) GetPercentage() uint32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

type Silence_Segment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// begin time in milliseconds
	BeginTime uint32 `protobuf:"varint,1,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	// duration in milliseconds
	Duration      uint32 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Silence_Segment) Reset() {
	*x = Silence_Segment{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Silence_Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Silence_Segment) ProtoMessage() {}

func (x *Silence_Segment) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Silence_Segment.ProtoReflect.Descriptor instead.
func (*Silence_Segment) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{21, 1}
}

func (x *Silence_Segment) GetBeginTime() uint32 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *Silence_Segment) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type Silence_Occurrence struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// total in milliseconds
	Total         uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Silence_Occurrence) Reset() {
	*x = Silence_Occurrence{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Silence_Occurrence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Silence_Occurrence) ProtoMessage() {}

func (x *Silence_Occurrence) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Silence_Occurrence.ProtoReflect.Descriptor instead.
func (*Silence_Occurrence) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{21, 2}
}

func (x *Silence_Occurrence) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type TalkOver_Duration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// total in milliseconds
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// max in milliseconds
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// percentage of talkover in transcript from 0-100
	Percentage    uint32 `protobuf:"varint,3,opt,name=percentage,proto3" json:"percentage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TalkOver_Duration) Reset() {
	*x = TalkOver_Duration{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TalkOver_Duration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkOver_Duration) ProtoMessage() {}

func (x *TalkOver_Duration) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkOver_Duration.ProtoReflect.Descriptor instead.
func (*TalkOver_Duration) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{22, 0}
}

func (x *TalkOver_Duration) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TalkOver_Duration) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *TalkOver_Duration) GetPercentage() uint32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

type TalkOver_Result struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Channel         int32                  `protobuf:"varint,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Occurrence      *TalkOver_Occurrence   `protobuf:"bytes,2,opt,name=occurrence,proto3" json:"occurrence,omitempty"`
	Duration        *TalkOver_Duration     `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Segments        []*TalkOver_Segment    `protobuf:"bytes,4,rep,name=segments,proto3" json:"segments,omitempty"`
	AgentUserName   string                 `protobuf:"bytes,5,opt,name=agent_user_name,json=agentUserName,proto3" json:"agent_user_name,omitempty"`
	AgentSessionSid int64                  `protobuf:"varint,6,opt,name=agent_session_sid,json=agentSessionSid,proto3" json:"agent_session_sid,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TalkOver_Result) Reset() {
	*x = TalkOver_Result{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TalkOver_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkOver_Result) ProtoMessage() {}

func (x *TalkOver_Result) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkOver_Result.ProtoReflect.Descriptor instead.
func (*TalkOver_Result) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{22, 1}
}

func (x *TalkOver_Result) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *TalkOver_Result) GetOccurrence() *TalkOver_Occurrence {
	if x != nil {
		return x.Occurrence
	}
	return nil
}

func (x *TalkOver_Result) GetDuration() *TalkOver_Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *TalkOver_Result) GetSegments() []*TalkOver_Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *TalkOver_Result) GetAgentUserName() string {
	if x != nil {
		return x.AgentUserName
	}
	return ""
}

func (x *TalkOver_Result) GetAgentSessionSid() int64 {
	if x != nil {
		return x.AgentSessionSid
	}
	return 0
}

type TalkOver_Segment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// begin time in milliseconds
	BeginTime uint32 `protobuf:"varint,1,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	// duration in milliseconds
	Duration      uint32 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TalkOver_Segment) Reset() {
	*x = TalkOver_Segment{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TalkOver_Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkOver_Segment) ProtoMessage() {}

func (x *TalkOver_Segment) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkOver_Segment.ProtoReflect.Descriptor instead.
func (*TalkOver_Segment) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{22, 2}
}

func (x *TalkOver_Segment) GetBeginTime() uint32 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *TalkOver_Segment) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type TalkOver_Occurrence struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// total in milliseconds
	Total         uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TalkOver_Occurrence) Reset() {
	*x = TalkOver_Occurrence{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TalkOver_Occurrence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkOver_Occurrence) ProtoMessage() {}

func (x *TalkOver_Occurrence) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkOver_Occurrence.ProtoReflect.Descriptor instead.
func (*TalkOver_Occurrence) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{22, 3}
}

func (x *TalkOver_Occurrence) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// NeedReview defines flags which need to be reviewed.
type FlagSummary_NeedReview struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The sum of the priorities of the flags that need review.
	PrioritySum int32 `protobuf:"varint,1,opt,name=priority_sum,json=prioritySum,proto3" json:"priority_sum,omitempty"`
	// The highest priority of the flags that need review.
	PriorityMax int32 `protobuf:"varint,2,opt,name=priority_max,json=priorityMax,proto3" json:"priority_max,omitempty"`
	// The number of flags that need review.
	Count int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	// The Flag sids that need review.
	FlagSids      []int64 `protobuf:"varint,4,rep,packed,name=flag_sids,json=flagSids,proto3" json:"flag_sids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlagSummary_NeedReview) Reset() {
	*x = FlagSummary_NeedReview{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlagSummary_NeedReview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagSummary_NeedReview) ProtoMessage() {}

func (x *FlagSummary_NeedReview) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagSummary_NeedReview.ProtoReflect.Descriptor instead.
func (*FlagSummary_NeedReview) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{23, 0}
}

func (x *FlagSummary_NeedReview) GetPrioritySum() int32 {
	if x != nil {
		return x.PrioritySum
	}
	return 0
}

func (x *FlagSummary_NeedReview) GetPriorityMax() int32 {
	if x != nil {
		return x.PriorityMax
	}
	return 0
}

func (x *FlagSummary_NeedReview) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FlagSummary_NeedReview) GetFlagSids() []int64 {
	if x != nil {
		return x.FlagSids
	}
	return nil
}

// Flag defines a flag that was applied to a transcript by one or more filters
// along with a user review when one exists.
type FlagSummary_Flag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique id of this flag.
	FlagSid int64 `protobuf:"varint,1,opt,name=flag_sid,json=flagSid,proto3" json:"flag_sid,omitempty"`
	// The name of this flag.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The priority of this flag.
	Priority int32 `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	// The version of this flag.
	Version int64 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	// Filters which applied this flag.
	Filters []*FlagSummary_Filter `protobuf:"bytes,5,rep,name=filters,proto3" json:"filters,omitempty"`
	// Determines whether this flag must be reviewed.
	MustReview bool `protobuf:"varint,6,opt,name=must_review,json=mustReview,proto3" json:"must_review,omitempty"`
	// Determines whether this flag must be notified.
	MustNotify bool `protobuf:"varint,7,opt,name=must_notify,json=mustNotify,proto3" json:"must_notify,omitempty"`
	// The reviews of this flag.
	Reviews       []*FlagSummary_Review `protobuf:"bytes,8,rep,name=reviews,proto3" json:"reviews,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlagSummary_Flag) Reset() {
	*x = FlagSummary_Flag{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlagSummary_Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagSummary_Flag) ProtoMessage() {}

func (x *FlagSummary_Flag) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagSummary_Flag.ProtoReflect.Descriptor instead.
func (*FlagSummary_Flag) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{23, 1}
}

func (x *FlagSummary_Flag) GetFlagSid() int64 {
	if x != nil {
		return x.FlagSid
	}
	return 0
}

func (x *FlagSummary_Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlagSummary_Flag) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *FlagSummary_Flag) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *FlagSummary_Flag) GetFilters() []*FlagSummary_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *FlagSummary_Flag) GetMustReview() bool {
	if x != nil {
		return x.MustReview
	}
	return false
}

func (x *FlagSummary_Flag) GetMustNotify() bool {
	if x != nil {
		return x.MustNotify
	}
	return false
}

func (x *FlagSummary_Flag) GetReviews() []*FlagSummary_Review {
	if x != nil {
		return x.Reviews
	}
	return nil
}

// Filter defines a filter which applied some flag to some transcript.
type FlagSummary_Filter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The join key in form [flag_sid:filter_sid].
	JoinKey string `protobuf:"bytes,1,opt,name=join_key,json=joinKey,proto3" json:"join_key,omitempty"`
	// The flag sid this filter belongs to.
	FlagSid int64 `protobuf:"varint,2,opt,name=flag_sid,json=flagSid,proto3" json:"flag_sid,omitempty"`
	// The unique id of this filter.
	FilterSid int64 `protobuf:"varint,3,opt,name=filter_sid,json=filterSid,proto3" json:"filter_sid,omitempty"`
	// The version of this filter.
	Version int64 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	// The name of this filter.
	Name          string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlagSummary_Filter) Reset() {
	*x = FlagSummary_Filter{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlagSummary_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagSummary_Filter) ProtoMessage() {}

func (x *FlagSummary_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagSummary_Filter.ProtoReflect.Descriptor instead.
func (*FlagSummary_Filter) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{23, 2}
}

func (x *FlagSummary_Filter) GetJoinKey() string {
	if x != nil {
		return x.JoinKey
	}
	return ""
}

func (x *FlagSummary_Filter) GetFlagSid() int64 {
	if x != nil {
		return x.FlagSid
	}
	return 0
}

func (x *FlagSummary_Filter) GetFilterSid() int64 {
	if x != nil {
		return x.FilterSid
	}
	return 0
}

func (x *FlagSummary_Filter) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *FlagSummary_Filter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Review contains info on the flag review when one exists.
type FlagSummary_Review struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The join key in form [flag_sid:user_id].
	JoinKey string `protobuf:"bytes,1,opt,name=join_key,json=joinKey,proto3" json:"join_key,omitempty"`
	// The flag sid this review belongs to.
	FlagSid int64 `protobuf:"varint,2,opt,name=flag_sid,json=flagSid,proto3" json:"flag_sid,omitempty"`
	// The user id of the reviewer.
	UserId        string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlagSummary_Review) Reset() {
	*x = FlagSummary_Review{}
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlagSummary_Review) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagSummary_Review) ProtoMessage() {}

func (x *FlagSummary_Review) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_transcript_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagSummary_Review.ProtoReflect.Descriptor instead.
func (*FlagSummary_Review) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP(), []int{23, 3}
}

func (x *FlagSummary_Review) GetJoinKey() string {
	if x != nil {
		return x.JoinKey
	}
	return ""
}

func (x *FlagSummary_Review) GetFlagSid() int64 {
	if x != nil {
		return x.FlagSid
	}
	return 0
}

func (x *FlagSummary_Review) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

var File_api_v1alpha1_vanalytics_transcript_proto protoreflect.FileDescriptor

var file_api_v1alpha1_vanalytics_transcript_proto_rawDesc = []byte{
	0x0a, 0x28, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x76,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x63, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2f, 0x61, 0x63, 0x6c, 0x70, 0x62, 0x2f, 0x61, 0x63, 0x6c, 0x70, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x65, 0x78, 0x70,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5c, 0x0a, 0x1c,
	0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x35, 0x0a, 0x1d, 0x42, 0x75,
	0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x5d, 0x0a, 0x1d, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x22, 0x36, 0x0a, 0x1e, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xc1, 0x17, 0x0a, 0x0d, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x07, 0x73, 0x69,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x73, 0x69, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x78, 0x70, 0x72, 0x52, 0x08, 0x74, 0x61,
	0x6c, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x47, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54,
	0x61, 0x6c, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x08, 0x74, 0x61, 0x6c, 0x6b, 0x4f, 0x76, 0x65,
	0x72, 0x12, 0x42, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x52, 0x05,
	0x74, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x45, 0x0a, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x52, 0x06,
	0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x69, 0x64, 0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0d, 0x63, 0x61,
	0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x63, 0x61, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73,
	0x69, 0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x53,
	0x69, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x68, 0x75,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x12, 0x3a,
	0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x1a,
	0xa9, 0x04, 0x0a, 0x06, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x09, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50,
	0x68, 0x72, 0x61, 0x73, 0x65, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x09, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x6f,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6e, 0x6f, 0x74, 0x12, 0x42, 0x0a, 0x05,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x5e, 0x0a, 0x0f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x3a, 0x0a, 0x04, 0x57, 0x6f,
	0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x75, 0x7a, 0x7a,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x75, 0x7a,
	0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x1a, 0x43, 0x0a, 0x09, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x54, 0x61, 0x67, 0x73, 0x1a, 0x70, 0x0a, 0x0e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2f, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2d,
	0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x1a, 0xc3, 0x02,
	0x0a, 0x07, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x78, 0x70, 0x72,
	0x52, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x12, 0x4e, 0x0a,
	0x10, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0f, 0x6f, 0x63,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x54, 0x0a,
	0x13, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x78, 0x70, 0x72, 0x52,
	0x12, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x1a, 0xc4, 0x02, 0x0a, 0x08, 0x54, 0x61, 0x6c, 0x6b, 0x4f, 0x76, 0x65, 0x72,
	0x12, 0x4a, 0x0a, 0x0e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0d, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x0c,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x78, 0x12, 0x4e, 0x0a, 0x10, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45,
	0x78, 0x70, 0x72, 0x52, 0x0f, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x54, 0x0a, 0x13, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x45, 0x78, 0x70, 0x72, 0x52, 0x12, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x1a, 0xfb, 0x01, 0x0a, 0x05, 0x54,
	0x65, 0x72, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x6f, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6e, 0x6f, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x5e, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x8b, 0x01, 0x0a, 0x05, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x52, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x2e, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x6e, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xcd, 0x28, 0x0a,
	0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x59, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x69, 0x64, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x53, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x0c, 0x66, 0x6c, 0x61, 0x67, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x0b, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x02,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x02,
	0x6f, 0x72, 0x12, 0x36, 0x0a, 0x03, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x03, 0x61, 0x6e, 0x64, 0x12, 0x4d, 0x0a, 0x0a, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x6e,
	0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x03,
	0x6e, 0x6f, 0x74, 0x12, 0x46, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x0e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f,
	0x67, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x12,
	0x40, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x1a, 0xf5, 0x05, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x37, 0x0a, 0x02, 0x63,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x63,
	0x52, 0x02, 0x63, 0x63, 0x12, 0x3a, 0x0a, 0x03, 0x6e, 0x64, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x64, 0x63, 0x52, 0x03, 0x6e, 0x64, 0x63,
	0x12, 0x43, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x3d, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x04, 0x69, 0x73, 0x6f, 0x32, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x73, 0x6f, 0x32, 0x52, 0x04, 0x69,
	0x73, 0x6f, 0x32, 0x12, 0x50, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a,
	0x6f, 0x6e, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x3a, 0x0a, 0x03, 0x75, 0x74, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x74, 0x63, 0x52, 0x03, 0x75, 0x74, 0x63, 0x12, 0x49,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x14, 0x0a, 0x02, 0x43, 0x63, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x6e, 0x1a,
	0x15, 0x0a, 0x03, 0x4e, 0x64, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x6e, 0x1a, 0x18, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x6e,
	0x1a, 0x16, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x6e, 0x1a, 0x16, 0x0a, 0x04, 0x49, 0x73, 0x6f, 0x32,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x6e,
	0x1a, 0x1c, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x6e, 0x1a, 0x1c,
	0x0a, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x6e, 0x1a, 0x1a, 0x0a, 0x08,
	0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x6e, 0x1a, 0x16, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x6e,
	0x1a, 0x15, 0x0a, 0x03, 0x55, 0x74, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x02, 0x52, 0x02, 0x69, 0x6e, 0x1a, 0xe6, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x12, 0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79,
	0x52, 0x10, 0x7a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69,
	0x74, 0x79, 0x1a, 0x6c, 0x0a, 0x10, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f,
	0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x7a, 0x69, 0x70,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x69, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x1a, 0xc5, 0x01, 0x0a, 0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f,
	0x67, 0x12, 0x66, 0x0a, 0x13, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x0a, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x09, 0x63,
	0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x1a, 0x49, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x6c,
	0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f,
	0x67, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x07, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x1a, 0x3b, 0x0a, 0x11, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x77, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x77, 0x61, 0x6e, 0x74,
	0x1a, 0xb3, 0x05, 0x0a, 0x0d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x54, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x07, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x55, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x1a, 0x83, 0x02, 0x0a,
	0x07, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x01, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x02, 0x67, 0x74, 0x12, 0x2c, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x02, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02,
	0x65, 0x71, 0x1a, 0x52, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x1a, 0xf5, 0x05, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x4e, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x62, 0x0a, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x19, 0x0a, 0x07, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x65, 0x71, 0x1a, 0x33, 0x0a, 0x0d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x1a, 0x92, 0x03, 0x0a, 0x08, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xb5, 0x02, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x59, 0x0a, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x50, 0x68, 0x72, 0x61,
	0x73, 0x65, 0x52, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x1a, 0xd1, 0x01, 0x0a, 0x06, 0x50,
	0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x2e, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x1a, 0x3a, 0x0a, 0x04, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x1a, 0x40,
	0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x06,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x1a, 0x50, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03,
	0x61, 0x6e, 0x79, 0x12, 0x2d, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x67,
	0x74, 0x65, 0x1a, 0xc3, 0x01, 0x0a, 0x09, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12,
	0x2d, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x67, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x67, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x6c,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x6c, 0x74, 0x1a, 0xd1, 0x07, 0x0a, 0x0b, 0x46, 0x6c, 0x61,
	0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x5c, 0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e,
	0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x62, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x46, 0x6c, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x4c, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x6c,
	0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x8d, 0x01, 0x0a, 0x0a, 0x4e, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x61, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46,
	0x6c, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x69, 0x64, 0x73, 0x52, 0x08,
	0x66, 0x6c, 0x61, 0x67, 0x53, 0x69, 0x64, 0x73, 0x1a, 0x1c, 0x0a, 0x08, 0x46, 0x6c, 0x61, 0x67,
	0x53, 0x69, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a, 0x51, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a, 0x91, 0x01, 0x0a, 0x05, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x59, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x2e, 0x46, 0x6c,
	0x61, 0x67, 0x53, 0x69, 0x64, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x69, 0x64, 0x1a, 0x2d,
	0x0a, 0x07, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x6c, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x1a, 0xec, 0x01,
	0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x03, 0x6c, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02,
	0x67, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x6c, 0x74, 0x12,
	0x2b, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x65, 0x71, 0x22, 0xe6, 0x01, 0x0a,
	0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x04, 0x68, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x69, 0x74,
	0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x1a, 0x4a, 0x0a, 0x03, 0x48, 0x69, 0x74,
	0x12, 0x43, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x74, 0x0a, 0x11, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x5f, 0x0a, 0x13, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x92, 0x01, 0x0a, 0x16,
	0x43, 0x61, 0x6c, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x65, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x56,
	0x61, 0x6e, 0x61, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x04, 0x6e,
	0x65, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x04, 0x77, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x61, 0x6e, 0x61,
	0x54, 0x65, 0x72, 0x6d, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x04, 0x77, 0x61, 0x6e, 0x74,
	0x22, 0x4e, 0x0a, 0x0e, 0x56, 0x61, 0x6e, 0x61, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x63, 0x6b,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c,
	0x22, 0x8a, 0x01, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x1a, 0x2f, 0x0a, 0x05,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x21, 0x0a,
	0x1f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x71, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0x2b, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x32, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0x39, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0x88, 0x09, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x53, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64,
	0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x61, 0x6c, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x09, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x61, 0x6c, 0x6b,
	0x4f, 0x76, 0x65, 0x72, 0x52, 0x08, 0x74, 0x61, 0x6c, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a,
	0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x61, 0x63, 0x6c, 0x70, 0x62, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4c,
	0x6f, 0x67, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67,
	0x12, 0x47, 0x0a, 0x0c, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x66, 0x6c,
	0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x5d, 0x0a, 0x0e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x16, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x1a, 0x68, 0x0a, 0x12, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x91, 0x03, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x3c, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xeb,
	0x04, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x07, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x6c, 0x6c, 0x12, 0x3a, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6e, 0x65, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x08, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6e, 0x65, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e,
	0x74, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x6e, 0x65, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x1a, 0xbb, 0x01, 0x0a, 0x06, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x08, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x5c,
	0x0a, 0x08, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x22, 0xad, 0x01, 0x0a,
	0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x95, 0x01, 0x0a,
	0x04, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x70, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x70, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x61,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x64, 0x61,
	0x63, 0x74, 0x65, 0x64, 0x22, 0xbf, 0x03, 0x0a, 0x07, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x45, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x69, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4b, 0x0a,
	0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x69, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a,
	0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0x52, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x1a, 0x44, 0x0a, 0x07,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x22, 0x0a, 0x0a, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x96, 0x06, 0x0a, 0x08, 0x54, 0x61, 0x6c, 0x6b, 0x4f,
	0x76, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x46, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x61,
	0x6c, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0x52, 0x0a, 0x08, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x1a,
	0xd3, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x4c, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x2e, 0x4f, 0x63, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x54,
	0x61, 0x6c, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x08, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x64, 0x1a, 0x44, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x22, 0x0a, 0x0a, 0x4f,
	0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0xff, 0x07, 0x0a, 0x0b, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x78, 0x12, 0x50, 0x0a, 0x0b, 0x6e,
	0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3f, 0x0a,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x54,
	0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x1a, 0x85, 0x01, 0x0a, 0x0a, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x69, 0x64, 0x73, 0x1a, 0xbb, 0x02, 0x0a,
	0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x75, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x45, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x46,
	0x6c, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x07, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x1a, 0x8b, 0x01, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x4b, 0x65, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x57, 0x0a, 0x06, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x27, 0x0a, 0x0d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xaf, 0x02, 0x0a, 0x14, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x53, 0x0a, 0x0c, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2a, 0x81, 0x01, 0x0a,
	0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x43, 0x52, 0x49, 0x50, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x54, 0x4f, 0x44, 0x4f, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a,
	0x1d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x49,
	0x45, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02,
	0x42, 0xe0, 0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x42, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x76, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0xa2, 0x02, 0x03, 0x41, 0x56, 0x56, 0xaa, 0x02, 0x17,
	0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0xca, 0x02, 0x17, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x56, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0xe2, 0x02, 0x23, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x5c, 0x56, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3a, 0x3a, 0x56, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1alpha1_vanalytics_transcript_proto_rawDescOnce sync.Once
	file_api_v1alpha1_vanalytics_transcript_proto_rawDescData = file_api_v1alpha1_vanalytics_transcript_proto_rawDesc
)

func file_api_v1alpha1_vanalytics_transcript_proto_rawDescGZIP() []byte {
	file_api_v1alpha1_vanalytics_transcript_proto_rawDescOnce.Do(func() {
		file_api_v1alpha1_vanalytics_transcript_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1alpha1_vanalytics_transcript_proto_rawDescData)
	})
	return file_api_v1alpha1_vanalytics_transcript_proto_rawDescData
}

var file_api_v1alpha1_vanalytics_transcript_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_v1alpha1_vanalytics_transcript_proto_msgTypes = make([]protoimpl.MessageInfo, 88)
var file_api_v1alpha1_vanalytics_transcript_proto_goTypes = []any{
	(TranscriptReviewStatus)(0),                           // 0: api.v1alpha1.vanalytics.TranscriptReviewStatus
	(*BulkDeleteTranscriptsRequest)(nil),                  // 1: api.v1alpha1.vanalytics.BulkDeleteTranscriptsRequest
	(*BulkDeleteTranscriptsResponse)(nil),                 // 2: api.v1alpha1.vanalytics.BulkDeleteTranscriptsResponse
	(*BulkRestoreTranscriptsRequest)(nil),                 // 3: api.v1alpha1.vanalytics.BulkRestoreTranscriptsRequest
	(*BulkRestoreTranscriptsResponse)(nil),                // 4: api.v1alpha1.vanalytics.BulkRestoreTranscriptsResponse
	(*SearchRequest)(nil),                                 // 5: api.v1alpha1.vanalytics.SearchRequest
	(*SearchQuery)(nil),                                   // 6: api.v1alpha1.vanalytics.SearchQuery
	(*SearchResponse)(nil),                                // 7: api.v1alpha1.vanalytics.SearchResponse
	(*AgentCallLogQuery)(nil),                             // 8: api.v1alpha1.vanalytics.AgentCallLogQuery
	(*CallSkillsInitialQuery)(nil),                        // 9: api.v1alpha1.vanalytics.CallSkillsInitialQuery
	(*VanaTermsQuery)(nil),                                // 10: api.v1alpha1.vanalytics.VanaTermsQuery
	(*Sort)(nil),                                          // 11: api.v1alpha1.vanalytics.Sort
	(*ListTranscriptGroupNamesRequest)(nil),               // 12: api.v1alpha1.vanalytics.ListTranscriptGroupNamesRequest
	(*ListTranscriptGroupNamesResponse)(nil),              // 13: api.v1alpha1.vanalytics.ListTranscriptGroupNamesResponse
	(*TranscriptGroupName)(nil),                           // 14: api.v1alpha1.vanalytics.TranscriptGroupName
	(*ListAgentResponseValuesRequest)(nil),                // 15: api.v1alpha1.vanalytics.ListAgentResponseValuesRequest
	(*ListAgentResponseValuesResponse)(nil),               // 16: api.v1alpha1.vanalytics.ListAgentResponseValuesResponse
	(*Transcript)(nil),                                    // 17: api.v1alpha1.vanalytics.Transcript
	(*Result)(nil),                                        // 18: api.v1alpha1.vanalytics.Result
	(*Sentiment)(nil),                                     // 19: api.v1alpha1.vanalytics.Sentiment
	(*Segment)(nil),                                       // 20: api.v1alpha1.vanalytics.Segment
	(*Word)(nil),                                          // 21: api.v1alpha1.vanalytics.Word
	(*Silence)(nil),                                       // 22: api.v1alpha1.vanalytics.Silence
	(*TalkOver)(nil),                                      // 23: api.v1alpha1.vanalytics.TalkOver
	(*FlagSummary)(nil),                                   // 24: api.v1alpha1.vanalytics.FlagSummary
	(*AgentResponse)(nil),                                 // 25: api.v1alpha1.vanalytics.AgentResponse
	(*SearchByOrgIdRequest)(nil),                          // 26: api.v1alpha1.vanalytics.SearchByOrgIdRequest
	(*SearchRequest_Phrase)(nil),                          // 27: api.v1alpha1.vanalytics.SearchRequest.Phrase
	(*SearchRequest_PositionOffset)(nil),                  // 28: api.v1alpha1.vanalytics.SearchRequest.PositionOffset
	(*SearchRequest_Silence)(nil),                         // 29: api.v1alpha1.vanalytics.SearchRequest.Silence
	(*SearchRequest_TalkOver)(nil),                        // 30: api.v1alpha1.vanalytics.SearchRequest.TalkOver
	(*SearchRequest_Terms)(nil),                           // 31: api.v1alpha1.vanalytics.SearchRequest.Terms
	(*SearchRequest_Agent)(nil),                           // 32: api.v1alpha1.vanalytics.SearchRequest.Agent
	(*SearchRequest_Phrase_Word)(nil),                     // 33: api.v1alpha1.vanalytics.SearchRequest.Phrase.Word
	(*SearchRequest_Phrase_Highlight)(nil),                // 34: api.v1alpha1.vanalytics.SearchRequest.Phrase.Highlight
	(*SearchRequest_Agent_UserName)(nil),                  // 35: api.v1alpha1.vanalytics.SearchRequest.Agent.UserName
	(*SearchQuery_Phone)(nil),                             // 36: api.v1alpha1.vanalytics.SearchQuery.Phone
	(*SearchQuery_Cc)(nil),                                // 37: api.v1alpha1.vanalytics.SearchQuery.Cc
	(*SearchQuery_Ndc)(nil),                               // 38: api.v1alpha1.vanalytics.SearchQuery.Ndc
	(*SearchQuery_Prefix)(nil),                            // 39: api.v1alpha1.vanalytics.SearchQuery.Prefix
	(*SearchQuery_City)(nil),                              // 40: api.v1alpha1.vanalytics.SearchQuery.City
	(*SearchQuery_Iso2)(nil),                              // 41: api.v1alpha1.vanalytics.SearchQuery.Iso2
	(*SearchQuery_RegionCode)(nil),                        // 42: api.v1alpha1.vanalytics.SearchQuery.RegionCode
	(*SearchQuery_RegionName)(nil),                        // 43: api.v1alpha1.vanalytics.SearchQuery.RegionName
	(*SearchQuery_TimeZone)(nil),                          // 44: api.v1alpha1.vanalytics.SearchQuery.TimeZone
	(*SearchQuery_Type)(nil),                              // 45: api.v1alpha1.vanalytics.SearchQuery.Type
	(*SearchQuery_Utc)(nil),                               // 46: api.v1alpha1.vanalytics.SearchQuery.Utc
	(*SearchQuery_Location)(nil),                          // 47: api.v1alpha1.vanalytics.SearchQuery.Location
	(*SearchQuery_AgentCallLog)(nil),                      // 48: api.v1alpha1.vanalytics.SearchQuery.AgentCallLog
	(*SearchQuery_CallEnded)(nil),                         // 49: api.v1alpha1.vanalytics.SearchQuery.CallEnded
	(*SearchQuery_CallSkillsInitial)(nil),                 // 50: api.v1alpha1.vanalytics.SearchQuery.CallSkillsInitial
	(*SearchQuery_AgentResponse)(nil),                     // 51: api.v1alpha1.vanalytics.SearchQuery.AgentResponse
	(*SearchQuery_Results)(nil),                           // 52: api.v1alpha1.vanalytics.SearchQuery.Results
	(*SearchQuery_DeleteTime)(nil),                        // 53: api.v1alpha1.vanalytics.SearchQuery.DeleteTime
	(*SearchQuery_TranscriptSid)(nil),                     // 54: api.v1alpha1.vanalytics.SearchQuery.TranscriptSid
	(*SearchQuery_AudioTime)(nil),                         // 55: api.v1alpha1.vanalytics.SearchQuery.AudioTime
	(*SearchQuery_FlagSummary)(nil),                       // 56: api.v1alpha1.vanalytics.SearchQuery.FlagSummary
	(*SearchQuery_Location_ZipCodeProximity)(nil),         // 57: api.v1alpha1.vanalytics.SearchQuery.Location.ZipCodeProximity
	(*SearchQuery_AgentResponse_Values)(nil),              // 58: api.v1alpha1.vanalytics.SearchQuery.AgentResponse.Values
	(*SearchQuery_AgentResponse_Numbers)(nil),             // 59: api.v1alpha1.vanalytics.SearchQuery.AgentResponse.Numbers
	(*SearchQuery_AgentResponse_Key)(nil),                 // 60: api.v1alpha1.vanalytics.SearchQuery.AgentResponse.Key
	(*SearchQuery_Results_Channel)(nil),                   // 61: api.v1alpha1.vanalytics.SearchQuery.Results.Channel
	(*SearchQuery_Results_AgentUserName)(nil),             // 62: api.v1alpha1.vanalytics.SearchQuery.Results.AgentUserName
	(*SearchQuery_Results_Segments)(nil),                  // 63: api.v1alpha1.vanalytics.SearchQuery.Results.Segments
	(*SearchQuery_Results_Segments_Text)(nil),             // 64: api.v1alpha1.vanalytics.SearchQuery.Results.Segments.Text
	(*SearchQuery_Results_Segments_Text_Phrase)(nil),      // 65: api.v1alpha1.vanalytics.SearchQuery.Results.Segments.Text.Phrase
	(*SearchQuery_Results_Segments_Text_Phrase_Word)(nil), // 66: api.v1alpha1.vanalytics.SearchQuery.Results.Segments.Text.Phrase.Word
	(*SearchQuery_FlagSummary_NeedReview)(nil),            // 67: api.v1alpha1.vanalytics.SearchQuery.FlagSummary.NeedReview
	(*SearchQuery_FlagSummary_ReviewStatus)(nil),          // 68: api.v1alpha1.vanalytics.SearchQuery.FlagSummary.ReviewStatus
	(*SearchQuery_FlagSummary_Flags)(nil),                 // 69: api.v1alpha1.vanalytics.SearchQuery.FlagSummary.Flags
	(*SearchQuery_FlagSummary_Count)(nil),                 // 70: api.v1alpha1.vanalytics.SearchQuery.FlagSummary.Count
	(*SearchQuery_FlagSummary_NeedReview_FlagSids)(nil),   // 71: api.v1alpha1.vanalytics.SearchQuery.FlagSummary.NeedReview.FlagSids
	(*SearchQuery_FlagSummary_Flags_FlagSid)(nil),         // 72: api.v1alpha1.vanalytics.SearchQuery.FlagSummary.Flags.FlagSid
	(*SearchResponse_Hit)(nil),                            // 73: api.v1alpha1.vanalytics.SearchResponse.Hit
	(*Sort_Field)(nil),                                    // 74: api.v1alpha1.vanalytics.Sort.Field
	nil,                                                   // 75: api.v1alpha1.vanalytics.Transcript.AgentResponseEntry
	(*Sentiment_Sample)(nil),                              // 76: api.v1alpha1.vanalytics.Sentiment.Sample
	(*Sentiment_Estimate)(nil),                            // 77: api.v1alpha1.vanalytics.Sentiment.Estimate
	(*Silence_Duration)(nil),                              // 78: api.v1alpha1.vanalytics.Silence.Duration
	(*Silence_Segment)(nil),                               // 79: api.v1alpha1.vanalytics.Silence.Segment
	(*Silence_Occurrence)(nil),                            // 80: api.v1alpha1.vanalytics.Silence.Occurrence
	(*TalkOver_Duration)(nil),                             // 81: api.v1alpha1.vanalytics.TalkOver.Duration
	(*TalkOver_Result)(nil),                               // 82: api.v1alpha1.vanalytics.TalkOver.Result
	(*TalkOver_Segment)(nil),                              // 83: api.v1alpha1.vanalytics.TalkOver.Segment
	(*TalkOver_Occurrence)(nil),                           // 84: api.v1alpha1.vanalytics.TalkOver.Occurrence
	(*FlagSummary_NeedReview)(nil),                        // 85: api.v1alpha1.vanalytics.FlagSummary.NeedReview
	(*FlagSummary_Flag)(nil),                              // 86: api.v1alpha1.vanalytics.FlagSummary.Flag
	(*FlagSummary_Filter)(nil),                            // 87: api.v1alpha1.vanalytics.FlagSummary.Filter
	(*FlagSummary_Review)(nil),                            // 88: api.v1alpha1.vanalytics.FlagSummary.Review
	(*Uint32Expr)(nil),                                    // 89: api.v1alpha1.vanalytics.Uint32Expr
	(*TimestampExpr)(nil),                                 // 90: api.v1alpha1.vanalytics.TimestampExpr
	(*fieldmaskpb.FieldMask)(nil),                         // 91: google.protobuf.FieldMask
	(commons.CallType_Enum)(0),                            // 92: api.commons.CallType.Enum
	(*Uint32Range)(nil),                                   // 93: api.v1alpha1.vanalytics.Uint32Range
	(*timestamppb.Timestamp)(nil),                         // 94: google.protobuf.Timestamp
	(*aclpb.AgentCallLog)(nil),                            // 95: api.v1alpha1.vanalytics.aclpb.AgentCallLog
	(*TranscriptSummary)(nil),                             // 96: api.v1alpha1.vanalytics.TranscriptSummary
	(commons.TranscriptSentimentTone)(0),                  // 97: api.commons.TranscriptSentimentTone
	(*durationpb.Duration)(nil),                           // 98: google.protobuf.Duration
	(commons.AgentCallLogCallEnded)(0),                    // 99: api.commons.AgentCallLogCallEnded
	(*wrapperspb.BoolValue)(nil),                          // 100: google.protobuf.BoolValue
	(*wrapperspb.Int64Value)(nil),                         // 101: google.protobuf.Int64Value
	(*wrapperspb.Int32Value)(nil),                         // 102: google.protobuf.Int32Value
	(*wrapperspb.DoubleValue)(nil),                        // 103: google.protobuf.DoubleValue
}
var file_api_v1alpha1_vanalytics_transcript_proto_depIdxs = []int32{
	5,   // 0: api.v1alpha1.vanalytics.BulkDeleteTranscriptsRequest.query:type_name -> api.v1alpha1.vanalytics.SearchRequest
	5,   // 1: api.v1alpha1.vanalytics.BulkRestoreTranscriptsRequest.query:type_name -> api.v1alpha1.vanalytics.SearchRequest
	29,  // 2: api.v1alpha1.vanalytics.SearchRequest.silence:type_name -> api.v1alpha1.vanalytics.SearchRequest.Silence
	89,  // 3: api.v1alpha1.vanalytics.SearchRequest.talk_time:type_name -> api.v1alpha1.vanalytics.Uint32Expr
	32,  // 4: api.v1alpha1.vanalytics.SearchRequest.agent:type_name -> api.v1alpha1.vanalytics.SearchRequest.Agent
	11,  // 5: api.v1alpha1.vanalytics.SearchRequest.sort:type_name -> api.v1alpha1.vanalytics.Sort
	90,  // 6: api.v1alpha1.vanalytics.SearchRequest.create_time:type_name -> api.v1alpha1.vanalytics.TimestampExpr
	30,  // 7: api.v1alpha1.vanalytics.SearchRequest.talk_over:type_name -> api.v1alpha1.vanalytics.SearchRequest.TalkOver
	31,  // 8: api.v1alpha1.vanalytics.SearchRequest.terms:type_name -> api.v1alpha1.vanalytics.SearchRequest.Terms
	27,  // 9: api.v1alpha1.vanalytics.SearchRequest.phrase:type_name -> api.v1alpha1.vanalytics.SearchRequest.Phrase
	91,  // 10: api.v1alpha1.vanalytics.SearchRequest.transcript_mask:type_name -> google.protobuf.FieldMask
	90,  // 11: api.v1alpha1.vanalytics.SearchRequest.call_start_time:type_name -> api.v1alpha1.vanalytics.TimestampExpr
	92,  // 12: api.v1alpha1.vanalytics.SearchRequest.call_types:type_name -> api.commons.CallType.Enum
	8,   // 13: api.v1alpha1.vanalytics.SearchRequest.agent_call_log:type_name -> api.v1alpha1.vanalytics.AgentCallLogQuery
	6,   // 14: api.v1alpha1.vanalytics.SearchRequest.where:type_name -> api.v1alpha1.vanalytics.SearchQuery
	93,  // 15: api.v1alpha1.vanalytics.SearchRequest.time_frame:type_name -> api.v1alpha1.vanalytics.Uint32Range
	54,  // 16: api.v1alpha1.vanalytics.SearchQuery.transcript_sid:type_name -> api.v1alpha1.vanalytics.SearchQuery.TranscriptSid
	56,  // 17: api.v1alpha1.vanalytics.SearchQuery.flag_summary:type_name -> api.v1alpha1.vanalytics.SearchQuery.FlagSummary
	6,   // 18: api.v1alpha1.vanalytics.SearchQuery.or:type_name -> api.v1alpha1.vanalytics.SearchQuery
	6,   // 19: api.v1alpha1.vanalytics.SearchQuery.and:type_name -> api.v1alpha1.vanalytics.SearchQuery
	55,  // 20: api.v1alpha1.vanalytics.SearchQuery.audio_time:type_name -> api.v1alpha1.vanalytics.SearchQuery.AudioTime
	53,  // 21: api.v1alpha1.vanalytics.SearchQuery.delete_time:type_name -> api.v1alpha1.vanalytics.SearchQuery.DeleteTime
	6,   // 22: api.v1alpha1.vanalytics.SearchQuery.not:type_name -> api.v1alpha1.vanalytics.SearchQuery
	52,  // 23: api.v1alpha1.vanalytics.SearchQuery.results:type_name -> api.v1alpha1.vanalytics.SearchQuery.Results
	51,  // 24: api.v1alpha1.vanalytics.SearchQuery.agent_response:type_name -> api.v1alpha1.vanalytics.SearchQuery.AgentResponse
	48,  // 25: api.v1alpha1.vanalytics.SearchQuery.agent_call_log:type_name -> api.v1alpha1.vanalytics.SearchQuery.AgentCallLog
	36,  // 26: api.v1alpha1.vanalytics.SearchQuery.phone:type_name -> api.v1alpha1.vanalytics.SearchQuery.Phone
	73,  // 27: api.v1alpha1.vanalytics.SearchResponse.hits:type_name -> api.v1alpha1.vanalytics.SearchResponse.Hit
	11,  // 28: api.v1alpha1.vanalytics.SearchResponse.sort:type_name -> api.v1alpha1.vanalytics.Sort
	9,   // 29: api.v1alpha1.vanalytics.AgentCallLogQuery.call_skills_initial:type_name -> api.v1alpha1.vanalytics.CallSkillsInitialQuery
	10,  // 30: api.v1alpha1.vanalytics.CallSkillsInitialQuery.need:type_name -> api.v1alpha1.vanalytics.VanaTermsQuery
	10,  // 31: api.v1alpha1.vanalytics.CallSkillsInitialQuery.want:type_name -> api.v1alpha1.vanalytics.VanaTermsQuery
	74,  // 32: api.v1alpha1.vanalytics.Sort.fields:type_name -> api.v1alpha1.vanalytics.Sort.Field
	14,  // 33: api.v1alpha1.vanalytics.ListTranscriptGroupNamesResponse.group_names:type_name -> api.v1alpha1.vanalytics.TranscriptGroupName
	92,  // 34: api.v1alpha1.vanalytics.Transcript.call_type:type_name -> api.commons.CallType.Enum
	18,  // 35: api.v1alpha1.vanalytics.Transcript.results:type_name -> api.v1alpha1.vanalytics.Result
	22,  // 36: api.v1alpha1.vanalytics.Transcript.silence:type_name -> api.v1alpha1.vanalytics.Silence
	94,  // 37: api.v1alpha1.vanalytics.Transcript.create_time:type_name -> google.protobuf.Timestamp
	94,  // 38: api.v1alpha1.vanalytics.Transcript.call_start_time:type_name -> google.protobuf.Timestamp
	23,  // 39: api.v1alpha1.vanalytics.Transcript.talk_over:type_name -> api.v1alpha1.vanalytics.TalkOver
	95,  // 40: api.v1alpha1.vanalytics.Transcript.agent_call_log:type_name -> api.v1alpha1.vanalytics.aclpb.AgentCallLog
	24,  // 41: api.v1alpha1.vanalytics.Transcript.flag_summary:type_name -> api.v1alpha1.vanalytics.FlagSummary
	94,  // 42: api.v1alpha1.vanalytics.Transcript.delete_time:type_name -> google.protobuf.Timestamp
	75,  // 43: api.v1alpha1.vanalytics.Transcript.agent_response:type_name -> api.v1alpha1.vanalytics.Transcript.AgentResponseEntry
	96,  // 44: api.v1alpha1.vanalytics.Transcript.summary:type_name -> api.v1alpha1.vanalytics.TranscriptSummary
	20,  // 45: api.v1alpha1.vanalytics.Result.segments:type_name -> api.v1alpha1.vanalytics.Segment
	19,  // 46: api.v1alpha1.vanalytics.Result.sentiment:type_name -> api.v1alpha1.vanalytics.Sentiment
	77,  // 47: api.v1alpha1.vanalytics.Sentiment.overall:type_name -> api.v1alpha1.vanalytics.Sentiment.Estimate
	97,  // 48: api.v1alpha1.vanalytics.Sentiment.worst:type_name -> api.commons.TranscriptSentimentTone
	97,  // 49: api.v1alpha1.vanalytics.Sentiment.dominant:type_name -> api.commons.TranscriptSentimentTone
	97,  // 50: api.v1alpha1.vanalytics.Sentiment.last:type_name -> api.commons.TranscriptSentimentTone
	76,  // 51: api.v1alpha1.vanalytics.Sentiment.samples:type_name -> api.v1alpha1.vanalytics.Sentiment.Sample
	21,  // 52: api.v1alpha1.vanalytics.Segment.words:type_name -> api.v1alpha1.vanalytics.Word
	78,  // 53: api.v1alpha1.vanalytics.Silence.duration:type_name -> api.v1alpha1.vanalytics.Silence.Duration
	79,  // 54: api.v1alpha1.vanalytics.Silence.segments:type_name -> api.v1alpha1.vanalytics.Silence.Segment
	80,  // 55: api.v1alpha1.vanalytics.Silence.occurrence:type_name -> api.v1alpha1.vanalytics.Silence.Occurrence
	84,  // 56: api.v1alpha1.vanalytics.TalkOver.occurrence:type_name -> api.v1alpha1.vanalytics.TalkOver.Occurrence
	81,  // 57: api.v1alpha1.vanalytics.TalkOver.duration:type_name -> api.v1alpha1.vanalytics.TalkOver.Duration
	82,  // 58: api.v1alpha1.vanalytics.TalkOver.results:type_name -> api.v1alpha1.vanalytics.TalkOver.Result
	85,  // 59: api.v1alpha1.vanalytics.FlagSummary.need_review:type_name -> api.v1alpha1.vanalytics.FlagSummary.NeedReview
	86,  // 60: api.v1alpha1.vanalytics.FlagSummary.flags:type_name -> api.v1alpha1.vanalytics.FlagSummary.Flag
	0,   // 61: api.v1alpha1.vanalytics.FlagSummary.review_status:type_name -> api.v1alpha1.vanalytics.TranscriptReviewStatus
	11,  // 62: api.v1alpha1.vanalytics.SearchByOrgIdRequest.sort:type_name -> api.v1alpha1.vanalytics.Sort
	91,  // 63: api.v1alpha1.vanalytics.SearchByOrgIdRequest.transcript_mask:type_name -> google.protobuf.FieldMask
	56,  // 64: api.v1alpha1.vanalytics.SearchByOrgIdRequest.flag_summary:type_name -> api.v1alpha1.vanalytics.SearchQuery.FlagSummary
	33,  // 65: api.v1alpha1.vanalytics.SearchRequest.Phrase.words:type_name -> api.v1alpha1.vanalytics.SearchRequest.Phrase.Word
	34,  // 66: api.v1alpha1.vanalytics.SearchRequest.Phrase.highlight:type_name -> api.v1alpha1.vanalytics.SearchRequest.Phrase.Highlight
	32,  // 67: api.v1alpha1.vanalytics.SearchRequest.Phrase.agent:type_name -> api.v1alpha1.vanalytics.SearchRequest.Agent
	28,  // 68: api.v1alpha1.vanalytics.SearchRequest.Phrase.position_offset:type_name -> api.v1alpha1.vanalytics.SearchRequest.PositionOffset
	98,  // 69: api.v1alpha1.vanalytics.SearchRequest.PositionOffset.start:type_name -> google.protobuf.Duration
	98,  // 70: api.v1alpha1.vanalytics.SearchRequest.PositionOffset.stop:type_name -> google.protobuf.Duration
	89,  // 71: api.v1alpha1.vanalytics.SearchRequest.Silence.duration_total:type_name -> api.v1alpha1.vanalytics.Uint32Expr
	89,  // 72: api.v1alpha1.vanalytics.SearchRequest.Silence.duration_max:type_name -> api.v1alpha1.vanalytics.Uint32Expr
	89,  // 73: api.v1alpha1.vanalytics.SearchRequest.Silence.occurrence_total:type_name -> api.v1alpha1.vanalytics.Uint32Expr
	89,  // 74: api.v1alpha1.vanalytics.SearchRequest.Silence.duration_percentage:type_name -> api.v1alpha1.vanalytics.Uint32Expr
	89,  // 75: api.v1alpha1.vanalytics.SearchRequest.TalkOver.duration_total:type_name -> api.v1alpha1.vanalytics.Uint32Expr
	89,  // 76: api.v1alpha1.vanalytics.SearchRequest.TalkOver.duration_max:type_name -> api.v1alpha1.vanalytics.Uint32Expr
	89,  // 77: api.v1alpha1.vanalytics.SearchRequest.TalkOver.occurrence_total:type_name -> api.v1alpha1.vanalytics.Uint32Expr
	89,  // 78: api.v1alpha1.vanalytics.SearchRequest.TalkOver.duration_percentage:type_name -> api.v1alpha1.vanalytics.Uint32Expr
	32,  // 79: api.v1alpha1.vanalytics.SearchRequest.Terms.agent:type_name -> api.v1alpha1.vanalytics.SearchRequest.Agent
	28,  // 80: api.v1alpha1.vanalytics.SearchRequest.Terms.position_offset:type_name -> api.v1alpha1.vanalytics.SearchRequest.PositionOffset
	35,  // 81: api.v1alpha1.vanalytics.SearchRequest.Agent.user_name:type_name -> api.v1alpha1.vanalytics.SearchRequest.Agent.UserName
	37,  // 82: api.v1alpha1.vanalytics.SearchQuery.Phone.cc:type_name -> api.v1alpha1.vanalytics.SearchQuery.Cc
	38,  // 83: api.v1alpha1.vanalytics.SearchQuery.Phone.ndc:type_name -> api.v1alpha1.vanalytics.SearchQuery.Ndc
	39,  // 84: api.v1alpha1.vanalytics.SearchQuery.Phone.prefix:type_name -> api.v1alpha1.vanalytics.SearchQuery.Prefix
	40,  // 85: api.v1alpha1.vanalytics.SearchQuery.Phone.city:type_name -> api.v1alpha1.vanalytics.SearchQuery.City
	41,  // 86: api.v1alpha1.vanalytics.SearchQuery.Phone.iso2:type_name -> api.v1alpha1.vanalytics.SearchQuery.Iso2
	42,  // 87: api.v1alpha1.vanalytics.SearchQuery.Phone.region_code:type_name -> api.v1alpha1.vanalytics.SearchQuery.RegionCode
	43,  // 88: api.v1alpha1.vanalytics.SearchQuery.Phone.region_name:type_name -> api.v1alpha1.vanalytics.SearchQuery.RegionName
	44,  // 89: api.v1alpha1.vanalytics.SearchQuery.Phone.time_zone:type_name -> api.v1alpha1.vanalytics.SearchQuery.TimeZone
	45,  // 90: api.v1alpha1.vanalytics.SearchQuery.Phone.type:type_name -> api.v1alpha1.vanalytics.SearchQuery.Type
	46,  // 91: api.v1alpha1.vanalytics.SearchQuery.Phone.utc:type_name -> api.v1alpha1.vanalytics.SearchQuery.Utc
	47,  // 92: api.v1alpha1.vanalytics.SearchQuery.Phone.location:type_name -> api.v1alpha1.vanalytics.SearchQuery.Location
	57,  // 93: api.v1alpha1.vanalytics.SearchQuery.Location.zip_code_proximity:type_name -> api.v1alpha1.vanalytics.SearchQuery.Location.ZipCodeProximity
	50,  // 94: api.v1alpha1.vanalytics.SearchQuery.AgentCallLog.call_skills_initial:type_name -> api.v1alpha1.vanalytics.SearchQuery.CallSkillsInitial
	49,  // 95: api.v1alpha1.vanalytics.SearchQuery.AgentCallLog.call_ended:type_name -> api.v1alpha1.vanalytics.SearchQuery.CallEnded
	99,  // 96: api.v1alpha1.vanalytics.SearchQuery.CallEnded.reasons:type_name -> api.commons.AgentCallLogCallEnded
	60,  // 97: api.v1alpha1.vanalytics.SearchQuery.AgentResponse.key:type_name -> api.v1alpha1.vanalytics.SearchQuery.AgentResponse.Key
	58,  // 98: api.v1alpha1.vanalytics.SearchQuery.AgentResponse.values:type_name -> api.v1alpha1.vanalytics.SearchQuery.AgentResponse.Values
	59,  // 99: api.v1alpha1.vanalytics.SearchQuery.AgentResponse.numbers:type_name -> api.v1alpha1.vanalytics.SearchQuery.AgentResponse.Numbers
	61,  // 100: api.v1alpha1.vanalytics.SearchQuery.Results.channel:type_name -> api.v1alpha1.vanalytics.SearchQuery.Results.Channel
	62,  // 101: api.v1alpha1.vanalytics.SearchQuery.Results.agent_user_name:type_name -> api.v1alpha1.vanalytics.SearchQuery.Results.AgentUserName
	63,  // 102: api.v1alpha1.vanalytics.SearchQuery.Results.segments:type_name -> api.v1alpha1.vanalytics.SearchQuery.Results.Segments
	100, // 103: api.v1alpha1.vanalytics.SearchQuery.DeleteTime.exists:type_name -> google.protobuf.BoolValue
	101, // 104: api.v1alpha1.vanalytics.SearchQuery.TranscriptSid.gte:type_name -> google.protobuf.Int64Value
	102, // 105: api.v1alpha1.vanalytics.SearchQuery.AudioTime.gte:type_name -> google.protobuf.Int32Value
	102, // 106: api.v1alpha1.vanalytics.SearchQuery.AudioTime.lte:type_name -> google.protobuf.Int32Value
	102, // 107: api.v1alpha1.vanalytics.SearchQuery.AudioTime.gt:type_name -> google.protobuf.Int32Value
	102, // 108: api.v1alpha1.vanalytics.SearchQuery.AudioTime.lt:type_name -> google.protobuf.Int32Value
	67,  // 109: api.v1alpha1.vanalytics.SearchQuery.FlagSummary.need_review:type_name -> api.v1alpha1.vanalytics.SearchQuery.FlagSummary.NeedReview
	68,  // 110: api.v1alpha1.vanalytics.SearchQuery.FlagSummary.review_status:type_name -> api.v1alpha1.vanalytics.SearchQuery.FlagSummary.ReviewStatus
	69,  // 111: api.v1alpha1.vanalytics.SearchQuery.FlagSummary.flags:type_name -> api.v1alpha1.vanalytics.SearchQuery.FlagSummary.Flags
	70,  // 112: api.v1alpha1.vanalytics.SearchQuery.FlagSummary.count:type_name -> api.v1alpha1.vanalytics.SearchQuery.FlagSummary.Count
	103, // 113: api.v1alpha1.vanalytics.SearchQuery.AgentResponse.Numbers.gte:type_name -> google.protobuf.DoubleValue
	103, // 114: api.v1alpha1.vanalytics.SearchQuery.AgentResponse.Numbers.lte:type_name -> google.protobuf.DoubleValue
	103, // 115: api.v1alpha1.vanalytics.SearchQuery.AgentResponse.Numbers.gt:type_name -> google.protobuf.DoubleValue
	103, // 116: api.v1alpha1.vanalytics.SearchQuery.AgentResponse.Numbers.lt:type_name -> google.protobuf.DoubleValue
	103, // 117: api.v1alpha1.vanalytics.SearchQuery.AgentResponse.Numbers.eq:type_name -> google.protobuf.DoubleValue
	64,  // 118: api.v1alpha1.vanalytics.SearchQuery.Results.Segments.text:type_name -> api.v1alpha1.vanalytics.SearchQuery.Results.Segments.Text
	65,  // 119: api.v1alpha1.vanalytics.SearchQuery.Results.Segments.Text.phrase:type_name -> api.v1alpha1.vanalytics.SearchQuery.Results.Segments.Text.Phrase
	66,  // 120: api.v1alpha1.vanalytics.SearchQuery.Results.Segments.Text.Phrase.words:type_name -> api.v1alpha1.vanalytics.SearchQuery.Results.Segments.Text.Phrase.Word
	71,  // 121: api.v1alpha1.vanalytics.SearchQuery.FlagSummary.NeedReview.flag_sids:type_name -> api.v1alpha1.vanalytics.SearchQuery.FlagSummary.NeedReview.FlagSids
	0,   // 122: api.v1alpha1.vanalytics.SearchQuery.FlagSummary.ReviewStatus.any:type_name -> api.v1alpha1.vanalytics.TranscriptReviewStatus
	72,  // 123: api.v1alpha1.vanalytics.SearchQuery.FlagSummary.Flags.flag_sid:type_name -> api.v1alpha1.vanalytics.SearchQuery.FlagSummary.Flags.FlagSid
	102, // 124: api.v1alpha1.vanalytics.SearchQuery.FlagSummary.Count.gte:type_name -> google.protobuf.Int32Value
	102, // 125: api.v1alpha1.vanalytics.SearchQuery.FlagSummary.Count.lte:type_name -> google.protobuf.Int32Value
	102, // 126: api.v1alpha1.vanalytics.SearchQuery.FlagSummary.Count.gt:type_name -> google.protobuf.Int32Value
	102, // 127: api.v1alpha1.vanalytics.SearchQuery.FlagSummary.Count.lt:type_name -> google.protobuf.Int32Value
	102, // 128: api.v1alpha1.vanalytics.SearchQuery.FlagSummary.Count.eq:type_name -> google.protobuf.Int32Value
	17,  // 129: api.v1alpha1.vanalytics.SearchResponse.Hit.transcript:type_name -> api.v1alpha1.vanalytics.Transcript
	25,  // 130: api.v1alpha1.vanalytics.Transcript.AgentResponseEntry.value:type_name -> api.v1alpha1.vanalytics.AgentResponse
	77,  // 131: api.v1alpha1.vanalytics.Sentiment.Sample.estimate:type_name -> api.v1alpha1.vanalytics.Sentiment.Estimate
	98,  // 132: api.v1alpha1.vanalytics.Sentiment.Sample.offset:type_name -> google.protobuf.Duration
	98,  // 133: api.v1alpha1.vanalytics.Sentiment.Sample.duration:type_name -> google.protobuf.Duration
	84,  // 134: api.v1alpha1.vanalytics.TalkOver.Result.occurrence:type_name -> api.v1alpha1.vanalytics.TalkOver.Occurrence
	81,  // 135: api.v1alpha1.vanalytics.TalkOver.Result.duration:type_name -> api.v1alpha1.vanalytics.TalkOver.Duration
	83,  // 136: api.v1alpha1.vanalytics.TalkOver.Result.segments:type_name -> api.v1alpha1.vanalytics.TalkOver.Segment
	87,  // 137: api.v1alpha1.vanalytics.FlagSummary.Flag.filters:type_name -> api.v1alpha1.vanalytics.FlagSummary.Filter
	88,  // 138: api.v1alpha1.vanalytics.FlagSummary.Flag.reviews:type_name -> api.v1alpha1.vanalytics.FlagSummary.Review
	139, // [139:139] is the sub-list for method output_type
	139, // [139:139] is the sub-list for method input_type
	139, // [139:139] is the sub-list for extension type_name
	139, // [139:139] is the sub-list for extension extendee
	0,   // [0:139] is the sub-list for field type_name
}

func init() { file_api_v1alpha1_vanalytics_transcript_proto_init() }
func file_api_v1alpha1_vanalytics_transcript_proto_init() {
	if File_api_v1alpha1_vanalytics_transcript_proto != nil {
		return
	}
	file_api_v1alpha1_vanalytics_expr_proto_init()
	file_api_v1alpha1_vanalytics_transcript_summary_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1alpha1_vanalytics_transcript_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   88,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_v1alpha1_vanalytics_transcript_proto_goTypes,
		DependencyIndexes: file_api_v1alpha1_vanalytics_transcript_proto_depIdxs,
		EnumInfos:         file_api_v1alpha1_vanalytics_transcript_proto_enumTypes,
		MessageInfos:      file_api_v1alpha1_vanalytics_transcript_proto_msgTypes,
	}.Build()
	File_api_v1alpha1_vanalytics_transcript_proto = out.File
	file_api_v1alpha1_vanalytics_transcript_proto_rawDesc = nil
	file_api_v1alpha1_vanalytics_transcript_proto_goTypes = nil
	file_api_v1alpha1_vanalytics_transcript_proto_depIdxs = nil
}
