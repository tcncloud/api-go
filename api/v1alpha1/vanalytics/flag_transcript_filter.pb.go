// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: api/v1alpha1/vanalytics/flag_transcript_filter.proto

package vanalytics

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ListFlagTranscriptFiltersRequest is a request for listing flag transcript filters.
type ListFlagTranscriptFiltersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The target transcript sid.
	TranscriptSid int64 `protobuf:"varint,2,opt,name=transcript_sid,json=transcriptSid,proto3" json:"transcript_sid,omitempty"`
	// Optional. Flag snapshot fields to include in response. All when empty.
	FlagSnapshotMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=flag_snapshot_mask,json=flagSnapshotMask,proto3" json:"flag_snapshot_mask,omitempty"`
	// Optional. Filter snapshot fields to include in response. All when empty.
	FilterSnapshotMask *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=filter_snapshot_mask,json=filterSnapshotMask,proto3" json:"filter_snapshot_mask,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ListFlagTranscriptFiltersRequest) Reset() {
	*x = ListFlagTranscriptFiltersRequest{}
	mi := &file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFlagTranscriptFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlagTranscriptFiltersRequest) ProtoMessage() {}

func (x *ListFlagTranscriptFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlagTranscriptFiltersRequest.ProtoReflect.Descriptor instead.
func (*ListFlagTranscriptFiltersRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_rawDescGZIP(), []int{0}
}

func (x *ListFlagTranscriptFiltersRequest) GetTranscriptSid() int64 {
	if x != nil {
		return x.TranscriptSid
	}
	return 0
}

func (x *ListFlagTranscriptFiltersRequest) GetFlagSnapshotMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FlagSnapshotMask
	}
	return nil
}

func (x *ListFlagTranscriptFiltersRequest) GetFilterSnapshotMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FilterSnapshotMask
	}
	return nil
}

// ListFlagTranscriptFiltersResponse is a response for listing flag transcript filters.
type ListFlagTranscriptFiltersResponse struct {
	state                 protoimpl.MessageState  `protogen:"open.v1"`
	FlagTranscriptFilters []*FlagTranscriptFilter `protobuf:"bytes,1,rep,name=flag_transcript_filters,json=flagTranscriptFilters,proto3" json:"flag_transcript_filters,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ListFlagTranscriptFiltersResponse) Reset() {
	*x = ListFlagTranscriptFiltersResponse{}
	mi := &file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFlagTranscriptFiltersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlagTranscriptFiltersResponse) ProtoMessage() {}

func (x *ListFlagTranscriptFiltersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlagTranscriptFiltersResponse.ProtoReflect.Descriptor instead.
func (*ListFlagTranscriptFiltersResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_rawDescGZIP(), []int{1}
}

func (x *ListFlagTranscriptFiltersResponse) GetFlagTranscriptFilters() []*FlagTranscriptFilter {
	if x != nil {
		return x.FlagTranscriptFilters
	}
	return nil
}

// Flag transcript filter resource.
type FlagTranscriptFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// FlagSnapshot which flagged target transcript.
	FlagSnapshot *FlagSnapshot `protobuf:"bytes,1,opt,name=flag_snapshot,json=flagSnapshot,proto3" json:"flag_snapshot,omitempty"`
	// FilterSnapshot which filtered target transcript.
	FilterSnapshot *FilterSnapshot `protobuf:"bytes,2,opt,name=filter_snapshot,json=filterSnapshot,proto3" json:"filter_snapshot,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FlagTranscriptFilter) Reset() {
	*x = FlagTranscriptFilter{}
	mi := &file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlagTranscriptFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagTranscriptFilter) ProtoMessage() {}

func (x *FlagTranscriptFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagTranscriptFilter.ProtoReflect.Descriptor instead.
func (*FlagTranscriptFilter) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_rawDescGZIP(), []int{2}
}

func (x *FlagTranscriptFilter) GetFlagSnapshot() *FlagSnapshot {
	if x != nil {
		return x.FlagSnapshot
	}
	return nil
}

func (x *FlagTranscriptFilter) GetFilterSnapshot() *FilterSnapshot {
	if x != nil {
		return x.FilterSnapshot
	}
	return nil
}

var File_api_v1alpha1_vanalytics_flag_transcript_filter_proto protoreflect.FileDescriptor

var file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_rawDesc = string([]byte{
	0x0a, 0x34, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x76,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x1a,
	0x2d, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x76, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x76, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe1, 0x01,
	0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x12, 0x66, 0x6c, 0x61,
	0x67, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x10, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x4c, 0x0a, 0x14, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x12, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61, 0x73,
	0x6b, 0x22, 0x8a, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x17, 0x66, 0x6c, 0x61, 0x67, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x15, 0x66, 0x6c, 0x61, 0x67, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xb4,
	0x01, 0x0a, 0x14, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0d, 0x66, 0x6c, 0x61, 0x67, 0x5f,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x0c, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x50, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0xea, 0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x76, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x42, 0x19, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74,
	0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x76, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0xa2, 0x02, 0x03, 0x41, 0x56, 0x56, 0xaa, 0x02, 0x17, 0x41,
	0x70, 0x69, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0xca, 0x02, 0x17, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x56, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0xe2, 0x02, 0x23, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c,
	0x56, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3a, 0x3a, 0x56, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_rawDescOnce sync.Once
	file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_rawDescData []byte
)

func file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_rawDescGZIP() []byte {
	file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_rawDescOnce.Do(func() {
		file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_rawDesc), len(file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_rawDesc)))
	})
	return file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_rawDescData
}

var file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_goTypes = []any{
	(*ListFlagTranscriptFiltersRequest)(nil),  // 0: api.v1alpha1.vanalytics.ListFlagTranscriptFiltersRequest
	(*ListFlagTranscriptFiltersResponse)(nil), // 1: api.v1alpha1.vanalytics.ListFlagTranscriptFiltersResponse
	(*FlagTranscriptFilter)(nil),              // 2: api.v1alpha1.vanalytics.FlagTranscriptFilter
	(*fieldmaskpb.FieldMask)(nil),             // 3: google.protobuf.FieldMask
	(*FlagSnapshot)(nil),                      // 4: api.v1alpha1.vanalytics.FlagSnapshot
	(*FilterSnapshot)(nil),                    // 5: api.v1alpha1.vanalytics.FilterSnapshot
}
var file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_depIdxs = []int32{
	3, // 0: api.v1alpha1.vanalytics.ListFlagTranscriptFiltersRequest.flag_snapshot_mask:type_name -> google.protobuf.FieldMask
	3, // 1: api.v1alpha1.vanalytics.ListFlagTranscriptFiltersRequest.filter_snapshot_mask:type_name -> google.protobuf.FieldMask
	2, // 2: api.v1alpha1.vanalytics.ListFlagTranscriptFiltersResponse.flag_transcript_filters:type_name -> api.v1alpha1.vanalytics.FlagTranscriptFilter
	4, // 3: api.v1alpha1.vanalytics.FlagTranscriptFilter.flag_snapshot:type_name -> api.v1alpha1.vanalytics.FlagSnapshot
	5, // 4: api.v1alpha1.vanalytics.FlagTranscriptFilter.filter_snapshot:type_name -> api.v1alpha1.vanalytics.FilterSnapshot
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_init() }
func file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_init() {
	if File_api_v1alpha1_vanalytics_flag_transcript_filter_proto != nil {
		return
	}
	file_api_v1alpha1_vanalytics_filter_snapshot_proto_init()
	file_api_v1alpha1_vanalytics_flag_snapshot_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_rawDesc), len(file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_goTypes,
		DependencyIndexes: file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_depIdxs,
		MessageInfos:      file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_msgTypes,
	}.Build()
	File_api_v1alpha1_vanalytics_flag_transcript_filter_proto = out.File
	file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_goTypes = nil
	file_api_v1alpha1_vanalytics_flag_transcript_filter_proto_depIdxs = nil
}
