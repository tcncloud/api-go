// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1alpha1/bireportgenerator/service.proto

package bireportgeneratorconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	bireportgenerator "github.com/tcncloud/api-go/api/v1alpha1/bireportgenerator"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BIReportGeneratorServiceName is the fully-qualified name of the BIReportGeneratorService service.
	BIReportGeneratorServiceName = "api.v1alpha1.bireportgenerator.BIReportGeneratorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BIReportGeneratorServiceCreateReportJobProcedure is the fully-qualified name of the
	// BIReportGeneratorService's CreateReportJob RPC.
	BIReportGeneratorServiceCreateReportJobProcedure = "/api.v1alpha1.bireportgenerator.BIReportGeneratorService/CreateReportJob"
	// BIReportGeneratorServiceListReportJobsProcedure is the fully-qualified name of the
	// BIReportGeneratorService's ListReportJobs RPC.
	BIReportGeneratorServiceListReportJobsProcedure = "/api.v1alpha1.bireportgenerator.BIReportGeneratorService/ListReportJobs"
	// BIReportGeneratorServiceUpdateReportJobProcedure is the fully-qualified name of the
	// BIReportGeneratorService's UpdateReportJob RPC.
	BIReportGeneratorServiceUpdateReportJobProcedure = "/api.v1alpha1.bireportgenerator.BIReportGeneratorService/UpdateReportJob"
	// BIReportGeneratorServiceDeleteReportJobProcedure is the fully-qualified name of the
	// BIReportGeneratorService's DeleteReportJob RPC.
	BIReportGeneratorServiceDeleteReportJobProcedure = "/api.v1alpha1.bireportgenerator.BIReportGeneratorService/DeleteReportJob"
	// BIReportGeneratorServiceGetReportJobProcedure is the fully-qualified name of the
	// BIReportGeneratorService's GetReportJob RPC.
	BIReportGeneratorServiceGetReportJobProcedure = "/api.v1alpha1.bireportgenerator.BIReportGeneratorService/GetReportJob"
)

// BIReportGeneratorServiceClient is a client for the
// api.v1alpha1.bireportgenerator.BIReportGeneratorService service.
type BIReportGeneratorServiceClient interface {
	// CreateReportJob creates a new report job.
	CreateReportJob(context.Context, *connect_go.Request[bireportgenerator.CreateReportJobRequest]) (*connect_go.Response[bireportgenerator.CreateReportJobResponse], error)
	// ListReportJobs lists report jobs.
	ListReportJobs(context.Context, *connect_go.Request[bireportgenerator.ListReportJobsRequest]) (*connect_go.Response[bireportgenerator.ListReportJobsResponse], error)
	// UpdateReportJob updates a report job.
	UpdateReportJob(context.Context, *connect_go.Request[bireportgenerator.UpdateReportJobRequest]) (*connect_go.Response[bireportgenerator.UpdateReportJobResponse], error)
	// DeleteReportJob deletes a report job.
	DeleteReportJob(context.Context, *connect_go.Request[bireportgenerator.DeleteReportJobRequest]) (*connect_go.Response[bireportgenerator.DeleteReportJobResponse], error)
	// GetReportJob gets a report job.
	GetReportJob(context.Context, *connect_go.Request[bireportgenerator.GetReportJobRequest]) (*connect_go.Response[bireportgenerator.GetReportJobResponse], error)
}

// NewBIReportGeneratorServiceClient constructs a client for the
// api.v1alpha1.bireportgenerator.BIReportGeneratorService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBIReportGeneratorServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BIReportGeneratorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &bIReportGeneratorServiceClient{
		createReportJob: connect_go.NewClient[bireportgenerator.CreateReportJobRequest, bireportgenerator.CreateReportJobResponse](
			httpClient,
			baseURL+BIReportGeneratorServiceCreateReportJobProcedure,
			opts...,
		),
		listReportJobs: connect_go.NewClient[bireportgenerator.ListReportJobsRequest, bireportgenerator.ListReportJobsResponse](
			httpClient,
			baseURL+BIReportGeneratorServiceListReportJobsProcedure,
			opts...,
		),
		updateReportJob: connect_go.NewClient[bireportgenerator.UpdateReportJobRequest, bireportgenerator.UpdateReportJobResponse](
			httpClient,
			baseURL+BIReportGeneratorServiceUpdateReportJobProcedure,
			opts...,
		),
		deleteReportJob: connect_go.NewClient[bireportgenerator.DeleteReportJobRequest, bireportgenerator.DeleteReportJobResponse](
			httpClient,
			baseURL+BIReportGeneratorServiceDeleteReportJobProcedure,
			opts...,
		),
		getReportJob: connect_go.NewClient[bireportgenerator.GetReportJobRequest, bireportgenerator.GetReportJobResponse](
			httpClient,
			baseURL+BIReportGeneratorServiceGetReportJobProcedure,
			opts...,
		),
	}
}

// bIReportGeneratorServiceClient implements BIReportGeneratorServiceClient.
type bIReportGeneratorServiceClient struct {
	createReportJob *connect_go.Client[bireportgenerator.CreateReportJobRequest, bireportgenerator.CreateReportJobResponse]
	listReportJobs  *connect_go.Client[bireportgenerator.ListReportJobsRequest, bireportgenerator.ListReportJobsResponse]
	updateReportJob *connect_go.Client[bireportgenerator.UpdateReportJobRequest, bireportgenerator.UpdateReportJobResponse]
	deleteReportJob *connect_go.Client[bireportgenerator.DeleteReportJobRequest, bireportgenerator.DeleteReportJobResponse]
	getReportJob    *connect_go.Client[bireportgenerator.GetReportJobRequest, bireportgenerator.GetReportJobResponse]
}

// CreateReportJob calls api.v1alpha1.bireportgenerator.BIReportGeneratorService.CreateReportJob.
func (c *bIReportGeneratorServiceClient) CreateReportJob(ctx context.Context, req *connect_go.Request[bireportgenerator.CreateReportJobRequest]) (*connect_go.Response[bireportgenerator.CreateReportJobResponse], error) {
	return c.createReportJob.CallUnary(ctx, req)
}

// ListReportJobs calls api.v1alpha1.bireportgenerator.BIReportGeneratorService.ListReportJobs.
func (c *bIReportGeneratorServiceClient) ListReportJobs(ctx context.Context, req *connect_go.Request[bireportgenerator.ListReportJobsRequest]) (*connect_go.Response[bireportgenerator.ListReportJobsResponse], error) {
	return c.listReportJobs.CallUnary(ctx, req)
}

// UpdateReportJob calls api.v1alpha1.bireportgenerator.BIReportGeneratorService.UpdateReportJob.
func (c *bIReportGeneratorServiceClient) UpdateReportJob(ctx context.Context, req *connect_go.Request[bireportgenerator.UpdateReportJobRequest]) (*connect_go.Response[bireportgenerator.UpdateReportJobResponse], error) {
	return c.updateReportJob.CallUnary(ctx, req)
}

// DeleteReportJob calls api.v1alpha1.bireportgenerator.BIReportGeneratorService.DeleteReportJob.
func (c *bIReportGeneratorServiceClient) DeleteReportJob(ctx context.Context, req *connect_go.Request[bireportgenerator.DeleteReportJobRequest]) (*connect_go.Response[bireportgenerator.DeleteReportJobResponse], error) {
	return c.deleteReportJob.CallUnary(ctx, req)
}

// GetReportJob calls api.v1alpha1.bireportgenerator.BIReportGeneratorService.GetReportJob.
func (c *bIReportGeneratorServiceClient) GetReportJob(ctx context.Context, req *connect_go.Request[bireportgenerator.GetReportJobRequest]) (*connect_go.Response[bireportgenerator.GetReportJobResponse], error) {
	return c.getReportJob.CallUnary(ctx, req)
}

// BIReportGeneratorServiceHandler is an implementation of the
// api.v1alpha1.bireportgenerator.BIReportGeneratorService service.
type BIReportGeneratorServiceHandler interface {
	// CreateReportJob creates a new report job.
	CreateReportJob(context.Context, *connect_go.Request[bireportgenerator.CreateReportJobRequest]) (*connect_go.Response[bireportgenerator.CreateReportJobResponse], error)
	// ListReportJobs lists report jobs.
	ListReportJobs(context.Context, *connect_go.Request[bireportgenerator.ListReportJobsRequest]) (*connect_go.Response[bireportgenerator.ListReportJobsResponse], error)
	// UpdateReportJob updates a report job.
	UpdateReportJob(context.Context, *connect_go.Request[bireportgenerator.UpdateReportJobRequest]) (*connect_go.Response[bireportgenerator.UpdateReportJobResponse], error)
	// DeleteReportJob deletes a report job.
	DeleteReportJob(context.Context, *connect_go.Request[bireportgenerator.DeleteReportJobRequest]) (*connect_go.Response[bireportgenerator.DeleteReportJobResponse], error)
	// GetReportJob gets a report job.
	GetReportJob(context.Context, *connect_go.Request[bireportgenerator.GetReportJobRequest]) (*connect_go.Response[bireportgenerator.GetReportJobResponse], error)
}

// NewBIReportGeneratorServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBIReportGeneratorServiceHandler(svc BIReportGeneratorServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	bIReportGeneratorServiceCreateReportJobHandler := connect_go.NewUnaryHandler(
		BIReportGeneratorServiceCreateReportJobProcedure,
		svc.CreateReportJob,
		opts...,
	)
	bIReportGeneratorServiceListReportJobsHandler := connect_go.NewUnaryHandler(
		BIReportGeneratorServiceListReportJobsProcedure,
		svc.ListReportJobs,
		opts...,
	)
	bIReportGeneratorServiceUpdateReportJobHandler := connect_go.NewUnaryHandler(
		BIReportGeneratorServiceUpdateReportJobProcedure,
		svc.UpdateReportJob,
		opts...,
	)
	bIReportGeneratorServiceDeleteReportJobHandler := connect_go.NewUnaryHandler(
		BIReportGeneratorServiceDeleteReportJobProcedure,
		svc.DeleteReportJob,
		opts...,
	)
	bIReportGeneratorServiceGetReportJobHandler := connect_go.NewUnaryHandler(
		BIReportGeneratorServiceGetReportJobProcedure,
		svc.GetReportJob,
		opts...,
	)
	return "/api.v1alpha1.bireportgenerator.BIReportGeneratorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BIReportGeneratorServiceCreateReportJobProcedure:
			bIReportGeneratorServiceCreateReportJobHandler.ServeHTTP(w, r)
		case BIReportGeneratorServiceListReportJobsProcedure:
			bIReportGeneratorServiceListReportJobsHandler.ServeHTTP(w, r)
		case BIReportGeneratorServiceUpdateReportJobProcedure:
			bIReportGeneratorServiceUpdateReportJobHandler.ServeHTTP(w, r)
		case BIReportGeneratorServiceDeleteReportJobProcedure:
			bIReportGeneratorServiceDeleteReportJobHandler.ServeHTTP(w, r)
		case BIReportGeneratorServiceGetReportJobProcedure:
			bIReportGeneratorServiceGetReportJobHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBIReportGeneratorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBIReportGeneratorServiceHandler struct{}

func (UnimplementedBIReportGeneratorServiceHandler) CreateReportJob(context.Context, *connect_go.Request[bireportgenerator.CreateReportJobRequest]) (*connect_go.Response[bireportgenerator.CreateReportJobResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.bireportgenerator.BIReportGeneratorService.CreateReportJob is not implemented"))
}

func (UnimplementedBIReportGeneratorServiceHandler) ListReportJobs(context.Context, *connect_go.Request[bireportgenerator.ListReportJobsRequest]) (*connect_go.Response[bireportgenerator.ListReportJobsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.bireportgenerator.BIReportGeneratorService.ListReportJobs is not implemented"))
}

func (UnimplementedBIReportGeneratorServiceHandler) UpdateReportJob(context.Context, *connect_go.Request[bireportgenerator.UpdateReportJobRequest]) (*connect_go.Response[bireportgenerator.UpdateReportJobResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.bireportgenerator.BIReportGeneratorService.UpdateReportJob is not implemented"))
}

func (UnimplementedBIReportGeneratorServiceHandler) DeleteReportJob(context.Context, *connect_go.Request[bireportgenerator.DeleteReportJobRequest]) (*connect_go.Response[bireportgenerator.DeleteReportJobResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.bireportgenerator.BIReportGeneratorService.DeleteReportJob is not implemented"))
}

func (UnimplementedBIReportGeneratorServiceHandler) GetReportJob(context.Context, *connect_go.Request[bireportgenerator.GetReportJobRequest]) (*connect_go.Response[bireportgenerator.GetReportJobResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.bireportgenerator.BIReportGeneratorService.GetReportJob is not implemented"))
}
