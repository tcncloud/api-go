// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: api/v1alpha1/bireportgenerator/entities.proto

package bireportgenerator

import (
	commons "github.com/tcncloud/api-go/api/commons"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ReportJob that can be scheduled to report dashboard data.
type ReportJob struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// unique identifier for the report job
	ReportJobId string `protobuf:"bytes,1,opt,name=report_job_id,json=reportJobId,proto3" json:"report_job_id,omitempty"`
	// name of the report job
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// description of the report job
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// dashboard id to report
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/bireportgenerator/entities.proto.
	DashboardId string `protobuf:"bytes,4,opt,name=dashboard_id,json=dashboardId,proto3" json:"dashboard_id,omitempty"`
	// time zone to use for the report schedule
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/bireportgenerator/entities.proto.
	TimeZone string `protobuf:"bytes,5,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	// time period of data to report with
	TimePeriod commons.TimePeriod `protobuf:"varint,6,opt,name=time_period,json=timePeriod,proto3,enum=api.commons.TimePeriod" json:"time_period,omitempty"`
	// delivery times for the report
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/bireportgenerator/entities.proto.
	DeliveryTimes *commons.DeliveryTimes `protobuf:"bytes,7,opt,name=delivery_times,json=deliveryTimes,proto3" json:"delivery_times,omitempty"`
	// days filter to report on
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/bireportgenerator/entities.proto.
	DayFilter *commons.DayFilter `protobuf:"bytes,8,opt,name=day_filter,json=dayFilter,proto3" json:"day_filter,omitempty"`
	// months filter to report on
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/bireportgenerator/entities.proto.
	Months []commons.Month `protobuf:"varint,9,rep,packed,name=months,proto3,enum=api.commons.Month" json:"months,omitempty"`
	// format options for the report
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/bireportgenerator/entities.proto.
	FormatOptions *commons.FormatOptions `protobuf:"bytes,10,opt,name=format_options,json=formatOptions,proto3" json:"format_options,omitempty"`
	// delivery options for the report
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/bireportgenerator/entities.proto.
	DeliveryOptions *commons.DeliveryOptions `protobuf:"bytes,11,opt,name=delivery_options,json=deliveryOptions,proto3" json:"delivery_options,omitempty"`
	// whether the report job is active
	IsActive bool `protobuf:"varint,12,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// whether to send an empty report if no data is available
	SendEmptyReport bool `protobuf:"varint,13,opt,name=send_empty_report,json=sendEmptyReport,proto3" json:"send_empty_report,omitempty"`
	// dashboard resource id to report
	DashboardResourceId string `protobuf:"bytes,14,opt,name=dashboard_resource_id,json=dashboardResourceId,proto3" json:"dashboard_resource_id,omitempty"`
	// time_zone_wrapper to use for the report schedule
	TimeZoneWrapper *commons.TimeZoneWrapper `protobuf:"bytes,15,opt,name=time_zone_wrapper,json=timeZoneWrapper,proto3" json:"time_zone_wrapper,omitempty"`
	// hide csv footer
	HideCsvFooter bool `protobuf:"varint,16,opt,name=hide_csv_footer,json=hideCsvFooter,proto3" json:"hide_csv_footer,omitempty"`
	// transfer_config_sid to use for the report delivery
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/bireportgenerator/entities.proto.
	TransferConfigSid int64 `protobuf:"varint,17,opt,name=transfer_config_sid,json=transferConfigSid,proto3" json:"transfer_config_sid,omitempty"`
	// cron expression for the report schedule
	CronExpression *commons.CronExpression `protobuf:"bytes,18,opt,name=cron_expression,json=cronExpression,proto3" json:"cron_expression,omitempty"`
	// transfer_options are options used for the report delivery
	TransferOptions *commons.TransferOptions `protobuf:"bytes,19,opt,name=transfer_options,json=transferOptions,proto3" json:"transfer_options,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ReportJob) Reset() {
	*x = ReportJob{}
	mi := &file_api_v1alpha1_bireportgenerator_entities_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportJob) ProtoMessage() {}

func (x *ReportJob) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_bireportgenerator_entities_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportJob.ProtoReflect.Descriptor instead.
func (*ReportJob) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_bireportgenerator_entities_proto_rawDescGZIP(), []int{0}
}

func (x *ReportJob) GetReportJobId() string {
	if x != nil {
		return x.ReportJobId
	}
	return ""
}

func (x *ReportJob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReportJob) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Deprecated: Marked as deprecated in api/v1alpha1/bireportgenerator/entities.proto.
func (x *ReportJob) GetDashboardId() string {
	if x != nil {
		return x.DashboardId
	}
	return ""
}

// Deprecated: Marked as deprecated in api/v1alpha1/bireportgenerator/entities.proto.
func (x *ReportJob) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *ReportJob) GetTimePeriod() commons.TimePeriod {
	if x != nil {
		return x.TimePeriod
	}
	return commons.TimePeriod(0)
}

// Deprecated: Marked as deprecated in api/v1alpha1/bireportgenerator/entities.proto.
func (x *ReportJob) GetDeliveryTimes() *commons.DeliveryTimes {
	if x != nil {
		return x.DeliveryTimes
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/bireportgenerator/entities.proto.
func (x *ReportJob) GetDayFilter() *commons.DayFilter {
	if x != nil {
		return x.DayFilter
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/bireportgenerator/entities.proto.
func (x *ReportJob) GetMonths() []commons.Month {
	if x != nil {
		return x.Months
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/bireportgenerator/entities.proto.
func (x *ReportJob) GetFormatOptions() *commons.FormatOptions {
	if x != nil {
		return x.FormatOptions
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/bireportgenerator/entities.proto.
func (x *ReportJob) GetDeliveryOptions() *commons.DeliveryOptions {
	if x != nil {
		return x.DeliveryOptions
	}
	return nil
}

func (x *ReportJob) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *ReportJob) GetSendEmptyReport() bool {
	if x != nil {
		return x.SendEmptyReport
	}
	return false
}

func (x *ReportJob) GetDashboardResourceId() string {
	if x != nil {
		return x.DashboardResourceId
	}
	return ""
}

func (x *ReportJob) GetTimeZoneWrapper() *commons.TimeZoneWrapper {
	if x != nil {
		return x.TimeZoneWrapper
	}
	return nil
}

func (x *ReportJob) GetHideCsvFooter() bool {
	if x != nil {
		return x.HideCsvFooter
	}
	return false
}

// Deprecated: Marked as deprecated in api/v1alpha1/bireportgenerator/entities.proto.
func (x *ReportJob) GetTransferConfigSid() int64 {
	if x != nil {
		return x.TransferConfigSid
	}
	return 0
}

func (x *ReportJob) GetCronExpression() *commons.CronExpression {
	if x != nil {
		return x.CronExpression
	}
	return nil
}

func (x *ReportJob) GetTransferOptions() *commons.TransferOptions {
	if x != nil {
		return x.TransferOptions
	}
	return nil
}

// ReportLog describes information on a report log
type ReportLog struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// org id of the report log
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// report log id
	ReportLogId int64 `protobuf:"varint,2,opt,name=report_log_id,json=reportLogId,proto3" json:"report_log_id,omitempty"`
	// report job id
	ReportJobId int64 `protobuf:"varint,3,opt,name=report_job_id,json=reportJobId,proto3" json:"report_job_id,omitempty"`
	// unique id of the job execution
	ExecutionId string `protobuf:"bytes,4,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	// name of the report
	ReportName string `protobuf:"bytes,5,opt,name=report_name,json=reportName,proto3" json:"report_name,omitempty"`
	// the time that the report job was requested
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/bireportgenerator/entities.proto.
	JobRequestedTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=job_requested_time,json=jobRequestedTime,proto3" json:"job_requested_time,omitempty"`
	// the time that the report job was completed
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/bireportgenerator/entities.proto.
	JobCompletedTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=job_completed_time,json=jobCompletedTime,proto3" json:"job_completed_time,omitempty"`
	// result of the report job
	Success bool `protobuf:"varint,8,opt,name=success,proto3" json:"success,omitempty"`
	// describes the error that last occurred for the job, if any
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/bireportgenerator/entities.proto.
	FailureReason string `protobuf:"bytes,9,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
	// current attempt number of the report job
	AttemptNumber int64 `protobuf:"varint,10,opt,name=attempt_number,json=attemptNumber,proto3" json:"attempt_number,omitempty"`
	// max attempts of the report job
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/bireportgenerator/entities.proto.
	MaxAttempts int64 `protobuf:"varint,11,opt,name=max_attempts,json=maxAttempts,proto3" json:"max_attempts,omitempty"`
	// create time of the report log
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// update time of the report log
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// dashboard title of the report
	DashboardTitle string `protobuf:"bytes,14,opt,name=dashboard_title,json=dashboardTitle,proto3" json:"dashboard_title,omitempty"`
	// scheduled time is the time that the report is scheduled to run
	ScheduledTime *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	// execution start time is the actual time that the report started processing
	ExecutionStartTime *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=execution_start_time,json=executionStartTime,proto3" json:"execution_start_time,omitempty"`
	// execution end time is the time the report finished processing
	ExecutionEndTime *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=execution_end_time,json=executionEndTime,proto3" json:"execution_end_time,omitempty"`
	// report start date is the beginning date of the report period
	ReportStartDate *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=report_start_date,json=reportStartDate,proto3" json:"report_start_date,omitempty"`
	// report end date is the ending date of the report period
	ReportEndDate *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=report_end_date,json=reportEndDate,proto3" json:"report_end_date,omitempty"`
	// comments describe any errors or empty reports during processing
	Comments []string `protobuf:"bytes,20,rep,name=comments,proto3" json:"comments,omitempty"`
	// timezone is the IANA timezone string of the report
	Timezone string `protobuf:"bytes,21,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// filenames are the successfully delivered files of the report
	Filenames []string `protobuf:"bytes,22,rep,name=filenames,proto3" json:"filenames,omitempty"`
	// insight count of the report
	InsightCount int64 `protobuf:"varint,23,opt,name=insight_count,json=insightCount,proto3" json:"insight_count,omitempty"`
	// delivery definition title is the name of the delivery definition of the report
	DeliveryDefinitionTitle string `protobuf:"bytes,24,opt,name=delivery_definition_title,json=deliveryDefinitionTitle,proto3" json:"delivery_definition_title,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ReportLog) Reset() {
	*x = ReportLog{}
	mi := &file_api_v1alpha1_bireportgenerator_entities_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportLog) ProtoMessage() {}

func (x *ReportLog) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_bireportgenerator_entities_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportLog.ProtoReflect.Descriptor instead.
func (*ReportLog) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_bireportgenerator_entities_proto_rawDescGZIP(), []int{1}
}

func (x *ReportLog) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ReportLog) GetReportLogId() int64 {
	if x != nil {
		return x.ReportLogId
	}
	return 0
}

func (x *ReportLog) GetReportJobId() int64 {
	if x != nil {
		return x.ReportJobId
	}
	return 0
}

func (x *ReportLog) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *ReportLog) GetReportName() string {
	if x != nil {
		return x.ReportName
	}
	return ""
}

// Deprecated: Marked as deprecated in api/v1alpha1/bireportgenerator/entities.proto.
func (x *ReportLog) GetJobRequestedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.JobRequestedTime
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/bireportgenerator/entities.proto.
func (x *ReportLog) GetJobCompletedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.JobCompletedTime
	}
	return nil
}

func (x *ReportLog) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Deprecated: Marked as deprecated in api/v1alpha1/bireportgenerator/entities.proto.
func (x *ReportLog) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

func (x *ReportLog) GetAttemptNumber() int64 {
	if x != nil {
		return x.AttemptNumber
	}
	return 0
}

// Deprecated: Marked as deprecated in api/v1alpha1/bireportgenerator/entities.proto.
func (x *ReportLog) GetMaxAttempts() int64 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

func (x *ReportLog) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ReportLog) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ReportLog) GetDashboardTitle() string {
	if x != nil {
		return x.DashboardTitle
	}
	return ""
}

func (x *ReportLog) GetScheduledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

func (x *ReportLog) GetExecutionStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionStartTime
	}
	return nil
}

func (x *ReportLog) GetExecutionEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionEndTime
	}
	return nil
}

func (x *ReportLog) GetReportStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportStartDate
	}
	return nil
}

func (x *ReportLog) GetReportEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportEndDate
	}
	return nil
}

func (x *ReportLog) GetComments() []string {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *ReportLog) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *ReportLog) GetFilenames() []string {
	if x != nil {
		return x.Filenames
	}
	return nil
}

func (x *ReportLog) GetInsightCount() int64 {
	if x != nil {
		return x.InsightCount
	}
	return 0
}

func (x *ReportLog) GetDeliveryDefinitionTitle() string {
	if x != nil {
		return x.DeliveryDefinitionTitle
	}
	return ""
}

var File_api_v1alpha1_bireportgenerator_entities_proto protoreflect.FileDescriptor

var file_api_v1alpha1_bireportgenerator_entities_proto_rawDesc = string([]byte{
	0x0a, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x62,
	0x69, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x62, 0x69,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a,
	0x23, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x69, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf,
	0x07, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x22, 0x0a, 0x0d,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0c, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0b, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x38,
	0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x45, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x39, 0x0a, 0x0a, 0x64, 0x61, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x44, 0x61, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x09, 0x64, 0x61, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x06, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x06, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x4b, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x11, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x57, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x57, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x73,
	0x76, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x68, 0x69, 0x64, 0x65, 0x43, 0x73, 0x76, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a,
	0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x69,
	0x64, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xa2, 0x09, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x15,
	0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0d, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x10, 0x6a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x6a, 0x6f, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x10, 0x6a, 0x6f, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x0e, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a,
	0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x41, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x88, 0x02, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x62, 0x69, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x0d, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x62, 0x69, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0xa2, 0x02, 0x03, 0x41, 0x56, 0x42, 0xaa, 0x02,
	0x1e, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x69,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0xca,
	0x02, 0x1e, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x42,
	0x69, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0xe2, 0x02, 0x2a, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c,
	0x42, 0x69, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x20,
	0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3a, 0x3a, 0x42,
	0x69, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_v1alpha1_bireportgenerator_entities_proto_rawDescOnce sync.Once
	file_api_v1alpha1_bireportgenerator_entities_proto_rawDescData []byte
)

func file_api_v1alpha1_bireportgenerator_entities_proto_rawDescGZIP() []byte {
	file_api_v1alpha1_bireportgenerator_entities_proto_rawDescOnce.Do(func() {
		file_api_v1alpha1_bireportgenerator_entities_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_v1alpha1_bireportgenerator_entities_proto_rawDesc), len(file_api_v1alpha1_bireportgenerator_entities_proto_rawDesc)))
	})
	return file_api_v1alpha1_bireportgenerator_entities_proto_rawDescData
}

var file_api_v1alpha1_bireportgenerator_entities_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_api_v1alpha1_bireportgenerator_entities_proto_goTypes = []any{
	(*ReportJob)(nil),               // 0: api.v1alpha1.bireportgenerator.ReportJob
	(*ReportLog)(nil),               // 1: api.v1alpha1.bireportgenerator.ReportLog
	(commons.TimePeriod)(0),         // 2: api.commons.TimePeriod
	(*commons.DeliveryTimes)(nil),   // 3: api.commons.DeliveryTimes
	(*commons.DayFilter)(nil),       // 4: api.commons.DayFilter
	(commons.Month)(0),              // 5: api.commons.Month
	(*commons.FormatOptions)(nil),   // 6: api.commons.FormatOptions
	(*commons.DeliveryOptions)(nil), // 7: api.commons.DeliveryOptions
	(*commons.TimeZoneWrapper)(nil), // 8: api.commons.TimeZoneWrapper
	(*commons.CronExpression)(nil),  // 9: api.commons.CronExpression
	(*commons.TransferOptions)(nil), // 10: api.commons.TransferOptions
	(*timestamppb.Timestamp)(nil),   // 11: google.protobuf.Timestamp
}
var file_api_v1alpha1_bireportgenerator_entities_proto_depIdxs = []int32{
	2,  // 0: api.v1alpha1.bireportgenerator.ReportJob.time_period:type_name -> api.commons.TimePeriod
	3,  // 1: api.v1alpha1.bireportgenerator.ReportJob.delivery_times:type_name -> api.commons.DeliveryTimes
	4,  // 2: api.v1alpha1.bireportgenerator.ReportJob.day_filter:type_name -> api.commons.DayFilter
	5,  // 3: api.v1alpha1.bireportgenerator.ReportJob.months:type_name -> api.commons.Month
	6,  // 4: api.v1alpha1.bireportgenerator.ReportJob.format_options:type_name -> api.commons.FormatOptions
	7,  // 5: api.v1alpha1.bireportgenerator.ReportJob.delivery_options:type_name -> api.commons.DeliveryOptions
	8,  // 6: api.v1alpha1.bireportgenerator.ReportJob.time_zone_wrapper:type_name -> api.commons.TimeZoneWrapper
	9,  // 7: api.v1alpha1.bireportgenerator.ReportJob.cron_expression:type_name -> api.commons.CronExpression
	10, // 8: api.v1alpha1.bireportgenerator.ReportJob.transfer_options:type_name -> api.commons.TransferOptions
	11, // 9: api.v1alpha1.bireportgenerator.ReportLog.job_requested_time:type_name -> google.protobuf.Timestamp
	11, // 10: api.v1alpha1.bireportgenerator.ReportLog.job_completed_time:type_name -> google.protobuf.Timestamp
	11, // 11: api.v1alpha1.bireportgenerator.ReportLog.create_time:type_name -> google.protobuf.Timestamp
	11, // 12: api.v1alpha1.bireportgenerator.ReportLog.update_time:type_name -> google.protobuf.Timestamp
	11, // 13: api.v1alpha1.bireportgenerator.ReportLog.scheduled_time:type_name -> google.protobuf.Timestamp
	11, // 14: api.v1alpha1.bireportgenerator.ReportLog.execution_start_time:type_name -> google.protobuf.Timestamp
	11, // 15: api.v1alpha1.bireportgenerator.ReportLog.execution_end_time:type_name -> google.protobuf.Timestamp
	11, // 16: api.v1alpha1.bireportgenerator.ReportLog.report_start_date:type_name -> google.protobuf.Timestamp
	11, // 17: api.v1alpha1.bireportgenerator.ReportLog.report_end_date:type_name -> google.protobuf.Timestamp
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_api_v1alpha1_bireportgenerator_entities_proto_init() }
func file_api_v1alpha1_bireportgenerator_entities_proto_init() {
	if File_api_v1alpha1_bireportgenerator_entities_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_v1alpha1_bireportgenerator_entities_proto_rawDesc), len(file_api_v1alpha1_bireportgenerator_entities_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_v1alpha1_bireportgenerator_entities_proto_goTypes,
		DependencyIndexes: file_api_v1alpha1_bireportgenerator_entities_proto_depIdxs,
		MessageInfos:      file_api_v1alpha1_bireportgenerator_entities_proto_msgTypes,
	}.Build()
	File_api_v1alpha1_bireportgenerator_entities_proto = out.File
	file_api_v1alpha1_bireportgenerator_entities_proto_goTypes = nil
	file_api_v1alpha1_bireportgenerator_entities_proto_depIdxs = nil
}
