// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1alpha1/srec/service.proto

package srecconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	srec "github.com/tcncloud/api-go/api/v1alpha1/srec"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SrecName is the fully-qualified name of the Srec service.
	SrecName = "api.v1alpha1.srec.Srec"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SrecListScreenRecordingsProcedure is the fully-qualified name of the Srec's ListScreenRecordings
	// RPC.
	SrecListScreenRecordingsProcedure = "/api.v1alpha1.srec.Srec/ListScreenRecordings"
	// SrecGetScreenRecordingURLProcedure is the fully-qualified name of the Srec's
	// GetScreenRecordingURL RPC.
	SrecGetScreenRecordingURLProcedure = "/api.v1alpha1.srec.Srec/GetScreenRecordingURL"
	// SrecDeleteScreenRecordingProcedure is the fully-qualified name of the Srec's
	// DeleteScreenRecording RPC.
	SrecDeleteScreenRecordingProcedure = "/api.v1alpha1.srec.Srec/DeleteScreenRecording"
)

// SrecClient is a client for the api.v1alpha1.srec.Srec service.
type SrecClient interface {
	// ListScreenRecordings returns screen recordings.
	ListScreenRecordings(context.Context, *connect_go.Request[srec.ListScreenRecordingsRequest]) (*connect_go.Response[srec.ListScreenRecordingsResponse], error)
	// GetScreenRecordingURL returns the screen recording url.
	GetScreenRecordingURL(context.Context, *connect_go.Request[srec.GetScreenRecordingURLRequest]) (*connect_go.Response[srec.GetScreenRecordingURLResponse], error)
	// DeleteScreenRecording deletes a screen recording.
	DeleteScreenRecording(context.Context, *connect_go.Request[srec.DeleteScreenRecordingRequest]) (*connect_go.Response[srec.DeleteScreenRecordingResponse], error)
}

// NewSrecClient constructs a client for the api.v1alpha1.srec.Srec service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSrecClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SrecClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &srecClient{
		listScreenRecordings: connect_go.NewClient[srec.ListScreenRecordingsRequest, srec.ListScreenRecordingsResponse](
			httpClient,
			baseURL+SrecListScreenRecordingsProcedure,
			opts...,
		),
		getScreenRecordingURL: connect_go.NewClient[srec.GetScreenRecordingURLRequest, srec.GetScreenRecordingURLResponse](
			httpClient,
			baseURL+SrecGetScreenRecordingURLProcedure,
			opts...,
		),
		deleteScreenRecording: connect_go.NewClient[srec.DeleteScreenRecordingRequest, srec.DeleteScreenRecordingResponse](
			httpClient,
			baseURL+SrecDeleteScreenRecordingProcedure,
			opts...,
		),
	}
}

// srecClient implements SrecClient.
type srecClient struct {
	listScreenRecordings  *connect_go.Client[srec.ListScreenRecordingsRequest, srec.ListScreenRecordingsResponse]
	getScreenRecordingURL *connect_go.Client[srec.GetScreenRecordingURLRequest, srec.GetScreenRecordingURLResponse]
	deleteScreenRecording *connect_go.Client[srec.DeleteScreenRecordingRequest, srec.DeleteScreenRecordingResponse]
}

// ListScreenRecordings calls api.v1alpha1.srec.Srec.ListScreenRecordings.
func (c *srecClient) ListScreenRecordings(ctx context.Context, req *connect_go.Request[srec.ListScreenRecordingsRequest]) (*connect_go.Response[srec.ListScreenRecordingsResponse], error) {
	return c.listScreenRecordings.CallUnary(ctx, req)
}

// GetScreenRecordingURL calls api.v1alpha1.srec.Srec.GetScreenRecordingURL.
func (c *srecClient) GetScreenRecordingURL(ctx context.Context, req *connect_go.Request[srec.GetScreenRecordingURLRequest]) (*connect_go.Response[srec.GetScreenRecordingURLResponse], error) {
	return c.getScreenRecordingURL.CallUnary(ctx, req)
}

// DeleteScreenRecording calls api.v1alpha1.srec.Srec.DeleteScreenRecording.
func (c *srecClient) DeleteScreenRecording(ctx context.Context, req *connect_go.Request[srec.DeleteScreenRecordingRequest]) (*connect_go.Response[srec.DeleteScreenRecordingResponse], error) {
	return c.deleteScreenRecording.CallUnary(ctx, req)
}

// SrecHandler is an implementation of the api.v1alpha1.srec.Srec service.
type SrecHandler interface {
	// ListScreenRecordings returns screen recordings.
	ListScreenRecordings(context.Context, *connect_go.Request[srec.ListScreenRecordingsRequest]) (*connect_go.Response[srec.ListScreenRecordingsResponse], error)
	// GetScreenRecordingURL returns the screen recording url.
	GetScreenRecordingURL(context.Context, *connect_go.Request[srec.GetScreenRecordingURLRequest]) (*connect_go.Response[srec.GetScreenRecordingURLResponse], error)
	// DeleteScreenRecording deletes a screen recording.
	DeleteScreenRecording(context.Context, *connect_go.Request[srec.DeleteScreenRecordingRequest]) (*connect_go.Response[srec.DeleteScreenRecordingResponse], error)
}

// NewSrecHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSrecHandler(svc SrecHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(SrecListScreenRecordingsProcedure, connect_go.NewUnaryHandler(
		SrecListScreenRecordingsProcedure,
		svc.ListScreenRecordings,
		opts...,
	))
	mux.Handle(SrecGetScreenRecordingURLProcedure, connect_go.NewUnaryHandler(
		SrecGetScreenRecordingURLProcedure,
		svc.GetScreenRecordingURL,
		opts...,
	))
	mux.Handle(SrecDeleteScreenRecordingProcedure, connect_go.NewUnaryHandler(
		SrecDeleteScreenRecordingProcedure,
		svc.DeleteScreenRecording,
		opts...,
	))
	return "/api.v1alpha1.srec.Srec/", mux
}

// UnimplementedSrecHandler returns CodeUnimplemented from all methods.
type UnimplementedSrecHandler struct{}

func (UnimplementedSrecHandler) ListScreenRecordings(context.Context, *connect_go.Request[srec.ListScreenRecordingsRequest]) (*connect_go.Response[srec.ListScreenRecordingsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.srec.Srec.ListScreenRecordings is not implemented"))
}

func (UnimplementedSrecHandler) GetScreenRecordingURL(context.Context, *connect_go.Request[srec.GetScreenRecordingURLRequest]) (*connect_go.Response[srec.GetScreenRecordingURLResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.srec.Srec.GetScreenRecordingURL is not implemented"))
}

func (UnimplementedSrecHandler) DeleteScreenRecording(context.Context, *connect_go.Request[srec.DeleteScreenRecordingRequest]) (*connect_go.Response[srec.DeleteScreenRecordingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.srec.Srec.DeleteScreenRecording is not implemented"))
}
