// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1alpha1/srec/service.proto

package srec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Srec_ListScreenRecordings_FullMethodName  = "/api.v1alpha1.srec.Srec/ListScreenRecordings"
	Srec_GetScreenRecordingURL_FullMethodName = "/api.v1alpha1.srec.Srec/GetScreenRecordingURL"
	Srec_DeleteScreenRecording_FullMethodName = "/api.v1alpha1.srec.Srec/DeleteScreenRecording"
)

// SrecClient is the client API for Srec service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SrecClient interface {
	// ListScreenRecordings returns screen recordings.
	ListScreenRecordings(ctx context.Context, in *ListScreenRecordingsRequest, opts ...grpc.CallOption) (*ListScreenRecordingsResponse, error)
	// GetScreenRecordingURL returns the screen recording url.
	GetScreenRecordingURL(ctx context.Context, in *GetScreenRecordingURLRequest, opts ...grpc.CallOption) (*GetScreenRecordingURLResponse, error)
	// DeleteScreenRecording deletes a screen recording.
	DeleteScreenRecording(ctx context.Context, in *DeleteScreenRecordingRequest, opts ...grpc.CallOption) (*DeleteScreenRecordingResponse, error)
}

type srecClient struct {
	cc grpc.ClientConnInterface
}

func NewSrecClient(cc grpc.ClientConnInterface) SrecClient {
	return &srecClient{cc}
}

func (c *srecClient) ListScreenRecordings(ctx context.Context, in *ListScreenRecordingsRequest, opts ...grpc.CallOption) (*ListScreenRecordingsResponse, error) {
	out := new(ListScreenRecordingsResponse)
	err := c.cc.Invoke(ctx, Srec_ListScreenRecordings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srecClient) GetScreenRecordingURL(ctx context.Context, in *GetScreenRecordingURLRequest, opts ...grpc.CallOption) (*GetScreenRecordingURLResponse, error) {
	out := new(GetScreenRecordingURLResponse)
	err := c.cc.Invoke(ctx, Srec_GetScreenRecordingURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srecClient) DeleteScreenRecording(ctx context.Context, in *DeleteScreenRecordingRequest, opts ...grpc.CallOption) (*DeleteScreenRecordingResponse, error) {
	out := new(DeleteScreenRecordingResponse)
	err := c.cc.Invoke(ctx, Srec_DeleteScreenRecording_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SrecServer is the server API for Srec service.
// All implementations must embed UnimplementedSrecServer
// for forward compatibility
type SrecServer interface {
	// ListScreenRecordings returns screen recordings.
	ListScreenRecordings(context.Context, *ListScreenRecordingsRequest) (*ListScreenRecordingsResponse, error)
	// GetScreenRecordingURL returns the screen recording url.
	GetScreenRecordingURL(context.Context, *GetScreenRecordingURLRequest) (*GetScreenRecordingURLResponse, error)
	// DeleteScreenRecording deletes a screen recording.
	DeleteScreenRecording(context.Context, *DeleteScreenRecordingRequest) (*DeleteScreenRecordingResponse, error)
	mustEmbedUnimplementedSrecServer()
}

// UnimplementedSrecServer must be embedded to have forward compatible implementations.
type UnimplementedSrecServer struct {
}

func (UnimplementedSrecServer) ListScreenRecordings(context.Context, *ListScreenRecordingsRequest) (*ListScreenRecordingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScreenRecordings not implemented")
}
func (UnimplementedSrecServer) GetScreenRecordingURL(context.Context, *GetScreenRecordingURLRequest) (*GetScreenRecordingURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScreenRecordingURL not implemented")
}
func (UnimplementedSrecServer) DeleteScreenRecording(context.Context, *DeleteScreenRecordingRequest) (*DeleteScreenRecordingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScreenRecording not implemented")
}
func (UnimplementedSrecServer) mustEmbedUnimplementedSrecServer() {}

// UnsafeSrecServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SrecServer will
// result in compilation errors.
type UnsafeSrecServer interface {
	mustEmbedUnimplementedSrecServer()
}

func RegisterSrecServer(s grpc.ServiceRegistrar, srv SrecServer) {
	s.RegisterService(&Srec_ServiceDesc, srv)
}

func _Srec_ListScreenRecordings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScreenRecordingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrecServer).ListScreenRecordings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Srec_ListScreenRecordings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrecServer).ListScreenRecordings(ctx, req.(*ListScreenRecordingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Srec_GetScreenRecordingURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScreenRecordingURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrecServer).GetScreenRecordingURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Srec_GetScreenRecordingURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrecServer).GetScreenRecordingURL(ctx, req.(*GetScreenRecordingURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Srec_DeleteScreenRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScreenRecordingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrecServer).DeleteScreenRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Srec_DeleteScreenRecording_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrecServer).DeleteScreenRecording(ctx, req.(*DeleteScreenRecordingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Srec_ServiceDesc is the grpc.ServiceDesc for Srec service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Srec_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.srec.Srec",
	HandlerType: (*SrecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListScreenRecordings",
			Handler:    _Srec_ListScreenRecordings_Handler,
		},
		{
			MethodName: "GetScreenRecordingURL",
			Handler:    _Srec_GetScreenRecordingURL_Handler,
		},
		{
			MethodName: "DeleteScreenRecording",
			Handler:    _Srec_DeleteScreenRecording_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1alpha1/srec/service.proto",
}
