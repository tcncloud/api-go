// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: api/v1alpha1/integrationspublic/service.proto

package integrationspublic

import (
	integrations "github.com/tcncloud/api-go/api/commons/integrations"
	_ "github.com/tcncloud/api-go/api/v1alpha1/integrations"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Values struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values map[string]*Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Values) Reset() {
	*x = Values{}
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Values) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Values) ProtoMessage() {}

func (x *Values) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Values.ProtoReflect.Descriptor instead.
func (*Values) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_integrationspublic_service_proto_rawDescGZIP(), []int{0}
}

func (x *Values) GetValues() map[string]*Value {
	if x != nil {
		return x.Values
	}
	return nil
}

// kind of like a json value, but we don't support circular references
type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//
	//	*Value_StrVal
	//	*Value_NumVal
	//	*Value_BoolVal
	//	*Value_TimeVal
	//	*Value_CompVal
	//	*Value_IntVal
	Val isValue_Val `protobuf_oneof:"val"`
	// whether this value should be allowed to be stored
	Sensitive bool `protobuf:"varint,5,opt,name=sensitive,proto3" json:"sensitive,omitempty"`
	// what type of data value we *want* to validate as.
	// a value does *not* have to match the validation enum.
	// a value that does not match its validation enum is just invalid.
	Validation integrations.Validation `protobuf:"varint,8,opt,name=validation,proto3,enum=api.commons.integrations.Validation" json:"validation,omitempty"`
}

func (x *Value) Reset() {
	*x = Value{}
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_integrationspublic_service_proto_rawDescGZIP(), []int{1}
}

func (m *Value) GetVal() isValue_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *Value) GetStrVal() string {
	if x, ok := x.GetVal().(*Value_StrVal); ok {
		return x.StrVal
	}
	return ""
}

func (x *Value) GetNumVal() float64 {
	if x, ok := x.GetVal().(*Value_NumVal); ok {
		return x.NumVal
	}
	return 0
}

func (x *Value) GetBoolVal() bool {
	if x, ok := x.GetVal().(*Value_BoolVal); ok {
		return x.BoolVal
	}
	return false
}

func (x *Value) GetTimeVal() *timestamppb.Timestamp {
	if x, ok := x.GetVal().(*Value_TimeVal); ok {
		return x.TimeVal
	}
	return nil
}

func (x *Value) GetCompVal() *CompositeVal {
	if x, ok := x.GetVal().(*Value_CompVal); ok {
		return x.CompVal
	}
	return nil
}

func (x *Value) GetIntVal() int64 {
	if x, ok := x.GetVal().(*Value_IntVal); ok {
		return x.IntVal
	}
	return 0
}

func (x *Value) GetSensitive() bool {
	if x != nil {
		return x.Sensitive
	}
	return false
}

func (x *Value) GetValidation() integrations.Validation {
	if x != nil {
		return x.Validation
	}
	return integrations.Validation(0)
}

type isValue_Val interface {
	isValue_Val()
}

type Value_StrVal struct {
	StrVal string `protobuf:"bytes,1,opt,name=str_val,json=strVal,proto3,oneof"`
}

type Value_NumVal struct {
	NumVal float64 `protobuf:"fixed64,2,opt,name=num_val,json=numVal,proto3,oneof"`
}

type Value_BoolVal struct {
	BoolVal bool `protobuf:"varint,3,opt,name=bool_val,json=boolVal,proto3,oneof"`
}

type Value_TimeVal struct {
	TimeVal *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time_val,json=timeVal,proto3,oneof"`
}

type Value_CompVal struct {
	CompVal *CompositeVal `protobuf:"bytes,6,opt,name=comp_val,json=compVal,proto3,oneof"`
}

type Value_IntVal struct {
	IntVal int64 `protobuf:"varint,7,opt,name=int_val,json=intVal,proto3,oneof"`
}

func (*Value_StrVal) isValue_Val() {}

func (*Value_NumVal) isValue_Val() {}

func (*Value_BoolVal) isValue_Val() {}

func (*Value_TimeVal) isValue_Val() {}

func (*Value_CompVal) isValue_Val() {}

func (*Value_IntVal) isValue_Val() {}

// represents the individual parts of a string, where some of the parts are
// fields in the payload, and other parts are static strings
// CompositeVal cannot handle circular references. Meaning you cannot have two
// values that contain fields of each other in the same payload.
// Fields that are not found when built into a string will throw an error
type CompositeVal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parts []*FieldOrStr `protobuf:"bytes,1,rep,name=parts,proto3" json:"parts,omitempty"`
}

func (x *CompositeVal) Reset() {
	*x = CompositeVal{}
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompositeVal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompositeVal) ProtoMessage() {}

func (x *CompositeVal) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompositeVal.ProtoReflect.Descriptor instead.
func (*CompositeVal) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_integrationspublic_service_proto_rawDescGZIP(), []int{2}
}

func (x *CompositeVal) GetParts() []*FieldOrStr {
	if x != nil {
		return x.Parts
	}
	return nil
}

// represents either a field name whose value needs to be looked up in the payload
// or a static string value
type FieldOrStr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//
	//	*FieldOrStr_Field
	//	*FieldOrStr_StrVal
	Val isFieldOrStr_Val `protobuf_oneof:"val"`
}

func (x *FieldOrStr) Reset() {
	*x = FieldOrStr{}
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldOrStr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldOrStr) ProtoMessage() {}

func (x *FieldOrStr) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldOrStr.ProtoReflect.Descriptor instead.
func (*FieldOrStr) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_integrationspublic_service_proto_rawDescGZIP(), []int{3}
}

func (m *FieldOrStr) GetVal() isFieldOrStr_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *FieldOrStr) GetField() string {
	if x, ok := x.GetVal().(*FieldOrStr_Field); ok {
		return x.Field
	}
	return ""
}

func (x *FieldOrStr) GetStrVal() string {
	if x, ok := x.GetVal().(*FieldOrStr_StrVal); ok {
		return x.StrVal
	}
	return ""
}

type isFieldOrStr_Val interface {
	isFieldOrStr_Val()
}

type FieldOrStr_Field struct {
	Field string `protobuf:"bytes,1,opt,name=field,proto3,oneof"`
}

type FieldOrStr_StrVal struct {
	StrVal string `protobuf:"bytes,2,opt,name=str_val,json=strVal,proto3,oneof"`
}

func (*FieldOrStr_Field) isFieldOrStr_Val() {}

func (*FieldOrStr_StrVal) isFieldOrStr_Val() {}

type PortalConfigId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PortalConfigId) Reset() {
	*x = PortalConfigId{}
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortalConfigId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalConfigId) ProtoMessage() {}

func (x *PortalConfigId) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalConfigId.ProtoReflect.Descriptor instead.
func (*PortalConfigId) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_integrationspublic_service_proto_rawDescGZIP(), []int{4}
}

func (x *PortalConfigId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// all these things will show up on the portal screen to the receiver of the link
// contact info should look like the company who is using the portal(not tcn)
type PortalConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,21,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,22,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,23,opt,name=description,proto3" json:"description,omitempty"`
	// link to pull up a chat with customer service
	ChatClientLink string `protobuf:"bytes,2,opt,name=chat_client_link,json=chatClientLink,proto3" json:"chat_client_link,omitempty"`
	ContactEmail   string `protobuf:"bytes,3,opt,name=contact_email,json=contactEmail,proto3" json:"contact_email,omitempty"`
	ContactPhone   string `protobuf:"bytes,4,opt,name=contact_phone,json=contactPhone,proto3" json:"contact_phone,omitempty"`
	PostalCode     string `protobuf:"bytes,5,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	City           string `protobuf:"bytes,6,opt,name=city,proto3" json:"city,omitempty"`
	State          string `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	CompanyName    string `protobuf:"bytes,8,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	// is the logo used in the corner of the payment portal screen
	Logo []byte `protobuf:"bytes,13,opt,name=logo,proto3" json:"logo,omitempty"`
	// is the primary color used for the portal screen
	PrimaryColor string `protobuf:"bytes,14,opt,name=primary_color,json=primaryColor,proto3" json:"primary_color,omitempty"`
	// accent color used on the portal screen
	SecondaryColor string `protobuf:"bytes,15,opt,name=secondary_color,json=secondaryColor,proto3" json:"secondary_color,omitempty"`
	StreetAddress  string `protobuf:"bytes,19,opt,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty"`
}

func (x *PortalConfig) Reset() {
	*x = PortalConfig{}
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortalConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalConfig) ProtoMessage() {}

func (x *PortalConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalConfig.ProtoReflect.Descriptor instead.
func (*PortalConfig) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_integrationspublic_service_proto_rawDescGZIP(), []int{5}
}

func (x *PortalConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PortalConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PortalConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PortalConfig) GetChatClientLink() string {
	if x != nil {
		return x.ChatClientLink
	}
	return ""
}

func (x *PortalConfig) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

func (x *PortalConfig) GetContactPhone() string {
	if x != nil {
		return x.ContactPhone
	}
	return ""
}

func (x *PortalConfig) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *PortalConfig) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *PortalConfig) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *PortalConfig) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *PortalConfig) GetLogo() []byte {
	if x != nil {
		return x.Logo
	}
	return nil
}

func (x *PortalConfig) GetPrimaryColor() string {
	if x != nil {
		return x.PrimaryColor
	}
	return ""
}

func (x *PortalConfig) GetSecondaryColor() string {
	if x != nil {
		return x.SecondaryColor
	}
	return ""
}

func (x *PortalConfig) GetStreetAddress() string {
	if x != nil {
		return x.StreetAddress
	}
	return ""
}

type PortalLinkId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PortalLinkId) Reset() {
	*x = PortalLinkId{}
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortalLinkId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalLinkId) ProtoMessage() {}

func (x *PortalLinkId) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalLinkId.ProtoReflect.Descriptor instead.
func (*PortalLinkId) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_integrationspublic_service_proto_rawDescGZIP(), []int{6}
}

func (x *PortalLinkId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetLinkDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity *PortalLinkId `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
}

func (x *GetLinkDataReq) Reset() {
	*x = GetLinkDataReq{}
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLinkDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLinkDataReq) ProtoMessage() {}

func (x *GetLinkDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLinkDataReq.ProtoReflect.Descriptor instead.
func (*GetLinkDataReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_integrationspublic_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetLinkDataReq) GetEntity() *PortalLinkId {
	if x != nil {
		return x.Entity
	}
	return nil
}

type GetLinkDataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// true if payment was taken for this link
	Complete bool `protobuf:"varint,2,opt,name=complete,proto3" json:"complete,omitempty"`
	// true if the link is expired
	Expired bool `protobuf:"varint,3,opt,name=expired,proto3" json:"expired,omitempty"`
	// styling info
	PortalConfig *PortalConfig `protobuf:"bytes,4,opt,name=portal_config,json=portalConfig,proto3" json:"portal_config,omitempty"`
	// how the user verifies identity for this portal
	Verification *integrations.VerificationFlow `protobuf:"bytes,5,opt,name=verification,proto3" json:"verification,omitempty"`
	// how the user retrieves invoice for this portal
	Invoice *integrations.InvoiceFlow `protobuf:"bytes,6,opt,name=invoice,proto3" json:"invoice,omitempty"`
	// all the accepted payment flows for this portal
	Payments  []*integrations.PaymentFlow  `protobuf:"bytes,7,rep,name=payments,proto3" json:"payments,omitempty"`
	FlowForms []*GetLinkDataRes_FieldNames `protobuf:"bytes,9,rep,name=flow_forms,json=flowForms,proto3" json:"flow_forms,omitempty"`
	// text that appears on one of the portal pages
	PortalText *PortalText `protobuf:"bytes,15,opt,name=portal_text,json=portalText,proto3" json:"portal_text,omitempty"`
}

func (x *GetLinkDataRes) Reset() {
	*x = GetLinkDataRes{}
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLinkDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLinkDataRes) ProtoMessage() {}

func (x *GetLinkDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLinkDataRes.ProtoReflect.Descriptor instead.
func (*GetLinkDataRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_integrationspublic_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetLinkDataRes) GetComplete() bool {
	if x != nil {
		return x.Complete
	}
	return false
}

func (x *GetLinkDataRes) GetExpired() bool {
	if x != nil {
		return x.Expired
	}
	return false
}

func (x *GetLinkDataRes) GetPortalConfig() *PortalConfig {
	if x != nil {
		return x.PortalConfig
	}
	return nil
}

func (x *GetLinkDataRes) GetVerification() *integrations.VerificationFlow {
	if x != nil {
		return x.Verification
	}
	return nil
}

func (x *GetLinkDataRes) GetInvoice() *integrations.InvoiceFlow {
	if x != nil {
		return x.Invoice
	}
	return nil
}

func (x *GetLinkDataRes) GetPayments() []*integrations.PaymentFlow {
	if x != nil {
		return x.Payments
	}
	return nil
}

func (x *GetLinkDataRes) GetFlowForms() []*GetLinkDataRes_FieldNames {
	if x != nil {
		return x.FlowForms
	}
	return nil
}

func (x *GetLinkDataRes) GetPortalText() *PortalText {
	if x != nil {
		return x.PortalText
	}
	return nil
}

type PortalText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerificationHeader string `protobuf:"bytes,1,opt,name=verification_header,json=verificationHeader,proto3" json:"verification_header,omitempty"`
	VerificationFooter string `protobuf:"bytes,2,opt,name=verification_footer,json=verificationFooter,proto3" json:"verification_footer,omitempty"`
	PaymentHeader      string `protobuf:"bytes,3,opt,name=payment_header,json=paymentHeader,proto3" json:"payment_header,omitempty"`
	PaymentFooter      string `protobuf:"bytes,4,opt,name=payment_footer,json=paymentFooter,proto3" json:"payment_footer,omitempty"`
	ReceiptHeader      string `protobuf:"bytes,5,opt,name=receipt_header,json=receiptHeader,proto3" json:"receipt_header,omitempty"`
	ReceiptFooter      string `protobuf:"bytes,6,opt,name=receipt_footer,json=receiptFooter,proto3" json:"receipt_footer,omitempty"`
	InvoiceHeader      string `protobuf:"bytes,7,opt,name=invoice_header,json=invoiceHeader,proto3" json:"invoice_header,omitempty"`
	InvoiceFooter      string `protobuf:"bytes,8,opt,name=invoice_footer,json=invoiceFooter,proto3" json:"invoice_footer,omitempty"`
}

func (x *PortalText) Reset() {
	*x = PortalText{}
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortalText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalText) ProtoMessage() {}

func (x *PortalText) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalText.ProtoReflect.Descriptor instead.
func (*PortalText) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_integrationspublic_service_proto_rawDescGZIP(), []int{9}
}

func (x *PortalText) GetVerificationHeader() string {
	if x != nil {
		return x.VerificationHeader
	}
	return ""
}

func (x *PortalText) GetVerificationFooter() string {
	if x != nil {
		return x.VerificationFooter
	}
	return ""
}

func (x *PortalText) GetPaymentHeader() string {
	if x != nil {
		return x.PaymentHeader
	}
	return ""
}

func (x *PortalText) GetPaymentFooter() string {
	if x != nil {
		return x.PaymentFooter
	}
	return ""
}

func (x *PortalText) GetReceiptHeader() string {
	if x != nil {
		return x.ReceiptHeader
	}
	return ""
}

func (x *PortalText) GetReceiptFooter() string {
	if x != nil {
		return x.ReceiptFooter
	}
	return ""
}

func (x *PortalText) GetInvoiceHeader() string {
	if x != nil {
		return x.InvoiceHeader
	}
	return ""
}

func (x *PortalText) GetInvoiceFooter() string {
	if x != nil {
		return x.InvoiceFooter
	}
	return ""
}

type SubmitVerificationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity *PortalLinkId `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	// values from the verification form
	VerificationFields map[string]*Value `protobuf:"bytes,2,rep,name=verification_fields,json=verificationFields,proto3" json:"verification_fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubmitVerificationReq) Reset() {
	*x = SubmitVerificationReq{}
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitVerificationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitVerificationReq) ProtoMessage() {}

func (x *SubmitVerificationReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitVerificationReq.ProtoReflect.Descriptor instead.
func (*SubmitVerificationReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_integrationspublic_service_proto_rawDescGZIP(), []int{10}
}

func (x *SubmitVerificationReq) GetEntity() *PortalLinkId {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *SubmitVerificationReq) GetVerificationFields() map[string]*Value {
	if x != nil {
		return x.VerificationFields
	}
	return nil
}

type SubmitVerificationRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// if true, the session_id is valid and the user is considered "logged in"
	Verified bool `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	// must be sent for requests that require a user to be verified
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *SubmitVerificationRes) Reset() {
	*x = SubmitVerificationRes{}
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitVerificationRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitVerificationRes) ProtoMessage() {}

func (x *SubmitVerificationRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitVerificationRes.ProtoReflect.Descriptor instead.
func (*SubmitVerificationRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_integrationspublic_service_proto_rawDescGZIP(), []int{11}
}

func (x *SubmitVerificationRes) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *SubmitVerificationRes) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type SessionKeepAliveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity    *PortalLinkId `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	SessionId string        `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *SessionKeepAliveReq) Reset() {
	*x = SessionKeepAliveReq{}
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionKeepAliveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionKeepAliveReq) ProtoMessage() {}

func (x *SessionKeepAliveReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionKeepAliveReq.ProtoReflect.Descriptor instead.
func (*SessionKeepAliveReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_integrationspublic_service_proto_rawDescGZIP(), []int{12}
}

func (x *SessionKeepAliveReq) GetEntity() *PortalLinkId {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *SessionKeepAliveReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type SessionKeepAliveRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session refreshed ok
	Ok        bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *SessionKeepAliveRes) Reset() {
	*x = SessionKeepAliveRes{}
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionKeepAliveRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionKeepAliveRes) ProtoMessage() {}

func (x *SessionKeepAliveRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionKeepAliveRes.ProtoReflect.Descriptor instead.
func (*SessionKeepAliveRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_integrationspublic_service_proto_rawDescGZIP(), []int{13}
}

func (x *SessionKeepAliveRes) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *SessionKeepAliveRes) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type GetInvoiceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity    *PortalLinkId `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	SessionId string        `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *GetInvoiceReq) Reset() {
	*x = GetInvoiceReq{}
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInvoiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvoiceReq) ProtoMessage() {}

func (x *GetInvoiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvoiceReq.ProtoReflect.Descriptor instead.
func (*GetInvoiceReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_integrationspublic_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetInvoiceReq) GetEntity() *PortalLinkId {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *GetInvoiceReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type GetInvoiceRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the raw data
	Fields       map[string]*Value `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AmountDue    float64           `protobuf:"fixed64,2,opt,name=amount_due,json=amountDue,proto3" json:"amount_due,omitempty"`
	AmountDueKey string            `protobuf:"bytes,3,opt,name=amount_due_key,json=amountDueKey,proto3" json:"amount_due_key,omitempty"`
	// the parsed data
	Invoices *integrations.Invoices `protobuf:"bytes,4,opt,name=invoices,proto3" json:"invoices,omitempty"`
}

func (x *GetInvoiceRes) Reset() {
	*x = GetInvoiceRes{}
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInvoiceRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvoiceRes) ProtoMessage() {}

func (x *GetInvoiceRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvoiceRes.ProtoReflect.Descriptor instead.
func (*GetInvoiceRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_integrationspublic_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetInvoiceRes) GetFields() map[string]*Value {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *GetInvoiceRes) GetAmountDue() float64 {
	if x != nil {
		return x.AmountDue
	}
	return 0
}

func (x *GetInvoiceRes) GetAmountDueKey() string {
	if x != nil {
		return x.AmountDueKey
	}
	return ""
}

func (x *GetInvoiceRes) GetInvoices() *integrations.Invoices {
	if x != nil {
		return x.Invoices
	}
	return nil
}

type SubmitPaymentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity        *PortalLinkId             `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	SessionId     string                    `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	PaymentFields map[string]*Value         `protobuf:"bytes,3,rep,name=payment_fields,json=paymentFields,proto3" json:"payment_fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PaymentFlow   *integrations.PaymentFlow `protobuf:"bytes,4,opt,name=payment_flow,json=paymentFlow,proto3" json:"payment_flow,omitempty"`
}

func (x *SubmitPaymentReq) Reset() {
	*x = SubmitPaymentReq{}
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitPaymentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitPaymentReq) ProtoMessage() {}

func (x *SubmitPaymentReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitPaymentReq.ProtoReflect.Descriptor instead.
func (*SubmitPaymentReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_integrationspublic_service_proto_rawDescGZIP(), []int{16}
}

func (x *SubmitPaymentReq) GetEntity() *PortalLinkId {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *SubmitPaymentReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SubmitPaymentReq) GetPaymentFields() map[string]*Value {
	if x != nil {
		return x.PaymentFields
	}
	return nil
}

func (x *SubmitPaymentReq) GetPaymentFlow() *integrations.PaymentFlow {
	if x != nil {
		return x.PaymentFlow
	}
	return nil
}

type SubmitPaymentRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields        map[string]*Value `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AmountPaid    float64           `protobuf:"fixed64,2,opt,name=amount_paid,json=amountPaid,proto3" json:"amount_paid,omitempty"`
	AmountPaidKey string            `protobuf:"bytes,3,opt,name=amount_paid_key,json=amountPaidKey,proto3" json:"amount_paid_key,omitempty"`
}

func (x *SubmitPaymentRes) Reset() {
	*x = SubmitPaymentRes{}
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitPaymentRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitPaymentRes) ProtoMessage() {}

func (x *SubmitPaymentRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitPaymentRes.ProtoReflect.Descriptor instead.
func (*SubmitPaymentRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_integrationspublic_service_proto_rawDescGZIP(), []int{17}
}

func (x *SubmitPaymentRes) GetFields() map[string]*Value {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SubmitPaymentRes) GetAmountPaid() float64 {
	if x != nil {
		return x.AmountPaid
	}
	return 0
}

func (x *SubmitPaymentRes) GetAmountPaidKey() string {
	if x != nil {
		return x.AmountPaidKey
	}
	return ""
}

type GetReceiptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity    *PortalLinkId `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	SessionId string        `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *GetReceiptReq) Reset() {
	*x = GetReceiptReq{}
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReceiptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceiptReq) ProtoMessage() {}

func (x *GetReceiptReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceiptReq.ProtoReflect.Descriptor instead.
func (*GetReceiptReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_integrationspublic_service_proto_rawDescGZIP(), []int{18}
}

func (x *GetReceiptReq) GetEntity() *PortalLinkId {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *GetReceiptReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type GetReceiptRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiptId string `protobuf:"bytes,1,opt,name=receipt_id,json=receiptId,proto3" json:"receipt_id,omitempty"`
	// the non-sensitive request fields used to make the payment
	Request map[string]*Value `protobuf:"bytes,2,rep,name=request,proto3" json:"request,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// the response from the payment
	Response map[string]*Value `protobuf:"bytes,3,rep,name=response,proto3" json:"response,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// amount charged
	AmountPaid float64 `protobuf:"fixed64,4,opt,name=amount_paid,json=amountPaid,proto3" json:"amount_paid,omitempty"`
	// field in the response that represents the amount charged
	AmountPaidKey string `protobuf:"bytes,5,opt,name=amount_paid_key,json=amountPaidKey,proto3" json:"amount_paid_key,omitempty"`
	// flow name, type and options used
	PaymentFlow *integrations.PaymentFlow `protobuf:"bytes,6,opt,name=payment_flow,json=paymentFlow,proto3" json:"payment_flow,omitempty"`
}

func (x *GetReceiptRes) Reset() {
	*x = GetReceiptRes{}
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReceiptRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceiptRes) ProtoMessage() {}

func (x *GetReceiptRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceiptRes.ProtoReflect.Descriptor instead.
func (*GetReceiptRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_integrationspublic_service_proto_rawDescGZIP(), []int{19}
}

func (x *GetReceiptRes) GetReceiptId() string {
	if x != nil {
		return x.ReceiptId
	}
	return ""
}

func (x *GetReceiptRes) GetRequest() map[string]*Value {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *GetReceiptRes) GetResponse() map[string]*Value {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *GetReceiptRes) GetAmountPaid() float64 {
	if x != nil {
		return x.AmountPaid
	}
	return 0
}

func (x *GetReceiptRes) GetAmountPaidKey() string {
	if x != nil {
		return x.AmountPaidKey
	}
	return ""
}

func (x *GetReceiptRes) GetPaymentFlow() *integrations.PaymentFlow {
	if x != nil {
		return x.PaymentFlow
	}
	return nil
}

type ProcessWorkflowReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// portal link id is optional depending on the type of portal being processed
	// if it is specified, we merge in the link data to the request params
	PortalLinkId string `protobuf:"bytes,1,opt,name=portal_link_id,json=portalLinkId,proto3" json:"portal_link_id,omitempty"`
	PortalId     string `protobuf:"bytes,2,opt,name=portal_id,json=portalId,proto3" json:"portal_id,omitempty"`
	// segment tells us which workflow segment needs processing
	Segment int32 `protobuf:"varint,3,opt,name=segment,proto3" json:"segment,omitempty"`
	// which choice in the workflow array to be processed
	Choice int32 `protobuf:"varint,4,opt,name=choice,proto3" json:"choice,omitempty"`
	// params are what the user fills out before it is processed.
	// It will be merged with plugin instance data and potentially link data
	Params map[string]*Value `protobuf:"bytes,5,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ProcessWorkflowReq) Reset() {
	*x = ProcessWorkflowReq{}
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessWorkflowReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessWorkflowReq) ProtoMessage() {}

func (x *ProcessWorkflowReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessWorkflowReq.ProtoReflect.Descriptor instead.
func (*ProcessWorkflowReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_integrationspublic_service_proto_rawDescGZIP(), []int{20}
}

func (x *ProcessWorkflowReq) GetPortalLinkId() string {
	if x != nil {
		return x.PortalLinkId
	}
	return ""
}

func (x *ProcessWorkflowReq) GetPortalId() string {
	if x != nil {
		return x.PortalId
	}
	return ""
}

func (x *ProcessWorkflowReq) GetSegment() int32 {
	if x != nil {
		return x.Segment
	}
	return 0
}

func (x *ProcessWorkflowReq) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

func (x *ProcessWorkflowReq) GetParams() map[string]*Value {
	if x != nil {
		return x.Params
	}
	return nil
}

type ProcessWorkflowRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// the response data from the process
	Data map[string]*Value `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ProcessWorkflowRes) Reset() {
	*x = ProcessWorkflowRes{}
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessWorkflowRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessWorkflowRes) ProtoMessage() {}

func (x *ProcessWorkflowRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessWorkflowRes.ProtoReflect.Descriptor instead.
func (*ProcessWorkflowRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_integrationspublic_service_proto_rawDescGZIP(), []int{21}
}

func (x *ProcessWorkflowRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ProcessWorkflowRes) GetData() map[string]*Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetLinkDataRes_FieldNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flow       *integrations.Flow              `protobuf:"bytes,8,opt,name=flow,proto3" json:"flow,omitempty"`
	FieldNames []string                        `protobuf:"bytes,9,rep,name=field_names,json=fieldNames,proto3" json:"field_names,omitempty"`
	Fields     []*integrations.FieldDefinition `protobuf:"bytes,10,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *GetLinkDataRes_FieldNames) Reset() {
	*x = GetLinkDataRes_FieldNames{}
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLinkDataRes_FieldNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLinkDataRes_FieldNames) ProtoMessage() {}

func (x *GetLinkDataRes_FieldNames) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_integrationspublic_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLinkDataRes_FieldNames.ProtoReflect.Descriptor instead.
func (*GetLinkDataRes_FieldNames) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_integrationspublic_service_proto_rawDescGZIP(), []int{8, 0}
}

func (x *GetLinkDataRes_FieldNames) GetFlow() *integrations.Flow {
	if x != nil {
		return x.Flow
	}
	return nil
}

func (x *GetLinkDataRes_FieldNames) GetFieldNames() []string {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

func (x *GetLinkDataRes_FieldNames) GetFields() []*integrations.FieldDefinition {
	if x != nil {
		return x.Fields
	}
	return nil
}

var File_api_v1alpha1_integrationspublic_service_proto protoreflect.FileDescriptor

var file_api_v1alpha1_integrationspublic_service_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x1a, 0x2b, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x01, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x4b, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x61, 0x0a,
	0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe5, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x73, 0x74,
	0x72, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x56, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c,
	0x12, 0x1b, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x12, 0x37, 0x0a,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x12, 0x4a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x76,
	0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x56,
	0x61, 0x6c, 0x12, 0x19, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x05, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x51, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f,
	0x72, 0x53, 0x74, 0x72, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x22, 0x46, 0x0a, 0x0a, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4f, 0x72, 0x53, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x19, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x42, 0x05, 0x0a, 0x03,
	0x76, 0x61, 0x6c, 0x22, 0x20, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc5, 0x03, 0x0a, 0x0c, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x74, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6c, 0x6f,
	0x67, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0d, 0x22, 0x1e, 0x0a,
	0x0c, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x57, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12,
	0x45, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x52, 0x06,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xbe, 0x05, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x52, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x07, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x08, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x6f, 0x72,
	0x6d, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x54, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74,
	0x1a, 0xa4, 0x01, 0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x32, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x66,
	0x6c, 0x6f, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xd8, 0x02, 0x0a, 0x0a, 0x50, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x46, 0x6f,
	0x6f, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x6f, 0x74,
	0x65, 0x72, 0x22, 0xce, 0x02, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x06,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x7f, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x1a, 0x6d, 0x0a, 0x17, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x52, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x13, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x45,
	0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x13, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x6f,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x06, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0xcb, 0x02, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x64, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x64, 0x75, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x08,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x61, 0x0a, 0x0b,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x99, 0x03, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e,
	0x6b, 0x49, 0x64, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x6b, 0x0a, 0x0e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x44, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x6f,
	0x77, 0x1a, 0x68, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x95, 0x02, 0x0a, 0x10,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x12, 0x55, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x69, 0x64, 0x4b, 0x65, 0x79,
	0x1a, 0x61, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x75, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e,
	0x6b, 0x49, 0x64, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xbb, 0x04, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x58, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x52, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x69, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61,
	0x69, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c,
	0x6f, 0x77, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x1a,
	0x62, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x63, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc5, 0x02, 0x0a, 0x12, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x12,
	0x24, 0x0a, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x4c,
	0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x61, 0x0a,
	0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe2, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x51, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x5f, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x81, 0x0a, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0xa8, 0x01, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x22, 0x37,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x67, 0x65, 0x74, 0x6c,
	0x69, 0x6e, 0x6b, 0x64, 0x61, 0x74, 0x61, 0x12, 0xc4, 0x01, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x3e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a, 0x22, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xbc,
	0x01, 0x0a, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x12, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x65,
	0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x22,
	0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01, 0x2a, 0x22, 0x31, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x12, 0xa4, 0x01,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x22, 0x36, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x12, 0xb0, 0x01, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x39, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xa4, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01,
	0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2f, 0x67, 0x65, 0x74, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0xb8,
	0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x12, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x22, 0x3b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x8d, 0x02, 0x0a, 0x23, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x42, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63,
	0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0xa2, 0x02, 0x03,
	0x41, 0x56, 0x49, 0xaa, 0x02, 0x1f, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0xca, 0x02, 0x1f, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x5c, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0xe2, 0x02, 0x2b, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x21, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x3a, 0x3a, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_api_v1alpha1_integrationspublic_service_proto_rawDescOnce sync.Once
	file_api_v1alpha1_integrationspublic_service_proto_rawDescData = file_api_v1alpha1_integrationspublic_service_proto_rawDesc
)

func file_api_v1alpha1_integrationspublic_service_proto_rawDescGZIP() []byte {
	file_api_v1alpha1_integrationspublic_service_proto_rawDescOnce.Do(func() {
		file_api_v1alpha1_integrationspublic_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1alpha1_integrationspublic_service_proto_rawDescData)
	})
	return file_api_v1alpha1_integrationspublic_service_proto_rawDescData
}

var file_api_v1alpha1_integrationspublic_service_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_api_v1alpha1_integrationspublic_service_proto_goTypes = []any{
	(*Values)(nil),                        // 0: api.v1alpha1.integrationspublic.Values
	(*Value)(nil),                         // 1: api.v1alpha1.integrationspublic.Value
	(*CompositeVal)(nil),                  // 2: api.v1alpha1.integrationspublic.CompositeVal
	(*FieldOrStr)(nil),                    // 3: api.v1alpha1.integrationspublic.FieldOrStr
	(*PortalConfigId)(nil),                // 4: api.v1alpha1.integrationspublic.PortalConfigId
	(*PortalConfig)(nil),                  // 5: api.v1alpha1.integrationspublic.PortalConfig
	(*PortalLinkId)(nil),                  // 6: api.v1alpha1.integrationspublic.PortalLinkId
	(*GetLinkDataReq)(nil),                // 7: api.v1alpha1.integrationspublic.GetLinkDataReq
	(*GetLinkDataRes)(nil),                // 8: api.v1alpha1.integrationspublic.GetLinkDataRes
	(*PortalText)(nil),                    // 9: api.v1alpha1.integrationspublic.PortalText
	(*SubmitVerificationReq)(nil),         // 10: api.v1alpha1.integrationspublic.SubmitVerificationReq
	(*SubmitVerificationRes)(nil),         // 11: api.v1alpha1.integrationspublic.SubmitVerificationRes
	(*SessionKeepAliveReq)(nil),           // 12: api.v1alpha1.integrationspublic.SessionKeepAliveReq
	(*SessionKeepAliveRes)(nil),           // 13: api.v1alpha1.integrationspublic.SessionKeepAliveRes
	(*GetInvoiceReq)(nil),                 // 14: api.v1alpha1.integrationspublic.GetInvoiceReq
	(*GetInvoiceRes)(nil),                 // 15: api.v1alpha1.integrationspublic.GetInvoiceRes
	(*SubmitPaymentReq)(nil),              // 16: api.v1alpha1.integrationspublic.SubmitPaymentReq
	(*SubmitPaymentRes)(nil),              // 17: api.v1alpha1.integrationspublic.SubmitPaymentRes
	(*GetReceiptReq)(nil),                 // 18: api.v1alpha1.integrationspublic.GetReceiptReq
	(*GetReceiptRes)(nil),                 // 19: api.v1alpha1.integrationspublic.GetReceiptRes
	(*ProcessWorkflowReq)(nil),            // 20: api.v1alpha1.integrationspublic.ProcessWorkflowReq
	(*ProcessWorkflowRes)(nil),            // 21: api.v1alpha1.integrationspublic.ProcessWorkflowRes
	nil,                                   // 22: api.v1alpha1.integrationspublic.Values.ValuesEntry
	(*GetLinkDataRes_FieldNames)(nil),     // 23: api.v1alpha1.integrationspublic.GetLinkDataRes.FieldNames
	nil,                                   // 24: api.v1alpha1.integrationspublic.SubmitVerificationReq.VerificationFieldsEntry
	nil,                                   // 25: api.v1alpha1.integrationspublic.GetInvoiceRes.FieldsEntry
	nil,                                   // 26: api.v1alpha1.integrationspublic.SubmitPaymentReq.PaymentFieldsEntry
	nil,                                   // 27: api.v1alpha1.integrationspublic.SubmitPaymentRes.FieldsEntry
	nil,                                   // 28: api.v1alpha1.integrationspublic.GetReceiptRes.RequestEntry
	nil,                                   // 29: api.v1alpha1.integrationspublic.GetReceiptRes.ResponseEntry
	nil,                                   // 30: api.v1alpha1.integrationspublic.ProcessWorkflowReq.ParamsEntry
	nil,                                   // 31: api.v1alpha1.integrationspublic.ProcessWorkflowRes.DataEntry
	(*timestamppb.Timestamp)(nil),         // 32: google.protobuf.Timestamp
	(integrations.Validation)(0),          // 33: api.commons.integrations.Validation
	(*integrations.VerificationFlow)(nil), // 34: api.commons.integrations.VerificationFlow
	(*integrations.InvoiceFlow)(nil),      // 35: api.commons.integrations.InvoiceFlow
	(*integrations.PaymentFlow)(nil),      // 36: api.commons.integrations.PaymentFlow
	(*integrations.Invoices)(nil),         // 37: api.commons.integrations.Invoices
	(*integrations.Flow)(nil),             // 38: api.commons.integrations.Flow
	(*integrations.FieldDefinition)(nil),  // 39: api.commons.integrations.FieldDefinition
}
var file_api_v1alpha1_integrationspublic_service_proto_depIdxs = []int32{
	22, // 0: api.v1alpha1.integrationspublic.Values.values:type_name -> api.v1alpha1.integrationspublic.Values.ValuesEntry
	32, // 1: api.v1alpha1.integrationspublic.Value.time_val:type_name -> google.protobuf.Timestamp
	2,  // 2: api.v1alpha1.integrationspublic.Value.comp_val:type_name -> api.v1alpha1.integrationspublic.CompositeVal
	33, // 3: api.v1alpha1.integrationspublic.Value.validation:type_name -> api.commons.integrations.Validation
	3,  // 4: api.v1alpha1.integrationspublic.CompositeVal.parts:type_name -> api.v1alpha1.integrationspublic.FieldOrStr
	6,  // 5: api.v1alpha1.integrationspublic.GetLinkDataReq.entity:type_name -> api.v1alpha1.integrationspublic.PortalLinkId
	5,  // 6: api.v1alpha1.integrationspublic.GetLinkDataRes.portal_config:type_name -> api.v1alpha1.integrationspublic.PortalConfig
	34, // 7: api.v1alpha1.integrationspublic.GetLinkDataRes.verification:type_name -> api.commons.integrations.VerificationFlow
	35, // 8: api.v1alpha1.integrationspublic.GetLinkDataRes.invoice:type_name -> api.commons.integrations.InvoiceFlow
	36, // 9: api.v1alpha1.integrationspublic.GetLinkDataRes.payments:type_name -> api.commons.integrations.PaymentFlow
	23, // 10: api.v1alpha1.integrationspublic.GetLinkDataRes.flow_forms:type_name -> api.v1alpha1.integrationspublic.GetLinkDataRes.FieldNames
	9,  // 11: api.v1alpha1.integrationspublic.GetLinkDataRes.portal_text:type_name -> api.v1alpha1.integrationspublic.PortalText
	6,  // 12: api.v1alpha1.integrationspublic.SubmitVerificationReq.entity:type_name -> api.v1alpha1.integrationspublic.PortalLinkId
	24, // 13: api.v1alpha1.integrationspublic.SubmitVerificationReq.verification_fields:type_name -> api.v1alpha1.integrationspublic.SubmitVerificationReq.VerificationFieldsEntry
	6,  // 14: api.v1alpha1.integrationspublic.SessionKeepAliveReq.entity:type_name -> api.v1alpha1.integrationspublic.PortalLinkId
	6,  // 15: api.v1alpha1.integrationspublic.GetInvoiceReq.entity:type_name -> api.v1alpha1.integrationspublic.PortalLinkId
	25, // 16: api.v1alpha1.integrationspublic.GetInvoiceRes.fields:type_name -> api.v1alpha1.integrationspublic.GetInvoiceRes.FieldsEntry
	37, // 17: api.v1alpha1.integrationspublic.GetInvoiceRes.invoices:type_name -> api.commons.integrations.Invoices
	6,  // 18: api.v1alpha1.integrationspublic.SubmitPaymentReq.entity:type_name -> api.v1alpha1.integrationspublic.PortalLinkId
	26, // 19: api.v1alpha1.integrationspublic.SubmitPaymentReq.payment_fields:type_name -> api.v1alpha1.integrationspublic.SubmitPaymentReq.PaymentFieldsEntry
	36, // 20: api.v1alpha1.integrationspublic.SubmitPaymentReq.payment_flow:type_name -> api.commons.integrations.PaymentFlow
	27, // 21: api.v1alpha1.integrationspublic.SubmitPaymentRes.fields:type_name -> api.v1alpha1.integrationspublic.SubmitPaymentRes.FieldsEntry
	6,  // 22: api.v1alpha1.integrationspublic.GetReceiptReq.entity:type_name -> api.v1alpha1.integrationspublic.PortalLinkId
	28, // 23: api.v1alpha1.integrationspublic.GetReceiptRes.request:type_name -> api.v1alpha1.integrationspublic.GetReceiptRes.RequestEntry
	29, // 24: api.v1alpha1.integrationspublic.GetReceiptRes.response:type_name -> api.v1alpha1.integrationspublic.GetReceiptRes.ResponseEntry
	36, // 25: api.v1alpha1.integrationspublic.GetReceiptRes.payment_flow:type_name -> api.commons.integrations.PaymentFlow
	30, // 26: api.v1alpha1.integrationspublic.ProcessWorkflowReq.params:type_name -> api.v1alpha1.integrationspublic.ProcessWorkflowReq.ParamsEntry
	31, // 27: api.v1alpha1.integrationspublic.ProcessWorkflowRes.data:type_name -> api.v1alpha1.integrationspublic.ProcessWorkflowRes.DataEntry
	1,  // 28: api.v1alpha1.integrationspublic.Values.ValuesEntry.value:type_name -> api.v1alpha1.integrationspublic.Value
	38, // 29: api.v1alpha1.integrationspublic.GetLinkDataRes.FieldNames.flow:type_name -> api.commons.integrations.Flow
	39, // 30: api.v1alpha1.integrationspublic.GetLinkDataRes.FieldNames.fields:type_name -> api.commons.integrations.FieldDefinition
	1,  // 31: api.v1alpha1.integrationspublic.SubmitVerificationReq.VerificationFieldsEntry.value:type_name -> api.v1alpha1.integrationspublic.Value
	1,  // 32: api.v1alpha1.integrationspublic.GetInvoiceRes.FieldsEntry.value:type_name -> api.v1alpha1.integrationspublic.Value
	1,  // 33: api.v1alpha1.integrationspublic.SubmitPaymentReq.PaymentFieldsEntry.value:type_name -> api.v1alpha1.integrationspublic.Value
	1,  // 34: api.v1alpha1.integrationspublic.SubmitPaymentRes.FieldsEntry.value:type_name -> api.v1alpha1.integrationspublic.Value
	1,  // 35: api.v1alpha1.integrationspublic.GetReceiptRes.RequestEntry.value:type_name -> api.v1alpha1.integrationspublic.Value
	1,  // 36: api.v1alpha1.integrationspublic.GetReceiptRes.ResponseEntry.value:type_name -> api.v1alpha1.integrationspublic.Value
	1,  // 37: api.v1alpha1.integrationspublic.ProcessWorkflowReq.ParamsEntry.value:type_name -> api.v1alpha1.integrationspublic.Value
	1,  // 38: api.v1alpha1.integrationspublic.ProcessWorkflowRes.DataEntry.value:type_name -> api.v1alpha1.integrationspublic.Value
	7,  // 39: api.v1alpha1.integrationspublic.IntegrationsPublic.GetLinkData:input_type -> api.v1alpha1.integrationspublic.GetLinkDataReq
	10, // 40: api.v1alpha1.integrationspublic.IntegrationsPublic.SubmitVerification:input_type -> api.v1alpha1.integrationspublic.SubmitVerificationReq
	12, // 41: api.v1alpha1.integrationspublic.IntegrationsPublic.SessionKeepAlive:input_type -> api.v1alpha1.integrationspublic.SessionKeepAliveReq
	14, // 42: api.v1alpha1.integrationspublic.IntegrationsPublic.GetInvoice:input_type -> api.v1alpha1.integrationspublic.GetInvoiceReq
	16, // 43: api.v1alpha1.integrationspublic.IntegrationsPublic.SubmitPayment:input_type -> api.v1alpha1.integrationspublic.SubmitPaymentReq
	18, // 44: api.v1alpha1.integrationspublic.IntegrationsPublic.GetReceipt:input_type -> api.v1alpha1.integrationspublic.GetReceiptReq
	20, // 45: api.v1alpha1.integrationspublic.IntegrationsPublic.ProcessWorkflow:input_type -> api.v1alpha1.integrationspublic.ProcessWorkflowReq
	8,  // 46: api.v1alpha1.integrationspublic.IntegrationsPublic.GetLinkData:output_type -> api.v1alpha1.integrationspublic.GetLinkDataRes
	11, // 47: api.v1alpha1.integrationspublic.IntegrationsPublic.SubmitVerification:output_type -> api.v1alpha1.integrationspublic.SubmitVerificationRes
	13, // 48: api.v1alpha1.integrationspublic.IntegrationsPublic.SessionKeepAlive:output_type -> api.v1alpha1.integrationspublic.SessionKeepAliveRes
	15, // 49: api.v1alpha1.integrationspublic.IntegrationsPublic.GetInvoice:output_type -> api.v1alpha1.integrationspublic.GetInvoiceRes
	17, // 50: api.v1alpha1.integrationspublic.IntegrationsPublic.SubmitPayment:output_type -> api.v1alpha1.integrationspublic.SubmitPaymentRes
	19, // 51: api.v1alpha1.integrationspublic.IntegrationsPublic.GetReceipt:output_type -> api.v1alpha1.integrationspublic.GetReceiptRes
	21, // 52: api.v1alpha1.integrationspublic.IntegrationsPublic.ProcessWorkflow:output_type -> api.v1alpha1.integrationspublic.ProcessWorkflowRes
	46, // [46:53] is the sub-list for method output_type
	39, // [39:46] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_api_v1alpha1_integrationspublic_service_proto_init() }
func file_api_v1alpha1_integrationspublic_service_proto_init() {
	if File_api_v1alpha1_integrationspublic_service_proto != nil {
		return
	}
	file_api_v1alpha1_integrationspublic_service_proto_msgTypes[1].OneofWrappers = []any{
		(*Value_StrVal)(nil),
		(*Value_NumVal)(nil),
		(*Value_BoolVal)(nil),
		(*Value_TimeVal)(nil),
		(*Value_CompVal)(nil),
		(*Value_IntVal)(nil),
	}
	file_api_v1alpha1_integrationspublic_service_proto_msgTypes[3].OneofWrappers = []any{
		(*FieldOrStr_Field)(nil),
		(*FieldOrStr_StrVal)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1alpha1_integrationspublic_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1alpha1_integrationspublic_service_proto_goTypes,
		DependencyIndexes: file_api_v1alpha1_integrationspublic_service_proto_depIdxs,
		MessageInfos:      file_api_v1alpha1_integrationspublic_service_proto_msgTypes,
	}.Build()
	File_api_v1alpha1_integrationspublic_service_proto = out.File
	file_api_v1alpha1_integrationspublic_service_proto_rawDesc = nil
	file_api_v1alpha1_integrationspublic_service_proto_goTypes = nil
	file_api_v1alpha1_integrationspublic_service_proto_depIdxs = nil
}
