// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1alpha1/integrationspublic/service.proto

package integrationspublic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	IntegrationsPublic_GetLinkData_FullMethodName        = "/api.v1alpha1.integrationspublic.IntegrationsPublic/GetLinkData"
	IntegrationsPublic_SubmitVerification_FullMethodName = "/api.v1alpha1.integrationspublic.IntegrationsPublic/SubmitVerification"
	IntegrationsPublic_SessionKeepAlive_FullMethodName   = "/api.v1alpha1.integrationspublic.IntegrationsPublic/SessionKeepAlive"
	IntegrationsPublic_GetInvoice_FullMethodName         = "/api.v1alpha1.integrationspublic.IntegrationsPublic/GetInvoice"
	IntegrationsPublic_SubmitPayment_FullMethodName      = "/api.v1alpha1.integrationspublic.IntegrationsPublic/SubmitPayment"
	IntegrationsPublic_GetReceipt_FullMethodName         = "/api.v1alpha1.integrationspublic.IntegrationsPublic/GetReceipt"
	IntegrationsPublic_ProcessWorkflow_FullMethodName    = "/api.v1alpha1.integrationspublic.IntegrationsPublic/ProcessWorkflow"
	IntegrationsPublic_GetLinkDetails_FullMethodName     = "/api.v1alpha1.integrationspublic.IntegrationsPublic/GetLinkDetails"
	IntegrationsPublic_CalculateFees_FullMethodName      = "/api.v1alpha1.integrationspublic.IntegrationsPublic/CalculateFees"
	IntegrationsPublic_DeliverReceipt_FullMethodName     = "/api.v1alpha1.integrationspublic.IntegrationsPublic/DeliverReceipt"
)

// IntegrationsPublicClient is the client API for IntegrationsPublic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntegrationsPublicClient interface {
	GetLinkData(ctx context.Context, in *GetLinkDataReq, opts ...grpc.CallOption) (*GetLinkDataRes, error)
	SubmitVerification(ctx context.Context, in *SubmitVerificationReq, opts ...grpc.CallOption) (*SubmitVerificationRes, error)
	SessionKeepAlive(ctx context.Context, in *SessionKeepAliveReq, opts ...grpc.CallOption) (*SessionKeepAliveRes, error)
	GetInvoice(ctx context.Context, in *GetInvoiceReq, opts ...grpc.CallOption) (*GetInvoiceRes, error)
	SubmitPayment(ctx context.Context, in *SubmitPaymentReq, opts ...grpc.CallOption) (*SubmitPaymentRes, error)
	GetReceipt(ctx context.Context, in *GetReceiptReq, opts ...grpc.CallOption) (*GetReceiptRes, error)
	ProcessWorkflow(ctx context.Context, in *ProcessWorkflowReq, opts ...grpc.CallOption) (*ProcessWorkflowRes, error)
	GetLinkDetails(ctx context.Context, in *GetLinkDetailsReq, opts ...grpc.CallOption) (*GetLinkDetailsRes, error)
	CalculateFees(ctx context.Context, in *CalculateFeesReq, opts ...grpc.CallOption) (*CalculateFeesRes, error)
	DeliverReceipt(ctx context.Context, in *DeliverReceiptReq, opts ...grpc.CallOption) (*DeliverReceiptRes, error)
}

type integrationsPublicClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegrationsPublicClient(cc grpc.ClientConnInterface) IntegrationsPublicClient {
	return &integrationsPublicClient{cc}
}

func (c *integrationsPublicClient) GetLinkData(ctx context.Context, in *GetLinkDataReq, opts ...grpc.CallOption) (*GetLinkDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLinkDataRes)
	err := c.cc.Invoke(ctx, IntegrationsPublic_GetLinkData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsPublicClient) SubmitVerification(ctx context.Context, in *SubmitVerificationReq, opts ...grpc.CallOption) (*SubmitVerificationRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitVerificationRes)
	err := c.cc.Invoke(ctx, IntegrationsPublic_SubmitVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsPublicClient) SessionKeepAlive(ctx context.Context, in *SessionKeepAliveReq, opts ...grpc.CallOption) (*SessionKeepAliveRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionKeepAliveRes)
	err := c.cc.Invoke(ctx, IntegrationsPublic_SessionKeepAlive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsPublicClient) GetInvoice(ctx context.Context, in *GetInvoiceReq, opts ...grpc.CallOption) (*GetInvoiceRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvoiceRes)
	err := c.cc.Invoke(ctx, IntegrationsPublic_GetInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsPublicClient) SubmitPayment(ctx context.Context, in *SubmitPaymentReq, opts ...grpc.CallOption) (*SubmitPaymentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitPaymentRes)
	err := c.cc.Invoke(ctx, IntegrationsPublic_SubmitPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsPublicClient) GetReceipt(ctx context.Context, in *GetReceiptReq, opts ...grpc.CallOption) (*GetReceiptRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReceiptRes)
	err := c.cc.Invoke(ctx, IntegrationsPublic_GetReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsPublicClient) ProcessWorkflow(ctx context.Context, in *ProcessWorkflowReq, opts ...grpc.CallOption) (*ProcessWorkflowRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessWorkflowRes)
	err := c.cc.Invoke(ctx, IntegrationsPublic_ProcessWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsPublicClient) GetLinkDetails(ctx context.Context, in *GetLinkDetailsReq, opts ...grpc.CallOption) (*GetLinkDetailsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLinkDetailsRes)
	err := c.cc.Invoke(ctx, IntegrationsPublic_GetLinkDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsPublicClient) CalculateFees(ctx context.Context, in *CalculateFeesReq, opts ...grpc.CallOption) (*CalculateFeesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateFeesRes)
	err := c.cc.Invoke(ctx, IntegrationsPublic_CalculateFees_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsPublicClient) DeliverReceipt(ctx context.Context, in *DeliverReceiptReq, opts ...grpc.CallOption) (*DeliverReceiptRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeliverReceiptRes)
	err := c.cc.Invoke(ctx, IntegrationsPublic_DeliverReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegrationsPublicServer is the server API for IntegrationsPublic service.
// All implementations must embed UnimplementedIntegrationsPublicServer
// for forward compatibility.
type IntegrationsPublicServer interface {
	GetLinkData(context.Context, *GetLinkDataReq) (*GetLinkDataRes, error)
	SubmitVerification(context.Context, *SubmitVerificationReq) (*SubmitVerificationRes, error)
	SessionKeepAlive(context.Context, *SessionKeepAliveReq) (*SessionKeepAliveRes, error)
	GetInvoice(context.Context, *GetInvoiceReq) (*GetInvoiceRes, error)
	SubmitPayment(context.Context, *SubmitPaymentReq) (*SubmitPaymentRes, error)
	GetReceipt(context.Context, *GetReceiptReq) (*GetReceiptRes, error)
	ProcessWorkflow(context.Context, *ProcessWorkflowReq) (*ProcessWorkflowRes, error)
	GetLinkDetails(context.Context, *GetLinkDetailsReq) (*GetLinkDetailsRes, error)
	CalculateFees(context.Context, *CalculateFeesReq) (*CalculateFeesRes, error)
	DeliverReceipt(context.Context, *DeliverReceiptReq) (*DeliverReceiptRes, error)
	mustEmbedUnimplementedIntegrationsPublicServer()
}

// UnimplementedIntegrationsPublicServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIntegrationsPublicServer struct{}

func (UnimplementedIntegrationsPublicServer) GetLinkData(context.Context, *GetLinkDataReq) (*GetLinkDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinkData not implemented")
}
func (UnimplementedIntegrationsPublicServer) SubmitVerification(context.Context, *SubmitVerificationReq) (*SubmitVerificationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitVerification not implemented")
}
func (UnimplementedIntegrationsPublicServer) SessionKeepAlive(context.Context, *SessionKeepAliveReq) (*SessionKeepAliveRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionKeepAlive not implemented")
}
func (UnimplementedIntegrationsPublicServer) GetInvoice(context.Context, *GetInvoiceReq) (*GetInvoiceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoice not implemented")
}
func (UnimplementedIntegrationsPublicServer) SubmitPayment(context.Context, *SubmitPaymentReq) (*SubmitPaymentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPayment not implemented")
}
func (UnimplementedIntegrationsPublicServer) GetReceipt(context.Context, *GetReceiptReq) (*GetReceiptRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceipt not implemented")
}
func (UnimplementedIntegrationsPublicServer) ProcessWorkflow(context.Context, *ProcessWorkflowReq) (*ProcessWorkflowRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessWorkflow not implemented")
}
func (UnimplementedIntegrationsPublicServer) GetLinkDetails(context.Context, *GetLinkDetailsReq) (*GetLinkDetailsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinkDetails not implemented")
}
func (UnimplementedIntegrationsPublicServer) CalculateFees(context.Context, *CalculateFeesReq) (*CalculateFeesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateFees not implemented")
}
func (UnimplementedIntegrationsPublicServer) DeliverReceipt(context.Context, *DeliverReceiptReq) (*DeliverReceiptRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeliverReceipt not implemented")
}
func (UnimplementedIntegrationsPublicServer) mustEmbedUnimplementedIntegrationsPublicServer() {}
func (UnimplementedIntegrationsPublicServer) testEmbeddedByValue()                            {}

// UnsafeIntegrationsPublicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntegrationsPublicServer will
// result in compilation errors.
type UnsafeIntegrationsPublicServer interface {
	mustEmbedUnimplementedIntegrationsPublicServer()
}

func RegisterIntegrationsPublicServer(s grpc.ServiceRegistrar, srv IntegrationsPublicServer) {
	// If the following call pancis, it indicates UnimplementedIntegrationsPublicServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IntegrationsPublic_ServiceDesc, srv)
}

func _IntegrationsPublic_GetLinkData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinkDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsPublicServer).GetLinkData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationsPublic_GetLinkData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsPublicServer).GetLinkData(ctx, req.(*GetLinkDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationsPublic_SubmitVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitVerificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsPublicServer).SubmitVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationsPublic_SubmitVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsPublicServer).SubmitVerification(ctx, req.(*SubmitVerificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationsPublic_SessionKeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionKeepAliveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsPublicServer).SessionKeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationsPublic_SessionKeepAlive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsPublicServer).SessionKeepAlive(ctx, req.(*SessionKeepAliveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationsPublic_GetInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsPublicServer).GetInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationsPublic_GetInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsPublicServer).GetInvoice(ctx, req.(*GetInvoiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationsPublic_SubmitPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitPaymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsPublicServer).SubmitPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationsPublic_SubmitPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsPublicServer).SubmitPayment(ctx, req.(*SubmitPaymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationsPublic_GetReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsPublicServer).GetReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationsPublic_GetReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsPublicServer).GetReceipt(ctx, req.(*GetReceiptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationsPublic_ProcessWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessWorkflowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsPublicServer).ProcessWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationsPublic_ProcessWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsPublicServer).ProcessWorkflow(ctx, req.(*ProcessWorkflowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationsPublic_GetLinkDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinkDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsPublicServer).GetLinkDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationsPublic_GetLinkDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsPublicServer).GetLinkDetails(ctx, req.(*GetLinkDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationsPublic_CalculateFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateFeesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsPublicServer).CalculateFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationsPublic_CalculateFees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsPublicServer).CalculateFees(ctx, req.(*CalculateFeesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationsPublic_DeliverReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverReceiptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsPublicServer).DeliverReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationsPublic_DeliverReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsPublicServer).DeliverReceipt(ctx, req.(*DeliverReceiptReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IntegrationsPublic_ServiceDesc is the grpc.ServiceDesc for IntegrationsPublic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntegrationsPublic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.integrationspublic.IntegrationsPublic",
	HandlerType: (*IntegrationsPublicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLinkData",
			Handler:    _IntegrationsPublic_GetLinkData_Handler,
		},
		{
			MethodName: "SubmitVerification",
			Handler:    _IntegrationsPublic_SubmitVerification_Handler,
		},
		{
			MethodName: "SessionKeepAlive",
			Handler:    _IntegrationsPublic_SessionKeepAlive_Handler,
		},
		{
			MethodName: "GetInvoice",
			Handler:    _IntegrationsPublic_GetInvoice_Handler,
		},
		{
			MethodName: "SubmitPayment",
			Handler:    _IntegrationsPublic_SubmitPayment_Handler,
		},
		{
			MethodName: "GetReceipt",
			Handler:    _IntegrationsPublic_GetReceipt_Handler,
		},
		{
			MethodName: "ProcessWorkflow",
			Handler:    _IntegrationsPublic_ProcessWorkflow_Handler,
		},
		{
			MethodName: "GetLinkDetails",
			Handler:    _IntegrationsPublic_GetLinkDetails_Handler,
		},
		{
			MethodName: "CalculateFees",
			Handler:    _IntegrationsPublic_CalculateFees_Handler,
		},
		{
			MethodName: "DeliverReceipt",
			Handler:    _IntegrationsPublic_DeliverReceipt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1alpha1/integrationspublic/service.proto",
}
