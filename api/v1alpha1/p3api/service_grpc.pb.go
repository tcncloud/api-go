// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1alpha1/p3api/service.proto

package p3api

import (
	context "context"
	v0alpha "github.com/tcncloud/api-go/api/v0alpha"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	P3Api_GetAgentHuntGroup_FullMethodName                   = "/api.v1alpha1.p3api.P3Api/GetAgentHuntGroup"
	P3Api_GetAgentSession_FullMethodName                     = "/api.v1alpha1.p3api.P3Api/GetAgentSession"
	P3Api_GetAgentSkills_FullMethodName                      = "/api.v1alpha1.p3api.P3Api/GetAgentSkills"
	P3Api_CreateAgentSkill_FullMethodName                    = "/api.v1alpha1.p3api.P3Api/CreateAgentSkill"
	P3Api_UpdateAgentSkill_FullMethodName                    = "/api.v1alpha1.p3api.P3Api/UpdateAgentSkill"
	P3Api_DeleteAgentSkill_FullMethodName                    = "/api.v1alpha1.p3api.P3Api/DeleteAgentSkill"
	P3Api_ListSkillsForCurrentAgent_FullMethodName           = "/api.v1alpha1.p3api.P3Api/ListSkillsForCurrentAgent"
	P3Api_ListSkills_FullMethodName                          = "/api.v1alpha1.p3api.P3Api/ListSkills"
	P3Api_UpdateAgentSkills_FullMethodName                   = "/api.v1alpha1.p3api.P3Api/UpdateAgentSkills"
	P3Api_GetCurrentAgent_FullMethodName                     = "/api.v1alpha1.p3api.P3Api/GetCurrentAgent"
	P3Api_GetClientInfoData_FullMethodName                   = "/api.v1alpha1.p3api.P3Api/GetClientInfoData"
	P3Api_GetClientInfoDisplayTemplate_FullMethodName        = "/api.v1alpha1.p3api.P3Api/GetClientInfoDisplayTemplate"
	P3Api_ListAgentStatisticsData_FullMethodName             = "/api.v1alpha1.p3api.P3Api/ListAgentStatisticsData"
	P3Api_ListPBXExtensions_FullMethodName                   = "/api.v1alpha1.p3api.P3Api/ListPBXExtensions"
	P3Api_ListAgentExtensions_FullMethodName                 = "/api.v1alpha1.p3api.P3Api/ListAgentExtensions"
	P3Api_ListHuntGroupExtensions_FullMethodName             = "/api.v1alpha1.p3api.P3Api/ListHuntGroupExtensions"
	P3Api_CreateExtension_FullMethodName                     = "/api.v1alpha1.p3api.P3Api/CreateExtension"
	P3Api_DeleteExtension_FullMethodName                     = "/api.v1alpha1.p3api.P3Api/DeleteExtension"
	P3Api_UpdateExtension_FullMethodName                     = "/api.v1alpha1.p3api.P3Api/UpdateExtension"
	P3Api_UpdatePBXExtension_FullMethodName                  = "/api.v1alpha1.p3api.P3Api/UpdatePBXExtension"
	P3Api_CreateDNCLNumbers_FullMethodName                   = "/api.v1alpha1.p3api.P3Api/CreateDNCLNumbers"
	P3Api_GetScriptOrResponses_FullMethodName                = "/api.v1alpha1.p3api.P3Api/GetScriptOrResponses"
	P3Api_GetHuntGroupAgentSettings_FullMethodName           = "/api.v1alpha1.p3api.P3Api/GetHuntGroupAgentSettings"
	P3Api_ListHuntGroupWebLinks_FullMethodName               = "/api.v1alpha1.p3api.P3Api/ListHuntGroupWebLinks"
	P3Api_GetHuntGroupPauseCodes_FullMethodName              = "/api.v1alpha1.p3api.P3Api/GetHuntGroupPauseCodes"
	P3Api_ListAgentCallHistory_FullMethodName                = "/api.v1alpha1.p3api.P3Api/ListAgentCallHistory"
	P3Api_ListClientPhoneBookEntries_FullMethodName          = "/api.v1alpha1.p3api.P3Api/ListClientPhoneBookEntries"
	P3Api_ListHuntGroupPhoneBookEntries_FullMethodName       = "/api.v1alpha1.p3api.P3Api/ListHuntGroupPhoneBookEntries"
	P3Api_CreatePhoneBookEntry_FullMethodName                = "/api.v1alpha1.p3api.P3Api/CreatePhoneBookEntry"
	P3Api_UpdatePhoneBookEntry_FullMethodName                = "/api.v1alpha1.p3api.P3Api/UpdatePhoneBookEntry"
	P3Api_DeletePhoneBookEntry_FullMethodName                = "/api.v1alpha1.p3api.P3Api/DeletePhoneBookEntry"
	P3Api_ListPhoneBooks_FullMethodName                      = "/api.v1alpha1.p3api.P3Api/ListPhoneBooks"
	P3Api_ListAgentTriggers_FullMethodName                   = "/api.v1alpha1.p3api.P3Api/ListAgentTriggers"
	P3Api_GetCampaignCompletionStatus_FullMethodName         = "/api.v1alpha1.p3api.P3Api/GetCampaignCompletionStatus"
	P3Api_GetLostPeerInfo_FullMethodName                     = "/api.v1alpha1.p3api.P3Api/GetLostPeerInfo"
	P3Api_GetDispositionKeys_FullMethodName                  = "/api.v1alpha1.p3api.P3Api/GetDispositionKeys"
	P3Api_GetReadyAgents_FullMethodName                      = "/api.v1alpha1.p3api.P3Api/GetReadyAgents"
	P3Api_ListAgentQueueAndOnHoldCallData_FullMethodName     = "/api.v1alpha1.p3api.P3Api/ListAgentQueueAndOnHoldCallData"
	P3Api_SaveAgentCallResponses_FullMethodName              = "/api.v1alpha1.p3api.P3Api/SaveAgentCallResponses"
	P3Api_ListAgentTransferOptions_FullMethodName            = "/api.v1alpha1.p3api.P3Api/ListAgentTransferOptions"
	P3Api_UpdateAgentCallResponseValue_FullMethodName        = "/api.v1alpha1.p3api.P3Api/UpdateAgentCallResponseValue"
	P3Api_GetIntercomPeerInfo_FullMethodName                 = "/api.v1alpha1.p3api.P3Api/GetIntercomPeerInfo"
	P3Api_ListOrgResponseEvaluators_FullMethodName           = "/api.v1alpha1.p3api.P3Api/ListOrgResponseEvaluators"
	P3Api_GetQueueConfigurationOptionsArray_FullMethodName   = "/api.v1alpha1.p3api.P3Api/GetQueueConfigurationOptionsArray"
	P3Api_GetConditionalDNCLRules_FullMethodName             = "/api.v1alpha1.p3api.P3Api/GetConditionalDNCLRules"
	P3Api_ManualDialStart_FullMethodName                     = "/api.v1alpha1.p3api.P3Api/ManualDialStart"
	P3Api_GetExtendedCallHistories_FullMethodName            = "/api.v1alpha1.p3api.P3Api/GetExtendedCallHistories"
	P3Api_ListWhiteListPhoneBooks_FullMethodName             = "/api.v1alpha1.p3api.P3Api/ListWhiteListPhoneBooks"
	P3Api_DownloadCallRecording_FullMethodName               = "/api.v1alpha1.p3api.P3Api/DownloadCallRecording"
	P3Api_DownloadCallRecordings_FullMethodName              = "/api.v1alpha1.p3api.P3Api/DownloadCallRecordings"
	P3Api_PlacePreviewDialCall_FullMethodName                = "/api.v1alpha1.p3api.P3Api/PlacePreviewDialCall"
	P3Api_CancelPreviewDialCall_FullMethodName               = "/api.v1alpha1.p3api.P3Api/CancelPreviewDialCall"
	P3Api_UpdateTaskStatus_FullMethodName                    = "/api.v1alpha1.p3api.P3Api/UpdateTaskStatus"
	P3Api_ListCallbackRoutingAgents_FullMethodName           = "/api.v1alpha1.p3api.P3Api/ListCallbackRoutingAgents"
	P3Api_ListCallbackRoutingSkills_FullMethodName           = "/api.v1alpha1.p3api.P3Api/ListCallbackRoutingSkills"
	P3Api_HandleRecordingDelay_FullMethodName                = "/api.v1alpha1.p3api.P3Api/HandleRecordingDelay"
	P3Api_UpdateAgentAssignedHuntGroup_FullMethodName        = "/api.v1alpha1.p3api.P3Api/UpdateAgentAssignedHuntGroup"
	P3Api_GetCallData_FullMethodName                         = "/api.v1alpha1.p3api.P3Api/GetCallData"
	P3Api_ListHuntGroups_FullMethodName                      = "/api.v1alpha1.p3api.P3Api/ListHuntGroups"
	P3Api_ListReassignmentHuntGroups_FullMethodName          = "/api.v1alpha1.p3api.P3Api/ListReassignmentHuntGroups"
	P3Api_GetOrgAgentSettings_FullMethodName                 = "/api.v1alpha1.p3api.P3Api/GetOrgAgentSettings"
	P3Api_ListCallerIdsFromBucket_FullMethodName             = "/api.v1alpha1.p3api.P3Api/ListCallerIdsFromBucket"
	P3Api_SaveLastCallResponse_FullMethodName                = "/api.v1alpha1.p3api.P3Api/SaveLastCallResponse"
	P3Api_ListAgentCallLogsByCallSidAndType_FullMethodName   = "/api.v1alpha1.p3api.P3Api/ListAgentCallLogsByCallSidAndType"
	P3Api_ListAgentCallResponseValues_FullMethodName         = "/api.v1alpha1.p3api.P3Api/ListAgentCallResponseValues"
	P3Api_GetContactSchemaByContactGroup_FullMethodName      = "/api.v1alpha1.p3api.P3Api/GetContactSchemaByContactGroup"
	P3Api_ListContactGroupDetailsByClientSid_FullMethodName  = "/api.v1alpha1.p3api.P3Api/ListContactGroupDetailsByClientSid"
	P3Api_GetContactGroupDetails_FullMethodName              = "/api.v1alpha1.p3api.P3Api/GetContactGroupDetails"
	P3Api_GetContactGroupSize_FullMethodName                 = "/api.v1alpha1.p3api.P3Api/GetContactGroupSize"
	P3Api_CreateContactFieldDescription_FullMethodName       = "/api.v1alpha1.p3api.P3Api/CreateContactFieldDescription"
	P3Api_DeleteContactFieldDescription_FullMethodName       = "/api.v1alpha1.p3api.P3Api/DeleteContactFieldDescription"
	P3Api_ListContactFieldDescriptions_FullMethodName        = "/api.v1alpha1.p3api.P3Api/ListContactFieldDescriptions"
	P3Api_ListContactFieldDescriptionsByCGSid_FullMethodName = "/api.v1alpha1.p3api.P3Api/ListContactFieldDescriptionsByCGSid"
	P3Api_ListContactImportTemplates_FullMethodName          = "/api.v1alpha1.p3api.P3Api/ListContactImportTemplates"
	P3Api_UpdatePreviewRecordToFinished_FullMethodName       = "/api.v1alpha1.p3api.P3Api/UpdatePreviewRecordToFinished"
	P3Api_UpdateAgentHuntGroup_FullMethodName                = "/api.v1alpha1.p3api.P3Api/UpdateAgentHuntGroup"
	P3Api_MultiAgentHuntGroupAssignment_FullMethodName       = "/api.v1alpha1.p3api.P3Api/MultiAgentHuntGroupAssignment"
	P3Api_GetAgentProfile_FullMethodName                     = "/api.v1alpha1.p3api.P3Api/GetAgentProfile"
	P3Api_RecalculateBilling_FullMethodName                  = "/api.v1alpha1.p3api.P3Api/RecalculateBilling"
	P3Api_ListOutboundBroadcastTemplateData_FullMethodName   = "/api.v1alpha1.p3api.P3Api/ListOutboundBroadcastTemplateData"
	P3Api_MultiAgentSkillAssignment_FullMethodName           = "/api.v1alpha1.p3api.P3Api/MultiAgentSkillAssignment"
	P3Api_MultiAgentSkillUnassignment_FullMethodName         = "/api.v1alpha1.p3api.P3Api/MultiAgentSkillUnassignment"
	P3Api_ListMAMAgentHuntGroupsByClientSid_FullMethodName   = "/api.v1alpha1.p3api.P3Api/ListMAMAgentHuntGroupsByClientSid"
	P3Api_ListTtsVoices_FullMethodName                       = "/api.v1alpha1.p3api.P3Api/ListTtsVoices"
	P3Api_CreateTtsVoice_FullMethodName                      = "/api.v1alpha1.p3api.P3Api/CreateTtsVoice"
	P3Api_DeleteTtsVoice_FullMethodName                      = "/api.v1alpha1.p3api.P3Api/DeleteTtsVoice"
	P3Api_ListCustomDataKeys_FullMethodName                  = "/api.v1alpha1.p3api.P3Api/ListCustomDataKeys"
	P3Api_CreateCustomDataKey_FullMethodName                 = "/api.v1alpha1.p3api.P3Api/CreateCustomDataKey"
	P3Api_DeleteCustomDataKey_FullMethodName                 = "/api.v1alpha1.p3api.P3Api/DeleteCustomDataKey"
	P3Api_UpdateCustomDataKey_FullMethodName                 = "/api.v1alpha1.p3api.P3Api/UpdateCustomDataKey"
	P3Api_GetActivityLogHistories_FullMethodName             = "/api.v1alpha1.p3api.P3Api/GetActivityLogHistories"
	P3Api_ListTableTemplateProperties_FullMethodName         = "/api.v1alpha1.p3api.P3Api/ListTableTemplateProperties"
	P3Api_ListAgentSkillsFilters_FullMethodName              = "/api.v1alpha1.p3api.P3Api/ListAgentSkillsFilters"
	P3Api_ListScheduleRules_FullMethodName                   = "/api.v1alpha1.p3api.P3Api/ListScheduleRules"
	P3Api_ListCustomReportFilters_FullMethodName             = "/api.v1alpha1.p3api.P3Api/ListCustomReportFilters"
	P3Api_ListSmsNumbers_FullMethodName                      = "/api.v1alpha1.p3api.P3Api/ListSmsNumbers"
)

// P3ApiClient is the client API for P3Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type P3ApiClient interface {
	GetAgentHuntGroup(ctx context.Context, in *v0alpha.GetAgentHuntGroupReq, opts ...grpc.CallOption) (*v0alpha.HuntGroup, error)
	GetAgentSession(ctx context.Context, in *v0alpha.GetAgentSessionReq, opts ...grpc.CallOption) (*v0alpha.AgentSession, error)
	// Gets the skills of the requesting agent. This includes agent skills, hunt group skills, and extension skills(PBX).
	// Skills will be returned as a value pair (name, level).
	// For agent skills, the name of each skill will be the agent_skill_sid.
	// All other skills' names (hunt group and PBX) will be given special formats.
	// The requesting agent and hunt_group_sid skills will be defaulted to the max level (1000 and 100 respectively).
	//
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the hunt_group_sid in the request in invalid.
	GetAgentSkills(ctx context.Context, in *v0alpha.GetAgentSkillsReq, opts ...grpc.CallOption) (*v0alpha.GetAgentSkillsRes, error)
	// Creates a new agent skill as defined by the request message.
	// Errors:
	//   - grpc.InvalidArgument: the client_sid or name in the request is invalid.
	CreateAgentSkill(ctx context.Context, in *v0alpha.CreateAgentSkillReq, opts ...grpc.CallOption) (*v0alpha.CreateAgentSkillRes, error)
	// Updates an agent skill as defined by the request message.
	// Errors:
	//   - grpc.InvalidArgument: the agent_skill_sid or name in the request is invalid.
	UpdateAgentSkill(ctx context.Context, in *v0alpha.UpdateAgentSkillReq, opts ...grpc.CallOption) (*v0alpha.UpdateAgentSkillRes, error)
	// Deletes the agent skill with the agent_skill_sid given on the request.
	// Errors:
	//   - grpc.InvalidArgument: the agent_skill_sid in the request is invalid.
	DeleteAgentSkill(ctx context.Context, in *v0alpha.DeleteAgentSkillReq, opts ...grpc.CallOption) (*v0alpha.DeleteAgentSkillRes, error)
	// Returns a list of skills for the current agent.
	ListSkillsForCurrentAgent(ctx context.Context, in *v0alpha.ListSkillsForCurrentAgentReq, opts ...grpc.CallOption) (*v0alpha.ListSkillsForCurrentAgentRes, error)
	// Returns a list of skills filtered by types given on
	// the request message field type_filter. Leaving the type_filter
	// field empty will return all types of skills.
	ListSkills(ctx context.Context, in *v0alpha.ListSkillsReq, opts ...grpc.CallOption) (*v0alpha.ListSkillsRes, error)
	// Updates an agents assigned skills as defined by the skills list on
	// the request message.
	// Errors:
	//   - grpc.InvalidArgument: the user_id on the request is invalid.
	UpdateAgentSkills(ctx context.Context, in *v0alpha.UpdateAgentSkillsReq, opts ...grpc.CallOption) (*v0alpha.UpdateAgentSkillsRes, error)
	GetCurrentAgent(ctx context.Context, in *v0alpha.GetCurrentAgentReq, opts ...grpc.CallOption) (*v0alpha.Agent, error)
	GetClientInfoData(ctx context.Context, in *v0alpha.GetClientInfoDataReq, opts ...grpc.CallOption) (*v0alpha.GetClientInfoDataRes, error)
	GetClientInfoDisplayTemplate(ctx context.Context, in *v0alpha.GetClientInfoDisplayTemplateReq, opts ...grpc.CallOption) (*v0alpha.GetClientInfoDisplayTemplateRes, error)
	ListAgentStatisticsData(ctx context.Context, in *v0alpha.ListAgentStatisticsDataReq, opts ...grpc.CallOption) (*v0alpha.ListAgentStatisticsDataRes, error)
	// Lists all agent and hunt group PBX extensions that the requested agent has.
	ListPBXExtensions(ctx context.Context, in *v0alpha.ListPBXExtensionsReq, opts ...grpc.CallOption) (*v0alpha.ListPBXExtensionsRes, error)
	// Lists every agent extension for the current client
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.Internal: unexpected error getting pbx_extensions
	ListAgentExtensions(ctx context.Context, in *v0alpha.ListAgentExtensionsReq, opts ...grpc.CallOption) (*v0alpha.ListAgentExtensionsRes, error)
	// Lists every hunt group extension for the current client
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.Internal: unexpected error getting pbx_extensions
	ListHuntGroupExtensions(ctx context.Context, in *v0alpha.ListHuntGroupExtensionsReq, opts ...grpc.CallOption) (*v0alpha.ListHuntGroupExtensionsRes, error)
	// Creates a new extension as defined by the request message
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request has missing or invalid fields.
	//   - grpc.Internal: An unexpected error occurred while saving the extension.
	CreateExtension(ctx context.Context, in *v0alpha.CreateExtensionReq, opts ...grpc.CallOption) (*v0alpha.CreateExtensionRes, error)
	// Deletes a pbx_extension with the given pbx_extension_sid.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request had invalid or missing fields.
	DeleteExtension(ctx context.Context, in *v0alpha.DeleteExtensionReq, opts ...grpc.CallOption) (*v0alpha.DeleteExtensionRes, error)
	// Updates an extension as defined by the request message.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request had invalid or missing fields.
	//   - grpc.Internal: An unexpected error occurred updating the extension.
	UpdateExtension(ctx context.Context, in *v0alpha.UpdateExtensionReq, opts ...grpc.CallOption) (*v0alpha.UpdateExtensionRes, error)
	UpdatePBXExtension(ctx context.Context, in *v0alpha.UpdatePBXExtensionReq, opts ...grpc.CallOption) (*v0alpha.UpdatePBXExtensionRes, error)
	CreateDNCLNumbers(ctx context.Context, in *v0alpha.CreateDNCLNumbersReq, opts ...grpc.CallOption) (*v0alpha.CreateDNCLNumbersRes, error)
	// Gets the campaign or huntgroup script for the given agent's current hunt
	// group. If no script is found, it gets the hunt group responses for the
	// agent's current hunt group. It also does a mail merge with the found script
	// or responses (if able).
	GetScriptOrResponses(ctx context.Context, in *v0alpha.GetScriptOrResponsesReq, opts ...grpc.CallOption) (*v0alpha.GetScriptOrResponsesRes, error)
	GetHuntGroupAgentSettings(ctx context.Context, in *v0alpha.GetHuntGroupAgentSettingsReq, opts ...grpc.CallOption) (*v0alpha.HuntGroupAgentSettings, error)
	// Returns a list of weblinks for the hunt group in the request.
	// It replaces any parameters of a given weblink with the call data of the call sid and type from the request message or with the callback details (if a scheduled_callback_id is given).
	ListHuntGroupWebLinks(ctx context.Context, in *v0alpha.ListHuntGroupWebLinksReq, opts ...grpc.CallOption) (*v0alpha.ListHuntGroupWebLinksRes, error)
	GetHuntGroupPauseCodes(ctx context.Context, in *v0alpha.GetHuntGroupPauseCodesReq, opts ...grpc.CallOption) (*v0alpha.GetHuntGroupPauseCodesRes, error)
	// Lists the call history of the requested agent for the past day or
	// session_sid, depending on the filter parameter.
	ListAgentCallHistory(ctx context.Context, in *v0alpha.ListAgentCallHistoryReq, opts ...grpc.CallOption) (*v0alpha.ListAgentCallHistoryRes, error)
	// Lists all client phone book entries.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	ListClientPhoneBookEntries(ctx context.Context, in *v0alpha.ListClientPhoneBookEntriesReq, opts ...grpc.CallOption) (*v0alpha.ListClientPhoneBookEntriesRes, error)
	// Lists all hunt group phone book entries.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	ListHuntGroupPhoneBookEntries(ctx context.Context, in *v0alpha.ListHuntGroupPhoneBookEntriesReq, opts ...grpc.CallOption) (*v0alpha.ListHuntGroupPhoneBookEntriesRes, error)
	// Creates a new phone_book as defined by the request message.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: the fields on the request are missing or invalid.
	//   - grpc.Internal: unexpected error occurred when saving the phone book.
	CreatePhoneBookEntry(ctx context.Context, in *v0alpha.CreatePhoneBookEntryReq, opts ...grpc.CallOption) (*v0alpha.CreatePhoneBookEntryRes, error)
	// Updates an existing phone_book as defined by the request message.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: the fields on the request are missing or invalid.
	//   - grpc.Internal: unexpected error occurred when saving the phone book.
	UpdatePhoneBookEntry(ctx context.Context, in *v0alpha.UpdatePhoneBookEntryReq, opts ...grpc.CallOption) (*v0alpha.UpdatePhoneBookEntryRes, error)
	// Deletes the phone_book with the phone_book_sid given on the reques message.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	DeletePhoneBookEntry(ctx context.Context, in *v0alpha.DeletePhoneBookEntryReq, opts ...grpc.CallOption) (*v0alpha.DeletePhoneBookEntryRes, error)
	// Lists caller_id, outbound and transfer phone books for the requesting client and given hunt group sid.
	// Entries will be ordered by entry_name and phone_number.
	//
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the client_sid or hunt_group_sid in the request are invalid.
	//   - grpc.Internal: unexpected error occurred when retrieving the phone books.
	ListPhoneBooks(ctx context.Context, in *v0alpha.ListPhoneBooksReq, opts ...grpc.CallOption) (*v0alpha.ListPhoneBooksRes, error)
	ListAgentTriggers(ctx context.Context, in *v0alpha.ListAgentTriggersReq, opts ...grpc.CallOption) (*v0alpha.ListAgentTriggersRes, error)
	// Gets all running broadcasts (task groups) for the requesting agent and hunt_group_sid in the request.
	// Calculates the percentage of completed tasks for each of those task groups.
	// Calculates the overall task completion percentage of all matching task groups.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the hunt_group_sid in the request is invalid.
	GetCampaignCompletionStatus(ctx context.Context, in *v0alpha.GetCampaignCompletionStatusReq, opts ...grpc.CallOption) (*v0alpha.GetCampaignCompletionStatusRes, error)
	// Uses lost peer call sid and call type from the request to get information about lost call
	// gets the name and hunt group of the agent that was connected to that call and all types of skills the call has.
	//
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the call_sid in the request in invalid.
	//   - grpc.NotFound: the call sid provided wasn't previously connected to any agent.
	GetLostPeerInfo(ctx context.Context, in *v0alpha.GetLostPeerInfoReq, opts ...grpc.CallOption) (*v0alpha.GetLostPeerInfoRes, error)
	// Gets all the available Disposition Keys
	//
	// Required permissions:
	//
	//	NONE
	GetDispositionKeys(ctx context.Context, in *v0alpha.GetDispositionKeysReq, opts ...grpc.CallOption) (*v0alpha.GetDispositionKeysRes, error)
	GetReadyAgents(ctx context.Context, in *v0alpha.GetReadyAgentsReq, opts ...grpc.CallOption) (*v0alpha.GetReadyAgentsRes, error)
	// Returns lists with call data of calls that were:
	// Placed on multihold by the requesting agent.
	// Queued, are ready to be handled and require a subset of the agent_skills provided.
	// Placed in the Hold Queue Monitor, haven't been picked up yet and require a subset of the agent_skills provided.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the agent_session_sid provided in the request is invalid.
	ListAgentQueueAndOnHoldCallData(ctx context.Context, in *v0alpha.ListAgentQueueAndOnHoldCallDataReq, opts ...grpc.CallOption) (*v0alpha.ListAgentQueueAndOnHoldCallDataRes, error)
	SaveAgentCallResponses(ctx context.Context, in *v0alpha.SaveAgentCallResponsesReq, opts ...grpc.CallOption) (*v0alpha.SaveAgentCallResponsesRes, error)
	ListAgentTransferOptions(ctx context.Context, in *v0alpha.ListAgentTransferOptionsReq, opts ...grpc.CallOption) (*v0alpha.ListAgentTransferOptionsRes, error)
	UpdateAgentCallResponseValue(ctx context.Context, in *v0alpha.UpdateAgentCallResponseValueReq, opts ...grpc.CallOption) (*v0alpha.UpdateAgentCallResponseValueRes, error)
	GetIntercomPeerInfo(ctx context.Context, in *v0alpha.GetIntercomPeerInfoReq, opts ...grpc.CallOption) (*v0alpha.GetIntercomPeerInfoRes, error)
	// Lists the requesting user's org response evaluators.
	ListOrgResponseEvaluators(ctx context.Context, in *v0alpha.ListOrgResponseEvaluatorsReq, opts ...grpc.CallOption) (*v0alpha.ListOrgResponseEvaluatorsRes, error)
	GetQueueConfigurationOptionsArray(ctx context.Context, in *v0alpha.GetQueueConfigurationOptionsArrayReq, opts ...grpc.CallOption) (*v0alpha.GetQueueConfigurationOptionsArrayRes, error)
	// Get the rules for conditionally adding a number to the DNCL depending on
	// responses or scripts
	GetConditionalDNCLRules(ctx context.Context, in *v0alpha.GetConditionalDNCLRulesReq, opts ...grpc.CallOption) (*v0alpha.GetConditionalDNCLRulesRes, error)
	ManualDialStart(ctx context.Context, in *v0alpha.ManualDialStartReq, opts ...grpc.CallOption) (*v0alpha.ManualDialStartRes, error)
	GetExtendedCallHistories(ctx context.Context, in *v0alpha.ListExtendedCallHistoryReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[v0alpha.ListExtendedCallHistoryRes], error)
	ListWhiteListPhoneBooks(ctx context.Context, in *v0alpha.ListWhiteListPhoneBooksReq, opts ...grpc.CallOption) (*v0alpha.ListWhiteListPhoneBooksRes, error)
	DownloadCallRecording(ctx context.Context, in *v0alpha.DownloadCallRecordingReq, opts ...grpc.CallOption) (*v0alpha.DownloadRecordingRes, error)
	DownloadCallRecordings(ctx context.Context, in *v0alpha.DownloadCallRecordingsReq, opts ...grpc.CallOption) (*v0alpha.DownloadRecordingRes, error)
	PlacePreviewDialCall(ctx context.Context, in *v0alpha.PlacePreviewDialCallReq, opts ...grpc.CallOption) (*v0alpha.PlacePreviewDialCallRes, error)
	CancelPreviewDialCall(ctx context.Context, in *v0alpha.CancelPreviewDialCallReq, opts ...grpc.CallOption) (*v0alpha.CancelPreviewDialCallRes, error)
	UpdateTaskStatus(ctx context.Context, in *v0alpha.UpdateTaskStatusReq, opts ...grpc.CallOption) (*v0alpha.Nil, error)
	// ListCallbackRoutingAgents returns a list of agents that are allowed to make a callback.
	ListCallbackRoutingAgents(ctx context.Context, in *v0alpha.ListCallbackRoutingAgentsReq, opts ...grpc.CallOption) (*v0alpha.ListCallbackRoutingAgentsRes, error)
	ListCallbackRoutingSkills(ctx context.Context, in *v0alpha.ListCallbackRoutingSkillsReq, opts ...grpc.CallOption) (*v0alpha.ListCallbackRoutingSkillsRes, error)
	HandleRecordingDelay(ctx context.Context, in *v0alpha.HandleRecordingDelayReq, opts ...grpc.CallOption) (*v0alpha.HandleRecordingDelayRes, error)
	UpdateAgentAssignedHuntGroup(ctx context.Context, in *v0alpha.UpdateAgentAssignedHuntGroupReq, opts ...grpc.CallOption) (*v0alpha.UpdateAgentAssignedHuntGroupRes, error)
	GetCallData(ctx context.Context, in *v0alpha.GetCallDataReq, opts ...grpc.CallOption) (*v0alpha.GetCallDataRes, error)
	ListHuntGroups(ctx context.Context, in *v0alpha.ListHuntGroupsReq, opts ...grpc.CallOption) (*v0alpha.ListHuntGroupsRes, error)
	// List the hunt groups an agent within a given hunt group can reassign
	// themselves to. The reassignment hunt groups can optionally be limited by a
	// hunt group setting. If a hunt group does not allow reassignment, the
	// returned list will be empty.
	ListReassignmentHuntGroups(ctx context.Context, in *v0alpha.ListReassignmentHuntGroupsReq, opts ...grpc.CallOption) (*v0alpha.ListReassignmentHuntGroupsRes, error)
	GetOrgAgentSettings(ctx context.Context, in *v0alpha.GetOrgAgentSettingsReq, opts ...grpc.CallOption) (*v0alpha.GetOrgAgentSettingsRes, error)
	// Lists caller id numbers with their associated region codes for the given
	// bucket
	ListCallerIdsFromBucket(ctx context.Context, in *v0alpha.ListCallerIdsFromBucketReq, opts ...grpc.CallOption) (*v0alpha.ListCallerIdsFromBucketRes, error)
	SaveLastCallResponse(ctx context.Context, in *v0alpha.SaveLastCallResponseReq, opts ...grpc.CallOption) (*v0alpha.SaveLastCallResponseRes, error)
	ListAgentCallLogsByCallSidAndType(ctx context.Context, in *v0alpha.ListAgentCallLogsByCallSidAndTypeReq, opts ...grpc.CallOption) (*v0alpha.ListAgentCallLogsByCallSidAndTypeRes, error)
	// Lists the keys and values of the latest responses for the given call_sid,
	// call_type and agent_sid
	ListAgentCallResponseValues(ctx context.Context, in *v0alpha.ListAgentCallResponseValuesReq, opts ...grpc.CallOption) (*v0alpha.ListAgentCallResponseValuesRes, error)
	// Get contact schema details based on contact group sid
	GetContactSchemaByContactGroup(ctx context.Context, in *v0alpha.GetContactSchemaByContactGroupReq, opts ...grpc.CallOption) (*v0alpha.ContactSchema, error)
	// List contact group details based on client sid from contact_group table
	ListContactGroupDetailsByClientSid(ctx context.Context, in *v0alpha.ListContactGroupDetailsByClientSidReq, opts ...grpc.CallOption) (*v0alpha.ListContactGroupDetailsByClientSidRes, error)
	// Get contact group details based on contact group sid from contact_group
	// table
	GetContactGroupDetails(ctx context.Context, in *v0alpha.GetContactGroupReq, opts ...grpc.CallOption) (*v0alpha.ContactGroup, error)
	// Get contact group size based on contacts size
	GetContactGroupSize(ctx context.Context, in *v0alpha.GetContactGroupReq, opts ...grpc.CallOption) (*v0alpha.GetContactGroupSizeRes, error)
	// Create contact field description details
	CreateContactFieldDescription(ctx context.Context, in *v0alpha.CreateContactFieldDescriptionReq, opts ...grpc.CallOption) (*v0alpha.CreateContactFieldDescriptionRes, error)
	// Delete contact field description details
	DeleteContactFieldDescription(ctx context.Context, in *v0alpha.DeleteContactFieldDescriptionReq, opts ...grpc.CallOption) (*v0alpha.DeleteContactFieldDescriptionRes, error)
	// List contact field desc details from contact_field_description table
	ListContactFieldDescriptions(ctx context.Context, in *v0alpha.ListContactFieldDescriptionsReq, opts ...grpc.CallOption) (*v0alpha.ListContactFieldDescriptionsRes, error)
	// List contact field description details based on contact group sid
	ListContactFieldDescriptionsByCGSid(ctx context.Context, in *v0alpha.ListContactFieldDescriptionsByCGSidReq, opts ...grpc.CallOption) (*v0alpha.ListContactFieldDescriptionsByCGSidRes, error)
	// List contactImportTemplates based on client_sid from
	// contact_import_template table
	ListContactImportTemplates(ctx context.Context, in *v0alpha.ListContactImportTemplatesReq, opts ...grpc.CallOption) (*v0alpha.ListContactImportTemplatesRes, error)
	// Updates task data for a preview record to finished and logs an agent
	// session event
	UpdatePreviewRecordToFinished(ctx context.Context, in *v0alpha.UpdatePreviewRecordToFinishedReq, opts ...grpc.CallOption) (*v0alpha.UpdatePreviewRecordToFinishedRes, error)
	// Updates the requesting agent's hunt_group_sid.
	UpdateAgentHuntGroup(ctx context.Context, in *v0alpha.UpdateAgentHuntGroupReq, opts ...grpc.CallOption) (*v0alpha.UpdateAgentHuntGroupRes, error)
	// Updates every given user's hunt_group_sid.
	// Required Permissions:
	//
	//	AGENT_MANAGEMENT
	//
	// Errors:
	//   - grpc.Internal: an error occurred while interacting with the database.
	//   - grpc.InvalidArgument: the hunt_group_sid or the user id list is empty or contains an invalid value.
	MultiAgentHuntGroupAssignment(ctx context.Context, in *v0alpha.MultiAgentHuntGroupAssignmentReq, opts ...grpc.CallOption) (*v0alpha.MultiAgentHuntGroupAssignmentRes, error)
	// GetAgentProfile returns an agent profile.
	GetAgentProfile(ctx context.Context, in *v0alpha.GetAgentProfileReq, opts ...grpc.CallOption) (*v0alpha.AgentProfile, error)
	// RecalculateBilling updates statuses for every billing type given on the
	// request message for either the current or previous month.
	// Only data that has already been summed for billing will have it's
	// status updated.
	// Required Permissions:
	//
	//	EDIT_BILLING
	RecalculateBilling(ctx context.Context, in *v0alpha.RecalculateBillingReq, opts ...grpc.CallOption) (*v0alpha.RecalculateBillingRes, error)
	// Gets information of the requesting client's broadcast templates (template_number, name, type, modify_date)
	// It reports if each found template is either STANDARD or LAYERED.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	NONE
	ListOutboundBroadcastTemplateData(ctx context.Context, in *v0alpha.ListOutboundBroadcastTemplateDataReq, opts ...grpc.CallOption) (*v0alpha.ListOutboundBroadcastTemplateDataRes, error)
	// Assign every skill to every agent with the given aptitude.
	// Errors:
	//   - grpc.Invalid: the aptitude field is invalid.
	MultiAgentSkillAssignment(ctx context.Context, in *v0alpha.MultiAgentSkillAssignmentReq, opts ...grpc.CallOption) (*v0alpha.MultiAgentSkillAssignmentRes, error)
	// Unassigns every given skill from every given user.
	// Errors:
	//   - grpc.InvalidArgument:
	//   - the user_ids list is empty or contains an empty string.
	//   - one or more of the user_ids does not belong to the client.
	//   - grpc.Internal: an error occurred while deleting the skill assignments.
	MultiAgentSkillUnassignment(ctx context.Context, in *v0alpha.MultiAgentSkillUnassignmentReq, opts ...grpc.CallOption) (*v0alpha.MultiAgentSkillUnassignmentRes, error)
	// List of agent hunt groups based on client sid
	// that have manually approved messages enabled
	ListMAMAgentHuntGroupsByClientSid(ctx context.Context, in *v0alpha.ListMAMAgentHuntGroupsByClientSidReq, opts ...grpc.CallOption) (*v0alpha.ListMAMAgentHuntGroupsByClientSidRes, error)
	// List every tts voice
	// Required Permissions:
	//
	//	TCN_ADMIN_SETTINGS
	//
	// Errors:
	//   - grpc.Internal: an error was returned while trying to retrieve the entity
	ListTtsVoices(ctx context.Context, in *v0alpha.ListTtsVoicesReq, opts ...grpc.CallOption) (*v0alpha.ListTtsVoicesRes, error)
	// Create a new tts voice
	// Required Permissions:
	//
	//	TCN_ADMIN_SETTINGS
	//
	// Errors:
	//   - grpc.InvalidArgument: the actual_name or port field on the request is invalid.
	//   - grpc.Internal: an error was returned while trying to insert the new tts voice.
	CreateTtsVoice(ctx context.Context, in *v0alpha.CreateTtsVoiceReq, opts ...grpc.CallOption) (*v0alpha.CreateTtsVoiceRes, error)
	// Delete a tts voice with the given tts_voice_sid.
	// Required Permissions:
	//
	//	TCN_ADMIN_SETTINGS
	//
	// Errors:
	//   - grpc.InvalidArgument: the tts_voice_sid field on the request is invalid.
	//   - grpc.Internal: an error was returned while trying to remove the tts voice.
	DeleteTtsVoice(ctx context.Context, in *v0alpha.DeleteTtsVoiceReq, opts ...grpc.CallOption) (*v0alpha.DeleteTtsVoiceRes, error)
	// List of account custom data keys based on client sid
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.Internal: an error was returned while trying to retrieve the entity
	ListCustomDataKeys(ctx context.Context, in *v0alpha.ListCustomDataKeysReq, opts ...grpc.CallOption) (*v0alpha.ListCustomDataKeysRes, error)
	// Creates a new Data Key as defined by the request message
	// the client_properties_sid should not be set, this is assigned on the backend
	// Required Permission:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.InvalidArgument: The custom_data_key field was not set
	//   - grpc.Internal: error creating custom data key
	CreateCustomDataKey(ctx context.Context, in *v0alpha.CreateCustomDataKeyReq, opts ...grpc.CallOption) (*v0alpha.CreateCustomDataKeyRes, error)
	// Deletes a Custom Data Key with the sid given on the request message.
	// Required Permission:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.InvalidArgument: The client_properties_sid field is invalid.
	//   - grpc.NotFound: no custom data key was deleted for the client_properties_sid.
	//   - grpc.Internal: an error occurred while trying to remove the custom data key.
	DeleteCustomDataKey(ctx context.Context, in *v0alpha.DeleteCustomDataKeyReq, opts ...grpc.CallOption) (*v0alpha.DeleteCustomDataKeyRes, error)
	// Updates a custom data key with the client_properties_sid and data key
	// given on the request
	// Required Permissions;
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.InvalidArgument: The client_properties_sid was empty or the data key was not set
	//   - grpc.Internal: error updating custom data key, more than 1 custom data key records affected
	//   - grpc.NotFound: no matching custom data key found
	UpdateCustomDataKey(ctx context.Context, in *v0alpha.UpdateCustomDataKeyReq, opts ...grpc.CallOption) (*v0alpha.UpdateCustomDataKeyRes, error)
	// Get Activity logs for given users and by specified time range
	// Required Permissions;
	//
	//	CUSTOMER_SUPPORT
	GetActivityLogHistories(ctx context.Context, in *v0alpha.GetActivityLogHistoryReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[v0alpha.GetActivityLogHistoryRes], error)
	// List agent and queue table template properties by client sid
	ListTableTemplateProperties(ctx context.Context, in *v0alpha.ListTableTemplatePropertiesReq, opts ...grpc.CallOption) (*v0alpha.ListTableTemplatePropertiesRes, error)
	// List agent skills filters by client sid
	ListAgentSkillsFilters(ctx context.Context, in *v0alpha.ListAgentSkillsFiltersReq, opts ...grpc.CallOption) (*v0alpha.ListAgentSkillsFiltersRes, error)
	// List Schedule Rules
	ListScheduleRules(ctx context.Context, in *v0alpha.ListScheduleRulesRequest, opts ...grpc.CallOption) (*v0alpha.ListScheduleRulesResult, error)
	// List custom report filters by client sid
	ListCustomReportFilters(ctx context.Context, in *v0alpha.ListCustomReportFiltersReq, opts ...grpc.CallOption) (*v0alpha.ListCustomReportFiltersRes, error)
	// List sms numbers by client sid
	ListSmsNumbers(ctx context.Context, in *v0alpha.ListSmsNumbersReq, opts ...grpc.CallOption) (*v0alpha.ListSmsNumbersRes, error)
}

type p3ApiClient struct {
	cc grpc.ClientConnInterface
}

func NewP3ApiClient(cc grpc.ClientConnInterface) P3ApiClient {
	return &p3ApiClient{cc}
}

func (c *p3ApiClient) GetAgentHuntGroup(ctx context.Context, in *v0alpha.GetAgentHuntGroupReq, opts ...grpc.CallOption) (*v0alpha.HuntGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.HuntGroup)
	err := c.cc.Invoke(ctx, P3Api_GetAgentHuntGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetAgentSession(ctx context.Context, in *v0alpha.GetAgentSessionReq, opts ...grpc.CallOption) (*v0alpha.AgentSession, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.AgentSession)
	err := c.cc.Invoke(ctx, P3Api_GetAgentSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetAgentSkills(ctx context.Context, in *v0alpha.GetAgentSkillsReq, opts ...grpc.CallOption) (*v0alpha.GetAgentSkillsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.GetAgentSkillsRes)
	err := c.cc.Invoke(ctx, P3Api_GetAgentSkills_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) CreateAgentSkill(ctx context.Context, in *v0alpha.CreateAgentSkillReq, opts ...grpc.CallOption) (*v0alpha.CreateAgentSkillRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.CreateAgentSkillRes)
	err := c.cc.Invoke(ctx, P3Api_CreateAgentSkill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) UpdateAgentSkill(ctx context.Context, in *v0alpha.UpdateAgentSkillReq, opts ...grpc.CallOption) (*v0alpha.UpdateAgentSkillRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.UpdateAgentSkillRes)
	err := c.cc.Invoke(ctx, P3Api_UpdateAgentSkill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) DeleteAgentSkill(ctx context.Context, in *v0alpha.DeleteAgentSkillReq, opts ...grpc.CallOption) (*v0alpha.DeleteAgentSkillRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.DeleteAgentSkillRes)
	err := c.cc.Invoke(ctx, P3Api_DeleteAgentSkill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListSkillsForCurrentAgent(ctx context.Context, in *v0alpha.ListSkillsForCurrentAgentReq, opts ...grpc.CallOption) (*v0alpha.ListSkillsForCurrentAgentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListSkillsForCurrentAgentRes)
	err := c.cc.Invoke(ctx, P3Api_ListSkillsForCurrentAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListSkills(ctx context.Context, in *v0alpha.ListSkillsReq, opts ...grpc.CallOption) (*v0alpha.ListSkillsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListSkillsRes)
	err := c.cc.Invoke(ctx, P3Api_ListSkills_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) UpdateAgentSkills(ctx context.Context, in *v0alpha.UpdateAgentSkillsReq, opts ...grpc.CallOption) (*v0alpha.UpdateAgentSkillsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.UpdateAgentSkillsRes)
	err := c.cc.Invoke(ctx, P3Api_UpdateAgentSkills_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetCurrentAgent(ctx context.Context, in *v0alpha.GetCurrentAgentReq, opts ...grpc.CallOption) (*v0alpha.Agent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.Agent)
	err := c.cc.Invoke(ctx, P3Api_GetCurrentAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetClientInfoData(ctx context.Context, in *v0alpha.GetClientInfoDataReq, opts ...grpc.CallOption) (*v0alpha.GetClientInfoDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.GetClientInfoDataRes)
	err := c.cc.Invoke(ctx, P3Api_GetClientInfoData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetClientInfoDisplayTemplate(ctx context.Context, in *v0alpha.GetClientInfoDisplayTemplateReq, opts ...grpc.CallOption) (*v0alpha.GetClientInfoDisplayTemplateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.GetClientInfoDisplayTemplateRes)
	err := c.cc.Invoke(ctx, P3Api_GetClientInfoDisplayTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListAgentStatisticsData(ctx context.Context, in *v0alpha.ListAgentStatisticsDataReq, opts ...grpc.CallOption) (*v0alpha.ListAgentStatisticsDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListAgentStatisticsDataRes)
	err := c.cc.Invoke(ctx, P3Api_ListAgentStatisticsData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListPBXExtensions(ctx context.Context, in *v0alpha.ListPBXExtensionsReq, opts ...grpc.CallOption) (*v0alpha.ListPBXExtensionsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListPBXExtensionsRes)
	err := c.cc.Invoke(ctx, P3Api_ListPBXExtensions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListAgentExtensions(ctx context.Context, in *v0alpha.ListAgentExtensionsReq, opts ...grpc.CallOption) (*v0alpha.ListAgentExtensionsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListAgentExtensionsRes)
	err := c.cc.Invoke(ctx, P3Api_ListAgentExtensions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListHuntGroupExtensions(ctx context.Context, in *v0alpha.ListHuntGroupExtensionsReq, opts ...grpc.CallOption) (*v0alpha.ListHuntGroupExtensionsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListHuntGroupExtensionsRes)
	err := c.cc.Invoke(ctx, P3Api_ListHuntGroupExtensions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) CreateExtension(ctx context.Context, in *v0alpha.CreateExtensionReq, opts ...grpc.CallOption) (*v0alpha.CreateExtensionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.CreateExtensionRes)
	err := c.cc.Invoke(ctx, P3Api_CreateExtension_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) DeleteExtension(ctx context.Context, in *v0alpha.DeleteExtensionReq, opts ...grpc.CallOption) (*v0alpha.DeleteExtensionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.DeleteExtensionRes)
	err := c.cc.Invoke(ctx, P3Api_DeleteExtension_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) UpdateExtension(ctx context.Context, in *v0alpha.UpdateExtensionReq, opts ...grpc.CallOption) (*v0alpha.UpdateExtensionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.UpdateExtensionRes)
	err := c.cc.Invoke(ctx, P3Api_UpdateExtension_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) UpdatePBXExtension(ctx context.Context, in *v0alpha.UpdatePBXExtensionReq, opts ...grpc.CallOption) (*v0alpha.UpdatePBXExtensionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.UpdatePBXExtensionRes)
	err := c.cc.Invoke(ctx, P3Api_UpdatePBXExtension_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) CreateDNCLNumbers(ctx context.Context, in *v0alpha.CreateDNCLNumbersReq, opts ...grpc.CallOption) (*v0alpha.CreateDNCLNumbersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.CreateDNCLNumbersRes)
	err := c.cc.Invoke(ctx, P3Api_CreateDNCLNumbers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetScriptOrResponses(ctx context.Context, in *v0alpha.GetScriptOrResponsesReq, opts ...grpc.CallOption) (*v0alpha.GetScriptOrResponsesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.GetScriptOrResponsesRes)
	err := c.cc.Invoke(ctx, P3Api_GetScriptOrResponses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetHuntGroupAgentSettings(ctx context.Context, in *v0alpha.GetHuntGroupAgentSettingsReq, opts ...grpc.CallOption) (*v0alpha.HuntGroupAgentSettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.HuntGroupAgentSettings)
	err := c.cc.Invoke(ctx, P3Api_GetHuntGroupAgentSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListHuntGroupWebLinks(ctx context.Context, in *v0alpha.ListHuntGroupWebLinksReq, opts ...grpc.CallOption) (*v0alpha.ListHuntGroupWebLinksRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListHuntGroupWebLinksRes)
	err := c.cc.Invoke(ctx, P3Api_ListHuntGroupWebLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetHuntGroupPauseCodes(ctx context.Context, in *v0alpha.GetHuntGroupPauseCodesReq, opts ...grpc.CallOption) (*v0alpha.GetHuntGroupPauseCodesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.GetHuntGroupPauseCodesRes)
	err := c.cc.Invoke(ctx, P3Api_GetHuntGroupPauseCodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListAgentCallHistory(ctx context.Context, in *v0alpha.ListAgentCallHistoryReq, opts ...grpc.CallOption) (*v0alpha.ListAgentCallHistoryRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListAgentCallHistoryRes)
	err := c.cc.Invoke(ctx, P3Api_ListAgentCallHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListClientPhoneBookEntries(ctx context.Context, in *v0alpha.ListClientPhoneBookEntriesReq, opts ...grpc.CallOption) (*v0alpha.ListClientPhoneBookEntriesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListClientPhoneBookEntriesRes)
	err := c.cc.Invoke(ctx, P3Api_ListClientPhoneBookEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListHuntGroupPhoneBookEntries(ctx context.Context, in *v0alpha.ListHuntGroupPhoneBookEntriesReq, opts ...grpc.CallOption) (*v0alpha.ListHuntGroupPhoneBookEntriesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListHuntGroupPhoneBookEntriesRes)
	err := c.cc.Invoke(ctx, P3Api_ListHuntGroupPhoneBookEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) CreatePhoneBookEntry(ctx context.Context, in *v0alpha.CreatePhoneBookEntryReq, opts ...grpc.CallOption) (*v0alpha.CreatePhoneBookEntryRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.CreatePhoneBookEntryRes)
	err := c.cc.Invoke(ctx, P3Api_CreatePhoneBookEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) UpdatePhoneBookEntry(ctx context.Context, in *v0alpha.UpdatePhoneBookEntryReq, opts ...grpc.CallOption) (*v0alpha.UpdatePhoneBookEntryRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.UpdatePhoneBookEntryRes)
	err := c.cc.Invoke(ctx, P3Api_UpdatePhoneBookEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) DeletePhoneBookEntry(ctx context.Context, in *v0alpha.DeletePhoneBookEntryReq, opts ...grpc.CallOption) (*v0alpha.DeletePhoneBookEntryRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.DeletePhoneBookEntryRes)
	err := c.cc.Invoke(ctx, P3Api_DeletePhoneBookEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListPhoneBooks(ctx context.Context, in *v0alpha.ListPhoneBooksReq, opts ...grpc.CallOption) (*v0alpha.ListPhoneBooksRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListPhoneBooksRes)
	err := c.cc.Invoke(ctx, P3Api_ListPhoneBooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListAgentTriggers(ctx context.Context, in *v0alpha.ListAgentTriggersReq, opts ...grpc.CallOption) (*v0alpha.ListAgentTriggersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListAgentTriggersRes)
	err := c.cc.Invoke(ctx, P3Api_ListAgentTriggers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetCampaignCompletionStatus(ctx context.Context, in *v0alpha.GetCampaignCompletionStatusReq, opts ...grpc.CallOption) (*v0alpha.GetCampaignCompletionStatusRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.GetCampaignCompletionStatusRes)
	err := c.cc.Invoke(ctx, P3Api_GetCampaignCompletionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetLostPeerInfo(ctx context.Context, in *v0alpha.GetLostPeerInfoReq, opts ...grpc.CallOption) (*v0alpha.GetLostPeerInfoRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.GetLostPeerInfoRes)
	err := c.cc.Invoke(ctx, P3Api_GetLostPeerInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetDispositionKeys(ctx context.Context, in *v0alpha.GetDispositionKeysReq, opts ...grpc.CallOption) (*v0alpha.GetDispositionKeysRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.GetDispositionKeysRes)
	err := c.cc.Invoke(ctx, P3Api_GetDispositionKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetReadyAgents(ctx context.Context, in *v0alpha.GetReadyAgentsReq, opts ...grpc.CallOption) (*v0alpha.GetReadyAgentsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.GetReadyAgentsRes)
	err := c.cc.Invoke(ctx, P3Api_GetReadyAgents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListAgentQueueAndOnHoldCallData(ctx context.Context, in *v0alpha.ListAgentQueueAndOnHoldCallDataReq, opts ...grpc.CallOption) (*v0alpha.ListAgentQueueAndOnHoldCallDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListAgentQueueAndOnHoldCallDataRes)
	err := c.cc.Invoke(ctx, P3Api_ListAgentQueueAndOnHoldCallData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) SaveAgentCallResponses(ctx context.Context, in *v0alpha.SaveAgentCallResponsesReq, opts ...grpc.CallOption) (*v0alpha.SaveAgentCallResponsesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.SaveAgentCallResponsesRes)
	err := c.cc.Invoke(ctx, P3Api_SaveAgentCallResponses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListAgentTransferOptions(ctx context.Context, in *v0alpha.ListAgentTransferOptionsReq, opts ...grpc.CallOption) (*v0alpha.ListAgentTransferOptionsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListAgentTransferOptionsRes)
	err := c.cc.Invoke(ctx, P3Api_ListAgentTransferOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) UpdateAgentCallResponseValue(ctx context.Context, in *v0alpha.UpdateAgentCallResponseValueReq, opts ...grpc.CallOption) (*v0alpha.UpdateAgentCallResponseValueRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.UpdateAgentCallResponseValueRes)
	err := c.cc.Invoke(ctx, P3Api_UpdateAgentCallResponseValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetIntercomPeerInfo(ctx context.Context, in *v0alpha.GetIntercomPeerInfoReq, opts ...grpc.CallOption) (*v0alpha.GetIntercomPeerInfoRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.GetIntercomPeerInfoRes)
	err := c.cc.Invoke(ctx, P3Api_GetIntercomPeerInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListOrgResponseEvaluators(ctx context.Context, in *v0alpha.ListOrgResponseEvaluatorsReq, opts ...grpc.CallOption) (*v0alpha.ListOrgResponseEvaluatorsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListOrgResponseEvaluatorsRes)
	err := c.cc.Invoke(ctx, P3Api_ListOrgResponseEvaluators_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetQueueConfigurationOptionsArray(ctx context.Context, in *v0alpha.GetQueueConfigurationOptionsArrayReq, opts ...grpc.CallOption) (*v0alpha.GetQueueConfigurationOptionsArrayRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.GetQueueConfigurationOptionsArrayRes)
	err := c.cc.Invoke(ctx, P3Api_GetQueueConfigurationOptionsArray_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetConditionalDNCLRules(ctx context.Context, in *v0alpha.GetConditionalDNCLRulesReq, opts ...grpc.CallOption) (*v0alpha.GetConditionalDNCLRulesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.GetConditionalDNCLRulesRes)
	err := c.cc.Invoke(ctx, P3Api_GetConditionalDNCLRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ManualDialStart(ctx context.Context, in *v0alpha.ManualDialStartReq, opts ...grpc.CallOption) (*v0alpha.ManualDialStartRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ManualDialStartRes)
	err := c.cc.Invoke(ctx, P3Api_ManualDialStart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetExtendedCallHistories(ctx context.Context, in *v0alpha.ListExtendedCallHistoryReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[v0alpha.ListExtendedCallHistoryRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &P3Api_ServiceDesc.Streams[0], P3Api_GetExtendedCallHistories_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[v0alpha.ListExtendedCallHistoryReq, v0alpha.ListExtendedCallHistoryRes]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type P3Api_GetExtendedCallHistoriesClient = grpc.ServerStreamingClient[v0alpha.ListExtendedCallHistoryRes]

func (c *p3ApiClient) ListWhiteListPhoneBooks(ctx context.Context, in *v0alpha.ListWhiteListPhoneBooksReq, opts ...grpc.CallOption) (*v0alpha.ListWhiteListPhoneBooksRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListWhiteListPhoneBooksRes)
	err := c.cc.Invoke(ctx, P3Api_ListWhiteListPhoneBooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) DownloadCallRecording(ctx context.Context, in *v0alpha.DownloadCallRecordingReq, opts ...grpc.CallOption) (*v0alpha.DownloadRecordingRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.DownloadRecordingRes)
	err := c.cc.Invoke(ctx, P3Api_DownloadCallRecording_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) DownloadCallRecordings(ctx context.Context, in *v0alpha.DownloadCallRecordingsReq, opts ...grpc.CallOption) (*v0alpha.DownloadRecordingRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.DownloadRecordingRes)
	err := c.cc.Invoke(ctx, P3Api_DownloadCallRecordings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) PlacePreviewDialCall(ctx context.Context, in *v0alpha.PlacePreviewDialCallReq, opts ...grpc.CallOption) (*v0alpha.PlacePreviewDialCallRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.PlacePreviewDialCallRes)
	err := c.cc.Invoke(ctx, P3Api_PlacePreviewDialCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) CancelPreviewDialCall(ctx context.Context, in *v0alpha.CancelPreviewDialCallReq, opts ...grpc.CallOption) (*v0alpha.CancelPreviewDialCallRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.CancelPreviewDialCallRes)
	err := c.cc.Invoke(ctx, P3Api_CancelPreviewDialCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) UpdateTaskStatus(ctx context.Context, in *v0alpha.UpdateTaskStatusReq, opts ...grpc.CallOption) (*v0alpha.Nil, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.Nil)
	err := c.cc.Invoke(ctx, P3Api_UpdateTaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListCallbackRoutingAgents(ctx context.Context, in *v0alpha.ListCallbackRoutingAgentsReq, opts ...grpc.CallOption) (*v0alpha.ListCallbackRoutingAgentsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListCallbackRoutingAgentsRes)
	err := c.cc.Invoke(ctx, P3Api_ListCallbackRoutingAgents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListCallbackRoutingSkills(ctx context.Context, in *v0alpha.ListCallbackRoutingSkillsReq, opts ...grpc.CallOption) (*v0alpha.ListCallbackRoutingSkillsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListCallbackRoutingSkillsRes)
	err := c.cc.Invoke(ctx, P3Api_ListCallbackRoutingSkills_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) HandleRecordingDelay(ctx context.Context, in *v0alpha.HandleRecordingDelayReq, opts ...grpc.CallOption) (*v0alpha.HandleRecordingDelayRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.HandleRecordingDelayRes)
	err := c.cc.Invoke(ctx, P3Api_HandleRecordingDelay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) UpdateAgentAssignedHuntGroup(ctx context.Context, in *v0alpha.UpdateAgentAssignedHuntGroupReq, opts ...grpc.CallOption) (*v0alpha.UpdateAgentAssignedHuntGroupRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.UpdateAgentAssignedHuntGroupRes)
	err := c.cc.Invoke(ctx, P3Api_UpdateAgentAssignedHuntGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetCallData(ctx context.Context, in *v0alpha.GetCallDataReq, opts ...grpc.CallOption) (*v0alpha.GetCallDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.GetCallDataRes)
	err := c.cc.Invoke(ctx, P3Api_GetCallData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListHuntGroups(ctx context.Context, in *v0alpha.ListHuntGroupsReq, opts ...grpc.CallOption) (*v0alpha.ListHuntGroupsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListHuntGroupsRes)
	err := c.cc.Invoke(ctx, P3Api_ListHuntGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListReassignmentHuntGroups(ctx context.Context, in *v0alpha.ListReassignmentHuntGroupsReq, opts ...grpc.CallOption) (*v0alpha.ListReassignmentHuntGroupsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListReassignmentHuntGroupsRes)
	err := c.cc.Invoke(ctx, P3Api_ListReassignmentHuntGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetOrgAgentSettings(ctx context.Context, in *v0alpha.GetOrgAgentSettingsReq, opts ...grpc.CallOption) (*v0alpha.GetOrgAgentSettingsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.GetOrgAgentSettingsRes)
	err := c.cc.Invoke(ctx, P3Api_GetOrgAgentSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListCallerIdsFromBucket(ctx context.Context, in *v0alpha.ListCallerIdsFromBucketReq, opts ...grpc.CallOption) (*v0alpha.ListCallerIdsFromBucketRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListCallerIdsFromBucketRes)
	err := c.cc.Invoke(ctx, P3Api_ListCallerIdsFromBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) SaveLastCallResponse(ctx context.Context, in *v0alpha.SaveLastCallResponseReq, opts ...grpc.CallOption) (*v0alpha.SaveLastCallResponseRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.SaveLastCallResponseRes)
	err := c.cc.Invoke(ctx, P3Api_SaveLastCallResponse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListAgentCallLogsByCallSidAndType(ctx context.Context, in *v0alpha.ListAgentCallLogsByCallSidAndTypeReq, opts ...grpc.CallOption) (*v0alpha.ListAgentCallLogsByCallSidAndTypeRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListAgentCallLogsByCallSidAndTypeRes)
	err := c.cc.Invoke(ctx, P3Api_ListAgentCallLogsByCallSidAndType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListAgentCallResponseValues(ctx context.Context, in *v0alpha.ListAgentCallResponseValuesReq, opts ...grpc.CallOption) (*v0alpha.ListAgentCallResponseValuesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListAgentCallResponseValuesRes)
	err := c.cc.Invoke(ctx, P3Api_ListAgentCallResponseValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetContactSchemaByContactGroup(ctx context.Context, in *v0alpha.GetContactSchemaByContactGroupReq, opts ...grpc.CallOption) (*v0alpha.ContactSchema, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ContactSchema)
	err := c.cc.Invoke(ctx, P3Api_GetContactSchemaByContactGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListContactGroupDetailsByClientSid(ctx context.Context, in *v0alpha.ListContactGroupDetailsByClientSidReq, opts ...grpc.CallOption) (*v0alpha.ListContactGroupDetailsByClientSidRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListContactGroupDetailsByClientSidRes)
	err := c.cc.Invoke(ctx, P3Api_ListContactGroupDetailsByClientSid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetContactGroupDetails(ctx context.Context, in *v0alpha.GetContactGroupReq, opts ...grpc.CallOption) (*v0alpha.ContactGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ContactGroup)
	err := c.cc.Invoke(ctx, P3Api_GetContactGroupDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetContactGroupSize(ctx context.Context, in *v0alpha.GetContactGroupReq, opts ...grpc.CallOption) (*v0alpha.GetContactGroupSizeRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.GetContactGroupSizeRes)
	err := c.cc.Invoke(ctx, P3Api_GetContactGroupSize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) CreateContactFieldDescription(ctx context.Context, in *v0alpha.CreateContactFieldDescriptionReq, opts ...grpc.CallOption) (*v0alpha.CreateContactFieldDescriptionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.CreateContactFieldDescriptionRes)
	err := c.cc.Invoke(ctx, P3Api_CreateContactFieldDescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) DeleteContactFieldDescription(ctx context.Context, in *v0alpha.DeleteContactFieldDescriptionReq, opts ...grpc.CallOption) (*v0alpha.DeleteContactFieldDescriptionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.DeleteContactFieldDescriptionRes)
	err := c.cc.Invoke(ctx, P3Api_DeleteContactFieldDescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListContactFieldDescriptions(ctx context.Context, in *v0alpha.ListContactFieldDescriptionsReq, opts ...grpc.CallOption) (*v0alpha.ListContactFieldDescriptionsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListContactFieldDescriptionsRes)
	err := c.cc.Invoke(ctx, P3Api_ListContactFieldDescriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListContactFieldDescriptionsByCGSid(ctx context.Context, in *v0alpha.ListContactFieldDescriptionsByCGSidReq, opts ...grpc.CallOption) (*v0alpha.ListContactFieldDescriptionsByCGSidRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListContactFieldDescriptionsByCGSidRes)
	err := c.cc.Invoke(ctx, P3Api_ListContactFieldDescriptionsByCGSid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListContactImportTemplates(ctx context.Context, in *v0alpha.ListContactImportTemplatesReq, opts ...grpc.CallOption) (*v0alpha.ListContactImportTemplatesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListContactImportTemplatesRes)
	err := c.cc.Invoke(ctx, P3Api_ListContactImportTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) UpdatePreviewRecordToFinished(ctx context.Context, in *v0alpha.UpdatePreviewRecordToFinishedReq, opts ...grpc.CallOption) (*v0alpha.UpdatePreviewRecordToFinishedRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.UpdatePreviewRecordToFinishedRes)
	err := c.cc.Invoke(ctx, P3Api_UpdatePreviewRecordToFinished_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) UpdateAgentHuntGroup(ctx context.Context, in *v0alpha.UpdateAgentHuntGroupReq, opts ...grpc.CallOption) (*v0alpha.UpdateAgentHuntGroupRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.UpdateAgentHuntGroupRes)
	err := c.cc.Invoke(ctx, P3Api_UpdateAgentHuntGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) MultiAgentHuntGroupAssignment(ctx context.Context, in *v0alpha.MultiAgentHuntGroupAssignmentReq, opts ...grpc.CallOption) (*v0alpha.MultiAgentHuntGroupAssignmentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.MultiAgentHuntGroupAssignmentRes)
	err := c.cc.Invoke(ctx, P3Api_MultiAgentHuntGroupAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetAgentProfile(ctx context.Context, in *v0alpha.GetAgentProfileReq, opts ...grpc.CallOption) (*v0alpha.AgentProfile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.AgentProfile)
	err := c.cc.Invoke(ctx, P3Api_GetAgentProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) RecalculateBilling(ctx context.Context, in *v0alpha.RecalculateBillingReq, opts ...grpc.CallOption) (*v0alpha.RecalculateBillingRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.RecalculateBillingRes)
	err := c.cc.Invoke(ctx, P3Api_RecalculateBilling_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListOutboundBroadcastTemplateData(ctx context.Context, in *v0alpha.ListOutboundBroadcastTemplateDataReq, opts ...grpc.CallOption) (*v0alpha.ListOutboundBroadcastTemplateDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListOutboundBroadcastTemplateDataRes)
	err := c.cc.Invoke(ctx, P3Api_ListOutboundBroadcastTemplateData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) MultiAgentSkillAssignment(ctx context.Context, in *v0alpha.MultiAgentSkillAssignmentReq, opts ...grpc.CallOption) (*v0alpha.MultiAgentSkillAssignmentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.MultiAgentSkillAssignmentRes)
	err := c.cc.Invoke(ctx, P3Api_MultiAgentSkillAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) MultiAgentSkillUnassignment(ctx context.Context, in *v0alpha.MultiAgentSkillUnassignmentReq, opts ...grpc.CallOption) (*v0alpha.MultiAgentSkillUnassignmentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.MultiAgentSkillUnassignmentRes)
	err := c.cc.Invoke(ctx, P3Api_MultiAgentSkillUnassignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListMAMAgentHuntGroupsByClientSid(ctx context.Context, in *v0alpha.ListMAMAgentHuntGroupsByClientSidReq, opts ...grpc.CallOption) (*v0alpha.ListMAMAgentHuntGroupsByClientSidRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListMAMAgentHuntGroupsByClientSidRes)
	err := c.cc.Invoke(ctx, P3Api_ListMAMAgentHuntGroupsByClientSid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListTtsVoices(ctx context.Context, in *v0alpha.ListTtsVoicesReq, opts ...grpc.CallOption) (*v0alpha.ListTtsVoicesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListTtsVoicesRes)
	err := c.cc.Invoke(ctx, P3Api_ListTtsVoices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) CreateTtsVoice(ctx context.Context, in *v0alpha.CreateTtsVoiceReq, opts ...grpc.CallOption) (*v0alpha.CreateTtsVoiceRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.CreateTtsVoiceRes)
	err := c.cc.Invoke(ctx, P3Api_CreateTtsVoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) DeleteTtsVoice(ctx context.Context, in *v0alpha.DeleteTtsVoiceReq, opts ...grpc.CallOption) (*v0alpha.DeleteTtsVoiceRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.DeleteTtsVoiceRes)
	err := c.cc.Invoke(ctx, P3Api_DeleteTtsVoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListCustomDataKeys(ctx context.Context, in *v0alpha.ListCustomDataKeysReq, opts ...grpc.CallOption) (*v0alpha.ListCustomDataKeysRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListCustomDataKeysRes)
	err := c.cc.Invoke(ctx, P3Api_ListCustomDataKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) CreateCustomDataKey(ctx context.Context, in *v0alpha.CreateCustomDataKeyReq, opts ...grpc.CallOption) (*v0alpha.CreateCustomDataKeyRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.CreateCustomDataKeyRes)
	err := c.cc.Invoke(ctx, P3Api_CreateCustomDataKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) DeleteCustomDataKey(ctx context.Context, in *v0alpha.DeleteCustomDataKeyReq, opts ...grpc.CallOption) (*v0alpha.DeleteCustomDataKeyRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.DeleteCustomDataKeyRes)
	err := c.cc.Invoke(ctx, P3Api_DeleteCustomDataKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) UpdateCustomDataKey(ctx context.Context, in *v0alpha.UpdateCustomDataKeyReq, opts ...grpc.CallOption) (*v0alpha.UpdateCustomDataKeyRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.UpdateCustomDataKeyRes)
	err := c.cc.Invoke(ctx, P3Api_UpdateCustomDataKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) GetActivityLogHistories(ctx context.Context, in *v0alpha.GetActivityLogHistoryReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[v0alpha.GetActivityLogHistoryRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &P3Api_ServiceDesc.Streams[1], P3Api_GetActivityLogHistories_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[v0alpha.GetActivityLogHistoryReq, v0alpha.GetActivityLogHistoryRes]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type P3Api_GetActivityLogHistoriesClient = grpc.ServerStreamingClient[v0alpha.GetActivityLogHistoryRes]

func (c *p3ApiClient) ListTableTemplateProperties(ctx context.Context, in *v0alpha.ListTableTemplatePropertiesReq, opts ...grpc.CallOption) (*v0alpha.ListTableTemplatePropertiesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListTableTemplatePropertiesRes)
	err := c.cc.Invoke(ctx, P3Api_ListTableTemplateProperties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListAgentSkillsFilters(ctx context.Context, in *v0alpha.ListAgentSkillsFiltersReq, opts ...grpc.CallOption) (*v0alpha.ListAgentSkillsFiltersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListAgentSkillsFiltersRes)
	err := c.cc.Invoke(ctx, P3Api_ListAgentSkillsFilters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListScheduleRules(ctx context.Context, in *v0alpha.ListScheduleRulesRequest, opts ...grpc.CallOption) (*v0alpha.ListScheduleRulesResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListScheduleRulesResult)
	err := c.cc.Invoke(ctx, P3Api_ListScheduleRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListCustomReportFilters(ctx context.Context, in *v0alpha.ListCustomReportFiltersReq, opts ...grpc.CallOption) (*v0alpha.ListCustomReportFiltersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListCustomReportFiltersRes)
	err := c.cc.Invoke(ctx, P3Api_ListCustomReportFilters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p3ApiClient) ListSmsNumbers(ctx context.Context, in *v0alpha.ListSmsNumbersReq, opts ...grpc.CallOption) (*v0alpha.ListSmsNumbersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v0alpha.ListSmsNumbersRes)
	err := c.cc.Invoke(ctx, P3Api_ListSmsNumbers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// P3ApiServer is the server API for P3Api service.
// All implementations must embed UnimplementedP3ApiServer
// for forward compatibility.
type P3ApiServer interface {
	GetAgentHuntGroup(context.Context, *v0alpha.GetAgentHuntGroupReq) (*v0alpha.HuntGroup, error)
	GetAgentSession(context.Context, *v0alpha.GetAgentSessionReq) (*v0alpha.AgentSession, error)
	// Gets the skills of the requesting agent. This includes agent skills, hunt group skills, and extension skills(PBX).
	// Skills will be returned as a value pair (name, level).
	// For agent skills, the name of each skill will be the agent_skill_sid.
	// All other skills' names (hunt group and PBX) will be given special formats.
	// The requesting agent and hunt_group_sid skills will be defaulted to the max level (1000 and 100 respectively).
	//
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the hunt_group_sid in the request in invalid.
	GetAgentSkills(context.Context, *v0alpha.GetAgentSkillsReq) (*v0alpha.GetAgentSkillsRes, error)
	// Creates a new agent skill as defined by the request message.
	// Errors:
	//   - grpc.InvalidArgument: the client_sid or name in the request is invalid.
	CreateAgentSkill(context.Context, *v0alpha.CreateAgentSkillReq) (*v0alpha.CreateAgentSkillRes, error)
	// Updates an agent skill as defined by the request message.
	// Errors:
	//   - grpc.InvalidArgument: the agent_skill_sid or name in the request is invalid.
	UpdateAgentSkill(context.Context, *v0alpha.UpdateAgentSkillReq) (*v0alpha.UpdateAgentSkillRes, error)
	// Deletes the agent skill with the agent_skill_sid given on the request.
	// Errors:
	//   - grpc.InvalidArgument: the agent_skill_sid in the request is invalid.
	DeleteAgentSkill(context.Context, *v0alpha.DeleteAgentSkillReq) (*v0alpha.DeleteAgentSkillRes, error)
	// Returns a list of skills for the current agent.
	ListSkillsForCurrentAgent(context.Context, *v0alpha.ListSkillsForCurrentAgentReq) (*v0alpha.ListSkillsForCurrentAgentRes, error)
	// Returns a list of skills filtered by types given on
	// the request message field type_filter. Leaving the type_filter
	// field empty will return all types of skills.
	ListSkills(context.Context, *v0alpha.ListSkillsReq) (*v0alpha.ListSkillsRes, error)
	// Updates an agents assigned skills as defined by the skills list on
	// the request message.
	// Errors:
	//   - grpc.InvalidArgument: the user_id on the request is invalid.
	UpdateAgentSkills(context.Context, *v0alpha.UpdateAgentSkillsReq) (*v0alpha.UpdateAgentSkillsRes, error)
	GetCurrentAgent(context.Context, *v0alpha.GetCurrentAgentReq) (*v0alpha.Agent, error)
	GetClientInfoData(context.Context, *v0alpha.GetClientInfoDataReq) (*v0alpha.GetClientInfoDataRes, error)
	GetClientInfoDisplayTemplate(context.Context, *v0alpha.GetClientInfoDisplayTemplateReq) (*v0alpha.GetClientInfoDisplayTemplateRes, error)
	ListAgentStatisticsData(context.Context, *v0alpha.ListAgentStatisticsDataReq) (*v0alpha.ListAgentStatisticsDataRes, error)
	// Lists all agent and hunt group PBX extensions that the requested agent has.
	ListPBXExtensions(context.Context, *v0alpha.ListPBXExtensionsReq) (*v0alpha.ListPBXExtensionsRes, error)
	// Lists every agent extension for the current client
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.Internal: unexpected error getting pbx_extensions
	ListAgentExtensions(context.Context, *v0alpha.ListAgentExtensionsReq) (*v0alpha.ListAgentExtensionsRes, error)
	// Lists every hunt group extension for the current client
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.Internal: unexpected error getting pbx_extensions
	ListHuntGroupExtensions(context.Context, *v0alpha.ListHuntGroupExtensionsReq) (*v0alpha.ListHuntGroupExtensionsRes, error)
	// Creates a new extension as defined by the request message
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request has missing or invalid fields.
	//   - grpc.Internal: An unexpected error occurred while saving the extension.
	CreateExtension(context.Context, *v0alpha.CreateExtensionReq) (*v0alpha.CreateExtensionRes, error)
	// Deletes a pbx_extension with the given pbx_extension_sid.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request had invalid or missing fields.
	DeleteExtension(context.Context, *v0alpha.DeleteExtensionReq) (*v0alpha.DeleteExtensionRes, error)
	// Updates an extension as defined by the request message.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: The request had invalid or missing fields.
	//   - grpc.Internal: An unexpected error occurred updating the extension.
	UpdateExtension(context.Context, *v0alpha.UpdateExtensionReq) (*v0alpha.UpdateExtensionRes, error)
	UpdatePBXExtension(context.Context, *v0alpha.UpdatePBXExtensionReq) (*v0alpha.UpdatePBXExtensionRes, error)
	CreateDNCLNumbers(context.Context, *v0alpha.CreateDNCLNumbersReq) (*v0alpha.CreateDNCLNumbersRes, error)
	// Gets the campaign or huntgroup script for the given agent's current hunt
	// group. If no script is found, it gets the hunt group responses for the
	// agent's current hunt group. It also does a mail merge with the found script
	// or responses (if able).
	GetScriptOrResponses(context.Context, *v0alpha.GetScriptOrResponsesReq) (*v0alpha.GetScriptOrResponsesRes, error)
	GetHuntGroupAgentSettings(context.Context, *v0alpha.GetHuntGroupAgentSettingsReq) (*v0alpha.HuntGroupAgentSettings, error)
	// Returns a list of weblinks for the hunt group in the request.
	// It replaces any parameters of a given weblink with the call data of the call sid and type from the request message or with the callback details (if a scheduled_callback_id is given).
	ListHuntGroupWebLinks(context.Context, *v0alpha.ListHuntGroupWebLinksReq) (*v0alpha.ListHuntGroupWebLinksRes, error)
	GetHuntGroupPauseCodes(context.Context, *v0alpha.GetHuntGroupPauseCodesReq) (*v0alpha.GetHuntGroupPauseCodesRes, error)
	// Lists the call history of the requested agent for the past day or
	// session_sid, depending on the filter parameter.
	ListAgentCallHistory(context.Context, *v0alpha.ListAgentCallHistoryReq) (*v0alpha.ListAgentCallHistoryRes, error)
	// Lists all client phone book entries.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	ListClientPhoneBookEntries(context.Context, *v0alpha.ListClientPhoneBookEntriesReq) (*v0alpha.ListClientPhoneBookEntriesRes, error)
	// Lists all hunt group phone book entries.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	ListHuntGroupPhoneBookEntries(context.Context, *v0alpha.ListHuntGroupPhoneBookEntriesReq) (*v0alpha.ListHuntGroupPhoneBookEntriesRes, error)
	// Creates a new phone_book as defined by the request message.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: the fields on the request are missing or invalid.
	//   - grpc.Internal: unexpected error occurred when saving the phone book.
	CreatePhoneBookEntry(context.Context, *v0alpha.CreatePhoneBookEntryReq) (*v0alpha.CreatePhoneBookEntryRes, error)
	// Updates an existing phone_book as defined by the request message.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	//
	// Errors:
	//   - grpc.InvalidArgument: the fields on the request are missing or invalid.
	//   - grpc.Internal: unexpected error occurred when saving the phone book.
	UpdatePhoneBookEntry(context.Context, *v0alpha.UpdatePhoneBookEntryReq) (*v0alpha.UpdatePhoneBookEntryRes, error)
	// Deletes the phone_book with the phone_book_sid given on the reques message.
	// Required Permissions:
	//
	//	AGENT_MANAGER
	DeletePhoneBookEntry(context.Context, *v0alpha.DeletePhoneBookEntryReq) (*v0alpha.DeletePhoneBookEntryRes, error)
	// Lists caller_id, outbound and transfer phone books for the requesting client and given hunt group sid.
	// Entries will be ordered by entry_name and phone_number.
	//
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the client_sid or hunt_group_sid in the request are invalid.
	//   - grpc.Internal: unexpected error occurred when retrieving the phone books.
	ListPhoneBooks(context.Context, *v0alpha.ListPhoneBooksReq) (*v0alpha.ListPhoneBooksRes, error)
	ListAgentTriggers(context.Context, *v0alpha.ListAgentTriggersReq) (*v0alpha.ListAgentTriggersRes, error)
	// Gets all running broadcasts (task groups) for the requesting agent and hunt_group_sid in the request.
	// Calculates the percentage of completed tasks for each of those task groups.
	// Calculates the overall task completion percentage of all matching task groups.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the hunt_group_sid in the request is invalid.
	GetCampaignCompletionStatus(context.Context, *v0alpha.GetCampaignCompletionStatusReq) (*v0alpha.GetCampaignCompletionStatusRes, error)
	// Uses lost peer call sid and call type from the request to get information about lost call
	// gets the name and hunt group of the agent that was connected to that call and all types of skills the call has.
	//
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the call_sid in the request in invalid.
	//   - grpc.NotFound: the call sid provided wasn't previously connected to any agent.
	GetLostPeerInfo(context.Context, *v0alpha.GetLostPeerInfoReq) (*v0alpha.GetLostPeerInfoRes, error)
	// Gets all the available Disposition Keys
	//
	// Required permissions:
	//
	//	NONE
	GetDispositionKeys(context.Context, *v0alpha.GetDispositionKeysReq) (*v0alpha.GetDispositionKeysRes, error)
	GetReadyAgents(context.Context, *v0alpha.GetReadyAgentsReq) (*v0alpha.GetReadyAgentsRes, error)
	// Returns lists with call data of calls that were:
	// Placed on multihold by the requesting agent.
	// Queued, are ready to be handled and require a subset of the agent_skills provided.
	// Placed in the Hold Queue Monitor, haven't been picked up yet and require a subset of the agent_skills provided.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the agent_session_sid provided in the request is invalid.
	ListAgentQueueAndOnHoldCallData(context.Context, *v0alpha.ListAgentQueueAndOnHoldCallDataReq) (*v0alpha.ListAgentQueueAndOnHoldCallDataRes, error)
	SaveAgentCallResponses(context.Context, *v0alpha.SaveAgentCallResponsesReq) (*v0alpha.SaveAgentCallResponsesRes, error)
	ListAgentTransferOptions(context.Context, *v0alpha.ListAgentTransferOptionsReq) (*v0alpha.ListAgentTransferOptionsRes, error)
	UpdateAgentCallResponseValue(context.Context, *v0alpha.UpdateAgentCallResponseValueReq) (*v0alpha.UpdateAgentCallResponseValueRes, error)
	GetIntercomPeerInfo(context.Context, *v0alpha.GetIntercomPeerInfoReq) (*v0alpha.GetIntercomPeerInfoRes, error)
	// Lists the requesting user's org response evaluators.
	ListOrgResponseEvaluators(context.Context, *v0alpha.ListOrgResponseEvaluatorsReq) (*v0alpha.ListOrgResponseEvaluatorsRes, error)
	GetQueueConfigurationOptionsArray(context.Context, *v0alpha.GetQueueConfigurationOptionsArrayReq) (*v0alpha.GetQueueConfigurationOptionsArrayRes, error)
	// Get the rules for conditionally adding a number to the DNCL depending on
	// responses or scripts
	GetConditionalDNCLRules(context.Context, *v0alpha.GetConditionalDNCLRulesReq) (*v0alpha.GetConditionalDNCLRulesRes, error)
	ManualDialStart(context.Context, *v0alpha.ManualDialStartReq) (*v0alpha.ManualDialStartRes, error)
	GetExtendedCallHistories(*v0alpha.ListExtendedCallHistoryReq, grpc.ServerStreamingServer[v0alpha.ListExtendedCallHistoryRes]) error
	ListWhiteListPhoneBooks(context.Context, *v0alpha.ListWhiteListPhoneBooksReq) (*v0alpha.ListWhiteListPhoneBooksRes, error)
	DownloadCallRecording(context.Context, *v0alpha.DownloadCallRecordingReq) (*v0alpha.DownloadRecordingRes, error)
	DownloadCallRecordings(context.Context, *v0alpha.DownloadCallRecordingsReq) (*v0alpha.DownloadRecordingRes, error)
	PlacePreviewDialCall(context.Context, *v0alpha.PlacePreviewDialCallReq) (*v0alpha.PlacePreviewDialCallRes, error)
	CancelPreviewDialCall(context.Context, *v0alpha.CancelPreviewDialCallReq) (*v0alpha.CancelPreviewDialCallRes, error)
	UpdateTaskStatus(context.Context, *v0alpha.UpdateTaskStatusReq) (*v0alpha.Nil, error)
	// ListCallbackRoutingAgents returns a list of agents that are allowed to make a callback.
	ListCallbackRoutingAgents(context.Context, *v0alpha.ListCallbackRoutingAgentsReq) (*v0alpha.ListCallbackRoutingAgentsRes, error)
	ListCallbackRoutingSkills(context.Context, *v0alpha.ListCallbackRoutingSkillsReq) (*v0alpha.ListCallbackRoutingSkillsRes, error)
	HandleRecordingDelay(context.Context, *v0alpha.HandleRecordingDelayReq) (*v0alpha.HandleRecordingDelayRes, error)
	UpdateAgentAssignedHuntGroup(context.Context, *v0alpha.UpdateAgentAssignedHuntGroupReq) (*v0alpha.UpdateAgentAssignedHuntGroupRes, error)
	GetCallData(context.Context, *v0alpha.GetCallDataReq) (*v0alpha.GetCallDataRes, error)
	ListHuntGroups(context.Context, *v0alpha.ListHuntGroupsReq) (*v0alpha.ListHuntGroupsRes, error)
	// List the hunt groups an agent within a given hunt group can reassign
	// themselves to. The reassignment hunt groups can optionally be limited by a
	// hunt group setting. If a hunt group does not allow reassignment, the
	// returned list will be empty.
	ListReassignmentHuntGroups(context.Context, *v0alpha.ListReassignmentHuntGroupsReq) (*v0alpha.ListReassignmentHuntGroupsRes, error)
	GetOrgAgentSettings(context.Context, *v0alpha.GetOrgAgentSettingsReq) (*v0alpha.GetOrgAgentSettingsRes, error)
	// Lists caller id numbers with their associated region codes for the given
	// bucket
	ListCallerIdsFromBucket(context.Context, *v0alpha.ListCallerIdsFromBucketReq) (*v0alpha.ListCallerIdsFromBucketRes, error)
	SaveLastCallResponse(context.Context, *v0alpha.SaveLastCallResponseReq) (*v0alpha.SaveLastCallResponseRes, error)
	ListAgentCallLogsByCallSidAndType(context.Context, *v0alpha.ListAgentCallLogsByCallSidAndTypeReq) (*v0alpha.ListAgentCallLogsByCallSidAndTypeRes, error)
	// Lists the keys and values of the latest responses for the given call_sid,
	// call_type and agent_sid
	ListAgentCallResponseValues(context.Context, *v0alpha.ListAgentCallResponseValuesReq) (*v0alpha.ListAgentCallResponseValuesRes, error)
	// Get contact schema details based on contact group sid
	GetContactSchemaByContactGroup(context.Context, *v0alpha.GetContactSchemaByContactGroupReq) (*v0alpha.ContactSchema, error)
	// List contact group details based on client sid from contact_group table
	ListContactGroupDetailsByClientSid(context.Context, *v0alpha.ListContactGroupDetailsByClientSidReq) (*v0alpha.ListContactGroupDetailsByClientSidRes, error)
	// Get contact group details based on contact group sid from contact_group
	// table
	GetContactGroupDetails(context.Context, *v0alpha.GetContactGroupReq) (*v0alpha.ContactGroup, error)
	// Get contact group size based on contacts size
	GetContactGroupSize(context.Context, *v0alpha.GetContactGroupReq) (*v0alpha.GetContactGroupSizeRes, error)
	// Create contact field description details
	CreateContactFieldDescription(context.Context, *v0alpha.CreateContactFieldDescriptionReq) (*v0alpha.CreateContactFieldDescriptionRes, error)
	// Delete contact field description details
	DeleteContactFieldDescription(context.Context, *v0alpha.DeleteContactFieldDescriptionReq) (*v0alpha.DeleteContactFieldDescriptionRes, error)
	// List contact field desc details from contact_field_description table
	ListContactFieldDescriptions(context.Context, *v0alpha.ListContactFieldDescriptionsReq) (*v0alpha.ListContactFieldDescriptionsRes, error)
	// List contact field description details based on contact group sid
	ListContactFieldDescriptionsByCGSid(context.Context, *v0alpha.ListContactFieldDescriptionsByCGSidReq) (*v0alpha.ListContactFieldDescriptionsByCGSidRes, error)
	// List contactImportTemplates based on client_sid from
	// contact_import_template table
	ListContactImportTemplates(context.Context, *v0alpha.ListContactImportTemplatesReq) (*v0alpha.ListContactImportTemplatesRes, error)
	// Updates task data for a preview record to finished and logs an agent
	// session event
	UpdatePreviewRecordToFinished(context.Context, *v0alpha.UpdatePreviewRecordToFinishedReq) (*v0alpha.UpdatePreviewRecordToFinishedRes, error)
	// Updates the requesting agent's hunt_group_sid.
	UpdateAgentHuntGroup(context.Context, *v0alpha.UpdateAgentHuntGroupReq) (*v0alpha.UpdateAgentHuntGroupRes, error)
	// Updates every given user's hunt_group_sid.
	// Required Permissions:
	//
	//	AGENT_MANAGEMENT
	//
	// Errors:
	//   - grpc.Internal: an error occurred while interacting with the database.
	//   - grpc.InvalidArgument: the hunt_group_sid or the user id list is empty or contains an invalid value.
	MultiAgentHuntGroupAssignment(context.Context, *v0alpha.MultiAgentHuntGroupAssignmentReq) (*v0alpha.MultiAgentHuntGroupAssignmentRes, error)
	// GetAgentProfile returns an agent profile.
	GetAgentProfile(context.Context, *v0alpha.GetAgentProfileReq) (*v0alpha.AgentProfile, error)
	// RecalculateBilling updates statuses for every billing type given on the
	// request message for either the current or previous month.
	// Only data that has already been summed for billing will have it's
	// status updated.
	// Required Permissions:
	//
	//	EDIT_BILLING
	RecalculateBilling(context.Context, *v0alpha.RecalculateBillingReq) (*v0alpha.RecalculateBillingRes, error)
	// Gets information of the requesting client's broadcast templates (template_number, name, type, modify_date)
	// It reports if each found template is either STANDARD or LAYERED.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	NONE
	ListOutboundBroadcastTemplateData(context.Context, *v0alpha.ListOutboundBroadcastTemplateDataReq) (*v0alpha.ListOutboundBroadcastTemplateDataRes, error)
	// Assign every skill to every agent with the given aptitude.
	// Errors:
	//   - grpc.Invalid: the aptitude field is invalid.
	MultiAgentSkillAssignment(context.Context, *v0alpha.MultiAgentSkillAssignmentReq) (*v0alpha.MultiAgentSkillAssignmentRes, error)
	// Unassigns every given skill from every given user.
	// Errors:
	//   - grpc.InvalidArgument:
	//   - the user_ids list is empty or contains an empty string.
	//   - one or more of the user_ids does not belong to the client.
	//   - grpc.Internal: an error occurred while deleting the skill assignments.
	MultiAgentSkillUnassignment(context.Context, *v0alpha.MultiAgentSkillUnassignmentReq) (*v0alpha.MultiAgentSkillUnassignmentRes, error)
	// List of agent hunt groups based on client sid
	// that have manually approved messages enabled
	ListMAMAgentHuntGroupsByClientSid(context.Context, *v0alpha.ListMAMAgentHuntGroupsByClientSidReq) (*v0alpha.ListMAMAgentHuntGroupsByClientSidRes, error)
	// List every tts voice
	// Required Permissions:
	//
	//	TCN_ADMIN_SETTINGS
	//
	// Errors:
	//   - grpc.Internal: an error was returned while trying to retrieve the entity
	ListTtsVoices(context.Context, *v0alpha.ListTtsVoicesReq) (*v0alpha.ListTtsVoicesRes, error)
	// Create a new tts voice
	// Required Permissions:
	//
	//	TCN_ADMIN_SETTINGS
	//
	// Errors:
	//   - grpc.InvalidArgument: the actual_name or port field on the request is invalid.
	//   - grpc.Internal: an error was returned while trying to insert the new tts voice.
	CreateTtsVoice(context.Context, *v0alpha.CreateTtsVoiceReq) (*v0alpha.CreateTtsVoiceRes, error)
	// Delete a tts voice with the given tts_voice_sid.
	// Required Permissions:
	//
	//	TCN_ADMIN_SETTINGS
	//
	// Errors:
	//   - grpc.InvalidArgument: the tts_voice_sid field on the request is invalid.
	//   - grpc.Internal: an error was returned while trying to remove the tts voice.
	DeleteTtsVoice(context.Context, *v0alpha.DeleteTtsVoiceReq) (*v0alpha.DeleteTtsVoiceRes, error)
	// List of account custom data keys based on client sid
	// Required Permissions:
	//
	//	ORG_VIEW
	//
	// Errors:
	//   - grpc.Internal: an error was returned while trying to retrieve the entity
	ListCustomDataKeys(context.Context, *v0alpha.ListCustomDataKeysReq) (*v0alpha.ListCustomDataKeysRes, error)
	// Creates a new Data Key as defined by the request message
	// the client_properties_sid should not be set, this is assigned on the backend
	// Required Permission:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.InvalidArgument: The custom_data_key field was not set
	//   - grpc.Internal: error creating custom data key
	CreateCustomDataKey(context.Context, *v0alpha.CreateCustomDataKeyReq) (*v0alpha.CreateCustomDataKeyRes, error)
	// Deletes a Custom Data Key with the sid given on the request message.
	// Required Permission:
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.InvalidArgument: The client_properties_sid field is invalid.
	//   - grpc.NotFound: no custom data key was deleted for the client_properties_sid.
	//   - grpc.Internal: an error occurred while trying to remove the custom data key.
	DeleteCustomDataKey(context.Context, *v0alpha.DeleteCustomDataKeyReq) (*v0alpha.DeleteCustomDataKeyRes, error)
	// Updates a custom data key with the client_properties_sid and data key
	// given on the request
	// Required Permissions;
	//
	//	ORG_EDIT
	//
	// Errors:
	//   - grpc.InvalidArgument: The client_properties_sid was empty or the data key was not set
	//   - grpc.Internal: error updating custom data key, more than 1 custom data key records affected
	//   - grpc.NotFound: no matching custom data key found
	UpdateCustomDataKey(context.Context, *v0alpha.UpdateCustomDataKeyReq) (*v0alpha.UpdateCustomDataKeyRes, error)
	// Get Activity logs for given users and by specified time range
	// Required Permissions;
	//
	//	CUSTOMER_SUPPORT
	GetActivityLogHistories(*v0alpha.GetActivityLogHistoryReq, grpc.ServerStreamingServer[v0alpha.GetActivityLogHistoryRes]) error
	// List agent and queue table template properties by client sid
	ListTableTemplateProperties(context.Context, *v0alpha.ListTableTemplatePropertiesReq) (*v0alpha.ListTableTemplatePropertiesRes, error)
	// List agent skills filters by client sid
	ListAgentSkillsFilters(context.Context, *v0alpha.ListAgentSkillsFiltersReq) (*v0alpha.ListAgentSkillsFiltersRes, error)
	// List Schedule Rules
	ListScheduleRules(context.Context, *v0alpha.ListScheduleRulesRequest) (*v0alpha.ListScheduleRulesResult, error)
	// List custom report filters by client sid
	ListCustomReportFilters(context.Context, *v0alpha.ListCustomReportFiltersReq) (*v0alpha.ListCustomReportFiltersRes, error)
	// List sms numbers by client sid
	ListSmsNumbers(context.Context, *v0alpha.ListSmsNumbersReq) (*v0alpha.ListSmsNumbersRes, error)
	mustEmbedUnimplementedP3ApiServer()
}

// UnimplementedP3ApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedP3ApiServer struct{}

func (UnimplementedP3ApiServer) GetAgentHuntGroup(context.Context, *v0alpha.GetAgentHuntGroupReq) (*v0alpha.HuntGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentHuntGroup not implemented")
}
func (UnimplementedP3ApiServer) GetAgentSession(context.Context, *v0alpha.GetAgentSessionReq) (*v0alpha.AgentSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentSession not implemented")
}
func (UnimplementedP3ApiServer) GetAgentSkills(context.Context, *v0alpha.GetAgentSkillsReq) (*v0alpha.GetAgentSkillsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentSkills not implemented")
}
func (UnimplementedP3ApiServer) CreateAgentSkill(context.Context, *v0alpha.CreateAgentSkillReq) (*v0alpha.CreateAgentSkillRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgentSkill not implemented")
}
func (UnimplementedP3ApiServer) UpdateAgentSkill(context.Context, *v0alpha.UpdateAgentSkillReq) (*v0alpha.UpdateAgentSkillRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentSkill not implemented")
}
func (UnimplementedP3ApiServer) DeleteAgentSkill(context.Context, *v0alpha.DeleteAgentSkillReq) (*v0alpha.DeleteAgentSkillRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgentSkill not implemented")
}
func (UnimplementedP3ApiServer) ListSkillsForCurrentAgent(context.Context, *v0alpha.ListSkillsForCurrentAgentReq) (*v0alpha.ListSkillsForCurrentAgentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSkillsForCurrentAgent not implemented")
}
func (UnimplementedP3ApiServer) ListSkills(context.Context, *v0alpha.ListSkillsReq) (*v0alpha.ListSkillsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSkills not implemented")
}
func (UnimplementedP3ApiServer) UpdateAgentSkills(context.Context, *v0alpha.UpdateAgentSkillsReq) (*v0alpha.UpdateAgentSkillsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentSkills not implemented")
}
func (UnimplementedP3ApiServer) GetCurrentAgent(context.Context, *v0alpha.GetCurrentAgentReq) (*v0alpha.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentAgent not implemented")
}
func (UnimplementedP3ApiServer) GetClientInfoData(context.Context, *v0alpha.GetClientInfoDataReq) (*v0alpha.GetClientInfoDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientInfoData not implemented")
}
func (UnimplementedP3ApiServer) GetClientInfoDisplayTemplate(context.Context, *v0alpha.GetClientInfoDisplayTemplateReq) (*v0alpha.GetClientInfoDisplayTemplateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientInfoDisplayTemplate not implemented")
}
func (UnimplementedP3ApiServer) ListAgentStatisticsData(context.Context, *v0alpha.ListAgentStatisticsDataReq) (*v0alpha.ListAgentStatisticsDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentStatisticsData not implemented")
}
func (UnimplementedP3ApiServer) ListPBXExtensions(context.Context, *v0alpha.ListPBXExtensionsReq) (*v0alpha.ListPBXExtensionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPBXExtensions not implemented")
}
func (UnimplementedP3ApiServer) ListAgentExtensions(context.Context, *v0alpha.ListAgentExtensionsReq) (*v0alpha.ListAgentExtensionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentExtensions not implemented")
}
func (UnimplementedP3ApiServer) ListHuntGroupExtensions(context.Context, *v0alpha.ListHuntGroupExtensionsReq) (*v0alpha.ListHuntGroupExtensionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHuntGroupExtensions not implemented")
}
func (UnimplementedP3ApiServer) CreateExtension(context.Context, *v0alpha.CreateExtensionReq) (*v0alpha.CreateExtensionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExtension not implemented")
}
func (UnimplementedP3ApiServer) DeleteExtension(context.Context, *v0alpha.DeleteExtensionReq) (*v0alpha.DeleteExtensionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExtension not implemented")
}
func (UnimplementedP3ApiServer) UpdateExtension(context.Context, *v0alpha.UpdateExtensionReq) (*v0alpha.UpdateExtensionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExtension not implemented")
}
func (UnimplementedP3ApiServer) UpdatePBXExtension(context.Context, *v0alpha.UpdatePBXExtensionReq) (*v0alpha.UpdatePBXExtensionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePBXExtension not implemented")
}
func (UnimplementedP3ApiServer) CreateDNCLNumbers(context.Context, *v0alpha.CreateDNCLNumbersReq) (*v0alpha.CreateDNCLNumbersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDNCLNumbers not implemented")
}
func (UnimplementedP3ApiServer) GetScriptOrResponses(context.Context, *v0alpha.GetScriptOrResponsesReq) (*v0alpha.GetScriptOrResponsesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScriptOrResponses not implemented")
}
func (UnimplementedP3ApiServer) GetHuntGroupAgentSettings(context.Context, *v0alpha.GetHuntGroupAgentSettingsReq) (*v0alpha.HuntGroupAgentSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHuntGroupAgentSettings not implemented")
}
func (UnimplementedP3ApiServer) ListHuntGroupWebLinks(context.Context, *v0alpha.ListHuntGroupWebLinksReq) (*v0alpha.ListHuntGroupWebLinksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHuntGroupWebLinks not implemented")
}
func (UnimplementedP3ApiServer) GetHuntGroupPauseCodes(context.Context, *v0alpha.GetHuntGroupPauseCodesReq) (*v0alpha.GetHuntGroupPauseCodesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHuntGroupPauseCodes not implemented")
}
func (UnimplementedP3ApiServer) ListAgentCallHistory(context.Context, *v0alpha.ListAgentCallHistoryReq) (*v0alpha.ListAgentCallHistoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentCallHistory not implemented")
}
func (UnimplementedP3ApiServer) ListClientPhoneBookEntries(context.Context, *v0alpha.ListClientPhoneBookEntriesReq) (*v0alpha.ListClientPhoneBookEntriesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClientPhoneBookEntries not implemented")
}
func (UnimplementedP3ApiServer) ListHuntGroupPhoneBookEntries(context.Context, *v0alpha.ListHuntGroupPhoneBookEntriesReq) (*v0alpha.ListHuntGroupPhoneBookEntriesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHuntGroupPhoneBookEntries not implemented")
}
func (UnimplementedP3ApiServer) CreatePhoneBookEntry(context.Context, *v0alpha.CreatePhoneBookEntryReq) (*v0alpha.CreatePhoneBookEntryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePhoneBookEntry not implemented")
}
func (UnimplementedP3ApiServer) UpdatePhoneBookEntry(context.Context, *v0alpha.UpdatePhoneBookEntryReq) (*v0alpha.UpdatePhoneBookEntryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhoneBookEntry not implemented")
}
func (UnimplementedP3ApiServer) DeletePhoneBookEntry(context.Context, *v0alpha.DeletePhoneBookEntryReq) (*v0alpha.DeletePhoneBookEntryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhoneBookEntry not implemented")
}
func (UnimplementedP3ApiServer) ListPhoneBooks(context.Context, *v0alpha.ListPhoneBooksReq) (*v0alpha.ListPhoneBooksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPhoneBooks not implemented")
}
func (UnimplementedP3ApiServer) ListAgentTriggers(context.Context, *v0alpha.ListAgentTriggersReq) (*v0alpha.ListAgentTriggersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentTriggers not implemented")
}
func (UnimplementedP3ApiServer) GetCampaignCompletionStatus(context.Context, *v0alpha.GetCampaignCompletionStatusReq) (*v0alpha.GetCampaignCompletionStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaignCompletionStatus not implemented")
}
func (UnimplementedP3ApiServer) GetLostPeerInfo(context.Context, *v0alpha.GetLostPeerInfoReq) (*v0alpha.GetLostPeerInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLostPeerInfo not implemented")
}
func (UnimplementedP3ApiServer) GetDispositionKeys(context.Context, *v0alpha.GetDispositionKeysReq) (*v0alpha.GetDispositionKeysRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDispositionKeys not implemented")
}
func (UnimplementedP3ApiServer) GetReadyAgents(context.Context, *v0alpha.GetReadyAgentsReq) (*v0alpha.GetReadyAgentsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadyAgents not implemented")
}
func (UnimplementedP3ApiServer) ListAgentQueueAndOnHoldCallData(context.Context, *v0alpha.ListAgentQueueAndOnHoldCallDataReq) (*v0alpha.ListAgentQueueAndOnHoldCallDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentQueueAndOnHoldCallData not implemented")
}
func (UnimplementedP3ApiServer) SaveAgentCallResponses(context.Context, *v0alpha.SaveAgentCallResponsesReq) (*v0alpha.SaveAgentCallResponsesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAgentCallResponses not implemented")
}
func (UnimplementedP3ApiServer) ListAgentTransferOptions(context.Context, *v0alpha.ListAgentTransferOptionsReq) (*v0alpha.ListAgentTransferOptionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentTransferOptions not implemented")
}
func (UnimplementedP3ApiServer) UpdateAgentCallResponseValue(context.Context, *v0alpha.UpdateAgentCallResponseValueReq) (*v0alpha.UpdateAgentCallResponseValueRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentCallResponseValue not implemented")
}
func (UnimplementedP3ApiServer) GetIntercomPeerInfo(context.Context, *v0alpha.GetIntercomPeerInfoReq) (*v0alpha.GetIntercomPeerInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntercomPeerInfo not implemented")
}
func (UnimplementedP3ApiServer) ListOrgResponseEvaluators(context.Context, *v0alpha.ListOrgResponseEvaluatorsReq) (*v0alpha.ListOrgResponseEvaluatorsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgResponseEvaluators not implemented")
}
func (UnimplementedP3ApiServer) GetQueueConfigurationOptionsArray(context.Context, *v0alpha.GetQueueConfigurationOptionsArrayReq) (*v0alpha.GetQueueConfigurationOptionsArrayRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueueConfigurationOptionsArray not implemented")
}
func (UnimplementedP3ApiServer) GetConditionalDNCLRules(context.Context, *v0alpha.GetConditionalDNCLRulesReq) (*v0alpha.GetConditionalDNCLRulesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConditionalDNCLRules not implemented")
}
func (UnimplementedP3ApiServer) ManualDialStart(context.Context, *v0alpha.ManualDialStartReq) (*v0alpha.ManualDialStartRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManualDialStart not implemented")
}
func (UnimplementedP3ApiServer) GetExtendedCallHistories(*v0alpha.ListExtendedCallHistoryReq, grpc.ServerStreamingServer[v0alpha.ListExtendedCallHistoryRes]) error {
	return status.Errorf(codes.Unimplemented, "method GetExtendedCallHistories not implemented")
}
func (UnimplementedP3ApiServer) ListWhiteListPhoneBooks(context.Context, *v0alpha.ListWhiteListPhoneBooksReq) (*v0alpha.ListWhiteListPhoneBooksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWhiteListPhoneBooks not implemented")
}
func (UnimplementedP3ApiServer) DownloadCallRecording(context.Context, *v0alpha.DownloadCallRecordingReq) (*v0alpha.DownloadRecordingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadCallRecording not implemented")
}
func (UnimplementedP3ApiServer) DownloadCallRecordings(context.Context, *v0alpha.DownloadCallRecordingsReq) (*v0alpha.DownloadRecordingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadCallRecordings not implemented")
}
func (UnimplementedP3ApiServer) PlacePreviewDialCall(context.Context, *v0alpha.PlacePreviewDialCallReq) (*v0alpha.PlacePreviewDialCallRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlacePreviewDialCall not implemented")
}
func (UnimplementedP3ApiServer) CancelPreviewDialCall(context.Context, *v0alpha.CancelPreviewDialCallReq) (*v0alpha.CancelPreviewDialCallRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPreviewDialCall not implemented")
}
func (UnimplementedP3ApiServer) UpdateTaskStatus(context.Context, *v0alpha.UpdateTaskStatusReq) (*v0alpha.Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskStatus not implemented")
}
func (UnimplementedP3ApiServer) ListCallbackRoutingAgents(context.Context, *v0alpha.ListCallbackRoutingAgentsReq) (*v0alpha.ListCallbackRoutingAgentsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCallbackRoutingAgents not implemented")
}
func (UnimplementedP3ApiServer) ListCallbackRoutingSkills(context.Context, *v0alpha.ListCallbackRoutingSkillsReq) (*v0alpha.ListCallbackRoutingSkillsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCallbackRoutingSkills not implemented")
}
func (UnimplementedP3ApiServer) HandleRecordingDelay(context.Context, *v0alpha.HandleRecordingDelayReq) (*v0alpha.HandleRecordingDelayRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleRecordingDelay not implemented")
}
func (UnimplementedP3ApiServer) UpdateAgentAssignedHuntGroup(context.Context, *v0alpha.UpdateAgentAssignedHuntGroupReq) (*v0alpha.UpdateAgentAssignedHuntGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentAssignedHuntGroup not implemented")
}
func (UnimplementedP3ApiServer) GetCallData(context.Context, *v0alpha.GetCallDataReq) (*v0alpha.GetCallDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCallData not implemented")
}
func (UnimplementedP3ApiServer) ListHuntGroups(context.Context, *v0alpha.ListHuntGroupsReq) (*v0alpha.ListHuntGroupsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHuntGroups not implemented")
}
func (UnimplementedP3ApiServer) ListReassignmentHuntGroups(context.Context, *v0alpha.ListReassignmentHuntGroupsReq) (*v0alpha.ListReassignmentHuntGroupsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReassignmentHuntGroups not implemented")
}
func (UnimplementedP3ApiServer) GetOrgAgentSettings(context.Context, *v0alpha.GetOrgAgentSettingsReq) (*v0alpha.GetOrgAgentSettingsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgAgentSettings not implemented")
}
func (UnimplementedP3ApiServer) ListCallerIdsFromBucket(context.Context, *v0alpha.ListCallerIdsFromBucketReq) (*v0alpha.ListCallerIdsFromBucketRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCallerIdsFromBucket not implemented")
}
func (UnimplementedP3ApiServer) SaveLastCallResponse(context.Context, *v0alpha.SaveLastCallResponseReq) (*v0alpha.SaveLastCallResponseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLastCallResponse not implemented")
}
func (UnimplementedP3ApiServer) ListAgentCallLogsByCallSidAndType(context.Context, *v0alpha.ListAgentCallLogsByCallSidAndTypeReq) (*v0alpha.ListAgentCallLogsByCallSidAndTypeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentCallLogsByCallSidAndType not implemented")
}
func (UnimplementedP3ApiServer) ListAgentCallResponseValues(context.Context, *v0alpha.ListAgentCallResponseValuesReq) (*v0alpha.ListAgentCallResponseValuesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentCallResponseValues not implemented")
}
func (UnimplementedP3ApiServer) GetContactSchemaByContactGroup(context.Context, *v0alpha.GetContactSchemaByContactGroupReq) (*v0alpha.ContactSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactSchemaByContactGroup not implemented")
}
func (UnimplementedP3ApiServer) ListContactGroupDetailsByClientSid(context.Context, *v0alpha.ListContactGroupDetailsByClientSidReq) (*v0alpha.ListContactGroupDetailsByClientSidRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContactGroupDetailsByClientSid not implemented")
}
func (UnimplementedP3ApiServer) GetContactGroupDetails(context.Context, *v0alpha.GetContactGroupReq) (*v0alpha.ContactGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactGroupDetails not implemented")
}
func (UnimplementedP3ApiServer) GetContactGroupSize(context.Context, *v0alpha.GetContactGroupReq) (*v0alpha.GetContactGroupSizeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactGroupSize not implemented")
}
func (UnimplementedP3ApiServer) CreateContactFieldDescription(context.Context, *v0alpha.CreateContactFieldDescriptionReq) (*v0alpha.CreateContactFieldDescriptionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContactFieldDescription not implemented")
}
func (UnimplementedP3ApiServer) DeleteContactFieldDescription(context.Context, *v0alpha.DeleteContactFieldDescriptionReq) (*v0alpha.DeleteContactFieldDescriptionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContactFieldDescription not implemented")
}
func (UnimplementedP3ApiServer) ListContactFieldDescriptions(context.Context, *v0alpha.ListContactFieldDescriptionsReq) (*v0alpha.ListContactFieldDescriptionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContactFieldDescriptions not implemented")
}
func (UnimplementedP3ApiServer) ListContactFieldDescriptionsByCGSid(context.Context, *v0alpha.ListContactFieldDescriptionsByCGSidReq) (*v0alpha.ListContactFieldDescriptionsByCGSidRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContactFieldDescriptionsByCGSid not implemented")
}
func (UnimplementedP3ApiServer) ListContactImportTemplates(context.Context, *v0alpha.ListContactImportTemplatesReq) (*v0alpha.ListContactImportTemplatesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContactImportTemplates not implemented")
}
func (UnimplementedP3ApiServer) UpdatePreviewRecordToFinished(context.Context, *v0alpha.UpdatePreviewRecordToFinishedReq) (*v0alpha.UpdatePreviewRecordToFinishedRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePreviewRecordToFinished not implemented")
}
func (UnimplementedP3ApiServer) UpdateAgentHuntGroup(context.Context, *v0alpha.UpdateAgentHuntGroupReq) (*v0alpha.UpdateAgentHuntGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentHuntGroup not implemented")
}
func (UnimplementedP3ApiServer) MultiAgentHuntGroupAssignment(context.Context, *v0alpha.MultiAgentHuntGroupAssignmentReq) (*v0alpha.MultiAgentHuntGroupAssignmentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiAgentHuntGroupAssignment not implemented")
}
func (UnimplementedP3ApiServer) GetAgentProfile(context.Context, *v0alpha.GetAgentProfileReq) (*v0alpha.AgentProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentProfile not implemented")
}
func (UnimplementedP3ApiServer) RecalculateBilling(context.Context, *v0alpha.RecalculateBillingReq) (*v0alpha.RecalculateBillingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecalculateBilling not implemented")
}
func (UnimplementedP3ApiServer) ListOutboundBroadcastTemplateData(context.Context, *v0alpha.ListOutboundBroadcastTemplateDataReq) (*v0alpha.ListOutboundBroadcastTemplateDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOutboundBroadcastTemplateData not implemented")
}
func (UnimplementedP3ApiServer) MultiAgentSkillAssignment(context.Context, *v0alpha.MultiAgentSkillAssignmentReq) (*v0alpha.MultiAgentSkillAssignmentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiAgentSkillAssignment not implemented")
}
func (UnimplementedP3ApiServer) MultiAgentSkillUnassignment(context.Context, *v0alpha.MultiAgentSkillUnassignmentReq) (*v0alpha.MultiAgentSkillUnassignmentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiAgentSkillUnassignment not implemented")
}
func (UnimplementedP3ApiServer) ListMAMAgentHuntGroupsByClientSid(context.Context, *v0alpha.ListMAMAgentHuntGroupsByClientSidReq) (*v0alpha.ListMAMAgentHuntGroupsByClientSidRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMAMAgentHuntGroupsByClientSid not implemented")
}
func (UnimplementedP3ApiServer) ListTtsVoices(context.Context, *v0alpha.ListTtsVoicesReq) (*v0alpha.ListTtsVoicesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTtsVoices not implemented")
}
func (UnimplementedP3ApiServer) CreateTtsVoice(context.Context, *v0alpha.CreateTtsVoiceReq) (*v0alpha.CreateTtsVoiceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTtsVoice not implemented")
}
func (UnimplementedP3ApiServer) DeleteTtsVoice(context.Context, *v0alpha.DeleteTtsVoiceReq) (*v0alpha.DeleteTtsVoiceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTtsVoice not implemented")
}
func (UnimplementedP3ApiServer) ListCustomDataKeys(context.Context, *v0alpha.ListCustomDataKeysReq) (*v0alpha.ListCustomDataKeysRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomDataKeys not implemented")
}
func (UnimplementedP3ApiServer) CreateCustomDataKey(context.Context, *v0alpha.CreateCustomDataKeyReq) (*v0alpha.CreateCustomDataKeyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomDataKey not implemented")
}
func (UnimplementedP3ApiServer) DeleteCustomDataKey(context.Context, *v0alpha.DeleteCustomDataKeyReq) (*v0alpha.DeleteCustomDataKeyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomDataKey not implemented")
}
func (UnimplementedP3ApiServer) UpdateCustomDataKey(context.Context, *v0alpha.UpdateCustomDataKeyReq) (*v0alpha.UpdateCustomDataKeyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomDataKey not implemented")
}
func (UnimplementedP3ApiServer) GetActivityLogHistories(*v0alpha.GetActivityLogHistoryReq, grpc.ServerStreamingServer[v0alpha.GetActivityLogHistoryRes]) error {
	return status.Errorf(codes.Unimplemented, "method GetActivityLogHistories not implemented")
}
func (UnimplementedP3ApiServer) ListTableTemplateProperties(context.Context, *v0alpha.ListTableTemplatePropertiesReq) (*v0alpha.ListTableTemplatePropertiesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTableTemplateProperties not implemented")
}
func (UnimplementedP3ApiServer) ListAgentSkillsFilters(context.Context, *v0alpha.ListAgentSkillsFiltersReq) (*v0alpha.ListAgentSkillsFiltersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentSkillsFilters not implemented")
}
func (UnimplementedP3ApiServer) ListScheduleRules(context.Context, *v0alpha.ListScheduleRulesRequest) (*v0alpha.ListScheduleRulesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScheduleRules not implemented")
}
func (UnimplementedP3ApiServer) ListCustomReportFilters(context.Context, *v0alpha.ListCustomReportFiltersReq) (*v0alpha.ListCustomReportFiltersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomReportFilters not implemented")
}
func (UnimplementedP3ApiServer) ListSmsNumbers(context.Context, *v0alpha.ListSmsNumbersReq) (*v0alpha.ListSmsNumbersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSmsNumbers not implemented")
}
func (UnimplementedP3ApiServer) mustEmbedUnimplementedP3ApiServer() {}
func (UnimplementedP3ApiServer) testEmbeddedByValue()               {}

// UnsafeP3ApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to P3ApiServer will
// result in compilation errors.
type UnsafeP3ApiServer interface {
	mustEmbedUnimplementedP3ApiServer()
}

func RegisterP3ApiServer(s grpc.ServiceRegistrar, srv P3ApiServer) {
	// If the following call pancis, it indicates UnimplementedP3ApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&P3Api_ServiceDesc, srv)
}

func _P3Api_GetAgentHuntGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.GetAgentHuntGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetAgentHuntGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetAgentHuntGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetAgentHuntGroup(ctx, req.(*v0alpha.GetAgentHuntGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetAgentSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.GetAgentSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetAgentSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetAgentSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetAgentSession(ctx, req.(*v0alpha.GetAgentSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetAgentSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.GetAgentSkillsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetAgentSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetAgentSkills_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetAgentSkills(ctx, req.(*v0alpha.GetAgentSkillsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_CreateAgentSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.CreateAgentSkillReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).CreateAgentSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_CreateAgentSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).CreateAgentSkill(ctx, req.(*v0alpha.CreateAgentSkillReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_UpdateAgentSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.UpdateAgentSkillReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).UpdateAgentSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_UpdateAgentSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).UpdateAgentSkill(ctx, req.(*v0alpha.UpdateAgentSkillReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_DeleteAgentSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.DeleteAgentSkillReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).DeleteAgentSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_DeleteAgentSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).DeleteAgentSkill(ctx, req.(*v0alpha.DeleteAgentSkillReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListSkillsForCurrentAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListSkillsForCurrentAgentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListSkillsForCurrentAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListSkillsForCurrentAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListSkillsForCurrentAgent(ctx, req.(*v0alpha.ListSkillsForCurrentAgentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListSkillsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListSkills_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListSkills(ctx, req.(*v0alpha.ListSkillsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_UpdateAgentSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.UpdateAgentSkillsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).UpdateAgentSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_UpdateAgentSkills_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).UpdateAgentSkills(ctx, req.(*v0alpha.UpdateAgentSkillsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetCurrentAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.GetCurrentAgentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetCurrentAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetCurrentAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetCurrentAgent(ctx, req.(*v0alpha.GetCurrentAgentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetClientInfoData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.GetClientInfoDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetClientInfoData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetClientInfoData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetClientInfoData(ctx, req.(*v0alpha.GetClientInfoDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetClientInfoDisplayTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.GetClientInfoDisplayTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetClientInfoDisplayTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetClientInfoDisplayTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetClientInfoDisplayTemplate(ctx, req.(*v0alpha.GetClientInfoDisplayTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListAgentStatisticsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListAgentStatisticsDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListAgentStatisticsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListAgentStatisticsData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListAgentStatisticsData(ctx, req.(*v0alpha.ListAgentStatisticsDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListPBXExtensions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListPBXExtensionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListPBXExtensions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListPBXExtensions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListPBXExtensions(ctx, req.(*v0alpha.ListPBXExtensionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListAgentExtensions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListAgentExtensionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListAgentExtensions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListAgentExtensions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListAgentExtensions(ctx, req.(*v0alpha.ListAgentExtensionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListHuntGroupExtensions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListHuntGroupExtensionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListHuntGroupExtensions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListHuntGroupExtensions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListHuntGroupExtensions(ctx, req.(*v0alpha.ListHuntGroupExtensionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_CreateExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.CreateExtensionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).CreateExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_CreateExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).CreateExtension(ctx, req.(*v0alpha.CreateExtensionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_DeleteExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.DeleteExtensionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).DeleteExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_DeleteExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).DeleteExtension(ctx, req.(*v0alpha.DeleteExtensionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_UpdateExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.UpdateExtensionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).UpdateExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_UpdateExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).UpdateExtension(ctx, req.(*v0alpha.UpdateExtensionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_UpdatePBXExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.UpdatePBXExtensionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).UpdatePBXExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_UpdatePBXExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).UpdatePBXExtension(ctx, req.(*v0alpha.UpdatePBXExtensionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_CreateDNCLNumbers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.CreateDNCLNumbersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).CreateDNCLNumbers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_CreateDNCLNumbers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).CreateDNCLNumbers(ctx, req.(*v0alpha.CreateDNCLNumbersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetScriptOrResponses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.GetScriptOrResponsesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetScriptOrResponses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetScriptOrResponses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetScriptOrResponses(ctx, req.(*v0alpha.GetScriptOrResponsesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetHuntGroupAgentSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.GetHuntGroupAgentSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetHuntGroupAgentSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetHuntGroupAgentSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetHuntGroupAgentSettings(ctx, req.(*v0alpha.GetHuntGroupAgentSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListHuntGroupWebLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListHuntGroupWebLinksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListHuntGroupWebLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListHuntGroupWebLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListHuntGroupWebLinks(ctx, req.(*v0alpha.ListHuntGroupWebLinksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetHuntGroupPauseCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.GetHuntGroupPauseCodesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetHuntGroupPauseCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetHuntGroupPauseCodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetHuntGroupPauseCodes(ctx, req.(*v0alpha.GetHuntGroupPauseCodesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListAgentCallHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListAgentCallHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListAgentCallHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListAgentCallHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListAgentCallHistory(ctx, req.(*v0alpha.ListAgentCallHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListClientPhoneBookEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListClientPhoneBookEntriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListClientPhoneBookEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListClientPhoneBookEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListClientPhoneBookEntries(ctx, req.(*v0alpha.ListClientPhoneBookEntriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListHuntGroupPhoneBookEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListHuntGroupPhoneBookEntriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListHuntGroupPhoneBookEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListHuntGroupPhoneBookEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListHuntGroupPhoneBookEntries(ctx, req.(*v0alpha.ListHuntGroupPhoneBookEntriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_CreatePhoneBookEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.CreatePhoneBookEntryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).CreatePhoneBookEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_CreatePhoneBookEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).CreatePhoneBookEntry(ctx, req.(*v0alpha.CreatePhoneBookEntryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_UpdatePhoneBookEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.UpdatePhoneBookEntryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).UpdatePhoneBookEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_UpdatePhoneBookEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).UpdatePhoneBookEntry(ctx, req.(*v0alpha.UpdatePhoneBookEntryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_DeletePhoneBookEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.DeletePhoneBookEntryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).DeletePhoneBookEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_DeletePhoneBookEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).DeletePhoneBookEntry(ctx, req.(*v0alpha.DeletePhoneBookEntryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListPhoneBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListPhoneBooksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListPhoneBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListPhoneBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListPhoneBooks(ctx, req.(*v0alpha.ListPhoneBooksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListAgentTriggers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListAgentTriggersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListAgentTriggers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListAgentTriggers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListAgentTriggers(ctx, req.(*v0alpha.ListAgentTriggersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetCampaignCompletionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.GetCampaignCompletionStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetCampaignCompletionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetCampaignCompletionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetCampaignCompletionStatus(ctx, req.(*v0alpha.GetCampaignCompletionStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetLostPeerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.GetLostPeerInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetLostPeerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetLostPeerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetLostPeerInfo(ctx, req.(*v0alpha.GetLostPeerInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetDispositionKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.GetDispositionKeysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetDispositionKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetDispositionKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetDispositionKeys(ctx, req.(*v0alpha.GetDispositionKeysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetReadyAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.GetReadyAgentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetReadyAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetReadyAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetReadyAgents(ctx, req.(*v0alpha.GetReadyAgentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListAgentQueueAndOnHoldCallData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListAgentQueueAndOnHoldCallDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListAgentQueueAndOnHoldCallData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListAgentQueueAndOnHoldCallData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListAgentQueueAndOnHoldCallData(ctx, req.(*v0alpha.ListAgentQueueAndOnHoldCallDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_SaveAgentCallResponses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.SaveAgentCallResponsesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).SaveAgentCallResponses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_SaveAgentCallResponses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).SaveAgentCallResponses(ctx, req.(*v0alpha.SaveAgentCallResponsesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListAgentTransferOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListAgentTransferOptionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListAgentTransferOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListAgentTransferOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListAgentTransferOptions(ctx, req.(*v0alpha.ListAgentTransferOptionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_UpdateAgentCallResponseValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.UpdateAgentCallResponseValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).UpdateAgentCallResponseValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_UpdateAgentCallResponseValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).UpdateAgentCallResponseValue(ctx, req.(*v0alpha.UpdateAgentCallResponseValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetIntercomPeerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.GetIntercomPeerInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetIntercomPeerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetIntercomPeerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetIntercomPeerInfo(ctx, req.(*v0alpha.GetIntercomPeerInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListOrgResponseEvaluators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListOrgResponseEvaluatorsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListOrgResponseEvaluators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListOrgResponseEvaluators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListOrgResponseEvaluators(ctx, req.(*v0alpha.ListOrgResponseEvaluatorsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetQueueConfigurationOptionsArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.GetQueueConfigurationOptionsArrayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetQueueConfigurationOptionsArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetQueueConfigurationOptionsArray_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetQueueConfigurationOptionsArray(ctx, req.(*v0alpha.GetQueueConfigurationOptionsArrayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetConditionalDNCLRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.GetConditionalDNCLRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetConditionalDNCLRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetConditionalDNCLRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetConditionalDNCLRules(ctx, req.(*v0alpha.GetConditionalDNCLRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ManualDialStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ManualDialStartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ManualDialStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ManualDialStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ManualDialStart(ctx, req.(*v0alpha.ManualDialStartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetExtendedCallHistories_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v0alpha.ListExtendedCallHistoryReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(P3ApiServer).GetExtendedCallHistories(m, &grpc.GenericServerStream[v0alpha.ListExtendedCallHistoryReq, v0alpha.ListExtendedCallHistoryRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type P3Api_GetExtendedCallHistoriesServer = grpc.ServerStreamingServer[v0alpha.ListExtendedCallHistoryRes]

func _P3Api_ListWhiteListPhoneBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListWhiteListPhoneBooksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListWhiteListPhoneBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListWhiteListPhoneBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListWhiteListPhoneBooks(ctx, req.(*v0alpha.ListWhiteListPhoneBooksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_DownloadCallRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.DownloadCallRecordingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).DownloadCallRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_DownloadCallRecording_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).DownloadCallRecording(ctx, req.(*v0alpha.DownloadCallRecordingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_DownloadCallRecordings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.DownloadCallRecordingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).DownloadCallRecordings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_DownloadCallRecordings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).DownloadCallRecordings(ctx, req.(*v0alpha.DownloadCallRecordingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_PlacePreviewDialCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.PlacePreviewDialCallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).PlacePreviewDialCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_PlacePreviewDialCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).PlacePreviewDialCall(ctx, req.(*v0alpha.PlacePreviewDialCallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_CancelPreviewDialCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.CancelPreviewDialCallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).CancelPreviewDialCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_CancelPreviewDialCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).CancelPreviewDialCall(ctx, req.(*v0alpha.CancelPreviewDialCallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_UpdateTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.UpdateTaskStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).UpdateTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_UpdateTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).UpdateTaskStatus(ctx, req.(*v0alpha.UpdateTaskStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListCallbackRoutingAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListCallbackRoutingAgentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListCallbackRoutingAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListCallbackRoutingAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListCallbackRoutingAgents(ctx, req.(*v0alpha.ListCallbackRoutingAgentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListCallbackRoutingSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListCallbackRoutingSkillsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListCallbackRoutingSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListCallbackRoutingSkills_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListCallbackRoutingSkills(ctx, req.(*v0alpha.ListCallbackRoutingSkillsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_HandleRecordingDelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.HandleRecordingDelayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).HandleRecordingDelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_HandleRecordingDelay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).HandleRecordingDelay(ctx, req.(*v0alpha.HandleRecordingDelayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_UpdateAgentAssignedHuntGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.UpdateAgentAssignedHuntGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).UpdateAgentAssignedHuntGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_UpdateAgentAssignedHuntGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).UpdateAgentAssignedHuntGroup(ctx, req.(*v0alpha.UpdateAgentAssignedHuntGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetCallData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.GetCallDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetCallData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetCallData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetCallData(ctx, req.(*v0alpha.GetCallDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListHuntGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListHuntGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListHuntGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListHuntGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListHuntGroups(ctx, req.(*v0alpha.ListHuntGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListReassignmentHuntGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListReassignmentHuntGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListReassignmentHuntGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListReassignmentHuntGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListReassignmentHuntGroups(ctx, req.(*v0alpha.ListReassignmentHuntGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetOrgAgentSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.GetOrgAgentSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetOrgAgentSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetOrgAgentSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetOrgAgentSettings(ctx, req.(*v0alpha.GetOrgAgentSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListCallerIdsFromBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListCallerIdsFromBucketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListCallerIdsFromBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListCallerIdsFromBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListCallerIdsFromBucket(ctx, req.(*v0alpha.ListCallerIdsFromBucketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_SaveLastCallResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.SaveLastCallResponseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).SaveLastCallResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_SaveLastCallResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).SaveLastCallResponse(ctx, req.(*v0alpha.SaveLastCallResponseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListAgentCallLogsByCallSidAndType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListAgentCallLogsByCallSidAndTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListAgentCallLogsByCallSidAndType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListAgentCallLogsByCallSidAndType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListAgentCallLogsByCallSidAndType(ctx, req.(*v0alpha.ListAgentCallLogsByCallSidAndTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListAgentCallResponseValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListAgentCallResponseValuesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListAgentCallResponseValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListAgentCallResponseValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListAgentCallResponseValues(ctx, req.(*v0alpha.ListAgentCallResponseValuesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetContactSchemaByContactGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.GetContactSchemaByContactGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetContactSchemaByContactGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetContactSchemaByContactGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetContactSchemaByContactGroup(ctx, req.(*v0alpha.GetContactSchemaByContactGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListContactGroupDetailsByClientSid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListContactGroupDetailsByClientSidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListContactGroupDetailsByClientSid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListContactGroupDetailsByClientSid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListContactGroupDetailsByClientSid(ctx, req.(*v0alpha.ListContactGroupDetailsByClientSidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetContactGroupDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.GetContactGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetContactGroupDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetContactGroupDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetContactGroupDetails(ctx, req.(*v0alpha.GetContactGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetContactGroupSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.GetContactGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetContactGroupSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetContactGroupSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetContactGroupSize(ctx, req.(*v0alpha.GetContactGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_CreateContactFieldDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.CreateContactFieldDescriptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).CreateContactFieldDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_CreateContactFieldDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).CreateContactFieldDescription(ctx, req.(*v0alpha.CreateContactFieldDescriptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_DeleteContactFieldDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.DeleteContactFieldDescriptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).DeleteContactFieldDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_DeleteContactFieldDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).DeleteContactFieldDescription(ctx, req.(*v0alpha.DeleteContactFieldDescriptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListContactFieldDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListContactFieldDescriptionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListContactFieldDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListContactFieldDescriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListContactFieldDescriptions(ctx, req.(*v0alpha.ListContactFieldDescriptionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListContactFieldDescriptionsByCGSid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListContactFieldDescriptionsByCGSidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListContactFieldDescriptionsByCGSid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListContactFieldDescriptionsByCGSid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListContactFieldDescriptionsByCGSid(ctx, req.(*v0alpha.ListContactFieldDescriptionsByCGSidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListContactImportTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListContactImportTemplatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListContactImportTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListContactImportTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListContactImportTemplates(ctx, req.(*v0alpha.ListContactImportTemplatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_UpdatePreviewRecordToFinished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.UpdatePreviewRecordToFinishedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).UpdatePreviewRecordToFinished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_UpdatePreviewRecordToFinished_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).UpdatePreviewRecordToFinished(ctx, req.(*v0alpha.UpdatePreviewRecordToFinishedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_UpdateAgentHuntGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.UpdateAgentHuntGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).UpdateAgentHuntGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_UpdateAgentHuntGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).UpdateAgentHuntGroup(ctx, req.(*v0alpha.UpdateAgentHuntGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_MultiAgentHuntGroupAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.MultiAgentHuntGroupAssignmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).MultiAgentHuntGroupAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_MultiAgentHuntGroupAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).MultiAgentHuntGroupAssignment(ctx, req.(*v0alpha.MultiAgentHuntGroupAssignmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetAgentProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.GetAgentProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).GetAgentProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_GetAgentProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).GetAgentProfile(ctx, req.(*v0alpha.GetAgentProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_RecalculateBilling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.RecalculateBillingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).RecalculateBilling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_RecalculateBilling_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).RecalculateBilling(ctx, req.(*v0alpha.RecalculateBillingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListOutboundBroadcastTemplateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListOutboundBroadcastTemplateDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListOutboundBroadcastTemplateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListOutboundBroadcastTemplateData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListOutboundBroadcastTemplateData(ctx, req.(*v0alpha.ListOutboundBroadcastTemplateDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_MultiAgentSkillAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.MultiAgentSkillAssignmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).MultiAgentSkillAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_MultiAgentSkillAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).MultiAgentSkillAssignment(ctx, req.(*v0alpha.MultiAgentSkillAssignmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_MultiAgentSkillUnassignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.MultiAgentSkillUnassignmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).MultiAgentSkillUnassignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_MultiAgentSkillUnassignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).MultiAgentSkillUnassignment(ctx, req.(*v0alpha.MultiAgentSkillUnassignmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListMAMAgentHuntGroupsByClientSid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListMAMAgentHuntGroupsByClientSidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListMAMAgentHuntGroupsByClientSid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListMAMAgentHuntGroupsByClientSid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListMAMAgentHuntGroupsByClientSid(ctx, req.(*v0alpha.ListMAMAgentHuntGroupsByClientSidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListTtsVoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListTtsVoicesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListTtsVoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListTtsVoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListTtsVoices(ctx, req.(*v0alpha.ListTtsVoicesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_CreateTtsVoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.CreateTtsVoiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).CreateTtsVoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_CreateTtsVoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).CreateTtsVoice(ctx, req.(*v0alpha.CreateTtsVoiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_DeleteTtsVoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.DeleteTtsVoiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).DeleteTtsVoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_DeleteTtsVoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).DeleteTtsVoice(ctx, req.(*v0alpha.DeleteTtsVoiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListCustomDataKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListCustomDataKeysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListCustomDataKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListCustomDataKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListCustomDataKeys(ctx, req.(*v0alpha.ListCustomDataKeysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_CreateCustomDataKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.CreateCustomDataKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).CreateCustomDataKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_CreateCustomDataKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).CreateCustomDataKey(ctx, req.(*v0alpha.CreateCustomDataKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_DeleteCustomDataKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.DeleteCustomDataKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).DeleteCustomDataKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_DeleteCustomDataKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).DeleteCustomDataKey(ctx, req.(*v0alpha.DeleteCustomDataKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_UpdateCustomDataKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.UpdateCustomDataKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).UpdateCustomDataKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_UpdateCustomDataKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).UpdateCustomDataKey(ctx, req.(*v0alpha.UpdateCustomDataKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_GetActivityLogHistories_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v0alpha.GetActivityLogHistoryReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(P3ApiServer).GetActivityLogHistories(m, &grpc.GenericServerStream[v0alpha.GetActivityLogHistoryReq, v0alpha.GetActivityLogHistoryRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type P3Api_GetActivityLogHistoriesServer = grpc.ServerStreamingServer[v0alpha.GetActivityLogHistoryRes]

func _P3Api_ListTableTemplateProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListTableTemplatePropertiesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListTableTemplateProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListTableTemplateProperties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListTableTemplateProperties(ctx, req.(*v0alpha.ListTableTemplatePropertiesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListAgentSkillsFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListAgentSkillsFiltersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListAgentSkillsFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListAgentSkillsFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListAgentSkillsFilters(ctx, req.(*v0alpha.ListAgentSkillsFiltersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListScheduleRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListScheduleRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListScheduleRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListScheduleRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListScheduleRules(ctx, req.(*v0alpha.ListScheduleRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListCustomReportFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListCustomReportFiltersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListCustomReportFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListCustomReportFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListCustomReportFilters(ctx, req.(*v0alpha.ListCustomReportFiltersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _P3Api_ListSmsNumbers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListSmsNumbersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P3ApiServer).ListSmsNumbers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P3Api_ListSmsNumbers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P3ApiServer).ListSmsNumbers(ctx, req.(*v0alpha.ListSmsNumbersReq))
	}
	return interceptor(ctx, in, info, handler)
}

// P3Api_ServiceDesc is the grpc.ServiceDesc for P3Api service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var P3Api_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.p3api.P3Api",
	HandlerType: (*P3ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAgentHuntGroup",
			Handler:    _P3Api_GetAgentHuntGroup_Handler,
		},
		{
			MethodName: "GetAgentSession",
			Handler:    _P3Api_GetAgentSession_Handler,
		},
		{
			MethodName: "GetAgentSkills",
			Handler:    _P3Api_GetAgentSkills_Handler,
		},
		{
			MethodName: "CreateAgentSkill",
			Handler:    _P3Api_CreateAgentSkill_Handler,
		},
		{
			MethodName: "UpdateAgentSkill",
			Handler:    _P3Api_UpdateAgentSkill_Handler,
		},
		{
			MethodName: "DeleteAgentSkill",
			Handler:    _P3Api_DeleteAgentSkill_Handler,
		},
		{
			MethodName: "ListSkillsForCurrentAgent",
			Handler:    _P3Api_ListSkillsForCurrentAgent_Handler,
		},
		{
			MethodName: "ListSkills",
			Handler:    _P3Api_ListSkills_Handler,
		},
		{
			MethodName: "UpdateAgentSkills",
			Handler:    _P3Api_UpdateAgentSkills_Handler,
		},
		{
			MethodName: "GetCurrentAgent",
			Handler:    _P3Api_GetCurrentAgent_Handler,
		},
		{
			MethodName: "GetClientInfoData",
			Handler:    _P3Api_GetClientInfoData_Handler,
		},
		{
			MethodName: "GetClientInfoDisplayTemplate",
			Handler:    _P3Api_GetClientInfoDisplayTemplate_Handler,
		},
		{
			MethodName: "ListAgentStatisticsData",
			Handler:    _P3Api_ListAgentStatisticsData_Handler,
		},
		{
			MethodName: "ListPBXExtensions",
			Handler:    _P3Api_ListPBXExtensions_Handler,
		},
		{
			MethodName: "ListAgentExtensions",
			Handler:    _P3Api_ListAgentExtensions_Handler,
		},
		{
			MethodName: "ListHuntGroupExtensions",
			Handler:    _P3Api_ListHuntGroupExtensions_Handler,
		},
		{
			MethodName: "CreateExtension",
			Handler:    _P3Api_CreateExtension_Handler,
		},
		{
			MethodName: "DeleteExtension",
			Handler:    _P3Api_DeleteExtension_Handler,
		},
		{
			MethodName: "UpdateExtension",
			Handler:    _P3Api_UpdateExtension_Handler,
		},
		{
			MethodName: "UpdatePBXExtension",
			Handler:    _P3Api_UpdatePBXExtension_Handler,
		},
		{
			MethodName: "CreateDNCLNumbers",
			Handler:    _P3Api_CreateDNCLNumbers_Handler,
		},
		{
			MethodName: "GetScriptOrResponses",
			Handler:    _P3Api_GetScriptOrResponses_Handler,
		},
		{
			MethodName: "GetHuntGroupAgentSettings",
			Handler:    _P3Api_GetHuntGroupAgentSettings_Handler,
		},
		{
			MethodName: "ListHuntGroupWebLinks",
			Handler:    _P3Api_ListHuntGroupWebLinks_Handler,
		},
		{
			MethodName: "GetHuntGroupPauseCodes",
			Handler:    _P3Api_GetHuntGroupPauseCodes_Handler,
		},
		{
			MethodName: "ListAgentCallHistory",
			Handler:    _P3Api_ListAgentCallHistory_Handler,
		},
		{
			MethodName: "ListClientPhoneBookEntries",
			Handler:    _P3Api_ListClientPhoneBookEntries_Handler,
		},
		{
			MethodName: "ListHuntGroupPhoneBookEntries",
			Handler:    _P3Api_ListHuntGroupPhoneBookEntries_Handler,
		},
		{
			MethodName: "CreatePhoneBookEntry",
			Handler:    _P3Api_CreatePhoneBookEntry_Handler,
		},
		{
			MethodName: "UpdatePhoneBookEntry",
			Handler:    _P3Api_UpdatePhoneBookEntry_Handler,
		},
		{
			MethodName: "DeletePhoneBookEntry",
			Handler:    _P3Api_DeletePhoneBookEntry_Handler,
		},
		{
			MethodName: "ListPhoneBooks",
			Handler:    _P3Api_ListPhoneBooks_Handler,
		},
		{
			MethodName: "ListAgentTriggers",
			Handler:    _P3Api_ListAgentTriggers_Handler,
		},
		{
			MethodName: "GetCampaignCompletionStatus",
			Handler:    _P3Api_GetCampaignCompletionStatus_Handler,
		},
		{
			MethodName: "GetLostPeerInfo",
			Handler:    _P3Api_GetLostPeerInfo_Handler,
		},
		{
			MethodName: "GetDispositionKeys",
			Handler:    _P3Api_GetDispositionKeys_Handler,
		},
		{
			MethodName: "GetReadyAgents",
			Handler:    _P3Api_GetReadyAgents_Handler,
		},
		{
			MethodName: "ListAgentQueueAndOnHoldCallData",
			Handler:    _P3Api_ListAgentQueueAndOnHoldCallData_Handler,
		},
		{
			MethodName: "SaveAgentCallResponses",
			Handler:    _P3Api_SaveAgentCallResponses_Handler,
		},
		{
			MethodName: "ListAgentTransferOptions",
			Handler:    _P3Api_ListAgentTransferOptions_Handler,
		},
		{
			MethodName: "UpdateAgentCallResponseValue",
			Handler:    _P3Api_UpdateAgentCallResponseValue_Handler,
		},
		{
			MethodName: "GetIntercomPeerInfo",
			Handler:    _P3Api_GetIntercomPeerInfo_Handler,
		},
		{
			MethodName: "ListOrgResponseEvaluators",
			Handler:    _P3Api_ListOrgResponseEvaluators_Handler,
		},
		{
			MethodName: "GetQueueConfigurationOptionsArray",
			Handler:    _P3Api_GetQueueConfigurationOptionsArray_Handler,
		},
		{
			MethodName: "GetConditionalDNCLRules",
			Handler:    _P3Api_GetConditionalDNCLRules_Handler,
		},
		{
			MethodName: "ManualDialStart",
			Handler:    _P3Api_ManualDialStart_Handler,
		},
		{
			MethodName: "ListWhiteListPhoneBooks",
			Handler:    _P3Api_ListWhiteListPhoneBooks_Handler,
		},
		{
			MethodName: "DownloadCallRecording",
			Handler:    _P3Api_DownloadCallRecording_Handler,
		},
		{
			MethodName: "DownloadCallRecordings",
			Handler:    _P3Api_DownloadCallRecordings_Handler,
		},
		{
			MethodName: "PlacePreviewDialCall",
			Handler:    _P3Api_PlacePreviewDialCall_Handler,
		},
		{
			MethodName: "CancelPreviewDialCall",
			Handler:    _P3Api_CancelPreviewDialCall_Handler,
		},
		{
			MethodName: "UpdateTaskStatus",
			Handler:    _P3Api_UpdateTaskStatus_Handler,
		},
		{
			MethodName: "ListCallbackRoutingAgents",
			Handler:    _P3Api_ListCallbackRoutingAgents_Handler,
		},
		{
			MethodName: "ListCallbackRoutingSkills",
			Handler:    _P3Api_ListCallbackRoutingSkills_Handler,
		},
		{
			MethodName: "HandleRecordingDelay",
			Handler:    _P3Api_HandleRecordingDelay_Handler,
		},
		{
			MethodName: "UpdateAgentAssignedHuntGroup",
			Handler:    _P3Api_UpdateAgentAssignedHuntGroup_Handler,
		},
		{
			MethodName: "GetCallData",
			Handler:    _P3Api_GetCallData_Handler,
		},
		{
			MethodName: "ListHuntGroups",
			Handler:    _P3Api_ListHuntGroups_Handler,
		},
		{
			MethodName: "ListReassignmentHuntGroups",
			Handler:    _P3Api_ListReassignmentHuntGroups_Handler,
		},
		{
			MethodName: "GetOrgAgentSettings",
			Handler:    _P3Api_GetOrgAgentSettings_Handler,
		},
		{
			MethodName: "ListCallerIdsFromBucket",
			Handler:    _P3Api_ListCallerIdsFromBucket_Handler,
		},
		{
			MethodName: "SaveLastCallResponse",
			Handler:    _P3Api_SaveLastCallResponse_Handler,
		},
		{
			MethodName: "ListAgentCallLogsByCallSidAndType",
			Handler:    _P3Api_ListAgentCallLogsByCallSidAndType_Handler,
		},
		{
			MethodName: "ListAgentCallResponseValues",
			Handler:    _P3Api_ListAgentCallResponseValues_Handler,
		},
		{
			MethodName: "GetContactSchemaByContactGroup",
			Handler:    _P3Api_GetContactSchemaByContactGroup_Handler,
		},
		{
			MethodName: "ListContactGroupDetailsByClientSid",
			Handler:    _P3Api_ListContactGroupDetailsByClientSid_Handler,
		},
		{
			MethodName: "GetContactGroupDetails",
			Handler:    _P3Api_GetContactGroupDetails_Handler,
		},
		{
			MethodName: "GetContactGroupSize",
			Handler:    _P3Api_GetContactGroupSize_Handler,
		},
		{
			MethodName: "CreateContactFieldDescription",
			Handler:    _P3Api_CreateContactFieldDescription_Handler,
		},
		{
			MethodName: "DeleteContactFieldDescription",
			Handler:    _P3Api_DeleteContactFieldDescription_Handler,
		},
		{
			MethodName: "ListContactFieldDescriptions",
			Handler:    _P3Api_ListContactFieldDescriptions_Handler,
		},
		{
			MethodName: "ListContactFieldDescriptionsByCGSid",
			Handler:    _P3Api_ListContactFieldDescriptionsByCGSid_Handler,
		},
		{
			MethodName: "ListContactImportTemplates",
			Handler:    _P3Api_ListContactImportTemplates_Handler,
		},
		{
			MethodName: "UpdatePreviewRecordToFinished",
			Handler:    _P3Api_UpdatePreviewRecordToFinished_Handler,
		},
		{
			MethodName: "UpdateAgentHuntGroup",
			Handler:    _P3Api_UpdateAgentHuntGroup_Handler,
		},
		{
			MethodName: "MultiAgentHuntGroupAssignment",
			Handler:    _P3Api_MultiAgentHuntGroupAssignment_Handler,
		},
		{
			MethodName: "GetAgentProfile",
			Handler:    _P3Api_GetAgentProfile_Handler,
		},
		{
			MethodName: "RecalculateBilling",
			Handler:    _P3Api_RecalculateBilling_Handler,
		},
		{
			MethodName: "ListOutboundBroadcastTemplateData",
			Handler:    _P3Api_ListOutboundBroadcastTemplateData_Handler,
		},
		{
			MethodName: "MultiAgentSkillAssignment",
			Handler:    _P3Api_MultiAgentSkillAssignment_Handler,
		},
		{
			MethodName: "MultiAgentSkillUnassignment",
			Handler:    _P3Api_MultiAgentSkillUnassignment_Handler,
		},
		{
			MethodName: "ListMAMAgentHuntGroupsByClientSid",
			Handler:    _P3Api_ListMAMAgentHuntGroupsByClientSid_Handler,
		},
		{
			MethodName: "ListTtsVoices",
			Handler:    _P3Api_ListTtsVoices_Handler,
		},
		{
			MethodName: "CreateTtsVoice",
			Handler:    _P3Api_CreateTtsVoice_Handler,
		},
		{
			MethodName: "DeleteTtsVoice",
			Handler:    _P3Api_DeleteTtsVoice_Handler,
		},
		{
			MethodName: "ListCustomDataKeys",
			Handler:    _P3Api_ListCustomDataKeys_Handler,
		},
		{
			MethodName: "CreateCustomDataKey",
			Handler:    _P3Api_CreateCustomDataKey_Handler,
		},
		{
			MethodName: "DeleteCustomDataKey",
			Handler:    _P3Api_DeleteCustomDataKey_Handler,
		},
		{
			MethodName: "UpdateCustomDataKey",
			Handler:    _P3Api_UpdateCustomDataKey_Handler,
		},
		{
			MethodName: "ListTableTemplateProperties",
			Handler:    _P3Api_ListTableTemplateProperties_Handler,
		},
		{
			MethodName: "ListAgentSkillsFilters",
			Handler:    _P3Api_ListAgentSkillsFilters_Handler,
		},
		{
			MethodName: "ListScheduleRules",
			Handler:    _P3Api_ListScheduleRules_Handler,
		},
		{
			MethodName: "ListCustomReportFilters",
			Handler:    _P3Api_ListCustomReportFilters_Handler,
		},
		{
			MethodName: "ListSmsNumbers",
			Handler:    _P3Api_ListSmsNumbers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetExtendedCallHistories",
			Handler:       _P3Api_GetExtendedCallHistories_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetActivityLogHistories",
			Handler:       _P3Api_GetActivityLogHistories_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1alpha1/p3api/service.proto",
}
