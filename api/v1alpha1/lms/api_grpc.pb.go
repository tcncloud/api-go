// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1alpha1/lms/api.proto

package lms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LMS_DeleteFileTemplate_FullMethodName = "/api.v1alpha1.lms.LMS/DeleteFileTemplate"
	LMS_GetFileTemplate_FullMethodName    = "/api.v1alpha1.lms.LMS/GetFileTemplate"
	LMS_ListFileTemplates_FullMethodName  = "/api.v1alpha1.lms.LMS/ListFileTemplates"
	LMS_ParseFileTemplate_FullMethodName  = "/api.v1alpha1.lms.LMS/ParseFileTemplate"
	LMS_UpdateFileTemplate_FullMethodName = "/api.v1alpha1.lms.LMS/UpdateFileTemplate"
)

// LMSClient is the client API for LMS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LMSClient interface {
	DeleteFileTemplate(ctx context.Context, in *DeleteFileTemplateRequest, opts ...grpc.CallOption) (*DeleteFileTemplateResponse, error)
	GetFileTemplate(ctx context.Context, in *GetFileTemplateRequest, opts ...grpc.CallOption) (*GetFileTemplateResponse, error)
	ListFileTemplates(ctx context.Context, in *ListFileTemplatesRequest, opts ...grpc.CallOption) (*ListFileTemplatesResponse, error)
	ParseFileTemplate(ctx context.Context, in *ParseFileTemplateRequest, opts ...grpc.CallOption) (*ParseFileTemplateResult, error)
	UpdateFileTemplate(ctx context.Context, in *UpdateFileTemplateRequest, opts ...grpc.CallOption) (*UpdateFileTemplateResponse, error)
}

type lMSClient struct {
	cc grpc.ClientConnInterface
}

func NewLMSClient(cc grpc.ClientConnInterface) LMSClient {
	return &lMSClient{cc}
}

func (c *lMSClient) DeleteFileTemplate(ctx context.Context, in *DeleteFileTemplateRequest, opts ...grpc.CallOption) (*DeleteFileTemplateResponse, error) {
	out := new(DeleteFileTemplateResponse)
	err := c.cc.Invoke(ctx, LMS_DeleteFileTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lMSClient) GetFileTemplate(ctx context.Context, in *GetFileTemplateRequest, opts ...grpc.CallOption) (*GetFileTemplateResponse, error) {
	out := new(GetFileTemplateResponse)
	err := c.cc.Invoke(ctx, LMS_GetFileTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lMSClient) ListFileTemplates(ctx context.Context, in *ListFileTemplatesRequest, opts ...grpc.CallOption) (*ListFileTemplatesResponse, error) {
	out := new(ListFileTemplatesResponse)
	err := c.cc.Invoke(ctx, LMS_ListFileTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lMSClient) ParseFileTemplate(ctx context.Context, in *ParseFileTemplateRequest, opts ...grpc.CallOption) (*ParseFileTemplateResult, error) {
	out := new(ParseFileTemplateResult)
	err := c.cc.Invoke(ctx, LMS_ParseFileTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lMSClient) UpdateFileTemplate(ctx context.Context, in *UpdateFileTemplateRequest, opts ...grpc.CallOption) (*UpdateFileTemplateResponse, error) {
	out := new(UpdateFileTemplateResponse)
	err := c.cc.Invoke(ctx, LMS_UpdateFileTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LMSServer is the server API for LMS service.
// All implementations must embed UnimplementedLMSServer
// for forward compatibility
type LMSServer interface {
	DeleteFileTemplate(context.Context, *DeleteFileTemplateRequest) (*DeleteFileTemplateResponse, error)
	GetFileTemplate(context.Context, *GetFileTemplateRequest) (*GetFileTemplateResponse, error)
	ListFileTemplates(context.Context, *ListFileTemplatesRequest) (*ListFileTemplatesResponse, error)
	ParseFileTemplate(context.Context, *ParseFileTemplateRequest) (*ParseFileTemplateResult, error)
	UpdateFileTemplate(context.Context, *UpdateFileTemplateRequest) (*UpdateFileTemplateResponse, error)
	mustEmbedUnimplementedLMSServer()
}

// UnimplementedLMSServer must be embedded to have forward compatible implementations.
type UnimplementedLMSServer struct {
}

func (UnimplementedLMSServer) DeleteFileTemplate(context.Context, *DeleteFileTemplateRequest) (*DeleteFileTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFileTemplate not implemented")
}
func (UnimplementedLMSServer) GetFileTemplate(context.Context, *GetFileTemplateRequest) (*GetFileTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileTemplate not implemented")
}
func (UnimplementedLMSServer) ListFileTemplates(context.Context, *ListFileTemplatesRequest) (*ListFileTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFileTemplates not implemented")
}
func (UnimplementedLMSServer) ParseFileTemplate(context.Context, *ParseFileTemplateRequest) (*ParseFileTemplateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseFileTemplate not implemented")
}
func (UnimplementedLMSServer) UpdateFileTemplate(context.Context, *UpdateFileTemplateRequest) (*UpdateFileTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFileTemplate not implemented")
}
func (UnimplementedLMSServer) mustEmbedUnimplementedLMSServer() {}

// UnsafeLMSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LMSServer will
// result in compilation errors.
type UnsafeLMSServer interface {
	mustEmbedUnimplementedLMSServer()
}

func RegisterLMSServer(s grpc.ServiceRegistrar, srv LMSServer) {
	s.RegisterService(&LMS_ServiceDesc, srv)
}

func _LMS_DeleteFileTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LMSServer).DeleteFileTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LMS_DeleteFileTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LMSServer).DeleteFileTemplate(ctx, req.(*DeleteFileTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LMS_GetFileTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LMSServer).GetFileTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LMS_GetFileTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LMSServer).GetFileTemplate(ctx, req.(*GetFileTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LMS_ListFileTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFileTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LMSServer).ListFileTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LMS_ListFileTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LMSServer).ListFileTemplates(ctx, req.(*ListFileTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LMS_ParseFileTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseFileTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LMSServer).ParseFileTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LMS_ParseFileTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LMSServer).ParseFileTemplate(ctx, req.(*ParseFileTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LMS_UpdateFileTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LMSServer).UpdateFileTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LMS_UpdateFileTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LMSServer).UpdateFileTemplate(ctx, req.(*UpdateFileTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LMS_ServiceDesc is the grpc.ServiceDesc for LMS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LMS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.lms.LMS",
	HandlerType: (*LMSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteFileTemplate",
			Handler:    _LMS_DeleteFileTemplate_Handler,
		},
		{
			MethodName: "GetFileTemplate",
			Handler:    _LMS_GetFileTemplate_Handler,
		},
		{
			MethodName: "ListFileTemplates",
			Handler:    _LMS_ListFileTemplates_Handler,
		},
		{
			MethodName: "ParseFileTemplate",
			Handler:    _LMS_ParseFileTemplate_Handler,
		},
		{
			MethodName: "UpdateFileTemplate",
			Handler:    _LMS_UpdateFileTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1alpha1/lms/api.proto",
}
