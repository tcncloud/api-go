// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1alpha1/lms/api.proto

package lmsconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	lms "github.com/tcncloud/api-go/api/v1alpha1/lms"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// LMSName is the fully-qualified name of the LMS service.
	LMSName = "api.v1alpha1.lms.LMS"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LMSDeleteFileTemplateProcedure is the fully-qualified name of the LMS's DeleteFileTemplate RPC.
	LMSDeleteFileTemplateProcedure = "/api.v1alpha1.lms.LMS/DeleteFileTemplate"
	// LMSGetFileTemplateProcedure is the fully-qualified name of the LMS's GetFileTemplate RPC.
	LMSGetFileTemplateProcedure = "/api.v1alpha1.lms.LMS/GetFileTemplate"
	// LMSListFileTemplatesProcedure is the fully-qualified name of the LMS's ListFileTemplates RPC.
	LMSListFileTemplatesProcedure = "/api.v1alpha1.lms.LMS/ListFileTemplates"
	// LMSParseFileTemplateProcedure is the fully-qualified name of the LMS's ParseFileTemplate RPC.
	LMSParseFileTemplateProcedure = "/api.v1alpha1.lms.LMS/ParseFileTemplate"
	// LMSUpdateFileTemplateProcedure is the fully-qualified name of the LMS's UpdateFileTemplate RPC.
	LMSUpdateFileTemplateProcedure = "/api.v1alpha1.lms.LMS/UpdateFileTemplate"
)

// LMSClient is a client for the api.v1alpha1.lms.LMS service.
type LMSClient interface {
	DeleteFileTemplate(context.Context, *connect_go.Request[lms.DeleteFileTemplateRequest]) (*connect_go.Response[lms.DeleteFileTemplateResponse], error)
	GetFileTemplate(context.Context, *connect_go.Request[lms.GetFileTemplateRequest]) (*connect_go.Response[lms.GetFileTemplateResponse], error)
	ListFileTemplates(context.Context, *connect_go.Request[lms.ListFileTemplatesRequest]) (*connect_go.Response[lms.ListFileTemplatesResponse], error)
	ParseFileTemplate(context.Context, *connect_go.Request[lms.ParseFileTemplateRequest]) (*connect_go.Response[lms.ParseFileTemplateResult], error)
	UpdateFileTemplate(context.Context, *connect_go.Request[lms.UpdateFileTemplateRequest]) (*connect_go.Response[lms.UpdateFileTemplateResponse], error)
}

// NewLMSClient constructs a client for the api.v1alpha1.lms.LMS service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLMSClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) LMSClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &lMSClient{
		deleteFileTemplate: connect_go.NewClient[lms.DeleteFileTemplateRequest, lms.DeleteFileTemplateResponse](
			httpClient,
			baseURL+LMSDeleteFileTemplateProcedure,
			opts...,
		),
		getFileTemplate: connect_go.NewClient[lms.GetFileTemplateRequest, lms.GetFileTemplateResponse](
			httpClient,
			baseURL+LMSGetFileTemplateProcedure,
			opts...,
		),
		listFileTemplates: connect_go.NewClient[lms.ListFileTemplatesRequest, lms.ListFileTemplatesResponse](
			httpClient,
			baseURL+LMSListFileTemplatesProcedure,
			opts...,
		),
		parseFileTemplate: connect_go.NewClient[lms.ParseFileTemplateRequest, lms.ParseFileTemplateResult](
			httpClient,
			baseURL+LMSParseFileTemplateProcedure,
			opts...,
		),
		updateFileTemplate: connect_go.NewClient[lms.UpdateFileTemplateRequest, lms.UpdateFileTemplateResponse](
			httpClient,
			baseURL+LMSUpdateFileTemplateProcedure,
			opts...,
		),
	}
}

// lMSClient implements LMSClient.
type lMSClient struct {
	deleteFileTemplate *connect_go.Client[lms.DeleteFileTemplateRequest, lms.DeleteFileTemplateResponse]
	getFileTemplate    *connect_go.Client[lms.GetFileTemplateRequest, lms.GetFileTemplateResponse]
	listFileTemplates  *connect_go.Client[lms.ListFileTemplatesRequest, lms.ListFileTemplatesResponse]
	parseFileTemplate  *connect_go.Client[lms.ParseFileTemplateRequest, lms.ParseFileTemplateResult]
	updateFileTemplate *connect_go.Client[lms.UpdateFileTemplateRequest, lms.UpdateFileTemplateResponse]
}

// DeleteFileTemplate calls api.v1alpha1.lms.LMS.DeleteFileTemplate.
func (c *lMSClient) DeleteFileTemplate(ctx context.Context, req *connect_go.Request[lms.DeleteFileTemplateRequest]) (*connect_go.Response[lms.DeleteFileTemplateResponse], error) {
	return c.deleteFileTemplate.CallUnary(ctx, req)
}

// GetFileTemplate calls api.v1alpha1.lms.LMS.GetFileTemplate.
func (c *lMSClient) GetFileTemplate(ctx context.Context, req *connect_go.Request[lms.GetFileTemplateRequest]) (*connect_go.Response[lms.GetFileTemplateResponse], error) {
	return c.getFileTemplate.CallUnary(ctx, req)
}

// ListFileTemplates calls api.v1alpha1.lms.LMS.ListFileTemplates.
func (c *lMSClient) ListFileTemplates(ctx context.Context, req *connect_go.Request[lms.ListFileTemplatesRequest]) (*connect_go.Response[lms.ListFileTemplatesResponse], error) {
	return c.listFileTemplates.CallUnary(ctx, req)
}

// ParseFileTemplate calls api.v1alpha1.lms.LMS.ParseFileTemplate.
func (c *lMSClient) ParseFileTemplate(ctx context.Context, req *connect_go.Request[lms.ParseFileTemplateRequest]) (*connect_go.Response[lms.ParseFileTemplateResult], error) {
	return c.parseFileTemplate.CallUnary(ctx, req)
}

// UpdateFileTemplate calls api.v1alpha1.lms.LMS.UpdateFileTemplate.
func (c *lMSClient) UpdateFileTemplate(ctx context.Context, req *connect_go.Request[lms.UpdateFileTemplateRequest]) (*connect_go.Response[lms.UpdateFileTemplateResponse], error) {
	return c.updateFileTemplate.CallUnary(ctx, req)
}

// LMSHandler is an implementation of the api.v1alpha1.lms.LMS service.
type LMSHandler interface {
	DeleteFileTemplate(context.Context, *connect_go.Request[lms.DeleteFileTemplateRequest]) (*connect_go.Response[lms.DeleteFileTemplateResponse], error)
	GetFileTemplate(context.Context, *connect_go.Request[lms.GetFileTemplateRequest]) (*connect_go.Response[lms.GetFileTemplateResponse], error)
	ListFileTemplates(context.Context, *connect_go.Request[lms.ListFileTemplatesRequest]) (*connect_go.Response[lms.ListFileTemplatesResponse], error)
	ParseFileTemplate(context.Context, *connect_go.Request[lms.ParseFileTemplateRequest]) (*connect_go.Response[lms.ParseFileTemplateResult], error)
	UpdateFileTemplate(context.Context, *connect_go.Request[lms.UpdateFileTemplateRequest]) (*connect_go.Response[lms.UpdateFileTemplateResponse], error)
}

// NewLMSHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLMSHandler(svc LMSHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	lMSDeleteFileTemplateHandler := connect_go.NewUnaryHandler(
		LMSDeleteFileTemplateProcedure,
		svc.DeleteFileTemplate,
		opts...,
	)
	lMSGetFileTemplateHandler := connect_go.NewUnaryHandler(
		LMSGetFileTemplateProcedure,
		svc.GetFileTemplate,
		opts...,
	)
	lMSListFileTemplatesHandler := connect_go.NewUnaryHandler(
		LMSListFileTemplatesProcedure,
		svc.ListFileTemplates,
		opts...,
	)
	lMSParseFileTemplateHandler := connect_go.NewUnaryHandler(
		LMSParseFileTemplateProcedure,
		svc.ParseFileTemplate,
		opts...,
	)
	lMSUpdateFileTemplateHandler := connect_go.NewUnaryHandler(
		LMSUpdateFileTemplateProcedure,
		svc.UpdateFileTemplate,
		opts...,
	)
	return "/api.v1alpha1.lms.LMS/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LMSDeleteFileTemplateProcedure:
			lMSDeleteFileTemplateHandler.ServeHTTP(w, r)
		case LMSGetFileTemplateProcedure:
			lMSGetFileTemplateHandler.ServeHTTP(w, r)
		case LMSListFileTemplatesProcedure:
			lMSListFileTemplatesHandler.ServeHTTP(w, r)
		case LMSParseFileTemplateProcedure:
			lMSParseFileTemplateHandler.ServeHTTP(w, r)
		case LMSUpdateFileTemplateProcedure:
			lMSUpdateFileTemplateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLMSHandler returns CodeUnimplemented from all methods.
type UnimplementedLMSHandler struct{}

func (UnimplementedLMSHandler) DeleteFileTemplate(context.Context, *connect_go.Request[lms.DeleteFileTemplateRequest]) (*connect_go.Response[lms.DeleteFileTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.lms.LMS.DeleteFileTemplate is not implemented"))
}

func (UnimplementedLMSHandler) GetFileTemplate(context.Context, *connect_go.Request[lms.GetFileTemplateRequest]) (*connect_go.Response[lms.GetFileTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.lms.LMS.GetFileTemplate is not implemented"))
}

func (UnimplementedLMSHandler) ListFileTemplates(context.Context, *connect_go.Request[lms.ListFileTemplatesRequest]) (*connect_go.Response[lms.ListFileTemplatesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.lms.LMS.ListFileTemplates is not implemented"))
}

func (UnimplementedLMSHandler) ParseFileTemplate(context.Context, *connect_go.Request[lms.ParseFileTemplateRequest]) (*connect_go.Response[lms.ParseFileTemplateResult], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.lms.LMS.ParseFileTemplate is not implemented"))
}

func (UnimplementedLMSHandler) UpdateFileTemplate(context.Context, *connect_go.Request[lms.UpdateFileTemplateRequest]) (*connect_go.Response[lms.UpdateFileTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.lms.LMS.UpdateFileTemplate is not implemented"))
}
