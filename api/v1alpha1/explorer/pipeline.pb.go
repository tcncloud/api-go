// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: api/v1alpha1/explorer/pipeline.proto

package explorer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum for Column Format Type
type OperationType int32

const (
	// Unspecified
	OperationType_OPERATION_TYPE_UNSPECIFIED OperationType = 0
	// Date format type
	OperationType_OPERATION_TYPE_DATE OperationType = 1
	// Prefix format type
	OperationType_OPERATION_TYPE_PREFIX OperationType = 2
	// Suffix format type
	OperationType_OPERATION_TYPE_SUFFIX OperationType = 3
	// Duration format type
	OperationType_OPERATION_TYPE_DURATION OperationType = 4
	// Add operation
	OperationType_OPERATION_TYPE_ADD OperationType = 5
	// Subract operation
	OperationType_OPERATION_TYPE_SUBTRACT OperationType = 6
	// Multiply operation
	OperationType_OPERATION_TYPE_MULTIPLY OperationType = 7
	// Divide operation
	OperationType_OPERATION_TYPE_DIVIDE OperationType = 8
	// Format number operation
	OperationType_OPERATION_TYPE_FORMAT_NUMBER OperationType = 9
	// Precision operation
	OperationType_OPERATION_TYPE_PRECISION OperationType = 10
	// PAD operation
	OperationType_OPERATION_TYPE_PAD OperationType = 11
)

// Enum value maps for OperationType.
var (
	OperationType_name = map[int32]string{
		0:  "OPERATION_TYPE_UNSPECIFIED",
		1:  "OPERATION_TYPE_DATE",
		2:  "OPERATION_TYPE_PREFIX",
		3:  "OPERATION_TYPE_SUFFIX",
		4:  "OPERATION_TYPE_DURATION",
		5:  "OPERATION_TYPE_ADD",
		6:  "OPERATION_TYPE_SUBTRACT",
		7:  "OPERATION_TYPE_MULTIPLY",
		8:  "OPERATION_TYPE_DIVIDE",
		9:  "OPERATION_TYPE_FORMAT_NUMBER",
		10: "OPERATION_TYPE_PRECISION",
		11: "OPERATION_TYPE_PAD",
	}
	OperationType_value = map[string]int32{
		"OPERATION_TYPE_UNSPECIFIED":   0,
		"OPERATION_TYPE_DATE":          1,
		"OPERATION_TYPE_PREFIX":        2,
		"OPERATION_TYPE_SUFFIX":        3,
		"OPERATION_TYPE_DURATION":      4,
		"OPERATION_TYPE_ADD":           5,
		"OPERATION_TYPE_SUBTRACT":      6,
		"OPERATION_TYPE_MULTIPLY":      7,
		"OPERATION_TYPE_DIVIDE":        8,
		"OPERATION_TYPE_FORMAT_NUMBER": 9,
		"OPERATION_TYPE_PRECISION":     10,
		"OPERATION_TYPE_PAD":           11,
	}
)

func (x OperationType) Enum() *OperationType {
	p := new(OperationType)
	*p = x
	return p
}

func (x OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1alpha1_explorer_pipeline_proto_enumTypes[0].Descriptor()
}

func (OperationType) Type() protoreflect.EnumType {
	return &file_api_v1alpha1_explorer_pipeline_proto_enumTypes[0]
}

func (x OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationType.Descriptor instead.
func (OperationType) EnumDescriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{0}
}

// Enum for Column Summary Type
type ColumnSummaryType int32

const (
	// Unspecified
	ColumnSummaryType_COLUMN_SUMMARY_TYPE_UNSPECIFIED ColumnSummaryType = 0
	// Sumamry type Average
	ColumnSummaryType_COLUMN_SUMMARY_TYPE_AVG ColumnSummaryType = 1
	// Summary type Summation
	ColumnSummaryType_COLUMN_SUMMARY_TYPE_SUM ColumnSummaryType = 2
	// Summary type Minimum
	ColumnSummaryType_COLUMN_SUMMARY_TYPE_MIN ColumnSummaryType = 3
	// Summary type Maximum
	ColumnSummaryType_COLUMN_SUMMARY_TYPE_MAX ColumnSummaryType = 4
)

// Enum value maps for ColumnSummaryType.
var (
	ColumnSummaryType_name = map[int32]string{
		0: "COLUMN_SUMMARY_TYPE_UNSPECIFIED",
		1: "COLUMN_SUMMARY_TYPE_AVG",
		2: "COLUMN_SUMMARY_TYPE_SUM",
		3: "COLUMN_SUMMARY_TYPE_MIN",
		4: "COLUMN_SUMMARY_TYPE_MAX",
	}
	ColumnSummaryType_value = map[string]int32{
		"COLUMN_SUMMARY_TYPE_UNSPECIFIED": 0,
		"COLUMN_SUMMARY_TYPE_AVG":         1,
		"COLUMN_SUMMARY_TYPE_SUM":         2,
		"COLUMN_SUMMARY_TYPE_MIN":         3,
		"COLUMN_SUMMARY_TYPE_MAX":         4,
	}
)

func (x ColumnSummaryType) Enum() *ColumnSummaryType {
	p := new(ColumnSummaryType)
	*p = x
	return p
}

func (x ColumnSummaryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnSummaryType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1alpha1_explorer_pipeline_proto_enumTypes[1].Descriptor()
}

func (ColumnSummaryType) Type() protoreflect.EnumType {
	return &file_api_v1alpha1_explorer_pipeline_proto_enumTypes[1]
}

func (x ColumnSummaryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColumnSummaryType.Descriptor instead.
func (ColumnSummaryType) EnumDescriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{1}
}

// Pipeline contains a set of nodes
type Pipeline struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Pipeline nodes
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// Format query returns a query to format the data in post processing
	FormatQuery   *FormatQuery `protobuf:"bytes,2,opt,name=format_query,json=formatQuery,proto3" json:"format_query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pipeline) Reset() {
	*x = Pipeline{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pipeline) ProtoMessage() {}

func (x *Pipeline) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pipeline.ProtoReflect.Descriptor instead.
func (*Pipeline) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{0}
}

func (x *Pipeline) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Pipeline) GetFormatQuery() *FormatQuery {
	if x != nil {
		return x.FormatQuery
	}
	return nil
}

// Node describes the type of operations of a pipeline section
type Node struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Node id
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// from | filter | derive | group | join | select | aggregate | take
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Node title
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// Input ids of other nodes
	InputIds []string `protobuf:"bytes,4,rep,name=input_ids,json=inputIds,proto3" json:"input_ids,omitempty"`
	// Output ids of the node
	OutputIds []string `protobuf:"bytes,5,rep,name=output_ids,json=outputIds,proto3" json:"output_ids,omitempty"`
	// Node body
	//
	// Types that are valid to be assigned to Body:
	//
	//	*Node_FromNode
	//	*Node_FilterNode
	//	*Node_DeriveNode
	//	*Node_GroupNode
	//	*Node_JoinNode
	//	*Node_SelectNode
	//	*Node_AggregateNode
	//	*Node_TakeNode
	//	*Node_JsonNode
	//	*Node_MapNode
	//	*Node_ReplaceNode
	//	*Node_SortNode
	//	*Node_StringManipulationNode
	//	*Node_TransposeNode
	Body          isNode_Body `protobuf_oneof:"body"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{1}
}

func (x *Node) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Node) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Node) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Node) GetInputIds() []string {
	if x != nil {
		return x.InputIds
	}
	return nil
}

func (x *Node) GetOutputIds() []string {
	if x != nil {
		return x.OutputIds
	}
	return nil
}

func (x *Node) GetBody() isNode_Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Node) GetFromNode() *FromNode {
	if x != nil {
		if x, ok := x.Body.(*Node_FromNode); ok {
			return x.FromNode
		}
	}
	return nil
}

func (x *Node) GetFilterNode() *FilterNode {
	if x != nil {
		if x, ok := x.Body.(*Node_FilterNode); ok {
			return x.FilterNode
		}
	}
	return nil
}

func (x *Node) GetDeriveNode() *DeriveNode {
	if x != nil {
		if x, ok := x.Body.(*Node_DeriveNode); ok {
			return x.DeriveNode
		}
	}
	return nil
}

func (x *Node) GetGroupNode() *GroupNode {
	if x != nil {
		if x, ok := x.Body.(*Node_GroupNode); ok {
			return x.GroupNode
		}
	}
	return nil
}

func (x *Node) GetJoinNode() *JoinNode {
	if x != nil {
		if x, ok := x.Body.(*Node_JoinNode); ok {
			return x.JoinNode
		}
	}
	return nil
}

func (x *Node) GetSelectNode() *SelectNode {
	if x != nil {
		if x, ok := x.Body.(*Node_SelectNode); ok {
			return x.SelectNode
		}
	}
	return nil
}

func (x *Node) GetAggregateNode() *AggregateNode {
	if x != nil {
		if x, ok := x.Body.(*Node_AggregateNode); ok {
			return x.AggregateNode
		}
	}
	return nil
}

func (x *Node) GetTakeNode() *TakeNode {
	if x != nil {
		if x, ok := x.Body.(*Node_TakeNode); ok {
			return x.TakeNode
		}
	}
	return nil
}

func (x *Node) GetJsonNode() *JsonNode {
	if x != nil {
		if x, ok := x.Body.(*Node_JsonNode); ok {
			return x.JsonNode
		}
	}
	return nil
}

func (x *Node) GetMapNode() *MapNode {
	if x != nil {
		if x, ok := x.Body.(*Node_MapNode); ok {
			return x.MapNode
		}
	}
	return nil
}

func (x *Node) GetReplaceNode() *ReplaceNode {
	if x != nil {
		if x, ok := x.Body.(*Node_ReplaceNode); ok {
			return x.ReplaceNode
		}
	}
	return nil
}

func (x *Node) GetSortNode() *SortNode {
	if x != nil {
		if x, ok := x.Body.(*Node_SortNode); ok {
			return x.SortNode
		}
	}
	return nil
}

func (x *Node) GetStringManipulationNode() *StringManipulationNode {
	if x != nil {
		if x, ok := x.Body.(*Node_StringManipulationNode); ok {
			return x.StringManipulationNode
		}
	}
	return nil
}

func (x *Node) GetTransposeNode() *TransposeNode {
	if x != nil {
		if x, ok := x.Body.(*Node_TransposeNode); ok {
			return x.TransposeNode
		}
	}
	return nil
}

type isNode_Body interface {
	isNode_Body()
}

type Node_FromNode struct {
	// From node
	FromNode *FromNode `protobuf:"bytes,6,opt,name=from_node,json=fromNode,proto3,oneof"`
}

type Node_FilterNode struct {
	// Filter node
	FilterNode *FilterNode `protobuf:"bytes,7,opt,name=filter_node,json=filterNode,proto3,oneof"`
}

type Node_DeriveNode struct {
	// Derive node
	DeriveNode *DeriveNode `protobuf:"bytes,8,opt,name=derive_node,json=deriveNode,proto3,oneof"`
}

type Node_GroupNode struct {
	// Group node
	GroupNode *GroupNode `protobuf:"bytes,9,opt,name=group_node,json=groupNode,proto3,oneof"`
}

type Node_JoinNode struct {
	// Join node
	JoinNode *JoinNode `protobuf:"bytes,10,opt,name=join_node,json=joinNode,proto3,oneof"`
}

type Node_SelectNode struct {
	// Select node
	SelectNode *SelectNode `protobuf:"bytes,11,opt,name=select_node,json=selectNode,proto3,oneof"`
}

type Node_AggregateNode struct {
	// Aggregate node
	AggregateNode *AggregateNode `protobuf:"bytes,12,opt,name=aggregate_node,json=aggregateNode,proto3,oneof"`
}

type Node_TakeNode struct {
	// Take node
	TakeNode *TakeNode `protobuf:"bytes,13,opt,name=take_node,json=takeNode,proto3,oneof"`
}

type Node_JsonNode struct {
	// Json node
	JsonNode *JsonNode `protobuf:"bytes,14,opt,name=json_node,json=jsonNode,proto3,oneof"`
}

type Node_MapNode struct {
	// Map node
	MapNode *MapNode `protobuf:"bytes,15,opt,name=map_node,json=mapNode,proto3,oneof"`
}

type Node_ReplaceNode struct {
	// Replace node
	ReplaceNode *ReplaceNode `protobuf:"bytes,16,opt,name=replace_node,json=replaceNode,proto3,oneof"`
}

type Node_SortNode struct {
	// Sort node
	SortNode *SortNode `protobuf:"bytes,17,opt,name=sort_node,json=sortNode,proto3,oneof"`
}

type Node_StringManipulationNode struct {
	// String manipulation node
	StringManipulationNode *StringManipulationNode `protobuf:"bytes,18,opt,name=string_manipulation_node,json=stringManipulationNode,proto3,oneof"`
}

type Node_TransposeNode struct {
	// Transpose node
	TransposeNode *TransposeNode `protobuf:"bytes,19,opt,name=transpose_node,json=transposeNode,proto3,oneof"`
}

func (*Node_FromNode) isNode_Body() {}

func (*Node_FilterNode) isNode_Body() {}

func (*Node_DeriveNode) isNode_Body() {}

func (*Node_GroupNode) isNode_Body() {}

func (*Node_JoinNode) isNode_Body() {}

func (*Node_SelectNode) isNode_Body() {}

func (*Node_AggregateNode) isNode_Body() {}

func (*Node_TakeNode) isNode_Body() {}

func (*Node_JsonNode) isNode_Body() {}

func (*Node_MapNode) isNode_Body() {}

func (*Node_ReplaceNode) isNode_Body() {}

func (*Node_SortNode) isNode_Body() {}

func (*Node_StringManipulationNode) isNode_Body() {}

func (*Node_TransposeNode) isNode_Body() {}

// FromNode describes a dataset to select from
type FromNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The dataset to select from
	Dataset       string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FromNode) Reset() {
	*x = FromNode{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FromNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromNode) ProtoMessage() {}

func (x *FromNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromNode.ProtoReflect.Descriptor instead.
func (*FromNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{2}
}

func (x *FromNode) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

// FilterNode filters based on an expression
type FilterNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The expression to filter by
	Expression    *ExpressionNode `protobuf:"bytes,3,opt,name=expression,proto3" json:"expression,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterNode) Reset() {
	*x = FilterNode{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterNode) ProtoMessage() {}

func (x *FilterNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterNode.ProtoReflect.Descriptor instead.
func (*FilterNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{3}
}

func (x *FilterNode) GetExpression() *ExpressionNode {
	if x != nil {
		return x.Expression
	}
	return nil
}

// DeriveNode derives a new column
type DeriveNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Resulting column name
	ColumnName string `protobuf:"bytes,3,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	// Expression to apply to the new column
	Expression    *ExpressionNode `protobuf:"bytes,4,opt,name=expression,proto3" json:"expression,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeriveNode) Reset() {
	*x = DeriveNode{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeriveNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeriveNode) ProtoMessage() {}

func (x *DeriveNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeriveNode.ProtoReflect.Descriptor instead.
func (*DeriveNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{4}
}

func (x *DeriveNode) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *DeriveNode) GetExpression() *ExpressionNode {
	if x != nil {
		return x.Expression
	}
	return nil
}

// GroupNode groups data
type GroupNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Columns to group by
	GroupByColumns []string `protobuf:"bytes,1,rep,name=group_by_columns,json=groupByColumns,proto3" json:"group_by_columns,omitempty"`
	// The aggregate columns
	AggregationColumns []*AggregationColumn `protobuf:"bytes,2,rep,name=aggregation_columns,json=aggregationColumns,proto3" json:"aggregation_columns,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GroupNode) Reset() {
	*x = GroupNode{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupNode) ProtoMessage() {}

func (x *GroupNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupNode.ProtoReflect.Descriptor instead.
func (*GroupNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{5}
}

func (x *GroupNode) GetGroupByColumns() []string {
	if x != nil {
		return x.GroupByColumns
	}
	return nil
}

func (x *GroupNode) GetAggregationColumns() []*AggregationColumn {
	if x != nil {
		return x.AggregationColumns
	}
	return nil
}

// TakeNode restricts the number of rows
type TakeNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// how many to limit by
	Limit         int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TakeNode) Reset() {
	*x = TakeNode{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TakeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeNode) ProtoMessage() {}

func (x *TakeNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeNode.ProtoReflect.Descriptor instead.
func (*TakeNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{6}
}

func (x *TakeNode) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// AggregateNode describes which columns to aggregate
type AggregateNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Aggregation columns
	AggregationColumns []*AggregationColumn `protobuf:"bytes,2,rep,name=aggregation_columns,json=aggregationColumns,proto3" json:"aggregation_columns,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AggregateNode) Reset() {
	*x = AggregateNode{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregateNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateNode) ProtoMessage() {}

func (x *AggregateNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateNode.ProtoReflect.Descriptor instead.
func (*AggregateNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{7}
}

func (x *AggregateNode) GetAggregationColumns() []*AggregationColumn {
	if x != nil {
		return x.AggregationColumns
	}
	return nil
}

// AggregationColumn describes the aggregation column
type AggregationColumn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// column name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// which columns to group by
	GroupByColumns []string `protobuf:"bytes,2,rep,name=group_by_columns,json=groupByColumns,proto3" json:"group_by_columns,omitempty"`
	// which column to aggregate
	ColumnToAggregate string `protobuf:"bytes,3,opt,name=column_to_aggregate,json=columnToAggregate,proto3" json:"column_to_aggregate,omitempty"`
	// the aggregation function to apply
	AggregationFunction string `protobuf:"bytes,4,opt,name=aggregation_function,json=aggregationFunction,proto3" json:"aggregation_function,omitempty"` // sum | avg | count | min | max | combine_string | unique_count
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AggregationColumn) Reset() {
	*x = AggregationColumn{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregationColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationColumn) ProtoMessage() {}

func (x *AggregationColumn) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationColumn.ProtoReflect.Descriptor instead.
func (*AggregationColumn) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{8}
}

func (x *AggregationColumn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AggregationColumn) GetGroupByColumns() []string {
	if x != nil {
		return x.GroupByColumns
	}
	return nil
}

func (x *AggregationColumn) GetColumnToAggregate() string {
	if x != nil {
		return x.ColumnToAggregate
	}
	return ""
}

func (x *AggregationColumn) GetAggregationFunction() string {
	if x != nil {
		return x.AggregationFunction
	}
	return ""
}

// Column describes a column
type Column struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// key is the column name
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// data type of column
	DataType      string `protobuf:"bytes,2,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Column) Reset() {
	*x = Column{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{9}
}

func (x *Column) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Column) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

// ExpressionNode describes a set of expressions
type ExpressionNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// boolean_expression | number_expression | string_expression | date_extraction
	// json_extraction | open_paren | close_paren | boolean_operand | boolean_expression
	// boolean_operator | boolean_literal | column_name | number_literal | string_literal
	// null | string_expression | date_extraction | json_extraction | number_expression
	// parameter | number_parameter | date_parameter | boolean_parameter | string_parameter
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Expression node value
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// list of sub expressions
	Children      []*ExpressionNode `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExpressionNode) Reset() {
	*x = ExpressionNode{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExpressionNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpressionNode) ProtoMessage() {}

func (x *ExpressionNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpressionNode.ProtoReflect.Descriptor instead.
func (*ExpressionNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{10}
}

func (x *ExpressionNode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ExpressionNode) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ExpressionNode) GetChildren() []*ExpressionNode {
	if x != nil {
		return x.Children
	}
	return nil
}

// MapNode maps columns
type MapNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// new column
	NewColumn *Column `protobuf:"bytes,1,opt,name=new_column,json=newColumn,proto3" json:"new_column,omitempty"`
	// column to map
	ColumnToMap *Column `protobuf:"bytes,2,opt,name=column_to_map,json=columnToMap,proto3" json:"column_to_map,omitempty"`
	// mappings
	Mappings []*MapNode_Mapping `protobuf:"bytes,3,rep,name=mappings,proto3" json:"mappings,omitempty"`
	// default expression value
	DefaultValue *ExpressionNode `protobuf:"bytes,4,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// is complex
	IsComplex     bool `protobuf:"varint,5,opt,name=is_complex,json=isComplex,proto3" json:"is_complex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MapNode) Reset() {
	*x = MapNode{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapNode) ProtoMessage() {}

func (x *MapNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapNode.ProtoReflect.Descriptor instead.
func (*MapNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{11}
}

func (x *MapNode) GetNewColumn() *Column {
	if x != nil {
		return x.NewColumn
	}
	return nil
}

func (x *MapNode) GetColumnToMap() *Column {
	if x != nil {
		return x.ColumnToMap
	}
	return nil
}

func (x *MapNode) GetMappings() []*MapNode_Mapping {
	if x != nil {
		return x.Mappings
	}
	return nil
}

func (x *MapNode) GetDefaultValue() *ExpressionNode {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *MapNode) GetIsComplex() bool {
	if x != nil {
		return x.IsComplex
	}
	return false
}

// JoinNode joins datasets
type JoinNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of join
	Side string `protobuf:"bytes,1,opt,name=side,proto3" json:"side,omitempty"` // left | right | full | inner
	// The join columns
	JoinColumns []*JoinColumn `protobuf:"bytes,2,rep,name=join_columns,json=joinColumns,proto3" json:"join_columns,omitempty"`
	// First parent
	FirstParent *Parent `protobuf:"bytes,3,opt,name=first_parent,json=firstParent,proto3" json:"first_parent,omitempty"`
	// Second parent
	SecondParent  *Parent `protobuf:"bytes,4,opt,name=second_parent,json=secondParent,proto3" json:"second_parent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinNode) Reset() {
	*x = JoinNode{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinNode) ProtoMessage() {}

func (x *JoinNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinNode.ProtoReflect.Descriptor instead.
func (*JoinNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{12}
}

func (x *JoinNode) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

func (x *JoinNode) GetJoinColumns() []*JoinColumn {
	if x != nil {
		return x.JoinColumns
	}
	return nil
}

func (x *JoinNode) GetFirstParent() *Parent {
	if x != nil {
		return x.FirstParent
	}
	return nil
}

func (x *JoinNode) GetSecondParent() *Parent {
	if x != nil {
		return x.SecondParent
	}
	return nil
}

// JoinColumn describes a join column
type JoinColumn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// First parent column
	FirstParentColumn string `protobuf:"bytes,1,opt,name=first_parent_column,json=firstParentColumn,proto3" json:"first_parent_column,omitempty"`
	// second parent column
	SecondParentColumn string `protobuf:"bytes,2,opt,name=second_parent_column,json=secondParentColumn,proto3" json:"second_parent_column,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *JoinColumn) Reset() {
	*x = JoinColumn{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinColumn) ProtoMessage() {}

func (x *JoinColumn) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinColumn.ProtoReflect.Descriptor instead.
func (*JoinColumn) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{13}
}

func (x *JoinColumn) GetFirstParentColumn() string {
	if x != nil {
		return x.FirstParentColumn
	}
	return ""
}

func (x *JoinColumn) GetSecondParentColumn() string {
	if x != nil {
		return x.SecondParentColumn
	}
	return ""
}

// Parent describes a join node parent
type Parent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent_id
	ParentId string `protobuf:"bytes,1,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// parent title
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// map of renamed columns
	RenamedColumns map[string]string `protobuf:"bytes,3,rep,name=renamed_columns,json=renamedColumns,proto3" json:"renamed_columns,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Parent) Reset() {
	*x = Parent{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Parent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parent) ProtoMessage() {}

func (x *Parent) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parent.ProtoReflect.Descriptor instead.
func (*Parent) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{14}
}

func (x *Parent) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *Parent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Parent) GetRenamedColumns() map[string]string {
	if x != nil {
		return x.RenamedColumns
	}
	return nil
}

// SelectNode selects a set of columns
type SelectNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Column names to select
	Columns []string `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
	// map of renamed columns
	RenamedColumns map[string]string `protobuf:"bytes,2,rep,name=renamed_columns,json=renamedColumns,proto3" json:"renamed_columns,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SelectNode) Reset() {
	*x = SelectNode{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelectNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectNode) ProtoMessage() {}

func (x *SelectNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectNode.ProtoReflect.Descriptor instead.
func (*SelectNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{15}
}

func (x *SelectNode) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *SelectNode) GetRenamedColumns() map[string]string {
	if x != nil {
		return x.RenamedColumns
	}
	return nil
}

// JsonTarget
type JsonTarget struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// path parts
	PathParts []string `protobuf:"bytes,1,rep,name=path_parts,json=pathParts,proto3" json:"path_parts,omitempty"`
	// Column name
	ColumnName string `protobuf:"bytes,2,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	// Result type
	ResultType    string `protobuf:"bytes,3,opt,name=result_type,json=resultType,proto3" json:"result_type,omitempty"` // string | number | boolean | array | object
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JsonTarget) Reset() {
	*x = JsonTarget{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JsonTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonTarget) ProtoMessage() {}

func (x *JsonTarget) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonTarget.ProtoReflect.Descriptor instead.
func (*JsonTarget) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{16}
}

func (x *JsonTarget) GetPathParts() []string {
	if x != nil {
		return x.PathParts
	}
	return nil
}

func (x *JsonTarget) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *JsonTarget) GetResultType() string {
	if x != nil {
		return x.ResultType
	}
	return ""
}

// JsonNode
type JsonNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type of operation
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // unnest_to_columns | unnest | unpack
	// Json column to apply the operation to
	JsonColumn string `protobuf:"bytes,2,opt,name=json_column,json=jsonColumn,proto3" json:"json_column,omitempty"`
	// List of json targets
	Targets []*JsonTarget `protobuf:"bytes,3,rep,name=targets,proto3" json:"targets,omitempty"`
	// Unnest to column node
	UnnestToColumnsNode *UnnestToColumnsNode `protobuf:"bytes,4,opt,name=unnest_to_columns_node,json=unnestToColumnsNode,proto3" json:"unnest_to_columns_node,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *JsonNode) Reset() {
	*x = JsonNode{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JsonNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonNode) ProtoMessage() {}

func (x *JsonNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonNode.ProtoReflect.Descriptor instead.
func (*JsonNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{17}
}

func (x *JsonNode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *JsonNode) GetJsonColumn() string {
	if x != nil {
		return x.JsonColumn
	}
	return ""
}

func (x *JsonNode) GetTargets() []*JsonTarget {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *JsonNode) GetUnnestToColumnsNode() *UnnestToColumnsNode {
	if x != nil {
		return x.UnnestToColumnsNode
	}
	return nil
}

// UnnestToColumnsNode
type UnnestToColumnsNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// When the key is a column, take the value from the column
	UnnestTarget *JsonTarget `protobuf:"bytes,1,opt,name=unnest_target,json=unnestTarget,proto3" json:"unnest_target,omitempty"`
	// Key target
	KeyTarget *JsonTarget `protobuf:"bytes,2,opt,name=key_target,json=keyTarget,proto3" json:"key_target,omitempty"`
	// Value target
	ValueTarget *JsonTarget `protobuf:"bytes,3,opt,name=value_target,json=valueTarget,proto3" json:"value_target,omitempty"`
	// Column
	Columns []string `protobuf:"bytes,4,rep,name=columns,proto3" json:"columns,omitempty"`
	// Primary keys
	PrimaryKeys []string `protobuf:"bytes,5,rep,name=primary_keys,json=primaryKeys,proto3" json:"primary_keys,omitempty"`
	// Json columns
	JsonColumns   []*Column `protobuf:"bytes,6,rep,name=json_columns,json=jsonColumns,proto3" json:"json_columns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnnestToColumnsNode) Reset() {
	*x = UnnestToColumnsNode{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnnestToColumnsNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnnestToColumnsNode) ProtoMessage() {}

func (x *UnnestToColumnsNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnnestToColumnsNode.ProtoReflect.Descriptor instead.
func (*UnnestToColumnsNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{18}
}

func (x *UnnestToColumnsNode) GetUnnestTarget() *JsonTarget {
	if x != nil {
		return x.UnnestTarget
	}
	return nil
}

func (x *UnnestToColumnsNode) GetKeyTarget() *JsonTarget {
	if x != nil {
		return x.KeyTarget
	}
	return nil
}

func (x *UnnestToColumnsNode) GetValueTarget() *JsonTarget {
	if x != nil {
		return x.ValueTarget
	}
	return nil
}

func (x *UnnestToColumnsNode) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *UnnestToColumnsNode) GetPrimaryKeys() []string {
	if x != nil {
		return x.PrimaryKeys
	}
	return nil
}

func (x *UnnestToColumnsNode) GetJsonColumns() []*Column {
	if x != nil {
		return x.JsonColumns
	}
	return nil
}

// ValuesReplacement
type ValuesReplacement struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Value in the column to replace
	TargetValue string `protobuf:"bytes,1,opt,name=target_value,json=targetValue,proto3" json:"target_value,omitempty"`
	// Target data type of replacement
	TargetDataType string `protobuf:"bytes,2,opt,name=target_data_type,json=targetDataType,proto3" json:"target_data_type,omitempty"`
	// Result of the replacement
	ReplacementValue *ExpressionNode `protobuf:"bytes,3,opt,name=replacement_value,json=replacementValue,proto3" json:"replacement_value,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ValuesReplacement) Reset() {
	*x = ValuesReplacement{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValuesReplacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValuesReplacement) ProtoMessage() {}

func (x *ValuesReplacement) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValuesReplacement.ProtoReflect.Descriptor instead.
func (*ValuesReplacement) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{19}
}

func (x *ValuesReplacement) GetTargetValue() string {
	if x != nil {
		return x.TargetValue
	}
	return ""
}

func (x *ValuesReplacement) GetTargetDataType() string {
	if x != nil {
		return x.TargetDataType
	}
	return ""
}

func (x *ValuesReplacement) GetReplacementValue() *ExpressionNode {
	if x != nil {
		return x.ReplacementValue
	}
	return nil
}

// ColumnReplacement
type ColumnReplacement struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Column to replace values in
	ColumnNames []string `protobuf:"bytes,1,rep,name=column_names,json=columnNames,proto3" json:"column_names,omitempty"`
	// Values to replace
	ValuesReplacements []*ValuesReplacement `protobuf:"bytes,2,rep,name=values_replacements,json=valuesReplacements,proto3" json:"values_replacements,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ColumnReplacement) Reset() {
	*x = ColumnReplacement{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnReplacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnReplacement) ProtoMessage() {}

func (x *ColumnReplacement) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnReplacement.ProtoReflect.Descriptor instead.
func (*ColumnReplacement) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{20}
}

func (x *ColumnReplacement) GetColumnNames() []string {
	if x != nil {
		return x.ColumnNames
	}
	return nil
}

func (x *ColumnReplacement) GetValuesReplacements() []*ValuesReplacement {
	if x != nil {
		return x.ValuesReplacements
	}
	return nil
}

// ReplaceNode
type ReplaceNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of column replacements
	ColumnReplacements []*ColumnReplacement `protobuf:"bytes,1,rep,name=column_replacements,json=columnReplacements,proto3" json:"column_replacements,omitempty"`
	// Is complex
	IsComplex     bool `protobuf:"varint,2,opt,name=is_complex,json=isComplex,proto3" json:"is_complex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplaceNode) Reset() {
	*x = ReplaceNode{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceNode) ProtoMessage() {}

func (x *ReplaceNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceNode.ProtoReflect.Descriptor instead.
func (*ReplaceNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{21}
}

func (x *ReplaceNode) GetColumnReplacements() []*ColumnReplacement {
	if x != nil {
		return x.ColumnReplacements
	}
	return nil
}

func (x *ReplaceNode) GetIsComplex() bool {
	if x != nil {
		return x.IsComplex
	}
	return false
}

// SortColumn
type SortColumn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Column name to sort
	ColumnName string `protobuf:"bytes,1,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	// Will determine sort direction
	Ascending     bool `protobuf:"varint,2,opt,name=ascending,proto3" json:"ascending,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SortColumn) Reset() {
	*x = SortColumn{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SortColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortColumn) ProtoMessage() {}

func (x *SortColumn) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortColumn.ProtoReflect.Descriptor instead.
func (*SortColumn) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{22}
}

func (x *SortColumn) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *SortColumn) GetAscending() bool {
	if x != nil {
		return x.Ascending
	}
	return false
}

// SortNode describes which columns to sort
type SortNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Columns to sort
	SortColumns   []*SortColumn `protobuf:"bytes,1,rep,name=sort_columns,json=sortColumns,proto3" json:"sort_columns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SortNode) Reset() {
	*x = SortNode{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SortNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortNode) ProtoMessage() {}

func (x *SortNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortNode.ProtoReflect.Descriptor instead.
func (*SortNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{23}
}

func (x *SortNode) GetSortColumns() []*SortColumn {
	if x != nil {
		return x.SortColumns
	}
	return nil
}

// StringManipulationSplit describes what value to split by
type StringManipulationSplit struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Split value
	SplitBy string `protobuf:"bytes,2,opt,name=split_by,json=splitBy,proto3" json:"split_by,omitempty"`
	// If true, index_extraction is required
	IsIndexExtraction bool `protobuf:"varint,3,opt,name=is_index_extraction,json=isIndexExtraction,proto3" json:"is_index_extraction,omitempty"`
	// Index to extract after split
	IndexExtraction int32 `protobuf:"varint,4,opt,name=index_extraction,json=indexExtraction,proto3" json:"index_extraction,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StringManipulationSplit) Reset() {
	*x = StringManipulationSplit{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringManipulationSplit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringManipulationSplit) ProtoMessage() {}

func (x *StringManipulationSplit) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringManipulationSplit.ProtoReflect.Descriptor instead.
func (*StringManipulationSplit) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{24}
}

func (x *StringManipulationSplit) GetSplitBy() string {
	if x != nil {
		return x.SplitBy
	}
	return ""
}

func (x *StringManipulationSplit) GetIsIndexExtraction() bool {
	if x != nil {
		return x.IsIndexExtraction
	}
	return false
}

func (x *StringManipulationSplit) GetIndexExtraction() int32 {
	if x != nil {
		return x.IndexExtraction
	}
	return 0
}

// StringManipulationReplace describes how to replace values
type StringManipulationReplace struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Target string to replace
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// Value to replace with
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringManipulationReplace) Reset() {
	*x = StringManipulationReplace{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringManipulationReplace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringManipulationReplace) ProtoMessage() {}

func (x *StringManipulationReplace) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringManipulationReplace.ProtoReflect.Descriptor instead.
func (*StringManipulationReplace) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{25}
}

func (x *StringManipulationReplace) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *StringManipulationReplace) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type StringManipulationNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// split | replace | lower | upper
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Column to replace with
	SourceColumnName string `protobuf:"bytes,2,opt,name=source_column_name,json=sourceColumnName,proto3" json:"source_column_name,omitempty"`
	// Target column to replace
	TargetColumnName string `protobuf:"bytes,3,opt,name=target_column_name,json=targetColumnName,proto3" json:"target_column_name,omitempty"`
	// Split operation
	StringManipulationSplit *StringManipulationSplit `protobuf:"bytes,4,opt,name=string_manipulation_split,json=stringManipulationSplit,proto3" json:"string_manipulation_split,omitempty"`
	// Replace operation
	StringManipulationReplace *StringManipulationReplace `protobuf:"bytes,5,opt,name=string_manipulation_replace,json=stringManipulationReplace,proto3" json:"string_manipulation_replace,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *StringManipulationNode) Reset() {
	*x = StringManipulationNode{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringManipulationNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringManipulationNode) ProtoMessage() {}

func (x *StringManipulationNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringManipulationNode.ProtoReflect.Descriptor instead.
func (*StringManipulationNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{26}
}

func (x *StringManipulationNode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StringManipulationNode) GetSourceColumnName() string {
	if x != nil {
		return x.SourceColumnName
	}
	return ""
}

func (x *StringManipulationNode) GetTargetColumnName() string {
	if x != nil {
		return x.TargetColumnName
	}
	return ""
}

func (x *StringManipulationNode) GetStringManipulationSplit() *StringManipulationSplit {
	if x != nil {
		return x.StringManipulationSplit
	}
	return nil
}

func (x *StringManipulationNode) GetStringManipulationReplace() *StringManipulationReplace {
	if x != nil {
		return x.StringManipulationReplace
	}
	return nil
}

// Transpose node will pivot a dataset based off of the key column
type TransposeNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// columns to group by
	GroupByColumns []string `protobuf:"bytes,1,rep,name=group_by_columns,json=groupByColumns,proto3" json:"group_by_columns,omitempty"`
	// column to pivot on
	KeyColumn string `protobuf:"bytes,2,opt,name=key_column,json=keyColumn,proto3" json:"key_column,omitempty"`
	// options describe the extracted columns
	Options       []*TransposeNode_Option `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransposeNode) Reset() {
	*x = TransposeNode{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransposeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransposeNode) ProtoMessage() {}

func (x *TransposeNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransposeNode.ProtoReflect.Descriptor instead.
func (*TransposeNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{27}
}

func (x *TransposeNode) GetGroupByColumns() []string {
	if x != nil {
		return x.GroupByColumns
	}
	return nil
}

func (x *TransposeNode) GetKeyColumn() string {
	if x != nil {
		return x.KeyColumn
	}
	return ""
}

func (x *TransposeNode) GetOptions() []*TransposeNode_Option {
	if x != nil {
		return x.Options
	}
	return nil
}

// FormatQuery contains operations to apply in post processing
type FormatQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Table column configurations
	TableColumnConfigs []*TableColumnConfig `protobuf:"bytes,1,rep,name=table_column_configs,json=tableColumnConfigs,proto3" json:"table_column_configs,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *FormatQuery) Reset() {
	*x = FormatQuery{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FormatQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatQuery) ProtoMessage() {}

func (x *FormatQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatQuery.ProtoReflect.Descriptor instead.
func (*FormatQuery) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{28}
}

func (x *FormatQuery) GetTableColumnConfigs() []*TableColumnConfig {
	if x != nil {
		return x.TableColumnConfigs
	}
	return nil
}

// Message for Table Column Configuration
type TableColumnConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the column
	ColumnName string `protobuf:"bytes,1,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	// Operations to be performed on the column
	Operations []*ColumnOperation `protobuf:"bytes,5,rep,name=operations,proto3" json:"operations,omitempty"`
	// Summary for the column (AVG, SUM, MIN, MAX)
	ColumnSummary ColumnSummaryType `protobuf:"varint,6,opt,name=column_summary,json=columnSummary,proto3,enum=api.v1alpha1.explorer.ColumnSummaryType" json:"column_summary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TableColumnConfig) Reset() {
	*x = TableColumnConfig{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableColumnConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableColumnConfig) ProtoMessage() {}

func (x *TableColumnConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableColumnConfig.ProtoReflect.Descriptor instead.
func (*TableColumnConfig) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{29}
}

func (x *TableColumnConfig) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *TableColumnConfig) GetOperations() []*ColumnOperation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *TableColumnConfig) GetColumnSummary() ColumnSummaryType {
	if x != nil {
		return x.ColumnSummary
	}
	return ColumnSummaryType_COLUMN_SUMMARY_TYPE_UNSPECIFIED
}

// FormatSeries contains the series of operations for a column operation
type FormatSeries struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The series of format parts
	FormatParts   []string `protobuf:"bytes,1,rep,name=format_parts,json=formatParts,proto3" json:"format_parts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FormatSeries) Reset() {
	*x = FormatSeries{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FormatSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatSeries) ProtoMessage() {}

func (x *FormatSeries) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatSeries.ProtoReflect.Descriptor instead.
func (*FormatSeries) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{30}
}

func (x *FormatSeries) GetFormatParts() []string {
	if x != nil {
		return x.FormatParts
	}
	return nil
}

// PadOperation contains padding details
type PadOperation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Character to pad the string with
	PadCharacter string `protobuf:"bytes,1,opt,name=pad_character,json=padCharacter,proto3" json:"pad_character,omitempty"`
	// Flag to pad before or after the string
	PadLeft bool `protobuf:"varint,2,opt,name=pad_left,json=padLeft,proto3" json:"pad_left,omitempty"`
	// Size of the padding
	PadSize       int32 `protobuf:"varint,3,opt,name=pad_size,json=padSize,proto3" json:"pad_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PadOperation) Reset() {
	*x = PadOperation{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PadOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PadOperation) ProtoMessage() {}

func (x *PadOperation) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PadOperation.ProtoReflect.Descriptor instead.
func (*PadOperation) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{31}
}

func (x *PadOperation) GetPadCharacter() string {
	if x != nil {
		return x.PadCharacter
	}
	return ""
}

func (x *PadOperation) GetPadLeft() bool {
	if x != nil {
		return x.PadLeft
	}
	return false
}

func (x *PadOperation) GetPadSize() int32 {
	if x != nil {
		return x.PadSize
	}
	return 0
}

// Message for ColumnOperation
type ColumnOperation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Operation type
	OperationType OperationType `protobuf:"varint,1,opt,name=operation_type,json=operationType,proto3,enum=api.v1alpha1.explorer.OperationType" json:"operation_type,omitempty"`
	// Types that are valid to be assigned to OperationValue:
	//
	//	*ColumnOperation_FloatValue
	//	*ColumnOperation_FormatSeries
	//	*ColumnOperation_PadOperation
	OperationValue isColumnOperation_OperationValue `protobuf_oneof:"operation_value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ColumnOperation) Reset() {
	*x = ColumnOperation{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnOperation) ProtoMessage() {}

func (x *ColumnOperation) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnOperation.ProtoReflect.Descriptor instead.
func (*ColumnOperation) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{32}
}

func (x *ColumnOperation) GetOperationType() OperationType {
	if x != nil {
		return x.OperationType
	}
	return OperationType_OPERATION_TYPE_UNSPECIFIED
}

func (x *ColumnOperation) GetOperationValue() isColumnOperation_OperationValue {
	if x != nil {
		return x.OperationValue
	}
	return nil
}

func (x *ColumnOperation) GetFloatValue() float64 {
	if x != nil {
		if x, ok := x.OperationValue.(*ColumnOperation_FloatValue); ok {
			return x.FloatValue
		}
	}
	return 0
}

func (x *ColumnOperation) GetFormatSeries() *FormatSeries {
	if x != nil {
		if x, ok := x.OperationValue.(*ColumnOperation_FormatSeries); ok {
			return x.FormatSeries
		}
	}
	return nil
}

func (x *ColumnOperation) GetPadOperation() *PadOperation {
	if x != nil {
		if x, ok := x.OperationValue.(*ColumnOperation_PadOperation); ok {
			return x.PadOperation
		}
	}
	return nil
}

type isColumnOperation_OperationValue interface {
	isColumnOperation_OperationValue()
}

type ColumnOperation_FloatValue struct {
	// Float value for operation
	FloatValue float64 `protobuf:"fixed64,2,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type ColumnOperation_FormatSeries struct {
	// Series values for operation
	FormatSeries *FormatSeries `protobuf:"bytes,3,opt,name=format_series,json=formatSeries,proto3,oneof"`
}

type ColumnOperation_PadOperation struct {
	// Pad operation
	PadOperation *PadOperation `protobuf:"bytes,4,opt,name=pad_operation,json=padOperation,proto3,oneof"`
}

func (*ColumnOperation_FloatValue) isColumnOperation_OperationValue() {}

func (*ColumnOperation_FormatSeries) isColumnOperation_OperationValue() {}

func (*ColumnOperation_PadOperation) isColumnOperation_OperationValue() {}

type MapNode_Mapping struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// expression condition
	Condition *ExpressionNode `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	// expression result
	Result        *ExpressionNode `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MapNode_Mapping) Reset() {
	*x = MapNode_Mapping{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapNode_Mapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapNode_Mapping) ProtoMessage() {}

func (x *MapNode_Mapping) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapNode_Mapping.ProtoReflect.Descriptor instead.
func (*MapNode_Mapping) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{11, 0}
}

func (x *MapNode_Mapping) GetCondition() *ExpressionNode {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *MapNode_Mapping) GetResult() *ExpressionNode {
	if x != nil {
		return x.Result
	}
	return nil
}

type TransposeNode_Option struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the extracted column name
	KeyName string `protobuf:"bytes,2,opt,name=key_name,json=keyName,proto3" json:"key_name,omitempty"`
	// the column that contains the extracted values
	ValueColumn string `protobuf:"bytes,3,opt,name=value_column,json=valueColumn,proto3" json:"value_column,omitempty"`
	// resulting type of the extracted column
	ValueType     string `protobuf:"bytes,4,opt,name=value_type,json=valueType,proto3" json:"value_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransposeNode_Option) Reset() {
	*x = TransposeNode_Option{}
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransposeNode_Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransposeNode_Option) ProtoMessage() {}

func (x *TransposeNode_Option) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_pipeline_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransposeNode_Option.ProtoReflect.Descriptor instead.
func (*TransposeNode_Option) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP(), []int{27, 0}
}

func (x *TransposeNode_Option) GetKeyName() string {
	if x != nil {
		return x.KeyName
	}
	return ""
}

func (x *TransposeNode_Option) GetValueColumn() string {
	if x != nil {
		return x.ValueColumn
	}
	return ""
}

func (x *TransposeNode_Option) GetValueType() string {
	if x != nil {
		return x.ValueType
	}
	return ""
}

var File_api_v1alpha1_explorer_pipeline_proto protoreflect.FileDescriptor

const file_api_v1alpha1_explorer_pipeline_proto_rawDesc = "" +
	"\n" +
	"$api/v1alpha1/explorer/pipeline.proto\x12\x15api.v1alpha1.explorer\"\x84\x01\n" +
	"\bPipeline\x121\n" +
	"\x05nodes\x18\x01 \x03(\v2\x1b.api.v1alpha1.explorer.NodeR\x05nodes\x12E\n" +
	"\fformat_query\x18\x02 \x01(\v2\".api.v1alpha1.explorer.FormatQueryR\vformatQuery\"\xf1\b\n" +
	"\x04Node\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x14\n" +
	"\x05title\x18\x03 \x01(\tR\x05title\x12\x1b\n" +
	"\tinput_ids\x18\x04 \x03(\tR\binputIds\x12\x1d\n" +
	"\n" +
	"output_ids\x18\x05 \x03(\tR\toutputIds\x12>\n" +
	"\tfrom_node\x18\x06 \x01(\v2\x1f.api.v1alpha1.explorer.FromNodeH\x00R\bfromNode\x12D\n" +
	"\vfilter_node\x18\a \x01(\v2!.api.v1alpha1.explorer.FilterNodeH\x00R\n" +
	"filterNode\x12D\n" +
	"\vderive_node\x18\b \x01(\v2!.api.v1alpha1.explorer.DeriveNodeH\x00R\n" +
	"deriveNode\x12A\n" +
	"\n" +
	"group_node\x18\t \x01(\v2 .api.v1alpha1.explorer.GroupNodeH\x00R\tgroupNode\x12>\n" +
	"\tjoin_node\x18\n" +
	" \x01(\v2\x1f.api.v1alpha1.explorer.JoinNodeH\x00R\bjoinNode\x12D\n" +
	"\vselect_node\x18\v \x01(\v2!.api.v1alpha1.explorer.SelectNodeH\x00R\n" +
	"selectNode\x12M\n" +
	"\x0eaggregate_node\x18\f \x01(\v2$.api.v1alpha1.explorer.AggregateNodeH\x00R\raggregateNode\x12>\n" +
	"\ttake_node\x18\r \x01(\v2\x1f.api.v1alpha1.explorer.TakeNodeH\x00R\btakeNode\x12>\n" +
	"\tjson_node\x18\x0e \x01(\v2\x1f.api.v1alpha1.explorer.JsonNodeH\x00R\bjsonNode\x12;\n" +
	"\bmap_node\x18\x0f \x01(\v2\x1e.api.v1alpha1.explorer.MapNodeH\x00R\amapNode\x12G\n" +
	"\freplace_node\x18\x10 \x01(\v2\".api.v1alpha1.explorer.ReplaceNodeH\x00R\vreplaceNode\x12>\n" +
	"\tsort_node\x18\x11 \x01(\v2\x1f.api.v1alpha1.explorer.SortNodeH\x00R\bsortNode\x12i\n" +
	"\x18string_manipulation_node\x18\x12 \x01(\v2-.api.v1alpha1.explorer.StringManipulationNodeH\x00R\x16stringManipulationNode\x12M\n" +
	"\x0etranspose_node\x18\x13 \x01(\v2$.api.v1alpha1.explorer.TransposeNodeH\x00R\rtransposeNodeB\x06\n" +
	"\x04body\"$\n" +
	"\bFromNode\x12\x18\n" +
	"\adataset\x18\x01 \x01(\tR\adataset\"S\n" +
	"\n" +
	"FilterNode\x12E\n" +
	"\n" +
	"expression\x18\x03 \x01(\v2%.api.v1alpha1.explorer.ExpressionNodeR\n" +
	"expression\"t\n" +
	"\n" +
	"DeriveNode\x12\x1f\n" +
	"\vcolumn_name\x18\x03 \x01(\tR\n" +
	"columnName\x12E\n" +
	"\n" +
	"expression\x18\x04 \x01(\v2%.api.v1alpha1.explorer.ExpressionNodeR\n" +
	"expression\"\x90\x01\n" +
	"\tGroupNode\x12(\n" +
	"\x10group_by_columns\x18\x01 \x03(\tR\x0egroupByColumns\x12Y\n" +
	"\x13aggregation_columns\x18\x02 \x03(\v2(.api.v1alpha1.explorer.AggregationColumnR\x12aggregationColumns\" \n" +
	"\bTakeNode\x12\x14\n" +
	"\x05limit\x18\x01 \x01(\x05R\x05limit\"j\n" +
	"\rAggregateNode\x12Y\n" +
	"\x13aggregation_columns\x18\x02 \x03(\v2(.api.v1alpha1.explorer.AggregationColumnR\x12aggregationColumns\"\xb4\x01\n" +
	"\x11AggregationColumn\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12(\n" +
	"\x10group_by_columns\x18\x02 \x03(\tR\x0egroupByColumns\x12.\n" +
	"\x13column_to_aggregate\x18\x03 \x01(\tR\x11columnToAggregate\x121\n" +
	"\x14aggregation_function\x18\x04 \x01(\tR\x13aggregationFunction\"7\n" +
	"\x06Column\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x1b\n" +
	"\tdata_type\x18\x02 \x01(\tR\bdataType\"}\n" +
	"\x0eExpressionNode\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\x12A\n" +
	"\bchildren\x18\x03 \x03(\v2%.api.v1alpha1.explorer.ExpressionNodeR\bchildren\"\xc9\x03\n" +
	"\aMapNode\x12<\n" +
	"\n" +
	"new_column\x18\x01 \x01(\v2\x1d.api.v1alpha1.explorer.ColumnR\tnewColumn\x12A\n" +
	"\rcolumn_to_map\x18\x02 \x01(\v2\x1d.api.v1alpha1.explorer.ColumnR\vcolumnToMap\x12B\n" +
	"\bmappings\x18\x03 \x03(\v2&.api.v1alpha1.explorer.MapNode.MappingR\bmappings\x12J\n" +
	"\rdefault_value\x18\x04 \x01(\v2%.api.v1alpha1.explorer.ExpressionNodeR\fdefaultValue\x12\x1d\n" +
	"\n" +
	"is_complex\x18\x05 \x01(\bR\tisComplex\x1a\x8d\x01\n" +
	"\aMapping\x12C\n" +
	"\tcondition\x18\x01 \x01(\v2%.api.v1alpha1.explorer.ExpressionNodeR\tcondition\x12=\n" +
	"\x06result\x18\x02 \x01(\v2%.api.v1alpha1.explorer.ExpressionNodeR\x06result\"\xea\x01\n" +
	"\bJoinNode\x12\x12\n" +
	"\x04side\x18\x01 \x01(\tR\x04side\x12D\n" +
	"\fjoin_columns\x18\x02 \x03(\v2!.api.v1alpha1.explorer.JoinColumnR\vjoinColumns\x12@\n" +
	"\ffirst_parent\x18\x03 \x01(\v2\x1d.api.v1alpha1.explorer.ParentR\vfirstParent\x12B\n" +
	"\rsecond_parent\x18\x04 \x01(\v2\x1d.api.v1alpha1.explorer.ParentR\fsecondParent\"n\n" +
	"\n" +
	"JoinColumn\x12.\n" +
	"\x13first_parent_column\x18\x01 \x01(\tR\x11firstParentColumn\x120\n" +
	"\x14second_parent_column\x18\x02 \x01(\tR\x12secondParentColumn\"\xda\x01\n" +
	"\x06Parent\x12\x1b\n" +
	"\tparent_id\x18\x01 \x01(\tR\bparentId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12Z\n" +
	"\x0frenamed_columns\x18\x03 \x03(\v21.api.v1alpha1.explorer.Parent.RenamedColumnsEntryR\x0erenamedColumns\x1aA\n" +
	"\x13RenamedColumnsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc9\x01\n" +
	"\n" +
	"SelectNode\x12\x18\n" +
	"\acolumns\x18\x01 \x03(\tR\acolumns\x12^\n" +
	"\x0frenamed_columns\x18\x02 \x03(\v25.api.v1alpha1.explorer.SelectNode.RenamedColumnsEntryR\x0erenamedColumns\x1aA\n" +
	"\x13RenamedColumnsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"m\n" +
	"\n" +
	"JsonTarget\x12\x1d\n" +
	"\n" +
	"path_parts\x18\x01 \x03(\tR\tpathParts\x12\x1f\n" +
	"\vcolumn_name\x18\x02 \x01(\tR\n" +
	"columnName\x12\x1f\n" +
	"\vresult_type\x18\x03 \x01(\tR\n" +
	"resultType\"\xdd\x01\n" +
	"\bJsonNode\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x1f\n" +
	"\vjson_column\x18\x02 \x01(\tR\n" +
	"jsonColumn\x12;\n" +
	"\atargets\x18\x03 \x03(\v2!.api.v1alpha1.explorer.JsonTargetR\atargets\x12_\n" +
	"\x16unnest_to_columns_node\x18\x04 \x01(\v2*.api.v1alpha1.explorer.UnnestToColumnsNodeR\x13unnestToColumnsNode\"\xe4\x02\n" +
	"\x13UnnestToColumnsNode\x12F\n" +
	"\runnest_target\x18\x01 \x01(\v2!.api.v1alpha1.explorer.JsonTargetR\funnestTarget\x12@\n" +
	"\n" +
	"key_target\x18\x02 \x01(\v2!.api.v1alpha1.explorer.JsonTargetR\tkeyTarget\x12D\n" +
	"\fvalue_target\x18\x03 \x01(\v2!.api.v1alpha1.explorer.JsonTargetR\vvalueTarget\x12\x18\n" +
	"\acolumns\x18\x04 \x03(\tR\acolumns\x12!\n" +
	"\fprimary_keys\x18\x05 \x03(\tR\vprimaryKeys\x12@\n" +
	"\fjson_columns\x18\x06 \x03(\v2\x1d.api.v1alpha1.explorer.ColumnR\vjsonColumns\"\xb4\x01\n" +
	"\x11ValuesReplacement\x12!\n" +
	"\ftarget_value\x18\x01 \x01(\tR\vtargetValue\x12(\n" +
	"\x10target_data_type\x18\x02 \x01(\tR\x0etargetDataType\x12R\n" +
	"\x11replacement_value\x18\x03 \x01(\v2%.api.v1alpha1.explorer.ExpressionNodeR\x10replacementValue\"\x91\x01\n" +
	"\x11ColumnReplacement\x12!\n" +
	"\fcolumn_names\x18\x01 \x03(\tR\vcolumnNames\x12Y\n" +
	"\x13values_replacements\x18\x02 \x03(\v2(.api.v1alpha1.explorer.ValuesReplacementR\x12valuesReplacements\"\x87\x01\n" +
	"\vReplaceNode\x12Y\n" +
	"\x13column_replacements\x18\x01 \x03(\v2(.api.v1alpha1.explorer.ColumnReplacementR\x12columnReplacements\x12\x1d\n" +
	"\n" +
	"is_complex\x18\x02 \x01(\bR\tisComplex\"K\n" +
	"\n" +
	"SortColumn\x12\x1f\n" +
	"\vcolumn_name\x18\x01 \x01(\tR\n" +
	"columnName\x12\x1c\n" +
	"\tascending\x18\x02 \x01(\bR\tascending\"P\n" +
	"\bSortNode\x12D\n" +
	"\fsort_columns\x18\x01 \x03(\v2!.api.v1alpha1.explorer.SortColumnR\vsortColumns\"\x8f\x01\n" +
	"\x17StringManipulationSplit\x12\x19\n" +
	"\bsplit_by\x18\x02 \x01(\tR\asplitBy\x12.\n" +
	"\x13is_index_extraction\x18\x03 \x01(\bR\x11isIndexExtraction\x12)\n" +
	"\x10index_extraction\x18\x04 \x01(\x05R\x0findexExtraction\"I\n" +
	"\x19StringManipulationReplace\x12\x16\n" +
	"\x06target\x18\x01 \x01(\tR\x06target\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"\xe6\x02\n" +
	"\x16StringManipulationNode\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12,\n" +
	"\x12source_column_name\x18\x02 \x01(\tR\x10sourceColumnName\x12,\n" +
	"\x12target_column_name\x18\x03 \x01(\tR\x10targetColumnName\x12j\n" +
	"\x19string_manipulation_split\x18\x04 \x01(\v2..api.v1alpha1.explorer.StringManipulationSplitR\x17stringManipulationSplit\x12p\n" +
	"\x1bstring_manipulation_replace\x18\x05 \x01(\v20.api.v1alpha1.explorer.StringManipulationReplaceR\x19stringManipulationReplace\"\x86\x02\n" +
	"\rTransposeNode\x12(\n" +
	"\x10group_by_columns\x18\x01 \x03(\tR\x0egroupByColumns\x12\x1d\n" +
	"\n" +
	"key_column\x18\x02 \x01(\tR\tkeyColumn\x12E\n" +
	"\aoptions\x18\x03 \x03(\v2+.api.v1alpha1.explorer.TransposeNode.OptionR\aoptions\x1ae\n" +
	"\x06Option\x12\x19\n" +
	"\bkey_name\x18\x02 \x01(\tR\akeyName\x12!\n" +
	"\fvalue_column\x18\x03 \x01(\tR\vvalueColumn\x12\x1d\n" +
	"\n" +
	"value_type\x18\x04 \x01(\tR\tvalueType\"i\n" +
	"\vFormatQuery\x12Z\n" +
	"\x14table_column_configs\x18\x01 \x03(\v2(.api.v1alpha1.explorer.TableColumnConfigR\x12tableColumnConfigs\"\xcd\x01\n" +
	"\x11TableColumnConfig\x12\x1f\n" +
	"\vcolumn_name\x18\x01 \x01(\tR\n" +
	"columnName\x12F\n" +
	"\n" +
	"operations\x18\x05 \x03(\v2&.api.v1alpha1.explorer.ColumnOperationR\n" +
	"operations\x12O\n" +
	"\x0ecolumn_summary\x18\x06 \x01(\x0e2(.api.v1alpha1.explorer.ColumnSummaryTypeR\rcolumnSummary\"1\n" +
	"\fFormatSeries\x12!\n" +
	"\fformat_parts\x18\x01 \x03(\tR\vformatParts\"i\n" +
	"\fPadOperation\x12#\n" +
	"\rpad_character\x18\x01 \x01(\tR\fpadCharacter\x12\x19\n" +
	"\bpad_left\x18\x02 \x01(\bR\apadLeft\x12\x19\n" +
	"\bpad_size\x18\x03 \x01(\x05R\apadSize\"\xac\x02\n" +
	"\x0fColumnOperation\x12K\n" +
	"\x0eoperation_type\x18\x01 \x01(\x0e2$.api.v1alpha1.explorer.OperationTypeR\roperationType\x12!\n" +
	"\vfloat_value\x18\x02 \x01(\x01H\x00R\n" +
	"floatValue\x12J\n" +
	"\rformat_series\x18\x03 \x01(\v2#.api.v1alpha1.explorer.FormatSeriesH\x00R\fformatSeries\x12J\n" +
	"\rpad_operation\x18\x04 \x01(\v2#.api.v1alpha1.explorer.PadOperationH\x00R\fpadOperationB\x11\n" +
	"\x0foperation_value*\xe0\x02\n" +
	"\rOperationType\x12\x1e\n" +
	"\x1aOPERATION_TYPE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13OPERATION_TYPE_DATE\x10\x01\x12\x19\n" +
	"\x15OPERATION_TYPE_PREFIX\x10\x02\x12\x19\n" +
	"\x15OPERATION_TYPE_SUFFIX\x10\x03\x12\x1b\n" +
	"\x17OPERATION_TYPE_DURATION\x10\x04\x12\x16\n" +
	"\x12OPERATION_TYPE_ADD\x10\x05\x12\x1b\n" +
	"\x17OPERATION_TYPE_SUBTRACT\x10\x06\x12\x1b\n" +
	"\x17OPERATION_TYPE_MULTIPLY\x10\a\x12\x19\n" +
	"\x15OPERATION_TYPE_DIVIDE\x10\b\x12 \n" +
	"\x1cOPERATION_TYPE_FORMAT_NUMBER\x10\t\x12\x1c\n" +
	"\x18OPERATION_TYPE_PRECISION\x10\n" +
	"\x12\x16\n" +
	"\x12OPERATION_TYPE_PAD\x10\v*\xac\x01\n" +
	"\x11ColumnSummaryType\x12#\n" +
	"\x1fCOLUMN_SUMMARY_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17COLUMN_SUMMARY_TYPE_AVG\x10\x01\x12\x1b\n" +
	"\x17COLUMN_SUMMARY_TYPE_SUM\x10\x02\x12\x1b\n" +
	"\x17COLUMN_SUMMARY_TYPE_MIN\x10\x03\x12\x1b\n" +
	"\x17COLUMN_SUMMARY_TYPE_MAX\x10\x04B\xd2\x01\n" +
	"\x19com.api.v1alpha1.explorerB\rPipelineProtoP\x01Z0github.com/tcncloud/api-go/api/v1alpha1/explorer\xa2\x02\x03AVE\xaa\x02\x15Api.V1alpha1.Explorer\xca\x02\x15Api\\V1alpha1\\Explorer\xe2\x02!Api\\V1alpha1\\Explorer\\GPBMetadata\xea\x02\x17Api::V1alpha1::Explorerb\x06proto3"

var (
	file_api_v1alpha1_explorer_pipeline_proto_rawDescOnce sync.Once
	file_api_v1alpha1_explorer_pipeline_proto_rawDescData []byte
)

func file_api_v1alpha1_explorer_pipeline_proto_rawDescGZIP() []byte {
	file_api_v1alpha1_explorer_pipeline_proto_rawDescOnce.Do(func() {
		file_api_v1alpha1_explorer_pipeline_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_v1alpha1_explorer_pipeline_proto_rawDesc), len(file_api_v1alpha1_explorer_pipeline_proto_rawDesc)))
	})
	return file_api_v1alpha1_explorer_pipeline_proto_rawDescData
}

var file_api_v1alpha1_explorer_pipeline_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_v1alpha1_explorer_pipeline_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_api_v1alpha1_explorer_pipeline_proto_goTypes = []any{
	(OperationType)(0),                // 0: api.v1alpha1.explorer.OperationType
	(ColumnSummaryType)(0),            // 1: api.v1alpha1.explorer.ColumnSummaryType
	(*Pipeline)(nil),                  // 2: api.v1alpha1.explorer.Pipeline
	(*Node)(nil),                      // 3: api.v1alpha1.explorer.Node
	(*FromNode)(nil),                  // 4: api.v1alpha1.explorer.FromNode
	(*FilterNode)(nil),                // 5: api.v1alpha1.explorer.FilterNode
	(*DeriveNode)(nil),                // 6: api.v1alpha1.explorer.DeriveNode
	(*GroupNode)(nil),                 // 7: api.v1alpha1.explorer.GroupNode
	(*TakeNode)(nil),                  // 8: api.v1alpha1.explorer.TakeNode
	(*AggregateNode)(nil),             // 9: api.v1alpha1.explorer.AggregateNode
	(*AggregationColumn)(nil),         // 10: api.v1alpha1.explorer.AggregationColumn
	(*Column)(nil),                    // 11: api.v1alpha1.explorer.Column
	(*ExpressionNode)(nil),            // 12: api.v1alpha1.explorer.ExpressionNode
	(*MapNode)(nil),                   // 13: api.v1alpha1.explorer.MapNode
	(*JoinNode)(nil),                  // 14: api.v1alpha1.explorer.JoinNode
	(*JoinColumn)(nil),                // 15: api.v1alpha1.explorer.JoinColumn
	(*Parent)(nil),                    // 16: api.v1alpha1.explorer.Parent
	(*SelectNode)(nil),                // 17: api.v1alpha1.explorer.SelectNode
	(*JsonTarget)(nil),                // 18: api.v1alpha1.explorer.JsonTarget
	(*JsonNode)(nil),                  // 19: api.v1alpha1.explorer.JsonNode
	(*UnnestToColumnsNode)(nil),       // 20: api.v1alpha1.explorer.UnnestToColumnsNode
	(*ValuesReplacement)(nil),         // 21: api.v1alpha1.explorer.ValuesReplacement
	(*ColumnReplacement)(nil),         // 22: api.v1alpha1.explorer.ColumnReplacement
	(*ReplaceNode)(nil),               // 23: api.v1alpha1.explorer.ReplaceNode
	(*SortColumn)(nil),                // 24: api.v1alpha1.explorer.SortColumn
	(*SortNode)(nil),                  // 25: api.v1alpha1.explorer.SortNode
	(*StringManipulationSplit)(nil),   // 26: api.v1alpha1.explorer.StringManipulationSplit
	(*StringManipulationReplace)(nil), // 27: api.v1alpha1.explorer.StringManipulationReplace
	(*StringManipulationNode)(nil),    // 28: api.v1alpha1.explorer.StringManipulationNode
	(*TransposeNode)(nil),             // 29: api.v1alpha1.explorer.TransposeNode
	(*FormatQuery)(nil),               // 30: api.v1alpha1.explorer.FormatQuery
	(*TableColumnConfig)(nil),         // 31: api.v1alpha1.explorer.TableColumnConfig
	(*FormatSeries)(nil),              // 32: api.v1alpha1.explorer.FormatSeries
	(*PadOperation)(nil),              // 33: api.v1alpha1.explorer.PadOperation
	(*ColumnOperation)(nil),           // 34: api.v1alpha1.explorer.ColumnOperation
	(*MapNode_Mapping)(nil),           // 35: api.v1alpha1.explorer.MapNode.Mapping
	nil,                               // 36: api.v1alpha1.explorer.Parent.RenamedColumnsEntry
	nil,                               // 37: api.v1alpha1.explorer.SelectNode.RenamedColumnsEntry
	(*TransposeNode_Option)(nil),      // 38: api.v1alpha1.explorer.TransposeNode.Option
}
var file_api_v1alpha1_explorer_pipeline_proto_depIdxs = []int32{
	3,  // 0: api.v1alpha1.explorer.Pipeline.nodes:type_name -> api.v1alpha1.explorer.Node
	30, // 1: api.v1alpha1.explorer.Pipeline.format_query:type_name -> api.v1alpha1.explorer.FormatQuery
	4,  // 2: api.v1alpha1.explorer.Node.from_node:type_name -> api.v1alpha1.explorer.FromNode
	5,  // 3: api.v1alpha1.explorer.Node.filter_node:type_name -> api.v1alpha1.explorer.FilterNode
	6,  // 4: api.v1alpha1.explorer.Node.derive_node:type_name -> api.v1alpha1.explorer.DeriveNode
	7,  // 5: api.v1alpha1.explorer.Node.group_node:type_name -> api.v1alpha1.explorer.GroupNode
	14, // 6: api.v1alpha1.explorer.Node.join_node:type_name -> api.v1alpha1.explorer.JoinNode
	17, // 7: api.v1alpha1.explorer.Node.select_node:type_name -> api.v1alpha1.explorer.SelectNode
	9,  // 8: api.v1alpha1.explorer.Node.aggregate_node:type_name -> api.v1alpha1.explorer.AggregateNode
	8,  // 9: api.v1alpha1.explorer.Node.take_node:type_name -> api.v1alpha1.explorer.TakeNode
	19, // 10: api.v1alpha1.explorer.Node.json_node:type_name -> api.v1alpha1.explorer.JsonNode
	13, // 11: api.v1alpha1.explorer.Node.map_node:type_name -> api.v1alpha1.explorer.MapNode
	23, // 12: api.v1alpha1.explorer.Node.replace_node:type_name -> api.v1alpha1.explorer.ReplaceNode
	25, // 13: api.v1alpha1.explorer.Node.sort_node:type_name -> api.v1alpha1.explorer.SortNode
	28, // 14: api.v1alpha1.explorer.Node.string_manipulation_node:type_name -> api.v1alpha1.explorer.StringManipulationNode
	29, // 15: api.v1alpha1.explorer.Node.transpose_node:type_name -> api.v1alpha1.explorer.TransposeNode
	12, // 16: api.v1alpha1.explorer.FilterNode.expression:type_name -> api.v1alpha1.explorer.ExpressionNode
	12, // 17: api.v1alpha1.explorer.DeriveNode.expression:type_name -> api.v1alpha1.explorer.ExpressionNode
	10, // 18: api.v1alpha1.explorer.GroupNode.aggregation_columns:type_name -> api.v1alpha1.explorer.AggregationColumn
	10, // 19: api.v1alpha1.explorer.AggregateNode.aggregation_columns:type_name -> api.v1alpha1.explorer.AggregationColumn
	12, // 20: api.v1alpha1.explorer.ExpressionNode.children:type_name -> api.v1alpha1.explorer.ExpressionNode
	11, // 21: api.v1alpha1.explorer.MapNode.new_column:type_name -> api.v1alpha1.explorer.Column
	11, // 22: api.v1alpha1.explorer.MapNode.column_to_map:type_name -> api.v1alpha1.explorer.Column
	35, // 23: api.v1alpha1.explorer.MapNode.mappings:type_name -> api.v1alpha1.explorer.MapNode.Mapping
	12, // 24: api.v1alpha1.explorer.MapNode.default_value:type_name -> api.v1alpha1.explorer.ExpressionNode
	15, // 25: api.v1alpha1.explorer.JoinNode.join_columns:type_name -> api.v1alpha1.explorer.JoinColumn
	16, // 26: api.v1alpha1.explorer.JoinNode.first_parent:type_name -> api.v1alpha1.explorer.Parent
	16, // 27: api.v1alpha1.explorer.JoinNode.second_parent:type_name -> api.v1alpha1.explorer.Parent
	36, // 28: api.v1alpha1.explorer.Parent.renamed_columns:type_name -> api.v1alpha1.explorer.Parent.RenamedColumnsEntry
	37, // 29: api.v1alpha1.explorer.SelectNode.renamed_columns:type_name -> api.v1alpha1.explorer.SelectNode.RenamedColumnsEntry
	18, // 30: api.v1alpha1.explorer.JsonNode.targets:type_name -> api.v1alpha1.explorer.JsonTarget
	20, // 31: api.v1alpha1.explorer.JsonNode.unnest_to_columns_node:type_name -> api.v1alpha1.explorer.UnnestToColumnsNode
	18, // 32: api.v1alpha1.explorer.UnnestToColumnsNode.unnest_target:type_name -> api.v1alpha1.explorer.JsonTarget
	18, // 33: api.v1alpha1.explorer.UnnestToColumnsNode.key_target:type_name -> api.v1alpha1.explorer.JsonTarget
	18, // 34: api.v1alpha1.explorer.UnnestToColumnsNode.value_target:type_name -> api.v1alpha1.explorer.JsonTarget
	11, // 35: api.v1alpha1.explorer.UnnestToColumnsNode.json_columns:type_name -> api.v1alpha1.explorer.Column
	12, // 36: api.v1alpha1.explorer.ValuesReplacement.replacement_value:type_name -> api.v1alpha1.explorer.ExpressionNode
	21, // 37: api.v1alpha1.explorer.ColumnReplacement.values_replacements:type_name -> api.v1alpha1.explorer.ValuesReplacement
	22, // 38: api.v1alpha1.explorer.ReplaceNode.column_replacements:type_name -> api.v1alpha1.explorer.ColumnReplacement
	24, // 39: api.v1alpha1.explorer.SortNode.sort_columns:type_name -> api.v1alpha1.explorer.SortColumn
	26, // 40: api.v1alpha1.explorer.StringManipulationNode.string_manipulation_split:type_name -> api.v1alpha1.explorer.StringManipulationSplit
	27, // 41: api.v1alpha1.explorer.StringManipulationNode.string_manipulation_replace:type_name -> api.v1alpha1.explorer.StringManipulationReplace
	38, // 42: api.v1alpha1.explorer.TransposeNode.options:type_name -> api.v1alpha1.explorer.TransposeNode.Option
	31, // 43: api.v1alpha1.explorer.FormatQuery.table_column_configs:type_name -> api.v1alpha1.explorer.TableColumnConfig
	34, // 44: api.v1alpha1.explorer.TableColumnConfig.operations:type_name -> api.v1alpha1.explorer.ColumnOperation
	1,  // 45: api.v1alpha1.explorer.TableColumnConfig.column_summary:type_name -> api.v1alpha1.explorer.ColumnSummaryType
	0,  // 46: api.v1alpha1.explorer.ColumnOperation.operation_type:type_name -> api.v1alpha1.explorer.OperationType
	32, // 47: api.v1alpha1.explorer.ColumnOperation.format_series:type_name -> api.v1alpha1.explorer.FormatSeries
	33, // 48: api.v1alpha1.explorer.ColumnOperation.pad_operation:type_name -> api.v1alpha1.explorer.PadOperation
	12, // 49: api.v1alpha1.explorer.MapNode.Mapping.condition:type_name -> api.v1alpha1.explorer.ExpressionNode
	12, // 50: api.v1alpha1.explorer.MapNode.Mapping.result:type_name -> api.v1alpha1.explorer.ExpressionNode
	51, // [51:51] is the sub-list for method output_type
	51, // [51:51] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_api_v1alpha1_explorer_pipeline_proto_init() }
func file_api_v1alpha1_explorer_pipeline_proto_init() {
	if File_api_v1alpha1_explorer_pipeline_proto != nil {
		return
	}
	file_api_v1alpha1_explorer_pipeline_proto_msgTypes[1].OneofWrappers = []any{
		(*Node_FromNode)(nil),
		(*Node_FilterNode)(nil),
		(*Node_DeriveNode)(nil),
		(*Node_GroupNode)(nil),
		(*Node_JoinNode)(nil),
		(*Node_SelectNode)(nil),
		(*Node_AggregateNode)(nil),
		(*Node_TakeNode)(nil),
		(*Node_JsonNode)(nil),
		(*Node_MapNode)(nil),
		(*Node_ReplaceNode)(nil),
		(*Node_SortNode)(nil),
		(*Node_StringManipulationNode)(nil),
		(*Node_TransposeNode)(nil),
	}
	file_api_v1alpha1_explorer_pipeline_proto_msgTypes[32].OneofWrappers = []any{
		(*ColumnOperation_FloatValue)(nil),
		(*ColumnOperation_FormatSeries)(nil),
		(*ColumnOperation_PadOperation)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_v1alpha1_explorer_pipeline_proto_rawDesc), len(file_api_v1alpha1_explorer_pipeline_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_v1alpha1_explorer_pipeline_proto_goTypes,
		DependencyIndexes: file_api_v1alpha1_explorer_pipeline_proto_depIdxs,
		EnumInfos:         file_api_v1alpha1_explorer_pipeline_proto_enumTypes,
		MessageInfos:      file_api_v1alpha1_explorer_pipeline_proto_msgTypes,
	}.Build()
	File_api_v1alpha1_explorer_pipeline_proto = out.File
	file_api_v1alpha1_explorer_pipeline_proto_goTypes = nil
	file_api_v1alpha1_explorer_pipeline_proto_depIdxs = nil
}
