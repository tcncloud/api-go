// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        (unknown)
// source: api/v1alpha1/explorer/service.proto

package explorer

import (
	_ "github.com/tcncloud/api-go/annotations"
	commons "github.com/tcncloud/api-go/api/commons"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GetWeeksOfDataRequest is the request to get the number of weeks of data.
type GetWeeksOfDataRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// org_id to retrieve value for
	OrgId         string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWeeksOfDataRequest) Reset() {
	*x = GetWeeksOfDataRequest{}
	mi := &file_api_v1alpha1_explorer_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWeeksOfDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWeeksOfDataRequest) ProtoMessage() {}

func (x *GetWeeksOfDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWeeksOfDataRequest.ProtoReflect.Descriptor instead.
func (*GetWeeksOfDataRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetWeeksOfDataRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

// GetWeeksOfDataResponse contains the number of weeks of data.
type GetWeeksOfDataResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// number of weeks of data
	WeeksOfData int32 `protobuf:"varint,1,opt,name=weeks_of_data,json=weeksOfData,proto3" json:"weeks_of_data,omitempty"`
	// access_start_date is the start date of the data
	AccessStartDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=access_start_date,json=accessStartDate,proto3" json:"access_start_date,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetWeeksOfDataResponse) Reset() {
	*x = GetWeeksOfDataResponse{}
	mi := &file_api_v1alpha1_explorer_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWeeksOfDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWeeksOfDataResponse) ProtoMessage() {}

func (x *GetWeeksOfDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWeeksOfDataResponse.ProtoReflect.Descriptor instead.
func (*GetWeeksOfDataResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetWeeksOfDataResponse) GetWeeksOfData() int32 {
	if x != nil {
		return x.WeeksOfData
	}
	return 0
}

func (x *GetWeeksOfDataResponse) GetAccessStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.AccessStartDate
	}
	return nil
}

// ListDatasourceSchemasRequest is the request to list datasource schemas.
type ListDatasourceSchemasRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// datasource_names is a table name filter for the datasources to list.
	DatasourceNames []string `protobuf:"bytes,1,rep,name=datasource_names,json=datasourceNames,proto3" json:"datasource_names,omitempty"`
	// datasource_type is the type of the datasource to list.
	// If not specified, all datasources will be listed.
	DatasourceType DatasourceType `protobuf:"varint,2,opt,name=datasource_type,json=datasourceType,proto3,enum=api.v1alpha1.explorer.DatasourceType" json:"datasource_type,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListDatasourceSchemasRequest) Reset() {
	*x = ListDatasourceSchemasRequest{}
	mi := &file_api_v1alpha1_explorer_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDatasourceSchemasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDatasourceSchemasRequest) ProtoMessage() {}

func (x *ListDatasourceSchemasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDatasourceSchemasRequest.ProtoReflect.Descriptor instead.
func (*ListDatasourceSchemasRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListDatasourceSchemasRequest) GetDatasourceNames() []string {
	if x != nil {
		return x.DatasourceNames
	}
	return nil
}

func (x *ListDatasourceSchemasRequest) GetDatasourceType() DatasourceType {
	if x != nil {
		return x.DatasourceType
	}
	return DatasourceType_DATASOURCE_TYPE_UNSPECIFIED
}

// ListDatasourceSchemasResponse contains datasources and their schemas.
type ListDatasourceSchemasResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of schemas
	Schemas       []*Schema `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDatasourceSchemasResponse) Reset() {
	*x = ListDatasourceSchemasResponse{}
	mi := &file_api_v1alpha1_explorer_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDatasourceSchemasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDatasourceSchemasResponse) ProtoMessage() {}

func (x *ListDatasourceSchemasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDatasourceSchemasResponse.ProtoReflect.Descriptor instead.
func (*ListDatasourceSchemasResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListDatasourceSchemasResponse) GetSchemas() []*Schema {
	if x != nil {
		return x.Schemas
	}
	return nil
}

// QueryRequest is the request to query a datasource.
type QueryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// datasource_name is the name of the datasource to query.
	DatasourceName string `protobuf:"bytes,1,opt,name=datasource_name,json=datasourceName,proto3" json:"datasource_name,omitempty"`
	// datasource_type is the type of the datasource to query.
	DatasourceType DatasourceType `protobuf:"varint,2,opt,name=datasource_type,json=datasourceType,proto3,enum=api.v1alpha1.explorer.DatasourceType" json:"datasource_type,omitempty"`
	// query is the query to execute.
	//
	// Types that are valid to be assigned to Query:
	//
	//	*QueryRequest_Pipeline
	//	*QueryRequest_Prql
	//	*QueryRequest_QueryPipeline
	Query isQueryRequest_Query `protobuf_oneof:"query"`
	// org_id for ownership of the data
	OrgIds []string `protobuf:"bytes,5,rep,name=org_ids,json=orgIds,proto3" json:"org_ids,omitempty"`
	// start_time is the start time of the query.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// end_time is the end time of the query.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// timezone is IESG timezone name
	// this is how the timezone is represented in the query
	Timezone string `protobuf:"bytes,8,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// pipeline_parameters is the parameters for the pipeline.
	PipelineParameters *Parameters `protobuf:"bytes,9,opt,name=pipeline_parameters,json=pipelineParameters,proto3" json:"pipeline_parameters,omitempty"`
	// ui_trace_id is the trace id of the query.
	UiTraceId string `protobuf:"bytes,10,opt,name=ui_trace_id,json=uiTraceId,proto3" json:"ui_trace_id,omitempty"`
	// comment is the comment for the query.
	Comment string `protobuf:"bytes,11,opt,name=comment,proto3" json:"comment,omitempty"`
	// format is the format of the result.
	Format ExportFormat `protobuf:"varint,12,opt,name=format,proto3,enum=api.v1alpha1.explorer.ExportFormat" json:"format,omitempty"`
	// time period quick filter
	// if time period is used, cannot use start_time and end_time
	TimePeriod commons.TimePeriod `protobuf:"varint,15,opt,name=time_period,json=timePeriod,proto3,enum=api.commons.TimePeriod" json:"time_period,omitempty"`
	// report_date is to seed the time period for, if empty, the default value is now
	ReportDate    *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=report_date,json=reportDate,proto3" json:"report_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	mi := &file_api_v1alpha1_explorer_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_service_proto_rawDescGZIP(), []int{4}
}

func (x *QueryRequest) GetDatasourceName() string {
	if x != nil {
		return x.DatasourceName
	}
	return ""
}

func (x *QueryRequest) GetDatasourceType() DatasourceType {
	if x != nil {
		return x.DatasourceType
	}
	return DatasourceType_DATASOURCE_TYPE_UNSPECIFIED
}

func (x *QueryRequest) GetQuery() isQueryRequest_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *QueryRequest) GetPipeline() string {
	if x != nil {
		if x, ok := x.Query.(*QueryRequest_Pipeline); ok {
			return x.Pipeline
		}
	}
	return ""
}

func (x *QueryRequest) GetPrql() string {
	if x != nil {
		if x, ok := x.Query.(*QueryRequest_Prql); ok {
			return x.Prql
		}
	}
	return ""
}

func (x *QueryRequest) GetQueryPipeline() *Pipeline {
	if x != nil {
		if x, ok := x.Query.(*QueryRequest_QueryPipeline); ok {
			return x.QueryPipeline
		}
	}
	return nil
}

func (x *QueryRequest) GetOrgIds() []string {
	if x != nil {
		return x.OrgIds
	}
	return nil
}

func (x *QueryRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *QueryRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *QueryRequest) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *QueryRequest) GetPipelineParameters() *Parameters {
	if x != nil {
		return x.PipelineParameters
	}
	return nil
}

func (x *QueryRequest) GetUiTraceId() string {
	if x != nil {
		return x.UiTraceId
	}
	return ""
}

func (x *QueryRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *QueryRequest) GetFormat() ExportFormat {
	if x != nil {
		return x.Format
	}
	return ExportFormat_REPORT_FORMAT_UNSPECIFIED
}

func (x *QueryRequest) GetTimePeriod() commons.TimePeriod {
	if x != nil {
		return x.TimePeriod
	}
	return commons.TimePeriod(0)
}

func (x *QueryRequest) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

type isQueryRequest_Query interface {
	isQueryRequest_Query()
}

type QueryRequest_Pipeline struct {
	// pipeline to be compiled to prql
	Pipeline string `protobuf:"bytes,3,opt,name=pipeline,proto3,oneof"`
}

type QueryRequest_Prql struct {
	// prql query to execute
	Prql string `protobuf:"bytes,4,opt,name=prql,proto3,oneof"`
}

type QueryRequest_QueryPipeline struct {
	// query pipeline is a structured representation of a query
	QueryPipeline *Pipeline `protobuf:"bytes,16,opt,name=query_pipeline,json=queryPipeline,proto3,oneof"`
}

func (*QueryRequest_Pipeline) isQueryRequest_Query() {}

func (*QueryRequest_Prql) isQueryRequest_Query() {}

func (*QueryRequest_QueryPipeline) isQueryRequest_Query() {}

// QueryResponse contains the result of a datasource query.
type QueryResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// result_url is the URL to the result of the query.
	ResultUrl string `protobuf:"bytes,1,opt,name=result_url,json=resultUrl,proto3" json:"result_url,omitempty"`
	// result_size_bytes is the size of the result in bytes.
	ResultSizeBytes int64 `protobuf:"varint,2,opt,name=result_size_bytes,json=resultSizeBytes,proto3" json:"result_size_bytes,omitempty"`
	// map of datasources and a boolean indicating if the datasource is filtered by time
	TimeFilteredDatasources map[string]bool `protobuf:"bytes,3,rep,name=time_filtered_datasources,json=timeFilteredDatasources,proto3" json:"time_filtered_datasources,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	mi := &file_api_v1alpha1_explorer_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_service_proto_rawDescGZIP(), []int{5}
}

func (x *QueryResponse) GetResultUrl() string {
	if x != nil {
		return x.ResultUrl
	}
	return ""
}

func (x *QueryResponse) GetResultSizeBytes() int64 {
	if x != nil {
		return x.ResultSizeBytes
	}
	return 0
}

func (x *QueryResponse) GetTimeFilteredDatasources() map[string]bool {
	if x != nil {
		return x.TimeFilteredDatasources
	}
	return nil
}

// SupportQueryRequest is the request to query a datasource with support permissions.
type SupportQueryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// query_request is the query to execute.
	QueryRequest *QueryRequest `protobuf:"bytes,1,opt,name=query_request,json=queryRequest,proto3" json:"query_request,omitempty"`
	// include debug information in the response
	Debug         bool `protobuf:"varint,2,opt,name=debug,proto3" json:"debug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SupportQueryRequest) Reset() {
	*x = SupportQueryRequest{}
	mi := &file_api_v1alpha1_explorer_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SupportQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportQueryRequest) ProtoMessage() {}

func (x *SupportQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportQueryRequest.ProtoReflect.Descriptor instead.
func (*SupportQueryRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_service_proto_rawDescGZIP(), []int{6}
}

func (x *SupportQueryRequest) GetQueryRequest() *QueryRequest {
	if x != nil {
		return x.QueryRequest
	}
	return nil
}

func (x *SupportQueryRequest) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

// SupportQueryResponse contains the result of a datasource query with support permissions.
type SupportQueryResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// result_url is the URL to the result of the query.
	ResultUrl string `protobuf:"bytes,1,opt,name=result_url,json=resultUrl,proto3" json:"result_url,omitempty"`
	// result_size_bytes is the size of the result in bytes.
	ResultSizeBytes int64 `protobuf:"varint,2,opt,name=result_size_bytes,json=resultSizeBytes,proto3" json:"result_size_bytes,omitempty"`
	// the prql query string
	Prql string `protobuf:"bytes,3,opt,name=prql,proto3" json:"prql,omitempty"`
	// the sql query string
	Sql string `protobuf:"bytes,4,opt,name=sql,proto3" json:"sql,omitempty"`
	// the sql explain string
	Explain string `protobuf:"bytes,5,opt,name=explain,proto3" json:"explain,omitempty"`
	// map of datasources and a boolean indicating if the datasource is filtered by time
	TimeFilteredDatasources map[string]bool `protobuf:"bytes,6,rep,name=time_filtered_datasources,json=timeFilteredDatasources,proto3" json:"time_filtered_datasources,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *SupportQueryResponse) Reset() {
	*x = SupportQueryResponse{}
	mi := &file_api_v1alpha1_explorer_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SupportQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportQueryResponse) ProtoMessage() {}

func (x *SupportQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportQueryResponse.ProtoReflect.Descriptor instead.
func (*SupportQueryResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_service_proto_rawDescGZIP(), []int{7}
}

func (x *SupportQueryResponse) GetResultUrl() string {
	if x != nil {
		return x.ResultUrl
	}
	return ""
}

func (x *SupportQueryResponse) GetResultSizeBytes() int64 {
	if x != nil {
		return x.ResultSizeBytes
	}
	return 0
}

func (x *SupportQueryResponse) GetPrql() string {
	if x != nil {
		return x.Prql
	}
	return ""
}

func (x *SupportQueryResponse) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *SupportQueryResponse) GetExplain() string {
	if x != nil {
		return x.Explain
	}
	return ""
}

func (x *SupportQueryResponse) GetTimeFilteredDatasources() map[string]bool {
	if x != nil {
		return x.TimeFilteredDatasources
	}
	return nil
}

// QueryExplainRequest is the request to retrieve debug data for a query.
type QueryExplainRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QueryRequest  *QueryRequest          `protobuf:"bytes,1,opt,name=query_request,json=queryRequest,proto3" json:"query_request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryExplainRequest) Reset() {
	*x = QueryExplainRequest{}
	mi := &file_api_v1alpha1_explorer_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryExplainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExplainRequest) ProtoMessage() {}

func (x *QueryExplainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExplainRequest.ProtoReflect.Descriptor instead.
func (*QueryExplainRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_service_proto_rawDescGZIP(), []int{8}
}

func (x *QueryExplainRequest) GetQueryRequest() *QueryRequest {
	if x != nil {
		return x.QueryRequest
	}
	return nil
}

// QueryExplainResponse contains the result of a query explain.
type QueryExplainResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// result_url is the URL to the result of the query.
	ResultUrl string `protobuf:"bytes,1,opt,name=result_url,json=resultUrl,proto3" json:"result_url,omitempty"`
	// result_size_bytes is the size of the result in bytes.
	ResultSizeBytes int64 `protobuf:"varint,2,opt,name=result_size_bytes,json=resultSizeBytes,proto3" json:"result_size_bytes,omitempty"`
	// the prql query string
	Prql string `protobuf:"bytes,3,opt,name=prql,proto3" json:"prql,omitempty"`
	// the sql query string
	Sql string `protobuf:"bytes,4,opt,name=sql,proto3" json:"sql,omitempty"`
	// the sql explain string
	Explain string `protobuf:"bytes,5,opt,name=explain,proto3" json:"explain,omitempty"`
	// map of datasources and a boolean indicating if the datasource is filtered by time
	TimeFilteredDatasources map[string]bool `protobuf:"bytes,6,rep,name=time_filtered_datasources,json=timeFilteredDatasources,proto3" json:"time_filtered_datasources,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *QueryExplainResponse) Reset() {
	*x = QueryExplainResponse{}
	mi := &file_api_v1alpha1_explorer_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryExplainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExplainResponse) ProtoMessage() {}

func (x *QueryExplainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_explorer_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExplainResponse.ProtoReflect.Descriptor instead.
func (*QueryExplainResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_explorer_service_proto_rawDescGZIP(), []int{9}
}

func (x *QueryExplainResponse) GetResultUrl() string {
	if x != nil {
		return x.ResultUrl
	}
	return ""
}

func (x *QueryExplainResponse) GetResultSizeBytes() int64 {
	if x != nil {
		return x.ResultSizeBytes
	}
	return 0
}

func (x *QueryExplainResponse) GetPrql() string {
	if x != nil {
		return x.Prql
	}
	return ""
}

func (x *QueryExplainResponse) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *QueryExplainResponse) GetExplain() string {
	if x != nil {
		return x.Explain
	}
	return ""
}

func (x *QueryExplainResponse) GetTimeFilteredDatasources() map[string]bool {
	if x != nil {
		return x.TimeFilteredDatasources
	}
	return nil
}

var File_api_v1alpha1_explorer_service_proto protoreflect.FileDescriptor

var file_api_v1alpha1_explorer_service_proto_rawDesc = []byte{
	0x0a, 0x23, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x1a, 0x17, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2f, 0x62, 0x69, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
	0x72, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x24, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x57, 0x65, 0x65, 0x6b,
	0x73, 0x4f, 0x66, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x57, 0x65, 0x65,
	0x6b, 0x73, 0x4f, 0x66, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x4f, 0x66,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0x99, 0x01, 0x0a,
	0x1c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x58, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x72, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x22, 0x8b, 0x06, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x08,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x72,
	0x71, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x72, 0x71, 0x6c,
	0x12, 0x48, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x12, 0x52, 0x0a, 0x13, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x12, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x75, 0x69, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x69, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x3b, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x38, 0x0a, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x04, 0x08, 0x0d,
	0x10, 0x0e, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x22, 0xa5, 0x02, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x72,
	0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x7d, 0x0a,
	0x19, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x17, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x4a, 0x0a, 0x1c,
	0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x75, 0x0a, 0x13, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x48, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0xf4, 0x02, 0x0a, 0x14, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x71, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x72, 0x71, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x12, 0x84, 0x01, 0x0a, 0x19, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x17, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x4a, 0x0a, 0x1c, 0x54, 0x69,
	0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5f, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a,
	0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf4, 0x02, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x72, 0x6c, 0x12,
	0x2a, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x72, 0x71, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x72, 0x71, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x84, 0x01, 0x0a, 0x19,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x74, 0x69, 0x6d, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x1a, 0x4a, 0x0a, 0x1c, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x85,
	0x07, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xcb, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x33, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x65, 0x78, 0x70, 0x6c,
	0x6f, 0x72, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x3a, 0x01, 0x2a, 0x22, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
	0x72, 0x2f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x12, 0x8b, 0x01, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2f,
	0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0xb0,
	0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xfa, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a,
	0x22, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
	0x72, 0x2f, 0x67, 0x65, 0x74, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0xb0, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xc8, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34,
	0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2f, 0x65, 0x78, 0x70, 0x6c,
	0x6f, 0x72, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x71, 0x75, 0x65, 0x72, 0x79, 0x65, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x12, 0xaf, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x65, 0x6b,
	0x73, 0x4f, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x4f, 0x66, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x4f, 0x66, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2f, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6b, 0x73,
	0x6f, 0x66, 0x64, 0x61, 0x74, 0x61, 0x42, 0xd1, 0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x65, 0x78, 0x70, 0x6c,
	0x6f, 0x72, 0x65, 0x72, 0x42, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0xa2, 0x02, 0x03, 0x41, 0x56, 0x45, 0xaa, 0x02, 0x15, 0x41,
	0x70, 0x69, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c,
	0x6f, 0x72, 0x65, 0x72, 0xca, 0x02, 0x15, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x5c, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0xe2, 0x02, 0x21, 0x41,
	0x70, 0x69, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x45, 0x78, 0x70, 0x6c,
	0x6f, 0x72, 0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x17, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x3a, 0x3a, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_api_v1alpha1_explorer_service_proto_rawDescOnce sync.Once
	file_api_v1alpha1_explorer_service_proto_rawDescData = file_api_v1alpha1_explorer_service_proto_rawDesc
)

func file_api_v1alpha1_explorer_service_proto_rawDescGZIP() []byte {
	file_api_v1alpha1_explorer_service_proto_rawDescOnce.Do(func() {
		file_api_v1alpha1_explorer_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1alpha1_explorer_service_proto_rawDescData)
	})
	return file_api_v1alpha1_explorer_service_proto_rawDescData
}

var file_api_v1alpha1_explorer_service_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_api_v1alpha1_explorer_service_proto_goTypes = []any{
	(*GetWeeksOfDataRequest)(nil),         // 0: api.v1alpha1.explorer.GetWeeksOfDataRequest
	(*GetWeeksOfDataResponse)(nil),        // 1: api.v1alpha1.explorer.GetWeeksOfDataResponse
	(*ListDatasourceSchemasRequest)(nil),  // 2: api.v1alpha1.explorer.ListDatasourceSchemasRequest
	(*ListDatasourceSchemasResponse)(nil), // 3: api.v1alpha1.explorer.ListDatasourceSchemasResponse
	(*QueryRequest)(nil),                  // 4: api.v1alpha1.explorer.QueryRequest
	(*QueryResponse)(nil),                 // 5: api.v1alpha1.explorer.QueryResponse
	(*SupportQueryRequest)(nil),           // 6: api.v1alpha1.explorer.SupportQueryRequest
	(*SupportQueryResponse)(nil),          // 7: api.v1alpha1.explorer.SupportQueryResponse
	(*QueryExplainRequest)(nil),           // 8: api.v1alpha1.explorer.QueryExplainRequest
	(*QueryExplainResponse)(nil),          // 9: api.v1alpha1.explorer.QueryExplainResponse
	nil,                                   // 10: api.v1alpha1.explorer.QueryResponse.TimeFilteredDatasourcesEntry
	nil,                                   // 11: api.v1alpha1.explorer.SupportQueryResponse.TimeFilteredDatasourcesEntry
	nil,                                   // 12: api.v1alpha1.explorer.QueryExplainResponse.TimeFilteredDatasourcesEntry
	(*timestamppb.Timestamp)(nil),         // 13: google.protobuf.Timestamp
	(DatasourceType)(0),                   // 14: api.v1alpha1.explorer.DatasourceType
	(*Schema)(nil),                        // 15: api.v1alpha1.explorer.Schema
	(*Pipeline)(nil),                      // 16: api.v1alpha1.explorer.Pipeline
	(*Parameters)(nil),                    // 17: api.v1alpha1.explorer.Parameters
	(ExportFormat)(0),                     // 18: api.v1alpha1.explorer.ExportFormat
	(commons.TimePeriod)(0),               // 19: api.commons.TimePeriod
}
var file_api_v1alpha1_explorer_service_proto_depIdxs = []int32{
	13, // 0: api.v1alpha1.explorer.GetWeeksOfDataResponse.access_start_date:type_name -> google.protobuf.Timestamp
	14, // 1: api.v1alpha1.explorer.ListDatasourceSchemasRequest.datasource_type:type_name -> api.v1alpha1.explorer.DatasourceType
	15, // 2: api.v1alpha1.explorer.ListDatasourceSchemasResponse.schemas:type_name -> api.v1alpha1.explorer.Schema
	14, // 3: api.v1alpha1.explorer.QueryRequest.datasource_type:type_name -> api.v1alpha1.explorer.DatasourceType
	16, // 4: api.v1alpha1.explorer.QueryRequest.query_pipeline:type_name -> api.v1alpha1.explorer.Pipeline
	13, // 5: api.v1alpha1.explorer.QueryRequest.start_time:type_name -> google.protobuf.Timestamp
	13, // 6: api.v1alpha1.explorer.QueryRequest.end_time:type_name -> google.protobuf.Timestamp
	17, // 7: api.v1alpha1.explorer.QueryRequest.pipeline_parameters:type_name -> api.v1alpha1.explorer.Parameters
	18, // 8: api.v1alpha1.explorer.QueryRequest.format:type_name -> api.v1alpha1.explorer.ExportFormat
	19, // 9: api.v1alpha1.explorer.QueryRequest.time_period:type_name -> api.commons.TimePeriod
	13, // 10: api.v1alpha1.explorer.QueryRequest.report_date:type_name -> google.protobuf.Timestamp
	10, // 11: api.v1alpha1.explorer.QueryResponse.time_filtered_datasources:type_name -> api.v1alpha1.explorer.QueryResponse.TimeFilteredDatasourcesEntry
	4,  // 12: api.v1alpha1.explorer.SupportQueryRequest.query_request:type_name -> api.v1alpha1.explorer.QueryRequest
	11, // 13: api.v1alpha1.explorer.SupportQueryResponse.time_filtered_datasources:type_name -> api.v1alpha1.explorer.SupportQueryResponse.TimeFilteredDatasourcesEntry
	4,  // 14: api.v1alpha1.explorer.QueryExplainRequest.query_request:type_name -> api.v1alpha1.explorer.QueryRequest
	12, // 15: api.v1alpha1.explorer.QueryExplainResponse.time_filtered_datasources:type_name -> api.v1alpha1.explorer.QueryExplainResponse.TimeFilteredDatasourcesEntry
	2,  // 16: api.v1alpha1.explorer.ExplorerService.ListDatasourceSchemas:input_type -> api.v1alpha1.explorer.ListDatasourceSchemasRequest
	4,  // 17: api.v1alpha1.explorer.ExplorerService.Query:input_type -> api.v1alpha1.explorer.QueryRequest
	6,  // 18: api.v1alpha1.explorer.ExplorerService.GetSupportQuery:input_type -> api.v1alpha1.explorer.SupportQueryRequest
	8,  // 19: api.v1alpha1.explorer.ExplorerService.GetQueryExplain:input_type -> api.v1alpha1.explorer.QueryExplainRequest
	0,  // 20: api.v1alpha1.explorer.ExplorerService.GetWeeksOfData:input_type -> api.v1alpha1.explorer.GetWeeksOfDataRequest
	3,  // 21: api.v1alpha1.explorer.ExplorerService.ListDatasourceSchemas:output_type -> api.v1alpha1.explorer.ListDatasourceSchemasResponse
	5,  // 22: api.v1alpha1.explorer.ExplorerService.Query:output_type -> api.v1alpha1.explorer.QueryResponse
	7,  // 23: api.v1alpha1.explorer.ExplorerService.GetSupportQuery:output_type -> api.v1alpha1.explorer.SupportQueryResponse
	9,  // 24: api.v1alpha1.explorer.ExplorerService.GetQueryExplain:output_type -> api.v1alpha1.explorer.QueryExplainResponse
	1,  // 25: api.v1alpha1.explorer.ExplorerService.GetWeeksOfData:output_type -> api.v1alpha1.explorer.GetWeeksOfDataResponse
	21, // [21:26] is the sub-list for method output_type
	16, // [16:21] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_api_v1alpha1_explorer_service_proto_init() }
func file_api_v1alpha1_explorer_service_proto_init() {
	if File_api_v1alpha1_explorer_service_proto != nil {
		return
	}
	file_api_v1alpha1_explorer_entities_proto_init()
	file_api_v1alpha1_explorer_pipeline_proto_init()
	file_api_v1alpha1_explorer_service_proto_msgTypes[4].OneofWrappers = []any{
		(*QueryRequest_Pipeline)(nil),
		(*QueryRequest_Prql)(nil),
		(*QueryRequest_QueryPipeline)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1alpha1_explorer_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1alpha1_explorer_service_proto_goTypes,
		DependencyIndexes: file_api_v1alpha1_explorer_service_proto_depIdxs,
		MessageInfos:      file_api_v1alpha1_explorer_service_proto_msgTypes,
	}.Build()
	File_api_v1alpha1_explorer_service_proto = out.File
	file_api_v1alpha1_explorer_service_proto_rawDesc = nil
	file_api_v1alpha1_explorer_service_proto_goTypes = nil
	file_api_v1alpha1_explorer_service_proto_depIdxs = nil
}
