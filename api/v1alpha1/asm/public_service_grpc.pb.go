// Copyright (c) 2020, TCN Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1alpha1/asm/public_service.proto

package asm

import (
	context "context"
	commons "github.com/tcncloud/api-go/api/commons"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Asm_StreamAgentState_FullMethodName             = "/api.v1alpha1.asm.Asm/StreamAgentState"
	Asm_ManagerStreamAgentState_FullMethodName      = "/api.v1alpha1.asm.Asm/ManagerStreamAgentState"
	Asm_PushEvents_FullMethodName                   = "/api.v1alpha1.asm.Asm/PushEvents"
	Asm_CreateSession_FullMethodName                = "/api.v1alpha1.asm.Asm/CreateSession"
	Asm_EndSession_FullMethodName                   = "/api.v1alpha1.asm.Asm/EndSession"
	Asm_GetCurrentSession_FullMethodName            = "/api.v1alpha1.asm.Asm/GetCurrentSession"
	Asm_EnableVoice_FullMethodName                  = "/api.v1alpha1.asm.Asm/EnableVoice"
	Asm_DisableVoice_FullMethodName                 = "/api.v1alpha1.asm.Asm/DisableVoice"
	Asm_ListConversations_FullMethodName            = "/api.v1alpha1.asm.Asm/ListConversations"
	Asm_AssignNewConversation_FullMethodName        = "/api.v1alpha1.asm.Asm/AssignNewConversation"
	Asm_ListAgents_FullMethodName                   = "/api.v1alpha1.asm.Asm/ListAgents"
	Asm_SetConversationCollectedData_FullMethodName = "/api.v1alpha1.asm.Asm/SetConversationCollectedData"
	Asm_GetQueuesDetails_FullMethodName             = "/api.v1alpha1.asm.Asm/GetQueuesDetails"
)

// AsmClient is the client API for Asm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AsmClient interface {
	// Streams back status updates for the given asm session
	// only the asm session sid filter is allowed
	StreamAgentState(ctx context.Context, in *StreamAgentStateReq, opts ...grpc.CallOption) (Asm_StreamAgentStateClient, error)
	// Streams back statuses for the desired filter
	ManagerStreamAgentState(ctx context.Context, in *ManagerStreamAgentStateReq, opts ...grpc.CallOption) (Asm_ManagerStreamAgentStateClient, error)
	PushEvents(ctx context.Context, in *PushEventsReq, opts ...grpc.CallOption) (*PushEventsRes, error)
	// Creates an agent session and enables the voice channel
	CreateSession(ctx context.Context, in *CreateSessionReq, opts ...grpc.CallOption) (*CreateSessionRes, error)
	// Closes an asm session and all sub sessions
	EndSession(ctx context.Context, in *EndSessionReq, opts ...grpc.CallOption) (*EndSessionRes, error)
	// Gets an agent's current asm session
	GetCurrentSession(ctx context.Context, in *GetCurrentSessionReq, opts ...grpc.CallOption) (*AsmSession, error)
	// Updates the currently active subsession
	EnableVoice(ctx context.Context, in *EnableVoiceReq, opts ...grpc.CallOption) (*EnableVoiceRes, error)
	DisableVoice(ctx context.Context, in *DisableVoiceReq, opts ...grpc.CallOption) (*DisableVoiceRes, error)
	// Lists the conversations for an assigned agent
	ListConversations(ctx context.Context, in *ListConversationsReq, opts ...grpc.CallOption) (*ListConversationsRes, error)
	// Assign agent to matched conversation based on skills and channelTypes requested
	AssignNewConversation(ctx context.Context, in *AssignNewConversationReq, opts ...grpc.CallOption) (*AssignNewConversationRes, error)
	// List all agents for the given user. Contains statistical enrichments for each agent and their conversations.
	ListAgents(ctx context.Context, in *ListAgentsReq, opts ...grpc.CallOption) (*ListAgentsRes, error)
	// Set collected data per conversation
	SetConversationCollectedData(ctx context.Context, in *SetConversationCollectedDataReq, opts ...grpc.CallOption) (*SetConversationCollectedDataRes, error)
	// Set queue details
	GetQueuesDetails(ctx context.Context, in *GetQueuesDetailsReq, opts ...grpc.CallOption) (*commons.GetQueuesDetailsRes, error)
}

type asmClient struct {
	cc grpc.ClientConnInterface
}

func NewAsmClient(cc grpc.ClientConnInterface) AsmClient {
	return &asmClient{cc}
}

func (c *asmClient) StreamAgentState(ctx context.Context, in *StreamAgentStateReq, opts ...grpc.CallOption) (Asm_StreamAgentStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Asm_ServiceDesc.Streams[0], Asm_StreamAgentState_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &asmStreamAgentStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Asm_StreamAgentStateClient interface {
	Recv() (*commons.StreamAgentStateRes, error)
	grpc.ClientStream
}

type asmStreamAgentStateClient struct {
	grpc.ClientStream
}

func (x *asmStreamAgentStateClient) Recv() (*commons.StreamAgentStateRes, error) {
	m := new(commons.StreamAgentStateRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *asmClient) ManagerStreamAgentState(ctx context.Context, in *ManagerStreamAgentStateReq, opts ...grpc.CallOption) (Asm_ManagerStreamAgentStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Asm_ServiceDesc.Streams[1], Asm_ManagerStreamAgentState_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &asmManagerStreamAgentStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Asm_ManagerStreamAgentStateClient interface {
	Recv() (*commons.AgentState, error)
	grpc.ClientStream
}

type asmManagerStreamAgentStateClient struct {
	grpc.ClientStream
}

func (x *asmManagerStreamAgentStateClient) Recv() (*commons.AgentState, error) {
	m := new(commons.AgentState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *asmClient) PushEvents(ctx context.Context, in *PushEventsReq, opts ...grpc.CallOption) (*PushEventsRes, error) {
	out := new(PushEventsRes)
	err := c.cc.Invoke(ctx, Asm_PushEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmClient) CreateSession(ctx context.Context, in *CreateSessionReq, opts ...grpc.CallOption) (*CreateSessionRes, error) {
	out := new(CreateSessionRes)
	err := c.cc.Invoke(ctx, Asm_CreateSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmClient) EndSession(ctx context.Context, in *EndSessionReq, opts ...grpc.CallOption) (*EndSessionRes, error) {
	out := new(EndSessionRes)
	err := c.cc.Invoke(ctx, Asm_EndSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmClient) GetCurrentSession(ctx context.Context, in *GetCurrentSessionReq, opts ...grpc.CallOption) (*AsmSession, error) {
	out := new(AsmSession)
	err := c.cc.Invoke(ctx, Asm_GetCurrentSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmClient) EnableVoice(ctx context.Context, in *EnableVoiceReq, opts ...grpc.CallOption) (*EnableVoiceRes, error) {
	out := new(EnableVoiceRes)
	err := c.cc.Invoke(ctx, Asm_EnableVoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmClient) DisableVoice(ctx context.Context, in *DisableVoiceReq, opts ...grpc.CallOption) (*DisableVoiceRes, error) {
	out := new(DisableVoiceRes)
	err := c.cc.Invoke(ctx, Asm_DisableVoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmClient) ListConversations(ctx context.Context, in *ListConversationsReq, opts ...grpc.CallOption) (*ListConversationsRes, error) {
	out := new(ListConversationsRes)
	err := c.cc.Invoke(ctx, Asm_ListConversations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmClient) AssignNewConversation(ctx context.Context, in *AssignNewConversationReq, opts ...grpc.CallOption) (*AssignNewConversationRes, error) {
	out := new(AssignNewConversationRes)
	err := c.cc.Invoke(ctx, Asm_AssignNewConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmClient) ListAgents(ctx context.Context, in *ListAgentsReq, opts ...grpc.CallOption) (*ListAgentsRes, error) {
	out := new(ListAgentsRes)
	err := c.cc.Invoke(ctx, Asm_ListAgents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmClient) SetConversationCollectedData(ctx context.Context, in *SetConversationCollectedDataReq, opts ...grpc.CallOption) (*SetConversationCollectedDataRes, error) {
	out := new(SetConversationCollectedDataRes)
	err := c.cc.Invoke(ctx, Asm_SetConversationCollectedData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmClient) GetQueuesDetails(ctx context.Context, in *GetQueuesDetailsReq, opts ...grpc.CallOption) (*commons.GetQueuesDetailsRes, error) {
	out := new(commons.GetQueuesDetailsRes)
	err := c.cc.Invoke(ctx, Asm_GetQueuesDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsmServer is the server API for Asm service.
// All implementations must embed UnimplementedAsmServer
// for forward compatibility
type AsmServer interface {
	// Streams back status updates for the given asm session
	// only the asm session sid filter is allowed
	StreamAgentState(*StreamAgentStateReq, Asm_StreamAgentStateServer) error
	// Streams back statuses for the desired filter
	ManagerStreamAgentState(*ManagerStreamAgentStateReq, Asm_ManagerStreamAgentStateServer) error
	PushEvents(context.Context, *PushEventsReq) (*PushEventsRes, error)
	// Creates an agent session and enables the voice channel
	CreateSession(context.Context, *CreateSessionReq) (*CreateSessionRes, error)
	// Closes an asm session and all sub sessions
	EndSession(context.Context, *EndSessionReq) (*EndSessionRes, error)
	// Gets an agent's current asm session
	GetCurrentSession(context.Context, *GetCurrentSessionReq) (*AsmSession, error)
	// Updates the currently active subsession
	EnableVoice(context.Context, *EnableVoiceReq) (*EnableVoiceRes, error)
	DisableVoice(context.Context, *DisableVoiceReq) (*DisableVoiceRes, error)
	// Lists the conversations for an assigned agent
	ListConversations(context.Context, *ListConversationsReq) (*ListConversationsRes, error)
	// Assign agent to matched conversation based on skills and channelTypes requested
	AssignNewConversation(context.Context, *AssignNewConversationReq) (*AssignNewConversationRes, error)
	// List all agents for the given user. Contains statistical enrichments for each agent and their conversations.
	ListAgents(context.Context, *ListAgentsReq) (*ListAgentsRes, error)
	// Set collected data per conversation
	SetConversationCollectedData(context.Context, *SetConversationCollectedDataReq) (*SetConversationCollectedDataRes, error)
	// Set queue details
	GetQueuesDetails(context.Context, *GetQueuesDetailsReq) (*commons.GetQueuesDetailsRes, error)
	mustEmbedUnimplementedAsmServer()
}

// UnimplementedAsmServer must be embedded to have forward compatible implementations.
type UnimplementedAsmServer struct {
}

func (UnimplementedAsmServer) StreamAgentState(*StreamAgentStateReq, Asm_StreamAgentStateServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAgentState not implemented")
}
func (UnimplementedAsmServer) ManagerStreamAgentState(*ManagerStreamAgentStateReq, Asm_ManagerStreamAgentStateServer) error {
	return status.Errorf(codes.Unimplemented, "method ManagerStreamAgentState not implemented")
}
func (UnimplementedAsmServer) PushEvents(context.Context, *PushEventsReq) (*PushEventsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushEvents not implemented")
}
func (UnimplementedAsmServer) CreateSession(context.Context, *CreateSessionReq) (*CreateSessionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedAsmServer) EndSession(context.Context, *EndSessionReq) (*EndSessionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndSession not implemented")
}
func (UnimplementedAsmServer) GetCurrentSession(context.Context, *GetCurrentSessionReq) (*AsmSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentSession not implemented")
}
func (UnimplementedAsmServer) EnableVoice(context.Context, *EnableVoiceReq) (*EnableVoiceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableVoice not implemented")
}
func (UnimplementedAsmServer) DisableVoice(context.Context, *DisableVoiceReq) (*DisableVoiceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableVoice not implemented")
}
func (UnimplementedAsmServer) ListConversations(context.Context, *ListConversationsReq) (*ListConversationsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversations not implemented")
}
func (UnimplementedAsmServer) AssignNewConversation(context.Context, *AssignNewConversationReq) (*AssignNewConversationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignNewConversation not implemented")
}
func (UnimplementedAsmServer) ListAgents(context.Context, *ListAgentsReq) (*ListAgentsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgents not implemented")
}
func (UnimplementedAsmServer) SetConversationCollectedData(context.Context, *SetConversationCollectedDataReq) (*SetConversationCollectedDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConversationCollectedData not implemented")
}
func (UnimplementedAsmServer) GetQueuesDetails(context.Context, *GetQueuesDetailsReq) (*commons.GetQueuesDetailsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueuesDetails not implemented")
}
func (UnimplementedAsmServer) mustEmbedUnimplementedAsmServer() {}

// UnsafeAsmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AsmServer will
// result in compilation errors.
type UnsafeAsmServer interface {
	mustEmbedUnimplementedAsmServer()
}

func RegisterAsmServer(s grpc.ServiceRegistrar, srv AsmServer) {
	s.RegisterService(&Asm_ServiceDesc, srv)
}

func _Asm_StreamAgentState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamAgentStateReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AsmServer).StreamAgentState(m, &asmStreamAgentStateServer{stream})
}

type Asm_StreamAgentStateServer interface {
	Send(*commons.StreamAgentStateRes) error
	grpc.ServerStream
}

type asmStreamAgentStateServer struct {
	grpc.ServerStream
}

func (x *asmStreamAgentStateServer) Send(m *commons.StreamAgentStateRes) error {
	return x.ServerStream.SendMsg(m)
}

func _Asm_ManagerStreamAgentState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ManagerStreamAgentStateReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AsmServer).ManagerStreamAgentState(m, &asmManagerStreamAgentStateServer{stream})
}

type Asm_ManagerStreamAgentStateServer interface {
	Send(*commons.AgentState) error
	grpc.ServerStream
}

type asmManagerStreamAgentStateServer struct {
	grpc.ServerStream
}

func (x *asmManagerStreamAgentStateServer) Send(m *commons.AgentState) error {
	return x.ServerStream.SendMsg(m)
}

func _Asm_PushEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushEventsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmServer).PushEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asm_PushEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmServer).PushEvents(ctx, req.(*PushEventsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asm_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asm_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmServer).CreateSession(ctx, req.(*CreateSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asm_EndSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmServer).EndSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asm_EndSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmServer).EndSession(ctx, req.(*EndSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asm_GetCurrentSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmServer).GetCurrentSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asm_GetCurrentSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmServer).GetCurrentSession(ctx, req.(*GetCurrentSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asm_EnableVoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableVoiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmServer).EnableVoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asm_EnableVoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmServer).EnableVoice(ctx, req.(*EnableVoiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asm_DisableVoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableVoiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmServer).DisableVoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asm_DisableVoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmServer).DisableVoice(ctx, req.(*DisableVoiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asm_ListConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmServer).ListConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asm_ListConversations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmServer).ListConversations(ctx, req.(*ListConversationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asm_AssignNewConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignNewConversationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmServer).AssignNewConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asm_AssignNewConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmServer).AssignNewConversation(ctx, req.(*AssignNewConversationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asm_ListAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmServer).ListAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asm_ListAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmServer).ListAgents(ctx, req.(*ListAgentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asm_SetConversationCollectedData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConversationCollectedDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmServer).SetConversationCollectedData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asm_SetConversationCollectedData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmServer).SetConversationCollectedData(ctx, req.(*SetConversationCollectedDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asm_GetQueuesDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueuesDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmServer).GetQueuesDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asm_GetQueuesDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmServer).GetQueuesDetails(ctx, req.(*GetQueuesDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Asm_ServiceDesc is the grpc.ServiceDesc for Asm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Asm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.asm.Asm",
	HandlerType: (*AsmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushEvents",
			Handler:    _Asm_PushEvents_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _Asm_CreateSession_Handler,
		},
		{
			MethodName: "EndSession",
			Handler:    _Asm_EndSession_Handler,
		},
		{
			MethodName: "GetCurrentSession",
			Handler:    _Asm_GetCurrentSession_Handler,
		},
		{
			MethodName: "EnableVoice",
			Handler:    _Asm_EnableVoice_Handler,
		},
		{
			MethodName: "DisableVoice",
			Handler:    _Asm_DisableVoice_Handler,
		},
		{
			MethodName: "ListConversations",
			Handler:    _Asm_ListConversations_Handler,
		},
		{
			MethodName: "AssignNewConversation",
			Handler:    _Asm_AssignNewConversation_Handler,
		},
		{
			MethodName: "ListAgents",
			Handler:    _Asm_ListAgents_Handler,
		},
		{
			MethodName: "SetConversationCollectedData",
			Handler:    _Asm_SetConversationCollectedData_Handler,
		},
		{
			MethodName: "GetQueuesDetails",
			Handler:    _Asm_GetQueuesDetails_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAgentState",
			Handler:       _Asm_StreamAgentState_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ManagerStreamAgentState",
			Handler:       _Asm_ManagerStreamAgentState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1alpha1/asm/public_service.proto",
}
