// Copyright (c) 2020, TCN Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: api/v1alpha1/asm/service.proto

package asm

import (
	context "context"
	commons "github.com/tcncloud/api-go/api/commons"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AsmApi_CreateSession_FullMethodName                = "/api.v1alpha1.asm.AsmApi/CreateSession"
	AsmApi_GetStatus_FullMethodName                    = "/api.v1alpha1.asm.AsmApi/GetStatus"
	AsmApi_EndSession_FullMethodName                   = "/api.v1alpha1.asm.AsmApi/EndSession"
	AsmApi_GetCurrentSession_FullMethodName            = "/api.v1alpha1.asm.AsmApi/GetCurrentSession"
	AsmApi_SwitchSubsession_FullMethodName             = "/api.v1alpha1.asm.AsmApi/SwitchSubsession"
	AsmApi_ListConversations_FullMethodName            = "/api.v1alpha1.asm.AsmApi/ListConversations"
	AsmApi_AssignNewConversation_FullMethodName        = "/api.v1alpha1.asm.AsmApi/AssignNewConversation"
	AsmApi_ListAgents_FullMethodName                   = "/api.v1alpha1.asm.AsmApi/ListAgents"
	AsmApi_SetConversationCollectedData_FullMethodName = "/api.v1alpha1.asm.AsmApi/SetConversationCollectedData"
	AsmApi_GetQueuesDetails_FullMethodName             = "/api.v1alpha1.asm.AsmApi/GetQueuesDetails"
)

// AsmApiClient is the client API for AsmApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AsmApiClient interface {
	// Creates an agent session and enables the voice channel
	CreateSession(ctx context.Context, in *CreateSessionReq, opts ...grpc.CallOption) (*CreateSessionRes, error)
	// Returns an aggregate of the statuses of all channels
	GetStatus(ctx context.Context, in *GetStatusReq, opts ...grpc.CallOption) (*GetStatusRes, error)
	// Closes an asm session and all sub sessions
	EndSession(ctx context.Context, in *EndSessionReq, opts ...grpc.CallOption) (*EndSessionRes, error)
	// Gets an agent's current asm session
	GetCurrentSession(ctx context.Context, in *GetCurrentSessionReq, opts ...grpc.CallOption) (*AsmSession, error)
	// Updates the currently active subsession
	SwitchSubsession(ctx context.Context, in *SwitchSubsessionReq, opts ...grpc.CallOption) (*SwitchSubsessionRes, error)
	// Lists the conversations for an assigned agent
	ListConversations(ctx context.Context, in *ListConversationsReq, opts ...grpc.CallOption) (*ListConversationsRes, error)
	// Assign agent to matched conversation based on skills and channelTypes requested
	AssignNewConversation(ctx context.Context, in *AssignNewConversationReq, opts ...grpc.CallOption) (*AssignNewConversationRes, error)
	// List all agents for the given user. Contains statistical enrichments for each agent and their conversations.
	ListAgents(ctx context.Context, in *ListAgentsReq, opts ...grpc.CallOption) (*ListAgentsRes, error)
	// Set collected data per conversation
	SetConversationCollectedData(ctx context.Context, in *SetConversationCollectedDataReq, opts ...grpc.CallOption) (*SetConversationCollectedDataRes, error)
	// Set queue details
	GetQueuesDetails(ctx context.Context, in *GetQueuesDetailsReq, opts ...grpc.CallOption) (*commons.GetQueuesDetailsRes, error)
}

type asmApiClient struct {
	cc grpc.ClientConnInterface
}

func NewAsmApiClient(cc grpc.ClientConnInterface) AsmApiClient {
	return &asmApiClient{cc}
}

func (c *asmApiClient) CreateSession(ctx context.Context, in *CreateSessionReq, opts ...grpc.CallOption) (*CreateSessionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSessionRes)
	err := c.cc.Invoke(ctx, AsmApi_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmApiClient) GetStatus(ctx context.Context, in *GetStatusReq, opts ...grpc.CallOption) (*GetStatusRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatusRes)
	err := c.cc.Invoke(ctx, AsmApi_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmApiClient) EndSession(ctx context.Context, in *EndSessionReq, opts ...grpc.CallOption) (*EndSessionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndSessionRes)
	err := c.cc.Invoke(ctx, AsmApi_EndSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmApiClient) GetCurrentSession(ctx context.Context, in *GetCurrentSessionReq, opts ...grpc.CallOption) (*AsmSession, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AsmSession)
	err := c.cc.Invoke(ctx, AsmApi_GetCurrentSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmApiClient) SwitchSubsession(ctx context.Context, in *SwitchSubsessionReq, opts ...grpc.CallOption) (*SwitchSubsessionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SwitchSubsessionRes)
	err := c.cc.Invoke(ctx, AsmApi_SwitchSubsession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmApiClient) ListConversations(ctx context.Context, in *ListConversationsReq, opts ...grpc.CallOption) (*ListConversationsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConversationsRes)
	err := c.cc.Invoke(ctx, AsmApi_ListConversations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmApiClient) AssignNewConversation(ctx context.Context, in *AssignNewConversationReq, opts ...grpc.CallOption) (*AssignNewConversationRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignNewConversationRes)
	err := c.cc.Invoke(ctx, AsmApi_AssignNewConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmApiClient) ListAgents(ctx context.Context, in *ListAgentsReq, opts ...grpc.CallOption) (*ListAgentsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentsRes)
	err := c.cc.Invoke(ctx, AsmApi_ListAgents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmApiClient) SetConversationCollectedData(ctx context.Context, in *SetConversationCollectedDataReq, opts ...grpc.CallOption) (*SetConversationCollectedDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetConversationCollectedDataRes)
	err := c.cc.Invoke(ctx, AsmApi_SetConversationCollectedData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmApiClient) GetQueuesDetails(ctx context.Context, in *GetQueuesDetailsReq, opts ...grpc.CallOption) (*commons.GetQueuesDetailsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commons.GetQueuesDetailsRes)
	err := c.cc.Invoke(ctx, AsmApi_GetQueuesDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsmApiServer is the server API for AsmApi service.
// All implementations must embed UnimplementedAsmApiServer
// for forward compatibility
type AsmApiServer interface {
	// Creates an agent session and enables the voice channel
	CreateSession(context.Context, *CreateSessionReq) (*CreateSessionRes, error)
	// Returns an aggregate of the statuses of all channels
	GetStatus(context.Context, *GetStatusReq) (*GetStatusRes, error)
	// Closes an asm session and all sub sessions
	EndSession(context.Context, *EndSessionReq) (*EndSessionRes, error)
	// Gets an agent's current asm session
	GetCurrentSession(context.Context, *GetCurrentSessionReq) (*AsmSession, error)
	// Updates the currently active subsession
	SwitchSubsession(context.Context, *SwitchSubsessionReq) (*SwitchSubsessionRes, error)
	// Lists the conversations for an assigned agent
	ListConversations(context.Context, *ListConversationsReq) (*ListConversationsRes, error)
	// Assign agent to matched conversation based on skills and channelTypes requested
	AssignNewConversation(context.Context, *AssignNewConversationReq) (*AssignNewConversationRes, error)
	// List all agents for the given user. Contains statistical enrichments for each agent and their conversations.
	ListAgents(context.Context, *ListAgentsReq) (*ListAgentsRes, error)
	// Set collected data per conversation
	SetConversationCollectedData(context.Context, *SetConversationCollectedDataReq) (*SetConversationCollectedDataRes, error)
	// Set queue details
	GetQueuesDetails(context.Context, *GetQueuesDetailsReq) (*commons.GetQueuesDetailsRes, error)
	mustEmbedUnimplementedAsmApiServer()
}

// UnimplementedAsmApiServer must be embedded to have forward compatible implementations.
type UnimplementedAsmApiServer struct {
}

func (UnimplementedAsmApiServer) CreateSession(context.Context, *CreateSessionReq) (*CreateSessionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedAsmApiServer) GetStatus(context.Context, *GetStatusReq) (*GetStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedAsmApiServer) EndSession(context.Context, *EndSessionReq) (*EndSessionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndSession not implemented")
}
func (UnimplementedAsmApiServer) GetCurrentSession(context.Context, *GetCurrentSessionReq) (*AsmSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentSession not implemented")
}
func (UnimplementedAsmApiServer) SwitchSubsession(context.Context, *SwitchSubsessionReq) (*SwitchSubsessionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchSubsession not implemented")
}
func (UnimplementedAsmApiServer) ListConversations(context.Context, *ListConversationsReq) (*ListConversationsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversations not implemented")
}
func (UnimplementedAsmApiServer) AssignNewConversation(context.Context, *AssignNewConversationReq) (*AssignNewConversationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignNewConversation not implemented")
}
func (UnimplementedAsmApiServer) ListAgents(context.Context, *ListAgentsReq) (*ListAgentsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgents not implemented")
}
func (UnimplementedAsmApiServer) SetConversationCollectedData(context.Context, *SetConversationCollectedDataReq) (*SetConversationCollectedDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConversationCollectedData not implemented")
}
func (UnimplementedAsmApiServer) GetQueuesDetails(context.Context, *GetQueuesDetailsReq) (*commons.GetQueuesDetailsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueuesDetails not implemented")
}
func (UnimplementedAsmApiServer) mustEmbedUnimplementedAsmApiServer() {}

// UnsafeAsmApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AsmApiServer will
// result in compilation errors.
type UnsafeAsmApiServer interface {
	mustEmbedUnimplementedAsmApiServer()
}

func RegisterAsmApiServer(s grpc.ServiceRegistrar, srv AsmApiServer) {
	s.RegisterService(&AsmApi_ServiceDesc, srv)
}

func _AsmApi_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmApiServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsmApi_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmApiServer).CreateSession(ctx, req.(*CreateSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsmApi_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmApiServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsmApi_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmApiServer).GetStatus(ctx, req.(*GetStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsmApi_EndSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmApiServer).EndSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsmApi_EndSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmApiServer).EndSession(ctx, req.(*EndSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsmApi_GetCurrentSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmApiServer).GetCurrentSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsmApi_GetCurrentSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmApiServer).GetCurrentSession(ctx, req.(*GetCurrentSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsmApi_SwitchSubsession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchSubsessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmApiServer).SwitchSubsession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsmApi_SwitchSubsession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmApiServer).SwitchSubsession(ctx, req.(*SwitchSubsessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsmApi_ListConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmApiServer).ListConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsmApi_ListConversations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmApiServer).ListConversations(ctx, req.(*ListConversationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsmApi_AssignNewConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignNewConversationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmApiServer).AssignNewConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsmApi_AssignNewConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmApiServer).AssignNewConversation(ctx, req.(*AssignNewConversationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsmApi_ListAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmApiServer).ListAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsmApi_ListAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmApiServer).ListAgents(ctx, req.(*ListAgentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsmApi_SetConversationCollectedData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConversationCollectedDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmApiServer).SetConversationCollectedData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsmApi_SetConversationCollectedData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmApiServer).SetConversationCollectedData(ctx, req.(*SetConversationCollectedDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsmApi_GetQueuesDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueuesDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmApiServer).GetQueuesDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsmApi_GetQueuesDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmApiServer).GetQueuesDetails(ctx, req.(*GetQueuesDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AsmApi_ServiceDesc is the grpc.ServiceDesc for AsmApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AsmApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.asm.AsmApi",
	HandlerType: (*AsmApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _AsmApi_CreateSession_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _AsmApi_GetStatus_Handler,
		},
		{
			MethodName: "EndSession",
			Handler:    _AsmApi_EndSession_Handler,
		},
		{
			MethodName: "GetCurrentSession",
			Handler:    _AsmApi_GetCurrentSession_Handler,
		},
		{
			MethodName: "SwitchSubsession",
			Handler:    _AsmApi_SwitchSubsession_Handler,
		},
		{
			MethodName: "ListConversations",
			Handler:    _AsmApi_ListConversations_Handler,
		},
		{
			MethodName: "AssignNewConversation",
			Handler:    _AsmApi_AssignNewConversation_Handler,
		},
		{
			MethodName: "ListAgents",
			Handler:    _AsmApi_ListAgents_Handler,
		},
		{
			MethodName: "SetConversationCollectedData",
			Handler:    _AsmApi_SetConversationCollectedData_Handler,
		},
		{
			MethodName: "GetQueuesDetails",
			Handler:    _AsmApi_GetQueuesDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1alpha1/asm/service.proto",
}
