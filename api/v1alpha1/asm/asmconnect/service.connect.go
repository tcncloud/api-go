// Copyright (c) 2020, TCN Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1alpha1/asm/service.proto

package asmconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	commons "github.com/tcncloud/api-go/api/commons"
	asm "github.com/tcncloud/api-go/api/v1alpha1/asm"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AsmApiName is the fully-qualified name of the AsmApi service.
	AsmApiName = "api.v1alpha1.asm.AsmApi"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AsmApiCreateSessionProcedure is the fully-qualified name of the AsmApi's CreateSession RPC.
	AsmApiCreateSessionProcedure = "/api.v1alpha1.asm.AsmApi/CreateSession"
	// AsmApiGetStatusProcedure is the fully-qualified name of the AsmApi's GetStatus RPC.
	AsmApiGetStatusProcedure = "/api.v1alpha1.asm.AsmApi/GetStatus"
	// AsmApiEndSessionProcedure is the fully-qualified name of the AsmApi's EndSession RPC.
	AsmApiEndSessionProcedure = "/api.v1alpha1.asm.AsmApi/EndSession"
	// AsmApiGetCurrentSessionProcedure is the fully-qualified name of the AsmApi's GetCurrentSession
	// RPC.
	AsmApiGetCurrentSessionProcedure = "/api.v1alpha1.asm.AsmApi/GetCurrentSession"
	// AsmApiSwitchSubsessionProcedure is the fully-qualified name of the AsmApi's SwitchSubsession RPC.
	AsmApiSwitchSubsessionProcedure = "/api.v1alpha1.asm.AsmApi/SwitchSubsession"
	// AsmApiListConversationsProcedure is the fully-qualified name of the AsmApi's ListConversations
	// RPC.
	AsmApiListConversationsProcedure = "/api.v1alpha1.asm.AsmApi/ListConversations"
	// AsmApiAssignNewConversationProcedure is the fully-qualified name of the AsmApi's
	// AssignNewConversation RPC.
	AsmApiAssignNewConversationProcedure = "/api.v1alpha1.asm.AsmApi/AssignNewConversation"
	// AsmApiListAgentsProcedure is the fully-qualified name of the AsmApi's ListAgents RPC.
	AsmApiListAgentsProcedure = "/api.v1alpha1.asm.AsmApi/ListAgents"
	// AsmApiSetConversationCollectedDataProcedure is the fully-qualified name of the AsmApi's
	// SetConversationCollectedData RPC.
	AsmApiSetConversationCollectedDataProcedure = "/api.v1alpha1.asm.AsmApi/SetConversationCollectedData"
	// AsmApiGetQueuesDetailsProcedure is the fully-qualified name of the AsmApi's GetQueuesDetails RPC.
	AsmApiGetQueuesDetailsProcedure = "/api.v1alpha1.asm.AsmApi/GetQueuesDetails"
)

// AsmApiClient is a client for the api.v1alpha1.asm.AsmApi service.
type AsmApiClient interface {
	// Creates an agent session and enables the voice channel
	CreateSession(context.Context, *connect_go.Request[asm.CreateSessionReq]) (*connect_go.Response[asm.CreateSessionRes], error)
	// Returns an aggregate of the statuses of all channels
	GetStatus(context.Context, *connect_go.Request[asm.GetStatusReq]) (*connect_go.Response[asm.GetStatusRes], error)
	// Closes an asm session and all sub sessions
	EndSession(context.Context, *connect_go.Request[asm.EndSessionReq]) (*connect_go.Response[asm.EndSessionRes], error)
	// Gets an agent's current asm session
	GetCurrentSession(context.Context, *connect_go.Request[asm.GetCurrentSessionReq]) (*connect_go.Response[asm.AsmSession], error)
	// Updates the currently active subsession
	SwitchSubsession(context.Context, *connect_go.Request[asm.SwitchSubsessionReq]) (*connect_go.Response[asm.SwitchSubsessionRes], error)
	// Lists the conversations for an assigned agent
	ListConversations(context.Context, *connect_go.Request[asm.ListConversationsReq]) (*connect_go.Response[asm.ListConversationsRes], error)
	// Assign agent to matched conversation based on skills and channelTypes requested
	AssignNewConversation(context.Context, *connect_go.Request[asm.AssignNewConversationReq]) (*connect_go.Response[asm.AssignNewConversationRes], error)
	// List all agents for the given user. Contains statistical enrichments for each agent and their conversations.
	ListAgents(context.Context, *connect_go.Request[asm.ListAgentsReq]) (*connect_go.Response[asm.ListAgentsRes], error)
	// Set collected data per conversation
	SetConversationCollectedData(context.Context, *connect_go.Request[asm.SetConversationCollectedDataReq]) (*connect_go.Response[asm.SetConversationCollectedDataRes], error)
	// Set queue details
	GetQueuesDetails(context.Context, *connect_go.Request[asm.GetQueuesDetailsReq]) (*connect_go.Response[commons.GetQueuesDetailsRes], error)
}

// NewAsmApiClient constructs a client for the api.v1alpha1.asm.AsmApi service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAsmApiClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AsmApiClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &asmApiClient{
		createSession: connect_go.NewClient[asm.CreateSessionReq, asm.CreateSessionRes](
			httpClient,
			baseURL+AsmApiCreateSessionProcedure,
			opts...,
		),
		getStatus: connect_go.NewClient[asm.GetStatusReq, asm.GetStatusRes](
			httpClient,
			baseURL+AsmApiGetStatusProcedure,
			opts...,
		),
		endSession: connect_go.NewClient[asm.EndSessionReq, asm.EndSessionRes](
			httpClient,
			baseURL+AsmApiEndSessionProcedure,
			opts...,
		),
		getCurrentSession: connect_go.NewClient[asm.GetCurrentSessionReq, asm.AsmSession](
			httpClient,
			baseURL+AsmApiGetCurrentSessionProcedure,
			opts...,
		),
		switchSubsession: connect_go.NewClient[asm.SwitchSubsessionReq, asm.SwitchSubsessionRes](
			httpClient,
			baseURL+AsmApiSwitchSubsessionProcedure,
			opts...,
		),
		listConversations: connect_go.NewClient[asm.ListConversationsReq, asm.ListConversationsRes](
			httpClient,
			baseURL+AsmApiListConversationsProcedure,
			opts...,
		),
		assignNewConversation: connect_go.NewClient[asm.AssignNewConversationReq, asm.AssignNewConversationRes](
			httpClient,
			baseURL+AsmApiAssignNewConversationProcedure,
			opts...,
		),
		listAgents: connect_go.NewClient[asm.ListAgentsReq, asm.ListAgentsRes](
			httpClient,
			baseURL+AsmApiListAgentsProcedure,
			opts...,
		),
		setConversationCollectedData: connect_go.NewClient[asm.SetConversationCollectedDataReq, asm.SetConversationCollectedDataRes](
			httpClient,
			baseURL+AsmApiSetConversationCollectedDataProcedure,
			opts...,
		),
		getQueuesDetails: connect_go.NewClient[asm.GetQueuesDetailsReq, commons.GetQueuesDetailsRes](
			httpClient,
			baseURL+AsmApiGetQueuesDetailsProcedure,
			opts...,
		),
	}
}

// asmApiClient implements AsmApiClient.
type asmApiClient struct {
	createSession                *connect_go.Client[asm.CreateSessionReq, asm.CreateSessionRes]
	getStatus                    *connect_go.Client[asm.GetStatusReq, asm.GetStatusRes]
	endSession                   *connect_go.Client[asm.EndSessionReq, asm.EndSessionRes]
	getCurrentSession            *connect_go.Client[asm.GetCurrentSessionReq, asm.AsmSession]
	switchSubsession             *connect_go.Client[asm.SwitchSubsessionReq, asm.SwitchSubsessionRes]
	listConversations            *connect_go.Client[asm.ListConversationsReq, asm.ListConversationsRes]
	assignNewConversation        *connect_go.Client[asm.AssignNewConversationReq, asm.AssignNewConversationRes]
	listAgents                   *connect_go.Client[asm.ListAgentsReq, asm.ListAgentsRes]
	setConversationCollectedData *connect_go.Client[asm.SetConversationCollectedDataReq, asm.SetConversationCollectedDataRes]
	getQueuesDetails             *connect_go.Client[asm.GetQueuesDetailsReq, commons.GetQueuesDetailsRes]
}

// CreateSession calls api.v1alpha1.asm.AsmApi.CreateSession.
func (c *asmApiClient) CreateSession(ctx context.Context, req *connect_go.Request[asm.CreateSessionReq]) (*connect_go.Response[asm.CreateSessionRes], error) {
	return c.createSession.CallUnary(ctx, req)
}

// GetStatus calls api.v1alpha1.asm.AsmApi.GetStatus.
func (c *asmApiClient) GetStatus(ctx context.Context, req *connect_go.Request[asm.GetStatusReq]) (*connect_go.Response[asm.GetStatusRes], error) {
	return c.getStatus.CallUnary(ctx, req)
}

// EndSession calls api.v1alpha1.asm.AsmApi.EndSession.
func (c *asmApiClient) EndSession(ctx context.Context, req *connect_go.Request[asm.EndSessionReq]) (*connect_go.Response[asm.EndSessionRes], error) {
	return c.endSession.CallUnary(ctx, req)
}

// GetCurrentSession calls api.v1alpha1.asm.AsmApi.GetCurrentSession.
func (c *asmApiClient) GetCurrentSession(ctx context.Context, req *connect_go.Request[asm.GetCurrentSessionReq]) (*connect_go.Response[asm.AsmSession], error) {
	return c.getCurrentSession.CallUnary(ctx, req)
}

// SwitchSubsession calls api.v1alpha1.asm.AsmApi.SwitchSubsession.
func (c *asmApiClient) SwitchSubsession(ctx context.Context, req *connect_go.Request[asm.SwitchSubsessionReq]) (*connect_go.Response[asm.SwitchSubsessionRes], error) {
	return c.switchSubsession.CallUnary(ctx, req)
}

// ListConversations calls api.v1alpha1.asm.AsmApi.ListConversations.
func (c *asmApiClient) ListConversations(ctx context.Context, req *connect_go.Request[asm.ListConversationsReq]) (*connect_go.Response[asm.ListConversationsRes], error) {
	return c.listConversations.CallUnary(ctx, req)
}

// AssignNewConversation calls api.v1alpha1.asm.AsmApi.AssignNewConversation.
func (c *asmApiClient) AssignNewConversation(ctx context.Context, req *connect_go.Request[asm.AssignNewConversationReq]) (*connect_go.Response[asm.AssignNewConversationRes], error) {
	return c.assignNewConversation.CallUnary(ctx, req)
}

// ListAgents calls api.v1alpha1.asm.AsmApi.ListAgents.
func (c *asmApiClient) ListAgents(ctx context.Context, req *connect_go.Request[asm.ListAgentsReq]) (*connect_go.Response[asm.ListAgentsRes], error) {
	return c.listAgents.CallUnary(ctx, req)
}

// SetConversationCollectedData calls api.v1alpha1.asm.AsmApi.SetConversationCollectedData.
func (c *asmApiClient) SetConversationCollectedData(ctx context.Context, req *connect_go.Request[asm.SetConversationCollectedDataReq]) (*connect_go.Response[asm.SetConversationCollectedDataRes], error) {
	return c.setConversationCollectedData.CallUnary(ctx, req)
}

// GetQueuesDetails calls api.v1alpha1.asm.AsmApi.GetQueuesDetails.
func (c *asmApiClient) GetQueuesDetails(ctx context.Context, req *connect_go.Request[asm.GetQueuesDetailsReq]) (*connect_go.Response[commons.GetQueuesDetailsRes], error) {
	return c.getQueuesDetails.CallUnary(ctx, req)
}

// AsmApiHandler is an implementation of the api.v1alpha1.asm.AsmApi service.
type AsmApiHandler interface {
	// Creates an agent session and enables the voice channel
	CreateSession(context.Context, *connect_go.Request[asm.CreateSessionReq]) (*connect_go.Response[asm.CreateSessionRes], error)
	// Returns an aggregate of the statuses of all channels
	GetStatus(context.Context, *connect_go.Request[asm.GetStatusReq]) (*connect_go.Response[asm.GetStatusRes], error)
	// Closes an asm session and all sub sessions
	EndSession(context.Context, *connect_go.Request[asm.EndSessionReq]) (*connect_go.Response[asm.EndSessionRes], error)
	// Gets an agent's current asm session
	GetCurrentSession(context.Context, *connect_go.Request[asm.GetCurrentSessionReq]) (*connect_go.Response[asm.AsmSession], error)
	// Updates the currently active subsession
	SwitchSubsession(context.Context, *connect_go.Request[asm.SwitchSubsessionReq]) (*connect_go.Response[asm.SwitchSubsessionRes], error)
	// Lists the conversations for an assigned agent
	ListConversations(context.Context, *connect_go.Request[asm.ListConversationsReq]) (*connect_go.Response[asm.ListConversationsRes], error)
	// Assign agent to matched conversation based on skills and channelTypes requested
	AssignNewConversation(context.Context, *connect_go.Request[asm.AssignNewConversationReq]) (*connect_go.Response[asm.AssignNewConversationRes], error)
	// List all agents for the given user. Contains statistical enrichments for each agent and their conversations.
	ListAgents(context.Context, *connect_go.Request[asm.ListAgentsReq]) (*connect_go.Response[asm.ListAgentsRes], error)
	// Set collected data per conversation
	SetConversationCollectedData(context.Context, *connect_go.Request[asm.SetConversationCollectedDataReq]) (*connect_go.Response[asm.SetConversationCollectedDataRes], error)
	// Set queue details
	GetQueuesDetails(context.Context, *connect_go.Request[asm.GetQueuesDetailsReq]) (*connect_go.Response[commons.GetQueuesDetailsRes], error)
}

// NewAsmApiHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAsmApiHandler(svc AsmApiHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	asmApiCreateSessionHandler := connect_go.NewUnaryHandler(
		AsmApiCreateSessionProcedure,
		svc.CreateSession,
		opts...,
	)
	asmApiGetStatusHandler := connect_go.NewUnaryHandler(
		AsmApiGetStatusProcedure,
		svc.GetStatus,
		opts...,
	)
	asmApiEndSessionHandler := connect_go.NewUnaryHandler(
		AsmApiEndSessionProcedure,
		svc.EndSession,
		opts...,
	)
	asmApiGetCurrentSessionHandler := connect_go.NewUnaryHandler(
		AsmApiGetCurrentSessionProcedure,
		svc.GetCurrentSession,
		opts...,
	)
	asmApiSwitchSubsessionHandler := connect_go.NewUnaryHandler(
		AsmApiSwitchSubsessionProcedure,
		svc.SwitchSubsession,
		opts...,
	)
	asmApiListConversationsHandler := connect_go.NewUnaryHandler(
		AsmApiListConversationsProcedure,
		svc.ListConversations,
		opts...,
	)
	asmApiAssignNewConversationHandler := connect_go.NewUnaryHandler(
		AsmApiAssignNewConversationProcedure,
		svc.AssignNewConversation,
		opts...,
	)
	asmApiListAgentsHandler := connect_go.NewUnaryHandler(
		AsmApiListAgentsProcedure,
		svc.ListAgents,
		opts...,
	)
	asmApiSetConversationCollectedDataHandler := connect_go.NewUnaryHandler(
		AsmApiSetConversationCollectedDataProcedure,
		svc.SetConversationCollectedData,
		opts...,
	)
	asmApiGetQueuesDetailsHandler := connect_go.NewUnaryHandler(
		AsmApiGetQueuesDetailsProcedure,
		svc.GetQueuesDetails,
		opts...,
	)
	return "/api.v1alpha1.asm.AsmApi/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AsmApiCreateSessionProcedure:
			asmApiCreateSessionHandler.ServeHTTP(w, r)
		case AsmApiGetStatusProcedure:
			asmApiGetStatusHandler.ServeHTTP(w, r)
		case AsmApiEndSessionProcedure:
			asmApiEndSessionHandler.ServeHTTP(w, r)
		case AsmApiGetCurrentSessionProcedure:
			asmApiGetCurrentSessionHandler.ServeHTTP(w, r)
		case AsmApiSwitchSubsessionProcedure:
			asmApiSwitchSubsessionHandler.ServeHTTP(w, r)
		case AsmApiListConversationsProcedure:
			asmApiListConversationsHandler.ServeHTTP(w, r)
		case AsmApiAssignNewConversationProcedure:
			asmApiAssignNewConversationHandler.ServeHTTP(w, r)
		case AsmApiListAgentsProcedure:
			asmApiListAgentsHandler.ServeHTTP(w, r)
		case AsmApiSetConversationCollectedDataProcedure:
			asmApiSetConversationCollectedDataHandler.ServeHTTP(w, r)
		case AsmApiGetQueuesDetailsProcedure:
			asmApiGetQueuesDetailsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAsmApiHandler returns CodeUnimplemented from all methods.
type UnimplementedAsmApiHandler struct{}

func (UnimplementedAsmApiHandler) CreateSession(context.Context, *connect_go.Request[asm.CreateSessionReq]) (*connect_go.Response[asm.CreateSessionRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.asm.AsmApi.CreateSession is not implemented"))
}

func (UnimplementedAsmApiHandler) GetStatus(context.Context, *connect_go.Request[asm.GetStatusReq]) (*connect_go.Response[asm.GetStatusRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.asm.AsmApi.GetStatus is not implemented"))
}

func (UnimplementedAsmApiHandler) EndSession(context.Context, *connect_go.Request[asm.EndSessionReq]) (*connect_go.Response[asm.EndSessionRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.asm.AsmApi.EndSession is not implemented"))
}

func (UnimplementedAsmApiHandler) GetCurrentSession(context.Context, *connect_go.Request[asm.GetCurrentSessionReq]) (*connect_go.Response[asm.AsmSession], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.asm.AsmApi.GetCurrentSession is not implemented"))
}

func (UnimplementedAsmApiHandler) SwitchSubsession(context.Context, *connect_go.Request[asm.SwitchSubsessionReq]) (*connect_go.Response[asm.SwitchSubsessionRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.asm.AsmApi.SwitchSubsession is not implemented"))
}

func (UnimplementedAsmApiHandler) ListConversations(context.Context, *connect_go.Request[asm.ListConversationsReq]) (*connect_go.Response[asm.ListConversationsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.asm.AsmApi.ListConversations is not implemented"))
}

func (UnimplementedAsmApiHandler) AssignNewConversation(context.Context, *connect_go.Request[asm.AssignNewConversationReq]) (*connect_go.Response[asm.AssignNewConversationRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.asm.AsmApi.AssignNewConversation is not implemented"))
}

func (UnimplementedAsmApiHandler) ListAgents(context.Context, *connect_go.Request[asm.ListAgentsReq]) (*connect_go.Response[asm.ListAgentsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.asm.AsmApi.ListAgents is not implemented"))
}

func (UnimplementedAsmApiHandler) SetConversationCollectedData(context.Context, *connect_go.Request[asm.SetConversationCollectedDataReq]) (*connect_go.Response[asm.SetConversationCollectedDataRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.asm.AsmApi.SetConversationCollectedData is not implemented"))
}

func (UnimplementedAsmApiHandler) GetQueuesDetails(context.Context, *connect_go.Request[asm.GetQueuesDetailsReq]) (*connect_go.Response[commons.GetQueuesDetailsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.asm.AsmApi.GetQueuesDetails is not implemented"))
}
