// Copyright (c) 2020, TCN Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: api/v1alpha1/asm/service.proto

package asm

import (
	_ "github.com/tcncloud/api-go/annotations"
	commons "github.com/tcncloud/api-go/api/commons"
	auth "github.com/tcncloud/api-go/api/commons/auth"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateSessionReq struct {
	state          protoimpl.MessageState    `protogen:"open.v1"`
	HuntGroupSid   int64                     `protobuf:"varint,1,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	Skills         map[string]int64          `protobuf:"bytes,2,rep,name=skills,proto3" json:"skills,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	SubsessionType commons.AsmSubsessionType `protobuf:"varint,3,opt,name=subsession_type,json=subsessionType,proto3,enum=api.commons.AsmSubsessionType" json:"subsession_type,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateSessionReq) Reset() {
	*x = CreateSessionReq{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSessionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionReq) ProtoMessage() {}

func (x *CreateSessionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionReq.ProtoReflect.Descriptor instead.
func (*CreateSessionReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSessionReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *CreateSessionReq) GetSkills() map[string]int64 {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *CreateSessionReq) GetSubsessionType() commons.AsmSubsessionType {
	if x != nil {
		return x.SubsessionType
	}
	return commons.AsmSubsessionType(0)
}

type CreateSessionRes struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	AsmSessionSid     int64                  `protobuf:"varint,1,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
	VoiceSessionSid   int64                  `protobuf:"varint,2,opt,name=voice_session_sid,json=voiceSessionSid,proto3" json:"voice_session_sid,omitempty"`
	VoiceRegistration *VoiceRegistration     `protobuf:"bytes,3,opt,name=voice_registration,json=voiceRegistration,proto3" json:"voice_registration,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CreateSessionRes) Reset() {
	*x = CreateSessionRes{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSessionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRes) ProtoMessage() {}

func (x *CreateSessionRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRes.ProtoReflect.Descriptor instead.
func (*CreateSessionRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSessionRes) GetAsmSessionSid() int64 {
	if x != nil {
		return x.AsmSessionSid
	}
	return 0
}

func (x *CreateSessionRes) GetVoiceSessionSid() int64 {
	if x != nil {
		return x.VoiceSessionSid
	}
	return 0
}

func (x *CreateSessionRes) GetVoiceRegistration() *VoiceRegistration {
	if x != nil {
		return x.VoiceRegistration
	}
	return nil
}

type VoiceRegistration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The pin used to log in via a connected phone
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// The pass used to log in via a connected phone
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// The extention appended
	DialUrl string `protobuf:"bytes,4,opt,name=dial_url,json=dialUrl,proto3" json:"dial_url,omitempty"`
	// pstn phone number that will be used for the agent to dial in
	// if it's an empty string then the voip connection must be used
	PstnPhone           string `protobuf:"bytes,5,opt,name=pstn_phone,json=pstnPhone,proto3" json:"pstn_phone,omitempty"`
	DefaultTimeZone     string `protobuf:"bytes,6,opt,name=default_time_zone,json=defaultTimeZone,proto3" json:"default_time_zone,omitempty"`
	ExpirationTimestamp int64  `protobuf:"varint,7,opt,name=expiration_timestamp,json=expirationTimestamp,proto3" json:"expiration_timestamp,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *VoiceRegistration) Reset() {
	*x = VoiceRegistration{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoiceRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceRegistration) ProtoMessage() {}

func (x *VoiceRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceRegistration.ProtoReflect.Descriptor instead.
func (*VoiceRegistration) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{2}
}

func (x *VoiceRegistration) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *VoiceRegistration) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *VoiceRegistration) GetDialUrl() string {
	if x != nil {
		return x.DialUrl
	}
	return ""
}

func (x *VoiceRegistration) GetPstnPhone() string {
	if x != nil {
		return x.PstnPhone
	}
	return ""
}

func (x *VoiceRegistration) GetDefaultTimeZone() string {
	if x != nil {
		return x.DefaultTimeZone
	}
	return ""
}

func (x *VoiceRegistration) GetExpirationTimestamp() int64 {
	if x != nil {
		return x.ExpirationTimestamp
	}
	return 0
}

// request used to establish a stream of status updates
// based on the given asm session sid. Ths will return
// all payload types in the responses
type StreamAgentStateReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AsmSessionSid int64                  `protobuf:"varint,1,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
	KeepAlive     bool                   `protobuf:"varint,2,opt,name=keep_alive,json=keepAlive,proto3" json:"keep_alive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamAgentStateReq) Reset() {
	*x = StreamAgentStateReq{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamAgentStateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAgentStateReq) ProtoMessage() {}

func (x *StreamAgentStateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAgentStateReq.ProtoReflect.Descriptor instead.
func (*StreamAgentStateReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{3}
}

func (x *StreamAgentStateReq) GetAsmSessionSid() int64 {
	if x != nil {
		return x.AsmSessionSid
	}
	return 0
}

func (x *StreamAgentStateReq) GetKeepAlive() bool {
	if x != nil {
		return x.KeepAlive
	}
	return false
}

// request used to establish a stream of status updates
// based on the current authenticated user's org_id
// This will only return the AgentState payload type
// in the reponses
type ManagerStreamAgentStateReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ManagerStreamAgentStateReq) Reset() {
	*x = ManagerStreamAgentStateReq{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManagerStreamAgentStateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagerStreamAgentStateReq) ProtoMessage() {}

func (x *ManagerStreamAgentStateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagerStreamAgentStateReq.ProtoReflect.Descriptor instead.
func (*ManagerStreamAgentStateReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{4}
}

type GetStatusReq struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	AsmSessionSid           int64                  `protobuf:"varint,1,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
	PerformKeepAlive        bool                   `protobuf:"varint,2,opt,name=perform_keep_alive,json=performKeepAlive,proto3" json:"perform_keep_alive,omitempty"`
	PerformGetQueuedCalls   bool                   `protobuf:"varint,3,opt,name=perform_get_queued_calls,json=performGetQueuedCalls,proto3" json:"perform_get_queued_calls,omitempty"`
	PerformGetMessage       bool                   `protobuf:"varint,4,opt,name=perform_get_message,json=performGetMessage,proto3" json:"perform_get_message,omitempty"`
	MinimumMessageTimestamp int64                  `protobuf:"varint,5,opt,name=minimum_message_timestamp,json=minimumMessageTimestamp,proto3" json:"minimum_message_timestamp,omitempty"`
	Skills                  []string               `protobuf:"bytes,6,rep,name=skills,proto3" json:"skills,omitempty"`
	Events                  []*commons.Event       `protobuf:"bytes,7,rep,name=events,proto3" json:"events,omitempty"`
	// the current agents pbx extensions
	AgentPbxExtensions []string `protobuf:"bytes,8,rep,name=agent_pbx_extensions,json=agentPbxExtensions,proto3" json:"agent_pbx_extensions,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetStatusReq) Reset() {
	*x = GetStatusReq{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusReq) ProtoMessage() {}

func (x *GetStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusReq.ProtoReflect.Descriptor instead.
func (*GetStatusReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetStatusReq) GetAsmSessionSid() int64 {
	if x != nil {
		return x.AsmSessionSid
	}
	return 0
}

func (x *GetStatusReq) GetPerformKeepAlive() bool {
	if x != nil {
		return x.PerformKeepAlive
	}
	return false
}

func (x *GetStatusReq) GetPerformGetQueuedCalls() bool {
	if x != nil {
		return x.PerformGetQueuedCalls
	}
	return false
}

func (x *GetStatusReq) GetPerformGetMessage() bool {
	if x != nil {
		return x.PerformGetMessage
	}
	return false
}

func (x *GetStatusReq) GetMinimumMessageTimestamp() int64 {
	if x != nil {
		return x.MinimumMessageTimestamp
	}
	return 0
}

func (x *GetStatusReq) GetSkills() []string {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *GetStatusReq) GetEvents() []*commons.Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *GetStatusReq) GetAgentPbxExtensions() []string {
	if x != nil {
		return x.AgentPbxExtensions
	}
	return nil
}

type GetStatusRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VoiceStatus   *VoiceStatus           `protobuf:"bytes,1,opt,name=voice_status,json=voiceStatus,proto3" json:"voice_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStatusRes) Reset() {
	*x = GetStatusRes{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatusRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusRes) ProtoMessage() {}

func (x *GetStatusRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusRes.ProtoReflect.Descriptor instead.
func (*GetStatusRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetStatusRes) GetVoiceStatus() *VoiceStatus {
	if x != nil {
		return x.VoiceStatus
	}
	return nil
}

type VoiceStatus struct {
	state               protoimpl.MessageState    `protogen:"open.v1"`
	Status              int64                     `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	StatusDesc          commons.AgentStatus_Enum  `protobuf:"varint,3,opt,name=status_desc,json=statusDesc,proto3,enum=api.commons.AgentStatus_Enum" json:"status_desc,omitempty"`
	Paused              bool                      `protobuf:"varint,4,opt,name=paused,proto3" json:"paused,omitempty"`
	Queue               string                    `protobuf:"bytes,5,opt,name=queue,proto3" json:"queue,omitempty"`
	CurrentSessionId    int64                     `protobuf:"varint,6,opt,name=current_session_id,json=currentSessionId,proto3" json:"current_session_id,omitempty"`
	LastStatusChange    int64                     `protobuf:"varint,7,opt,name=last_status_change,json=lastStatusChange,proto3" json:"last_status_change,omitempty"`
	Monitoring          bool                      `protobuf:"varint,8,opt,name=monitoring,proto3" json:"monitoring,omitempty"`
	CallsCount          int64                     `protobuf:"varint,9,opt,name=calls_count,json=callsCount,proto3" json:"calls_count,omitempty"`
	LastSipCode         int64                     `protobuf:"varint,10,opt,name=last_sip_code,json=lastSipCode,proto3" json:"last_sip_code,omitempty"`
	AgentPeerIsLostCall bool                      `protobuf:"varint,11,opt,name=agent_peer_is_lost_call,json=agentPeerIsLostCall,proto3" json:"agent_peer_is_lost_call,omitempty"`
	Disabled            bool                      `protobuf:"varint,12,opt,name=disabled,proto3" json:"disabled,omitempty"`
	KeepAliveSucceeded  bool                      `protobuf:"varint,13,opt,name=keep_alive_succeeded,json=keepAliveSucceeded,proto3" json:"keep_alive_succeeded,omitempty"`
	Message             string                    `protobuf:"bytes,14,opt,name=message,proto3" json:"message,omitempty"`
	MessageTimestamp    int64                     `protobuf:"varint,15,opt,name=message_timestamp,json=messageTimestamp,proto3" json:"message_timestamp,omitempty"`
	QueuedCalls         *QueuedCalls              `protobuf:"bytes,16,opt,name=queued_calls,json=queuedCalls,proto3" json:"queued_calls,omitempty"`
	CallerWasSuspended  bool                      `protobuf:"varint,17,opt,name=caller_was_suspended,json=callerWasSuspended,proto3" json:"caller_was_suspended,omitempty"`
	TransferMembers     []*commons.TransferMember `protobuf:"bytes,18,rep,name=transfer_members,json=transferMembers,proto3" json:"transfer_members,omitempty"`
	Alert               *commons.AgentAlert       `protobuf:"bytes,19,opt,name=alert,proto3" json:"alert,omitempty"`
	// indicates if the current call is a direct to agent call
	AgentPeerIsDirectToAgent bool `protobuf:"varint,20,opt,name=agent_peer_is_direct_to_agent,json=agentPeerIsDirectToAgent,proto3" json:"agent_peer_is_direct_to_agent,omitempty"`
	// indicates if the agent is muted or not
	AgentIsMuted  bool `protobuf:"varint,21,opt,name=agent_is_muted,json=agentIsMuted,proto3" json:"agent_is_muted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VoiceStatus) Reset() {
	*x = VoiceStatus{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoiceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceStatus) ProtoMessage() {}

func (x *VoiceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceStatus.ProtoReflect.Descriptor instead.
func (*VoiceStatus) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{7}
}

func (x *VoiceStatus) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *VoiceStatus) GetStatusDesc() commons.AgentStatus_Enum {
	if x != nil {
		return x.StatusDesc
	}
	return commons.AgentStatus_Enum(0)
}

func (x *VoiceStatus) GetPaused() bool {
	if x != nil {
		return x.Paused
	}
	return false
}

func (x *VoiceStatus) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *VoiceStatus) GetCurrentSessionId() int64 {
	if x != nil {
		return x.CurrentSessionId
	}
	return 0
}

func (x *VoiceStatus) GetLastStatusChange() int64 {
	if x != nil {
		return x.LastStatusChange
	}
	return 0
}

func (x *VoiceStatus) GetMonitoring() bool {
	if x != nil {
		return x.Monitoring
	}
	return false
}

func (x *VoiceStatus) GetCallsCount() int64 {
	if x != nil {
		return x.CallsCount
	}
	return 0
}

func (x *VoiceStatus) GetLastSipCode() int64 {
	if x != nil {
		return x.LastSipCode
	}
	return 0
}

func (x *VoiceStatus) GetAgentPeerIsLostCall() bool {
	if x != nil {
		return x.AgentPeerIsLostCall
	}
	return false
}

func (x *VoiceStatus) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *VoiceStatus) GetKeepAliveSucceeded() bool {
	if x != nil {
		return x.KeepAliveSucceeded
	}
	return false
}

func (x *VoiceStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VoiceStatus) GetMessageTimestamp() int64 {
	if x != nil {
		return x.MessageTimestamp
	}
	return 0
}

func (x *VoiceStatus) GetQueuedCalls() *QueuedCalls {
	if x != nil {
		return x.QueuedCalls
	}
	return nil
}

func (x *VoiceStatus) GetCallerWasSuspended() bool {
	if x != nil {
		return x.CallerWasSuspended
	}
	return false
}

func (x *VoiceStatus) GetTransferMembers() []*commons.TransferMember {
	if x != nil {
		return x.TransferMembers
	}
	return nil
}

func (x *VoiceStatus) GetAlert() *commons.AgentAlert {
	if x != nil {
		return x.Alert
	}
	return nil
}

func (x *VoiceStatus) GetAgentPeerIsDirectToAgent() bool {
	if x != nil {
		return x.AgentPeerIsDirectToAgent
	}
	return false
}

func (x *VoiceStatus) GetAgentIsMuted() bool {
	if x != nil {
		return x.AgentIsMuted
	}
	return false
}

type QueuedCalls struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// calls that were queued and have a matching subset of the agent_skills from the request.
	AgentQueueCalls []*QueuedCalls_QueuedCallData `protobuf:"bytes,16,rep,name=agent_queue_calls,json=agentQueueCalls,proto3" json:"agent_queue_calls,omitempty"`
	// calls that were placed on multi-hold by the agent_sid from the request.
	OnHoldCalls []*QueuedCalls_QueuedCallData `protobuf:"bytes,17,rep,name=on_hold_calls,json=onHoldCalls,proto3" json:"on_hold_calls,omitempty"`
	// calls that were placed in the Hold Queue Monitor, are still on hold by the destination (hold music is being played by the other party) and have
	// a matching subset of the agent_skills from the request.
	HqmCalls      []*QueuedCalls_QueuedCallData `protobuf:"bytes,18,rep,name=hqm_calls,json=hqmCalls,proto3" json:"hqm_calls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueuedCalls) Reset() {
	*x = QueuedCalls{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueuedCalls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuedCalls) ProtoMessage() {}

func (x *QueuedCalls) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuedCalls.ProtoReflect.Descriptor instead.
func (*QueuedCalls) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{8}
}

func (x *QueuedCalls) GetAgentQueueCalls() []*QueuedCalls_QueuedCallData {
	if x != nil {
		return x.AgentQueueCalls
	}
	return nil
}

func (x *QueuedCalls) GetOnHoldCalls() []*QueuedCalls_QueuedCallData {
	if x != nil {
		return x.OnHoldCalls
	}
	return nil
}

func (x *QueuedCalls) GetHqmCalls() []*QueuedCalls_QueuedCallData {
	if x != nil {
		return x.HqmCalls
	}
	return nil
}

type EndSessionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AsmSessionSid int64                  `protobuf:"varint,1,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndSessionReq) Reset() {
	*x = EndSessionReq{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndSessionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndSessionReq) ProtoMessage() {}

func (x *EndSessionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndSessionReq.ProtoReflect.Descriptor instead.
func (*EndSessionReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{9}
}

func (x *EndSessionReq) GetAsmSessionSid() int64 {
	if x != nil {
		return x.AsmSessionSid
	}
	return 0
}

func (x *EndSessionReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type EndSessionRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndSessionRes) Reset() {
	*x = EndSessionRes{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndSessionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndSessionRes) ProtoMessage() {}

func (x *EndSessionRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndSessionRes.ProtoReflect.Descriptor instead.
func (*EndSessionRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{10}
}

type GetCurrentSessionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCurrentSessionReq) Reset() {
	*x = GetCurrentSessionReq{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCurrentSessionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentSessionReq) ProtoMessage() {}

func (x *GetCurrentSessionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentSessionReq.ProtoReflect.Descriptor instead.
func (*GetCurrentSessionReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{11}
}

type AsmSession struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AsmSessionSid   int64                  `protobuf:"varint,1,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
	AsmSessionStart *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=asm_session_start,json=asmSessionStart,proto3" json:"asm_session_start,omitempty"`
	AsmSessionEnd   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=asm_session_end,json=asmSessionEnd,proto3" json:"asm_session_end,omitempty"`
	VoiceSession    *VoiceSession          `protobuf:"bytes,6,opt,name=voice_session,json=voiceSession,proto3" json:"voice_session,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AsmSession) Reset() {
	*x = AsmSession{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AsmSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsmSession) ProtoMessage() {}

func (x *AsmSession) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsmSession.ProtoReflect.Descriptor instead.
func (*AsmSession) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{12}
}

func (x *AsmSession) GetAsmSessionSid() int64 {
	if x != nil {
		return x.AsmSessionSid
	}
	return 0
}

func (x *AsmSession) GetAsmSessionStart() *timestamppb.Timestamp {
	if x != nil {
		return x.AsmSessionStart
	}
	return nil
}

func (x *AsmSession) GetAsmSessionEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.AsmSessionEnd
	}
	return nil
}

func (x *AsmSession) GetVoiceSession() *VoiceSession {
	if x != nil {
		return x.VoiceSession
	}
	return nil
}

type VoiceSession struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	VoiceSessionSid   int64                  `protobuf:"varint,1,opt,name=voice_session_sid,json=voiceSessionSid,proto3" json:"voice_session_sid,omitempty"`
	VoiceSessionStart *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=voice_session_start,json=voiceSessionStart,proto3" json:"voice_session_start,omitempty"`
	VoiceSessionEnd   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=voice_session_end,json=voiceSessionEnd,proto3" json:"voice_session_end,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *VoiceSession) Reset() {
	*x = VoiceSession{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoiceSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceSession) ProtoMessage() {}

func (x *VoiceSession) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceSession.ProtoReflect.Descriptor instead.
func (*VoiceSession) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{13}
}

func (x *VoiceSession) GetVoiceSessionSid() int64 {
	if x != nil {
		return x.VoiceSessionSid
	}
	return 0
}

func (x *VoiceSession) GetVoiceSessionStart() *timestamppb.Timestamp {
	if x != nil {
		return x.VoiceSessionStart
	}
	return nil
}

func (x *VoiceSession) GetVoiceSessionEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.VoiceSessionEnd
	}
	return nil
}

type SwitchSubsessionReq struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	AsmSessionSid int64                     `protobuf:"varint,1,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
	HuntGroupSid  int64                     `protobuf:"varint,2,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	Skills        map[string]int64          `protobuf:"bytes,3,rep,name=skills,proto3" json:"skills,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	ChannelType   commons.AsmSubsessionType `protobuf:"varint,4,opt,name=channel_type,json=channelType,proto3,enum=api.commons.AsmSubsessionType" json:"channel_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwitchSubsessionReq) Reset() {
	*x = SwitchSubsessionReq{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwitchSubsessionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchSubsessionReq) ProtoMessage() {}

func (x *SwitchSubsessionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchSubsessionReq.ProtoReflect.Descriptor instead.
func (*SwitchSubsessionReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{14}
}

func (x *SwitchSubsessionReq) GetAsmSessionSid() int64 {
	if x != nil {
		return x.AsmSessionSid
	}
	return 0
}

func (x *SwitchSubsessionReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *SwitchSubsessionReq) GetSkills() map[string]int64 {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *SwitchSubsessionReq) GetChannelType() commons.AsmSubsessionType {
	if x != nil {
		return x.ChannelType
	}
	return commons.AsmSubsessionType(0)
}

type SwitchSubsessionRes struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	VoiceSessionSid   int64                  `protobuf:"varint,1,opt,name=voice_session_sid,json=voiceSessionSid,proto3" json:"voice_session_sid,omitempty"`
	VoiceRegistration *VoiceRegistration     `protobuf:"bytes,2,opt,name=voice_registration,json=voiceRegistration,proto3" json:"voice_registration,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SwitchSubsessionRes) Reset() {
	*x = SwitchSubsessionRes{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwitchSubsessionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchSubsessionRes) ProtoMessage() {}

func (x *SwitchSubsessionRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchSubsessionRes.ProtoReflect.Descriptor instead.
func (*SwitchSubsessionRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{15}
}

func (x *SwitchSubsessionRes) GetVoiceSessionSid() int64 {
	if x != nil {
		return x.VoiceSessionSid
	}
	return 0
}

func (x *SwitchSubsessionRes) GetVoiceRegistration() *VoiceRegistration {
	if x != nil {
		return x.VoiceRegistration
	}
	return nil
}

type Conversation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// conversation details
	// agent conversation id
	ConversationSid int64 `protobuf:"varint,6,opt,name=conversation_sid,json=conversationSid,proto3" json:"conversation_sid,omitempty"`
	// initial agent conversation created time
	ConversationCreatedTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=conversation_created_time,json=conversationCreatedTime,proto3" json:"conversation_created_time,omitempty"`
	// agent conversation assigned time
	AssignedLastUpdatedTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=assigned_last_updated_time,json=assignedLastUpdatedTime,proto3" json:"assigned_last_updated_time,omitempty"`
	// conversation status - open, closed
	ConversationStatus commons.ConversationStatus `protobuf:"varint,9,opt,name=conversation_status,json=conversationStatus,proto3,enum=api.commons.ConversationStatus" json:"conversation_status,omitempty"`
	// channel type - voice|sms|email|chat
	ChannelType  commons.ChannelType                      `protobuf:"varint,10,opt,name=channel_type,json=channelType,proto3,enum=api.commons.ChannelType" json:"channel_type,omitempty"`
	CustomerInfo *commons.ConversationCustomerInformation `protobuf:"bytes,11,opt,name=customer_info,json=customerInfo,proto3" json:"customer_info,omitempty"`
	// received time
	LastMessageTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=last_message_time,json=lastMessageTime,proto3" json:"last_message_time,omitempty"`
	// skills
	Skills *ConversationSkills `protobuf:"bytes,13,opt,name=skills,proto3" json:"skills,omitempty"`
	// agent conversation assignment status
	AssignmentStatus commons.AgentConversationAssignmentStatus `protobuf:"varint,14,opt,name=assignment_status,json=assignmentStatus,proto3,enum=api.commons.AgentConversationAssignmentStatus" json:"assignment_status,omitempty"`
	// agent conversation assignment type
	AssignmentType commons.AgentConversationAssignmentType `protobuf:"varint,15,opt,name=assignment_type,json=assignmentType,proto3,enum=api.commons.AgentConversationAssignmentType" json:"assignment_type,omitempty"`
	// sla and timeouts
	SlaTimeouts *commons.SLATimeouts `protobuf:"bytes,16,opt,name=sla_timeouts,json=slaTimeouts,proto3" json:"sla_timeouts,omitempty"`
	// conversation collected data
	ConversationCollectedData *commons.ConversationCollectedData `protobuf:"bytes,17,opt,name=conversation_collected_data,json=conversationCollectedData,proto3" json:"conversation_collected_data,omitempty"`
	// the time that the last group of message started. A message group is a
	// continuous set of messages from the same type of sender
	LastMessageGroupTime *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=last_message_group_time,json=lastMessageGroupTime,proto3" json:"last_message_group_time,omitempty"`
	// the sender type of the last message group
	LastMessageGroupType commons.OmniSenderType `protobuf:"varint,19,opt,name=last_message_group_type,json=lastMessageGroupType,proto3,enum=api.commons.OmniSenderType" json:"last_message_group_type,omitempty"`
	// the id of the task
	TaskSid       *wrapperspb.Int64Value `protobuf:"bytes,20,opt,name=task_sid,json=taskSid,proto3" json:"task_sid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Conversation) Reset() {
	*x = Conversation{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Conversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conversation) ProtoMessage() {}

func (x *Conversation) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conversation.ProtoReflect.Descriptor instead.
func (*Conversation) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{16}
}

func (x *Conversation) GetConversationSid() int64 {
	if x != nil {
		return x.ConversationSid
	}
	return 0
}

func (x *Conversation) GetConversationCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ConversationCreatedTime
	}
	return nil
}

func (x *Conversation) GetAssignedLastUpdatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AssignedLastUpdatedTime
	}
	return nil
}

func (x *Conversation) GetConversationStatus() commons.ConversationStatus {
	if x != nil {
		return x.ConversationStatus
	}
	return commons.ConversationStatus(0)
}

func (x *Conversation) GetChannelType() commons.ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return commons.ChannelType(0)
}

func (x *Conversation) GetCustomerInfo() *commons.ConversationCustomerInformation {
	if x != nil {
		return x.CustomerInfo
	}
	return nil
}

func (x *Conversation) GetLastMessageTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastMessageTime
	}
	return nil
}

func (x *Conversation) GetSkills() *ConversationSkills {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *Conversation) GetAssignmentStatus() commons.AgentConversationAssignmentStatus {
	if x != nil {
		return x.AssignmentStatus
	}
	return commons.AgentConversationAssignmentStatus(0)
}

func (x *Conversation) GetAssignmentType() commons.AgentConversationAssignmentType {
	if x != nil {
		return x.AssignmentType
	}
	return commons.AgentConversationAssignmentType(0)
}

func (x *Conversation) GetSlaTimeouts() *commons.SLATimeouts {
	if x != nil {
		return x.SlaTimeouts
	}
	return nil
}

func (x *Conversation) GetConversationCollectedData() *commons.ConversationCollectedData {
	if x != nil {
		return x.ConversationCollectedData
	}
	return nil
}

func (x *Conversation) GetLastMessageGroupTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastMessageGroupTime
	}
	return nil
}

func (x *Conversation) GetLastMessageGroupType() commons.OmniSenderType {
	if x != nil {
		return x.LastMessageGroupType
	}
	return commons.OmniSenderType(0)
}

func (x *Conversation) GetTaskSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.TaskSid
	}
	return nil
}

type ConversationSkills struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Skills        map[string]bool        `protobuf:"bytes,1,rep,name=skills,proto3" json:"skills,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConversationSkills) Reset() {
	*x = ConversationSkills{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConversationSkills) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationSkills) ProtoMessage() {}

func (x *ConversationSkills) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationSkills.ProtoReflect.Descriptor instead.
func (*ConversationSkills) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{17}
}

func (x *ConversationSkills) GetSkills() map[string]bool {
	if x != nil {
		return x.Skills
	}
	return nil
}

type AssignNewConversationReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AsmSessionSid int64                  `protobuf:"varint,1,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
	// skills
	Skills map[string]int64 `protobuf:"bytes,2,rep,name=skills,proto3" json:"skills,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// channel type - voice|sms|email|chat
	ChannelTypes  []commons.ChannelType `protobuf:"varint,3,rep,packed,name=channel_types,json=channelTypes,proto3,enum=api.commons.ChannelType" json:"channel_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignNewConversationReq) Reset() {
	*x = AssignNewConversationReq{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignNewConversationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignNewConversationReq) ProtoMessage() {}

func (x *AssignNewConversationReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignNewConversationReq.ProtoReflect.Descriptor instead.
func (*AssignNewConversationReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{18}
}

func (x *AssignNewConversationReq) GetAsmSessionSid() int64 {
	if x != nil {
		return x.AsmSessionSid
	}
	return 0
}

func (x *AssignNewConversationReq) GetSkills() map[string]int64 {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *AssignNewConversationReq) GetChannelTypes() []commons.ChannelType {
	if x != nil {
		return x.ChannelTypes
	}
	return nil
}

type AssignNewConversationRes struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	Conversation *Conversation          `protobuf:"bytes,1,opt,name=conversation,proto3" json:"conversation,omitempty"`
	// send back ghost notifier referenceID
	ReferenceId   string `protobuf:"bytes,2,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignNewConversationRes) Reset() {
	*x = AssignNewConversationRes{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignNewConversationRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignNewConversationRes) ProtoMessage() {}

func (x *AssignNewConversationRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignNewConversationRes.ProtoReflect.Descriptor instead.
func (*AssignNewConversationRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{19}
}

func (x *AssignNewConversationRes) GetConversation() *Conversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *AssignNewConversationRes) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

type ListAgentsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAgentsReq) Reset() {
	*x = ListAgentsReq{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentsReq) ProtoMessage() {}

func (x *ListAgentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentsReq.ProtoReflect.Descriptor instead.
func (*ListAgentsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{20}
}

type ListAgentsRes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of agents in the system with enrichments
	Agents        []*commons.DashboardAgentInfo `protobuf:"bytes,1,rep,name=agents,proto3" json:"agents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAgentsRes) Reset() {
	*x = ListAgentsRes{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentsRes) ProtoMessage() {}

func (x *ListAgentsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentsRes.ProtoReflect.Descriptor instead.
func (*ListAgentsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{21}
}

func (x *ListAgentsRes) GetAgents() []*commons.DashboardAgentInfo {
	if x != nil {
		return x.Agents
	}
	return nil
}

// request to set collected data for a conversation
type SetConversationCollectedDataReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// conversation_id
	ConversationSid int64 `protobuf:"varint,1,opt,name=conversation_sid,json=conversationSid,proto3" json:"conversation_sid,omitempty"`
	// channel type - email|sms|chat|voice
	ChannelType commons.ChannelType `protobuf:"varint,2,opt,name=channel_type,json=channelType,proto3,enum=api.commons.ChannelType" json:"channel_type,omitempty"`
	// collected data - key/value
	CollectedData map[string]string `protobuf:"bytes,3,rep,name=collected_data,json=collectedData,proto3" json:"collected_data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// asm session sid
	AsmSessionSid int64 `protobuf:"varint,4,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetConversationCollectedDataReq) Reset() {
	*x = SetConversationCollectedDataReq{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetConversationCollectedDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConversationCollectedDataReq) ProtoMessage() {}

func (x *SetConversationCollectedDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConversationCollectedDataReq.ProtoReflect.Descriptor instead.
func (*SetConversationCollectedDataReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{22}
}

func (x *SetConversationCollectedDataReq) GetConversationSid() int64 {
	if x != nil {
		return x.ConversationSid
	}
	return 0
}

func (x *SetConversationCollectedDataReq) GetChannelType() commons.ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return commons.ChannelType(0)
}

func (x *SetConversationCollectedDataReq) GetCollectedData() map[string]string {
	if x != nil {
		return x.CollectedData
	}
	return nil
}

func (x *SetConversationCollectedDataReq) GetAsmSessionSid() int64 {
	if x != nil {
		return x.AsmSessionSid
	}
	return 0
}

// response after setting collected data for a conversation
type SetConversationCollectedDataRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetConversationCollectedDataRes) Reset() {
	*x = SetConversationCollectedDataRes{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetConversationCollectedDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConversationCollectedDataRes) ProtoMessage() {}

func (x *SetConversationCollectedDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConversationCollectedDataRes.ProtoReflect.Descriptor instead.
func (*SetConversationCollectedDataRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{23}
}

// ListConversationsReq - request to list all conversations associated with a given user
type ListConversationsReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the asm session identifier
	AsmSessionSid int64 `protobuf:"varint,1,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
	// the currently signed in user
	AuthenticatedUser *auth.AuthenticatedUser `protobuf:"bytes,2,opt,name=authenticated_user,json=authenticatedUser,proto3" json:"authenticated_user,omitempty"`
	// an optional field, used to select a specific user rather than the auth user
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// an optional field, if only wanting to retrieve conversations with specific statuses
	Statuses []commons.ConversationStatus `protobuf:"varint,4,rep,packed,name=statuses,proto3,enum=api.commons.ConversationStatus" json:"statuses,omitempty"`
	// field mask to filter what is returned by each row
	FieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,5,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// the channel types to list conversations for
	ChannelTypes  []commons.ChannelType `protobuf:"varint,6,rep,packed,name=channel_types,json=channelTypes,proto3,enum=api.commons.ChannelType" json:"channel_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListConversationsReq) Reset() {
	*x = ListConversationsReq{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConversationsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConversationsReq) ProtoMessage() {}

func (x *ListConversationsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConversationsReq.ProtoReflect.Descriptor instead.
func (*ListConversationsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{24}
}

func (x *ListConversationsReq) GetAsmSessionSid() int64 {
	if x != nil {
		return x.AsmSessionSid
	}
	return 0
}

func (x *ListConversationsReq) GetAuthenticatedUser() *auth.AuthenticatedUser {
	if x != nil {
		return x.AuthenticatedUser
	}
	return nil
}

func (x *ListConversationsReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListConversationsReq) GetStatuses() []commons.ConversationStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *ListConversationsReq) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

func (x *ListConversationsReq) GetChannelTypes() []commons.ChannelType {
	if x != nil {
		return x.ChannelTypes
	}
	return nil
}

// ListConversationsRes - result to listing a user's conversations
type ListConversationsRes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the conversations retrieved
	Conversations []*commons.OmniConversation `protobuf:"bytes,1,rep,name=conversations,proto3" json:"conversations,omitempty"`
	// Token to retrieve the next page of tasks, or empty if there are no more pages
	// Only returned if using the ByTime or ByAssignedUser filters
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListConversationsRes) Reset() {
	*x = ListConversationsRes{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConversationsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConversationsRes) ProtoMessage() {}

func (x *ListConversationsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConversationsRes.ProtoReflect.Descriptor instead.
func (*ListConversationsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{25}
}

func (x *ListConversationsRes) GetConversations() []*commons.OmniConversation {
	if x != nil {
		return x.Conversations
	}
	return nil
}

func (x *ListConversationsRes) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetQueuesDetailsReq - request to get details of queues
type GetQueuesDetailsReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the agent's asm session
	AsmSessionSid int64 `protobuf:"varint,1,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
	// the channel types to get details for
	ChannelTypes []commons.ChannelType `protobuf:"varint,2,rep,packed,name=channel_types,json=channelTypes,proto3,enum=api.commons.ChannelType" json:"channel_types,omitempty"`
	// the skills to check
	Skills        map[string]int64 `protobuf:"bytes,3,rep,name=skills,proto3" json:"skills,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQueuesDetailsReq) Reset() {
	*x = GetQueuesDetailsReq{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQueuesDetailsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueuesDetailsReq) ProtoMessage() {}

func (x *GetQueuesDetailsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueuesDetailsReq.ProtoReflect.Descriptor instead.
func (*GetQueuesDetailsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{26}
}

func (x *GetQueuesDetailsReq) GetAsmSessionSid() int64 {
	if x != nil {
		return x.AsmSessionSid
	}
	return 0
}

func (x *GetQueuesDetailsReq) GetChannelTypes() []commons.ChannelType {
	if x != nil {
		return x.ChannelTypes
	}
	return nil
}

func (x *GetQueuesDetailsReq) GetSkills() map[string]int64 {
	if x != nil {
		return x.Skills
	}
	return nil
}

// PushEventsReq - request to push events
type PushEventsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AsmSessionSid int64                  `protobuf:"varint,1,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
	Events        []*commons.AsmEvent    `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushEventsReq) Reset() {
	*x = PushEventsReq{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushEventsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushEventsReq) ProtoMessage() {}

func (x *PushEventsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushEventsReq.ProtoReflect.Descriptor instead.
func (*PushEventsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{27}
}

func (x *PushEventsReq) GetAsmSessionSid() int64 {
	if x != nil {
		return x.AsmSessionSid
	}
	return 0
}

func (x *PushEventsReq) GetEvents() []*commons.AsmEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type PushEventsRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushEventsRes) Reset() {
	*x = PushEventsRes{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushEventsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushEventsRes) ProtoMessage() {}

func (x *PushEventsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushEventsRes.ProtoReflect.Descriptor instead.
func (*PushEventsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{28}
}

type EnableVoiceReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AsmSessionSid int64                  `protobuf:"varint,1,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
	HuntGroupSid  int64                  `protobuf:"varint,2,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	Skills        map[string]int64       `protobuf:"bytes,3,rep,name=skills,proto3" json:"skills,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableVoiceReq) Reset() {
	*x = EnableVoiceReq{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableVoiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableVoiceReq) ProtoMessage() {}

func (x *EnableVoiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableVoiceReq.ProtoReflect.Descriptor instead.
func (*EnableVoiceReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{29}
}

func (x *EnableVoiceReq) GetAsmSessionSid() int64 {
	if x != nil {
		return x.AsmSessionSid
	}
	return 0
}

func (x *EnableVoiceReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *EnableVoiceReq) GetSkills() map[string]int64 {
	if x != nil {
		return x.Skills
	}
	return nil
}

type EnableVoiceRes struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	VoiceSessionSid   int64                  `protobuf:"varint,1,opt,name=voice_session_sid,json=voiceSessionSid,proto3" json:"voice_session_sid,omitempty"`
	VoiceRegistration *VoiceRegistration     `protobuf:"bytes,2,opt,name=voice_registration,json=voiceRegistration,proto3" json:"voice_registration,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *EnableVoiceRes) Reset() {
	*x = EnableVoiceRes{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableVoiceRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableVoiceRes) ProtoMessage() {}

func (x *EnableVoiceRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableVoiceRes.ProtoReflect.Descriptor instead.
func (*EnableVoiceRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{30}
}

func (x *EnableVoiceRes) GetVoiceSessionSid() int64 {
	if x != nil {
		return x.VoiceSessionSid
	}
	return 0
}

func (x *EnableVoiceRes) GetVoiceRegistration() *VoiceRegistration {
	if x != nil {
		return x.VoiceRegistration
	}
	return nil
}

type DisableVoiceReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AsmSessionSid int64                  `protobuf:"varint,1,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
	HuntGroupSid  int64                  `protobuf:"varint,2,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	Skills        map[string]int64       `protobuf:"bytes,3,rep,name=skills,proto3" json:"skills,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisableVoiceReq) Reset() {
	*x = DisableVoiceReq{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableVoiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableVoiceReq) ProtoMessage() {}

func (x *DisableVoiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableVoiceReq.ProtoReflect.Descriptor instead.
func (*DisableVoiceReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{31}
}

func (x *DisableVoiceReq) GetAsmSessionSid() int64 {
	if x != nil {
		return x.AsmSessionSid
	}
	return 0
}

func (x *DisableVoiceReq) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *DisableVoiceReq) GetSkills() map[string]int64 {
	if x != nil {
		return x.Skills
	}
	return nil
}

type DisableVoiceRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisableVoiceRes) Reset() {
	*x = DisableVoiceRes{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableVoiceRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableVoiceRes) ProtoMessage() {}

func (x *DisableVoiceRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableVoiceRes.ProtoReflect.Descriptor instead.
func (*DisableVoiceRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{32}
}

type QueuedCalls_QueuedCallData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id of the found call.
	CallSid int64 `protobuf:"varint,1,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	// number dialed when the call was placed.
	PhoneNumber string `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// caller_id used when the call was placed.
	CallerId string `protobuf:"bytes,3,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	// call type of the found call.
	CallType commons.CallType_Enum `protobuf:"varint,4,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"`
	// timestamp indicating when the call started.
	StartDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// timestamp indicating when the call was put on hold (only set when call is a hold call).
	HoldDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=hold_date,json=holdDate,proto3" json:"hold_date,omitempty"`
	// formatted skills that the call requires.
	Skills []string `protobuf:"bytes,7,rep,name=skills,proto3" json:"skills,omitempty"`
	// indicates if the call is specific to the agent (multi-hold) or it can be picked up by multiple agents (queued and HQM calls).
	AgentSpecific bool `protobuf:"varint,8,opt,name=agent_specific,json=agentSpecific,proto3" json:"agent_specific,omitempty"`
	// queued notification type of the call.
	QueuedNotificationType commons.QueuedNotificationType `protobuf:"varint,9,opt,name=queued_notification_type,json=queuedNotificationType,proto3,enum=api.commons.QueuedNotificationType" json:"queued_notification_type,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *QueuedCalls_QueuedCallData) Reset() {
	*x = QueuedCalls_QueuedCallData{}
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueuedCalls_QueuedCallData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuedCalls_QueuedCallData) ProtoMessage() {}

func (x *QueuedCalls_QueuedCallData) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_asm_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuedCalls_QueuedCallData.ProtoReflect.Descriptor instead.
func (*QueuedCalls_QueuedCallData) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_asm_service_proto_rawDescGZIP(), []int{8, 0}
}

func (x *QueuedCalls_QueuedCallData) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *QueuedCalls_QueuedCallData) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *QueuedCalls_QueuedCallData) GetCallerId() string {
	if x != nil {
		return x.CallerId
	}
	return ""
}

func (x *QueuedCalls_QueuedCallData) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

func (x *QueuedCalls_QueuedCallData) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *QueuedCalls_QueuedCallData) GetHoldDate() *timestamppb.Timestamp {
	if x != nil {
		return x.HoldDate
	}
	return nil
}

func (x *QueuedCalls_QueuedCallData) GetSkills() []string {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *QueuedCalls_QueuedCallData) GetAgentSpecific() bool {
	if x != nil {
		return x.AgentSpecific
	}
	return false
}

func (x *QueuedCalls_QueuedCallData) GetQueuedNotificationType() commons.QueuedNotificationType {
	if x != nil {
		return x.QueuedNotificationType
	}
	return commons.QueuedNotificationType(0)
}

var File_api_v1alpha1_asm_service_proto protoreflect.FileDescriptor

var file_api_v1alpha1_asm_service_proto_rawDesc = string([]byte{
	0x0a, 0x1e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61,
	0x73, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x10, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x61,
	0x73, 0x6d, 0x1a, 0x17, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x73, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x6d, 0x6e,
	0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x84, 0x02, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x2e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x73, 0x6d, 0x53, 0x75, 0x62,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x73, 0x75, 0x62,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xba, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x61,
	0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x73, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12,
	0x52, 0x0a, 0x12, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d, 0x2e, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xe4, 0x01, 0x0a, 0x11, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x73, 0x74, 0x6e, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x73, 0x74, 0x6e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x5c, 0x0a, 0x13, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x73, 0x6d, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x65,
	0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6b,
	0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x22, 0xff, 0x02, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x6d, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x61, 0x73, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x5f,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a,
	0x18, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x62, 0x78, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x78, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x50, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x61, 0x73,
	0x6d, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf1, 0x06, 0x0a, 0x0b, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x69, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x34, 0x0a, 0x17, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x65, 0x72, 0x49, 0x73, 0x4c,
	0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x40, 0x0a, 0x0c,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x61, 0x73, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x73, 0x75, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x57, 0x61, 0x73, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x12, 0x46, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x3f, 0x0a, 0x1d, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f,
	0x74, 0x6f, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x65, 0x72, 0x49, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x54, 0x6f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x73, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x22, 0xbd,
	0x05, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x58,
	0x0a, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x50, 0x0a, 0x0d, 0x6f, 0x6e, 0x5f, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x61,
	0x73, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x6f,
	0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x49, 0x0a, 0x09, 0x68, 0x71,
	0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x68, 0x71, 0x6d,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x1a, 0xb6, 0x03, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c,
	0x53, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12,
	0x5d, 0x0a, 0x18, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4f,
	0x0a, 0x0d, 0x45, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x26, 0x0a, 0x0f, 0x61, 0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x73, 0x6d, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0x0f, 0x0a, 0x0d, 0x45, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x22, 0x16, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x22, 0x85, 0x02, 0x0a, 0x0a, 0x41, 0x73, 0x6d,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x6d, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x61, 0x73, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12,
	0x46, 0x0a, 0x11, 0x61, 0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x61, 0x73, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x61, 0x73, 0x6d, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x61, 0x73,
	0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x12, 0x43, 0x0a, 0x0d, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x61, 0x73, 0x6d, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xce, 0x01, 0x0a, 0x0c, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x4a, 0x0a,
	0x13, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x64, 0x22, 0xac, 0x02, 0x0a, 0x13, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x75, 0x62, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x6d,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x61, 0x73, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x53, 0x75, 0x62, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x2e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x73, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x95, 0x01, 0x0a, 0x13, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x75, 0x62, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x12, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x61, 0x73, 0x6d, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8e, 0x09, 0x0a, 0x0c, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x56, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x57, 0x0a, 0x1a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x17, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x11, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x12, 0x5b, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55,
	0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x6c, 0x61, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x4c, 0x41, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x0b, 0x73, 0x6c, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x73, 0x12, 0x66, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x19, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x17, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a,
	0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e,
	0x69, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x12, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x48, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x61, 0x73, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8c, 0x02, 0x0a, 0x18, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x73, 0x6d,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x06, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d, 0x2e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x81, 0x01, 0x0a, 0x18, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4e,
	0x65, 0x77, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x22, 0x48, 0x0a, 0x0d, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0xe4, 0x02, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x6b, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d, 0x2e, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x73, 0x6d, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x21, 0x0a, 0x1f, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x22, 0xe2, 0x02,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x6d, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x61, 0x73, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x52,
	0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x11, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x82, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x73, 0x6d, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x66, 0x0a,
	0x0d, 0x50, 0x75, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x26,
	0x0a, 0x0f, 0x61, 0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x73, 0x6d, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x73, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x0f, 0x0a, 0x0d, 0x50, 0x75, 0x73, 0x68, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x6d,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x61, 0x73, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x90, 0x01, 0x0a, 0x0e, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x12, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe1, 0x01, 0x0a, 0x0f,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x26, 0x0a, 0x0f, 0x61, 0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x73, 0x6d, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x45, 0x0a,
	0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d,
	0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x11, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x32, 0xc1, 0x0c, 0x0a, 0x06, 0x41, 0x73, 0x6d, 0x41, 0x70, 0x69, 0x12, 0x91, 0x01,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x61,
	0x73, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x38, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x73, 0x6d, 0x2f, 0x61, 0x73, 0x6d,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x81, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x61,
	0x73, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x61,
	0x73, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x34, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01,
	0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x61, 0x73, 0x6d, 0x2f, 0x61, 0x73, 0x6d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d, 0x2e, 0x45, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d, 0x2e, 0x45, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x35, 0xba, 0xb8, 0x91, 0x02, 0x02, 0x18, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x73, 0x6d, 0x2f, 0x61, 0x73, 0x6d, 0x61,
	0x70, 0x69, 0x2f, 0x65, 0x6e, 0x64, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x97, 0x01,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d, 0x2e, 0x41,
	0x73, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x02,
	0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x73, 0x6d, 0x2f, 0x61,
	0x73, 0x6d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x9d, 0x01, 0x0a, 0x10, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x53, 0x75, 0x62, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d, 0x2e,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x75, 0x62, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x75, 0x62,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02,
	0x02, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x73, 0x6d, 0x2f,
	0x61, 0x73, 0x6d, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x73, 0x75, 0x62,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xa4, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3f, 0xba,
	0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xac, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a,
	0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x61, 0x73, 0x6d, 0x2f, 0x61, 0x73, 0x6d, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73,
	0x74, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xb4,
	0x01, 0x0a, 0x15, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d, 0x2e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4e, 0x65,
	0x77, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x22, 0x43, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xac, 0x02, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x33, 0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x73, 0x6d, 0x2f, 0x61, 0x73, 0x6d, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6e, 0x65, 0x77, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x88, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x38, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0xb0, 0x09, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x73, 0x6d, 0x2f, 0x61,
	0x73, 0x6d, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0xd5, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x61, 0x73, 0x6d, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x22, 0x4f, 0xba, 0xb8, 0x91, 0x02, 0x0a, 0x0a, 0x03,
	0x08, 0xac, 0x02, 0x0a, 0x03, 0x08, 0xb0, 0x09, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x3a, 0x01,
	0x2a, 0x22, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x61, 0x73, 0x6d, 0x2f, 0x61, 0x73, 0x6d, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x74, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x64, 0x61, 0x74, 0x61, 0x12, 0x9b, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x25, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d,
	0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0xac, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x73, 0x6d, 0x2f, 0x61,
	0x73, 0x6d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0xb3, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x61, 0x73, 0x6d, 0x42,
	0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x73, 0x6d, 0xa2, 0x02, 0x03, 0x41,
	0x56, 0x41, 0xaa, 0x02, 0x10, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x73, 0x6d, 0xca, 0x02, 0x10, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x5c, 0x41, 0x73, 0x6d, 0xe2, 0x02, 0x1c, 0x41, 0x70, 0x69, 0x5c, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x41, 0x73, 0x6d, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3a, 0x3a, 0x41, 0x73, 0x6d, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_v1alpha1_asm_service_proto_rawDescOnce sync.Once
	file_api_v1alpha1_asm_service_proto_rawDescData []byte
)

func file_api_v1alpha1_asm_service_proto_rawDescGZIP() []byte {
	file_api_v1alpha1_asm_service_proto_rawDescOnce.Do(func() {
		file_api_v1alpha1_asm_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_v1alpha1_asm_service_proto_rawDesc), len(file_api_v1alpha1_asm_service_proto_rawDesc)))
	})
	return file_api_v1alpha1_asm_service_proto_rawDescData
}

var file_api_v1alpha1_asm_service_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_api_v1alpha1_asm_service_proto_goTypes = []any{
	(*CreateSessionReq)(nil),                // 0: api.v1alpha1.asm.CreateSessionReq
	(*CreateSessionRes)(nil),                // 1: api.v1alpha1.asm.CreateSessionRes
	(*VoiceRegistration)(nil),               // 2: api.v1alpha1.asm.VoiceRegistration
	(*StreamAgentStateReq)(nil),             // 3: api.v1alpha1.asm.StreamAgentStateReq
	(*ManagerStreamAgentStateReq)(nil),      // 4: api.v1alpha1.asm.ManagerStreamAgentStateReq
	(*GetStatusReq)(nil),                    // 5: api.v1alpha1.asm.GetStatusReq
	(*GetStatusRes)(nil),                    // 6: api.v1alpha1.asm.GetStatusRes
	(*VoiceStatus)(nil),                     // 7: api.v1alpha1.asm.VoiceStatus
	(*QueuedCalls)(nil),                     // 8: api.v1alpha1.asm.QueuedCalls
	(*EndSessionReq)(nil),                   // 9: api.v1alpha1.asm.EndSessionReq
	(*EndSessionRes)(nil),                   // 10: api.v1alpha1.asm.EndSessionRes
	(*GetCurrentSessionReq)(nil),            // 11: api.v1alpha1.asm.GetCurrentSessionReq
	(*AsmSession)(nil),                      // 12: api.v1alpha1.asm.AsmSession
	(*VoiceSession)(nil),                    // 13: api.v1alpha1.asm.VoiceSession
	(*SwitchSubsessionReq)(nil),             // 14: api.v1alpha1.asm.SwitchSubsessionReq
	(*SwitchSubsessionRes)(nil),             // 15: api.v1alpha1.asm.SwitchSubsessionRes
	(*Conversation)(nil),                    // 16: api.v1alpha1.asm.Conversation
	(*ConversationSkills)(nil),              // 17: api.v1alpha1.asm.ConversationSkills
	(*AssignNewConversationReq)(nil),        // 18: api.v1alpha1.asm.AssignNewConversationReq
	(*AssignNewConversationRes)(nil),        // 19: api.v1alpha1.asm.AssignNewConversationRes
	(*ListAgentsReq)(nil),                   // 20: api.v1alpha1.asm.ListAgentsReq
	(*ListAgentsRes)(nil),                   // 21: api.v1alpha1.asm.ListAgentsRes
	(*SetConversationCollectedDataReq)(nil), // 22: api.v1alpha1.asm.SetConversationCollectedDataReq
	(*SetConversationCollectedDataRes)(nil), // 23: api.v1alpha1.asm.SetConversationCollectedDataRes
	(*ListConversationsReq)(nil),            // 24: api.v1alpha1.asm.ListConversationsReq
	(*ListConversationsRes)(nil),            // 25: api.v1alpha1.asm.ListConversationsRes
	(*GetQueuesDetailsReq)(nil),             // 26: api.v1alpha1.asm.GetQueuesDetailsReq
	(*PushEventsReq)(nil),                   // 27: api.v1alpha1.asm.PushEventsReq
	(*PushEventsRes)(nil),                   // 28: api.v1alpha1.asm.PushEventsRes
	(*EnableVoiceReq)(nil),                  // 29: api.v1alpha1.asm.EnableVoiceReq
	(*EnableVoiceRes)(nil),                  // 30: api.v1alpha1.asm.EnableVoiceRes
	(*DisableVoiceReq)(nil),                 // 31: api.v1alpha1.asm.DisableVoiceReq
	(*DisableVoiceRes)(nil),                 // 32: api.v1alpha1.asm.DisableVoiceRes
	nil,                                     // 33: api.v1alpha1.asm.CreateSessionReq.SkillsEntry
	(*QueuedCalls_QueuedCallData)(nil),      // 34: api.v1alpha1.asm.QueuedCalls.QueuedCallData
	nil,                                     // 35: api.v1alpha1.asm.SwitchSubsessionReq.SkillsEntry
	nil,                                     // 36: api.v1alpha1.asm.ConversationSkills.SkillsEntry
	nil,                                     // 37: api.v1alpha1.asm.AssignNewConversationReq.SkillsEntry
	nil,                                     // 38: api.v1alpha1.asm.SetConversationCollectedDataReq.CollectedDataEntry
	nil,                                     // 39: api.v1alpha1.asm.GetQueuesDetailsReq.SkillsEntry
	nil,                                     // 40: api.v1alpha1.asm.EnableVoiceReq.SkillsEntry
	nil,                                     // 41: api.v1alpha1.asm.DisableVoiceReq.SkillsEntry
	(commons.AsmSubsessionType)(0),          // 42: api.commons.AsmSubsessionType
	(*commons.Event)(nil),                   // 43: api.commons.Event
	(commons.AgentStatus_Enum)(0),           // 44: api.commons.AgentStatus.Enum
	(*commons.TransferMember)(nil),          // 45: api.commons.TransferMember
	(*commons.AgentAlert)(nil),              // 46: api.commons.AgentAlert
	(*timestamppb.Timestamp)(nil),           // 47: google.protobuf.Timestamp
	(commons.ConversationStatus)(0),         // 48: api.commons.ConversationStatus
	(commons.ChannelType)(0),                // 49: api.commons.ChannelType
	(*commons.ConversationCustomerInformation)(nil), // 50: api.commons.ConversationCustomerInformation
	(commons.AgentConversationAssignmentStatus)(0),  // 51: api.commons.AgentConversationAssignmentStatus
	(commons.AgentConversationAssignmentType)(0),    // 52: api.commons.AgentConversationAssignmentType
	(*commons.SLATimeouts)(nil),                     // 53: api.commons.SLATimeouts
	(*commons.ConversationCollectedData)(nil),       // 54: api.commons.ConversationCollectedData
	(commons.OmniSenderType)(0),                     // 55: api.commons.OmniSenderType
	(*wrapperspb.Int64Value)(nil),                   // 56: google.protobuf.Int64Value
	(*commons.DashboardAgentInfo)(nil),              // 57: api.commons.DashboardAgentInfo
	(*auth.AuthenticatedUser)(nil),                  // 58: api.commons.auth.AuthenticatedUser
	(*fieldmaskpb.FieldMask)(nil),                   // 59: google.protobuf.FieldMask
	(*commons.OmniConversation)(nil),                // 60: api.commons.OmniConversation
	(*commons.AsmEvent)(nil),                        // 61: api.commons.AsmEvent
	(commons.CallType_Enum)(0),                      // 62: api.commons.CallType.Enum
	(commons.QueuedNotificationType)(0),             // 63: api.commons.QueuedNotificationType
	(*commons.GetQueuesDetailsRes)(nil),             // 64: api.commons.GetQueuesDetailsRes
}
var file_api_v1alpha1_asm_service_proto_depIdxs = []int32{
	33, // 0: api.v1alpha1.asm.CreateSessionReq.skills:type_name -> api.v1alpha1.asm.CreateSessionReq.SkillsEntry
	42, // 1: api.v1alpha1.asm.CreateSessionReq.subsession_type:type_name -> api.commons.AsmSubsessionType
	2,  // 2: api.v1alpha1.asm.CreateSessionRes.voice_registration:type_name -> api.v1alpha1.asm.VoiceRegistration
	43, // 3: api.v1alpha1.asm.GetStatusReq.events:type_name -> api.commons.Event
	7,  // 4: api.v1alpha1.asm.GetStatusRes.voice_status:type_name -> api.v1alpha1.asm.VoiceStatus
	44, // 5: api.v1alpha1.asm.VoiceStatus.status_desc:type_name -> api.commons.AgentStatus.Enum
	8,  // 6: api.v1alpha1.asm.VoiceStatus.queued_calls:type_name -> api.v1alpha1.asm.QueuedCalls
	45, // 7: api.v1alpha1.asm.VoiceStatus.transfer_members:type_name -> api.commons.TransferMember
	46, // 8: api.v1alpha1.asm.VoiceStatus.alert:type_name -> api.commons.AgentAlert
	34, // 9: api.v1alpha1.asm.QueuedCalls.agent_queue_calls:type_name -> api.v1alpha1.asm.QueuedCalls.QueuedCallData
	34, // 10: api.v1alpha1.asm.QueuedCalls.on_hold_calls:type_name -> api.v1alpha1.asm.QueuedCalls.QueuedCallData
	34, // 11: api.v1alpha1.asm.QueuedCalls.hqm_calls:type_name -> api.v1alpha1.asm.QueuedCalls.QueuedCallData
	47, // 12: api.v1alpha1.asm.AsmSession.asm_session_start:type_name -> google.protobuf.Timestamp
	47, // 13: api.v1alpha1.asm.AsmSession.asm_session_end:type_name -> google.protobuf.Timestamp
	13, // 14: api.v1alpha1.asm.AsmSession.voice_session:type_name -> api.v1alpha1.asm.VoiceSession
	47, // 15: api.v1alpha1.asm.VoiceSession.voice_session_start:type_name -> google.protobuf.Timestamp
	47, // 16: api.v1alpha1.asm.VoiceSession.voice_session_end:type_name -> google.protobuf.Timestamp
	35, // 17: api.v1alpha1.asm.SwitchSubsessionReq.skills:type_name -> api.v1alpha1.asm.SwitchSubsessionReq.SkillsEntry
	42, // 18: api.v1alpha1.asm.SwitchSubsessionReq.channel_type:type_name -> api.commons.AsmSubsessionType
	2,  // 19: api.v1alpha1.asm.SwitchSubsessionRes.voice_registration:type_name -> api.v1alpha1.asm.VoiceRegistration
	47, // 20: api.v1alpha1.asm.Conversation.conversation_created_time:type_name -> google.protobuf.Timestamp
	47, // 21: api.v1alpha1.asm.Conversation.assigned_last_updated_time:type_name -> google.protobuf.Timestamp
	48, // 22: api.v1alpha1.asm.Conversation.conversation_status:type_name -> api.commons.ConversationStatus
	49, // 23: api.v1alpha1.asm.Conversation.channel_type:type_name -> api.commons.ChannelType
	50, // 24: api.v1alpha1.asm.Conversation.customer_info:type_name -> api.commons.ConversationCustomerInformation
	47, // 25: api.v1alpha1.asm.Conversation.last_message_time:type_name -> google.protobuf.Timestamp
	17, // 26: api.v1alpha1.asm.Conversation.skills:type_name -> api.v1alpha1.asm.ConversationSkills
	51, // 27: api.v1alpha1.asm.Conversation.assignment_status:type_name -> api.commons.AgentConversationAssignmentStatus
	52, // 28: api.v1alpha1.asm.Conversation.assignment_type:type_name -> api.commons.AgentConversationAssignmentType
	53, // 29: api.v1alpha1.asm.Conversation.sla_timeouts:type_name -> api.commons.SLATimeouts
	54, // 30: api.v1alpha1.asm.Conversation.conversation_collected_data:type_name -> api.commons.ConversationCollectedData
	47, // 31: api.v1alpha1.asm.Conversation.last_message_group_time:type_name -> google.protobuf.Timestamp
	55, // 32: api.v1alpha1.asm.Conversation.last_message_group_type:type_name -> api.commons.OmniSenderType
	56, // 33: api.v1alpha1.asm.Conversation.task_sid:type_name -> google.protobuf.Int64Value
	36, // 34: api.v1alpha1.asm.ConversationSkills.skills:type_name -> api.v1alpha1.asm.ConversationSkills.SkillsEntry
	37, // 35: api.v1alpha1.asm.AssignNewConversationReq.skills:type_name -> api.v1alpha1.asm.AssignNewConversationReq.SkillsEntry
	49, // 36: api.v1alpha1.asm.AssignNewConversationReq.channel_types:type_name -> api.commons.ChannelType
	16, // 37: api.v1alpha1.asm.AssignNewConversationRes.conversation:type_name -> api.v1alpha1.asm.Conversation
	57, // 38: api.v1alpha1.asm.ListAgentsRes.agents:type_name -> api.commons.DashboardAgentInfo
	49, // 39: api.v1alpha1.asm.SetConversationCollectedDataReq.channel_type:type_name -> api.commons.ChannelType
	38, // 40: api.v1alpha1.asm.SetConversationCollectedDataReq.collected_data:type_name -> api.v1alpha1.asm.SetConversationCollectedDataReq.CollectedDataEntry
	58, // 41: api.v1alpha1.asm.ListConversationsReq.authenticated_user:type_name -> api.commons.auth.AuthenticatedUser
	48, // 42: api.v1alpha1.asm.ListConversationsReq.statuses:type_name -> api.commons.ConversationStatus
	59, // 43: api.v1alpha1.asm.ListConversationsReq.field_mask:type_name -> google.protobuf.FieldMask
	49, // 44: api.v1alpha1.asm.ListConversationsReq.channel_types:type_name -> api.commons.ChannelType
	60, // 45: api.v1alpha1.asm.ListConversationsRes.conversations:type_name -> api.commons.OmniConversation
	49, // 46: api.v1alpha1.asm.GetQueuesDetailsReq.channel_types:type_name -> api.commons.ChannelType
	39, // 47: api.v1alpha1.asm.GetQueuesDetailsReq.skills:type_name -> api.v1alpha1.asm.GetQueuesDetailsReq.SkillsEntry
	61, // 48: api.v1alpha1.asm.PushEventsReq.events:type_name -> api.commons.AsmEvent
	40, // 49: api.v1alpha1.asm.EnableVoiceReq.skills:type_name -> api.v1alpha1.asm.EnableVoiceReq.SkillsEntry
	2,  // 50: api.v1alpha1.asm.EnableVoiceRes.voice_registration:type_name -> api.v1alpha1.asm.VoiceRegistration
	41, // 51: api.v1alpha1.asm.DisableVoiceReq.skills:type_name -> api.v1alpha1.asm.DisableVoiceReq.SkillsEntry
	62, // 52: api.v1alpha1.asm.QueuedCalls.QueuedCallData.call_type:type_name -> api.commons.CallType.Enum
	47, // 53: api.v1alpha1.asm.QueuedCalls.QueuedCallData.start_date:type_name -> google.protobuf.Timestamp
	47, // 54: api.v1alpha1.asm.QueuedCalls.QueuedCallData.hold_date:type_name -> google.protobuf.Timestamp
	63, // 55: api.v1alpha1.asm.QueuedCalls.QueuedCallData.queued_notification_type:type_name -> api.commons.QueuedNotificationType
	0,  // 56: api.v1alpha1.asm.AsmApi.CreateSession:input_type -> api.v1alpha1.asm.CreateSessionReq
	5,  // 57: api.v1alpha1.asm.AsmApi.GetStatus:input_type -> api.v1alpha1.asm.GetStatusReq
	9,  // 58: api.v1alpha1.asm.AsmApi.EndSession:input_type -> api.v1alpha1.asm.EndSessionReq
	11, // 59: api.v1alpha1.asm.AsmApi.GetCurrentSession:input_type -> api.v1alpha1.asm.GetCurrentSessionReq
	14, // 60: api.v1alpha1.asm.AsmApi.SwitchSubsession:input_type -> api.v1alpha1.asm.SwitchSubsessionReq
	24, // 61: api.v1alpha1.asm.AsmApi.ListConversations:input_type -> api.v1alpha1.asm.ListConversationsReq
	18, // 62: api.v1alpha1.asm.AsmApi.AssignNewConversation:input_type -> api.v1alpha1.asm.AssignNewConversationReq
	20, // 63: api.v1alpha1.asm.AsmApi.ListAgents:input_type -> api.v1alpha1.asm.ListAgentsReq
	22, // 64: api.v1alpha1.asm.AsmApi.SetConversationCollectedData:input_type -> api.v1alpha1.asm.SetConversationCollectedDataReq
	26, // 65: api.v1alpha1.asm.AsmApi.GetQueuesDetails:input_type -> api.v1alpha1.asm.GetQueuesDetailsReq
	1,  // 66: api.v1alpha1.asm.AsmApi.CreateSession:output_type -> api.v1alpha1.asm.CreateSessionRes
	6,  // 67: api.v1alpha1.asm.AsmApi.GetStatus:output_type -> api.v1alpha1.asm.GetStatusRes
	10, // 68: api.v1alpha1.asm.AsmApi.EndSession:output_type -> api.v1alpha1.asm.EndSessionRes
	12, // 69: api.v1alpha1.asm.AsmApi.GetCurrentSession:output_type -> api.v1alpha1.asm.AsmSession
	15, // 70: api.v1alpha1.asm.AsmApi.SwitchSubsession:output_type -> api.v1alpha1.asm.SwitchSubsessionRes
	25, // 71: api.v1alpha1.asm.AsmApi.ListConversations:output_type -> api.v1alpha1.asm.ListConversationsRes
	19, // 72: api.v1alpha1.asm.AsmApi.AssignNewConversation:output_type -> api.v1alpha1.asm.AssignNewConversationRes
	21, // 73: api.v1alpha1.asm.AsmApi.ListAgents:output_type -> api.v1alpha1.asm.ListAgentsRes
	23, // 74: api.v1alpha1.asm.AsmApi.SetConversationCollectedData:output_type -> api.v1alpha1.asm.SetConversationCollectedDataRes
	64, // 75: api.v1alpha1.asm.AsmApi.GetQueuesDetails:output_type -> api.commons.GetQueuesDetailsRes
	66, // [66:76] is the sub-list for method output_type
	56, // [56:66] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_api_v1alpha1_asm_service_proto_init() }
func file_api_v1alpha1_asm_service_proto_init() {
	if File_api_v1alpha1_asm_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_v1alpha1_asm_service_proto_rawDesc), len(file_api_v1alpha1_asm_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1alpha1_asm_service_proto_goTypes,
		DependencyIndexes: file_api_v1alpha1_asm_service_proto_depIdxs,
		MessageInfos:      file_api_v1alpha1_asm_service_proto_msgTypes,
	}.Build()
	File_api_v1alpha1_asm_service_proto = out.File
	file_api_v1alpha1_asm_service_proto_goTypes = nil
	file_api_v1alpha1_asm_service_proto_depIdxs = nil
}
