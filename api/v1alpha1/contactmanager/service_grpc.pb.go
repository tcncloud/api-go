// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1alpha1/contactmanager/service.proto

package contactmanager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ContactManager_GetContactList_FullMethodName         = "/api.v1alpha1.contactmanager.ContactManager/GetContactList"
	ContactManager_ListContactEntryList_FullMethodName   = "/api.v1alpha1.contactmanager.ContactManager/ListContactEntryList"
	ContactManager_GetEncContactEntry_FullMethodName     = "/api.v1alpha1.contactmanager.ContactManager/GetEncContactEntry"
	ContactManager_GetKYCEncContactEntry_FullMethodName  = "/api.v1alpha1.contactmanager.ContactManager/GetKYCEncContactEntry"
	ContactManager_GetKYCKeys_FullMethodName             = "/api.v1alpha1.contactmanager.ContactManager/GetKYCKeys"
	ContactManager_AddContactEntry_FullMethodName        = "/api.v1alpha1.contactmanager.ContactManager/AddContactEntry"
	ContactManager_EditContactEntry_FullMethodName       = "/api.v1alpha1.contactmanager.ContactManager/EditContactEntry"
	ContactManager_ListContactsByEntity_FullMethodName   = "/api.v1alpha1.contactmanager.ContactManager/ListContactsByEntity"
	ContactManager_GetContactFieldType_FullMethodName    = "/api.v1alpha1.contactmanager.ContactManager/GetContactFieldType"
	ContactManager_ListContactActivityLog_FullMethodName = "/api.v1alpha1.contactmanager.ContactManager/ListContactActivityLog"
)

// ContactManagerClient is the client API for ContactManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContactManagerClient interface {
	GetContactList(ctx context.Context, in *GetContactListRequest, opts ...grpc.CallOption) (*GetContactListResponse, error)
	ListContactEntryList(ctx context.Context, in *ListContactEntryListRequest, opts ...grpc.CallOption) (*ListContactEntryListResponse, error)
	GetEncContactEntry(ctx context.Context, in *GetEncContactEntryRequest, opts ...grpc.CallOption) (*GetEncContactEntryResponse, error)
	GetKYCEncContactEntry(ctx context.Context, in *GetKYCEncContactEntryRequest, opts ...grpc.CallOption) (*GetKYCEncContactEntryResponse, error)
	GetKYCKeys(ctx context.Context, in *GetKYCKeysRequest, opts ...grpc.CallOption) (*GetKYCKeysResponse, error)
	// *
	// Adds a new contact entry based on the provided request.
	AddContactEntry(ctx context.Context, in *AddContactEntryRequest, opts ...grpc.CallOption) (*AddContactEntryResponse, error)
	// *
	// Edits the fields of an existing contact entry...
	EditContactEntry(ctx context.Context, in *EditContactEntryRequest, opts ...grpc.CallOption) (*EditContactEntryResponse, error)
	// *
	// List contacts for entity
	ListContactsByEntity(ctx context.Context, in *ListContactsByEntityRequest, opts ...grpc.CallOption) (*ListContactsByEntityResponse, error)
	// *
	// Get Contact Field Type
	GetContactFieldType(ctx context.Context, in *GetContactFieldTypeRequest, opts ...grpc.CallOption) (*GetContactFieldTypeResponse, error)
	// *
	// List Audit history for a Contact
	ListContactActivityLog(ctx context.Context, in *ListContactActivityLogRequest, opts ...grpc.CallOption) (*ListContactActivityLogResponse, error)
}

type contactManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewContactManagerClient(cc grpc.ClientConnInterface) ContactManagerClient {
	return &contactManagerClient{cc}
}

func (c *contactManagerClient) GetContactList(ctx context.Context, in *GetContactListRequest, opts ...grpc.CallOption) (*GetContactListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContactListResponse)
	err := c.cc.Invoke(ctx, ContactManager_GetContactList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactManagerClient) ListContactEntryList(ctx context.Context, in *ListContactEntryListRequest, opts ...grpc.CallOption) (*ListContactEntryListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListContactEntryListResponse)
	err := c.cc.Invoke(ctx, ContactManager_ListContactEntryList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactManagerClient) GetEncContactEntry(ctx context.Context, in *GetEncContactEntryRequest, opts ...grpc.CallOption) (*GetEncContactEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEncContactEntryResponse)
	err := c.cc.Invoke(ctx, ContactManager_GetEncContactEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactManagerClient) GetKYCEncContactEntry(ctx context.Context, in *GetKYCEncContactEntryRequest, opts ...grpc.CallOption) (*GetKYCEncContactEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKYCEncContactEntryResponse)
	err := c.cc.Invoke(ctx, ContactManager_GetKYCEncContactEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactManagerClient) GetKYCKeys(ctx context.Context, in *GetKYCKeysRequest, opts ...grpc.CallOption) (*GetKYCKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKYCKeysResponse)
	err := c.cc.Invoke(ctx, ContactManager_GetKYCKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactManagerClient) AddContactEntry(ctx context.Context, in *AddContactEntryRequest, opts ...grpc.CallOption) (*AddContactEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddContactEntryResponse)
	err := c.cc.Invoke(ctx, ContactManager_AddContactEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactManagerClient) EditContactEntry(ctx context.Context, in *EditContactEntryRequest, opts ...grpc.CallOption) (*EditContactEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditContactEntryResponse)
	err := c.cc.Invoke(ctx, ContactManager_EditContactEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactManagerClient) ListContactsByEntity(ctx context.Context, in *ListContactsByEntityRequest, opts ...grpc.CallOption) (*ListContactsByEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListContactsByEntityResponse)
	err := c.cc.Invoke(ctx, ContactManager_ListContactsByEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactManagerClient) GetContactFieldType(ctx context.Context, in *GetContactFieldTypeRequest, opts ...grpc.CallOption) (*GetContactFieldTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContactFieldTypeResponse)
	err := c.cc.Invoke(ctx, ContactManager_GetContactFieldType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactManagerClient) ListContactActivityLog(ctx context.Context, in *ListContactActivityLogRequest, opts ...grpc.CallOption) (*ListContactActivityLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListContactActivityLogResponse)
	err := c.cc.Invoke(ctx, ContactManager_ListContactActivityLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactManagerServer is the server API for ContactManager service.
// All implementations must embed UnimplementedContactManagerServer
// for forward compatibility.
type ContactManagerServer interface {
	GetContactList(context.Context, *GetContactListRequest) (*GetContactListResponse, error)
	ListContactEntryList(context.Context, *ListContactEntryListRequest) (*ListContactEntryListResponse, error)
	GetEncContactEntry(context.Context, *GetEncContactEntryRequest) (*GetEncContactEntryResponse, error)
	GetKYCEncContactEntry(context.Context, *GetKYCEncContactEntryRequest) (*GetKYCEncContactEntryResponse, error)
	GetKYCKeys(context.Context, *GetKYCKeysRequest) (*GetKYCKeysResponse, error)
	// *
	// Adds a new contact entry based on the provided request.
	AddContactEntry(context.Context, *AddContactEntryRequest) (*AddContactEntryResponse, error)
	// *
	// Edits the fields of an existing contact entry...
	EditContactEntry(context.Context, *EditContactEntryRequest) (*EditContactEntryResponse, error)
	// *
	// List contacts for entity
	ListContactsByEntity(context.Context, *ListContactsByEntityRequest) (*ListContactsByEntityResponse, error)
	// *
	// Get Contact Field Type
	GetContactFieldType(context.Context, *GetContactFieldTypeRequest) (*GetContactFieldTypeResponse, error)
	// *
	// List Audit history for a Contact
	ListContactActivityLog(context.Context, *ListContactActivityLogRequest) (*ListContactActivityLogResponse, error)
	mustEmbedUnimplementedContactManagerServer()
}

// UnimplementedContactManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContactManagerServer struct{}

func (UnimplementedContactManagerServer) GetContactList(context.Context, *GetContactListRequest) (*GetContactListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactList not implemented")
}
func (UnimplementedContactManagerServer) ListContactEntryList(context.Context, *ListContactEntryListRequest) (*ListContactEntryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContactEntryList not implemented")
}
func (UnimplementedContactManagerServer) GetEncContactEntry(context.Context, *GetEncContactEntryRequest) (*GetEncContactEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEncContactEntry not implemented")
}
func (UnimplementedContactManagerServer) GetKYCEncContactEntry(context.Context, *GetKYCEncContactEntryRequest) (*GetKYCEncContactEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKYCEncContactEntry not implemented")
}
func (UnimplementedContactManagerServer) GetKYCKeys(context.Context, *GetKYCKeysRequest) (*GetKYCKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKYCKeys not implemented")
}
func (UnimplementedContactManagerServer) AddContactEntry(context.Context, *AddContactEntryRequest) (*AddContactEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContactEntry not implemented")
}
func (UnimplementedContactManagerServer) EditContactEntry(context.Context, *EditContactEntryRequest) (*EditContactEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditContactEntry not implemented")
}
func (UnimplementedContactManagerServer) ListContactsByEntity(context.Context, *ListContactsByEntityRequest) (*ListContactsByEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContactsByEntity not implemented")
}
func (UnimplementedContactManagerServer) GetContactFieldType(context.Context, *GetContactFieldTypeRequest) (*GetContactFieldTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactFieldType not implemented")
}
func (UnimplementedContactManagerServer) ListContactActivityLog(context.Context, *ListContactActivityLogRequest) (*ListContactActivityLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContactActivityLog not implemented")
}
func (UnimplementedContactManagerServer) mustEmbedUnimplementedContactManagerServer() {}
func (UnimplementedContactManagerServer) testEmbeddedByValue()                        {}

// UnsafeContactManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContactManagerServer will
// result in compilation errors.
type UnsafeContactManagerServer interface {
	mustEmbedUnimplementedContactManagerServer()
}

func RegisterContactManagerServer(s grpc.ServiceRegistrar, srv ContactManagerServer) {
	// If the following call pancis, it indicates UnimplementedContactManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ContactManager_ServiceDesc, srv)
}

func _ContactManager_GetContactList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerServer).GetContactList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactManager_GetContactList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerServer).GetContactList(ctx, req.(*GetContactListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactManager_ListContactEntryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContactEntryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerServer).ListContactEntryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactManager_ListContactEntryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerServer).ListContactEntryList(ctx, req.(*ListContactEntryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactManager_GetEncContactEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEncContactEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerServer).GetEncContactEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactManager_GetEncContactEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerServer).GetEncContactEntry(ctx, req.(*GetEncContactEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactManager_GetKYCEncContactEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKYCEncContactEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerServer).GetKYCEncContactEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactManager_GetKYCEncContactEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerServer).GetKYCEncContactEntry(ctx, req.(*GetKYCEncContactEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactManager_GetKYCKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKYCKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerServer).GetKYCKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactManager_GetKYCKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerServer).GetKYCKeys(ctx, req.(*GetKYCKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactManager_AddContactEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContactEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerServer).AddContactEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactManager_AddContactEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerServer).AddContactEntry(ctx, req.(*AddContactEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactManager_EditContactEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditContactEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerServer).EditContactEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactManager_EditContactEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerServer).EditContactEntry(ctx, req.(*EditContactEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactManager_ListContactsByEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContactsByEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerServer).ListContactsByEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactManager_ListContactsByEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerServer).ListContactsByEntity(ctx, req.(*ListContactsByEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactManager_GetContactFieldType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactFieldTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerServer).GetContactFieldType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactManager_GetContactFieldType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerServer).GetContactFieldType(ctx, req.(*GetContactFieldTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactManager_ListContactActivityLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContactActivityLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerServer).ListContactActivityLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactManager_ListContactActivityLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerServer).ListContactActivityLog(ctx, req.(*ListContactActivityLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContactManager_ServiceDesc is the grpc.ServiceDesc for ContactManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContactManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.contactmanager.ContactManager",
	HandlerType: (*ContactManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContactList",
			Handler:    _ContactManager_GetContactList_Handler,
		},
		{
			MethodName: "ListContactEntryList",
			Handler:    _ContactManager_ListContactEntryList_Handler,
		},
		{
			MethodName: "GetEncContactEntry",
			Handler:    _ContactManager_GetEncContactEntry_Handler,
		},
		{
			MethodName: "GetKYCEncContactEntry",
			Handler:    _ContactManager_GetKYCEncContactEntry_Handler,
		},
		{
			MethodName: "GetKYCKeys",
			Handler:    _ContactManager_GetKYCKeys_Handler,
		},
		{
			MethodName: "AddContactEntry",
			Handler:    _ContactManager_AddContactEntry_Handler,
		},
		{
			MethodName: "EditContactEntry",
			Handler:    _ContactManager_EditContactEntry_Handler,
		},
		{
			MethodName: "ListContactsByEntity",
			Handler:    _ContactManager_ListContactsByEntity_Handler,
		},
		{
			MethodName: "GetContactFieldType",
			Handler:    _ContactManager_GetContactFieldType_Handler,
		},
		{
			MethodName: "ListContactActivityLog",
			Handler:    _ContactManager_ListContactActivityLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1alpha1/contactmanager/service.proto",
}
