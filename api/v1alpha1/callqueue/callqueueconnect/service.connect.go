// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1alpha1/callqueue/service.proto

package callqueueconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	callqueue "github.com/tcncloud/api-go/v1alpha1/callqueue"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// CallQueueName is the fully-qualified name of the CallQueue service.
	CallQueueName = "api.v1alpha1.callqueue.CallQueue"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CallQueueDequeuePreviewRecordOrCallProcedure is the fully-qualified name of the CallQueue's
	// DequeuePreviewRecordOrCall RPC.
	CallQueueDequeuePreviewRecordOrCallProcedure = "/api.v1alpha1.callqueue.CallQueue/DequeuePreviewRecordOrCall"
	// CallQueueEnqueuePreviewRecordProcedure is the fully-qualified name of the CallQueue's
	// EnqueuePreviewRecord RPC.
	CallQueueEnqueuePreviewRecordProcedure = "/api.v1alpha1.callqueue.CallQueue/EnqueuePreviewRecord"
	// CallQueueDequeueScrubbedCallForPreviewRecordProcedure is the fully-qualified name of the
	// CallQueue's DequeueScrubbedCallForPreviewRecord RPC.
	CallQueueDequeueScrubbedCallForPreviewRecordProcedure = "/api.v1alpha1.callqueue.CallQueue/DequeueScrubbedCallForPreviewRecord"
	// CallQueueClearPreviewRecordReturnQueueProcedure is the fully-qualified name of the CallQueue's
	// ClearPreviewRecordReturnQueue RPC.
	CallQueueClearPreviewRecordReturnQueueProcedure = "/api.v1alpha1.callqueue.CallQueue/ClearPreviewRecordReturnQueue"
	// CallQueueEnqueuePreviewDialCallProcedure is the fully-qualified name of the CallQueue's
	// EnqueuePreviewDialCall RPC.
	CallQueueEnqueuePreviewDialCallProcedure = "/api.v1alpha1.callqueue.CallQueue/EnqueuePreviewDialCall"
	// CallQueueClearManualDialQueueProcedure is the fully-qualified name of the CallQueue's
	// ClearManualDialQueue RPC.
	CallQueueClearManualDialQueueProcedure = "/api.v1alpha1.callqueue.CallQueue/ClearManualDialQueue"
	// CallQueueProcessManualDialCallProcedure is the fully-qualified name of the CallQueue's
	// ProcessManualDialCall RPC.
	CallQueueProcessManualDialCallProcedure = "/api.v1alpha1.callqueue.CallQueue/ProcessManualDialCall"
	// CallQueueDequeueCallForManualApprovalProcedure is the fully-qualified name of the CallQueue's
	// DequeueCallForManualApproval RPC.
	CallQueueDequeueCallForManualApprovalProcedure = "/api.v1alpha1.callqueue.CallQueue/DequeueCallForManualApproval"
	// CallQueueEnqueueManuallyApprovedCallProcedure is the fully-qualified name of the CallQueue's
	// EnqueueManuallyApprovedCall RPC.
	CallQueueEnqueueManuallyApprovedCallProcedure = "/api.v1alpha1.callqueue.CallQueue/EnqueueManuallyApprovedCall"
	// CallQueueEnqueueManuallyRejectedCallProcedure is the fully-qualified name of the CallQueue's
	// EnqueueManuallyRejectedCall RPC.
	CallQueueEnqueueManuallyRejectedCallProcedure = "/api.v1alpha1.callqueue.CallQueue/EnqueueManuallyRejectedCall"
	// CallQueueRequeueManuallyApprovedCallProcedure is the fully-qualified name of the CallQueue's
	// RequeueManuallyApprovedCall RPC.
	CallQueueRequeueManuallyApprovedCallProcedure = "/api.v1alpha1.callqueue.CallQueue/RequeueManuallyApprovedCall"
	// CallQueueEnqueueManuallyApprovedSmsProcedure is the fully-qualified name of the CallQueue's
	// EnqueueManuallyApprovedSms RPC.
	CallQueueEnqueueManuallyApprovedSmsProcedure = "/api.v1alpha1.callqueue.CallQueue/EnqueueManuallyApprovedSms"
	// CallQueueEnqueueManuallyRejectedSmsProcedure is the fully-qualified name of the CallQueue's
	// EnqueueManuallyRejectedSms RPC.
	CallQueueEnqueueManuallyRejectedSmsProcedure = "/api.v1alpha1.callqueue.CallQueue/EnqueueManuallyRejectedSms"
	// CallQueueRequeueManuallyApprovedSmsProcedure is the fully-qualified name of the CallQueue's
	// RequeueManuallyApprovedSms RPC.
	CallQueueRequeueManuallyApprovedSmsProcedure = "/api.v1alpha1.callqueue.CallQueue/RequeueManuallyApprovedSms"
	// CallQueueDequeueSmsMamForManualApprovalProcedure is the fully-qualified name of the CallQueue's
	// DequeueSmsMamForManualApproval RPC.
	CallQueueDequeueSmsMamForManualApprovalProcedure = "/api.v1alpha1.callqueue.CallQueue/DequeueSmsMamForManualApproval"
)

// CallQueueClient is a client for the api.v1alpha1.callqueue.CallQueue service.
type CallQueueClient interface {
	// Returns either a preview record or preview call from one of multiple queues,
	// it also returns a field for the queue name so record/call can be enqueued back to the same queue.
	// It checks for a record first, if no record is dequeued, then the preview call queues will be checked.
	DequeuePreviewRecordOrCall(context.Context, *connect_go.Request[callqueue.DequeuePreviewRecordOrCallReq]) (*connect_go.Response[callqueue.DequeuePreviewRecordOrCallRes], error)
	// Enqueues the given preview record into the specified queue.
	EnqueuePreviewRecord(context.Context, *connect_go.Request[callqueue.EnqueuePreviewRecordReq]) (*connect_go.Response[callqueue.EnqueuePreviewRecordRes], error)
	// Returns the scrubbed simple call data for the given preview record.
	DequeueScrubbedCallForPreviewRecord(context.Context, *connect_go.Request[callqueue.DequeueScrubbedCallForPreviewRecordReq]) (*connect_go.Response[callqueue.DequeueScrubbedCallForPreviewRecordRes], error)
	// Clears the preview record return queue for the requesting agent.
	ClearPreviewRecordReturnQueue(context.Context, *connect_go.Request[callqueue.ClearPreviewRecordReturnQueueReq]) (*connect_go.Response[callqueue.ClearPreviewRecordReturnQueueRes], error)
	// Enqueues the given preview dial call into the specified queue.
	EnqueuePreviewDialCall(context.Context, *connect_go.Request[callqueue.EnqueuePreviewDialCallReq]) (*connect_go.Response[callqueue.EnqueuePreviewDialCallRes], error)
	// Clears the manual dial return queue of the requesting agent.
	ClearManualDialQueue(context.Context, *connect_go.Request[callqueue.ClearManualDialQueueReq]) (*connect_go.Response[callqueue.ClearManualDialQueueRes], error)
	// Enqueues the call to the manual dial receive queue for scrubbing.
	// The call will then be added to the manual dial return queue of the requesting agent.
	// The scrubbed call is then dequeued from that agent's manual dial return queue and returned.
	ProcessManualDialCall(context.Context, *connect_go.Request[callqueue.ProcessManualDialCallReq]) (*connect_go.Response[callqueue.ProcessManualDialCallRes], error)
	// Dequeues a call for manual approval from the requesting agent's hunt group queues or a client queue,
	// it also returns a field for the queue name so call can be enqueued back to the same queue.
	DequeueCallForManualApproval(context.Context, *connect_go.Request[callqueue.DequeueCallForManualApprovalReq]) (*connect_go.Response[callqueue.DequeueCallForManualApprovalRes], error)
	// Enqueues a call in the MAC approval queue.
	EnqueueManuallyApprovedCall(context.Context, *connect_go.Request[callqueue.EnqueueManuallyApprovedCallReq]) (*connect_go.Response[callqueue.EnqueueManuallyApprovedCallRes], error)
	// Enqueues a call in the MAC rejection queue.
	EnqueueManuallyRejectedCall(context.Context, *connect_go.Request[callqueue.EnqueueManuallyRejectedCallReq]) (*connect_go.Response[callqueue.EnqueueManuallyRejectedCallRes], error)
	// Requeues a call requiring manual approval to the specified queue.
	RequeueManuallyApprovedCall(context.Context, *connect_go.Request[callqueue.RequeueManuallyApprovedCallReq]) (*connect_go.Response[callqueue.RequeueManuallyApprovedCallRes], error)
	// Enqueues sms msg in the MAM approval queue.
	EnqueueManuallyApprovedSms(context.Context, *connect_go.Request[callqueue.EnqueueManuallyApprovedSmsReq]) (*connect_go.Response[callqueue.EnqueueManuallyApprovedSmsRes], error)
	// Enqueues sms msg in the MAM rejection queue.
	EnqueueManuallyRejectedSms(context.Context, *connect_go.Request[callqueue.EnqueueManuallyRejectedSmsReq]) (*connect_go.Response[callqueue.EnqueueManuallyRejectedSmsRes], error)
	// Requeues sms msg requiring manual approval to the specified queue.
	RequeueManuallyApprovedSms(context.Context, *connect_go.Request[callqueue.RequeueManuallyApprovedSmsReq]) (*connect_go.Response[callqueue.RequeueManuallyApprovedSmsRes], error)
	// Dequeues a sms mam msg for manual approval from the requesting agent's hunt group queues or a client queue,
	// it also returns a field for the queue name so sms mam msg can be enqueued back to the same queue.
	DequeueSmsMamForManualApproval(context.Context, *connect_go.Request[callqueue.DequeueSmsMamForManualApprovalReq]) (*connect_go.Response[callqueue.DequeueSmsMamForManualApprovalRes], error)
}

// NewCallQueueClient constructs a client for the api.v1alpha1.callqueue.CallQueue service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCallQueueClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) CallQueueClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &callQueueClient{
		dequeuePreviewRecordOrCall: connect_go.NewClient[callqueue.DequeuePreviewRecordOrCallReq, callqueue.DequeuePreviewRecordOrCallRes](
			httpClient,
			baseURL+CallQueueDequeuePreviewRecordOrCallProcedure,
			opts...,
		),
		enqueuePreviewRecord: connect_go.NewClient[callqueue.EnqueuePreviewRecordReq, callqueue.EnqueuePreviewRecordRes](
			httpClient,
			baseURL+CallQueueEnqueuePreviewRecordProcedure,
			opts...,
		),
		dequeueScrubbedCallForPreviewRecord: connect_go.NewClient[callqueue.DequeueScrubbedCallForPreviewRecordReq, callqueue.DequeueScrubbedCallForPreviewRecordRes](
			httpClient,
			baseURL+CallQueueDequeueScrubbedCallForPreviewRecordProcedure,
			opts...,
		),
		clearPreviewRecordReturnQueue: connect_go.NewClient[callqueue.ClearPreviewRecordReturnQueueReq, callqueue.ClearPreviewRecordReturnQueueRes](
			httpClient,
			baseURL+CallQueueClearPreviewRecordReturnQueueProcedure,
			opts...,
		),
		enqueuePreviewDialCall: connect_go.NewClient[callqueue.EnqueuePreviewDialCallReq, callqueue.EnqueuePreviewDialCallRes](
			httpClient,
			baseURL+CallQueueEnqueuePreviewDialCallProcedure,
			opts...,
		),
		clearManualDialQueue: connect_go.NewClient[callqueue.ClearManualDialQueueReq, callqueue.ClearManualDialQueueRes](
			httpClient,
			baseURL+CallQueueClearManualDialQueueProcedure,
			opts...,
		),
		processManualDialCall: connect_go.NewClient[callqueue.ProcessManualDialCallReq, callqueue.ProcessManualDialCallRes](
			httpClient,
			baseURL+CallQueueProcessManualDialCallProcedure,
			opts...,
		),
		dequeueCallForManualApproval: connect_go.NewClient[callqueue.DequeueCallForManualApprovalReq, callqueue.DequeueCallForManualApprovalRes](
			httpClient,
			baseURL+CallQueueDequeueCallForManualApprovalProcedure,
			opts...,
		),
		enqueueManuallyApprovedCall: connect_go.NewClient[callqueue.EnqueueManuallyApprovedCallReq, callqueue.EnqueueManuallyApprovedCallRes](
			httpClient,
			baseURL+CallQueueEnqueueManuallyApprovedCallProcedure,
			opts...,
		),
		enqueueManuallyRejectedCall: connect_go.NewClient[callqueue.EnqueueManuallyRejectedCallReq, callqueue.EnqueueManuallyRejectedCallRes](
			httpClient,
			baseURL+CallQueueEnqueueManuallyRejectedCallProcedure,
			opts...,
		),
		requeueManuallyApprovedCall: connect_go.NewClient[callqueue.RequeueManuallyApprovedCallReq, callqueue.RequeueManuallyApprovedCallRes](
			httpClient,
			baseURL+CallQueueRequeueManuallyApprovedCallProcedure,
			opts...,
		),
		enqueueManuallyApprovedSms: connect_go.NewClient[callqueue.EnqueueManuallyApprovedSmsReq, callqueue.EnqueueManuallyApprovedSmsRes](
			httpClient,
			baseURL+CallQueueEnqueueManuallyApprovedSmsProcedure,
			opts...,
		),
		enqueueManuallyRejectedSms: connect_go.NewClient[callqueue.EnqueueManuallyRejectedSmsReq, callqueue.EnqueueManuallyRejectedSmsRes](
			httpClient,
			baseURL+CallQueueEnqueueManuallyRejectedSmsProcedure,
			opts...,
		),
		requeueManuallyApprovedSms: connect_go.NewClient[callqueue.RequeueManuallyApprovedSmsReq, callqueue.RequeueManuallyApprovedSmsRes](
			httpClient,
			baseURL+CallQueueRequeueManuallyApprovedSmsProcedure,
			opts...,
		),
		dequeueSmsMamForManualApproval: connect_go.NewClient[callqueue.DequeueSmsMamForManualApprovalReq, callqueue.DequeueSmsMamForManualApprovalRes](
			httpClient,
			baseURL+CallQueueDequeueSmsMamForManualApprovalProcedure,
			opts...,
		),
	}
}

// callQueueClient implements CallQueueClient.
type callQueueClient struct {
	dequeuePreviewRecordOrCall          *connect_go.Client[callqueue.DequeuePreviewRecordOrCallReq, callqueue.DequeuePreviewRecordOrCallRes]
	enqueuePreviewRecord                *connect_go.Client[callqueue.EnqueuePreviewRecordReq, callqueue.EnqueuePreviewRecordRes]
	dequeueScrubbedCallForPreviewRecord *connect_go.Client[callqueue.DequeueScrubbedCallForPreviewRecordReq, callqueue.DequeueScrubbedCallForPreviewRecordRes]
	clearPreviewRecordReturnQueue       *connect_go.Client[callqueue.ClearPreviewRecordReturnQueueReq, callqueue.ClearPreviewRecordReturnQueueRes]
	enqueuePreviewDialCall              *connect_go.Client[callqueue.EnqueuePreviewDialCallReq, callqueue.EnqueuePreviewDialCallRes]
	clearManualDialQueue                *connect_go.Client[callqueue.ClearManualDialQueueReq, callqueue.ClearManualDialQueueRes]
	processManualDialCall               *connect_go.Client[callqueue.ProcessManualDialCallReq, callqueue.ProcessManualDialCallRes]
	dequeueCallForManualApproval        *connect_go.Client[callqueue.DequeueCallForManualApprovalReq, callqueue.DequeueCallForManualApprovalRes]
	enqueueManuallyApprovedCall         *connect_go.Client[callqueue.EnqueueManuallyApprovedCallReq, callqueue.EnqueueManuallyApprovedCallRes]
	enqueueManuallyRejectedCall         *connect_go.Client[callqueue.EnqueueManuallyRejectedCallReq, callqueue.EnqueueManuallyRejectedCallRes]
	requeueManuallyApprovedCall         *connect_go.Client[callqueue.RequeueManuallyApprovedCallReq, callqueue.RequeueManuallyApprovedCallRes]
	enqueueManuallyApprovedSms          *connect_go.Client[callqueue.EnqueueManuallyApprovedSmsReq, callqueue.EnqueueManuallyApprovedSmsRes]
	enqueueManuallyRejectedSms          *connect_go.Client[callqueue.EnqueueManuallyRejectedSmsReq, callqueue.EnqueueManuallyRejectedSmsRes]
	requeueManuallyApprovedSms          *connect_go.Client[callqueue.RequeueManuallyApprovedSmsReq, callqueue.RequeueManuallyApprovedSmsRes]
	dequeueSmsMamForManualApproval      *connect_go.Client[callqueue.DequeueSmsMamForManualApprovalReq, callqueue.DequeueSmsMamForManualApprovalRes]
}

// DequeuePreviewRecordOrCall calls api.v1alpha1.callqueue.CallQueue.DequeuePreviewRecordOrCall.
func (c *callQueueClient) DequeuePreviewRecordOrCall(ctx context.Context, req *connect_go.Request[callqueue.DequeuePreviewRecordOrCallReq]) (*connect_go.Response[callqueue.DequeuePreviewRecordOrCallRes], error) {
	return c.dequeuePreviewRecordOrCall.CallUnary(ctx, req)
}

// EnqueuePreviewRecord calls api.v1alpha1.callqueue.CallQueue.EnqueuePreviewRecord.
func (c *callQueueClient) EnqueuePreviewRecord(ctx context.Context, req *connect_go.Request[callqueue.EnqueuePreviewRecordReq]) (*connect_go.Response[callqueue.EnqueuePreviewRecordRes], error) {
	return c.enqueuePreviewRecord.CallUnary(ctx, req)
}

// DequeueScrubbedCallForPreviewRecord calls
// api.v1alpha1.callqueue.CallQueue.DequeueScrubbedCallForPreviewRecord.
func (c *callQueueClient) DequeueScrubbedCallForPreviewRecord(ctx context.Context, req *connect_go.Request[callqueue.DequeueScrubbedCallForPreviewRecordReq]) (*connect_go.Response[callqueue.DequeueScrubbedCallForPreviewRecordRes], error) {
	return c.dequeueScrubbedCallForPreviewRecord.CallUnary(ctx, req)
}

// ClearPreviewRecordReturnQueue calls
// api.v1alpha1.callqueue.CallQueue.ClearPreviewRecordReturnQueue.
func (c *callQueueClient) ClearPreviewRecordReturnQueue(ctx context.Context, req *connect_go.Request[callqueue.ClearPreviewRecordReturnQueueReq]) (*connect_go.Response[callqueue.ClearPreviewRecordReturnQueueRes], error) {
	return c.clearPreviewRecordReturnQueue.CallUnary(ctx, req)
}

// EnqueuePreviewDialCall calls api.v1alpha1.callqueue.CallQueue.EnqueuePreviewDialCall.
func (c *callQueueClient) EnqueuePreviewDialCall(ctx context.Context, req *connect_go.Request[callqueue.EnqueuePreviewDialCallReq]) (*connect_go.Response[callqueue.EnqueuePreviewDialCallRes], error) {
	return c.enqueuePreviewDialCall.CallUnary(ctx, req)
}

// ClearManualDialQueue calls api.v1alpha1.callqueue.CallQueue.ClearManualDialQueue.
func (c *callQueueClient) ClearManualDialQueue(ctx context.Context, req *connect_go.Request[callqueue.ClearManualDialQueueReq]) (*connect_go.Response[callqueue.ClearManualDialQueueRes], error) {
	return c.clearManualDialQueue.CallUnary(ctx, req)
}

// ProcessManualDialCall calls api.v1alpha1.callqueue.CallQueue.ProcessManualDialCall.
func (c *callQueueClient) ProcessManualDialCall(ctx context.Context, req *connect_go.Request[callqueue.ProcessManualDialCallReq]) (*connect_go.Response[callqueue.ProcessManualDialCallRes], error) {
	return c.processManualDialCall.CallUnary(ctx, req)
}

// DequeueCallForManualApproval calls api.v1alpha1.callqueue.CallQueue.DequeueCallForManualApproval.
func (c *callQueueClient) DequeueCallForManualApproval(ctx context.Context, req *connect_go.Request[callqueue.DequeueCallForManualApprovalReq]) (*connect_go.Response[callqueue.DequeueCallForManualApprovalRes], error) {
	return c.dequeueCallForManualApproval.CallUnary(ctx, req)
}

// EnqueueManuallyApprovedCall calls api.v1alpha1.callqueue.CallQueue.EnqueueManuallyApprovedCall.
func (c *callQueueClient) EnqueueManuallyApprovedCall(ctx context.Context, req *connect_go.Request[callqueue.EnqueueManuallyApprovedCallReq]) (*connect_go.Response[callqueue.EnqueueManuallyApprovedCallRes], error) {
	return c.enqueueManuallyApprovedCall.CallUnary(ctx, req)
}

// EnqueueManuallyRejectedCall calls api.v1alpha1.callqueue.CallQueue.EnqueueManuallyRejectedCall.
func (c *callQueueClient) EnqueueManuallyRejectedCall(ctx context.Context, req *connect_go.Request[callqueue.EnqueueManuallyRejectedCallReq]) (*connect_go.Response[callqueue.EnqueueManuallyRejectedCallRes], error) {
	return c.enqueueManuallyRejectedCall.CallUnary(ctx, req)
}

// RequeueManuallyApprovedCall calls api.v1alpha1.callqueue.CallQueue.RequeueManuallyApprovedCall.
func (c *callQueueClient) RequeueManuallyApprovedCall(ctx context.Context, req *connect_go.Request[callqueue.RequeueManuallyApprovedCallReq]) (*connect_go.Response[callqueue.RequeueManuallyApprovedCallRes], error) {
	return c.requeueManuallyApprovedCall.CallUnary(ctx, req)
}

// EnqueueManuallyApprovedSms calls api.v1alpha1.callqueue.CallQueue.EnqueueManuallyApprovedSms.
func (c *callQueueClient) EnqueueManuallyApprovedSms(ctx context.Context, req *connect_go.Request[callqueue.EnqueueManuallyApprovedSmsReq]) (*connect_go.Response[callqueue.EnqueueManuallyApprovedSmsRes], error) {
	return c.enqueueManuallyApprovedSms.CallUnary(ctx, req)
}

// EnqueueManuallyRejectedSms calls api.v1alpha1.callqueue.CallQueue.EnqueueManuallyRejectedSms.
func (c *callQueueClient) EnqueueManuallyRejectedSms(ctx context.Context, req *connect_go.Request[callqueue.EnqueueManuallyRejectedSmsReq]) (*connect_go.Response[callqueue.EnqueueManuallyRejectedSmsRes], error) {
	return c.enqueueManuallyRejectedSms.CallUnary(ctx, req)
}

// RequeueManuallyApprovedSms calls api.v1alpha1.callqueue.CallQueue.RequeueManuallyApprovedSms.
func (c *callQueueClient) RequeueManuallyApprovedSms(ctx context.Context, req *connect_go.Request[callqueue.RequeueManuallyApprovedSmsReq]) (*connect_go.Response[callqueue.RequeueManuallyApprovedSmsRes], error) {
	return c.requeueManuallyApprovedSms.CallUnary(ctx, req)
}

// DequeueSmsMamForManualApproval calls
// api.v1alpha1.callqueue.CallQueue.DequeueSmsMamForManualApproval.
func (c *callQueueClient) DequeueSmsMamForManualApproval(ctx context.Context, req *connect_go.Request[callqueue.DequeueSmsMamForManualApprovalReq]) (*connect_go.Response[callqueue.DequeueSmsMamForManualApprovalRes], error) {
	return c.dequeueSmsMamForManualApproval.CallUnary(ctx, req)
}

// CallQueueHandler is an implementation of the api.v1alpha1.callqueue.CallQueue service.
type CallQueueHandler interface {
	// Returns either a preview record or preview call from one of multiple queues,
	// it also returns a field for the queue name so record/call can be enqueued back to the same queue.
	// It checks for a record first, if no record is dequeued, then the preview call queues will be checked.
	DequeuePreviewRecordOrCall(context.Context, *connect_go.Request[callqueue.DequeuePreviewRecordOrCallReq]) (*connect_go.Response[callqueue.DequeuePreviewRecordOrCallRes], error)
	// Enqueues the given preview record into the specified queue.
	EnqueuePreviewRecord(context.Context, *connect_go.Request[callqueue.EnqueuePreviewRecordReq]) (*connect_go.Response[callqueue.EnqueuePreviewRecordRes], error)
	// Returns the scrubbed simple call data for the given preview record.
	DequeueScrubbedCallForPreviewRecord(context.Context, *connect_go.Request[callqueue.DequeueScrubbedCallForPreviewRecordReq]) (*connect_go.Response[callqueue.DequeueScrubbedCallForPreviewRecordRes], error)
	// Clears the preview record return queue for the requesting agent.
	ClearPreviewRecordReturnQueue(context.Context, *connect_go.Request[callqueue.ClearPreviewRecordReturnQueueReq]) (*connect_go.Response[callqueue.ClearPreviewRecordReturnQueueRes], error)
	// Enqueues the given preview dial call into the specified queue.
	EnqueuePreviewDialCall(context.Context, *connect_go.Request[callqueue.EnqueuePreviewDialCallReq]) (*connect_go.Response[callqueue.EnqueuePreviewDialCallRes], error)
	// Clears the manual dial return queue of the requesting agent.
	ClearManualDialQueue(context.Context, *connect_go.Request[callqueue.ClearManualDialQueueReq]) (*connect_go.Response[callqueue.ClearManualDialQueueRes], error)
	// Enqueues the call to the manual dial receive queue for scrubbing.
	// The call will then be added to the manual dial return queue of the requesting agent.
	// The scrubbed call is then dequeued from that agent's manual dial return queue and returned.
	ProcessManualDialCall(context.Context, *connect_go.Request[callqueue.ProcessManualDialCallReq]) (*connect_go.Response[callqueue.ProcessManualDialCallRes], error)
	// Dequeues a call for manual approval from the requesting agent's hunt group queues or a client queue,
	// it also returns a field for the queue name so call can be enqueued back to the same queue.
	DequeueCallForManualApproval(context.Context, *connect_go.Request[callqueue.DequeueCallForManualApprovalReq]) (*connect_go.Response[callqueue.DequeueCallForManualApprovalRes], error)
	// Enqueues a call in the MAC approval queue.
	EnqueueManuallyApprovedCall(context.Context, *connect_go.Request[callqueue.EnqueueManuallyApprovedCallReq]) (*connect_go.Response[callqueue.EnqueueManuallyApprovedCallRes], error)
	// Enqueues a call in the MAC rejection queue.
	EnqueueManuallyRejectedCall(context.Context, *connect_go.Request[callqueue.EnqueueManuallyRejectedCallReq]) (*connect_go.Response[callqueue.EnqueueManuallyRejectedCallRes], error)
	// Requeues a call requiring manual approval to the specified queue.
	RequeueManuallyApprovedCall(context.Context, *connect_go.Request[callqueue.RequeueManuallyApprovedCallReq]) (*connect_go.Response[callqueue.RequeueManuallyApprovedCallRes], error)
	// Enqueues sms msg in the MAM approval queue.
	EnqueueManuallyApprovedSms(context.Context, *connect_go.Request[callqueue.EnqueueManuallyApprovedSmsReq]) (*connect_go.Response[callqueue.EnqueueManuallyApprovedSmsRes], error)
	// Enqueues sms msg in the MAM rejection queue.
	EnqueueManuallyRejectedSms(context.Context, *connect_go.Request[callqueue.EnqueueManuallyRejectedSmsReq]) (*connect_go.Response[callqueue.EnqueueManuallyRejectedSmsRes], error)
	// Requeues sms msg requiring manual approval to the specified queue.
	RequeueManuallyApprovedSms(context.Context, *connect_go.Request[callqueue.RequeueManuallyApprovedSmsReq]) (*connect_go.Response[callqueue.RequeueManuallyApprovedSmsRes], error)
	// Dequeues a sms mam msg for manual approval from the requesting agent's hunt group queues or a client queue,
	// it also returns a field for the queue name so sms mam msg can be enqueued back to the same queue.
	DequeueSmsMamForManualApproval(context.Context, *connect_go.Request[callqueue.DequeueSmsMamForManualApprovalReq]) (*connect_go.Response[callqueue.DequeueSmsMamForManualApprovalRes], error)
}

// NewCallQueueHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCallQueueHandler(svc CallQueueHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(CallQueueDequeuePreviewRecordOrCallProcedure, connect_go.NewUnaryHandler(
		CallQueueDequeuePreviewRecordOrCallProcedure,
		svc.DequeuePreviewRecordOrCall,
		opts...,
	))
	mux.Handle(CallQueueEnqueuePreviewRecordProcedure, connect_go.NewUnaryHandler(
		CallQueueEnqueuePreviewRecordProcedure,
		svc.EnqueuePreviewRecord,
		opts...,
	))
	mux.Handle(CallQueueDequeueScrubbedCallForPreviewRecordProcedure, connect_go.NewUnaryHandler(
		CallQueueDequeueScrubbedCallForPreviewRecordProcedure,
		svc.DequeueScrubbedCallForPreviewRecord,
		opts...,
	))
	mux.Handle(CallQueueClearPreviewRecordReturnQueueProcedure, connect_go.NewUnaryHandler(
		CallQueueClearPreviewRecordReturnQueueProcedure,
		svc.ClearPreviewRecordReturnQueue,
		opts...,
	))
	mux.Handle(CallQueueEnqueuePreviewDialCallProcedure, connect_go.NewUnaryHandler(
		CallQueueEnqueuePreviewDialCallProcedure,
		svc.EnqueuePreviewDialCall,
		opts...,
	))
	mux.Handle(CallQueueClearManualDialQueueProcedure, connect_go.NewUnaryHandler(
		CallQueueClearManualDialQueueProcedure,
		svc.ClearManualDialQueue,
		opts...,
	))
	mux.Handle(CallQueueProcessManualDialCallProcedure, connect_go.NewUnaryHandler(
		CallQueueProcessManualDialCallProcedure,
		svc.ProcessManualDialCall,
		opts...,
	))
	mux.Handle(CallQueueDequeueCallForManualApprovalProcedure, connect_go.NewUnaryHandler(
		CallQueueDequeueCallForManualApprovalProcedure,
		svc.DequeueCallForManualApproval,
		opts...,
	))
	mux.Handle(CallQueueEnqueueManuallyApprovedCallProcedure, connect_go.NewUnaryHandler(
		CallQueueEnqueueManuallyApprovedCallProcedure,
		svc.EnqueueManuallyApprovedCall,
		opts...,
	))
	mux.Handle(CallQueueEnqueueManuallyRejectedCallProcedure, connect_go.NewUnaryHandler(
		CallQueueEnqueueManuallyRejectedCallProcedure,
		svc.EnqueueManuallyRejectedCall,
		opts...,
	))
	mux.Handle(CallQueueRequeueManuallyApprovedCallProcedure, connect_go.NewUnaryHandler(
		CallQueueRequeueManuallyApprovedCallProcedure,
		svc.RequeueManuallyApprovedCall,
		opts...,
	))
	mux.Handle(CallQueueEnqueueManuallyApprovedSmsProcedure, connect_go.NewUnaryHandler(
		CallQueueEnqueueManuallyApprovedSmsProcedure,
		svc.EnqueueManuallyApprovedSms,
		opts...,
	))
	mux.Handle(CallQueueEnqueueManuallyRejectedSmsProcedure, connect_go.NewUnaryHandler(
		CallQueueEnqueueManuallyRejectedSmsProcedure,
		svc.EnqueueManuallyRejectedSms,
		opts...,
	))
	mux.Handle(CallQueueRequeueManuallyApprovedSmsProcedure, connect_go.NewUnaryHandler(
		CallQueueRequeueManuallyApprovedSmsProcedure,
		svc.RequeueManuallyApprovedSms,
		opts...,
	))
	mux.Handle(CallQueueDequeueSmsMamForManualApprovalProcedure, connect_go.NewUnaryHandler(
		CallQueueDequeueSmsMamForManualApprovalProcedure,
		svc.DequeueSmsMamForManualApproval,
		opts...,
	))
	return "/api.v1alpha1.callqueue.CallQueue/", mux
}

// UnimplementedCallQueueHandler returns CodeUnimplemented from all methods.
type UnimplementedCallQueueHandler struct{}

func (UnimplementedCallQueueHandler) DequeuePreviewRecordOrCall(context.Context, *connect_go.Request[callqueue.DequeuePreviewRecordOrCallReq]) (*connect_go.Response[callqueue.DequeuePreviewRecordOrCallRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.callqueue.CallQueue.DequeuePreviewRecordOrCall is not implemented"))
}

func (UnimplementedCallQueueHandler) EnqueuePreviewRecord(context.Context, *connect_go.Request[callqueue.EnqueuePreviewRecordReq]) (*connect_go.Response[callqueue.EnqueuePreviewRecordRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.callqueue.CallQueue.EnqueuePreviewRecord is not implemented"))
}

func (UnimplementedCallQueueHandler) DequeueScrubbedCallForPreviewRecord(context.Context, *connect_go.Request[callqueue.DequeueScrubbedCallForPreviewRecordReq]) (*connect_go.Response[callqueue.DequeueScrubbedCallForPreviewRecordRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.callqueue.CallQueue.DequeueScrubbedCallForPreviewRecord is not implemented"))
}

func (UnimplementedCallQueueHandler) ClearPreviewRecordReturnQueue(context.Context, *connect_go.Request[callqueue.ClearPreviewRecordReturnQueueReq]) (*connect_go.Response[callqueue.ClearPreviewRecordReturnQueueRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.callqueue.CallQueue.ClearPreviewRecordReturnQueue is not implemented"))
}

func (UnimplementedCallQueueHandler) EnqueuePreviewDialCall(context.Context, *connect_go.Request[callqueue.EnqueuePreviewDialCallReq]) (*connect_go.Response[callqueue.EnqueuePreviewDialCallRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.callqueue.CallQueue.EnqueuePreviewDialCall is not implemented"))
}

func (UnimplementedCallQueueHandler) ClearManualDialQueue(context.Context, *connect_go.Request[callqueue.ClearManualDialQueueReq]) (*connect_go.Response[callqueue.ClearManualDialQueueRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.callqueue.CallQueue.ClearManualDialQueue is not implemented"))
}

func (UnimplementedCallQueueHandler) ProcessManualDialCall(context.Context, *connect_go.Request[callqueue.ProcessManualDialCallReq]) (*connect_go.Response[callqueue.ProcessManualDialCallRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.callqueue.CallQueue.ProcessManualDialCall is not implemented"))
}

func (UnimplementedCallQueueHandler) DequeueCallForManualApproval(context.Context, *connect_go.Request[callqueue.DequeueCallForManualApprovalReq]) (*connect_go.Response[callqueue.DequeueCallForManualApprovalRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.callqueue.CallQueue.DequeueCallForManualApproval is not implemented"))
}

func (UnimplementedCallQueueHandler) EnqueueManuallyApprovedCall(context.Context, *connect_go.Request[callqueue.EnqueueManuallyApprovedCallReq]) (*connect_go.Response[callqueue.EnqueueManuallyApprovedCallRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.callqueue.CallQueue.EnqueueManuallyApprovedCall is not implemented"))
}

func (UnimplementedCallQueueHandler) EnqueueManuallyRejectedCall(context.Context, *connect_go.Request[callqueue.EnqueueManuallyRejectedCallReq]) (*connect_go.Response[callqueue.EnqueueManuallyRejectedCallRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.callqueue.CallQueue.EnqueueManuallyRejectedCall is not implemented"))
}

func (UnimplementedCallQueueHandler) RequeueManuallyApprovedCall(context.Context, *connect_go.Request[callqueue.RequeueManuallyApprovedCallReq]) (*connect_go.Response[callqueue.RequeueManuallyApprovedCallRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.callqueue.CallQueue.RequeueManuallyApprovedCall is not implemented"))
}

func (UnimplementedCallQueueHandler) EnqueueManuallyApprovedSms(context.Context, *connect_go.Request[callqueue.EnqueueManuallyApprovedSmsReq]) (*connect_go.Response[callqueue.EnqueueManuallyApprovedSmsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.callqueue.CallQueue.EnqueueManuallyApprovedSms is not implemented"))
}

func (UnimplementedCallQueueHandler) EnqueueManuallyRejectedSms(context.Context, *connect_go.Request[callqueue.EnqueueManuallyRejectedSmsReq]) (*connect_go.Response[callqueue.EnqueueManuallyRejectedSmsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.callqueue.CallQueue.EnqueueManuallyRejectedSms is not implemented"))
}

func (UnimplementedCallQueueHandler) RequeueManuallyApprovedSms(context.Context, *connect_go.Request[callqueue.RequeueManuallyApprovedSmsReq]) (*connect_go.Response[callqueue.RequeueManuallyApprovedSmsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.callqueue.CallQueue.RequeueManuallyApprovedSms is not implemented"))
}

func (UnimplementedCallQueueHandler) DequeueSmsMamForManualApproval(context.Context, *connect_go.Request[callqueue.DequeueSmsMamForManualApprovalReq]) (*connect_go.Response[callqueue.DequeueSmsMamForManualApprovalRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.callqueue.CallQueue.DequeueSmsMamForManualApproval is not implemented"))
}
