// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1alpha1/room303/service.proto

package room303connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	commons "github.com/tcncloud/api-go/api/commons"
	room303 "github.com/tcncloud/api-go/api/v1alpha1/room303"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// Room303APIName is the fully-qualified name of the Room303API service.
	Room303APIName = "api.v1alpha1.room303.Room303API"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// Room303APIAddRoomMemberProcedure is the fully-qualified name of the Room303API's AddRoomMember
	// RPC.
	Room303APIAddRoomMemberProcedure = "/api.v1alpha1.room303.Room303API/AddRoomMember"
	// Room303APIRemoveRoomMemberProcedure is the fully-qualified name of the Room303API's
	// RemoveRoomMember RPC.
	Room303APIRemoveRoomMemberProcedure = "/api.v1alpha1.room303.Room303API/RemoveRoomMember"
	// Room303APIListRoomMembersProcedure is the fully-qualified name of the Room303API's
	// ListRoomMembers RPC.
	Room303APIListRoomMembersProcedure = "/api.v1alpha1.room303.Room303API/ListRoomMembers"
	// Room303APISetAdminForRoomMemberProcedure is the fully-qualified name of the Room303API's
	// SetAdminForRoomMember RPC.
	Room303APISetAdminForRoomMemberProcedure = "/api.v1alpha1.room303.Room303API/SetAdminForRoomMember"
	// Room303APIJoinRoomProcedure is the fully-qualified name of the Room303API's JoinRoom RPC.
	Room303APIJoinRoomProcedure = "/api.v1alpha1.room303.Room303API/JoinRoom"
	// Room303APIGetRoomMemberProcedure is the fully-qualified name of the Room303API's GetRoomMember
	// RPC.
	Room303APIGetRoomMemberProcedure = "/api.v1alpha1.room303.Room303API/GetRoomMember"
	// Room303APICreateMessageProcedure is the fully-qualified name of the Room303API's CreateMessage
	// RPC.
	Room303APICreateMessageProcedure = "/api.v1alpha1.room303.Room303API/CreateMessage"
	// Room303APIEditMessageProcedure is the fully-qualified name of the Room303API's EditMessage RPC.
	Room303APIEditMessageProcedure = "/api.v1alpha1.room303.Room303API/EditMessage"
	// Room303APIDeleteMessageProcedure is the fully-qualified name of the Room303API's DeleteMessage
	// RPC.
	Room303APIDeleteMessageProcedure = "/api.v1alpha1.room303.Room303API/DeleteMessage"
	// Room303APIGetMessagesProcedure is the fully-qualified name of the Room303API's GetMessages RPC.
	Room303APIGetMessagesProcedure = "/api.v1alpha1.room303.Room303API/GetMessages"
	// Room303APIStreamMessageUpdatesProcedure is the fully-qualified name of the Room303API's
	// StreamMessageUpdates RPC.
	Room303APIStreamMessageUpdatesProcedure = "/api.v1alpha1.room303.Room303API/StreamMessageUpdates"
	// Room303APIGetUnreadStatsProcedure is the fully-qualified name of the Room303API's GetUnreadStats
	// RPC.
	Room303APIGetUnreadStatsProcedure = "/api.v1alpha1.room303.Room303API/GetUnreadStats"
	// Room303APIMarkMessageReadProcedure is the fully-qualified name of the Room303API's
	// MarkMessageRead RPC.
	Room303APIMarkMessageReadProcedure = "/api.v1alpha1.room303.Room303API/MarkMessageRead"
	// Room303APIMarkAllMessagesReadProcedure is the fully-qualified name of the Room303API's
	// MarkAllMessagesRead RPC.
	Room303APIMarkAllMessagesReadProcedure = "/api.v1alpha1.room303.Room303API/MarkAllMessagesRead"
	// Room303APIBulkMarkMessageReadProcedure is the fully-qualified name of the Room303API's
	// BulkMarkMessageRead RPC.
	Room303APIBulkMarkMessageReadProcedure = "/api.v1alpha1.room303.Room303API/BulkMarkMessageRead"
	// Room303APICreateRoomProcedure is the fully-qualified name of the Room303API's CreateRoom RPC.
	Room303APICreateRoomProcedure = "/api.v1alpha1.room303.Room303API/CreateRoom"
	// Room303APIGetRoomProcedure is the fully-qualified name of the Room303API's GetRoom RPC.
	Room303APIGetRoomProcedure = "/api.v1alpha1.room303.Room303API/GetRoom"
	// Room303APIListAllRoomsProcedure is the fully-qualified name of the Room303API's ListAllRooms RPC.
	Room303APIListAllRoomsProcedure = "/api.v1alpha1.room303.Room303API/ListAllRooms"
	// Room303APIListRoomsForMemberProcedure is the fully-qualified name of the Room303API's
	// ListRoomsForMember RPC.
	Room303APIListRoomsForMemberProcedure = "/api.v1alpha1.room303.Room303API/ListRoomsForMember"
	// Room303APIArchiveRoomProcedure is the fully-qualified name of the Room303API's ArchiveRoom RPC.
	Room303APIArchiveRoomProcedure = "/api.v1alpha1.room303.Room303API/ArchiveRoom"
	// Room303APIListUsersNamesProcedure is the fully-qualified name of the Room303API's ListUsersNames
	// RPC.
	Room303APIListUsersNamesProcedure = "/api.v1alpha1.room303.Room303API/ListUsersNames"
	// Room303APIUpdateRoomConfigProcedure is the fully-qualified name of the Room303API's
	// UpdateRoomConfig RPC.
	Room303APIUpdateRoomConfigProcedure = "/api.v1alpha1.room303.Room303API/UpdateRoomConfig"
	// Room303APIUpdateGlobalConfigProcedure is the fully-qualified name of the Room303API's
	// UpdateGlobalConfig RPC.
	Room303APIUpdateGlobalConfigProcedure = "/api.v1alpha1.room303.Room303API/UpdateGlobalConfig"
	// Room303APIGetGlobalConfigProcedure is the fully-qualified name of the Room303API's
	// GetGlobalConfig RPC.
	Room303APIGetGlobalConfigProcedure = "/api.v1alpha1.room303.Room303API/GetGlobalConfig"
)

// Room303APIClient is a client for the api.v1alpha1.room303.Room303API service.
type Room303APIClient interface {
	// Member
	//
	// Add a new member to a room, you must be a room admin in order to do that
	AddRoomMember(context.Context, *connect_go.Request[room303.AddRoomMemberRequest]) (*connect_go.Response[commons.Member], error)
	// Remove room member (kick), the room member will not receive notifications from that room
	RemoveRoomMember(context.Context, *connect_go.Request[room303.RemoveRoomMemberRequest]) (*connect_go.Response[room303.RemoveRoomMemberResponse], error)
	// List the members of this room
	ListRoomMembers(context.Context, *connect_go.Request[room303.ListRoomMembersRequest]) (*connect_go.Response[room303.ListRoomMembersResponse], error)
	// Set a room member as admin, you must be a room admin in order to do this.
	SetAdminForRoomMember(context.Context, *connect_go.Request[room303.SetAdminForRoomMemberRequest]) (*connect_go.Response[room303.SetAdminForRoomMemberResponse], error)
	// adds new member to a room and does not require the member to be admin
	JoinRoom(context.Context, *connect_go.Request[room303.JoinRoomRequest]) (*connect_go.Response[commons.Room], error)
	// gets the member entity from the provided room if it exists
	GetRoomMember(context.Context, *connect_go.Request[room303.GetRoomMemberRequest]) (*connect_go.Response[commons.Member], error)
	// Message
	CreateMessage(context.Context, *connect_go.Request[room303.CreateMessageRequest]) (*connect_go.Response[room303.CreateMessageResponse], error)
	EditMessage(context.Context, *connect_go.Request[room303.EditMessageRequest]) (*connect_go.Response[room303.EditMessageResponse], error)
	DeleteMessage(context.Context, *connect_go.Request[room303.DeleteMessageRequest]) (*connect_go.Response[room303.DeleteMessageResponse], error)
	GetMessages(context.Context, *connect_go.Request[room303.GetMessagesRequest]) (*connect_go.Response[room303.GetMessagesResponse], error)
	StreamMessageUpdates(context.Context, *connect_go.Request[room303.StreamMessageUpdatesRequest]) (*connect_go.ServerStreamForClient[room303.StreamMessageUpdatesResponse], error)
	GetUnreadStats(context.Context, *connect_go.Request[room303.GetUnreadStatsRequest]) (*connect_go.Response[room303.GetUnreadStatsResponse], error)
	MarkMessageRead(context.Context, *connect_go.Request[room303.MarkMessageReadRequest]) (*connect_go.Response[room303.MarkMessageReadResponse], error)
	MarkAllMessagesRead(context.Context, *connect_go.Request[room303.MarkAllMessagesReadRequest]) (*connect_go.Response[room303.MarkAllMessagesReadResponse], error)
	BulkMarkMessageRead(context.Context, *connect_go.Request[room303.BulkMarkMessageReadRequest]) (*connect_go.Response[room303.BulkMarkMessageReadResponse], error)
	// Room
	CreateRoom(context.Context, *connect_go.Request[room303.CreateRoomRequest]) (*connect_go.Response[commons.Room], error)
	GetRoom(context.Context, *connect_go.Request[room303.GetRoomRequest]) (*connect_go.Response[commons.Room], error)
	ListAllRooms(context.Context, *connect_go.Request[room303.ListAllRoomsRequest]) (*connect_go.Response[room303.ListRoomsResponse], error)
	ListRoomsForMember(context.Context, *connect_go.Request[room303.ListRoomsForMemberRequest]) (*connect_go.Response[room303.ListRoomsResponse], error)
	ArchiveRoom(context.Context, *connect_go.Request[room303.ArchiveRoomRequest]) (*connect_go.Response[commons.Room], error)
	// ListUsersNames returns a list of users with names and ids
	ListUsersNames(context.Context, *connect_go.Request[room303.ListUsersNamesRequest]) (*connect_go.ServerStreamForClient[room303.ListUsersNamesResponse], error)
	// allow room configurations to be updated
	UpdateRoomConfig(context.Context, *connect_go.Request[room303.UpdateRoomConfigRequest]) (*connect_go.Response[commons.Room], error)
	// update global configuration
	UpdateGlobalConfig(context.Context, *connect_go.Request[room303.UpdateGlobalConfigRequest]) (*connect_go.Response[room303.UpdateGlobalConfigResponse], error)
	// get global configuration
	GetGlobalConfig(context.Context, *connect_go.Request[room303.GetGlobalConfigRequest]) (*connect_go.Response[room303.GetGlobalConfigResponse], error)
}

// NewRoom303APIClient constructs a client for the api.v1alpha1.room303.Room303API service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRoom303APIClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) Room303APIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &room303APIClient{
		addRoomMember: connect_go.NewClient[room303.AddRoomMemberRequest, commons.Member](
			httpClient,
			baseURL+Room303APIAddRoomMemberProcedure,
			opts...,
		),
		removeRoomMember: connect_go.NewClient[room303.RemoveRoomMemberRequest, room303.RemoveRoomMemberResponse](
			httpClient,
			baseURL+Room303APIRemoveRoomMemberProcedure,
			opts...,
		),
		listRoomMembers: connect_go.NewClient[room303.ListRoomMembersRequest, room303.ListRoomMembersResponse](
			httpClient,
			baseURL+Room303APIListRoomMembersProcedure,
			opts...,
		),
		setAdminForRoomMember: connect_go.NewClient[room303.SetAdminForRoomMemberRequest, room303.SetAdminForRoomMemberResponse](
			httpClient,
			baseURL+Room303APISetAdminForRoomMemberProcedure,
			opts...,
		),
		joinRoom: connect_go.NewClient[room303.JoinRoomRequest, commons.Room](
			httpClient,
			baseURL+Room303APIJoinRoomProcedure,
			opts...,
		),
		getRoomMember: connect_go.NewClient[room303.GetRoomMemberRequest, commons.Member](
			httpClient,
			baseURL+Room303APIGetRoomMemberProcedure,
			opts...,
		),
		createMessage: connect_go.NewClient[room303.CreateMessageRequest, room303.CreateMessageResponse](
			httpClient,
			baseURL+Room303APICreateMessageProcedure,
			opts...,
		),
		editMessage: connect_go.NewClient[room303.EditMessageRequest, room303.EditMessageResponse](
			httpClient,
			baseURL+Room303APIEditMessageProcedure,
			opts...,
		),
		deleteMessage: connect_go.NewClient[room303.DeleteMessageRequest, room303.DeleteMessageResponse](
			httpClient,
			baseURL+Room303APIDeleteMessageProcedure,
			opts...,
		),
		getMessages: connect_go.NewClient[room303.GetMessagesRequest, room303.GetMessagesResponse](
			httpClient,
			baseURL+Room303APIGetMessagesProcedure,
			opts...,
		),
		streamMessageUpdates: connect_go.NewClient[room303.StreamMessageUpdatesRequest, room303.StreamMessageUpdatesResponse](
			httpClient,
			baseURL+Room303APIStreamMessageUpdatesProcedure,
			opts...,
		),
		getUnreadStats: connect_go.NewClient[room303.GetUnreadStatsRequest, room303.GetUnreadStatsResponse](
			httpClient,
			baseURL+Room303APIGetUnreadStatsProcedure,
			opts...,
		),
		markMessageRead: connect_go.NewClient[room303.MarkMessageReadRequest, room303.MarkMessageReadResponse](
			httpClient,
			baseURL+Room303APIMarkMessageReadProcedure,
			opts...,
		),
		markAllMessagesRead: connect_go.NewClient[room303.MarkAllMessagesReadRequest, room303.MarkAllMessagesReadResponse](
			httpClient,
			baseURL+Room303APIMarkAllMessagesReadProcedure,
			opts...,
		),
		bulkMarkMessageRead: connect_go.NewClient[room303.BulkMarkMessageReadRequest, room303.BulkMarkMessageReadResponse](
			httpClient,
			baseURL+Room303APIBulkMarkMessageReadProcedure,
			opts...,
		),
		createRoom: connect_go.NewClient[room303.CreateRoomRequest, commons.Room](
			httpClient,
			baseURL+Room303APICreateRoomProcedure,
			opts...,
		),
		getRoom: connect_go.NewClient[room303.GetRoomRequest, commons.Room](
			httpClient,
			baseURL+Room303APIGetRoomProcedure,
			opts...,
		),
		listAllRooms: connect_go.NewClient[room303.ListAllRoomsRequest, room303.ListRoomsResponse](
			httpClient,
			baseURL+Room303APIListAllRoomsProcedure,
			opts...,
		),
		listRoomsForMember: connect_go.NewClient[room303.ListRoomsForMemberRequest, room303.ListRoomsResponse](
			httpClient,
			baseURL+Room303APIListRoomsForMemberProcedure,
			opts...,
		),
		archiveRoom: connect_go.NewClient[room303.ArchiveRoomRequest, commons.Room](
			httpClient,
			baseURL+Room303APIArchiveRoomProcedure,
			opts...,
		),
		listUsersNames: connect_go.NewClient[room303.ListUsersNamesRequest, room303.ListUsersNamesResponse](
			httpClient,
			baseURL+Room303APIListUsersNamesProcedure,
			opts...,
		),
		updateRoomConfig: connect_go.NewClient[room303.UpdateRoomConfigRequest, commons.Room](
			httpClient,
			baseURL+Room303APIUpdateRoomConfigProcedure,
			opts...,
		),
		updateGlobalConfig: connect_go.NewClient[room303.UpdateGlobalConfigRequest, room303.UpdateGlobalConfigResponse](
			httpClient,
			baseURL+Room303APIUpdateGlobalConfigProcedure,
			opts...,
		),
		getGlobalConfig: connect_go.NewClient[room303.GetGlobalConfigRequest, room303.GetGlobalConfigResponse](
			httpClient,
			baseURL+Room303APIGetGlobalConfigProcedure,
			opts...,
		),
	}
}

// room303APIClient implements Room303APIClient.
type room303APIClient struct {
	addRoomMember         *connect_go.Client[room303.AddRoomMemberRequest, commons.Member]
	removeRoomMember      *connect_go.Client[room303.RemoveRoomMemberRequest, room303.RemoveRoomMemberResponse]
	listRoomMembers       *connect_go.Client[room303.ListRoomMembersRequest, room303.ListRoomMembersResponse]
	setAdminForRoomMember *connect_go.Client[room303.SetAdminForRoomMemberRequest, room303.SetAdminForRoomMemberResponse]
	joinRoom              *connect_go.Client[room303.JoinRoomRequest, commons.Room]
	getRoomMember         *connect_go.Client[room303.GetRoomMemberRequest, commons.Member]
	createMessage         *connect_go.Client[room303.CreateMessageRequest, room303.CreateMessageResponse]
	editMessage           *connect_go.Client[room303.EditMessageRequest, room303.EditMessageResponse]
	deleteMessage         *connect_go.Client[room303.DeleteMessageRequest, room303.DeleteMessageResponse]
	getMessages           *connect_go.Client[room303.GetMessagesRequest, room303.GetMessagesResponse]
	streamMessageUpdates  *connect_go.Client[room303.StreamMessageUpdatesRequest, room303.StreamMessageUpdatesResponse]
	getUnreadStats        *connect_go.Client[room303.GetUnreadStatsRequest, room303.GetUnreadStatsResponse]
	markMessageRead       *connect_go.Client[room303.MarkMessageReadRequest, room303.MarkMessageReadResponse]
	markAllMessagesRead   *connect_go.Client[room303.MarkAllMessagesReadRequest, room303.MarkAllMessagesReadResponse]
	bulkMarkMessageRead   *connect_go.Client[room303.BulkMarkMessageReadRequest, room303.BulkMarkMessageReadResponse]
	createRoom            *connect_go.Client[room303.CreateRoomRequest, commons.Room]
	getRoom               *connect_go.Client[room303.GetRoomRequest, commons.Room]
	listAllRooms          *connect_go.Client[room303.ListAllRoomsRequest, room303.ListRoomsResponse]
	listRoomsForMember    *connect_go.Client[room303.ListRoomsForMemberRequest, room303.ListRoomsResponse]
	archiveRoom           *connect_go.Client[room303.ArchiveRoomRequest, commons.Room]
	listUsersNames        *connect_go.Client[room303.ListUsersNamesRequest, room303.ListUsersNamesResponse]
	updateRoomConfig      *connect_go.Client[room303.UpdateRoomConfigRequest, commons.Room]
	updateGlobalConfig    *connect_go.Client[room303.UpdateGlobalConfigRequest, room303.UpdateGlobalConfigResponse]
	getGlobalConfig       *connect_go.Client[room303.GetGlobalConfigRequest, room303.GetGlobalConfigResponse]
}

// AddRoomMember calls api.v1alpha1.room303.Room303API.AddRoomMember.
func (c *room303APIClient) AddRoomMember(ctx context.Context, req *connect_go.Request[room303.AddRoomMemberRequest]) (*connect_go.Response[commons.Member], error) {
	return c.addRoomMember.CallUnary(ctx, req)
}

// RemoveRoomMember calls api.v1alpha1.room303.Room303API.RemoveRoomMember.
func (c *room303APIClient) RemoveRoomMember(ctx context.Context, req *connect_go.Request[room303.RemoveRoomMemberRequest]) (*connect_go.Response[room303.RemoveRoomMemberResponse], error) {
	return c.removeRoomMember.CallUnary(ctx, req)
}

// ListRoomMembers calls api.v1alpha1.room303.Room303API.ListRoomMembers.
func (c *room303APIClient) ListRoomMembers(ctx context.Context, req *connect_go.Request[room303.ListRoomMembersRequest]) (*connect_go.Response[room303.ListRoomMembersResponse], error) {
	return c.listRoomMembers.CallUnary(ctx, req)
}

// SetAdminForRoomMember calls api.v1alpha1.room303.Room303API.SetAdminForRoomMember.
func (c *room303APIClient) SetAdminForRoomMember(ctx context.Context, req *connect_go.Request[room303.SetAdminForRoomMemberRequest]) (*connect_go.Response[room303.SetAdminForRoomMemberResponse], error) {
	return c.setAdminForRoomMember.CallUnary(ctx, req)
}

// JoinRoom calls api.v1alpha1.room303.Room303API.JoinRoom.
func (c *room303APIClient) JoinRoom(ctx context.Context, req *connect_go.Request[room303.JoinRoomRequest]) (*connect_go.Response[commons.Room], error) {
	return c.joinRoom.CallUnary(ctx, req)
}

// GetRoomMember calls api.v1alpha1.room303.Room303API.GetRoomMember.
func (c *room303APIClient) GetRoomMember(ctx context.Context, req *connect_go.Request[room303.GetRoomMemberRequest]) (*connect_go.Response[commons.Member], error) {
	return c.getRoomMember.CallUnary(ctx, req)
}

// CreateMessage calls api.v1alpha1.room303.Room303API.CreateMessage.
func (c *room303APIClient) CreateMessage(ctx context.Context, req *connect_go.Request[room303.CreateMessageRequest]) (*connect_go.Response[room303.CreateMessageResponse], error) {
	return c.createMessage.CallUnary(ctx, req)
}

// EditMessage calls api.v1alpha1.room303.Room303API.EditMessage.
func (c *room303APIClient) EditMessage(ctx context.Context, req *connect_go.Request[room303.EditMessageRequest]) (*connect_go.Response[room303.EditMessageResponse], error) {
	return c.editMessage.CallUnary(ctx, req)
}

// DeleteMessage calls api.v1alpha1.room303.Room303API.DeleteMessage.
func (c *room303APIClient) DeleteMessage(ctx context.Context, req *connect_go.Request[room303.DeleteMessageRequest]) (*connect_go.Response[room303.DeleteMessageResponse], error) {
	return c.deleteMessage.CallUnary(ctx, req)
}

// GetMessages calls api.v1alpha1.room303.Room303API.GetMessages.
func (c *room303APIClient) GetMessages(ctx context.Context, req *connect_go.Request[room303.GetMessagesRequest]) (*connect_go.Response[room303.GetMessagesResponse], error) {
	return c.getMessages.CallUnary(ctx, req)
}

// StreamMessageUpdates calls api.v1alpha1.room303.Room303API.StreamMessageUpdates.
func (c *room303APIClient) StreamMessageUpdates(ctx context.Context, req *connect_go.Request[room303.StreamMessageUpdatesRequest]) (*connect_go.ServerStreamForClient[room303.StreamMessageUpdatesResponse], error) {
	return c.streamMessageUpdates.CallServerStream(ctx, req)
}

// GetUnreadStats calls api.v1alpha1.room303.Room303API.GetUnreadStats.
func (c *room303APIClient) GetUnreadStats(ctx context.Context, req *connect_go.Request[room303.GetUnreadStatsRequest]) (*connect_go.Response[room303.GetUnreadStatsResponse], error) {
	return c.getUnreadStats.CallUnary(ctx, req)
}

// MarkMessageRead calls api.v1alpha1.room303.Room303API.MarkMessageRead.
func (c *room303APIClient) MarkMessageRead(ctx context.Context, req *connect_go.Request[room303.MarkMessageReadRequest]) (*connect_go.Response[room303.MarkMessageReadResponse], error) {
	return c.markMessageRead.CallUnary(ctx, req)
}

// MarkAllMessagesRead calls api.v1alpha1.room303.Room303API.MarkAllMessagesRead.
func (c *room303APIClient) MarkAllMessagesRead(ctx context.Context, req *connect_go.Request[room303.MarkAllMessagesReadRequest]) (*connect_go.Response[room303.MarkAllMessagesReadResponse], error) {
	return c.markAllMessagesRead.CallUnary(ctx, req)
}

// BulkMarkMessageRead calls api.v1alpha1.room303.Room303API.BulkMarkMessageRead.
func (c *room303APIClient) BulkMarkMessageRead(ctx context.Context, req *connect_go.Request[room303.BulkMarkMessageReadRequest]) (*connect_go.Response[room303.BulkMarkMessageReadResponse], error) {
	return c.bulkMarkMessageRead.CallUnary(ctx, req)
}

// CreateRoom calls api.v1alpha1.room303.Room303API.CreateRoom.
func (c *room303APIClient) CreateRoom(ctx context.Context, req *connect_go.Request[room303.CreateRoomRequest]) (*connect_go.Response[commons.Room], error) {
	return c.createRoom.CallUnary(ctx, req)
}

// GetRoom calls api.v1alpha1.room303.Room303API.GetRoom.
func (c *room303APIClient) GetRoom(ctx context.Context, req *connect_go.Request[room303.GetRoomRequest]) (*connect_go.Response[commons.Room], error) {
	return c.getRoom.CallUnary(ctx, req)
}

// ListAllRooms calls api.v1alpha1.room303.Room303API.ListAllRooms.
func (c *room303APIClient) ListAllRooms(ctx context.Context, req *connect_go.Request[room303.ListAllRoomsRequest]) (*connect_go.Response[room303.ListRoomsResponse], error) {
	return c.listAllRooms.CallUnary(ctx, req)
}

// ListRoomsForMember calls api.v1alpha1.room303.Room303API.ListRoomsForMember.
func (c *room303APIClient) ListRoomsForMember(ctx context.Context, req *connect_go.Request[room303.ListRoomsForMemberRequest]) (*connect_go.Response[room303.ListRoomsResponse], error) {
	return c.listRoomsForMember.CallUnary(ctx, req)
}

// ArchiveRoom calls api.v1alpha1.room303.Room303API.ArchiveRoom.
func (c *room303APIClient) ArchiveRoom(ctx context.Context, req *connect_go.Request[room303.ArchiveRoomRequest]) (*connect_go.Response[commons.Room], error) {
	return c.archiveRoom.CallUnary(ctx, req)
}

// ListUsersNames calls api.v1alpha1.room303.Room303API.ListUsersNames.
func (c *room303APIClient) ListUsersNames(ctx context.Context, req *connect_go.Request[room303.ListUsersNamesRequest]) (*connect_go.ServerStreamForClient[room303.ListUsersNamesResponse], error) {
	return c.listUsersNames.CallServerStream(ctx, req)
}

// UpdateRoomConfig calls api.v1alpha1.room303.Room303API.UpdateRoomConfig.
func (c *room303APIClient) UpdateRoomConfig(ctx context.Context, req *connect_go.Request[room303.UpdateRoomConfigRequest]) (*connect_go.Response[commons.Room], error) {
	return c.updateRoomConfig.CallUnary(ctx, req)
}

// UpdateGlobalConfig calls api.v1alpha1.room303.Room303API.UpdateGlobalConfig.
func (c *room303APIClient) UpdateGlobalConfig(ctx context.Context, req *connect_go.Request[room303.UpdateGlobalConfigRequest]) (*connect_go.Response[room303.UpdateGlobalConfigResponse], error) {
	return c.updateGlobalConfig.CallUnary(ctx, req)
}

// GetGlobalConfig calls api.v1alpha1.room303.Room303API.GetGlobalConfig.
func (c *room303APIClient) GetGlobalConfig(ctx context.Context, req *connect_go.Request[room303.GetGlobalConfigRequest]) (*connect_go.Response[room303.GetGlobalConfigResponse], error) {
	return c.getGlobalConfig.CallUnary(ctx, req)
}

// Room303APIHandler is an implementation of the api.v1alpha1.room303.Room303API service.
type Room303APIHandler interface {
	// Member
	//
	// Add a new member to a room, you must be a room admin in order to do that
	AddRoomMember(context.Context, *connect_go.Request[room303.AddRoomMemberRequest]) (*connect_go.Response[commons.Member], error)
	// Remove room member (kick), the room member will not receive notifications from that room
	RemoveRoomMember(context.Context, *connect_go.Request[room303.RemoveRoomMemberRequest]) (*connect_go.Response[room303.RemoveRoomMemberResponse], error)
	// List the members of this room
	ListRoomMembers(context.Context, *connect_go.Request[room303.ListRoomMembersRequest]) (*connect_go.Response[room303.ListRoomMembersResponse], error)
	// Set a room member as admin, you must be a room admin in order to do this.
	SetAdminForRoomMember(context.Context, *connect_go.Request[room303.SetAdminForRoomMemberRequest]) (*connect_go.Response[room303.SetAdminForRoomMemberResponse], error)
	// adds new member to a room and does not require the member to be admin
	JoinRoom(context.Context, *connect_go.Request[room303.JoinRoomRequest]) (*connect_go.Response[commons.Room], error)
	// gets the member entity from the provided room if it exists
	GetRoomMember(context.Context, *connect_go.Request[room303.GetRoomMemberRequest]) (*connect_go.Response[commons.Member], error)
	// Message
	CreateMessage(context.Context, *connect_go.Request[room303.CreateMessageRequest]) (*connect_go.Response[room303.CreateMessageResponse], error)
	EditMessage(context.Context, *connect_go.Request[room303.EditMessageRequest]) (*connect_go.Response[room303.EditMessageResponse], error)
	DeleteMessage(context.Context, *connect_go.Request[room303.DeleteMessageRequest]) (*connect_go.Response[room303.DeleteMessageResponse], error)
	GetMessages(context.Context, *connect_go.Request[room303.GetMessagesRequest]) (*connect_go.Response[room303.GetMessagesResponse], error)
	StreamMessageUpdates(context.Context, *connect_go.Request[room303.StreamMessageUpdatesRequest], *connect_go.ServerStream[room303.StreamMessageUpdatesResponse]) error
	GetUnreadStats(context.Context, *connect_go.Request[room303.GetUnreadStatsRequest]) (*connect_go.Response[room303.GetUnreadStatsResponse], error)
	MarkMessageRead(context.Context, *connect_go.Request[room303.MarkMessageReadRequest]) (*connect_go.Response[room303.MarkMessageReadResponse], error)
	MarkAllMessagesRead(context.Context, *connect_go.Request[room303.MarkAllMessagesReadRequest]) (*connect_go.Response[room303.MarkAllMessagesReadResponse], error)
	BulkMarkMessageRead(context.Context, *connect_go.Request[room303.BulkMarkMessageReadRequest]) (*connect_go.Response[room303.BulkMarkMessageReadResponse], error)
	// Room
	CreateRoom(context.Context, *connect_go.Request[room303.CreateRoomRequest]) (*connect_go.Response[commons.Room], error)
	GetRoom(context.Context, *connect_go.Request[room303.GetRoomRequest]) (*connect_go.Response[commons.Room], error)
	ListAllRooms(context.Context, *connect_go.Request[room303.ListAllRoomsRequest]) (*connect_go.Response[room303.ListRoomsResponse], error)
	ListRoomsForMember(context.Context, *connect_go.Request[room303.ListRoomsForMemberRequest]) (*connect_go.Response[room303.ListRoomsResponse], error)
	ArchiveRoom(context.Context, *connect_go.Request[room303.ArchiveRoomRequest]) (*connect_go.Response[commons.Room], error)
	// ListUsersNames returns a list of users with names and ids
	ListUsersNames(context.Context, *connect_go.Request[room303.ListUsersNamesRequest], *connect_go.ServerStream[room303.ListUsersNamesResponse]) error
	// allow room configurations to be updated
	UpdateRoomConfig(context.Context, *connect_go.Request[room303.UpdateRoomConfigRequest]) (*connect_go.Response[commons.Room], error)
	// update global configuration
	UpdateGlobalConfig(context.Context, *connect_go.Request[room303.UpdateGlobalConfigRequest]) (*connect_go.Response[room303.UpdateGlobalConfigResponse], error)
	// get global configuration
	GetGlobalConfig(context.Context, *connect_go.Request[room303.GetGlobalConfigRequest]) (*connect_go.Response[room303.GetGlobalConfigResponse], error)
}

// NewRoom303APIHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRoom303APIHandler(svc Room303APIHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	room303APIAddRoomMemberHandler := connect_go.NewUnaryHandler(
		Room303APIAddRoomMemberProcedure,
		svc.AddRoomMember,
		opts...,
	)
	room303APIRemoveRoomMemberHandler := connect_go.NewUnaryHandler(
		Room303APIRemoveRoomMemberProcedure,
		svc.RemoveRoomMember,
		opts...,
	)
	room303APIListRoomMembersHandler := connect_go.NewUnaryHandler(
		Room303APIListRoomMembersProcedure,
		svc.ListRoomMembers,
		opts...,
	)
	room303APISetAdminForRoomMemberHandler := connect_go.NewUnaryHandler(
		Room303APISetAdminForRoomMemberProcedure,
		svc.SetAdminForRoomMember,
		opts...,
	)
	room303APIJoinRoomHandler := connect_go.NewUnaryHandler(
		Room303APIJoinRoomProcedure,
		svc.JoinRoom,
		opts...,
	)
	room303APIGetRoomMemberHandler := connect_go.NewUnaryHandler(
		Room303APIGetRoomMemberProcedure,
		svc.GetRoomMember,
		opts...,
	)
	room303APICreateMessageHandler := connect_go.NewUnaryHandler(
		Room303APICreateMessageProcedure,
		svc.CreateMessage,
		opts...,
	)
	room303APIEditMessageHandler := connect_go.NewUnaryHandler(
		Room303APIEditMessageProcedure,
		svc.EditMessage,
		opts...,
	)
	room303APIDeleteMessageHandler := connect_go.NewUnaryHandler(
		Room303APIDeleteMessageProcedure,
		svc.DeleteMessage,
		opts...,
	)
	room303APIGetMessagesHandler := connect_go.NewUnaryHandler(
		Room303APIGetMessagesProcedure,
		svc.GetMessages,
		opts...,
	)
	room303APIStreamMessageUpdatesHandler := connect_go.NewServerStreamHandler(
		Room303APIStreamMessageUpdatesProcedure,
		svc.StreamMessageUpdates,
		opts...,
	)
	room303APIGetUnreadStatsHandler := connect_go.NewUnaryHandler(
		Room303APIGetUnreadStatsProcedure,
		svc.GetUnreadStats,
		opts...,
	)
	room303APIMarkMessageReadHandler := connect_go.NewUnaryHandler(
		Room303APIMarkMessageReadProcedure,
		svc.MarkMessageRead,
		opts...,
	)
	room303APIMarkAllMessagesReadHandler := connect_go.NewUnaryHandler(
		Room303APIMarkAllMessagesReadProcedure,
		svc.MarkAllMessagesRead,
		opts...,
	)
	room303APIBulkMarkMessageReadHandler := connect_go.NewUnaryHandler(
		Room303APIBulkMarkMessageReadProcedure,
		svc.BulkMarkMessageRead,
		opts...,
	)
	room303APICreateRoomHandler := connect_go.NewUnaryHandler(
		Room303APICreateRoomProcedure,
		svc.CreateRoom,
		opts...,
	)
	room303APIGetRoomHandler := connect_go.NewUnaryHandler(
		Room303APIGetRoomProcedure,
		svc.GetRoom,
		opts...,
	)
	room303APIListAllRoomsHandler := connect_go.NewUnaryHandler(
		Room303APIListAllRoomsProcedure,
		svc.ListAllRooms,
		opts...,
	)
	room303APIListRoomsForMemberHandler := connect_go.NewUnaryHandler(
		Room303APIListRoomsForMemberProcedure,
		svc.ListRoomsForMember,
		opts...,
	)
	room303APIArchiveRoomHandler := connect_go.NewUnaryHandler(
		Room303APIArchiveRoomProcedure,
		svc.ArchiveRoom,
		opts...,
	)
	room303APIListUsersNamesHandler := connect_go.NewServerStreamHandler(
		Room303APIListUsersNamesProcedure,
		svc.ListUsersNames,
		opts...,
	)
	room303APIUpdateRoomConfigHandler := connect_go.NewUnaryHandler(
		Room303APIUpdateRoomConfigProcedure,
		svc.UpdateRoomConfig,
		opts...,
	)
	room303APIUpdateGlobalConfigHandler := connect_go.NewUnaryHandler(
		Room303APIUpdateGlobalConfigProcedure,
		svc.UpdateGlobalConfig,
		opts...,
	)
	room303APIGetGlobalConfigHandler := connect_go.NewUnaryHandler(
		Room303APIGetGlobalConfigProcedure,
		svc.GetGlobalConfig,
		opts...,
	)
	return "/api.v1alpha1.room303.Room303API/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case Room303APIAddRoomMemberProcedure:
			room303APIAddRoomMemberHandler.ServeHTTP(w, r)
		case Room303APIRemoveRoomMemberProcedure:
			room303APIRemoveRoomMemberHandler.ServeHTTP(w, r)
		case Room303APIListRoomMembersProcedure:
			room303APIListRoomMembersHandler.ServeHTTP(w, r)
		case Room303APISetAdminForRoomMemberProcedure:
			room303APISetAdminForRoomMemberHandler.ServeHTTP(w, r)
		case Room303APIJoinRoomProcedure:
			room303APIJoinRoomHandler.ServeHTTP(w, r)
		case Room303APIGetRoomMemberProcedure:
			room303APIGetRoomMemberHandler.ServeHTTP(w, r)
		case Room303APICreateMessageProcedure:
			room303APICreateMessageHandler.ServeHTTP(w, r)
		case Room303APIEditMessageProcedure:
			room303APIEditMessageHandler.ServeHTTP(w, r)
		case Room303APIDeleteMessageProcedure:
			room303APIDeleteMessageHandler.ServeHTTP(w, r)
		case Room303APIGetMessagesProcedure:
			room303APIGetMessagesHandler.ServeHTTP(w, r)
		case Room303APIStreamMessageUpdatesProcedure:
			room303APIStreamMessageUpdatesHandler.ServeHTTP(w, r)
		case Room303APIGetUnreadStatsProcedure:
			room303APIGetUnreadStatsHandler.ServeHTTP(w, r)
		case Room303APIMarkMessageReadProcedure:
			room303APIMarkMessageReadHandler.ServeHTTP(w, r)
		case Room303APIMarkAllMessagesReadProcedure:
			room303APIMarkAllMessagesReadHandler.ServeHTTP(w, r)
		case Room303APIBulkMarkMessageReadProcedure:
			room303APIBulkMarkMessageReadHandler.ServeHTTP(w, r)
		case Room303APICreateRoomProcedure:
			room303APICreateRoomHandler.ServeHTTP(w, r)
		case Room303APIGetRoomProcedure:
			room303APIGetRoomHandler.ServeHTTP(w, r)
		case Room303APIListAllRoomsProcedure:
			room303APIListAllRoomsHandler.ServeHTTP(w, r)
		case Room303APIListRoomsForMemberProcedure:
			room303APIListRoomsForMemberHandler.ServeHTTP(w, r)
		case Room303APIArchiveRoomProcedure:
			room303APIArchiveRoomHandler.ServeHTTP(w, r)
		case Room303APIListUsersNamesProcedure:
			room303APIListUsersNamesHandler.ServeHTTP(w, r)
		case Room303APIUpdateRoomConfigProcedure:
			room303APIUpdateRoomConfigHandler.ServeHTTP(w, r)
		case Room303APIUpdateGlobalConfigProcedure:
			room303APIUpdateGlobalConfigHandler.ServeHTTP(w, r)
		case Room303APIGetGlobalConfigProcedure:
			room303APIGetGlobalConfigHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRoom303APIHandler returns CodeUnimplemented from all methods.
type UnimplementedRoom303APIHandler struct{}

func (UnimplementedRoom303APIHandler) AddRoomMember(context.Context, *connect_go.Request[room303.AddRoomMemberRequest]) (*connect_go.Response[commons.Member], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.room303.Room303API.AddRoomMember is not implemented"))
}

func (UnimplementedRoom303APIHandler) RemoveRoomMember(context.Context, *connect_go.Request[room303.RemoveRoomMemberRequest]) (*connect_go.Response[room303.RemoveRoomMemberResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.room303.Room303API.RemoveRoomMember is not implemented"))
}

func (UnimplementedRoom303APIHandler) ListRoomMembers(context.Context, *connect_go.Request[room303.ListRoomMembersRequest]) (*connect_go.Response[room303.ListRoomMembersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.room303.Room303API.ListRoomMembers is not implemented"))
}

func (UnimplementedRoom303APIHandler) SetAdminForRoomMember(context.Context, *connect_go.Request[room303.SetAdminForRoomMemberRequest]) (*connect_go.Response[room303.SetAdminForRoomMemberResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.room303.Room303API.SetAdminForRoomMember is not implemented"))
}

func (UnimplementedRoom303APIHandler) JoinRoom(context.Context, *connect_go.Request[room303.JoinRoomRequest]) (*connect_go.Response[commons.Room], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.room303.Room303API.JoinRoom is not implemented"))
}

func (UnimplementedRoom303APIHandler) GetRoomMember(context.Context, *connect_go.Request[room303.GetRoomMemberRequest]) (*connect_go.Response[commons.Member], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.room303.Room303API.GetRoomMember is not implemented"))
}

func (UnimplementedRoom303APIHandler) CreateMessage(context.Context, *connect_go.Request[room303.CreateMessageRequest]) (*connect_go.Response[room303.CreateMessageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.room303.Room303API.CreateMessage is not implemented"))
}

func (UnimplementedRoom303APIHandler) EditMessage(context.Context, *connect_go.Request[room303.EditMessageRequest]) (*connect_go.Response[room303.EditMessageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.room303.Room303API.EditMessage is not implemented"))
}

func (UnimplementedRoom303APIHandler) DeleteMessage(context.Context, *connect_go.Request[room303.DeleteMessageRequest]) (*connect_go.Response[room303.DeleteMessageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.room303.Room303API.DeleteMessage is not implemented"))
}

func (UnimplementedRoom303APIHandler) GetMessages(context.Context, *connect_go.Request[room303.GetMessagesRequest]) (*connect_go.Response[room303.GetMessagesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.room303.Room303API.GetMessages is not implemented"))
}

func (UnimplementedRoom303APIHandler) StreamMessageUpdates(context.Context, *connect_go.Request[room303.StreamMessageUpdatesRequest], *connect_go.ServerStream[room303.StreamMessageUpdatesResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.room303.Room303API.StreamMessageUpdates is not implemented"))
}

func (UnimplementedRoom303APIHandler) GetUnreadStats(context.Context, *connect_go.Request[room303.GetUnreadStatsRequest]) (*connect_go.Response[room303.GetUnreadStatsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.room303.Room303API.GetUnreadStats is not implemented"))
}

func (UnimplementedRoom303APIHandler) MarkMessageRead(context.Context, *connect_go.Request[room303.MarkMessageReadRequest]) (*connect_go.Response[room303.MarkMessageReadResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.room303.Room303API.MarkMessageRead is not implemented"))
}

func (UnimplementedRoom303APIHandler) MarkAllMessagesRead(context.Context, *connect_go.Request[room303.MarkAllMessagesReadRequest]) (*connect_go.Response[room303.MarkAllMessagesReadResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.room303.Room303API.MarkAllMessagesRead is not implemented"))
}

func (UnimplementedRoom303APIHandler) BulkMarkMessageRead(context.Context, *connect_go.Request[room303.BulkMarkMessageReadRequest]) (*connect_go.Response[room303.BulkMarkMessageReadResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.room303.Room303API.BulkMarkMessageRead is not implemented"))
}

func (UnimplementedRoom303APIHandler) CreateRoom(context.Context, *connect_go.Request[room303.CreateRoomRequest]) (*connect_go.Response[commons.Room], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.room303.Room303API.CreateRoom is not implemented"))
}

func (UnimplementedRoom303APIHandler) GetRoom(context.Context, *connect_go.Request[room303.GetRoomRequest]) (*connect_go.Response[commons.Room], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.room303.Room303API.GetRoom is not implemented"))
}

func (UnimplementedRoom303APIHandler) ListAllRooms(context.Context, *connect_go.Request[room303.ListAllRoomsRequest]) (*connect_go.Response[room303.ListRoomsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.room303.Room303API.ListAllRooms is not implemented"))
}

func (UnimplementedRoom303APIHandler) ListRoomsForMember(context.Context, *connect_go.Request[room303.ListRoomsForMemberRequest]) (*connect_go.Response[room303.ListRoomsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.room303.Room303API.ListRoomsForMember is not implemented"))
}

func (UnimplementedRoom303APIHandler) ArchiveRoom(context.Context, *connect_go.Request[room303.ArchiveRoomRequest]) (*connect_go.Response[commons.Room], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.room303.Room303API.ArchiveRoom is not implemented"))
}

func (UnimplementedRoom303APIHandler) ListUsersNames(context.Context, *connect_go.Request[room303.ListUsersNamesRequest], *connect_go.ServerStream[room303.ListUsersNamesResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.room303.Room303API.ListUsersNames is not implemented"))
}

func (UnimplementedRoom303APIHandler) UpdateRoomConfig(context.Context, *connect_go.Request[room303.UpdateRoomConfigRequest]) (*connect_go.Response[commons.Room], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.room303.Room303API.UpdateRoomConfig is not implemented"))
}

func (UnimplementedRoom303APIHandler) UpdateGlobalConfig(context.Context, *connect_go.Request[room303.UpdateGlobalConfigRequest]) (*connect_go.Response[room303.UpdateGlobalConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.room303.Room303API.UpdateGlobalConfig is not implemented"))
}

func (UnimplementedRoom303APIHandler) GetGlobalConfig(context.Context, *connect_go.Request[room303.GetGlobalConfigRequest]) (*connect_go.Response[room303.GetGlobalConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.room303.Room303API.GetGlobalConfig is not implemented"))
}
