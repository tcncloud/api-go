// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1alpha1/room303/service.proto

package room303

import (
	context "context"
	commons "github.com/tcncloud/api-go/api/commons"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Room303API_AddRoomMember_FullMethodName         = "/api.v1alpha1.room303.Room303API/AddRoomMember"
	Room303API_RemoveRoomMember_FullMethodName      = "/api.v1alpha1.room303.Room303API/RemoveRoomMember"
	Room303API_ListRoomMembers_FullMethodName       = "/api.v1alpha1.room303.Room303API/ListRoomMembers"
	Room303API_SetAdminForRoomMember_FullMethodName = "/api.v1alpha1.room303.Room303API/SetAdminForRoomMember"
	Room303API_JoinRoom_FullMethodName              = "/api.v1alpha1.room303.Room303API/JoinRoom"
	Room303API_GetRoomMember_FullMethodName         = "/api.v1alpha1.room303.Room303API/GetRoomMember"
	Room303API_CreateMessage_FullMethodName         = "/api.v1alpha1.room303.Room303API/CreateMessage"
	Room303API_EditMessage_FullMethodName           = "/api.v1alpha1.room303.Room303API/EditMessage"
	Room303API_DeleteMessage_FullMethodName         = "/api.v1alpha1.room303.Room303API/DeleteMessage"
	Room303API_GetMessages_FullMethodName           = "/api.v1alpha1.room303.Room303API/GetMessages"
	Room303API_StreamMessageUpdates_FullMethodName  = "/api.v1alpha1.room303.Room303API/StreamMessageUpdates"
	Room303API_GetUnreadStats_FullMethodName        = "/api.v1alpha1.room303.Room303API/GetUnreadStats"
	Room303API_MarkMessageRead_FullMethodName       = "/api.v1alpha1.room303.Room303API/MarkMessageRead"
	Room303API_MarkAllMessagesRead_FullMethodName   = "/api.v1alpha1.room303.Room303API/MarkAllMessagesRead"
	Room303API_BulkMarkMessageRead_FullMethodName   = "/api.v1alpha1.room303.Room303API/BulkMarkMessageRead"
	Room303API_CreateRoom_FullMethodName            = "/api.v1alpha1.room303.Room303API/CreateRoom"
	Room303API_GetRoom_FullMethodName               = "/api.v1alpha1.room303.Room303API/GetRoom"
	Room303API_ListAllRooms_FullMethodName          = "/api.v1alpha1.room303.Room303API/ListAllRooms"
	Room303API_ListRoomsForMember_FullMethodName    = "/api.v1alpha1.room303.Room303API/ListRoomsForMember"
	Room303API_ArchiveRoom_FullMethodName           = "/api.v1alpha1.room303.Room303API/ArchiveRoom"
	Room303API_ListUsersNames_FullMethodName        = "/api.v1alpha1.room303.Room303API/ListUsersNames"
)

// Room303APIClient is the client API for Room303API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Room303APIClient interface {
	// Member
	//
	// Add a new member to a room, you must be a room admin in order to do that
	AddRoomMember(ctx context.Context, in *AddRoomMemberRequest, opts ...grpc.CallOption) (*commons.Member, error)
	// Remove room member (kick), the room member will not receive notifications from that room
	RemoveRoomMember(ctx context.Context, in *RemoveRoomMemberRequest, opts ...grpc.CallOption) (*RemoveRoomMemberResponse, error)
	// List the members of this room
	ListRoomMembers(ctx context.Context, in *ListRoomMembersRequest, opts ...grpc.CallOption) (*ListRoomMembersResponse, error)
	// Set a room member as admin, you must be a room admin in order to do this.
	SetAdminForRoomMember(ctx context.Context, in *SetAdminForRoomMemberRequest, opts ...grpc.CallOption) (*SetAdminForRoomMemberResponse, error)
	// adds new member to a room and does not require the member to be admin
	JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*commons.Room, error)
	// gets the member entity from the provided room if it exists
	GetRoomMember(ctx context.Context, in *GetRoomMemberRequest, opts ...grpc.CallOption) (*commons.Member, error)
	// Message
	CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*CreateMessageResponse, error)
	EditMessage(ctx context.Context, in *EditMessageRequest, opts ...grpc.CallOption) (*EditMessageResponse, error)
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error)
	GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error)
	StreamMessageUpdates(ctx context.Context, in *StreamMessageUpdatesRequest, opts ...grpc.CallOption) (Room303API_StreamMessageUpdatesClient, error)
	GetUnreadStats(ctx context.Context, in *GetUnreadStatsRequest, opts ...grpc.CallOption) (*GetUnreadStatsResponse, error)
	MarkMessageRead(ctx context.Context, in *MarkMessageReadRequest, opts ...grpc.CallOption) (*MarkMessageReadResponse, error)
	MarkAllMessagesRead(ctx context.Context, in *MarkAllMessagesReadRequest, opts ...grpc.CallOption) (*MarkAllMessagesReadResponse, error)
	BulkMarkMessageRead(ctx context.Context, in *BulkMarkMessageReadRequest, opts ...grpc.CallOption) (*BulkMarkMessageReadResponse, error)
	// Room
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*commons.Room, error)
	GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*commons.Room, error)
	ListAllRooms(ctx context.Context, in *ListAllRoomsRequest, opts ...grpc.CallOption) (*ListRoomsResponse, error)
	ListRoomsForMember(ctx context.Context, in *ListRoomsForMemberRequest, opts ...grpc.CallOption) (*ListRoomsResponse, error)
	ArchiveRoom(ctx context.Context, in *ArchiveRoomRequest, opts ...grpc.CallOption) (*commons.Room, error)
	// ListUsersNames returns a list of users with names and ids
	ListUsersNames(ctx context.Context, in *ListUsersNamesRequest, opts ...grpc.CallOption) (Room303API_ListUsersNamesClient, error)
}

type room303APIClient struct {
	cc grpc.ClientConnInterface
}

func NewRoom303APIClient(cc grpc.ClientConnInterface) Room303APIClient {
	return &room303APIClient{cc}
}

func (c *room303APIClient) AddRoomMember(ctx context.Context, in *AddRoomMemberRequest, opts ...grpc.CallOption) (*commons.Member, error) {
	out := new(commons.Member)
	err := c.cc.Invoke(ctx, Room303API_AddRoomMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *room303APIClient) RemoveRoomMember(ctx context.Context, in *RemoveRoomMemberRequest, opts ...grpc.CallOption) (*RemoveRoomMemberResponse, error) {
	out := new(RemoveRoomMemberResponse)
	err := c.cc.Invoke(ctx, Room303API_RemoveRoomMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *room303APIClient) ListRoomMembers(ctx context.Context, in *ListRoomMembersRequest, opts ...grpc.CallOption) (*ListRoomMembersResponse, error) {
	out := new(ListRoomMembersResponse)
	err := c.cc.Invoke(ctx, Room303API_ListRoomMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *room303APIClient) SetAdminForRoomMember(ctx context.Context, in *SetAdminForRoomMemberRequest, opts ...grpc.CallOption) (*SetAdminForRoomMemberResponse, error) {
	out := new(SetAdminForRoomMemberResponse)
	err := c.cc.Invoke(ctx, Room303API_SetAdminForRoomMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *room303APIClient) JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*commons.Room, error) {
	out := new(commons.Room)
	err := c.cc.Invoke(ctx, Room303API_JoinRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *room303APIClient) GetRoomMember(ctx context.Context, in *GetRoomMemberRequest, opts ...grpc.CallOption) (*commons.Member, error) {
	out := new(commons.Member)
	err := c.cc.Invoke(ctx, Room303API_GetRoomMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *room303APIClient) CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*CreateMessageResponse, error) {
	out := new(CreateMessageResponse)
	err := c.cc.Invoke(ctx, Room303API_CreateMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *room303APIClient) EditMessage(ctx context.Context, in *EditMessageRequest, opts ...grpc.CallOption) (*EditMessageResponse, error) {
	out := new(EditMessageResponse)
	err := c.cc.Invoke(ctx, Room303API_EditMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *room303APIClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error) {
	out := new(DeleteMessageResponse)
	err := c.cc.Invoke(ctx, Room303API_DeleteMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *room303APIClient) GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error) {
	out := new(GetMessagesResponse)
	err := c.cc.Invoke(ctx, Room303API_GetMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *room303APIClient) StreamMessageUpdates(ctx context.Context, in *StreamMessageUpdatesRequest, opts ...grpc.CallOption) (Room303API_StreamMessageUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Room303API_ServiceDesc.Streams[0], Room303API_StreamMessageUpdates_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &room303APIStreamMessageUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Room303API_StreamMessageUpdatesClient interface {
	Recv() (*StreamMessageUpdatesResponse, error)
	grpc.ClientStream
}

type room303APIStreamMessageUpdatesClient struct {
	grpc.ClientStream
}

func (x *room303APIStreamMessageUpdatesClient) Recv() (*StreamMessageUpdatesResponse, error) {
	m := new(StreamMessageUpdatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *room303APIClient) GetUnreadStats(ctx context.Context, in *GetUnreadStatsRequest, opts ...grpc.CallOption) (*GetUnreadStatsResponse, error) {
	out := new(GetUnreadStatsResponse)
	err := c.cc.Invoke(ctx, Room303API_GetUnreadStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *room303APIClient) MarkMessageRead(ctx context.Context, in *MarkMessageReadRequest, opts ...grpc.CallOption) (*MarkMessageReadResponse, error) {
	out := new(MarkMessageReadResponse)
	err := c.cc.Invoke(ctx, Room303API_MarkMessageRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *room303APIClient) MarkAllMessagesRead(ctx context.Context, in *MarkAllMessagesReadRequest, opts ...grpc.CallOption) (*MarkAllMessagesReadResponse, error) {
	out := new(MarkAllMessagesReadResponse)
	err := c.cc.Invoke(ctx, Room303API_MarkAllMessagesRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *room303APIClient) BulkMarkMessageRead(ctx context.Context, in *BulkMarkMessageReadRequest, opts ...grpc.CallOption) (*BulkMarkMessageReadResponse, error) {
	out := new(BulkMarkMessageReadResponse)
	err := c.cc.Invoke(ctx, Room303API_BulkMarkMessageRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *room303APIClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*commons.Room, error) {
	out := new(commons.Room)
	err := c.cc.Invoke(ctx, Room303API_CreateRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *room303APIClient) GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*commons.Room, error) {
	out := new(commons.Room)
	err := c.cc.Invoke(ctx, Room303API_GetRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *room303APIClient) ListAllRooms(ctx context.Context, in *ListAllRoomsRequest, opts ...grpc.CallOption) (*ListRoomsResponse, error) {
	out := new(ListRoomsResponse)
	err := c.cc.Invoke(ctx, Room303API_ListAllRooms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *room303APIClient) ListRoomsForMember(ctx context.Context, in *ListRoomsForMemberRequest, opts ...grpc.CallOption) (*ListRoomsResponse, error) {
	out := new(ListRoomsResponse)
	err := c.cc.Invoke(ctx, Room303API_ListRoomsForMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *room303APIClient) ArchiveRoom(ctx context.Context, in *ArchiveRoomRequest, opts ...grpc.CallOption) (*commons.Room, error) {
	out := new(commons.Room)
	err := c.cc.Invoke(ctx, Room303API_ArchiveRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *room303APIClient) ListUsersNames(ctx context.Context, in *ListUsersNamesRequest, opts ...grpc.CallOption) (Room303API_ListUsersNamesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Room303API_ServiceDesc.Streams[1], Room303API_ListUsersNames_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &room303APIListUsersNamesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Room303API_ListUsersNamesClient interface {
	Recv() (*ListUsersNamesResponse, error)
	grpc.ClientStream
}

type room303APIListUsersNamesClient struct {
	grpc.ClientStream
}

func (x *room303APIListUsersNamesClient) Recv() (*ListUsersNamesResponse, error) {
	m := new(ListUsersNamesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Room303APIServer is the server API for Room303API service.
// All implementations must embed UnimplementedRoom303APIServer
// for forward compatibility
type Room303APIServer interface {
	// Member
	//
	// Add a new member to a room, you must be a room admin in order to do that
	AddRoomMember(context.Context, *AddRoomMemberRequest) (*commons.Member, error)
	// Remove room member (kick), the room member will not receive notifications from that room
	RemoveRoomMember(context.Context, *RemoveRoomMemberRequest) (*RemoveRoomMemberResponse, error)
	// List the members of this room
	ListRoomMembers(context.Context, *ListRoomMembersRequest) (*ListRoomMembersResponse, error)
	// Set a room member as admin, you must be a room admin in order to do this.
	SetAdminForRoomMember(context.Context, *SetAdminForRoomMemberRequest) (*SetAdminForRoomMemberResponse, error)
	// adds new member to a room and does not require the member to be admin
	JoinRoom(context.Context, *JoinRoomRequest) (*commons.Room, error)
	// gets the member entity from the provided room if it exists
	GetRoomMember(context.Context, *GetRoomMemberRequest) (*commons.Member, error)
	// Message
	CreateMessage(context.Context, *CreateMessageRequest) (*CreateMessageResponse, error)
	EditMessage(context.Context, *EditMessageRequest) (*EditMessageResponse, error)
	DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error)
	GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesResponse, error)
	StreamMessageUpdates(*StreamMessageUpdatesRequest, Room303API_StreamMessageUpdatesServer) error
	GetUnreadStats(context.Context, *GetUnreadStatsRequest) (*GetUnreadStatsResponse, error)
	MarkMessageRead(context.Context, *MarkMessageReadRequest) (*MarkMessageReadResponse, error)
	MarkAllMessagesRead(context.Context, *MarkAllMessagesReadRequest) (*MarkAllMessagesReadResponse, error)
	BulkMarkMessageRead(context.Context, *BulkMarkMessageReadRequest) (*BulkMarkMessageReadResponse, error)
	// Room
	CreateRoom(context.Context, *CreateRoomRequest) (*commons.Room, error)
	GetRoom(context.Context, *GetRoomRequest) (*commons.Room, error)
	ListAllRooms(context.Context, *ListAllRoomsRequest) (*ListRoomsResponse, error)
	ListRoomsForMember(context.Context, *ListRoomsForMemberRequest) (*ListRoomsResponse, error)
	ArchiveRoom(context.Context, *ArchiveRoomRequest) (*commons.Room, error)
	// ListUsersNames returns a list of users with names and ids
	ListUsersNames(*ListUsersNamesRequest, Room303API_ListUsersNamesServer) error
	mustEmbedUnimplementedRoom303APIServer()
}

// UnimplementedRoom303APIServer must be embedded to have forward compatible implementations.
type UnimplementedRoom303APIServer struct {
}

func (UnimplementedRoom303APIServer) AddRoomMember(context.Context, *AddRoomMemberRequest) (*commons.Member, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoomMember not implemented")
}
func (UnimplementedRoom303APIServer) RemoveRoomMember(context.Context, *RemoveRoomMemberRequest) (*RemoveRoomMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoomMember not implemented")
}
func (UnimplementedRoom303APIServer) ListRoomMembers(context.Context, *ListRoomMembersRequest) (*ListRoomMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoomMembers not implemented")
}
func (UnimplementedRoom303APIServer) SetAdminForRoomMember(context.Context, *SetAdminForRoomMemberRequest) (*SetAdminForRoomMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAdminForRoomMember not implemented")
}
func (UnimplementedRoom303APIServer) JoinRoom(context.Context, *JoinRoomRequest) (*commons.Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedRoom303APIServer) GetRoomMember(context.Context, *GetRoomMemberRequest) (*commons.Member, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomMember not implemented")
}
func (UnimplementedRoom303APIServer) CreateMessage(context.Context, *CreateMessageRequest) (*CreateMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedRoom303APIServer) EditMessage(context.Context, *EditMessageRequest) (*EditMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMessage not implemented")
}
func (UnimplementedRoom303APIServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedRoom303APIServer) GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedRoom303APIServer) StreamMessageUpdates(*StreamMessageUpdatesRequest, Room303API_StreamMessageUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMessageUpdates not implemented")
}
func (UnimplementedRoom303APIServer) GetUnreadStats(context.Context, *GetUnreadStatsRequest) (*GetUnreadStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnreadStats not implemented")
}
func (UnimplementedRoom303APIServer) MarkMessageRead(context.Context, *MarkMessageReadRequest) (*MarkMessageReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkMessageRead not implemented")
}
func (UnimplementedRoom303APIServer) MarkAllMessagesRead(context.Context, *MarkAllMessagesReadRequest) (*MarkAllMessagesReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAllMessagesRead not implemented")
}
func (UnimplementedRoom303APIServer) BulkMarkMessageRead(context.Context, *BulkMarkMessageReadRequest) (*BulkMarkMessageReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkMarkMessageRead not implemented")
}
func (UnimplementedRoom303APIServer) CreateRoom(context.Context, *CreateRoomRequest) (*commons.Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedRoom303APIServer) GetRoom(context.Context, *GetRoomRequest) (*commons.Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoom not implemented")
}
func (UnimplementedRoom303APIServer) ListAllRooms(context.Context, *ListAllRoomsRequest) (*ListRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllRooms not implemented")
}
func (UnimplementedRoom303APIServer) ListRoomsForMember(context.Context, *ListRoomsForMemberRequest) (*ListRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoomsForMember not implemented")
}
func (UnimplementedRoom303APIServer) ArchiveRoom(context.Context, *ArchiveRoomRequest) (*commons.Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveRoom not implemented")
}
func (UnimplementedRoom303APIServer) ListUsersNames(*ListUsersNamesRequest, Room303API_ListUsersNamesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUsersNames not implemented")
}
func (UnimplementedRoom303APIServer) mustEmbedUnimplementedRoom303APIServer() {}

// UnsafeRoom303APIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Room303APIServer will
// result in compilation errors.
type UnsafeRoom303APIServer interface {
	mustEmbedUnimplementedRoom303APIServer()
}

func RegisterRoom303APIServer(s grpc.ServiceRegistrar, srv Room303APIServer) {
	s.RegisterService(&Room303API_ServiceDesc, srv)
}

func _Room303API_AddRoomMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoomMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Room303APIServer).AddRoomMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room303API_AddRoomMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Room303APIServer).AddRoomMember(ctx, req.(*AddRoomMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room303API_RemoveRoomMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoomMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Room303APIServer).RemoveRoomMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room303API_RemoveRoomMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Room303APIServer).RemoveRoomMember(ctx, req.(*RemoveRoomMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room303API_ListRoomMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoomMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Room303APIServer).ListRoomMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room303API_ListRoomMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Room303APIServer).ListRoomMembers(ctx, req.(*ListRoomMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room303API_SetAdminForRoomMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAdminForRoomMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Room303APIServer).SetAdminForRoomMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room303API_SetAdminForRoomMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Room303APIServer).SetAdminForRoomMember(ctx, req.(*SetAdminForRoomMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room303API_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Room303APIServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room303API_JoinRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Room303APIServer).JoinRoom(ctx, req.(*JoinRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room303API_GetRoomMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Room303APIServer).GetRoomMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room303API_GetRoomMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Room303APIServer).GetRoomMember(ctx, req.(*GetRoomMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room303API_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Room303APIServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room303API_CreateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Room303APIServer).CreateMessage(ctx, req.(*CreateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room303API_EditMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Room303APIServer).EditMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room303API_EditMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Room303APIServer).EditMessage(ctx, req.(*EditMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room303API_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Room303APIServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room303API_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Room303APIServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room303API_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Room303APIServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room303API_GetMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Room303APIServer).GetMessages(ctx, req.(*GetMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room303API_StreamMessageUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamMessageUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(Room303APIServer).StreamMessageUpdates(m, &room303APIStreamMessageUpdatesServer{stream})
}

type Room303API_StreamMessageUpdatesServer interface {
	Send(*StreamMessageUpdatesResponse) error
	grpc.ServerStream
}

type room303APIStreamMessageUpdatesServer struct {
	grpc.ServerStream
}

func (x *room303APIStreamMessageUpdatesServer) Send(m *StreamMessageUpdatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Room303API_GetUnreadStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnreadStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Room303APIServer).GetUnreadStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room303API_GetUnreadStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Room303APIServer).GetUnreadStats(ctx, req.(*GetUnreadStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room303API_MarkMessageRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkMessageReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Room303APIServer).MarkMessageRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room303API_MarkMessageRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Room303APIServer).MarkMessageRead(ctx, req.(*MarkMessageReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room303API_MarkAllMessagesRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAllMessagesReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Room303APIServer).MarkAllMessagesRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room303API_MarkAllMessagesRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Room303APIServer).MarkAllMessagesRead(ctx, req.(*MarkAllMessagesReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room303API_BulkMarkMessageRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkMarkMessageReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Room303APIServer).BulkMarkMessageRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room303API_BulkMarkMessageRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Room303APIServer).BulkMarkMessageRead(ctx, req.(*BulkMarkMessageReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room303API_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Room303APIServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room303API_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Room303APIServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room303API_GetRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Room303APIServer).GetRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room303API_GetRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Room303APIServer).GetRoom(ctx, req.(*GetRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room303API_ListAllRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Room303APIServer).ListAllRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room303API_ListAllRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Room303APIServer).ListAllRooms(ctx, req.(*ListAllRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room303API_ListRoomsForMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoomsForMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Room303APIServer).ListRoomsForMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room303API_ListRoomsForMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Room303APIServer).ListRoomsForMember(ctx, req.(*ListRoomsForMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room303API_ArchiveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Room303APIServer).ArchiveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room303API_ArchiveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Room303APIServer).ArchiveRoom(ctx, req.(*ArchiveRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room303API_ListUsersNames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListUsersNamesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(Room303APIServer).ListUsersNames(m, &room303APIListUsersNamesServer{stream})
}

type Room303API_ListUsersNamesServer interface {
	Send(*ListUsersNamesResponse) error
	grpc.ServerStream
}

type room303APIListUsersNamesServer struct {
	grpc.ServerStream
}

func (x *room303APIListUsersNamesServer) Send(m *ListUsersNamesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Room303API_ServiceDesc is the grpc.ServiceDesc for Room303API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Room303API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.room303.Room303API",
	HandlerType: (*Room303APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRoomMember",
			Handler:    _Room303API_AddRoomMember_Handler,
		},
		{
			MethodName: "RemoveRoomMember",
			Handler:    _Room303API_RemoveRoomMember_Handler,
		},
		{
			MethodName: "ListRoomMembers",
			Handler:    _Room303API_ListRoomMembers_Handler,
		},
		{
			MethodName: "SetAdminForRoomMember",
			Handler:    _Room303API_SetAdminForRoomMember_Handler,
		},
		{
			MethodName: "JoinRoom",
			Handler:    _Room303API_JoinRoom_Handler,
		},
		{
			MethodName: "GetRoomMember",
			Handler:    _Room303API_GetRoomMember_Handler,
		},
		{
			MethodName: "CreateMessage",
			Handler:    _Room303API_CreateMessage_Handler,
		},
		{
			MethodName: "EditMessage",
			Handler:    _Room303API_EditMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _Room303API_DeleteMessage_Handler,
		},
		{
			MethodName: "GetMessages",
			Handler:    _Room303API_GetMessages_Handler,
		},
		{
			MethodName: "GetUnreadStats",
			Handler:    _Room303API_GetUnreadStats_Handler,
		},
		{
			MethodName: "MarkMessageRead",
			Handler:    _Room303API_MarkMessageRead_Handler,
		},
		{
			MethodName: "MarkAllMessagesRead",
			Handler:    _Room303API_MarkAllMessagesRead_Handler,
		},
		{
			MethodName: "BulkMarkMessageRead",
			Handler:    _Room303API_BulkMarkMessageRead_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _Room303API_CreateRoom_Handler,
		},
		{
			MethodName: "GetRoom",
			Handler:    _Room303API_GetRoom_Handler,
		},
		{
			MethodName: "ListAllRooms",
			Handler:    _Room303API_ListAllRooms_Handler,
		},
		{
			MethodName: "ListRoomsForMember",
			Handler:    _Room303API_ListRoomsForMember_Handler,
		},
		{
			MethodName: "ArchiveRoom",
			Handler:    _Room303API_ArchiveRoom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMessageUpdates",
			Handler:       _Room303API_StreamMessageUpdates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListUsersNames",
			Handler:       _Room303API_ListUsersNames_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1alpha1/room303/service.proto",
}
