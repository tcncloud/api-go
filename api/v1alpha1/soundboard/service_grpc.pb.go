// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: api/v1alpha1/soundboard/service.proto

package soundboard

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Soundboard_GetSoundboardFile_FullMethodName = "/api.v1alpha1.soundboard.Soundboard/GetSoundboardFile"
	Soundboard_CreateSoundboard_FullMethodName  = "/api.v1alpha1.soundboard.Soundboard/CreateSoundboard"
	Soundboard_ListSoundboards_FullMethodName   = "/api.v1alpha1.soundboard.Soundboard/ListSoundboards"
	Soundboard_UpdateSoundboard_FullMethodName  = "/api.v1alpha1.soundboard.Soundboard/UpdateSoundboard"
	Soundboard_DeleteSoundboard_FullMethodName  = "/api.v1alpha1.soundboard.Soundboard/DeleteSoundboard"
)

// SoundboardClient is the client API for Soundboard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SoundboardClient interface {
	// GetSoundboardFile streams back segments of the audio file stored in rec
	// corresponding to the provided soundboard id and org id.
	GetSoundboardFile(ctx context.Context, in *GetSoundboardFileReq, opts ...grpc.CallOption) (Soundboard_GetSoundboardFileClient, error)
	// CreateSoundboard takes in a stream of metadata and audio file segments.
	// The first expected message should contain SoundboardDetails, then following
	// messages will be chunks of audio file data, which is then aggregated and put
	// into rec. The generated soundboard id is returned.
	CreateSoundboard(ctx context.Context, in *CreateSoundboardReq, opts ...grpc.CallOption) (*CreateSoundboardRes, error)
	// ListSoundboards returns all of the metadata for soundboards corresponding
	// corresponding to a given org id.
	ListSoundboards(ctx context.Context, in *ListSoundboardsReq, opts ...grpc.CallOption) (*ListSoundboardsRes, error)
	// UpdateSondboard updates a soundboard's metadata in the soundboard table.
	UpdateSoundboard(ctx context.Context, in *UpdateSoundboardReq, opts ...grpc.CallOption) (*UpdateSoundboardRes, error)
	// DeleteSondboard deletes a soundboard's metadata from the soundboard table.
	DeleteSoundboard(ctx context.Context, in *DeleteSoundboardReq, opts ...grpc.CallOption) (*DeleteSoundboardRes, error)
}

type soundboardClient struct {
	cc grpc.ClientConnInterface
}

func NewSoundboardClient(cc grpc.ClientConnInterface) SoundboardClient {
	return &soundboardClient{cc}
}

func (c *soundboardClient) GetSoundboardFile(ctx context.Context, in *GetSoundboardFileReq, opts ...grpc.CallOption) (Soundboard_GetSoundboardFileClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Soundboard_ServiceDesc.Streams[0], Soundboard_GetSoundboardFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &soundboardGetSoundboardFileClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Soundboard_GetSoundboardFileClient interface {
	Recv() (*GetSoundboardFileRes, error)
	grpc.ClientStream
}

type soundboardGetSoundboardFileClient struct {
	grpc.ClientStream
}

func (x *soundboardGetSoundboardFileClient) Recv() (*GetSoundboardFileRes, error) {
	m := new(GetSoundboardFileRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *soundboardClient) CreateSoundboard(ctx context.Context, in *CreateSoundboardReq, opts ...grpc.CallOption) (*CreateSoundboardRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSoundboardRes)
	err := c.cc.Invoke(ctx, Soundboard_CreateSoundboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soundboardClient) ListSoundboards(ctx context.Context, in *ListSoundboardsReq, opts ...grpc.CallOption) (*ListSoundboardsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSoundboardsRes)
	err := c.cc.Invoke(ctx, Soundboard_ListSoundboards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soundboardClient) UpdateSoundboard(ctx context.Context, in *UpdateSoundboardReq, opts ...grpc.CallOption) (*UpdateSoundboardRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSoundboardRes)
	err := c.cc.Invoke(ctx, Soundboard_UpdateSoundboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soundboardClient) DeleteSoundboard(ctx context.Context, in *DeleteSoundboardReq, opts ...grpc.CallOption) (*DeleteSoundboardRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSoundboardRes)
	err := c.cc.Invoke(ctx, Soundboard_DeleteSoundboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SoundboardServer is the server API for Soundboard service.
// All implementations must embed UnimplementedSoundboardServer
// for forward compatibility
type SoundboardServer interface {
	// GetSoundboardFile streams back segments of the audio file stored in rec
	// corresponding to the provided soundboard id and org id.
	GetSoundboardFile(*GetSoundboardFileReq, Soundboard_GetSoundboardFileServer) error
	// CreateSoundboard takes in a stream of metadata and audio file segments.
	// The first expected message should contain SoundboardDetails, then following
	// messages will be chunks of audio file data, which is then aggregated and put
	// into rec. The generated soundboard id is returned.
	CreateSoundboard(context.Context, *CreateSoundboardReq) (*CreateSoundboardRes, error)
	// ListSoundboards returns all of the metadata for soundboards corresponding
	// corresponding to a given org id.
	ListSoundboards(context.Context, *ListSoundboardsReq) (*ListSoundboardsRes, error)
	// UpdateSondboard updates a soundboard's metadata in the soundboard table.
	UpdateSoundboard(context.Context, *UpdateSoundboardReq) (*UpdateSoundboardRes, error)
	// DeleteSondboard deletes a soundboard's metadata from the soundboard table.
	DeleteSoundboard(context.Context, *DeleteSoundboardReq) (*DeleteSoundboardRes, error)
	mustEmbedUnimplementedSoundboardServer()
}

// UnimplementedSoundboardServer must be embedded to have forward compatible implementations.
type UnimplementedSoundboardServer struct {
}

func (UnimplementedSoundboardServer) GetSoundboardFile(*GetSoundboardFileReq, Soundboard_GetSoundboardFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSoundboardFile not implemented")
}
func (UnimplementedSoundboardServer) CreateSoundboard(context.Context, *CreateSoundboardReq) (*CreateSoundboardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSoundboard not implemented")
}
func (UnimplementedSoundboardServer) ListSoundboards(context.Context, *ListSoundboardsReq) (*ListSoundboardsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSoundboards not implemented")
}
func (UnimplementedSoundboardServer) UpdateSoundboard(context.Context, *UpdateSoundboardReq) (*UpdateSoundboardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSoundboard not implemented")
}
func (UnimplementedSoundboardServer) DeleteSoundboard(context.Context, *DeleteSoundboardReq) (*DeleteSoundboardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSoundboard not implemented")
}
func (UnimplementedSoundboardServer) mustEmbedUnimplementedSoundboardServer() {}

// UnsafeSoundboardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SoundboardServer will
// result in compilation errors.
type UnsafeSoundboardServer interface {
	mustEmbedUnimplementedSoundboardServer()
}

func RegisterSoundboardServer(s grpc.ServiceRegistrar, srv SoundboardServer) {
	s.RegisterService(&Soundboard_ServiceDesc, srv)
}

func _Soundboard_GetSoundboardFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSoundboardFileReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SoundboardServer).GetSoundboardFile(m, &soundboardGetSoundboardFileServer{ServerStream: stream})
}

type Soundboard_GetSoundboardFileServer interface {
	Send(*GetSoundboardFileRes) error
	grpc.ServerStream
}

type soundboardGetSoundboardFileServer struct {
	grpc.ServerStream
}

func (x *soundboardGetSoundboardFileServer) Send(m *GetSoundboardFileRes) error {
	return x.ServerStream.SendMsg(m)
}

func _Soundboard_CreateSoundboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSoundboardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoundboardServer).CreateSoundboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Soundboard_CreateSoundboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoundboardServer).CreateSoundboard(ctx, req.(*CreateSoundboardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soundboard_ListSoundboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSoundboardsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoundboardServer).ListSoundboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Soundboard_ListSoundboards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoundboardServer).ListSoundboards(ctx, req.(*ListSoundboardsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soundboard_UpdateSoundboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSoundboardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoundboardServer).UpdateSoundboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Soundboard_UpdateSoundboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoundboardServer).UpdateSoundboard(ctx, req.(*UpdateSoundboardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Soundboard_DeleteSoundboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSoundboardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoundboardServer).DeleteSoundboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Soundboard_DeleteSoundboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoundboardServer).DeleteSoundboard(ctx, req.(*DeleteSoundboardReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Soundboard_ServiceDesc is the grpc.ServiceDesc for Soundboard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Soundboard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.soundboard.Soundboard",
	HandlerType: (*SoundboardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSoundboard",
			Handler:    _Soundboard_CreateSoundboard_Handler,
		},
		{
			MethodName: "ListSoundboards",
			Handler:    _Soundboard_ListSoundboards_Handler,
		},
		{
			MethodName: "UpdateSoundboard",
			Handler:    _Soundboard_UpdateSoundboard_Handler,
		},
		{
			MethodName: "DeleteSoundboard",
			Handler:    _Soundboard_DeleteSoundboard_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSoundboardFile",
			Handler:       _Soundboard_GetSoundboardFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1alpha1/soundboard/service.proto",
}
