// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1alpha1/soundboard/service.proto

package soundboardconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	soundboard "github.com/tcncloud/api-go/api/v1alpha1/soundboard"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SoundboardName is the fully-qualified name of the Soundboard service.
	SoundboardName = "api.v1alpha1.soundboard.Soundboard"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SoundboardGetSoundboardFileProcedure is the fully-qualified name of the Soundboard's
	// GetSoundboardFile RPC.
	SoundboardGetSoundboardFileProcedure = "/api.v1alpha1.soundboard.Soundboard/GetSoundboardFile"
	// SoundboardCreateSoundboardProcedure is the fully-qualified name of the Soundboard's
	// CreateSoundboard RPC.
	SoundboardCreateSoundboardProcedure = "/api.v1alpha1.soundboard.Soundboard/CreateSoundboard"
	// SoundboardListSoundboardsProcedure is the fully-qualified name of the Soundboard's
	// ListSoundboards RPC.
	SoundboardListSoundboardsProcedure = "/api.v1alpha1.soundboard.Soundboard/ListSoundboards"
	// SoundboardUpdateSoundboardProcedure is the fully-qualified name of the Soundboard's
	// UpdateSoundboard RPC.
	SoundboardUpdateSoundboardProcedure = "/api.v1alpha1.soundboard.Soundboard/UpdateSoundboard"
	// SoundboardDeleteSoundboardProcedure is the fully-qualified name of the Soundboard's
	// DeleteSoundboard RPC.
	SoundboardDeleteSoundboardProcedure = "/api.v1alpha1.soundboard.Soundboard/DeleteSoundboard"
)

// SoundboardClient is a client for the api.v1alpha1.soundboard.Soundboard service.
type SoundboardClient interface {
	// GetSoundboardFile streams back segments of the audio file stored in rec
	// corresponding to the provided soundboard id and org id.
	GetSoundboardFile(context.Context, *connect_go.Request[soundboard.GetSoundboardFileReq]) (*connect_go.ServerStreamForClient[soundboard.GetSoundboardFileRes], error)
	// CreateSoundboard takes in a stream of metadata and audio file segments.
	// The first expected message should contain SoundboardDetails, then following
	// messages will be chunks of audio file data, which is then aggregated and put
	// into rec. The generated soundboard id is returned.
	CreateSoundboard(context.Context, *connect_go.Request[soundboard.CreateSoundboardReq]) (*connect_go.Response[soundboard.CreateSoundboardRes], error)
	// ListSoundboards returns all of the metadata for soundboards corresponding
	// corresponding to a given org id.
	ListSoundboards(context.Context, *connect_go.Request[soundboard.ListSoundboardsReq]) (*connect_go.Response[soundboard.ListSoundboardsRes], error)
	// UpdateSondboard updates a soundboard's metadata in the soundboard table.
	UpdateSoundboard(context.Context, *connect_go.Request[soundboard.UpdateSoundboardReq]) (*connect_go.Response[soundboard.UpdateSoundboardRes], error)
	// DeleteSondboard deletes a soundboard's metadata from the soundboard table.
	DeleteSoundboard(context.Context, *connect_go.Request[soundboard.DeleteSoundboardReq]) (*connect_go.Response[soundboard.DeleteSoundboardRes], error)
}

// NewSoundboardClient constructs a client for the api.v1alpha1.soundboard.Soundboard service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSoundboardClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SoundboardClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &soundboardClient{
		getSoundboardFile: connect_go.NewClient[soundboard.GetSoundboardFileReq, soundboard.GetSoundboardFileRes](
			httpClient,
			baseURL+SoundboardGetSoundboardFileProcedure,
			opts...,
		),
		createSoundboard: connect_go.NewClient[soundboard.CreateSoundboardReq, soundboard.CreateSoundboardRes](
			httpClient,
			baseURL+SoundboardCreateSoundboardProcedure,
			opts...,
		),
		listSoundboards: connect_go.NewClient[soundboard.ListSoundboardsReq, soundboard.ListSoundboardsRes](
			httpClient,
			baseURL+SoundboardListSoundboardsProcedure,
			opts...,
		),
		updateSoundboard: connect_go.NewClient[soundboard.UpdateSoundboardReq, soundboard.UpdateSoundboardRes](
			httpClient,
			baseURL+SoundboardUpdateSoundboardProcedure,
			opts...,
		),
		deleteSoundboard: connect_go.NewClient[soundboard.DeleteSoundboardReq, soundboard.DeleteSoundboardRes](
			httpClient,
			baseURL+SoundboardDeleteSoundboardProcedure,
			opts...,
		),
	}
}

// soundboardClient implements SoundboardClient.
type soundboardClient struct {
	getSoundboardFile *connect_go.Client[soundboard.GetSoundboardFileReq, soundboard.GetSoundboardFileRes]
	createSoundboard  *connect_go.Client[soundboard.CreateSoundboardReq, soundboard.CreateSoundboardRes]
	listSoundboards   *connect_go.Client[soundboard.ListSoundboardsReq, soundboard.ListSoundboardsRes]
	updateSoundboard  *connect_go.Client[soundboard.UpdateSoundboardReq, soundboard.UpdateSoundboardRes]
	deleteSoundboard  *connect_go.Client[soundboard.DeleteSoundboardReq, soundboard.DeleteSoundboardRes]
}

// GetSoundboardFile calls api.v1alpha1.soundboard.Soundboard.GetSoundboardFile.
func (c *soundboardClient) GetSoundboardFile(ctx context.Context, req *connect_go.Request[soundboard.GetSoundboardFileReq]) (*connect_go.ServerStreamForClient[soundboard.GetSoundboardFileRes], error) {
	return c.getSoundboardFile.CallServerStream(ctx, req)
}

// CreateSoundboard calls api.v1alpha1.soundboard.Soundboard.CreateSoundboard.
func (c *soundboardClient) CreateSoundboard(ctx context.Context, req *connect_go.Request[soundboard.CreateSoundboardReq]) (*connect_go.Response[soundboard.CreateSoundboardRes], error) {
	return c.createSoundboard.CallUnary(ctx, req)
}

// ListSoundboards calls api.v1alpha1.soundboard.Soundboard.ListSoundboards.
func (c *soundboardClient) ListSoundboards(ctx context.Context, req *connect_go.Request[soundboard.ListSoundboardsReq]) (*connect_go.Response[soundboard.ListSoundboardsRes], error) {
	return c.listSoundboards.CallUnary(ctx, req)
}

// UpdateSoundboard calls api.v1alpha1.soundboard.Soundboard.UpdateSoundboard.
func (c *soundboardClient) UpdateSoundboard(ctx context.Context, req *connect_go.Request[soundboard.UpdateSoundboardReq]) (*connect_go.Response[soundboard.UpdateSoundboardRes], error) {
	return c.updateSoundboard.CallUnary(ctx, req)
}

// DeleteSoundboard calls api.v1alpha1.soundboard.Soundboard.DeleteSoundboard.
func (c *soundboardClient) DeleteSoundboard(ctx context.Context, req *connect_go.Request[soundboard.DeleteSoundboardReq]) (*connect_go.Response[soundboard.DeleteSoundboardRes], error) {
	return c.deleteSoundboard.CallUnary(ctx, req)
}

// SoundboardHandler is an implementation of the api.v1alpha1.soundboard.Soundboard service.
type SoundboardHandler interface {
	// GetSoundboardFile streams back segments of the audio file stored in rec
	// corresponding to the provided soundboard id and org id.
	GetSoundboardFile(context.Context, *connect_go.Request[soundboard.GetSoundboardFileReq], *connect_go.ServerStream[soundboard.GetSoundboardFileRes]) error
	// CreateSoundboard takes in a stream of metadata and audio file segments.
	// The first expected message should contain SoundboardDetails, then following
	// messages will be chunks of audio file data, which is then aggregated and put
	// into rec. The generated soundboard id is returned.
	CreateSoundboard(context.Context, *connect_go.Request[soundboard.CreateSoundboardReq]) (*connect_go.Response[soundboard.CreateSoundboardRes], error)
	// ListSoundboards returns all of the metadata for soundboards corresponding
	// corresponding to a given org id.
	ListSoundboards(context.Context, *connect_go.Request[soundboard.ListSoundboardsReq]) (*connect_go.Response[soundboard.ListSoundboardsRes], error)
	// UpdateSondboard updates a soundboard's metadata in the soundboard table.
	UpdateSoundboard(context.Context, *connect_go.Request[soundboard.UpdateSoundboardReq]) (*connect_go.Response[soundboard.UpdateSoundboardRes], error)
	// DeleteSondboard deletes a soundboard's metadata from the soundboard table.
	DeleteSoundboard(context.Context, *connect_go.Request[soundboard.DeleteSoundboardReq]) (*connect_go.Response[soundboard.DeleteSoundboardRes], error)
}

// NewSoundboardHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSoundboardHandler(svc SoundboardHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	soundboardGetSoundboardFileHandler := connect_go.NewServerStreamHandler(
		SoundboardGetSoundboardFileProcedure,
		svc.GetSoundboardFile,
		opts...,
	)
	soundboardCreateSoundboardHandler := connect_go.NewUnaryHandler(
		SoundboardCreateSoundboardProcedure,
		svc.CreateSoundboard,
		opts...,
	)
	soundboardListSoundboardsHandler := connect_go.NewUnaryHandler(
		SoundboardListSoundboardsProcedure,
		svc.ListSoundboards,
		opts...,
	)
	soundboardUpdateSoundboardHandler := connect_go.NewUnaryHandler(
		SoundboardUpdateSoundboardProcedure,
		svc.UpdateSoundboard,
		opts...,
	)
	soundboardDeleteSoundboardHandler := connect_go.NewUnaryHandler(
		SoundboardDeleteSoundboardProcedure,
		svc.DeleteSoundboard,
		opts...,
	)
	return "/api.v1alpha1.soundboard.Soundboard/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SoundboardGetSoundboardFileProcedure:
			soundboardGetSoundboardFileHandler.ServeHTTP(w, r)
		case SoundboardCreateSoundboardProcedure:
			soundboardCreateSoundboardHandler.ServeHTTP(w, r)
		case SoundboardListSoundboardsProcedure:
			soundboardListSoundboardsHandler.ServeHTTP(w, r)
		case SoundboardUpdateSoundboardProcedure:
			soundboardUpdateSoundboardHandler.ServeHTTP(w, r)
		case SoundboardDeleteSoundboardProcedure:
			soundboardDeleteSoundboardHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSoundboardHandler returns CodeUnimplemented from all methods.
type UnimplementedSoundboardHandler struct{}

func (UnimplementedSoundboardHandler) GetSoundboardFile(context.Context, *connect_go.Request[soundboard.GetSoundboardFileReq], *connect_go.ServerStream[soundboard.GetSoundboardFileRes]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.soundboard.Soundboard.GetSoundboardFile is not implemented"))
}

func (UnimplementedSoundboardHandler) CreateSoundboard(context.Context, *connect_go.Request[soundboard.CreateSoundboardReq]) (*connect_go.Response[soundboard.CreateSoundboardRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.soundboard.Soundboard.CreateSoundboard is not implemented"))
}

func (UnimplementedSoundboardHandler) ListSoundboards(context.Context, *connect_go.Request[soundboard.ListSoundboardsReq]) (*connect_go.Response[soundboard.ListSoundboardsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.soundboard.Soundboard.ListSoundboards is not implemented"))
}

func (UnimplementedSoundboardHandler) UpdateSoundboard(context.Context, *connect_go.Request[soundboard.UpdateSoundboardReq]) (*connect_go.Response[soundboard.UpdateSoundboardRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.soundboard.Soundboard.UpdateSoundboard is not implemented"))
}

func (UnimplementedSoundboardHandler) DeleteSoundboard(context.Context, *connect_go.Request[soundboard.DeleteSoundboardReq]) (*connect_go.Response[soundboard.DeleteSoundboardRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.soundboard.Soundboard.DeleteSoundboard is not implemented"))
}
