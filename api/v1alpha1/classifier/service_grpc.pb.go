// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1alpha1/classifier/service.proto

package classifier

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClassifierFileTemplates_ParseFile_FullMethodName          = "/api.v1alpha1.classifier.ClassifierFileTemplates/ParseFile"
	ClassifierFileTemplates_UpdateFileTemplate_FullMethodName = "/api.v1alpha1.classifier.ClassifierFileTemplates/UpdateFileTemplate"
	ClassifierFileTemplates_DeleteFileTemplate_FullMethodName = "/api.v1alpha1.classifier.ClassifierFileTemplates/DeleteFileTemplate"
	ClassifierFileTemplates_ListFileTemplates_FullMethodName  = "/api.v1alpha1.classifier.ClassifierFileTemplates/ListFileTemplates"
	ClassifierFileTemplates_GetFileTemplate_FullMethodName    = "/api.v1alpha1.classifier.ClassifierFileTemplates/GetFileTemplate"
)

// ClassifierFileTemplatesClient is the client API for ClassifierFileTemplates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassifierFileTemplatesClient interface {
	ParseFile(ctx context.Context, in *ParseFileRequest, opts ...grpc.CallOption) (*ParseFileResponse, error)
	UpdateFileTemplate(ctx context.Context, in *UpdateFileTemplateRequest, opts ...grpc.CallOption) (*UpdateFileTemplateResponse, error)
	DeleteFileTemplate(ctx context.Context, in *DeleteFileTemplateRequest, opts ...grpc.CallOption) (*DeleteFileTemplateResponse, error)
	ListFileTemplates(ctx context.Context, in *ListFileTemplatesRequest, opts ...grpc.CallOption) (*ListFileTemplatesResponse, error)
	GetFileTemplate(ctx context.Context, in *GetFileTemplateRequest, opts ...grpc.CallOption) (*GetFileTemplateResponse, error)
}

type classifierFileTemplatesClient struct {
	cc grpc.ClientConnInterface
}

func NewClassifierFileTemplatesClient(cc grpc.ClientConnInterface) ClassifierFileTemplatesClient {
	return &classifierFileTemplatesClient{cc}
}

func (c *classifierFileTemplatesClient) ParseFile(ctx context.Context, in *ParseFileRequest, opts ...grpc.CallOption) (*ParseFileResponse, error) {
	out := new(ParseFileResponse)
	err := c.cc.Invoke(ctx, ClassifierFileTemplates_ParseFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classifierFileTemplatesClient) UpdateFileTemplate(ctx context.Context, in *UpdateFileTemplateRequest, opts ...grpc.CallOption) (*UpdateFileTemplateResponse, error) {
	out := new(UpdateFileTemplateResponse)
	err := c.cc.Invoke(ctx, ClassifierFileTemplates_UpdateFileTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classifierFileTemplatesClient) DeleteFileTemplate(ctx context.Context, in *DeleteFileTemplateRequest, opts ...grpc.CallOption) (*DeleteFileTemplateResponse, error) {
	out := new(DeleteFileTemplateResponse)
	err := c.cc.Invoke(ctx, ClassifierFileTemplates_DeleteFileTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classifierFileTemplatesClient) ListFileTemplates(ctx context.Context, in *ListFileTemplatesRequest, opts ...grpc.CallOption) (*ListFileTemplatesResponse, error) {
	out := new(ListFileTemplatesResponse)
	err := c.cc.Invoke(ctx, ClassifierFileTemplates_ListFileTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classifierFileTemplatesClient) GetFileTemplate(ctx context.Context, in *GetFileTemplateRequest, opts ...grpc.CallOption) (*GetFileTemplateResponse, error) {
	out := new(GetFileTemplateResponse)
	err := c.cc.Invoke(ctx, ClassifierFileTemplates_GetFileTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassifierFileTemplatesServer is the server API for ClassifierFileTemplates service.
// All implementations must embed UnimplementedClassifierFileTemplatesServer
// for forward compatibility
type ClassifierFileTemplatesServer interface {
	ParseFile(context.Context, *ParseFileRequest) (*ParseFileResponse, error)
	UpdateFileTemplate(context.Context, *UpdateFileTemplateRequest) (*UpdateFileTemplateResponse, error)
	DeleteFileTemplate(context.Context, *DeleteFileTemplateRequest) (*DeleteFileTemplateResponse, error)
	ListFileTemplates(context.Context, *ListFileTemplatesRequest) (*ListFileTemplatesResponse, error)
	GetFileTemplate(context.Context, *GetFileTemplateRequest) (*GetFileTemplateResponse, error)
	mustEmbedUnimplementedClassifierFileTemplatesServer()
}

// UnimplementedClassifierFileTemplatesServer must be embedded to have forward compatible implementations.
type UnimplementedClassifierFileTemplatesServer struct {
}

func (UnimplementedClassifierFileTemplatesServer) ParseFile(context.Context, *ParseFileRequest) (*ParseFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseFile not implemented")
}
func (UnimplementedClassifierFileTemplatesServer) UpdateFileTemplate(context.Context, *UpdateFileTemplateRequest) (*UpdateFileTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFileTemplate not implemented")
}
func (UnimplementedClassifierFileTemplatesServer) DeleteFileTemplate(context.Context, *DeleteFileTemplateRequest) (*DeleteFileTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFileTemplate not implemented")
}
func (UnimplementedClassifierFileTemplatesServer) ListFileTemplates(context.Context, *ListFileTemplatesRequest) (*ListFileTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFileTemplates not implemented")
}
func (UnimplementedClassifierFileTemplatesServer) GetFileTemplate(context.Context, *GetFileTemplateRequest) (*GetFileTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileTemplate not implemented")
}
func (UnimplementedClassifierFileTemplatesServer) mustEmbedUnimplementedClassifierFileTemplatesServer() {
}

// UnsafeClassifierFileTemplatesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassifierFileTemplatesServer will
// result in compilation errors.
type UnsafeClassifierFileTemplatesServer interface {
	mustEmbedUnimplementedClassifierFileTemplatesServer()
}

func RegisterClassifierFileTemplatesServer(s grpc.ServiceRegistrar, srv ClassifierFileTemplatesServer) {
	s.RegisterService(&ClassifierFileTemplates_ServiceDesc, srv)
}

func _ClassifierFileTemplates_ParseFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassifierFileTemplatesServer).ParseFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassifierFileTemplates_ParseFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassifierFileTemplatesServer).ParseFile(ctx, req.(*ParseFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassifierFileTemplates_UpdateFileTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassifierFileTemplatesServer).UpdateFileTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassifierFileTemplates_UpdateFileTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassifierFileTemplatesServer).UpdateFileTemplate(ctx, req.(*UpdateFileTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassifierFileTemplates_DeleteFileTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassifierFileTemplatesServer).DeleteFileTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassifierFileTemplates_DeleteFileTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassifierFileTemplatesServer).DeleteFileTemplate(ctx, req.(*DeleteFileTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassifierFileTemplates_ListFileTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFileTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassifierFileTemplatesServer).ListFileTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassifierFileTemplates_ListFileTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassifierFileTemplatesServer).ListFileTemplates(ctx, req.(*ListFileTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassifierFileTemplates_GetFileTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassifierFileTemplatesServer).GetFileTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassifierFileTemplates_GetFileTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassifierFileTemplatesServer).GetFileTemplate(ctx, req.(*GetFileTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClassifierFileTemplates_ServiceDesc is the grpc.ServiceDesc for ClassifierFileTemplates service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClassifierFileTemplates_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.classifier.ClassifierFileTemplates",
	HandlerType: (*ClassifierFileTemplatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParseFile",
			Handler:    _ClassifierFileTemplates_ParseFile_Handler,
		},
		{
			MethodName: "UpdateFileTemplate",
			Handler:    _ClassifierFileTemplates_UpdateFileTemplate_Handler,
		},
		{
			MethodName: "DeleteFileTemplate",
			Handler:    _ClassifierFileTemplates_DeleteFileTemplate_Handler,
		},
		{
			MethodName: "ListFileTemplates",
			Handler:    _ClassifierFileTemplates_ListFileTemplates_Handler,
		},
		{
			MethodName: "GetFileTemplate",
			Handler:    _ClassifierFileTemplates_GetFileTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1alpha1/classifier/service.proto",
}
