// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1alpha1/classifier/service.proto

package classifierconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	classifier "github.com/tcncloud/api-go/api/v1alpha1/classifier"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ClassifierFileTemplatesName is the fully-qualified name of the ClassifierFileTemplates service.
	ClassifierFileTemplatesName = "api.v1alpha1.classifier.ClassifierFileTemplates"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ClassifierFileTemplatesParseFileProcedure is the fully-qualified name of the
	// ClassifierFileTemplates's ParseFile RPC.
	ClassifierFileTemplatesParseFileProcedure = "/api.v1alpha1.classifier.ClassifierFileTemplates/ParseFile"
	// ClassifierFileTemplatesListEventsProcedure is the fully-qualified name of the
	// ClassifierFileTemplates's ListEvents RPC.
	ClassifierFileTemplatesListEventsProcedure = "/api.v1alpha1.classifier.ClassifierFileTemplates/ListEvents"
	// ClassifierFileTemplatesPeekListProcedure is the fully-qualified name of the
	// ClassifierFileTemplates's PeekList RPC.
	ClassifierFileTemplatesPeekListProcedure = "/api.v1alpha1.classifier.ClassifierFileTemplates/PeekList"
	// ClassifierFileTemplatesUpdateFileTemplateProcedure is the fully-qualified name of the
	// ClassifierFileTemplates's UpdateFileTemplate RPC.
	ClassifierFileTemplatesUpdateFileTemplateProcedure = "/api.v1alpha1.classifier.ClassifierFileTemplates/UpdateFileTemplate"
	// ClassifierFileTemplatesDeleteFileTemplateProcedure is the fully-qualified name of the
	// ClassifierFileTemplates's DeleteFileTemplate RPC.
	ClassifierFileTemplatesDeleteFileTemplateProcedure = "/api.v1alpha1.classifier.ClassifierFileTemplates/DeleteFileTemplate"
	// ClassifierFileTemplatesListFileTemplatesProcedure is the fully-qualified name of the
	// ClassifierFileTemplates's ListFileTemplates RPC.
	ClassifierFileTemplatesListFileTemplatesProcedure = "/api.v1alpha1.classifier.ClassifierFileTemplates/ListFileTemplates"
	// ClassifierFileTemplatesGetFileTemplateProcedure is the fully-qualified name of the
	// ClassifierFileTemplates's GetFileTemplate RPC.
	ClassifierFileTemplatesGetFileTemplateProcedure = "/api.v1alpha1.classifier.ClassifierFileTemplates/GetFileTemplate"
)

// ClassifierFileTemplatesClient is a client for the api.v1alpha1.classifier.ClassifierFileTemplates
// service.
type ClassifierFileTemplatesClient interface {
	ParseFile(context.Context, *connect_go.Request[classifier.ParseFileRequest]) (*connect_go.Response[classifier.ParseFileResponse], error)
	ListEvents(context.Context, *connect_go.Request[classifier.ListEventsRequest]) (*connect_go.Response[classifier.ListEventsResponse], error)
	PeekList(context.Context, *connect_go.Request[classifier.PeekListRequest]) (*connect_go.Response[classifier.PeekListResponse], error)
	UpdateFileTemplate(context.Context, *connect_go.Request[classifier.UpdateFileTemplateRequest]) (*connect_go.Response[classifier.UpdateFileTemplateResponse], error)
	DeleteFileTemplate(context.Context, *connect_go.Request[classifier.DeleteFileTemplateRequest]) (*connect_go.Response[classifier.DeleteFileTemplateResponse], error)
	ListFileTemplates(context.Context, *connect_go.Request[classifier.ListFileTemplatesRequest]) (*connect_go.Response[classifier.ListFileTemplatesResponse], error)
	GetFileTemplate(context.Context, *connect_go.Request[classifier.GetFileTemplateRequest]) (*connect_go.Response[classifier.GetFileTemplateResponse], error)
}

// NewClassifierFileTemplatesClient constructs a client for the
// api.v1alpha1.classifier.ClassifierFileTemplates service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClassifierFileTemplatesClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ClassifierFileTemplatesClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &classifierFileTemplatesClient{
		parseFile: connect_go.NewClient[classifier.ParseFileRequest, classifier.ParseFileResponse](
			httpClient,
			baseURL+ClassifierFileTemplatesParseFileProcedure,
			opts...,
		),
		listEvents: connect_go.NewClient[classifier.ListEventsRequest, classifier.ListEventsResponse](
			httpClient,
			baseURL+ClassifierFileTemplatesListEventsProcedure,
			opts...,
		),
		peekList: connect_go.NewClient[classifier.PeekListRequest, classifier.PeekListResponse](
			httpClient,
			baseURL+ClassifierFileTemplatesPeekListProcedure,
			opts...,
		),
		updateFileTemplate: connect_go.NewClient[classifier.UpdateFileTemplateRequest, classifier.UpdateFileTemplateResponse](
			httpClient,
			baseURL+ClassifierFileTemplatesUpdateFileTemplateProcedure,
			opts...,
		),
		deleteFileTemplate: connect_go.NewClient[classifier.DeleteFileTemplateRequest, classifier.DeleteFileTemplateResponse](
			httpClient,
			baseURL+ClassifierFileTemplatesDeleteFileTemplateProcedure,
			opts...,
		),
		listFileTemplates: connect_go.NewClient[classifier.ListFileTemplatesRequest, classifier.ListFileTemplatesResponse](
			httpClient,
			baseURL+ClassifierFileTemplatesListFileTemplatesProcedure,
			opts...,
		),
		getFileTemplate: connect_go.NewClient[classifier.GetFileTemplateRequest, classifier.GetFileTemplateResponse](
			httpClient,
			baseURL+ClassifierFileTemplatesGetFileTemplateProcedure,
			opts...,
		),
	}
}

// classifierFileTemplatesClient implements ClassifierFileTemplatesClient.
type classifierFileTemplatesClient struct {
	parseFile          *connect_go.Client[classifier.ParseFileRequest, classifier.ParseFileResponse]
	listEvents         *connect_go.Client[classifier.ListEventsRequest, classifier.ListEventsResponse]
	peekList           *connect_go.Client[classifier.PeekListRequest, classifier.PeekListResponse]
	updateFileTemplate *connect_go.Client[classifier.UpdateFileTemplateRequest, classifier.UpdateFileTemplateResponse]
	deleteFileTemplate *connect_go.Client[classifier.DeleteFileTemplateRequest, classifier.DeleteFileTemplateResponse]
	listFileTemplates  *connect_go.Client[classifier.ListFileTemplatesRequest, classifier.ListFileTemplatesResponse]
	getFileTemplate    *connect_go.Client[classifier.GetFileTemplateRequest, classifier.GetFileTemplateResponse]
}

// ParseFile calls api.v1alpha1.classifier.ClassifierFileTemplates.ParseFile.
func (c *classifierFileTemplatesClient) ParseFile(ctx context.Context, req *connect_go.Request[classifier.ParseFileRequest]) (*connect_go.Response[classifier.ParseFileResponse], error) {
	return c.parseFile.CallUnary(ctx, req)
}

// ListEvents calls api.v1alpha1.classifier.ClassifierFileTemplates.ListEvents.
func (c *classifierFileTemplatesClient) ListEvents(ctx context.Context, req *connect_go.Request[classifier.ListEventsRequest]) (*connect_go.Response[classifier.ListEventsResponse], error) {
	return c.listEvents.CallUnary(ctx, req)
}

// PeekList calls api.v1alpha1.classifier.ClassifierFileTemplates.PeekList.
func (c *classifierFileTemplatesClient) PeekList(ctx context.Context, req *connect_go.Request[classifier.PeekListRequest]) (*connect_go.Response[classifier.PeekListResponse], error) {
	return c.peekList.CallUnary(ctx, req)
}

// UpdateFileTemplate calls api.v1alpha1.classifier.ClassifierFileTemplates.UpdateFileTemplate.
func (c *classifierFileTemplatesClient) UpdateFileTemplate(ctx context.Context, req *connect_go.Request[classifier.UpdateFileTemplateRequest]) (*connect_go.Response[classifier.UpdateFileTemplateResponse], error) {
	return c.updateFileTemplate.CallUnary(ctx, req)
}

// DeleteFileTemplate calls api.v1alpha1.classifier.ClassifierFileTemplates.DeleteFileTemplate.
func (c *classifierFileTemplatesClient) DeleteFileTemplate(ctx context.Context, req *connect_go.Request[classifier.DeleteFileTemplateRequest]) (*connect_go.Response[classifier.DeleteFileTemplateResponse], error) {
	return c.deleteFileTemplate.CallUnary(ctx, req)
}

// ListFileTemplates calls api.v1alpha1.classifier.ClassifierFileTemplates.ListFileTemplates.
func (c *classifierFileTemplatesClient) ListFileTemplates(ctx context.Context, req *connect_go.Request[classifier.ListFileTemplatesRequest]) (*connect_go.Response[classifier.ListFileTemplatesResponse], error) {
	return c.listFileTemplates.CallUnary(ctx, req)
}

// GetFileTemplate calls api.v1alpha1.classifier.ClassifierFileTemplates.GetFileTemplate.
func (c *classifierFileTemplatesClient) GetFileTemplate(ctx context.Context, req *connect_go.Request[classifier.GetFileTemplateRequest]) (*connect_go.Response[classifier.GetFileTemplateResponse], error) {
	return c.getFileTemplate.CallUnary(ctx, req)
}

// ClassifierFileTemplatesHandler is an implementation of the
// api.v1alpha1.classifier.ClassifierFileTemplates service.
type ClassifierFileTemplatesHandler interface {
	ParseFile(context.Context, *connect_go.Request[classifier.ParseFileRequest]) (*connect_go.Response[classifier.ParseFileResponse], error)
	ListEvents(context.Context, *connect_go.Request[classifier.ListEventsRequest]) (*connect_go.Response[classifier.ListEventsResponse], error)
	PeekList(context.Context, *connect_go.Request[classifier.PeekListRequest]) (*connect_go.Response[classifier.PeekListResponse], error)
	UpdateFileTemplate(context.Context, *connect_go.Request[classifier.UpdateFileTemplateRequest]) (*connect_go.Response[classifier.UpdateFileTemplateResponse], error)
	DeleteFileTemplate(context.Context, *connect_go.Request[classifier.DeleteFileTemplateRequest]) (*connect_go.Response[classifier.DeleteFileTemplateResponse], error)
	ListFileTemplates(context.Context, *connect_go.Request[classifier.ListFileTemplatesRequest]) (*connect_go.Response[classifier.ListFileTemplatesResponse], error)
	GetFileTemplate(context.Context, *connect_go.Request[classifier.GetFileTemplateRequest]) (*connect_go.Response[classifier.GetFileTemplateResponse], error)
}

// NewClassifierFileTemplatesHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClassifierFileTemplatesHandler(svc ClassifierFileTemplatesHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	classifierFileTemplatesParseFileHandler := connect_go.NewUnaryHandler(
		ClassifierFileTemplatesParseFileProcedure,
		svc.ParseFile,
		opts...,
	)
	classifierFileTemplatesListEventsHandler := connect_go.NewUnaryHandler(
		ClassifierFileTemplatesListEventsProcedure,
		svc.ListEvents,
		opts...,
	)
	classifierFileTemplatesPeekListHandler := connect_go.NewUnaryHandler(
		ClassifierFileTemplatesPeekListProcedure,
		svc.PeekList,
		opts...,
	)
	classifierFileTemplatesUpdateFileTemplateHandler := connect_go.NewUnaryHandler(
		ClassifierFileTemplatesUpdateFileTemplateProcedure,
		svc.UpdateFileTemplate,
		opts...,
	)
	classifierFileTemplatesDeleteFileTemplateHandler := connect_go.NewUnaryHandler(
		ClassifierFileTemplatesDeleteFileTemplateProcedure,
		svc.DeleteFileTemplate,
		opts...,
	)
	classifierFileTemplatesListFileTemplatesHandler := connect_go.NewUnaryHandler(
		ClassifierFileTemplatesListFileTemplatesProcedure,
		svc.ListFileTemplates,
		opts...,
	)
	classifierFileTemplatesGetFileTemplateHandler := connect_go.NewUnaryHandler(
		ClassifierFileTemplatesGetFileTemplateProcedure,
		svc.GetFileTemplate,
		opts...,
	)
	return "/api.v1alpha1.classifier.ClassifierFileTemplates/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ClassifierFileTemplatesParseFileProcedure:
			classifierFileTemplatesParseFileHandler.ServeHTTP(w, r)
		case ClassifierFileTemplatesListEventsProcedure:
			classifierFileTemplatesListEventsHandler.ServeHTTP(w, r)
		case ClassifierFileTemplatesPeekListProcedure:
			classifierFileTemplatesPeekListHandler.ServeHTTP(w, r)
		case ClassifierFileTemplatesUpdateFileTemplateProcedure:
			classifierFileTemplatesUpdateFileTemplateHandler.ServeHTTP(w, r)
		case ClassifierFileTemplatesDeleteFileTemplateProcedure:
			classifierFileTemplatesDeleteFileTemplateHandler.ServeHTTP(w, r)
		case ClassifierFileTemplatesListFileTemplatesProcedure:
			classifierFileTemplatesListFileTemplatesHandler.ServeHTTP(w, r)
		case ClassifierFileTemplatesGetFileTemplateProcedure:
			classifierFileTemplatesGetFileTemplateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedClassifierFileTemplatesHandler returns CodeUnimplemented from all methods.
type UnimplementedClassifierFileTemplatesHandler struct{}

func (UnimplementedClassifierFileTemplatesHandler) ParseFile(context.Context, *connect_go.Request[classifier.ParseFileRequest]) (*connect_go.Response[classifier.ParseFileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.classifier.ClassifierFileTemplates.ParseFile is not implemented"))
}

func (UnimplementedClassifierFileTemplatesHandler) ListEvents(context.Context, *connect_go.Request[classifier.ListEventsRequest]) (*connect_go.Response[classifier.ListEventsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.classifier.ClassifierFileTemplates.ListEvents is not implemented"))
}

func (UnimplementedClassifierFileTemplatesHandler) PeekList(context.Context, *connect_go.Request[classifier.PeekListRequest]) (*connect_go.Response[classifier.PeekListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.classifier.ClassifierFileTemplates.PeekList is not implemented"))
}

func (UnimplementedClassifierFileTemplatesHandler) UpdateFileTemplate(context.Context, *connect_go.Request[classifier.UpdateFileTemplateRequest]) (*connect_go.Response[classifier.UpdateFileTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.classifier.ClassifierFileTemplates.UpdateFileTemplate is not implemented"))
}

func (UnimplementedClassifierFileTemplatesHandler) DeleteFileTemplate(context.Context, *connect_go.Request[classifier.DeleteFileTemplateRequest]) (*connect_go.Response[classifier.DeleteFileTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.classifier.ClassifierFileTemplates.DeleteFileTemplate is not implemented"))
}

func (UnimplementedClassifierFileTemplatesHandler) ListFileTemplates(context.Context, *connect_go.Request[classifier.ListFileTemplatesRequest]) (*connect_go.Response[classifier.ListFileTemplatesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.classifier.ClassifierFileTemplates.ListFileTemplates is not implemented"))
}

func (UnimplementedClassifierFileTemplatesHandler) GetFileTemplate(context.Context, *connect_go.Request[classifier.GetFileTemplateRequest]) (*connect_go.Response[classifier.GetFileTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.classifier.ClassifierFileTemplates.GetFileTemplate is not implemented"))
}
