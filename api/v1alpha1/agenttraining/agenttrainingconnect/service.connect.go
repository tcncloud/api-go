// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1alpha1/agenttraining/service.proto

package agenttrainingconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	agenttraining "github.com/tcncloud/api-go/api/v1alpha1/agenttraining"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AgentTrainingServiceName is the fully-qualified name of the AgentTrainingService service.
	AgentTrainingServiceName = "api.v1alpha1.agenttraining.AgentTrainingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AgentTrainingServiceCreateLearningOpportunityProcedure is the fully-qualified name of the
	// AgentTrainingService's CreateLearningOpportunity RPC.
	AgentTrainingServiceCreateLearningOpportunityProcedure = "/api.v1alpha1.agenttraining.AgentTrainingService/CreateLearningOpportunity"
	// AgentTrainingServiceListLearningOpportunitiesProcedure is the fully-qualified name of the
	// AgentTrainingService's ListLearningOpportunities RPC.
	AgentTrainingServiceListLearningOpportunitiesProcedure = "/api.v1alpha1.agenttraining.AgentTrainingService/ListLearningOpportunities"
	// AgentTrainingServiceListAgentLearningOpportunitiesProcedure is the fully-qualified name of the
	// AgentTrainingService's ListAgentLearningOpportunities RPC.
	AgentTrainingServiceListAgentLearningOpportunitiesProcedure = "/api.v1alpha1.agenttraining.AgentTrainingService/ListAgentLearningOpportunities"
	// AgentTrainingServiceCompleteAgentLearningOpportunityProcedure is the fully-qualified name of the
	// AgentTrainingService's CompleteAgentLearningOpportunity RPC.
	AgentTrainingServiceCompleteAgentLearningOpportunityProcedure = "/api.v1alpha1.agenttraining.AgentTrainingService/CompleteAgentLearningOpportunity"
	// AgentTrainingServiceListDashboardsProcedure is the fully-qualified name of the
	// AgentTrainingService's ListDashboards RPC.
	AgentTrainingServiceListDashboardsProcedure = "/api.v1alpha1.agenttraining.AgentTrainingService/ListDashboards"
	// AgentTrainingServiceListManagerDashboardsProcedure is the fully-qualified name of the
	// AgentTrainingService's ListManagerDashboards RPC.
	AgentTrainingServiceListManagerDashboardsProcedure = "/api.v1alpha1.agenttraining.AgentTrainingService/ListManagerDashboards"
	// AgentTrainingServiceUpdateLearningOpportunityProcedure is the fully-qualified name of the
	// AgentTrainingService's UpdateLearningOpportunity RPC.
	AgentTrainingServiceUpdateLearningOpportunityProcedure = "/api.v1alpha1.agenttraining.AgentTrainingService/UpdateLearningOpportunity"
	// AgentTrainingServiceDeleteLearningOpportunityProcedure is the fully-qualified name of the
	// AgentTrainingService's DeleteLearningOpportunity RPC.
	AgentTrainingServiceDeleteLearningOpportunityProcedure = "/api.v1alpha1.agenttraining.AgentTrainingService/DeleteLearningOpportunity"
	// AgentTrainingServiceGetLearningOpportunityProcedure is the fully-qualified name of the
	// AgentTrainingService's GetLearningOpportunity RPC.
	AgentTrainingServiceGetLearningOpportunityProcedure = "/api.v1alpha1.agenttraining.AgentTrainingService/GetLearningOpportunity"
)

// AgentTrainingServiceClient is a client for the api.v1alpha1.agenttraining.AgentTrainingService
// service.
type AgentTrainingServiceClient interface {
	// CreateLearningOpportunity creates a new learning opportunity.
	CreateLearningOpportunity(context.Context, *connect_go.Request[agenttraining.CreateLearningOpportunityRequest]) (*connect_go.Response[agenttraining.CreateLearningOpportunityResponse], error)
	// ListLearningOpportunities lists learning opportunities.
	ListLearningOpportunities(context.Context, *connect_go.Request[agenttraining.ListLearningOpportunitiesRequest]) (*connect_go.Response[agenttraining.ListLearningOpportunitiesResponse], error)
	// ListAgentLearningOpportunities lists learning opportunities by agent.
	ListAgentLearningOpportunities(context.Context, *connect_go.Request[agenttraining.ListAgentLearningOpportunitiesRequest]) (*connect_go.Response[agenttraining.ListAgentLearningOpportunitiesResponse], error)
	// CompleteAgentLearningOpportunity completes an agent's learning opportunity.
	CompleteAgentLearningOpportunity(context.Context, *connect_go.Request[agenttraining.CompleteAgentLearningOpportunityRequest]) (*connect_go.Response[agenttraining.CompleteAgentLearningOpportunityResponse], error)
	// ListDashboards lists dashboards.
	ListDashboards(context.Context, *connect_go.Request[agenttraining.ListDashboardsRequest]) (*connect_go.Response[agenttraining.ListDashboardsResponse], error)
	// ListManagerDashboards lists manager dashboards.
	ListManagerDashboards(context.Context, *connect_go.Request[agenttraining.ListDashboardsRequest]) (*connect_go.Response[agenttraining.ListDashboardsResponse], error)
	// UpdateLearningOpportunity updates a learning opportunity.
	UpdateLearningOpportunity(context.Context, *connect_go.Request[agenttraining.UpdateLearningOpportunityRequest]) (*connect_go.Response[agenttraining.UpdateLearningOpportunityResponse], error)
	// DeleteLearningOpportunity deletes a learning opportunity.
	DeleteLearningOpportunity(context.Context, *connect_go.Request[agenttraining.DeleteLearningOpportunityRequest]) (*connect_go.Response[agenttraining.DeleteLearningOpportunityResponse], error)
	// GetLearningOpportunity gets a learning opportunity.
	GetLearningOpportunity(context.Context, *connect_go.Request[agenttraining.GetLearningOpportunityRequest]) (*connect_go.Response[agenttraining.GetLearningOpportunityResponse], error)
}

// NewAgentTrainingServiceClient constructs a client for the
// api.v1alpha1.agenttraining.AgentTrainingService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAgentTrainingServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AgentTrainingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &agentTrainingServiceClient{
		createLearningOpportunity: connect_go.NewClient[agenttraining.CreateLearningOpportunityRequest, agenttraining.CreateLearningOpportunityResponse](
			httpClient,
			baseURL+AgentTrainingServiceCreateLearningOpportunityProcedure,
			opts...,
		),
		listLearningOpportunities: connect_go.NewClient[agenttraining.ListLearningOpportunitiesRequest, agenttraining.ListLearningOpportunitiesResponse](
			httpClient,
			baseURL+AgentTrainingServiceListLearningOpportunitiesProcedure,
			opts...,
		),
		listAgentLearningOpportunities: connect_go.NewClient[agenttraining.ListAgentLearningOpportunitiesRequest, agenttraining.ListAgentLearningOpportunitiesResponse](
			httpClient,
			baseURL+AgentTrainingServiceListAgentLearningOpportunitiesProcedure,
			opts...,
		),
		completeAgentLearningOpportunity: connect_go.NewClient[agenttraining.CompleteAgentLearningOpportunityRequest, agenttraining.CompleteAgentLearningOpportunityResponse](
			httpClient,
			baseURL+AgentTrainingServiceCompleteAgentLearningOpportunityProcedure,
			opts...,
		),
		listDashboards: connect_go.NewClient[agenttraining.ListDashboardsRequest, agenttraining.ListDashboardsResponse](
			httpClient,
			baseURL+AgentTrainingServiceListDashboardsProcedure,
			opts...,
		),
		listManagerDashboards: connect_go.NewClient[agenttraining.ListDashboardsRequest, agenttraining.ListDashboardsResponse](
			httpClient,
			baseURL+AgentTrainingServiceListManagerDashboardsProcedure,
			opts...,
		),
		updateLearningOpportunity: connect_go.NewClient[agenttraining.UpdateLearningOpportunityRequest, agenttraining.UpdateLearningOpportunityResponse](
			httpClient,
			baseURL+AgentTrainingServiceUpdateLearningOpportunityProcedure,
			opts...,
		),
		deleteLearningOpportunity: connect_go.NewClient[agenttraining.DeleteLearningOpportunityRequest, agenttraining.DeleteLearningOpportunityResponse](
			httpClient,
			baseURL+AgentTrainingServiceDeleteLearningOpportunityProcedure,
			opts...,
		),
		getLearningOpportunity: connect_go.NewClient[agenttraining.GetLearningOpportunityRequest, agenttraining.GetLearningOpportunityResponse](
			httpClient,
			baseURL+AgentTrainingServiceGetLearningOpportunityProcedure,
			opts...,
		),
	}
}

// agentTrainingServiceClient implements AgentTrainingServiceClient.
type agentTrainingServiceClient struct {
	createLearningOpportunity        *connect_go.Client[agenttraining.CreateLearningOpportunityRequest, agenttraining.CreateLearningOpportunityResponse]
	listLearningOpportunities        *connect_go.Client[agenttraining.ListLearningOpportunitiesRequest, agenttraining.ListLearningOpportunitiesResponse]
	listAgentLearningOpportunities   *connect_go.Client[agenttraining.ListAgentLearningOpportunitiesRequest, agenttraining.ListAgentLearningOpportunitiesResponse]
	completeAgentLearningOpportunity *connect_go.Client[agenttraining.CompleteAgentLearningOpportunityRequest, agenttraining.CompleteAgentLearningOpportunityResponse]
	listDashboards                   *connect_go.Client[agenttraining.ListDashboardsRequest, agenttraining.ListDashboardsResponse]
	listManagerDashboards            *connect_go.Client[agenttraining.ListDashboardsRequest, agenttraining.ListDashboardsResponse]
	updateLearningOpportunity        *connect_go.Client[agenttraining.UpdateLearningOpportunityRequest, agenttraining.UpdateLearningOpportunityResponse]
	deleteLearningOpportunity        *connect_go.Client[agenttraining.DeleteLearningOpportunityRequest, agenttraining.DeleteLearningOpportunityResponse]
	getLearningOpportunity           *connect_go.Client[agenttraining.GetLearningOpportunityRequest, agenttraining.GetLearningOpportunityResponse]
}

// CreateLearningOpportunity calls
// api.v1alpha1.agenttraining.AgentTrainingService.CreateLearningOpportunity.
func (c *agentTrainingServiceClient) CreateLearningOpportunity(ctx context.Context, req *connect_go.Request[agenttraining.CreateLearningOpportunityRequest]) (*connect_go.Response[agenttraining.CreateLearningOpportunityResponse], error) {
	return c.createLearningOpportunity.CallUnary(ctx, req)
}

// ListLearningOpportunities calls
// api.v1alpha1.agenttraining.AgentTrainingService.ListLearningOpportunities.
func (c *agentTrainingServiceClient) ListLearningOpportunities(ctx context.Context, req *connect_go.Request[agenttraining.ListLearningOpportunitiesRequest]) (*connect_go.Response[agenttraining.ListLearningOpportunitiesResponse], error) {
	return c.listLearningOpportunities.CallUnary(ctx, req)
}

// ListAgentLearningOpportunities calls
// api.v1alpha1.agenttraining.AgentTrainingService.ListAgentLearningOpportunities.
func (c *agentTrainingServiceClient) ListAgentLearningOpportunities(ctx context.Context, req *connect_go.Request[agenttraining.ListAgentLearningOpportunitiesRequest]) (*connect_go.Response[agenttraining.ListAgentLearningOpportunitiesResponse], error) {
	return c.listAgentLearningOpportunities.CallUnary(ctx, req)
}

// CompleteAgentLearningOpportunity calls
// api.v1alpha1.agenttraining.AgentTrainingService.CompleteAgentLearningOpportunity.
func (c *agentTrainingServiceClient) CompleteAgentLearningOpportunity(ctx context.Context, req *connect_go.Request[agenttraining.CompleteAgentLearningOpportunityRequest]) (*connect_go.Response[agenttraining.CompleteAgentLearningOpportunityResponse], error) {
	return c.completeAgentLearningOpportunity.CallUnary(ctx, req)
}

// ListDashboards calls api.v1alpha1.agenttraining.AgentTrainingService.ListDashboards.
func (c *agentTrainingServiceClient) ListDashboards(ctx context.Context, req *connect_go.Request[agenttraining.ListDashboardsRequest]) (*connect_go.Response[agenttraining.ListDashboardsResponse], error) {
	return c.listDashboards.CallUnary(ctx, req)
}

// ListManagerDashboards calls
// api.v1alpha1.agenttraining.AgentTrainingService.ListManagerDashboards.
func (c *agentTrainingServiceClient) ListManagerDashboards(ctx context.Context, req *connect_go.Request[agenttraining.ListDashboardsRequest]) (*connect_go.Response[agenttraining.ListDashboardsResponse], error) {
	return c.listManagerDashboards.CallUnary(ctx, req)
}

// UpdateLearningOpportunity calls
// api.v1alpha1.agenttraining.AgentTrainingService.UpdateLearningOpportunity.
func (c *agentTrainingServiceClient) UpdateLearningOpportunity(ctx context.Context, req *connect_go.Request[agenttraining.UpdateLearningOpportunityRequest]) (*connect_go.Response[agenttraining.UpdateLearningOpportunityResponse], error) {
	return c.updateLearningOpportunity.CallUnary(ctx, req)
}

// DeleteLearningOpportunity calls
// api.v1alpha1.agenttraining.AgentTrainingService.DeleteLearningOpportunity.
func (c *agentTrainingServiceClient) DeleteLearningOpportunity(ctx context.Context, req *connect_go.Request[agenttraining.DeleteLearningOpportunityRequest]) (*connect_go.Response[agenttraining.DeleteLearningOpportunityResponse], error) {
	return c.deleteLearningOpportunity.CallUnary(ctx, req)
}

// GetLearningOpportunity calls
// api.v1alpha1.agenttraining.AgentTrainingService.GetLearningOpportunity.
func (c *agentTrainingServiceClient) GetLearningOpportunity(ctx context.Context, req *connect_go.Request[agenttraining.GetLearningOpportunityRequest]) (*connect_go.Response[agenttraining.GetLearningOpportunityResponse], error) {
	return c.getLearningOpportunity.CallUnary(ctx, req)
}

// AgentTrainingServiceHandler is an implementation of the
// api.v1alpha1.agenttraining.AgentTrainingService service.
type AgentTrainingServiceHandler interface {
	// CreateLearningOpportunity creates a new learning opportunity.
	CreateLearningOpportunity(context.Context, *connect_go.Request[agenttraining.CreateLearningOpportunityRequest]) (*connect_go.Response[agenttraining.CreateLearningOpportunityResponse], error)
	// ListLearningOpportunities lists learning opportunities.
	ListLearningOpportunities(context.Context, *connect_go.Request[agenttraining.ListLearningOpportunitiesRequest]) (*connect_go.Response[agenttraining.ListLearningOpportunitiesResponse], error)
	// ListAgentLearningOpportunities lists learning opportunities by agent.
	ListAgentLearningOpportunities(context.Context, *connect_go.Request[agenttraining.ListAgentLearningOpportunitiesRequest]) (*connect_go.Response[agenttraining.ListAgentLearningOpportunitiesResponse], error)
	// CompleteAgentLearningOpportunity completes an agent's learning opportunity.
	CompleteAgentLearningOpportunity(context.Context, *connect_go.Request[agenttraining.CompleteAgentLearningOpportunityRequest]) (*connect_go.Response[agenttraining.CompleteAgentLearningOpportunityResponse], error)
	// ListDashboards lists dashboards.
	ListDashboards(context.Context, *connect_go.Request[agenttraining.ListDashboardsRequest]) (*connect_go.Response[agenttraining.ListDashboardsResponse], error)
	// ListManagerDashboards lists manager dashboards.
	ListManagerDashboards(context.Context, *connect_go.Request[agenttraining.ListDashboardsRequest]) (*connect_go.Response[agenttraining.ListDashboardsResponse], error)
	// UpdateLearningOpportunity updates a learning opportunity.
	UpdateLearningOpportunity(context.Context, *connect_go.Request[agenttraining.UpdateLearningOpportunityRequest]) (*connect_go.Response[agenttraining.UpdateLearningOpportunityResponse], error)
	// DeleteLearningOpportunity deletes a learning opportunity.
	DeleteLearningOpportunity(context.Context, *connect_go.Request[agenttraining.DeleteLearningOpportunityRequest]) (*connect_go.Response[agenttraining.DeleteLearningOpportunityResponse], error)
	// GetLearningOpportunity gets a learning opportunity.
	GetLearningOpportunity(context.Context, *connect_go.Request[agenttraining.GetLearningOpportunityRequest]) (*connect_go.Response[agenttraining.GetLearningOpportunityResponse], error)
}

// NewAgentTrainingServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAgentTrainingServiceHandler(svc AgentTrainingServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	agentTrainingServiceCreateLearningOpportunityHandler := connect_go.NewUnaryHandler(
		AgentTrainingServiceCreateLearningOpportunityProcedure,
		svc.CreateLearningOpportunity,
		opts...,
	)
	agentTrainingServiceListLearningOpportunitiesHandler := connect_go.NewUnaryHandler(
		AgentTrainingServiceListLearningOpportunitiesProcedure,
		svc.ListLearningOpportunities,
		opts...,
	)
	agentTrainingServiceListAgentLearningOpportunitiesHandler := connect_go.NewUnaryHandler(
		AgentTrainingServiceListAgentLearningOpportunitiesProcedure,
		svc.ListAgentLearningOpportunities,
		opts...,
	)
	agentTrainingServiceCompleteAgentLearningOpportunityHandler := connect_go.NewUnaryHandler(
		AgentTrainingServiceCompleteAgentLearningOpportunityProcedure,
		svc.CompleteAgentLearningOpportunity,
		opts...,
	)
	agentTrainingServiceListDashboardsHandler := connect_go.NewUnaryHandler(
		AgentTrainingServiceListDashboardsProcedure,
		svc.ListDashboards,
		opts...,
	)
	agentTrainingServiceListManagerDashboardsHandler := connect_go.NewUnaryHandler(
		AgentTrainingServiceListManagerDashboardsProcedure,
		svc.ListManagerDashboards,
		opts...,
	)
	agentTrainingServiceUpdateLearningOpportunityHandler := connect_go.NewUnaryHandler(
		AgentTrainingServiceUpdateLearningOpportunityProcedure,
		svc.UpdateLearningOpportunity,
		opts...,
	)
	agentTrainingServiceDeleteLearningOpportunityHandler := connect_go.NewUnaryHandler(
		AgentTrainingServiceDeleteLearningOpportunityProcedure,
		svc.DeleteLearningOpportunity,
		opts...,
	)
	agentTrainingServiceGetLearningOpportunityHandler := connect_go.NewUnaryHandler(
		AgentTrainingServiceGetLearningOpportunityProcedure,
		svc.GetLearningOpportunity,
		opts...,
	)
	return "/api.v1alpha1.agenttraining.AgentTrainingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AgentTrainingServiceCreateLearningOpportunityProcedure:
			agentTrainingServiceCreateLearningOpportunityHandler.ServeHTTP(w, r)
		case AgentTrainingServiceListLearningOpportunitiesProcedure:
			agentTrainingServiceListLearningOpportunitiesHandler.ServeHTTP(w, r)
		case AgentTrainingServiceListAgentLearningOpportunitiesProcedure:
			agentTrainingServiceListAgentLearningOpportunitiesHandler.ServeHTTP(w, r)
		case AgentTrainingServiceCompleteAgentLearningOpportunityProcedure:
			agentTrainingServiceCompleteAgentLearningOpportunityHandler.ServeHTTP(w, r)
		case AgentTrainingServiceListDashboardsProcedure:
			agentTrainingServiceListDashboardsHandler.ServeHTTP(w, r)
		case AgentTrainingServiceListManagerDashboardsProcedure:
			agentTrainingServiceListManagerDashboardsHandler.ServeHTTP(w, r)
		case AgentTrainingServiceUpdateLearningOpportunityProcedure:
			agentTrainingServiceUpdateLearningOpportunityHandler.ServeHTTP(w, r)
		case AgentTrainingServiceDeleteLearningOpportunityProcedure:
			agentTrainingServiceDeleteLearningOpportunityHandler.ServeHTTP(w, r)
		case AgentTrainingServiceGetLearningOpportunityProcedure:
			agentTrainingServiceGetLearningOpportunityHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAgentTrainingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAgentTrainingServiceHandler struct{}

func (UnimplementedAgentTrainingServiceHandler) CreateLearningOpportunity(context.Context, *connect_go.Request[agenttraining.CreateLearningOpportunityRequest]) (*connect_go.Response[agenttraining.CreateLearningOpportunityResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.agenttraining.AgentTrainingService.CreateLearningOpportunity is not implemented"))
}

func (UnimplementedAgentTrainingServiceHandler) ListLearningOpportunities(context.Context, *connect_go.Request[agenttraining.ListLearningOpportunitiesRequest]) (*connect_go.Response[agenttraining.ListLearningOpportunitiesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.agenttraining.AgentTrainingService.ListLearningOpportunities is not implemented"))
}

func (UnimplementedAgentTrainingServiceHandler) ListAgentLearningOpportunities(context.Context, *connect_go.Request[agenttraining.ListAgentLearningOpportunitiesRequest]) (*connect_go.Response[agenttraining.ListAgentLearningOpportunitiesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.agenttraining.AgentTrainingService.ListAgentLearningOpportunities is not implemented"))
}

func (UnimplementedAgentTrainingServiceHandler) CompleteAgentLearningOpportunity(context.Context, *connect_go.Request[agenttraining.CompleteAgentLearningOpportunityRequest]) (*connect_go.Response[agenttraining.CompleteAgentLearningOpportunityResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.agenttraining.AgentTrainingService.CompleteAgentLearningOpportunity is not implemented"))
}

func (UnimplementedAgentTrainingServiceHandler) ListDashboards(context.Context, *connect_go.Request[agenttraining.ListDashboardsRequest]) (*connect_go.Response[agenttraining.ListDashboardsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.agenttraining.AgentTrainingService.ListDashboards is not implemented"))
}

func (UnimplementedAgentTrainingServiceHandler) ListManagerDashboards(context.Context, *connect_go.Request[agenttraining.ListDashboardsRequest]) (*connect_go.Response[agenttraining.ListDashboardsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.agenttraining.AgentTrainingService.ListManagerDashboards is not implemented"))
}

func (UnimplementedAgentTrainingServiceHandler) UpdateLearningOpportunity(context.Context, *connect_go.Request[agenttraining.UpdateLearningOpportunityRequest]) (*connect_go.Response[agenttraining.UpdateLearningOpportunityResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.agenttraining.AgentTrainingService.UpdateLearningOpportunity is not implemented"))
}

func (UnimplementedAgentTrainingServiceHandler) DeleteLearningOpportunity(context.Context, *connect_go.Request[agenttraining.DeleteLearningOpportunityRequest]) (*connect_go.Response[agenttraining.DeleteLearningOpportunityResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.agenttraining.AgentTrainingService.DeleteLearningOpportunity is not implemented"))
}

func (UnimplementedAgentTrainingServiceHandler) GetLearningOpportunity(context.Context, *connect_go.Request[agenttraining.GetLearningOpportunityRequest]) (*connect_go.Response[agenttraining.GetLearningOpportunityResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.agenttraining.AgentTrainingService.GetLearningOpportunity is not implemented"))
}
