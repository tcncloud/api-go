// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: api/v1alpha1/delivery/service.proto

package delivery

import (
	_ "github.com/tcncloud/api-go/annotations"
	commons "github.com/tcncloud/api-go/api/commons"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateTransferConfigReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *TransferConfig        `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTransferConfigReq) Reset() {
	*x = CreateTransferConfigReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransferConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransferConfigReq) ProtoMessage() {}

func (x *CreateTransferConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransferConfigReq.ProtoReflect.Descriptor instead.
func (*CreateTransferConfigReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateTransferConfigReq) GetEntity() *TransferConfig {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *CreateTransferConfigReq) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type CreateTransferConfigRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *ID                    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTransferConfigRes) Reset() {
	*x = CreateTransferConfigRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransferConfigRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransferConfigRes) ProtoMessage() {}

func (x *CreateTransferConfigRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransferConfigRes.ProtoReflect.Descriptor instead.
func (*CreateTransferConfigRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTransferConfigRes) GetEntity() *ID {
	if x != nil {
		return x.Entity
	}
	return nil
}

type ListTransferConfigsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *TransferConfig        `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	ListReq       *ListReq               `protobuf:"bytes,3,opt,name=list_req,json=listReq,proto3" json:"list_req,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTransferConfigsReq) Reset() {
	*x = ListTransferConfigsReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTransferConfigsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransferConfigsReq) ProtoMessage() {}

func (x *ListTransferConfigsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransferConfigsReq.ProtoReflect.Descriptor instead.
func (*ListTransferConfigsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListTransferConfigsReq) GetEntity() *TransferConfig {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *ListTransferConfigsReq) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

func (x *ListTransferConfigsReq) GetListReq() *ListReq {
	if x != nil {
		return x.ListReq
	}
	return nil
}

type ListTransferConfigsRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entities      []*TransferConfig      `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTransferConfigsRes) Reset() {
	*x = ListTransferConfigsRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTransferConfigsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransferConfigsRes) ProtoMessage() {}

func (x *ListTransferConfigsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransferConfigsRes.ProtoReflect.Descriptor instead.
func (*ListTransferConfigsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListTransferConfigsRes) GetEntities() []*TransferConfig {
	if x != nil {
		return x.Entities
	}
	return nil
}

type ListTransferConfigsByCredentialIDReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *TransferConfig        `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	CredentialSid *ID                    `protobuf:"bytes,3,opt,name=credential_sid,json=credentialSid,proto3" json:"credential_sid,omitempty"`
	ListReq       *ListReq               `protobuf:"bytes,4,opt,name=list_req,json=listReq,proto3" json:"list_req,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTransferConfigsByCredentialIDReq) Reset() {
	*x = ListTransferConfigsByCredentialIDReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTransferConfigsByCredentialIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransferConfigsByCredentialIDReq) ProtoMessage() {}

func (x *ListTransferConfigsByCredentialIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransferConfigsByCredentialIDReq.ProtoReflect.Descriptor instead.
func (*ListTransferConfigsByCredentialIDReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListTransferConfigsByCredentialIDReq) GetEntity() *TransferConfig {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *ListTransferConfigsByCredentialIDReq) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

func (x *ListTransferConfigsByCredentialIDReq) GetCredentialSid() *ID {
	if x != nil {
		return x.CredentialSid
	}
	return nil
}

func (x *ListTransferConfigsByCredentialIDReq) GetListReq() *ListReq {
	if x != nil {
		return x.ListReq
	}
	return nil
}

type ListTransferConfigsByCredentialIDRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entities      []*TransferConfig      `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTransferConfigsByCredentialIDRes) Reset() {
	*x = ListTransferConfigsByCredentialIDRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTransferConfigsByCredentialIDRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransferConfigsByCredentialIDRes) ProtoMessage() {}

func (x *ListTransferConfigsByCredentialIDRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransferConfigsByCredentialIDRes.ProtoReflect.Descriptor instead.
func (*ListTransferConfigsByCredentialIDRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListTransferConfigsByCredentialIDRes) GetEntities() []*TransferConfig {
	if x != nil {
		return x.Entities
	}
	return nil
}

type UpdateTransferConfigReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *TransferConfig        `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTransferConfigReq) Reset() {
	*x = UpdateTransferConfigReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTransferConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTransferConfigReq) ProtoMessage() {}

func (x *UpdateTransferConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTransferConfigReq.ProtoReflect.Descriptor instead.
func (*UpdateTransferConfigReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateTransferConfigReq) GetEntity() *TransferConfig {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *UpdateTransferConfigReq) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type UpdateTransferConfigRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *ID                    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTransferConfigRes) Reset() {
	*x = UpdateTransferConfigRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTransferConfigRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTransferConfigRes) ProtoMessage() {}

func (x *UpdateTransferConfigRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTransferConfigRes.ProtoReflect.Descriptor instead.
func (*UpdateTransferConfigRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateTransferConfigRes) GetEntity() *ID {
	if x != nil {
		return x.Entity
	}
	return nil
}

type DeleteTransferConfigReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *TransferConfig        `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTransferConfigReq) Reset() {
	*x = DeleteTransferConfigReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTransferConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTransferConfigReq) ProtoMessage() {}

func (x *DeleteTransferConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTransferConfigReq.ProtoReflect.Descriptor instead.
func (*DeleteTransferConfigReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteTransferConfigReq) GetEntity() *TransferConfig {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *DeleteTransferConfigReq) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type DeleteTransferConfigRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTransferConfigRes) Reset() {
	*x = DeleteTransferConfigRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTransferConfigRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTransferConfigRes) ProtoMessage() {}

func (x *DeleteTransferConfigRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTransferConfigRes.ProtoReflect.Descriptor instead.
func (*DeleteTransferConfigRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{9}
}

type GetTransferConfigReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *TransferConfig        `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransferConfigReq) Reset() {
	*x = GetTransferConfigReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransferConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransferConfigReq) ProtoMessage() {}

func (x *GetTransferConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransferConfigReq.ProtoReflect.Descriptor instead.
func (*GetTransferConfigReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetTransferConfigReq) GetEntity() *TransferConfig {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *GetTransferConfigReq) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type GetTransferConfigRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *TransferConfig        `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransferConfigRes) Reset() {
	*x = GetTransferConfigRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransferConfigRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransferConfigRes) ProtoMessage() {}

func (x *GetTransferConfigRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransferConfigRes.ProtoReflect.Descriptor instead.
func (*GetTransferConfigRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetTransferConfigRes) GetEntity() *TransferConfig {
	if x != nil {
		return x.Entity
	}
	return nil
}

type GetTransferConfigByNameReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in api/v1alpha1/delivery/service.proto.
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // obsolete dont use
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	Entity        *TransferConfig        `protobuf:"bytes,3,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransferConfigByNameReq) Reset() {
	*x = GetTransferConfigByNameReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransferConfigByNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransferConfigByNameReq) ProtoMessage() {}

func (x *GetTransferConfigByNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransferConfigByNameReq.ProtoReflect.Descriptor instead.
func (*GetTransferConfigByNameReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{12}
}

// Deprecated: Marked as deprecated in api/v1alpha1/delivery/service.proto.
func (x *GetTransferConfigByNameReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetTransferConfigByNameReq) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

func (x *GetTransferConfigByNameReq) GetEntity() *TransferConfig {
	if x != nil {
		return x.Entity
	}
	return nil
}

type GetTransferConfigByNameRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *TransferConfig        `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransferConfigByNameRes) Reset() {
	*x = GetTransferConfigByNameRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransferConfigByNameRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransferConfigByNameRes) ProtoMessage() {}

func (x *GetTransferConfigByNameRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransferConfigByNameRes.ProtoReflect.Descriptor instead.
func (*GetTransferConfigByNameRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetTransferConfigByNameRes) GetEntity() *TransferConfig {
	if x != nil {
		return x.Entity
	}
	return nil
}

type ListHistoryReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *History               `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	ListReq       *ListReq               `protobuf:"bytes,3,opt,name=list_req,json=listReq,proto3" json:"list_req,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListHistoryReq) Reset() {
	*x = ListHistoryReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHistoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHistoryReq) ProtoMessage() {}

func (x *ListHistoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHistoryReq.ProtoReflect.Descriptor instead.
func (*ListHistoryReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{14}
}

func (x *ListHistoryReq) GetEntity() *History {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *ListHistoryReq) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

func (x *ListHistoryReq) GetListReq() *ListReq {
	if x != nil {
		return x.ListReq
	}
	return nil
}

type ListHistoryRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entities      []*History             `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListHistoryRes) Reset() {
	*x = ListHistoryRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHistoryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHistoryRes) ProtoMessage() {}

func (x *ListHistoryRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHistoryRes.ProtoReflect.Descriptor instead.
func (*ListHistoryRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{15}
}

func (x *ListHistoryRes) GetEntities() []*History {
	if x != nil {
		return x.Entities
	}
	return nil
}

type ListHistoryByTransferConfigReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *ListByIDReq           `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListHistoryByTransferConfigReq) Reset() {
	*x = ListHistoryByTransferConfigReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHistoryByTransferConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHistoryByTransferConfigReq) ProtoMessage() {}

func (x *ListHistoryByTransferConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHistoryByTransferConfigReq.ProtoReflect.Descriptor instead.
func (*ListHistoryByTransferConfigReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{16}
}

func (x *ListHistoryByTransferConfigReq) GetEntity() *ListByIDReq {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *ListHistoryByTransferConfigReq) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type ListHistoryByTransferConfigRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entities      []*History             `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListHistoryByTransferConfigRes) Reset() {
	*x = ListHistoryByTransferConfigRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHistoryByTransferConfigRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHistoryByTransferConfigRes) ProtoMessage() {}

func (x *ListHistoryByTransferConfigRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHistoryByTransferConfigRes.ProtoReflect.Descriptor instead.
func (*ListHistoryByTransferConfigRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{17}
}

func (x *ListHistoryByTransferConfigRes) GetEntities() []*History {
	if x != nil {
		return x.Entities
	}
	return nil
}

type CreateHistoryReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *History               `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateHistoryReq) Reset() {
	*x = CreateHistoryReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateHistoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHistoryReq) ProtoMessage() {}

func (x *CreateHistoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHistoryReq.ProtoReflect.Descriptor instead.
func (*CreateHistoryReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{18}
}

func (x *CreateHistoryReq) GetEntity() *History {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *CreateHistoryReq) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type CreateHistoryRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *ID                    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateHistoryRes) Reset() {
	*x = CreateHistoryRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateHistoryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHistoryRes) ProtoMessage() {}

func (x *CreateHistoryRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHistoryRes.ProtoReflect.Descriptor instead.
func (*CreateHistoryRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{19}
}

func (x *CreateHistoryRes) GetEntity() *ID {
	if x != nil {
		return x.Entity
	}
	return nil
}

type GetHistoryReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *ID                    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHistoryReq) Reset() {
	*x = GetHistoryReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHistoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoryReq) ProtoMessage() {}

func (x *GetHistoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoryReq.ProtoReflect.Descriptor instead.
func (*GetHistoryReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{20}
}

func (x *GetHistoryReq) GetEntity() *ID {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *GetHistoryReq) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type GetHistoryRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *History               `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHistoryRes) Reset() {
	*x = GetHistoryRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHistoryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoryRes) ProtoMessage() {}

func (x *GetHistoryRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoryRes.ProtoReflect.Descriptor instead.
func (*GetHistoryRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{21}
}

func (x *GetHistoryRes) GetEntity() *History {
	if x != nil {
		return x.Entity
	}
	return nil
}

type CreateDeliveryDefinitionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Definition    *DeliveryDefinition    `protobuf:"bytes,1,opt,name=definition,proto3" json:"definition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDeliveryDefinitionReq) Reset() {
	*x = CreateDeliveryDefinitionReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeliveryDefinitionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeliveryDefinitionReq) ProtoMessage() {}

func (x *CreateDeliveryDefinitionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeliveryDefinitionReq.ProtoReflect.Descriptor instead.
func (*CreateDeliveryDefinitionReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{22}
}

func (x *CreateDeliveryDefinitionReq) GetDefinition() *DeliveryDefinition {
	if x != nil {
		return x.Definition
	}
	return nil
}

type CreateDeliveryDefinitionRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *ID                    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDeliveryDefinitionRes) Reset() {
	*x = CreateDeliveryDefinitionRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeliveryDefinitionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeliveryDefinitionRes) ProtoMessage() {}

func (x *CreateDeliveryDefinitionRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeliveryDefinitionRes.ProtoReflect.Descriptor instead.
func (*CreateDeliveryDefinitionRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{23}
}

func (x *CreateDeliveryDefinitionRes) GetEntity() *ID {
	if x != nil {
		return x.Entity
	}
	return nil
}

type DeleteDeliveryDefinitionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *ID                    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDeliveryDefinitionReq) Reset() {
	*x = DeleteDeliveryDefinitionReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDeliveryDefinitionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeliveryDefinitionReq) ProtoMessage() {}

func (x *DeleteDeliveryDefinitionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeliveryDefinitionReq.ProtoReflect.Descriptor instead.
func (*DeleteDeliveryDefinitionReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteDeliveryDefinitionReq) GetEntity() *ID {
	if x != nil {
		return x.Entity
	}
	return nil
}

type DeleteDeliveryDefinitionRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDeliveryDefinitionRes) Reset() {
	*x = DeleteDeliveryDefinitionRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDeliveryDefinitionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeliveryDefinitionRes) ProtoMessage() {}

func (x *DeleteDeliveryDefinitionRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeliveryDefinitionRes.ProtoReflect.Descriptor instead.
func (*DeleteDeliveryDefinitionRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{25}
}

type GetDeliveryDefinitionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *DeliveryDefinition    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDeliveryDefinitionReq) Reset() {
	*x = GetDeliveryDefinitionReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeliveryDefinitionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeliveryDefinitionReq) ProtoMessage() {}

func (x *GetDeliveryDefinitionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeliveryDefinitionReq.ProtoReflect.Descriptor instead.
func (*GetDeliveryDefinitionReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{26}
}

func (x *GetDeliveryDefinitionReq) GetEntity() *DeliveryDefinition {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *GetDeliveryDefinitionReq) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type GetDeliveryDefinitionRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *DeliveryDefinition    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDeliveryDefinitionRes) Reset() {
	*x = GetDeliveryDefinitionRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeliveryDefinitionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeliveryDefinitionRes) ProtoMessage() {}

func (x *GetDeliveryDefinitionRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeliveryDefinitionRes.ProtoReflect.Descriptor instead.
func (*GetDeliveryDefinitionRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{27}
}

func (x *GetDeliveryDefinitionRes) GetEntity() *DeliveryDefinition {
	if x != nil {
		return x.Entity
	}
	return nil
}

type GetDeliveryDefinitionByNameReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in api/v1alpha1/delivery/service.proto.
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // obsolete dont use
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	Entity        *DeliveryDefinition    `protobuf:"bytes,3,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDeliveryDefinitionByNameReq) Reset() {
	*x = GetDeliveryDefinitionByNameReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeliveryDefinitionByNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeliveryDefinitionByNameReq) ProtoMessage() {}

func (x *GetDeliveryDefinitionByNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeliveryDefinitionByNameReq.ProtoReflect.Descriptor instead.
func (*GetDeliveryDefinitionByNameReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{28}
}

// Deprecated: Marked as deprecated in api/v1alpha1/delivery/service.proto.
func (x *GetDeliveryDefinitionByNameReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDeliveryDefinitionByNameReq) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

func (x *GetDeliveryDefinitionByNameReq) GetEntity() *DeliveryDefinition {
	if x != nil {
		return x.Entity
	}
	return nil
}

type GetDeliveryDefinitionByNameRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *DeliveryDefinition    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDeliveryDefinitionByNameRes) Reset() {
	*x = GetDeliveryDefinitionByNameRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeliveryDefinitionByNameRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeliveryDefinitionByNameRes) ProtoMessage() {}

func (x *GetDeliveryDefinitionByNameRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeliveryDefinitionByNameRes.ProtoReflect.Descriptor instead.
func (*GetDeliveryDefinitionByNameRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{29}
}

func (x *GetDeliveryDefinitionByNameRes) GetEntity() *DeliveryDefinition {
	if x != nil {
		return x.Entity
	}
	return nil
}

type ListDeliveryDefinitionsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *DeliveryDefinition    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	ListReq       *ListReq               `protobuf:"bytes,3,opt,name=list_req,json=listReq,proto3" json:"list_req,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDeliveryDefinitionsReq) Reset() {
	*x = ListDeliveryDefinitionsReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDeliveryDefinitionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeliveryDefinitionsReq) ProtoMessage() {}

func (x *ListDeliveryDefinitionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeliveryDefinitionsReq.ProtoReflect.Descriptor instead.
func (*ListDeliveryDefinitionsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{30}
}

func (x *ListDeliveryDefinitionsReq) GetEntity() *DeliveryDefinition {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *ListDeliveryDefinitionsReq) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

func (x *ListDeliveryDefinitionsReq) GetListReq() *ListReq {
	if x != nil {
		return x.ListReq
	}
	return nil
}

type ListDeliveryDefinitionsRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entities      []*DeliveryDefinition  `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDeliveryDefinitionsRes) Reset() {
	*x = ListDeliveryDefinitionsRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDeliveryDefinitionsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeliveryDefinitionsRes) ProtoMessage() {}

func (x *ListDeliveryDefinitionsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeliveryDefinitionsRes.ProtoReflect.Descriptor instead.
func (*ListDeliveryDefinitionsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{31}
}

func (x *ListDeliveryDefinitionsRes) GetEntities() []*DeliveryDefinition {
	if x != nil {
		return x.Entities
	}
	return nil
}

type ListDeliveryDefinitionsByCredentialIDReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *DeliveryDefinition    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	CredentialSid *ID                    `protobuf:"bytes,3,opt,name=credential_sid,json=credentialSid,proto3" json:"credential_sid,omitempty"`
	ListReq       *ListReq               `protobuf:"bytes,4,opt,name=list_req,json=listReq,proto3" json:"list_req,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDeliveryDefinitionsByCredentialIDReq) Reset() {
	*x = ListDeliveryDefinitionsByCredentialIDReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDeliveryDefinitionsByCredentialIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeliveryDefinitionsByCredentialIDReq) ProtoMessage() {}

func (x *ListDeliveryDefinitionsByCredentialIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeliveryDefinitionsByCredentialIDReq.ProtoReflect.Descriptor instead.
func (*ListDeliveryDefinitionsByCredentialIDReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{32}
}

func (x *ListDeliveryDefinitionsByCredentialIDReq) GetEntity() *DeliveryDefinition {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *ListDeliveryDefinitionsByCredentialIDReq) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

func (x *ListDeliveryDefinitionsByCredentialIDReq) GetCredentialSid() *ID {
	if x != nil {
		return x.CredentialSid
	}
	return nil
}

func (x *ListDeliveryDefinitionsByCredentialIDReq) GetListReq() *ListReq {
	if x != nil {
		return x.ListReq
	}
	return nil
}

type ListDeliveryDefinitionsByCredentialIDRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entities      []*DeliveryDefinition  `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDeliveryDefinitionsByCredentialIDRes) Reset() {
	*x = ListDeliveryDefinitionsByCredentialIDRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDeliveryDefinitionsByCredentialIDRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeliveryDefinitionsByCredentialIDRes) ProtoMessage() {}

func (x *ListDeliveryDefinitionsByCredentialIDRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeliveryDefinitionsByCredentialIDRes.ProtoReflect.Descriptor instead.
func (*ListDeliveryDefinitionsByCredentialIDRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{33}
}

func (x *ListDeliveryDefinitionsByCredentialIDRes) GetEntities() []*DeliveryDefinition {
	if x != nil {
		return x.Entities
	}
	return nil
}

type UpdateDeliveryDefinitionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *DeliveryDefinition    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDeliveryDefinitionReq) Reset() {
	*x = UpdateDeliveryDefinitionReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDeliveryDefinitionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeliveryDefinitionReq) ProtoMessage() {}

func (x *UpdateDeliveryDefinitionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeliveryDefinitionReq.ProtoReflect.Descriptor instead.
func (*UpdateDeliveryDefinitionReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateDeliveryDefinitionReq) GetEntity() *DeliveryDefinition {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *UpdateDeliveryDefinitionReq) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type UpdateDeliveryDefinitionRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *ID                    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDeliveryDefinitionRes) Reset() {
	*x = UpdateDeliveryDefinitionRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDeliveryDefinitionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeliveryDefinitionRes) ProtoMessage() {}

func (x *UpdateDeliveryDefinitionRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeliveryDefinitionRes.ProtoReflect.Descriptor instead.
func (*UpdateDeliveryDefinitionRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{35}
}

func (x *UpdateDeliveryDefinitionRes) GetEntity() *ID {
	if x != nil {
		return x.Entity
	}
	return nil
}

type CreateEncryptionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Encryption    *Encryption            `protobuf:"bytes,1,opt,name=encryption,proto3" json:"encryption,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateEncryptionReq) Reset() {
	*x = CreateEncryptionReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEncryptionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEncryptionReq) ProtoMessage() {}

func (x *CreateEncryptionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEncryptionReq.ProtoReflect.Descriptor instead.
func (*CreateEncryptionReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{36}
}

func (x *CreateEncryptionReq) GetEncryption() *Encryption {
	if x != nil {
		return x.Encryption
	}
	return nil
}

type CreateEncryptionRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *ID                    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateEncryptionRes) Reset() {
	*x = CreateEncryptionRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEncryptionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEncryptionRes) ProtoMessage() {}

func (x *CreateEncryptionRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEncryptionRes.ProtoReflect.Descriptor instead.
func (*CreateEncryptionRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{37}
}

func (x *CreateEncryptionRes) GetEntity() *ID {
	if x != nil {
		return x.Entity
	}
	return nil
}

type DeleteEncryptionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *ID                    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteEncryptionReq) Reset() {
	*x = DeleteEncryptionReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteEncryptionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEncryptionReq) ProtoMessage() {}

func (x *DeleteEncryptionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEncryptionReq.ProtoReflect.Descriptor instead.
func (*DeleteEncryptionReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{38}
}

func (x *DeleteEncryptionReq) GetEntity() *ID {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *DeleteEncryptionReq) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type DeleteEncryptionRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteEncryptionRes) Reset() {
	*x = DeleteEncryptionRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteEncryptionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEncryptionRes) ProtoMessage() {}

func (x *DeleteEncryptionRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEncryptionRes.ProtoReflect.Descriptor instead.
func (*DeleteEncryptionRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{39}
}

type GetEncryptionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *Encryption            `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEncryptionReq) Reset() {
	*x = GetEncryptionReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEncryptionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEncryptionReq) ProtoMessage() {}

func (x *GetEncryptionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEncryptionReq.ProtoReflect.Descriptor instead.
func (*GetEncryptionReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{40}
}

func (x *GetEncryptionReq) GetEntity() *Encryption {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *GetEncryptionReq) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type GetEncryptionRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *Encryption            `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEncryptionRes) Reset() {
	*x = GetEncryptionRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEncryptionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEncryptionRes) ProtoMessage() {}

func (x *GetEncryptionRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEncryptionRes.ProtoReflect.Descriptor instead.
func (*GetEncryptionRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{41}
}

func (x *GetEncryptionRes) GetEntity() *Encryption {
	if x != nil {
		return x.Entity
	}
	return nil
}

type ListEncryptionsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *ListReq               `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListEncryptionsReq) Reset() {
	*x = ListEncryptionsReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEncryptionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEncryptionsReq) ProtoMessage() {}

func (x *ListEncryptionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEncryptionsReq.ProtoReflect.Descriptor instead.
func (*ListEncryptionsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{42}
}

func (x *ListEncryptionsReq) GetEntity() *ListReq {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *ListEncryptionsReq) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type ListEncryptionsRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entities      []*Encryption          `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListEncryptionsRes) Reset() {
	*x = ListEncryptionsRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEncryptionsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEncryptionsRes) ProtoMessage() {}

func (x *ListEncryptionsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEncryptionsRes.ProtoReflect.Descriptor instead.
func (*ListEncryptionsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{43}
}

func (x *ListEncryptionsRes) GetEntities() []*Encryption {
	if x != nil {
		return x.Entities
	}
	return nil
}

type UpdateEncryptionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *Encryption            `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateEncryptionReq) Reset() {
	*x = UpdateEncryptionReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEncryptionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEncryptionReq) ProtoMessage() {}

func (x *UpdateEncryptionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEncryptionReq.ProtoReflect.Descriptor instead.
func (*UpdateEncryptionReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{44}
}

func (x *UpdateEncryptionReq) GetEntity() *Encryption {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *UpdateEncryptionReq) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type UpdateEncryptionRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *ID                    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateEncryptionRes) Reset() {
	*x = UpdateEncryptionRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEncryptionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEncryptionRes) ProtoMessage() {}

func (x *UpdateEncryptionRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEncryptionRes.ProtoReflect.Descriptor instead.
func (*UpdateEncryptionRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{45}
}

func (x *UpdateEncryptionRes) GetEntity() *ID {
	if x != nil {
		return x.Entity
	}
	return nil
}

// entity types
type TransferConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// snowflake id
	Sid int64 `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty"`
	// the name of this config. Must be unique within the org
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// how many hours the files should live in cloud storage for
	// must always be > 0
	Ttl        int32       `protobuf:"varint,7,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Credential *Credential `protobuf:"bytes,8,opt,name=credential,proto3" json:"credential,omitempty"` // credential_sid stored on table
	// where we will put the payload if we are triggering a delivery
	Destination *Destination `protobuf:"bytes,9,opt,name=destination,proto3" json:"destination,omitempty"` // stored as jsonb
	// where we will get the payload if we are triggering a retrieval
	Source *Source `protobuf:"bytes,10,opt,name=source,proto3" json:"source,omitempty"` // stored as jsonb
	// when the config was last created/edited
	CreatedOn     *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	LastEdited    *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=last_edited,json=lastEdited,proto3" json:"last_edited,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransferConfig) Reset() {
	*x = TransferConfig{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferConfig) ProtoMessage() {}

func (x *TransferConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferConfig.ProtoReflect.Descriptor instead.
func (*TransferConfig) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{46}
}

func (x *TransferConfig) GetSid() int64 {
	if x != nil {
		return x.Sid
	}
	return 0
}

func (x *TransferConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TransferConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TransferConfig) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *TransferConfig) GetCredential() *Credential {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *TransferConfig) GetDestination() *Destination {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *TransferConfig) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *TransferConfig) GetCreatedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedOn
	}
	return nil
}

func (x *TransferConfig) GetLastEdited() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEdited
	}
	return nil
}

type ID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sid           int64                  `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ID) Reset() {
	*x = ID{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ID) ProtoMessage() {}

func (x *ID) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ID.ProtoReflect.Descriptor instead.
func (*ID) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{47}
}

func (x *ID) GetSid() int64 {
	if x != nil {
		return x.Sid
	}
	return 0
}

type ListReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// start listing records less than this sid
	BeforeSid int64 `protobuf:"varint,2,opt,name=before_sid,json=beforeSid,proto3" json:"before_sid,omitempty"`
	// max records to retrieve
	Limit         int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListReq) Reset() {
	*x = ListReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReq) ProtoMessage() {}

func (x *ListReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReq.ProtoReflect.Descriptor instead.
func (*ListReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{48}
}

func (x *ListReq) GetBeforeSid() int64 {
	if x != nil {
		return x.BeforeSid
	}
	return 0
}

func (x *ListReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type History struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Sid                int64                  `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty"`
	TransferConfigName string                 `protobuf:"bytes,3,opt,name=transfer_config_name,json=transferConfigName,proto3" json:"transfer_config_name,omitempty"`
	TransferConfigSid  int64                  `protobuf:"varint,4,opt,name=transfer_config_sid,json=transferConfigSid,proto3" json:"transfer_config_sid,omitempty"`
	// delivery or retrieval
	DeliveryType string `protobuf:"bytes,5,opt,name=delivery_type,json=deliveryType,proto3" json:"delivery_type,omitempty"`
	Error        string `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
	Success      bool   `protobuf:"varint,7,opt,name=success,proto3" json:"success,omitempty"`
	// when the transaction was first opened
	CreatedOn *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	// when upload of deps is finished and we started moving the files
	TransferStart *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=transfer_start,json=transferStart,proto3" json:"transfer_start,omitempty"`
	// when the record was inserted into the db (delivery ended)
	TransferComplete *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=transfer_complete,json=transferComplete,proto3" json:"transfer_complete,omitempty"`
	// the application calling for delivery
	Origin commons.OperatorApplications `protobuf:"varint,11,opt,name=origin,proto3,enum=api.commons.OperatorApplications" json:"origin,omitempty"`
	OrgId  string                       `protobuf:"bytes,12,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// this should only be the first 64 chars of the message_payload
	MessagePayload string `protobuf:"bytes,13,opt,name=message_payload,json=messagePayload,proto3" json:"message_payload,omitempty"`
	// this represents the full actual length of the message_payload from the frontend
	MessagePayloadLen int32 `protobuf:"varint,14,opt,name=message_payload_len,json=messagePayloadLen,proto3" json:"message_payload_len,omitempty"`
	// the status of the delivery
	Status         commons.TransferStatus `protobuf:"varint,15,opt,name=status,proto3,enum=api.commons.TransferStatus" json:"status,omitempty"`
	IsInbound      bool                   `protobuf:"varint,16,opt,name=is_inbound,json=isInbound,proto3" json:"is_inbound,omitempty"`
	TransactionSid int64                  `protobuf:"varint,17,opt,name=transaction_sid,json=transactionSid,proto3" json:"transaction_sid,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *History) Reset() {
	*x = History{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *History) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*History) ProtoMessage() {}

func (x *History) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use History.ProtoReflect.Descriptor instead.
func (*History) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{49}
}

func (x *History) GetSid() int64 {
	if x != nil {
		return x.Sid
	}
	return 0
}

func (x *History) GetTransferConfigName() string {
	if x != nil {
		return x.TransferConfigName
	}
	return ""
}

func (x *History) GetTransferConfigSid() int64 {
	if x != nil {
		return x.TransferConfigSid
	}
	return 0
}

func (x *History) GetDeliveryType() string {
	if x != nil {
		return x.DeliveryType
	}
	return ""
}

func (x *History) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *History) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *History) GetCreatedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedOn
	}
	return nil
}

func (x *History) GetTransferStart() *timestamppb.Timestamp {
	if x != nil {
		return x.TransferStart
	}
	return nil
}

func (x *History) GetTransferComplete() *timestamppb.Timestamp {
	if x != nil {
		return x.TransferComplete
	}
	return nil
}

func (x *History) GetOrigin() commons.OperatorApplications {
	if x != nil {
		return x.Origin
	}
	return commons.OperatorApplications(0)
}

func (x *History) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *History) GetMessagePayload() string {
	if x != nil {
		return x.MessagePayload
	}
	return ""
}

func (x *History) GetMessagePayloadLen() int32 {
	if x != nil {
		return x.MessagePayloadLen
	}
	return 0
}

func (x *History) GetStatus() commons.TransferStatus {
	if x != nil {
		return x.Status
	}
	return commons.TransferStatus(0)
}

func (x *History) GetIsInbound() bool {
	if x != nil {
		return x.IsInbound
	}
	return false
}

func (x *History) GetTransactionSid() int64 {
	if x != nil {
		return x.TransactionSid
	}
	return 0
}

type ListByIDReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// start listing records less than this sid
	BeforeSid int64 `protobuf:"varint,2,opt,name=before_sid,json=beforeSid,proto3" json:"before_sid,omitempty"`
	// max records to retrieve
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// the sid that is in the where clause
	OtherSid      int64 `protobuf:"varint,4,opt,name=other_sid,json=otherSid,proto3" json:"other_sid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListByIDReq) Reset() {
	*x = ListByIDReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListByIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListByIDReq) ProtoMessage() {}

func (x *ListByIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListByIDReq.ProtoReflect.Descriptor instead.
func (*ListByIDReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{50}
}

func (x *ListByIDReq) GetBeforeSid() int64 {
	if x != nil {
		return x.BeforeSid
	}
	return 0
}

func (x *ListByIDReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListByIDReq) GetOtherSid() int64 {
	if x != nil {
		return x.OtherSid
	}
	return 0
}

type Credential struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sid           int64                  `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Data          *CredentialData        `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"` // stored as jsonb
	CreatedOn     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	LastEdited    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=last_edited,json=lastEdited,proto3" json:"last_edited,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Credential) Reset() {
	*x = Credential{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Credential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential) ProtoMessage() {}

func (x *Credential) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential.ProtoReflect.Descriptor instead.
func (*Credential) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{51}
}

func (x *Credential) GetSid() int64 {
	if x != nil {
		return x.Sid
	}
	return 0
}

func (x *Credential) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Credential) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Credential) GetData() *CredentialData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Credential) GetCreatedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedOn
	}
	return nil
}

func (x *Credential) GetLastEdited() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEdited
	}
	return nil
}

type Destination struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Encryption *commons.Encryption    `protobuf:"bytes,1,opt,name=encryption,proto3" json:"encryption,omitempty"`
	// Types that are valid to be assigned to Value:
	//
	//	*Destination_Email
	//	*Destination_Room303
	//	*Destination_Sms
	//	*Destination_Sftp
	Value         isDestination_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Destination) Reset() {
	*x = Destination{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Destination) ProtoMessage() {}

func (x *Destination) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Destination.ProtoReflect.Descriptor instead.
func (*Destination) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{52}
}

func (x *Destination) GetEncryption() *commons.Encryption {
	if x != nil {
		return x.Encryption
	}
	return nil
}

func (x *Destination) GetValue() isDestination_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Destination) GetEmail() *EmailDestination {
	if x != nil {
		if x, ok := x.Value.(*Destination_Email); ok {
			return x.Email
		}
	}
	return nil
}

func (x *Destination) GetRoom303() *Room303Destination {
	if x != nil {
		if x, ok := x.Value.(*Destination_Room303); ok {
			return x.Room303
		}
	}
	return nil
}

func (x *Destination) GetSms() *SmsDestination {
	if x != nil {
		if x, ok := x.Value.(*Destination_Sms); ok {
			return x.Sms
		}
	}
	return nil
}

func (x *Destination) GetSftp() *SftpDestination {
	if x != nil {
		if x, ok := x.Value.(*Destination_Sftp); ok {
			return x.Sftp
		}
	}
	return nil
}

type isDestination_Value interface {
	isDestination_Value()
}

type Destination_Email struct {
	Email *EmailDestination `protobuf:"bytes,2,opt,name=email,proto3,oneof"`
}

type Destination_Room303 struct {
	Room303 *Room303Destination `protobuf:"bytes,3,opt,name=room303,proto3,oneof"`
}

type Destination_Sms struct {
	Sms *SmsDestination `protobuf:"bytes,4,opt,name=sms,proto3,oneof"`
}

type Destination_Sftp struct {
	Sftp *SftpDestination `protobuf:"bytes,5,opt,name=sftp,proto3,oneof"`
}

func (*Destination_Email) isDestination_Value() {}

func (*Destination_Room303) isDestination_Value() {}

func (*Destination_Sms) isDestination_Value() {}

func (*Destination_Sftp) isDestination_Value() {}

type SftpDestination struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// path that will be joined with the filename specified on the attachment.
	// this is optional.  If not provided the attachments must include the full filepath
	BaseDirectory string `protobuf:"bytes,2,opt,name=base_directory,json=baseDirectory,proto3" json:"base_directory,omitempty"`
	Address       string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Port          int32  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SftpDestination) Reset() {
	*x = SftpDestination{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SftpDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SftpDestination) ProtoMessage() {}

func (x *SftpDestination) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SftpDestination.ProtoReflect.Descriptor instead.
func (*SftpDestination) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{53}
}

func (x *SftpDestination) GetBaseDirectory() string {
	if x != nil {
		return x.BaseDirectory
	}
	return ""
}

func (x *SftpDestination) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SftpDestination) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type Room303Destination struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// which room or user to sned the file to
	Room string `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
	// will lookup user_sid through org if not provided
	// username of the intended user
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// user_id of the intended user
	UserId        string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Room303Destination) Reset() {
	*x = Room303Destination{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Room303Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Room303Destination) ProtoMessage() {}

func (x *Room303Destination) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Room303Destination.ProtoReflect.Descriptor instead.
func (*Room303Destination) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{54}
}

func (x *Room303Destination) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *Room303Destination) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Room303Destination) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type SmsDestination struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// must include country code and area code
	DestinationPhone string `protobuf:"bytes,1,opt,name=destination_phone,json=destinationPhone,proto3" json:"destination_phone,omitempty"`
	// the phone number we want this message to come from
	SourcePhone   string `protobuf:"bytes,2,opt,name=source_phone,json=sourcePhone,proto3" json:"source_phone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SmsDestination) Reset() {
	*x = SmsDestination{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmsDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsDestination) ProtoMessage() {}

func (x *SmsDestination) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsDestination.ProtoReflect.Descriptor instead.
func (*SmsDestination) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{55}
}

func (x *SmsDestination) GetDestinationPhone() string {
	if x != nil {
		return x.DestinationPhone
	}
	return ""
}

func (x *SmsDestination) GetSourcePhone() string {
	if x != nil {
		return x.SourcePhone
	}
	return ""
}

type EmailDestination struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// which email we are sending to
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/delivery/service.proto.
	ToAddr string `protobuf:"bytes,1,opt,name=to_addr,json=toAddr,proto3" json:"to_addr,omitempty"`
	// additional emails we are sending to
	CcAddrs []string `protobuf:"bytes,2,rep,name=cc_addrs,json=ccAddrs,proto3" json:"cc_addrs,omitempty"`
	// which email we want to show up as as from
	FromAddr      string   `protobuf:"bytes,3,opt,name=from_addr,json=fromAddr,proto3" json:"from_addr,omitempty"`
	ToAddrs       []string `protobuf:"bytes,4,rep,name=to_addrs,json=toAddrs,proto3" json:"to_addrs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmailDestination) Reset() {
	*x = EmailDestination{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmailDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailDestination) ProtoMessage() {}

func (x *EmailDestination) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailDestination.ProtoReflect.Descriptor instead.
func (*EmailDestination) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{56}
}

// Deprecated: Marked as deprecated in api/v1alpha1/delivery/service.proto.
func (x *EmailDestination) GetToAddr() string {
	if x != nil {
		return x.ToAddr
	}
	return ""
}

func (x *EmailDestination) GetCcAddrs() []string {
	if x != nil {
		return x.CcAddrs
	}
	return nil
}

func (x *EmailDestination) GetFromAddr() string {
	if x != nil {
		return x.FromAddr
	}
	return ""
}

func (x *EmailDestination) GetToAddrs() []string {
	if x != nil {
		return x.ToAddrs
	}
	return nil
}

type CredentialData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Data:
	//
	//	*CredentialData_UserPassword
	//	*CredentialData_Password
	//	*CredentialData_SshKeyPair
	//	*CredentialData_PgpKeyPair
	//	*CredentialData_AesPassword
	Data          isCredentialData_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CredentialData) Reset() {
	*x = CredentialData{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CredentialData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialData) ProtoMessage() {}

func (x *CredentialData) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialData.ProtoReflect.Descriptor instead.
func (*CredentialData) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{57}
}

func (x *CredentialData) GetData() isCredentialData_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CredentialData) GetUserPassword() *UserPassword {
	if x != nil {
		if x, ok := x.Data.(*CredentialData_UserPassword); ok {
			return x.UserPassword
		}
	}
	return nil
}

func (x *CredentialData) GetPassword() *Password {
	if x != nil {
		if x, ok := x.Data.(*CredentialData_Password); ok {
			return x.Password
		}
	}
	return nil
}

func (x *CredentialData) GetSshKeyPair() *SSHKeyPair {
	if x != nil {
		if x, ok := x.Data.(*CredentialData_SshKeyPair); ok {
			return x.SshKeyPair
		}
	}
	return nil
}

func (x *CredentialData) GetPgpKeyPair() *PGPKeyPair {
	if x != nil {
		if x, ok := x.Data.(*CredentialData_PgpKeyPair); ok {
			return x.PgpKeyPair
		}
	}
	return nil
}

func (x *CredentialData) GetAesPassword() *AESPassword {
	if x != nil {
		if x, ok := x.Data.(*CredentialData_AesPassword); ok {
			return x.AesPassword
		}
	}
	return nil
}

type isCredentialData_Data interface {
	isCredentialData_Data()
}

type CredentialData_UserPassword struct {
	UserPassword *UserPassword `protobuf:"bytes,1,opt,name=user_password,json=userPassword,proto3,oneof"`
}

type CredentialData_Password struct {
	Password *Password `protobuf:"bytes,2,opt,name=password,proto3,oneof"`
}

type CredentialData_SshKeyPair struct {
	SshKeyPair *SSHKeyPair `protobuf:"bytes,3,opt,name=ssh_key_pair,json=sshKeyPair,proto3,oneof"`
}

type CredentialData_PgpKeyPair struct {
	PgpKeyPair *PGPKeyPair `protobuf:"bytes,4,opt,name=pgp_key_pair,json=pgpKeyPair,proto3,oneof"`
}

type CredentialData_AesPassword struct {
	AesPassword *AESPassword `protobuf:"bytes,5,opt,name=aes_password,json=aesPassword,proto3,oneof"`
}

func (*CredentialData_UserPassword) isCredentialData_Data() {}

func (*CredentialData_Password) isCredentialData_Data() {}

func (*CredentialData_SshKeyPair) isCredentialData_Data() {}

func (*CredentialData_PgpKeyPair) isCredentialData_Data() {}

func (*CredentialData_AesPassword) isCredentialData_Data() {}

type UserPassword struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserPassword) Reset() {
	*x = UserPassword{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPassword) ProtoMessage() {}

func (x *UserPassword) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPassword.ProtoReflect.Descriptor instead.
func (*UserPassword) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{58}
}

func (x *UserPassword) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserPassword) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type Password struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Password      string                 `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Password) Reset() {
	*x = Password{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Password) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Password) ProtoMessage() {}

func (x *Password) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Password.ProtoReflect.Descriptor instead.
func (*Password) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{59}
}

func (x *Password) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type SSHKeyPair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PublicKey     string                 `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PrivateKey    string                 `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSHKeyPair) Reset() {
	*x = SSHKeyPair{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSHKeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSHKeyPair) ProtoMessage() {}

func (x *SSHKeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSHKeyPair.ProtoReflect.Descriptor instead.
func (*SSHKeyPair) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{60}
}

func (x *SSHKeyPair) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *SSHKeyPair) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

type PGPKeyPair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PublicKey     string                 `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PrivateKey    string                 `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PGPKeyPair) Reset() {
	*x = PGPKeyPair{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PGPKeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PGPKeyPair) ProtoMessage() {}

func (x *PGPKeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PGPKeyPair.ProtoReflect.Descriptor instead.
func (*PGPKeyPair) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{61}
}

func (x *PGPKeyPair) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *PGPKeyPair) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

type AESPassword struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Password      string                 `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AESPassword) Reset() {
	*x = AESPassword{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AESPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AESPassword) ProtoMessage() {}

func (x *AESPassword) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AESPassword.ProtoReflect.Descriptor instead.
func (*AESPassword) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{62}
}

func (x *AESPassword) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type Source struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Encryption *commons.Encryption    `protobuf:"bytes,1,opt,name=encryption,proto3" json:"encryption,omitempty"`
	// Types that are valid to be assigned to Value:
	//
	//	*Source_Sftp
	Value         isSource_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Source) Reset() {
	*x = Source{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{63}
}

func (x *Source) GetEncryption() *commons.Encryption {
	if x != nil {
		return x.Encryption
	}
	return nil
}

func (x *Source) GetValue() isSource_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Source) GetSftp() *SftpSource {
	if x != nil {
		if x, ok := x.Value.(*Source_Sftp); ok {
			return x.Sftp
		}
	}
	return nil
}

type isSource_Value interface {
	isSource_Value()
}

type Source_Sftp struct {
	Sftp *SftpSource `protobuf:"bytes,2,opt,name=sftp,proto3,oneof"`
}

func (*Source_Sftp) isSource_Value() {}

type SftpSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// directory files should be in
	Directory     string `protobuf:"bytes,2,opt,name=directory,proto3" json:"directory,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SftpSource) Reset() {
	*x = SftpSource{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SftpSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SftpSource) ProtoMessage() {}

func (x *SftpSource) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SftpSource.ProtoReflect.Descriptor instead.
func (*SftpSource) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{64}
}

func (x *SftpSource) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

type GetCredentialReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *Credential            `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCredentialReq) Reset() {
	*x = GetCredentialReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCredentialReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCredentialReq) ProtoMessage() {}

func (x *GetCredentialReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCredentialReq.ProtoReflect.Descriptor instead.
func (*GetCredentialReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{65}
}

func (x *GetCredentialReq) GetEntity() *Credential {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *GetCredentialReq) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type GetCredentialRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Credential    *Credential            `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCredentialRes) Reset() {
	*x = GetCredentialRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCredentialRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCredentialRes) ProtoMessage() {}

func (x *GetCredentialRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCredentialRes.ProtoReflect.Descriptor instead.
func (*GetCredentialRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{66}
}

func (x *GetCredentialRes) GetCredential() *Credential {
	if x != nil {
		return x.Credential
	}
	return nil
}

type ListCredentialsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *ListReq               `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCredentialsReq) Reset() {
	*x = ListCredentialsReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCredentialsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCredentialsReq) ProtoMessage() {}

func (x *ListCredentialsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCredentialsReq.ProtoReflect.Descriptor instead.
func (*ListCredentialsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{67}
}

func (x *ListCredentialsReq) GetEntity() *ListReq {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *ListCredentialsReq) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type ListCredentialsRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Credentials   *Credentials           `protobuf:"bytes,1,opt,name=credentials,proto3" json:"credentials,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCredentialsRes) Reset() {
	*x = ListCredentialsRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCredentialsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCredentialsRes) ProtoMessage() {}

func (x *ListCredentialsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCredentialsRes.ProtoReflect.Descriptor instead.
func (*ListCredentialsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{68}
}

func (x *ListCredentialsRes) GetCredentials() *Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type CreateCredentialReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *Credential            `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCredentialReq) Reset() {
	*x = CreateCredentialReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCredentialReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCredentialReq) ProtoMessage() {}

func (x *CreateCredentialReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCredentialReq.ProtoReflect.Descriptor instead.
func (*CreateCredentialReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{69}
}

func (x *CreateCredentialReq) GetEntity() *Credential {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *CreateCredentialReq) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type CreateCredentialRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *ID                    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCredentialRes) Reset() {
	*x = CreateCredentialRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCredentialRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCredentialRes) ProtoMessage() {}

func (x *CreateCredentialRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCredentialRes.ProtoReflect.Descriptor instead.
func (*CreateCredentialRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{70}
}

func (x *CreateCredentialRes) GetEntity() *ID {
	if x != nil {
		return x.Entity
	}
	return nil
}

type DeleteCredentialReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *ID                    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCredentialReq) Reset() {
	*x = DeleteCredentialReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCredentialReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCredentialReq) ProtoMessage() {}

func (x *DeleteCredentialReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCredentialReq.ProtoReflect.Descriptor instead.
func (*DeleteCredentialReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{71}
}

func (x *DeleteCredentialReq) GetEntity() *ID {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *DeleteCredentialReq) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type DeleteCredentialRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCredentialRes) Reset() {
	*x = DeleteCredentialRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCredentialRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCredentialRes) ProtoMessage() {}

func (x *DeleteCredentialRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCredentialRes.ProtoReflect.Descriptor instead.
func (*DeleteCredentialRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{72}
}

type UpdateCredentialReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *Credential            `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCredentialReq) Reset() {
	*x = UpdateCredentialReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCredentialReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCredentialReq) ProtoMessage() {}

func (x *UpdateCredentialReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCredentialReq.ProtoReflect.Descriptor instead.
func (*UpdateCredentialReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{73}
}

func (x *UpdateCredentialReq) GetEntity() *Credential {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *UpdateCredentialReq) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type UpdateCredentialRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *ID                    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCredentialRes) Reset() {
	*x = UpdateCredentialRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCredentialRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCredentialRes) ProtoMessage() {}

func (x *UpdateCredentialRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCredentialRes.ProtoReflect.Descriptor instead.
func (*UpdateCredentialRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{74}
}

func (x *UpdateCredentialRes) GetEntity() *ID {
	if x != nil {
		return x.Entity
	}
	return nil
}

type Credentials struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entities      []*Credential          `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{75}
}

func (x *Credentials) GetEntities() []*Credential {
	if x != nil {
		return x.Entities
	}
	return nil
}

// replaces TransferConfig
type DeliveryDefinition struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	DeliveryDefinitionSid int64                  `protobuf:"varint,1,opt,name=delivery_definition_sid,json=deliveryDefinitionSid,proto3" json:"delivery_definition_sid,omitempty"`
	OrgId                 string                 `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// the name of the definition. Must be unique within the org
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// how many hours the files should live in cloud storage for
	// must always be > 0
	Ttl int32 `protobuf:"varint,8,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// Types that are valid to be assigned to Transport:
	//
	//	*DeliveryDefinition_Sftp
	//	*DeliveryDefinition_Email
	//	*DeliveryDefinition_Room303
	//	*DeliveryDefinition_Sms
	Transport isDeliveryDefinition_Transport `protobuf_oneof:"transport"`
	// Types that are valid to be assigned to Encryption:
	//
	//	*DeliveryDefinition_Aes
	//	*DeliveryDefinition_Pgp
	Encryption    isDeliveryDefinition_Encryption `protobuf_oneof:"encryption"`
	CreatedOn     *timestamppb.Timestamp          `protobuf:"bytes,15,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	LastEdited    *timestamppb.Timestamp          `protobuf:"bytes,16,opt,name=last_edited,json=lastEdited,proto3" json:"last_edited,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeliveryDefinition) Reset() {
	*x = DeliveryDefinition{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeliveryDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryDefinition) ProtoMessage() {}

func (x *DeliveryDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryDefinition.ProtoReflect.Descriptor instead.
func (*DeliveryDefinition) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{76}
}

func (x *DeliveryDefinition) GetDeliveryDefinitionSid() int64 {
	if x != nil {
		return x.DeliveryDefinitionSid
	}
	return 0
}

func (x *DeliveryDefinition) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *DeliveryDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeliveryDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DeliveryDefinition) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *DeliveryDefinition) GetTransport() isDeliveryDefinition_Transport {
	if x != nil {
		return x.Transport
	}
	return nil
}

func (x *DeliveryDefinition) GetSftp() *SFTPTransport {
	if x != nil {
		if x, ok := x.Transport.(*DeliveryDefinition_Sftp); ok {
			return x.Sftp
		}
	}
	return nil
}

func (x *DeliveryDefinition) GetEmail() *EmailTransport {
	if x != nil {
		if x, ok := x.Transport.(*DeliveryDefinition_Email); ok {
			return x.Email
		}
	}
	return nil
}

func (x *DeliveryDefinition) GetRoom303() *Room303Transport {
	if x != nil {
		if x, ok := x.Transport.(*DeliveryDefinition_Room303); ok {
			return x.Room303
		}
	}
	return nil
}

func (x *DeliveryDefinition) GetSms() *SMSTransport {
	if x != nil {
		if x, ok := x.Transport.(*DeliveryDefinition_Sms); ok {
			return x.Sms
		}
	}
	return nil
}

func (x *DeliveryDefinition) GetEncryption() isDeliveryDefinition_Encryption {
	if x != nil {
		return x.Encryption
	}
	return nil
}

func (x *DeliveryDefinition) GetAes() *AESEncryptionRef {
	if x != nil {
		if x, ok := x.Encryption.(*DeliveryDefinition_Aes); ok {
			return x.Aes
		}
	}
	return nil
}

func (x *DeliveryDefinition) GetPgp() *PGPEncryptionRef {
	if x != nil {
		if x, ok := x.Encryption.(*DeliveryDefinition_Pgp); ok {
			return x.Pgp
		}
	}
	return nil
}

func (x *DeliveryDefinition) GetCreatedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedOn
	}
	return nil
}

func (x *DeliveryDefinition) GetLastEdited() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEdited
	}
	return nil
}

type isDeliveryDefinition_Transport interface {
	isDeliveryDefinition_Transport()
}

type DeliveryDefinition_Sftp struct {
	Sftp *SFTPTransport `protobuf:"bytes,9,opt,name=sftp,proto3,oneof"`
}

type DeliveryDefinition_Email struct {
	Email *EmailTransport `protobuf:"bytes,10,opt,name=email,proto3,oneof"`
}

type DeliveryDefinition_Room303 struct {
	Room303 *Room303Transport `protobuf:"bytes,11,opt,name=room303,proto3,oneof"`
}

type DeliveryDefinition_Sms struct {
	Sms *SMSTransport `protobuf:"bytes,12,opt,name=sms,proto3,oneof"`
}

func (*DeliveryDefinition_Sftp) isDeliveryDefinition_Transport() {}

func (*DeliveryDefinition_Email) isDeliveryDefinition_Transport() {}

func (*DeliveryDefinition_Room303) isDeliveryDefinition_Transport() {}

func (*DeliveryDefinition_Sms) isDeliveryDefinition_Transport() {}

type isDeliveryDefinition_Encryption interface {
	isDeliveryDefinition_Encryption()
}

type DeliveryDefinition_Aes struct {
	Aes *AESEncryptionRef `protobuf:"bytes,13,opt,name=aes,proto3,oneof"`
}

type DeliveryDefinition_Pgp struct {
	Pgp *PGPEncryptionRef `protobuf:"bytes,14,opt,name=pgp,proto3,oneof"`
}

func (*DeliveryDefinition_Aes) isDeliveryDefinition_Encryption() {}

func (*DeliveryDefinition_Pgp) isDeliveryDefinition_Encryption() {}

type SFTPTransport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Host  string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Deprecated: Marked as deprecated in api/v1alpha1/delivery/service.proto.
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Types that are valid to be assigned to Credentials:
	//
	//	*SFTPTransport_Password
	//	*SFTPTransport_SshKey
	Credentials   isSFTPTransport_Credentials `protobuf_oneof:"credentials"`
	Username      string                      `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	BaseDir       string                      `protobuf:"bytes,6,opt,name=base_dir,json=baseDir,proto3" json:"base_dir,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SFTPTransport) Reset() {
	*x = SFTPTransport{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SFTPTransport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SFTPTransport) ProtoMessage() {}

func (x *SFTPTransport) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SFTPTransport.ProtoReflect.Descriptor instead.
func (*SFTPTransport) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{77}
}

func (x *SFTPTransport) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

// Deprecated: Marked as deprecated in api/v1alpha1/delivery/service.proto.
func (x *SFTPTransport) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SFTPTransport) GetCredentials() isSFTPTransport_Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *SFTPTransport) GetPassword() *PasswordRef {
	if x != nil {
		if x, ok := x.Credentials.(*SFTPTransport_Password); ok {
			return x.Password
		}
	}
	return nil
}

func (x *SFTPTransport) GetSshKey() *SSHKeyRef {
	if x != nil {
		if x, ok := x.Credentials.(*SFTPTransport_SshKey); ok {
			return x.SshKey
		}
	}
	return nil
}

func (x *SFTPTransport) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SFTPTransport) GetBaseDir() string {
	if x != nil {
		return x.BaseDir
	}
	return ""
}

type isSFTPTransport_Credentials interface {
	isSFTPTransport_Credentials()
}

type SFTPTransport_Password struct {
	Password *PasswordRef `protobuf:"bytes,3,opt,name=password,proto3,oneof"`
}

type SFTPTransport_SshKey struct {
	SshKey *SSHKeyRef `protobuf:"bytes,4,opt,name=ssh_key,json=sshKey,proto3,oneof"`
}

func (*SFTPTransport_Password) isSFTPTransport_Credentials() {}

func (*SFTPTransport_SshKey) isSFTPTransport_Credentials() {}

type EmailTransport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// which email we want to show up as as from
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/delivery/service.proto.
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// which email we are sending to
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/delivery/service.proto.
	ToAddress string `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// additional emails we are sending to
	CcAddresses   []string `protobuf:"bytes,3,rep,name=cc_addresses,json=ccAddresses,proto3" json:"cc_addresses,omitempty"`
	ToAddresses   []string `protobuf:"bytes,4,rep,name=to_addresses,json=toAddresses,proto3" json:"to_addresses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmailTransport) Reset() {
	*x = EmailTransport{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmailTransport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailTransport) ProtoMessage() {}

func (x *EmailTransport) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailTransport.ProtoReflect.Descriptor instead.
func (*EmailTransport) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{78}
}

// Deprecated: Marked as deprecated in api/v1alpha1/delivery/service.proto.
func (x *EmailTransport) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

// Deprecated: Marked as deprecated in api/v1alpha1/delivery/service.proto.
func (x *EmailTransport) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *EmailTransport) GetCcAddresses() []string {
	if x != nil {
		return x.CcAddresses
	}
	return nil
}

func (x *EmailTransport) GetToAddresses() []string {
	if x != nil {
		return x.ToAddresses
	}
	return nil
}

type Room303Transport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Transport:
	//
	//	*Room303Transport_SystemMessage
	//	*Room303Transport_SystemMessages
	Transport     isRoom303Transport_Transport `protobuf_oneof:"transport"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Room303Transport) Reset() {
	*x = Room303Transport{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Room303Transport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Room303Transport) ProtoMessage() {}

func (x *Room303Transport) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Room303Transport.ProtoReflect.Descriptor instead.
func (*Room303Transport) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{79}
}

func (x *Room303Transport) GetTransport() isRoom303Transport_Transport {
	if x != nil {
		return x.Transport
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/delivery/service.proto.
func (x *Room303Transport) GetSystemMessage() *Room303SystemMessage {
	if x != nil {
		if x, ok := x.Transport.(*Room303Transport_SystemMessage); ok {
			return x.SystemMessage
		}
	}
	return nil
}

func (x *Room303Transport) GetSystemMessages() *Room303SystemMessages {
	if x != nil {
		if x, ok := x.Transport.(*Room303Transport_SystemMessages); ok {
			return x.SystemMessages
		}
	}
	return nil
}

type isRoom303Transport_Transport interface {
	isRoom303Transport_Transport()
}

type Room303Transport_SystemMessage struct {
	// this way we can use different types of room303 deliveries
	// in the future, support different api calls,
	// maybe support multiple groups etc
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/delivery/service.proto.
	SystemMessage *Room303SystemMessage `protobuf:"bytes,1,opt,name=system_message,json=systemMessage,proto3,oneof"`
}

type Room303Transport_SystemMessages struct {
	SystemMessages *Room303SystemMessages `protobuf:"bytes,2,opt,name=system_messages,json=systemMessages,proto3,oneof"`
}

func (*Room303Transport_SystemMessage) isRoom303Transport_Transport() {}

func (*Room303Transport_SystemMessages) isRoom303Transport_Transport() {}

type Room303SystemMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// which room or user to sned the file to
	Room string `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
	// Types that are valid to be assigned to User:
	//
	//	*Room303SystemMessage_Username
	//	*Room303SystemMessage_UserId
	User          isRoom303SystemMessage_User `protobuf_oneof:"user"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Room303SystemMessage) Reset() {
	*x = Room303SystemMessage{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Room303SystemMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Room303SystemMessage) ProtoMessage() {}

func (x *Room303SystemMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Room303SystemMessage.ProtoReflect.Descriptor instead.
func (*Room303SystemMessage) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{80}
}

func (x *Room303SystemMessage) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *Room303SystemMessage) GetUser() isRoom303SystemMessage_User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Room303SystemMessage) GetUsername() string {
	if x != nil {
		if x, ok := x.User.(*Room303SystemMessage_Username); ok {
			return x.Username
		}
	}
	return ""
}

func (x *Room303SystemMessage) GetUserId() string {
	if x != nil {
		if x, ok := x.User.(*Room303SystemMessage_UserId); ok {
			return x.UserId
		}
	}
	return ""
}

type isRoom303SystemMessage_User interface {
	isRoom303SystemMessage_User()
}

type Room303SystemMessage_Username struct {
	// will lookup user_sid through org if not provided
	// username of the intended user
	Username string `protobuf:"bytes,2,opt,name=username,proto3,oneof"`
}

type Room303SystemMessage_UserId struct {
	// user_id of the intended user
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3,oneof"`
}

func (*Room303SystemMessage_Username) isRoom303SystemMessage_User() {}

func (*Room303SystemMessage_UserId) isRoom303SystemMessage_User() {}

type Room303SystemMessages struct {
	state          protoimpl.MessageState  `protogen:"open.v1"`
	SystemMessages []*Room303SystemMessage `protobuf:"bytes,1,rep,name=system_messages,json=systemMessages,proto3" json:"system_messages,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Room303SystemMessages) Reset() {
	*x = Room303SystemMessages{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Room303SystemMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Room303SystemMessages) ProtoMessage() {}

func (x *Room303SystemMessages) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Room303SystemMessages.ProtoReflect.Descriptor instead.
func (*Room303SystemMessages) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{81}
}

func (x *Room303SystemMessages) GetSystemMessages() []*Room303SystemMessage {
	if x != nil {
		return x.SystemMessages
	}
	return nil
}

type SMSTransport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// must include country code and area code
	DestinationPhone string `protobuf:"bytes,1,opt,name=destination_phone,json=destinationPhone,proto3" json:"destination_phone,omitempty"`
	// the phone number we want this message to come from
	SourcePhone   string `protobuf:"bytes,2,opt,name=source_phone,json=sourcePhone,proto3" json:"source_phone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SMSTransport) Reset() {
	*x = SMSTransport{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SMSTransport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMSTransport) ProtoMessage() {}

func (x *SMSTransport) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMSTransport.ProtoReflect.Descriptor instead.
func (*SMSTransport) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{82}
}

func (x *SMSTransport) GetDestinationPhone() string {
	if x != nil {
		return x.DestinationPhone
	}
	return ""
}

func (x *SMSTransport) GetSourcePhone() string {
	if x != nil {
		return x.SourcePhone
	}
	return ""
}

type AESEncryptionRef struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AesSid        int64                  `protobuf:"varint,1,opt,name=aes_sid,json=aesSid,proto3" json:"aes_sid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AESEncryptionRef) Reset() {
	*x = AESEncryptionRef{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AESEncryptionRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AESEncryptionRef) ProtoMessage() {}

func (x *AESEncryptionRef) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AESEncryptionRef.ProtoReflect.Descriptor instead.
func (*AESEncryptionRef) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{83}
}

func (x *AESEncryptionRef) GetAesSid() int64 {
	if x != nil {
		return x.AesSid
	}
	return 0
}

type PGPEncryptionRef struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PgpSid        int64                  `protobuf:"varint,1,opt,name=pgp_sid,json=pgpSid,proto3" json:"pgp_sid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PGPEncryptionRef) Reset() {
	*x = PGPEncryptionRef{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PGPEncryptionRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PGPEncryptionRef) ProtoMessage() {}

func (x *PGPEncryptionRef) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PGPEncryptionRef.ProtoReflect.Descriptor instead.
func (*PGPEncryptionRef) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{84}
}

func (x *PGPEncryptionRef) GetPgpSid() int64 {
	if x != nil {
		return x.PgpSid
	}
	return 0
}

type PasswordRef struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PasswordSid   int64                  `protobuf:"varint,1,opt,name=password_sid,json=passwordSid,proto3" json:"password_sid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PasswordRef) Reset() {
	*x = PasswordRef{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PasswordRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordRef) ProtoMessage() {}

func (x *PasswordRef) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordRef.ProtoReflect.Descriptor instead.
func (*PasswordRef) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{85}
}

func (x *PasswordRef) GetPasswordSid() int64 {
	if x != nil {
		return x.PasswordSid
	}
	return 0
}

type SSHKeyRef struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SshKeySid     int64                  `protobuf:"varint,1,opt,name=ssh_key_sid,json=sshKeySid,proto3" json:"ssh_key_sid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSHKeyRef) Reset() {
	*x = SSHKeyRef{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSHKeyRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSHKeyRef) ProtoMessage() {}

func (x *SSHKeyRef) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSHKeyRef.ProtoReflect.Descriptor instead.
func (*SSHKeyRef) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{86}
}

func (x *SSHKeyRef) GetSshKeySid() int64 {
	if x != nil {
		return x.SshKeySid
	}
	return 0
}

type Encryption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EncryptionSid int64                  `protobuf:"varint,1,opt,name=encryption_sid,json=encryptionSid,proto3" json:"encryption_sid,omitempty"`
	OrgId         string                 `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Types that are valid to be assigned to Encryption:
	//
	//	*Encryption_PgpKeyPair
	//	*Encryption_AesPassword
	Encryption    isEncryption_Encryption `protobuf_oneof:"encryption"`
	CreatedOn     *timestamppb.Timestamp  `protobuf:"bytes,10,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	LastEdited    *timestamppb.Timestamp  `protobuf:"bytes,11,opt,name=last_edited,json=lastEdited,proto3" json:"last_edited,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Encryption) Reset() {
	*x = Encryption{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Encryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Encryption) ProtoMessage() {}

func (x *Encryption) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Encryption.ProtoReflect.Descriptor instead.
func (*Encryption) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{87}
}

func (x *Encryption) GetEncryptionSid() int64 {
	if x != nil {
		return x.EncryptionSid
	}
	return 0
}

func (x *Encryption) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *Encryption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Encryption) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Encryption) GetEncryption() isEncryption_Encryption {
	if x != nil {
		return x.Encryption
	}
	return nil
}

func (x *Encryption) GetPgpKeyPair() *PGPKeyPair {
	if x != nil {
		if x, ok := x.Encryption.(*Encryption_PgpKeyPair); ok {
			return x.PgpKeyPair
		}
	}
	return nil
}

func (x *Encryption) GetAesPassword() *AESPassword {
	if x != nil {
		if x, ok := x.Encryption.(*Encryption_AesPassword); ok {
			return x.AesPassword
		}
	}
	return nil
}

func (x *Encryption) GetCreatedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedOn
	}
	return nil
}

func (x *Encryption) GetLastEdited() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEdited
	}
	return nil
}

type isEncryption_Encryption interface {
	isEncryption_Encryption()
}

type Encryption_PgpKeyPair struct {
	PgpKeyPair *PGPKeyPair `protobuf:"bytes,5,opt,name=pgp_key_pair,json=pgpKeyPair,proto3,oneof"`
}

type Encryption_AesPassword struct {
	AesPassword *AESPassword `protobuf:"bytes,6,opt,name=aes_password,json=aesPassword,proto3,oneof"`
}

func (*Encryption_PgpKeyPair) isEncryption_Encryption() {}

func (*Encryption_AesPassword) isEncryption_Encryption() {}

type ListSMSNumbersReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSMSNumbersReq) Reset() {
	*x = ListSMSNumbersReq{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSMSNumbersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSMSNumbersReq) ProtoMessage() {}

func (x *ListSMSNumbersReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSMSNumbersReq.ProtoReflect.Descriptor instead.
func (*ListSMSNumbersReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{88}
}

type ListSMSNumbersRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SmsNumbers    []*commons.SmsNumber   `protobuf:"bytes,1,rep,name=sms_numbers,json=smsNumbers,proto3" json:"sms_numbers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSMSNumbersRes) Reset() {
	*x = ListSMSNumbersRes{}
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSMSNumbersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSMSNumbersRes) ProtoMessage() {}

func (x *ListSMSNumbersRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_delivery_service_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSMSNumbersRes.ProtoReflect.Descriptor instead.
func (*ListSMSNumbersRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_delivery_service_proto_rawDescGZIP(), []int{89}
}

func (x *ListSMSNumbersRes) GetSmsNumbers() []*commons.SmsNumber {
	if x != nil {
		return x.SmsNumbers
	}
	return nil
}

var File_api_v1alpha1_delivery_service_proto protoreflect.FileDescriptor

var file_api_v1alpha1_delivery_service_proto_rawDesc = []byte{
	0x0a, 0x23, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x1a, 0x17, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x6f,
	0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x12, 0x3d, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d,
	0x61, 0x73, 0x6b, 0x22, 0x4c, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x12, 0x31,
	0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x44, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x22, 0xc2, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x3d, 0x0a, 0x06,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x39, 0x0a, 0x08, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x52, 0x07, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x5b, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x12, 0x41, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x22, 0x92, 0x02, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x79, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x3d, 0x0a, 0x06,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x40, 0x0a, 0x0e, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x44, 0x52, 0x0d,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x39, 0x0a,
	0x08, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x52,
	0x07, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x69, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42,
	0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x12, 0x41, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x3d, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e,
	0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x4c,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x49, 0x44, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x88, 0x01, 0x0a,
	0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x3d, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x3d, 0x0a, 0x06, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x55, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x22, 0xa3, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x3d, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x5b, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x22, 0xb3, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x2e, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12,
	0x39, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x52, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x4c, 0x0a, 0x0e, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x3a, 0x0a, 0x06, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x52,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x5c, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x7a, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a, 0x06, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73,
	0x6b, 0x22, 0x45, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x44,
	0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x72, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x49, 0x44, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x04,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x47, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x12, 0x36, 0x0a,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x68, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x50, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x31,
	0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x44, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x22, 0x50, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x31, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x44, 0x52, 0x06, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x41, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61,
	0x73, 0x6b, 0x22, 0x5d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x41,
	0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x22, 0xab, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x41, 0x0a, 0x06,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22,
	0x63, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x12, 0x41, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x22, 0xca, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x39, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x52, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x22, 0x63, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x45, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x28, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x40, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x44, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x52, 0x07, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x22, 0x71, 0x0a, 0x28, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x52, 0x65, 0x73, 0x12,
	0x45, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x50, 0x0a, 0x1b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x49, 0x44, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x58, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x41, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x06,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x44, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22,
	0x78, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x49,
	0x44, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x22, 0x7d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x2e, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22,
	0x4d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x7c,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x04,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x53, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x22, 0x80, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04,
	0x6d, 0x61, 0x73, 0x6b, 0x22, 0x48, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x49, 0x44, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xa6,
	0x03, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x14, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x74, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12,
	0x41, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x12, 0x44, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x45, 0x64, 0x69, 0x74, 0x65, 0x64, 0x22, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x03,
	0x73, 0x69, 0x64, 0x22, 0x3e, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0xcd, 0x05, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x14, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x47,
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4c,
	0x65, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x69, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x49,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x64, 0x22, 0x5f, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x53, 0x69, 0x64, 0x22, 0x8b, 0x02, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x64,
	0x69, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74,
	0x65, 0x64, 0x22, 0xd0, 0x02, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x45, 0x0a, 0x07,
	0x72, 0x6f, 0x6f, 0x6d, 0x33, 0x30, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x33, 0x30, 0x33, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x6d,
	0x33, 0x30, 0x33, 0x12, 0x39, 0x0a, 0x03, 0x73, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x6d, 0x73, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x73, 0x6d, 0x73, 0x12, 0x3c,
	0x0a, 0x04, 0x73, 0x66, 0x74, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x66, 0x74, 0x70, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x73, 0x66, 0x74, 0x70, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x66, 0x0a, 0x0f, 0x53, 0x66, 0x74, 0x70, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x5d, 0x0a,
	0x12, 0x52, 0x6f, 0x6f, 0x6d, 0x33, 0x30, 0x33, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x0e,
	0x53, 0x6d, 0x73, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x82,
	0x01, 0x0a, 0x10, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x63, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x41, 0x64,
	0x64, 0x72, 0x73, 0x22, 0xfa, 0x02, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x45, 0x0a, 0x0c, 0x73, 0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x69,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x53, 0x53, 0x48, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x73,
	0x68, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x67, 0x70, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x47, 0x50, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x67, 0x70, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x47, 0x0a, 0x0c, 0x61, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x45,
	0x53, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x65, 0x73,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x46, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x26, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x4c, 0x0a, 0x0a, 0x53, 0x53, 0x48, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x4c,
	0x0a, 0x0a, 0x50, 0x47, 0x50, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x29, 0x0a, 0x0b,
	0x41, 0x45, 0x53, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x73,
	0x66, 0x74, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x53, 0x66, 0x74, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x73, 0x66, 0x74, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2a, 0x0a,
	0x0a, 0x53, 0x66, 0x74, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x7d, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x39, 0x0a,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x55, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22,
	0x7c, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a,
	0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x5a, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x04,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x48, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x44, 0x52, 0x06,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x78, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x44, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b,
	0x22, 0x15, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x39, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x48, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x44, 0x52, 0x06, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x22, 0x4c, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x22, 0xb5, 0x05, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x17, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x15,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x74, 0x74, 0x6c, 0x12, 0x3a, 0x0a, 0x04, 0x73, 0x66, 0x74, 0x70, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x46, 0x54, 0x50, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x04, 0x73, 0x66, 0x74, 0x70,
	0x12, 0x3d, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x43, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x33, 0x30, 0x33, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x33, 0x30, 0x33,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x33, 0x30, 0x33, 0x12, 0x37, 0x0a, 0x03, 0x73, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x4d, 0x53, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x03, 0x73, 0x6d, 0x73, 0x12, 0x3b, 0x0a,
	0x03, 0x61, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x41, 0x45, 0x53, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x66, 0x48, 0x01, 0x52, 0x03, 0x61, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x03, 0x70, 0x67,
	0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x50, 0x47, 0x50, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66,
	0x48, 0x01, 0x52, 0x03, 0x70, 0x67, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x4f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x65,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x65, 0x64, 0x42,
	0x0b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0c, 0x0a, 0x0a,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x02, 0x0a, 0x0d, 0x53,
	0x46, 0x54, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x66, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x73,
	0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x53, 0x53, 0x48, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x44, 0x69, 0x72, 0x42, 0x0d,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0xa0, 0x01,
	0x0a, 0x0e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x25, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x22, 0xd2, 0x01, 0x0a, 0x10, 0x52, 0x6f, 0x6f, 0x6d, 0x33, 0x30, 0x33, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x58, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x33, 0x30, 0x33, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00,
	0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x57, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x33, 0x30, 0x33, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x6b, 0x0a, 0x14, 0x52, 0x6f, 0x6f, 0x6d, 0x33, 0x30, 0x33,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f,
	0x6d, 0x12, 0x1c, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x22, 0x6d, 0x0a, 0x15, 0x52, 0x6f, 0x6f, 0x6d, 0x33, 0x30, 0x33, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6f,
	0x6d, 0x33, 0x30, 0x33, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x22, 0x5e, 0x0a, 0x0c, 0x53, 0x4d, 0x53, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x22, 0x2f, 0x0a, 0x10, 0x41, 0x45, 0x53, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x1b, 0x0a, 0x07, 0x61, 0x65, 0x73, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x61, 0x65, 0x73, 0x53,
	0x69, 0x64, 0x22, 0x2f, 0x0a, 0x10, 0x50, 0x47, 0x50, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x1b, 0x0a, 0x07, 0x70, 0x67, 0x70, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x70, 0x67, 0x70,
	0x53, 0x69, 0x64, 0x22, 0x34, 0x0a, 0x0b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x66, 0x12, 0x25, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x09, 0x53, 0x53, 0x48,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x66, 0x12, 0x22, 0x0a, 0x0b, 0x73, 0x73, 0x68, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x09, 0x73, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x64, 0x22, 0x96, 0x03, 0x0a, 0x0a, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a,
	0x0c, 0x70, 0x67, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x47, 0x50, 0x4b,
	0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x67, 0x70, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x47, 0x0a, 0x0c, 0x61, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x41, 0x45, 0x53, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x00,
	0x52, 0x0b, 0x61, 0x65, 0x73, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x45,
	0x64, 0x69, 0x74, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x13, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x4d, 0x53, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x22, 0x4c, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x4d, 0x53, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x12, 0x37, 0x0a,
	0x0b, 0x73, 0x6d, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x53, 0x6d, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0a, 0x73, 0x6d, 0x73, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x32, 0xbf, 0x27, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x41, 0x70, 0x69, 0x12, 0xb8, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a,
	0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x22,
	0x40, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xd1, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0xb4, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0xd0, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0xec, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x42, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x3b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x79, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x3b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x49, 0x44, 0x52, 0x65, 0x73, 0x22, 0x4d, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xd0, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x3a, 0x01, 0x2a, 0x22, 0x38, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x62, 0x79, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x64, 0x12, 0xb8, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xd1, 0x0f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xb8, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x22, 0x40, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xd1, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a,
	0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xac, 0x01,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba,
	0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xd0, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a,
	0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc4, 0x01, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x22, 0x43,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xd0, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33,
	0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x79, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xd0, 0x0f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0xd4, 0x01, 0x0a, 0x1b, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x1a, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x22, 0x47, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xd0, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x62, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0xa3, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xd0, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a,
	0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x9c, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x39, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xd0, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a,
	0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0xa8, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xd1, 0x0f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x12, 0xa8, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x3c,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xd1, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c,
	0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0xa8, 0x01, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xd1, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0xcd, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x49, 0xba, 0xb8,
	0x91, 0x02, 0x0a, 0x0a, 0x03, 0x08, 0xd1, 0x0f, 0x0a, 0x03, 0x08, 0xf5, 0x03, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xc8, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x44, 0xba, 0xb8,
	0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xd1, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01,
	0x2a, 0x22, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0xbc, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x41,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xd0, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31,
	0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0xd4, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x22,
	0x47, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xd0, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x65, 0x74,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x62, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xc9, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x22, 0x48, 0xba, 0xb8, 0x91, 0x02,
	0x0a, 0x0a, 0x03, 0x08, 0xd0, 0x0f, 0x0a, 0x03, 0x08, 0xf4, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x33, 0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x6c, 0x69, 0x73,
	0x74, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0xfc, 0x01, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x3f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a,
	0x3f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x22, 0x51, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xd0, 0x0f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x41, 0x3a, 0x01, 0x2a, 0x22, 0x3c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62, 0x79, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0xc8, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x44, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xd1, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa8,
	0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x3c, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xd1, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a,
	0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa8, 0x01, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0xd1, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9c, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x39, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xd0, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0xa4, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3b, 0xba,
	0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xd0, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a,
	0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa8, 0x01, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0xd1, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa0, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x4d,
	0x53, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x4d, 0x53, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x4d, 0x53, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8,
	0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xd0, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01,
	0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x6d,
	0x73, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x42, 0xd1, 0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x42, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d,
	0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0xa2, 0x02, 0x03, 0x41, 0x56, 0x44, 0xaa, 0x02,
	0x15, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0xca, 0x02, 0x15, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0xe2, 0x02,
	0x21, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x17, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x3a, 0x3a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1alpha1_delivery_service_proto_rawDescOnce sync.Once
	file_api_v1alpha1_delivery_service_proto_rawDescData = file_api_v1alpha1_delivery_service_proto_rawDesc
)

func file_api_v1alpha1_delivery_service_proto_rawDescGZIP() []byte {
	file_api_v1alpha1_delivery_service_proto_rawDescOnce.Do(func() {
		file_api_v1alpha1_delivery_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1alpha1_delivery_service_proto_rawDescData)
	})
	return file_api_v1alpha1_delivery_service_proto_rawDescData
}

var file_api_v1alpha1_delivery_service_proto_msgTypes = make([]protoimpl.MessageInfo, 90)
var file_api_v1alpha1_delivery_service_proto_goTypes = []any{
	(*CreateTransferConfigReq)(nil),                  // 0: api.v1alpha1.delivery.CreateTransferConfigReq
	(*CreateTransferConfigRes)(nil),                  // 1: api.v1alpha1.delivery.CreateTransferConfigRes
	(*ListTransferConfigsReq)(nil),                   // 2: api.v1alpha1.delivery.ListTransferConfigsReq
	(*ListTransferConfigsRes)(nil),                   // 3: api.v1alpha1.delivery.ListTransferConfigsRes
	(*ListTransferConfigsByCredentialIDReq)(nil),     // 4: api.v1alpha1.delivery.ListTransferConfigsByCredentialIDReq
	(*ListTransferConfigsByCredentialIDRes)(nil),     // 5: api.v1alpha1.delivery.ListTransferConfigsByCredentialIDRes
	(*UpdateTransferConfigReq)(nil),                  // 6: api.v1alpha1.delivery.UpdateTransferConfigReq
	(*UpdateTransferConfigRes)(nil),                  // 7: api.v1alpha1.delivery.UpdateTransferConfigRes
	(*DeleteTransferConfigReq)(nil),                  // 8: api.v1alpha1.delivery.DeleteTransferConfigReq
	(*DeleteTransferConfigRes)(nil),                  // 9: api.v1alpha1.delivery.DeleteTransferConfigRes
	(*GetTransferConfigReq)(nil),                     // 10: api.v1alpha1.delivery.GetTransferConfigReq
	(*GetTransferConfigRes)(nil),                     // 11: api.v1alpha1.delivery.GetTransferConfigRes
	(*GetTransferConfigByNameReq)(nil),               // 12: api.v1alpha1.delivery.GetTransferConfigByNameReq
	(*GetTransferConfigByNameRes)(nil),               // 13: api.v1alpha1.delivery.GetTransferConfigByNameRes
	(*ListHistoryReq)(nil),                           // 14: api.v1alpha1.delivery.ListHistoryReq
	(*ListHistoryRes)(nil),                           // 15: api.v1alpha1.delivery.ListHistoryRes
	(*ListHistoryByTransferConfigReq)(nil),           // 16: api.v1alpha1.delivery.ListHistoryByTransferConfigReq
	(*ListHistoryByTransferConfigRes)(nil),           // 17: api.v1alpha1.delivery.ListHistoryByTransferConfigRes
	(*CreateHistoryReq)(nil),                         // 18: api.v1alpha1.delivery.CreateHistoryReq
	(*CreateHistoryRes)(nil),                         // 19: api.v1alpha1.delivery.CreateHistoryRes
	(*GetHistoryReq)(nil),                            // 20: api.v1alpha1.delivery.GetHistoryReq
	(*GetHistoryRes)(nil),                            // 21: api.v1alpha1.delivery.GetHistoryRes
	(*CreateDeliveryDefinitionReq)(nil),              // 22: api.v1alpha1.delivery.CreateDeliveryDefinitionReq
	(*CreateDeliveryDefinitionRes)(nil),              // 23: api.v1alpha1.delivery.CreateDeliveryDefinitionRes
	(*DeleteDeliveryDefinitionReq)(nil),              // 24: api.v1alpha1.delivery.DeleteDeliveryDefinitionReq
	(*DeleteDeliveryDefinitionRes)(nil),              // 25: api.v1alpha1.delivery.DeleteDeliveryDefinitionRes
	(*GetDeliveryDefinitionReq)(nil),                 // 26: api.v1alpha1.delivery.GetDeliveryDefinitionReq
	(*GetDeliveryDefinitionRes)(nil),                 // 27: api.v1alpha1.delivery.GetDeliveryDefinitionRes
	(*GetDeliveryDefinitionByNameReq)(nil),           // 28: api.v1alpha1.delivery.GetDeliveryDefinitionByNameReq
	(*GetDeliveryDefinitionByNameRes)(nil),           // 29: api.v1alpha1.delivery.GetDeliveryDefinitionByNameRes
	(*ListDeliveryDefinitionsReq)(nil),               // 30: api.v1alpha1.delivery.ListDeliveryDefinitionsReq
	(*ListDeliveryDefinitionsRes)(nil),               // 31: api.v1alpha1.delivery.ListDeliveryDefinitionsRes
	(*ListDeliveryDefinitionsByCredentialIDReq)(nil), // 32: api.v1alpha1.delivery.ListDeliveryDefinitionsByCredentialIDReq
	(*ListDeliveryDefinitionsByCredentialIDRes)(nil), // 33: api.v1alpha1.delivery.ListDeliveryDefinitionsByCredentialIDRes
	(*UpdateDeliveryDefinitionReq)(nil),              // 34: api.v1alpha1.delivery.UpdateDeliveryDefinitionReq
	(*UpdateDeliveryDefinitionRes)(nil),              // 35: api.v1alpha1.delivery.UpdateDeliveryDefinitionRes
	(*CreateEncryptionReq)(nil),                      // 36: api.v1alpha1.delivery.CreateEncryptionReq
	(*CreateEncryptionRes)(nil),                      // 37: api.v1alpha1.delivery.CreateEncryptionRes
	(*DeleteEncryptionReq)(nil),                      // 38: api.v1alpha1.delivery.DeleteEncryptionReq
	(*DeleteEncryptionRes)(nil),                      // 39: api.v1alpha1.delivery.DeleteEncryptionRes
	(*GetEncryptionReq)(nil),                         // 40: api.v1alpha1.delivery.GetEncryptionReq
	(*GetEncryptionRes)(nil),                         // 41: api.v1alpha1.delivery.GetEncryptionRes
	(*ListEncryptionsReq)(nil),                       // 42: api.v1alpha1.delivery.ListEncryptionsReq
	(*ListEncryptionsRes)(nil),                       // 43: api.v1alpha1.delivery.ListEncryptionsRes
	(*UpdateEncryptionReq)(nil),                      // 44: api.v1alpha1.delivery.UpdateEncryptionReq
	(*UpdateEncryptionRes)(nil),                      // 45: api.v1alpha1.delivery.UpdateEncryptionRes
	(*TransferConfig)(nil),                           // 46: api.v1alpha1.delivery.TransferConfig
	(*ID)(nil),                                       // 47: api.v1alpha1.delivery.ID
	(*ListReq)(nil),                                  // 48: api.v1alpha1.delivery.ListReq
	(*History)(nil),                                  // 49: api.v1alpha1.delivery.History
	(*ListByIDReq)(nil),                              // 50: api.v1alpha1.delivery.ListByIDReq
	(*Credential)(nil),                               // 51: api.v1alpha1.delivery.Credential
	(*Destination)(nil),                              // 52: api.v1alpha1.delivery.Destination
	(*SftpDestination)(nil),                          // 53: api.v1alpha1.delivery.SftpDestination
	(*Room303Destination)(nil),                       // 54: api.v1alpha1.delivery.Room303Destination
	(*SmsDestination)(nil),                           // 55: api.v1alpha1.delivery.SmsDestination
	(*EmailDestination)(nil),                         // 56: api.v1alpha1.delivery.EmailDestination
	(*CredentialData)(nil),                           // 57: api.v1alpha1.delivery.CredentialData
	(*UserPassword)(nil),                             // 58: api.v1alpha1.delivery.UserPassword
	(*Password)(nil),                                 // 59: api.v1alpha1.delivery.Password
	(*SSHKeyPair)(nil),                               // 60: api.v1alpha1.delivery.SSHKeyPair
	(*PGPKeyPair)(nil),                               // 61: api.v1alpha1.delivery.PGPKeyPair
	(*AESPassword)(nil),                              // 62: api.v1alpha1.delivery.AESPassword
	(*Source)(nil),                                   // 63: api.v1alpha1.delivery.Source
	(*SftpSource)(nil),                               // 64: api.v1alpha1.delivery.SftpSource
	(*GetCredentialReq)(nil),                         // 65: api.v1alpha1.delivery.GetCredentialReq
	(*GetCredentialRes)(nil),                         // 66: api.v1alpha1.delivery.GetCredentialRes
	(*ListCredentialsReq)(nil),                       // 67: api.v1alpha1.delivery.ListCredentialsReq
	(*ListCredentialsRes)(nil),                       // 68: api.v1alpha1.delivery.ListCredentialsRes
	(*CreateCredentialReq)(nil),                      // 69: api.v1alpha1.delivery.CreateCredentialReq
	(*CreateCredentialRes)(nil),                      // 70: api.v1alpha1.delivery.CreateCredentialRes
	(*DeleteCredentialReq)(nil),                      // 71: api.v1alpha1.delivery.DeleteCredentialReq
	(*DeleteCredentialRes)(nil),                      // 72: api.v1alpha1.delivery.DeleteCredentialRes
	(*UpdateCredentialReq)(nil),                      // 73: api.v1alpha1.delivery.UpdateCredentialReq
	(*UpdateCredentialRes)(nil),                      // 74: api.v1alpha1.delivery.UpdateCredentialRes
	(*Credentials)(nil),                              // 75: api.v1alpha1.delivery.Credentials
	(*DeliveryDefinition)(nil),                       // 76: api.v1alpha1.delivery.DeliveryDefinition
	(*SFTPTransport)(nil),                            // 77: api.v1alpha1.delivery.SFTPTransport
	(*EmailTransport)(nil),                           // 78: api.v1alpha1.delivery.EmailTransport
	(*Room303Transport)(nil),                         // 79: api.v1alpha1.delivery.Room303Transport
	(*Room303SystemMessage)(nil),                     // 80: api.v1alpha1.delivery.Room303SystemMessage
	(*Room303SystemMessages)(nil),                    // 81: api.v1alpha1.delivery.Room303SystemMessages
	(*SMSTransport)(nil),                             // 82: api.v1alpha1.delivery.SMSTransport
	(*AESEncryptionRef)(nil),                         // 83: api.v1alpha1.delivery.AESEncryptionRef
	(*PGPEncryptionRef)(nil),                         // 84: api.v1alpha1.delivery.PGPEncryptionRef
	(*PasswordRef)(nil),                              // 85: api.v1alpha1.delivery.PasswordRef
	(*SSHKeyRef)(nil),                                // 86: api.v1alpha1.delivery.SSHKeyRef
	(*Encryption)(nil),                               // 87: api.v1alpha1.delivery.Encryption
	(*ListSMSNumbersReq)(nil),                        // 88: api.v1alpha1.delivery.ListSMSNumbersReq
	(*ListSMSNumbersRes)(nil),                        // 89: api.v1alpha1.delivery.ListSMSNumbersRes
	(*fieldmaskpb.FieldMask)(nil),                    // 90: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),                    // 91: google.protobuf.Timestamp
	(commons.OperatorApplications)(0),                // 92: api.commons.OperatorApplications
	(commons.TransferStatus)(0),                      // 93: api.commons.TransferStatus
	(*commons.Encryption)(nil),                       // 94: api.commons.Encryption
	(*commons.SmsNumber)(nil),                        // 95: api.commons.SmsNumber
}
var file_api_v1alpha1_delivery_service_proto_depIdxs = []int32{
	46,  // 0: api.v1alpha1.delivery.CreateTransferConfigReq.entity:type_name -> api.v1alpha1.delivery.TransferConfig
	90,  // 1: api.v1alpha1.delivery.CreateTransferConfigReq.mask:type_name -> google.protobuf.FieldMask
	47,  // 2: api.v1alpha1.delivery.CreateTransferConfigRes.entity:type_name -> api.v1alpha1.delivery.ID
	46,  // 3: api.v1alpha1.delivery.ListTransferConfigsReq.entity:type_name -> api.v1alpha1.delivery.TransferConfig
	90,  // 4: api.v1alpha1.delivery.ListTransferConfigsReq.mask:type_name -> google.protobuf.FieldMask
	48,  // 5: api.v1alpha1.delivery.ListTransferConfigsReq.list_req:type_name -> api.v1alpha1.delivery.ListReq
	46,  // 6: api.v1alpha1.delivery.ListTransferConfigsRes.entities:type_name -> api.v1alpha1.delivery.TransferConfig
	46,  // 7: api.v1alpha1.delivery.ListTransferConfigsByCredentialIDReq.entity:type_name -> api.v1alpha1.delivery.TransferConfig
	90,  // 8: api.v1alpha1.delivery.ListTransferConfigsByCredentialIDReq.mask:type_name -> google.protobuf.FieldMask
	47,  // 9: api.v1alpha1.delivery.ListTransferConfigsByCredentialIDReq.credential_sid:type_name -> api.v1alpha1.delivery.ID
	48,  // 10: api.v1alpha1.delivery.ListTransferConfigsByCredentialIDReq.list_req:type_name -> api.v1alpha1.delivery.ListReq
	46,  // 11: api.v1alpha1.delivery.ListTransferConfigsByCredentialIDRes.entities:type_name -> api.v1alpha1.delivery.TransferConfig
	46,  // 12: api.v1alpha1.delivery.UpdateTransferConfigReq.entity:type_name -> api.v1alpha1.delivery.TransferConfig
	90,  // 13: api.v1alpha1.delivery.UpdateTransferConfigReq.mask:type_name -> google.protobuf.FieldMask
	47,  // 14: api.v1alpha1.delivery.UpdateTransferConfigRes.entity:type_name -> api.v1alpha1.delivery.ID
	46,  // 15: api.v1alpha1.delivery.DeleteTransferConfigReq.entity:type_name -> api.v1alpha1.delivery.TransferConfig
	90,  // 16: api.v1alpha1.delivery.DeleteTransferConfigReq.mask:type_name -> google.protobuf.FieldMask
	46,  // 17: api.v1alpha1.delivery.GetTransferConfigReq.entity:type_name -> api.v1alpha1.delivery.TransferConfig
	90,  // 18: api.v1alpha1.delivery.GetTransferConfigReq.mask:type_name -> google.protobuf.FieldMask
	46,  // 19: api.v1alpha1.delivery.GetTransferConfigRes.entity:type_name -> api.v1alpha1.delivery.TransferConfig
	90,  // 20: api.v1alpha1.delivery.GetTransferConfigByNameReq.mask:type_name -> google.protobuf.FieldMask
	46,  // 21: api.v1alpha1.delivery.GetTransferConfigByNameReq.entity:type_name -> api.v1alpha1.delivery.TransferConfig
	46,  // 22: api.v1alpha1.delivery.GetTransferConfigByNameRes.entity:type_name -> api.v1alpha1.delivery.TransferConfig
	49,  // 23: api.v1alpha1.delivery.ListHistoryReq.entity:type_name -> api.v1alpha1.delivery.History
	90,  // 24: api.v1alpha1.delivery.ListHistoryReq.mask:type_name -> google.protobuf.FieldMask
	48,  // 25: api.v1alpha1.delivery.ListHistoryReq.list_req:type_name -> api.v1alpha1.delivery.ListReq
	49,  // 26: api.v1alpha1.delivery.ListHistoryRes.entities:type_name -> api.v1alpha1.delivery.History
	50,  // 27: api.v1alpha1.delivery.ListHistoryByTransferConfigReq.entity:type_name -> api.v1alpha1.delivery.ListByIDReq
	90,  // 28: api.v1alpha1.delivery.ListHistoryByTransferConfigReq.mask:type_name -> google.protobuf.FieldMask
	49,  // 29: api.v1alpha1.delivery.ListHistoryByTransferConfigRes.entities:type_name -> api.v1alpha1.delivery.History
	49,  // 30: api.v1alpha1.delivery.CreateHistoryReq.entity:type_name -> api.v1alpha1.delivery.History
	90,  // 31: api.v1alpha1.delivery.CreateHistoryReq.mask:type_name -> google.protobuf.FieldMask
	47,  // 32: api.v1alpha1.delivery.CreateHistoryRes.entity:type_name -> api.v1alpha1.delivery.ID
	47,  // 33: api.v1alpha1.delivery.GetHistoryReq.entity:type_name -> api.v1alpha1.delivery.ID
	90,  // 34: api.v1alpha1.delivery.GetHistoryReq.mask:type_name -> google.protobuf.FieldMask
	49,  // 35: api.v1alpha1.delivery.GetHistoryRes.entity:type_name -> api.v1alpha1.delivery.History
	76,  // 36: api.v1alpha1.delivery.CreateDeliveryDefinitionReq.definition:type_name -> api.v1alpha1.delivery.DeliveryDefinition
	47,  // 37: api.v1alpha1.delivery.CreateDeliveryDefinitionRes.entity:type_name -> api.v1alpha1.delivery.ID
	47,  // 38: api.v1alpha1.delivery.DeleteDeliveryDefinitionReq.entity:type_name -> api.v1alpha1.delivery.ID
	76,  // 39: api.v1alpha1.delivery.GetDeliveryDefinitionReq.entity:type_name -> api.v1alpha1.delivery.DeliveryDefinition
	90,  // 40: api.v1alpha1.delivery.GetDeliveryDefinitionReq.mask:type_name -> google.protobuf.FieldMask
	76,  // 41: api.v1alpha1.delivery.GetDeliveryDefinitionRes.entity:type_name -> api.v1alpha1.delivery.DeliveryDefinition
	90,  // 42: api.v1alpha1.delivery.GetDeliveryDefinitionByNameReq.mask:type_name -> google.protobuf.FieldMask
	76,  // 43: api.v1alpha1.delivery.GetDeliveryDefinitionByNameReq.entity:type_name -> api.v1alpha1.delivery.DeliveryDefinition
	76,  // 44: api.v1alpha1.delivery.GetDeliveryDefinitionByNameRes.entity:type_name -> api.v1alpha1.delivery.DeliveryDefinition
	76,  // 45: api.v1alpha1.delivery.ListDeliveryDefinitionsReq.entity:type_name -> api.v1alpha1.delivery.DeliveryDefinition
	90,  // 46: api.v1alpha1.delivery.ListDeliveryDefinitionsReq.mask:type_name -> google.protobuf.FieldMask
	48,  // 47: api.v1alpha1.delivery.ListDeliveryDefinitionsReq.list_req:type_name -> api.v1alpha1.delivery.ListReq
	76,  // 48: api.v1alpha1.delivery.ListDeliveryDefinitionsRes.entities:type_name -> api.v1alpha1.delivery.DeliveryDefinition
	76,  // 49: api.v1alpha1.delivery.ListDeliveryDefinitionsByCredentialIDReq.entity:type_name -> api.v1alpha1.delivery.DeliveryDefinition
	90,  // 50: api.v1alpha1.delivery.ListDeliveryDefinitionsByCredentialIDReq.mask:type_name -> google.protobuf.FieldMask
	47,  // 51: api.v1alpha1.delivery.ListDeliveryDefinitionsByCredentialIDReq.credential_sid:type_name -> api.v1alpha1.delivery.ID
	48,  // 52: api.v1alpha1.delivery.ListDeliveryDefinitionsByCredentialIDReq.list_req:type_name -> api.v1alpha1.delivery.ListReq
	76,  // 53: api.v1alpha1.delivery.ListDeliveryDefinitionsByCredentialIDRes.entities:type_name -> api.v1alpha1.delivery.DeliveryDefinition
	76,  // 54: api.v1alpha1.delivery.UpdateDeliveryDefinitionReq.entity:type_name -> api.v1alpha1.delivery.DeliveryDefinition
	90,  // 55: api.v1alpha1.delivery.UpdateDeliveryDefinitionReq.mask:type_name -> google.protobuf.FieldMask
	47,  // 56: api.v1alpha1.delivery.UpdateDeliveryDefinitionRes.entity:type_name -> api.v1alpha1.delivery.ID
	87,  // 57: api.v1alpha1.delivery.CreateEncryptionReq.encryption:type_name -> api.v1alpha1.delivery.Encryption
	47,  // 58: api.v1alpha1.delivery.CreateEncryptionRes.entity:type_name -> api.v1alpha1.delivery.ID
	47,  // 59: api.v1alpha1.delivery.DeleteEncryptionReq.entity:type_name -> api.v1alpha1.delivery.ID
	90,  // 60: api.v1alpha1.delivery.DeleteEncryptionReq.mask:type_name -> google.protobuf.FieldMask
	87,  // 61: api.v1alpha1.delivery.GetEncryptionReq.entity:type_name -> api.v1alpha1.delivery.Encryption
	90,  // 62: api.v1alpha1.delivery.GetEncryptionReq.mask:type_name -> google.protobuf.FieldMask
	87,  // 63: api.v1alpha1.delivery.GetEncryptionRes.entity:type_name -> api.v1alpha1.delivery.Encryption
	48,  // 64: api.v1alpha1.delivery.ListEncryptionsReq.entity:type_name -> api.v1alpha1.delivery.ListReq
	90,  // 65: api.v1alpha1.delivery.ListEncryptionsReq.mask:type_name -> google.protobuf.FieldMask
	87,  // 66: api.v1alpha1.delivery.ListEncryptionsRes.entities:type_name -> api.v1alpha1.delivery.Encryption
	87,  // 67: api.v1alpha1.delivery.UpdateEncryptionReq.entity:type_name -> api.v1alpha1.delivery.Encryption
	90,  // 68: api.v1alpha1.delivery.UpdateEncryptionReq.mask:type_name -> google.protobuf.FieldMask
	47,  // 69: api.v1alpha1.delivery.UpdateEncryptionRes.entity:type_name -> api.v1alpha1.delivery.ID
	51,  // 70: api.v1alpha1.delivery.TransferConfig.credential:type_name -> api.v1alpha1.delivery.Credential
	52,  // 71: api.v1alpha1.delivery.TransferConfig.destination:type_name -> api.v1alpha1.delivery.Destination
	63,  // 72: api.v1alpha1.delivery.TransferConfig.source:type_name -> api.v1alpha1.delivery.Source
	91,  // 73: api.v1alpha1.delivery.TransferConfig.created_on:type_name -> google.protobuf.Timestamp
	91,  // 74: api.v1alpha1.delivery.TransferConfig.last_edited:type_name -> google.protobuf.Timestamp
	91,  // 75: api.v1alpha1.delivery.History.created_on:type_name -> google.protobuf.Timestamp
	91,  // 76: api.v1alpha1.delivery.History.transfer_start:type_name -> google.protobuf.Timestamp
	91,  // 77: api.v1alpha1.delivery.History.transfer_complete:type_name -> google.protobuf.Timestamp
	92,  // 78: api.v1alpha1.delivery.History.origin:type_name -> api.commons.OperatorApplications
	93,  // 79: api.v1alpha1.delivery.History.status:type_name -> api.commons.TransferStatus
	57,  // 80: api.v1alpha1.delivery.Credential.data:type_name -> api.v1alpha1.delivery.CredentialData
	91,  // 81: api.v1alpha1.delivery.Credential.created_on:type_name -> google.protobuf.Timestamp
	91,  // 82: api.v1alpha1.delivery.Credential.last_edited:type_name -> google.protobuf.Timestamp
	94,  // 83: api.v1alpha1.delivery.Destination.encryption:type_name -> api.commons.Encryption
	56,  // 84: api.v1alpha1.delivery.Destination.email:type_name -> api.v1alpha1.delivery.EmailDestination
	54,  // 85: api.v1alpha1.delivery.Destination.room303:type_name -> api.v1alpha1.delivery.Room303Destination
	55,  // 86: api.v1alpha1.delivery.Destination.sms:type_name -> api.v1alpha1.delivery.SmsDestination
	53,  // 87: api.v1alpha1.delivery.Destination.sftp:type_name -> api.v1alpha1.delivery.SftpDestination
	58,  // 88: api.v1alpha1.delivery.CredentialData.user_password:type_name -> api.v1alpha1.delivery.UserPassword
	59,  // 89: api.v1alpha1.delivery.CredentialData.password:type_name -> api.v1alpha1.delivery.Password
	60,  // 90: api.v1alpha1.delivery.CredentialData.ssh_key_pair:type_name -> api.v1alpha1.delivery.SSHKeyPair
	61,  // 91: api.v1alpha1.delivery.CredentialData.pgp_key_pair:type_name -> api.v1alpha1.delivery.PGPKeyPair
	62,  // 92: api.v1alpha1.delivery.CredentialData.aes_password:type_name -> api.v1alpha1.delivery.AESPassword
	94,  // 93: api.v1alpha1.delivery.Source.encryption:type_name -> api.commons.Encryption
	64,  // 94: api.v1alpha1.delivery.Source.sftp:type_name -> api.v1alpha1.delivery.SftpSource
	51,  // 95: api.v1alpha1.delivery.GetCredentialReq.entity:type_name -> api.v1alpha1.delivery.Credential
	90,  // 96: api.v1alpha1.delivery.GetCredentialReq.mask:type_name -> google.protobuf.FieldMask
	51,  // 97: api.v1alpha1.delivery.GetCredentialRes.credential:type_name -> api.v1alpha1.delivery.Credential
	48,  // 98: api.v1alpha1.delivery.ListCredentialsReq.entity:type_name -> api.v1alpha1.delivery.ListReq
	90,  // 99: api.v1alpha1.delivery.ListCredentialsReq.mask:type_name -> google.protobuf.FieldMask
	75,  // 100: api.v1alpha1.delivery.ListCredentialsRes.credentials:type_name -> api.v1alpha1.delivery.Credentials
	51,  // 101: api.v1alpha1.delivery.CreateCredentialReq.entity:type_name -> api.v1alpha1.delivery.Credential
	90,  // 102: api.v1alpha1.delivery.CreateCredentialReq.mask:type_name -> google.protobuf.FieldMask
	47,  // 103: api.v1alpha1.delivery.CreateCredentialRes.entity:type_name -> api.v1alpha1.delivery.ID
	47,  // 104: api.v1alpha1.delivery.DeleteCredentialReq.entity:type_name -> api.v1alpha1.delivery.ID
	90,  // 105: api.v1alpha1.delivery.DeleteCredentialReq.mask:type_name -> google.protobuf.FieldMask
	51,  // 106: api.v1alpha1.delivery.UpdateCredentialReq.entity:type_name -> api.v1alpha1.delivery.Credential
	90,  // 107: api.v1alpha1.delivery.UpdateCredentialReq.mask:type_name -> google.protobuf.FieldMask
	47,  // 108: api.v1alpha1.delivery.UpdateCredentialRes.entity:type_name -> api.v1alpha1.delivery.ID
	51,  // 109: api.v1alpha1.delivery.Credentials.entities:type_name -> api.v1alpha1.delivery.Credential
	77,  // 110: api.v1alpha1.delivery.DeliveryDefinition.sftp:type_name -> api.v1alpha1.delivery.SFTPTransport
	78,  // 111: api.v1alpha1.delivery.DeliveryDefinition.email:type_name -> api.v1alpha1.delivery.EmailTransport
	79,  // 112: api.v1alpha1.delivery.DeliveryDefinition.room303:type_name -> api.v1alpha1.delivery.Room303Transport
	82,  // 113: api.v1alpha1.delivery.DeliveryDefinition.sms:type_name -> api.v1alpha1.delivery.SMSTransport
	83,  // 114: api.v1alpha1.delivery.DeliveryDefinition.aes:type_name -> api.v1alpha1.delivery.AESEncryptionRef
	84,  // 115: api.v1alpha1.delivery.DeliveryDefinition.pgp:type_name -> api.v1alpha1.delivery.PGPEncryptionRef
	91,  // 116: api.v1alpha1.delivery.DeliveryDefinition.created_on:type_name -> google.protobuf.Timestamp
	91,  // 117: api.v1alpha1.delivery.DeliveryDefinition.last_edited:type_name -> google.protobuf.Timestamp
	85,  // 118: api.v1alpha1.delivery.SFTPTransport.password:type_name -> api.v1alpha1.delivery.PasswordRef
	86,  // 119: api.v1alpha1.delivery.SFTPTransport.ssh_key:type_name -> api.v1alpha1.delivery.SSHKeyRef
	80,  // 120: api.v1alpha1.delivery.Room303Transport.system_message:type_name -> api.v1alpha1.delivery.Room303SystemMessage
	81,  // 121: api.v1alpha1.delivery.Room303Transport.system_messages:type_name -> api.v1alpha1.delivery.Room303SystemMessages
	80,  // 122: api.v1alpha1.delivery.Room303SystemMessages.system_messages:type_name -> api.v1alpha1.delivery.Room303SystemMessage
	61,  // 123: api.v1alpha1.delivery.Encryption.pgp_key_pair:type_name -> api.v1alpha1.delivery.PGPKeyPair
	62,  // 124: api.v1alpha1.delivery.Encryption.aes_password:type_name -> api.v1alpha1.delivery.AESPassword
	91,  // 125: api.v1alpha1.delivery.Encryption.created_on:type_name -> google.protobuf.Timestamp
	91,  // 126: api.v1alpha1.delivery.Encryption.last_edited:type_name -> google.protobuf.Timestamp
	95,  // 127: api.v1alpha1.delivery.ListSMSNumbersRes.sms_numbers:type_name -> api.commons.SmsNumber
	0,   // 128: api.v1alpha1.delivery.DeliveryApi.CreateTransferConfig:input_type -> api.v1alpha1.delivery.CreateTransferConfigReq
	2,   // 129: api.v1alpha1.delivery.DeliveryApi.ListTransferConfigs:input_type -> api.v1alpha1.delivery.ListTransferConfigsReq
	4,   // 130: api.v1alpha1.delivery.DeliveryApi.ListTransferConfigsByCredentialID:input_type -> api.v1alpha1.delivery.ListTransferConfigsByCredentialIDReq
	6,   // 131: api.v1alpha1.delivery.DeliveryApi.UpdateTransferConfig:input_type -> api.v1alpha1.delivery.UpdateTransferConfigReq
	8,   // 132: api.v1alpha1.delivery.DeliveryApi.DeleteTransferConfig:input_type -> api.v1alpha1.delivery.DeleteTransferConfigReq
	10,  // 133: api.v1alpha1.delivery.DeliveryApi.GetTransferConfig:input_type -> api.v1alpha1.delivery.GetTransferConfigReq
	12,  // 134: api.v1alpha1.delivery.DeliveryApi.GetTransferConfigByName:input_type -> api.v1alpha1.delivery.GetTransferConfigByNameReq
	14,  // 135: api.v1alpha1.delivery.DeliveryApi.ListHistory:input_type -> api.v1alpha1.delivery.ListHistoryReq
	16,  // 136: api.v1alpha1.delivery.DeliveryApi.ListHistoryByTransferConfig:input_type -> api.v1alpha1.delivery.ListHistoryByTransferConfigReq
	67,  // 137: api.v1alpha1.delivery.DeliveryApi.ListCredentials:input_type -> api.v1alpha1.delivery.ListCredentialsReq
	65,  // 138: api.v1alpha1.delivery.DeliveryApi.GetCredential:input_type -> api.v1alpha1.delivery.GetCredentialReq
	69,  // 139: api.v1alpha1.delivery.DeliveryApi.CreateCredential:input_type -> api.v1alpha1.delivery.CreateCredentialReq
	71,  // 140: api.v1alpha1.delivery.DeliveryApi.DeleteCredential:input_type -> api.v1alpha1.delivery.DeleteCredentialReq
	73,  // 141: api.v1alpha1.delivery.DeliveryApi.UpdateCredential:input_type -> api.v1alpha1.delivery.UpdateCredentialReq
	22,  // 142: api.v1alpha1.delivery.DeliveryApi.CreateDeliveryDefinition:input_type -> api.v1alpha1.delivery.CreateDeliveryDefinitionReq
	24,  // 143: api.v1alpha1.delivery.DeliveryApi.DeleteDeliveryDefinition:input_type -> api.v1alpha1.delivery.DeleteDeliveryDefinitionReq
	26,  // 144: api.v1alpha1.delivery.DeliveryApi.GetDeliveryDefinition:input_type -> api.v1alpha1.delivery.GetDeliveryDefinitionReq
	28,  // 145: api.v1alpha1.delivery.DeliveryApi.GetDeliveryDefinitionByName:input_type -> api.v1alpha1.delivery.GetDeliveryDefinitionByNameReq
	30,  // 146: api.v1alpha1.delivery.DeliveryApi.ListDeliveryDefinitions:input_type -> api.v1alpha1.delivery.ListDeliveryDefinitionsReq
	32,  // 147: api.v1alpha1.delivery.DeliveryApi.ListDeliveryDefinitionsByCredentialID:input_type -> api.v1alpha1.delivery.ListDeliveryDefinitionsByCredentialIDReq
	34,  // 148: api.v1alpha1.delivery.DeliveryApi.UpdateDeliveryDefinition:input_type -> api.v1alpha1.delivery.UpdateDeliveryDefinitionReq
	36,  // 149: api.v1alpha1.delivery.DeliveryApi.CreateEncryption:input_type -> api.v1alpha1.delivery.CreateEncryptionReq
	38,  // 150: api.v1alpha1.delivery.DeliveryApi.DeleteEncryption:input_type -> api.v1alpha1.delivery.DeleteEncryptionReq
	40,  // 151: api.v1alpha1.delivery.DeliveryApi.GetEncryption:input_type -> api.v1alpha1.delivery.GetEncryptionReq
	42,  // 152: api.v1alpha1.delivery.DeliveryApi.ListEncryptions:input_type -> api.v1alpha1.delivery.ListEncryptionsReq
	44,  // 153: api.v1alpha1.delivery.DeliveryApi.UpdateEncryption:input_type -> api.v1alpha1.delivery.UpdateEncryptionReq
	88,  // 154: api.v1alpha1.delivery.DeliveryApi.ListSMSNumbers:input_type -> api.v1alpha1.delivery.ListSMSNumbersReq
	1,   // 155: api.v1alpha1.delivery.DeliveryApi.CreateTransferConfig:output_type -> api.v1alpha1.delivery.CreateTransferConfigRes
	3,   // 156: api.v1alpha1.delivery.DeliveryApi.ListTransferConfigs:output_type -> api.v1alpha1.delivery.ListTransferConfigsRes
	5,   // 157: api.v1alpha1.delivery.DeliveryApi.ListTransferConfigsByCredentialID:output_type -> api.v1alpha1.delivery.ListTransferConfigsByCredentialIDRes
	7,   // 158: api.v1alpha1.delivery.DeliveryApi.UpdateTransferConfig:output_type -> api.v1alpha1.delivery.UpdateTransferConfigRes
	9,   // 159: api.v1alpha1.delivery.DeliveryApi.DeleteTransferConfig:output_type -> api.v1alpha1.delivery.DeleteTransferConfigRes
	11,  // 160: api.v1alpha1.delivery.DeliveryApi.GetTransferConfig:output_type -> api.v1alpha1.delivery.GetTransferConfigRes
	13,  // 161: api.v1alpha1.delivery.DeliveryApi.GetTransferConfigByName:output_type -> api.v1alpha1.delivery.GetTransferConfigByNameRes
	15,  // 162: api.v1alpha1.delivery.DeliveryApi.ListHistory:output_type -> api.v1alpha1.delivery.ListHistoryRes
	17,  // 163: api.v1alpha1.delivery.DeliveryApi.ListHistoryByTransferConfig:output_type -> api.v1alpha1.delivery.ListHistoryByTransferConfigRes
	68,  // 164: api.v1alpha1.delivery.DeliveryApi.ListCredentials:output_type -> api.v1alpha1.delivery.ListCredentialsRes
	66,  // 165: api.v1alpha1.delivery.DeliveryApi.GetCredential:output_type -> api.v1alpha1.delivery.GetCredentialRes
	70,  // 166: api.v1alpha1.delivery.DeliveryApi.CreateCredential:output_type -> api.v1alpha1.delivery.CreateCredentialRes
	72,  // 167: api.v1alpha1.delivery.DeliveryApi.DeleteCredential:output_type -> api.v1alpha1.delivery.DeleteCredentialRes
	74,  // 168: api.v1alpha1.delivery.DeliveryApi.UpdateCredential:output_type -> api.v1alpha1.delivery.UpdateCredentialRes
	23,  // 169: api.v1alpha1.delivery.DeliveryApi.CreateDeliveryDefinition:output_type -> api.v1alpha1.delivery.CreateDeliveryDefinitionRes
	25,  // 170: api.v1alpha1.delivery.DeliveryApi.DeleteDeliveryDefinition:output_type -> api.v1alpha1.delivery.DeleteDeliveryDefinitionRes
	27,  // 171: api.v1alpha1.delivery.DeliveryApi.GetDeliveryDefinition:output_type -> api.v1alpha1.delivery.GetDeliveryDefinitionRes
	29,  // 172: api.v1alpha1.delivery.DeliveryApi.GetDeliveryDefinitionByName:output_type -> api.v1alpha1.delivery.GetDeliveryDefinitionByNameRes
	31,  // 173: api.v1alpha1.delivery.DeliveryApi.ListDeliveryDefinitions:output_type -> api.v1alpha1.delivery.ListDeliveryDefinitionsRes
	33,  // 174: api.v1alpha1.delivery.DeliveryApi.ListDeliveryDefinitionsByCredentialID:output_type -> api.v1alpha1.delivery.ListDeliveryDefinitionsByCredentialIDRes
	35,  // 175: api.v1alpha1.delivery.DeliveryApi.UpdateDeliveryDefinition:output_type -> api.v1alpha1.delivery.UpdateDeliveryDefinitionRes
	37,  // 176: api.v1alpha1.delivery.DeliveryApi.CreateEncryption:output_type -> api.v1alpha1.delivery.CreateEncryptionRes
	39,  // 177: api.v1alpha1.delivery.DeliveryApi.DeleteEncryption:output_type -> api.v1alpha1.delivery.DeleteEncryptionRes
	41,  // 178: api.v1alpha1.delivery.DeliveryApi.GetEncryption:output_type -> api.v1alpha1.delivery.GetEncryptionRes
	43,  // 179: api.v1alpha1.delivery.DeliveryApi.ListEncryptions:output_type -> api.v1alpha1.delivery.ListEncryptionsRes
	45,  // 180: api.v1alpha1.delivery.DeliveryApi.UpdateEncryption:output_type -> api.v1alpha1.delivery.UpdateEncryptionRes
	89,  // 181: api.v1alpha1.delivery.DeliveryApi.ListSMSNumbers:output_type -> api.v1alpha1.delivery.ListSMSNumbersRes
	155, // [155:182] is the sub-list for method output_type
	128, // [128:155] is the sub-list for method input_type
	128, // [128:128] is the sub-list for extension type_name
	128, // [128:128] is the sub-list for extension extendee
	0,   // [0:128] is the sub-list for field type_name
}

func init() { file_api_v1alpha1_delivery_service_proto_init() }
func file_api_v1alpha1_delivery_service_proto_init() {
	if File_api_v1alpha1_delivery_service_proto != nil {
		return
	}
	file_api_v1alpha1_delivery_service_proto_msgTypes[52].OneofWrappers = []any{
		(*Destination_Email)(nil),
		(*Destination_Room303)(nil),
		(*Destination_Sms)(nil),
		(*Destination_Sftp)(nil),
	}
	file_api_v1alpha1_delivery_service_proto_msgTypes[57].OneofWrappers = []any{
		(*CredentialData_UserPassword)(nil),
		(*CredentialData_Password)(nil),
		(*CredentialData_SshKeyPair)(nil),
		(*CredentialData_PgpKeyPair)(nil),
		(*CredentialData_AesPassword)(nil),
	}
	file_api_v1alpha1_delivery_service_proto_msgTypes[63].OneofWrappers = []any{
		(*Source_Sftp)(nil),
	}
	file_api_v1alpha1_delivery_service_proto_msgTypes[76].OneofWrappers = []any{
		(*DeliveryDefinition_Sftp)(nil),
		(*DeliveryDefinition_Email)(nil),
		(*DeliveryDefinition_Room303)(nil),
		(*DeliveryDefinition_Sms)(nil),
		(*DeliveryDefinition_Aes)(nil),
		(*DeliveryDefinition_Pgp)(nil),
	}
	file_api_v1alpha1_delivery_service_proto_msgTypes[77].OneofWrappers = []any{
		(*SFTPTransport_Password)(nil),
		(*SFTPTransport_SshKey)(nil),
	}
	file_api_v1alpha1_delivery_service_proto_msgTypes[79].OneofWrappers = []any{
		(*Room303Transport_SystemMessage)(nil),
		(*Room303Transport_SystemMessages)(nil),
	}
	file_api_v1alpha1_delivery_service_proto_msgTypes[80].OneofWrappers = []any{
		(*Room303SystemMessage_Username)(nil),
		(*Room303SystemMessage_UserId)(nil),
	}
	file_api_v1alpha1_delivery_service_proto_msgTypes[87].OneofWrappers = []any{
		(*Encryption_PgpKeyPair)(nil),
		(*Encryption_AesPassword)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1alpha1_delivery_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   90,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1alpha1_delivery_service_proto_goTypes,
		DependencyIndexes: file_api_v1alpha1_delivery_service_proto_depIdxs,
		MessageInfos:      file_api_v1alpha1_delivery_service_proto_msgTypes,
	}.Build()
	File_api_v1alpha1_delivery_service_proto = out.File
	file_api_v1alpha1_delivery_service_proto_rawDesc = nil
	file_api_v1alpha1_delivery_service_proto_goTypes = nil
	file_api_v1alpha1_delivery_service_proto_depIdxs = nil
}
