// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1alpha1/delivery/service.proto

package delivery

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeliveryApi_CreateTransferConfig_FullMethodName              = "/api.v1alpha1.delivery.DeliveryApi/CreateTransferConfig"
	DeliveryApi_CreateDeliveryDefinition_FullMethodName          = "/api.v1alpha1.delivery.DeliveryApi/CreateDeliveryDefinition"
	DeliveryApi_CreateEncryption_FullMethodName                  = "/api.v1alpha1.delivery.DeliveryApi/CreateEncryption"
	DeliveryApi_ListTransferConfigs_FullMethodName               = "/api.v1alpha1.delivery.DeliveryApi/ListTransferConfigs"
	DeliveryApi_ListTransferConfigsByCredentialID_FullMethodName = "/api.v1alpha1.delivery.DeliveryApi/ListTransferConfigsByCredentialID"
	DeliveryApi_UpdateTransferConfig_FullMethodName              = "/api.v1alpha1.delivery.DeliveryApi/UpdateTransferConfig"
	DeliveryApi_DeleteTransferConfig_FullMethodName              = "/api.v1alpha1.delivery.DeliveryApi/DeleteTransferConfig"
	DeliveryApi_GetTransferConfig_FullMethodName                 = "/api.v1alpha1.delivery.DeliveryApi/GetTransferConfig"
	DeliveryApi_GetTransferConfigByName_FullMethodName           = "/api.v1alpha1.delivery.DeliveryApi/GetTransferConfigByName"
	DeliveryApi_ListHistory_FullMethodName                       = "/api.v1alpha1.delivery.DeliveryApi/ListHistory"
	DeliveryApi_ListHistoryByTransferConfig_FullMethodName       = "/api.v1alpha1.delivery.DeliveryApi/ListHistoryByTransferConfig"
	DeliveryApi_ListCredentials_FullMethodName                   = "/api.v1alpha1.delivery.DeliveryApi/ListCredentials"
	DeliveryApi_GetCredential_FullMethodName                     = "/api.v1alpha1.delivery.DeliveryApi/GetCredential"
	DeliveryApi_CreateCredential_FullMethodName                  = "/api.v1alpha1.delivery.DeliveryApi/CreateCredential"
	DeliveryApi_DeleteCredential_FullMethodName                  = "/api.v1alpha1.delivery.DeliveryApi/DeleteCredential"
	DeliveryApi_UpdateCredential_FullMethodName                  = "/api.v1alpha1.delivery.DeliveryApi/UpdateCredential"
)

// DeliveryApiClient is the client API for DeliveryApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliveryApiClient interface {
	CreateTransferConfig(ctx context.Context, in *CreateTransferConfigReq, opts ...grpc.CallOption) (*CreateTransferConfigRes, error)
	CreateDeliveryDefinition(ctx context.Context, in *CreateDeliveryDefinitionReq, opts ...grpc.CallOption) (*CreateDeliveryDefinitionRes, error)
	CreateEncryption(ctx context.Context, in *CreateEncryptionReq, opts ...grpc.CallOption) (*CreateEncryptionRes, error)
	ListTransferConfigs(ctx context.Context, in *ListTransferConfigsReq, opts ...grpc.CallOption) (*ListTransferConfigsRes, error)
	ListTransferConfigsByCredentialID(ctx context.Context, in *ListTransferConfigsByCredentialIDReq, opts ...grpc.CallOption) (*ListTransferConfigsByCredentialIDRes, error)
	UpdateTransferConfig(ctx context.Context, in *UpdateTransferConfigReq, opts ...grpc.CallOption) (*UpdateTransferConfigRes, error)
	DeleteTransferConfig(ctx context.Context, in *DeleteTransferConfigReq, opts ...grpc.CallOption) (*DeleteTransferConfigRes, error)
	GetTransferConfig(ctx context.Context, in *GetTransferConfigReq, opts ...grpc.CallOption) (*GetTransferConfigRes, error)
	GetTransferConfigByName(ctx context.Context, in *GetTransferConfigByNameReq, opts ...grpc.CallOption) (*GetTransferConfigByNameRes, error)
	ListHistory(ctx context.Context, in *ListHistoryReq, opts ...grpc.CallOption) (*ListHistoryRes, error)
	ListHistoryByTransferConfig(ctx context.Context, in *ListHistoryByTransferConfigReq, opts ...grpc.CallOption) (*ListHistoryByTransferConfigRes, error)
	ListCredentials(ctx context.Context, in *ListCredentialsReq, opts ...grpc.CallOption) (*ListCredentialsRes, error)
	GetCredential(ctx context.Context, in *GetCredentialReq, opts ...grpc.CallOption) (*GetCredentialRes, error)
	CreateCredential(ctx context.Context, in *CreateCredentialReq, opts ...grpc.CallOption) (*CreateCredentialRes, error)
	DeleteCredential(ctx context.Context, in *DeleteCredentialReq, opts ...grpc.CallOption) (*DeleteCredentialRes, error)
	UpdateCredential(ctx context.Context, in *UpdateCredentialReq, opts ...grpc.CallOption) (*UpdateCredentialRes, error)
}

type deliveryApiClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveryApiClient(cc grpc.ClientConnInterface) DeliveryApiClient {
	return &deliveryApiClient{cc}
}

func (c *deliveryApiClient) CreateTransferConfig(ctx context.Context, in *CreateTransferConfigReq, opts ...grpc.CallOption) (*CreateTransferConfigRes, error) {
	out := new(CreateTransferConfigRes)
	err := c.cc.Invoke(ctx, DeliveryApi_CreateTransferConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryApiClient) CreateDeliveryDefinition(ctx context.Context, in *CreateDeliveryDefinitionReq, opts ...grpc.CallOption) (*CreateDeliveryDefinitionRes, error) {
	out := new(CreateDeliveryDefinitionRes)
	err := c.cc.Invoke(ctx, DeliveryApi_CreateDeliveryDefinition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryApiClient) CreateEncryption(ctx context.Context, in *CreateEncryptionReq, opts ...grpc.CallOption) (*CreateEncryptionRes, error) {
	out := new(CreateEncryptionRes)
	err := c.cc.Invoke(ctx, DeliveryApi_CreateEncryption_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryApiClient) ListTransferConfigs(ctx context.Context, in *ListTransferConfigsReq, opts ...grpc.CallOption) (*ListTransferConfigsRes, error) {
	out := new(ListTransferConfigsRes)
	err := c.cc.Invoke(ctx, DeliveryApi_ListTransferConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryApiClient) ListTransferConfigsByCredentialID(ctx context.Context, in *ListTransferConfigsByCredentialIDReq, opts ...grpc.CallOption) (*ListTransferConfigsByCredentialIDRes, error) {
	out := new(ListTransferConfigsByCredentialIDRes)
	err := c.cc.Invoke(ctx, DeliveryApi_ListTransferConfigsByCredentialID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryApiClient) UpdateTransferConfig(ctx context.Context, in *UpdateTransferConfigReq, opts ...grpc.CallOption) (*UpdateTransferConfigRes, error) {
	out := new(UpdateTransferConfigRes)
	err := c.cc.Invoke(ctx, DeliveryApi_UpdateTransferConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryApiClient) DeleteTransferConfig(ctx context.Context, in *DeleteTransferConfigReq, opts ...grpc.CallOption) (*DeleteTransferConfigRes, error) {
	out := new(DeleteTransferConfigRes)
	err := c.cc.Invoke(ctx, DeliveryApi_DeleteTransferConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryApiClient) GetTransferConfig(ctx context.Context, in *GetTransferConfigReq, opts ...grpc.CallOption) (*GetTransferConfigRes, error) {
	out := new(GetTransferConfigRes)
	err := c.cc.Invoke(ctx, DeliveryApi_GetTransferConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryApiClient) GetTransferConfigByName(ctx context.Context, in *GetTransferConfigByNameReq, opts ...grpc.CallOption) (*GetTransferConfigByNameRes, error) {
	out := new(GetTransferConfigByNameRes)
	err := c.cc.Invoke(ctx, DeliveryApi_GetTransferConfigByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryApiClient) ListHistory(ctx context.Context, in *ListHistoryReq, opts ...grpc.CallOption) (*ListHistoryRes, error) {
	out := new(ListHistoryRes)
	err := c.cc.Invoke(ctx, DeliveryApi_ListHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryApiClient) ListHistoryByTransferConfig(ctx context.Context, in *ListHistoryByTransferConfigReq, opts ...grpc.CallOption) (*ListHistoryByTransferConfigRes, error) {
	out := new(ListHistoryByTransferConfigRes)
	err := c.cc.Invoke(ctx, DeliveryApi_ListHistoryByTransferConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryApiClient) ListCredentials(ctx context.Context, in *ListCredentialsReq, opts ...grpc.CallOption) (*ListCredentialsRes, error) {
	out := new(ListCredentialsRes)
	err := c.cc.Invoke(ctx, DeliveryApi_ListCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryApiClient) GetCredential(ctx context.Context, in *GetCredentialReq, opts ...grpc.CallOption) (*GetCredentialRes, error) {
	out := new(GetCredentialRes)
	err := c.cc.Invoke(ctx, DeliveryApi_GetCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryApiClient) CreateCredential(ctx context.Context, in *CreateCredentialReq, opts ...grpc.CallOption) (*CreateCredentialRes, error) {
	out := new(CreateCredentialRes)
	err := c.cc.Invoke(ctx, DeliveryApi_CreateCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryApiClient) DeleteCredential(ctx context.Context, in *DeleteCredentialReq, opts ...grpc.CallOption) (*DeleteCredentialRes, error) {
	out := new(DeleteCredentialRes)
	err := c.cc.Invoke(ctx, DeliveryApi_DeleteCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryApiClient) UpdateCredential(ctx context.Context, in *UpdateCredentialReq, opts ...grpc.CallOption) (*UpdateCredentialRes, error) {
	out := new(UpdateCredentialRes)
	err := c.cc.Invoke(ctx, DeliveryApi_UpdateCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliveryApiServer is the server API for DeliveryApi service.
// All implementations must embed UnimplementedDeliveryApiServer
// for forward compatibility
type DeliveryApiServer interface {
	CreateTransferConfig(context.Context, *CreateTransferConfigReq) (*CreateTransferConfigRes, error)
	CreateDeliveryDefinition(context.Context, *CreateDeliveryDefinitionReq) (*CreateDeliveryDefinitionRes, error)
	CreateEncryption(context.Context, *CreateEncryptionReq) (*CreateEncryptionRes, error)
	ListTransferConfigs(context.Context, *ListTransferConfigsReq) (*ListTransferConfigsRes, error)
	ListTransferConfigsByCredentialID(context.Context, *ListTransferConfigsByCredentialIDReq) (*ListTransferConfigsByCredentialIDRes, error)
	UpdateTransferConfig(context.Context, *UpdateTransferConfigReq) (*UpdateTransferConfigRes, error)
	DeleteTransferConfig(context.Context, *DeleteTransferConfigReq) (*DeleteTransferConfigRes, error)
	GetTransferConfig(context.Context, *GetTransferConfigReq) (*GetTransferConfigRes, error)
	GetTransferConfigByName(context.Context, *GetTransferConfigByNameReq) (*GetTransferConfigByNameRes, error)
	ListHistory(context.Context, *ListHistoryReq) (*ListHistoryRes, error)
	ListHistoryByTransferConfig(context.Context, *ListHistoryByTransferConfigReq) (*ListHistoryByTransferConfigRes, error)
	ListCredentials(context.Context, *ListCredentialsReq) (*ListCredentialsRes, error)
	GetCredential(context.Context, *GetCredentialReq) (*GetCredentialRes, error)
	CreateCredential(context.Context, *CreateCredentialReq) (*CreateCredentialRes, error)
	DeleteCredential(context.Context, *DeleteCredentialReq) (*DeleteCredentialRes, error)
	UpdateCredential(context.Context, *UpdateCredentialReq) (*UpdateCredentialRes, error)
	mustEmbedUnimplementedDeliveryApiServer()
}

// UnimplementedDeliveryApiServer must be embedded to have forward compatible implementations.
type UnimplementedDeliveryApiServer struct {
}

func (UnimplementedDeliveryApiServer) CreateTransferConfig(context.Context, *CreateTransferConfigReq) (*CreateTransferConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransferConfig not implemented")
}
func (UnimplementedDeliveryApiServer) CreateDeliveryDefinition(context.Context, *CreateDeliveryDefinitionReq) (*CreateDeliveryDefinitionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeliveryDefinition not implemented")
}
func (UnimplementedDeliveryApiServer) CreateEncryption(context.Context, *CreateEncryptionReq) (*CreateEncryptionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEncryption not implemented")
}
func (UnimplementedDeliveryApiServer) ListTransferConfigs(context.Context, *ListTransferConfigsReq) (*ListTransferConfigsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransferConfigs not implemented")
}
func (UnimplementedDeliveryApiServer) ListTransferConfigsByCredentialID(context.Context, *ListTransferConfigsByCredentialIDReq) (*ListTransferConfigsByCredentialIDRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransferConfigsByCredentialID not implemented")
}
func (UnimplementedDeliveryApiServer) UpdateTransferConfig(context.Context, *UpdateTransferConfigReq) (*UpdateTransferConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransferConfig not implemented")
}
func (UnimplementedDeliveryApiServer) DeleteTransferConfig(context.Context, *DeleteTransferConfigReq) (*DeleteTransferConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransferConfig not implemented")
}
func (UnimplementedDeliveryApiServer) GetTransferConfig(context.Context, *GetTransferConfigReq) (*GetTransferConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransferConfig not implemented")
}
func (UnimplementedDeliveryApiServer) GetTransferConfigByName(context.Context, *GetTransferConfigByNameReq) (*GetTransferConfigByNameRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransferConfigByName not implemented")
}
func (UnimplementedDeliveryApiServer) ListHistory(context.Context, *ListHistoryReq) (*ListHistoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHistory not implemented")
}
func (UnimplementedDeliveryApiServer) ListHistoryByTransferConfig(context.Context, *ListHistoryByTransferConfigReq) (*ListHistoryByTransferConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHistoryByTransferConfig not implemented")
}
func (UnimplementedDeliveryApiServer) ListCredentials(context.Context, *ListCredentialsReq) (*ListCredentialsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredentials not implemented")
}
func (UnimplementedDeliveryApiServer) GetCredential(context.Context, *GetCredentialReq) (*GetCredentialRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredential not implemented")
}
func (UnimplementedDeliveryApiServer) CreateCredential(context.Context, *CreateCredentialReq) (*CreateCredentialRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredential not implemented")
}
func (UnimplementedDeliveryApiServer) DeleteCredential(context.Context, *DeleteCredentialReq) (*DeleteCredentialRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredential not implemented")
}
func (UnimplementedDeliveryApiServer) UpdateCredential(context.Context, *UpdateCredentialReq) (*UpdateCredentialRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCredential not implemented")
}
func (UnimplementedDeliveryApiServer) mustEmbedUnimplementedDeliveryApiServer() {}

// UnsafeDeliveryApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveryApiServer will
// result in compilation errors.
type UnsafeDeliveryApiServer interface {
	mustEmbedUnimplementedDeliveryApiServer()
}

func RegisterDeliveryApiServer(s grpc.ServiceRegistrar, srv DeliveryApiServer) {
	s.RegisterService(&DeliveryApi_ServiceDesc, srv)
}

func _DeliveryApi_CreateTransferConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransferConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryApiServer).CreateTransferConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryApi_CreateTransferConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryApiServer).CreateTransferConfig(ctx, req.(*CreateTransferConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryApi_CreateDeliveryDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeliveryDefinitionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryApiServer).CreateDeliveryDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryApi_CreateDeliveryDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryApiServer).CreateDeliveryDefinition(ctx, req.(*CreateDeliveryDefinitionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryApi_CreateEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEncryptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryApiServer).CreateEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryApi_CreateEncryption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryApiServer).CreateEncryption(ctx, req.(*CreateEncryptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryApi_ListTransferConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransferConfigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryApiServer).ListTransferConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryApi_ListTransferConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryApiServer).ListTransferConfigs(ctx, req.(*ListTransferConfigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryApi_ListTransferConfigsByCredentialID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransferConfigsByCredentialIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryApiServer).ListTransferConfigsByCredentialID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryApi_ListTransferConfigsByCredentialID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryApiServer).ListTransferConfigsByCredentialID(ctx, req.(*ListTransferConfigsByCredentialIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryApi_UpdateTransferConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransferConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryApiServer).UpdateTransferConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryApi_UpdateTransferConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryApiServer).UpdateTransferConfig(ctx, req.(*UpdateTransferConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryApi_DeleteTransferConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTransferConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryApiServer).DeleteTransferConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryApi_DeleteTransferConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryApiServer).DeleteTransferConfig(ctx, req.(*DeleteTransferConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryApi_GetTransferConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransferConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryApiServer).GetTransferConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryApi_GetTransferConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryApiServer).GetTransferConfig(ctx, req.(*GetTransferConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryApi_GetTransferConfigByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransferConfigByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryApiServer).GetTransferConfigByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryApi_GetTransferConfigByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryApiServer).GetTransferConfigByName(ctx, req.(*GetTransferConfigByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryApi_ListHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryApiServer).ListHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryApi_ListHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryApiServer).ListHistory(ctx, req.(*ListHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryApi_ListHistoryByTransferConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHistoryByTransferConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryApiServer).ListHistoryByTransferConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryApi_ListHistoryByTransferConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryApiServer).ListHistoryByTransferConfig(ctx, req.(*ListHistoryByTransferConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryApi_ListCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryApiServer).ListCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryApi_ListCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryApiServer).ListCredentials(ctx, req.(*ListCredentialsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryApi_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryApiServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryApi_GetCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryApiServer).GetCredential(ctx, req.(*GetCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryApi_CreateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryApiServer).CreateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryApi_CreateCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryApiServer).CreateCredential(ctx, req.(*CreateCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryApi_DeleteCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryApiServer).DeleteCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryApi_DeleteCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryApiServer).DeleteCredential(ctx, req.(*DeleteCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryApi_UpdateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryApiServer).UpdateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryApi_UpdateCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryApiServer).UpdateCredential(ctx, req.(*UpdateCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DeliveryApi_ServiceDesc is the grpc.ServiceDesc for DeliveryApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeliveryApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.delivery.DeliveryApi",
	HandlerType: (*DeliveryApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransferConfig",
			Handler:    _DeliveryApi_CreateTransferConfig_Handler,
		},
		{
			MethodName: "CreateDeliveryDefinition",
			Handler:    _DeliveryApi_CreateDeliveryDefinition_Handler,
		},
		{
			MethodName: "CreateEncryption",
			Handler:    _DeliveryApi_CreateEncryption_Handler,
		},
		{
			MethodName: "ListTransferConfigs",
			Handler:    _DeliveryApi_ListTransferConfigs_Handler,
		},
		{
			MethodName: "ListTransferConfigsByCredentialID",
			Handler:    _DeliveryApi_ListTransferConfigsByCredentialID_Handler,
		},
		{
			MethodName: "UpdateTransferConfig",
			Handler:    _DeliveryApi_UpdateTransferConfig_Handler,
		},
		{
			MethodName: "DeleteTransferConfig",
			Handler:    _DeliveryApi_DeleteTransferConfig_Handler,
		},
		{
			MethodName: "GetTransferConfig",
			Handler:    _DeliveryApi_GetTransferConfig_Handler,
		},
		{
			MethodName: "GetTransferConfigByName",
			Handler:    _DeliveryApi_GetTransferConfigByName_Handler,
		},
		{
			MethodName: "ListHistory",
			Handler:    _DeliveryApi_ListHistory_Handler,
		},
		{
			MethodName: "ListHistoryByTransferConfig",
			Handler:    _DeliveryApi_ListHistoryByTransferConfig_Handler,
		},
		{
			MethodName: "ListCredentials",
			Handler:    _DeliveryApi_ListCredentials_Handler,
		},
		{
			MethodName: "GetCredential",
			Handler:    _DeliveryApi_GetCredential_Handler,
		},
		{
			MethodName: "CreateCredential",
			Handler:    _DeliveryApi_CreateCredential_Handler,
		},
		{
			MethodName: "DeleteCredential",
			Handler:    _DeliveryApi_DeleteCredential_Handler,
		},
		{
			MethodName: "UpdateCredential",
			Handler:    _DeliveryApi_UpdateCredential_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1alpha1/delivery/service.proto",
}
