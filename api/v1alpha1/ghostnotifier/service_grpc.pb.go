// Copyright (c) 2020, TCN Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1alpha1/ghostnotifier/service.proto

package ghostnotifier

import (
	context "context"
	commons "github.com/tcncloud/api-go/api/commons"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GhostNotifierApi_ListNotifications_FullMethodName = "/api.v1alpha1.ghostnotifier.GhostNotifierApi/ListNotifications"
)

// GhostNotifierApiClient is the client API for GhostNotifierApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GhostNotifierApiClient interface {
	// Opens a server side stream that will forward and ghost notifications to the client for the given user
	ListNotifications(ctx context.Context, in *ListNotificationsReq, opts ...grpc.CallOption) (GhostNotifierApi_ListNotificationsClient, error)
}

type ghostNotifierApiClient struct {
	cc grpc.ClientConnInterface
}

func NewGhostNotifierApiClient(cc grpc.ClientConnInterface) GhostNotifierApiClient {
	return &ghostNotifierApiClient{cc}
}

func (c *ghostNotifierApiClient) ListNotifications(ctx context.Context, in *ListNotificationsReq, opts ...grpc.CallOption) (GhostNotifierApi_ListNotificationsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GhostNotifierApi_ServiceDesc.Streams[0], GhostNotifierApi_ListNotifications_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &ghostNotifierApiListNotificationsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GhostNotifierApi_ListNotificationsClient interface {
	Recv() (*commons.GhostNotification, error)
	grpc.ClientStream
}

type ghostNotifierApiListNotificationsClient struct {
	grpc.ClientStream
}

func (x *ghostNotifierApiListNotificationsClient) Recv() (*commons.GhostNotification, error) {
	m := new(commons.GhostNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GhostNotifierApiServer is the server API for GhostNotifierApi service.
// All implementations must embed UnimplementedGhostNotifierApiServer
// for forward compatibility.
type GhostNotifierApiServer interface {
	// Opens a server side stream that will forward and ghost notifications to the client for the given user
	ListNotifications(*ListNotificationsReq, GhostNotifierApi_ListNotificationsServer) error
	mustEmbedUnimplementedGhostNotifierApiServer()
}

// UnimplementedGhostNotifierApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGhostNotifierApiServer struct{}

func (UnimplementedGhostNotifierApiServer) ListNotifications(*ListNotificationsReq, GhostNotifierApi_ListNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListNotifications not implemented")
}
func (UnimplementedGhostNotifierApiServer) mustEmbedUnimplementedGhostNotifierApiServer() {}
func (UnimplementedGhostNotifierApiServer) testEmbeddedByValue()                          {}

// UnsafeGhostNotifierApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GhostNotifierApiServer will
// result in compilation errors.
type UnsafeGhostNotifierApiServer interface {
	mustEmbedUnimplementedGhostNotifierApiServer()
}

func RegisterGhostNotifierApiServer(s grpc.ServiceRegistrar, srv GhostNotifierApiServer) {
	// If the following call pancis, it indicates UnimplementedGhostNotifierApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GhostNotifierApi_ServiceDesc, srv)
}

func _GhostNotifierApi_ListNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListNotificationsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GhostNotifierApiServer).ListNotifications(m, &ghostNotifierApiListNotificationsServer{ServerStream: stream})
}

type GhostNotifierApi_ListNotificationsServer interface {
	Send(*commons.GhostNotification) error
	grpc.ServerStream
}

type ghostNotifierApiListNotificationsServer struct {
	grpc.ServerStream
}

func (x *ghostNotifierApiListNotificationsServer) Send(m *commons.GhostNotification) error {
	return x.ServerStream.SendMsg(m)
}

// GhostNotifierApi_ServiceDesc is the grpc.ServiceDesc for GhostNotifierApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GhostNotifierApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.ghostnotifier.GhostNotifierApi",
	HandlerType: (*GhostNotifierApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListNotifications",
			Handler:       _GhostNotifierApi_ListNotifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1alpha1/ghostnotifier/service.proto",
}
