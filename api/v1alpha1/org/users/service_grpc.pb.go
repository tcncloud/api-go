// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1alpha1/org/users/service.proto

package users

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UsersService_CreateUser_FullMethodName                       = "/api.v1alpha1.org.users.UsersService/CreateUser"
	UsersService_CreateDelegatedUser_FullMethodName              = "/api.v1alpha1.org.users.UsersService/CreateDelegatedUser"
	UsersService_GetMyUser_FullMethodName                        = "/api.v1alpha1.org.users.UsersService/GetMyUser"
	UsersService_GetUser_FullMethodName                          = "/api.v1alpha1.org.users.UsersService/GetUser"
	UsersService_GetUserByOrgId_FullMethodName                   = "/api.v1alpha1.org.users.UsersService/GetUserByOrgId"
	UsersService_ListAgents_FullMethodName                       = "/api.v1alpha1.org.users.UsersService/ListAgents"
	UsersService_ListPublicUsers_FullMethodName                  = "/api.v1alpha1.org.users.UsersService/ListPublicUsers"
	UsersService_ListUsers_FullMethodName                        = "/api.v1alpha1.org.users.UsersService/ListUsers"
	UsersService_ListUsersByOrgId_FullMethodName                 = "/api.v1alpha1.org.users.UsersService/ListUsersByOrgId"
	UsersService_ListUsersByRegion_FullMethodName                = "/api.v1alpha1.org.users.UsersService/ListUsersByRegion"
	UsersService_UpdateMyUser_FullMethodName                     = "/api.v1alpha1.org.users.UsersService/UpdateMyUser"
	UsersService_UpdateUser_FullMethodName                       = "/api.v1alpha1.org.users.UsersService/UpdateUser"
	UsersService_UpdateUserLabels_FullMethodName                 = "/api.v1alpha1.org.users.UsersService/UpdateUserLabels"
	UsersService_UpdateUserCallerId_FullMethodName               = "/api.v1alpha1.org.users.UsersService/UpdateUserCallerId"
	UsersService_UpdateUserDisabled_FullMethodName               = "/api.v1alpha1.org.users.UsersService/UpdateUserDisabled"
	UsersService_UpdateUserDisabledByOrgId_FullMethodName        = "/api.v1alpha1.org.users.UsersService/UpdateUserDisabledByOrgId"
	UsersService_GetMyUserPasswordResetLink_FullMethodName       = "/api.v1alpha1.org.users.UsersService/GetMyUserPasswordResetLink"
	UsersService_GetUserPasswordResetLink_FullMethodName         = "/api.v1alpha1.org.users.UsersService/GetUserPasswordResetLink"
	UsersService_GetUserPasswordResetLinkByOrgId_FullMethodName  = "/api.v1alpha1.org.users.UsersService/GetUserPasswordResetLinkByOrgId"
	UsersService_CreatePasswordResetLink_FullMethodName          = "/api.v1alpha1.org.users.UsersService/CreatePasswordResetLink"
	UsersService_CreatePasswordResetLinkByOrgId_FullMethodName   = "/api.v1alpha1.org.users.UsersService/CreatePasswordResetLinkByOrgId"
	UsersService_GetUserLoginInfo_FullMethodName                 = "/api.v1alpha1.org.users.UsersService/GetUserLoginInfo"
	UsersService_GetUserEmailVerified_FullMethodName             = "/api.v1alpha1.org.users.UsersService/GetUserEmailVerified"
	UsersService_GetUserEmailVerifiedByOrgId_FullMethodName      = "/api.v1alpha1.org.users.UsersService/GetUserEmailVerifiedByOrgId"
	UsersService_ResetMyPassword_FullMethodName                  = "/api.v1alpha1.org.users.UsersService/ResetMyPassword"
	UsersService_ResetUserPassword_FullMethodName                = "/api.v1alpha1.org.users.UsersService/ResetUserPassword"
	UsersService_ResetUserPasswordByOrgId_FullMethodName         = "/api.v1alpha1.org.users.UsersService/ResetUserPasswordByOrgId"
	UsersService_SendUserEmailVerification_FullMethodName        = "/api.v1alpha1.org.users.UsersService/SendUserEmailVerification"
	UsersService_SendUserEmailVerificationByOrgId_FullMethodName = "/api.v1alpha1.org.users.UsersService/SendUserEmailVerificationByOrgId"
	UsersService_SendPasswordReset_FullMethodName                = "/api.v1alpha1.org.users.UsersService/SendPasswordReset"
	UsersService_SendPasswordResetByOrgId_FullMethodName         = "/api.v1alpha1.org.users.UsersService/SendPasswordResetByOrgId"
	UsersService_GetUserSessionData_FullMethodName               = "/api.v1alpha1.org.users.UsersService/GetUserSessionData"
	UsersService_GetAgentProfileGroup_FullMethodName             = "/api.v1alpha1.org.users.UsersService/GetAgentProfileGroup"
	UsersService_ListAgentProfileGroups_FullMethodName           = "/api.v1alpha1.org.users.UsersService/ListAgentProfileGroups"
	UsersService_UpdateAgentProfileGroup_FullMethodName          = "/api.v1alpha1.org.users.UsersService/UpdateAgentProfileGroup"
	UsersService_CreateAgentProfileGroup_FullMethodName          = "/api.v1alpha1.org.users.UsersService/CreateAgentProfileGroup"
	UsersService_DeleteAgentProfileGroup_FullMethodName          = "/api.v1alpha1.org.users.UsersService/DeleteAgentProfileGroup"
	UsersService_AssignAgentProfileGroups_FullMethodName         = "/api.v1alpha1.org.users.UsersService/AssignAgentProfileGroups"
	UsersService_AddUserSubscription_FullMethodName              = "/api.v1alpha1.org.users.UsersService/AddUserSubscription"
	UsersService_AddUserSubscriptionByUserId_FullMethodName      = "/api.v1alpha1.org.users.UsersService/AddUserSubscriptionByUserId"
	UsersService_GetUserSubscription_FullMethodName              = "/api.v1alpha1.org.users.UsersService/GetUserSubscription"
	UsersService_GetUserSubscriptionByUserId_FullMethodName      = "/api.v1alpha1.org.users.UsersService/GetUserSubscriptionByUserId"
	UsersService_UpdateUserSubscription_FullMethodName           = "/api.v1alpha1.org.users.UsersService/UpdateUserSubscription"
	UsersService_UpdateUserSubscriptionByUserId_FullMethodName   = "/api.v1alpha1.org.users.UsersService/UpdateUserSubscriptionByUserId"
	UsersService_RemoveUserSubscription_FullMethodName           = "/api.v1alpha1.org.users.UsersService/RemoveUserSubscription"
	UsersService_RemoveUserSubscriptionByUserId_FullMethodName   = "/api.v1alpha1.org.users.UsersService/RemoveUserSubscriptionByUserId"
	UsersService_ListUserSubscriptions_FullMethodName            = "/api.v1alpha1.org.users.UsersService/ListUserSubscriptions"
	UsersService_ListUserSubscriptionsByUserId_FullMethodName    = "/api.v1alpha1.org.users.UsersService/ListUserSubscriptionsByUserId"
	UsersService_ListOrgSubscriptions_FullMethodName             = "/api.v1alpha1.org.users.UsersService/ListOrgSubscriptions"
	UsersService_CreateAuthToken_FullMethodName                  = "/api.v1alpha1.org.users.UsersService/CreateAuthToken"
	UsersService_CreateAuthTokenByUserId_FullMethodName          = "/api.v1alpha1.org.users.UsersService/CreateAuthTokenByUserId"
	UsersService_ListAuthTokens_FullMethodName                   = "/api.v1alpha1.org.users.UsersService/ListAuthTokens"
	UsersService_ListAuthTokensByUserId_FullMethodName           = "/api.v1alpha1.org.users.UsersService/ListAuthTokensByUserId"
	UsersService_SetAuthTokenExpiration_FullMethodName           = "/api.v1alpha1.org.users.UsersService/SetAuthTokenExpiration"
	UsersService_SetAuthTokenExpirationByUserId_FullMethodName   = "/api.v1alpha1.org.users.UsersService/SetAuthTokenExpirationByUserId"
	UsersService_DeleteAuthToken_FullMethodName                  = "/api.v1alpha1.org.users.UsersService/DeleteAuthToken"
	UsersService_DeleteAuthTokenByUserId_FullMethodName          = "/api.v1alpha1.org.users.UsersService/DeleteAuthTokenByUserId"
	UsersService_RefreshMfaLockout_FullMethodName                = "/api.v1alpha1.org.users.UsersService/RefreshMfaLockout"
	UsersService_RefreshMfaLockoutByOrgId_FullMethodName         = "/api.v1alpha1.org.users.UsersService/RefreshMfaLockoutByOrgId"
	UsersService_SetMfaType_FullMethodName                       = "/api.v1alpha1.org.users.UsersService/SetMfaType"
	UsersService_SetMyMfaType_FullMethodName                     = "/api.v1alpha1.org.users.UsersService/SetMyMfaType"
	UsersService_EnableUserMfa_FullMethodName                    = "/api.v1alpha1.org.users.UsersService/EnableUserMfa"
	UsersService_EnableMyUserMfa_FullMethodName                  = "/api.v1alpha1.org.users.UsersService/EnableMyUserMfa"
	UsersService_GetUserMfaInfo_FullMethodName                   = "/api.v1alpha1.org.users.UsersService/GetUserMfaInfo"
	UsersService_GetMyUserMfaInfo_FullMethodName                 = "/api.v1alpha1.org.users.UsersService/GetMyUserMfaInfo"
	UsersService_AddGroupedUserIPRestrictions_FullMethodName     = "/api.v1alpha1.org.users.UsersService/AddGroupedUserIPRestrictions"
	UsersService_RemoveGroupedUserIPRestrictions_FullMethodName  = "/api.v1alpha1.org.users.UsersService/RemoveGroupedUserIPRestrictions"
	UsersService_ListUsersAllowedIps_FullMethodName              = "/api.v1alpha1.org.users.UsersService/ListUsersAllowedIps"
)

// UsersServiceClient is the client API for UsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersServiceClient interface {
	// CreateUser creates a new user and enables it for the region it is getting created in.
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// CreateDelegatedUser creates a new delegated user and enables it for the region it is getting created in.
	CreateDelegatedUser(ctx context.Context, in *CreateDelegatedUserRequest, opts ...grpc.CallOption) (*CreateDelegatedUserResponse, error)
	// GetMyUser returns a single user by provided claims.
	GetMyUser(ctx context.Context, in *GetMyUserRequest, opts ...grpc.CallOption) (*GetMyUserResponse, error)
	// GetUser returns a single user by UserId or by AgentSid.
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// GetUserByOrgId returns a single user by UserId and OrgId
	// Requires Customer Support permission and allows cross Org requests.
	GetUserByOrgId(ctx context.Context, in *GetUserByOrgIdRequest, opts ...grpc.CallOption) (*GetUserByOrgIdResponse, error)
	// ListAgents returns a list of Agents.
	ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (UsersService_ListAgentsClient, error)
	// ListPublicUsers returns a list of users with limited data for most applications.
	ListPublicUsers(ctx context.Context, in *ListPublicUsersRequest, opts ...grpc.CallOption) (UsersService_ListPublicUsersClient, error)
	// ListUsers returns a list of users.
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (UsersService_ListUsersClient, error)
	// ListUsersByOrgId returns a list of users.
	ListUsersByOrgId(ctx context.Context, in *ListUsersByOrgIdRequest, opts ...grpc.CallOption) (UsersService_ListUsersByOrgIdClient, error)
	// ListUsersByRegion returns a list of usersByRegion.
	ListUsersByRegion(ctx context.Context, in *ListUsersByRegionRequest, opts ...grpc.CallOption) (UsersService_ListUsersByRegionClient, error)
	// UpdateMyUser updates a user.
	UpdateMyUser(ctx context.Context, in *UpdateMyUserRequest, opts ...grpc.CallOption) (*UpdateMyUserResponse, error)
	// UpdateUser updates a user.
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// UpdateUserLabels updates a user's labels to be the passed in set of labels.
	UpdateUserLabels(ctx context.Context, in *UpdateUserLabelsRequest, opts ...grpc.CallOption) (*UpdateUserLabelsResponse, error)
	// UpdateUserCallerId updates a user.
	UpdateUserCallerId(ctx context.Context, in *UpdateUserCallerIdRequest, opts ...grpc.CallOption) (*UpdateUserCallerIdResponse, error)
	// UpdateUserDisabled updates whether a user is disabled.
	UpdateUserDisabled(ctx context.Context, in *UpdateUserDisabledRequest, opts ...grpc.CallOption) (*UpdateUserDisabledResponse, error)
	// UpdateUserDisabledByOrgId updates a user is disabled.
	UpdateUserDisabledByOrgId(ctx context.Context, in *UpdateUserDisabledByOrgIdRequest, opts ...grpc.CallOption) (*UpdateUserDisabledByOrgIdResponse, error)
	// GetMyUserPasswordResetLink updates a user's password.
	GetMyUserPasswordResetLink(ctx context.Context, in *GetMyUserPasswordResetLinkRequest, opts ...grpc.CallOption) (*GetMyUserPasswordResetLinkResponse, error)
	// GetUserPasswordResetLink gets a link to update a user's password.
	GetUserPasswordResetLink(ctx context.Context, in *GetUserPasswordResetLinkRequest, opts ...grpc.CallOption) (*GetUserPasswordResetLinkResponse, error)
	// GetUserPasswordResetLinkByOrgId gets a link to update a user's password.
	GetUserPasswordResetLinkByOrgId(ctx context.Context, in *GetUserPasswordResetLinkByOrgIdRequest, opts ...grpc.CallOption) (*GetUserPasswordResetLinkByOrgIdResponse, error)
	// CreatePasswordResetLink creates a password reset link for the given user id.
	CreatePasswordResetLink(ctx context.Context, in *CreatePasswordResetLinkRequest, opts ...grpc.CallOption) (*CreatePasswordResetLinkResponse, error)
	// CreatePasswordResetLinkByOrgId creates a password reset link for the given user id.
	CreatePasswordResetLinkByOrgId(ctx context.Context, in *CreatePasswordResetLinkByOrgIdRequest, opts ...grpc.CallOption) (*CreatePasswordResetLinkByOrgIdResponse, error)
	// Used to be called GetUserBlocked
	// GetUserLoginInfo gets information about a user's login.
	GetUserLoginInfo(ctx context.Context, in *GetUserLoginInfoRequest, opts ...grpc.CallOption) (*GetUserLoginInfoResponse, error)
	// GetUserEmailVerified gets whether the user's email is verified.
	GetUserEmailVerified(ctx context.Context, in *GetUserEmailVerifiedRequest, opts ...grpc.CallOption) (*GetUserEmailVerifiedResponse, error)
	// GetUserEmailVerifiedByOrgId gets whether the user's email is verified.
	GetUserEmailVerifiedByOrgId(ctx context.Context, in *GetUserEmailVerifiedByOrgIdRequest, opts ...grpc.CallOption) (*GetUserEmailVerifiedByOrgIdResponse, error)
	// ResetMyPassword resets the user's password.
	ResetMyPassword(ctx context.Context, in *ResetMyPasswordRequest, opts ...grpc.CallOption) (*ResetMyPasswordResponse, error)
	// ResetUserPassword resets the user's password.
	ResetUserPassword(ctx context.Context, in *ResetUserPasswordRequest, opts ...grpc.CallOption) (*ResetUserPasswordResponse, error)
	// ResetUserPasswordByOrgId resets the user's password.
	ResetUserPasswordByOrgId(ctx context.Context, in *ResetUserPasswordByOrgIdRequest, opts ...grpc.CallOption) (*ResetUserPasswordByOrgIdResponse, error)
	// SendUserEmailVerification sends a verification email to the user.
	SendUserEmailVerification(ctx context.Context, in *SendUserEmailVerificationRequest, opts ...grpc.CallOption) (*SendUserEmailVerificationResponse, error)
	// SendUserEmailVerificationByOrgId sends a verification email to the user.
	SendUserEmailVerificationByOrgId(ctx context.Context, in *SendUserEmailVerificationByOrgIdRequest, opts ...grpc.CallOption) (*SendUserEmailVerificationByOrgIdResponse, error)
	// SendPasswordReset sends a password reset email to the user.
	SendPasswordReset(ctx context.Context, in *SendPasswordResetRequest, opts ...grpc.CallOption) (*SendPasswordResetResponse, error)
	// SendPasswordResetByOrgId sends a password reset email to the user.
	SendPasswordResetByOrgId(ctx context.Context, in *SendPasswordResetByOrgIdRequest, opts ...grpc.CallOption) (*SendPasswordResetByOrgIdResponse, error)
	// GetUserSessionData returns data for the front end's session state
	GetUserSessionData(ctx context.Context, in *GetUserSessionDataRequest, opts ...grpc.CallOption) (*GetUserSessionDataResponse, error)
	// GetAgentProfileGroup returns an agent profile group by id
	GetAgentProfileGroup(ctx context.Context, in *GetAgentProfileGroupRequest, opts ...grpc.CallOption) (*GetAgentProfileGroupResponse, error)
	// ListAgentProfileGroups returns the agent profile groups associated with the current organization
	ListAgentProfileGroups(ctx context.Context, in *ListAgentProfileGroupsRequest, opts ...grpc.CallOption) (*ListAgentProfileGroupsResponse, error)
	// UpdateAgentProfileGroup updates an AgentProfileGroup. Can only update if user is in same org as AgentProfileGroup
	UpdateAgentProfileGroup(ctx context.Context, in *UpdateAgentProfileGroupRequest, opts ...grpc.CallOption) (*UpdateAgentProfileGroupResponse, error)
	// CreateAgentProfileGroup creates an AgentProfileGroup. Can only create if user is in same org as AgentProfileGroup
	CreateAgentProfileGroup(ctx context.Context, in *CreateAgentProfileGroupRequest, opts ...grpc.CallOption) (*CreateAgentProfileGroupResponse, error)
	// DeleteAgentProfileGroup deletes an AgentProfileGroup. Can only delete if user is in same org as AgentProfileGroup
	DeleteAgentProfileGroup(ctx context.Context, in *DeleteAgentProfileGroupRequest, opts ...grpc.CallOption) (*DeleteAgentProfileGroupResponse, error)
	// AssignAgentProfileGroups assigns a list of users to an AgentProfileGroup. Can only use if everything is in the same organization.
	AssignAgentProfileGroups(ctx context.Context, in *AssignAgentProfileGroupsRequest, opts ...grpc.CallOption) (*AssignAgentProfileGroupsResponse, error)
	// Creates a new user subscription.
	AddUserSubscription(ctx context.Context, in *AddUserSubscriptionRequest, opts ...grpc.CallOption) (*AddUserSubscriptionResponse, error)
	// Creates a new user subscription for a specified user with in requested users org.
	AddUserSubscriptionByUserId(ctx context.Context, in *AddUserSubscriptionByUserIdRequest, opts ...grpc.CallOption) (*AddUserSubscriptionByUserIdResponse, error)
	// Gets a user subscription.
	GetUserSubscription(ctx context.Context, in *GetUserSubscriptionRequest, opts ...grpc.CallOption) (*GetUserSubscriptionResponse, error)
	// Gets a user subscription for a specified user with in requested users org.
	GetUserSubscriptionByUserId(ctx context.Context, in *GetUserSubscriptionByUserIdRequest, opts ...grpc.CallOption) (*GetUserSubscriptionByUserIdResponse, error)
	// Updates a user subscription for the current user
	UpdateUserSubscription(ctx context.Context, in *UpdateUserSubscriptionRequest, opts ...grpc.CallOption) (*UpdateUserSubscriptionResponse, error)
	// Updates a user subscription for a given user id
	UpdateUserSubscriptionByUserId(ctx context.Context, in *UpdateUserSubscriptionByUserIdRequest, opts ...grpc.CallOption) (*UpdateUserSubscriptionByUserIdResponse, error)
	// Remove a user subscription.
	RemoveUserSubscription(ctx context.Context, in *RemoveUserSubscriptionRequest, opts ...grpc.CallOption) (*RemoveUserSubscriptionResponse, error)
	// Remove a user subscription by a given user id
	RemoveUserSubscriptionByUserId(ctx context.Context, in *RemoveUserSubscriptionByUserIdRequest, opts ...grpc.CallOption) (*RemoveUserSubscriptionByUserIdResponse, error)
	// Lists user subscriptions.
	ListUserSubscriptions(ctx context.Context, in *ListUserSubscriptionsRequest, opts ...grpc.CallOption) (*ListUserSubscriptionsResponse, error)
	// Lists user subscriptions.
	ListUserSubscriptionsByUserId(ctx context.Context, in *ListUserSubscriptionsByUserIdRequest, opts ...grpc.CallOption) (*ListUserSubscriptionsByUserIdResponse, error)
	// Lists subscriptions for multiple users in an org.
	ListOrgSubscriptions(ctx context.Context, in *ListOrgSubscriptionsRequest, opts ...grpc.CallOption) (*ListOrgSubscriptionsResponse, error)
	// AUTH TOKEN
	// CreateAuthToken creates an auth token for the current user.
	CreateAuthToken(ctx context.Context, in *CreateAuthTokenRequest, opts ...grpc.CallOption) (*CreateAuthTokenResponse, error)
	// CreateAuthTokenByUserId creates an auth token for the given user.
	CreateAuthTokenByUserId(ctx context.Context, in *CreateAuthTokenByUserIdRequest, opts ...grpc.CallOption) (*CreateAuthTokenByUserIdResponse, error)
	// ListAuthTokens list tokens of current user.
	ListAuthTokens(ctx context.Context, in *ListAuthTokensRequest, opts ...grpc.CallOption) (*ListAuthTokensResponse, error)
	// ListAuthTokensByUserId list tokens of given user.
	ListAuthTokensByUserId(ctx context.Context, in *ListAuthTokensByUserIdRequest, opts ...grpc.CallOption) (*ListAuthTokensByUserIdResponse, error)
	// SetAuthTokenExpiration sets expiration back one year for current user.
	SetAuthTokenExpiration(ctx context.Context, in *SetAuthTokenExpirationRequest, opts ...grpc.CallOption) (*SetAuthTokenExpirationResponse, error)
	// SetAuthTokenExpirationByUserId sets expiration back one year for given user.
	SetAuthTokenExpirationByUserId(ctx context.Context, in *SetAuthTokenExpirationByUserIdRequest, opts ...grpc.CallOption) (*SetAuthTokenExpirationByUserIdResponse, error)
	// DeleteAuthToken deletes a given auth token for the current user.
	DeleteAuthToken(ctx context.Context, in *DeleteAuthTokenRequest, opts ...grpc.CallOption) (*DeleteAuthTokenResponse, error)
	// DeleteAuthTokenByUserId deletes a given auth token for the given user.
	DeleteAuthTokenByUserId(ctx context.Context, in *DeleteAuthTokenByUserIdRequest, opts ...grpc.CallOption) (*DeleteAuthTokenByUserIdResponse, error)
	// RefreshMfaLockout resets the lockout timer for the given user.
	RefreshMfaLockout(ctx context.Context, in *RefreshMfaLockoutRequest, opts ...grpc.CallOption) (*RefreshMfaLockoutResponse, error)
	// RefreshMfaLockoutByOrgId resets the lockout timer for the given user and org id.
	RefreshMfaLockoutByOrgId(ctx context.Context, in *RefreshMfaLockoutByOrgIdRequest, opts ...grpc.CallOption) (*RefreshMfaLockoutByOrgIdResponse, error)
	// SetMfaType sets the given user's mfa type.
	SetMfaType(ctx context.Context, in *SetMfaTypeRequest, opts ...grpc.CallOption) (*SetMfaTypeResponse, error)
	// SetMyMfaType sets the current user's mfa type.
	SetMyMfaType(ctx context.Context, in *SetMyMfaTypeRequest, opts ...grpc.CallOption) (*SetMyMfaTypeResponse, error)
	// EnableUserMfa enables or disables mfa for the given user
	EnableUserMfa(ctx context.Context, in *EnableUserMfaRequest, opts ...grpc.CallOption) (*EnableUserMfaResponse, error)
	// EnableMyUserMfa enables mfa for the current user
	EnableMyUserMfa(ctx context.Context, in *EnableMyUserMfaRequest, opts ...grpc.CallOption) (*EnableMyUserMfaResponse, error)
	// GetUserMfaInfo returns the mfa info for the given user.
	GetUserMfaInfo(ctx context.Context, in *GetUserMfaInfoRequest, opts ...grpc.CallOption) (*GetUserMfaInfoResponse, error)
	// GetMyUserMfaInfo returns the mfa info for the current user.
	GetMyUserMfaInfo(ctx context.Context, in *GetMyUserMfaInfoRequest, opts ...grpc.CallOption) (*GetMyUserMfaInfoResponse, error)
	// AddGroupedUserIPRestrictions adds a user or list of user's IPs they
	// are required to authenticate with
	AddGroupedUserIPRestrictions(ctx context.Context, in *AddGroupedUserIPRestrictionsRequest, opts ...grpc.CallOption) (*AddGroupedUserIPRestrictionsResponse, error)
	// RemoveGroupedUserIPRestrictions removes a user or list of user's IPs they
	// are required to authenticate with
	RemoveGroupedUserIPRestrictions(ctx context.Context, in *RemoveGroupedUserIPRestrictionsRequest, opts ...grpc.CallOption) (*RemoveGroupedUserIPRestrictionsResponse, error)
	// ListUsersAllowedIps returns the list of allowed IPs for the user.
	ListUsersAllowedIps(ctx context.Context, in *ListUsersAllowedIpsRequest, opts ...grpc.CallOption) (*ListUsersAllowedIpsResponse, error)
}

type usersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceClient(cc grpc.ClientConnInterface) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, UsersService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CreateDelegatedUser(ctx context.Context, in *CreateDelegatedUserRequest, opts ...grpc.CallOption) (*CreateDelegatedUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDelegatedUserResponse)
	err := c.cc.Invoke(ctx, UsersService_CreateDelegatedUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetMyUser(ctx context.Context, in *GetMyUserRequest, opts ...grpc.CallOption) (*GetMyUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMyUserResponse)
	err := c.cc.Invoke(ctx, UsersService_GetMyUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, UsersService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserByOrgId(ctx context.Context, in *GetUserByOrgIdRequest, opts ...grpc.CallOption) (*GetUserByOrgIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserByOrgIdResponse)
	err := c.cc.Invoke(ctx, UsersService_GetUserByOrgId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (UsersService_ListAgentsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UsersService_ServiceDesc.Streams[0], UsersService_ListAgents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &usersServiceListAgentsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UsersService_ListAgentsClient interface {
	Recv() (*ListAgentsResponse, error)
	grpc.ClientStream
}

type usersServiceListAgentsClient struct {
	grpc.ClientStream
}

func (x *usersServiceListAgentsClient) Recv() (*ListAgentsResponse, error) {
	m := new(ListAgentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usersServiceClient) ListPublicUsers(ctx context.Context, in *ListPublicUsersRequest, opts ...grpc.CallOption) (UsersService_ListPublicUsersClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UsersService_ServiceDesc.Streams[1], UsersService_ListPublicUsers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &usersServiceListPublicUsersClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UsersService_ListPublicUsersClient interface {
	Recv() (*ListPublicUsersResponse, error)
	grpc.ClientStream
}

type usersServiceListPublicUsersClient struct {
	grpc.ClientStream
}

func (x *usersServiceListPublicUsersClient) Recv() (*ListPublicUsersResponse, error) {
	m := new(ListPublicUsersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usersServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (UsersService_ListUsersClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UsersService_ServiceDesc.Streams[2], UsersService_ListUsers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &usersServiceListUsersClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UsersService_ListUsersClient interface {
	Recv() (*ListUsersResponse, error)
	grpc.ClientStream
}

type usersServiceListUsersClient struct {
	grpc.ClientStream
}

func (x *usersServiceListUsersClient) Recv() (*ListUsersResponse, error) {
	m := new(ListUsersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usersServiceClient) ListUsersByOrgId(ctx context.Context, in *ListUsersByOrgIdRequest, opts ...grpc.CallOption) (UsersService_ListUsersByOrgIdClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UsersService_ServiceDesc.Streams[3], UsersService_ListUsersByOrgId_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &usersServiceListUsersByOrgIdClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UsersService_ListUsersByOrgIdClient interface {
	Recv() (*ListUsersByOrgIdResponse, error)
	grpc.ClientStream
}

type usersServiceListUsersByOrgIdClient struct {
	grpc.ClientStream
}

func (x *usersServiceListUsersByOrgIdClient) Recv() (*ListUsersByOrgIdResponse, error) {
	m := new(ListUsersByOrgIdResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usersServiceClient) ListUsersByRegion(ctx context.Context, in *ListUsersByRegionRequest, opts ...grpc.CallOption) (UsersService_ListUsersByRegionClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UsersService_ServiceDesc.Streams[4], UsersService_ListUsersByRegion_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &usersServiceListUsersByRegionClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UsersService_ListUsersByRegionClient interface {
	Recv() (*ListUsersByRegionResponse, error)
	grpc.ClientStream
}

type usersServiceListUsersByRegionClient struct {
	grpc.ClientStream
}

func (x *usersServiceListUsersByRegionClient) Recv() (*ListUsersByRegionResponse, error) {
	m := new(ListUsersByRegionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usersServiceClient) UpdateMyUser(ctx context.Context, in *UpdateMyUserRequest, opts ...grpc.CallOption) (*UpdateMyUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMyUserResponse)
	err := c.cc.Invoke(ctx, UsersService_UpdateMyUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, UsersService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateUserLabels(ctx context.Context, in *UpdateUserLabelsRequest, opts ...grpc.CallOption) (*UpdateUserLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserLabelsResponse)
	err := c.cc.Invoke(ctx, UsersService_UpdateUserLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateUserCallerId(ctx context.Context, in *UpdateUserCallerIdRequest, opts ...grpc.CallOption) (*UpdateUserCallerIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserCallerIdResponse)
	err := c.cc.Invoke(ctx, UsersService_UpdateUserCallerId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateUserDisabled(ctx context.Context, in *UpdateUserDisabledRequest, opts ...grpc.CallOption) (*UpdateUserDisabledResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserDisabledResponse)
	err := c.cc.Invoke(ctx, UsersService_UpdateUserDisabled_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateUserDisabledByOrgId(ctx context.Context, in *UpdateUserDisabledByOrgIdRequest, opts ...grpc.CallOption) (*UpdateUserDisabledByOrgIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserDisabledByOrgIdResponse)
	err := c.cc.Invoke(ctx, UsersService_UpdateUserDisabledByOrgId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetMyUserPasswordResetLink(ctx context.Context, in *GetMyUserPasswordResetLinkRequest, opts ...grpc.CallOption) (*GetMyUserPasswordResetLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMyUserPasswordResetLinkResponse)
	err := c.cc.Invoke(ctx, UsersService_GetMyUserPasswordResetLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserPasswordResetLink(ctx context.Context, in *GetUserPasswordResetLinkRequest, opts ...grpc.CallOption) (*GetUserPasswordResetLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPasswordResetLinkResponse)
	err := c.cc.Invoke(ctx, UsersService_GetUserPasswordResetLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserPasswordResetLinkByOrgId(ctx context.Context, in *GetUserPasswordResetLinkByOrgIdRequest, opts ...grpc.CallOption) (*GetUserPasswordResetLinkByOrgIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPasswordResetLinkByOrgIdResponse)
	err := c.cc.Invoke(ctx, UsersService_GetUserPasswordResetLinkByOrgId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CreatePasswordResetLink(ctx context.Context, in *CreatePasswordResetLinkRequest, opts ...grpc.CallOption) (*CreatePasswordResetLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePasswordResetLinkResponse)
	err := c.cc.Invoke(ctx, UsersService_CreatePasswordResetLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CreatePasswordResetLinkByOrgId(ctx context.Context, in *CreatePasswordResetLinkByOrgIdRequest, opts ...grpc.CallOption) (*CreatePasswordResetLinkByOrgIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePasswordResetLinkByOrgIdResponse)
	err := c.cc.Invoke(ctx, UsersService_CreatePasswordResetLinkByOrgId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserLoginInfo(ctx context.Context, in *GetUserLoginInfoRequest, opts ...grpc.CallOption) (*GetUserLoginInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserLoginInfoResponse)
	err := c.cc.Invoke(ctx, UsersService_GetUserLoginInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserEmailVerified(ctx context.Context, in *GetUserEmailVerifiedRequest, opts ...grpc.CallOption) (*GetUserEmailVerifiedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserEmailVerifiedResponse)
	err := c.cc.Invoke(ctx, UsersService_GetUserEmailVerified_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserEmailVerifiedByOrgId(ctx context.Context, in *GetUserEmailVerifiedByOrgIdRequest, opts ...grpc.CallOption) (*GetUserEmailVerifiedByOrgIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserEmailVerifiedByOrgIdResponse)
	err := c.cc.Invoke(ctx, UsersService_GetUserEmailVerifiedByOrgId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ResetMyPassword(ctx context.Context, in *ResetMyPasswordRequest, opts ...grpc.CallOption) (*ResetMyPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetMyPasswordResponse)
	err := c.cc.Invoke(ctx, UsersService_ResetMyPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ResetUserPassword(ctx context.Context, in *ResetUserPasswordRequest, opts ...grpc.CallOption) (*ResetUserPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetUserPasswordResponse)
	err := c.cc.Invoke(ctx, UsersService_ResetUserPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ResetUserPasswordByOrgId(ctx context.Context, in *ResetUserPasswordByOrgIdRequest, opts ...grpc.CallOption) (*ResetUserPasswordByOrgIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetUserPasswordByOrgIdResponse)
	err := c.cc.Invoke(ctx, UsersService_ResetUserPasswordByOrgId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) SendUserEmailVerification(ctx context.Context, in *SendUserEmailVerificationRequest, opts ...grpc.CallOption) (*SendUserEmailVerificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendUserEmailVerificationResponse)
	err := c.cc.Invoke(ctx, UsersService_SendUserEmailVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) SendUserEmailVerificationByOrgId(ctx context.Context, in *SendUserEmailVerificationByOrgIdRequest, opts ...grpc.CallOption) (*SendUserEmailVerificationByOrgIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendUserEmailVerificationByOrgIdResponse)
	err := c.cc.Invoke(ctx, UsersService_SendUserEmailVerificationByOrgId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) SendPasswordReset(ctx context.Context, in *SendPasswordResetRequest, opts ...grpc.CallOption) (*SendPasswordResetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendPasswordResetResponse)
	err := c.cc.Invoke(ctx, UsersService_SendPasswordReset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) SendPasswordResetByOrgId(ctx context.Context, in *SendPasswordResetByOrgIdRequest, opts ...grpc.CallOption) (*SendPasswordResetByOrgIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendPasswordResetByOrgIdResponse)
	err := c.cc.Invoke(ctx, UsersService_SendPasswordResetByOrgId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserSessionData(ctx context.Context, in *GetUserSessionDataRequest, opts ...grpc.CallOption) (*GetUserSessionDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserSessionDataResponse)
	err := c.cc.Invoke(ctx, UsersService_GetUserSessionData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetAgentProfileGroup(ctx context.Context, in *GetAgentProfileGroupRequest, opts ...grpc.CallOption) (*GetAgentProfileGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentProfileGroupResponse)
	err := c.cc.Invoke(ctx, UsersService_GetAgentProfileGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ListAgentProfileGroups(ctx context.Context, in *ListAgentProfileGroupsRequest, opts ...grpc.CallOption) (*ListAgentProfileGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentProfileGroupsResponse)
	err := c.cc.Invoke(ctx, UsersService_ListAgentProfileGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateAgentProfileGroup(ctx context.Context, in *UpdateAgentProfileGroupRequest, opts ...grpc.CallOption) (*UpdateAgentProfileGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAgentProfileGroupResponse)
	err := c.cc.Invoke(ctx, UsersService_UpdateAgentProfileGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CreateAgentProfileGroup(ctx context.Context, in *CreateAgentProfileGroupRequest, opts ...grpc.CallOption) (*CreateAgentProfileGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAgentProfileGroupResponse)
	err := c.cc.Invoke(ctx, UsersService_CreateAgentProfileGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DeleteAgentProfileGroup(ctx context.Context, in *DeleteAgentProfileGroupRequest, opts ...grpc.CallOption) (*DeleteAgentProfileGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAgentProfileGroupResponse)
	err := c.cc.Invoke(ctx, UsersService_DeleteAgentProfileGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) AssignAgentProfileGroups(ctx context.Context, in *AssignAgentProfileGroupsRequest, opts ...grpc.CallOption) (*AssignAgentProfileGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignAgentProfileGroupsResponse)
	err := c.cc.Invoke(ctx, UsersService_AssignAgentProfileGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) AddUserSubscription(ctx context.Context, in *AddUserSubscriptionRequest, opts ...grpc.CallOption) (*AddUserSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserSubscriptionResponse)
	err := c.cc.Invoke(ctx, UsersService_AddUserSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) AddUserSubscriptionByUserId(ctx context.Context, in *AddUserSubscriptionByUserIdRequest, opts ...grpc.CallOption) (*AddUserSubscriptionByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserSubscriptionByUserIdResponse)
	err := c.cc.Invoke(ctx, UsersService_AddUserSubscriptionByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserSubscription(ctx context.Context, in *GetUserSubscriptionRequest, opts ...grpc.CallOption) (*GetUserSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserSubscriptionResponse)
	err := c.cc.Invoke(ctx, UsersService_GetUserSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserSubscriptionByUserId(ctx context.Context, in *GetUserSubscriptionByUserIdRequest, opts ...grpc.CallOption) (*GetUserSubscriptionByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserSubscriptionByUserIdResponse)
	err := c.cc.Invoke(ctx, UsersService_GetUserSubscriptionByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateUserSubscription(ctx context.Context, in *UpdateUserSubscriptionRequest, opts ...grpc.CallOption) (*UpdateUserSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserSubscriptionResponse)
	err := c.cc.Invoke(ctx, UsersService_UpdateUserSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateUserSubscriptionByUserId(ctx context.Context, in *UpdateUserSubscriptionByUserIdRequest, opts ...grpc.CallOption) (*UpdateUserSubscriptionByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserSubscriptionByUserIdResponse)
	err := c.cc.Invoke(ctx, UsersService_UpdateUserSubscriptionByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) RemoveUserSubscription(ctx context.Context, in *RemoveUserSubscriptionRequest, opts ...grpc.CallOption) (*RemoveUserSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUserSubscriptionResponse)
	err := c.cc.Invoke(ctx, UsersService_RemoveUserSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) RemoveUserSubscriptionByUserId(ctx context.Context, in *RemoveUserSubscriptionByUserIdRequest, opts ...grpc.CallOption) (*RemoveUserSubscriptionByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUserSubscriptionByUserIdResponse)
	err := c.cc.Invoke(ctx, UsersService_RemoveUserSubscriptionByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ListUserSubscriptions(ctx context.Context, in *ListUserSubscriptionsRequest, opts ...grpc.CallOption) (*ListUserSubscriptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserSubscriptionsResponse)
	err := c.cc.Invoke(ctx, UsersService_ListUserSubscriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ListUserSubscriptionsByUserId(ctx context.Context, in *ListUserSubscriptionsByUserIdRequest, opts ...grpc.CallOption) (*ListUserSubscriptionsByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserSubscriptionsByUserIdResponse)
	err := c.cc.Invoke(ctx, UsersService_ListUserSubscriptionsByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ListOrgSubscriptions(ctx context.Context, in *ListOrgSubscriptionsRequest, opts ...grpc.CallOption) (*ListOrgSubscriptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrgSubscriptionsResponse)
	err := c.cc.Invoke(ctx, UsersService_ListOrgSubscriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CreateAuthToken(ctx context.Context, in *CreateAuthTokenRequest, opts ...grpc.CallOption) (*CreateAuthTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAuthTokenResponse)
	err := c.cc.Invoke(ctx, UsersService_CreateAuthToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CreateAuthTokenByUserId(ctx context.Context, in *CreateAuthTokenByUserIdRequest, opts ...grpc.CallOption) (*CreateAuthTokenByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAuthTokenByUserIdResponse)
	err := c.cc.Invoke(ctx, UsersService_CreateAuthTokenByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ListAuthTokens(ctx context.Context, in *ListAuthTokensRequest, opts ...grpc.CallOption) (*ListAuthTokensResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAuthTokensResponse)
	err := c.cc.Invoke(ctx, UsersService_ListAuthTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ListAuthTokensByUserId(ctx context.Context, in *ListAuthTokensByUserIdRequest, opts ...grpc.CallOption) (*ListAuthTokensByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAuthTokensByUserIdResponse)
	err := c.cc.Invoke(ctx, UsersService_ListAuthTokensByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) SetAuthTokenExpiration(ctx context.Context, in *SetAuthTokenExpirationRequest, opts ...grpc.CallOption) (*SetAuthTokenExpirationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAuthTokenExpirationResponse)
	err := c.cc.Invoke(ctx, UsersService_SetAuthTokenExpiration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) SetAuthTokenExpirationByUserId(ctx context.Context, in *SetAuthTokenExpirationByUserIdRequest, opts ...grpc.CallOption) (*SetAuthTokenExpirationByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAuthTokenExpirationByUserIdResponse)
	err := c.cc.Invoke(ctx, UsersService_SetAuthTokenExpirationByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DeleteAuthToken(ctx context.Context, in *DeleteAuthTokenRequest, opts ...grpc.CallOption) (*DeleteAuthTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAuthTokenResponse)
	err := c.cc.Invoke(ctx, UsersService_DeleteAuthToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DeleteAuthTokenByUserId(ctx context.Context, in *DeleteAuthTokenByUserIdRequest, opts ...grpc.CallOption) (*DeleteAuthTokenByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAuthTokenByUserIdResponse)
	err := c.cc.Invoke(ctx, UsersService_DeleteAuthTokenByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) RefreshMfaLockout(ctx context.Context, in *RefreshMfaLockoutRequest, opts ...grpc.CallOption) (*RefreshMfaLockoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshMfaLockoutResponse)
	err := c.cc.Invoke(ctx, UsersService_RefreshMfaLockout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) RefreshMfaLockoutByOrgId(ctx context.Context, in *RefreshMfaLockoutByOrgIdRequest, opts ...grpc.CallOption) (*RefreshMfaLockoutByOrgIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshMfaLockoutByOrgIdResponse)
	err := c.cc.Invoke(ctx, UsersService_RefreshMfaLockoutByOrgId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) SetMfaType(ctx context.Context, in *SetMfaTypeRequest, opts ...grpc.CallOption) (*SetMfaTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetMfaTypeResponse)
	err := c.cc.Invoke(ctx, UsersService_SetMfaType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) SetMyMfaType(ctx context.Context, in *SetMyMfaTypeRequest, opts ...grpc.CallOption) (*SetMyMfaTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetMyMfaTypeResponse)
	err := c.cc.Invoke(ctx, UsersService_SetMyMfaType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) EnableUserMfa(ctx context.Context, in *EnableUserMfaRequest, opts ...grpc.CallOption) (*EnableUserMfaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableUserMfaResponse)
	err := c.cc.Invoke(ctx, UsersService_EnableUserMfa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) EnableMyUserMfa(ctx context.Context, in *EnableMyUserMfaRequest, opts ...grpc.CallOption) (*EnableMyUserMfaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableMyUserMfaResponse)
	err := c.cc.Invoke(ctx, UsersService_EnableMyUserMfa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserMfaInfo(ctx context.Context, in *GetUserMfaInfoRequest, opts ...grpc.CallOption) (*GetUserMfaInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserMfaInfoResponse)
	err := c.cc.Invoke(ctx, UsersService_GetUserMfaInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetMyUserMfaInfo(ctx context.Context, in *GetMyUserMfaInfoRequest, opts ...grpc.CallOption) (*GetMyUserMfaInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMyUserMfaInfoResponse)
	err := c.cc.Invoke(ctx, UsersService_GetMyUserMfaInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) AddGroupedUserIPRestrictions(ctx context.Context, in *AddGroupedUserIPRestrictionsRequest, opts ...grpc.CallOption) (*AddGroupedUserIPRestrictionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddGroupedUserIPRestrictionsResponse)
	err := c.cc.Invoke(ctx, UsersService_AddGroupedUserIPRestrictions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) RemoveGroupedUserIPRestrictions(ctx context.Context, in *RemoveGroupedUserIPRestrictionsRequest, opts ...grpc.CallOption) (*RemoveGroupedUserIPRestrictionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveGroupedUserIPRestrictionsResponse)
	err := c.cc.Invoke(ctx, UsersService_RemoveGroupedUserIPRestrictions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ListUsersAllowedIps(ctx context.Context, in *ListUsersAllowedIpsRequest, opts ...grpc.CallOption) (*ListUsersAllowedIpsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersAllowedIpsResponse)
	err := c.cc.Invoke(ctx, UsersService_ListUsersAllowedIps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServiceServer is the server API for UsersService service.
// All implementations must embed UnimplementedUsersServiceServer
// for forward compatibility.
type UsersServiceServer interface {
	// CreateUser creates a new user and enables it for the region it is getting created in.
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// CreateDelegatedUser creates a new delegated user and enables it for the region it is getting created in.
	CreateDelegatedUser(context.Context, *CreateDelegatedUserRequest) (*CreateDelegatedUserResponse, error)
	// GetMyUser returns a single user by provided claims.
	GetMyUser(context.Context, *GetMyUserRequest) (*GetMyUserResponse, error)
	// GetUser returns a single user by UserId or by AgentSid.
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// GetUserByOrgId returns a single user by UserId and OrgId
	// Requires Customer Support permission and allows cross Org requests.
	GetUserByOrgId(context.Context, *GetUserByOrgIdRequest) (*GetUserByOrgIdResponse, error)
	// ListAgents returns a list of Agents.
	ListAgents(*ListAgentsRequest, UsersService_ListAgentsServer) error
	// ListPublicUsers returns a list of users with limited data for most applications.
	ListPublicUsers(*ListPublicUsersRequest, UsersService_ListPublicUsersServer) error
	// ListUsers returns a list of users.
	ListUsers(*ListUsersRequest, UsersService_ListUsersServer) error
	// ListUsersByOrgId returns a list of users.
	ListUsersByOrgId(*ListUsersByOrgIdRequest, UsersService_ListUsersByOrgIdServer) error
	// ListUsersByRegion returns a list of usersByRegion.
	ListUsersByRegion(*ListUsersByRegionRequest, UsersService_ListUsersByRegionServer) error
	// UpdateMyUser updates a user.
	UpdateMyUser(context.Context, *UpdateMyUserRequest) (*UpdateMyUserResponse, error)
	// UpdateUser updates a user.
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// UpdateUserLabels updates a user's labels to be the passed in set of labels.
	UpdateUserLabels(context.Context, *UpdateUserLabelsRequest) (*UpdateUserLabelsResponse, error)
	// UpdateUserCallerId updates a user.
	UpdateUserCallerId(context.Context, *UpdateUserCallerIdRequest) (*UpdateUserCallerIdResponse, error)
	// UpdateUserDisabled updates whether a user is disabled.
	UpdateUserDisabled(context.Context, *UpdateUserDisabledRequest) (*UpdateUserDisabledResponse, error)
	// UpdateUserDisabledByOrgId updates a user is disabled.
	UpdateUserDisabledByOrgId(context.Context, *UpdateUserDisabledByOrgIdRequest) (*UpdateUserDisabledByOrgIdResponse, error)
	// GetMyUserPasswordResetLink updates a user's password.
	GetMyUserPasswordResetLink(context.Context, *GetMyUserPasswordResetLinkRequest) (*GetMyUserPasswordResetLinkResponse, error)
	// GetUserPasswordResetLink gets a link to update a user's password.
	GetUserPasswordResetLink(context.Context, *GetUserPasswordResetLinkRequest) (*GetUserPasswordResetLinkResponse, error)
	// GetUserPasswordResetLinkByOrgId gets a link to update a user's password.
	GetUserPasswordResetLinkByOrgId(context.Context, *GetUserPasswordResetLinkByOrgIdRequest) (*GetUserPasswordResetLinkByOrgIdResponse, error)
	// CreatePasswordResetLink creates a password reset link for the given user id.
	CreatePasswordResetLink(context.Context, *CreatePasswordResetLinkRequest) (*CreatePasswordResetLinkResponse, error)
	// CreatePasswordResetLinkByOrgId creates a password reset link for the given user id.
	CreatePasswordResetLinkByOrgId(context.Context, *CreatePasswordResetLinkByOrgIdRequest) (*CreatePasswordResetLinkByOrgIdResponse, error)
	// Used to be called GetUserBlocked
	// GetUserLoginInfo gets information about a user's login.
	GetUserLoginInfo(context.Context, *GetUserLoginInfoRequest) (*GetUserLoginInfoResponse, error)
	// GetUserEmailVerified gets whether the user's email is verified.
	GetUserEmailVerified(context.Context, *GetUserEmailVerifiedRequest) (*GetUserEmailVerifiedResponse, error)
	// GetUserEmailVerifiedByOrgId gets whether the user's email is verified.
	GetUserEmailVerifiedByOrgId(context.Context, *GetUserEmailVerifiedByOrgIdRequest) (*GetUserEmailVerifiedByOrgIdResponse, error)
	// ResetMyPassword resets the user's password.
	ResetMyPassword(context.Context, *ResetMyPasswordRequest) (*ResetMyPasswordResponse, error)
	// ResetUserPassword resets the user's password.
	ResetUserPassword(context.Context, *ResetUserPasswordRequest) (*ResetUserPasswordResponse, error)
	// ResetUserPasswordByOrgId resets the user's password.
	ResetUserPasswordByOrgId(context.Context, *ResetUserPasswordByOrgIdRequest) (*ResetUserPasswordByOrgIdResponse, error)
	// SendUserEmailVerification sends a verification email to the user.
	SendUserEmailVerification(context.Context, *SendUserEmailVerificationRequest) (*SendUserEmailVerificationResponse, error)
	// SendUserEmailVerificationByOrgId sends a verification email to the user.
	SendUserEmailVerificationByOrgId(context.Context, *SendUserEmailVerificationByOrgIdRequest) (*SendUserEmailVerificationByOrgIdResponse, error)
	// SendPasswordReset sends a password reset email to the user.
	SendPasswordReset(context.Context, *SendPasswordResetRequest) (*SendPasswordResetResponse, error)
	// SendPasswordResetByOrgId sends a password reset email to the user.
	SendPasswordResetByOrgId(context.Context, *SendPasswordResetByOrgIdRequest) (*SendPasswordResetByOrgIdResponse, error)
	// GetUserSessionData returns data for the front end's session state
	GetUserSessionData(context.Context, *GetUserSessionDataRequest) (*GetUserSessionDataResponse, error)
	// GetAgentProfileGroup returns an agent profile group by id
	GetAgentProfileGroup(context.Context, *GetAgentProfileGroupRequest) (*GetAgentProfileGroupResponse, error)
	// ListAgentProfileGroups returns the agent profile groups associated with the current organization
	ListAgentProfileGroups(context.Context, *ListAgentProfileGroupsRequest) (*ListAgentProfileGroupsResponse, error)
	// UpdateAgentProfileGroup updates an AgentProfileGroup. Can only update if user is in same org as AgentProfileGroup
	UpdateAgentProfileGroup(context.Context, *UpdateAgentProfileGroupRequest) (*UpdateAgentProfileGroupResponse, error)
	// CreateAgentProfileGroup creates an AgentProfileGroup. Can only create if user is in same org as AgentProfileGroup
	CreateAgentProfileGroup(context.Context, *CreateAgentProfileGroupRequest) (*CreateAgentProfileGroupResponse, error)
	// DeleteAgentProfileGroup deletes an AgentProfileGroup. Can only delete if user is in same org as AgentProfileGroup
	DeleteAgentProfileGroup(context.Context, *DeleteAgentProfileGroupRequest) (*DeleteAgentProfileGroupResponse, error)
	// AssignAgentProfileGroups assigns a list of users to an AgentProfileGroup. Can only use if everything is in the same organization.
	AssignAgentProfileGroups(context.Context, *AssignAgentProfileGroupsRequest) (*AssignAgentProfileGroupsResponse, error)
	// Creates a new user subscription.
	AddUserSubscription(context.Context, *AddUserSubscriptionRequest) (*AddUserSubscriptionResponse, error)
	// Creates a new user subscription for a specified user with in requested users org.
	AddUserSubscriptionByUserId(context.Context, *AddUserSubscriptionByUserIdRequest) (*AddUserSubscriptionByUserIdResponse, error)
	// Gets a user subscription.
	GetUserSubscription(context.Context, *GetUserSubscriptionRequest) (*GetUserSubscriptionResponse, error)
	// Gets a user subscription for a specified user with in requested users org.
	GetUserSubscriptionByUserId(context.Context, *GetUserSubscriptionByUserIdRequest) (*GetUserSubscriptionByUserIdResponse, error)
	// Updates a user subscription for the current user
	UpdateUserSubscription(context.Context, *UpdateUserSubscriptionRequest) (*UpdateUserSubscriptionResponse, error)
	// Updates a user subscription for a given user id
	UpdateUserSubscriptionByUserId(context.Context, *UpdateUserSubscriptionByUserIdRequest) (*UpdateUserSubscriptionByUserIdResponse, error)
	// Remove a user subscription.
	RemoveUserSubscription(context.Context, *RemoveUserSubscriptionRequest) (*RemoveUserSubscriptionResponse, error)
	// Remove a user subscription by a given user id
	RemoveUserSubscriptionByUserId(context.Context, *RemoveUserSubscriptionByUserIdRequest) (*RemoveUserSubscriptionByUserIdResponse, error)
	// Lists user subscriptions.
	ListUserSubscriptions(context.Context, *ListUserSubscriptionsRequest) (*ListUserSubscriptionsResponse, error)
	// Lists user subscriptions.
	ListUserSubscriptionsByUserId(context.Context, *ListUserSubscriptionsByUserIdRequest) (*ListUserSubscriptionsByUserIdResponse, error)
	// Lists subscriptions for multiple users in an org.
	ListOrgSubscriptions(context.Context, *ListOrgSubscriptionsRequest) (*ListOrgSubscriptionsResponse, error)
	// AUTH TOKEN
	// CreateAuthToken creates an auth token for the current user.
	CreateAuthToken(context.Context, *CreateAuthTokenRequest) (*CreateAuthTokenResponse, error)
	// CreateAuthTokenByUserId creates an auth token for the given user.
	CreateAuthTokenByUserId(context.Context, *CreateAuthTokenByUserIdRequest) (*CreateAuthTokenByUserIdResponse, error)
	// ListAuthTokens list tokens of current user.
	ListAuthTokens(context.Context, *ListAuthTokensRequest) (*ListAuthTokensResponse, error)
	// ListAuthTokensByUserId list tokens of given user.
	ListAuthTokensByUserId(context.Context, *ListAuthTokensByUserIdRequest) (*ListAuthTokensByUserIdResponse, error)
	// SetAuthTokenExpiration sets expiration back one year for current user.
	SetAuthTokenExpiration(context.Context, *SetAuthTokenExpirationRequest) (*SetAuthTokenExpirationResponse, error)
	// SetAuthTokenExpirationByUserId sets expiration back one year for given user.
	SetAuthTokenExpirationByUserId(context.Context, *SetAuthTokenExpirationByUserIdRequest) (*SetAuthTokenExpirationByUserIdResponse, error)
	// DeleteAuthToken deletes a given auth token for the current user.
	DeleteAuthToken(context.Context, *DeleteAuthTokenRequest) (*DeleteAuthTokenResponse, error)
	// DeleteAuthTokenByUserId deletes a given auth token for the given user.
	DeleteAuthTokenByUserId(context.Context, *DeleteAuthTokenByUserIdRequest) (*DeleteAuthTokenByUserIdResponse, error)
	// RefreshMfaLockout resets the lockout timer for the given user.
	RefreshMfaLockout(context.Context, *RefreshMfaLockoutRequest) (*RefreshMfaLockoutResponse, error)
	// RefreshMfaLockoutByOrgId resets the lockout timer for the given user and org id.
	RefreshMfaLockoutByOrgId(context.Context, *RefreshMfaLockoutByOrgIdRequest) (*RefreshMfaLockoutByOrgIdResponse, error)
	// SetMfaType sets the given user's mfa type.
	SetMfaType(context.Context, *SetMfaTypeRequest) (*SetMfaTypeResponse, error)
	// SetMyMfaType sets the current user's mfa type.
	SetMyMfaType(context.Context, *SetMyMfaTypeRequest) (*SetMyMfaTypeResponse, error)
	// EnableUserMfa enables or disables mfa for the given user
	EnableUserMfa(context.Context, *EnableUserMfaRequest) (*EnableUserMfaResponse, error)
	// EnableMyUserMfa enables mfa for the current user
	EnableMyUserMfa(context.Context, *EnableMyUserMfaRequest) (*EnableMyUserMfaResponse, error)
	// GetUserMfaInfo returns the mfa info for the given user.
	GetUserMfaInfo(context.Context, *GetUserMfaInfoRequest) (*GetUserMfaInfoResponse, error)
	// GetMyUserMfaInfo returns the mfa info for the current user.
	GetMyUserMfaInfo(context.Context, *GetMyUserMfaInfoRequest) (*GetMyUserMfaInfoResponse, error)
	// AddGroupedUserIPRestrictions adds a user or list of user's IPs they
	// are required to authenticate with
	AddGroupedUserIPRestrictions(context.Context, *AddGroupedUserIPRestrictionsRequest) (*AddGroupedUserIPRestrictionsResponse, error)
	// RemoveGroupedUserIPRestrictions removes a user or list of user's IPs they
	// are required to authenticate with
	RemoveGroupedUserIPRestrictions(context.Context, *RemoveGroupedUserIPRestrictionsRequest) (*RemoveGroupedUserIPRestrictionsResponse, error)
	// ListUsersAllowedIps returns the list of allowed IPs for the user.
	ListUsersAllowedIps(context.Context, *ListUsersAllowedIpsRequest) (*ListUsersAllowedIpsResponse, error)
	mustEmbedUnimplementedUsersServiceServer()
}

// UnimplementedUsersServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUsersServiceServer struct{}

func (UnimplementedUsersServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUsersServiceServer) CreateDelegatedUser(context.Context, *CreateDelegatedUserRequest) (*CreateDelegatedUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDelegatedUser not implemented")
}
func (UnimplementedUsersServiceServer) GetMyUser(context.Context, *GetMyUserRequest) (*GetMyUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyUser not implemented")
}
func (UnimplementedUsersServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUsersServiceServer) GetUserByOrgId(context.Context, *GetUserByOrgIdRequest) (*GetUserByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByOrgId not implemented")
}
func (UnimplementedUsersServiceServer) ListAgents(*ListAgentsRequest, UsersService_ListAgentsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAgents not implemented")
}
func (UnimplementedUsersServiceServer) ListPublicUsers(*ListPublicUsersRequest, UsersService_ListPublicUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPublicUsers not implemented")
}
func (UnimplementedUsersServiceServer) ListUsers(*ListUsersRequest, UsersService_ListUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedUsersServiceServer) ListUsersByOrgId(*ListUsersByOrgIdRequest, UsersService_ListUsersByOrgIdServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUsersByOrgId not implemented")
}
func (UnimplementedUsersServiceServer) ListUsersByRegion(*ListUsersByRegionRequest, UsersService_ListUsersByRegionServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUsersByRegion not implemented")
}
func (UnimplementedUsersServiceServer) UpdateMyUser(context.Context, *UpdateMyUserRequest) (*UpdateMyUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMyUser not implemented")
}
func (UnimplementedUsersServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUsersServiceServer) UpdateUserLabels(context.Context, *UpdateUserLabelsRequest) (*UpdateUserLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserLabels not implemented")
}
func (UnimplementedUsersServiceServer) UpdateUserCallerId(context.Context, *UpdateUserCallerIdRequest) (*UpdateUserCallerIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserCallerId not implemented")
}
func (UnimplementedUsersServiceServer) UpdateUserDisabled(context.Context, *UpdateUserDisabledRequest) (*UpdateUserDisabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserDisabled not implemented")
}
func (UnimplementedUsersServiceServer) UpdateUserDisabledByOrgId(context.Context, *UpdateUserDisabledByOrgIdRequest) (*UpdateUserDisabledByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserDisabledByOrgId not implemented")
}
func (UnimplementedUsersServiceServer) GetMyUserPasswordResetLink(context.Context, *GetMyUserPasswordResetLinkRequest) (*GetMyUserPasswordResetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyUserPasswordResetLink not implemented")
}
func (UnimplementedUsersServiceServer) GetUserPasswordResetLink(context.Context, *GetUserPasswordResetLinkRequest) (*GetUserPasswordResetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPasswordResetLink not implemented")
}
func (UnimplementedUsersServiceServer) GetUserPasswordResetLinkByOrgId(context.Context, *GetUserPasswordResetLinkByOrgIdRequest) (*GetUserPasswordResetLinkByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPasswordResetLinkByOrgId not implemented")
}
func (UnimplementedUsersServiceServer) CreatePasswordResetLink(context.Context, *CreatePasswordResetLinkRequest) (*CreatePasswordResetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePasswordResetLink not implemented")
}
func (UnimplementedUsersServiceServer) CreatePasswordResetLinkByOrgId(context.Context, *CreatePasswordResetLinkByOrgIdRequest) (*CreatePasswordResetLinkByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePasswordResetLinkByOrgId not implemented")
}
func (UnimplementedUsersServiceServer) GetUserLoginInfo(context.Context, *GetUserLoginInfoRequest) (*GetUserLoginInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLoginInfo not implemented")
}
func (UnimplementedUsersServiceServer) GetUserEmailVerified(context.Context, *GetUserEmailVerifiedRequest) (*GetUserEmailVerifiedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserEmailVerified not implemented")
}
func (UnimplementedUsersServiceServer) GetUserEmailVerifiedByOrgId(context.Context, *GetUserEmailVerifiedByOrgIdRequest) (*GetUserEmailVerifiedByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserEmailVerifiedByOrgId not implemented")
}
func (UnimplementedUsersServiceServer) ResetMyPassword(context.Context, *ResetMyPasswordRequest) (*ResetMyPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetMyPassword not implemented")
}
func (UnimplementedUsersServiceServer) ResetUserPassword(context.Context, *ResetUserPasswordRequest) (*ResetUserPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetUserPassword not implemented")
}
func (UnimplementedUsersServiceServer) ResetUserPasswordByOrgId(context.Context, *ResetUserPasswordByOrgIdRequest) (*ResetUserPasswordByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetUserPasswordByOrgId not implemented")
}
func (UnimplementedUsersServiceServer) SendUserEmailVerification(context.Context, *SendUserEmailVerificationRequest) (*SendUserEmailVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUserEmailVerification not implemented")
}
func (UnimplementedUsersServiceServer) SendUserEmailVerificationByOrgId(context.Context, *SendUserEmailVerificationByOrgIdRequest) (*SendUserEmailVerificationByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUserEmailVerificationByOrgId not implemented")
}
func (UnimplementedUsersServiceServer) SendPasswordReset(context.Context, *SendPasswordResetRequest) (*SendPasswordResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPasswordReset not implemented")
}
func (UnimplementedUsersServiceServer) SendPasswordResetByOrgId(context.Context, *SendPasswordResetByOrgIdRequest) (*SendPasswordResetByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPasswordResetByOrgId not implemented")
}
func (UnimplementedUsersServiceServer) GetUserSessionData(context.Context, *GetUserSessionDataRequest) (*GetUserSessionDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSessionData not implemented")
}
func (UnimplementedUsersServiceServer) GetAgentProfileGroup(context.Context, *GetAgentProfileGroupRequest) (*GetAgentProfileGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentProfileGroup not implemented")
}
func (UnimplementedUsersServiceServer) ListAgentProfileGroups(context.Context, *ListAgentProfileGroupsRequest) (*ListAgentProfileGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentProfileGroups not implemented")
}
func (UnimplementedUsersServiceServer) UpdateAgentProfileGroup(context.Context, *UpdateAgentProfileGroupRequest) (*UpdateAgentProfileGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentProfileGroup not implemented")
}
func (UnimplementedUsersServiceServer) CreateAgentProfileGroup(context.Context, *CreateAgentProfileGroupRequest) (*CreateAgentProfileGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgentProfileGroup not implemented")
}
func (UnimplementedUsersServiceServer) DeleteAgentProfileGroup(context.Context, *DeleteAgentProfileGroupRequest) (*DeleteAgentProfileGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgentProfileGroup not implemented")
}
func (UnimplementedUsersServiceServer) AssignAgentProfileGroups(context.Context, *AssignAgentProfileGroupsRequest) (*AssignAgentProfileGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignAgentProfileGroups not implemented")
}
func (UnimplementedUsersServiceServer) AddUserSubscription(context.Context, *AddUserSubscriptionRequest) (*AddUserSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserSubscription not implemented")
}
func (UnimplementedUsersServiceServer) AddUserSubscriptionByUserId(context.Context, *AddUserSubscriptionByUserIdRequest) (*AddUserSubscriptionByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserSubscriptionByUserId not implemented")
}
func (UnimplementedUsersServiceServer) GetUserSubscription(context.Context, *GetUserSubscriptionRequest) (*GetUserSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSubscription not implemented")
}
func (UnimplementedUsersServiceServer) GetUserSubscriptionByUserId(context.Context, *GetUserSubscriptionByUserIdRequest) (*GetUserSubscriptionByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSubscriptionByUserId not implemented")
}
func (UnimplementedUsersServiceServer) UpdateUserSubscription(context.Context, *UpdateUserSubscriptionRequest) (*UpdateUserSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserSubscription not implemented")
}
func (UnimplementedUsersServiceServer) UpdateUserSubscriptionByUserId(context.Context, *UpdateUserSubscriptionByUserIdRequest) (*UpdateUserSubscriptionByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserSubscriptionByUserId not implemented")
}
func (UnimplementedUsersServiceServer) RemoveUserSubscription(context.Context, *RemoveUserSubscriptionRequest) (*RemoveUserSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserSubscription not implemented")
}
func (UnimplementedUsersServiceServer) RemoveUserSubscriptionByUserId(context.Context, *RemoveUserSubscriptionByUserIdRequest) (*RemoveUserSubscriptionByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserSubscriptionByUserId not implemented")
}
func (UnimplementedUsersServiceServer) ListUserSubscriptions(context.Context, *ListUserSubscriptionsRequest) (*ListUserSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserSubscriptions not implemented")
}
func (UnimplementedUsersServiceServer) ListUserSubscriptionsByUserId(context.Context, *ListUserSubscriptionsByUserIdRequest) (*ListUserSubscriptionsByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserSubscriptionsByUserId not implemented")
}
func (UnimplementedUsersServiceServer) ListOrgSubscriptions(context.Context, *ListOrgSubscriptionsRequest) (*ListOrgSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgSubscriptions not implemented")
}
func (UnimplementedUsersServiceServer) CreateAuthToken(context.Context, *CreateAuthTokenRequest) (*CreateAuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthToken not implemented")
}
func (UnimplementedUsersServiceServer) CreateAuthTokenByUserId(context.Context, *CreateAuthTokenByUserIdRequest) (*CreateAuthTokenByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthTokenByUserId not implemented")
}
func (UnimplementedUsersServiceServer) ListAuthTokens(context.Context, *ListAuthTokensRequest) (*ListAuthTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthTokens not implemented")
}
func (UnimplementedUsersServiceServer) ListAuthTokensByUserId(context.Context, *ListAuthTokensByUserIdRequest) (*ListAuthTokensByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthTokensByUserId not implemented")
}
func (UnimplementedUsersServiceServer) SetAuthTokenExpiration(context.Context, *SetAuthTokenExpirationRequest) (*SetAuthTokenExpirationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAuthTokenExpiration not implemented")
}
func (UnimplementedUsersServiceServer) SetAuthTokenExpirationByUserId(context.Context, *SetAuthTokenExpirationByUserIdRequest) (*SetAuthTokenExpirationByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAuthTokenExpirationByUserId not implemented")
}
func (UnimplementedUsersServiceServer) DeleteAuthToken(context.Context, *DeleteAuthTokenRequest) (*DeleteAuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthToken not implemented")
}
func (UnimplementedUsersServiceServer) DeleteAuthTokenByUserId(context.Context, *DeleteAuthTokenByUserIdRequest) (*DeleteAuthTokenByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthTokenByUserId not implemented")
}
func (UnimplementedUsersServiceServer) RefreshMfaLockout(context.Context, *RefreshMfaLockoutRequest) (*RefreshMfaLockoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshMfaLockout not implemented")
}
func (UnimplementedUsersServiceServer) RefreshMfaLockoutByOrgId(context.Context, *RefreshMfaLockoutByOrgIdRequest) (*RefreshMfaLockoutByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshMfaLockoutByOrgId not implemented")
}
func (UnimplementedUsersServiceServer) SetMfaType(context.Context, *SetMfaTypeRequest) (*SetMfaTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMfaType not implemented")
}
func (UnimplementedUsersServiceServer) SetMyMfaType(context.Context, *SetMyMfaTypeRequest) (*SetMyMfaTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMyMfaType not implemented")
}
func (UnimplementedUsersServiceServer) EnableUserMfa(context.Context, *EnableUserMfaRequest) (*EnableUserMfaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableUserMfa not implemented")
}
func (UnimplementedUsersServiceServer) EnableMyUserMfa(context.Context, *EnableMyUserMfaRequest) (*EnableMyUserMfaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableMyUserMfa not implemented")
}
func (UnimplementedUsersServiceServer) GetUserMfaInfo(context.Context, *GetUserMfaInfoRequest) (*GetUserMfaInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMfaInfo not implemented")
}
func (UnimplementedUsersServiceServer) GetMyUserMfaInfo(context.Context, *GetMyUserMfaInfoRequest) (*GetMyUserMfaInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyUserMfaInfo not implemented")
}
func (UnimplementedUsersServiceServer) AddGroupedUserIPRestrictions(context.Context, *AddGroupedUserIPRestrictionsRequest) (*AddGroupedUserIPRestrictionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroupedUserIPRestrictions not implemented")
}
func (UnimplementedUsersServiceServer) RemoveGroupedUserIPRestrictions(context.Context, *RemoveGroupedUserIPRestrictionsRequest) (*RemoveGroupedUserIPRestrictionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroupedUserIPRestrictions not implemented")
}
func (UnimplementedUsersServiceServer) ListUsersAllowedIps(context.Context, *ListUsersAllowedIpsRequest) (*ListUsersAllowedIpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsersAllowedIps not implemented")
}
func (UnimplementedUsersServiceServer) mustEmbedUnimplementedUsersServiceServer() {}
func (UnimplementedUsersServiceServer) testEmbeddedByValue()                      {}

// UnsafeUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServiceServer will
// result in compilation errors.
type UnsafeUsersServiceServer interface {
	mustEmbedUnimplementedUsersServiceServer()
}

func RegisterUsersServiceServer(s grpc.ServiceRegistrar, srv UsersServiceServer) {
	// If the following call pancis, it indicates UnimplementedUsersServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UsersService_ServiceDesc, srv)
}

func _UsersService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CreateDelegatedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDelegatedUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CreateDelegatedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_CreateDelegatedUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CreateDelegatedUser(ctx, req.(*CreateDelegatedUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetMyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetMyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetMyUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetMyUser(ctx, req.(*GetMyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetUserByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserByOrgId(ctx, req.(*GetUserByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_ListAgents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAgentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UsersServiceServer).ListAgents(m, &usersServiceListAgentsServer{ServerStream: stream})
}

type UsersService_ListAgentsServer interface {
	Send(*ListAgentsResponse) error
	grpc.ServerStream
}

type usersServiceListAgentsServer struct {
	grpc.ServerStream
}

func (x *usersServiceListAgentsServer) Send(m *ListAgentsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UsersService_ListPublicUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPublicUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UsersServiceServer).ListPublicUsers(m, &usersServiceListPublicUsersServer{ServerStream: stream})
}

type UsersService_ListPublicUsersServer interface {
	Send(*ListPublicUsersResponse) error
	grpc.ServerStream
}

type usersServiceListPublicUsersServer struct {
	grpc.ServerStream
}

func (x *usersServiceListPublicUsersServer) Send(m *ListPublicUsersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UsersService_ListUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UsersServiceServer).ListUsers(m, &usersServiceListUsersServer{ServerStream: stream})
}

type UsersService_ListUsersServer interface {
	Send(*ListUsersResponse) error
	grpc.ServerStream
}

type usersServiceListUsersServer struct {
	grpc.ServerStream
}

func (x *usersServiceListUsersServer) Send(m *ListUsersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UsersService_ListUsersByOrgId_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListUsersByOrgIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UsersServiceServer).ListUsersByOrgId(m, &usersServiceListUsersByOrgIdServer{ServerStream: stream})
}

type UsersService_ListUsersByOrgIdServer interface {
	Send(*ListUsersByOrgIdResponse) error
	grpc.ServerStream
}

type usersServiceListUsersByOrgIdServer struct {
	grpc.ServerStream
}

func (x *usersServiceListUsersByOrgIdServer) Send(m *ListUsersByOrgIdResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UsersService_ListUsersByRegion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListUsersByRegionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UsersServiceServer).ListUsersByRegion(m, &usersServiceListUsersByRegionServer{ServerStream: stream})
}

type UsersService_ListUsersByRegionServer interface {
	Send(*ListUsersByRegionResponse) error
	grpc.ServerStream
}

type usersServiceListUsersByRegionServer struct {
	grpc.ServerStream
}

func (x *usersServiceListUsersByRegionServer) Send(m *ListUsersByRegionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UsersService_UpdateMyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateMyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_UpdateMyUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateMyUser(ctx, req.(*UpdateMyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateUserLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateUserLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_UpdateUserLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateUserLabels(ctx, req.(*UpdateUserLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateUserCallerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserCallerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateUserCallerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_UpdateUserCallerId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateUserCallerId(ctx, req.(*UpdateUserCallerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateUserDisabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDisabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateUserDisabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_UpdateUserDisabled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateUserDisabled(ctx, req.(*UpdateUserDisabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateUserDisabledByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDisabledByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateUserDisabledByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_UpdateUserDisabledByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateUserDisabledByOrgId(ctx, req.(*UpdateUserDisabledByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetMyUserPasswordResetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyUserPasswordResetLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetMyUserPasswordResetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetMyUserPasswordResetLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetMyUserPasswordResetLink(ctx, req.(*GetMyUserPasswordResetLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserPasswordResetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPasswordResetLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserPasswordResetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetUserPasswordResetLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserPasswordResetLink(ctx, req.(*GetUserPasswordResetLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserPasswordResetLinkByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPasswordResetLinkByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserPasswordResetLinkByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetUserPasswordResetLinkByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserPasswordResetLinkByOrgId(ctx, req.(*GetUserPasswordResetLinkByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CreatePasswordResetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePasswordResetLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CreatePasswordResetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_CreatePasswordResetLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CreatePasswordResetLink(ctx, req.(*CreatePasswordResetLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CreatePasswordResetLinkByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePasswordResetLinkByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CreatePasswordResetLinkByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_CreatePasswordResetLinkByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CreatePasswordResetLinkByOrgId(ctx, req.(*CreatePasswordResetLinkByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserLoginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLoginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserLoginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetUserLoginInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserLoginInfo(ctx, req.(*GetUserLoginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserEmailVerified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserEmailVerifiedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserEmailVerified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetUserEmailVerified_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserEmailVerified(ctx, req.(*GetUserEmailVerifiedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserEmailVerifiedByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserEmailVerifiedByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserEmailVerifiedByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetUserEmailVerifiedByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserEmailVerifiedByOrgId(ctx, req.(*GetUserEmailVerifiedByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_ResetMyPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetMyPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).ResetMyPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_ResetMyPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).ResetMyPassword(ctx, req.(*ResetMyPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_ResetUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).ResetUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_ResetUserPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).ResetUserPassword(ctx, req.(*ResetUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_ResetUserPasswordByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetUserPasswordByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).ResetUserPasswordByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_ResetUserPasswordByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).ResetUserPasswordByOrgId(ctx, req.(*ResetUserPasswordByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_SendUserEmailVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendUserEmailVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).SendUserEmailVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_SendUserEmailVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).SendUserEmailVerification(ctx, req.(*SendUserEmailVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_SendUserEmailVerificationByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendUserEmailVerificationByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).SendUserEmailVerificationByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_SendUserEmailVerificationByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).SendUserEmailVerificationByOrgId(ctx, req.(*SendUserEmailVerificationByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_SendPasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).SendPasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_SendPasswordReset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).SendPasswordReset(ctx, req.(*SendPasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_SendPasswordResetByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPasswordResetByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).SendPasswordResetByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_SendPasswordResetByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).SendPasswordResetByOrgId(ctx, req.(*SendPasswordResetByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserSessionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSessionDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserSessionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetUserSessionData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserSessionData(ctx, req.(*GetUserSessionDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetAgentProfileGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentProfileGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetAgentProfileGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetAgentProfileGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetAgentProfileGroup(ctx, req.(*GetAgentProfileGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_ListAgentProfileGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentProfileGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).ListAgentProfileGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_ListAgentProfileGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).ListAgentProfileGroups(ctx, req.(*ListAgentProfileGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateAgentProfileGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentProfileGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateAgentProfileGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_UpdateAgentProfileGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateAgentProfileGroup(ctx, req.(*UpdateAgentProfileGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CreateAgentProfileGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgentProfileGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CreateAgentProfileGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_CreateAgentProfileGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CreateAgentProfileGroup(ctx, req.(*CreateAgentProfileGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_DeleteAgentProfileGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAgentProfileGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).DeleteAgentProfileGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_DeleteAgentProfileGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).DeleteAgentProfileGroup(ctx, req.(*DeleteAgentProfileGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_AssignAgentProfileGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignAgentProfileGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).AssignAgentProfileGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_AssignAgentProfileGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).AssignAgentProfileGroups(ctx, req.(*AssignAgentProfileGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_AddUserSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).AddUserSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_AddUserSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).AddUserSubscription(ctx, req.(*AddUserSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_AddUserSubscriptionByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserSubscriptionByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).AddUserSubscriptionByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_AddUserSubscriptionByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).AddUserSubscriptionByUserId(ctx, req.(*AddUserSubscriptionByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetUserSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserSubscription(ctx, req.(*GetUserSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserSubscriptionByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSubscriptionByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserSubscriptionByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetUserSubscriptionByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserSubscriptionByUserId(ctx, req.(*GetUserSubscriptionByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateUserSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateUserSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_UpdateUserSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateUserSubscription(ctx, req.(*UpdateUserSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateUserSubscriptionByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserSubscriptionByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateUserSubscriptionByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_UpdateUserSubscriptionByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateUserSubscriptionByUserId(ctx, req.(*UpdateUserSubscriptionByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_RemoveUserSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).RemoveUserSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_RemoveUserSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).RemoveUserSubscription(ctx, req.(*RemoveUserSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_RemoveUserSubscriptionByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserSubscriptionByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).RemoveUserSubscriptionByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_RemoveUserSubscriptionByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).RemoveUserSubscriptionByUserId(ctx, req.(*RemoveUserSubscriptionByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_ListUserSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).ListUserSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_ListUserSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).ListUserSubscriptions(ctx, req.(*ListUserSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_ListUserSubscriptionsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserSubscriptionsByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).ListUserSubscriptionsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_ListUserSubscriptionsByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).ListUserSubscriptionsByUserId(ctx, req.(*ListUserSubscriptionsByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_ListOrgSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).ListOrgSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_ListOrgSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).ListOrgSubscriptions(ctx, req.(*ListOrgSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CreateAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CreateAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_CreateAuthToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CreateAuthToken(ctx, req.(*CreateAuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CreateAuthTokenByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthTokenByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CreateAuthTokenByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_CreateAuthTokenByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CreateAuthTokenByUserId(ctx, req.(*CreateAuthTokenByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_ListAuthTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).ListAuthTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_ListAuthTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).ListAuthTokens(ctx, req.(*ListAuthTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_ListAuthTokensByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthTokensByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).ListAuthTokensByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_ListAuthTokensByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).ListAuthTokensByUserId(ctx, req.(*ListAuthTokensByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_SetAuthTokenExpiration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAuthTokenExpirationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).SetAuthTokenExpiration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_SetAuthTokenExpiration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).SetAuthTokenExpiration(ctx, req.(*SetAuthTokenExpirationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_SetAuthTokenExpirationByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAuthTokenExpirationByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).SetAuthTokenExpirationByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_SetAuthTokenExpirationByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).SetAuthTokenExpirationByUserId(ctx, req.(*SetAuthTokenExpirationByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_DeleteAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).DeleteAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_DeleteAuthToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).DeleteAuthToken(ctx, req.(*DeleteAuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_DeleteAuthTokenByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthTokenByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).DeleteAuthTokenByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_DeleteAuthTokenByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).DeleteAuthTokenByUserId(ctx, req.(*DeleteAuthTokenByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_RefreshMfaLockout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshMfaLockoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).RefreshMfaLockout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_RefreshMfaLockout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).RefreshMfaLockout(ctx, req.(*RefreshMfaLockoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_RefreshMfaLockoutByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshMfaLockoutByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).RefreshMfaLockoutByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_RefreshMfaLockoutByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).RefreshMfaLockoutByOrgId(ctx, req.(*RefreshMfaLockoutByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_SetMfaType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMfaTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).SetMfaType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_SetMfaType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).SetMfaType(ctx, req.(*SetMfaTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_SetMyMfaType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMyMfaTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).SetMyMfaType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_SetMyMfaType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).SetMyMfaType(ctx, req.(*SetMyMfaTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_EnableUserMfa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableUserMfaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).EnableUserMfa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_EnableUserMfa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).EnableUserMfa(ctx, req.(*EnableUserMfaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_EnableMyUserMfa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableMyUserMfaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).EnableMyUserMfa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_EnableMyUserMfa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).EnableMyUserMfa(ctx, req.(*EnableMyUserMfaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserMfaInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserMfaInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserMfaInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetUserMfaInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserMfaInfo(ctx, req.(*GetUserMfaInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetMyUserMfaInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyUserMfaInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetMyUserMfaInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetMyUserMfaInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetMyUserMfaInfo(ctx, req.(*GetMyUserMfaInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_AddGroupedUserIPRestrictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupedUserIPRestrictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).AddGroupedUserIPRestrictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_AddGroupedUserIPRestrictions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).AddGroupedUserIPRestrictions(ctx, req.(*AddGroupedUserIPRestrictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_RemoveGroupedUserIPRestrictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGroupedUserIPRestrictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).RemoveGroupedUserIPRestrictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_RemoveGroupedUserIPRestrictions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).RemoveGroupedUserIPRestrictions(ctx, req.(*RemoveGroupedUserIPRestrictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_ListUsersAllowedIps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersAllowedIpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).ListUsersAllowedIps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_ListUsersAllowedIps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).ListUsersAllowedIps(ctx, req.(*ListUsersAllowedIpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersService_ServiceDesc is the grpc.ServiceDesc for UsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.org.users.UsersService",
	HandlerType: (*UsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UsersService_CreateUser_Handler,
		},
		{
			MethodName: "CreateDelegatedUser",
			Handler:    _UsersService_CreateDelegatedUser_Handler,
		},
		{
			MethodName: "GetMyUser",
			Handler:    _UsersService_GetMyUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UsersService_GetUser_Handler,
		},
		{
			MethodName: "GetUserByOrgId",
			Handler:    _UsersService_GetUserByOrgId_Handler,
		},
		{
			MethodName: "UpdateMyUser",
			Handler:    _UsersService_UpdateMyUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UsersService_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateUserLabels",
			Handler:    _UsersService_UpdateUserLabels_Handler,
		},
		{
			MethodName: "UpdateUserCallerId",
			Handler:    _UsersService_UpdateUserCallerId_Handler,
		},
		{
			MethodName: "UpdateUserDisabled",
			Handler:    _UsersService_UpdateUserDisabled_Handler,
		},
		{
			MethodName: "UpdateUserDisabledByOrgId",
			Handler:    _UsersService_UpdateUserDisabledByOrgId_Handler,
		},
		{
			MethodName: "GetMyUserPasswordResetLink",
			Handler:    _UsersService_GetMyUserPasswordResetLink_Handler,
		},
		{
			MethodName: "GetUserPasswordResetLink",
			Handler:    _UsersService_GetUserPasswordResetLink_Handler,
		},
		{
			MethodName: "GetUserPasswordResetLinkByOrgId",
			Handler:    _UsersService_GetUserPasswordResetLinkByOrgId_Handler,
		},
		{
			MethodName: "CreatePasswordResetLink",
			Handler:    _UsersService_CreatePasswordResetLink_Handler,
		},
		{
			MethodName: "CreatePasswordResetLinkByOrgId",
			Handler:    _UsersService_CreatePasswordResetLinkByOrgId_Handler,
		},
		{
			MethodName: "GetUserLoginInfo",
			Handler:    _UsersService_GetUserLoginInfo_Handler,
		},
		{
			MethodName: "GetUserEmailVerified",
			Handler:    _UsersService_GetUserEmailVerified_Handler,
		},
		{
			MethodName: "GetUserEmailVerifiedByOrgId",
			Handler:    _UsersService_GetUserEmailVerifiedByOrgId_Handler,
		},
		{
			MethodName: "ResetMyPassword",
			Handler:    _UsersService_ResetMyPassword_Handler,
		},
		{
			MethodName: "ResetUserPassword",
			Handler:    _UsersService_ResetUserPassword_Handler,
		},
		{
			MethodName: "ResetUserPasswordByOrgId",
			Handler:    _UsersService_ResetUserPasswordByOrgId_Handler,
		},
		{
			MethodName: "SendUserEmailVerification",
			Handler:    _UsersService_SendUserEmailVerification_Handler,
		},
		{
			MethodName: "SendUserEmailVerificationByOrgId",
			Handler:    _UsersService_SendUserEmailVerificationByOrgId_Handler,
		},
		{
			MethodName: "SendPasswordReset",
			Handler:    _UsersService_SendPasswordReset_Handler,
		},
		{
			MethodName: "SendPasswordResetByOrgId",
			Handler:    _UsersService_SendPasswordResetByOrgId_Handler,
		},
		{
			MethodName: "GetUserSessionData",
			Handler:    _UsersService_GetUserSessionData_Handler,
		},
		{
			MethodName: "GetAgentProfileGroup",
			Handler:    _UsersService_GetAgentProfileGroup_Handler,
		},
		{
			MethodName: "ListAgentProfileGroups",
			Handler:    _UsersService_ListAgentProfileGroups_Handler,
		},
		{
			MethodName: "UpdateAgentProfileGroup",
			Handler:    _UsersService_UpdateAgentProfileGroup_Handler,
		},
		{
			MethodName: "CreateAgentProfileGroup",
			Handler:    _UsersService_CreateAgentProfileGroup_Handler,
		},
		{
			MethodName: "DeleteAgentProfileGroup",
			Handler:    _UsersService_DeleteAgentProfileGroup_Handler,
		},
		{
			MethodName: "AssignAgentProfileGroups",
			Handler:    _UsersService_AssignAgentProfileGroups_Handler,
		},
		{
			MethodName: "AddUserSubscription",
			Handler:    _UsersService_AddUserSubscription_Handler,
		},
		{
			MethodName: "AddUserSubscriptionByUserId",
			Handler:    _UsersService_AddUserSubscriptionByUserId_Handler,
		},
		{
			MethodName: "GetUserSubscription",
			Handler:    _UsersService_GetUserSubscription_Handler,
		},
		{
			MethodName: "GetUserSubscriptionByUserId",
			Handler:    _UsersService_GetUserSubscriptionByUserId_Handler,
		},
		{
			MethodName: "UpdateUserSubscription",
			Handler:    _UsersService_UpdateUserSubscription_Handler,
		},
		{
			MethodName: "UpdateUserSubscriptionByUserId",
			Handler:    _UsersService_UpdateUserSubscriptionByUserId_Handler,
		},
		{
			MethodName: "RemoveUserSubscription",
			Handler:    _UsersService_RemoveUserSubscription_Handler,
		},
		{
			MethodName: "RemoveUserSubscriptionByUserId",
			Handler:    _UsersService_RemoveUserSubscriptionByUserId_Handler,
		},
		{
			MethodName: "ListUserSubscriptions",
			Handler:    _UsersService_ListUserSubscriptions_Handler,
		},
		{
			MethodName: "ListUserSubscriptionsByUserId",
			Handler:    _UsersService_ListUserSubscriptionsByUserId_Handler,
		},
		{
			MethodName: "ListOrgSubscriptions",
			Handler:    _UsersService_ListOrgSubscriptions_Handler,
		},
		{
			MethodName: "CreateAuthToken",
			Handler:    _UsersService_CreateAuthToken_Handler,
		},
		{
			MethodName: "CreateAuthTokenByUserId",
			Handler:    _UsersService_CreateAuthTokenByUserId_Handler,
		},
		{
			MethodName: "ListAuthTokens",
			Handler:    _UsersService_ListAuthTokens_Handler,
		},
		{
			MethodName: "ListAuthTokensByUserId",
			Handler:    _UsersService_ListAuthTokensByUserId_Handler,
		},
		{
			MethodName: "SetAuthTokenExpiration",
			Handler:    _UsersService_SetAuthTokenExpiration_Handler,
		},
		{
			MethodName: "SetAuthTokenExpirationByUserId",
			Handler:    _UsersService_SetAuthTokenExpirationByUserId_Handler,
		},
		{
			MethodName: "DeleteAuthToken",
			Handler:    _UsersService_DeleteAuthToken_Handler,
		},
		{
			MethodName: "DeleteAuthTokenByUserId",
			Handler:    _UsersService_DeleteAuthTokenByUserId_Handler,
		},
		{
			MethodName: "RefreshMfaLockout",
			Handler:    _UsersService_RefreshMfaLockout_Handler,
		},
		{
			MethodName: "RefreshMfaLockoutByOrgId",
			Handler:    _UsersService_RefreshMfaLockoutByOrgId_Handler,
		},
		{
			MethodName: "SetMfaType",
			Handler:    _UsersService_SetMfaType_Handler,
		},
		{
			MethodName: "SetMyMfaType",
			Handler:    _UsersService_SetMyMfaType_Handler,
		},
		{
			MethodName: "EnableUserMfa",
			Handler:    _UsersService_EnableUserMfa_Handler,
		},
		{
			MethodName: "EnableMyUserMfa",
			Handler:    _UsersService_EnableMyUserMfa_Handler,
		},
		{
			MethodName: "GetUserMfaInfo",
			Handler:    _UsersService_GetUserMfaInfo_Handler,
		},
		{
			MethodName: "GetMyUserMfaInfo",
			Handler:    _UsersService_GetMyUserMfaInfo_Handler,
		},
		{
			MethodName: "AddGroupedUserIPRestrictions",
			Handler:    _UsersService_AddGroupedUserIPRestrictions_Handler,
		},
		{
			MethodName: "RemoveGroupedUserIPRestrictions",
			Handler:    _UsersService_RemoveGroupedUserIPRestrictions_Handler,
		},
		{
			MethodName: "ListUsersAllowedIps",
			Handler:    _UsersService_ListUsersAllowedIps_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListAgents",
			Handler:       _UsersService_ListAgents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListPublicUsers",
			Handler:       _UsersService_ListPublicUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListUsers",
			Handler:       _UsersService_ListUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListUsersByOrgId",
			Handler:       _UsersService_ListUsersByOrgId_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListUsersByRegion",
			Handler:       _UsersService_ListUsersByRegion_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1alpha1/org/users/service.proto",
}
