// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1alpha1/org/users/service.proto

package usersconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	users "github.com/tcncloud/api-go/api/v1alpha1/org/users"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// UsersServiceName is the fully-qualified name of the UsersService service.
	UsersServiceName = "api.v1alpha1.org.users.UsersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UsersServiceCreateUserProcedure is the fully-qualified name of the UsersService's CreateUser RPC.
	UsersServiceCreateUserProcedure = "/api.v1alpha1.org.users.UsersService/CreateUser"
	// UsersServiceCreateDelegatedUserProcedure is the fully-qualified name of the UsersService's
	// CreateDelegatedUser RPC.
	UsersServiceCreateDelegatedUserProcedure = "/api.v1alpha1.org.users.UsersService/CreateDelegatedUser"
	// UsersServiceGetMyUserProcedure is the fully-qualified name of the UsersService's GetMyUser RPC.
	UsersServiceGetMyUserProcedure = "/api.v1alpha1.org.users.UsersService/GetMyUser"
	// UsersServiceGetUserProcedure is the fully-qualified name of the UsersService's GetUser RPC.
	UsersServiceGetUserProcedure = "/api.v1alpha1.org.users.UsersService/GetUser"
	// UsersServiceGetUserByOrgIdProcedure is the fully-qualified name of the UsersService's
	// GetUserByOrgId RPC.
	UsersServiceGetUserByOrgIdProcedure = "/api.v1alpha1.org.users.UsersService/GetUserByOrgId"
	// UsersServiceListAgentsProcedure is the fully-qualified name of the UsersService's ListAgents RPC.
	UsersServiceListAgentsProcedure = "/api.v1alpha1.org.users.UsersService/ListAgents"
	// UsersServiceListPublicUsersProcedure is the fully-qualified name of the UsersService's
	// ListPublicUsers RPC.
	UsersServiceListPublicUsersProcedure = "/api.v1alpha1.org.users.UsersService/ListPublicUsers"
	// UsersServiceListUsersProcedure is the fully-qualified name of the UsersService's ListUsers RPC.
	UsersServiceListUsersProcedure = "/api.v1alpha1.org.users.UsersService/ListUsers"
	// UsersServiceListUsersByOrgIdProcedure is the fully-qualified name of the UsersService's
	// ListUsersByOrgId RPC.
	UsersServiceListUsersByOrgIdProcedure = "/api.v1alpha1.org.users.UsersService/ListUsersByOrgId"
	// UsersServiceListUsersByRegionProcedure is the fully-qualified name of the UsersService's
	// ListUsersByRegion RPC.
	UsersServiceListUsersByRegionProcedure = "/api.v1alpha1.org.users.UsersService/ListUsersByRegion"
	// UsersServiceUpdateMyUserProcedure is the fully-qualified name of the UsersService's UpdateMyUser
	// RPC.
	UsersServiceUpdateMyUserProcedure = "/api.v1alpha1.org.users.UsersService/UpdateMyUser"
	// UsersServiceUpdateUserProcedure is the fully-qualified name of the UsersService's UpdateUser RPC.
	UsersServiceUpdateUserProcedure = "/api.v1alpha1.org.users.UsersService/UpdateUser"
	// UsersServiceUpdateUserLabelsProcedure is the fully-qualified name of the UsersService's
	// UpdateUserLabels RPC.
	UsersServiceUpdateUserLabelsProcedure = "/api.v1alpha1.org.users.UsersService/UpdateUserLabels"
	// UsersServiceUpdateUserCallerIdProcedure is the fully-qualified name of the UsersService's
	// UpdateUserCallerId RPC.
	UsersServiceUpdateUserCallerIdProcedure = "/api.v1alpha1.org.users.UsersService/UpdateUserCallerId"
	// UsersServiceUpdateUserDisabledProcedure is the fully-qualified name of the UsersService's
	// UpdateUserDisabled RPC.
	UsersServiceUpdateUserDisabledProcedure = "/api.v1alpha1.org.users.UsersService/UpdateUserDisabled"
	// UsersServiceUpdateUserDisabledByOrgIdProcedure is the fully-qualified name of the UsersService's
	// UpdateUserDisabledByOrgId RPC.
	UsersServiceUpdateUserDisabledByOrgIdProcedure = "/api.v1alpha1.org.users.UsersService/UpdateUserDisabledByOrgId"
	// UsersServiceGetMyUserPasswordResetLinkProcedure is the fully-qualified name of the UsersService's
	// GetMyUserPasswordResetLink RPC.
	UsersServiceGetMyUserPasswordResetLinkProcedure = "/api.v1alpha1.org.users.UsersService/GetMyUserPasswordResetLink"
	// UsersServiceGetUserPasswordResetLinkProcedure is the fully-qualified name of the UsersService's
	// GetUserPasswordResetLink RPC.
	UsersServiceGetUserPasswordResetLinkProcedure = "/api.v1alpha1.org.users.UsersService/GetUserPasswordResetLink"
	// UsersServiceGetUserPasswordResetLinkByOrgIdProcedure is the fully-qualified name of the
	// UsersService's GetUserPasswordResetLinkByOrgId RPC.
	UsersServiceGetUserPasswordResetLinkByOrgIdProcedure = "/api.v1alpha1.org.users.UsersService/GetUserPasswordResetLinkByOrgId"
	// UsersServiceCreatePasswordResetLinkProcedure is the fully-qualified name of the UsersService's
	// CreatePasswordResetLink RPC.
	UsersServiceCreatePasswordResetLinkProcedure = "/api.v1alpha1.org.users.UsersService/CreatePasswordResetLink"
	// UsersServiceCreatePasswordResetLinkByOrgIdProcedure is the fully-qualified name of the
	// UsersService's CreatePasswordResetLinkByOrgId RPC.
	UsersServiceCreatePasswordResetLinkByOrgIdProcedure = "/api.v1alpha1.org.users.UsersService/CreatePasswordResetLinkByOrgId"
	// UsersServiceGetUserLoginInfoProcedure is the fully-qualified name of the UsersService's
	// GetUserLoginInfo RPC.
	UsersServiceGetUserLoginInfoProcedure = "/api.v1alpha1.org.users.UsersService/GetUserLoginInfo"
	// UsersServiceGetUserEmailVerifiedProcedure is the fully-qualified name of the UsersService's
	// GetUserEmailVerified RPC.
	UsersServiceGetUserEmailVerifiedProcedure = "/api.v1alpha1.org.users.UsersService/GetUserEmailVerified"
	// UsersServiceGetUserEmailVerifiedByOrgIdProcedure is the fully-qualified name of the
	// UsersService's GetUserEmailVerifiedByOrgId RPC.
	UsersServiceGetUserEmailVerifiedByOrgIdProcedure = "/api.v1alpha1.org.users.UsersService/GetUserEmailVerifiedByOrgId"
	// UsersServiceResetMyPasswordProcedure is the fully-qualified name of the UsersService's
	// ResetMyPassword RPC.
	UsersServiceResetMyPasswordProcedure = "/api.v1alpha1.org.users.UsersService/ResetMyPassword"
	// UsersServiceResetUserPasswordProcedure is the fully-qualified name of the UsersService's
	// ResetUserPassword RPC.
	UsersServiceResetUserPasswordProcedure = "/api.v1alpha1.org.users.UsersService/ResetUserPassword"
	// UsersServiceResetUserPasswordByOrgIdProcedure is the fully-qualified name of the UsersService's
	// ResetUserPasswordByOrgId RPC.
	UsersServiceResetUserPasswordByOrgIdProcedure = "/api.v1alpha1.org.users.UsersService/ResetUserPasswordByOrgId"
	// UsersServiceSendUserEmailVerificationProcedure is the fully-qualified name of the UsersService's
	// SendUserEmailVerification RPC.
	UsersServiceSendUserEmailVerificationProcedure = "/api.v1alpha1.org.users.UsersService/SendUserEmailVerification"
	// UsersServiceSendUserEmailVerificationByOrgIdProcedure is the fully-qualified name of the
	// UsersService's SendUserEmailVerificationByOrgId RPC.
	UsersServiceSendUserEmailVerificationByOrgIdProcedure = "/api.v1alpha1.org.users.UsersService/SendUserEmailVerificationByOrgId"
	// UsersServiceSendPasswordResetProcedure is the fully-qualified name of the UsersService's
	// SendPasswordReset RPC.
	UsersServiceSendPasswordResetProcedure = "/api.v1alpha1.org.users.UsersService/SendPasswordReset"
	// UsersServiceSendPasswordResetByOrgIdProcedure is the fully-qualified name of the UsersService's
	// SendPasswordResetByOrgId RPC.
	UsersServiceSendPasswordResetByOrgIdProcedure = "/api.v1alpha1.org.users.UsersService/SendPasswordResetByOrgId"
	// UsersServiceGetUserSessionDataProcedure is the fully-qualified name of the UsersService's
	// GetUserSessionData RPC.
	UsersServiceGetUserSessionDataProcedure = "/api.v1alpha1.org.users.UsersService/GetUserSessionData"
	// UsersServiceGetAgentProfileGroupProcedure is the fully-qualified name of the UsersService's
	// GetAgentProfileGroup RPC.
	UsersServiceGetAgentProfileGroupProcedure = "/api.v1alpha1.org.users.UsersService/GetAgentProfileGroup"
	// UsersServiceListAgentProfileGroupsProcedure is the fully-qualified name of the UsersService's
	// ListAgentProfileGroups RPC.
	UsersServiceListAgentProfileGroupsProcedure = "/api.v1alpha1.org.users.UsersService/ListAgentProfileGroups"
	// UsersServiceUpdateAgentProfileGroupProcedure is the fully-qualified name of the UsersService's
	// UpdateAgentProfileGroup RPC.
	UsersServiceUpdateAgentProfileGroupProcedure = "/api.v1alpha1.org.users.UsersService/UpdateAgentProfileGroup"
	// UsersServiceCreateAgentProfileGroupProcedure is the fully-qualified name of the UsersService's
	// CreateAgentProfileGroup RPC.
	UsersServiceCreateAgentProfileGroupProcedure = "/api.v1alpha1.org.users.UsersService/CreateAgentProfileGroup"
	// UsersServiceDeleteAgentProfileGroupProcedure is the fully-qualified name of the UsersService's
	// DeleteAgentProfileGroup RPC.
	UsersServiceDeleteAgentProfileGroupProcedure = "/api.v1alpha1.org.users.UsersService/DeleteAgentProfileGroup"
	// UsersServiceAssignAgentProfileGroupsProcedure is the fully-qualified name of the UsersService's
	// AssignAgentProfileGroups RPC.
	UsersServiceAssignAgentProfileGroupsProcedure = "/api.v1alpha1.org.users.UsersService/AssignAgentProfileGroups"
	// UsersServiceAddUserSubscriptionProcedure is the fully-qualified name of the UsersService's
	// AddUserSubscription RPC.
	UsersServiceAddUserSubscriptionProcedure = "/api.v1alpha1.org.users.UsersService/AddUserSubscription"
	// UsersServiceAddUserSubscriptionByUserIdProcedure is the fully-qualified name of the
	// UsersService's AddUserSubscriptionByUserId RPC.
	UsersServiceAddUserSubscriptionByUserIdProcedure = "/api.v1alpha1.org.users.UsersService/AddUserSubscriptionByUserId"
	// UsersServiceGetUserSubscriptionProcedure is the fully-qualified name of the UsersService's
	// GetUserSubscription RPC.
	UsersServiceGetUserSubscriptionProcedure = "/api.v1alpha1.org.users.UsersService/GetUserSubscription"
	// UsersServiceGetUserSubscriptionByUserIdProcedure is the fully-qualified name of the
	// UsersService's GetUserSubscriptionByUserId RPC.
	UsersServiceGetUserSubscriptionByUserIdProcedure = "/api.v1alpha1.org.users.UsersService/GetUserSubscriptionByUserId"
	// UsersServiceUpdateUserSubscriptionProcedure is the fully-qualified name of the UsersService's
	// UpdateUserSubscription RPC.
	UsersServiceUpdateUserSubscriptionProcedure = "/api.v1alpha1.org.users.UsersService/UpdateUserSubscription"
	// UsersServiceUpdateUserSubscriptionByUserIdProcedure is the fully-qualified name of the
	// UsersService's UpdateUserSubscriptionByUserId RPC.
	UsersServiceUpdateUserSubscriptionByUserIdProcedure = "/api.v1alpha1.org.users.UsersService/UpdateUserSubscriptionByUserId"
	// UsersServiceRemoveUserSubscriptionProcedure is the fully-qualified name of the UsersService's
	// RemoveUserSubscription RPC.
	UsersServiceRemoveUserSubscriptionProcedure = "/api.v1alpha1.org.users.UsersService/RemoveUserSubscription"
	// UsersServiceRemoveUserSubscriptionByUserIdProcedure is the fully-qualified name of the
	// UsersService's RemoveUserSubscriptionByUserId RPC.
	UsersServiceRemoveUserSubscriptionByUserIdProcedure = "/api.v1alpha1.org.users.UsersService/RemoveUserSubscriptionByUserId"
	// UsersServiceListUserSubscriptionsProcedure is the fully-qualified name of the UsersService's
	// ListUserSubscriptions RPC.
	UsersServiceListUserSubscriptionsProcedure = "/api.v1alpha1.org.users.UsersService/ListUserSubscriptions"
	// UsersServiceListUserSubscriptionsByUserIdProcedure is the fully-qualified name of the
	// UsersService's ListUserSubscriptionsByUserId RPC.
	UsersServiceListUserSubscriptionsByUserIdProcedure = "/api.v1alpha1.org.users.UsersService/ListUserSubscriptionsByUserId"
	// UsersServiceListOrgSubscriptionsProcedure is the fully-qualified name of the UsersService's
	// ListOrgSubscriptions RPC.
	UsersServiceListOrgSubscriptionsProcedure = "/api.v1alpha1.org.users.UsersService/ListOrgSubscriptions"
	// UsersServiceCreateAuthTokenProcedure is the fully-qualified name of the UsersService's
	// CreateAuthToken RPC.
	UsersServiceCreateAuthTokenProcedure = "/api.v1alpha1.org.users.UsersService/CreateAuthToken"
	// UsersServiceCreateAuthTokenByUserIdProcedure is the fully-qualified name of the UsersService's
	// CreateAuthTokenByUserId RPC.
	UsersServiceCreateAuthTokenByUserIdProcedure = "/api.v1alpha1.org.users.UsersService/CreateAuthTokenByUserId"
	// UsersServiceListAuthTokensProcedure is the fully-qualified name of the UsersService's
	// ListAuthTokens RPC.
	UsersServiceListAuthTokensProcedure = "/api.v1alpha1.org.users.UsersService/ListAuthTokens"
	// UsersServiceListAuthTokensByUserIdProcedure is the fully-qualified name of the UsersService's
	// ListAuthTokensByUserId RPC.
	UsersServiceListAuthTokensByUserIdProcedure = "/api.v1alpha1.org.users.UsersService/ListAuthTokensByUserId"
	// UsersServiceSetAuthTokenExpirationProcedure is the fully-qualified name of the UsersService's
	// SetAuthTokenExpiration RPC.
	UsersServiceSetAuthTokenExpirationProcedure = "/api.v1alpha1.org.users.UsersService/SetAuthTokenExpiration"
	// UsersServiceSetAuthTokenExpirationByUserIdProcedure is the fully-qualified name of the
	// UsersService's SetAuthTokenExpirationByUserId RPC.
	UsersServiceSetAuthTokenExpirationByUserIdProcedure = "/api.v1alpha1.org.users.UsersService/SetAuthTokenExpirationByUserId"
	// UsersServiceDeleteAuthTokenProcedure is the fully-qualified name of the UsersService's
	// DeleteAuthToken RPC.
	UsersServiceDeleteAuthTokenProcedure = "/api.v1alpha1.org.users.UsersService/DeleteAuthToken"
	// UsersServiceDeleteAuthTokenByUserIdProcedure is the fully-qualified name of the UsersService's
	// DeleteAuthTokenByUserId RPC.
	UsersServiceDeleteAuthTokenByUserIdProcedure = "/api.v1alpha1.org.users.UsersService/DeleteAuthTokenByUserId"
	// UsersServiceRefreshMfaLockoutProcedure is the fully-qualified name of the UsersService's
	// RefreshMfaLockout RPC.
	UsersServiceRefreshMfaLockoutProcedure = "/api.v1alpha1.org.users.UsersService/RefreshMfaLockout"
	// UsersServiceRefreshMfaLockoutByOrgIdProcedure is the fully-qualified name of the UsersService's
	// RefreshMfaLockoutByOrgId RPC.
	UsersServiceRefreshMfaLockoutByOrgIdProcedure = "/api.v1alpha1.org.users.UsersService/RefreshMfaLockoutByOrgId"
	// UsersServiceSetMfaTypeProcedure is the fully-qualified name of the UsersService's SetMfaType RPC.
	UsersServiceSetMfaTypeProcedure = "/api.v1alpha1.org.users.UsersService/SetMfaType"
	// UsersServiceSetMyMfaTypeProcedure is the fully-qualified name of the UsersService's SetMyMfaType
	// RPC.
	UsersServiceSetMyMfaTypeProcedure = "/api.v1alpha1.org.users.UsersService/SetMyMfaType"
	// UsersServiceEnableUserMfaProcedure is the fully-qualified name of the UsersService's
	// EnableUserMfa RPC.
	UsersServiceEnableUserMfaProcedure = "/api.v1alpha1.org.users.UsersService/EnableUserMfa"
	// UsersServiceEnableMyUserMfaProcedure is the fully-qualified name of the UsersService's
	// EnableMyUserMfa RPC.
	UsersServiceEnableMyUserMfaProcedure = "/api.v1alpha1.org.users.UsersService/EnableMyUserMfa"
	// UsersServiceGetUserMfaInfoProcedure is the fully-qualified name of the UsersService's
	// GetUserMfaInfo RPC.
	UsersServiceGetUserMfaInfoProcedure = "/api.v1alpha1.org.users.UsersService/GetUserMfaInfo"
	// UsersServiceGetMyUserMfaInfoProcedure is the fully-qualified name of the UsersService's
	// GetMyUserMfaInfo RPC.
	UsersServiceGetMyUserMfaInfoProcedure = "/api.v1alpha1.org.users.UsersService/GetMyUserMfaInfo"
	// UsersServiceAddGroupedUserIPRestrictionsProcedure is the fully-qualified name of the
	// UsersService's AddGroupedUserIPRestrictions RPC.
	UsersServiceAddGroupedUserIPRestrictionsProcedure = "/api.v1alpha1.org.users.UsersService/AddGroupedUserIPRestrictions"
	// UsersServiceRemoveGroupedUserIPRestrictionsProcedure is the fully-qualified name of the
	// UsersService's RemoveGroupedUserIPRestrictions RPC.
	UsersServiceRemoveGroupedUserIPRestrictionsProcedure = "/api.v1alpha1.org.users.UsersService/RemoveGroupedUserIPRestrictions"
	// UsersServiceListUsersAllowedIpsProcedure is the fully-qualified name of the UsersService's
	// ListUsersAllowedIps RPC.
	UsersServiceListUsersAllowedIpsProcedure = "/api.v1alpha1.org.users.UsersService/ListUsersAllowedIps"
)

// UsersServiceClient is a client for the api.v1alpha1.org.users.UsersService service.
type UsersServiceClient interface {
	// CreateUser creates a new user and enables it for the region it is getting created in.
	CreateUser(context.Context, *connect_go.Request[users.CreateUserRequest]) (*connect_go.Response[users.CreateUserResponse], error)
	// CreateDelegatedUser creates a new delegated user and enables it for the region it is getting created in.
	CreateDelegatedUser(context.Context, *connect_go.Request[users.CreateDelegatedUserRequest]) (*connect_go.Response[users.CreateDelegatedUserResponse], error)
	// GetMyUser returns a single user by provided claims.
	GetMyUser(context.Context, *connect_go.Request[users.GetMyUserRequest]) (*connect_go.Response[users.GetMyUserResponse], error)
	// GetUser returns a single user by UserId or by AgentSid.
	GetUser(context.Context, *connect_go.Request[users.GetUserRequest]) (*connect_go.Response[users.GetUserResponse], error)
	// GetUserByOrgId returns a single user by UserId and OrgId
	// Requires Customer Support permission and allows cross Org requests.
	GetUserByOrgId(context.Context, *connect_go.Request[users.GetUserByOrgIdRequest]) (*connect_go.Response[users.GetUserByOrgIdResponse], error)
	// ListAgents returns a list of Agents.
	ListAgents(context.Context, *connect_go.Request[users.ListAgentsRequest]) (*connect_go.ServerStreamForClient[users.ListAgentsResponse], error)
	// ListPublicUsers returns a list of users with limited data for most applications.
	ListPublicUsers(context.Context, *connect_go.Request[users.ListPublicUsersRequest]) (*connect_go.ServerStreamForClient[users.ListPublicUsersResponse], error)
	// ListUsers returns a list of users.
	ListUsers(context.Context, *connect_go.Request[users.ListUsersRequest]) (*connect_go.ServerStreamForClient[users.ListUsersResponse], error)
	// ListUsersByOrgId returns a list of users.
	ListUsersByOrgId(context.Context, *connect_go.Request[users.ListUsersByOrgIdRequest]) (*connect_go.ServerStreamForClient[users.ListUsersByOrgIdResponse], error)
	// ListUsersByRegion returns a list of usersByRegion.
	ListUsersByRegion(context.Context, *connect_go.Request[users.ListUsersByRegionRequest]) (*connect_go.ServerStreamForClient[users.ListUsersByRegionResponse], error)
	// UpdateMyUser updates a user.
	UpdateMyUser(context.Context, *connect_go.Request[users.UpdateMyUserRequest]) (*connect_go.Response[users.UpdateMyUserResponse], error)
	// UpdateUser updates a user.
	UpdateUser(context.Context, *connect_go.Request[users.UpdateUserRequest]) (*connect_go.Response[users.UpdateUserResponse], error)
	// UpdateUserLabels updates a user's labels to be the passed in set of labels.
	UpdateUserLabels(context.Context, *connect_go.Request[users.UpdateUserLabelsRequest]) (*connect_go.Response[users.UpdateUserLabelsResponse], error)
	// UpdateUserCallerId updates a user.
	UpdateUserCallerId(context.Context, *connect_go.Request[users.UpdateUserCallerIdRequest]) (*connect_go.Response[users.UpdateUserCallerIdResponse], error)
	// UpdateUserDisabled updates whether a user is disabled.
	UpdateUserDisabled(context.Context, *connect_go.Request[users.UpdateUserDisabledRequest]) (*connect_go.Response[users.UpdateUserDisabledResponse], error)
	// UpdateUserDisabledByOrgId updates a user is disabled.
	UpdateUserDisabledByOrgId(context.Context, *connect_go.Request[users.UpdateUserDisabledByOrgIdRequest]) (*connect_go.Response[users.UpdateUserDisabledByOrgIdResponse], error)
	// GetMyUserPasswordResetLink updates a user's password.
	GetMyUserPasswordResetLink(context.Context, *connect_go.Request[users.GetMyUserPasswordResetLinkRequest]) (*connect_go.Response[users.GetMyUserPasswordResetLinkResponse], error)
	// GetUserPasswordResetLink gets a link to update a user's password.
	GetUserPasswordResetLink(context.Context, *connect_go.Request[users.GetUserPasswordResetLinkRequest]) (*connect_go.Response[users.GetUserPasswordResetLinkResponse], error)
	// GetUserPasswordResetLinkByOrgId gets a link to update a user's password.
	GetUserPasswordResetLinkByOrgId(context.Context, *connect_go.Request[users.GetUserPasswordResetLinkByOrgIdRequest]) (*connect_go.Response[users.GetUserPasswordResetLinkByOrgIdResponse], error)
	// CreatePasswordResetLink creates a password reset link for the given user id.
	CreatePasswordResetLink(context.Context, *connect_go.Request[users.CreatePasswordResetLinkRequest]) (*connect_go.Response[users.CreatePasswordResetLinkResponse], error)
	// CreatePasswordResetLinkByOrgId creates a password reset link for the given user id.
	CreatePasswordResetLinkByOrgId(context.Context, *connect_go.Request[users.CreatePasswordResetLinkByOrgIdRequest]) (*connect_go.Response[users.CreatePasswordResetLinkByOrgIdResponse], error)
	// Used to be called GetUserBlocked
	// GetUserLoginInfo gets information about a user's login.
	GetUserLoginInfo(context.Context, *connect_go.Request[users.GetUserLoginInfoRequest]) (*connect_go.Response[users.GetUserLoginInfoResponse], error)
	// GetUserEmailVerified gets whether the user's email is verified.
	GetUserEmailVerified(context.Context, *connect_go.Request[users.GetUserEmailVerifiedRequest]) (*connect_go.Response[users.GetUserEmailVerifiedResponse], error)
	// GetUserEmailVerifiedByOrgId gets whether the user's email is verified.
	GetUserEmailVerifiedByOrgId(context.Context, *connect_go.Request[users.GetUserEmailVerifiedByOrgIdRequest]) (*connect_go.Response[users.GetUserEmailVerifiedByOrgIdResponse], error)
	// ResetMyPassword resets the user's password.
	ResetMyPassword(context.Context, *connect_go.Request[users.ResetMyPasswordRequest]) (*connect_go.Response[users.ResetMyPasswordResponse], error)
	// ResetUserPassword resets the user's password.
	ResetUserPassword(context.Context, *connect_go.Request[users.ResetUserPasswordRequest]) (*connect_go.Response[users.ResetUserPasswordResponse], error)
	// ResetUserPasswordByOrgId resets the user's password.
	ResetUserPasswordByOrgId(context.Context, *connect_go.Request[users.ResetUserPasswordByOrgIdRequest]) (*connect_go.Response[users.ResetUserPasswordByOrgIdResponse], error)
	// SendUserEmailVerification sends a verification email to the user.
	SendUserEmailVerification(context.Context, *connect_go.Request[users.SendUserEmailVerificationRequest]) (*connect_go.Response[users.SendUserEmailVerificationResponse], error)
	// SendUserEmailVerificationByOrgId sends a verification email to the user.
	SendUserEmailVerificationByOrgId(context.Context, *connect_go.Request[users.SendUserEmailVerificationByOrgIdRequest]) (*connect_go.Response[users.SendUserEmailVerificationByOrgIdResponse], error)
	// SendPasswordReset sends a password reset email to the user.
	SendPasswordReset(context.Context, *connect_go.Request[users.SendPasswordResetRequest]) (*connect_go.Response[users.SendPasswordResetResponse], error)
	// SendPasswordResetByOrgId sends a password reset email to the user.
	SendPasswordResetByOrgId(context.Context, *connect_go.Request[users.SendPasswordResetByOrgIdRequest]) (*connect_go.Response[users.SendPasswordResetByOrgIdResponse], error)
	// GetUserSessionData returns data for the front end's session state
	GetUserSessionData(context.Context, *connect_go.Request[users.GetUserSessionDataRequest]) (*connect_go.Response[users.GetUserSessionDataResponse], error)
	// GetAgentProfileGroup returns an agent profile group by id
	GetAgentProfileGroup(context.Context, *connect_go.Request[users.GetAgentProfileGroupRequest]) (*connect_go.Response[users.GetAgentProfileGroupResponse], error)
	// ListAgentProfileGroups returns the agent profile groups associated with the current organization
	ListAgentProfileGroups(context.Context, *connect_go.Request[users.ListAgentProfileGroupsRequest]) (*connect_go.Response[users.ListAgentProfileGroupsResponse], error)
	// UpdateAgentProfileGroup updates an AgentProfileGroup. Can only update if user is in same org as AgentProfileGroup
	UpdateAgentProfileGroup(context.Context, *connect_go.Request[users.UpdateAgentProfileGroupRequest]) (*connect_go.Response[users.UpdateAgentProfileGroupResponse], error)
	// CreateAgentProfileGroup creates an AgentProfileGroup. Can only create if user is in same org as AgentProfileGroup
	CreateAgentProfileGroup(context.Context, *connect_go.Request[users.CreateAgentProfileGroupRequest]) (*connect_go.Response[users.CreateAgentProfileGroupResponse], error)
	// DeleteAgentProfileGroup deletes an AgentProfileGroup. Can only delete if user is in same org as AgentProfileGroup
	DeleteAgentProfileGroup(context.Context, *connect_go.Request[users.DeleteAgentProfileGroupRequest]) (*connect_go.Response[users.DeleteAgentProfileGroupResponse], error)
	// AssignAgentProfileGroups assigns a list of users to an AgentProfileGroup. Can only use if everything is in the same organization.
	AssignAgentProfileGroups(context.Context, *connect_go.Request[users.AssignAgentProfileGroupsRequest]) (*connect_go.Response[users.AssignAgentProfileGroupsResponse], error)
	// Creates a new user subscription.
	AddUserSubscription(context.Context, *connect_go.Request[users.AddUserSubscriptionRequest]) (*connect_go.Response[users.AddUserSubscriptionResponse], error)
	// Creates a new user subscription for a specified user with in requested users org.
	AddUserSubscriptionByUserId(context.Context, *connect_go.Request[users.AddUserSubscriptionByUserIdRequest]) (*connect_go.Response[users.AddUserSubscriptionByUserIdResponse], error)
	// Gets a user subscription.
	GetUserSubscription(context.Context, *connect_go.Request[users.GetUserSubscriptionRequest]) (*connect_go.Response[users.GetUserSubscriptionResponse], error)
	// Gets a user subscription for a specified user with in requested users org.
	GetUserSubscriptionByUserId(context.Context, *connect_go.Request[users.GetUserSubscriptionByUserIdRequest]) (*connect_go.Response[users.GetUserSubscriptionByUserIdResponse], error)
	// Updates a user subscription for the current user
	UpdateUserSubscription(context.Context, *connect_go.Request[users.UpdateUserSubscriptionRequest]) (*connect_go.Response[users.UpdateUserSubscriptionResponse], error)
	// Updates a user subscription for a given user id
	UpdateUserSubscriptionByUserId(context.Context, *connect_go.Request[users.UpdateUserSubscriptionByUserIdRequest]) (*connect_go.Response[users.UpdateUserSubscriptionByUserIdResponse], error)
	// Remove a user subscription.
	RemoveUserSubscription(context.Context, *connect_go.Request[users.RemoveUserSubscriptionRequest]) (*connect_go.Response[users.RemoveUserSubscriptionResponse], error)
	// Remove a user subscription by a given user id
	RemoveUserSubscriptionByUserId(context.Context, *connect_go.Request[users.RemoveUserSubscriptionByUserIdRequest]) (*connect_go.Response[users.RemoveUserSubscriptionByUserIdResponse], error)
	// Lists user subscriptions.
	ListUserSubscriptions(context.Context, *connect_go.Request[users.ListUserSubscriptionsRequest]) (*connect_go.Response[users.ListUserSubscriptionsResponse], error)
	// Lists user subscriptions.
	ListUserSubscriptionsByUserId(context.Context, *connect_go.Request[users.ListUserSubscriptionsByUserIdRequest]) (*connect_go.Response[users.ListUserSubscriptionsByUserIdResponse], error)
	// Lists subscriptions for multiple users in an org.
	ListOrgSubscriptions(context.Context, *connect_go.Request[users.ListOrgSubscriptionsRequest]) (*connect_go.Response[users.ListOrgSubscriptionsResponse], error)
	// AUTH TOKEN
	// CreateAuthToken creates an auth token for the current user.
	CreateAuthToken(context.Context, *connect_go.Request[users.CreateAuthTokenRequest]) (*connect_go.Response[users.CreateAuthTokenResponse], error)
	// CreateAuthTokenByUserId creates an auth token for the given user.
	CreateAuthTokenByUserId(context.Context, *connect_go.Request[users.CreateAuthTokenByUserIdRequest]) (*connect_go.Response[users.CreateAuthTokenByUserIdResponse], error)
	// ListAuthTokens list tokens of current user.
	ListAuthTokens(context.Context, *connect_go.Request[users.ListAuthTokensRequest]) (*connect_go.Response[users.ListAuthTokensResponse], error)
	// ListAuthTokensByUserId list tokens of given user.
	ListAuthTokensByUserId(context.Context, *connect_go.Request[users.ListAuthTokensByUserIdRequest]) (*connect_go.Response[users.ListAuthTokensByUserIdResponse], error)
	// SetAuthTokenExpiration sets expiration back one year for current user.
	SetAuthTokenExpiration(context.Context, *connect_go.Request[users.SetAuthTokenExpirationRequest]) (*connect_go.Response[users.SetAuthTokenExpirationResponse], error)
	// SetAuthTokenExpirationByUserId sets expiration back one year for given user.
	SetAuthTokenExpirationByUserId(context.Context, *connect_go.Request[users.SetAuthTokenExpirationByUserIdRequest]) (*connect_go.Response[users.SetAuthTokenExpirationByUserIdResponse], error)
	// DeleteAuthToken deletes a given auth token for the current user.
	DeleteAuthToken(context.Context, *connect_go.Request[users.DeleteAuthTokenRequest]) (*connect_go.Response[users.DeleteAuthTokenResponse], error)
	// DeleteAuthTokenByUserId deletes a given auth token for the given user.
	DeleteAuthTokenByUserId(context.Context, *connect_go.Request[users.DeleteAuthTokenByUserIdRequest]) (*connect_go.Response[users.DeleteAuthTokenByUserIdResponse], error)
	// RefreshMfaLockout resets the lockout timer for the given user.
	RefreshMfaLockout(context.Context, *connect_go.Request[users.RefreshMfaLockoutRequest]) (*connect_go.Response[users.RefreshMfaLockoutResponse], error)
	// RefreshMfaLockoutByOrgId resets the lockout timer for the given user and org id.
	RefreshMfaLockoutByOrgId(context.Context, *connect_go.Request[users.RefreshMfaLockoutByOrgIdRequest]) (*connect_go.Response[users.RefreshMfaLockoutByOrgIdResponse], error)
	// SetMfaType sets the given user's mfa type.
	SetMfaType(context.Context, *connect_go.Request[users.SetMfaTypeRequest]) (*connect_go.Response[users.SetMfaTypeResponse], error)
	// SetMyMfaType sets the current user's mfa type.
	SetMyMfaType(context.Context, *connect_go.Request[users.SetMyMfaTypeRequest]) (*connect_go.Response[users.SetMyMfaTypeResponse], error)
	// EnableUserMfa enables or disables mfa for the given user
	EnableUserMfa(context.Context, *connect_go.Request[users.EnableUserMfaRequest]) (*connect_go.Response[users.EnableUserMfaResponse], error)
	// EnableMyUserMfa enables mfa for the current user
	EnableMyUserMfa(context.Context, *connect_go.Request[users.EnableMyUserMfaRequest]) (*connect_go.Response[users.EnableMyUserMfaResponse], error)
	// GetUserMfaInfo returns the mfa info for the given user.
	GetUserMfaInfo(context.Context, *connect_go.Request[users.GetUserMfaInfoRequest]) (*connect_go.Response[users.GetUserMfaInfoResponse], error)
	// GetMyUserMfaInfo returns the mfa info for the current user.
	GetMyUserMfaInfo(context.Context, *connect_go.Request[users.GetMyUserMfaInfoRequest]) (*connect_go.Response[users.GetMyUserMfaInfoResponse], error)
	// AddGroupedUserIPRestrictions adds a user or list of user's IPs they
	// are required to authenticate with
	AddGroupedUserIPRestrictions(context.Context, *connect_go.Request[users.AddGroupedUserIPRestrictionsRequest]) (*connect_go.Response[users.AddGroupedUserIPRestrictionsResponse], error)
	// RemoveGroupedUserIPRestrictions removes a user or list of user's IPs they
	// are required to authenticate with
	RemoveGroupedUserIPRestrictions(context.Context, *connect_go.Request[users.RemoveGroupedUserIPRestrictionsRequest]) (*connect_go.Response[users.RemoveGroupedUserIPRestrictionsResponse], error)
	// ListUsersAllowedIps returns the list of allowed IPs for the user.
	ListUsersAllowedIps(context.Context, *connect_go.Request[users.ListUsersAllowedIpsRequest]) (*connect_go.Response[users.ListUsersAllowedIpsResponse], error)
}

// NewUsersServiceClient constructs a client for the api.v1alpha1.org.users.UsersService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUsersServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UsersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &usersServiceClient{
		createUser: connect_go.NewClient[users.CreateUserRequest, users.CreateUserResponse](
			httpClient,
			baseURL+UsersServiceCreateUserProcedure,
			opts...,
		),
		createDelegatedUser: connect_go.NewClient[users.CreateDelegatedUserRequest, users.CreateDelegatedUserResponse](
			httpClient,
			baseURL+UsersServiceCreateDelegatedUserProcedure,
			opts...,
		),
		getMyUser: connect_go.NewClient[users.GetMyUserRequest, users.GetMyUserResponse](
			httpClient,
			baseURL+UsersServiceGetMyUserProcedure,
			opts...,
		),
		getUser: connect_go.NewClient[users.GetUserRequest, users.GetUserResponse](
			httpClient,
			baseURL+UsersServiceGetUserProcedure,
			opts...,
		),
		getUserByOrgId: connect_go.NewClient[users.GetUserByOrgIdRequest, users.GetUserByOrgIdResponse](
			httpClient,
			baseURL+UsersServiceGetUserByOrgIdProcedure,
			opts...,
		),
		listAgents: connect_go.NewClient[users.ListAgentsRequest, users.ListAgentsResponse](
			httpClient,
			baseURL+UsersServiceListAgentsProcedure,
			opts...,
		),
		listPublicUsers: connect_go.NewClient[users.ListPublicUsersRequest, users.ListPublicUsersResponse](
			httpClient,
			baseURL+UsersServiceListPublicUsersProcedure,
			opts...,
		),
		listUsers: connect_go.NewClient[users.ListUsersRequest, users.ListUsersResponse](
			httpClient,
			baseURL+UsersServiceListUsersProcedure,
			opts...,
		),
		listUsersByOrgId: connect_go.NewClient[users.ListUsersByOrgIdRequest, users.ListUsersByOrgIdResponse](
			httpClient,
			baseURL+UsersServiceListUsersByOrgIdProcedure,
			opts...,
		),
		listUsersByRegion: connect_go.NewClient[users.ListUsersByRegionRequest, users.ListUsersByRegionResponse](
			httpClient,
			baseURL+UsersServiceListUsersByRegionProcedure,
			opts...,
		),
		updateMyUser: connect_go.NewClient[users.UpdateMyUserRequest, users.UpdateMyUserResponse](
			httpClient,
			baseURL+UsersServiceUpdateMyUserProcedure,
			opts...,
		),
		updateUser: connect_go.NewClient[users.UpdateUserRequest, users.UpdateUserResponse](
			httpClient,
			baseURL+UsersServiceUpdateUserProcedure,
			opts...,
		),
		updateUserLabels: connect_go.NewClient[users.UpdateUserLabelsRequest, users.UpdateUserLabelsResponse](
			httpClient,
			baseURL+UsersServiceUpdateUserLabelsProcedure,
			opts...,
		),
		updateUserCallerId: connect_go.NewClient[users.UpdateUserCallerIdRequest, users.UpdateUserCallerIdResponse](
			httpClient,
			baseURL+UsersServiceUpdateUserCallerIdProcedure,
			opts...,
		),
		updateUserDisabled: connect_go.NewClient[users.UpdateUserDisabledRequest, users.UpdateUserDisabledResponse](
			httpClient,
			baseURL+UsersServiceUpdateUserDisabledProcedure,
			opts...,
		),
		updateUserDisabledByOrgId: connect_go.NewClient[users.UpdateUserDisabledByOrgIdRequest, users.UpdateUserDisabledByOrgIdResponse](
			httpClient,
			baseURL+UsersServiceUpdateUserDisabledByOrgIdProcedure,
			opts...,
		),
		getMyUserPasswordResetLink: connect_go.NewClient[users.GetMyUserPasswordResetLinkRequest, users.GetMyUserPasswordResetLinkResponse](
			httpClient,
			baseURL+UsersServiceGetMyUserPasswordResetLinkProcedure,
			opts...,
		),
		getUserPasswordResetLink: connect_go.NewClient[users.GetUserPasswordResetLinkRequest, users.GetUserPasswordResetLinkResponse](
			httpClient,
			baseURL+UsersServiceGetUserPasswordResetLinkProcedure,
			opts...,
		),
		getUserPasswordResetLinkByOrgId: connect_go.NewClient[users.GetUserPasswordResetLinkByOrgIdRequest, users.GetUserPasswordResetLinkByOrgIdResponse](
			httpClient,
			baseURL+UsersServiceGetUserPasswordResetLinkByOrgIdProcedure,
			opts...,
		),
		createPasswordResetLink: connect_go.NewClient[users.CreatePasswordResetLinkRequest, users.CreatePasswordResetLinkResponse](
			httpClient,
			baseURL+UsersServiceCreatePasswordResetLinkProcedure,
			opts...,
		),
		createPasswordResetLinkByOrgId: connect_go.NewClient[users.CreatePasswordResetLinkByOrgIdRequest, users.CreatePasswordResetLinkByOrgIdResponse](
			httpClient,
			baseURL+UsersServiceCreatePasswordResetLinkByOrgIdProcedure,
			opts...,
		),
		getUserLoginInfo: connect_go.NewClient[users.GetUserLoginInfoRequest, users.GetUserLoginInfoResponse](
			httpClient,
			baseURL+UsersServiceGetUserLoginInfoProcedure,
			opts...,
		),
		getUserEmailVerified: connect_go.NewClient[users.GetUserEmailVerifiedRequest, users.GetUserEmailVerifiedResponse](
			httpClient,
			baseURL+UsersServiceGetUserEmailVerifiedProcedure,
			opts...,
		),
		getUserEmailVerifiedByOrgId: connect_go.NewClient[users.GetUserEmailVerifiedByOrgIdRequest, users.GetUserEmailVerifiedByOrgIdResponse](
			httpClient,
			baseURL+UsersServiceGetUserEmailVerifiedByOrgIdProcedure,
			opts...,
		),
		resetMyPassword: connect_go.NewClient[users.ResetMyPasswordRequest, users.ResetMyPasswordResponse](
			httpClient,
			baseURL+UsersServiceResetMyPasswordProcedure,
			opts...,
		),
		resetUserPassword: connect_go.NewClient[users.ResetUserPasswordRequest, users.ResetUserPasswordResponse](
			httpClient,
			baseURL+UsersServiceResetUserPasswordProcedure,
			opts...,
		),
		resetUserPasswordByOrgId: connect_go.NewClient[users.ResetUserPasswordByOrgIdRequest, users.ResetUserPasswordByOrgIdResponse](
			httpClient,
			baseURL+UsersServiceResetUserPasswordByOrgIdProcedure,
			opts...,
		),
		sendUserEmailVerification: connect_go.NewClient[users.SendUserEmailVerificationRequest, users.SendUserEmailVerificationResponse](
			httpClient,
			baseURL+UsersServiceSendUserEmailVerificationProcedure,
			opts...,
		),
		sendUserEmailVerificationByOrgId: connect_go.NewClient[users.SendUserEmailVerificationByOrgIdRequest, users.SendUserEmailVerificationByOrgIdResponse](
			httpClient,
			baseURL+UsersServiceSendUserEmailVerificationByOrgIdProcedure,
			opts...,
		),
		sendPasswordReset: connect_go.NewClient[users.SendPasswordResetRequest, users.SendPasswordResetResponse](
			httpClient,
			baseURL+UsersServiceSendPasswordResetProcedure,
			opts...,
		),
		sendPasswordResetByOrgId: connect_go.NewClient[users.SendPasswordResetByOrgIdRequest, users.SendPasswordResetByOrgIdResponse](
			httpClient,
			baseURL+UsersServiceSendPasswordResetByOrgIdProcedure,
			opts...,
		),
		getUserSessionData: connect_go.NewClient[users.GetUserSessionDataRequest, users.GetUserSessionDataResponse](
			httpClient,
			baseURL+UsersServiceGetUserSessionDataProcedure,
			opts...,
		),
		getAgentProfileGroup: connect_go.NewClient[users.GetAgentProfileGroupRequest, users.GetAgentProfileGroupResponse](
			httpClient,
			baseURL+UsersServiceGetAgentProfileGroupProcedure,
			opts...,
		),
		listAgentProfileGroups: connect_go.NewClient[users.ListAgentProfileGroupsRequest, users.ListAgentProfileGroupsResponse](
			httpClient,
			baseURL+UsersServiceListAgentProfileGroupsProcedure,
			opts...,
		),
		updateAgentProfileGroup: connect_go.NewClient[users.UpdateAgentProfileGroupRequest, users.UpdateAgentProfileGroupResponse](
			httpClient,
			baseURL+UsersServiceUpdateAgentProfileGroupProcedure,
			opts...,
		),
		createAgentProfileGroup: connect_go.NewClient[users.CreateAgentProfileGroupRequest, users.CreateAgentProfileGroupResponse](
			httpClient,
			baseURL+UsersServiceCreateAgentProfileGroupProcedure,
			opts...,
		),
		deleteAgentProfileGroup: connect_go.NewClient[users.DeleteAgentProfileGroupRequest, users.DeleteAgentProfileGroupResponse](
			httpClient,
			baseURL+UsersServiceDeleteAgentProfileGroupProcedure,
			opts...,
		),
		assignAgentProfileGroups: connect_go.NewClient[users.AssignAgentProfileGroupsRequest, users.AssignAgentProfileGroupsResponse](
			httpClient,
			baseURL+UsersServiceAssignAgentProfileGroupsProcedure,
			opts...,
		),
		addUserSubscription: connect_go.NewClient[users.AddUserSubscriptionRequest, users.AddUserSubscriptionResponse](
			httpClient,
			baseURL+UsersServiceAddUserSubscriptionProcedure,
			opts...,
		),
		addUserSubscriptionByUserId: connect_go.NewClient[users.AddUserSubscriptionByUserIdRequest, users.AddUserSubscriptionByUserIdResponse](
			httpClient,
			baseURL+UsersServiceAddUserSubscriptionByUserIdProcedure,
			opts...,
		),
		getUserSubscription: connect_go.NewClient[users.GetUserSubscriptionRequest, users.GetUserSubscriptionResponse](
			httpClient,
			baseURL+UsersServiceGetUserSubscriptionProcedure,
			opts...,
		),
		getUserSubscriptionByUserId: connect_go.NewClient[users.GetUserSubscriptionByUserIdRequest, users.GetUserSubscriptionByUserIdResponse](
			httpClient,
			baseURL+UsersServiceGetUserSubscriptionByUserIdProcedure,
			opts...,
		),
		updateUserSubscription: connect_go.NewClient[users.UpdateUserSubscriptionRequest, users.UpdateUserSubscriptionResponse](
			httpClient,
			baseURL+UsersServiceUpdateUserSubscriptionProcedure,
			opts...,
		),
		updateUserSubscriptionByUserId: connect_go.NewClient[users.UpdateUserSubscriptionByUserIdRequest, users.UpdateUserSubscriptionByUserIdResponse](
			httpClient,
			baseURL+UsersServiceUpdateUserSubscriptionByUserIdProcedure,
			opts...,
		),
		removeUserSubscription: connect_go.NewClient[users.RemoveUserSubscriptionRequest, users.RemoveUserSubscriptionResponse](
			httpClient,
			baseURL+UsersServiceRemoveUserSubscriptionProcedure,
			opts...,
		),
		removeUserSubscriptionByUserId: connect_go.NewClient[users.RemoveUserSubscriptionByUserIdRequest, users.RemoveUserSubscriptionByUserIdResponse](
			httpClient,
			baseURL+UsersServiceRemoveUserSubscriptionByUserIdProcedure,
			opts...,
		),
		listUserSubscriptions: connect_go.NewClient[users.ListUserSubscriptionsRequest, users.ListUserSubscriptionsResponse](
			httpClient,
			baseURL+UsersServiceListUserSubscriptionsProcedure,
			opts...,
		),
		listUserSubscriptionsByUserId: connect_go.NewClient[users.ListUserSubscriptionsByUserIdRequest, users.ListUserSubscriptionsByUserIdResponse](
			httpClient,
			baseURL+UsersServiceListUserSubscriptionsByUserIdProcedure,
			opts...,
		),
		listOrgSubscriptions: connect_go.NewClient[users.ListOrgSubscriptionsRequest, users.ListOrgSubscriptionsResponse](
			httpClient,
			baseURL+UsersServiceListOrgSubscriptionsProcedure,
			opts...,
		),
		createAuthToken: connect_go.NewClient[users.CreateAuthTokenRequest, users.CreateAuthTokenResponse](
			httpClient,
			baseURL+UsersServiceCreateAuthTokenProcedure,
			opts...,
		),
		createAuthTokenByUserId: connect_go.NewClient[users.CreateAuthTokenByUserIdRequest, users.CreateAuthTokenByUserIdResponse](
			httpClient,
			baseURL+UsersServiceCreateAuthTokenByUserIdProcedure,
			opts...,
		),
		listAuthTokens: connect_go.NewClient[users.ListAuthTokensRequest, users.ListAuthTokensResponse](
			httpClient,
			baseURL+UsersServiceListAuthTokensProcedure,
			opts...,
		),
		listAuthTokensByUserId: connect_go.NewClient[users.ListAuthTokensByUserIdRequest, users.ListAuthTokensByUserIdResponse](
			httpClient,
			baseURL+UsersServiceListAuthTokensByUserIdProcedure,
			opts...,
		),
		setAuthTokenExpiration: connect_go.NewClient[users.SetAuthTokenExpirationRequest, users.SetAuthTokenExpirationResponse](
			httpClient,
			baseURL+UsersServiceSetAuthTokenExpirationProcedure,
			opts...,
		),
		setAuthTokenExpirationByUserId: connect_go.NewClient[users.SetAuthTokenExpirationByUserIdRequest, users.SetAuthTokenExpirationByUserIdResponse](
			httpClient,
			baseURL+UsersServiceSetAuthTokenExpirationByUserIdProcedure,
			opts...,
		),
		deleteAuthToken: connect_go.NewClient[users.DeleteAuthTokenRequest, users.DeleteAuthTokenResponse](
			httpClient,
			baseURL+UsersServiceDeleteAuthTokenProcedure,
			opts...,
		),
		deleteAuthTokenByUserId: connect_go.NewClient[users.DeleteAuthTokenByUserIdRequest, users.DeleteAuthTokenByUserIdResponse](
			httpClient,
			baseURL+UsersServiceDeleteAuthTokenByUserIdProcedure,
			opts...,
		),
		refreshMfaLockout: connect_go.NewClient[users.RefreshMfaLockoutRequest, users.RefreshMfaLockoutResponse](
			httpClient,
			baseURL+UsersServiceRefreshMfaLockoutProcedure,
			opts...,
		),
		refreshMfaLockoutByOrgId: connect_go.NewClient[users.RefreshMfaLockoutByOrgIdRequest, users.RefreshMfaLockoutByOrgIdResponse](
			httpClient,
			baseURL+UsersServiceRefreshMfaLockoutByOrgIdProcedure,
			opts...,
		),
		setMfaType: connect_go.NewClient[users.SetMfaTypeRequest, users.SetMfaTypeResponse](
			httpClient,
			baseURL+UsersServiceSetMfaTypeProcedure,
			opts...,
		),
		setMyMfaType: connect_go.NewClient[users.SetMyMfaTypeRequest, users.SetMyMfaTypeResponse](
			httpClient,
			baseURL+UsersServiceSetMyMfaTypeProcedure,
			opts...,
		),
		enableUserMfa: connect_go.NewClient[users.EnableUserMfaRequest, users.EnableUserMfaResponse](
			httpClient,
			baseURL+UsersServiceEnableUserMfaProcedure,
			opts...,
		),
		enableMyUserMfa: connect_go.NewClient[users.EnableMyUserMfaRequest, users.EnableMyUserMfaResponse](
			httpClient,
			baseURL+UsersServiceEnableMyUserMfaProcedure,
			opts...,
		),
		getUserMfaInfo: connect_go.NewClient[users.GetUserMfaInfoRequest, users.GetUserMfaInfoResponse](
			httpClient,
			baseURL+UsersServiceGetUserMfaInfoProcedure,
			opts...,
		),
		getMyUserMfaInfo: connect_go.NewClient[users.GetMyUserMfaInfoRequest, users.GetMyUserMfaInfoResponse](
			httpClient,
			baseURL+UsersServiceGetMyUserMfaInfoProcedure,
			opts...,
		),
		addGroupedUserIPRestrictions: connect_go.NewClient[users.AddGroupedUserIPRestrictionsRequest, users.AddGroupedUserIPRestrictionsResponse](
			httpClient,
			baseURL+UsersServiceAddGroupedUserIPRestrictionsProcedure,
			opts...,
		),
		removeGroupedUserIPRestrictions: connect_go.NewClient[users.RemoveGroupedUserIPRestrictionsRequest, users.RemoveGroupedUserIPRestrictionsResponse](
			httpClient,
			baseURL+UsersServiceRemoveGroupedUserIPRestrictionsProcedure,
			opts...,
		),
		listUsersAllowedIps: connect_go.NewClient[users.ListUsersAllowedIpsRequest, users.ListUsersAllowedIpsResponse](
			httpClient,
			baseURL+UsersServiceListUsersAllowedIpsProcedure,
			opts...,
		),
	}
}

// usersServiceClient implements UsersServiceClient.
type usersServiceClient struct {
	createUser                       *connect_go.Client[users.CreateUserRequest, users.CreateUserResponse]
	createDelegatedUser              *connect_go.Client[users.CreateDelegatedUserRequest, users.CreateDelegatedUserResponse]
	getMyUser                        *connect_go.Client[users.GetMyUserRequest, users.GetMyUserResponse]
	getUser                          *connect_go.Client[users.GetUserRequest, users.GetUserResponse]
	getUserByOrgId                   *connect_go.Client[users.GetUserByOrgIdRequest, users.GetUserByOrgIdResponse]
	listAgents                       *connect_go.Client[users.ListAgentsRequest, users.ListAgentsResponse]
	listPublicUsers                  *connect_go.Client[users.ListPublicUsersRequest, users.ListPublicUsersResponse]
	listUsers                        *connect_go.Client[users.ListUsersRequest, users.ListUsersResponse]
	listUsersByOrgId                 *connect_go.Client[users.ListUsersByOrgIdRequest, users.ListUsersByOrgIdResponse]
	listUsersByRegion                *connect_go.Client[users.ListUsersByRegionRequest, users.ListUsersByRegionResponse]
	updateMyUser                     *connect_go.Client[users.UpdateMyUserRequest, users.UpdateMyUserResponse]
	updateUser                       *connect_go.Client[users.UpdateUserRequest, users.UpdateUserResponse]
	updateUserLabels                 *connect_go.Client[users.UpdateUserLabelsRequest, users.UpdateUserLabelsResponse]
	updateUserCallerId               *connect_go.Client[users.UpdateUserCallerIdRequest, users.UpdateUserCallerIdResponse]
	updateUserDisabled               *connect_go.Client[users.UpdateUserDisabledRequest, users.UpdateUserDisabledResponse]
	updateUserDisabledByOrgId        *connect_go.Client[users.UpdateUserDisabledByOrgIdRequest, users.UpdateUserDisabledByOrgIdResponse]
	getMyUserPasswordResetLink       *connect_go.Client[users.GetMyUserPasswordResetLinkRequest, users.GetMyUserPasswordResetLinkResponse]
	getUserPasswordResetLink         *connect_go.Client[users.GetUserPasswordResetLinkRequest, users.GetUserPasswordResetLinkResponse]
	getUserPasswordResetLinkByOrgId  *connect_go.Client[users.GetUserPasswordResetLinkByOrgIdRequest, users.GetUserPasswordResetLinkByOrgIdResponse]
	createPasswordResetLink          *connect_go.Client[users.CreatePasswordResetLinkRequest, users.CreatePasswordResetLinkResponse]
	createPasswordResetLinkByOrgId   *connect_go.Client[users.CreatePasswordResetLinkByOrgIdRequest, users.CreatePasswordResetLinkByOrgIdResponse]
	getUserLoginInfo                 *connect_go.Client[users.GetUserLoginInfoRequest, users.GetUserLoginInfoResponse]
	getUserEmailVerified             *connect_go.Client[users.GetUserEmailVerifiedRequest, users.GetUserEmailVerifiedResponse]
	getUserEmailVerifiedByOrgId      *connect_go.Client[users.GetUserEmailVerifiedByOrgIdRequest, users.GetUserEmailVerifiedByOrgIdResponse]
	resetMyPassword                  *connect_go.Client[users.ResetMyPasswordRequest, users.ResetMyPasswordResponse]
	resetUserPassword                *connect_go.Client[users.ResetUserPasswordRequest, users.ResetUserPasswordResponse]
	resetUserPasswordByOrgId         *connect_go.Client[users.ResetUserPasswordByOrgIdRequest, users.ResetUserPasswordByOrgIdResponse]
	sendUserEmailVerification        *connect_go.Client[users.SendUserEmailVerificationRequest, users.SendUserEmailVerificationResponse]
	sendUserEmailVerificationByOrgId *connect_go.Client[users.SendUserEmailVerificationByOrgIdRequest, users.SendUserEmailVerificationByOrgIdResponse]
	sendPasswordReset                *connect_go.Client[users.SendPasswordResetRequest, users.SendPasswordResetResponse]
	sendPasswordResetByOrgId         *connect_go.Client[users.SendPasswordResetByOrgIdRequest, users.SendPasswordResetByOrgIdResponse]
	getUserSessionData               *connect_go.Client[users.GetUserSessionDataRequest, users.GetUserSessionDataResponse]
	getAgentProfileGroup             *connect_go.Client[users.GetAgentProfileGroupRequest, users.GetAgentProfileGroupResponse]
	listAgentProfileGroups           *connect_go.Client[users.ListAgentProfileGroupsRequest, users.ListAgentProfileGroupsResponse]
	updateAgentProfileGroup          *connect_go.Client[users.UpdateAgentProfileGroupRequest, users.UpdateAgentProfileGroupResponse]
	createAgentProfileGroup          *connect_go.Client[users.CreateAgentProfileGroupRequest, users.CreateAgentProfileGroupResponse]
	deleteAgentProfileGroup          *connect_go.Client[users.DeleteAgentProfileGroupRequest, users.DeleteAgentProfileGroupResponse]
	assignAgentProfileGroups         *connect_go.Client[users.AssignAgentProfileGroupsRequest, users.AssignAgentProfileGroupsResponse]
	addUserSubscription              *connect_go.Client[users.AddUserSubscriptionRequest, users.AddUserSubscriptionResponse]
	addUserSubscriptionByUserId      *connect_go.Client[users.AddUserSubscriptionByUserIdRequest, users.AddUserSubscriptionByUserIdResponse]
	getUserSubscription              *connect_go.Client[users.GetUserSubscriptionRequest, users.GetUserSubscriptionResponse]
	getUserSubscriptionByUserId      *connect_go.Client[users.GetUserSubscriptionByUserIdRequest, users.GetUserSubscriptionByUserIdResponse]
	updateUserSubscription           *connect_go.Client[users.UpdateUserSubscriptionRequest, users.UpdateUserSubscriptionResponse]
	updateUserSubscriptionByUserId   *connect_go.Client[users.UpdateUserSubscriptionByUserIdRequest, users.UpdateUserSubscriptionByUserIdResponse]
	removeUserSubscription           *connect_go.Client[users.RemoveUserSubscriptionRequest, users.RemoveUserSubscriptionResponse]
	removeUserSubscriptionByUserId   *connect_go.Client[users.RemoveUserSubscriptionByUserIdRequest, users.RemoveUserSubscriptionByUserIdResponse]
	listUserSubscriptions            *connect_go.Client[users.ListUserSubscriptionsRequest, users.ListUserSubscriptionsResponse]
	listUserSubscriptionsByUserId    *connect_go.Client[users.ListUserSubscriptionsByUserIdRequest, users.ListUserSubscriptionsByUserIdResponse]
	listOrgSubscriptions             *connect_go.Client[users.ListOrgSubscriptionsRequest, users.ListOrgSubscriptionsResponse]
	createAuthToken                  *connect_go.Client[users.CreateAuthTokenRequest, users.CreateAuthTokenResponse]
	createAuthTokenByUserId          *connect_go.Client[users.CreateAuthTokenByUserIdRequest, users.CreateAuthTokenByUserIdResponse]
	listAuthTokens                   *connect_go.Client[users.ListAuthTokensRequest, users.ListAuthTokensResponse]
	listAuthTokensByUserId           *connect_go.Client[users.ListAuthTokensByUserIdRequest, users.ListAuthTokensByUserIdResponse]
	setAuthTokenExpiration           *connect_go.Client[users.SetAuthTokenExpirationRequest, users.SetAuthTokenExpirationResponse]
	setAuthTokenExpirationByUserId   *connect_go.Client[users.SetAuthTokenExpirationByUserIdRequest, users.SetAuthTokenExpirationByUserIdResponse]
	deleteAuthToken                  *connect_go.Client[users.DeleteAuthTokenRequest, users.DeleteAuthTokenResponse]
	deleteAuthTokenByUserId          *connect_go.Client[users.DeleteAuthTokenByUserIdRequest, users.DeleteAuthTokenByUserIdResponse]
	refreshMfaLockout                *connect_go.Client[users.RefreshMfaLockoutRequest, users.RefreshMfaLockoutResponse]
	refreshMfaLockoutByOrgId         *connect_go.Client[users.RefreshMfaLockoutByOrgIdRequest, users.RefreshMfaLockoutByOrgIdResponse]
	setMfaType                       *connect_go.Client[users.SetMfaTypeRequest, users.SetMfaTypeResponse]
	setMyMfaType                     *connect_go.Client[users.SetMyMfaTypeRequest, users.SetMyMfaTypeResponse]
	enableUserMfa                    *connect_go.Client[users.EnableUserMfaRequest, users.EnableUserMfaResponse]
	enableMyUserMfa                  *connect_go.Client[users.EnableMyUserMfaRequest, users.EnableMyUserMfaResponse]
	getUserMfaInfo                   *connect_go.Client[users.GetUserMfaInfoRequest, users.GetUserMfaInfoResponse]
	getMyUserMfaInfo                 *connect_go.Client[users.GetMyUserMfaInfoRequest, users.GetMyUserMfaInfoResponse]
	addGroupedUserIPRestrictions     *connect_go.Client[users.AddGroupedUserIPRestrictionsRequest, users.AddGroupedUserIPRestrictionsResponse]
	removeGroupedUserIPRestrictions  *connect_go.Client[users.RemoveGroupedUserIPRestrictionsRequest, users.RemoveGroupedUserIPRestrictionsResponse]
	listUsersAllowedIps              *connect_go.Client[users.ListUsersAllowedIpsRequest, users.ListUsersAllowedIpsResponse]
}

// CreateUser calls api.v1alpha1.org.users.UsersService.CreateUser.
func (c *usersServiceClient) CreateUser(ctx context.Context, req *connect_go.Request[users.CreateUserRequest]) (*connect_go.Response[users.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// CreateDelegatedUser calls api.v1alpha1.org.users.UsersService.CreateDelegatedUser.
func (c *usersServiceClient) CreateDelegatedUser(ctx context.Context, req *connect_go.Request[users.CreateDelegatedUserRequest]) (*connect_go.Response[users.CreateDelegatedUserResponse], error) {
	return c.createDelegatedUser.CallUnary(ctx, req)
}

// GetMyUser calls api.v1alpha1.org.users.UsersService.GetMyUser.
func (c *usersServiceClient) GetMyUser(ctx context.Context, req *connect_go.Request[users.GetMyUserRequest]) (*connect_go.Response[users.GetMyUserResponse], error) {
	return c.getMyUser.CallUnary(ctx, req)
}

// GetUser calls api.v1alpha1.org.users.UsersService.GetUser.
func (c *usersServiceClient) GetUser(ctx context.Context, req *connect_go.Request[users.GetUserRequest]) (*connect_go.Response[users.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// GetUserByOrgId calls api.v1alpha1.org.users.UsersService.GetUserByOrgId.
func (c *usersServiceClient) GetUserByOrgId(ctx context.Context, req *connect_go.Request[users.GetUserByOrgIdRequest]) (*connect_go.Response[users.GetUserByOrgIdResponse], error) {
	return c.getUserByOrgId.CallUnary(ctx, req)
}

// ListAgents calls api.v1alpha1.org.users.UsersService.ListAgents.
func (c *usersServiceClient) ListAgents(ctx context.Context, req *connect_go.Request[users.ListAgentsRequest]) (*connect_go.ServerStreamForClient[users.ListAgentsResponse], error) {
	return c.listAgents.CallServerStream(ctx, req)
}

// ListPublicUsers calls api.v1alpha1.org.users.UsersService.ListPublicUsers.
func (c *usersServiceClient) ListPublicUsers(ctx context.Context, req *connect_go.Request[users.ListPublicUsersRequest]) (*connect_go.ServerStreamForClient[users.ListPublicUsersResponse], error) {
	return c.listPublicUsers.CallServerStream(ctx, req)
}

// ListUsers calls api.v1alpha1.org.users.UsersService.ListUsers.
func (c *usersServiceClient) ListUsers(ctx context.Context, req *connect_go.Request[users.ListUsersRequest]) (*connect_go.ServerStreamForClient[users.ListUsersResponse], error) {
	return c.listUsers.CallServerStream(ctx, req)
}

// ListUsersByOrgId calls api.v1alpha1.org.users.UsersService.ListUsersByOrgId.
func (c *usersServiceClient) ListUsersByOrgId(ctx context.Context, req *connect_go.Request[users.ListUsersByOrgIdRequest]) (*connect_go.ServerStreamForClient[users.ListUsersByOrgIdResponse], error) {
	return c.listUsersByOrgId.CallServerStream(ctx, req)
}

// ListUsersByRegion calls api.v1alpha1.org.users.UsersService.ListUsersByRegion.
func (c *usersServiceClient) ListUsersByRegion(ctx context.Context, req *connect_go.Request[users.ListUsersByRegionRequest]) (*connect_go.ServerStreamForClient[users.ListUsersByRegionResponse], error) {
	return c.listUsersByRegion.CallServerStream(ctx, req)
}

// UpdateMyUser calls api.v1alpha1.org.users.UsersService.UpdateMyUser.
func (c *usersServiceClient) UpdateMyUser(ctx context.Context, req *connect_go.Request[users.UpdateMyUserRequest]) (*connect_go.Response[users.UpdateMyUserResponse], error) {
	return c.updateMyUser.CallUnary(ctx, req)
}

// UpdateUser calls api.v1alpha1.org.users.UsersService.UpdateUser.
func (c *usersServiceClient) UpdateUser(ctx context.Context, req *connect_go.Request[users.UpdateUserRequest]) (*connect_go.Response[users.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// UpdateUserLabels calls api.v1alpha1.org.users.UsersService.UpdateUserLabels.
func (c *usersServiceClient) UpdateUserLabels(ctx context.Context, req *connect_go.Request[users.UpdateUserLabelsRequest]) (*connect_go.Response[users.UpdateUserLabelsResponse], error) {
	return c.updateUserLabels.CallUnary(ctx, req)
}

// UpdateUserCallerId calls api.v1alpha1.org.users.UsersService.UpdateUserCallerId.
func (c *usersServiceClient) UpdateUserCallerId(ctx context.Context, req *connect_go.Request[users.UpdateUserCallerIdRequest]) (*connect_go.Response[users.UpdateUserCallerIdResponse], error) {
	return c.updateUserCallerId.CallUnary(ctx, req)
}

// UpdateUserDisabled calls api.v1alpha1.org.users.UsersService.UpdateUserDisabled.
func (c *usersServiceClient) UpdateUserDisabled(ctx context.Context, req *connect_go.Request[users.UpdateUserDisabledRequest]) (*connect_go.Response[users.UpdateUserDisabledResponse], error) {
	return c.updateUserDisabled.CallUnary(ctx, req)
}

// UpdateUserDisabledByOrgId calls api.v1alpha1.org.users.UsersService.UpdateUserDisabledByOrgId.
func (c *usersServiceClient) UpdateUserDisabledByOrgId(ctx context.Context, req *connect_go.Request[users.UpdateUserDisabledByOrgIdRequest]) (*connect_go.Response[users.UpdateUserDisabledByOrgIdResponse], error) {
	return c.updateUserDisabledByOrgId.CallUnary(ctx, req)
}

// GetMyUserPasswordResetLink calls api.v1alpha1.org.users.UsersService.GetMyUserPasswordResetLink.
func (c *usersServiceClient) GetMyUserPasswordResetLink(ctx context.Context, req *connect_go.Request[users.GetMyUserPasswordResetLinkRequest]) (*connect_go.Response[users.GetMyUserPasswordResetLinkResponse], error) {
	return c.getMyUserPasswordResetLink.CallUnary(ctx, req)
}

// GetUserPasswordResetLink calls api.v1alpha1.org.users.UsersService.GetUserPasswordResetLink.
func (c *usersServiceClient) GetUserPasswordResetLink(ctx context.Context, req *connect_go.Request[users.GetUserPasswordResetLinkRequest]) (*connect_go.Response[users.GetUserPasswordResetLinkResponse], error) {
	return c.getUserPasswordResetLink.CallUnary(ctx, req)
}

// GetUserPasswordResetLinkByOrgId calls
// api.v1alpha1.org.users.UsersService.GetUserPasswordResetLinkByOrgId.
func (c *usersServiceClient) GetUserPasswordResetLinkByOrgId(ctx context.Context, req *connect_go.Request[users.GetUserPasswordResetLinkByOrgIdRequest]) (*connect_go.Response[users.GetUserPasswordResetLinkByOrgIdResponse], error) {
	return c.getUserPasswordResetLinkByOrgId.CallUnary(ctx, req)
}

// CreatePasswordResetLink calls api.v1alpha1.org.users.UsersService.CreatePasswordResetLink.
func (c *usersServiceClient) CreatePasswordResetLink(ctx context.Context, req *connect_go.Request[users.CreatePasswordResetLinkRequest]) (*connect_go.Response[users.CreatePasswordResetLinkResponse], error) {
	return c.createPasswordResetLink.CallUnary(ctx, req)
}

// CreatePasswordResetLinkByOrgId calls
// api.v1alpha1.org.users.UsersService.CreatePasswordResetLinkByOrgId.
func (c *usersServiceClient) CreatePasswordResetLinkByOrgId(ctx context.Context, req *connect_go.Request[users.CreatePasswordResetLinkByOrgIdRequest]) (*connect_go.Response[users.CreatePasswordResetLinkByOrgIdResponse], error) {
	return c.createPasswordResetLinkByOrgId.CallUnary(ctx, req)
}

// GetUserLoginInfo calls api.v1alpha1.org.users.UsersService.GetUserLoginInfo.
func (c *usersServiceClient) GetUserLoginInfo(ctx context.Context, req *connect_go.Request[users.GetUserLoginInfoRequest]) (*connect_go.Response[users.GetUserLoginInfoResponse], error) {
	return c.getUserLoginInfo.CallUnary(ctx, req)
}

// GetUserEmailVerified calls api.v1alpha1.org.users.UsersService.GetUserEmailVerified.
func (c *usersServiceClient) GetUserEmailVerified(ctx context.Context, req *connect_go.Request[users.GetUserEmailVerifiedRequest]) (*connect_go.Response[users.GetUserEmailVerifiedResponse], error) {
	return c.getUserEmailVerified.CallUnary(ctx, req)
}

// GetUserEmailVerifiedByOrgId calls
// api.v1alpha1.org.users.UsersService.GetUserEmailVerifiedByOrgId.
func (c *usersServiceClient) GetUserEmailVerifiedByOrgId(ctx context.Context, req *connect_go.Request[users.GetUserEmailVerifiedByOrgIdRequest]) (*connect_go.Response[users.GetUserEmailVerifiedByOrgIdResponse], error) {
	return c.getUserEmailVerifiedByOrgId.CallUnary(ctx, req)
}

// ResetMyPassword calls api.v1alpha1.org.users.UsersService.ResetMyPassword.
func (c *usersServiceClient) ResetMyPassword(ctx context.Context, req *connect_go.Request[users.ResetMyPasswordRequest]) (*connect_go.Response[users.ResetMyPasswordResponse], error) {
	return c.resetMyPassword.CallUnary(ctx, req)
}

// ResetUserPassword calls api.v1alpha1.org.users.UsersService.ResetUserPassword.
func (c *usersServiceClient) ResetUserPassword(ctx context.Context, req *connect_go.Request[users.ResetUserPasswordRequest]) (*connect_go.Response[users.ResetUserPasswordResponse], error) {
	return c.resetUserPassword.CallUnary(ctx, req)
}

// ResetUserPasswordByOrgId calls api.v1alpha1.org.users.UsersService.ResetUserPasswordByOrgId.
func (c *usersServiceClient) ResetUserPasswordByOrgId(ctx context.Context, req *connect_go.Request[users.ResetUserPasswordByOrgIdRequest]) (*connect_go.Response[users.ResetUserPasswordByOrgIdResponse], error) {
	return c.resetUserPasswordByOrgId.CallUnary(ctx, req)
}

// SendUserEmailVerification calls api.v1alpha1.org.users.UsersService.SendUserEmailVerification.
func (c *usersServiceClient) SendUserEmailVerification(ctx context.Context, req *connect_go.Request[users.SendUserEmailVerificationRequest]) (*connect_go.Response[users.SendUserEmailVerificationResponse], error) {
	return c.sendUserEmailVerification.CallUnary(ctx, req)
}

// SendUserEmailVerificationByOrgId calls
// api.v1alpha1.org.users.UsersService.SendUserEmailVerificationByOrgId.
func (c *usersServiceClient) SendUserEmailVerificationByOrgId(ctx context.Context, req *connect_go.Request[users.SendUserEmailVerificationByOrgIdRequest]) (*connect_go.Response[users.SendUserEmailVerificationByOrgIdResponse], error) {
	return c.sendUserEmailVerificationByOrgId.CallUnary(ctx, req)
}

// SendPasswordReset calls api.v1alpha1.org.users.UsersService.SendPasswordReset.
func (c *usersServiceClient) SendPasswordReset(ctx context.Context, req *connect_go.Request[users.SendPasswordResetRequest]) (*connect_go.Response[users.SendPasswordResetResponse], error) {
	return c.sendPasswordReset.CallUnary(ctx, req)
}

// SendPasswordResetByOrgId calls api.v1alpha1.org.users.UsersService.SendPasswordResetByOrgId.
func (c *usersServiceClient) SendPasswordResetByOrgId(ctx context.Context, req *connect_go.Request[users.SendPasswordResetByOrgIdRequest]) (*connect_go.Response[users.SendPasswordResetByOrgIdResponse], error) {
	return c.sendPasswordResetByOrgId.CallUnary(ctx, req)
}

// GetUserSessionData calls api.v1alpha1.org.users.UsersService.GetUserSessionData.
func (c *usersServiceClient) GetUserSessionData(ctx context.Context, req *connect_go.Request[users.GetUserSessionDataRequest]) (*connect_go.Response[users.GetUserSessionDataResponse], error) {
	return c.getUserSessionData.CallUnary(ctx, req)
}

// GetAgentProfileGroup calls api.v1alpha1.org.users.UsersService.GetAgentProfileGroup.
func (c *usersServiceClient) GetAgentProfileGroup(ctx context.Context, req *connect_go.Request[users.GetAgentProfileGroupRequest]) (*connect_go.Response[users.GetAgentProfileGroupResponse], error) {
	return c.getAgentProfileGroup.CallUnary(ctx, req)
}

// ListAgentProfileGroups calls api.v1alpha1.org.users.UsersService.ListAgentProfileGroups.
func (c *usersServiceClient) ListAgentProfileGroups(ctx context.Context, req *connect_go.Request[users.ListAgentProfileGroupsRequest]) (*connect_go.Response[users.ListAgentProfileGroupsResponse], error) {
	return c.listAgentProfileGroups.CallUnary(ctx, req)
}

// UpdateAgentProfileGroup calls api.v1alpha1.org.users.UsersService.UpdateAgentProfileGroup.
func (c *usersServiceClient) UpdateAgentProfileGroup(ctx context.Context, req *connect_go.Request[users.UpdateAgentProfileGroupRequest]) (*connect_go.Response[users.UpdateAgentProfileGroupResponse], error) {
	return c.updateAgentProfileGroup.CallUnary(ctx, req)
}

// CreateAgentProfileGroup calls api.v1alpha1.org.users.UsersService.CreateAgentProfileGroup.
func (c *usersServiceClient) CreateAgentProfileGroup(ctx context.Context, req *connect_go.Request[users.CreateAgentProfileGroupRequest]) (*connect_go.Response[users.CreateAgentProfileGroupResponse], error) {
	return c.createAgentProfileGroup.CallUnary(ctx, req)
}

// DeleteAgentProfileGroup calls api.v1alpha1.org.users.UsersService.DeleteAgentProfileGroup.
func (c *usersServiceClient) DeleteAgentProfileGroup(ctx context.Context, req *connect_go.Request[users.DeleteAgentProfileGroupRequest]) (*connect_go.Response[users.DeleteAgentProfileGroupResponse], error) {
	return c.deleteAgentProfileGroup.CallUnary(ctx, req)
}

// AssignAgentProfileGroups calls api.v1alpha1.org.users.UsersService.AssignAgentProfileGroups.
func (c *usersServiceClient) AssignAgentProfileGroups(ctx context.Context, req *connect_go.Request[users.AssignAgentProfileGroupsRequest]) (*connect_go.Response[users.AssignAgentProfileGroupsResponse], error) {
	return c.assignAgentProfileGroups.CallUnary(ctx, req)
}

// AddUserSubscription calls api.v1alpha1.org.users.UsersService.AddUserSubscription.
func (c *usersServiceClient) AddUserSubscription(ctx context.Context, req *connect_go.Request[users.AddUserSubscriptionRequest]) (*connect_go.Response[users.AddUserSubscriptionResponse], error) {
	return c.addUserSubscription.CallUnary(ctx, req)
}

// AddUserSubscriptionByUserId calls
// api.v1alpha1.org.users.UsersService.AddUserSubscriptionByUserId.
func (c *usersServiceClient) AddUserSubscriptionByUserId(ctx context.Context, req *connect_go.Request[users.AddUserSubscriptionByUserIdRequest]) (*connect_go.Response[users.AddUserSubscriptionByUserIdResponse], error) {
	return c.addUserSubscriptionByUserId.CallUnary(ctx, req)
}

// GetUserSubscription calls api.v1alpha1.org.users.UsersService.GetUserSubscription.
func (c *usersServiceClient) GetUserSubscription(ctx context.Context, req *connect_go.Request[users.GetUserSubscriptionRequest]) (*connect_go.Response[users.GetUserSubscriptionResponse], error) {
	return c.getUserSubscription.CallUnary(ctx, req)
}

// GetUserSubscriptionByUserId calls
// api.v1alpha1.org.users.UsersService.GetUserSubscriptionByUserId.
func (c *usersServiceClient) GetUserSubscriptionByUserId(ctx context.Context, req *connect_go.Request[users.GetUserSubscriptionByUserIdRequest]) (*connect_go.Response[users.GetUserSubscriptionByUserIdResponse], error) {
	return c.getUserSubscriptionByUserId.CallUnary(ctx, req)
}

// UpdateUserSubscription calls api.v1alpha1.org.users.UsersService.UpdateUserSubscription.
func (c *usersServiceClient) UpdateUserSubscription(ctx context.Context, req *connect_go.Request[users.UpdateUserSubscriptionRequest]) (*connect_go.Response[users.UpdateUserSubscriptionResponse], error) {
	return c.updateUserSubscription.CallUnary(ctx, req)
}

// UpdateUserSubscriptionByUserId calls
// api.v1alpha1.org.users.UsersService.UpdateUserSubscriptionByUserId.
func (c *usersServiceClient) UpdateUserSubscriptionByUserId(ctx context.Context, req *connect_go.Request[users.UpdateUserSubscriptionByUserIdRequest]) (*connect_go.Response[users.UpdateUserSubscriptionByUserIdResponse], error) {
	return c.updateUserSubscriptionByUserId.CallUnary(ctx, req)
}

// RemoveUserSubscription calls api.v1alpha1.org.users.UsersService.RemoveUserSubscription.
func (c *usersServiceClient) RemoveUserSubscription(ctx context.Context, req *connect_go.Request[users.RemoveUserSubscriptionRequest]) (*connect_go.Response[users.RemoveUserSubscriptionResponse], error) {
	return c.removeUserSubscription.CallUnary(ctx, req)
}

// RemoveUserSubscriptionByUserId calls
// api.v1alpha1.org.users.UsersService.RemoveUserSubscriptionByUserId.
func (c *usersServiceClient) RemoveUserSubscriptionByUserId(ctx context.Context, req *connect_go.Request[users.RemoveUserSubscriptionByUserIdRequest]) (*connect_go.Response[users.RemoveUserSubscriptionByUserIdResponse], error) {
	return c.removeUserSubscriptionByUserId.CallUnary(ctx, req)
}

// ListUserSubscriptions calls api.v1alpha1.org.users.UsersService.ListUserSubscriptions.
func (c *usersServiceClient) ListUserSubscriptions(ctx context.Context, req *connect_go.Request[users.ListUserSubscriptionsRequest]) (*connect_go.Response[users.ListUserSubscriptionsResponse], error) {
	return c.listUserSubscriptions.CallUnary(ctx, req)
}

// ListUserSubscriptionsByUserId calls
// api.v1alpha1.org.users.UsersService.ListUserSubscriptionsByUserId.
func (c *usersServiceClient) ListUserSubscriptionsByUserId(ctx context.Context, req *connect_go.Request[users.ListUserSubscriptionsByUserIdRequest]) (*connect_go.Response[users.ListUserSubscriptionsByUserIdResponse], error) {
	return c.listUserSubscriptionsByUserId.CallUnary(ctx, req)
}

// ListOrgSubscriptions calls api.v1alpha1.org.users.UsersService.ListOrgSubscriptions.
func (c *usersServiceClient) ListOrgSubscriptions(ctx context.Context, req *connect_go.Request[users.ListOrgSubscriptionsRequest]) (*connect_go.Response[users.ListOrgSubscriptionsResponse], error) {
	return c.listOrgSubscriptions.CallUnary(ctx, req)
}

// CreateAuthToken calls api.v1alpha1.org.users.UsersService.CreateAuthToken.
func (c *usersServiceClient) CreateAuthToken(ctx context.Context, req *connect_go.Request[users.CreateAuthTokenRequest]) (*connect_go.Response[users.CreateAuthTokenResponse], error) {
	return c.createAuthToken.CallUnary(ctx, req)
}

// CreateAuthTokenByUserId calls api.v1alpha1.org.users.UsersService.CreateAuthTokenByUserId.
func (c *usersServiceClient) CreateAuthTokenByUserId(ctx context.Context, req *connect_go.Request[users.CreateAuthTokenByUserIdRequest]) (*connect_go.Response[users.CreateAuthTokenByUserIdResponse], error) {
	return c.createAuthTokenByUserId.CallUnary(ctx, req)
}

// ListAuthTokens calls api.v1alpha1.org.users.UsersService.ListAuthTokens.
func (c *usersServiceClient) ListAuthTokens(ctx context.Context, req *connect_go.Request[users.ListAuthTokensRequest]) (*connect_go.Response[users.ListAuthTokensResponse], error) {
	return c.listAuthTokens.CallUnary(ctx, req)
}

// ListAuthTokensByUserId calls api.v1alpha1.org.users.UsersService.ListAuthTokensByUserId.
func (c *usersServiceClient) ListAuthTokensByUserId(ctx context.Context, req *connect_go.Request[users.ListAuthTokensByUserIdRequest]) (*connect_go.Response[users.ListAuthTokensByUserIdResponse], error) {
	return c.listAuthTokensByUserId.CallUnary(ctx, req)
}

// SetAuthTokenExpiration calls api.v1alpha1.org.users.UsersService.SetAuthTokenExpiration.
func (c *usersServiceClient) SetAuthTokenExpiration(ctx context.Context, req *connect_go.Request[users.SetAuthTokenExpirationRequest]) (*connect_go.Response[users.SetAuthTokenExpirationResponse], error) {
	return c.setAuthTokenExpiration.CallUnary(ctx, req)
}

// SetAuthTokenExpirationByUserId calls
// api.v1alpha1.org.users.UsersService.SetAuthTokenExpirationByUserId.
func (c *usersServiceClient) SetAuthTokenExpirationByUserId(ctx context.Context, req *connect_go.Request[users.SetAuthTokenExpirationByUserIdRequest]) (*connect_go.Response[users.SetAuthTokenExpirationByUserIdResponse], error) {
	return c.setAuthTokenExpirationByUserId.CallUnary(ctx, req)
}

// DeleteAuthToken calls api.v1alpha1.org.users.UsersService.DeleteAuthToken.
func (c *usersServiceClient) DeleteAuthToken(ctx context.Context, req *connect_go.Request[users.DeleteAuthTokenRequest]) (*connect_go.Response[users.DeleteAuthTokenResponse], error) {
	return c.deleteAuthToken.CallUnary(ctx, req)
}

// DeleteAuthTokenByUserId calls api.v1alpha1.org.users.UsersService.DeleteAuthTokenByUserId.
func (c *usersServiceClient) DeleteAuthTokenByUserId(ctx context.Context, req *connect_go.Request[users.DeleteAuthTokenByUserIdRequest]) (*connect_go.Response[users.DeleteAuthTokenByUserIdResponse], error) {
	return c.deleteAuthTokenByUserId.CallUnary(ctx, req)
}

// RefreshMfaLockout calls api.v1alpha1.org.users.UsersService.RefreshMfaLockout.
func (c *usersServiceClient) RefreshMfaLockout(ctx context.Context, req *connect_go.Request[users.RefreshMfaLockoutRequest]) (*connect_go.Response[users.RefreshMfaLockoutResponse], error) {
	return c.refreshMfaLockout.CallUnary(ctx, req)
}

// RefreshMfaLockoutByOrgId calls api.v1alpha1.org.users.UsersService.RefreshMfaLockoutByOrgId.
func (c *usersServiceClient) RefreshMfaLockoutByOrgId(ctx context.Context, req *connect_go.Request[users.RefreshMfaLockoutByOrgIdRequest]) (*connect_go.Response[users.RefreshMfaLockoutByOrgIdResponse], error) {
	return c.refreshMfaLockoutByOrgId.CallUnary(ctx, req)
}

// SetMfaType calls api.v1alpha1.org.users.UsersService.SetMfaType.
func (c *usersServiceClient) SetMfaType(ctx context.Context, req *connect_go.Request[users.SetMfaTypeRequest]) (*connect_go.Response[users.SetMfaTypeResponse], error) {
	return c.setMfaType.CallUnary(ctx, req)
}

// SetMyMfaType calls api.v1alpha1.org.users.UsersService.SetMyMfaType.
func (c *usersServiceClient) SetMyMfaType(ctx context.Context, req *connect_go.Request[users.SetMyMfaTypeRequest]) (*connect_go.Response[users.SetMyMfaTypeResponse], error) {
	return c.setMyMfaType.CallUnary(ctx, req)
}

// EnableUserMfa calls api.v1alpha1.org.users.UsersService.EnableUserMfa.
func (c *usersServiceClient) EnableUserMfa(ctx context.Context, req *connect_go.Request[users.EnableUserMfaRequest]) (*connect_go.Response[users.EnableUserMfaResponse], error) {
	return c.enableUserMfa.CallUnary(ctx, req)
}

// EnableMyUserMfa calls api.v1alpha1.org.users.UsersService.EnableMyUserMfa.
func (c *usersServiceClient) EnableMyUserMfa(ctx context.Context, req *connect_go.Request[users.EnableMyUserMfaRequest]) (*connect_go.Response[users.EnableMyUserMfaResponse], error) {
	return c.enableMyUserMfa.CallUnary(ctx, req)
}

// GetUserMfaInfo calls api.v1alpha1.org.users.UsersService.GetUserMfaInfo.
func (c *usersServiceClient) GetUserMfaInfo(ctx context.Context, req *connect_go.Request[users.GetUserMfaInfoRequest]) (*connect_go.Response[users.GetUserMfaInfoResponse], error) {
	return c.getUserMfaInfo.CallUnary(ctx, req)
}

// GetMyUserMfaInfo calls api.v1alpha1.org.users.UsersService.GetMyUserMfaInfo.
func (c *usersServiceClient) GetMyUserMfaInfo(ctx context.Context, req *connect_go.Request[users.GetMyUserMfaInfoRequest]) (*connect_go.Response[users.GetMyUserMfaInfoResponse], error) {
	return c.getMyUserMfaInfo.CallUnary(ctx, req)
}

// AddGroupedUserIPRestrictions calls
// api.v1alpha1.org.users.UsersService.AddGroupedUserIPRestrictions.
func (c *usersServiceClient) AddGroupedUserIPRestrictions(ctx context.Context, req *connect_go.Request[users.AddGroupedUserIPRestrictionsRequest]) (*connect_go.Response[users.AddGroupedUserIPRestrictionsResponse], error) {
	return c.addGroupedUserIPRestrictions.CallUnary(ctx, req)
}

// RemoveGroupedUserIPRestrictions calls
// api.v1alpha1.org.users.UsersService.RemoveGroupedUserIPRestrictions.
func (c *usersServiceClient) RemoveGroupedUserIPRestrictions(ctx context.Context, req *connect_go.Request[users.RemoveGroupedUserIPRestrictionsRequest]) (*connect_go.Response[users.RemoveGroupedUserIPRestrictionsResponse], error) {
	return c.removeGroupedUserIPRestrictions.CallUnary(ctx, req)
}

// ListUsersAllowedIps calls api.v1alpha1.org.users.UsersService.ListUsersAllowedIps.
func (c *usersServiceClient) ListUsersAllowedIps(ctx context.Context, req *connect_go.Request[users.ListUsersAllowedIpsRequest]) (*connect_go.Response[users.ListUsersAllowedIpsResponse], error) {
	return c.listUsersAllowedIps.CallUnary(ctx, req)
}

// UsersServiceHandler is an implementation of the api.v1alpha1.org.users.UsersService service.
type UsersServiceHandler interface {
	// CreateUser creates a new user and enables it for the region it is getting created in.
	CreateUser(context.Context, *connect_go.Request[users.CreateUserRequest]) (*connect_go.Response[users.CreateUserResponse], error)
	// CreateDelegatedUser creates a new delegated user and enables it for the region it is getting created in.
	CreateDelegatedUser(context.Context, *connect_go.Request[users.CreateDelegatedUserRequest]) (*connect_go.Response[users.CreateDelegatedUserResponse], error)
	// GetMyUser returns a single user by provided claims.
	GetMyUser(context.Context, *connect_go.Request[users.GetMyUserRequest]) (*connect_go.Response[users.GetMyUserResponse], error)
	// GetUser returns a single user by UserId or by AgentSid.
	GetUser(context.Context, *connect_go.Request[users.GetUserRequest]) (*connect_go.Response[users.GetUserResponse], error)
	// GetUserByOrgId returns a single user by UserId and OrgId
	// Requires Customer Support permission and allows cross Org requests.
	GetUserByOrgId(context.Context, *connect_go.Request[users.GetUserByOrgIdRequest]) (*connect_go.Response[users.GetUserByOrgIdResponse], error)
	// ListAgents returns a list of Agents.
	ListAgents(context.Context, *connect_go.Request[users.ListAgentsRequest], *connect_go.ServerStream[users.ListAgentsResponse]) error
	// ListPublicUsers returns a list of users with limited data for most applications.
	ListPublicUsers(context.Context, *connect_go.Request[users.ListPublicUsersRequest], *connect_go.ServerStream[users.ListPublicUsersResponse]) error
	// ListUsers returns a list of users.
	ListUsers(context.Context, *connect_go.Request[users.ListUsersRequest], *connect_go.ServerStream[users.ListUsersResponse]) error
	// ListUsersByOrgId returns a list of users.
	ListUsersByOrgId(context.Context, *connect_go.Request[users.ListUsersByOrgIdRequest], *connect_go.ServerStream[users.ListUsersByOrgIdResponse]) error
	// ListUsersByRegion returns a list of usersByRegion.
	ListUsersByRegion(context.Context, *connect_go.Request[users.ListUsersByRegionRequest], *connect_go.ServerStream[users.ListUsersByRegionResponse]) error
	// UpdateMyUser updates a user.
	UpdateMyUser(context.Context, *connect_go.Request[users.UpdateMyUserRequest]) (*connect_go.Response[users.UpdateMyUserResponse], error)
	// UpdateUser updates a user.
	UpdateUser(context.Context, *connect_go.Request[users.UpdateUserRequest]) (*connect_go.Response[users.UpdateUserResponse], error)
	// UpdateUserLabels updates a user's labels to be the passed in set of labels.
	UpdateUserLabels(context.Context, *connect_go.Request[users.UpdateUserLabelsRequest]) (*connect_go.Response[users.UpdateUserLabelsResponse], error)
	// UpdateUserCallerId updates a user.
	UpdateUserCallerId(context.Context, *connect_go.Request[users.UpdateUserCallerIdRequest]) (*connect_go.Response[users.UpdateUserCallerIdResponse], error)
	// UpdateUserDisabled updates whether a user is disabled.
	UpdateUserDisabled(context.Context, *connect_go.Request[users.UpdateUserDisabledRequest]) (*connect_go.Response[users.UpdateUserDisabledResponse], error)
	// UpdateUserDisabledByOrgId updates a user is disabled.
	UpdateUserDisabledByOrgId(context.Context, *connect_go.Request[users.UpdateUserDisabledByOrgIdRequest]) (*connect_go.Response[users.UpdateUserDisabledByOrgIdResponse], error)
	// GetMyUserPasswordResetLink updates a user's password.
	GetMyUserPasswordResetLink(context.Context, *connect_go.Request[users.GetMyUserPasswordResetLinkRequest]) (*connect_go.Response[users.GetMyUserPasswordResetLinkResponse], error)
	// GetUserPasswordResetLink gets a link to update a user's password.
	GetUserPasswordResetLink(context.Context, *connect_go.Request[users.GetUserPasswordResetLinkRequest]) (*connect_go.Response[users.GetUserPasswordResetLinkResponse], error)
	// GetUserPasswordResetLinkByOrgId gets a link to update a user's password.
	GetUserPasswordResetLinkByOrgId(context.Context, *connect_go.Request[users.GetUserPasswordResetLinkByOrgIdRequest]) (*connect_go.Response[users.GetUserPasswordResetLinkByOrgIdResponse], error)
	// CreatePasswordResetLink creates a password reset link for the given user id.
	CreatePasswordResetLink(context.Context, *connect_go.Request[users.CreatePasswordResetLinkRequest]) (*connect_go.Response[users.CreatePasswordResetLinkResponse], error)
	// CreatePasswordResetLinkByOrgId creates a password reset link for the given user id.
	CreatePasswordResetLinkByOrgId(context.Context, *connect_go.Request[users.CreatePasswordResetLinkByOrgIdRequest]) (*connect_go.Response[users.CreatePasswordResetLinkByOrgIdResponse], error)
	// Used to be called GetUserBlocked
	// GetUserLoginInfo gets information about a user's login.
	GetUserLoginInfo(context.Context, *connect_go.Request[users.GetUserLoginInfoRequest]) (*connect_go.Response[users.GetUserLoginInfoResponse], error)
	// GetUserEmailVerified gets whether the user's email is verified.
	GetUserEmailVerified(context.Context, *connect_go.Request[users.GetUserEmailVerifiedRequest]) (*connect_go.Response[users.GetUserEmailVerifiedResponse], error)
	// GetUserEmailVerifiedByOrgId gets whether the user's email is verified.
	GetUserEmailVerifiedByOrgId(context.Context, *connect_go.Request[users.GetUserEmailVerifiedByOrgIdRequest]) (*connect_go.Response[users.GetUserEmailVerifiedByOrgIdResponse], error)
	// ResetMyPassword resets the user's password.
	ResetMyPassword(context.Context, *connect_go.Request[users.ResetMyPasswordRequest]) (*connect_go.Response[users.ResetMyPasswordResponse], error)
	// ResetUserPassword resets the user's password.
	ResetUserPassword(context.Context, *connect_go.Request[users.ResetUserPasswordRequest]) (*connect_go.Response[users.ResetUserPasswordResponse], error)
	// ResetUserPasswordByOrgId resets the user's password.
	ResetUserPasswordByOrgId(context.Context, *connect_go.Request[users.ResetUserPasswordByOrgIdRequest]) (*connect_go.Response[users.ResetUserPasswordByOrgIdResponse], error)
	// SendUserEmailVerification sends a verification email to the user.
	SendUserEmailVerification(context.Context, *connect_go.Request[users.SendUserEmailVerificationRequest]) (*connect_go.Response[users.SendUserEmailVerificationResponse], error)
	// SendUserEmailVerificationByOrgId sends a verification email to the user.
	SendUserEmailVerificationByOrgId(context.Context, *connect_go.Request[users.SendUserEmailVerificationByOrgIdRequest]) (*connect_go.Response[users.SendUserEmailVerificationByOrgIdResponse], error)
	// SendPasswordReset sends a password reset email to the user.
	SendPasswordReset(context.Context, *connect_go.Request[users.SendPasswordResetRequest]) (*connect_go.Response[users.SendPasswordResetResponse], error)
	// SendPasswordResetByOrgId sends a password reset email to the user.
	SendPasswordResetByOrgId(context.Context, *connect_go.Request[users.SendPasswordResetByOrgIdRequest]) (*connect_go.Response[users.SendPasswordResetByOrgIdResponse], error)
	// GetUserSessionData returns data for the front end's session state
	GetUserSessionData(context.Context, *connect_go.Request[users.GetUserSessionDataRequest]) (*connect_go.Response[users.GetUserSessionDataResponse], error)
	// GetAgentProfileGroup returns an agent profile group by id
	GetAgentProfileGroup(context.Context, *connect_go.Request[users.GetAgentProfileGroupRequest]) (*connect_go.Response[users.GetAgentProfileGroupResponse], error)
	// ListAgentProfileGroups returns the agent profile groups associated with the current organization
	ListAgentProfileGroups(context.Context, *connect_go.Request[users.ListAgentProfileGroupsRequest]) (*connect_go.Response[users.ListAgentProfileGroupsResponse], error)
	// UpdateAgentProfileGroup updates an AgentProfileGroup. Can only update if user is in same org as AgentProfileGroup
	UpdateAgentProfileGroup(context.Context, *connect_go.Request[users.UpdateAgentProfileGroupRequest]) (*connect_go.Response[users.UpdateAgentProfileGroupResponse], error)
	// CreateAgentProfileGroup creates an AgentProfileGroup. Can only create if user is in same org as AgentProfileGroup
	CreateAgentProfileGroup(context.Context, *connect_go.Request[users.CreateAgentProfileGroupRequest]) (*connect_go.Response[users.CreateAgentProfileGroupResponse], error)
	// DeleteAgentProfileGroup deletes an AgentProfileGroup. Can only delete if user is in same org as AgentProfileGroup
	DeleteAgentProfileGroup(context.Context, *connect_go.Request[users.DeleteAgentProfileGroupRequest]) (*connect_go.Response[users.DeleteAgentProfileGroupResponse], error)
	// AssignAgentProfileGroups assigns a list of users to an AgentProfileGroup. Can only use if everything is in the same organization.
	AssignAgentProfileGroups(context.Context, *connect_go.Request[users.AssignAgentProfileGroupsRequest]) (*connect_go.Response[users.AssignAgentProfileGroupsResponse], error)
	// Creates a new user subscription.
	AddUserSubscription(context.Context, *connect_go.Request[users.AddUserSubscriptionRequest]) (*connect_go.Response[users.AddUserSubscriptionResponse], error)
	// Creates a new user subscription for a specified user with in requested users org.
	AddUserSubscriptionByUserId(context.Context, *connect_go.Request[users.AddUserSubscriptionByUserIdRequest]) (*connect_go.Response[users.AddUserSubscriptionByUserIdResponse], error)
	// Gets a user subscription.
	GetUserSubscription(context.Context, *connect_go.Request[users.GetUserSubscriptionRequest]) (*connect_go.Response[users.GetUserSubscriptionResponse], error)
	// Gets a user subscription for a specified user with in requested users org.
	GetUserSubscriptionByUserId(context.Context, *connect_go.Request[users.GetUserSubscriptionByUserIdRequest]) (*connect_go.Response[users.GetUserSubscriptionByUserIdResponse], error)
	// Updates a user subscription for the current user
	UpdateUserSubscription(context.Context, *connect_go.Request[users.UpdateUserSubscriptionRequest]) (*connect_go.Response[users.UpdateUserSubscriptionResponse], error)
	// Updates a user subscription for a given user id
	UpdateUserSubscriptionByUserId(context.Context, *connect_go.Request[users.UpdateUserSubscriptionByUserIdRequest]) (*connect_go.Response[users.UpdateUserSubscriptionByUserIdResponse], error)
	// Remove a user subscription.
	RemoveUserSubscription(context.Context, *connect_go.Request[users.RemoveUserSubscriptionRequest]) (*connect_go.Response[users.RemoveUserSubscriptionResponse], error)
	// Remove a user subscription by a given user id
	RemoveUserSubscriptionByUserId(context.Context, *connect_go.Request[users.RemoveUserSubscriptionByUserIdRequest]) (*connect_go.Response[users.RemoveUserSubscriptionByUserIdResponse], error)
	// Lists user subscriptions.
	ListUserSubscriptions(context.Context, *connect_go.Request[users.ListUserSubscriptionsRequest]) (*connect_go.Response[users.ListUserSubscriptionsResponse], error)
	// Lists user subscriptions.
	ListUserSubscriptionsByUserId(context.Context, *connect_go.Request[users.ListUserSubscriptionsByUserIdRequest]) (*connect_go.Response[users.ListUserSubscriptionsByUserIdResponse], error)
	// Lists subscriptions for multiple users in an org.
	ListOrgSubscriptions(context.Context, *connect_go.Request[users.ListOrgSubscriptionsRequest]) (*connect_go.Response[users.ListOrgSubscriptionsResponse], error)
	// AUTH TOKEN
	// CreateAuthToken creates an auth token for the current user.
	CreateAuthToken(context.Context, *connect_go.Request[users.CreateAuthTokenRequest]) (*connect_go.Response[users.CreateAuthTokenResponse], error)
	// CreateAuthTokenByUserId creates an auth token for the given user.
	CreateAuthTokenByUserId(context.Context, *connect_go.Request[users.CreateAuthTokenByUserIdRequest]) (*connect_go.Response[users.CreateAuthTokenByUserIdResponse], error)
	// ListAuthTokens list tokens of current user.
	ListAuthTokens(context.Context, *connect_go.Request[users.ListAuthTokensRequest]) (*connect_go.Response[users.ListAuthTokensResponse], error)
	// ListAuthTokensByUserId list tokens of given user.
	ListAuthTokensByUserId(context.Context, *connect_go.Request[users.ListAuthTokensByUserIdRequest]) (*connect_go.Response[users.ListAuthTokensByUserIdResponse], error)
	// SetAuthTokenExpiration sets expiration back one year for current user.
	SetAuthTokenExpiration(context.Context, *connect_go.Request[users.SetAuthTokenExpirationRequest]) (*connect_go.Response[users.SetAuthTokenExpirationResponse], error)
	// SetAuthTokenExpirationByUserId sets expiration back one year for given user.
	SetAuthTokenExpirationByUserId(context.Context, *connect_go.Request[users.SetAuthTokenExpirationByUserIdRequest]) (*connect_go.Response[users.SetAuthTokenExpirationByUserIdResponse], error)
	// DeleteAuthToken deletes a given auth token for the current user.
	DeleteAuthToken(context.Context, *connect_go.Request[users.DeleteAuthTokenRequest]) (*connect_go.Response[users.DeleteAuthTokenResponse], error)
	// DeleteAuthTokenByUserId deletes a given auth token for the given user.
	DeleteAuthTokenByUserId(context.Context, *connect_go.Request[users.DeleteAuthTokenByUserIdRequest]) (*connect_go.Response[users.DeleteAuthTokenByUserIdResponse], error)
	// RefreshMfaLockout resets the lockout timer for the given user.
	RefreshMfaLockout(context.Context, *connect_go.Request[users.RefreshMfaLockoutRequest]) (*connect_go.Response[users.RefreshMfaLockoutResponse], error)
	// RefreshMfaLockoutByOrgId resets the lockout timer for the given user and org id.
	RefreshMfaLockoutByOrgId(context.Context, *connect_go.Request[users.RefreshMfaLockoutByOrgIdRequest]) (*connect_go.Response[users.RefreshMfaLockoutByOrgIdResponse], error)
	// SetMfaType sets the given user's mfa type.
	SetMfaType(context.Context, *connect_go.Request[users.SetMfaTypeRequest]) (*connect_go.Response[users.SetMfaTypeResponse], error)
	// SetMyMfaType sets the current user's mfa type.
	SetMyMfaType(context.Context, *connect_go.Request[users.SetMyMfaTypeRequest]) (*connect_go.Response[users.SetMyMfaTypeResponse], error)
	// EnableUserMfa enables or disables mfa for the given user
	EnableUserMfa(context.Context, *connect_go.Request[users.EnableUserMfaRequest]) (*connect_go.Response[users.EnableUserMfaResponse], error)
	// EnableMyUserMfa enables mfa for the current user
	EnableMyUserMfa(context.Context, *connect_go.Request[users.EnableMyUserMfaRequest]) (*connect_go.Response[users.EnableMyUserMfaResponse], error)
	// GetUserMfaInfo returns the mfa info for the given user.
	GetUserMfaInfo(context.Context, *connect_go.Request[users.GetUserMfaInfoRequest]) (*connect_go.Response[users.GetUserMfaInfoResponse], error)
	// GetMyUserMfaInfo returns the mfa info for the current user.
	GetMyUserMfaInfo(context.Context, *connect_go.Request[users.GetMyUserMfaInfoRequest]) (*connect_go.Response[users.GetMyUserMfaInfoResponse], error)
	// AddGroupedUserIPRestrictions adds a user or list of user's IPs they
	// are required to authenticate with
	AddGroupedUserIPRestrictions(context.Context, *connect_go.Request[users.AddGroupedUserIPRestrictionsRequest]) (*connect_go.Response[users.AddGroupedUserIPRestrictionsResponse], error)
	// RemoveGroupedUserIPRestrictions removes a user or list of user's IPs they
	// are required to authenticate with
	RemoveGroupedUserIPRestrictions(context.Context, *connect_go.Request[users.RemoveGroupedUserIPRestrictionsRequest]) (*connect_go.Response[users.RemoveGroupedUserIPRestrictionsResponse], error)
	// ListUsersAllowedIps returns the list of allowed IPs for the user.
	ListUsersAllowedIps(context.Context, *connect_go.Request[users.ListUsersAllowedIpsRequest]) (*connect_go.Response[users.ListUsersAllowedIpsResponse], error)
}

// NewUsersServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUsersServiceHandler(svc UsersServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	usersServiceCreateUserHandler := connect_go.NewUnaryHandler(
		UsersServiceCreateUserProcedure,
		svc.CreateUser,
		opts...,
	)
	usersServiceCreateDelegatedUserHandler := connect_go.NewUnaryHandler(
		UsersServiceCreateDelegatedUserProcedure,
		svc.CreateDelegatedUser,
		opts...,
	)
	usersServiceGetMyUserHandler := connect_go.NewUnaryHandler(
		UsersServiceGetMyUserProcedure,
		svc.GetMyUser,
		opts...,
	)
	usersServiceGetUserHandler := connect_go.NewUnaryHandler(
		UsersServiceGetUserProcedure,
		svc.GetUser,
		opts...,
	)
	usersServiceGetUserByOrgIdHandler := connect_go.NewUnaryHandler(
		UsersServiceGetUserByOrgIdProcedure,
		svc.GetUserByOrgId,
		opts...,
	)
	usersServiceListAgentsHandler := connect_go.NewServerStreamHandler(
		UsersServiceListAgentsProcedure,
		svc.ListAgents,
		opts...,
	)
	usersServiceListPublicUsersHandler := connect_go.NewServerStreamHandler(
		UsersServiceListPublicUsersProcedure,
		svc.ListPublicUsers,
		opts...,
	)
	usersServiceListUsersHandler := connect_go.NewServerStreamHandler(
		UsersServiceListUsersProcedure,
		svc.ListUsers,
		opts...,
	)
	usersServiceListUsersByOrgIdHandler := connect_go.NewServerStreamHandler(
		UsersServiceListUsersByOrgIdProcedure,
		svc.ListUsersByOrgId,
		opts...,
	)
	usersServiceListUsersByRegionHandler := connect_go.NewServerStreamHandler(
		UsersServiceListUsersByRegionProcedure,
		svc.ListUsersByRegion,
		opts...,
	)
	usersServiceUpdateMyUserHandler := connect_go.NewUnaryHandler(
		UsersServiceUpdateMyUserProcedure,
		svc.UpdateMyUser,
		opts...,
	)
	usersServiceUpdateUserHandler := connect_go.NewUnaryHandler(
		UsersServiceUpdateUserProcedure,
		svc.UpdateUser,
		opts...,
	)
	usersServiceUpdateUserLabelsHandler := connect_go.NewUnaryHandler(
		UsersServiceUpdateUserLabelsProcedure,
		svc.UpdateUserLabels,
		opts...,
	)
	usersServiceUpdateUserCallerIdHandler := connect_go.NewUnaryHandler(
		UsersServiceUpdateUserCallerIdProcedure,
		svc.UpdateUserCallerId,
		opts...,
	)
	usersServiceUpdateUserDisabledHandler := connect_go.NewUnaryHandler(
		UsersServiceUpdateUserDisabledProcedure,
		svc.UpdateUserDisabled,
		opts...,
	)
	usersServiceUpdateUserDisabledByOrgIdHandler := connect_go.NewUnaryHandler(
		UsersServiceUpdateUserDisabledByOrgIdProcedure,
		svc.UpdateUserDisabledByOrgId,
		opts...,
	)
	usersServiceGetMyUserPasswordResetLinkHandler := connect_go.NewUnaryHandler(
		UsersServiceGetMyUserPasswordResetLinkProcedure,
		svc.GetMyUserPasswordResetLink,
		opts...,
	)
	usersServiceGetUserPasswordResetLinkHandler := connect_go.NewUnaryHandler(
		UsersServiceGetUserPasswordResetLinkProcedure,
		svc.GetUserPasswordResetLink,
		opts...,
	)
	usersServiceGetUserPasswordResetLinkByOrgIdHandler := connect_go.NewUnaryHandler(
		UsersServiceGetUserPasswordResetLinkByOrgIdProcedure,
		svc.GetUserPasswordResetLinkByOrgId,
		opts...,
	)
	usersServiceCreatePasswordResetLinkHandler := connect_go.NewUnaryHandler(
		UsersServiceCreatePasswordResetLinkProcedure,
		svc.CreatePasswordResetLink,
		opts...,
	)
	usersServiceCreatePasswordResetLinkByOrgIdHandler := connect_go.NewUnaryHandler(
		UsersServiceCreatePasswordResetLinkByOrgIdProcedure,
		svc.CreatePasswordResetLinkByOrgId,
		opts...,
	)
	usersServiceGetUserLoginInfoHandler := connect_go.NewUnaryHandler(
		UsersServiceGetUserLoginInfoProcedure,
		svc.GetUserLoginInfo,
		opts...,
	)
	usersServiceGetUserEmailVerifiedHandler := connect_go.NewUnaryHandler(
		UsersServiceGetUserEmailVerifiedProcedure,
		svc.GetUserEmailVerified,
		opts...,
	)
	usersServiceGetUserEmailVerifiedByOrgIdHandler := connect_go.NewUnaryHandler(
		UsersServiceGetUserEmailVerifiedByOrgIdProcedure,
		svc.GetUserEmailVerifiedByOrgId,
		opts...,
	)
	usersServiceResetMyPasswordHandler := connect_go.NewUnaryHandler(
		UsersServiceResetMyPasswordProcedure,
		svc.ResetMyPassword,
		opts...,
	)
	usersServiceResetUserPasswordHandler := connect_go.NewUnaryHandler(
		UsersServiceResetUserPasswordProcedure,
		svc.ResetUserPassword,
		opts...,
	)
	usersServiceResetUserPasswordByOrgIdHandler := connect_go.NewUnaryHandler(
		UsersServiceResetUserPasswordByOrgIdProcedure,
		svc.ResetUserPasswordByOrgId,
		opts...,
	)
	usersServiceSendUserEmailVerificationHandler := connect_go.NewUnaryHandler(
		UsersServiceSendUserEmailVerificationProcedure,
		svc.SendUserEmailVerification,
		opts...,
	)
	usersServiceSendUserEmailVerificationByOrgIdHandler := connect_go.NewUnaryHandler(
		UsersServiceSendUserEmailVerificationByOrgIdProcedure,
		svc.SendUserEmailVerificationByOrgId,
		opts...,
	)
	usersServiceSendPasswordResetHandler := connect_go.NewUnaryHandler(
		UsersServiceSendPasswordResetProcedure,
		svc.SendPasswordReset,
		opts...,
	)
	usersServiceSendPasswordResetByOrgIdHandler := connect_go.NewUnaryHandler(
		UsersServiceSendPasswordResetByOrgIdProcedure,
		svc.SendPasswordResetByOrgId,
		opts...,
	)
	usersServiceGetUserSessionDataHandler := connect_go.NewUnaryHandler(
		UsersServiceGetUserSessionDataProcedure,
		svc.GetUserSessionData,
		opts...,
	)
	usersServiceGetAgentProfileGroupHandler := connect_go.NewUnaryHandler(
		UsersServiceGetAgentProfileGroupProcedure,
		svc.GetAgentProfileGroup,
		opts...,
	)
	usersServiceListAgentProfileGroupsHandler := connect_go.NewUnaryHandler(
		UsersServiceListAgentProfileGroupsProcedure,
		svc.ListAgentProfileGroups,
		opts...,
	)
	usersServiceUpdateAgentProfileGroupHandler := connect_go.NewUnaryHandler(
		UsersServiceUpdateAgentProfileGroupProcedure,
		svc.UpdateAgentProfileGroup,
		opts...,
	)
	usersServiceCreateAgentProfileGroupHandler := connect_go.NewUnaryHandler(
		UsersServiceCreateAgentProfileGroupProcedure,
		svc.CreateAgentProfileGroup,
		opts...,
	)
	usersServiceDeleteAgentProfileGroupHandler := connect_go.NewUnaryHandler(
		UsersServiceDeleteAgentProfileGroupProcedure,
		svc.DeleteAgentProfileGroup,
		opts...,
	)
	usersServiceAssignAgentProfileGroupsHandler := connect_go.NewUnaryHandler(
		UsersServiceAssignAgentProfileGroupsProcedure,
		svc.AssignAgentProfileGroups,
		opts...,
	)
	usersServiceAddUserSubscriptionHandler := connect_go.NewUnaryHandler(
		UsersServiceAddUserSubscriptionProcedure,
		svc.AddUserSubscription,
		opts...,
	)
	usersServiceAddUserSubscriptionByUserIdHandler := connect_go.NewUnaryHandler(
		UsersServiceAddUserSubscriptionByUserIdProcedure,
		svc.AddUserSubscriptionByUserId,
		opts...,
	)
	usersServiceGetUserSubscriptionHandler := connect_go.NewUnaryHandler(
		UsersServiceGetUserSubscriptionProcedure,
		svc.GetUserSubscription,
		opts...,
	)
	usersServiceGetUserSubscriptionByUserIdHandler := connect_go.NewUnaryHandler(
		UsersServiceGetUserSubscriptionByUserIdProcedure,
		svc.GetUserSubscriptionByUserId,
		opts...,
	)
	usersServiceUpdateUserSubscriptionHandler := connect_go.NewUnaryHandler(
		UsersServiceUpdateUserSubscriptionProcedure,
		svc.UpdateUserSubscription,
		opts...,
	)
	usersServiceUpdateUserSubscriptionByUserIdHandler := connect_go.NewUnaryHandler(
		UsersServiceUpdateUserSubscriptionByUserIdProcedure,
		svc.UpdateUserSubscriptionByUserId,
		opts...,
	)
	usersServiceRemoveUserSubscriptionHandler := connect_go.NewUnaryHandler(
		UsersServiceRemoveUserSubscriptionProcedure,
		svc.RemoveUserSubscription,
		opts...,
	)
	usersServiceRemoveUserSubscriptionByUserIdHandler := connect_go.NewUnaryHandler(
		UsersServiceRemoveUserSubscriptionByUserIdProcedure,
		svc.RemoveUserSubscriptionByUserId,
		opts...,
	)
	usersServiceListUserSubscriptionsHandler := connect_go.NewUnaryHandler(
		UsersServiceListUserSubscriptionsProcedure,
		svc.ListUserSubscriptions,
		opts...,
	)
	usersServiceListUserSubscriptionsByUserIdHandler := connect_go.NewUnaryHandler(
		UsersServiceListUserSubscriptionsByUserIdProcedure,
		svc.ListUserSubscriptionsByUserId,
		opts...,
	)
	usersServiceListOrgSubscriptionsHandler := connect_go.NewUnaryHandler(
		UsersServiceListOrgSubscriptionsProcedure,
		svc.ListOrgSubscriptions,
		opts...,
	)
	usersServiceCreateAuthTokenHandler := connect_go.NewUnaryHandler(
		UsersServiceCreateAuthTokenProcedure,
		svc.CreateAuthToken,
		opts...,
	)
	usersServiceCreateAuthTokenByUserIdHandler := connect_go.NewUnaryHandler(
		UsersServiceCreateAuthTokenByUserIdProcedure,
		svc.CreateAuthTokenByUserId,
		opts...,
	)
	usersServiceListAuthTokensHandler := connect_go.NewUnaryHandler(
		UsersServiceListAuthTokensProcedure,
		svc.ListAuthTokens,
		opts...,
	)
	usersServiceListAuthTokensByUserIdHandler := connect_go.NewUnaryHandler(
		UsersServiceListAuthTokensByUserIdProcedure,
		svc.ListAuthTokensByUserId,
		opts...,
	)
	usersServiceSetAuthTokenExpirationHandler := connect_go.NewUnaryHandler(
		UsersServiceSetAuthTokenExpirationProcedure,
		svc.SetAuthTokenExpiration,
		opts...,
	)
	usersServiceSetAuthTokenExpirationByUserIdHandler := connect_go.NewUnaryHandler(
		UsersServiceSetAuthTokenExpirationByUserIdProcedure,
		svc.SetAuthTokenExpirationByUserId,
		opts...,
	)
	usersServiceDeleteAuthTokenHandler := connect_go.NewUnaryHandler(
		UsersServiceDeleteAuthTokenProcedure,
		svc.DeleteAuthToken,
		opts...,
	)
	usersServiceDeleteAuthTokenByUserIdHandler := connect_go.NewUnaryHandler(
		UsersServiceDeleteAuthTokenByUserIdProcedure,
		svc.DeleteAuthTokenByUserId,
		opts...,
	)
	usersServiceRefreshMfaLockoutHandler := connect_go.NewUnaryHandler(
		UsersServiceRefreshMfaLockoutProcedure,
		svc.RefreshMfaLockout,
		opts...,
	)
	usersServiceRefreshMfaLockoutByOrgIdHandler := connect_go.NewUnaryHandler(
		UsersServiceRefreshMfaLockoutByOrgIdProcedure,
		svc.RefreshMfaLockoutByOrgId,
		opts...,
	)
	usersServiceSetMfaTypeHandler := connect_go.NewUnaryHandler(
		UsersServiceSetMfaTypeProcedure,
		svc.SetMfaType,
		opts...,
	)
	usersServiceSetMyMfaTypeHandler := connect_go.NewUnaryHandler(
		UsersServiceSetMyMfaTypeProcedure,
		svc.SetMyMfaType,
		opts...,
	)
	usersServiceEnableUserMfaHandler := connect_go.NewUnaryHandler(
		UsersServiceEnableUserMfaProcedure,
		svc.EnableUserMfa,
		opts...,
	)
	usersServiceEnableMyUserMfaHandler := connect_go.NewUnaryHandler(
		UsersServiceEnableMyUserMfaProcedure,
		svc.EnableMyUserMfa,
		opts...,
	)
	usersServiceGetUserMfaInfoHandler := connect_go.NewUnaryHandler(
		UsersServiceGetUserMfaInfoProcedure,
		svc.GetUserMfaInfo,
		opts...,
	)
	usersServiceGetMyUserMfaInfoHandler := connect_go.NewUnaryHandler(
		UsersServiceGetMyUserMfaInfoProcedure,
		svc.GetMyUserMfaInfo,
		opts...,
	)
	usersServiceAddGroupedUserIPRestrictionsHandler := connect_go.NewUnaryHandler(
		UsersServiceAddGroupedUserIPRestrictionsProcedure,
		svc.AddGroupedUserIPRestrictions,
		opts...,
	)
	usersServiceRemoveGroupedUserIPRestrictionsHandler := connect_go.NewUnaryHandler(
		UsersServiceRemoveGroupedUserIPRestrictionsProcedure,
		svc.RemoveGroupedUserIPRestrictions,
		opts...,
	)
	usersServiceListUsersAllowedIpsHandler := connect_go.NewUnaryHandler(
		UsersServiceListUsersAllowedIpsProcedure,
		svc.ListUsersAllowedIps,
		opts...,
	)
	return "/api.v1alpha1.org.users.UsersService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UsersServiceCreateUserProcedure:
			usersServiceCreateUserHandler.ServeHTTP(w, r)
		case UsersServiceCreateDelegatedUserProcedure:
			usersServiceCreateDelegatedUserHandler.ServeHTTP(w, r)
		case UsersServiceGetMyUserProcedure:
			usersServiceGetMyUserHandler.ServeHTTP(w, r)
		case UsersServiceGetUserProcedure:
			usersServiceGetUserHandler.ServeHTTP(w, r)
		case UsersServiceGetUserByOrgIdProcedure:
			usersServiceGetUserByOrgIdHandler.ServeHTTP(w, r)
		case UsersServiceListAgentsProcedure:
			usersServiceListAgentsHandler.ServeHTTP(w, r)
		case UsersServiceListPublicUsersProcedure:
			usersServiceListPublicUsersHandler.ServeHTTP(w, r)
		case UsersServiceListUsersProcedure:
			usersServiceListUsersHandler.ServeHTTP(w, r)
		case UsersServiceListUsersByOrgIdProcedure:
			usersServiceListUsersByOrgIdHandler.ServeHTTP(w, r)
		case UsersServiceListUsersByRegionProcedure:
			usersServiceListUsersByRegionHandler.ServeHTTP(w, r)
		case UsersServiceUpdateMyUserProcedure:
			usersServiceUpdateMyUserHandler.ServeHTTP(w, r)
		case UsersServiceUpdateUserProcedure:
			usersServiceUpdateUserHandler.ServeHTTP(w, r)
		case UsersServiceUpdateUserLabelsProcedure:
			usersServiceUpdateUserLabelsHandler.ServeHTTP(w, r)
		case UsersServiceUpdateUserCallerIdProcedure:
			usersServiceUpdateUserCallerIdHandler.ServeHTTP(w, r)
		case UsersServiceUpdateUserDisabledProcedure:
			usersServiceUpdateUserDisabledHandler.ServeHTTP(w, r)
		case UsersServiceUpdateUserDisabledByOrgIdProcedure:
			usersServiceUpdateUserDisabledByOrgIdHandler.ServeHTTP(w, r)
		case UsersServiceGetMyUserPasswordResetLinkProcedure:
			usersServiceGetMyUserPasswordResetLinkHandler.ServeHTTP(w, r)
		case UsersServiceGetUserPasswordResetLinkProcedure:
			usersServiceGetUserPasswordResetLinkHandler.ServeHTTP(w, r)
		case UsersServiceGetUserPasswordResetLinkByOrgIdProcedure:
			usersServiceGetUserPasswordResetLinkByOrgIdHandler.ServeHTTP(w, r)
		case UsersServiceCreatePasswordResetLinkProcedure:
			usersServiceCreatePasswordResetLinkHandler.ServeHTTP(w, r)
		case UsersServiceCreatePasswordResetLinkByOrgIdProcedure:
			usersServiceCreatePasswordResetLinkByOrgIdHandler.ServeHTTP(w, r)
		case UsersServiceGetUserLoginInfoProcedure:
			usersServiceGetUserLoginInfoHandler.ServeHTTP(w, r)
		case UsersServiceGetUserEmailVerifiedProcedure:
			usersServiceGetUserEmailVerifiedHandler.ServeHTTP(w, r)
		case UsersServiceGetUserEmailVerifiedByOrgIdProcedure:
			usersServiceGetUserEmailVerifiedByOrgIdHandler.ServeHTTP(w, r)
		case UsersServiceResetMyPasswordProcedure:
			usersServiceResetMyPasswordHandler.ServeHTTP(w, r)
		case UsersServiceResetUserPasswordProcedure:
			usersServiceResetUserPasswordHandler.ServeHTTP(w, r)
		case UsersServiceResetUserPasswordByOrgIdProcedure:
			usersServiceResetUserPasswordByOrgIdHandler.ServeHTTP(w, r)
		case UsersServiceSendUserEmailVerificationProcedure:
			usersServiceSendUserEmailVerificationHandler.ServeHTTP(w, r)
		case UsersServiceSendUserEmailVerificationByOrgIdProcedure:
			usersServiceSendUserEmailVerificationByOrgIdHandler.ServeHTTP(w, r)
		case UsersServiceSendPasswordResetProcedure:
			usersServiceSendPasswordResetHandler.ServeHTTP(w, r)
		case UsersServiceSendPasswordResetByOrgIdProcedure:
			usersServiceSendPasswordResetByOrgIdHandler.ServeHTTP(w, r)
		case UsersServiceGetUserSessionDataProcedure:
			usersServiceGetUserSessionDataHandler.ServeHTTP(w, r)
		case UsersServiceGetAgentProfileGroupProcedure:
			usersServiceGetAgentProfileGroupHandler.ServeHTTP(w, r)
		case UsersServiceListAgentProfileGroupsProcedure:
			usersServiceListAgentProfileGroupsHandler.ServeHTTP(w, r)
		case UsersServiceUpdateAgentProfileGroupProcedure:
			usersServiceUpdateAgentProfileGroupHandler.ServeHTTP(w, r)
		case UsersServiceCreateAgentProfileGroupProcedure:
			usersServiceCreateAgentProfileGroupHandler.ServeHTTP(w, r)
		case UsersServiceDeleteAgentProfileGroupProcedure:
			usersServiceDeleteAgentProfileGroupHandler.ServeHTTP(w, r)
		case UsersServiceAssignAgentProfileGroupsProcedure:
			usersServiceAssignAgentProfileGroupsHandler.ServeHTTP(w, r)
		case UsersServiceAddUserSubscriptionProcedure:
			usersServiceAddUserSubscriptionHandler.ServeHTTP(w, r)
		case UsersServiceAddUserSubscriptionByUserIdProcedure:
			usersServiceAddUserSubscriptionByUserIdHandler.ServeHTTP(w, r)
		case UsersServiceGetUserSubscriptionProcedure:
			usersServiceGetUserSubscriptionHandler.ServeHTTP(w, r)
		case UsersServiceGetUserSubscriptionByUserIdProcedure:
			usersServiceGetUserSubscriptionByUserIdHandler.ServeHTTP(w, r)
		case UsersServiceUpdateUserSubscriptionProcedure:
			usersServiceUpdateUserSubscriptionHandler.ServeHTTP(w, r)
		case UsersServiceUpdateUserSubscriptionByUserIdProcedure:
			usersServiceUpdateUserSubscriptionByUserIdHandler.ServeHTTP(w, r)
		case UsersServiceRemoveUserSubscriptionProcedure:
			usersServiceRemoveUserSubscriptionHandler.ServeHTTP(w, r)
		case UsersServiceRemoveUserSubscriptionByUserIdProcedure:
			usersServiceRemoveUserSubscriptionByUserIdHandler.ServeHTTP(w, r)
		case UsersServiceListUserSubscriptionsProcedure:
			usersServiceListUserSubscriptionsHandler.ServeHTTP(w, r)
		case UsersServiceListUserSubscriptionsByUserIdProcedure:
			usersServiceListUserSubscriptionsByUserIdHandler.ServeHTTP(w, r)
		case UsersServiceListOrgSubscriptionsProcedure:
			usersServiceListOrgSubscriptionsHandler.ServeHTTP(w, r)
		case UsersServiceCreateAuthTokenProcedure:
			usersServiceCreateAuthTokenHandler.ServeHTTP(w, r)
		case UsersServiceCreateAuthTokenByUserIdProcedure:
			usersServiceCreateAuthTokenByUserIdHandler.ServeHTTP(w, r)
		case UsersServiceListAuthTokensProcedure:
			usersServiceListAuthTokensHandler.ServeHTTP(w, r)
		case UsersServiceListAuthTokensByUserIdProcedure:
			usersServiceListAuthTokensByUserIdHandler.ServeHTTP(w, r)
		case UsersServiceSetAuthTokenExpirationProcedure:
			usersServiceSetAuthTokenExpirationHandler.ServeHTTP(w, r)
		case UsersServiceSetAuthTokenExpirationByUserIdProcedure:
			usersServiceSetAuthTokenExpirationByUserIdHandler.ServeHTTP(w, r)
		case UsersServiceDeleteAuthTokenProcedure:
			usersServiceDeleteAuthTokenHandler.ServeHTTP(w, r)
		case UsersServiceDeleteAuthTokenByUserIdProcedure:
			usersServiceDeleteAuthTokenByUserIdHandler.ServeHTTP(w, r)
		case UsersServiceRefreshMfaLockoutProcedure:
			usersServiceRefreshMfaLockoutHandler.ServeHTTP(w, r)
		case UsersServiceRefreshMfaLockoutByOrgIdProcedure:
			usersServiceRefreshMfaLockoutByOrgIdHandler.ServeHTTP(w, r)
		case UsersServiceSetMfaTypeProcedure:
			usersServiceSetMfaTypeHandler.ServeHTTP(w, r)
		case UsersServiceSetMyMfaTypeProcedure:
			usersServiceSetMyMfaTypeHandler.ServeHTTP(w, r)
		case UsersServiceEnableUserMfaProcedure:
			usersServiceEnableUserMfaHandler.ServeHTTP(w, r)
		case UsersServiceEnableMyUserMfaProcedure:
			usersServiceEnableMyUserMfaHandler.ServeHTTP(w, r)
		case UsersServiceGetUserMfaInfoProcedure:
			usersServiceGetUserMfaInfoHandler.ServeHTTP(w, r)
		case UsersServiceGetMyUserMfaInfoProcedure:
			usersServiceGetMyUserMfaInfoHandler.ServeHTTP(w, r)
		case UsersServiceAddGroupedUserIPRestrictionsProcedure:
			usersServiceAddGroupedUserIPRestrictionsHandler.ServeHTTP(w, r)
		case UsersServiceRemoveGroupedUserIPRestrictionsProcedure:
			usersServiceRemoveGroupedUserIPRestrictionsHandler.ServeHTTP(w, r)
		case UsersServiceListUsersAllowedIpsProcedure:
			usersServiceListUsersAllowedIpsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUsersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUsersServiceHandler struct{}

func (UnimplementedUsersServiceHandler) CreateUser(context.Context, *connect_go.Request[users.CreateUserRequest]) (*connect_go.Response[users.CreateUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.CreateUser is not implemented"))
}

func (UnimplementedUsersServiceHandler) CreateDelegatedUser(context.Context, *connect_go.Request[users.CreateDelegatedUserRequest]) (*connect_go.Response[users.CreateDelegatedUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.CreateDelegatedUser is not implemented"))
}

func (UnimplementedUsersServiceHandler) GetMyUser(context.Context, *connect_go.Request[users.GetMyUserRequest]) (*connect_go.Response[users.GetMyUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.GetMyUser is not implemented"))
}

func (UnimplementedUsersServiceHandler) GetUser(context.Context, *connect_go.Request[users.GetUserRequest]) (*connect_go.Response[users.GetUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.GetUser is not implemented"))
}

func (UnimplementedUsersServiceHandler) GetUserByOrgId(context.Context, *connect_go.Request[users.GetUserByOrgIdRequest]) (*connect_go.Response[users.GetUserByOrgIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.GetUserByOrgId is not implemented"))
}

func (UnimplementedUsersServiceHandler) ListAgents(context.Context, *connect_go.Request[users.ListAgentsRequest], *connect_go.ServerStream[users.ListAgentsResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.ListAgents is not implemented"))
}

func (UnimplementedUsersServiceHandler) ListPublicUsers(context.Context, *connect_go.Request[users.ListPublicUsersRequest], *connect_go.ServerStream[users.ListPublicUsersResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.ListPublicUsers is not implemented"))
}

func (UnimplementedUsersServiceHandler) ListUsers(context.Context, *connect_go.Request[users.ListUsersRequest], *connect_go.ServerStream[users.ListUsersResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.ListUsers is not implemented"))
}

func (UnimplementedUsersServiceHandler) ListUsersByOrgId(context.Context, *connect_go.Request[users.ListUsersByOrgIdRequest], *connect_go.ServerStream[users.ListUsersByOrgIdResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.ListUsersByOrgId is not implemented"))
}

func (UnimplementedUsersServiceHandler) ListUsersByRegion(context.Context, *connect_go.Request[users.ListUsersByRegionRequest], *connect_go.ServerStream[users.ListUsersByRegionResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.ListUsersByRegion is not implemented"))
}

func (UnimplementedUsersServiceHandler) UpdateMyUser(context.Context, *connect_go.Request[users.UpdateMyUserRequest]) (*connect_go.Response[users.UpdateMyUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.UpdateMyUser is not implemented"))
}

func (UnimplementedUsersServiceHandler) UpdateUser(context.Context, *connect_go.Request[users.UpdateUserRequest]) (*connect_go.Response[users.UpdateUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.UpdateUser is not implemented"))
}

func (UnimplementedUsersServiceHandler) UpdateUserLabels(context.Context, *connect_go.Request[users.UpdateUserLabelsRequest]) (*connect_go.Response[users.UpdateUserLabelsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.UpdateUserLabels is not implemented"))
}

func (UnimplementedUsersServiceHandler) UpdateUserCallerId(context.Context, *connect_go.Request[users.UpdateUserCallerIdRequest]) (*connect_go.Response[users.UpdateUserCallerIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.UpdateUserCallerId is not implemented"))
}

func (UnimplementedUsersServiceHandler) UpdateUserDisabled(context.Context, *connect_go.Request[users.UpdateUserDisabledRequest]) (*connect_go.Response[users.UpdateUserDisabledResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.UpdateUserDisabled is not implemented"))
}

func (UnimplementedUsersServiceHandler) UpdateUserDisabledByOrgId(context.Context, *connect_go.Request[users.UpdateUserDisabledByOrgIdRequest]) (*connect_go.Response[users.UpdateUserDisabledByOrgIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.UpdateUserDisabledByOrgId is not implemented"))
}

func (UnimplementedUsersServiceHandler) GetMyUserPasswordResetLink(context.Context, *connect_go.Request[users.GetMyUserPasswordResetLinkRequest]) (*connect_go.Response[users.GetMyUserPasswordResetLinkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.GetMyUserPasswordResetLink is not implemented"))
}

func (UnimplementedUsersServiceHandler) GetUserPasswordResetLink(context.Context, *connect_go.Request[users.GetUserPasswordResetLinkRequest]) (*connect_go.Response[users.GetUserPasswordResetLinkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.GetUserPasswordResetLink is not implemented"))
}

func (UnimplementedUsersServiceHandler) GetUserPasswordResetLinkByOrgId(context.Context, *connect_go.Request[users.GetUserPasswordResetLinkByOrgIdRequest]) (*connect_go.Response[users.GetUserPasswordResetLinkByOrgIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.GetUserPasswordResetLinkByOrgId is not implemented"))
}

func (UnimplementedUsersServiceHandler) CreatePasswordResetLink(context.Context, *connect_go.Request[users.CreatePasswordResetLinkRequest]) (*connect_go.Response[users.CreatePasswordResetLinkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.CreatePasswordResetLink is not implemented"))
}

func (UnimplementedUsersServiceHandler) CreatePasswordResetLinkByOrgId(context.Context, *connect_go.Request[users.CreatePasswordResetLinkByOrgIdRequest]) (*connect_go.Response[users.CreatePasswordResetLinkByOrgIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.CreatePasswordResetLinkByOrgId is not implemented"))
}

func (UnimplementedUsersServiceHandler) GetUserLoginInfo(context.Context, *connect_go.Request[users.GetUserLoginInfoRequest]) (*connect_go.Response[users.GetUserLoginInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.GetUserLoginInfo is not implemented"))
}

func (UnimplementedUsersServiceHandler) GetUserEmailVerified(context.Context, *connect_go.Request[users.GetUserEmailVerifiedRequest]) (*connect_go.Response[users.GetUserEmailVerifiedResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.GetUserEmailVerified is not implemented"))
}

func (UnimplementedUsersServiceHandler) GetUserEmailVerifiedByOrgId(context.Context, *connect_go.Request[users.GetUserEmailVerifiedByOrgIdRequest]) (*connect_go.Response[users.GetUserEmailVerifiedByOrgIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.GetUserEmailVerifiedByOrgId is not implemented"))
}

func (UnimplementedUsersServiceHandler) ResetMyPassword(context.Context, *connect_go.Request[users.ResetMyPasswordRequest]) (*connect_go.Response[users.ResetMyPasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.ResetMyPassword is not implemented"))
}

func (UnimplementedUsersServiceHandler) ResetUserPassword(context.Context, *connect_go.Request[users.ResetUserPasswordRequest]) (*connect_go.Response[users.ResetUserPasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.ResetUserPassword is not implemented"))
}

func (UnimplementedUsersServiceHandler) ResetUserPasswordByOrgId(context.Context, *connect_go.Request[users.ResetUserPasswordByOrgIdRequest]) (*connect_go.Response[users.ResetUserPasswordByOrgIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.ResetUserPasswordByOrgId is not implemented"))
}

func (UnimplementedUsersServiceHandler) SendUserEmailVerification(context.Context, *connect_go.Request[users.SendUserEmailVerificationRequest]) (*connect_go.Response[users.SendUserEmailVerificationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.SendUserEmailVerification is not implemented"))
}

func (UnimplementedUsersServiceHandler) SendUserEmailVerificationByOrgId(context.Context, *connect_go.Request[users.SendUserEmailVerificationByOrgIdRequest]) (*connect_go.Response[users.SendUserEmailVerificationByOrgIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.SendUserEmailVerificationByOrgId is not implemented"))
}

func (UnimplementedUsersServiceHandler) SendPasswordReset(context.Context, *connect_go.Request[users.SendPasswordResetRequest]) (*connect_go.Response[users.SendPasswordResetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.SendPasswordReset is not implemented"))
}

func (UnimplementedUsersServiceHandler) SendPasswordResetByOrgId(context.Context, *connect_go.Request[users.SendPasswordResetByOrgIdRequest]) (*connect_go.Response[users.SendPasswordResetByOrgIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.SendPasswordResetByOrgId is not implemented"))
}

func (UnimplementedUsersServiceHandler) GetUserSessionData(context.Context, *connect_go.Request[users.GetUserSessionDataRequest]) (*connect_go.Response[users.GetUserSessionDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.GetUserSessionData is not implemented"))
}

func (UnimplementedUsersServiceHandler) GetAgentProfileGroup(context.Context, *connect_go.Request[users.GetAgentProfileGroupRequest]) (*connect_go.Response[users.GetAgentProfileGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.GetAgentProfileGroup is not implemented"))
}

func (UnimplementedUsersServiceHandler) ListAgentProfileGroups(context.Context, *connect_go.Request[users.ListAgentProfileGroupsRequest]) (*connect_go.Response[users.ListAgentProfileGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.ListAgentProfileGroups is not implemented"))
}

func (UnimplementedUsersServiceHandler) UpdateAgentProfileGroup(context.Context, *connect_go.Request[users.UpdateAgentProfileGroupRequest]) (*connect_go.Response[users.UpdateAgentProfileGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.UpdateAgentProfileGroup is not implemented"))
}

func (UnimplementedUsersServiceHandler) CreateAgentProfileGroup(context.Context, *connect_go.Request[users.CreateAgentProfileGroupRequest]) (*connect_go.Response[users.CreateAgentProfileGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.CreateAgentProfileGroup is not implemented"))
}

func (UnimplementedUsersServiceHandler) DeleteAgentProfileGroup(context.Context, *connect_go.Request[users.DeleteAgentProfileGroupRequest]) (*connect_go.Response[users.DeleteAgentProfileGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.DeleteAgentProfileGroup is not implemented"))
}

func (UnimplementedUsersServiceHandler) AssignAgentProfileGroups(context.Context, *connect_go.Request[users.AssignAgentProfileGroupsRequest]) (*connect_go.Response[users.AssignAgentProfileGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.AssignAgentProfileGroups is not implemented"))
}

func (UnimplementedUsersServiceHandler) AddUserSubscription(context.Context, *connect_go.Request[users.AddUserSubscriptionRequest]) (*connect_go.Response[users.AddUserSubscriptionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.AddUserSubscription is not implemented"))
}

func (UnimplementedUsersServiceHandler) AddUserSubscriptionByUserId(context.Context, *connect_go.Request[users.AddUserSubscriptionByUserIdRequest]) (*connect_go.Response[users.AddUserSubscriptionByUserIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.AddUserSubscriptionByUserId is not implemented"))
}

func (UnimplementedUsersServiceHandler) GetUserSubscription(context.Context, *connect_go.Request[users.GetUserSubscriptionRequest]) (*connect_go.Response[users.GetUserSubscriptionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.GetUserSubscription is not implemented"))
}

func (UnimplementedUsersServiceHandler) GetUserSubscriptionByUserId(context.Context, *connect_go.Request[users.GetUserSubscriptionByUserIdRequest]) (*connect_go.Response[users.GetUserSubscriptionByUserIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.GetUserSubscriptionByUserId is not implemented"))
}

func (UnimplementedUsersServiceHandler) UpdateUserSubscription(context.Context, *connect_go.Request[users.UpdateUserSubscriptionRequest]) (*connect_go.Response[users.UpdateUserSubscriptionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.UpdateUserSubscription is not implemented"))
}

func (UnimplementedUsersServiceHandler) UpdateUserSubscriptionByUserId(context.Context, *connect_go.Request[users.UpdateUserSubscriptionByUserIdRequest]) (*connect_go.Response[users.UpdateUserSubscriptionByUserIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.UpdateUserSubscriptionByUserId is not implemented"))
}

func (UnimplementedUsersServiceHandler) RemoveUserSubscription(context.Context, *connect_go.Request[users.RemoveUserSubscriptionRequest]) (*connect_go.Response[users.RemoveUserSubscriptionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.RemoveUserSubscription is not implemented"))
}

func (UnimplementedUsersServiceHandler) RemoveUserSubscriptionByUserId(context.Context, *connect_go.Request[users.RemoveUserSubscriptionByUserIdRequest]) (*connect_go.Response[users.RemoveUserSubscriptionByUserIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.RemoveUserSubscriptionByUserId is not implemented"))
}

func (UnimplementedUsersServiceHandler) ListUserSubscriptions(context.Context, *connect_go.Request[users.ListUserSubscriptionsRequest]) (*connect_go.Response[users.ListUserSubscriptionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.ListUserSubscriptions is not implemented"))
}

func (UnimplementedUsersServiceHandler) ListUserSubscriptionsByUserId(context.Context, *connect_go.Request[users.ListUserSubscriptionsByUserIdRequest]) (*connect_go.Response[users.ListUserSubscriptionsByUserIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.ListUserSubscriptionsByUserId is not implemented"))
}

func (UnimplementedUsersServiceHandler) ListOrgSubscriptions(context.Context, *connect_go.Request[users.ListOrgSubscriptionsRequest]) (*connect_go.Response[users.ListOrgSubscriptionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.ListOrgSubscriptions is not implemented"))
}

func (UnimplementedUsersServiceHandler) CreateAuthToken(context.Context, *connect_go.Request[users.CreateAuthTokenRequest]) (*connect_go.Response[users.CreateAuthTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.CreateAuthToken is not implemented"))
}

func (UnimplementedUsersServiceHandler) CreateAuthTokenByUserId(context.Context, *connect_go.Request[users.CreateAuthTokenByUserIdRequest]) (*connect_go.Response[users.CreateAuthTokenByUserIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.CreateAuthTokenByUserId is not implemented"))
}

func (UnimplementedUsersServiceHandler) ListAuthTokens(context.Context, *connect_go.Request[users.ListAuthTokensRequest]) (*connect_go.Response[users.ListAuthTokensResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.ListAuthTokens is not implemented"))
}

func (UnimplementedUsersServiceHandler) ListAuthTokensByUserId(context.Context, *connect_go.Request[users.ListAuthTokensByUserIdRequest]) (*connect_go.Response[users.ListAuthTokensByUserIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.ListAuthTokensByUserId is not implemented"))
}

func (UnimplementedUsersServiceHandler) SetAuthTokenExpiration(context.Context, *connect_go.Request[users.SetAuthTokenExpirationRequest]) (*connect_go.Response[users.SetAuthTokenExpirationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.SetAuthTokenExpiration is not implemented"))
}

func (UnimplementedUsersServiceHandler) SetAuthTokenExpirationByUserId(context.Context, *connect_go.Request[users.SetAuthTokenExpirationByUserIdRequest]) (*connect_go.Response[users.SetAuthTokenExpirationByUserIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.SetAuthTokenExpirationByUserId is not implemented"))
}

func (UnimplementedUsersServiceHandler) DeleteAuthToken(context.Context, *connect_go.Request[users.DeleteAuthTokenRequest]) (*connect_go.Response[users.DeleteAuthTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.DeleteAuthToken is not implemented"))
}

func (UnimplementedUsersServiceHandler) DeleteAuthTokenByUserId(context.Context, *connect_go.Request[users.DeleteAuthTokenByUserIdRequest]) (*connect_go.Response[users.DeleteAuthTokenByUserIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.DeleteAuthTokenByUserId is not implemented"))
}

func (UnimplementedUsersServiceHandler) RefreshMfaLockout(context.Context, *connect_go.Request[users.RefreshMfaLockoutRequest]) (*connect_go.Response[users.RefreshMfaLockoutResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.RefreshMfaLockout is not implemented"))
}

func (UnimplementedUsersServiceHandler) RefreshMfaLockoutByOrgId(context.Context, *connect_go.Request[users.RefreshMfaLockoutByOrgIdRequest]) (*connect_go.Response[users.RefreshMfaLockoutByOrgIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.RefreshMfaLockoutByOrgId is not implemented"))
}

func (UnimplementedUsersServiceHandler) SetMfaType(context.Context, *connect_go.Request[users.SetMfaTypeRequest]) (*connect_go.Response[users.SetMfaTypeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.SetMfaType is not implemented"))
}

func (UnimplementedUsersServiceHandler) SetMyMfaType(context.Context, *connect_go.Request[users.SetMyMfaTypeRequest]) (*connect_go.Response[users.SetMyMfaTypeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.SetMyMfaType is not implemented"))
}

func (UnimplementedUsersServiceHandler) EnableUserMfa(context.Context, *connect_go.Request[users.EnableUserMfaRequest]) (*connect_go.Response[users.EnableUserMfaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.EnableUserMfa is not implemented"))
}

func (UnimplementedUsersServiceHandler) EnableMyUserMfa(context.Context, *connect_go.Request[users.EnableMyUserMfaRequest]) (*connect_go.Response[users.EnableMyUserMfaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.EnableMyUserMfa is not implemented"))
}

func (UnimplementedUsersServiceHandler) GetUserMfaInfo(context.Context, *connect_go.Request[users.GetUserMfaInfoRequest]) (*connect_go.Response[users.GetUserMfaInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.GetUserMfaInfo is not implemented"))
}

func (UnimplementedUsersServiceHandler) GetMyUserMfaInfo(context.Context, *connect_go.Request[users.GetMyUserMfaInfoRequest]) (*connect_go.Response[users.GetMyUserMfaInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.GetMyUserMfaInfo is not implemented"))
}

func (UnimplementedUsersServiceHandler) AddGroupedUserIPRestrictions(context.Context, *connect_go.Request[users.AddGroupedUserIPRestrictionsRequest]) (*connect_go.Response[users.AddGroupedUserIPRestrictionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.AddGroupedUserIPRestrictions is not implemented"))
}

func (UnimplementedUsersServiceHandler) RemoveGroupedUserIPRestrictions(context.Context, *connect_go.Request[users.RemoveGroupedUserIPRestrictionsRequest]) (*connect_go.Response[users.RemoveGroupedUserIPRestrictionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.RemoveGroupedUserIPRestrictions is not implemented"))
}

func (UnimplementedUsersServiceHandler) ListUsersAllowedIps(context.Context, *connect_go.Request[users.ListUsersAllowedIpsRequest]) (*connect_go.Response[users.ListUsersAllowedIpsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.users.UsersService.ListUsersAllowedIps is not implemented"))
}
