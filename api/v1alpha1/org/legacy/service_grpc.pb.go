// Copyright (c) 2020, TCN Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1alpha1/org/legacy/service.proto

package legacy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrgLegacy_RegisterOrganization_FullMethodName = "/api.v1alpha1.org.legacy.OrgLegacy/RegisterOrganization"
)

// OrgLegacyClient is the client API for OrgLegacy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrgLegacyClient interface {
	// Registers a new organization
	RegisterOrganization(ctx context.Context, in *RegisterOrganizationRequest, opts ...grpc.CallOption) (*RegisterOrganizationResponse, error)
}

type orgLegacyClient struct {
	cc grpc.ClientConnInterface
}

func NewOrgLegacyClient(cc grpc.ClientConnInterface) OrgLegacyClient {
	return &orgLegacyClient{cc}
}

func (c *orgLegacyClient) RegisterOrganization(ctx context.Context, in *RegisterOrganizationRequest, opts ...grpc.CallOption) (*RegisterOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterOrganizationResponse)
	err := c.cc.Invoke(ctx, OrgLegacy_RegisterOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrgLegacyServer is the server API for OrgLegacy service.
// All implementations must embed UnimplementedOrgLegacyServer
// for forward compatibility.
type OrgLegacyServer interface {
	// Registers a new organization
	RegisterOrganization(context.Context, *RegisterOrganizationRequest) (*RegisterOrganizationResponse, error)
	mustEmbedUnimplementedOrgLegacyServer()
}

// UnimplementedOrgLegacyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrgLegacyServer struct{}

func (UnimplementedOrgLegacyServer) RegisterOrganization(context.Context, *RegisterOrganizationRequest) (*RegisterOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOrganization not implemented")
}
func (UnimplementedOrgLegacyServer) mustEmbedUnimplementedOrgLegacyServer() {}
func (UnimplementedOrgLegacyServer) testEmbeddedByValue()                   {}

// UnsafeOrgLegacyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrgLegacyServer will
// result in compilation errors.
type UnsafeOrgLegacyServer interface {
	mustEmbedUnimplementedOrgLegacyServer()
}

func RegisterOrgLegacyServer(s grpc.ServiceRegistrar, srv OrgLegacyServer) {
	// If the following call pancis, it indicates UnimplementedOrgLegacyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrgLegacy_ServiceDesc, srv)
}

func _OrgLegacy_RegisterOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgLegacyServer).RegisterOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrgLegacy_RegisterOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgLegacyServer).RegisterOrganization(ctx, req.(*RegisterOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrgLegacy_ServiceDesc is the grpc.ServiceDesc for OrgLegacy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrgLegacy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.org.legacy.OrgLegacy",
	HandlerType: (*OrgLegacyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterOrganization",
			Handler:    _OrgLegacy_RegisterOrganization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1alpha1/org/legacy/service.proto",
}
