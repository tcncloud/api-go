// Copyright (c) 2020, TCN Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1alpha1/org/legacy/service.proto

package legacyconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	legacy "github.com/tcncloud/api-go/api/v1alpha1/org/legacy"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// OrgLegacyName is the fully-qualified name of the OrgLegacy service.
	OrgLegacyName = "api.v1alpha1.org.legacy.OrgLegacy"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrgLegacyRegisterOrganizationProcedure is the fully-qualified name of the OrgLegacy's
	// RegisterOrganization RPC.
	OrgLegacyRegisterOrganizationProcedure = "/api.v1alpha1.org.legacy.OrgLegacy/RegisterOrganization"
)

// OrgLegacyClient is a client for the api.v1alpha1.org.legacy.OrgLegacy service.
type OrgLegacyClient interface {
	// Registers a new organization
	RegisterOrganization(context.Context, *connect_go.Request[legacy.RegisterOrganizationRequest]) (*connect_go.Response[legacy.RegisterOrganizationResponse], error)
}

// NewOrgLegacyClient constructs a client for the api.v1alpha1.org.legacy.OrgLegacy service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrgLegacyClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) OrgLegacyClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &orgLegacyClient{
		registerOrganization: connect_go.NewClient[legacy.RegisterOrganizationRequest, legacy.RegisterOrganizationResponse](
			httpClient,
			baseURL+OrgLegacyRegisterOrganizationProcedure,
			opts...,
		),
	}
}

// orgLegacyClient implements OrgLegacyClient.
type orgLegacyClient struct {
	registerOrganization *connect_go.Client[legacy.RegisterOrganizationRequest, legacy.RegisterOrganizationResponse]
}

// RegisterOrganization calls api.v1alpha1.org.legacy.OrgLegacy.RegisterOrganization.
func (c *orgLegacyClient) RegisterOrganization(ctx context.Context, req *connect_go.Request[legacy.RegisterOrganizationRequest]) (*connect_go.Response[legacy.RegisterOrganizationResponse], error) {
	return c.registerOrganization.CallUnary(ctx, req)
}

// OrgLegacyHandler is an implementation of the api.v1alpha1.org.legacy.OrgLegacy service.
type OrgLegacyHandler interface {
	// Registers a new organization
	RegisterOrganization(context.Context, *connect_go.Request[legacy.RegisterOrganizationRequest]) (*connect_go.Response[legacy.RegisterOrganizationResponse], error)
}

// NewOrgLegacyHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrgLegacyHandler(svc OrgLegacyHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	orgLegacyRegisterOrganizationHandler := connect_go.NewUnaryHandler(
		OrgLegacyRegisterOrganizationProcedure,
		svc.RegisterOrganization,
		opts...,
	)
	return "/api.v1alpha1.org.legacy.OrgLegacy/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrgLegacyRegisterOrganizationProcedure:
			orgLegacyRegisterOrganizationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrgLegacyHandler returns CodeUnimplemented from all methods.
type UnimplementedOrgLegacyHandler struct{}

func (UnimplementedOrgLegacyHandler) RegisterOrganization(context.Context, *connect_go.Request[legacy.RegisterOrganizationRequest]) (*connect_go.Response[legacy.RegisterOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.legacy.OrgLegacy.RegisterOrganization is not implemented"))
}
